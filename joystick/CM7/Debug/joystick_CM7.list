
joystick_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da50  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  0800dcf0  0800dcf0  0001dcf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e170  0800e170  00020298  2**0
                  CONTENTS
  4 .ARM          00000008  0800e170  0800e170  0001e170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e178  0800e178  00020298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e178  0800e178  0001e178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e17c  0800e17c  0001e17c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  24000000  0800e180  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  240001d8  0800e358  000201d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000238  0800e3b8  00020238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000954  24000298  0800e418  00020298  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  24000bec  0800e418  00020bec  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020298  2**0
                  CONTENTS, READONLY
 14 .comment      00000086  00000000  00000000  000202c6  2**0
                  CONTENTS, READONLY
 15 .debug_info   0001da4a  00000000  00000000  0002034c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00003253  00000000  00000000  0003dd96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001528  00000000  00000000  00040ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000104a  00000000  00000000  00042518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003d8f0  00000000  00000000  00043562  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001ac26  00000000  00000000  00080e52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0019671a  00000000  00000000  0009ba78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00006f18  00000000  00000000  00232194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000069  00000000  00000000  002390ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000298 	.word	0x24000298
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800dcd8 	.word	0x0800dcd8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400029c 	.word	0x2400029c
 80002dc:	0800dcd8 	.word	0x0800dcd8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a8 	b.w	8000a70 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9e08      	ldr	r6, [sp, #32]
 80007ae:	460d      	mov	r5, r1
 80007b0:	4604      	mov	r4, r0
 80007b2:	460f      	mov	r7, r1
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d14a      	bne.n	800084e <__udivmoddi4+0xa6>
 80007b8:	428a      	cmp	r2, r1
 80007ba:	4694      	mov	ip, r2
 80007bc:	d965      	bls.n	800088a <__udivmoddi4+0xe2>
 80007be:	fab2 f382 	clz	r3, r2
 80007c2:	b143      	cbz	r3, 80007d6 <__udivmoddi4+0x2e>
 80007c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80007c8:	f1c3 0220 	rsb	r2, r3, #32
 80007cc:	409f      	lsls	r7, r3
 80007ce:	fa20 f202 	lsr.w	r2, r0, r2
 80007d2:	4317      	orrs	r7, r2
 80007d4:	409c      	lsls	r4, r3
 80007d6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80007da:	fa1f f58c 	uxth.w	r5, ip
 80007de:	fbb7 f1fe 	udiv	r1, r7, lr
 80007e2:	0c22      	lsrs	r2, r4, #16
 80007e4:	fb0e 7711 	mls	r7, lr, r1, r7
 80007e8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80007ec:	fb01 f005 	mul.w	r0, r1, r5
 80007f0:	4290      	cmp	r0, r2
 80007f2:	d90a      	bls.n	800080a <__udivmoddi4+0x62>
 80007f4:	eb1c 0202 	adds.w	r2, ip, r2
 80007f8:	f101 37ff 	add.w	r7, r1, #4294967295
 80007fc:	f080 811c 	bcs.w	8000a38 <__udivmoddi4+0x290>
 8000800:	4290      	cmp	r0, r2
 8000802:	f240 8119 	bls.w	8000a38 <__udivmoddi4+0x290>
 8000806:	3902      	subs	r1, #2
 8000808:	4462      	add	r2, ip
 800080a:	1a12      	subs	r2, r2, r0
 800080c:	b2a4      	uxth	r4, r4
 800080e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000812:	fb0e 2210 	mls	r2, lr, r0, r2
 8000816:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800081a:	fb00 f505 	mul.w	r5, r0, r5
 800081e:	42a5      	cmp	r5, r4
 8000820:	d90a      	bls.n	8000838 <__udivmoddi4+0x90>
 8000822:	eb1c 0404 	adds.w	r4, ip, r4
 8000826:	f100 32ff 	add.w	r2, r0, #4294967295
 800082a:	f080 8107 	bcs.w	8000a3c <__udivmoddi4+0x294>
 800082e:	42a5      	cmp	r5, r4
 8000830:	f240 8104 	bls.w	8000a3c <__udivmoddi4+0x294>
 8000834:	4464      	add	r4, ip
 8000836:	3802      	subs	r0, #2
 8000838:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800083c:	1b64      	subs	r4, r4, r5
 800083e:	2100      	movs	r1, #0
 8000840:	b11e      	cbz	r6, 800084a <__udivmoddi4+0xa2>
 8000842:	40dc      	lsrs	r4, r3
 8000844:	2300      	movs	r3, #0
 8000846:	e9c6 4300 	strd	r4, r3, [r6]
 800084a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084e:	428b      	cmp	r3, r1
 8000850:	d908      	bls.n	8000864 <__udivmoddi4+0xbc>
 8000852:	2e00      	cmp	r6, #0
 8000854:	f000 80ed 	beq.w	8000a32 <__udivmoddi4+0x28a>
 8000858:	2100      	movs	r1, #0
 800085a:	e9c6 0500 	strd	r0, r5, [r6]
 800085e:	4608      	mov	r0, r1
 8000860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000864:	fab3 f183 	clz	r1, r3
 8000868:	2900      	cmp	r1, #0
 800086a:	d149      	bne.n	8000900 <__udivmoddi4+0x158>
 800086c:	42ab      	cmp	r3, r5
 800086e:	d302      	bcc.n	8000876 <__udivmoddi4+0xce>
 8000870:	4282      	cmp	r2, r0
 8000872:	f200 80f8 	bhi.w	8000a66 <__udivmoddi4+0x2be>
 8000876:	1a84      	subs	r4, r0, r2
 8000878:	eb65 0203 	sbc.w	r2, r5, r3
 800087c:	2001      	movs	r0, #1
 800087e:	4617      	mov	r7, r2
 8000880:	2e00      	cmp	r6, #0
 8000882:	d0e2      	beq.n	800084a <__udivmoddi4+0xa2>
 8000884:	e9c6 4700 	strd	r4, r7, [r6]
 8000888:	e7df      	b.n	800084a <__udivmoddi4+0xa2>
 800088a:	b902      	cbnz	r2, 800088e <__udivmoddi4+0xe6>
 800088c:	deff      	udf	#255	; 0xff
 800088e:	fab2 f382 	clz	r3, r2
 8000892:	2b00      	cmp	r3, #0
 8000894:	f040 8090 	bne.w	80009b8 <__udivmoddi4+0x210>
 8000898:	1a8a      	subs	r2, r1, r2
 800089a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800089e:	fa1f fe8c 	uxth.w	lr, ip
 80008a2:	2101      	movs	r1, #1
 80008a4:	fbb2 f5f7 	udiv	r5, r2, r7
 80008a8:	fb07 2015 	mls	r0, r7, r5, r2
 80008ac:	0c22      	lsrs	r2, r4, #16
 80008ae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80008b2:	fb0e f005 	mul.w	r0, lr, r5
 80008b6:	4290      	cmp	r0, r2
 80008b8:	d908      	bls.n	80008cc <__udivmoddi4+0x124>
 80008ba:	eb1c 0202 	adds.w	r2, ip, r2
 80008be:	f105 38ff 	add.w	r8, r5, #4294967295
 80008c2:	d202      	bcs.n	80008ca <__udivmoddi4+0x122>
 80008c4:	4290      	cmp	r0, r2
 80008c6:	f200 80cb 	bhi.w	8000a60 <__udivmoddi4+0x2b8>
 80008ca:	4645      	mov	r5, r8
 80008cc:	1a12      	subs	r2, r2, r0
 80008ce:	b2a4      	uxth	r4, r4
 80008d0:	fbb2 f0f7 	udiv	r0, r2, r7
 80008d4:	fb07 2210 	mls	r2, r7, r0, r2
 80008d8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008dc:	fb0e fe00 	mul.w	lr, lr, r0
 80008e0:	45a6      	cmp	lr, r4
 80008e2:	d908      	bls.n	80008f6 <__udivmoddi4+0x14e>
 80008e4:	eb1c 0404 	adds.w	r4, ip, r4
 80008e8:	f100 32ff 	add.w	r2, r0, #4294967295
 80008ec:	d202      	bcs.n	80008f4 <__udivmoddi4+0x14c>
 80008ee:	45a6      	cmp	lr, r4
 80008f0:	f200 80bb 	bhi.w	8000a6a <__udivmoddi4+0x2c2>
 80008f4:	4610      	mov	r0, r2
 80008f6:	eba4 040e 	sub.w	r4, r4, lr
 80008fa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80008fe:	e79f      	b.n	8000840 <__udivmoddi4+0x98>
 8000900:	f1c1 0720 	rsb	r7, r1, #32
 8000904:	408b      	lsls	r3, r1
 8000906:	fa22 fc07 	lsr.w	ip, r2, r7
 800090a:	ea4c 0c03 	orr.w	ip, ip, r3
 800090e:	fa05 f401 	lsl.w	r4, r5, r1
 8000912:	fa20 f307 	lsr.w	r3, r0, r7
 8000916:	40fd      	lsrs	r5, r7
 8000918:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800091c:	4323      	orrs	r3, r4
 800091e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000922:	fa1f fe8c 	uxth.w	lr, ip
 8000926:	fb09 5518 	mls	r5, r9, r8, r5
 800092a:	0c1c      	lsrs	r4, r3, #16
 800092c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000930:	fb08 f50e 	mul.w	r5, r8, lr
 8000934:	42a5      	cmp	r5, r4
 8000936:	fa02 f201 	lsl.w	r2, r2, r1
 800093a:	fa00 f001 	lsl.w	r0, r0, r1
 800093e:	d90b      	bls.n	8000958 <__udivmoddi4+0x1b0>
 8000940:	eb1c 0404 	adds.w	r4, ip, r4
 8000944:	f108 3aff 	add.w	sl, r8, #4294967295
 8000948:	f080 8088 	bcs.w	8000a5c <__udivmoddi4+0x2b4>
 800094c:	42a5      	cmp	r5, r4
 800094e:	f240 8085 	bls.w	8000a5c <__udivmoddi4+0x2b4>
 8000952:	f1a8 0802 	sub.w	r8, r8, #2
 8000956:	4464      	add	r4, ip
 8000958:	1b64      	subs	r4, r4, r5
 800095a:	b29d      	uxth	r5, r3
 800095c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000960:	fb09 4413 	mls	r4, r9, r3, r4
 8000964:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000968:	fb03 fe0e 	mul.w	lr, r3, lr
 800096c:	45a6      	cmp	lr, r4
 800096e:	d908      	bls.n	8000982 <__udivmoddi4+0x1da>
 8000970:	eb1c 0404 	adds.w	r4, ip, r4
 8000974:	f103 35ff 	add.w	r5, r3, #4294967295
 8000978:	d26c      	bcs.n	8000a54 <__udivmoddi4+0x2ac>
 800097a:	45a6      	cmp	lr, r4
 800097c:	d96a      	bls.n	8000a54 <__udivmoddi4+0x2ac>
 800097e:	3b02      	subs	r3, #2
 8000980:	4464      	add	r4, ip
 8000982:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000986:	fba3 9502 	umull	r9, r5, r3, r2
 800098a:	eba4 040e 	sub.w	r4, r4, lr
 800098e:	42ac      	cmp	r4, r5
 8000990:	46c8      	mov	r8, r9
 8000992:	46ae      	mov	lr, r5
 8000994:	d356      	bcc.n	8000a44 <__udivmoddi4+0x29c>
 8000996:	d053      	beq.n	8000a40 <__udivmoddi4+0x298>
 8000998:	b156      	cbz	r6, 80009b0 <__udivmoddi4+0x208>
 800099a:	ebb0 0208 	subs.w	r2, r0, r8
 800099e:	eb64 040e 	sbc.w	r4, r4, lr
 80009a2:	fa04 f707 	lsl.w	r7, r4, r7
 80009a6:	40ca      	lsrs	r2, r1
 80009a8:	40cc      	lsrs	r4, r1
 80009aa:	4317      	orrs	r7, r2
 80009ac:	e9c6 7400 	strd	r7, r4, [r6]
 80009b0:	4618      	mov	r0, r3
 80009b2:	2100      	movs	r1, #0
 80009b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b8:	f1c3 0120 	rsb	r1, r3, #32
 80009bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80009c0:	fa20 f201 	lsr.w	r2, r0, r1
 80009c4:	fa25 f101 	lsr.w	r1, r5, r1
 80009c8:	409d      	lsls	r5, r3
 80009ca:	432a      	orrs	r2, r5
 80009cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009d0:	fa1f fe8c 	uxth.w	lr, ip
 80009d4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009d8:	fb07 1510 	mls	r5, r7, r0, r1
 80009dc:	0c11      	lsrs	r1, r2, #16
 80009de:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80009e2:	fb00 f50e 	mul.w	r5, r0, lr
 80009e6:	428d      	cmp	r5, r1
 80009e8:	fa04 f403 	lsl.w	r4, r4, r3
 80009ec:	d908      	bls.n	8000a00 <__udivmoddi4+0x258>
 80009ee:	eb1c 0101 	adds.w	r1, ip, r1
 80009f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80009f6:	d22f      	bcs.n	8000a58 <__udivmoddi4+0x2b0>
 80009f8:	428d      	cmp	r5, r1
 80009fa:	d92d      	bls.n	8000a58 <__udivmoddi4+0x2b0>
 80009fc:	3802      	subs	r0, #2
 80009fe:	4461      	add	r1, ip
 8000a00:	1b49      	subs	r1, r1, r5
 8000a02:	b292      	uxth	r2, r2
 8000a04:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a08:	fb07 1115 	mls	r1, r7, r5, r1
 8000a0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a10:	fb05 f10e 	mul.w	r1, r5, lr
 8000a14:	4291      	cmp	r1, r2
 8000a16:	d908      	bls.n	8000a2a <__udivmoddi4+0x282>
 8000a18:	eb1c 0202 	adds.w	r2, ip, r2
 8000a1c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a20:	d216      	bcs.n	8000a50 <__udivmoddi4+0x2a8>
 8000a22:	4291      	cmp	r1, r2
 8000a24:	d914      	bls.n	8000a50 <__udivmoddi4+0x2a8>
 8000a26:	3d02      	subs	r5, #2
 8000a28:	4462      	add	r2, ip
 8000a2a:	1a52      	subs	r2, r2, r1
 8000a2c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a30:	e738      	b.n	80008a4 <__udivmoddi4+0xfc>
 8000a32:	4631      	mov	r1, r6
 8000a34:	4630      	mov	r0, r6
 8000a36:	e708      	b.n	800084a <__udivmoddi4+0xa2>
 8000a38:	4639      	mov	r1, r7
 8000a3a:	e6e6      	b.n	800080a <__udivmoddi4+0x62>
 8000a3c:	4610      	mov	r0, r2
 8000a3e:	e6fb      	b.n	8000838 <__udivmoddi4+0x90>
 8000a40:	4548      	cmp	r0, r9
 8000a42:	d2a9      	bcs.n	8000998 <__udivmoddi4+0x1f0>
 8000a44:	ebb9 0802 	subs.w	r8, r9, r2
 8000a48:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a4c:	3b01      	subs	r3, #1
 8000a4e:	e7a3      	b.n	8000998 <__udivmoddi4+0x1f0>
 8000a50:	4645      	mov	r5, r8
 8000a52:	e7ea      	b.n	8000a2a <__udivmoddi4+0x282>
 8000a54:	462b      	mov	r3, r5
 8000a56:	e794      	b.n	8000982 <__udivmoddi4+0x1da>
 8000a58:	4640      	mov	r0, r8
 8000a5a:	e7d1      	b.n	8000a00 <__udivmoddi4+0x258>
 8000a5c:	46d0      	mov	r8, sl
 8000a5e:	e77b      	b.n	8000958 <__udivmoddi4+0x1b0>
 8000a60:	3d02      	subs	r5, #2
 8000a62:	4462      	add	r2, ip
 8000a64:	e732      	b.n	80008cc <__udivmoddi4+0x124>
 8000a66:	4608      	mov	r0, r1
 8000a68:	e70a      	b.n	8000880 <__udivmoddi4+0xd8>
 8000a6a:	4464      	add	r4, ip
 8000a6c:	3802      	subs	r0, #2
 8000a6e:	e742      	b.n	80008f6 <__udivmoddi4+0x14e>

08000a70 <__aeabi_idiv0>:
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a78:	4b3d      	ldr	r3, [pc, #244]	; (8000b70 <SystemInit+0xfc>)
 8000a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a7e:	4a3c      	ldr	r2, [pc, #240]	; (8000b70 <SystemInit+0xfc>)
 8000a80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000a88:	4b39      	ldr	r3, [pc, #228]	; (8000b70 <SystemInit+0xfc>)
 8000a8a:	691b      	ldr	r3, [r3, #16]
 8000a8c:	4a38      	ldr	r2, [pc, #224]	; (8000b70 <SystemInit+0xfc>)
 8000a8e:	f043 0310 	orr.w	r3, r3, #16
 8000a92:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a94:	4b37      	ldr	r3, [pc, #220]	; (8000b74 <SystemInit+0x100>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f003 030f 	and.w	r3, r3, #15
 8000a9c:	2b06      	cmp	r3, #6
 8000a9e:	d807      	bhi.n	8000ab0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000aa0:	4b34      	ldr	r3, [pc, #208]	; (8000b74 <SystemInit+0x100>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f023 030f 	bic.w	r3, r3, #15
 8000aa8:	4a32      	ldr	r2, [pc, #200]	; (8000b74 <SystemInit+0x100>)
 8000aaa:	f043 0307 	orr.w	r3, r3, #7
 8000aae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ab0:	4b31      	ldr	r3, [pc, #196]	; (8000b78 <SystemInit+0x104>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a30      	ldr	r2, [pc, #192]	; (8000b78 <SystemInit+0x104>)
 8000ab6:	f043 0301 	orr.w	r3, r3, #1
 8000aba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000abc:	4b2e      	ldr	r3, [pc, #184]	; (8000b78 <SystemInit+0x104>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ac2:	4b2d      	ldr	r3, [pc, #180]	; (8000b78 <SystemInit+0x104>)
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	492c      	ldr	r1, [pc, #176]	; (8000b78 <SystemInit+0x104>)
 8000ac8:	4b2c      	ldr	r3, [pc, #176]	; (8000b7c <SystemInit+0x108>)
 8000aca:	4013      	ands	r3, r2
 8000acc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ace:	4b29      	ldr	r3, [pc, #164]	; (8000b74 <SystemInit+0x100>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f003 0308 	and.w	r3, r3, #8
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d007      	beq.n	8000aea <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ada:	4b26      	ldr	r3, [pc, #152]	; (8000b74 <SystemInit+0x100>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f023 030f 	bic.w	r3, r3, #15
 8000ae2:	4a24      	ldr	r2, [pc, #144]	; (8000b74 <SystemInit+0x100>)
 8000ae4:	f043 0307 	orr.w	r3, r3, #7
 8000ae8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000aea:	4b23      	ldr	r3, [pc, #140]	; (8000b78 <SystemInit+0x104>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <SystemInit+0x104>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <SystemInit+0x104>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <SystemInit+0x104>)
 8000afe:	4a20      	ldr	r2, [pc, #128]	; (8000b80 <SystemInit+0x10c>)
 8000b00:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <SystemInit+0x104>)
 8000b04:	4a1f      	ldr	r2, [pc, #124]	; (8000b84 <SystemInit+0x110>)
 8000b06:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <SystemInit+0x104>)
 8000b0a:	4a1f      	ldr	r2, [pc, #124]	; (8000b88 <SystemInit+0x114>)
 8000b0c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b0e:	4b1a      	ldr	r3, [pc, #104]	; (8000b78 <SystemInit+0x104>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b14:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <SystemInit+0x104>)
 8000b16:	4a1c      	ldr	r2, [pc, #112]	; (8000b88 <SystemInit+0x114>)
 8000b18:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b1a:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <SystemInit+0x104>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <SystemInit+0x104>)
 8000b22:	4a19      	ldr	r2, [pc, #100]	; (8000b88 <SystemInit+0x114>)
 8000b24:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b26:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <SystemInit+0x104>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <SystemInit+0x104>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a11      	ldr	r2, [pc, #68]	; (8000b78 <SystemInit+0x104>)
 8000b32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b36:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <SystemInit+0x104>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b3e:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <SystemInit+0x118>)
 8000b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b42:	4a12      	ldr	r2, [pc, #72]	; (8000b8c <SystemInit+0x118>)
 8000b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b48:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b4a:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <SystemInit+0x11c>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <SystemInit+0x120>)
 8000b50:	4013      	ands	r3, r2
 8000b52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b56:	d202      	bcs.n	8000b5e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b58:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <SystemInit+0x124>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b5e:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <SystemInit+0x128>)
 8000b60:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b64:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000ed00 	.word	0xe000ed00
 8000b74:	52002000 	.word	0x52002000
 8000b78:	58024400 	.word	0x58024400
 8000b7c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b80:	02020200 	.word	0x02020200
 8000b84:	01ff0000 	.word	0x01ff0000
 8000b88:	01010280 	.word	0x01010280
 8000b8c:	580000c0 	.word	0x580000c0
 8000b90:	5c001000 	.word	0x5c001000
 8000b94:	ffff0000 	.word	0xffff0000
 8000b98:	51008108 	.word	0x51008108
 8000b9c:	52004000 	.word	0x52004000

08000ba0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af04      	add	r7, sp, #16
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000ba6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000baa:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000bac:	bf00      	nop
 8000bae:	4b94      	ldr	r3, [pc, #592]	; (8000e00 <main+0x260>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d004      	beq.n	8000bc4 <main+0x24>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	1e5a      	subs	r2, r3, #1
 8000bbe:	607a      	str	r2, [r7, #4]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	dcf4      	bgt.n	8000bae <main+0xe>
  if ( timeout < 0 )
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	da01      	bge.n	8000bce <main+0x2e>
  {
  Error_Handler();
 8000bca:	f000 fbf9 	bl	80013c0 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bce:	f000 ff81 	bl	8001ad4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd2:	f000 f939 	bl	8000e48 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000bd6:	f000 f9b5 	bl	8000f44 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000bda:	4b89      	ldr	r3, [pc, #548]	; (8000e00 <main+0x260>)
 8000bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be0:	4a87      	ldr	r2, [pc, #540]	; (8000e00 <main+0x260>)
 8000be2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000be6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bea:	4b85      	ldr	r3, [pc, #532]	; (8000e00 <main+0x260>)
 8000bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bf4:	603b      	str	r3, [r7, #0]
 8000bf6:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	f003 fa33 	bl	8004064 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000bfe:	2100      	movs	r1, #0
 8000c00:	2000      	movs	r0, #0
 8000c02:	f003 fa49 	bl	8004098 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000c06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c0a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000c0c:	bf00      	nop
 8000c0e:	4b7c      	ldr	r3, [pc, #496]	; (8000e00 <main+0x260>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d104      	bne.n	8000c24 <main+0x84>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	1e5a      	subs	r2, r3, #1
 8000c1e:	607a      	str	r2, [r7, #4]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	dcf4      	bgt.n	8000c0e <main+0x6e>
if ( timeout < 0 )
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	da01      	bge.n	8000c2e <main+0x8e>
{
Error_Handler();
 8000c2a:	f000 fbc9 	bl	80013c0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c2e:	f000 fb61 	bl	80012f4 <MX_GPIO_Init>
  MX_ETH_Init();
 8000c32:	f000 fa95 	bl	8001160 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000c36:	f000 fadf 	bl	80011f8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000c3a:	f000 fb29 	bl	8001290 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000c3e:	f000 f9b1 	bl	8000fa4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000c42:	f000 fa27 	bl	8001094 <MX_ADC2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HAL_ADC_Start(&hadc1);
 8000c46:	486f      	ldr	r0, [pc, #444]	; (8000e04 <main+0x264>)
 8000c48:	f001 fb9e 	bl	8002388 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c50:	486c      	ldr	r0, [pc, #432]	; (8000e04 <main+0x264>)
 8000c52:	f001 fc63 	bl	800251c <HAL_ADC_PollForConversion>
    x_adc = HAL_ADC_GetValue(&hadc1);
 8000c56:	486b      	ldr	r0, [pc, #428]	; (8000e04 <main+0x264>)
 8000c58:	f001 fd54 	bl	8002704 <HAL_ADC_GetValue>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	b29a      	uxth	r2, r3
 8000c60:	4b69      	ldr	r3, [pc, #420]	; (8000e08 <main+0x268>)
 8000c62:	801a      	strh	r2, [r3, #0]
    HAL_Delay(1);
 8000c64:	2001      	movs	r0, #1
 8000c66:	f000 ffc7 	bl	8001bf8 <HAL_Delay>

    HAL_ADC_Start(&hadc2);
 8000c6a:	4868      	ldr	r0, [pc, #416]	; (8000e0c <main+0x26c>)
 8000c6c:	f001 fb8c 	bl	8002388 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8000c70:	f04f 31ff 	mov.w	r1, #4294967295
 8000c74:	4865      	ldr	r0, [pc, #404]	; (8000e0c <main+0x26c>)
 8000c76:	f001 fc51 	bl	800251c <HAL_ADC_PollForConversion>
    y_adc = HAL_ADC_GetValue(&hadc2);
 8000c7a:	4864      	ldr	r0, [pc, #400]	; (8000e0c <main+0x26c>)
 8000c7c:	f001 fd42 	bl	8002704 <HAL_ADC_GetValue>
 8000c80:	4603      	mov	r3, r0
 8000c82:	b29a      	uxth	r2, r3
 8000c84:	4b62      	ldr	r3, [pc, #392]	; (8000e10 <main+0x270>)
 8000c86:	801a      	strh	r2, [r3, #0]
    HAL_Delay(1);
 8000c88:	2001      	movs	r0, #1
 8000c8a:	f000 ffb5 	bl	8001bf8 <HAL_Delay>

    x_axis = x_adc / 1000;
 8000c8e:	4b5e      	ldr	r3, [pc, #376]	; (8000e08 <main+0x268>)
 8000c90:	881b      	ldrh	r3, [r3, #0]
 8000c92:	4a60      	ldr	r2, [pc, #384]	; (8000e14 <main+0x274>)
 8000c94:	fba2 2303 	umull	r2, r3, r2, r3
 8000c98:	099b      	lsrs	r3, r3, #6
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	ee07 3a90 	vmov	s15, r3
 8000ca0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ca4:	4b5c      	ldr	r3, [pc, #368]	; (8000e18 <main+0x278>)
 8000ca6:	edc3 7a00 	vstr	s15, [r3]
    y_axis = y_adc / 1000;
 8000caa:	4b59      	ldr	r3, [pc, #356]	; (8000e10 <main+0x270>)
 8000cac:	881b      	ldrh	r3, [r3, #0]
 8000cae:	4a59      	ldr	r2, [pc, #356]	; (8000e14 <main+0x274>)
 8000cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8000cb4:	099b      	lsrs	r3, r3, #6
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	ee07 3a90 	vmov	s15, r3
 8000cbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cc0:	4b56      	ldr	r3, [pc, #344]	; (8000e1c <main+0x27c>)
 8000cc2:	edc3 7a00 	vstr	s15, [r3]
    in_min = 35;
 8000cc6:	4b56      	ldr	r3, [pc, #344]	; (8000e20 <main+0x280>)
 8000cc8:	2223      	movs	r2, #35	; 0x23
 8000cca:	601a      	str	r2, [r3, #0]
    in_max = 65;
 8000ccc:	4b55      	ldr	r3, [pc, #340]	; (8000e24 <main+0x284>)
 8000cce:	2241      	movs	r2, #65	; 0x41
 8000cd0:	601a      	str	r2, [r3, #0]
    out_min = -1;
 8000cd2:	4b55      	ldr	r3, [pc, #340]	; (8000e28 <main+0x288>)
 8000cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd8:	601a      	str	r2, [r3, #0]
    out_max = 1;
 8000cda:	4b54      	ldr	r3, [pc, #336]	; (8000e2c <main+0x28c>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	601a      	str	r2, [r3, #0]

    x_map = (x_axis - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000ce0:	4b4d      	ldr	r3, [pc, #308]	; (8000e18 <main+0x278>)
 8000ce2:	ed93 7a00 	vldr	s14, [r3]
 8000ce6:	4b4e      	ldr	r3, [pc, #312]	; (8000e20 <main+0x280>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	ee07 3a90 	vmov	s15, r3
 8000cee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cf2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000cf6:	4b4d      	ldr	r3, [pc, #308]	; (8000e2c <main+0x28c>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	4b4b      	ldr	r3, [pc, #300]	; (8000e28 <main+0x288>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	1ad3      	subs	r3, r2, r3
 8000d00:	ee07 3a90 	vmov	s15, r3
 8000d04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d08:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000d0c:	4b45      	ldr	r3, [pc, #276]	; (8000e24 <main+0x284>)
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	4b43      	ldr	r3, [pc, #268]	; (8000e20 <main+0x280>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	ee07 3a90 	vmov	s15, r3
 8000d1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000d22:	4b41      	ldr	r3, [pc, #260]	; (8000e28 <main+0x288>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	ee07 3a90 	vmov	s15, r3
 8000d2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d32:	4b3f      	ldr	r3, [pc, #252]	; (8000e30 <main+0x290>)
 8000d34:	edc3 7a00 	vstr	s15, [r3]
    y_map = (y_axis - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000d38:	4b38      	ldr	r3, [pc, #224]	; (8000e1c <main+0x27c>)
 8000d3a:	ed93 7a00 	vldr	s14, [r3]
 8000d3e:	4b38      	ldr	r3, [pc, #224]	; (8000e20 <main+0x280>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	ee07 3a90 	vmov	s15, r3
 8000d46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d4a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d4e:	4b37      	ldr	r3, [pc, #220]	; (8000e2c <main+0x28c>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	4b35      	ldr	r3, [pc, #212]	; (8000e28 <main+0x288>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	1ad3      	subs	r3, r2, r3
 8000d58:	ee07 3a90 	vmov	s15, r3
 8000d5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d60:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000d64:	4b2f      	ldr	r3, [pc, #188]	; (8000e24 <main+0x284>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	4b2d      	ldr	r3, [pc, #180]	; (8000e20 <main+0x280>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	ee07 3a90 	vmov	s15, r3
 8000d72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000d7a:	4b2b      	ldr	r3, [pc, #172]	; (8000e28 <main+0x288>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	ee07 3a90 	vmov	s15, r3
 8000d82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d8a:	4b2a      	ldr	r3, [pc, #168]	; (8000e34 <main+0x294>)
 8000d8c:	edc3 7a00 	vstr	s15, [r3]

    if(x_map < -1){
 8000d90:	4b27      	ldr	r3, [pc, #156]	; (8000e30 <main+0x290>)
 8000d92:	edd3 7a00 	vldr	s15, [r3]
 8000d96:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000d9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000da2:	d502      	bpl.n	8000daa <main+0x20a>
    	x_map = -1;
 8000da4:	4b22      	ldr	r3, [pc, #136]	; (8000e30 <main+0x290>)
 8000da6:	4a24      	ldr	r2, [pc, #144]	; (8000e38 <main+0x298>)
 8000da8:	601a      	str	r2, [r3, #0]
    }
    if(y_map < -1){
 8000daa:	4b22      	ldr	r3, [pc, #136]	; (8000e34 <main+0x294>)
 8000dac:	edd3 7a00 	vldr	s15, [r3]
 8000db0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000db4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dbc:	d502      	bpl.n	8000dc4 <main+0x224>
        y_map = -1;
 8000dbe:	4b1d      	ldr	r3, [pc, #116]	; (8000e34 <main+0x294>)
 8000dc0:	4a1d      	ldr	r2, [pc, #116]	; (8000e38 <main+0x298>)
 8000dc2:	601a      	str	r2, [r3, #0]
    }

    snprintf(msg, 100, "CH_1: %.2f, CH_2: %.2f \r\n", x_map, y_map);
 8000dc4:	4b1a      	ldr	r3, [pc, #104]	; (8000e30 <main+0x290>)
 8000dc6:	edd3 7a00 	vldr	s15, [r3]
 8000dca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dce:	4b19      	ldr	r3, [pc, #100]	; (8000e34 <main+0x294>)
 8000dd0:	edd3 6a00 	vldr	s13, [r3]
 8000dd4:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000dd8:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000ddc:	ed8d 7b00 	vstr	d7, [sp]
 8000de0:	4a16      	ldr	r2, [pc, #88]	; (8000e3c <main+0x29c>)
 8000de2:	2164      	movs	r1, #100	; 0x64
 8000de4:	4816      	ldr	r0, [pc, #88]	; (8000e40 <main+0x2a0>)
 8000de6:	f009 fb6f 	bl	800a4c8 <sniprintf>
    HAL_UART_Transmit(&huart3,msg,sizeof(msg),10);// Sending in normal mode
 8000dea:	230a      	movs	r3, #10
 8000dec:	2264      	movs	r2, #100	; 0x64
 8000dee:	4914      	ldr	r1, [pc, #80]	; (8000e40 <main+0x2a0>)
 8000df0:	4814      	ldr	r0, [pc, #80]	; (8000e44 <main+0x2a4>)
 8000df2:	f007 f84b 	bl	8007e8c <HAL_UART_Transmit>
    HAL_Delay(10);
 8000df6:	200a      	movs	r0, #10
 8000df8:	f000 fefe 	bl	8001bf8 <HAL_Delay>
    HAL_ADC_Start(&hadc1);
 8000dfc:	e723      	b.n	8000c46 <main+0xa6>
 8000dfe:	bf00      	nop
 8000e00:	58024400 	.word	0x58024400
 8000e04:	240002ec 	.word	0x240002ec
 8000e08:	24000a04 	.word	0x24000a04
 8000e0c:	24000350 	.word	0x24000350
 8000e10:	24000a06 	.word	0x24000a06
 8000e14:	10624dd3 	.word	0x10624dd3
 8000e18:	24000a08 	.word	0x24000a08
 8000e1c:	24000a0c 	.word	0x24000a0c
 8000e20:	24000a74 	.word	0x24000a74
 8000e24:	24000a78 	.word	0x24000a78
 8000e28:	24000a7c 	.word	0x24000a7c
 8000e2c:	24000a80 	.word	0x24000a80
 8000e30:	24000a84 	.word	0x24000a84
 8000e34:	24000a88 	.word	0x24000a88
 8000e38:	bf800000 	.word	0xbf800000
 8000e3c:	0800dcf0 	.word	0x0800dcf0
 8000e40:	24000a10 	.word	0x24000a10
 8000e44:	24000464 	.word	0x24000464

08000e48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b09c      	sub	sp, #112	; 0x70
 8000e4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e52:	224c      	movs	r2, #76	; 0x4c
 8000e54:	2100      	movs	r1, #0
 8000e56:	4618      	mov	r0, r3
 8000e58:	f009 fbcd 	bl	800a5f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e5c:	1d3b      	adds	r3, r7, #4
 8000e5e:	2220      	movs	r2, #32
 8000e60:	2100      	movs	r1, #0
 8000e62:	4618      	mov	r0, r3
 8000e64:	f009 fbc7 	bl	800a5f6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000e68:	2004      	movs	r0, #4
 8000e6a:	f003 fa71 	bl	8004350 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e6e:	2300      	movs	r3, #0
 8000e70:	603b      	str	r3, [r7, #0]
 8000e72:	4b32      	ldr	r3, [pc, #200]	; (8000f3c <SystemClock_Config+0xf4>)
 8000e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e76:	4a31      	ldr	r2, [pc, #196]	; (8000f3c <SystemClock_Config+0xf4>)
 8000e78:	f023 0301 	bic.w	r3, r3, #1
 8000e7c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000e7e:	4b2f      	ldr	r3, [pc, #188]	; (8000f3c <SystemClock_Config+0xf4>)
 8000e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	603b      	str	r3, [r7, #0]
 8000e88:	4b2d      	ldr	r3, [pc, #180]	; (8000f40 <SystemClock_Config+0xf8>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e90:	4a2b      	ldr	r2, [pc, #172]	; (8000f40 <SystemClock_Config+0xf8>)
 8000e92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e96:	6193      	str	r3, [r2, #24]
 8000e98:	4b29      	ldr	r3, [pc, #164]	; (8000f40 <SystemClock_Config+0xf8>)
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ea0:	603b      	str	r3, [r7, #0]
 8000ea2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ea4:	bf00      	nop
 8000ea6:	4b26      	ldr	r3, [pc, #152]	; (8000f40 <SystemClock_Config+0xf8>)
 8000ea8:	699b      	ldr	r3, [r3, #24]
 8000eaa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000eae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000eb2:	d1f8      	bne.n	8000ea6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000eb8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ebc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000eca:	2312      	movs	r3, #18
 8000ecc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000eda:	230c      	movs	r3, #12
 8000edc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000ee2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ee6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eec:	4618      	mov	r0, r3
 8000eee:	f003 fa99 	bl	8004424 <HAL_RCC_OscConfig>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000ef8:	f000 fa62 	bl	80013c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000efc:	233f      	movs	r3, #63	; 0x3f
 8000efe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f00:	2303      	movs	r3, #3
 8000f02:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f04:	2300      	movs	r3, #0
 8000f06:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f0c:	2340      	movs	r3, #64	; 0x40
 8000f0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f10:	2340      	movs	r3, #64	; 0x40
 8000f12:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f18:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f1a:	2340      	movs	r3, #64	; 0x40
 8000f1c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	2101      	movs	r1, #1
 8000f22:	4618      	mov	r0, r3
 8000f24:	f003 fed8 	bl	8004cd8 <HAL_RCC_ClockConfig>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000f2e:	f000 fa47 	bl	80013c0 <Error_Handler>
  }
}
 8000f32:	bf00      	nop
 8000f34:	3770      	adds	r7, #112	; 0x70
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	58000400 	.word	0x58000400
 8000f40:	58024800 	.word	0x58024800

08000f44 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b0b0      	sub	sp, #192	; 0xc0
 8000f48:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f4a:	463b      	mov	r3, r7
 8000f4c:	22c0      	movs	r2, #192	; 0xc0
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4618      	mov	r0, r3
 8000f52:	f009 fb50 	bl	800a5f6 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f56:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f5a:	f04f 0300 	mov.w	r3, #0
 8000f5e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000f62:	2301      	movs	r3, #1
 8000f64:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 18;
 8000f66:	2312      	movs	r3, #18
 8000f68:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000f6a:	2304      	movs	r3, #4
 8000f6c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000f72:	2302      	movs	r3, #2
 8000f74:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000f76:	23c0      	movs	r3, #192	; 0xc0
 8000f78:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000f7a:	2320      	movs	r3, #32
 8000f7c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 8000f7e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f82:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000f84:	2300      	movs	r3, #0
 8000f86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f004 fa2f 	bl	80053f0 <HAL_RCCEx_PeriphCLKConfig>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8000f98:	f000 fa12 	bl	80013c0 <Error_Handler>
  }
}
 8000f9c:	bf00      	nop
 8000f9e:	37c0      	adds	r7, #192	; 0xc0
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08a      	sub	sp, #40	; 0x28
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000faa:	f107 031c 	add.w	r3, r7, #28
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]
 8000fb4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fb6:	463b      	mov	r3, r7
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
 8000fc4:	615a      	str	r2, [r3, #20]
 8000fc6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fc8:	4b2f      	ldr	r3, [pc, #188]	; (8001088 <MX_ADC1_Init+0xe4>)
 8000fca:	4a30      	ldr	r2, [pc, #192]	; (800108c <MX_ADC1_Init+0xe8>)
 8000fcc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fce:	4b2e      	ldr	r3, [pc, #184]	; (8001088 <MX_ADC1_Init+0xe4>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000fd4:	4b2c      	ldr	r3, [pc, #176]	; (8001088 <MX_ADC1_Init+0xe4>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fda:	4b2b      	ldr	r3, [pc, #172]	; (8001088 <MX_ADC1_Init+0xe4>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fe0:	4b29      	ldr	r3, [pc, #164]	; (8001088 <MX_ADC1_Init+0xe4>)
 8000fe2:	2204      	movs	r2, #4
 8000fe4:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fe6:	4b28      	ldr	r3, [pc, #160]	; (8001088 <MX_ADC1_Init+0xe4>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fec:	4b26      	ldr	r3, [pc, #152]	; (8001088 <MX_ADC1_Init+0xe4>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000ff2:	4b25      	ldr	r3, [pc, #148]	; (8001088 <MX_ADC1_Init+0xe4>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ff8:	4b23      	ldr	r3, [pc, #140]	; (8001088 <MX_ADC1_Init+0xe4>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ffe:	4b22      	ldr	r3, [pc, #136]	; (8001088 <MX_ADC1_Init+0xe4>)
 8001000:	2200      	movs	r2, #0
 8001002:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001004:	4b20      	ldr	r3, [pc, #128]	; (8001088 <MX_ADC1_Init+0xe4>)
 8001006:	2200      	movs	r2, #0
 8001008:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800100a:	4b1f      	ldr	r3, [pc, #124]	; (8001088 <MX_ADC1_Init+0xe4>)
 800100c:	2200      	movs	r2, #0
 800100e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001010:	4b1d      	ldr	r3, [pc, #116]	; (8001088 <MX_ADC1_Init+0xe4>)
 8001012:	2200      	movs	r2, #0
 8001014:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001016:	4b1c      	ldr	r3, [pc, #112]	; (8001088 <MX_ADC1_Init+0xe4>)
 8001018:	2200      	movs	r2, #0
 800101a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800101c:	4b1a      	ldr	r3, [pc, #104]	; (8001088 <MX_ADC1_Init+0xe4>)
 800101e:	2200      	movs	r2, #0
 8001020:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001024:	4818      	ldr	r0, [pc, #96]	; (8001088 <MX_ADC1_Init+0xe4>)
 8001026:	f001 f80d 	bl	8002044 <HAL_ADC_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001030:	f000 f9c6 	bl	80013c0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001034:	2300      	movs	r3, #0
 8001036:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001038:	f107 031c 	add.w	r3, r7, #28
 800103c:	4619      	mov	r1, r3
 800103e:	4812      	ldr	r0, [pc, #72]	; (8001088 <MX_ADC1_Init+0xe4>)
 8001040:	f002 f87a 	bl	8003138 <HAL_ADCEx_MultiModeConfigChannel>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800104a:	f000 f9b9 	bl	80013c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <MX_ADC1_Init+0xec>)
 8001050:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001052:	2306      	movs	r3, #6
 8001054:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001056:	2300      	movs	r3, #0
 8001058:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800105a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800105e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001060:	2304      	movs	r3, #4
 8001062:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001068:	2300      	movs	r3, #0
 800106a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800106c:	463b      	mov	r3, r7
 800106e:	4619      	mov	r1, r3
 8001070:	4805      	ldr	r0, [pc, #20]	; (8001088 <MX_ADC1_Init+0xe4>)
 8001072:	f001 fb55 	bl	8002720 <HAL_ADC_ConfigChannel>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 800107c:	f000 f9a0 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001080:	bf00      	nop
 8001082:	3728      	adds	r7, #40	; 0x28
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	240002ec 	.word	0x240002ec
 800108c:	40022000 	.word	0x40022000
 8001090:	4b840000 	.word	0x4b840000

08001094 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
 80010a8:	615a      	str	r2, [r3, #20]
 80010aa:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80010ac:	4b29      	ldr	r3, [pc, #164]	; (8001154 <MX_ADC2_Init+0xc0>)
 80010ae:	4a2a      	ldr	r2, [pc, #168]	; (8001158 <MX_ADC2_Init+0xc4>)
 80010b0:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80010b2:	4b28      	ldr	r3, [pc, #160]	; (8001154 <MX_ADC2_Init+0xc0>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80010b8:	4b26      	ldr	r3, [pc, #152]	; (8001154 <MX_ADC2_Init+0xc0>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010be:	4b25      	ldr	r3, [pc, #148]	; (8001154 <MX_ADC2_Init+0xc0>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010c4:	4b23      	ldr	r3, [pc, #140]	; (8001154 <MX_ADC2_Init+0xc0>)
 80010c6:	2204      	movs	r2, #4
 80010c8:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80010ca:	4b22      	ldr	r3, [pc, #136]	; (8001154 <MX_ADC2_Init+0xc0>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80010d0:	4b20      	ldr	r3, [pc, #128]	; (8001154 <MX_ADC2_Init+0xc0>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 80010d6:	4b1f      	ldr	r3, [pc, #124]	; (8001154 <MX_ADC2_Init+0xc0>)
 80010d8:	2201      	movs	r2, #1
 80010da:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80010dc:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <MX_ADC2_Init+0xc0>)
 80010de:	2200      	movs	r2, #0
 80010e0:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010e2:	4b1c      	ldr	r3, [pc, #112]	; (8001154 <MX_ADC2_Init+0xc0>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010e8:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <MX_ADC2_Init+0xc0>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80010ee:	4b19      	ldr	r3, [pc, #100]	; (8001154 <MX_ADC2_Init+0xc0>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010f4:	4b17      	ldr	r3, [pc, #92]	; (8001154 <MX_ADC2_Init+0xc0>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80010fa:	4b16      	ldr	r3, [pc, #88]	; (8001154 <MX_ADC2_Init+0xc0>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8001100:	4b14      	ldr	r3, [pc, #80]	; (8001154 <MX_ADC2_Init+0xc0>)
 8001102:	2200      	movs	r2, #0
 8001104:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001108:	4812      	ldr	r0, [pc, #72]	; (8001154 <MX_ADC2_Init+0xc0>)
 800110a:	f000 ff9b 	bl	8002044 <HAL_ADC_Init>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8001114:	f000 f954 	bl	80013c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8001118:	4b10      	ldr	r3, [pc, #64]	; (800115c <MX_ADC2_Init+0xc8>)
 800111a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800111c:	2306      	movs	r3, #6
 800111e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001120:	2300      	movs	r3, #0
 8001122:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001124:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001128:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800112a:	2304      	movs	r3, #4
 800112c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001132:	2300      	movs	r3, #0
 8001134:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	4619      	mov	r1, r3
 800113a:	4806      	ldr	r0, [pc, #24]	; (8001154 <MX_ADC2_Init+0xc0>)
 800113c:	f001 faf0 	bl	8002720 <HAL_ADC_ConfigChannel>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8001146:	f000 f93b 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800114a:	bf00      	nop
 800114c:	3720      	adds	r7, #32
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	24000350 	.word	0x24000350
 8001158:	40022100 	.word	0x40022100
 800115c:	4fb80000 	.word	0x4fb80000

08001160 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001164:	4b1e      	ldr	r3, [pc, #120]	; (80011e0 <MX_ETH_Init+0x80>)
 8001166:	4a1f      	ldr	r2, [pc, #124]	; (80011e4 <MX_ETH_Init+0x84>)
 8001168:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800116a:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <MX_ETH_Init+0x88>)
 800116c:	2200      	movs	r2, #0
 800116e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001170:	4b1d      	ldr	r3, [pc, #116]	; (80011e8 <MX_ETH_Init+0x88>)
 8001172:	2280      	movs	r2, #128	; 0x80
 8001174:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001176:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <MX_ETH_Init+0x88>)
 8001178:	22e1      	movs	r2, #225	; 0xe1
 800117a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800117c:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <MX_ETH_Init+0x88>)
 800117e:	2200      	movs	r2, #0
 8001180:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001182:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <MX_ETH_Init+0x88>)
 8001184:	2200      	movs	r2, #0
 8001186:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001188:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <MX_ETH_Init+0x88>)
 800118a:	2200      	movs	r2, #0
 800118c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800118e:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <MX_ETH_Init+0x80>)
 8001190:	4a15      	ldr	r2, [pc, #84]	; (80011e8 <MX_ETH_Init+0x88>)
 8001192:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001194:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <MX_ETH_Init+0x80>)
 8001196:	2201      	movs	r2, #1
 8001198:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800119a:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <MX_ETH_Init+0x80>)
 800119c:	4a13      	ldr	r2, [pc, #76]	; (80011ec <MX_ETH_Init+0x8c>)
 800119e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80011a0:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <MX_ETH_Init+0x80>)
 80011a2:	4a13      	ldr	r2, [pc, #76]	; (80011f0 <MX_ETH_Init+0x90>)
 80011a4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80011a6:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <MX_ETH_Init+0x80>)
 80011a8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80011ac:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80011ae:	480c      	ldr	r0, [pc, #48]	; (80011e0 <MX_ETH_Init+0x80>)
 80011b0:	f002 f984 	bl	80034bc <HAL_ETH_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80011ba:	f000 f901 	bl	80013c0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80011be:	2238      	movs	r2, #56	; 0x38
 80011c0:	2100      	movs	r1, #0
 80011c2:	480c      	ldr	r0, [pc, #48]	; (80011f4 <MX_ETH_Init+0x94>)
 80011c4:	f009 fa17 	bl	800a5f6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80011c8:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <MX_ETH_Init+0x94>)
 80011ca:	2221      	movs	r2, #33	; 0x21
 80011cc:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <MX_ETH_Init+0x94>)
 80011d0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80011d4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80011d6:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <MX_ETH_Init+0x94>)
 80011d8:	2200      	movs	r2, #0
 80011da:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	240003b4 	.word	0x240003b4
 80011e4:	40028000 	.word	0x40028000
 80011e8:	24000a8c 	.word	0x24000a8c
 80011ec:	24000238 	.word	0x24000238
 80011f0:	240001d8 	.word	0x240001d8
 80011f4:	240002b4 	.word	0x240002b4

080011f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011fc:	4b22      	ldr	r3, [pc, #136]	; (8001288 <MX_USART3_UART_Init+0x90>)
 80011fe:	4a23      	ldr	r2, [pc, #140]	; (800128c <MX_USART3_UART_Init+0x94>)
 8001200:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001202:	4b21      	ldr	r3, [pc, #132]	; (8001288 <MX_USART3_UART_Init+0x90>)
 8001204:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001208:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800120a:	4b1f      	ldr	r3, [pc, #124]	; (8001288 <MX_USART3_UART_Init+0x90>)
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001210:	4b1d      	ldr	r3, [pc, #116]	; (8001288 <MX_USART3_UART_Init+0x90>)
 8001212:	2200      	movs	r2, #0
 8001214:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001216:	4b1c      	ldr	r3, [pc, #112]	; (8001288 <MX_USART3_UART_Init+0x90>)
 8001218:	2200      	movs	r2, #0
 800121a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800121c:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <MX_USART3_UART_Init+0x90>)
 800121e:	220c      	movs	r2, #12
 8001220:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001222:	4b19      	ldr	r3, [pc, #100]	; (8001288 <MX_USART3_UART_Init+0x90>)
 8001224:	2200      	movs	r2, #0
 8001226:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001228:	4b17      	ldr	r3, [pc, #92]	; (8001288 <MX_USART3_UART_Init+0x90>)
 800122a:	2200      	movs	r2, #0
 800122c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800122e:	4b16      	ldr	r3, [pc, #88]	; (8001288 <MX_USART3_UART_Init+0x90>)
 8001230:	2200      	movs	r2, #0
 8001232:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001234:	4b14      	ldr	r3, [pc, #80]	; (8001288 <MX_USART3_UART_Init+0x90>)
 8001236:	2200      	movs	r2, #0
 8001238:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800123a:	4b13      	ldr	r3, [pc, #76]	; (8001288 <MX_USART3_UART_Init+0x90>)
 800123c:	2200      	movs	r2, #0
 800123e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001240:	4811      	ldr	r0, [pc, #68]	; (8001288 <MX_USART3_UART_Init+0x90>)
 8001242:	f006 fdd3 	bl	8007dec <HAL_UART_Init>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800124c:	f000 f8b8 	bl	80013c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001250:	2100      	movs	r1, #0
 8001252:	480d      	ldr	r0, [pc, #52]	; (8001288 <MX_USART3_UART_Init+0x90>)
 8001254:	f007 fe63 	bl	8008f1e <HAL_UARTEx_SetTxFifoThreshold>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800125e:	f000 f8af 	bl	80013c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001262:	2100      	movs	r1, #0
 8001264:	4808      	ldr	r0, [pc, #32]	; (8001288 <MX_USART3_UART_Init+0x90>)
 8001266:	f007 fe98 	bl	8008f9a <HAL_UARTEx_SetRxFifoThreshold>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001270:	f000 f8a6 	bl	80013c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001274:	4804      	ldr	r0, [pc, #16]	; (8001288 <MX_USART3_UART_Init+0x90>)
 8001276:	f007 fe19 	bl	8008eac <HAL_UARTEx_DisableFifoMode>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001280:	f000 f89e 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001284:	bf00      	nop
 8001286:	bd80      	pop	{r7, pc}
 8001288:	24000464 	.word	0x24000464
 800128c:	40004800 	.word	0x40004800

08001290 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001294:	4b15      	ldr	r3, [pc, #84]	; (80012ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001296:	4a16      	ldr	r2, [pc, #88]	; (80012f0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001298:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800129a:	4b14      	ldr	r3, [pc, #80]	; (80012ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800129c:	2209      	movs	r2, #9
 800129e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80012a0:	4b12      	ldr	r3, [pc, #72]	; (80012ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012a2:	2202      	movs	r2, #2
 80012a4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80012a6:	4b11      	ldr	r3, [pc, #68]	; (80012ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80012ac:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012ae:	2202      	movs	r2, #2
 80012b0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80012b2:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80012b8:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80012be:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80012c4:	4b09      	ldr	r3, [pc, #36]	; (80012ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80012ca:	4b08      	ldr	r3, [pc, #32]	; (80012ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80012d6:	4805      	ldr	r0, [pc, #20]	; (80012ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012d8:	f002 fef2 	bl	80040c0 <HAL_PCD_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80012e2:	f000 f86d 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	240004f8 	.word	0x240004f8
 80012f0:	40080000 	.word	0x40080000

080012f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b087      	sub	sp, #28
 80012f8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012fa:	4b30      	ldr	r3, [pc, #192]	; (80013bc <MX_GPIO_Init+0xc8>)
 80012fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001300:	4a2e      	ldr	r2, [pc, #184]	; (80013bc <MX_GPIO_Init+0xc8>)
 8001302:	f043 0304 	orr.w	r3, r3, #4
 8001306:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800130a:	4b2c      	ldr	r3, [pc, #176]	; (80013bc <MX_GPIO_Init+0xc8>)
 800130c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001310:	f003 0304 	and.w	r3, r3, #4
 8001314:	617b      	str	r3, [r7, #20]
 8001316:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001318:	4b28      	ldr	r3, [pc, #160]	; (80013bc <MX_GPIO_Init+0xc8>)
 800131a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800131e:	4a27      	ldr	r2, [pc, #156]	; (80013bc <MX_GPIO_Init+0xc8>)
 8001320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001324:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001328:	4b24      	ldr	r3, [pc, #144]	; (80013bc <MX_GPIO_Init+0xc8>)
 800132a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800132e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001332:	613b      	str	r3, [r7, #16]
 8001334:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001336:	4b21      	ldr	r3, [pc, #132]	; (80013bc <MX_GPIO_Init+0xc8>)
 8001338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800133c:	4a1f      	ldr	r2, [pc, #124]	; (80013bc <MX_GPIO_Init+0xc8>)
 800133e:	f043 0301 	orr.w	r3, r3, #1
 8001342:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001346:	4b1d      	ldr	r3, [pc, #116]	; (80013bc <MX_GPIO_Init+0xc8>)
 8001348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800134c:	f003 0301 	and.w	r3, r3, #1
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001354:	4b19      	ldr	r3, [pc, #100]	; (80013bc <MX_GPIO_Init+0xc8>)
 8001356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800135a:	4a18      	ldr	r2, [pc, #96]	; (80013bc <MX_GPIO_Init+0xc8>)
 800135c:	f043 0302 	orr.w	r3, r3, #2
 8001360:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001364:	4b15      	ldr	r3, [pc, #84]	; (80013bc <MX_GPIO_Init+0xc8>)
 8001366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	60bb      	str	r3, [r7, #8]
 8001370:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001372:	4b12      	ldr	r3, [pc, #72]	; (80013bc <MX_GPIO_Init+0xc8>)
 8001374:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001378:	4a10      	ldr	r2, [pc, #64]	; (80013bc <MX_GPIO_Init+0xc8>)
 800137a:	f043 0308 	orr.w	r3, r3, #8
 800137e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001382:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <MX_GPIO_Init+0xc8>)
 8001384:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001388:	f003 0308 	and.w	r3, r3, #8
 800138c:	607b      	str	r3, [r7, #4]
 800138e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001390:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <MX_GPIO_Init+0xc8>)
 8001392:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001396:	4a09      	ldr	r2, [pc, #36]	; (80013bc <MX_GPIO_Init+0xc8>)
 8001398:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800139c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013a0:	4b06      	ldr	r3, [pc, #24]	; (80013bc <MX_GPIO_Init+0xc8>)
 80013a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013aa:	603b      	str	r3, [r7, #0]
 80013ac:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013ae:	bf00      	nop
 80013b0:	371c      	adds	r7, #28
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	58024400 	.word	0x58024400

080013c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c4:	b672      	cpsid	i
}
 80013c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013c8:	e7fe      	b.n	80013c8 <Error_Handler+0x8>
	...

080013cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d2:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <HAL_MspInit+0x30>)
 80013d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013d8:	4a08      	ldr	r2, [pc, #32]	; (80013fc <HAL_MspInit+0x30>)
 80013da:	f043 0302 	orr.w	r3, r3, #2
 80013de:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80013e2:	4b06      	ldr	r3, [pc, #24]	; (80013fc <HAL_MspInit+0x30>)
 80013e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013e8:	f003 0302 	and.w	r3, r3, #2
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	58024400 	.word	0x58024400

08001400 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08c      	sub	sp, #48	; 0x30
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001408:	f107 031c 	add.w	r3, r7, #28
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a39      	ldr	r2, [pc, #228]	; (8001504 <HAL_ADC_MspInit+0x104>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d133      	bne.n	800148a <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001422:	4b39      	ldr	r3, [pc, #228]	; (8001508 <HAL_ADC_MspInit+0x108>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	3301      	adds	r3, #1
 8001428:	4a37      	ldr	r2, [pc, #220]	; (8001508 <HAL_ADC_MspInit+0x108>)
 800142a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800142c:	4b36      	ldr	r3, [pc, #216]	; (8001508 <HAL_ADC_MspInit+0x108>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d10e      	bne.n	8001452 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001434:	4b35      	ldr	r3, [pc, #212]	; (800150c <HAL_ADC_MspInit+0x10c>)
 8001436:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800143a:	4a34      	ldr	r2, [pc, #208]	; (800150c <HAL_ADC_MspInit+0x10c>)
 800143c:	f043 0320 	orr.w	r3, r3, #32
 8001440:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001444:	4b31      	ldr	r3, [pc, #196]	; (800150c <HAL_ADC_MspInit+0x10c>)
 8001446:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800144a:	f003 0320 	and.w	r3, r3, #32
 800144e:	61bb      	str	r3, [r7, #24]
 8001450:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001452:	4b2e      	ldr	r3, [pc, #184]	; (800150c <HAL_ADC_MspInit+0x10c>)
 8001454:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001458:	4a2c      	ldr	r2, [pc, #176]	; (800150c <HAL_ADC_MspInit+0x10c>)
 800145a:	f043 0301 	orr.w	r3, r3, #1
 800145e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001462:	4b2a      	ldr	r3, [pc, #168]	; (800150c <HAL_ADC_MspInit+0x10c>)
 8001464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	617b      	str	r3, [r7, #20]
 800146e:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_INP18
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001470:	2310      	movs	r3, #16
 8001472:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001474:	2303      	movs	r3, #3
 8001476:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147c:	f107 031c 	add.w	r3, r7, #28
 8001480:	4619      	mov	r1, r3
 8001482:	4823      	ldr	r0, [pc, #140]	; (8001510 <HAL_ADC_MspInit+0x110>)
 8001484:	f002 fc3e 	bl	8003d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001488:	e037      	b.n	80014fa <HAL_ADC_MspInit+0xfa>
  else if(hadc->Instance==ADC2)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a21      	ldr	r2, [pc, #132]	; (8001514 <HAL_ADC_MspInit+0x114>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d132      	bne.n	80014fa <HAL_ADC_MspInit+0xfa>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001494:	4b1c      	ldr	r3, [pc, #112]	; (8001508 <HAL_ADC_MspInit+0x108>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	3301      	adds	r3, #1
 800149a:	4a1b      	ldr	r2, [pc, #108]	; (8001508 <HAL_ADC_MspInit+0x108>)
 800149c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800149e:	4b1a      	ldr	r3, [pc, #104]	; (8001508 <HAL_ADC_MspInit+0x108>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d10e      	bne.n	80014c4 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80014a6:	4b19      	ldr	r3, [pc, #100]	; (800150c <HAL_ADC_MspInit+0x10c>)
 80014a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014ac:	4a17      	ldr	r2, [pc, #92]	; (800150c <HAL_ADC_MspInit+0x10c>)
 80014ae:	f043 0320 	orr.w	r3, r3, #32
 80014b2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80014b6:	4b15      	ldr	r3, [pc, #84]	; (800150c <HAL_ADC_MspInit+0x10c>)
 80014b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014bc:	f003 0320 	and.w	r3, r3, #32
 80014c0:	613b      	str	r3, [r7, #16]
 80014c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c4:	4b11      	ldr	r3, [pc, #68]	; (800150c <HAL_ADC_MspInit+0x10c>)
 80014c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ca:	4a10      	ldr	r2, [pc, #64]	; (800150c <HAL_ADC_MspInit+0x10c>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014d4:	4b0d      	ldr	r3, [pc, #52]	; (800150c <HAL_ADC_MspInit+0x10c>)
 80014d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80014e2:	2320      	movs	r3, #32
 80014e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014e6:	2303      	movs	r3, #3
 80014e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ee:	f107 031c 	add.w	r3, r7, #28
 80014f2:	4619      	mov	r1, r3
 80014f4:	4806      	ldr	r0, [pc, #24]	; (8001510 <HAL_ADC_MspInit+0x110>)
 80014f6:	f002 fc05 	bl	8003d04 <HAL_GPIO_Init>
}
 80014fa:	bf00      	nop
 80014fc:	3730      	adds	r7, #48	; 0x30
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40022000 	.word	0x40022000
 8001508:	24000a94 	.word	0x24000a94
 800150c:	58024400 	.word	0x58024400
 8001510:	58020000 	.word	0x58020000
 8001514:	40022100 	.word	0x40022100

08001518 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08e      	sub	sp, #56	; 0x38
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001520:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a59      	ldr	r2, [pc, #356]	; (800169c <HAL_ETH_MspInit+0x184>)
 8001536:	4293      	cmp	r3, r2
 8001538:	f040 80ab 	bne.w	8001692 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800153c:	4b58      	ldr	r3, [pc, #352]	; (80016a0 <HAL_ETH_MspInit+0x188>)
 800153e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001542:	4a57      	ldr	r2, [pc, #348]	; (80016a0 <HAL_ETH_MspInit+0x188>)
 8001544:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001548:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800154c:	4b54      	ldr	r3, [pc, #336]	; (80016a0 <HAL_ETH_MspInit+0x188>)
 800154e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001552:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001556:	623b      	str	r3, [r7, #32]
 8001558:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800155a:	4b51      	ldr	r3, [pc, #324]	; (80016a0 <HAL_ETH_MspInit+0x188>)
 800155c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001560:	4a4f      	ldr	r2, [pc, #316]	; (80016a0 <HAL_ETH_MspInit+0x188>)
 8001562:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001566:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800156a:	4b4d      	ldr	r3, [pc, #308]	; (80016a0 <HAL_ETH_MspInit+0x188>)
 800156c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001570:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001574:	61fb      	str	r3, [r7, #28]
 8001576:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001578:	4b49      	ldr	r3, [pc, #292]	; (80016a0 <HAL_ETH_MspInit+0x188>)
 800157a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800157e:	4a48      	ldr	r2, [pc, #288]	; (80016a0 <HAL_ETH_MspInit+0x188>)
 8001580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001584:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001588:	4b45      	ldr	r3, [pc, #276]	; (80016a0 <HAL_ETH_MspInit+0x188>)
 800158a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800158e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001592:	61bb      	str	r3, [r7, #24]
 8001594:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001596:	4b42      	ldr	r3, [pc, #264]	; (80016a0 <HAL_ETH_MspInit+0x188>)
 8001598:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800159c:	4a40      	ldr	r2, [pc, #256]	; (80016a0 <HAL_ETH_MspInit+0x188>)
 800159e:	f043 0304 	orr.w	r3, r3, #4
 80015a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015a6:	4b3e      	ldr	r3, [pc, #248]	; (80016a0 <HAL_ETH_MspInit+0x188>)
 80015a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ac:	f003 0304 	and.w	r3, r3, #4
 80015b0:	617b      	str	r3, [r7, #20]
 80015b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b4:	4b3a      	ldr	r3, [pc, #232]	; (80016a0 <HAL_ETH_MspInit+0x188>)
 80015b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ba:	4a39      	ldr	r2, [pc, #228]	; (80016a0 <HAL_ETH_MspInit+0x188>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015c4:	4b36      	ldr	r3, [pc, #216]	; (80016a0 <HAL_ETH_MspInit+0x188>)
 80015c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d2:	4b33      	ldr	r3, [pc, #204]	; (80016a0 <HAL_ETH_MspInit+0x188>)
 80015d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015d8:	4a31      	ldr	r2, [pc, #196]	; (80016a0 <HAL_ETH_MspInit+0x188>)
 80015da:	f043 0302 	orr.w	r3, r3, #2
 80015de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015e2:	4b2f      	ldr	r3, [pc, #188]	; (80016a0 <HAL_ETH_MspInit+0x188>)
 80015e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80015f0:	4b2b      	ldr	r3, [pc, #172]	; (80016a0 <HAL_ETH_MspInit+0x188>)
 80015f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015f6:	4a2a      	ldr	r2, [pc, #168]	; (80016a0 <HAL_ETH_MspInit+0x188>)
 80015f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001600:	4b27      	ldr	r3, [pc, #156]	; (80016a0 <HAL_ETH_MspInit+0x188>)
 8001602:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800160e:	2332      	movs	r3, #50	; 0x32
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001612:	2302      	movs	r3, #2
 8001614:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161a:	2300      	movs	r3, #0
 800161c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800161e:	230b      	movs	r3, #11
 8001620:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001622:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001626:	4619      	mov	r1, r3
 8001628:	481e      	ldr	r0, [pc, #120]	; (80016a4 <HAL_ETH_MspInit+0x18c>)
 800162a:	f002 fb6b 	bl	8003d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800162e:	2386      	movs	r3, #134	; 0x86
 8001630:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001632:	2302      	movs	r3, #2
 8001634:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163a:	2300      	movs	r3, #0
 800163c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800163e:	230b      	movs	r3, #11
 8001640:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001642:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001646:	4619      	mov	r1, r3
 8001648:	4817      	ldr	r0, [pc, #92]	; (80016a8 <HAL_ETH_MspInit+0x190>)
 800164a:	f002 fb5b 	bl	8003d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800164e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001654:	2302      	movs	r3, #2
 8001656:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165c:	2300      	movs	r3, #0
 800165e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001660:	230b      	movs	r3, #11
 8001662:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001664:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001668:	4619      	mov	r1, r3
 800166a:	4810      	ldr	r0, [pc, #64]	; (80016ac <HAL_ETH_MspInit+0x194>)
 800166c:	f002 fb4a 	bl	8003d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001670:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001674:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001676:	2302      	movs	r3, #2
 8001678:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167e:	2300      	movs	r3, #0
 8001680:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001682:	230b      	movs	r3, #11
 8001684:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001686:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800168a:	4619      	mov	r1, r3
 800168c:	4808      	ldr	r0, [pc, #32]	; (80016b0 <HAL_ETH_MspInit+0x198>)
 800168e:	f002 fb39 	bl	8003d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001692:	bf00      	nop
 8001694:	3738      	adds	r7, #56	; 0x38
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40028000 	.word	0x40028000
 80016a0:	58024400 	.word	0x58024400
 80016a4:	58020800 	.word	0x58020800
 80016a8:	58020000 	.word	0x58020000
 80016ac:	58020400 	.word	0x58020400
 80016b0:	58021800 	.word	0x58021800

080016b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b0ba      	sub	sp, #232	; 0xe8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016bc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016cc:	f107 0310 	add.w	r3, r7, #16
 80016d0:	22c0      	movs	r2, #192	; 0xc0
 80016d2:	2100      	movs	r1, #0
 80016d4:	4618      	mov	r0, r3
 80016d6:	f008 ff8e 	bl	800a5f6 <memset>
  if(huart->Instance==USART3)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a27      	ldr	r2, [pc, #156]	; (800177c <HAL_UART_MspInit+0xc8>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d146      	bne.n	8001772 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80016e4:	f04f 0202 	mov.w	r2, #2
 80016e8:	f04f 0300 	mov.w	r3, #0
 80016ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80016f0:	2300      	movs	r3, #0
 80016f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016f6:	f107 0310 	add.w	r3, r7, #16
 80016fa:	4618      	mov	r0, r3
 80016fc:	f003 fe78 	bl	80053f0 <HAL_RCCEx_PeriphCLKConfig>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001706:	f7ff fe5b 	bl	80013c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800170a:	4b1d      	ldr	r3, [pc, #116]	; (8001780 <HAL_UART_MspInit+0xcc>)
 800170c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001710:	4a1b      	ldr	r2, [pc, #108]	; (8001780 <HAL_UART_MspInit+0xcc>)
 8001712:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001716:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800171a:	4b19      	ldr	r3, [pc, #100]	; (8001780 <HAL_UART_MspInit+0xcc>)
 800171c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001720:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001728:	4b15      	ldr	r3, [pc, #84]	; (8001780 <HAL_UART_MspInit+0xcc>)
 800172a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800172e:	4a14      	ldr	r2, [pc, #80]	; (8001780 <HAL_UART_MspInit+0xcc>)
 8001730:	f043 0308 	orr.w	r3, r3, #8
 8001734:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001738:	4b11      	ldr	r3, [pc, #68]	; (8001780 <HAL_UART_MspInit+0xcc>)
 800173a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800173e:	f003 0308 	and.w	r3, r3, #8
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001746:	f44f 7340 	mov.w	r3, #768	; 0x300
 800174a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174e:	2302      	movs	r3, #2
 8001750:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175a:	2300      	movs	r3, #0
 800175c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001760:	2307      	movs	r3, #7
 8001762:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001766:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800176a:	4619      	mov	r1, r3
 800176c:	4805      	ldr	r0, [pc, #20]	; (8001784 <HAL_UART_MspInit+0xd0>)
 800176e:	f002 fac9 	bl	8003d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001772:	bf00      	nop
 8001774:	37e8      	adds	r7, #232	; 0xe8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40004800 	.word	0x40004800
 8001780:	58024400 	.word	0x58024400
 8001784:	58020c00 	.word	0x58020c00

08001788 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b0ba      	sub	sp, #232	; 0xe8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001790:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017a0:	f107 0310 	add.w	r3, r7, #16
 80017a4:	22c0      	movs	r2, #192	; 0xc0
 80017a6:	2100      	movs	r1, #0
 80017a8:	4618      	mov	r0, r3
 80017aa:	f008 ff24 	bl	800a5f6 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a38      	ldr	r2, [pc, #224]	; (8001894 <HAL_PCD_MspInit+0x10c>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d169      	bne.n	800188c <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80017b8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80017bc:	f04f 0300 	mov.w	r3, #0
 80017c0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 80017c4:	2301      	movs	r3, #1
 80017c6:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 80017c8:	2312      	movs	r3, #18
 80017ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80017cc:	2302      	movs	r3, #2
 80017ce:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 80017d0:	2303      	movs	r3, #3
 80017d2:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80017d4:	2302      	movs	r3, #2
 80017d6:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80017d8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017dc:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 80017de:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80017e2:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80017e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80017e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017ec:	f107 0310 	add.w	r3, r7, #16
 80017f0:	4618      	mov	r0, r3
 80017f2:	f003 fdfd 	bl	80053f0 <HAL_RCCEx_PeriphCLKConfig>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 80017fc:	f7ff fde0 	bl	80013c0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001800:	f002 fe00 	bl	8004404 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001804:	4b24      	ldr	r3, [pc, #144]	; (8001898 <HAL_PCD_MspInit+0x110>)
 8001806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800180a:	4a23      	ldr	r2, [pc, #140]	; (8001898 <HAL_PCD_MspInit+0x110>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001814:	4b20      	ldr	r3, [pc, #128]	; (8001898 <HAL_PCD_MspInit+0x110>)
 8001816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001822:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001826:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182a:	2302      	movs	r3, #2
 800182c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001836:	2300      	movs	r3, #0
 8001838:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800183c:	230a      	movs	r3, #10
 800183e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001842:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001846:	4619      	mov	r1, r3
 8001848:	4814      	ldr	r0, [pc, #80]	; (800189c <HAL_PCD_MspInit+0x114>)
 800184a:	f002 fa5b 	bl	8003d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800184e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001852:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001856:	2300      	movs	r3, #0
 8001858:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001862:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001866:	4619      	mov	r1, r3
 8001868:	480c      	ldr	r0, [pc, #48]	; (800189c <HAL_PCD_MspInit+0x114>)
 800186a:	f002 fa4b 	bl	8003d04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800186e:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <HAL_PCD_MspInit+0x110>)
 8001870:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001874:	4a08      	ldr	r2, [pc, #32]	; (8001898 <HAL_PCD_MspInit+0x110>)
 8001876:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800187a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800187e:	4b06      	ldr	r3, [pc, #24]	; (8001898 <HAL_PCD_MspInit+0x110>)
 8001880:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001884:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001888:	60bb      	str	r3, [r7, #8]
 800188a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800188c:	bf00      	nop
 800188e:	37e8      	adds	r7, #232	; 0xe8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40080000 	.word	0x40080000
 8001898:	58024400 	.word	0x58024400
 800189c:	58020000 	.word	0x58020000

080018a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018a4:	e7fe      	b.n	80018a4 <NMI_Handler+0x4>

080018a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018a6:	b480      	push	{r7}
 80018a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018aa:	e7fe      	b.n	80018aa <HardFault_Handler+0x4>

080018ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018b0:	e7fe      	b.n	80018b0 <MemManage_Handler+0x4>

080018b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018b2:	b480      	push	{r7}
 80018b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018b6:	e7fe      	b.n	80018b6 <BusFault_Handler+0x4>

080018b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018bc:	e7fe      	b.n	80018bc <UsageFault_Handler+0x4>

080018be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ec:	f000 f964 	bl	8001bb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018f0:	bf00      	nop
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  return 1;
 80018f8:	2301      	movs	r3, #1
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <_kill>:

int _kill(int pid, int sig)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800190e:	f008 fec5 	bl	800a69c <__errno>
 8001912:	4603      	mov	r3, r0
 8001914:	2216      	movs	r2, #22
 8001916:	601a      	str	r2, [r3, #0]
  return -1;
 8001918:	f04f 33ff 	mov.w	r3, #4294967295
}
 800191c:	4618      	mov	r0, r3
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <_exit>:

void _exit (int status)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800192c:	f04f 31ff 	mov.w	r1, #4294967295
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff ffe7 	bl	8001904 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001936:	e7fe      	b.n	8001936 <_exit+0x12>

08001938 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]
 8001948:	e00a      	b.n	8001960 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800194a:	f3af 8000 	nop.w
 800194e:	4601      	mov	r1, r0
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	1c5a      	adds	r2, r3, #1
 8001954:	60ba      	str	r2, [r7, #8]
 8001956:	b2ca      	uxtb	r2, r1
 8001958:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	3301      	adds	r3, #1
 800195e:	617b      	str	r3, [r7, #20]
 8001960:	697a      	ldr	r2, [r7, #20]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	429a      	cmp	r2, r3
 8001966:	dbf0      	blt.n	800194a <_read+0x12>
  }

  return len;
 8001968:	687b      	ldr	r3, [r7, #4]
}
 800196a:	4618      	mov	r0, r3
 800196c:	3718      	adds	r7, #24
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b086      	sub	sp, #24
 8001976:	af00      	add	r7, sp, #0
 8001978:	60f8      	str	r0, [r7, #12]
 800197a:	60b9      	str	r1, [r7, #8]
 800197c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]
 8001982:	e009      	b.n	8001998 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	1c5a      	adds	r2, r3, #1
 8001988:	60ba      	str	r2, [r7, #8]
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	3301      	adds	r3, #1
 8001996:	617b      	str	r3, [r7, #20]
 8001998:	697a      	ldr	r2, [r7, #20]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	429a      	cmp	r2, r3
 800199e:	dbf1      	blt.n	8001984 <_write+0x12>
  }
  return len;
 80019a0:	687b      	ldr	r3, [r7, #4]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3718      	adds	r7, #24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <_close>:

int _close(int file)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b083      	sub	sp, #12
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b083      	sub	sp, #12
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
 80019ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019d2:	605a      	str	r2, [r3, #4]
  return 0;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <_isatty>:

int _isatty(int file)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b083      	sub	sp, #12
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019ea:	2301      	movs	r3, #1
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3714      	adds	r7, #20
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
	...

08001a14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a1c:	4a14      	ldr	r2, [pc, #80]	; (8001a70 <_sbrk+0x5c>)
 8001a1e:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <_sbrk+0x60>)
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a28:	4b13      	ldr	r3, [pc, #76]	; (8001a78 <_sbrk+0x64>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d102      	bne.n	8001a36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a30:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <_sbrk+0x64>)
 8001a32:	4a12      	ldr	r2, [pc, #72]	; (8001a7c <_sbrk+0x68>)
 8001a34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a36:	4b10      	ldr	r3, [pc, #64]	; (8001a78 <_sbrk+0x64>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d207      	bcs.n	8001a54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a44:	f008 fe2a 	bl	800a69c <__errno>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	220c      	movs	r2, #12
 8001a4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a52:	e009      	b.n	8001a68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a54:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <_sbrk+0x64>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a5a:	4b07      	ldr	r3, [pc, #28]	; (8001a78 <_sbrk+0x64>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4413      	add	r3, r2
 8001a62:	4a05      	ldr	r2, [pc, #20]	; (8001a78 <_sbrk+0x64>)
 8001a64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a66:	68fb      	ldr	r3, [r7, #12]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3718      	adds	r7, #24
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	24080000 	.word	0x24080000
 8001a74:	00000400 	.word	0x00000400
 8001a78:	24000a98 	.word	0x24000a98
 8001a7c:	24000bf0 	.word	0x24000bf0

08001a80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001a80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ab8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a84:	f7fe fff6 	bl	8000a74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a88:	480c      	ldr	r0, [pc, #48]	; (8001abc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a8a:	490d      	ldr	r1, [pc, #52]	; (8001ac0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a8c:	4a0d      	ldr	r2, [pc, #52]	; (8001ac4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a90:	e002      	b.n	8001a98 <LoopCopyDataInit>

08001a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a96:	3304      	adds	r3, #4

08001a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a9c:	d3f9      	bcc.n	8001a92 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a9e:	4a0a      	ldr	r2, [pc, #40]	; (8001ac8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001aa0:	4c0a      	ldr	r4, [pc, #40]	; (8001acc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aa4:	e001      	b.n	8001aaa <LoopFillZerobss>

08001aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aa8:	3204      	adds	r2, #4

08001aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aac:	d3fb      	bcc.n	8001aa6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aae:	f008 fdfb 	bl	800a6a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ab2:	f7ff f875 	bl	8000ba0 <main>
  bx  lr
 8001ab6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ab8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001abc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001ac0:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8001ac4:	0800e180 	.word	0x0800e180
  ldr r2, =_sbss
 8001ac8:	24000298 	.word	0x24000298
  ldr r4, =_ebss
 8001acc:	24000bec 	.word	0x24000bec

08001ad0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ad0:	e7fe      	b.n	8001ad0 <ADC3_IRQHandler>
	...

08001ad4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ada:	2003      	movs	r0, #3
 8001adc:	f001 fcbc 	bl	8003458 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ae0:	f003 fab0 	bl	8005044 <HAL_RCC_GetSysClockFreq>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <HAL_Init+0x68>)
 8001ae8:	699b      	ldr	r3, [r3, #24]
 8001aea:	0a1b      	lsrs	r3, r3, #8
 8001aec:	f003 030f 	and.w	r3, r3, #15
 8001af0:	4913      	ldr	r1, [pc, #76]	; (8001b40 <HAL_Init+0x6c>)
 8001af2:	5ccb      	ldrb	r3, [r1, r3]
 8001af4:	f003 031f 	and.w	r3, r3, #31
 8001af8:	fa22 f303 	lsr.w	r3, r2, r3
 8001afc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001afe:	4b0f      	ldr	r3, [pc, #60]	; (8001b3c <HAL_Init+0x68>)
 8001b00:	699b      	ldr	r3, [r3, #24]
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	4a0e      	ldr	r2, [pc, #56]	; (8001b40 <HAL_Init+0x6c>)
 8001b08:	5cd3      	ldrb	r3, [r2, r3]
 8001b0a:	f003 031f 	and.w	r3, r3, #31
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	fa22 f303 	lsr.w	r3, r2, r3
 8001b14:	4a0b      	ldr	r2, [pc, #44]	; (8001b44 <HAL_Init+0x70>)
 8001b16:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b18:	4a0b      	ldr	r2, [pc, #44]	; (8001b48 <HAL_Init+0x74>)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b1e:	2000      	movs	r0, #0
 8001b20:	f000 f814 	bl	8001b4c <HAL_InitTick>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e002      	b.n	8001b34 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b2e:	f7ff fc4d 	bl	80013cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	58024400 	.word	0x58024400
 8001b40:	0800dd0c 	.word	0x0800dd0c
 8001b44:	24000004 	.word	0x24000004
 8001b48:	24000000 	.word	0x24000000

08001b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001b54:	4b15      	ldr	r3, [pc, #84]	; (8001bac <HAL_InitTick+0x60>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d101      	bne.n	8001b60 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e021      	b.n	8001ba4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001b60:	4b13      	ldr	r3, [pc, #76]	; (8001bb0 <HAL_InitTick+0x64>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	4b11      	ldr	r3, [pc, #68]	; (8001bac <HAL_InitTick+0x60>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b76:	4618      	mov	r0, r3
 8001b78:	f001 fc93 	bl	80034a2 <HAL_SYSTICK_Config>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e00e      	b.n	8001ba4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2b0f      	cmp	r3, #15
 8001b8a:	d80a      	bhi.n	8001ba2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	f04f 30ff 	mov.w	r0, #4294967295
 8001b94:	f001 fc6b 	bl	800346e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b98:	4a06      	ldr	r2, [pc, #24]	; (8001bb4 <HAL_InitTick+0x68>)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	e000      	b.n	8001ba4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	2400000c 	.word	0x2400000c
 8001bb0:	24000000 	.word	0x24000000
 8001bb4:	24000008 	.word	0x24000008

08001bb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <HAL_IncTick+0x20>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <HAL_IncTick+0x24>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	4a04      	ldr	r2, [pc, #16]	; (8001bdc <HAL_IncTick+0x24>)
 8001bca:	6013      	str	r3, [r2, #0]
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	2400000c 	.word	0x2400000c
 8001bdc:	24000a9c 	.word	0x24000a9c

08001be0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return uwTick;
 8001be4:	4b03      	ldr	r3, [pc, #12]	; (8001bf4 <HAL_GetTick+0x14>)
 8001be6:	681b      	ldr	r3, [r3, #0]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	24000a9c 	.word	0x24000a9c

08001bf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c00:	f7ff ffee 	bl	8001be0 <HAL_GetTick>
 8001c04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c10:	d005      	beq.n	8001c1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c12:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <HAL_Delay+0x44>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	461a      	mov	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c1e:	bf00      	nop
 8001c20:	f7ff ffde 	bl	8001be0 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d8f7      	bhi.n	8001c20 <HAL_Delay+0x28>
  {
  }
}
 8001c30:	bf00      	nop
 8001c32:	bf00      	nop
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	2400000c 	.word	0x2400000c

08001c40 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001c44:	4b03      	ldr	r3, [pc, #12]	; (8001c54 <HAL_GetREVID+0x14>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	0c1b      	lsrs	r3, r3, #16
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	5c001000 	.word	0x5c001000

08001c58 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001c60:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001c68:	4904      	ldr	r1, [pc, #16]	; (8001c7c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	604b      	str	r3, [r1, #4]
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	58000400 	.word	0x58000400

08001c80 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	431a      	orrs	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	609a      	str	r2, [r3, #8]
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
 8001cae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b087      	sub	sp, #28
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
 8001cf4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	3360      	adds	r3, #96	; 0x60
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	4413      	add	r3, r2
 8001d02:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	430b      	orrs	r3, r1
 8001d16:	431a      	orrs	r2, r3
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001d1c:	bf00      	nop
 8001d1e:	371c      	adds	r7, #28
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	691b      	ldr	r3, [r3, #16]
 8001d38:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	f003 031f 	and.w	r3, r3, #31
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	fa01 f303 	lsl.w	r3, r1, r3
 8001d48:	431a      	orrs	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	611a      	str	r2, [r3, #16]
}
 8001d4e:	bf00      	nop
 8001d50:	3714      	adds	r7, #20
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b087      	sub	sp, #28
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	60f8      	str	r0, [r7, #12]
 8001d62:	60b9      	str	r1, [r7, #8]
 8001d64:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	3360      	adds	r3, #96	; 0x60
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	601a      	str	r2, [r3, #0]
  }
}
 8001d84:	bf00      	nop
 8001d86:	371c      	adds	r7, #28
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d101      	bne.n	8001da8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001da4:	2301      	movs	r3, #1
 8001da6:	e000      	b.n	8001daa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b087      	sub	sp, #28
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	60f8      	str	r0, [r7, #12]
 8001dbe:	60b9      	str	r1, [r7, #8]
 8001dc0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	3330      	adds	r3, #48	; 0x30
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	0a1b      	lsrs	r3, r3, #8
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	f003 030c 	and.w	r3, r3, #12
 8001dd2:	4413      	add	r3, r2
 8001dd4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	f003 031f 	and.w	r3, r3, #31
 8001de0:	211f      	movs	r1, #31
 8001de2:	fa01 f303 	lsl.w	r3, r1, r3
 8001de6:	43db      	mvns	r3, r3
 8001de8:	401a      	ands	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	0e9b      	lsrs	r3, r3, #26
 8001dee:	f003 011f 	and.w	r1, r3, #31
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	f003 031f 	and.w	r3, r3, #31
 8001df8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfc:	431a      	orrs	r2, r3
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e02:	bf00      	nop
 8001e04:	371c      	adds	r7, #28
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b087      	sub	sp, #28
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	60f8      	str	r0, [r7, #12]
 8001e16:	60b9      	str	r1, [r7, #8]
 8001e18:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	3314      	adds	r3, #20
 8001e1e:	461a      	mov	r2, r3
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	0e5b      	lsrs	r3, r3, #25
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	f003 0304 	and.w	r3, r3, #4
 8001e2a:	4413      	add	r3, r2
 8001e2c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	0d1b      	lsrs	r3, r3, #20
 8001e36:	f003 031f 	and.w	r3, r3, #31
 8001e3a:	2107      	movs	r1, #7
 8001e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e40:	43db      	mvns	r3, r3
 8001e42:	401a      	ands	r2, r3
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	0d1b      	lsrs	r3, r3, #20
 8001e48:	f003 031f 	and.w	r3, r3, #31
 8001e4c:	6879      	ldr	r1, [r7, #4]
 8001e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e52:	431a      	orrs	r2, r3
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001e58:	bf00      	nop
 8001e5a:	371c      	adds	r7, #28
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	401a      	ands	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f003 0318 	and.w	r3, r3, #24
 8001e86:	4908      	ldr	r1, [pc, #32]	; (8001ea8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e88:	40d9      	lsrs	r1, r3
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	400b      	ands	r3, r1
 8001e8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e92:	431a      	orrs	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001e9a:	bf00      	nop
 8001e9c:	3714      	adds	r7, #20
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	000fffff 	.word	0x000fffff

08001eac <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f003 031f 	and.w	r3, r3, #31
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689a      	ldr	r2, [r3, #8]
 8001ef0:	4b04      	ldr	r3, [pc, #16]	; (8001f04 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	6093      	str	r3, [r2, #8]
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	5fffffc0 	.word	0x5fffffc0

08001f08 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f1c:	d101      	bne.n	8001f22 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e000      	b.n	8001f24 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <LL_ADC_EnableInternalRegulator+0x24>)
 8001f3e:	4013      	ands	r3, r2
 8001f40:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	6fffffc0 	.word	0x6fffffc0

08001f58 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f6c:	d101      	bne.n	8001f72 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e000      	b.n	8001f74 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	4b05      	ldr	r3, [pc, #20]	; (8001fa4 <LL_ADC_Enable+0x24>)
 8001f8e:	4013      	ands	r3, r2
 8001f90:	f043 0201 	orr.w	r2, r3, #1
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	7fffffc0 	.word	0x7fffffc0

08001fa8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d101      	bne.n	8001fc0 <LL_ADC_IsEnabled+0x18>
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e000      	b.n	8001fc2 <LL_ADC_IsEnabled+0x1a>
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
	...

08001fd0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	4b05      	ldr	r3, [pc, #20]	; (8001ff4 <LL_ADC_REG_StartConversion+0x24>)
 8001fde:	4013      	ands	r3, r2
 8001fe0:	f043 0204 	orr.w	r2, r3, #4
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	7fffffc0 	.word	0x7fffffc0

08001ff8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f003 0304 	and.w	r3, r3, #4
 8002008:	2b04      	cmp	r3, #4
 800200a:	d101      	bne.n	8002010 <LL_ADC_REG_IsConversionOngoing+0x18>
 800200c:	2301      	movs	r3, #1
 800200e:	e000      	b.n	8002012 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800201e:	b480      	push	{r7}
 8002020:	b083      	sub	sp, #12
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f003 0308 	and.w	r3, r3, #8
 800202e:	2b08      	cmp	r3, #8
 8002030:	d101      	bne.n	8002036 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002032:	2301      	movs	r3, #1
 8002034:	e000      	b.n	8002038 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002044:	b590      	push	{r4, r7, lr}
 8002046:	b089      	sub	sp, #36	; 0x24
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800204c:	2300      	movs	r3, #0
 800204e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002050:	2300      	movs	r3, #0
 8002052:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e18f      	b.n	800237e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002068:	2b00      	cmp	r3, #0
 800206a:	d109      	bne.n	8002080 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f7ff f9c7 	bl	8001400 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff ff3f 	bl	8001f08 <LL_ADC_IsDeepPowerDownEnabled>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d004      	beq.n	800209a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff ff25 	bl	8001ee4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff ff5a 	bl	8001f58 <LL_ADC_IsInternalRegulatorEnabled>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d114      	bne.n	80020d4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff ff3e 	bl	8001f30 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020b4:	4b87      	ldr	r3, [pc, #540]	; (80022d4 <HAL_ADC_Init+0x290>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	099b      	lsrs	r3, r3, #6
 80020ba:	4a87      	ldr	r2, [pc, #540]	; (80022d8 <HAL_ADC_Init+0x294>)
 80020bc:	fba2 2303 	umull	r2, r3, r2, r3
 80020c0:	099b      	lsrs	r3, r3, #6
 80020c2:	3301      	adds	r3, #1
 80020c4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80020c6:	e002      	b.n	80020ce <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	3b01      	subs	r3, #1
 80020cc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1f9      	bne.n	80020c8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff ff3d 	bl	8001f58 <LL_ADC_IsInternalRegulatorEnabled>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d10d      	bne.n	8002100 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e8:	f043 0210 	orr.w	r2, r3, #16
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f4:	f043 0201 	orr.w	r2, r3, #1
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff ff77 	bl	8001ff8 <LL_ADC_REG_IsConversionOngoing>
 800210a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002110:	f003 0310 	and.w	r3, r3, #16
 8002114:	2b00      	cmp	r3, #0
 8002116:	f040 8129 	bne.w	800236c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	2b00      	cmp	r3, #0
 800211e:	f040 8125 	bne.w	800236c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002126:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800212a:	f043 0202 	orr.w	r2, r3, #2
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff ff36 	bl	8001fa8 <LL_ADC_IsEnabled>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d136      	bne.n	80021b0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a65      	ldr	r2, [pc, #404]	; (80022dc <HAL_ADC_Init+0x298>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d004      	beq.n	8002156 <HAL_ADC_Init+0x112>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a63      	ldr	r2, [pc, #396]	; (80022e0 <HAL_ADC_Init+0x29c>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d10e      	bne.n	8002174 <HAL_ADC_Init+0x130>
 8002156:	4861      	ldr	r0, [pc, #388]	; (80022dc <HAL_ADC_Init+0x298>)
 8002158:	f7ff ff26 	bl	8001fa8 <LL_ADC_IsEnabled>
 800215c:	4604      	mov	r4, r0
 800215e:	4860      	ldr	r0, [pc, #384]	; (80022e0 <HAL_ADC_Init+0x29c>)
 8002160:	f7ff ff22 	bl	8001fa8 <LL_ADC_IsEnabled>
 8002164:	4603      	mov	r3, r0
 8002166:	4323      	orrs	r3, r4
 8002168:	2b00      	cmp	r3, #0
 800216a:	bf0c      	ite	eq
 800216c:	2301      	moveq	r3, #1
 800216e:	2300      	movne	r3, #0
 8002170:	b2db      	uxtb	r3, r3
 8002172:	e008      	b.n	8002186 <HAL_ADC_Init+0x142>
 8002174:	485b      	ldr	r0, [pc, #364]	; (80022e4 <HAL_ADC_Init+0x2a0>)
 8002176:	f7ff ff17 	bl	8001fa8 <LL_ADC_IsEnabled>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	bf0c      	ite	eq
 8002180:	2301      	moveq	r3, #1
 8002182:	2300      	movne	r3, #0
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d012      	beq.n	80021b0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a53      	ldr	r2, [pc, #332]	; (80022dc <HAL_ADC_Init+0x298>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d004      	beq.n	800219e <HAL_ADC_Init+0x15a>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a51      	ldr	r2, [pc, #324]	; (80022e0 <HAL_ADC_Init+0x29c>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d101      	bne.n	80021a2 <HAL_ADC_Init+0x15e>
 800219e:	4a52      	ldr	r2, [pc, #328]	; (80022e8 <HAL_ADC_Init+0x2a4>)
 80021a0:	e000      	b.n	80021a4 <HAL_ADC_Init+0x160>
 80021a2:	4a52      	ldr	r2, [pc, #328]	; (80022ec <HAL_ADC_Init+0x2a8>)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	4619      	mov	r1, r3
 80021aa:	4610      	mov	r0, r2
 80021ac:	f7ff fd68 	bl	8001c80 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80021b0:	f7ff fd46 	bl	8001c40 <HAL_GetREVID>
 80021b4:	4603      	mov	r3, r0
 80021b6:	f241 0203 	movw	r2, #4099	; 0x1003
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d914      	bls.n	80021e8 <HAL_ADC_Init+0x1a4>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	2b10      	cmp	r3, #16
 80021c4:	d110      	bne.n	80021e8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	7d5b      	ldrb	r3, [r3, #21]
 80021ca:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80021d0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80021d6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	7f1b      	ldrb	r3, [r3, #28]
 80021dc:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80021de:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80021e0:	f043 030c 	orr.w	r3, r3, #12
 80021e4:	61bb      	str	r3, [r7, #24]
 80021e6:	e00d      	b.n	8002204 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	7d5b      	ldrb	r3, [r3, #21]
 80021ec:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80021f2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80021f8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	7f1b      	ldrb	r3, [r3, #28]
 80021fe:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002200:	4313      	orrs	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	7f1b      	ldrb	r3, [r3, #28]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d106      	bne.n	800221a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a1b      	ldr	r3, [r3, #32]
 8002210:	3b01      	subs	r3, #1
 8002212:	045b      	lsls	r3, r3, #17
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4313      	orrs	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221e:	2b00      	cmp	r3, #0
 8002220:	d009      	beq.n	8002236 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002226:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4313      	orrs	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68da      	ldr	r2, [r3, #12]
 800223c:	4b2c      	ldr	r3, [pc, #176]	; (80022f0 <HAL_ADC_Init+0x2ac>)
 800223e:	4013      	ands	r3, r2
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6812      	ldr	r2, [r2, #0]
 8002244:	69b9      	ldr	r1, [r7, #24]
 8002246:	430b      	orrs	r3, r1
 8002248:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff fed2 	bl	8001ff8 <LL_ADC_REG_IsConversionOngoing>
 8002254:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f7ff fedf 	bl	800201e <LL_ADC_INJ_IsConversionOngoing>
 8002260:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d15f      	bne.n	8002328 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d15c      	bne.n	8002328 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	7d1b      	ldrb	r3, [r3, #20]
 8002272:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002278:	4313      	orrs	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68da      	ldr	r2, [r3, #12]
 8002282:	4b1c      	ldr	r3, [pc, #112]	; (80022f4 <HAL_ADC_Init+0x2b0>)
 8002284:	4013      	ands	r3, r2
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	6812      	ldr	r2, [r2, #0]
 800228a:	69b9      	ldr	r1, [r7, #24]
 800228c:	430b      	orrs	r3, r1
 800228e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002296:	2b01      	cmp	r3, #1
 8002298:	d130      	bne.n	80022fc <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	691a      	ldr	r2, [r3, #16]
 80022a6:	4b14      	ldr	r3, [pc, #80]	; (80022f8 <HAL_ADC_Init+0x2b4>)
 80022a8:	4013      	ands	r3, r2
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80022ae:	3a01      	subs	r2, #1
 80022b0:	0411      	lsls	r1, r2, #16
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80022b6:	4311      	orrs	r1, r2
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80022bc:	4311      	orrs	r1, r2
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80022c2:	430a      	orrs	r2, r1
 80022c4:	431a      	orrs	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f042 0201 	orr.w	r2, r2, #1
 80022ce:	611a      	str	r2, [r3, #16]
 80022d0:	e01c      	b.n	800230c <HAL_ADC_Init+0x2c8>
 80022d2:	bf00      	nop
 80022d4:	24000000 	.word	0x24000000
 80022d8:	053e2d63 	.word	0x053e2d63
 80022dc:	40022000 	.word	0x40022000
 80022e0:	40022100 	.word	0x40022100
 80022e4:	58026000 	.word	0x58026000
 80022e8:	40022300 	.word	0x40022300
 80022ec:	58026300 	.word	0x58026300
 80022f0:	fff0c003 	.word	0xfff0c003
 80022f4:	ffffbffc 	.word	0xffffbffc
 80022f8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	691a      	ldr	r2, [r3, #16]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f022 0201 	bic.w	r2, r2, #1
 800230a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	430a      	orrs	r2, r1
 8002320:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 fdd6 	bl	8002ed4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d10c      	bne.n	800234a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	f023 010f 	bic.w	r1, r3, #15
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	1e5a      	subs	r2, r3, #1
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	430a      	orrs	r2, r1
 8002346:	631a      	str	r2, [r3, #48]	; 0x30
 8002348:	e007      	b.n	800235a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 020f 	bic.w	r2, r2, #15
 8002358:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800235e:	f023 0303 	bic.w	r3, r3, #3
 8002362:	f043 0201 	orr.w	r2, r3, #1
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	655a      	str	r2, [r3, #84]	; 0x54
 800236a:	e007      	b.n	800237c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002370:	f043 0210 	orr.w	r2, r3, #16
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800237c:	7ffb      	ldrb	r3, [r7, #31]
}
 800237e:	4618      	mov	r0, r3
 8002380:	3724      	adds	r7, #36	; 0x24
 8002382:	46bd      	mov	sp, r7
 8002384:	bd90      	pop	{r4, r7, pc}
 8002386:	bf00      	nop

08002388 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a5c      	ldr	r2, [pc, #368]	; (8002508 <HAL_ADC_Start+0x180>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d004      	beq.n	80023a4 <HAL_ADC_Start+0x1c>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a5b      	ldr	r2, [pc, #364]	; (800250c <HAL_ADC_Start+0x184>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d101      	bne.n	80023a8 <HAL_ADC_Start+0x20>
 80023a4:	4b5a      	ldr	r3, [pc, #360]	; (8002510 <HAL_ADC_Start+0x188>)
 80023a6:	e000      	b.n	80023aa <HAL_ADC_Start+0x22>
 80023a8:	4b5a      	ldr	r3, [pc, #360]	; (8002514 <HAL_ADC_Start+0x18c>)
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff fd7e 	bl	8001eac <LL_ADC_GetMultimode>
 80023b0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff fe1e 	bl	8001ff8 <LL_ADC_REG_IsConversionOngoing>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f040 809a 	bne.w	80024f8 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d101      	bne.n	80023d2 <HAL_ADC_Start+0x4a>
 80023ce:	2302      	movs	r3, #2
 80023d0:	e095      	b.n	80024fe <HAL_ADC_Start+0x176>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2201      	movs	r2, #1
 80023d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 fcf0 	bl	8002dc0 <ADC_Enable>
 80023e0:	4603      	mov	r3, r0
 80023e2:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80023e4:	7dfb      	ldrb	r3, [r7, #23]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f040 8081 	bne.w	80024ee <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80023f0:	4b49      	ldr	r3, [pc, #292]	; (8002518 <HAL_ADC_Start+0x190>)
 80023f2:	4013      	ands	r3, r2
 80023f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a42      	ldr	r2, [pc, #264]	; (800250c <HAL_ADC_Start+0x184>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d002      	beq.n	800240c <HAL_ADC_Start+0x84>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	e000      	b.n	800240e <HAL_ADC_Start+0x86>
 800240c:	4b3e      	ldr	r3, [pc, #248]	; (8002508 <HAL_ADC_Start+0x180>)
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	6812      	ldr	r2, [r2, #0]
 8002412:	4293      	cmp	r3, r2
 8002414:	d002      	beq.n	800241c <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d105      	bne.n	8002428 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002420:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002430:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002434:	d106      	bne.n	8002444 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800243a:	f023 0206 	bic.w	r2, r3, #6
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	659a      	str	r2, [r3, #88]	; 0x58
 8002442:	e002      	b.n	800244a <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	221c      	movs	r2, #28
 8002450:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a2b      	ldr	r2, [pc, #172]	; (800250c <HAL_ADC_Start+0x184>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d002      	beq.n	800246a <HAL_ADC_Start+0xe2>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	e000      	b.n	800246c <HAL_ADC_Start+0xe4>
 800246a:	4b27      	ldr	r3, [pc, #156]	; (8002508 <HAL_ADC_Start+0x180>)
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	6812      	ldr	r2, [r2, #0]
 8002470:	4293      	cmp	r3, r2
 8002472:	d008      	beq.n	8002486 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d005      	beq.n	8002486 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	2b05      	cmp	r3, #5
 800247e:	d002      	beq.n	8002486 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	2b09      	cmp	r3, #9
 8002484:	d114      	bne.n	80024b0 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d007      	beq.n	80024a4 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002498:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800249c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff fd91 	bl	8001fd0 <LL_ADC_REG_StartConversion>
 80024ae:	e025      	b.n	80024fc <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a12      	ldr	r2, [pc, #72]	; (800250c <HAL_ADC_Start+0x184>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d002      	beq.n	80024cc <HAL_ADC_Start+0x144>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	e000      	b.n	80024ce <HAL_ADC_Start+0x146>
 80024cc:	4b0e      	ldr	r3, [pc, #56]	; (8002508 <HAL_ADC_Start+0x180>)
 80024ce:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00f      	beq.n	80024fc <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	655a      	str	r2, [r3, #84]	; 0x54
 80024ec:	e006      	b.n	80024fc <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80024f6:	e001      	b.n	80024fc <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80024f8:	2302      	movs	r3, #2
 80024fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80024fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	40022000 	.word	0x40022000
 800250c:	40022100 	.word	0x40022100
 8002510:	40022300 	.word	0x40022300
 8002514:	58026300 	.word	0x58026300
 8002518:	fffff0fe 	.word	0xfffff0fe

0800251c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b088      	sub	sp, #32
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a72      	ldr	r2, [pc, #456]	; (80026f4 <HAL_ADC_PollForConversion+0x1d8>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d004      	beq.n	800253a <HAL_ADC_PollForConversion+0x1e>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a70      	ldr	r2, [pc, #448]	; (80026f8 <HAL_ADC_PollForConversion+0x1dc>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d101      	bne.n	800253e <HAL_ADC_PollForConversion+0x22>
 800253a:	4b70      	ldr	r3, [pc, #448]	; (80026fc <HAL_ADC_PollForConversion+0x1e0>)
 800253c:	e000      	b.n	8002540 <HAL_ADC_PollForConversion+0x24>
 800253e:	4b70      	ldr	r3, [pc, #448]	; (8002700 <HAL_ADC_PollForConversion+0x1e4>)
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff fcb3 	bl	8001eac <LL_ADC_GetMultimode>
 8002546:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	2b08      	cmp	r3, #8
 800254e:	d102      	bne.n	8002556 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002550:	2308      	movs	r3, #8
 8002552:	61fb      	str	r3, [r7, #28]
 8002554:	e037      	b.n	80025c6 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d005      	beq.n	8002568 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	2b05      	cmp	r3, #5
 8002560:	d002      	beq.n	8002568 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	2b09      	cmp	r3, #9
 8002566:	d111      	bne.n	800258c <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b00      	cmp	r3, #0
 8002574:	d007      	beq.n	8002586 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800257a:	f043 0220 	orr.w	r2, r3, #32
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e0b1      	b.n	80026ea <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002586:	2304      	movs	r3, #4
 8002588:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800258a:	e01c      	b.n	80025c6 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a58      	ldr	r2, [pc, #352]	; (80026f4 <HAL_ADC_PollForConversion+0x1d8>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d004      	beq.n	80025a0 <HAL_ADC_PollForConversion+0x84>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a57      	ldr	r2, [pc, #348]	; (80026f8 <HAL_ADC_PollForConversion+0x1dc>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d101      	bne.n	80025a4 <HAL_ADC_PollForConversion+0x88>
 80025a0:	4b56      	ldr	r3, [pc, #344]	; (80026fc <HAL_ADC_PollForConversion+0x1e0>)
 80025a2:	e000      	b.n	80025a6 <HAL_ADC_PollForConversion+0x8a>
 80025a4:	4b56      	ldr	r3, [pc, #344]	; (8002700 <HAL_ADC_PollForConversion+0x1e4>)
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff fc8e 	bl	8001ec8 <LL_ADC_GetMultiDMATransfer>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d007      	beq.n	80025c2 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b6:	f043 0220 	orr.w	r2, r3, #32
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e093      	b.n	80026ea <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80025c2:	2304      	movs	r3, #4
 80025c4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80025c6:	f7ff fb0b 	bl	8001be0 <HAL_GetTick>
 80025ca:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80025cc:	e021      	b.n	8002612 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d4:	d01d      	beq.n	8002612 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80025d6:	f7ff fb03 	bl	8001be0 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d302      	bcc.n	80025ec <HAL_ADC_PollForConversion+0xd0>
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d112      	bne.n	8002612 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	4013      	ands	r3, r2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10b      	bne.n	8002612 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025fe:	f043 0204 	orr.w	r2, r3, #4
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e06b      	b.n	80026ea <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	4013      	ands	r3, r2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0d6      	beq.n	80025ce <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002624:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff fbad 	bl	8001d90 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d01c      	beq.n	8002676 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	7d5b      	ldrb	r3, [r3, #21]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d118      	bne.n	8002676 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0308 	and.w	r3, r3, #8
 800264e:	2b08      	cmp	r3, #8
 8002650:	d111      	bne.n	8002676 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002656:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002662:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d105      	bne.n	8002676 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800266e:	f043 0201 	orr.w	r2, r3, #1
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a1f      	ldr	r2, [pc, #124]	; (80026f8 <HAL_ADC_PollForConversion+0x1dc>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d002      	beq.n	8002686 <HAL_ADC_PollForConversion+0x16a>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	e000      	b.n	8002688 <HAL_ADC_PollForConversion+0x16c>
 8002686:	4b1b      	ldr	r3, [pc, #108]	; (80026f4 <HAL_ADC_PollForConversion+0x1d8>)
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	6812      	ldr	r2, [r2, #0]
 800268c:	4293      	cmp	r3, r2
 800268e:	d008      	beq.n	80026a2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d005      	beq.n	80026a2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	2b05      	cmp	r3, #5
 800269a:	d002      	beq.n	80026a2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	2b09      	cmp	r3, #9
 80026a0:	d104      	bne.n	80026ac <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	61bb      	str	r3, [r7, #24]
 80026aa:	e00c      	b.n	80026c6 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a11      	ldr	r2, [pc, #68]	; (80026f8 <HAL_ADC_PollForConversion+0x1dc>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d002      	beq.n	80026bc <HAL_ADC_PollForConversion+0x1a0>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	e000      	b.n	80026be <HAL_ADC_PollForConversion+0x1a2>
 80026bc:	4b0d      	ldr	r3, [pc, #52]	; (80026f4 <HAL_ADC_PollForConversion+0x1d8>)
 80026be:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	2b08      	cmp	r3, #8
 80026ca:	d104      	bne.n	80026d6 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2208      	movs	r2, #8
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	e008      	b.n	80026e8 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d103      	bne.n	80026e8 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	220c      	movs	r2, #12
 80026e6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3720      	adds	r7, #32
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40022000 	.word	0x40022000
 80026f8:	40022100 	.word	0x40022100
 80026fc:	40022300 	.word	0x40022300
 8002700:	58026300 	.word	0x58026300

08002704 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002712:	4618      	mov	r0, r3
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
	...

08002720 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002720:	b590      	push	{r4, r7, lr}
 8002722:	b0a1      	sub	sp, #132	; 0x84
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800272a:	2300      	movs	r3, #0
 800272c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002730:	2300      	movs	r3, #0
 8002732:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	4a9d      	ldr	r2, [pc, #628]	; (80029b0 <HAL_ADC_ConfigChannel+0x290>)
 800273a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002742:	2b01      	cmp	r3, #1
 8002744:	d101      	bne.n	800274a <HAL_ADC_ConfigChannel+0x2a>
 8002746:	2302      	movs	r3, #2
 8002748:	e321      	b.n	8002d8e <HAL_ADC_ConfigChannel+0x66e>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff fc4e 	bl	8001ff8 <LL_ADC_REG_IsConversionOngoing>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	f040 8306 	bne.w	8002d70 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800276c:	2b00      	cmp	r3, #0
 800276e:	d108      	bne.n	8002782 <HAL_ADC_ConfigChannel+0x62>
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	0e9b      	lsrs	r3, r3, #26
 8002776:	f003 031f 	and.w	r3, r3, #31
 800277a:	2201      	movs	r2, #1
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	e016      	b.n	80027b0 <HAL_ADC_ConfigChannel+0x90>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002788:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800278a:	fa93 f3a3 	rbit	r3, r3
 800278e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002790:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002792:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002794:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800279a:	2320      	movs	r3, #32
 800279c:	e003      	b.n	80027a6 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800279e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027a0:	fab3 f383 	clz	r3, r3
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	f003 031f 	and.w	r3, r3, #31
 80027aa:	2201      	movs	r2, #1
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	6812      	ldr	r2, [r2, #0]
 80027b4:	69d1      	ldr	r1, [r2, #28]
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	6812      	ldr	r2, [r2, #0]
 80027ba:	430b      	orrs	r3, r1
 80027bc:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6818      	ldr	r0, [r3, #0]
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	6859      	ldr	r1, [r3, #4]
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	461a      	mov	r2, r3
 80027cc:	f7ff faf3 	bl	8001db6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff fc0f 	bl	8001ff8 <LL_ADC_REG_IsConversionOngoing>
 80027da:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff fc1c 	bl	800201e <LL_ADC_INJ_IsConversionOngoing>
 80027e6:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f040 80b3 	bne.w	8002956 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f040 80af 	bne.w	8002956 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6818      	ldr	r0, [r3, #0]
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	6819      	ldr	r1, [r3, #0]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	461a      	mov	r2, r3
 8002806:	f7ff fb02 	bl	8001e0e <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800280a:	4b6a      	ldr	r3, [pc, #424]	; (80029b4 <HAL_ADC_ConfigChannel+0x294>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002812:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002816:	d10b      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x110>
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	695a      	ldr	r2, [r3, #20]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	089b      	lsrs	r3, r3, #2
 8002824:	f003 0307 	and.w	r3, r3, #7
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	e01d      	b.n	800286c <HAL_ADC_ConfigChannel+0x14c>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	f003 0310 	and.w	r3, r3, #16
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10b      	bne.n	8002856 <HAL_ADC_ConfigChannel+0x136>
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	695a      	ldr	r2, [r3, #20]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	089b      	lsrs	r3, r3, #2
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	e00a      	b.n	800286c <HAL_ADC_ConfigChannel+0x14c>
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	695a      	ldr	r2, [r3, #20]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	089b      	lsrs	r3, r3, #2
 8002862:	f003 0304 	and.w	r3, r3, #4
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	2b04      	cmp	r3, #4
 8002874:	d027      	beq.n	80028c6 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6818      	ldr	r0, [r3, #0]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	6919      	ldr	r1, [r3, #16]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002884:	f7ff fa30 	bl	8001ce8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6818      	ldr	r0, [r3, #0]
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	6919      	ldr	r1, [r3, #16]
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	7e5b      	ldrb	r3, [r3, #25]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d102      	bne.n	800289e <HAL_ADC_ConfigChannel+0x17e>
 8002898:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800289c:	e000      	b.n	80028a0 <HAL_ADC_ConfigChannel+0x180>
 800289e:	2300      	movs	r3, #0
 80028a0:	461a      	mov	r2, r3
 80028a2:	f7ff fa5a 	bl	8001d5a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6818      	ldr	r0, [r3, #0]
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	6919      	ldr	r1, [r3, #16]
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	7e1b      	ldrb	r3, [r3, #24]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d102      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x19c>
 80028b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80028ba:	e000      	b.n	80028be <HAL_ADC_ConfigChannel+0x19e>
 80028bc:	2300      	movs	r3, #0
 80028be:	461a      	mov	r2, r3
 80028c0:	f7ff fa32 	bl	8001d28 <LL_ADC_SetDataRightShift>
 80028c4:	e047      	b.n	8002956 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	069b      	lsls	r3, r3, #26
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d107      	bne.n	80028ea <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80028e8:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028f0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	069b      	lsls	r3, r3, #26
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d107      	bne.n	800290e <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800290c:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002914:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	069b      	lsls	r3, r3, #26
 800291e:	429a      	cmp	r2, r3
 8002920:	d107      	bne.n	8002932 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002930:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002938:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	069b      	lsls	r3, r3, #26
 8002942:	429a      	cmp	r2, r3
 8002944:	d107      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002954:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff fb24 	bl	8001fa8 <LL_ADC_IsEnabled>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	f040 820d 	bne.w	8002d82 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6818      	ldr	r0, [r3, #0]
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	6819      	ldr	r1, [r3, #0]
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	461a      	mov	r2, r3
 8002976:	f7ff fa75 	bl	8001e64 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	4a0c      	ldr	r2, [pc, #48]	; (80029b0 <HAL_ADC_ConfigChannel+0x290>)
 8002980:	4293      	cmp	r3, r2
 8002982:	f040 8133 	bne.w	8002bec <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002992:	2b00      	cmp	r3, #0
 8002994:	d110      	bne.n	80029b8 <HAL_ADC_ConfigChannel+0x298>
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	0e9b      	lsrs	r3, r3, #26
 800299c:	3301      	adds	r3, #1
 800299e:	f003 031f 	and.w	r3, r3, #31
 80029a2:	2b09      	cmp	r3, #9
 80029a4:	bf94      	ite	ls
 80029a6:	2301      	movls	r3, #1
 80029a8:	2300      	movhi	r3, #0
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	e01e      	b.n	80029ec <HAL_ADC_ConfigChannel+0x2cc>
 80029ae:	bf00      	nop
 80029b0:	47ff0000 	.word	0x47ff0000
 80029b4:	5c001000 	.word	0x5c001000
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029c0:	fa93 f3a3 	rbit	r3, r3
 80029c4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80029c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80029ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d101      	bne.n	80029d4 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80029d0:	2320      	movs	r3, #32
 80029d2:	e003      	b.n	80029dc <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80029d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029d6:	fab3 f383 	clz	r3, r3
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	3301      	adds	r3, #1
 80029de:	f003 031f 	and.w	r3, r3, #31
 80029e2:	2b09      	cmp	r3, #9
 80029e4:	bf94      	ite	ls
 80029e6:	2301      	movls	r3, #1
 80029e8:	2300      	movhi	r3, #0
 80029ea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d079      	beq.n	8002ae4 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d107      	bne.n	8002a0c <HAL_ADC_ConfigChannel+0x2ec>
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	0e9b      	lsrs	r3, r3, #26
 8002a02:	3301      	adds	r3, #1
 8002a04:	069b      	lsls	r3, r3, #26
 8002a06:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a0a:	e015      	b.n	8002a38 <HAL_ADC_ConfigChannel+0x318>
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a14:	fa93 f3a3 	rbit	r3, r3
 8002a18:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002a1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a1c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002a1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d101      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002a24:	2320      	movs	r3, #32
 8002a26:	e003      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002a28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a2a:	fab3 f383 	clz	r3, r3
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	3301      	adds	r3, #1
 8002a32:	069b      	lsls	r3, r3, #26
 8002a34:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d109      	bne.n	8002a58 <HAL_ADC_ConfigChannel+0x338>
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	0e9b      	lsrs	r3, r3, #26
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	f003 031f 	and.w	r3, r3, #31
 8002a50:	2101      	movs	r1, #1
 8002a52:	fa01 f303 	lsl.w	r3, r1, r3
 8002a56:	e017      	b.n	8002a88 <HAL_ADC_ConfigChannel+0x368>
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a60:	fa93 f3a3 	rbit	r3, r3
 8002a64:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a68:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002a6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002a70:	2320      	movs	r3, #32
 8002a72:	e003      	b.n	8002a7c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002a74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a76:	fab3 f383 	clz	r3, r3
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	f003 031f 	and.w	r3, r3, #31
 8002a82:	2101      	movs	r1, #1
 8002a84:	fa01 f303 	lsl.w	r3, r1, r3
 8002a88:	ea42 0103 	orr.w	r1, r2, r3
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10a      	bne.n	8002aae <HAL_ADC_ConfigChannel+0x38e>
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	0e9b      	lsrs	r3, r3, #26
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	f003 021f 	and.w	r2, r3, #31
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	4413      	add	r3, r2
 8002aaa:	051b      	lsls	r3, r3, #20
 8002aac:	e018      	b.n	8002ae0 <HAL_ADC_ConfigChannel+0x3c0>
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ab6:	fa93 f3a3 	rbit	r3, r3
 8002aba:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002abe:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002ac6:	2320      	movs	r3, #32
 8002ac8:	e003      	b.n	8002ad2 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8002aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002acc:	fab3 f383 	clz	r3, r3
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	f003 021f 	and.w	r2, r3, #31
 8002ad8:	4613      	mov	r3, r2
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	4413      	add	r3, r2
 8002ade:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ae0:	430b      	orrs	r3, r1
 8002ae2:	e07e      	b.n	8002be2 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d107      	bne.n	8002b00 <HAL_ADC_ConfigChannel+0x3e0>
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	0e9b      	lsrs	r3, r3, #26
 8002af6:	3301      	adds	r3, #1
 8002af8:	069b      	lsls	r3, r3, #26
 8002afa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002afe:	e015      	b.n	8002b2c <HAL_ADC_ConfigChannel+0x40c>
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b08:	fa93 f3a3 	rbit	r3, r3
 8002b0c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b10:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d101      	bne.n	8002b1c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002b18:	2320      	movs	r3, #32
 8002b1a:	e003      	b.n	8002b24 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b1e:	fab3 f383 	clz	r3, r3
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	3301      	adds	r3, #1
 8002b26:	069b      	lsls	r3, r3, #26
 8002b28:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d109      	bne.n	8002b4c <HAL_ADC_ConfigChannel+0x42c>
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	0e9b      	lsrs	r3, r3, #26
 8002b3e:	3301      	adds	r3, #1
 8002b40:	f003 031f 	and.w	r3, r3, #31
 8002b44:	2101      	movs	r1, #1
 8002b46:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4a:	e017      	b.n	8002b7c <HAL_ADC_ConfigChannel+0x45c>
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	fa93 f3a3 	rbit	r3, r3
 8002b58:	61bb      	str	r3, [r7, #24]
  return result;
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002b5e:	6a3b      	ldr	r3, [r7, #32]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d101      	bne.n	8002b68 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002b64:	2320      	movs	r3, #32
 8002b66:	e003      	b.n	8002b70 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8002b68:	6a3b      	ldr	r3, [r7, #32]
 8002b6a:	fab3 f383 	clz	r3, r3
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	3301      	adds	r3, #1
 8002b72:	f003 031f 	and.w	r3, r3, #31
 8002b76:	2101      	movs	r1, #1
 8002b78:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7c:	ea42 0103 	orr.w	r1, r2, r3
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d10d      	bne.n	8002ba8 <HAL_ADC_ConfigChannel+0x488>
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	0e9b      	lsrs	r3, r3, #26
 8002b92:	3301      	adds	r3, #1
 8002b94:	f003 021f 	and.w	r2, r3, #31
 8002b98:	4613      	mov	r3, r2
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	4413      	add	r3, r2
 8002b9e:	3b1e      	subs	r3, #30
 8002ba0:	051b      	lsls	r3, r3, #20
 8002ba2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ba6:	e01b      	b.n	8002be0 <HAL_ADC_ConfigChannel+0x4c0>
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	fa93 f3a3 	rbit	r3, r3
 8002bb4:	60fb      	str	r3, [r7, #12]
  return result;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d101      	bne.n	8002bc4 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002bc0:	2320      	movs	r3, #32
 8002bc2:	e003      	b.n	8002bcc <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	fab3 f383 	clz	r3, r3
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	3301      	adds	r3, #1
 8002bce:	f003 021f 	and.w	r2, r3, #31
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	4413      	add	r3, r2
 8002bd8:	3b1e      	subs	r3, #30
 8002bda:	051b      	lsls	r3, r3, #20
 8002bdc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002be0:	430b      	orrs	r3, r1
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	6892      	ldr	r2, [r2, #8]
 8002be6:	4619      	mov	r1, r3
 8002be8:	f7ff f911 	bl	8001e0e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f280 80c6 	bge.w	8002d82 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a67      	ldr	r2, [pc, #412]	; (8002d98 <HAL_ADC_ConfigChannel+0x678>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d004      	beq.n	8002c0a <HAL_ADC_ConfigChannel+0x4ea>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a65      	ldr	r2, [pc, #404]	; (8002d9c <HAL_ADC_ConfigChannel+0x67c>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d101      	bne.n	8002c0e <HAL_ADC_ConfigChannel+0x4ee>
 8002c0a:	4b65      	ldr	r3, [pc, #404]	; (8002da0 <HAL_ADC_ConfigChannel+0x680>)
 8002c0c:	e000      	b.n	8002c10 <HAL_ADC_ConfigChannel+0x4f0>
 8002c0e:	4b65      	ldr	r3, [pc, #404]	; (8002da4 <HAL_ADC_ConfigChannel+0x684>)
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff f85b 	bl	8001ccc <LL_ADC_GetCommonPathInternalCh>
 8002c16:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a5e      	ldr	r2, [pc, #376]	; (8002d98 <HAL_ADC_ConfigChannel+0x678>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d004      	beq.n	8002c2c <HAL_ADC_ConfigChannel+0x50c>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a5d      	ldr	r2, [pc, #372]	; (8002d9c <HAL_ADC_ConfigChannel+0x67c>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d10e      	bne.n	8002c4a <HAL_ADC_ConfigChannel+0x52a>
 8002c2c:	485a      	ldr	r0, [pc, #360]	; (8002d98 <HAL_ADC_ConfigChannel+0x678>)
 8002c2e:	f7ff f9bb 	bl	8001fa8 <LL_ADC_IsEnabled>
 8002c32:	4604      	mov	r4, r0
 8002c34:	4859      	ldr	r0, [pc, #356]	; (8002d9c <HAL_ADC_ConfigChannel+0x67c>)
 8002c36:	f7ff f9b7 	bl	8001fa8 <LL_ADC_IsEnabled>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	4323      	orrs	r3, r4
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	bf0c      	ite	eq
 8002c42:	2301      	moveq	r3, #1
 8002c44:	2300      	movne	r3, #0
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	e008      	b.n	8002c5c <HAL_ADC_ConfigChannel+0x53c>
 8002c4a:	4857      	ldr	r0, [pc, #348]	; (8002da8 <HAL_ADC_ConfigChannel+0x688>)
 8002c4c:	f7ff f9ac 	bl	8001fa8 <LL_ADC_IsEnabled>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	bf0c      	ite	eq
 8002c56:	2301      	moveq	r3, #1
 8002c58:	2300      	movne	r3, #0
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d07d      	beq.n	8002d5c <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a51      	ldr	r2, [pc, #324]	; (8002dac <HAL_ADC_ConfigChannel+0x68c>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d130      	bne.n	8002ccc <HAL_ADC_ConfigChannel+0x5ac>
 8002c6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d12b      	bne.n	8002ccc <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a4b      	ldr	r2, [pc, #300]	; (8002da8 <HAL_ADC_ConfigChannel+0x688>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	f040 8081 	bne.w	8002d82 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a44      	ldr	r2, [pc, #272]	; (8002d98 <HAL_ADC_ConfigChannel+0x678>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d004      	beq.n	8002c94 <HAL_ADC_ConfigChannel+0x574>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a43      	ldr	r2, [pc, #268]	; (8002d9c <HAL_ADC_ConfigChannel+0x67c>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d101      	bne.n	8002c98 <HAL_ADC_ConfigChannel+0x578>
 8002c94:	4a42      	ldr	r2, [pc, #264]	; (8002da0 <HAL_ADC_ConfigChannel+0x680>)
 8002c96:	e000      	b.n	8002c9a <HAL_ADC_ConfigChannel+0x57a>
 8002c98:	4a42      	ldr	r2, [pc, #264]	; (8002da4 <HAL_ADC_ConfigChannel+0x684>)
 8002c9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c9c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	4610      	mov	r0, r2
 8002ca4:	f7fe ffff 	bl	8001ca6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ca8:	4b41      	ldr	r3, [pc, #260]	; (8002db0 <HAL_ADC_ConfigChannel+0x690>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	099b      	lsrs	r3, r3, #6
 8002cae:	4a41      	ldr	r2, [pc, #260]	; (8002db4 <HAL_ADC_ConfigChannel+0x694>)
 8002cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb4:	099b      	lsrs	r3, r3, #6
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002cbc:	e002      	b.n	8002cc4 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1f9      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cca:	e05a      	b.n	8002d82 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a39      	ldr	r2, [pc, #228]	; (8002db8 <HAL_ADC_ConfigChannel+0x698>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d11e      	bne.n	8002d14 <HAL_ADC_ConfigChannel+0x5f4>
 8002cd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d119      	bne.n	8002d14 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a30      	ldr	r2, [pc, #192]	; (8002da8 <HAL_ADC_ConfigChannel+0x688>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d14b      	bne.n	8002d82 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a2a      	ldr	r2, [pc, #168]	; (8002d98 <HAL_ADC_ConfigChannel+0x678>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d004      	beq.n	8002cfe <HAL_ADC_ConfigChannel+0x5de>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a28      	ldr	r2, [pc, #160]	; (8002d9c <HAL_ADC_ConfigChannel+0x67c>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d101      	bne.n	8002d02 <HAL_ADC_ConfigChannel+0x5e2>
 8002cfe:	4a28      	ldr	r2, [pc, #160]	; (8002da0 <HAL_ADC_ConfigChannel+0x680>)
 8002d00:	e000      	b.n	8002d04 <HAL_ADC_ConfigChannel+0x5e4>
 8002d02:	4a28      	ldr	r2, [pc, #160]	; (8002da4 <HAL_ADC_ConfigChannel+0x684>)
 8002d04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	4610      	mov	r0, r2
 8002d0e:	f7fe ffca 	bl	8001ca6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d12:	e036      	b.n	8002d82 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a28      	ldr	r2, [pc, #160]	; (8002dbc <HAL_ADC_ConfigChannel+0x69c>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d131      	bne.n	8002d82 <HAL_ADC_ConfigChannel+0x662>
 8002d1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d12c      	bne.n	8002d82 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a1e      	ldr	r2, [pc, #120]	; (8002da8 <HAL_ADC_ConfigChannel+0x688>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d127      	bne.n	8002d82 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a18      	ldr	r2, [pc, #96]	; (8002d98 <HAL_ADC_ConfigChannel+0x678>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d004      	beq.n	8002d46 <HAL_ADC_ConfigChannel+0x626>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a16      	ldr	r2, [pc, #88]	; (8002d9c <HAL_ADC_ConfigChannel+0x67c>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d101      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x62a>
 8002d46:	4a16      	ldr	r2, [pc, #88]	; (8002da0 <HAL_ADC_ConfigChannel+0x680>)
 8002d48:	e000      	b.n	8002d4c <HAL_ADC_ConfigChannel+0x62c>
 8002d4a:	4a16      	ldr	r2, [pc, #88]	; (8002da4 <HAL_ADC_ConfigChannel+0x684>)
 8002d4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d4e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d52:	4619      	mov	r1, r3
 8002d54:	4610      	mov	r0, r2
 8002d56:	f7fe ffa6 	bl	8001ca6 <LL_ADC_SetCommonPathInternalCh>
 8002d5a:	e012      	b.n	8002d82 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d60:	f043 0220 	orr.w	r2, r3, #32
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002d6e:	e008      	b.n	8002d82 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d74:	f043 0220 	orr.w	r2, r3, #32
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d8a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3784      	adds	r7, #132	; 0x84
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd90      	pop	{r4, r7, pc}
 8002d96:	bf00      	nop
 8002d98:	40022000 	.word	0x40022000
 8002d9c:	40022100 	.word	0x40022100
 8002da0:	40022300 	.word	0x40022300
 8002da4:	58026300 	.word	0x58026300
 8002da8:	58026000 	.word	0x58026000
 8002dac:	cb840000 	.word	0xcb840000
 8002db0:	24000000 	.word	0x24000000
 8002db4:	053e2d63 	.word	0x053e2d63
 8002db8:	c7520000 	.word	0xc7520000
 8002dbc:	cfb80000 	.word	0xcfb80000

08002dc0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff f8eb 	bl	8001fa8 <LL_ADC_IsEnabled>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d16e      	bne.n	8002eb6 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	689a      	ldr	r2, [r3, #8]
 8002dde:	4b38      	ldr	r3, [pc, #224]	; (8002ec0 <ADC_Enable+0x100>)
 8002de0:	4013      	ands	r3, r2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00d      	beq.n	8002e02 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dea:	f043 0210 	orr.w	r2, r3, #16
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df6:	f043 0201 	orr.w	r2, r3, #1
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e05a      	b.n	8002eb8 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff f8ba 	bl	8001f80 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002e0c:	f7fe fee8 	bl	8001be0 <HAL_GetTick>
 8002e10:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a2b      	ldr	r2, [pc, #172]	; (8002ec4 <ADC_Enable+0x104>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d004      	beq.n	8002e26 <ADC_Enable+0x66>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a29      	ldr	r2, [pc, #164]	; (8002ec8 <ADC_Enable+0x108>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d101      	bne.n	8002e2a <ADC_Enable+0x6a>
 8002e26:	4b29      	ldr	r3, [pc, #164]	; (8002ecc <ADC_Enable+0x10c>)
 8002e28:	e000      	b.n	8002e2c <ADC_Enable+0x6c>
 8002e2a:	4b29      	ldr	r3, [pc, #164]	; (8002ed0 <ADC_Enable+0x110>)
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff f83d 	bl	8001eac <LL_ADC_GetMultimode>
 8002e32:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a23      	ldr	r2, [pc, #140]	; (8002ec8 <ADC_Enable+0x108>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d002      	beq.n	8002e44 <ADC_Enable+0x84>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	e000      	b.n	8002e46 <ADC_Enable+0x86>
 8002e44:	4b1f      	ldr	r3, [pc, #124]	; (8002ec4 <ADC_Enable+0x104>)
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	6812      	ldr	r2, [r2, #0]
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d02c      	beq.n	8002ea8 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d130      	bne.n	8002eb6 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e54:	e028      	b.n	8002ea8 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7ff f8a4 	bl	8001fa8 <LL_ADC_IsEnabled>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d104      	bne.n	8002e70 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7ff f888 	bl	8001f80 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e70:	f7fe feb6 	bl	8001be0 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d914      	bls.n	8002ea8 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d00d      	beq.n	8002ea8 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e90:	f043 0210 	orr.w	r2, r3, #16
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e9c:	f043 0201 	orr.w	r2, r3, #1
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e007      	b.n	8002eb8 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d1cf      	bne.n	8002e56 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	8000003f 	.word	0x8000003f
 8002ec4:	40022000 	.word	0x40022000
 8002ec8:	40022100 	.word	0x40022100
 8002ecc:	40022300 	.word	0x40022300
 8002ed0:	58026300 	.word	0x58026300

08002ed4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a7a      	ldr	r2, [pc, #488]	; (80030cc <ADC_ConfigureBoostMode+0x1f8>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d004      	beq.n	8002ef0 <ADC_ConfigureBoostMode+0x1c>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a79      	ldr	r2, [pc, #484]	; (80030d0 <ADC_ConfigureBoostMode+0x1fc>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d109      	bne.n	8002f04 <ADC_ConfigureBoostMode+0x30>
 8002ef0:	4b78      	ldr	r3, [pc, #480]	; (80030d4 <ADC_ConfigureBoostMode+0x200>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	bf14      	ite	ne
 8002efc:	2301      	movne	r3, #1
 8002efe:	2300      	moveq	r3, #0
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	e008      	b.n	8002f16 <ADC_ConfigureBoostMode+0x42>
 8002f04:	4b74      	ldr	r3, [pc, #464]	; (80030d8 <ADC_ConfigureBoostMode+0x204>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	bf14      	ite	ne
 8002f10:	2301      	movne	r3, #1
 8002f12:	2300      	moveq	r3, #0
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d01c      	beq.n	8002f54 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002f1a:	f002 fa0d 	bl	8005338 <HAL_RCC_GetHCLKFreq>
 8002f1e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f28:	d010      	beq.n	8002f4c <ADC_ConfigureBoostMode+0x78>
 8002f2a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f2e:	d873      	bhi.n	8003018 <ADC_ConfigureBoostMode+0x144>
 8002f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f34:	d002      	beq.n	8002f3c <ADC_ConfigureBoostMode+0x68>
 8002f36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f3a:	d16d      	bne.n	8003018 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	0c1b      	lsrs	r3, r3, #16
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f48:	60fb      	str	r3, [r7, #12]
        break;
 8002f4a:	e068      	b.n	800301e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	089b      	lsrs	r3, r3, #2
 8002f50:	60fb      	str	r3, [r7, #12]
        break;
 8002f52:	e064      	b.n	800301e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002f54:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002f58:	f04f 0100 	mov.w	r1, #0
 8002f5c:	f003 fc52 	bl	8006804 <HAL_RCCEx_GetPeriphCLKFreq>
 8002f60:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002f6a:	d051      	beq.n	8003010 <ADC_ConfigureBoostMode+0x13c>
 8002f6c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002f70:	d854      	bhi.n	800301c <ADC_ConfigureBoostMode+0x148>
 8002f72:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002f76:	d047      	beq.n	8003008 <ADC_ConfigureBoostMode+0x134>
 8002f78:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002f7c:	d84e      	bhi.n	800301c <ADC_ConfigureBoostMode+0x148>
 8002f7e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002f82:	d03d      	beq.n	8003000 <ADC_ConfigureBoostMode+0x12c>
 8002f84:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002f88:	d848      	bhi.n	800301c <ADC_ConfigureBoostMode+0x148>
 8002f8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f8e:	d033      	beq.n	8002ff8 <ADC_ConfigureBoostMode+0x124>
 8002f90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f94:	d842      	bhi.n	800301c <ADC_ConfigureBoostMode+0x148>
 8002f96:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002f9a:	d029      	beq.n	8002ff0 <ADC_ConfigureBoostMode+0x11c>
 8002f9c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002fa0:	d83c      	bhi.n	800301c <ADC_ConfigureBoostMode+0x148>
 8002fa2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002fa6:	d01a      	beq.n	8002fde <ADC_ConfigureBoostMode+0x10a>
 8002fa8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002fac:	d836      	bhi.n	800301c <ADC_ConfigureBoostMode+0x148>
 8002fae:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002fb2:	d014      	beq.n	8002fde <ADC_ConfigureBoostMode+0x10a>
 8002fb4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002fb8:	d830      	bhi.n	800301c <ADC_ConfigureBoostMode+0x148>
 8002fba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fbe:	d00e      	beq.n	8002fde <ADC_ConfigureBoostMode+0x10a>
 8002fc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fc4:	d82a      	bhi.n	800301c <ADC_ConfigureBoostMode+0x148>
 8002fc6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002fca:	d008      	beq.n	8002fde <ADC_ConfigureBoostMode+0x10a>
 8002fcc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002fd0:	d824      	bhi.n	800301c <ADC_ConfigureBoostMode+0x148>
 8002fd2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002fd6:	d002      	beq.n	8002fde <ADC_ConfigureBoostMode+0x10a>
 8002fd8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002fdc:	d11e      	bne.n	800301c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	0c9b      	lsrs	r3, r3, #18
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fec:	60fb      	str	r3, [r7, #12]
        break;
 8002fee:	e016      	b.n	800301e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	091b      	lsrs	r3, r3, #4
 8002ff4:	60fb      	str	r3, [r7, #12]
        break;
 8002ff6:	e012      	b.n	800301e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	095b      	lsrs	r3, r3, #5
 8002ffc:	60fb      	str	r3, [r7, #12]
        break;
 8002ffe:	e00e      	b.n	800301e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	099b      	lsrs	r3, r3, #6
 8003004:	60fb      	str	r3, [r7, #12]
        break;
 8003006:	e00a      	b.n	800301e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	09db      	lsrs	r3, r3, #7
 800300c:	60fb      	str	r3, [r7, #12]
        break;
 800300e:	e006      	b.n	800301e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	0a1b      	lsrs	r3, r3, #8
 8003014:	60fb      	str	r3, [r7, #12]
        break;
 8003016:	e002      	b.n	800301e <ADC_ConfigureBoostMode+0x14a>
        break;
 8003018:	bf00      	nop
 800301a:	e000      	b.n	800301e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800301c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800301e:	f7fe fe0f 	bl	8001c40 <HAL_GetREVID>
 8003022:	4603      	mov	r3, r0
 8003024:	f241 0203 	movw	r2, #4099	; 0x1003
 8003028:	4293      	cmp	r3, r2
 800302a:	d815      	bhi.n	8003058 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	4a2b      	ldr	r2, [pc, #172]	; (80030dc <ADC_ConfigureBoostMode+0x208>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d908      	bls.n	8003046 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689a      	ldr	r2, [r3, #8]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003042:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003044:	e03e      	b.n	80030c4 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003054:	609a      	str	r2, [r3, #8]
}
 8003056:	e035      	b.n	80030c4 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	085b      	lsrs	r3, r3, #1
 800305c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	4a1f      	ldr	r2, [pc, #124]	; (80030e0 <ADC_ConfigureBoostMode+0x20c>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d808      	bhi.n	8003078 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003074:	609a      	str	r2, [r3, #8]
}
 8003076:	e025      	b.n	80030c4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	4a1a      	ldr	r2, [pc, #104]	; (80030e4 <ADC_ConfigureBoostMode+0x210>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d80a      	bhi.n	8003096 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003092:	609a      	str	r2, [r3, #8]
}
 8003094:	e016      	b.n	80030c4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	4a13      	ldr	r2, [pc, #76]	; (80030e8 <ADC_ConfigureBoostMode+0x214>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d80a      	bhi.n	80030b4 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030b0:	609a      	str	r2, [r3, #8]
}
 80030b2:	e007      	b.n	80030c4 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689a      	ldr	r2, [r3, #8]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80030c2:	609a      	str	r2, [r3, #8]
}
 80030c4:	bf00      	nop
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	40022000 	.word	0x40022000
 80030d0:	40022100 	.word	0x40022100
 80030d4:	40022300 	.word	0x40022300
 80030d8:	58026300 	.word	0x58026300
 80030dc:	01312d00 	.word	0x01312d00
 80030e0:	005f5e10 	.word	0x005f5e10
 80030e4:	00bebc20 	.word	0x00bebc20
 80030e8:	017d7840 	.word	0x017d7840

080030ec <LL_ADC_IsEnabled>:
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f003 0301 	and.w	r3, r3, #1
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d101      	bne.n	8003104 <LL_ADC_IsEnabled+0x18>
 8003100:	2301      	movs	r3, #1
 8003102:	e000      	b.n	8003106 <LL_ADC_IsEnabled+0x1a>
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <LL_ADC_REG_IsConversionOngoing>:
{
 8003112:	b480      	push	{r7}
 8003114:	b083      	sub	sp, #12
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f003 0304 	and.w	r3, r3, #4
 8003122:	2b04      	cmp	r3, #4
 8003124:	d101      	bne.n	800312a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003126:	2301      	movs	r3, #1
 8003128:	e000      	b.n	800312c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003138:	b590      	push	{r4, r7, lr}
 800313a:	b09f      	sub	sp, #124	; 0x7c
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003142:	2300      	movs	r3, #0
 8003144:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800314e:	2b01      	cmp	r3, #1
 8003150:	d101      	bne.n	8003156 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003152:	2302      	movs	r3, #2
 8003154:	e0be      	b.n	80032d4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800315e:	2300      	movs	r3, #0
 8003160:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003162:	2300      	movs	r3, #0
 8003164:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a5c      	ldr	r2, [pc, #368]	; (80032dc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d102      	bne.n	8003176 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003170:	4b5b      	ldr	r3, [pc, #364]	; (80032e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003172:	60bb      	str	r3, [r7, #8]
 8003174:	e001      	b.n	800317a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003176:	2300      	movs	r3, #0
 8003178:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d10b      	bne.n	8003198 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003184:	f043 0220 	orr.w	r2, r3, #32
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e09d      	b.n	80032d4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	4618      	mov	r0, r3
 800319c:	f7ff ffb9 	bl	8003112 <LL_ADC_REG_IsConversionOngoing>
 80031a0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7ff ffb3 	bl	8003112 <LL_ADC_REG_IsConversionOngoing>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d17f      	bne.n	80032b2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80031b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d17c      	bne.n	80032b2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a47      	ldr	r2, [pc, #284]	; (80032dc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d004      	beq.n	80031cc <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a46      	ldr	r2, [pc, #280]	; (80032e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d101      	bne.n	80031d0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80031cc:	4b45      	ldr	r3, [pc, #276]	; (80032e4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80031ce:	e000      	b.n	80031d2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80031d0:	4b45      	ldr	r3, [pc, #276]	; (80032e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80031d2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d039      	beq.n	8003250 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80031dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	431a      	orrs	r2, r3
 80031ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ec:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a3a      	ldr	r2, [pc, #232]	; (80032dc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d004      	beq.n	8003202 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a38      	ldr	r2, [pc, #224]	; (80032e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d10e      	bne.n	8003220 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003202:	4836      	ldr	r0, [pc, #216]	; (80032dc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003204:	f7ff ff72 	bl	80030ec <LL_ADC_IsEnabled>
 8003208:	4604      	mov	r4, r0
 800320a:	4835      	ldr	r0, [pc, #212]	; (80032e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800320c:	f7ff ff6e 	bl	80030ec <LL_ADC_IsEnabled>
 8003210:	4603      	mov	r3, r0
 8003212:	4323      	orrs	r3, r4
 8003214:	2b00      	cmp	r3, #0
 8003216:	bf0c      	ite	eq
 8003218:	2301      	moveq	r3, #1
 800321a:	2300      	movne	r3, #0
 800321c:	b2db      	uxtb	r3, r3
 800321e:	e008      	b.n	8003232 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003220:	4832      	ldr	r0, [pc, #200]	; (80032ec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003222:	f7ff ff63 	bl	80030ec <LL_ADC_IsEnabled>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	bf0c      	ite	eq
 800322c:	2301      	moveq	r3, #1
 800322e:	2300      	movne	r3, #0
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d047      	beq.n	80032c6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003236:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003238:	689a      	ldr	r2, [r3, #8]
 800323a:	4b2d      	ldr	r3, [pc, #180]	; (80032f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800323c:	4013      	ands	r3, r2
 800323e:	683a      	ldr	r2, [r7, #0]
 8003240:	6811      	ldr	r1, [r2, #0]
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	6892      	ldr	r2, [r2, #8]
 8003246:	430a      	orrs	r2, r1
 8003248:	431a      	orrs	r2, r3
 800324a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800324c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800324e:	e03a      	b.n	80032c6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003250:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800325a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a1e      	ldr	r2, [pc, #120]	; (80032dc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d004      	beq.n	8003270 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a1d      	ldr	r2, [pc, #116]	; (80032e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d10e      	bne.n	800328e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003270:	481a      	ldr	r0, [pc, #104]	; (80032dc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003272:	f7ff ff3b 	bl	80030ec <LL_ADC_IsEnabled>
 8003276:	4604      	mov	r4, r0
 8003278:	4819      	ldr	r0, [pc, #100]	; (80032e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800327a:	f7ff ff37 	bl	80030ec <LL_ADC_IsEnabled>
 800327e:	4603      	mov	r3, r0
 8003280:	4323      	orrs	r3, r4
 8003282:	2b00      	cmp	r3, #0
 8003284:	bf0c      	ite	eq
 8003286:	2301      	moveq	r3, #1
 8003288:	2300      	movne	r3, #0
 800328a:	b2db      	uxtb	r3, r3
 800328c:	e008      	b.n	80032a0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800328e:	4817      	ldr	r0, [pc, #92]	; (80032ec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003290:	f7ff ff2c 	bl	80030ec <LL_ADC_IsEnabled>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	bf0c      	ite	eq
 800329a:	2301      	moveq	r3, #1
 800329c:	2300      	movne	r3, #0
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d010      	beq.n	80032c6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80032a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032a6:	689a      	ldr	r2, [r3, #8]
 80032a8:	4b11      	ldr	r3, [pc, #68]	; (80032f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80032aa:	4013      	ands	r3, r2
 80032ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80032ae:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032b0:	e009      	b.n	80032c6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b6:	f043 0220 	orr.w	r2, r3, #32
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80032c4:	e000      	b.n	80032c8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032c6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80032d0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	377c      	adds	r7, #124	; 0x7c
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd90      	pop	{r4, r7, pc}
 80032dc:	40022000 	.word	0x40022000
 80032e0:	40022100 	.word	0x40022100
 80032e4:	40022300 	.word	0x40022300
 80032e8:	58026300 	.word	0x58026300
 80032ec:	58026000 	.word	0x58026000
 80032f0:	fffff0e0 	.word	0xfffff0e0

080032f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f003 0307 	and.w	r3, r3, #7
 8003302:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003304:	4b0b      	ldr	r3, [pc, #44]	; (8003334 <__NVIC_SetPriorityGrouping+0x40>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800330a:	68ba      	ldr	r2, [r7, #8]
 800330c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003310:	4013      	ands	r3, r2
 8003312:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800331c:	4b06      	ldr	r3, [pc, #24]	; (8003338 <__NVIC_SetPriorityGrouping+0x44>)
 800331e:	4313      	orrs	r3, r2
 8003320:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003322:	4a04      	ldr	r2, [pc, #16]	; (8003334 <__NVIC_SetPriorityGrouping+0x40>)
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	60d3      	str	r3, [r2, #12]
}
 8003328:	bf00      	nop
 800332a:	3714      	adds	r7, #20
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr
 8003334:	e000ed00 	.word	0xe000ed00
 8003338:	05fa0000 	.word	0x05fa0000

0800333c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003340:	4b04      	ldr	r3, [pc, #16]	; (8003354 <__NVIC_GetPriorityGrouping+0x18>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	0a1b      	lsrs	r3, r3, #8
 8003346:	f003 0307 	and.w	r3, r3, #7
}
 800334a:	4618      	mov	r0, r3
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr
 8003354:	e000ed00 	.word	0xe000ed00

08003358 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	4603      	mov	r3, r0
 8003360:	6039      	str	r1, [r7, #0]
 8003362:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003364:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003368:	2b00      	cmp	r3, #0
 800336a:	db0a      	blt.n	8003382 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	b2da      	uxtb	r2, r3
 8003370:	490c      	ldr	r1, [pc, #48]	; (80033a4 <__NVIC_SetPriority+0x4c>)
 8003372:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003376:	0112      	lsls	r2, r2, #4
 8003378:	b2d2      	uxtb	r2, r2
 800337a:	440b      	add	r3, r1
 800337c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003380:	e00a      	b.n	8003398 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	b2da      	uxtb	r2, r3
 8003386:	4908      	ldr	r1, [pc, #32]	; (80033a8 <__NVIC_SetPriority+0x50>)
 8003388:	88fb      	ldrh	r3, [r7, #6]
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	3b04      	subs	r3, #4
 8003390:	0112      	lsls	r2, r2, #4
 8003392:	b2d2      	uxtb	r2, r2
 8003394:	440b      	add	r3, r1
 8003396:	761a      	strb	r2, [r3, #24]
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	e000e100 	.word	0xe000e100
 80033a8:	e000ed00 	.word	0xe000ed00

080033ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b089      	sub	sp, #36	; 0x24
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f003 0307 	and.w	r3, r3, #7
 80033be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	f1c3 0307 	rsb	r3, r3, #7
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	bf28      	it	cs
 80033ca:	2304      	movcs	r3, #4
 80033cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	3304      	adds	r3, #4
 80033d2:	2b06      	cmp	r3, #6
 80033d4:	d902      	bls.n	80033dc <NVIC_EncodePriority+0x30>
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	3b03      	subs	r3, #3
 80033da:	e000      	b.n	80033de <NVIC_EncodePriority+0x32>
 80033dc:	2300      	movs	r3, #0
 80033de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033e0:	f04f 32ff 	mov.w	r2, #4294967295
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ea:	43da      	mvns	r2, r3
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	401a      	ands	r2, r3
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033f4:	f04f 31ff 	mov.w	r1, #4294967295
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	fa01 f303 	lsl.w	r3, r1, r3
 80033fe:	43d9      	mvns	r1, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003404:	4313      	orrs	r3, r2
         );
}
 8003406:	4618      	mov	r0, r3
 8003408:	3724      	adds	r7, #36	; 0x24
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
	...

08003414 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3b01      	subs	r3, #1
 8003420:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003424:	d301      	bcc.n	800342a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003426:	2301      	movs	r3, #1
 8003428:	e00f      	b.n	800344a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800342a:	4a0a      	ldr	r2, [pc, #40]	; (8003454 <SysTick_Config+0x40>)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	3b01      	subs	r3, #1
 8003430:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003432:	210f      	movs	r1, #15
 8003434:	f04f 30ff 	mov.w	r0, #4294967295
 8003438:	f7ff ff8e 	bl	8003358 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800343c:	4b05      	ldr	r3, [pc, #20]	; (8003454 <SysTick_Config+0x40>)
 800343e:	2200      	movs	r2, #0
 8003440:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003442:	4b04      	ldr	r3, [pc, #16]	; (8003454 <SysTick_Config+0x40>)
 8003444:	2207      	movs	r2, #7
 8003446:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	e000e010 	.word	0xe000e010

08003458 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f7ff ff47 	bl	80032f4 <__NVIC_SetPriorityGrouping>
}
 8003466:	bf00      	nop
 8003468:	3708      	adds	r7, #8
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b086      	sub	sp, #24
 8003472:	af00      	add	r7, sp, #0
 8003474:	4603      	mov	r3, r0
 8003476:	60b9      	str	r1, [r7, #8]
 8003478:	607a      	str	r2, [r7, #4]
 800347a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800347c:	f7ff ff5e 	bl	800333c <__NVIC_GetPriorityGrouping>
 8003480:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	68b9      	ldr	r1, [r7, #8]
 8003486:	6978      	ldr	r0, [r7, #20]
 8003488:	f7ff ff90 	bl	80033ac <NVIC_EncodePriority>
 800348c:	4602      	mov	r2, r0
 800348e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003492:	4611      	mov	r1, r2
 8003494:	4618      	mov	r0, r3
 8003496:	f7ff ff5f 	bl	8003358 <__NVIC_SetPriority>
}
 800349a:	bf00      	nop
 800349c:	3718      	adds	r7, #24
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b082      	sub	sp, #8
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7ff ffb2 	bl	8003414 <SysTick_Config>
 80034b0:	4603      	mov	r3, r0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
	...

080034bc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e0cf      	b.n	800366e <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d106      	bne.n	80034e6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2223      	movs	r2, #35	; 0x23
 80034dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f7fe f819 	bl	8001518 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034e6:	4b64      	ldr	r3, [pc, #400]	; (8003678 <HAL_ETH_Init+0x1bc>)
 80034e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80034ec:	4a62      	ldr	r2, [pc, #392]	; (8003678 <HAL_ETH_Init+0x1bc>)
 80034ee:	f043 0302 	orr.w	r3, r3, #2
 80034f2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80034f6:	4b60      	ldr	r3, [pc, #384]	; (8003678 <HAL_ETH_Init+0x1bc>)
 80034f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	60bb      	str	r3, [r7, #8]
 8003502:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	7a1b      	ldrb	r3, [r3, #8]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d103      	bne.n	8003514 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800350c:	2000      	movs	r0, #0
 800350e:	f7fe fba3 	bl	8001c58 <HAL_SYSCFG_ETHInterfaceSelect>
 8003512:	e003      	b.n	800351c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003514:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003518:	f7fe fb9e 	bl	8001c58 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800351c:	4b57      	ldr	r3, [pc, #348]	; (800367c <HAL_ETH_Init+0x1c0>)
 800351e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	6812      	ldr	r2, [r2, #0]
 800352e:	f043 0301 	orr.w	r3, r3, #1
 8003532:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003536:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003538:	f7fe fb52 	bl	8001be0 <HAL_GetTick>
 800353c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800353e:	e011      	b.n	8003564 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003540:	f7fe fb4e 	bl	8001be0 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800354e:	d909      	bls.n	8003564 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2204      	movs	r2, #4
 8003554:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	22e0      	movs	r2, #224	; 0xe0
 800355c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e084      	b.n	800366e <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1e4      	bne.n	8003540 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f886 	bl	8003688 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800357c:	f001 fedc 	bl	8005338 <HAL_RCC_GetHCLKFreq>
 8003580:	4603      	mov	r3, r0
 8003582:	4a3f      	ldr	r2, [pc, #252]	; (8003680 <HAL_ETH_Init+0x1c4>)
 8003584:	fba2 2303 	umull	r2, r3, r2, r3
 8003588:	0c9a      	lsrs	r2, r3, #18
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	3a01      	subs	r2, #1
 8003590:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 fa71 	bl	8003a7c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035a2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80035a6:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	6812      	ldr	r2, [r2, #0]
 80035ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80035b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80035b6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	f003 0303 	and.w	r3, r3, #3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d009      	beq.n	80035da <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	22e0      	movs	r2, #224	; 0xe0
 80035d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e049      	b.n	800366e <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035e2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80035e6:	4b27      	ldr	r3, [pc, #156]	; (8003684 <HAL_ETH_Init+0x1c8>)
 80035e8:	4013      	ands	r3, r2
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	6952      	ldr	r2, [r2, #20]
 80035ee:	0051      	lsls	r1, r2, #1
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	6812      	ldr	r2, [r2, #0]
 80035f4:	430b      	orrs	r3, r1
 80035f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80035fa:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 fad9 	bl	8003bb6 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 fb1f 	bl	8003c48 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	3305      	adds	r3, #5
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	021a      	lsls	r2, r3, #8
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	3304      	adds	r3, #4
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	4619      	mov	r1, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	430a      	orrs	r2, r1
 8003624:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	3303      	adds	r3, #3
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	061a      	lsls	r2, r3, #24
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	3302      	adds	r3, #2
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	041b      	lsls	r3, r3, #16
 800363c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	3301      	adds	r3, #1
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003648:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003656:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003658:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2210      	movs	r2, #16
 8003668:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	58024400 	.word	0x58024400
 800367c:	58000400 	.word	0x58000400
 8003680:	431bde83 	.word	0x431bde83
 8003684:	ffff8001 	.word	0xffff8001

08003688 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003698:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80036a0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80036a2:	f001 fe49 	bl	8005338 <HAL_RCC_GetHCLKFreq>
 80036a6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	4a1e      	ldr	r2, [pc, #120]	; (8003724 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d908      	bls.n	80036c2 <HAL_ETH_SetMDIOClockRange+0x3a>
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	4a1d      	ldr	r2, [pc, #116]	; (8003728 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d804      	bhi.n	80036c2 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036be:	60fb      	str	r3, [r7, #12]
 80036c0:	e027      	b.n	8003712 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	4a18      	ldr	r2, [pc, #96]	; (8003728 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d908      	bls.n	80036dc <HAL_ETH_SetMDIOClockRange+0x54>
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	4a17      	ldr	r2, [pc, #92]	; (800372c <HAL_ETH_SetMDIOClockRange+0xa4>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d204      	bcs.n	80036dc <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80036d8:	60fb      	str	r3, [r7, #12]
 80036da:	e01a      	b.n	8003712 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	4a13      	ldr	r2, [pc, #76]	; (800372c <HAL_ETH_SetMDIOClockRange+0xa4>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d303      	bcc.n	80036ec <HAL_ETH_SetMDIOClockRange+0x64>
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	4a12      	ldr	r2, [pc, #72]	; (8003730 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d911      	bls.n	8003710 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	4a10      	ldr	r2, [pc, #64]	; (8003730 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d908      	bls.n	8003706 <HAL_ETH_SetMDIOClockRange+0x7e>
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	4a0f      	ldr	r2, [pc, #60]	; (8003734 <HAL_ETH_SetMDIOClockRange+0xac>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d804      	bhi.n	8003706 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003702:	60fb      	str	r3, [r7, #12]
 8003704:	e005      	b.n	8003712 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800370c:	60fb      	str	r3, [r7, #12]
 800370e:	e000      	b.n	8003712 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8003710:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800371c:	bf00      	nop
 800371e:	3710      	adds	r7, #16
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	01312cff 	.word	0x01312cff
 8003728:	02160ebf 	.word	0x02160ebf
 800372c:	03938700 	.word	0x03938700
 8003730:	05f5e0ff 	.word	0x05f5e0ff
 8003734:	08f0d17f 	.word	0x08f0d17f

08003738 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800374a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	791b      	ldrb	r3, [r3, #4]
 8003750:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8003752:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	7b1b      	ldrb	r3, [r3, #12]
 8003758:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800375a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	7b5b      	ldrb	r3, [r3, #13]
 8003760:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003762:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	7b9b      	ldrb	r3, [r3, #14]
 8003768:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800376a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	7bdb      	ldrb	r3, [r3, #15]
 8003770:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003772:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003774:	683a      	ldr	r2, [r7, #0]
 8003776:	7c12      	ldrb	r2, [r2, #16]
 8003778:	2a00      	cmp	r2, #0
 800377a:	d102      	bne.n	8003782 <ETH_SetMACConfig+0x4a>
 800377c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003780:	e000      	b.n	8003784 <ETH_SetMACConfig+0x4c>
 8003782:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003784:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	7c52      	ldrb	r2, [r2, #17]
 800378a:	2a00      	cmp	r2, #0
 800378c:	d102      	bne.n	8003794 <ETH_SetMACConfig+0x5c>
 800378e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003792:	e000      	b.n	8003796 <ETH_SetMACConfig+0x5e>
 8003794:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003796:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	7c9b      	ldrb	r3, [r3, #18]
 800379c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800379e:	431a      	orrs	r2, r3
               macconf->Speed |
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80037a4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80037aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	7f1b      	ldrb	r3, [r3, #28]
 80037b0:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80037b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	7f5b      	ldrb	r3, [r3, #29]
 80037b8:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80037ba:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80037bc:	683a      	ldr	r2, [r7, #0]
 80037be:	7f92      	ldrb	r2, [r2, #30]
 80037c0:	2a00      	cmp	r2, #0
 80037c2:	d102      	bne.n	80037ca <ETH_SetMACConfig+0x92>
 80037c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037c8:	e000      	b.n	80037cc <ETH_SetMACConfig+0x94>
 80037ca:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80037cc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	7fdb      	ldrb	r3, [r3, #31]
 80037d2:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80037d4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80037d6:	683a      	ldr	r2, [r7, #0]
 80037d8:	f892 2020 	ldrb.w	r2, [r2, #32]
 80037dc:	2a00      	cmp	r2, #0
 80037de:	d102      	bne.n	80037e6 <ETH_SetMACConfig+0xae>
 80037e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037e4:	e000      	b.n	80037e8 <ETH_SetMACConfig+0xb0>
 80037e6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80037e8:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80037ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80037f6:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80037f8:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80037fe:	4313      	orrs	r3, r2
 8003800:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	4b56      	ldr	r3, [pc, #344]	; (8003964 <ETH_SetMACConfig+0x22c>)
 800380a:	4013      	ands	r3, r2
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	6812      	ldr	r2, [r2, #0]
 8003810:	68f9      	ldr	r1, [r7, #12]
 8003812:	430b      	orrs	r3, r1
 8003814:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800381a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003822:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003824:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800382c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800382e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003836:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003838:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8003840:	2a00      	cmp	r2, #0
 8003842:	d102      	bne.n	800384a <ETH_SetMACConfig+0x112>
 8003844:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003848:	e000      	b.n	800384c <ETH_SetMACConfig+0x114>
 800384a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800384c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003852:	4313      	orrs	r3, r2
 8003854:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	685a      	ldr	r2, [r3, #4]
 800385c:	4b42      	ldr	r3, [pc, #264]	; (8003968 <ETH_SetMACConfig+0x230>)
 800385e:	4013      	ands	r3, r2
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	6812      	ldr	r2, [r2, #0]
 8003864:	68f9      	ldr	r1, [r7, #12]
 8003866:	430b      	orrs	r3, r1
 8003868:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003870:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003876:	4313      	orrs	r3, r2
 8003878:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68da      	ldr	r2, [r3, #12]
 8003880:	4b3a      	ldr	r3, [pc, #232]	; (800396c <ETH_SetMACConfig+0x234>)
 8003882:	4013      	ands	r3, r2
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	6812      	ldr	r2, [r2, #0]
 8003888:	68f9      	ldr	r1, [r7, #12]
 800388a:	430b      	orrs	r3, r1
 800388c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003894:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800389a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800389c:	683a      	ldr	r2, [r7, #0]
 800389e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80038a2:	2a00      	cmp	r2, #0
 80038a4:	d101      	bne.n	80038aa <ETH_SetMACConfig+0x172>
 80038a6:	2280      	movs	r2, #128	; 0x80
 80038a8:	e000      	b.n	80038ac <ETH_SetMACConfig+0x174>
 80038aa:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80038ac:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038b2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80038b4:	4313      	orrs	r3, r2
 80038b6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80038be:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80038c2:	4013      	ands	r3, r2
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6812      	ldr	r2, [r2, #0]
 80038c8:	68f9      	ldr	r1, [r7, #12]
 80038ca:	430b      	orrs	r3, r1
 80038cc:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80038d4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80038dc:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80038de:	4313      	orrs	r3, r2
 80038e0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ea:	f023 0103 	bic.w	r1, r3, #3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	430a      	orrs	r2, r1
 80038f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8003902:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	430a      	orrs	r2, r1
 8003910:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003918:	683a      	ldr	r2, [r7, #0]
 800391a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800391e:	2a00      	cmp	r2, #0
 8003920:	d101      	bne.n	8003926 <ETH_SetMACConfig+0x1ee>
 8003922:	2240      	movs	r2, #64	; 0x40
 8003924:	e000      	b.n	8003928 <ETH_SetMACConfig+0x1f0>
 8003926:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003928:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003930:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003932:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800393a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800393c:	4313      	orrs	r3, r2
 800393e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003948:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	430a      	orrs	r2, r1
 8003954:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8003958:	bf00      	nop
 800395a:	3714      	adds	r7, #20
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr
 8003964:	00048083 	.word	0x00048083
 8003968:	c0f88000 	.word	0xc0f88000
 800396c:	fffffef0 	.word	0xfffffef0

08003970 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	4b38      	ldr	r3, [pc, #224]	; (8003a68 <ETH_SetDMAConfig+0xf8>)
 8003986:	4013      	ands	r3, r2
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	6811      	ldr	r1, [r2, #0]
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6812      	ldr	r2, [r2, #0]
 8003990:	430b      	orrs	r3, r1
 8003992:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003996:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	791b      	ldrb	r3, [r3, #4]
 800399c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80039a2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	7b1b      	ldrb	r3, [r3, #12]
 80039a8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80039aa:	4313      	orrs	r3, r2
 80039ac:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039b6:	685a      	ldr	r2, [r3, #4]
 80039b8:	4b2c      	ldr	r3, [pc, #176]	; (8003a6c <ETH_SetDMAConfig+0xfc>)
 80039ba:	4013      	ands	r3, r2
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	6812      	ldr	r2, [r2, #0]
 80039c0:	68f9      	ldr	r1, [r7, #12]
 80039c2:	430b      	orrs	r3, r1
 80039c4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80039c8:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	7b5b      	ldrb	r3, [r3, #13]
 80039ce:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80039d4:	4313      	orrs	r3, r2
 80039d6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039e0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80039e4:	4b22      	ldr	r3, [pc, #136]	; (8003a70 <ETH_SetDMAConfig+0x100>)
 80039e6:	4013      	ands	r3, r2
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	6812      	ldr	r2, [r2, #0]
 80039ec:	68f9      	ldr	r1, [r7, #12]
 80039ee:	430b      	orrs	r3, r1
 80039f0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80039f4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	7d1b      	ldrb	r3, [r3, #20]
 8003a00:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8003a02:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	7f5b      	ldrb	r3, [r3, #29]
 8003a08:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a16:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8003a1a:	4b16      	ldr	r3, [pc, #88]	; (8003a74 <ETH_SetDMAConfig+0x104>)
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	6812      	ldr	r2, [r2, #0]
 8003a22:	68f9      	ldr	r1, [r7, #12]
 8003a24:	430b      	orrs	r3, r1
 8003a26:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a2a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	7f1b      	ldrb	r3, [r3, #28]
 8003a32:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a44:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003a48:	4b0b      	ldr	r3, [pc, #44]	; (8003a78 <ETH_SetDMAConfig+0x108>)
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	6812      	ldr	r2, [r2, #0]
 8003a50:	68f9      	ldr	r1, [r7, #12]
 8003a52:	430b      	orrs	r3, r1
 8003a54:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a58:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8003a5c:	bf00      	nop
 8003a5e:	3714      	adds	r7, #20
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr
 8003a68:	ffff87fd 	.word	0xffff87fd
 8003a6c:	ffff2ffe 	.word	0xffff2ffe
 8003a70:	fffec000 	.word	0xfffec000
 8003a74:	ffc0efef 	.word	0xffc0efef
 8003a78:	7fc0ffff 	.word	0x7fc0ffff

08003a7c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b0a4      	sub	sp, #144	; 0x90
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003a84:	2301      	movs	r3, #1
 8003a86:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003a94:	2300      	movs	r3, #0
 8003a96:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003aac:	2300      	movs	r3, #0
 8003aae:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003ab8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003abc:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8003ad4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8003ad8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003ada:	2300      	movs	r3, #0
 8003adc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8003aea:	2300      	movs	r3, #0
 8003aec:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003af0:	2300      	movs	r3, #0
 8003af2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003af6:	2300      	movs	r3, #0
 8003af8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8003afa:	2300      	movs	r3, #0
 8003afc:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003afe:	2300      	movs	r3, #0
 8003b00:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8003b02:	2300      	movs	r3, #0
 8003b04:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003b14:	2320      	movs	r3, #32
 8003b16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003b20:	2300      	movs	r3, #0
 8003b22:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8003b26:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8003b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003b2c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003b30:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8003b32:	2300      	movs	r3, #0
 8003b34:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003b38:	2302      	movs	r3, #2
 8003b3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003b44:	2300      	movs	r3, #0
 8003b46:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003b50:	2301      	movs	r3, #1
 8003b52:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003b56:	2300      	movs	r3, #0
 8003b58:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003b60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b64:	4619      	mov	r1, r3
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7ff fde6 	bl	8003738 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003b70:	2301      	movs	r3, #1
 8003b72:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003b74:	2300      	movs	r3, #0
 8003b76:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003b82:	2300      	movs	r3, #0
 8003b84:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003b86:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003b8a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003b90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003b94:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8003b96:	2300      	movs	r3, #0
 8003b98:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8003b9c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8003ba0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003ba2:	f107 0308 	add.w	r3, r7, #8
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f7ff fee1 	bl	8003970 <ETH_SetDMAConfig>
}
 8003bae:	bf00      	nop
 8003bb0:	3790      	adds	r7, #144	; 0x90
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b085      	sub	sp, #20
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	60fb      	str	r3, [r7, #12]
 8003bc2:	e01d      	b.n	8003c00 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	68d9      	ldr	r1, [r3, #12]
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	4413      	add	r3, r2
 8003bd0:	00db      	lsls	r3, r3, #3
 8003bd2:	440b      	add	r3, r1
 8003bd4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	2200      	movs	r2, #0
 8003be0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	2200      	movs	r2, #0
 8003be6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	2200      	movs	r2, #0
 8003bec:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003bee:	68b9      	ldr	r1, [r7, #8]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	3206      	adds	r2, #6
 8003bf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	60fb      	str	r3, [r7, #12]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2b03      	cmp	r3, #3
 8003c04:	d9de      	bls.n	8003bc4 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c14:	461a      	mov	r2, r3
 8003c16:	2303      	movs	r3, #3
 8003c18:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68da      	ldr	r2, [r3, #12]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c28:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	68da      	ldr	r2, [r3, #12]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c38:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8003c3c:	bf00      	nop
 8003c3e:	3714      	adds	r7, #20
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003c50:	2300      	movs	r3, #0
 8003c52:	60fb      	str	r3, [r7, #12]
 8003c54:	e023      	b.n	8003c9e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6919      	ldr	r1, [r3, #16]
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	4413      	add	r3, r2
 8003c62:	00db      	lsls	r3, r3, #3
 8003c64:	440b      	add	r3, r1
 8003c66:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	2200      	movs	r2, #0
 8003c72:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	2200      	movs	r2, #0
 8003c78:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	2200      	movs	r2, #0
 8003c84:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003c8c:	68b9      	ldr	r1, [r7, #8]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	68fa      	ldr	r2, [r7, #12]
 8003c92:	3212      	adds	r2, #18
 8003c94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	60fb      	str	r3, [r7, #12]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2b03      	cmp	r3, #3
 8003ca2:	d9d8      	bls.n	8003c56 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cca:	461a      	mov	r2, r3
 8003ccc:	2303      	movs	r3, #3
 8003cce:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	691a      	ldr	r2, [r3, #16]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cde:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cf2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8003cf6:	bf00      	nop
 8003cf8:	3714      	adds	r7, #20
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
	...

08003d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b089      	sub	sp, #36	; 0x24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003d12:	4b89      	ldr	r3, [pc, #548]	; (8003f38 <HAL_GPIO_Init+0x234>)
 8003d14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003d16:	e194      	b.n	8004042 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	2101      	movs	r1, #1
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	fa01 f303 	lsl.w	r3, r1, r3
 8003d24:	4013      	ands	r3, r2
 8003d26:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f000 8186 	beq.w	800403c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f003 0303 	and.w	r3, r3, #3
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d005      	beq.n	8003d48 <HAL_GPIO_Init+0x44>
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f003 0303 	and.w	r3, r3, #3
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d130      	bne.n	8003daa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	005b      	lsls	r3, r3, #1
 8003d52:	2203      	movs	r2, #3
 8003d54:	fa02 f303 	lsl.w	r3, r2, r3
 8003d58:	43db      	mvns	r3, r3
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	68da      	ldr	r2, [r3, #12]
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d7e:	2201      	movs	r2, #1
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	fa02 f303 	lsl.w	r3, r2, r3
 8003d86:	43db      	mvns	r3, r3
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	091b      	lsrs	r3, r3, #4
 8003d94:	f003 0201 	and.w	r2, r3, #1
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	69ba      	ldr	r2, [r7, #24]
 8003da8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f003 0303 	and.w	r3, r3, #3
 8003db2:	2b03      	cmp	r3, #3
 8003db4:	d017      	beq.n	8003de6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	005b      	lsls	r3, r3, #1
 8003dc0:	2203      	movs	r2, #3
 8003dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc6:	43db      	mvns	r3, r3
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	689a      	ldr	r2, [r3, #8]
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dda:	69ba      	ldr	r2, [r7, #24]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	69ba      	ldr	r2, [r7, #24]
 8003de4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f003 0303 	and.w	r3, r3, #3
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d123      	bne.n	8003e3a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	08da      	lsrs	r2, r3, #3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	3208      	adds	r2, #8
 8003dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	f003 0307 	and.w	r3, r3, #7
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	220f      	movs	r2, #15
 8003e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0e:	43db      	mvns	r3, r3
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	4013      	ands	r3, r2
 8003e14:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	691a      	ldr	r2, [r3, #16]
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	f003 0307 	and.w	r3, r3, #7
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	fa02 f303 	lsl.w	r3, r2, r3
 8003e26:	69ba      	ldr	r2, [r7, #24]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	08da      	lsrs	r2, r3, #3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	3208      	adds	r2, #8
 8003e34:	69b9      	ldr	r1, [r7, #24]
 8003e36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	005b      	lsls	r3, r3, #1
 8003e44:	2203      	movs	r2, #3
 8003e46:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4a:	43db      	mvns	r3, r3
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	4013      	ands	r3, r2
 8003e50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f003 0203 	and.w	r2, r3, #3
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	005b      	lsls	r3, r3, #1
 8003e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e62:	69ba      	ldr	r2, [r7, #24]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	69ba      	ldr	r2, [r7, #24]
 8003e6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f000 80e0 	beq.w	800403c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e7c:	4b2f      	ldr	r3, [pc, #188]	; (8003f3c <HAL_GPIO_Init+0x238>)
 8003e7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003e82:	4a2e      	ldr	r2, [pc, #184]	; (8003f3c <HAL_GPIO_Init+0x238>)
 8003e84:	f043 0302 	orr.w	r3, r3, #2
 8003e88:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003e8c:	4b2b      	ldr	r3, [pc, #172]	; (8003f3c <HAL_GPIO_Init+0x238>)
 8003e8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	60fb      	str	r3, [r7, #12]
 8003e98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e9a:	4a29      	ldr	r2, [pc, #164]	; (8003f40 <HAL_GPIO_Init+0x23c>)
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	089b      	lsrs	r3, r3, #2
 8003ea0:	3302      	adds	r3, #2
 8003ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	f003 0303 	and.w	r3, r3, #3
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	220f      	movs	r2, #15
 8003eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb6:	43db      	mvns	r3, r3
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	4013      	ands	r3, r2
 8003ebc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a20      	ldr	r2, [pc, #128]	; (8003f44 <HAL_GPIO_Init+0x240>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d052      	beq.n	8003f6c <HAL_GPIO_Init+0x268>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a1f      	ldr	r2, [pc, #124]	; (8003f48 <HAL_GPIO_Init+0x244>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d031      	beq.n	8003f32 <HAL_GPIO_Init+0x22e>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a1e      	ldr	r2, [pc, #120]	; (8003f4c <HAL_GPIO_Init+0x248>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d02b      	beq.n	8003f2e <HAL_GPIO_Init+0x22a>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a1d      	ldr	r2, [pc, #116]	; (8003f50 <HAL_GPIO_Init+0x24c>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d025      	beq.n	8003f2a <HAL_GPIO_Init+0x226>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a1c      	ldr	r2, [pc, #112]	; (8003f54 <HAL_GPIO_Init+0x250>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d01f      	beq.n	8003f26 <HAL_GPIO_Init+0x222>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a1b      	ldr	r2, [pc, #108]	; (8003f58 <HAL_GPIO_Init+0x254>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d019      	beq.n	8003f22 <HAL_GPIO_Init+0x21e>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a1a      	ldr	r2, [pc, #104]	; (8003f5c <HAL_GPIO_Init+0x258>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d013      	beq.n	8003f1e <HAL_GPIO_Init+0x21a>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a19      	ldr	r2, [pc, #100]	; (8003f60 <HAL_GPIO_Init+0x25c>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d00d      	beq.n	8003f1a <HAL_GPIO_Init+0x216>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a18      	ldr	r2, [pc, #96]	; (8003f64 <HAL_GPIO_Init+0x260>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d007      	beq.n	8003f16 <HAL_GPIO_Init+0x212>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a17      	ldr	r2, [pc, #92]	; (8003f68 <HAL_GPIO_Init+0x264>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d101      	bne.n	8003f12 <HAL_GPIO_Init+0x20e>
 8003f0e:	2309      	movs	r3, #9
 8003f10:	e02d      	b.n	8003f6e <HAL_GPIO_Init+0x26a>
 8003f12:	230a      	movs	r3, #10
 8003f14:	e02b      	b.n	8003f6e <HAL_GPIO_Init+0x26a>
 8003f16:	2308      	movs	r3, #8
 8003f18:	e029      	b.n	8003f6e <HAL_GPIO_Init+0x26a>
 8003f1a:	2307      	movs	r3, #7
 8003f1c:	e027      	b.n	8003f6e <HAL_GPIO_Init+0x26a>
 8003f1e:	2306      	movs	r3, #6
 8003f20:	e025      	b.n	8003f6e <HAL_GPIO_Init+0x26a>
 8003f22:	2305      	movs	r3, #5
 8003f24:	e023      	b.n	8003f6e <HAL_GPIO_Init+0x26a>
 8003f26:	2304      	movs	r3, #4
 8003f28:	e021      	b.n	8003f6e <HAL_GPIO_Init+0x26a>
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e01f      	b.n	8003f6e <HAL_GPIO_Init+0x26a>
 8003f2e:	2302      	movs	r3, #2
 8003f30:	e01d      	b.n	8003f6e <HAL_GPIO_Init+0x26a>
 8003f32:	2301      	movs	r3, #1
 8003f34:	e01b      	b.n	8003f6e <HAL_GPIO_Init+0x26a>
 8003f36:	bf00      	nop
 8003f38:	58000080 	.word	0x58000080
 8003f3c:	58024400 	.word	0x58024400
 8003f40:	58000400 	.word	0x58000400
 8003f44:	58020000 	.word	0x58020000
 8003f48:	58020400 	.word	0x58020400
 8003f4c:	58020800 	.word	0x58020800
 8003f50:	58020c00 	.word	0x58020c00
 8003f54:	58021000 	.word	0x58021000
 8003f58:	58021400 	.word	0x58021400
 8003f5c:	58021800 	.word	0x58021800
 8003f60:	58021c00 	.word	0x58021c00
 8003f64:	58022000 	.word	0x58022000
 8003f68:	58022400 	.word	0x58022400
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	69fa      	ldr	r2, [r7, #28]
 8003f70:	f002 0203 	and.w	r2, r2, #3
 8003f74:	0092      	lsls	r2, r2, #2
 8003f76:	4093      	lsls	r3, r2
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f7e:	4938      	ldr	r1, [pc, #224]	; (8004060 <HAL_GPIO_Init+0x35c>)
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	089b      	lsrs	r3, r3, #2
 8003f84:	3302      	adds	r3, #2
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	43db      	mvns	r3, r3
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d003      	beq.n	8003fb2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003faa:	69ba      	ldr	r2, [r7, #24]
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003fb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003fba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	43db      	mvns	r3, r3
 8003fc6:	69ba      	ldr	r2, [r7, #24]
 8003fc8:	4013      	ands	r3, r2
 8003fca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d003      	beq.n	8003fe0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003fe0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	43db      	mvns	r3, r3
 8003ff2:	69ba      	ldr	r2, [r7, #24]
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d003      	beq.n	800400c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	4313      	orrs	r3, r2
 800400a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	69ba      	ldr	r2, [r7, #24]
 8004010:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	43db      	mvns	r3, r3
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	4013      	ands	r3, r2
 8004020:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800402e:	69ba      	ldr	r2, [r7, #24]
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	4313      	orrs	r3, r2
 8004034:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	3301      	adds	r3, #1
 8004040:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	fa22 f303 	lsr.w	r3, r2, r3
 800404c:	2b00      	cmp	r3, #0
 800404e:	f47f ae63 	bne.w	8003d18 <HAL_GPIO_Init+0x14>
  }
}
 8004052:	bf00      	nop
 8004054:	bf00      	nop
 8004056:	3724      	adds	r7, #36	; 0x24
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	58000400 	.word	0x58000400

08004064 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800406c:	4a08      	ldr	r2, [pc, #32]	; (8004090 <HAL_HSEM_FastTake+0x2c>)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	3320      	adds	r3, #32
 8004072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004076:	4a07      	ldr	r2, [pc, #28]	; (8004094 <HAL_HSEM_FastTake+0x30>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d101      	bne.n	8004080 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800407c:	2300      	movs	r3, #0
 800407e:	e000      	b.n	8004082 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
}
 8004082:	4618      	mov	r0, r3
 8004084:	370c      	adds	r7, #12
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	58026400 	.word	0x58026400
 8004094:	80000300 	.word	0x80000300

08004098 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80040a2:	4906      	ldr	r1, [pc, #24]	; (80040bc <HAL_HSEM_Release+0x24>)
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80040b0:	bf00      	nop
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr
 80040bc:	58026400 	.word	0x58026400

080040c0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80040c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040c2:	b08f      	sub	sp, #60	; 0x3c
 80040c4:	af0a      	add	r7, sp, #40	; 0x28
 80040c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e116      	b.n	8004300 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d106      	bne.n	80040f2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f7fd fb4b 	bl	8001788 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2203      	movs	r2, #3
 80040f6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004102:	2b00      	cmp	r3, #0
 8004104:	d102      	bne.n	800410c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4618      	mov	r0, r3
 8004112:	f005 f83d 	bl	8009190 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	603b      	str	r3, [r7, #0]
 800411c:	687e      	ldr	r6, [r7, #4]
 800411e:	466d      	mov	r5, sp
 8004120:	f106 0410 	add.w	r4, r6, #16
 8004124:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004126:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004128:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800412a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800412c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004130:	e885 0003 	stmia.w	r5, {r0, r1}
 8004134:	1d33      	adds	r3, r6, #4
 8004136:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004138:	6838      	ldr	r0, [r7, #0]
 800413a:	f004 ffbb 	bl	80090b4 <USB_CoreInit>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d005      	beq.n	8004150 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2202      	movs	r2, #2
 8004148:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e0d7      	b.n	8004300 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2100      	movs	r1, #0
 8004156:	4618      	mov	r0, r3
 8004158:	f005 f82b 	bl	80091b2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800415c:	2300      	movs	r3, #0
 800415e:	73fb      	strb	r3, [r7, #15]
 8004160:	e04a      	b.n	80041f8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004162:	7bfa      	ldrb	r2, [r7, #15]
 8004164:	6879      	ldr	r1, [r7, #4]
 8004166:	4613      	mov	r3, r2
 8004168:	00db      	lsls	r3, r3, #3
 800416a:	4413      	add	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	440b      	add	r3, r1
 8004170:	333d      	adds	r3, #61	; 0x3d
 8004172:	2201      	movs	r2, #1
 8004174:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004176:	7bfa      	ldrb	r2, [r7, #15]
 8004178:	6879      	ldr	r1, [r7, #4]
 800417a:	4613      	mov	r3, r2
 800417c:	00db      	lsls	r3, r3, #3
 800417e:	4413      	add	r3, r2
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	440b      	add	r3, r1
 8004184:	333c      	adds	r3, #60	; 0x3c
 8004186:	7bfa      	ldrb	r2, [r7, #15]
 8004188:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800418a:	7bfa      	ldrb	r2, [r7, #15]
 800418c:	7bfb      	ldrb	r3, [r7, #15]
 800418e:	b298      	uxth	r0, r3
 8004190:	6879      	ldr	r1, [r7, #4]
 8004192:	4613      	mov	r3, r2
 8004194:	00db      	lsls	r3, r3, #3
 8004196:	4413      	add	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	440b      	add	r3, r1
 800419c:	3356      	adds	r3, #86	; 0x56
 800419e:	4602      	mov	r2, r0
 80041a0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80041a2:	7bfa      	ldrb	r2, [r7, #15]
 80041a4:	6879      	ldr	r1, [r7, #4]
 80041a6:	4613      	mov	r3, r2
 80041a8:	00db      	lsls	r3, r3, #3
 80041aa:	4413      	add	r3, r2
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	440b      	add	r3, r1
 80041b0:	3340      	adds	r3, #64	; 0x40
 80041b2:	2200      	movs	r2, #0
 80041b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80041b6:	7bfa      	ldrb	r2, [r7, #15]
 80041b8:	6879      	ldr	r1, [r7, #4]
 80041ba:	4613      	mov	r3, r2
 80041bc:	00db      	lsls	r3, r3, #3
 80041be:	4413      	add	r3, r2
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	440b      	add	r3, r1
 80041c4:	3344      	adds	r3, #68	; 0x44
 80041c6:	2200      	movs	r2, #0
 80041c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80041ca:	7bfa      	ldrb	r2, [r7, #15]
 80041cc:	6879      	ldr	r1, [r7, #4]
 80041ce:	4613      	mov	r3, r2
 80041d0:	00db      	lsls	r3, r3, #3
 80041d2:	4413      	add	r3, r2
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	440b      	add	r3, r1
 80041d8:	3348      	adds	r3, #72	; 0x48
 80041da:	2200      	movs	r2, #0
 80041dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80041de:	7bfa      	ldrb	r2, [r7, #15]
 80041e0:	6879      	ldr	r1, [r7, #4]
 80041e2:	4613      	mov	r3, r2
 80041e4:	00db      	lsls	r3, r3, #3
 80041e6:	4413      	add	r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	440b      	add	r3, r1
 80041ec:	334c      	adds	r3, #76	; 0x4c
 80041ee:	2200      	movs	r2, #0
 80041f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041f2:	7bfb      	ldrb	r3, [r7, #15]
 80041f4:	3301      	adds	r3, #1
 80041f6:	73fb      	strb	r3, [r7, #15]
 80041f8:	7bfa      	ldrb	r2, [r7, #15]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d3af      	bcc.n	8004162 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004202:	2300      	movs	r3, #0
 8004204:	73fb      	strb	r3, [r7, #15]
 8004206:	e044      	b.n	8004292 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004208:	7bfa      	ldrb	r2, [r7, #15]
 800420a:	6879      	ldr	r1, [r7, #4]
 800420c:	4613      	mov	r3, r2
 800420e:	00db      	lsls	r3, r3, #3
 8004210:	4413      	add	r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	440b      	add	r3, r1
 8004216:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800421a:	2200      	movs	r2, #0
 800421c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800421e:	7bfa      	ldrb	r2, [r7, #15]
 8004220:	6879      	ldr	r1, [r7, #4]
 8004222:	4613      	mov	r3, r2
 8004224:	00db      	lsls	r3, r3, #3
 8004226:	4413      	add	r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	440b      	add	r3, r1
 800422c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004230:	7bfa      	ldrb	r2, [r7, #15]
 8004232:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004234:	7bfa      	ldrb	r2, [r7, #15]
 8004236:	6879      	ldr	r1, [r7, #4]
 8004238:	4613      	mov	r3, r2
 800423a:	00db      	lsls	r3, r3, #3
 800423c:	4413      	add	r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	440b      	add	r3, r1
 8004242:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004246:	2200      	movs	r2, #0
 8004248:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800424a:	7bfa      	ldrb	r2, [r7, #15]
 800424c:	6879      	ldr	r1, [r7, #4]
 800424e:	4613      	mov	r3, r2
 8004250:	00db      	lsls	r3, r3, #3
 8004252:	4413      	add	r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	440b      	add	r3, r1
 8004258:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800425c:	2200      	movs	r2, #0
 800425e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004260:	7bfa      	ldrb	r2, [r7, #15]
 8004262:	6879      	ldr	r1, [r7, #4]
 8004264:	4613      	mov	r3, r2
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	4413      	add	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	440b      	add	r3, r1
 800426e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004272:	2200      	movs	r2, #0
 8004274:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004276:	7bfa      	ldrb	r2, [r7, #15]
 8004278:	6879      	ldr	r1, [r7, #4]
 800427a:	4613      	mov	r3, r2
 800427c:	00db      	lsls	r3, r3, #3
 800427e:	4413      	add	r3, r2
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	440b      	add	r3, r1
 8004284:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004288:	2200      	movs	r2, #0
 800428a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800428c:	7bfb      	ldrb	r3, [r7, #15]
 800428e:	3301      	adds	r3, #1
 8004290:	73fb      	strb	r3, [r7, #15]
 8004292:	7bfa      	ldrb	r2, [r7, #15]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	429a      	cmp	r2, r3
 800429a:	d3b5      	bcc.n	8004208 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	603b      	str	r3, [r7, #0]
 80042a2:	687e      	ldr	r6, [r7, #4]
 80042a4:	466d      	mov	r5, sp
 80042a6:	f106 0410 	add.w	r4, r6, #16
 80042aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80042b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80042ba:	1d33      	adds	r3, r6, #4
 80042bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042be:	6838      	ldr	r0, [r7, #0]
 80042c0:	f004 ffc4 	bl	800924c <USB_DevInit>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d005      	beq.n	80042d6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2202      	movs	r2, #2
 80042ce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e014      	b.n	8004300 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d102      	bne.n	80042f4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 f80a 	bl	8004308 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4618      	mov	r0, r3
 80042fa:	f005 f982 	bl	8009602 <USB_DevDisconnect>

  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3714      	adds	r7, #20
 8004304:	46bd      	mov	sp, r7
 8004306:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004308 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2201      	movs	r2, #1
 800431a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004336:	4b05      	ldr	r3, [pc, #20]	; (800434c <HAL_PCDEx_ActivateLPM+0x44>)
 8004338:	4313      	orrs	r3, r2
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3714      	adds	r7, #20
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr
 800434c:	10000003 	.word	0x10000003

08004350 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004358:	4b29      	ldr	r3, [pc, #164]	; (8004400 <HAL_PWREx_ConfigSupply+0xb0>)
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	f003 0307 	and.w	r3, r3, #7
 8004360:	2b06      	cmp	r3, #6
 8004362:	d00a      	beq.n	800437a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004364:	4b26      	ldr	r3, [pc, #152]	; (8004400 <HAL_PWREx_ConfigSupply+0xb0>)
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	429a      	cmp	r2, r3
 8004370:	d001      	beq.n	8004376 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e040      	b.n	80043f8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004376:	2300      	movs	r3, #0
 8004378:	e03e      	b.n	80043f8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800437a:	4b21      	ldr	r3, [pc, #132]	; (8004400 <HAL_PWREx_ConfigSupply+0xb0>)
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004382:	491f      	ldr	r1, [pc, #124]	; (8004400 <HAL_PWREx_ConfigSupply+0xb0>)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4313      	orrs	r3, r2
 8004388:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800438a:	f7fd fc29 	bl	8001be0 <HAL_GetTick>
 800438e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004390:	e009      	b.n	80043a6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004392:	f7fd fc25 	bl	8001be0 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043a0:	d901      	bls.n	80043a6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e028      	b.n	80043f8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80043a6:	4b16      	ldr	r3, [pc, #88]	; (8004400 <HAL_PWREx_ConfigSupply+0xb0>)
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043b2:	d1ee      	bne.n	8004392 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b1e      	cmp	r3, #30
 80043b8:	d008      	beq.n	80043cc <HAL_PWREx_ConfigSupply+0x7c>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2b2e      	cmp	r3, #46	; 0x2e
 80043be:	d005      	beq.n	80043cc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2b1d      	cmp	r3, #29
 80043c4:	d002      	beq.n	80043cc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2b2d      	cmp	r3, #45	; 0x2d
 80043ca:	d114      	bne.n	80043f6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80043cc:	f7fd fc08 	bl	8001be0 <HAL_GetTick>
 80043d0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80043d2:	e009      	b.n	80043e8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80043d4:	f7fd fc04 	bl	8001be0 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043e2:	d901      	bls.n	80043e8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e007      	b.n	80043f8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80043e8:	4b05      	ldr	r3, [pc, #20]	; (8004400 <HAL_PWREx_ConfigSupply+0xb0>)
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043f4:	d1ee      	bne.n	80043d4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	58024800 	.word	0x58024800

08004404 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004404:	b480      	push	{r7}
 8004406:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004408:	4b05      	ldr	r3, [pc, #20]	; (8004420 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	4a04      	ldr	r2, [pc, #16]	; (8004420 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800440e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004412:	60d3      	str	r3, [r2, #12]
}
 8004414:	bf00      	nop
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	58024800 	.word	0x58024800

08004424 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b08c      	sub	sp, #48	; 0x30
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d102      	bne.n	8004438 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	f000 bc48 	b.w	8004cc8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0301 	and.w	r3, r3, #1
 8004440:	2b00      	cmp	r3, #0
 8004442:	f000 8088 	beq.w	8004556 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004446:	4b99      	ldr	r3, [pc, #612]	; (80046ac <HAL_RCC_OscConfig+0x288>)
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800444e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004450:	4b96      	ldr	r3, [pc, #600]	; (80046ac <HAL_RCC_OscConfig+0x288>)
 8004452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004454:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004458:	2b10      	cmp	r3, #16
 800445a:	d007      	beq.n	800446c <HAL_RCC_OscConfig+0x48>
 800445c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800445e:	2b18      	cmp	r3, #24
 8004460:	d111      	bne.n	8004486 <HAL_RCC_OscConfig+0x62>
 8004462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004464:	f003 0303 	and.w	r3, r3, #3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d10c      	bne.n	8004486 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800446c:	4b8f      	ldr	r3, [pc, #572]	; (80046ac <HAL_RCC_OscConfig+0x288>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d06d      	beq.n	8004554 <HAL_RCC_OscConfig+0x130>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d169      	bne.n	8004554 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	f000 bc21 	b.w	8004cc8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800448e:	d106      	bne.n	800449e <HAL_RCC_OscConfig+0x7a>
 8004490:	4b86      	ldr	r3, [pc, #536]	; (80046ac <HAL_RCC_OscConfig+0x288>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a85      	ldr	r2, [pc, #532]	; (80046ac <HAL_RCC_OscConfig+0x288>)
 8004496:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800449a:	6013      	str	r3, [r2, #0]
 800449c:	e02e      	b.n	80044fc <HAL_RCC_OscConfig+0xd8>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d10c      	bne.n	80044c0 <HAL_RCC_OscConfig+0x9c>
 80044a6:	4b81      	ldr	r3, [pc, #516]	; (80046ac <HAL_RCC_OscConfig+0x288>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a80      	ldr	r2, [pc, #512]	; (80046ac <HAL_RCC_OscConfig+0x288>)
 80044ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044b0:	6013      	str	r3, [r2, #0]
 80044b2:	4b7e      	ldr	r3, [pc, #504]	; (80046ac <HAL_RCC_OscConfig+0x288>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a7d      	ldr	r2, [pc, #500]	; (80046ac <HAL_RCC_OscConfig+0x288>)
 80044b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044bc:	6013      	str	r3, [r2, #0]
 80044be:	e01d      	b.n	80044fc <HAL_RCC_OscConfig+0xd8>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044c8:	d10c      	bne.n	80044e4 <HAL_RCC_OscConfig+0xc0>
 80044ca:	4b78      	ldr	r3, [pc, #480]	; (80046ac <HAL_RCC_OscConfig+0x288>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a77      	ldr	r2, [pc, #476]	; (80046ac <HAL_RCC_OscConfig+0x288>)
 80044d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044d4:	6013      	str	r3, [r2, #0]
 80044d6:	4b75      	ldr	r3, [pc, #468]	; (80046ac <HAL_RCC_OscConfig+0x288>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a74      	ldr	r2, [pc, #464]	; (80046ac <HAL_RCC_OscConfig+0x288>)
 80044dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044e0:	6013      	str	r3, [r2, #0]
 80044e2:	e00b      	b.n	80044fc <HAL_RCC_OscConfig+0xd8>
 80044e4:	4b71      	ldr	r3, [pc, #452]	; (80046ac <HAL_RCC_OscConfig+0x288>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a70      	ldr	r2, [pc, #448]	; (80046ac <HAL_RCC_OscConfig+0x288>)
 80044ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ee:	6013      	str	r3, [r2, #0]
 80044f0:	4b6e      	ldr	r3, [pc, #440]	; (80046ac <HAL_RCC_OscConfig+0x288>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a6d      	ldr	r2, [pc, #436]	; (80046ac <HAL_RCC_OscConfig+0x288>)
 80044f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d013      	beq.n	800452c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004504:	f7fd fb6c 	bl	8001be0 <HAL_GetTick>
 8004508:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800450a:	e008      	b.n	800451e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800450c:	f7fd fb68 	bl	8001be0 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b64      	cmp	r3, #100	; 0x64
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e3d4      	b.n	8004cc8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800451e:	4b63      	ldr	r3, [pc, #396]	; (80046ac <HAL_RCC_OscConfig+0x288>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d0f0      	beq.n	800450c <HAL_RCC_OscConfig+0xe8>
 800452a:	e014      	b.n	8004556 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800452c:	f7fd fb58 	bl	8001be0 <HAL_GetTick>
 8004530:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004532:	e008      	b.n	8004546 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004534:	f7fd fb54 	bl	8001be0 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b64      	cmp	r3, #100	; 0x64
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e3c0      	b.n	8004cc8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004546:	4b59      	ldr	r3, [pc, #356]	; (80046ac <HAL_RCC_OscConfig+0x288>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1f0      	bne.n	8004534 <HAL_RCC_OscConfig+0x110>
 8004552:	e000      	b.n	8004556 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004554:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	f000 80ca 	beq.w	80046f8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004564:	4b51      	ldr	r3, [pc, #324]	; (80046ac <HAL_RCC_OscConfig+0x288>)
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800456c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800456e:	4b4f      	ldr	r3, [pc, #316]	; (80046ac <HAL_RCC_OscConfig+0x288>)
 8004570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004572:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004574:	6a3b      	ldr	r3, [r7, #32]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d007      	beq.n	800458a <HAL_RCC_OscConfig+0x166>
 800457a:	6a3b      	ldr	r3, [r7, #32]
 800457c:	2b18      	cmp	r3, #24
 800457e:	d156      	bne.n	800462e <HAL_RCC_OscConfig+0x20a>
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	f003 0303 	and.w	r3, r3, #3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d151      	bne.n	800462e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800458a:	4b48      	ldr	r3, [pc, #288]	; (80046ac <HAL_RCC_OscConfig+0x288>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0304 	and.w	r3, r3, #4
 8004592:	2b00      	cmp	r3, #0
 8004594:	d005      	beq.n	80045a2 <HAL_RCC_OscConfig+0x17e>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d101      	bne.n	80045a2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e392      	b.n	8004cc8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80045a2:	4b42      	ldr	r3, [pc, #264]	; (80046ac <HAL_RCC_OscConfig+0x288>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f023 0219 	bic.w	r2, r3, #25
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	493f      	ldr	r1, [pc, #252]	; (80046ac <HAL_RCC_OscConfig+0x288>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b4:	f7fd fb14 	bl	8001be0 <HAL_GetTick>
 80045b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045ba:	e008      	b.n	80045ce <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045bc:	f7fd fb10 	bl	8001be0 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e37c      	b.n	8004cc8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045ce:	4b37      	ldr	r3, [pc, #220]	; (80046ac <HAL_RCC_OscConfig+0x288>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0304 	and.w	r3, r3, #4
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d0f0      	beq.n	80045bc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045da:	f7fd fb31 	bl	8001c40 <HAL_GetREVID>
 80045de:	4603      	mov	r3, r0
 80045e0:	f241 0203 	movw	r2, #4099	; 0x1003
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d817      	bhi.n	8004618 <HAL_RCC_OscConfig+0x1f4>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	2b40      	cmp	r3, #64	; 0x40
 80045ee:	d108      	bne.n	8004602 <HAL_RCC_OscConfig+0x1de>
 80045f0:	4b2e      	ldr	r3, [pc, #184]	; (80046ac <HAL_RCC_OscConfig+0x288>)
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80045f8:	4a2c      	ldr	r2, [pc, #176]	; (80046ac <HAL_RCC_OscConfig+0x288>)
 80045fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045fe:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004600:	e07a      	b.n	80046f8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004602:	4b2a      	ldr	r3, [pc, #168]	; (80046ac <HAL_RCC_OscConfig+0x288>)
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	031b      	lsls	r3, r3, #12
 8004610:	4926      	ldr	r1, [pc, #152]	; (80046ac <HAL_RCC_OscConfig+0x288>)
 8004612:	4313      	orrs	r3, r2
 8004614:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004616:	e06f      	b.n	80046f8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004618:	4b24      	ldr	r3, [pc, #144]	; (80046ac <HAL_RCC_OscConfig+0x288>)
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	061b      	lsls	r3, r3, #24
 8004626:	4921      	ldr	r1, [pc, #132]	; (80046ac <HAL_RCC_OscConfig+0x288>)
 8004628:	4313      	orrs	r3, r2
 800462a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800462c:	e064      	b.n	80046f8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d047      	beq.n	80046c6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004636:	4b1d      	ldr	r3, [pc, #116]	; (80046ac <HAL_RCC_OscConfig+0x288>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f023 0219 	bic.w	r2, r3, #25
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	491a      	ldr	r1, [pc, #104]	; (80046ac <HAL_RCC_OscConfig+0x288>)
 8004644:	4313      	orrs	r3, r2
 8004646:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004648:	f7fd faca 	bl	8001be0 <HAL_GetTick>
 800464c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800464e:	e008      	b.n	8004662 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004650:	f7fd fac6 	bl	8001be0 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e332      	b.n	8004cc8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004662:	4b12      	ldr	r3, [pc, #72]	; (80046ac <HAL_RCC_OscConfig+0x288>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0304 	and.w	r3, r3, #4
 800466a:	2b00      	cmp	r3, #0
 800466c:	d0f0      	beq.n	8004650 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800466e:	f7fd fae7 	bl	8001c40 <HAL_GetREVID>
 8004672:	4603      	mov	r3, r0
 8004674:	f241 0203 	movw	r2, #4099	; 0x1003
 8004678:	4293      	cmp	r3, r2
 800467a:	d819      	bhi.n	80046b0 <HAL_RCC_OscConfig+0x28c>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	2b40      	cmp	r3, #64	; 0x40
 8004682:	d108      	bne.n	8004696 <HAL_RCC_OscConfig+0x272>
 8004684:	4b09      	ldr	r3, [pc, #36]	; (80046ac <HAL_RCC_OscConfig+0x288>)
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800468c:	4a07      	ldr	r2, [pc, #28]	; (80046ac <HAL_RCC_OscConfig+0x288>)
 800468e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004692:	6053      	str	r3, [r2, #4]
 8004694:	e030      	b.n	80046f8 <HAL_RCC_OscConfig+0x2d4>
 8004696:	4b05      	ldr	r3, [pc, #20]	; (80046ac <HAL_RCC_OscConfig+0x288>)
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	031b      	lsls	r3, r3, #12
 80046a4:	4901      	ldr	r1, [pc, #4]	; (80046ac <HAL_RCC_OscConfig+0x288>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	604b      	str	r3, [r1, #4]
 80046aa:	e025      	b.n	80046f8 <HAL_RCC_OscConfig+0x2d4>
 80046ac:	58024400 	.word	0x58024400
 80046b0:	4b9a      	ldr	r3, [pc, #616]	; (800491c <HAL_RCC_OscConfig+0x4f8>)
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	061b      	lsls	r3, r3, #24
 80046be:	4997      	ldr	r1, [pc, #604]	; (800491c <HAL_RCC_OscConfig+0x4f8>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	604b      	str	r3, [r1, #4]
 80046c4:	e018      	b.n	80046f8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046c6:	4b95      	ldr	r3, [pc, #596]	; (800491c <HAL_RCC_OscConfig+0x4f8>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a94      	ldr	r2, [pc, #592]	; (800491c <HAL_RCC_OscConfig+0x4f8>)
 80046cc:	f023 0301 	bic.w	r3, r3, #1
 80046d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d2:	f7fd fa85 	bl	8001be0 <HAL_GetTick>
 80046d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80046d8:	e008      	b.n	80046ec <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046da:	f7fd fa81 	bl	8001be0 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d901      	bls.n	80046ec <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e2ed      	b.n	8004cc8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80046ec:	4b8b      	ldr	r3, [pc, #556]	; (800491c <HAL_RCC_OscConfig+0x4f8>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0304 	and.w	r3, r3, #4
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1f0      	bne.n	80046da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0310 	and.w	r3, r3, #16
 8004700:	2b00      	cmp	r3, #0
 8004702:	f000 80a9 	beq.w	8004858 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004706:	4b85      	ldr	r3, [pc, #532]	; (800491c <HAL_RCC_OscConfig+0x4f8>)
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800470e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004710:	4b82      	ldr	r3, [pc, #520]	; (800491c <HAL_RCC_OscConfig+0x4f8>)
 8004712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004714:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	2b08      	cmp	r3, #8
 800471a:	d007      	beq.n	800472c <HAL_RCC_OscConfig+0x308>
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	2b18      	cmp	r3, #24
 8004720:	d13a      	bne.n	8004798 <HAL_RCC_OscConfig+0x374>
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	f003 0303 	and.w	r3, r3, #3
 8004728:	2b01      	cmp	r3, #1
 800472a:	d135      	bne.n	8004798 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800472c:	4b7b      	ldr	r3, [pc, #492]	; (800491c <HAL_RCC_OscConfig+0x4f8>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004734:	2b00      	cmp	r3, #0
 8004736:	d005      	beq.n	8004744 <HAL_RCC_OscConfig+0x320>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	69db      	ldr	r3, [r3, #28]
 800473c:	2b80      	cmp	r3, #128	; 0x80
 800473e:	d001      	beq.n	8004744 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e2c1      	b.n	8004cc8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004744:	f7fd fa7c 	bl	8001c40 <HAL_GetREVID>
 8004748:	4603      	mov	r3, r0
 800474a:	f241 0203 	movw	r2, #4099	; 0x1003
 800474e:	4293      	cmp	r3, r2
 8004750:	d817      	bhi.n	8004782 <HAL_RCC_OscConfig+0x35e>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	2b20      	cmp	r3, #32
 8004758:	d108      	bne.n	800476c <HAL_RCC_OscConfig+0x348>
 800475a:	4b70      	ldr	r3, [pc, #448]	; (800491c <HAL_RCC_OscConfig+0x4f8>)
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004762:	4a6e      	ldr	r2, [pc, #440]	; (800491c <HAL_RCC_OscConfig+0x4f8>)
 8004764:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004768:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800476a:	e075      	b.n	8004858 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800476c:	4b6b      	ldr	r3, [pc, #428]	; (800491c <HAL_RCC_OscConfig+0x4f8>)
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a1b      	ldr	r3, [r3, #32]
 8004778:	069b      	lsls	r3, r3, #26
 800477a:	4968      	ldr	r1, [pc, #416]	; (800491c <HAL_RCC_OscConfig+0x4f8>)
 800477c:	4313      	orrs	r3, r2
 800477e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004780:	e06a      	b.n	8004858 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004782:	4b66      	ldr	r3, [pc, #408]	; (800491c <HAL_RCC_OscConfig+0x4f8>)
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	061b      	lsls	r3, r3, #24
 8004790:	4962      	ldr	r1, [pc, #392]	; (800491c <HAL_RCC_OscConfig+0x4f8>)
 8004792:	4313      	orrs	r3, r2
 8004794:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004796:	e05f      	b.n	8004858 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	69db      	ldr	r3, [r3, #28]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d042      	beq.n	8004826 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80047a0:	4b5e      	ldr	r3, [pc, #376]	; (800491c <HAL_RCC_OscConfig+0x4f8>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a5d      	ldr	r2, [pc, #372]	; (800491c <HAL_RCC_OscConfig+0x4f8>)
 80047a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ac:	f7fd fa18 	bl	8001be0 <HAL_GetTick>
 80047b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80047b2:	e008      	b.n	80047c6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80047b4:	f7fd fa14 	bl	8001be0 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e280      	b.n	8004cc8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80047c6:	4b55      	ldr	r3, [pc, #340]	; (800491c <HAL_RCC_OscConfig+0x4f8>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d0f0      	beq.n	80047b4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80047d2:	f7fd fa35 	bl	8001c40 <HAL_GetREVID>
 80047d6:	4603      	mov	r3, r0
 80047d8:	f241 0203 	movw	r2, #4099	; 0x1003
 80047dc:	4293      	cmp	r3, r2
 80047de:	d817      	bhi.n	8004810 <HAL_RCC_OscConfig+0x3ec>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a1b      	ldr	r3, [r3, #32]
 80047e4:	2b20      	cmp	r3, #32
 80047e6:	d108      	bne.n	80047fa <HAL_RCC_OscConfig+0x3d6>
 80047e8:	4b4c      	ldr	r3, [pc, #304]	; (800491c <HAL_RCC_OscConfig+0x4f8>)
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80047f0:	4a4a      	ldr	r2, [pc, #296]	; (800491c <HAL_RCC_OscConfig+0x4f8>)
 80047f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047f6:	6053      	str	r3, [r2, #4]
 80047f8:	e02e      	b.n	8004858 <HAL_RCC_OscConfig+0x434>
 80047fa:	4b48      	ldr	r3, [pc, #288]	; (800491c <HAL_RCC_OscConfig+0x4f8>)
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	069b      	lsls	r3, r3, #26
 8004808:	4944      	ldr	r1, [pc, #272]	; (800491c <HAL_RCC_OscConfig+0x4f8>)
 800480a:	4313      	orrs	r3, r2
 800480c:	604b      	str	r3, [r1, #4]
 800480e:	e023      	b.n	8004858 <HAL_RCC_OscConfig+0x434>
 8004810:	4b42      	ldr	r3, [pc, #264]	; (800491c <HAL_RCC_OscConfig+0x4f8>)
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a1b      	ldr	r3, [r3, #32]
 800481c:	061b      	lsls	r3, r3, #24
 800481e:	493f      	ldr	r1, [pc, #252]	; (800491c <HAL_RCC_OscConfig+0x4f8>)
 8004820:	4313      	orrs	r3, r2
 8004822:	60cb      	str	r3, [r1, #12]
 8004824:	e018      	b.n	8004858 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004826:	4b3d      	ldr	r3, [pc, #244]	; (800491c <HAL_RCC_OscConfig+0x4f8>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a3c      	ldr	r2, [pc, #240]	; (800491c <HAL_RCC_OscConfig+0x4f8>)
 800482c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004830:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004832:	f7fd f9d5 	bl	8001be0 <HAL_GetTick>
 8004836:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004838:	e008      	b.n	800484c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800483a:	f7fd f9d1 	bl	8001be0 <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	2b02      	cmp	r3, #2
 8004846:	d901      	bls.n	800484c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e23d      	b.n	8004cc8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800484c:	4b33      	ldr	r3, [pc, #204]	; (800491c <HAL_RCC_OscConfig+0x4f8>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1f0      	bne.n	800483a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0308 	and.w	r3, r3, #8
 8004860:	2b00      	cmp	r3, #0
 8004862:	d036      	beq.n	80048d2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	695b      	ldr	r3, [r3, #20]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d019      	beq.n	80048a0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800486c:	4b2b      	ldr	r3, [pc, #172]	; (800491c <HAL_RCC_OscConfig+0x4f8>)
 800486e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004870:	4a2a      	ldr	r2, [pc, #168]	; (800491c <HAL_RCC_OscConfig+0x4f8>)
 8004872:	f043 0301 	orr.w	r3, r3, #1
 8004876:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004878:	f7fd f9b2 	bl	8001be0 <HAL_GetTick>
 800487c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800487e:	e008      	b.n	8004892 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004880:	f7fd f9ae 	bl	8001be0 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b02      	cmp	r3, #2
 800488c:	d901      	bls.n	8004892 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e21a      	b.n	8004cc8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004892:	4b22      	ldr	r3, [pc, #136]	; (800491c <HAL_RCC_OscConfig+0x4f8>)
 8004894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	2b00      	cmp	r3, #0
 800489c:	d0f0      	beq.n	8004880 <HAL_RCC_OscConfig+0x45c>
 800489e:	e018      	b.n	80048d2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048a0:	4b1e      	ldr	r3, [pc, #120]	; (800491c <HAL_RCC_OscConfig+0x4f8>)
 80048a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048a4:	4a1d      	ldr	r2, [pc, #116]	; (800491c <HAL_RCC_OscConfig+0x4f8>)
 80048a6:	f023 0301 	bic.w	r3, r3, #1
 80048aa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ac:	f7fd f998 	bl	8001be0 <HAL_GetTick>
 80048b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80048b2:	e008      	b.n	80048c6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048b4:	f7fd f994 	bl	8001be0 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e200      	b.n	8004cc8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80048c6:	4b15      	ldr	r3, [pc, #84]	; (800491c <HAL_RCC_OscConfig+0x4f8>)
 80048c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1f0      	bne.n	80048b4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0320 	and.w	r3, r3, #32
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d039      	beq.n	8004952 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d01c      	beq.n	8004920 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80048e6:	4b0d      	ldr	r3, [pc, #52]	; (800491c <HAL_RCC_OscConfig+0x4f8>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a0c      	ldr	r2, [pc, #48]	; (800491c <HAL_RCC_OscConfig+0x4f8>)
 80048ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80048f0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80048f2:	f7fd f975 	bl	8001be0 <HAL_GetTick>
 80048f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80048f8:	e008      	b.n	800490c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048fa:	f7fd f971 	bl	8001be0 <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	2b02      	cmp	r3, #2
 8004906:	d901      	bls.n	800490c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e1dd      	b.n	8004cc8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800490c:	4b03      	ldr	r3, [pc, #12]	; (800491c <HAL_RCC_OscConfig+0x4f8>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d0f0      	beq.n	80048fa <HAL_RCC_OscConfig+0x4d6>
 8004918:	e01b      	b.n	8004952 <HAL_RCC_OscConfig+0x52e>
 800491a:	bf00      	nop
 800491c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004920:	4b9b      	ldr	r3, [pc, #620]	; (8004b90 <HAL_RCC_OscConfig+0x76c>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a9a      	ldr	r2, [pc, #616]	; (8004b90 <HAL_RCC_OscConfig+0x76c>)
 8004926:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800492a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800492c:	f7fd f958 	bl	8001be0 <HAL_GetTick>
 8004930:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004932:	e008      	b.n	8004946 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004934:	f7fd f954 	bl	8001be0 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b02      	cmp	r3, #2
 8004940:	d901      	bls.n	8004946 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e1c0      	b.n	8004cc8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004946:	4b92      	ldr	r3, [pc, #584]	; (8004b90 <HAL_RCC_OscConfig+0x76c>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1f0      	bne.n	8004934 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0304 	and.w	r3, r3, #4
 800495a:	2b00      	cmp	r3, #0
 800495c:	f000 8081 	beq.w	8004a62 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004960:	4b8c      	ldr	r3, [pc, #560]	; (8004b94 <HAL_RCC_OscConfig+0x770>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a8b      	ldr	r2, [pc, #556]	; (8004b94 <HAL_RCC_OscConfig+0x770>)
 8004966:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800496a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800496c:	f7fd f938 	bl	8001be0 <HAL_GetTick>
 8004970:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004972:	e008      	b.n	8004986 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004974:	f7fd f934 	bl	8001be0 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b64      	cmp	r3, #100	; 0x64
 8004980:	d901      	bls.n	8004986 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e1a0      	b.n	8004cc8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004986:	4b83      	ldr	r3, [pc, #524]	; (8004b94 <HAL_RCC_OscConfig+0x770>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800498e:	2b00      	cmp	r3, #0
 8004990:	d0f0      	beq.n	8004974 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	2b01      	cmp	r3, #1
 8004998:	d106      	bne.n	80049a8 <HAL_RCC_OscConfig+0x584>
 800499a:	4b7d      	ldr	r3, [pc, #500]	; (8004b90 <HAL_RCC_OscConfig+0x76c>)
 800499c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800499e:	4a7c      	ldr	r2, [pc, #496]	; (8004b90 <HAL_RCC_OscConfig+0x76c>)
 80049a0:	f043 0301 	orr.w	r3, r3, #1
 80049a4:	6713      	str	r3, [r2, #112]	; 0x70
 80049a6:	e02d      	b.n	8004a04 <HAL_RCC_OscConfig+0x5e0>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d10c      	bne.n	80049ca <HAL_RCC_OscConfig+0x5a6>
 80049b0:	4b77      	ldr	r3, [pc, #476]	; (8004b90 <HAL_RCC_OscConfig+0x76c>)
 80049b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b4:	4a76      	ldr	r2, [pc, #472]	; (8004b90 <HAL_RCC_OscConfig+0x76c>)
 80049b6:	f023 0301 	bic.w	r3, r3, #1
 80049ba:	6713      	str	r3, [r2, #112]	; 0x70
 80049bc:	4b74      	ldr	r3, [pc, #464]	; (8004b90 <HAL_RCC_OscConfig+0x76c>)
 80049be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c0:	4a73      	ldr	r2, [pc, #460]	; (8004b90 <HAL_RCC_OscConfig+0x76c>)
 80049c2:	f023 0304 	bic.w	r3, r3, #4
 80049c6:	6713      	str	r3, [r2, #112]	; 0x70
 80049c8:	e01c      	b.n	8004a04 <HAL_RCC_OscConfig+0x5e0>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	2b05      	cmp	r3, #5
 80049d0:	d10c      	bne.n	80049ec <HAL_RCC_OscConfig+0x5c8>
 80049d2:	4b6f      	ldr	r3, [pc, #444]	; (8004b90 <HAL_RCC_OscConfig+0x76c>)
 80049d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d6:	4a6e      	ldr	r2, [pc, #440]	; (8004b90 <HAL_RCC_OscConfig+0x76c>)
 80049d8:	f043 0304 	orr.w	r3, r3, #4
 80049dc:	6713      	str	r3, [r2, #112]	; 0x70
 80049de:	4b6c      	ldr	r3, [pc, #432]	; (8004b90 <HAL_RCC_OscConfig+0x76c>)
 80049e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e2:	4a6b      	ldr	r2, [pc, #428]	; (8004b90 <HAL_RCC_OscConfig+0x76c>)
 80049e4:	f043 0301 	orr.w	r3, r3, #1
 80049e8:	6713      	str	r3, [r2, #112]	; 0x70
 80049ea:	e00b      	b.n	8004a04 <HAL_RCC_OscConfig+0x5e0>
 80049ec:	4b68      	ldr	r3, [pc, #416]	; (8004b90 <HAL_RCC_OscConfig+0x76c>)
 80049ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f0:	4a67      	ldr	r2, [pc, #412]	; (8004b90 <HAL_RCC_OscConfig+0x76c>)
 80049f2:	f023 0301 	bic.w	r3, r3, #1
 80049f6:	6713      	str	r3, [r2, #112]	; 0x70
 80049f8:	4b65      	ldr	r3, [pc, #404]	; (8004b90 <HAL_RCC_OscConfig+0x76c>)
 80049fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049fc:	4a64      	ldr	r2, [pc, #400]	; (8004b90 <HAL_RCC_OscConfig+0x76c>)
 80049fe:	f023 0304 	bic.w	r3, r3, #4
 8004a02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d015      	beq.n	8004a38 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a0c:	f7fd f8e8 	bl	8001be0 <HAL_GetTick>
 8004a10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a12:	e00a      	b.n	8004a2a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a14:	f7fd f8e4 	bl	8001be0 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d901      	bls.n	8004a2a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e14e      	b.n	8004cc8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a2a:	4b59      	ldr	r3, [pc, #356]	; (8004b90 <HAL_RCC_OscConfig+0x76c>)
 8004a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d0ee      	beq.n	8004a14 <HAL_RCC_OscConfig+0x5f0>
 8004a36:	e014      	b.n	8004a62 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a38:	f7fd f8d2 	bl	8001be0 <HAL_GetTick>
 8004a3c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004a3e:	e00a      	b.n	8004a56 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a40:	f7fd f8ce 	bl	8001be0 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e138      	b.n	8004cc8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004a56:	4b4e      	ldr	r3, [pc, #312]	; (8004b90 <HAL_RCC_OscConfig+0x76c>)
 8004a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1ee      	bne.n	8004a40 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	f000 812d 	beq.w	8004cc6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004a6c:	4b48      	ldr	r3, [pc, #288]	; (8004b90 <HAL_RCC_OscConfig+0x76c>)
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a74:	2b18      	cmp	r3, #24
 8004a76:	f000 80bd 	beq.w	8004bf4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	f040 809e 	bne.w	8004bc0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a84:	4b42      	ldr	r3, [pc, #264]	; (8004b90 <HAL_RCC_OscConfig+0x76c>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a41      	ldr	r2, [pc, #260]	; (8004b90 <HAL_RCC_OscConfig+0x76c>)
 8004a8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a90:	f7fd f8a6 	bl	8001be0 <HAL_GetTick>
 8004a94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a96:	e008      	b.n	8004aaa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a98:	f7fd f8a2 	bl	8001be0 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d901      	bls.n	8004aaa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e10e      	b.n	8004cc8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004aaa:	4b39      	ldr	r3, [pc, #228]	; (8004b90 <HAL_RCC_OscConfig+0x76c>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1f0      	bne.n	8004a98 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ab6:	4b36      	ldr	r3, [pc, #216]	; (8004b90 <HAL_RCC_OscConfig+0x76c>)
 8004ab8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004aba:	4b37      	ldr	r3, [pc, #220]	; (8004b98 <HAL_RCC_OscConfig+0x774>)
 8004abc:	4013      	ands	r3, r2
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004ac6:	0112      	lsls	r2, r2, #4
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	4931      	ldr	r1, [pc, #196]	; (8004b90 <HAL_RCC_OscConfig+0x76c>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	628b      	str	r3, [r1, #40]	; 0x28
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	025b      	lsls	r3, r3, #9
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	431a      	orrs	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aea:	3b01      	subs	r3, #1
 8004aec:	041b      	lsls	r3, r3, #16
 8004aee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004af2:	431a      	orrs	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af8:	3b01      	subs	r3, #1
 8004afa:	061b      	lsls	r3, r3, #24
 8004afc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004b00:	4923      	ldr	r1, [pc, #140]	; (8004b90 <HAL_RCC_OscConfig+0x76c>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004b06:	4b22      	ldr	r3, [pc, #136]	; (8004b90 <HAL_RCC_OscConfig+0x76c>)
 8004b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0a:	4a21      	ldr	r2, [pc, #132]	; (8004b90 <HAL_RCC_OscConfig+0x76c>)
 8004b0c:	f023 0301 	bic.w	r3, r3, #1
 8004b10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004b12:	4b1f      	ldr	r3, [pc, #124]	; (8004b90 <HAL_RCC_OscConfig+0x76c>)
 8004b14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b16:	4b21      	ldr	r3, [pc, #132]	; (8004b9c <HAL_RCC_OscConfig+0x778>)
 8004b18:	4013      	ands	r3, r2
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004b1e:	00d2      	lsls	r2, r2, #3
 8004b20:	491b      	ldr	r1, [pc, #108]	; (8004b90 <HAL_RCC_OscConfig+0x76c>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004b26:	4b1a      	ldr	r3, [pc, #104]	; (8004b90 <HAL_RCC_OscConfig+0x76c>)
 8004b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b2a:	f023 020c 	bic.w	r2, r3, #12
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b32:	4917      	ldr	r1, [pc, #92]	; (8004b90 <HAL_RCC_OscConfig+0x76c>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004b38:	4b15      	ldr	r3, [pc, #84]	; (8004b90 <HAL_RCC_OscConfig+0x76c>)
 8004b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3c:	f023 0202 	bic.w	r2, r3, #2
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b44:	4912      	ldr	r1, [pc, #72]	; (8004b90 <HAL_RCC_OscConfig+0x76c>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004b4a:	4b11      	ldr	r3, [pc, #68]	; (8004b90 <HAL_RCC_OscConfig+0x76c>)
 8004b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4e:	4a10      	ldr	r2, [pc, #64]	; (8004b90 <HAL_RCC_OscConfig+0x76c>)
 8004b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b56:	4b0e      	ldr	r3, [pc, #56]	; (8004b90 <HAL_RCC_OscConfig+0x76c>)
 8004b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5a:	4a0d      	ldr	r2, [pc, #52]	; (8004b90 <HAL_RCC_OscConfig+0x76c>)
 8004b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004b62:	4b0b      	ldr	r3, [pc, #44]	; (8004b90 <HAL_RCC_OscConfig+0x76c>)
 8004b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b66:	4a0a      	ldr	r2, [pc, #40]	; (8004b90 <HAL_RCC_OscConfig+0x76c>)
 8004b68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b6c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004b6e:	4b08      	ldr	r3, [pc, #32]	; (8004b90 <HAL_RCC_OscConfig+0x76c>)
 8004b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b72:	4a07      	ldr	r2, [pc, #28]	; (8004b90 <HAL_RCC_OscConfig+0x76c>)
 8004b74:	f043 0301 	orr.w	r3, r3, #1
 8004b78:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b7a:	4b05      	ldr	r3, [pc, #20]	; (8004b90 <HAL_RCC_OscConfig+0x76c>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a04      	ldr	r2, [pc, #16]	; (8004b90 <HAL_RCC_OscConfig+0x76c>)
 8004b80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b86:	f7fd f82b 	bl	8001be0 <HAL_GetTick>
 8004b8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b8c:	e011      	b.n	8004bb2 <HAL_RCC_OscConfig+0x78e>
 8004b8e:	bf00      	nop
 8004b90:	58024400 	.word	0x58024400
 8004b94:	58024800 	.word	0x58024800
 8004b98:	fffffc0c 	.word	0xfffffc0c
 8004b9c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ba0:	f7fd f81e 	bl	8001be0 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e08a      	b.n	8004cc8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004bb2:	4b47      	ldr	r3, [pc, #284]	; (8004cd0 <HAL_RCC_OscConfig+0x8ac>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d0f0      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x77c>
 8004bbe:	e082      	b.n	8004cc6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bc0:	4b43      	ldr	r3, [pc, #268]	; (8004cd0 <HAL_RCC_OscConfig+0x8ac>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a42      	ldr	r2, [pc, #264]	; (8004cd0 <HAL_RCC_OscConfig+0x8ac>)
 8004bc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bcc:	f7fd f808 	bl	8001be0 <HAL_GetTick>
 8004bd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004bd2:	e008      	b.n	8004be6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bd4:	f7fd f804 	bl	8001be0 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e070      	b.n	8004cc8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004be6:	4b3a      	ldr	r3, [pc, #232]	; (8004cd0 <HAL_RCC_OscConfig+0x8ac>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1f0      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x7b0>
 8004bf2:	e068      	b.n	8004cc6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004bf4:	4b36      	ldr	r3, [pc, #216]	; (8004cd0 <HAL_RCC_OscConfig+0x8ac>)
 8004bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004bfa:	4b35      	ldr	r3, [pc, #212]	; (8004cd0 <HAL_RCC_OscConfig+0x8ac>)
 8004bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfe:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d031      	beq.n	8004c6c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	f003 0203 	and.w	r2, r3, #3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d12a      	bne.n	8004c6c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	091b      	lsrs	r3, r3, #4
 8004c1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d122      	bne.n	8004c6c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c30:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d11a      	bne.n	8004c6c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	0a5b      	lsrs	r3, r3, #9
 8004c3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c42:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d111      	bne.n	8004c6c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	0c1b      	lsrs	r3, r3, #16
 8004c4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c54:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d108      	bne.n	8004c6c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	0e1b      	lsrs	r3, r3, #24
 8004c5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c66:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d001      	beq.n	8004c70 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e02b      	b.n	8004cc8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004c70:	4b17      	ldr	r3, [pc, #92]	; (8004cd0 <HAL_RCC_OscConfig+0x8ac>)
 8004c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c74:	08db      	lsrs	r3, r3, #3
 8004c76:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c7a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d01f      	beq.n	8004cc6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004c86:	4b12      	ldr	r3, [pc, #72]	; (8004cd0 <HAL_RCC_OscConfig+0x8ac>)
 8004c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8a:	4a11      	ldr	r2, [pc, #68]	; (8004cd0 <HAL_RCC_OscConfig+0x8ac>)
 8004c8c:	f023 0301 	bic.w	r3, r3, #1
 8004c90:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c92:	f7fc ffa5 	bl	8001be0 <HAL_GetTick>
 8004c96:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004c98:	bf00      	nop
 8004c9a:	f7fc ffa1 	bl	8001be0 <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d0f9      	beq.n	8004c9a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004ca6:	4b0a      	ldr	r3, [pc, #40]	; (8004cd0 <HAL_RCC_OscConfig+0x8ac>)
 8004ca8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004caa:	4b0a      	ldr	r3, [pc, #40]	; (8004cd4 <HAL_RCC_OscConfig+0x8b0>)
 8004cac:	4013      	ands	r3, r2
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004cb2:	00d2      	lsls	r2, r2, #3
 8004cb4:	4906      	ldr	r1, [pc, #24]	; (8004cd0 <HAL_RCC_OscConfig+0x8ac>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004cba:	4b05      	ldr	r3, [pc, #20]	; (8004cd0 <HAL_RCC_OscConfig+0x8ac>)
 8004cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cbe:	4a04      	ldr	r2, [pc, #16]	; (8004cd0 <HAL_RCC_OscConfig+0x8ac>)
 8004cc0:	f043 0301 	orr.w	r3, r3, #1
 8004cc4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3730      	adds	r7, #48	; 0x30
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	58024400 	.word	0x58024400
 8004cd4:	ffff0007 	.word	0xffff0007

08004cd8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b086      	sub	sp, #24
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d101      	bne.n	8004cec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e19c      	b.n	8005026 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cec:	4b8a      	ldr	r3, [pc, #552]	; (8004f18 <HAL_RCC_ClockConfig+0x240>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 030f 	and.w	r3, r3, #15
 8004cf4:	683a      	ldr	r2, [r7, #0]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d910      	bls.n	8004d1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cfa:	4b87      	ldr	r3, [pc, #540]	; (8004f18 <HAL_RCC_ClockConfig+0x240>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f023 020f 	bic.w	r2, r3, #15
 8004d02:	4985      	ldr	r1, [pc, #532]	; (8004f18 <HAL_RCC_ClockConfig+0x240>)
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d0a:	4b83      	ldr	r3, [pc, #524]	; (8004f18 <HAL_RCC_ClockConfig+0x240>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 030f 	and.w	r3, r3, #15
 8004d12:	683a      	ldr	r2, [r7, #0]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d001      	beq.n	8004d1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e184      	b.n	8005026 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0304 	and.w	r3, r3, #4
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d010      	beq.n	8004d4a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	691a      	ldr	r2, [r3, #16]
 8004d2c:	4b7b      	ldr	r3, [pc, #492]	; (8004f1c <HAL_RCC_ClockConfig+0x244>)
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d908      	bls.n	8004d4a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004d38:	4b78      	ldr	r3, [pc, #480]	; (8004f1c <HAL_RCC_ClockConfig+0x244>)
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	4975      	ldr	r1, [pc, #468]	; (8004f1c <HAL_RCC_ClockConfig+0x244>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0308 	and.w	r3, r3, #8
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d010      	beq.n	8004d78 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	695a      	ldr	r2, [r3, #20]
 8004d5a:	4b70      	ldr	r3, [pc, #448]	; (8004f1c <HAL_RCC_ClockConfig+0x244>)
 8004d5c:	69db      	ldr	r3, [r3, #28]
 8004d5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d908      	bls.n	8004d78 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004d66:	4b6d      	ldr	r3, [pc, #436]	; (8004f1c <HAL_RCC_ClockConfig+0x244>)
 8004d68:	69db      	ldr	r3, [r3, #28]
 8004d6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	496a      	ldr	r1, [pc, #424]	; (8004f1c <HAL_RCC_ClockConfig+0x244>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0310 	and.w	r3, r3, #16
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d010      	beq.n	8004da6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	699a      	ldr	r2, [r3, #24]
 8004d88:	4b64      	ldr	r3, [pc, #400]	; (8004f1c <HAL_RCC_ClockConfig+0x244>)
 8004d8a:	69db      	ldr	r3, [r3, #28]
 8004d8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d908      	bls.n	8004da6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004d94:	4b61      	ldr	r3, [pc, #388]	; (8004f1c <HAL_RCC_ClockConfig+0x244>)
 8004d96:	69db      	ldr	r3, [r3, #28]
 8004d98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	495e      	ldr	r1, [pc, #376]	; (8004f1c <HAL_RCC_ClockConfig+0x244>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0320 	and.w	r3, r3, #32
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d010      	beq.n	8004dd4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	69da      	ldr	r2, [r3, #28]
 8004db6:	4b59      	ldr	r3, [pc, #356]	; (8004f1c <HAL_RCC_ClockConfig+0x244>)
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d908      	bls.n	8004dd4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004dc2:	4b56      	ldr	r3, [pc, #344]	; (8004f1c <HAL_RCC_ClockConfig+0x244>)
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	69db      	ldr	r3, [r3, #28]
 8004dce:	4953      	ldr	r1, [pc, #332]	; (8004f1c <HAL_RCC_ClockConfig+0x244>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0302 	and.w	r3, r3, #2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d010      	beq.n	8004e02 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	68da      	ldr	r2, [r3, #12]
 8004de4:	4b4d      	ldr	r3, [pc, #308]	; (8004f1c <HAL_RCC_ClockConfig+0x244>)
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	f003 030f 	and.w	r3, r3, #15
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d908      	bls.n	8004e02 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004df0:	4b4a      	ldr	r3, [pc, #296]	; (8004f1c <HAL_RCC_ClockConfig+0x244>)
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	f023 020f 	bic.w	r2, r3, #15
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	4947      	ldr	r1, [pc, #284]	; (8004f1c <HAL_RCC_ClockConfig+0x244>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d055      	beq.n	8004eba <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004e0e:	4b43      	ldr	r3, [pc, #268]	; (8004f1c <HAL_RCC_ClockConfig+0x244>)
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	4940      	ldr	r1, [pc, #256]	; (8004f1c <HAL_RCC_ClockConfig+0x244>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d107      	bne.n	8004e38 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e28:	4b3c      	ldr	r3, [pc, #240]	; (8004f1c <HAL_RCC_ClockConfig+0x244>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d121      	bne.n	8004e78 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e0f6      	b.n	8005026 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	2b03      	cmp	r3, #3
 8004e3e:	d107      	bne.n	8004e50 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e40:	4b36      	ldr	r3, [pc, #216]	; (8004f1c <HAL_RCC_ClockConfig+0x244>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d115      	bne.n	8004e78 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e0ea      	b.n	8005026 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d107      	bne.n	8004e68 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e58:	4b30      	ldr	r3, [pc, #192]	; (8004f1c <HAL_RCC_ClockConfig+0x244>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d109      	bne.n	8004e78 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e0de      	b.n	8005026 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e68:	4b2c      	ldr	r3, [pc, #176]	; (8004f1c <HAL_RCC_ClockConfig+0x244>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0304 	and.w	r3, r3, #4
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d101      	bne.n	8004e78 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e0d6      	b.n	8005026 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e78:	4b28      	ldr	r3, [pc, #160]	; (8004f1c <HAL_RCC_ClockConfig+0x244>)
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	f023 0207 	bic.w	r2, r3, #7
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	4925      	ldr	r1, [pc, #148]	; (8004f1c <HAL_RCC_ClockConfig+0x244>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e8a:	f7fc fea9 	bl	8001be0 <HAL_GetTick>
 8004e8e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e90:	e00a      	b.n	8004ea8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e92:	f7fc fea5 	bl	8001be0 <HAL_GetTick>
 8004e96:	4602      	mov	r2, r0
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d901      	bls.n	8004ea8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e0be      	b.n	8005026 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ea8:	4b1c      	ldr	r3, [pc, #112]	; (8004f1c <HAL_RCC_ClockConfig+0x244>)
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	00db      	lsls	r3, r3, #3
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d1eb      	bne.n	8004e92 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d010      	beq.n	8004ee8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68da      	ldr	r2, [r3, #12]
 8004eca:	4b14      	ldr	r3, [pc, #80]	; (8004f1c <HAL_RCC_ClockConfig+0x244>)
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	f003 030f 	and.w	r3, r3, #15
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d208      	bcs.n	8004ee8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ed6:	4b11      	ldr	r3, [pc, #68]	; (8004f1c <HAL_RCC_ClockConfig+0x244>)
 8004ed8:	699b      	ldr	r3, [r3, #24]
 8004eda:	f023 020f 	bic.w	r2, r3, #15
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	490e      	ldr	r1, [pc, #56]	; (8004f1c <HAL_RCC_ClockConfig+0x244>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ee8:	4b0b      	ldr	r3, [pc, #44]	; (8004f18 <HAL_RCC_ClockConfig+0x240>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 030f 	and.w	r3, r3, #15
 8004ef0:	683a      	ldr	r2, [r7, #0]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d214      	bcs.n	8004f20 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ef6:	4b08      	ldr	r3, [pc, #32]	; (8004f18 <HAL_RCC_ClockConfig+0x240>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f023 020f 	bic.w	r2, r3, #15
 8004efe:	4906      	ldr	r1, [pc, #24]	; (8004f18 <HAL_RCC_ClockConfig+0x240>)
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f06:	4b04      	ldr	r3, [pc, #16]	; (8004f18 <HAL_RCC_ClockConfig+0x240>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 030f 	and.w	r3, r3, #15
 8004f0e:	683a      	ldr	r2, [r7, #0]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d005      	beq.n	8004f20 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e086      	b.n	8005026 <HAL_RCC_ClockConfig+0x34e>
 8004f18:	52002000 	.word	0x52002000
 8004f1c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0304 	and.w	r3, r3, #4
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d010      	beq.n	8004f4e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	691a      	ldr	r2, [r3, #16]
 8004f30:	4b3f      	ldr	r3, [pc, #252]	; (8005030 <HAL_RCC_ClockConfig+0x358>)
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d208      	bcs.n	8004f4e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004f3c:	4b3c      	ldr	r3, [pc, #240]	; (8005030 <HAL_RCC_ClockConfig+0x358>)
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	4939      	ldr	r1, [pc, #228]	; (8005030 <HAL_RCC_ClockConfig+0x358>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0308 	and.w	r3, r3, #8
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d010      	beq.n	8004f7c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	695a      	ldr	r2, [r3, #20]
 8004f5e:	4b34      	ldr	r3, [pc, #208]	; (8005030 <HAL_RCC_ClockConfig+0x358>)
 8004f60:	69db      	ldr	r3, [r3, #28]
 8004f62:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d208      	bcs.n	8004f7c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004f6a:	4b31      	ldr	r3, [pc, #196]	; (8005030 <HAL_RCC_ClockConfig+0x358>)
 8004f6c:	69db      	ldr	r3, [r3, #28]
 8004f6e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	492e      	ldr	r1, [pc, #184]	; (8005030 <HAL_RCC_ClockConfig+0x358>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0310 	and.w	r3, r3, #16
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d010      	beq.n	8004faa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	699a      	ldr	r2, [r3, #24]
 8004f8c:	4b28      	ldr	r3, [pc, #160]	; (8005030 <HAL_RCC_ClockConfig+0x358>)
 8004f8e:	69db      	ldr	r3, [r3, #28]
 8004f90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d208      	bcs.n	8004faa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004f98:	4b25      	ldr	r3, [pc, #148]	; (8005030 <HAL_RCC_ClockConfig+0x358>)
 8004f9a:	69db      	ldr	r3, [r3, #28]
 8004f9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	4922      	ldr	r1, [pc, #136]	; (8005030 <HAL_RCC_ClockConfig+0x358>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0320 	and.w	r3, r3, #32
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d010      	beq.n	8004fd8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	69da      	ldr	r2, [r3, #28]
 8004fba:	4b1d      	ldr	r3, [pc, #116]	; (8005030 <HAL_RCC_ClockConfig+0x358>)
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d208      	bcs.n	8004fd8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004fc6:	4b1a      	ldr	r3, [pc, #104]	; (8005030 <HAL_RCC_ClockConfig+0x358>)
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	69db      	ldr	r3, [r3, #28]
 8004fd2:	4917      	ldr	r1, [pc, #92]	; (8005030 <HAL_RCC_ClockConfig+0x358>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004fd8:	f000 f834 	bl	8005044 <HAL_RCC_GetSysClockFreq>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	4b14      	ldr	r3, [pc, #80]	; (8005030 <HAL_RCC_ClockConfig+0x358>)
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	0a1b      	lsrs	r3, r3, #8
 8004fe4:	f003 030f 	and.w	r3, r3, #15
 8004fe8:	4912      	ldr	r1, [pc, #72]	; (8005034 <HAL_RCC_ClockConfig+0x35c>)
 8004fea:	5ccb      	ldrb	r3, [r1, r3]
 8004fec:	f003 031f 	and.w	r3, r3, #31
 8004ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ff4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004ff6:	4b0e      	ldr	r3, [pc, #56]	; (8005030 <HAL_RCC_ClockConfig+0x358>)
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	f003 030f 	and.w	r3, r3, #15
 8004ffe:	4a0d      	ldr	r2, [pc, #52]	; (8005034 <HAL_RCC_ClockConfig+0x35c>)
 8005000:	5cd3      	ldrb	r3, [r2, r3]
 8005002:	f003 031f 	and.w	r3, r3, #31
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	fa22 f303 	lsr.w	r3, r2, r3
 800500c:	4a0a      	ldr	r2, [pc, #40]	; (8005038 <HAL_RCC_ClockConfig+0x360>)
 800500e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005010:	4a0a      	ldr	r2, [pc, #40]	; (800503c <HAL_RCC_ClockConfig+0x364>)
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005016:	4b0a      	ldr	r3, [pc, #40]	; (8005040 <HAL_RCC_ClockConfig+0x368>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4618      	mov	r0, r3
 800501c:	f7fc fd96 	bl	8001b4c <HAL_InitTick>
 8005020:	4603      	mov	r3, r0
 8005022:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005024:	7bfb      	ldrb	r3, [r7, #15]
}
 8005026:	4618      	mov	r0, r3
 8005028:	3718      	adds	r7, #24
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	58024400 	.word	0x58024400
 8005034:	0800dd0c 	.word	0x0800dd0c
 8005038:	24000004 	.word	0x24000004
 800503c:	24000000 	.word	0x24000000
 8005040:	24000008 	.word	0x24000008

08005044 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005044:	b480      	push	{r7}
 8005046:	b089      	sub	sp, #36	; 0x24
 8005048:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800504a:	4bb3      	ldr	r3, [pc, #716]	; (8005318 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005052:	2b18      	cmp	r3, #24
 8005054:	f200 8155 	bhi.w	8005302 <HAL_RCC_GetSysClockFreq+0x2be>
 8005058:	a201      	add	r2, pc, #4	; (adr r2, 8005060 <HAL_RCC_GetSysClockFreq+0x1c>)
 800505a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800505e:	bf00      	nop
 8005060:	080050c5 	.word	0x080050c5
 8005064:	08005303 	.word	0x08005303
 8005068:	08005303 	.word	0x08005303
 800506c:	08005303 	.word	0x08005303
 8005070:	08005303 	.word	0x08005303
 8005074:	08005303 	.word	0x08005303
 8005078:	08005303 	.word	0x08005303
 800507c:	08005303 	.word	0x08005303
 8005080:	080050eb 	.word	0x080050eb
 8005084:	08005303 	.word	0x08005303
 8005088:	08005303 	.word	0x08005303
 800508c:	08005303 	.word	0x08005303
 8005090:	08005303 	.word	0x08005303
 8005094:	08005303 	.word	0x08005303
 8005098:	08005303 	.word	0x08005303
 800509c:	08005303 	.word	0x08005303
 80050a0:	080050f1 	.word	0x080050f1
 80050a4:	08005303 	.word	0x08005303
 80050a8:	08005303 	.word	0x08005303
 80050ac:	08005303 	.word	0x08005303
 80050b0:	08005303 	.word	0x08005303
 80050b4:	08005303 	.word	0x08005303
 80050b8:	08005303 	.word	0x08005303
 80050bc:	08005303 	.word	0x08005303
 80050c0:	080050f7 	.word	0x080050f7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050c4:	4b94      	ldr	r3, [pc, #592]	; (8005318 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0320 	and.w	r3, r3, #32
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d009      	beq.n	80050e4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80050d0:	4b91      	ldr	r3, [pc, #580]	; (8005318 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	08db      	lsrs	r3, r3, #3
 80050d6:	f003 0303 	and.w	r3, r3, #3
 80050da:	4a90      	ldr	r2, [pc, #576]	; (800531c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80050dc:	fa22 f303 	lsr.w	r3, r2, r3
 80050e0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80050e2:	e111      	b.n	8005308 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80050e4:	4b8d      	ldr	r3, [pc, #564]	; (800531c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80050e6:	61bb      	str	r3, [r7, #24]
      break;
 80050e8:	e10e      	b.n	8005308 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80050ea:	4b8d      	ldr	r3, [pc, #564]	; (8005320 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80050ec:	61bb      	str	r3, [r7, #24]
      break;
 80050ee:	e10b      	b.n	8005308 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80050f0:	4b8c      	ldr	r3, [pc, #560]	; (8005324 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80050f2:	61bb      	str	r3, [r7, #24]
      break;
 80050f4:	e108      	b.n	8005308 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80050f6:	4b88      	ldr	r3, [pc, #544]	; (8005318 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050fa:	f003 0303 	and.w	r3, r3, #3
 80050fe:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005100:	4b85      	ldr	r3, [pc, #532]	; (8005318 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005104:	091b      	lsrs	r3, r3, #4
 8005106:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800510a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800510c:	4b82      	ldr	r3, [pc, #520]	; (8005318 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800510e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005110:	f003 0301 	and.w	r3, r3, #1
 8005114:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005116:	4b80      	ldr	r3, [pc, #512]	; (8005318 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800511a:	08db      	lsrs	r3, r3, #3
 800511c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	fb02 f303 	mul.w	r3, r2, r3
 8005126:	ee07 3a90 	vmov	s15, r3
 800512a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800512e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	2b00      	cmp	r3, #0
 8005136:	f000 80e1 	beq.w	80052fc <HAL_RCC_GetSysClockFreq+0x2b8>
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	2b02      	cmp	r3, #2
 800513e:	f000 8083 	beq.w	8005248 <HAL_RCC_GetSysClockFreq+0x204>
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	2b02      	cmp	r3, #2
 8005146:	f200 80a1 	bhi.w	800528c <HAL_RCC_GetSysClockFreq+0x248>
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d003      	beq.n	8005158 <HAL_RCC_GetSysClockFreq+0x114>
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	2b01      	cmp	r3, #1
 8005154:	d056      	beq.n	8005204 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005156:	e099      	b.n	800528c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005158:	4b6f      	ldr	r3, [pc, #444]	; (8005318 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0320 	and.w	r3, r3, #32
 8005160:	2b00      	cmp	r3, #0
 8005162:	d02d      	beq.n	80051c0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005164:	4b6c      	ldr	r3, [pc, #432]	; (8005318 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	08db      	lsrs	r3, r3, #3
 800516a:	f003 0303 	and.w	r3, r3, #3
 800516e:	4a6b      	ldr	r2, [pc, #428]	; (800531c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005170:	fa22 f303 	lsr.w	r3, r2, r3
 8005174:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	ee07 3a90 	vmov	s15, r3
 800517c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	ee07 3a90 	vmov	s15, r3
 8005186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800518a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800518e:	4b62      	ldr	r3, [pc, #392]	; (8005318 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005196:	ee07 3a90 	vmov	s15, r3
 800519a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800519e:	ed97 6a02 	vldr	s12, [r7, #8]
 80051a2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005328 <HAL_RCC_GetSysClockFreq+0x2e4>
 80051a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ba:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80051be:	e087      	b.n	80052d0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	ee07 3a90 	vmov	s15, r3
 80051c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ca:	eddf 6a58 	vldr	s13, [pc, #352]	; 800532c <HAL_RCC_GetSysClockFreq+0x2e8>
 80051ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051d2:	4b51      	ldr	r3, [pc, #324]	; (8005318 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051da:	ee07 3a90 	vmov	s15, r3
 80051de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80051e6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005328 <HAL_RCC_GetSysClockFreq+0x2e4>
 80051ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005202:	e065      	b.n	80052d0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	ee07 3a90 	vmov	s15, r3
 800520a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800520e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005330 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005216:	4b40      	ldr	r3, [pc, #256]	; (8005318 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800521e:	ee07 3a90 	vmov	s15, r3
 8005222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005226:	ed97 6a02 	vldr	s12, [r7, #8]
 800522a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005328 <HAL_RCC_GetSysClockFreq+0x2e4>
 800522e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005236:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800523a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800523e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005242:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005246:	e043      	b.n	80052d0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	ee07 3a90 	vmov	s15, r3
 800524e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005252:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005334 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800525a:	4b2f      	ldr	r3, [pc, #188]	; (8005318 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800525c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005262:	ee07 3a90 	vmov	s15, r3
 8005266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800526a:	ed97 6a02 	vldr	s12, [r7, #8]
 800526e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005328 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005272:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005276:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800527a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800527e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005286:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800528a:	e021      	b.n	80052d0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	ee07 3a90 	vmov	s15, r3
 8005292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005296:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005330 <HAL_RCC_GetSysClockFreq+0x2ec>
 800529a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800529e:	4b1e      	ldr	r3, [pc, #120]	; (8005318 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052a6:	ee07 3a90 	vmov	s15, r3
 80052aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80052b2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005328 <HAL_RCC_GetSysClockFreq+0x2e4>
 80052b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80052ce:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80052d0:	4b11      	ldr	r3, [pc, #68]	; (8005318 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d4:	0a5b      	lsrs	r3, r3, #9
 80052d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052da:	3301      	adds	r3, #1
 80052dc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	ee07 3a90 	vmov	s15, r3
 80052e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80052e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80052ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052f4:	ee17 3a90 	vmov	r3, s15
 80052f8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80052fa:	e005      	b.n	8005308 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80052fc:	2300      	movs	r3, #0
 80052fe:	61bb      	str	r3, [r7, #24]
      break;
 8005300:	e002      	b.n	8005308 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005302:	4b07      	ldr	r3, [pc, #28]	; (8005320 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005304:	61bb      	str	r3, [r7, #24]
      break;
 8005306:	bf00      	nop
  }

  return sysclockfreq;
 8005308:	69bb      	ldr	r3, [r7, #24]
}
 800530a:	4618      	mov	r0, r3
 800530c:	3724      	adds	r7, #36	; 0x24
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	58024400 	.word	0x58024400
 800531c:	03d09000 	.word	0x03d09000
 8005320:	003d0900 	.word	0x003d0900
 8005324:	007a1200 	.word	0x007a1200
 8005328:	46000000 	.word	0x46000000
 800532c:	4c742400 	.word	0x4c742400
 8005330:	4a742400 	.word	0x4a742400
 8005334:	4af42400 	.word	0x4af42400

08005338 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800533e:	f7ff fe81 	bl	8005044 <HAL_RCC_GetSysClockFreq>
 8005342:	4602      	mov	r2, r0
 8005344:	4b10      	ldr	r3, [pc, #64]	; (8005388 <HAL_RCC_GetHCLKFreq+0x50>)
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	0a1b      	lsrs	r3, r3, #8
 800534a:	f003 030f 	and.w	r3, r3, #15
 800534e:	490f      	ldr	r1, [pc, #60]	; (800538c <HAL_RCC_GetHCLKFreq+0x54>)
 8005350:	5ccb      	ldrb	r3, [r1, r3]
 8005352:	f003 031f 	and.w	r3, r3, #31
 8005356:	fa22 f303 	lsr.w	r3, r2, r3
 800535a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800535c:	4b0a      	ldr	r3, [pc, #40]	; (8005388 <HAL_RCC_GetHCLKFreq+0x50>)
 800535e:	699b      	ldr	r3, [r3, #24]
 8005360:	f003 030f 	and.w	r3, r3, #15
 8005364:	4a09      	ldr	r2, [pc, #36]	; (800538c <HAL_RCC_GetHCLKFreq+0x54>)
 8005366:	5cd3      	ldrb	r3, [r2, r3]
 8005368:	f003 031f 	and.w	r3, r3, #31
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	fa22 f303 	lsr.w	r3, r2, r3
 8005372:	4a07      	ldr	r2, [pc, #28]	; (8005390 <HAL_RCC_GetHCLKFreq+0x58>)
 8005374:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005376:	4a07      	ldr	r2, [pc, #28]	; (8005394 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800537c:	4b04      	ldr	r3, [pc, #16]	; (8005390 <HAL_RCC_GetHCLKFreq+0x58>)
 800537e:	681b      	ldr	r3, [r3, #0]
}
 8005380:	4618      	mov	r0, r3
 8005382:	3708      	adds	r7, #8
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	58024400 	.word	0x58024400
 800538c:	0800dd0c 	.word	0x0800dd0c
 8005390:	24000004 	.word	0x24000004
 8005394:	24000000 	.word	0x24000000

08005398 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800539c:	f7ff ffcc 	bl	8005338 <HAL_RCC_GetHCLKFreq>
 80053a0:	4602      	mov	r2, r0
 80053a2:	4b06      	ldr	r3, [pc, #24]	; (80053bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80053a4:	69db      	ldr	r3, [r3, #28]
 80053a6:	091b      	lsrs	r3, r3, #4
 80053a8:	f003 0307 	and.w	r3, r3, #7
 80053ac:	4904      	ldr	r1, [pc, #16]	; (80053c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80053ae:	5ccb      	ldrb	r3, [r1, r3]
 80053b0:	f003 031f 	and.w	r3, r3, #31
 80053b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	58024400 	.word	0x58024400
 80053c0:	0800dd0c 	.word	0x0800dd0c

080053c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80053c8:	f7ff ffb6 	bl	8005338 <HAL_RCC_GetHCLKFreq>
 80053cc:	4602      	mov	r2, r0
 80053ce:	4b06      	ldr	r3, [pc, #24]	; (80053e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053d0:	69db      	ldr	r3, [r3, #28]
 80053d2:	0a1b      	lsrs	r3, r3, #8
 80053d4:	f003 0307 	and.w	r3, r3, #7
 80053d8:	4904      	ldr	r1, [pc, #16]	; (80053ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80053da:	5ccb      	ldrb	r3, [r1, r3]
 80053dc:	f003 031f 	and.w	r3, r3, #31
 80053e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	58024400 	.word	0x58024400
 80053ec:	0800dd0c 	.word	0x0800dd0c

080053f0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053f4:	b0ca      	sub	sp, #296	; 0x128
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80053fc:	2300      	movs	r3, #0
 80053fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005402:	2300      	movs	r3, #0
 8005404:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005408:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800540c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005410:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005414:	2500      	movs	r5, #0
 8005416:	ea54 0305 	orrs.w	r3, r4, r5
 800541a:	d049      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800541c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005420:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005422:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005426:	d02f      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005428:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800542c:	d828      	bhi.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800542e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005432:	d01a      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005434:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005438:	d822      	bhi.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800543a:	2b00      	cmp	r3, #0
 800543c:	d003      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800543e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005442:	d007      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005444:	e01c      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005446:	4bb8      	ldr	r3, [pc, #736]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800544a:	4ab7      	ldr	r2, [pc, #732]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800544c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005450:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005452:	e01a      	b.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005454:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005458:	3308      	adds	r3, #8
 800545a:	2102      	movs	r1, #2
 800545c:	4618      	mov	r0, r3
 800545e:	f002 fb61 	bl	8007b24 <RCCEx_PLL2_Config>
 8005462:	4603      	mov	r3, r0
 8005464:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005468:	e00f      	b.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800546a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800546e:	3328      	adds	r3, #40	; 0x28
 8005470:	2102      	movs	r1, #2
 8005472:	4618      	mov	r0, r3
 8005474:	f002 fc08 	bl	8007c88 <RCCEx_PLL3_Config>
 8005478:	4603      	mov	r3, r0
 800547a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800547e:	e004      	b.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005486:	e000      	b.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005488:	bf00      	nop
    }

    if (ret == HAL_OK)
 800548a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800548e:	2b00      	cmp	r3, #0
 8005490:	d10a      	bne.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005492:	4ba5      	ldr	r3, [pc, #660]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005496:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800549a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800549e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054a0:	4aa1      	ldr	r2, [pc, #644]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054a2:	430b      	orrs	r3, r1
 80054a4:	6513      	str	r3, [r2, #80]	; 0x50
 80054a6:	e003      	b.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80054b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80054bc:	f04f 0900 	mov.w	r9, #0
 80054c0:	ea58 0309 	orrs.w	r3, r8, r9
 80054c4:	d047      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80054c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054cc:	2b04      	cmp	r3, #4
 80054ce:	d82a      	bhi.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80054d0:	a201      	add	r2, pc, #4	; (adr r2, 80054d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80054d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d6:	bf00      	nop
 80054d8:	080054ed 	.word	0x080054ed
 80054dc:	080054fb 	.word	0x080054fb
 80054e0:	08005511 	.word	0x08005511
 80054e4:	0800552f 	.word	0x0800552f
 80054e8:	0800552f 	.word	0x0800552f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054ec:	4b8e      	ldr	r3, [pc, #568]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f0:	4a8d      	ldr	r2, [pc, #564]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80054f8:	e01a      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054fe:	3308      	adds	r3, #8
 8005500:	2100      	movs	r1, #0
 8005502:	4618      	mov	r0, r3
 8005504:	f002 fb0e 	bl	8007b24 <RCCEx_PLL2_Config>
 8005508:	4603      	mov	r3, r0
 800550a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800550e:	e00f      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005510:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005514:	3328      	adds	r3, #40	; 0x28
 8005516:	2100      	movs	r1, #0
 8005518:	4618      	mov	r0, r3
 800551a:	f002 fbb5 	bl	8007c88 <RCCEx_PLL3_Config>
 800551e:	4603      	mov	r3, r0
 8005520:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005524:	e004      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800552c:	e000      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800552e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005530:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005534:	2b00      	cmp	r3, #0
 8005536:	d10a      	bne.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005538:	4b7b      	ldr	r3, [pc, #492]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800553a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800553c:	f023 0107 	bic.w	r1, r3, #7
 8005540:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005546:	4a78      	ldr	r2, [pc, #480]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005548:	430b      	orrs	r3, r1
 800554a:	6513      	str	r3, [r2, #80]	; 0x50
 800554c:	e003      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800554e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005552:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005556:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800555a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800555e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8005562:	f04f 0b00 	mov.w	fp, #0
 8005566:	ea5a 030b 	orrs.w	r3, sl, fp
 800556a:	d04c      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800556c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005572:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005576:	d030      	beq.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005578:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800557c:	d829      	bhi.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800557e:	2bc0      	cmp	r3, #192	; 0xc0
 8005580:	d02d      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005582:	2bc0      	cmp	r3, #192	; 0xc0
 8005584:	d825      	bhi.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005586:	2b80      	cmp	r3, #128	; 0x80
 8005588:	d018      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800558a:	2b80      	cmp	r3, #128	; 0x80
 800558c:	d821      	bhi.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800558e:	2b00      	cmp	r3, #0
 8005590:	d002      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005592:	2b40      	cmp	r3, #64	; 0x40
 8005594:	d007      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005596:	e01c      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005598:	4b63      	ldr	r3, [pc, #396]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800559a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559c:	4a62      	ldr	r2, [pc, #392]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800559e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80055a4:	e01c      	b.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055aa:	3308      	adds	r3, #8
 80055ac:	2100      	movs	r1, #0
 80055ae:	4618      	mov	r0, r3
 80055b0:	f002 fab8 	bl	8007b24 <RCCEx_PLL2_Config>
 80055b4:	4603      	mov	r3, r0
 80055b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80055ba:	e011      	b.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80055bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055c0:	3328      	adds	r3, #40	; 0x28
 80055c2:	2100      	movs	r1, #0
 80055c4:	4618      	mov	r0, r3
 80055c6:	f002 fb5f 	bl	8007c88 <RCCEx_PLL3_Config>
 80055ca:	4603      	mov	r3, r0
 80055cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80055d0:	e006      	b.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80055d8:	e002      	b.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80055da:	bf00      	nop
 80055dc:	e000      	b.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80055de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d10a      	bne.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80055e8:	4b4f      	ldr	r3, [pc, #316]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055ec:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80055f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055f6:	4a4c      	ldr	r2, [pc, #304]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055f8:	430b      	orrs	r3, r1
 80055fa:	6513      	str	r3, [r2, #80]	; 0x50
 80055fc:	e003      	b.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005602:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005606:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800560a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8005612:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005616:	2300      	movs	r3, #0
 8005618:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800561c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8005620:	460b      	mov	r3, r1
 8005622:	4313      	orrs	r3, r2
 8005624:	d053      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005626:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800562a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800562e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005632:	d035      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005634:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005638:	d82e      	bhi.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800563a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800563e:	d031      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005640:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005644:	d828      	bhi.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005646:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800564a:	d01a      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800564c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005650:	d822      	bhi.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005652:	2b00      	cmp	r3, #0
 8005654:	d003      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005656:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800565a:	d007      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800565c:	e01c      	b.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800565e:	4b32      	ldr	r3, [pc, #200]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005662:	4a31      	ldr	r2, [pc, #196]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005664:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005668:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800566a:	e01c      	b.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800566c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005670:	3308      	adds	r3, #8
 8005672:	2100      	movs	r1, #0
 8005674:	4618      	mov	r0, r3
 8005676:	f002 fa55 	bl	8007b24 <RCCEx_PLL2_Config>
 800567a:	4603      	mov	r3, r0
 800567c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005680:	e011      	b.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005682:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005686:	3328      	adds	r3, #40	; 0x28
 8005688:	2100      	movs	r1, #0
 800568a:	4618      	mov	r0, r3
 800568c:	f002 fafc 	bl	8007c88 <RCCEx_PLL3_Config>
 8005690:	4603      	mov	r3, r0
 8005692:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005696:	e006      	b.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800569e:	e002      	b.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80056a0:	bf00      	nop
 80056a2:	e000      	b.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80056a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d10b      	bne.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80056ae:	4b1e      	ldr	r3, [pc, #120]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056b2:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80056b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80056be:	4a1a      	ldr	r2, [pc, #104]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056c0:	430b      	orrs	r3, r1
 80056c2:	6593      	str	r3, [r2, #88]	; 0x58
 80056c4:	e003      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80056ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80056da:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80056de:	2300      	movs	r3, #0
 80056e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80056e4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80056e8:	460b      	mov	r3, r1
 80056ea:	4313      	orrs	r3, r2
 80056ec:	d056      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80056ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80056f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80056fa:	d038      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80056fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005700:	d831      	bhi.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005702:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005706:	d034      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005708:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800570c:	d82b      	bhi.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800570e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005712:	d01d      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005714:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005718:	d825      	bhi.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800571a:	2b00      	cmp	r3, #0
 800571c:	d006      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800571e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005722:	d00a      	beq.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005724:	e01f      	b.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005726:	bf00      	nop
 8005728:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800572c:	4ba2      	ldr	r3, [pc, #648]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800572e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005730:	4aa1      	ldr	r2, [pc, #644]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005732:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005736:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005738:	e01c      	b.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800573a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800573e:	3308      	adds	r3, #8
 8005740:	2100      	movs	r1, #0
 8005742:	4618      	mov	r0, r3
 8005744:	f002 f9ee 	bl	8007b24 <RCCEx_PLL2_Config>
 8005748:	4603      	mov	r3, r0
 800574a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800574e:	e011      	b.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005750:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005754:	3328      	adds	r3, #40	; 0x28
 8005756:	2100      	movs	r1, #0
 8005758:	4618      	mov	r0, r3
 800575a:	f002 fa95 	bl	8007c88 <RCCEx_PLL3_Config>
 800575e:	4603      	mov	r3, r0
 8005760:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005764:	e006      	b.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800576c:	e002      	b.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800576e:	bf00      	nop
 8005770:	e000      	b.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005772:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005774:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005778:	2b00      	cmp	r3, #0
 800577a:	d10b      	bne.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800577c:	4b8e      	ldr	r3, [pc, #568]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800577e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005780:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005784:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005788:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800578c:	4a8a      	ldr	r2, [pc, #552]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800578e:	430b      	orrs	r3, r1
 8005790:	6593      	str	r3, [r2, #88]	; 0x58
 8005792:	e003      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005794:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005798:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800579c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80057a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80057ac:	2300      	movs	r3, #0
 80057ae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80057b2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80057b6:	460b      	mov	r3, r1
 80057b8:	4313      	orrs	r3, r2
 80057ba:	d03a      	beq.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80057bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057c2:	2b30      	cmp	r3, #48	; 0x30
 80057c4:	d01f      	beq.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80057c6:	2b30      	cmp	r3, #48	; 0x30
 80057c8:	d819      	bhi.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80057ca:	2b20      	cmp	r3, #32
 80057cc:	d00c      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80057ce:	2b20      	cmp	r3, #32
 80057d0:	d815      	bhi.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d019      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80057d6:	2b10      	cmp	r3, #16
 80057d8:	d111      	bne.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057da:	4b77      	ldr	r3, [pc, #476]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057de:	4a76      	ldr	r2, [pc, #472]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80057e6:	e011      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80057e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057ec:	3308      	adds	r3, #8
 80057ee:	2102      	movs	r1, #2
 80057f0:	4618      	mov	r0, r3
 80057f2:	f002 f997 	bl	8007b24 <RCCEx_PLL2_Config>
 80057f6:	4603      	mov	r3, r0
 80057f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80057fc:	e006      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005804:	e002      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005806:	bf00      	nop
 8005808:	e000      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800580a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800580c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005810:	2b00      	cmp	r3, #0
 8005812:	d10a      	bne.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005814:	4b68      	ldr	r3, [pc, #416]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005818:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800581c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005822:	4a65      	ldr	r2, [pc, #404]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005824:	430b      	orrs	r3, r1
 8005826:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005828:	e003      	b.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800582a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800582e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005832:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800583a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800583e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005842:	2300      	movs	r3, #0
 8005844:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005848:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800584c:	460b      	mov	r3, r1
 800584e:	4313      	orrs	r3, r2
 8005850:	d051      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005852:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005856:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005858:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800585c:	d035      	beq.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800585e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005862:	d82e      	bhi.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005864:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005868:	d031      	beq.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800586a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800586e:	d828      	bhi.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005870:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005874:	d01a      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005876:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800587a:	d822      	bhi.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800587c:	2b00      	cmp	r3, #0
 800587e:	d003      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005880:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005884:	d007      	beq.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005886:	e01c      	b.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005888:	4b4b      	ldr	r3, [pc, #300]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800588a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588c:	4a4a      	ldr	r2, [pc, #296]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800588e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005892:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005894:	e01c      	b.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005896:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800589a:	3308      	adds	r3, #8
 800589c:	2100      	movs	r1, #0
 800589e:	4618      	mov	r0, r3
 80058a0:	f002 f940 	bl	8007b24 <RCCEx_PLL2_Config>
 80058a4:	4603      	mov	r3, r0
 80058a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80058aa:	e011      	b.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80058ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058b0:	3328      	adds	r3, #40	; 0x28
 80058b2:	2100      	movs	r1, #0
 80058b4:	4618      	mov	r0, r3
 80058b6:	f002 f9e7 	bl	8007c88 <RCCEx_PLL3_Config>
 80058ba:	4603      	mov	r3, r0
 80058bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80058c0:	e006      	b.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80058c8:	e002      	b.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80058ca:	bf00      	nop
 80058cc:	e000      	b.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80058ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d10a      	bne.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80058d8:	4b37      	ldr	r3, [pc, #220]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058dc:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80058e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058e6:	4a34      	ldr	r2, [pc, #208]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058e8:	430b      	orrs	r3, r1
 80058ea:	6513      	str	r3, [r2, #80]	; 0x50
 80058ec:	e003      	b.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80058f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058fe:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005902:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005906:	2300      	movs	r3, #0
 8005908:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800590c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005910:	460b      	mov	r3, r1
 8005912:	4313      	orrs	r3, r2
 8005914:	d056      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005916:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800591a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800591c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005920:	d033      	beq.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005922:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005926:	d82c      	bhi.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005928:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800592c:	d02f      	beq.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800592e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005932:	d826      	bhi.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005934:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005938:	d02b      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800593a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800593e:	d820      	bhi.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005940:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005944:	d012      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005946:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800594a:	d81a      	bhi.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800594c:	2b00      	cmp	r3, #0
 800594e:	d022      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005954:	d115      	bne.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005956:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800595a:	3308      	adds	r3, #8
 800595c:	2101      	movs	r1, #1
 800595e:	4618      	mov	r0, r3
 8005960:	f002 f8e0 	bl	8007b24 <RCCEx_PLL2_Config>
 8005964:	4603      	mov	r3, r0
 8005966:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800596a:	e015      	b.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800596c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005970:	3328      	adds	r3, #40	; 0x28
 8005972:	2101      	movs	r1, #1
 8005974:	4618      	mov	r0, r3
 8005976:	f002 f987 	bl	8007c88 <RCCEx_PLL3_Config>
 800597a:	4603      	mov	r3, r0
 800597c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005980:	e00a      	b.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005988:	e006      	b.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800598a:	bf00      	nop
 800598c:	e004      	b.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800598e:	bf00      	nop
 8005990:	e002      	b.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005992:	bf00      	nop
 8005994:	e000      	b.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005996:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005998:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800599c:	2b00      	cmp	r3, #0
 800599e:	d10d      	bne.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80059a0:	4b05      	ldr	r3, [pc, #20]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059a4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80059a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059ae:	4a02      	ldr	r2, [pc, #8]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059b0:	430b      	orrs	r3, r1
 80059b2:	6513      	str	r3, [r2, #80]	; 0x50
 80059b4:	e006      	b.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80059b6:	bf00      	nop
 80059b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80059c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059cc:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80059d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80059d4:	2300      	movs	r3, #0
 80059d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80059da:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80059de:	460b      	mov	r3, r1
 80059e0:	4313      	orrs	r3, r2
 80059e2:	d055      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80059e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80059ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80059f0:	d033      	beq.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80059f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80059f6:	d82c      	bhi.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80059f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059fc:	d02f      	beq.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80059fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a02:	d826      	bhi.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005a04:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005a08:	d02b      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005a0a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005a0e:	d820      	bhi.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005a10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a14:	d012      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005a16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a1a:	d81a      	bhi.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d022      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005a20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a24:	d115      	bne.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a2a:	3308      	adds	r3, #8
 8005a2c:	2101      	movs	r1, #1
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f002 f878 	bl	8007b24 <RCCEx_PLL2_Config>
 8005a34:	4603      	mov	r3, r0
 8005a36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005a3a:	e015      	b.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a40:	3328      	adds	r3, #40	; 0x28
 8005a42:	2101      	movs	r1, #1
 8005a44:	4618      	mov	r0, r3
 8005a46:	f002 f91f 	bl	8007c88 <RCCEx_PLL3_Config>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005a50:	e00a      	b.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005a58:	e006      	b.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005a5a:	bf00      	nop
 8005a5c:	e004      	b.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005a5e:	bf00      	nop
 8005a60:	e002      	b.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005a62:	bf00      	nop
 8005a64:	e000      	b.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005a66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d10b      	bne.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005a70:	4ba3      	ldr	r3, [pc, #652]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a74:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a7c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a80:	4a9f      	ldr	r2, [pc, #636]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a82:	430b      	orrs	r3, r1
 8005a84:	6593      	str	r3, [r2, #88]	; 0x58
 8005a86:	e003      	b.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a8c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a98:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005a9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005aa6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005aaa:	460b      	mov	r3, r1
 8005aac:	4313      	orrs	r3, r2
 8005aae:	d037      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005aba:	d00e      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005abc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ac0:	d816      	bhi.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d018      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005ac6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005aca:	d111      	bne.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005acc:	4b8c      	ldr	r3, [pc, #560]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad0:	4a8b      	ldr	r2, [pc, #556]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ad2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ad6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005ad8:	e00f      	b.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ade:	3308      	adds	r3, #8
 8005ae0:	2101      	movs	r1, #1
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f002 f81e 	bl	8007b24 <RCCEx_PLL2_Config>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005aee:	e004      	b.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005af6:	e000      	b.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005af8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005afa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d10a      	bne.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005b02:	4b7f      	ldr	r3, [pc, #508]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b06:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b10:	4a7b      	ldr	r2, [pc, #492]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b12:	430b      	orrs	r3, r1
 8005b14:	6513      	str	r3, [r2, #80]	; 0x50
 8005b16:	e003      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b1c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b28:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005b2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b30:	2300      	movs	r3, #0
 8005b32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005b36:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	d039      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b46:	2b03      	cmp	r3, #3
 8005b48:	d81c      	bhi.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005b4a:	a201      	add	r2, pc, #4	; (adr r2, 8005b50 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b50:	08005b8d 	.word	0x08005b8d
 8005b54:	08005b61 	.word	0x08005b61
 8005b58:	08005b6f 	.word	0x08005b6f
 8005b5c:	08005b8d 	.word	0x08005b8d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b60:	4b67      	ldr	r3, [pc, #412]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b64:	4a66      	ldr	r2, [pc, #408]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005b6c:	e00f      	b.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b72:	3308      	adds	r3, #8
 8005b74:	2102      	movs	r1, #2
 8005b76:	4618      	mov	r0, r3
 8005b78:	f001 ffd4 	bl	8007b24 <RCCEx_PLL2_Config>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005b82:	e004      	b.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b8a:	e000      	b.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005b8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d10a      	bne.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005b96:	4b5a      	ldr	r3, [pc, #360]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b9a:	f023 0103 	bic.w	r1, r3, #3
 8005b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ba4:	4a56      	ldr	r2, [pc, #344]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ba6:	430b      	orrs	r3, r1
 8005ba8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005baa:	e003      	b.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005bb0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bbc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005bc0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005bca:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005bce:	460b      	mov	r3, r1
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	f000 809f 	beq.w	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bd6:	4b4b      	ldr	r3, [pc, #300]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a4a      	ldr	r2, [pc, #296]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005be0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005be2:	f7fb fffd 	bl	8001be0 <HAL_GetTick>
 8005be6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005bea:	e00b      	b.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bec:	f7fb fff8 	bl	8001be0 <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	2b64      	cmp	r3, #100	; 0x64
 8005bfa:	d903      	bls.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005c02:	e005      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c04:	4b3f      	ldr	r3, [pc, #252]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d0ed      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005c10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d179      	bne.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005c18:	4b39      	ldr	r3, [pc, #228]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c1a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c20:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005c24:	4053      	eors	r3, r2
 8005c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d015      	beq.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c2e:	4b34      	ldr	r3, [pc, #208]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c36:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c3a:	4b31      	ldr	r3, [pc, #196]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c3e:	4a30      	ldr	r2, [pc, #192]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c44:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c46:	4b2e      	ldr	r3, [pc, #184]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c4a:	4a2d      	ldr	r2, [pc, #180]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c50:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005c52:	4a2b      	ldr	r2, [pc, #172]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c54:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c58:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c5e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005c62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c66:	d118      	bne.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c68:	f7fb ffba 	bl	8001be0 <HAL_GetTick>
 8005c6c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c70:	e00d      	b.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c72:	f7fb ffb5 	bl	8001be0 <HAL_GetTick>
 8005c76:	4602      	mov	r2, r0
 8005c78:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005c7c:	1ad2      	subs	r2, r2, r3
 8005c7e:	f241 3388 	movw	r3, #5000	; 0x1388
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d903      	bls.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8005c8c:	e005      	b.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c8e:	4b1c      	ldr	r3, [pc, #112]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c92:	f003 0302 	and.w	r3, r3, #2
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d0eb      	beq.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005c9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d129      	bne.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ca6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cb2:	d10e      	bne.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005cb4:	4b12      	ldr	r3, [pc, #72]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cc0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005cc4:	091a      	lsrs	r2, r3, #4
 8005cc6:	4b10      	ldr	r3, [pc, #64]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005cc8:	4013      	ands	r3, r2
 8005cca:	4a0d      	ldr	r2, [pc, #52]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ccc:	430b      	orrs	r3, r1
 8005cce:	6113      	str	r3, [r2, #16]
 8005cd0:	e005      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005cd2:	4b0b      	ldr	r3, [pc, #44]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	4a0a      	ldr	r2, [pc, #40]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cd8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005cdc:	6113      	str	r3, [r2, #16]
 8005cde:	4b08      	ldr	r3, [pc, #32]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ce0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ce6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005cea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cee:	4a04      	ldr	r2, [pc, #16]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cf0:	430b      	orrs	r3, r1
 8005cf2:	6713      	str	r3, [r2, #112]	; 0x70
 8005cf4:	e00e      	b.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005cf6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cfa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8005cfe:	e009      	b.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005d00:	58024400 	.word	0x58024400
 8005d04:	58024800 	.word	0x58024800
 8005d08:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d10:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d1c:	f002 0301 	and.w	r3, r2, #1
 8005d20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d24:	2300      	movs	r3, #0
 8005d26:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d2a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005d2e:	460b      	mov	r3, r1
 8005d30:	4313      	orrs	r3, r2
 8005d32:	f000 8089 	beq.w	8005e48 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d3c:	2b28      	cmp	r3, #40	; 0x28
 8005d3e:	d86b      	bhi.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005d40:	a201      	add	r2, pc, #4	; (adr r2, 8005d48 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d46:	bf00      	nop
 8005d48:	08005e21 	.word	0x08005e21
 8005d4c:	08005e19 	.word	0x08005e19
 8005d50:	08005e19 	.word	0x08005e19
 8005d54:	08005e19 	.word	0x08005e19
 8005d58:	08005e19 	.word	0x08005e19
 8005d5c:	08005e19 	.word	0x08005e19
 8005d60:	08005e19 	.word	0x08005e19
 8005d64:	08005e19 	.word	0x08005e19
 8005d68:	08005ded 	.word	0x08005ded
 8005d6c:	08005e19 	.word	0x08005e19
 8005d70:	08005e19 	.word	0x08005e19
 8005d74:	08005e19 	.word	0x08005e19
 8005d78:	08005e19 	.word	0x08005e19
 8005d7c:	08005e19 	.word	0x08005e19
 8005d80:	08005e19 	.word	0x08005e19
 8005d84:	08005e19 	.word	0x08005e19
 8005d88:	08005e03 	.word	0x08005e03
 8005d8c:	08005e19 	.word	0x08005e19
 8005d90:	08005e19 	.word	0x08005e19
 8005d94:	08005e19 	.word	0x08005e19
 8005d98:	08005e19 	.word	0x08005e19
 8005d9c:	08005e19 	.word	0x08005e19
 8005da0:	08005e19 	.word	0x08005e19
 8005da4:	08005e19 	.word	0x08005e19
 8005da8:	08005e21 	.word	0x08005e21
 8005dac:	08005e19 	.word	0x08005e19
 8005db0:	08005e19 	.word	0x08005e19
 8005db4:	08005e19 	.word	0x08005e19
 8005db8:	08005e19 	.word	0x08005e19
 8005dbc:	08005e19 	.word	0x08005e19
 8005dc0:	08005e19 	.word	0x08005e19
 8005dc4:	08005e19 	.word	0x08005e19
 8005dc8:	08005e21 	.word	0x08005e21
 8005dcc:	08005e19 	.word	0x08005e19
 8005dd0:	08005e19 	.word	0x08005e19
 8005dd4:	08005e19 	.word	0x08005e19
 8005dd8:	08005e19 	.word	0x08005e19
 8005ddc:	08005e19 	.word	0x08005e19
 8005de0:	08005e19 	.word	0x08005e19
 8005de4:	08005e19 	.word	0x08005e19
 8005de8:	08005e21 	.word	0x08005e21
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005df0:	3308      	adds	r3, #8
 8005df2:	2101      	movs	r1, #1
 8005df4:	4618      	mov	r0, r3
 8005df6:	f001 fe95 	bl	8007b24 <RCCEx_PLL2_Config>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005e00:	e00f      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e06:	3328      	adds	r3, #40	; 0x28
 8005e08:	2101      	movs	r1, #1
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f001 ff3c 	bl	8007c88 <RCCEx_PLL3_Config>
 8005e10:	4603      	mov	r3, r0
 8005e12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005e16:	e004      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005e1e:	e000      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005e20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d10a      	bne.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005e2a:	4bbf      	ldr	r3, [pc, #764]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e2e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e38:	4abb      	ldr	r2, [pc, #748]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e3a:	430b      	orrs	r3, r1
 8005e3c:	6553      	str	r3, [r2, #84]	; 0x54
 8005e3e:	e003      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e44:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e50:	f002 0302 	and.w	r3, r2, #2
 8005e54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e58:	2300      	movs	r3, #0
 8005e5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005e5e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005e62:	460b      	mov	r3, r1
 8005e64:	4313      	orrs	r3, r2
 8005e66:	d041      	beq.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e6e:	2b05      	cmp	r3, #5
 8005e70:	d824      	bhi.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005e72:	a201      	add	r2, pc, #4	; (adr r2, 8005e78 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e78:	08005ec5 	.word	0x08005ec5
 8005e7c:	08005e91 	.word	0x08005e91
 8005e80:	08005ea7 	.word	0x08005ea7
 8005e84:	08005ec5 	.word	0x08005ec5
 8005e88:	08005ec5 	.word	0x08005ec5
 8005e8c:	08005ec5 	.word	0x08005ec5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e94:	3308      	adds	r3, #8
 8005e96:	2101      	movs	r1, #1
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f001 fe43 	bl	8007b24 <RCCEx_PLL2_Config>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005ea4:	e00f      	b.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005eaa:	3328      	adds	r3, #40	; 0x28
 8005eac:	2101      	movs	r1, #1
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f001 feea 	bl	8007c88 <RCCEx_PLL3_Config>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005eba:	e004      	b.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005ec2:	e000      	b.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005ec4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ec6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d10a      	bne.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005ece:	4b96      	ldr	r3, [pc, #600]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ed2:	f023 0107 	bic.w	r1, r3, #7
 8005ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005eda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005edc:	4a92      	ldr	r2, [pc, #584]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ede:	430b      	orrs	r3, r1
 8005ee0:	6553      	str	r3, [r2, #84]	; 0x54
 8005ee2:	e003      	b.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ee4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ee8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef4:	f002 0304 	and.w	r3, r2, #4
 8005ef8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005efc:	2300      	movs	r3, #0
 8005efe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f02:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005f06:	460b      	mov	r3, r1
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	d044      	beq.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f14:	2b05      	cmp	r3, #5
 8005f16:	d825      	bhi.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005f18:	a201      	add	r2, pc, #4	; (adr r2, 8005f20 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f1e:	bf00      	nop
 8005f20:	08005f6d 	.word	0x08005f6d
 8005f24:	08005f39 	.word	0x08005f39
 8005f28:	08005f4f 	.word	0x08005f4f
 8005f2c:	08005f6d 	.word	0x08005f6d
 8005f30:	08005f6d 	.word	0x08005f6d
 8005f34:	08005f6d 	.word	0x08005f6d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f3c:	3308      	adds	r3, #8
 8005f3e:	2101      	movs	r1, #1
 8005f40:	4618      	mov	r0, r3
 8005f42:	f001 fdef 	bl	8007b24 <RCCEx_PLL2_Config>
 8005f46:	4603      	mov	r3, r0
 8005f48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005f4c:	e00f      	b.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f52:	3328      	adds	r3, #40	; 0x28
 8005f54:	2101      	movs	r1, #1
 8005f56:	4618      	mov	r0, r3
 8005f58:	f001 fe96 	bl	8007c88 <RCCEx_PLL3_Config>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005f62:	e004      	b.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005f6a:	e000      	b.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005f6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d10b      	bne.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005f76:	4b6c      	ldr	r3, [pc, #432]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f7a:	f023 0107 	bic.w	r1, r3, #7
 8005f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f86:	4a68      	ldr	r2, [pc, #416]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f88:	430b      	orrs	r3, r1
 8005f8a:	6593      	str	r3, [r2, #88]	; 0x58
 8005f8c:	e003      	b.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f92:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9e:	f002 0320 	and.w	r3, r2, #32
 8005fa2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005fac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	d055      	beq.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005fc2:	d033      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005fc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005fc8:	d82c      	bhi.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005fca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fce:	d02f      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fd4:	d826      	bhi.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005fd6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005fda:	d02b      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005fdc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005fe0:	d820      	bhi.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005fe2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fe6:	d012      	beq.n	800600e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005fe8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fec:	d81a      	bhi.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d022      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005ff2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ff6:	d115      	bne.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ffc:	3308      	adds	r3, #8
 8005ffe:	2100      	movs	r1, #0
 8006000:	4618      	mov	r0, r3
 8006002:	f001 fd8f 	bl	8007b24 <RCCEx_PLL2_Config>
 8006006:	4603      	mov	r3, r0
 8006008:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800600c:	e015      	b.n	800603a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800600e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006012:	3328      	adds	r3, #40	; 0x28
 8006014:	2102      	movs	r1, #2
 8006016:	4618      	mov	r0, r3
 8006018:	f001 fe36 	bl	8007c88 <RCCEx_PLL3_Config>
 800601c:	4603      	mov	r3, r0
 800601e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006022:	e00a      	b.n	800603a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800602a:	e006      	b.n	800603a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800602c:	bf00      	nop
 800602e:	e004      	b.n	800603a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006030:	bf00      	nop
 8006032:	e002      	b.n	800603a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006034:	bf00      	nop
 8006036:	e000      	b.n	800603a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006038:	bf00      	nop
    }

    if (ret == HAL_OK)
 800603a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800603e:	2b00      	cmp	r3, #0
 8006040:	d10b      	bne.n	800605a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006042:	4b39      	ldr	r3, [pc, #228]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006046:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800604a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800604e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006052:	4a35      	ldr	r2, [pc, #212]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006054:	430b      	orrs	r3, r1
 8006056:	6553      	str	r3, [r2, #84]	; 0x54
 8006058:	e003      	b.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800605a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800605e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006062:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800606e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006072:	2300      	movs	r3, #0
 8006074:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006078:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800607c:	460b      	mov	r3, r1
 800607e:	4313      	orrs	r3, r2
 8006080:	d058      	beq.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006082:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006086:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800608a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800608e:	d033      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006090:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006094:	d82c      	bhi.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800609a:	d02f      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800609c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060a0:	d826      	bhi.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80060a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060a6:	d02b      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80060a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060ac:	d820      	bhi.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80060ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060b2:	d012      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80060b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060b8:	d81a      	bhi.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d022      	beq.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80060be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060c2:	d115      	bne.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060c8:	3308      	adds	r3, #8
 80060ca:	2100      	movs	r1, #0
 80060cc:	4618      	mov	r0, r3
 80060ce:	f001 fd29 	bl	8007b24 <RCCEx_PLL2_Config>
 80060d2:	4603      	mov	r3, r0
 80060d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80060d8:	e015      	b.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80060da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060de:	3328      	adds	r3, #40	; 0x28
 80060e0:	2102      	movs	r1, #2
 80060e2:	4618      	mov	r0, r3
 80060e4:	f001 fdd0 	bl	8007c88 <RCCEx_PLL3_Config>
 80060e8:	4603      	mov	r3, r0
 80060ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80060ee:	e00a      	b.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80060f6:	e006      	b.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80060f8:	bf00      	nop
 80060fa:	e004      	b.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80060fc:	bf00      	nop
 80060fe:	e002      	b.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006100:	bf00      	nop
 8006102:	e000      	b.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006104:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006106:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800610a:	2b00      	cmp	r3, #0
 800610c:	d10e      	bne.n	800612c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800610e:	4b06      	ldr	r3, [pc, #24]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006112:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8006116:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800611a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800611e:	4a02      	ldr	r2, [pc, #8]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006120:	430b      	orrs	r3, r1
 8006122:	6593      	str	r3, [r2, #88]	; 0x58
 8006124:	e006      	b.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006126:	bf00      	nop
 8006128:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800612c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006130:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006134:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006140:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006144:	2300      	movs	r3, #0
 8006146:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800614a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800614e:	460b      	mov	r3, r1
 8006150:	4313      	orrs	r3, r2
 8006152:	d055      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006154:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006158:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800615c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006160:	d033      	beq.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006162:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006166:	d82c      	bhi.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006168:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800616c:	d02f      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800616e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006172:	d826      	bhi.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006174:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006178:	d02b      	beq.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800617a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800617e:	d820      	bhi.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006180:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006184:	d012      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006186:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800618a:	d81a      	bhi.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800618c:	2b00      	cmp	r3, #0
 800618e:	d022      	beq.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006190:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006194:	d115      	bne.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006196:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800619a:	3308      	adds	r3, #8
 800619c:	2100      	movs	r1, #0
 800619e:	4618      	mov	r0, r3
 80061a0:	f001 fcc0 	bl	8007b24 <RCCEx_PLL2_Config>
 80061a4:	4603      	mov	r3, r0
 80061a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80061aa:	e015      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80061ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061b0:	3328      	adds	r3, #40	; 0x28
 80061b2:	2102      	movs	r1, #2
 80061b4:	4618      	mov	r0, r3
 80061b6:	f001 fd67 	bl	8007c88 <RCCEx_PLL3_Config>
 80061ba:	4603      	mov	r3, r0
 80061bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80061c0:	e00a      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80061c8:	e006      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80061ca:	bf00      	nop
 80061cc:	e004      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80061ce:	bf00      	nop
 80061d0:	e002      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80061d2:	bf00      	nop
 80061d4:	e000      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80061d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d10b      	bne.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80061e0:	4ba1      	ldr	r3, [pc, #644]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061e4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80061e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80061f0:	4a9d      	ldr	r2, [pc, #628]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061f2:	430b      	orrs	r3, r1
 80061f4:	6593      	str	r3, [r2, #88]	; 0x58
 80061f6:	e003      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006200:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006208:	f002 0308 	and.w	r3, r2, #8
 800620c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006210:	2300      	movs	r3, #0
 8006212:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006216:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800621a:	460b      	mov	r3, r1
 800621c:	4313      	orrs	r3, r2
 800621e:	d01e      	beq.n	800625e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006220:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006224:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006228:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800622c:	d10c      	bne.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800622e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006232:	3328      	adds	r3, #40	; 0x28
 8006234:	2102      	movs	r1, #2
 8006236:	4618      	mov	r0, r3
 8006238:	f001 fd26 	bl	8007c88 <RCCEx_PLL3_Config>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d002      	beq.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006248:	4b87      	ldr	r3, [pc, #540]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800624a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800624c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006250:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006254:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006258:	4a83      	ldr	r2, [pc, #524]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800625a:	430b      	orrs	r3, r1
 800625c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800625e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006266:	f002 0310 	and.w	r3, r2, #16
 800626a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800626e:	2300      	movs	r3, #0
 8006270:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006274:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006278:	460b      	mov	r3, r1
 800627a:	4313      	orrs	r3, r2
 800627c:	d01e      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800627e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006282:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006286:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800628a:	d10c      	bne.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800628c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006290:	3328      	adds	r3, #40	; 0x28
 8006292:	2102      	movs	r1, #2
 8006294:	4618      	mov	r0, r3
 8006296:	f001 fcf7 	bl	8007c88 <RCCEx_PLL3_Config>
 800629a:	4603      	mov	r3, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d002      	beq.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80062a6:	4b70      	ldr	r3, [pc, #448]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80062ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80062b6:	4a6c      	ldr	r2, [pc, #432]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062b8:	430b      	orrs	r3, r1
 80062ba:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80062bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80062c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80062cc:	2300      	movs	r3, #0
 80062ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80062d2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80062d6:	460b      	mov	r3, r1
 80062d8:	4313      	orrs	r3, r2
 80062da:	d03e      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80062dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80062e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062e8:	d022      	beq.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80062ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062ee:	d81b      	bhi.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d003      	beq.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80062f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062f8:	d00b      	beq.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80062fa:	e015      	b.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006300:	3308      	adds	r3, #8
 8006302:	2100      	movs	r1, #0
 8006304:	4618      	mov	r0, r3
 8006306:	f001 fc0d 	bl	8007b24 <RCCEx_PLL2_Config>
 800630a:	4603      	mov	r3, r0
 800630c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006310:	e00f      	b.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006312:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006316:	3328      	adds	r3, #40	; 0x28
 8006318:	2102      	movs	r1, #2
 800631a:	4618      	mov	r0, r3
 800631c:	f001 fcb4 	bl	8007c88 <RCCEx_PLL3_Config>
 8006320:	4603      	mov	r3, r0
 8006322:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006326:	e004      	b.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800632e:	e000      	b.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006330:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006332:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006336:	2b00      	cmp	r3, #0
 8006338:	d10b      	bne.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800633a:	4b4b      	ldr	r3, [pc, #300]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800633c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800633e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006342:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006346:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800634a:	4a47      	ldr	r2, [pc, #284]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800634c:	430b      	orrs	r3, r1
 800634e:	6593      	str	r3, [r2, #88]	; 0x58
 8006350:	e003      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006352:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006356:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800635a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800635e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006362:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006366:	67bb      	str	r3, [r7, #120]	; 0x78
 8006368:	2300      	movs	r3, #0
 800636a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800636c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006370:	460b      	mov	r3, r1
 8006372:	4313      	orrs	r3, r2
 8006374:	d03b      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006376:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800637a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800637e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006382:	d01f      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006384:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006388:	d818      	bhi.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800638a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800638e:	d003      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006390:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006394:	d007      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006396:	e011      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006398:	4b33      	ldr	r3, [pc, #204]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800639a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800639c:	4a32      	ldr	r2, [pc, #200]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800639e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80063a4:	e00f      	b.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063aa:	3328      	adds	r3, #40	; 0x28
 80063ac:	2101      	movs	r1, #1
 80063ae:	4618      	mov	r0, r3
 80063b0:	f001 fc6a 	bl	8007c88 <RCCEx_PLL3_Config>
 80063b4:	4603      	mov	r3, r0
 80063b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80063ba:	e004      	b.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80063c2:	e000      	b.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80063c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d10b      	bne.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80063ce:	4b26      	ldr	r3, [pc, #152]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063d2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80063d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063de:	4a22      	ldr	r2, [pc, #136]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063e0:	430b      	orrs	r3, r1
 80063e2:	6553      	str	r3, [r2, #84]	; 0x54
 80063e4:	e003      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80063ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80063fa:	673b      	str	r3, [r7, #112]	; 0x70
 80063fc:	2300      	movs	r3, #0
 80063fe:	677b      	str	r3, [r7, #116]	; 0x74
 8006400:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006404:	460b      	mov	r3, r1
 8006406:	4313      	orrs	r3, r2
 8006408:	d034      	beq.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800640a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800640e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006410:	2b00      	cmp	r3, #0
 8006412:	d003      	beq.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006418:	d007      	beq.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800641a:	e011      	b.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800641c:	4b12      	ldr	r3, [pc, #72]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800641e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006420:	4a11      	ldr	r2, [pc, #68]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006422:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006426:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006428:	e00e      	b.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800642a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800642e:	3308      	adds	r3, #8
 8006430:	2102      	movs	r1, #2
 8006432:	4618      	mov	r0, r3
 8006434:	f001 fb76 	bl	8007b24 <RCCEx_PLL2_Config>
 8006438:	4603      	mov	r3, r0
 800643a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800643e:	e003      	b.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006446:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006448:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800644c:	2b00      	cmp	r3, #0
 800644e:	d10d      	bne.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006450:	4b05      	ldr	r3, [pc, #20]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006454:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006458:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800645c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800645e:	4a02      	ldr	r2, [pc, #8]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006460:	430b      	orrs	r3, r1
 8006462:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006464:	e006      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006466:	bf00      	nop
 8006468:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800646c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006470:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006474:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800647c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006480:	66bb      	str	r3, [r7, #104]	; 0x68
 8006482:	2300      	movs	r3, #0
 8006484:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006486:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800648a:	460b      	mov	r3, r1
 800648c:	4313      	orrs	r3, r2
 800648e:	d00c      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006490:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006494:	3328      	adds	r3, #40	; 0x28
 8006496:	2102      	movs	r1, #2
 8006498:	4618      	mov	r0, r3
 800649a:	f001 fbf5 	bl	8007c88 <RCCEx_PLL3_Config>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d002      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80064aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80064b6:	663b      	str	r3, [r7, #96]	; 0x60
 80064b8:	2300      	movs	r3, #0
 80064ba:	667b      	str	r3, [r7, #100]	; 0x64
 80064bc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80064c0:	460b      	mov	r3, r1
 80064c2:	4313      	orrs	r3, r2
 80064c4:	d038      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80064c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064d2:	d018      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80064d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064d8:	d811      	bhi.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80064da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064de:	d014      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80064e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064e4:	d80b      	bhi.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d011      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80064ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064ee:	d106      	bne.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064f0:	4bc3      	ldr	r3, [pc, #780]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f4:	4ac2      	ldr	r2, [pc, #776]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80064fc:	e008      	b.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006504:	e004      	b.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006506:	bf00      	nop
 8006508:	e002      	b.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800650a:	bf00      	nop
 800650c:	e000      	b.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800650e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006510:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006514:	2b00      	cmp	r3, #0
 8006516:	d10b      	bne.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006518:	4bb9      	ldr	r3, [pc, #740]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800651a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800651c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006520:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006524:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006528:	4ab5      	ldr	r2, [pc, #724]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800652a:	430b      	orrs	r3, r1
 800652c:	6553      	str	r3, [r2, #84]	; 0x54
 800652e:	e003      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006530:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006534:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006538:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800653c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006540:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006544:	65bb      	str	r3, [r7, #88]	; 0x58
 8006546:	2300      	movs	r3, #0
 8006548:	65fb      	str	r3, [r7, #92]	; 0x5c
 800654a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800654e:	460b      	mov	r3, r1
 8006550:	4313      	orrs	r3, r2
 8006552:	d009      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006554:	4baa      	ldr	r3, [pc, #680]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006558:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800655c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006562:	4aa7      	ldr	r2, [pc, #668]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006564:	430b      	orrs	r3, r1
 8006566:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006568:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800656c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006570:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8006574:	653b      	str	r3, [r7, #80]	; 0x50
 8006576:	2300      	movs	r3, #0
 8006578:	657b      	str	r3, [r7, #84]	; 0x54
 800657a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800657e:	460b      	mov	r3, r1
 8006580:	4313      	orrs	r3, r2
 8006582:	d00a      	beq.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006584:	4b9e      	ldr	r3, [pc, #632]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800658c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006590:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006594:	4a9a      	ldr	r2, [pc, #616]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006596:	430b      	orrs	r3, r1
 8006598:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800659a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800659e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80065a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80065a8:	2300      	movs	r3, #0
 80065aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065ac:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80065b0:	460b      	mov	r3, r1
 80065b2:	4313      	orrs	r3, r2
 80065b4:	d009      	beq.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80065b6:	4b92      	ldr	r3, [pc, #584]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065ba:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80065be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065c4:	4a8e      	ldr	r2, [pc, #568]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065c6:	430b      	orrs	r3, r1
 80065c8:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80065ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d2:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80065d6:	643b      	str	r3, [r7, #64]	; 0x40
 80065d8:	2300      	movs	r3, #0
 80065da:	647b      	str	r3, [r7, #68]	; 0x44
 80065dc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80065e0:	460b      	mov	r3, r1
 80065e2:	4313      	orrs	r3, r2
 80065e4:	d00e      	beq.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80065e6:	4b86      	ldr	r3, [pc, #536]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	4a85      	ldr	r2, [pc, #532]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80065f0:	6113      	str	r3, [r2, #16]
 80065f2:	4b83      	ldr	r3, [pc, #524]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065f4:	6919      	ldr	r1, [r3, #16]
 80065f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065fa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80065fe:	4a80      	ldr	r2, [pc, #512]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006600:	430b      	orrs	r3, r1
 8006602:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006604:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006610:	63bb      	str	r3, [r7, #56]	; 0x38
 8006612:	2300      	movs	r3, #0
 8006614:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006616:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800661a:	460b      	mov	r3, r1
 800661c:	4313      	orrs	r3, r2
 800661e:	d009      	beq.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006620:	4b77      	ldr	r3, [pc, #476]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006624:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006628:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800662c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800662e:	4a74      	ldr	r2, [pc, #464]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006630:	430b      	orrs	r3, r1
 8006632:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006634:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006640:	633b      	str	r3, [r7, #48]	; 0x30
 8006642:	2300      	movs	r3, #0
 8006644:	637b      	str	r3, [r7, #52]	; 0x34
 8006646:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800664a:	460b      	mov	r3, r1
 800664c:	4313      	orrs	r3, r2
 800664e:	d00a      	beq.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006650:	4b6b      	ldr	r3, [pc, #428]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006654:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006658:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800665c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006660:	4a67      	ldr	r2, [pc, #412]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006662:	430b      	orrs	r3, r1
 8006664:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006666:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800666a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800666e:	2100      	movs	r1, #0
 8006670:	62b9      	str	r1, [r7, #40]	; 0x28
 8006672:	f003 0301 	and.w	r3, r3, #1
 8006676:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006678:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800667c:	460b      	mov	r3, r1
 800667e:	4313      	orrs	r3, r2
 8006680:	d011      	beq.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006682:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006686:	3308      	adds	r3, #8
 8006688:	2100      	movs	r1, #0
 800668a:	4618      	mov	r0, r3
 800668c:	f001 fa4a 	bl	8007b24 <RCCEx_PLL2_Config>
 8006690:	4603      	mov	r3, r0
 8006692:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006696:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800669a:	2b00      	cmp	r3, #0
 800669c:	d003      	beq.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800669e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80066a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ae:	2100      	movs	r1, #0
 80066b0:	6239      	str	r1, [r7, #32]
 80066b2:	f003 0302 	and.w	r3, r3, #2
 80066b6:	627b      	str	r3, [r7, #36]	; 0x24
 80066b8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80066bc:	460b      	mov	r3, r1
 80066be:	4313      	orrs	r3, r2
 80066c0:	d011      	beq.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066c6:	3308      	adds	r3, #8
 80066c8:	2101      	movs	r1, #1
 80066ca:	4618      	mov	r0, r3
 80066cc:	f001 fa2a 	bl	8007b24 <RCCEx_PLL2_Config>
 80066d0:	4603      	mov	r3, r0
 80066d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80066d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d003      	beq.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80066e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ee:	2100      	movs	r1, #0
 80066f0:	61b9      	str	r1, [r7, #24]
 80066f2:	f003 0304 	and.w	r3, r3, #4
 80066f6:	61fb      	str	r3, [r7, #28]
 80066f8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80066fc:	460b      	mov	r3, r1
 80066fe:	4313      	orrs	r3, r2
 8006700:	d011      	beq.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006702:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006706:	3308      	adds	r3, #8
 8006708:	2102      	movs	r1, #2
 800670a:	4618      	mov	r0, r3
 800670c:	f001 fa0a 	bl	8007b24 <RCCEx_PLL2_Config>
 8006710:	4603      	mov	r3, r0
 8006712:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006716:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800671a:	2b00      	cmp	r3, #0
 800671c:	d003      	beq.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800671e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006722:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006726:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800672a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672e:	2100      	movs	r1, #0
 8006730:	6139      	str	r1, [r7, #16]
 8006732:	f003 0308 	and.w	r3, r3, #8
 8006736:	617b      	str	r3, [r7, #20]
 8006738:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800673c:	460b      	mov	r3, r1
 800673e:	4313      	orrs	r3, r2
 8006740:	d011      	beq.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006742:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006746:	3328      	adds	r3, #40	; 0x28
 8006748:	2100      	movs	r1, #0
 800674a:	4618      	mov	r0, r3
 800674c:	f001 fa9c 	bl	8007c88 <RCCEx_PLL3_Config>
 8006750:	4603      	mov	r3, r0
 8006752:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8006756:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800675a:	2b00      	cmp	r3, #0
 800675c:	d003      	beq.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800675e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006762:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006766:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800676a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676e:	2100      	movs	r1, #0
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	f003 0310 	and.w	r3, r3, #16
 8006776:	60fb      	str	r3, [r7, #12]
 8006778:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800677c:	460b      	mov	r3, r1
 800677e:	4313      	orrs	r3, r2
 8006780:	d011      	beq.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006782:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006786:	3328      	adds	r3, #40	; 0x28
 8006788:	2101      	movs	r1, #1
 800678a:	4618      	mov	r0, r3
 800678c:	f001 fa7c 	bl	8007c88 <RCCEx_PLL3_Config>
 8006790:	4603      	mov	r3, r0
 8006792:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006796:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800679a:	2b00      	cmp	r3, #0
 800679c:	d003      	beq.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800679e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80067a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ae:	2100      	movs	r1, #0
 80067b0:	6039      	str	r1, [r7, #0]
 80067b2:	f003 0320 	and.w	r3, r3, #32
 80067b6:	607b      	str	r3, [r7, #4]
 80067b8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80067bc:	460b      	mov	r3, r1
 80067be:	4313      	orrs	r3, r2
 80067c0:	d011      	beq.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80067c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067c6:	3328      	adds	r3, #40	; 0x28
 80067c8:	2102      	movs	r1, #2
 80067ca:	4618      	mov	r0, r3
 80067cc:	f001 fa5c 	bl	8007c88 <RCCEx_PLL3_Config>
 80067d0:	4603      	mov	r3, r0
 80067d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80067d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d003      	beq.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80067e6:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d101      	bne.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80067ee:	2300      	movs	r3, #0
 80067f0:	e000      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80067fa:	46bd      	mov	sp, r7
 80067fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006800:	58024400 	.word	0x58024400

08006804 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b090      	sub	sp, #64	; 0x40
 8006808:	af00      	add	r7, sp, #0
 800680a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800680e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006812:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8006816:	430b      	orrs	r3, r1
 8006818:	f040 8094 	bne.w	8006944 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800681c:	4b9e      	ldr	r3, [pc, #632]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800681e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006820:	f003 0307 	and.w	r3, r3, #7
 8006824:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006828:	2b04      	cmp	r3, #4
 800682a:	f200 8087 	bhi.w	800693c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800682e:	a201      	add	r2, pc, #4	; (adr r2, 8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006834:	08006849 	.word	0x08006849
 8006838:	08006871 	.word	0x08006871
 800683c:	08006899 	.word	0x08006899
 8006840:	08006935 	.word	0x08006935
 8006844:	080068c1 	.word	0x080068c1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006848:	4b93      	ldr	r3, [pc, #588]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006850:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006854:	d108      	bne.n	8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006856:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800685a:	4618      	mov	r0, r3
 800685c:	f001 f810 	bl	8007880 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006862:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006864:	f000 bd45 	b.w	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006868:	2300      	movs	r3, #0
 800686a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800686c:	f000 bd41 	b.w	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006870:	4b89      	ldr	r3, [pc, #548]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006878:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800687c:	d108      	bne.n	8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800687e:	f107 0318 	add.w	r3, r7, #24
 8006882:	4618      	mov	r0, r3
 8006884:	f000 fd54 	bl	8007330 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800688c:	f000 bd31 	b.w	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006890:	2300      	movs	r3, #0
 8006892:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006894:	f000 bd2d 	b.w	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006898:	4b7f      	ldr	r3, [pc, #508]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068a4:	d108      	bne.n	80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068a6:	f107 030c 	add.w	r3, r7, #12
 80068aa:	4618      	mov	r0, r3
 80068ac:	f000 fe94 	bl	80075d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068b4:	f000 bd1d 	b.w	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068b8:	2300      	movs	r3, #0
 80068ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068bc:	f000 bd19 	b.w	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80068c0:	4b75      	ldr	r3, [pc, #468]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80068c8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80068ca:	4b73      	ldr	r3, [pc, #460]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f003 0304 	and.w	r3, r3, #4
 80068d2:	2b04      	cmp	r3, #4
 80068d4:	d10c      	bne.n	80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80068d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d109      	bne.n	80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80068dc:	4b6e      	ldr	r3, [pc, #440]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	08db      	lsrs	r3, r3, #3
 80068e2:	f003 0303 	and.w	r3, r3, #3
 80068e6:	4a6d      	ldr	r2, [pc, #436]	; (8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80068e8:	fa22 f303 	lsr.w	r3, r2, r3
 80068ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068ee:	e01f      	b.n	8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80068f0:	4b69      	ldr	r3, [pc, #420]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068fc:	d106      	bne.n	800690c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80068fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006900:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006904:	d102      	bne.n	800690c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006906:	4b66      	ldr	r3, [pc, #408]	; (8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006908:	63fb      	str	r3, [r7, #60]	; 0x3c
 800690a:	e011      	b.n	8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800690c:	4b62      	ldr	r3, [pc, #392]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006914:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006918:	d106      	bne.n	8006928 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800691a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800691c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006920:	d102      	bne.n	8006928 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006922:	4b60      	ldr	r3, [pc, #384]	; (8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006924:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006926:	e003      	b.n	8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006928:	2300      	movs	r3, #0
 800692a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800692c:	f000 bce1 	b.w	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006930:	f000 bcdf 	b.w	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006934:	4b5c      	ldr	r3, [pc, #368]	; (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006936:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006938:	f000 bcdb 	b.w	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800693c:	2300      	movs	r3, #0
 800693e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006940:	f000 bcd7 	b.w	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006944:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006948:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800694c:	430b      	orrs	r3, r1
 800694e:	f040 80ad 	bne.w	8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006952:	4b51      	ldr	r3, [pc, #324]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006956:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800695a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800695c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800695e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006962:	d056      	beq.n	8006a12 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006966:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800696a:	f200 8090 	bhi.w	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800696e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006970:	2bc0      	cmp	r3, #192	; 0xc0
 8006972:	f000 8088 	beq.w	8006a86 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8006976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006978:	2bc0      	cmp	r3, #192	; 0xc0
 800697a:	f200 8088 	bhi.w	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800697e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006980:	2b80      	cmp	r3, #128	; 0x80
 8006982:	d032      	beq.n	80069ea <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006986:	2b80      	cmp	r3, #128	; 0x80
 8006988:	f200 8081 	bhi.w	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800698c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800698e:	2b00      	cmp	r3, #0
 8006990:	d003      	beq.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8006992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006994:	2b40      	cmp	r3, #64	; 0x40
 8006996:	d014      	beq.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006998:	e079      	b.n	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800699a:	4b3f      	ldr	r3, [pc, #252]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069a6:	d108      	bne.n	80069ba <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80069a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069ac:	4618      	mov	r0, r3
 80069ae:	f000 ff67 	bl	8007880 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80069b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069b6:	f000 bc9c 	b.w	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069ba:	2300      	movs	r3, #0
 80069bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069be:	f000 bc98 	b.w	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80069c2:	4b35      	ldr	r3, [pc, #212]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069ce:	d108      	bne.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069d0:	f107 0318 	add.w	r3, r7, #24
 80069d4:	4618      	mov	r0, r3
 80069d6:	f000 fcab 	bl	8007330 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069de:	f000 bc88 	b.w	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069e2:	2300      	movs	r3, #0
 80069e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069e6:	f000 bc84 	b.w	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80069ea:	4b2b      	ldr	r3, [pc, #172]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069f6:	d108      	bne.n	8006a0a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069f8:	f107 030c 	add.w	r3, r7, #12
 80069fc:	4618      	mov	r0, r3
 80069fe:	f000 fdeb 	bl	80075d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a06:	f000 bc74 	b.w	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a0e:	f000 bc70 	b.w	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006a12:	4b21      	ldr	r3, [pc, #132]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a16:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006a1a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006a1c:	4b1e      	ldr	r3, [pc, #120]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 0304 	and.w	r3, r3, #4
 8006a24:	2b04      	cmp	r3, #4
 8006a26:	d10c      	bne.n	8006a42 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d109      	bne.n	8006a42 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a2e:	4b1a      	ldr	r3, [pc, #104]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	08db      	lsrs	r3, r3, #3
 8006a34:	f003 0303 	and.w	r3, r3, #3
 8006a38:	4a18      	ldr	r2, [pc, #96]	; (8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8006a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a40:	e01f      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a42:	4b15      	ldr	r3, [pc, #84]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a4e:	d106      	bne.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a56:	d102      	bne.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006a58:	4b11      	ldr	r3, [pc, #68]	; (8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a5c:	e011      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006a5e:	4b0e      	ldr	r3, [pc, #56]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a6a:	d106      	bne.n	8006a7a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8006a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a72:	d102      	bne.n	8006a7a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006a74:	4b0b      	ldr	r3, [pc, #44]	; (8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006a76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a78:	e003      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006a7e:	f000 bc38 	b.w	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006a82:	f000 bc36 	b.w	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006a86:	4b08      	ldr	r3, [pc, #32]	; (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006a88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a8a:	f000 bc32 	b.w	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a92:	f000 bc2e 	b.w	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006a96:	bf00      	nop
 8006a98:	58024400 	.word	0x58024400
 8006a9c:	03d09000 	.word	0x03d09000
 8006aa0:	003d0900 	.word	0x003d0900
 8006aa4:	007a1200 	.word	0x007a1200
 8006aa8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006aac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ab0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8006ab4:	430b      	orrs	r3, r1
 8006ab6:	f040 809c 	bne.w	8006bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006aba:	4b9e      	ldr	r3, [pc, #632]	; (8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006abe:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006ac2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006aca:	d054      	beq.n	8006b76 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ace:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ad2:	f200 808b 	bhi.w	8006bec <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006adc:	f000 8083 	beq.w	8006be6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006ae6:	f200 8081 	bhi.w	8006bec <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006af0:	d02f      	beq.n	8006b52 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8006af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006af8:	d878      	bhi.n	8006bec <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d004      	beq.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b06:	d012      	beq.n	8006b2e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006b08:	e070      	b.n	8006bec <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006b0a:	4b8a      	ldr	r3, [pc, #552]	; (8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b16:	d107      	bne.n	8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f000 feaf 	bl	8007880 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b26:	e3e4      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b2c:	e3e1      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b2e:	4b81      	ldr	r3, [pc, #516]	; (8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b3a:	d107      	bne.n	8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b3c:	f107 0318 	add.w	r3, r7, #24
 8006b40:	4618      	mov	r0, r3
 8006b42:	f000 fbf5 	bl	8007330 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b4a:	e3d2      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b50:	e3cf      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b52:	4b78      	ldr	r3, [pc, #480]	; (8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b5e:	d107      	bne.n	8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b60:	f107 030c 	add.w	r3, r7, #12
 8006b64:	4618      	mov	r0, r3
 8006b66:	f000 fd37 	bl	80075d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b6e:	e3c0      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b70:	2300      	movs	r3, #0
 8006b72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b74:	e3bd      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006b76:	4b6f      	ldr	r3, [pc, #444]	; (8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b7a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006b7e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006b80:	4b6c      	ldr	r3, [pc, #432]	; (8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 0304 	and.w	r3, r3, #4
 8006b88:	2b04      	cmp	r3, #4
 8006b8a:	d10c      	bne.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d109      	bne.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b92:	4b68      	ldr	r3, [pc, #416]	; (8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	08db      	lsrs	r3, r3, #3
 8006b98:	f003 0303 	and.w	r3, r3, #3
 8006b9c:	4a66      	ldr	r2, [pc, #408]	; (8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8006ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ba4:	e01e      	b.n	8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006ba6:	4b63      	ldr	r3, [pc, #396]	; (8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bb2:	d106      	bne.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bba:	d102      	bne.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006bbc:	4b5f      	ldr	r3, [pc, #380]	; (8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bc0:	e010      	b.n	8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006bc2:	4b5c      	ldr	r3, [pc, #368]	; (8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006bce:	d106      	bne.n	8006bde <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bd6:	d102      	bne.n	8006bde <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006bd8:	4b59      	ldr	r3, [pc, #356]	; (8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006bda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bdc:	e002      	b.n	8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006bde:	2300      	movs	r3, #0
 8006be0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006be2:	e386      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006be4:	e385      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006be6:	4b57      	ldr	r3, [pc, #348]	; (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006be8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bea:	e382      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006bec:	2300      	movs	r3, #0
 8006bee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bf0:	e37f      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006bf2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bf6:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8006bfa:	430b      	orrs	r3, r1
 8006bfc:	f040 80a7 	bne.w	8006d4e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006c00:	4b4c      	ldr	r3, [pc, #304]	; (8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c04:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006c08:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006c10:	d055      	beq.n	8006cbe <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8006c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006c18:	f200 8096 	bhi.w	8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c1e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006c22:	f000 8084 	beq.w	8006d2e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c28:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006c2c:	f200 808c 	bhi.w	8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c36:	d030      	beq.n	8006c9a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8006c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c3e:	f200 8083 	bhi.w	8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d004      	beq.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006c4e:	d012      	beq.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8006c50:	e07a      	b.n	8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c52:	4b38      	ldr	r3, [pc, #224]	; (8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c5e:	d107      	bne.n	8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c64:	4618      	mov	r0, r3
 8006c66:	f000 fe0b 	bl	8007880 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c6e:	e340      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c70:	2300      	movs	r3, #0
 8006c72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c74:	e33d      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c76:	4b2f      	ldr	r3, [pc, #188]	; (8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c82:	d107      	bne.n	8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c84:	f107 0318 	add.w	r3, r7, #24
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f000 fb51 	bl	8007330 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c92:	e32e      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c94:	2300      	movs	r3, #0
 8006c96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c98:	e32b      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006c9a:	4b26      	ldr	r3, [pc, #152]	; (8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ca2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ca6:	d107      	bne.n	8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ca8:	f107 030c 	add.w	r3, r7, #12
 8006cac:	4618      	mov	r0, r3
 8006cae:	f000 fc93 	bl	80075d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cb6:	e31c      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cbc:	e319      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006cbe:	4b1d      	ldr	r3, [pc, #116]	; (8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cc2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006cc6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006cc8:	4b1a      	ldr	r3, [pc, #104]	; (8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 0304 	and.w	r3, r3, #4
 8006cd0:	2b04      	cmp	r3, #4
 8006cd2:	d10c      	bne.n	8006cee <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d109      	bne.n	8006cee <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006cda:	4b16      	ldr	r3, [pc, #88]	; (8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	08db      	lsrs	r3, r3, #3
 8006ce0:	f003 0303 	and.w	r3, r3, #3
 8006ce4:	4a14      	ldr	r2, [pc, #80]	; (8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8006cea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cec:	e01e      	b.n	8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006cee:	4b11      	ldr	r3, [pc, #68]	; (8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cfa:	d106      	bne.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d02:	d102      	bne.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006d04:	4b0d      	ldr	r3, [pc, #52]	; (8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006d06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d08:	e010      	b.n	8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d0a:	4b0a      	ldr	r3, [pc, #40]	; (8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d16:	d106      	bne.n	8006d26 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8006d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d1e:	d102      	bne.n	8006d26 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006d20:	4b07      	ldr	r3, [pc, #28]	; (8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006d22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d24:	e002      	b.n	8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006d26:	2300      	movs	r3, #0
 8006d28:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006d2a:	e2e2      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006d2c:	e2e1      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006d2e:	4b05      	ldr	r3, [pc, #20]	; (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006d30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d32:	e2de      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006d34:	58024400 	.word	0x58024400
 8006d38:	03d09000 	.word	0x03d09000
 8006d3c:	003d0900 	.word	0x003d0900
 8006d40:	007a1200 	.word	0x007a1200
 8006d44:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d4c:	e2d1      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006d4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d52:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8006d56:	430b      	orrs	r3, r1
 8006d58:	f040 809c 	bne.w	8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006d5c:	4b93      	ldr	r3, [pc, #588]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d60:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006d64:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d6c:	d054      	beq.n	8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d74:	f200 808b 	bhi.w	8006e8e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d7a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d7e:	f000 8083 	beq.w	8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d84:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d88:	f200 8081 	bhi.w	8006e8e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d92:	d02f      	beq.n	8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d9a:	d878      	bhi.n	8006e8e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d004      	beq.n	8006dac <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006da8:	d012      	beq.n	8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006daa:	e070      	b.n	8006e8e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006dac:	4b7f      	ldr	r3, [pc, #508]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006db4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006db8:	d107      	bne.n	8006dca <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006dba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f000 fd5e 	bl	8007880 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006dc8:	e293      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006dce:	e290      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006dd0:	4b76      	ldr	r3, [pc, #472]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ddc:	d107      	bne.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006dde:	f107 0318 	add.w	r3, r7, #24
 8006de2:	4618      	mov	r0, r3
 8006de4:	f000 faa4 	bl	8007330 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006dec:	e281      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006dee:	2300      	movs	r3, #0
 8006df0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006df2:	e27e      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006df4:	4b6d      	ldr	r3, [pc, #436]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006dfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e00:	d107      	bne.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e02:	f107 030c 	add.w	r3, r7, #12
 8006e06:	4618      	mov	r0, r3
 8006e08:	f000 fbe6 	bl	80075d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e10:	e26f      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e12:	2300      	movs	r3, #0
 8006e14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e16:	e26c      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006e18:	4b64      	ldr	r3, [pc, #400]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006e20:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e22:	4b62      	ldr	r3, [pc, #392]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f003 0304 	and.w	r3, r3, #4
 8006e2a:	2b04      	cmp	r3, #4
 8006e2c:	d10c      	bne.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d109      	bne.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e34:	4b5d      	ldr	r3, [pc, #372]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	08db      	lsrs	r3, r3, #3
 8006e3a:	f003 0303 	and.w	r3, r3, #3
 8006e3e:	4a5c      	ldr	r2, [pc, #368]	; (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006e40:	fa22 f303 	lsr.w	r3, r2, r3
 8006e44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e46:	e01e      	b.n	8006e86 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e48:	4b58      	ldr	r3, [pc, #352]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e54:	d106      	bne.n	8006e64 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e5c:	d102      	bne.n	8006e64 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006e5e:	4b55      	ldr	r3, [pc, #340]	; (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006e60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e62:	e010      	b.n	8006e86 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e64:	4b51      	ldr	r3, [pc, #324]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e70:	d106      	bne.n	8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e78:	d102      	bne.n	8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006e7a:	4b4f      	ldr	r3, [pc, #316]	; (8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e7e:	e002      	b.n	8006e86 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006e80:	2300      	movs	r3, #0
 8006e82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006e84:	e235      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006e86:	e234      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006e88:	4b4c      	ldr	r3, [pc, #304]	; (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e8c:	e231      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e92:	e22e      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006e94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e98:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8006e9c:	430b      	orrs	r3, r1
 8006e9e:	f040 808f 	bne.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006ea2:	4b42      	ldr	r3, [pc, #264]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ea6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006eaa:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8006eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006eb2:	d06b      	beq.n	8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006eba:	d874      	bhi.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ebe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ec2:	d056      	beq.n	8006f72 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006eca:	d86c      	bhi.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ece:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006ed2:	d03b      	beq.n	8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006eda:	d864      	bhi.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ede:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ee2:	d021      	beq.n	8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006eea:	d85c      	bhi.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d004      	beq.n	8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ef8:	d004      	beq.n	8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006efa:	e054      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006efc:	f7fe fa4c 	bl	8005398 <HAL_RCC_GetPCLK1Freq>
 8006f00:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006f02:	e1f6      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f04:	4b29      	ldr	r3, [pc, #164]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f10:	d107      	bne.n	8006f22 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f12:	f107 0318 	add.w	r3, r7, #24
 8006f16:	4618      	mov	r0, r3
 8006f18:	f000 fa0a 	bl	8007330 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006f1c:	69fb      	ldr	r3, [r7, #28]
 8006f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f20:	e1e7      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f22:	2300      	movs	r3, #0
 8006f24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f26:	e1e4      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006f28:	4b20      	ldr	r3, [pc, #128]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f34:	d107      	bne.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f36:	f107 030c 	add.w	r3, r7, #12
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f000 fb4c 	bl	80075d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f44:	e1d5      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f46:	2300      	movs	r3, #0
 8006f48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f4a:	e1d2      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f4c:	4b17      	ldr	r3, [pc, #92]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 0304 	and.w	r3, r3, #4
 8006f54:	2b04      	cmp	r3, #4
 8006f56:	d109      	bne.n	8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f58:	4b14      	ldr	r3, [pc, #80]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	08db      	lsrs	r3, r3, #3
 8006f5e:	f003 0303 	and.w	r3, r3, #3
 8006f62:	4a13      	ldr	r2, [pc, #76]	; (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006f64:	fa22 f303 	lsr.w	r3, r2, r3
 8006f68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f6a:	e1c2      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f70:	e1bf      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006f72:	4b0e      	ldr	r3, [pc, #56]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f7e:	d102      	bne.n	8006f86 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8006f80:	4b0c      	ldr	r3, [pc, #48]	; (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006f82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f84:	e1b5      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f86:	2300      	movs	r3, #0
 8006f88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f8a:	e1b2      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006f8c:	4b07      	ldr	r3, [pc, #28]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f98:	d102      	bne.n	8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8006f9a:	4b07      	ldr	r3, [pc, #28]	; (8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f9e:	e1a8      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fa4:	e1a5      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006faa:	e1a2      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006fac:	58024400 	.word	0x58024400
 8006fb0:	03d09000 	.word	0x03d09000
 8006fb4:	003d0900 	.word	0x003d0900
 8006fb8:	007a1200 	.word	0x007a1200
 8006fbc:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006fc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fc4:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8006fc8:	430b      	orrs	r3, r1
 8006fca:	d173      	bne.n	80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006fcc:	4b9c      	ldr	r3, [pc, #624]	; (8007240 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006fd4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fdc:	d02f      	beq.n	800703e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fe4:	d863      	bhi.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8006fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d004      	beq.n	8006ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8006fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ff2:	d012      	beq.n	800701a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006ff4:	e05b      	b.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ff6:	4b92      	ldr	r3, [pc, #584]	; (8007240 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ffe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007002:	d107      	bne.n	8007014 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007004:	f107 0318 	add.w	r3, r7, #24
 8007008:	4618      	mov	r0, r3
 800700a:	f000 f991 	bl	8007330 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007012:	e16e      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007014:	2300      	movs	r3, #0
 8007016:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007018:	e16b      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800701a:	4b89      	ldr	r3, [pc, #548]	; (8007240 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007022:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007026:	d107      	bne.n	8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007028:	f107 030c 	add.w	r3, r7, #12
 800702c:	4618      	mov	r0, r3
 800702e:	f000 fad3 	bl	80075d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007036:	e15c      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007038:	2300      	movs	r3, #0
 800703a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800703c:	e159      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800703e:	4b80      	ldr	r3, [pc, #512]	; (8007240 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007042:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007046:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007048:	4b7d      	ldr	r3, [pc, #500]	; (8007240 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f003 0304 	and.w	r3, r3, #4
 8007050:	2b04      	cmp	r3, #4
 8007052:	d10c      	bne.n	800706e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007056:	2b00      	cmp	r3, #0
 8007058:	d109      	bne.n	800706e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800705a:	4b79      	ldr	r3, [pc, #484]	; (8007240 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	08db      	lsrs	r3, r3, #3
 8007060:	f003 0303 	and.w	r3, r3, #3
 8007064:	4a77      	ldr	r2, [pc, #476]	; (8007244 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007066:	fa22 f303 	lsr.w	r3, r2, r3
 800706a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800706c:	e01e      	b.n	80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800706e:	4b74      	ldr	r3, [pc, #464]	; (8007240 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800707a:	d106      	bne.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800707c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800707e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007082:	d102      	bne.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007084:	4b70      	ldr	r3, [pc, #448]	; (8007248 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007086:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007088:	e010      	b.n	80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800708a:	4b6d      	ldr	r3, [pc, #436]	; (8007240 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007092:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007096:	d106      	bne.n	80070a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800709a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800709e:	d102      	bne.n	80070a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80070a0:	4b6a      	ldr	r3, [pc, #424]	; (800724c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80070a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070a4:	e002      	b.n	80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80070a6:	2300      	movs	r3, #0
 80070a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80070aa:	e122      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80070ac:	e121      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80070ae:	2300      	movs	r3, #0
 80070b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070b2:	e11e      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80070b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070b8:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80070bc:	430b      	orrs	r3, r1
 80070be:	d133      	bne.n	8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80070c0:	4b5f      	ldr	r3, [pc, #380]	; (8007240 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070c8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80070ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d004      	beq.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80070d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070d6:	d012      	beq.n	80070fe <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80070d8:	e023      	b.n	8007122 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80070da:	4b59      	ldr	r3, [pc, #356]	; (8007240 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070e6:	d107      	bne.n	80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80070e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070ec:	4618      	mov	r0, r3
 80070ee:	f000 fbc7 	bl	8007880 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80070f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070f6:	e0fc      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070f8:	2300      	movs	r3, #0
 80070fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070fc:	e0f9      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070fe:	4b50      	ldr	r3, [pc, #320]	; (8007240 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007106:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800710a:	d107      	bne.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800710c:	f107 0318 	add.w	r3, r7, #24
 8007110:	4618      	mov	r0, r3
 8007112:	f000 f90d 	bl	8007330 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007116:	6a3b      	ldr	r3, [r7, #32]
 8007118:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800711a:	e0ea      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800711c:	2300      	movs	r3, #0
 800711e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007120:	e0e7      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007122:	2300      	movs	r3, #0
 8007124:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007126:	e0e4      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007128:	e9d7 2300 	ldrd	r2, r3, [r7]
 800712c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8007130:	430b      	orrs	r3, r1
 8007132:	f040 808d 	bne.w	8007250 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007136:	4b42      	ldr	r3, [pc, #264]	; (8007240 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800713a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800713e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007142:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007146:	d06b      	beq.n	8007220 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800714a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800714e:	d874      	bhi.n	800723a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007156:	d056      	beq.n	8007206 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800715e:	d86c      	bhi.n	800723a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007162:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007166:	d03b      	beq.n	80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800716a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800716e:	d864      	bhi.n	800723a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007172:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007176:	d021      	beq.n	80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800717a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800717e:	d85c      	bhi.n	800723a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007182:	2b00      	cmp	r3, #0
 8007184:	d004      	beq.n	8007190 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8007186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007188:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800718c:	d004      	beq.n	8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800718e:	e054      	b.n	800723a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007190:	f000 f8b8 	bl	8007304 <HAL_RCCEx_GetD3PCLK1Freq>
 8007194:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007196:	e0ac      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007198:	4b29      	ldr	r3, [pc, #164]	; (8007240 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071a4:	d107      	bne.n	80071b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071a6:	f107 0318 	add.w	r3, r7, #24
 80071aa:	4618      	mov	r0, r3
 80071ac:	f000 f8c0 	bl	8007330 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80071b0:	69fb      	ldr	r3, [r7, #28]
 80071b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071b4:	e09d      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071b6:	2300      	movs	r3, #0
 80071b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071ba:	e09a      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80071bc:	4b20      	ldr	r3, [pc, #128]	; (8007240 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80071c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071c8:	d107      	bne.n	80071da <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071ca:	f107 030c 	add.w	r3, r7, #12
 80071ce:	4618      	mov	r0, r3
 80071d0:	f000 fa02 	bl	80075d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071d8:	e08b      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071da:	2300      	movs	r3, #0
 80071dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071de:	e088      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80071e0:	4b17      	ldr	r3, [pc, #92]	; (8007240 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f003 0304 	and.w	r3, r3, #4
 80071e8:	2b04      	cmp	r3, #4
 80071ea:	d109      	bne.n	8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80071ec:	4b14      	ldr	r3, [pc, #80]	; (8007240 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	08db      	lsrs	r3, r3, #3
 80071f2:	f003 0303 	and.w	r3, r3, #3
 80071f6:	4a13      	ldr	r2, [pc, #76]	; (8007244 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80071f8:	fa22 f303 	lsr.w	r3, r2, r3
 80071fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071fe:	e078      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007200:	2300      	movs	r3, #0
 8007202:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007204:	e075      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007206:	4b0e      	ldr	r3, [pc, #56]	; (8007240 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800720e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007212:	d102      	bne.n	800721a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007214:	4b0c      	ldr	r3, [pc, #48]	; (8007248 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007216:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007218:	e06b      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800721a:	2300      	movs	r3, #0
 800721c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800721e:	e068      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007220:	4b07      	ldr	r3, [pc, #28]	; (8007240 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007228:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800722c:	d102      	bne.n	8007234 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800722e:	4b07      	ldr	r3, [pc, #28]	; (800724c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007230:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007232:	e05e      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007234:	2300      	movs	r3, #0
 8007236:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007238:	e05b      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800723a:	2300      	movs	r3, #0
 800723c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800723e:	e058      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007240:	58024400 	.word	0x58024400
 8007244:	03d09000 	.word	0x03d09000
 8007248:	003d0900 	.word	0x003d0900
 800724c:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007250:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007254:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8007258:	430b      	orrs	r3, r1
 800725a:	d148      	bne.n	80072ee <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800725c:	4b27      	ldr	r3, [pc, #156]	; (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800725e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007260:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007264:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007268:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800726c:	d02a      	beq.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800726e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007270:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007274:	d838      	bhi.n	80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8007276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007278:	2b00      	cmp	r3, #0
 800727a:	d004      	beq.n	8007286 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800727c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800727e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007282:	d00d      	beq.n	80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007284:	e030      	b.n	80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007286:	4b1d      	ldr	r3, [pc, #116]	; (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800728e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007292:	d102      	bne.n	800729a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007294:	4b1a      	ldr	r3, [pc, #104]	; (8007300 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007296:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007298:	e02b      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800729a:	2300      	movs	r3, #0
 800729c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800729e:	e028      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80072a0:	4b16      	ldr	r3, [pc, #88]	; (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072ac:	d107      	bne.n	80072be <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80072ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072b2:	4618      	mov	r0, r3
 80072b4:	f000 fae4 	bl	8007880 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80072b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072bc:	e019      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072be:	2300      	movs	r3, #0
 80072c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072c2:	e016      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80072c4:	4b0d      	ldr	r3, [pc, #52]	; (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80072d0:	d107      	bne.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072d2:	f107 0318 	add.w	r3, r7, #24
 80072d6:	4618      	mov	r0, r3
 80072d8:	f000 f82a 	bl	8007330 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072e0:	e007      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072e2:	2300      	movs	r3, #0
 80072e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072e6:	e004      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80072e8:	2300      	movs	r3, #0
 80072ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072ec:	e001      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80072ee:	2300      	movs	r3, #0
 80072f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 80072f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3740      	adds	r7, #64	; 0x40
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}
 80072fc:	58024400 	.word	0x58024400
 8007300:	007a1200 	.word	0x007a1200

08007304 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007308:	f7fe f816 	bl	8005338 <HAL_RCC_GetHCLKFreq>
 800730c:	4602      	mov	r2, r0
 800730e:	4b06      	ldr	r3, [pc, #24]	; (8007328 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007310:	6a1b      	ldr	r3, [r3, #32]
 8007312:	091b      	lsrs	r3, r3, #4
 8007314:	f003 0307 	and.w	r3, r3, #7
 8007318:	4904      	ldr	r1, [pc, #16]	; (800732c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800731a:	5ccb      	ldrb	r3, [r1, r3]
 800731c:	f003 031f 	and.w	r3, r3, #31
 8007320:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007324:	4618      	mov	r0, r3
 8007326:	bd80      	pop	{r7, pc}
 8007328:	58024400 	.word	0x58024400
 800732c:	0800dd0c 	.word	0x0800dd0c

08007330 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007330:	b480      	push	{r7}
 8007332:	b089      	sub	sp, #36	; 0x24
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007338:	4ba1      	ldr	r3, [pc, #644]	; (80075c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800733a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800733c:	f003 0303 	and.w	r3, r3, #3
 8007340:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007342:	4b9f      	ldr	r3, [pc, #636]	; (80075c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007346:	0b1b      	lsrs	r3, r3, #12
 8007348:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800734c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800734e:	4b9c      	ldr	r3, [pc, #624]	; (80075c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007352:	091b      	lsrs	r3, r3, #4
 8007354:	f003 0301 	and.w	r3, r3, #1
 8007358:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800735a:	4b99      	ldr	r3, [pc, #612]	; (80075c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800735c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800735e:	08db      	lsrs	r3, r3, #3
 8007360:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007364:	693a      	ldr	r2, [r7, #16]
 8007366:	fb02 f303 	mul.w	r3, r2, r3
 800736a:	ee07 3a90 	vmov	s15, r3
 800736e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007372:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	2b00      	cmp	r3, #0
 800737a:	f000 8111 	beq.w	80075a0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	2b02      	cmp	r3, #2
 8007382:	f000 8083 	beq.w	800748c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	2b02      	cmp	r3, #2
 800738a:	f200 80a1 	bhi.w	80074d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800738e:	69bb      	ldr	r3, [r7, #24]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d003      	beq.n	800739c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007394:	69bb      	ldr	r3, [r7, #24]
 8007396:	2b01      	cmp	r3, #1
 8007398:	d056      	beq.n	8007448 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800739a:	e099      	b.n	80074d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800739c:	4b88      	ldr	r3, [pc, #544]	; (80075c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f003 0320 	and.w	r3, r3, #32
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d02d      	beq.n	8007404 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80073a8:	4b85      	ldr	r3, [pc, #532]	; (80075c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	08db      	lsrs	r3, r3, #3
 80073ae:	f003 0303 	and.w	r3, r3, #3
 80073b2:	4a84      	ldr	r2, [pc, #528]	; (80075c4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80073b4:	fa22 f303 	lsr.w	r3, r2, r3
 80073b8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	ee07 3a90 	vmov	s15, r3
 80073c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	ee07 3a90 	vmov	s15, r3
 80073ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073d2:	4b7b      	ldr	r3, [pc, #492]	; (80075c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073da:	ee07 3a90 	vmov	s15, r3
 80073de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80073e6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80075c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80073ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073fe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007402:	e087      	b.n	8007514 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	ee07 3a90 	vmov	s15, r3
 800740a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800740e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80075cc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007416:	4b6a      	ldr	r3, [pc, #424]	; (80075c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800741a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800741e:	ee07 3a90 	vmov	s15, r3
 8007422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007426:	ed97 6a03 	vldr	s12, [r7, #12]
 800742a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80075c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800742e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007432:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007436:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800743a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800743e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007442:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007446:	e065      	b.n	8007514 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	ee07 3a90 	vmov	s15, r3
 800744e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007452:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80075d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007456:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800745a:	4b59      	ldr	r3, [pc, #356]	; (80075c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800745c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800745e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007462:	ee07 3a90 	vmov	s15, r3
 8007466:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800746a:	ed97 6a03 	vldr	s12, [r7, #12]
 800746e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80075c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007472:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007476:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800747a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800747e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007486:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800748a:	e043      	b.n	8007514 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	ee07 3a90 	vmov	s15, r3
 8007492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007496:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80075d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800749a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800749e:	4b48      	ldr	r3, [pc, #288]	; (80075c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074a6:	ee07 3a90 	vmov	s15, r3
 80074aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80074b2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80075c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80074b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074ce:	e021      	b.n	8007514 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	ee07 3a90 	vmov	s15, r3
 80074d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074da:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80075d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80074de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074e2:	4b37      	ldr	r3, [pc, #220]	; (80075c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074ea:	ee07 3a90 	vmov	s15, r3
 80074ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80074f6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80075c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80074fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007502:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007506:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800750a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800750e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007512:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007514:	4b2a      	ldr	r3, [pc, #168]	; (80075c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007518:	0a5b      	lsrs	r3, r3, #9
 800751a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800751e:	ee07 3a90 	vmov	s15, r3
 8007522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007526:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800752a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800752e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007532:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007536:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800753a:	ee17 2a90 	vmov	r2, s15
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007542:	4b1f      	ldr	r3, [pc, #124]	; (80075c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007546:	0c1b      	lsrs	r3, r3, #16
 8007548:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800754c:	ee07 3a90 	vmov	s15, r3
 8007550:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007554:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007558:	ee37 7a87 	vadd.f32	s14, s15, s14
 800755c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007560:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007564:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007568:	ee17 2a90 	vmov	r2, s15
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007570:	4b13      	ldr	r3, [pc, #76]	; (80075c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007574:	0e1b      	lsrs	r3, r3, #24
 8007576:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800757a:	ee07 3a90 	vmov	s15, r3
 800757e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007582:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007586:	ee37 7a87 	vadd.f32	s14, s15, s14
 800758a:	edd7 6a07 	vldr	s13, [r7, #28]
 800758e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007592:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007596:	ee17 2a90 	vmov	r2, s15
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800759e:	e008      	b.n	80075b2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2200      	movs	r2, #0
 80075aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2200      	movs	r2, #0
 80075b0:	609a      	str	r2, [r3, #8]
}
 80075b2:	bf00      	nop
 80075b4:	3724      	adds	r7, #36	; 0x24
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr
 80075be:	bf00      	nop
 80075c0:	58024400 	.word	0x58024400
 80075c4:	03d09000 	.word	0x03d09000
 80075c8:	46000000 	.word	0x46000000
 80075cc:	4c742400 	.word	0x4c742400
 80075d0:	4a742400 	.word	0x4a742400
 80075d4:	4af42400 	.word	0x4af42400

080075d8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80075d8:	b480      	push	{r7}
 80075da:	b089      	sub	sp, #36	; 0x24
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80075e0:	4ba1      	ldr	r3, [pc, #644]	; (8007868 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e4:	f003 0303 	and.w	r3, r3, #3
 80075e8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80075ea:	4b9f      	ldr	r3, [pc, #636]	; (8007868 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ee:	0d1b      	lsrs	r3, r3, #20
 80075f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075f4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80075f6:	4b9c      	ldr	r3, [pc, #624]	; (8007868 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075fa:	0a1b      	lsrs	r3, r3, #8
 80075fc:	f003 0301 	and.w	r3, r3, #1
 8007600:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007602:	4b99      	ldr	r3, [pc, #612]	; (8007868 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007606:	08db      	lsrs	r3, r3, #3
 8007608:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800760c:	693a      	ldr	r2, [r7, #16]
 800760e:	fb02 f303 	mul.w	r3, r2, r3
 8007612:	ee07 3a90 	vmov	s15, r3
 8007616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800761a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	2b00      	cmp	r3, #0
 8007622:	f000 8111 	beq.w	8007848 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007626:	69bb      	ldr	r3, [r7, #24]
 8007628:	2b02      	cmp	r3, #2
 800762a:	f000 8083 	beq.w	8007734 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800762e:	69bb      	ldr	r3, [r7, #24]
 8007630:	2b02      	cmp	r3, #2
 8007632:	f200 80a1 	bhi.w	8007778 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d003      	beq.n	8007644 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800763c:	69bb      	ldr	r3, [r7, #24]
 800763e:	2b01      	cmp	r3, #1
 8007640:	d056      	beq.n	80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007642:	e099      	b.n	8007778 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007644:	4b88      	ldr	r3, [pc, #544]	; (8007868 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f003 0320 	and.w	r3, r3, #32
 800764c:	2b00      	cmp	r3, #0
 800764e:	d02d      	beq.n	80076ac <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007650:	4b85      	ldr	r3, [pc, #532]	; (8007868 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	08db      	lsrs	r3, r3, #3
 8007656:	f003 0303 	and.w	r3, r3, #3
 800765a:	4a84      	ldr	r2, [pc, #528]	; (800786c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800765c:	fa22 f303 	lsr.w	r3, r2, r3
 8007660:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	ee07 3a90 	vmov	s15, r3
 8007668:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	ee07 3a90 	vmov	s15, r3
 8007672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007676:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800767a:	4b7b      	ldr	r3, [pc, #492]	; (8007868 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800767c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800767e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007682:	ee07 3a90 	vmov	s15, r3
 8007686:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800768a:	ed97 6a03 	vldr	s12, [r7, #12]
 800768e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007870 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007692:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007696:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800769a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800769e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076a6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80076aa:	e087      	b.n	80077bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	ee07 3a90 	vmov	s15, r3
 80076b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076b6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007874 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80076ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076be:	4b6a      	ldr	r3, [pc, #424]	; (8007868 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076c6:	ee07 3a90 	vmov	s15, r3
 80076ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80076d2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007870 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80076d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076ee:	e065      	b.n	80077bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	ee07 3a90 	vmov	s15, r3
 80076f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076fa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007878 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80076fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007702:	4b59      	ldr	r3, [pc, #356]	; (8007868 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800770a:	ee07 3a90 	vmov	s15, r3
 800770e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007712:	ed97 6a03 	vldr	s12, [r7, #12]
 8007716:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007870 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800771a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800771e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007722:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800772a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800772e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007732:	e043      	b.n	80077bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	ee07 3a90 	vmov	s15, r3
 800773a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800773e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800787c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007742:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007746:	4b48      	ldr	r3, [pc, #288]	; (8007868 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800774a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800774e:	ee07 3a90 	vmov	s15, r3
 8007752:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007756:	ed97 6a03 	vldr	s12, [r7, #12]
 800775a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007870 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800775e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007762:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007766:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800776a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800776e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007772:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007776:	e021      	b.n	80077bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	ee07 3a90 	vmov	s15, r3
 800777e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007782:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007878 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007786:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800778a:	4b37      	ldr	r3, [pc, #220]	; (8007868 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800778c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800778e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007792:	ee07 3a90 	vmov	s15, r3
 8007796:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800779a:	ed97 6a03 	vldr	s12, [r7, #12]
 800779e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007870 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80077a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077ba:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80077bc:	4b2a      	ldr	r3, [pc, #168]	; (8007868 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c0:	0a5b      	lsrs	r3, r3, #9
 80077c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077c6:	ee07 3a90 	vmov	s15, r3
 80077ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80077da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077e2:	ee17 2a90 	vmov	r2, s15
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80077ea:	4b1f      	ldr	r3, [pc, #124]	; (8007868 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ee:	0c1b      	lsrs	r3, r3, #16
 80077f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077f4:	ee07 3a90 	vmov	s15, r3
 80077f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007800:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007804:	edd7 6a07 	vldr	s13, [r7, #28]
 8007808:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800780c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007810:	ee17 2a90 	vmov	r2, s15
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007818:	4b13      	ldr	r3, [pc, #76]	; (8007868 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800781a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800781c:	0e1b      	lsrs	r3, r3, #24
 800781e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007822:	ee07 3a90 	vmov	s15, r3
 8007826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800782a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800782e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007832:	edd7 6a07 	vldr	s13, [r7, #28]
 8007836:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800783a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800783e:	ee17 2a90 	vmov	r2, s15
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007846:	e008      	b.n	800785a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	609a      	str	r2, [r3, #8]
}
 800785a:	bf00      	nop
 800785c:	3724      	adds	r7, #36	; 0x24
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr
 8007866:	bf00      	nop
 8007868:	58024400 	.word	0x58024400
 800786c:	03d09000 	.word	0x03d09000
 8007870:	46000000 	.word	0x46000000
 8007874:	4c742400 	.word	0x4c742400
 8007878:	4a742400 	.word	0x4a742400
 800787c:	4af42400 	.word	0x4af42400

08007880 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007880:	b480      	push	{r7}
 8007882:	b089      	sub	sp, #36	; 0x24
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007888:	4ba0      	ldr	r3, [pc, #640]	; (8007b0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800788a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800788c:	f003 0303 	and.w	r3, r3, #3
 8007890:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007892:	4b9e      	ldr	r3, [pc, #632]	; (8007b0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007896:	091b      	lsrs	r3, r3, #4
 8007898:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800789c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800789e:	4b9b      	ldr	r3, [pc, #620]	; (8007b0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a2:	f003 0301 	and.w	r3, r3, #1
 80078a6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80078a8:	4b98      	ldr	r3, [pc, #608]	; (8007b0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078ac:	08db      	lsrs	r3, r3, #3
 80078ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80078b2:	693a      	ldr	r2, [r7, #16]
 80078b4:	fb02 f303 	mul.w	r3, r2, r3
 80078b8:	ee07 3a90 	vmov	s15, r3
 80078bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078c0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	f000 8111 	beq.w	8007aee <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80078cc:	69bb      	ldr	r3, [r7, #24]
 80078ce:	2b02      	cmp	r3, #2
 80078d0:	f000 8083 	beq.w	80079da <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80078d4:	69bb      	ldr	r3, [r7, #24]
 80078d6:	2b02      	cmp	r3, #2
 80078d8:	f200 80a1 	bhi.w	8007a1e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80078dc:	69bb      	ldr	r3, [r7, #24]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d003      	beq.n	80078ea <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d056      	beq.n	8007996 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80078e8:	e099      	b.n	8007a1e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078ea:	4b88      	ldr	r3, [pc, #544]	; (8007b0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f003 0320 	and.w	r3, r3, #32
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d02d      	beq.n	8007952 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80078f6:	4b85      	ldr	r3, [pc, #532]	; (8007b0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	08db      	lsrs	r3, r3, #3
 80078fc:	f003 0303 	and.w	r3, r3, #3
 8007900:	4a83      	ldr	r2, [pc, #524]	; (8007b10 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007902:	fa22 f303 	lsr.w	r3, r2, r3
 8007906:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	ee07 3a90 	vmov	s15, r3
 800790e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	ee07 3a90 	vmov	s15, r3
 8007918:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800791c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007920:	4b7a      	ldr	r3, [pc, #488]	; (8007b0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007924:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007928:	ee07 3a90 	vmov	s15, r3
 800792c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007930:	ed97 6a03 	vldr	s12, [r7, #12]
 8007934:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007b14 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007938:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800793c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007940:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007944:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007948:	ee67 7a27 	vmul.f32	s15, s14, s15
 800794c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007950:	e087      	b.n	8007a62 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	ee07 3a90 	vmov	s15, r3
 8007958:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800795c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007b18 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007960:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007964:	4b69      	ldr	r3, [pc, #420]	; (8007b0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800796c:	ee07 3a90 	vmov	s15, r3
 8007970:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007974:	ed97 6a03 	vldr	s12, [r7, #12]
 8007978:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007b14 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800797c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007980:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007984:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007988:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800798c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007990:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007994:	e065      	b.n	8007a62 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	ee07 3a90 	vmov	s15, r3
 800799c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079a0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007b1c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80079a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079a8:	4b58      	ldr	r3, [pc, #352]	; (8007b0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079b0:	ee07 3a90 	vmov	s15, r3
 80079b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80079bc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007b14 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80079c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079d8:	e043      	b.n	8007a62 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	ee07 3a90 	vmov	s15, r3
 80079e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079e4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007b20 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80079e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079ec:	4b47      	ldr	r3, [pc, #284]	; (8007b0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079f4:	ee07 3a90 	vmov	s15, r3
 80079f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a00:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007b14 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007a04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a18:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a1c:	e021      	b.n	8007a62 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	ee07 3a90 	vmov	s15, r3
 8007a24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a28:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007b18 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007a2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a30:	4b36      	ldr	r3, [pc, #216]	; (8007b0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a38:	ee07 3a90 	vmov	s15, r3
 8007a3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a40:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a44:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007b14 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007a48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a5c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a60:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007a62:	4b2a      	ldr	r3, [pc, #168]	; (8007b0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a66:	0a5b      	lsrs	r3, r3, #9
 8007a68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a6c:	ee07 3a90 	vmov	s15, r3
 8007a70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a78:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a88:	ee17 2a90 	vmov	r2, s15
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007a90:	4b1e      	ldr	r3, [pc, #120]	; (8007b0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a94:	0c1b      	lsrs	r3, r3, #16
 8007a96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a9a:	ee07 3a90 	vmov	s15, r3
 8007a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aa2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007aa6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007aaa:	edd7 6a07 	vldr	s13, [r7, #28]
 8007aae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ab2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ab6:	ee17 2a90 	vmov	r2, s15
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007abe:	4b13      	ldr	r3, [pc, #76]	; (8007b0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ac2:	0e1b      	lsrs	r3, r3, #24
 8007ac4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ac8:	ee07 3a90 	vmov	s15, r3
 8007acc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ad0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ad4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ad8:	edd7 6a07 	vldr	s13, [r7, #28]
 8007adc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ae0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ae4:	ee17 2a90 	vmov	r2, s15
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007aec:	e008      	b.n	8007b00 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2200      	movs	r2, #0
 8007af2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	609a      	str	r2, [r3, #8]
}
 8007b00:	bf00      	nop
 8007b02:	3724      	adds	r7, #36	; 0x24
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr
 8007b0c:	58024400 	.word	0x58024400
 8007b10:	03d09000 	.word	0x03d09000
 8007b14:	46000000 	.word	0x46000000
 8007b18:	4c742400 	.word	0x4c742400
 8007b1c:	4a742400 	.word	0x4a742400
 8007b20:	4af42400 	.word	0x4af42400

08007b24 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007b32:	4b53      	ldr	r3, [pc, #332]	; (8007c80 <RCCEx_PLL2_Config+0x15c>)
 8007b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b36:	f003 0303 	and.w	r3, r3, #3
 8007b3a:	2b03      	cmp	r3, #3
 8007b3c:	d101      	bne.n	8007b42 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	e099      	b.n	8007c76 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007b42:	4b4f      	ldr	r3, [pc, #316]	; (8007c80 <RCCEx_PLL2_Config+0x15c>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a4e      	ldr	r2, [pc, #312]	; (8007c80 <RCCEx_PLL2_Config+0x15c>)
 8007b48:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007b4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b4e:	f7fa f847 	bl	8001be0 <HAL_GetTick>
 8007b52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007b54:	e008      	b.n	8007b68 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007b56:	f7fa f843 	bl	8001be0 <HAL_GetTick>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	1ad3      	subs	r3, r2, r3
 8007b60:	2b02      	cmp	r3, #2
 8007b62:	d901      	bls.n	8007b68 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007b64:	2303      	movs	r3, #3
 8007b66:	e086      	b.n	8007c76 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007b68:	4b45      	ldr	r3, [pc, #276]	; (8007c80 <RCCEx_PLL2_Config+0x15c>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d1f0      	bne.n	8007b56 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007b74:	4b42      	ldr	r3, [pc, #264]	; (8007c80 <RCCEx_PLL2_Config+0x15c>)
 8007b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b78:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	031b      	lsls	r3, r3, #12
 8007b82:	493f      	ldr	r1, [pc, #252]	; (8007c80 <RCCEx_PLL2_Config+0x15c>)
 8007b84:	4313      	orrs	r3, r2
 8007b86:	628b      	str	r3, [r1, #40]	; 0x28
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	3b01      	subs	r3, #1
 8007b8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	3b01      	subs	r3, #1
 8007b98:	025b      	lsls	r3, r3, #9
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	431a      	orrs	r2, r3
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	3b01      	subs	r3, #1
 8007ba4:	041b      	lsls	r3, r3, #16
 8007ba6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007baa:	431a      	orrs	r2, r3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	691b      	ldr	r3, [r3, #16]
 8007bb0:	3b01      	subs	r3, #1
 8007bb2:	061b      	lsls	r3, r3, #24
 8007bb4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007bb8:	4931      	ldr	r1, [pc, #196]	; (8007c80 <RCCEx_PLL2_Config+0x15c>)
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007bbe:	4b30      	ldr	r3, [pc, #192]	; (8007c80 <RCCEx_PLL2_Config+0x15c>)
 8007bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	695b      	ldr	r3, [r3, #20]
 8007bca:	492d      	ldr	r1, [pc, #180]	; (8007c80 <RCCEx_PLL2_Config+0x15c>)
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007bd0:	4b2b      	ldr	r3, [pc, #172]	; (8007c80 <RCCEx_PLL2_Config+0x15c>)
 8007bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd4:	f023 0220 	bic.w	r2, r3, #32
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	699b      	ldr	r3, [r3, #24]
 8007bdc:	4928      	ldr	r1, [pc, #160]	; (8007c80 <RCCEx_PLL2_Config+0x15c>)
 8007bde:	4313      	orrs	r3, r2
 8007be0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007be2:	4b27      	ldr	r3, [pc, #156]	; (8007c80 <RCCEx_PLL2_Config+0x15c>)
 8007be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be6:	4a26      	ldr	r2, [pc, #152]	; (8007c80 <RCCEx_PLL2_Config+0x15c>)
 8007be8:	f023 0310 	bic.w	r3, r3, #16
 8007bec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007bee:	4b24      	ldr	r3, [pc, #144]	; (8007c80 <RCCEx_PLL2_Config+0x15c>)
 8007bf0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007bf2:	4b24      	ldr	r3, [pc, #144]	; (8007c84 <RCCEx_PLL2_Config+0x160>)
 8007bf4:	4013      	ands	r3, r2
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	69d2      	ldr	r2, [r2, #28]
 8007bfa:	00d2      	lsls	r2, r2, #3
 8007bfc:	4920      	ldr	r1, [pc, #128]	; (8007c80 <RCCEx_PLL2_Config+0x15c>)
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007c02:	4b1f      	ldr	r3, [pc, #124]	; (8007c80 <RCCEx_PLL2_Config+0x15c>)
 8007c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c06:	4a1e      	ldr	r2, [pc, #120]	; (8007c80 <RCCEx_PLL2_Config+0x15c>)
 8007c08:	f043 0310 	orr.w	r3, r3, #16
 8007c0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d106      	bne.n	8007c22 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007c14:	4b1a      	ldr	r3, [pc, #104]	; (8007c80 <RCCEx_PLL2_Config+0x15c>)
 8007c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c18:	4a19      	ldr	r2, [pc, #100]	; (8007c80 <RCCEx_PLL2_Config+0x15c>)
 8007c1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007c20:	e00f      	b.n	8007c42 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d106      	bne.n	8007c36 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007c28:	4b15      	ldr	r3, [pc, #84]	; (8007c80 <RCCEx_PLL2_Config+0x15c>)
 8007c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c2c:	4a14      	ldr	r2, [pc, #80]	; (8007c80 <RCCEx_PLL2_Config+0x15c>)
 8007c2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c32:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007c34:	e005      	b.n	8007c42 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007c36:	4b12      	ldr	r3, [pc, #72]	; (8007c80 <RCCEx_PLL2_Config+0x15c>)
 8007c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c3a:	4a11      	ldr	r2, [pc, #68]	; (8007c80 <RCCEx_PLL2_Config+0x15c>)
 8007c3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007c40:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007c42:	4b0f      	ldr	r3, [pc, #60]	; (8007c80 <RCCEx_PLL2_Config+0x15c>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a0e      	ldr	r2, [pc, #56]	; (8007c80 <RCCEx_PLL2_Config+0x15c>)
 8007c48:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007c4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c4e:	f7f9 ffc7 	bl	8001be0 <HAL_GetTick>
 8007c52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007c54:	e008      	b.n	8007c68 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007c56:	f7f9 ffc3 	bl	8001be0 <HAL_GetTick>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	1ad3      	subs	r3, r2, r3
 8007c60:	2b02      	cmp	r3, #2
 8007c62:	d901      	bls.n	8007c68 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007c64:	2303      	movs	r3, #3
 8007c66:	e006      	b.n	8007c76 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007c68:	4b05      	ldr	r3, [pc, #20]	; (8007c80 <RCCEx_PLL2_Config+0x15c>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d0f0      	beq.n	8007c56 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3710      	adds	r7, #16
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
 8007c7e:	bf00      	nop
 8007c80:	58024400 	.word	0x58024400
 8007c84:	ffff0007 	.word	0xffff0007

08007c88 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007c92:	2300      	movs	r3, #0
 8007c94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007c96:	4b53      	ldr	r3, [pc, #332]	; (8007de4 <RCCEx_PLL3_Config+0x15c>)
 8007c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c9a:	f003 0303 	and.w	r3, r3, #3
 8007c9e:	2b03      	cmp	r3, #3
 8007ca0:	d101      	bne.n	8007ca6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e099      	b.n	8007dda <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007ca6:	4b4f      	ldr	r3, [pc, #316]	; (8007de4 <RCCEx_PLL3_Config+0x15c>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a4e      	ldr	r2, [pc, #312]	; (8007de4 <RCCEx_PLL3_Config+0x15c>)
 8007cac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007cb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cb2:	f7f9 ff95 	bl	8001be0 <HAL_GetTick>
 8007cb6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007cb8:	e008      	b.n	8007ccc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007cba:	f7f9 ff91 	bl	8001be0 <HAL_GetTick>
 8007cbe:	4602      	mov	r2, r0
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	1ad3      	subs	r3, r2, r3
 8007cc4:	2b02      	cmp	r3, #2
 8007cc6:	d901      	bls.n	8007ccc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007cc8:	2303      	movs	r3, #3
 8007cca:	e086      	b.n	8007dda <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007ccc:	4b45      	ldr	r3, [pc, #276]	; (8007de4 <RCCEx_PLL3_Config+0x15c>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d1f0      	bne.n	8007cba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007cd8:	4b42      	ldr	r3, [pc, #264]	; (8007de4 <RCCEx_PLL3_Config+0x15c>)
 8007cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cdc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	051b      	lsls	r3, r3, #20
 8007ce6:	493f      	ldr	r1, [pc, #252]	; (8007de4 <RCCEx_PLL3_Config+0x15c>)
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	628b      	str	r3, [r1, #40]	; 0x28
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	3b01      	subs	r3, #1
 8007cf2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	689b      	ldr	r3, [r3, #8]
 8007cfa:	3b01      	subs	r3, #1
 8007cfc:	025b      	lsls	r3, r3, #9
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	431a      	orrs	r2, r3
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	3b01      	subs	r3, #1
 8007d08:	041b      	lsls	r3, r3, #16
 8007d0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007d0e:	431a      	orrs	r2, r3
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	691b      	ldr	r3, [r3, #16]
 8007d14:	3b01      	subs	r3, #1
 8007d16:	061b      	lsls	r3, r3, #24
 8007d18:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007d1c:	4931      	ldr	r1, [pc, #196]	; (8007de4 <RCCEx_PLL3_Config+0x15c>)
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007d22:	4b30      	ldr	r3, [pc, #192]	; (8007de4 <RCCEx_PLL3_Config+0x15c>)
 8007d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d26:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	695b      	ldr	r3, [r3, #20]
 8007d2e:	492d      	ldr	r1, [pc, #180]	; (8007de4 <RCCEx_PLL3_Config+0x15c>)
 8007d30:	4313      	orrs	r3, r2
 8007d32:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007d34:	4b2b      	ldr	r3, [pc, #172]	; (8007de4 <RCCEx_PLL3_Config+0x15c>)
 8007d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d38:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	699b      	ldr	r3, [r3, #24]
 8007d40:	4928      	ldr	r1, [pc, #160]	; (8007de4 <RCCEx_PLL3_Config+0x15c>)
 8007d42:	4313      	orrs	r3, r2
 8007d44:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007d46:	4b27      	ldr	r3, [pc, #156]	; (8007de4 <RCCEx_PLL3_Config+0x15c>)
 8007d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d4a:	4a26      	ldr	r2, [pc, #152]	; (8007de4 <RCCEx_PLL3_Config+0x15c>)
 8007d4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007d52:	4b24      	ldr	r3, [pc, #144]	; (8007de4 <RCCEx_PLL3_Config+0x15c>)
 8007d54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d56:	4b24      	ldr	r3, [pc, #144]	; (8007de8 <RCCEx_PLL3_Config+0x160>)
 8007d58:	4013      	ands	r3, r2
 8007d5a:	687a      	ldr	r2, [r7, #4]
 8007d5c:	69d2      	ldr	r2, [r2, #28]
 8007d5e:	00d2      	lsls	r2, r2, #3
 8007d60:	4920      	ldr	r1, [pc, #128]	; (8007de4 <RCCEx_PLL3_Config+0x15c>)
 8007d62:	4313      	orrs	r3, r2
 8007d64:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007d66:	4b1f      	ldr	r3, [pc, #124]	; (8007de4 <RCCEx_PLL3_Config+0x15c>)
 8007d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d6a:	4a1e      	ldr	r2, [pc, #120]	; (8007de4 <RCCEx_PLL3_Config+0x15c>)
 8007d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d106      	bne.n	8007d86 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007d78:	4b1a      	ldr	r3, [pc, #104]	; (8007de4 <RCCEx_PLL3_Config+0x15c>)
 8007d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d7c:	4a19      	ldr	r2, [pc, #100]	; (8007de4 <RCCEx_PLL3_Config+0x15c>)
 8007d7e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007d82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007d84:	e00f      	b.n	8007da6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d106      	bne.n	8007d9a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007d8c:	4b15      	ldr	r3, [pc, #84]	; (8007de4 <RCCEx_PLL3_Config+0x15c>)
 8007d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d90:	4a14      	ldr	r2, [pc, #80]	; (8007de4 <RCCEx_PLL3_Config+0x15c>)
 8007d92:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007d96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007d98:	e005      	b.n	8007da6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007d9a:	4b12      	ldr	r3, [pc, #72]	; (8007de4 <RCCEx_PLL3_Config+0x15c>)
 8007d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d9e:	4a11      	ldr	r2, [pc, #68]	; (8007de4 <RCCEx_PLL3_Config+0x15c>)
 8007da0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007da4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007da6:	4b0f      	ldr	r3, [pc, #60]	; (8007de4 <RCCEx_PLL3_Config+0x15c>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a0e      	ldr	r2, [pc, #56]	; (8007de4 <RCCEx_PLL3_Config+0x15c>)
 8007dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007db0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007db2:	f7f9 ff15 	bl	8001be0 <HAL_GetTick>
 8007db6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007db8:	e008      	b.n	8007dcc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007dba:	f7f9 ff11 	bl	8001be0 <HAL_GetTick>
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	1ad3      	subs	r3, r2, r3
 8007dc4:	2b02      	cmp	r3, #2
 8007dc6:	d901      	bls.n	8007dcc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007dc8:	2303      	movs	r3, #3
 8007dca:	e006      	b.n	8007dda <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007dcc:	4b05      	ldr	r3, [pc, #20]	; (8007de4 <RCCEx_PLL3_Config+0x15c>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d0f0      	beq.n	8007dba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3710      	adds	r7, #16
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	bf00      	nop
 8007de4:	58024400 	.word	0x58024400
 8007de8:	ffff0007 	.word	0xffff0007

08007dec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b082      	sub	sp, #8
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d101      	bne.n	8007dfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	e042      	b.n	8007e84 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d106      	bne.n	8007e16 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f7f9 fc4f 	bl	80016b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2224      	movs	r2, #36	; 0x24
 8007e1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f022 0201 	bic.w	r2, r2, #1
 8007e2c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 f8ba 	bl	8007fa8 <UART_SetConfig>
 8007e34:	4603      	mov	r3, r0
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d101      	bne.n	8007e3e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e022      	b.n	8007e84 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d002      	beq.n	8007e4c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 fe16 	bl	8008a78 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	685a      	ldr	r2, [r3, #4]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	689a      	ldr	r2, [r3, #8]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f042 0201 	orr.w	r2, r2, #1
 8007e7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f000 fe9d 	bl	8008bbc <UART_CheckIdleState>
 8007e82:	4603      	mov	r3, r0
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3708      	adds	r7, #8
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b08a      	sub	sp, #40	; 0x28
 8007e90:	af02      	add	r7, sp, #8
 8007e92:	60f8      	str	r0, [r7, #12]
 8007e94:	60b9      	str	r1, [r7, #8]
 8007e96:	603b      	str	r3, [r7, #0]
 8007e98:	4613      	mov	r3, r2
 8007e9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ea2:	2b20      	cmp	r3, #32
 8007ea4:	d17b      	bne.n	8007f9e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d002      	beq.n	8007eb2 <HAL_UART_Transmit+0x26>
 8007eac:	88fb      	ldrh	r3, [r7, #6]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d101      	bne.n	8007eb6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e074      	b.n	8007fa0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2221      	movs	r2, #33	; 0x21
 8007ec2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ec6:	f7f9 fe8b 	bl	8001be0 <HAL_GetTick>
 8007eca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	88fa      	ldrh	r2, [r7, #6]
 8007ed0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	88fa      	ldrh	r2, [r7, #6]
 8007ed8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ee4:	d108      	bne.n	8007ef8 <HAL_UART_Transmit+0x6c>
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	691b      	ldr	r3, [r3, #16]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d104      	bne.n	8007ef8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	61bb      	str	r3, [r7, #24]
 8007ef6:	e003      	b.n	8007f00 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007efc:	2300      	movs	r3, #0
 8007efe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007f00:	e030      	b.n	8007f64 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	9300      	str	r3, [sp, #0]
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	2180      	movs	r1, #128	; 0x80
 8007f0c:	68f8      	ldr	r0, [r7, #12]
 8007f0e:	f000 feff 	bl	8008d10 <UART_WaitOnFlagUntilTimeout>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d005      	beq.n	8007f24 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2220      	movs	r2, #32
 8007f1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8007f20:	2303      	movs	r3, #3
 8007f22:	e03d      	b.n	8007fa0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007f24:	69fb      	ldr	r3, [r7, #28]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d10b      	bne.n	8007f42 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f2a:	69bb      	ldr	r3, [r7, #24]
 8007f2c:	881b      	ldrh	r3, [r3, #0]
 8007f2e:	461a      	mov	r2, r3
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f38:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007f3a:	69bb      	ldr	r3, [r7, #24]
 8007f3c:	3302      	adds	r3, #2
 8007f3e:	61bb      	str	r3, [r7, #24]
 8007f40:	e007      	b.n	8007f52 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f42:	69fb      	ldr	r3, [r7, #28]
 8007f44:	781a      	ldrb	r2, [r3, #0]
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	3301      	adds	r3, #1
 8007f50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007f58:	b29b      	uxth	r3, r3
 8007f5a:	3b01      	subs	r3, #1
 8007f5c:	b29a      	uxth	r2, r3
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d1c8      	bne.n	8007f02 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	9300      	str	r3, [sp, #0]
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	2200      	movs	r2, #0
 8007f78:	2140      	movs	r1, #64	; 0x40
 8007f7a:	68f8      	ldr	r0, [r7, #12]
 8007f7c:	f000 fec8 	bl	8008d10 <UART_WaitOnFlagUntilTimeout>
 8007f80:	4603      	mov	r3, r0
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d005      	beq.n	8007f92 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2220      	movs	r2, #32
 8007f8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8007f8e:	2303      	movs	r3, #3
 8007f90:	e006      	b.n	8007fa0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2220      	movs	r2, #32
 8007f96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	e000      	b.n	8007fa0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007f9e:	2302      	movs	r3, #2
  }
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3720      	adds	r7, #32
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007fa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007fac:	b092      	sub	sp, #72	; 0x48
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	689a      	ldr	r2, [r3, #8]
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	691b      	ldr	r3, [r3, #16]
 8007fc0:	431a      	orrs	r2, r3
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	695b      	ldr	r3, [r3, #20]
 8007fc6:	431a      	orrs	r2, r3
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	69db      	ldr	r3, [r3, #28]
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	681a      	ldr	r2, [r3, #0]
 8007fd6:	4bbe      	ldr	r3, [pc, #760]	; (80082d0 <UART_SetConfig+0x328>)
 8007fd8:	4013      	ands	r3, r2
 8007fda:	697a      	ldr	r2, [r7, #20]
 8007fdc:	6812      	ldr	r2, [r2, #0]
 8007fde:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007fe0:	430b      	orrs	r3, r1
 8007fe2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	68da      	ldr	r2, [r3, #12]
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	430a      	orrs	r2, r1
 8007ff8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	699b      	ldr	r3, [r3, #24]
 8007ffe:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4ab3      	ldr	r2, [pc, #716]	; (80082d4 <UART_SetConfig+0x32c>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d004      	beq.n	8008014 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	6a1b      	ldr	r3, [r3, #32]
 800800e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008010:	4313      	orrs	r3, r2
 8008012:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	689a      	ldr	r2, [r3, #8]
 800801a:	4baf      	ldr	r3, [pc, #700]	; (80082d8 <UART_SetConfig+0x330>)
 800801c:	4013      	ands	r3, r2
 800801e:	697a      	ldr	r2, [r7, #20]
 8008020:	6812      	ldr	r2, [r2, #0]
 8008022:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008024:	430b      	orrs	r3, r1
 8008026:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800802e:	f023 010f 	bic.w	r1, r3, #15
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	430a      	orrs	r2, r1
 800803c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4aa6      	ldr	r2, [pc, #664]	; (80082dc <UART_SetConfig+0x334>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d177      	bne.n	8008138 <UART_SetConfig+0x190>
 8008048:	4ba5      	ldr	r3, [pc, #660]	; (80082e0 <UART_SetConfig+0x338>)
 800804a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800804c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008050:	2b28      	cmp	r3, #40	; 0x28
 8008052:	d86d      	bhi.n	8008130 <UART_SetConfig+0x188>
 8008054:	a201      	add	r2, pc, #4	; (adr r2, 800805c <UART_SetConfig+0xb4>)
 8008056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800805a:	bf00      	nop
 800805c:	08008101 	.word	0x08008101
 8008060:	08008131 	.word	0x08008131
 8008064:	08008131 	.word	0x08008131
 8008068:	08008131 	.word	0x08008131
 800806c:	08008131 	.word	0x08008131
 8008070:	08008131 	.word	0x08008131
 8008074:	08008131 	.word	0x08008131
 8008078:	08008131 	.word	0x08008131
 800807c:	08008109 	.word	0x08008109
 8008080:	08008131 	.word	0x08008131
 8008084:	08008131 	.word	0x08008131
 8008088:	08008131 	.word	0x08008131
 800808c:	08008131 	.word	0x08008131
 8008090:	08008131 	.word	0x08008131
 8008094:	08008131 	.word	0x08008131
 8008098:	08008131 	.word	0x08008131
 800809c:	08008111 	.word	0x08008111
 80080a0:	08008131 	.word	0x08008131
 80080a4:	08008131 	.word	0x08008131
 80080a8:	08008131 	.word	0x08008131
 80080ac:	08008131 	.word	0x08008131
 80080b0:	08008131 	.word	0x08008131
 80080b4:	08008131 	.word	0x08008131
 80080b8:	08008131 	.word	0x08008131
 80080bc:	08008119 	.word	0x08008119
 80080c0:	08008131 	.word	0x08008131
 80080c4:	08008131 	.word	0x08008131
 80080c8:	08008131 	.word	0x08008131
 80080cc:	08008131 	.word	0x08008131
 80080d0:	08008131 	.word	0x08008131
 80080d4:	08008131 	.word	0x08008131
 80080d8:	08008131 	.word	0x08008131
 80080dc:	08008121 	.word	0x08008121
 80080e0:	08008131 	.word	0x08008131
 80080e4:	08008131 	.word	0x08008131
 80080e8:	08008131 	.word	0x08008131
 80080ec:	08008131 	.word	0x08008131
 80080f0:	08008131 	.word	0x08008131
 80080f4:	08008131 	.word	0x08008131
 80080f8:	08008131 	.word	0x08008131
 80080fc:	08008129 	.word	0x08008129
 8008100:	2301      	movs	r3, #1
 8008102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008106:	e222      	b.n	800854e <UART_SetConfig+0x5a6>
 8008108:	2304      	movs	r3, #4
 800810a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800810e:	e21e      	b.n	800854e <UART_SetConfig+0x5a6>
 8008110:	2308      	movs	r3, #8
 8008112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008116:	e21a      	b.n	800854e <UART_SetConfig+0x5a6>
 8008118:	2310      	movs	r3, #16
 800811a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800811e:	e216      	b.n	800854e <UART_SetConfig+0x5a6>
 8008120:	2320      	movs	r3, #32
 8008122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008126:	e212      	b.n	800854e <UART_SetConfig+0x5a6>
 8008128:	2340      	movs	r3, #64	; 0x40
 800812a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800812e:	e20e      	b.n	800854e <UART_SetConfig+0x5a6>
 8008130:	2380      	movs	r3, #128	; 0x80
 8008132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008136:	e20a      	b.n	800854e <UART_SetConfig+0x5a6>
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a69      	ldr	r2, [pc, #420]	; (80082e4 <UART_SetConfig+0x33c>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d130      	bne.n	80081a4 <UART_SetConfig+0x1fc>
 8008142:	4b67      	ldr	r3, [pc, #412]	; (80082e0 <UART_SetConfig+0x338>)
 8008144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008146:	f003 0307 	and.w	r3, r3, #7
 800814a:	2b05      	cmp	r3, #5
 800814c:	d826      	bhi.n	800819c <UART_SetConfig+0x1f4>
 800814e:	a201      	add	r2, pc, #4	; (adr r2, 8008154 <UART_SetConfig+0x1ac>)
 8008150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008154:	0800816d 	.word	0x0800816d
 8008158:	08008175 	.word	0x08008175
 800815c:	0800817d 	.word	0x0800817d
 8008160:	08008185 	.word	0x08008185
 8008164:	0800818d 	.word	0x0800818d
 8008168:	08008195 	.word	0x08008195
 800816c:	2300      	movs	r3, #0
 800816e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008172:	e1ec      	b.n	800854e <UART_SetConfig+0x5a6>
 8008174:	2304      	movs	r3, #4
 8008176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800817a:	e1e8      	b.n	800854e <UART_SetConfig+0x5a6>
 800817c:	2308      	movs	r3, #8
 800817e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008182:	e1e4      	b.n	800854e <UART_SetConfig+0x5a6>
 8008184:	2310      	movs	r3, #16
 8008186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800818a:	e1e0      	b.n	800854e <UART_SetConfig+0x5a6>
 800818c:	2320      	movs	r3, #32
 800818e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008192:	e1dc      	b.n	800854e <UART_SetConfig+0x5a6>
 8008194:	2340      	movs	r3, #64	; 0x40
 8008196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800819a:	e1d8      	b.n	800854e <UART_SetConfig+0x5a6>
 800819c:	2380      	movs	r3, #128	; 0x80
 800819e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081a2:	e1d4      	b.n	800854e <UART_SetConfig+0x5a6>
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a4f      	ldr	r2, [pc, #316]	; (80082e8 <UART_SetConfig+0x340>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d130      	bne.n	8008210 <UART_SetConfig+0x268>
 80081ae:	4b4c      	ldr	r3, [pc, #304]	; (80082e0 <UART_SetConfig+0x338>)
 80081b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081b2:	f003 0307 	and.w	r3, r3, #7
 80081b6:	2b05      	cmp	r3, #5
 80081b8:	d826      	bhi.n	8008208 <UART_SetConfig+0x260>
 80081ba:	a201      	add	r2, pc, #4	; (adr r2, 80081c0 <UART_SetConfig+0x218>)
 80081bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081c0:	080081d9 	.word	0x080081d9
 80081c4:	080081e1 	.word	0x080081e1
 80081c8:	080081e9 	.word	0x080081e9
 80081cc:	080081f1 	.word	0x080081f1
 80081d0:	080081f9 	.word	0x080081f9
 80081d4:	08008201 	.word	0x08008201
 80081d8:	2300      	movs	r3, #0
 80081da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081de:	e1b6      	b.n	800854e <UART_SetConfig+0x5a6>
 80081e0:	2304      	movs	r3, #4
 80081e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081e6:	e1b2      	b.n	800854e <UART_SetConfig+0x5a6>
 80081e8:	2308      	movs	r3, #8
 80081ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081ee:	e1ae      	b.n	800854e <UART_SetConfig+0x5a6>
 80081f0:	2310      	movs	r3, #16
 80081f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081f6:	e1aa      	b.n	800854e <UART_SetConfig+0x5a6>
 80081f8:	2320      	movs	r3, #32
 80081fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081fe:	e1a6      	b.n	800854e <UART_SetConfig+0x5a6>
 8008200:	2340      	movs	r3, #64	; 0x40
 8008202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008206:	e1a2      	b.n	800854e <UART_SetConfig+0x5a6>
 8008208:	2380      	movs	r3, #128	; 0x80
 800820a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800820e:	e19e      	b.n	800854e <UART_SetConfig+0x5a6>
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a35      	ldr	r2, [pc, #212]	; (80082ec <UART_SetConfig+0x344>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d130      	bne.n	800827c <UART_SetConfig+0x2d4>
 800821a:	4b31      	ldr	r3, [pc, #196]	; (80082e0 <UART_SetConfig+0x338>)
 800821c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800821e:	f003 0307 	and.w	r3, r3, #7
 8008222:	2b05      	cmp	r3, #5
 8008224:	d826      	bhi.n	8008274 <UART_SetConfig+0x2cc>
 8008226:	a201      	add	r2, pc, #4	; (adr r2, 800822c <UART_SetConfig+0x284>)
 8008228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800822c:	08008245 	.word	0x08008245
 8008230:	0800824d 	.word	0x0800824d
 8008234:	08008255 	.word	0x08008255
 8008238:	0800825d 	.word	0x0800825d
 800823c:	08008265 	.word	0x08008265
 8008240:	0800826d 	.word	0x0800826d
 8008244:	2300      	movs	r3, #0
 8008246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800824a:	e180      	b.n	800854e <UART_SetConfig+0x5a6>
 800824c:	2304      	movs	r3, #4
 800824e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008252:	e17c      	b.n	800854e <UART_SetConfig+0x5a6>
 8008254:	2308      	movs	r3, #8
 8008256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800825a:	e178      	b.n	800854e <UART_SetConfig+0x5a6>
 800825c:	2310      	movs	r3, #16
 800825e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008262:	e174      	b.n	800854e <UART_SetConfig+0x5a6>
 8008264:	2320      	movs	r3, #32
 8008266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800826a:	e170      	b.n	800854e <UART_SetConfig+0x5a6>
 800826c:	2340      	movs	r3, #64	; 0x40
 800826e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008272:	e16c      	b.n	800854e <UART_SetConfig+0x5a6>
 8008274:	2380      	movs	r3, #128	; 0x80
 8008276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800827a:	e168      	b.n	800854e <UART_SetConfig+0x5a6>
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a1b      	ldr	r2, [pc, #108]	; (80082f0 <UART_SetConfig+0x348>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d142      	bne.n	800830c <UART_SetConfig+0x364>
 8008286:	4b16      	ldr	r3, [pc, #88]	; (80082e0 <UART_SetConfig+0x338>)
 8008288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800828a:	f003 0307 	and.w	r3, r3, #7
 800828e:	2b05      	cmp	r3, #5
 8008290:	d838      	bhi.n	8008304 <UART_SetConfig+0x35c>
 8008292:	a201      	add	r2, pc, #4	; (adr r2, 8008298 <UART_SetConfig+0x2f0>)
 8008294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008298:	080082b1 	.word	0x080082b1
 800829c:	080082b9 	.word	0x080082b9
 80082a0:	080082c1 	.word	0x080082c1
 80082a4:	080082c9 	.word	0x080082c9
 80082a8:	080082f5 	.word	0x080082f5
 80082ac:	080082fd 	.word	0x080082fd
 80082b0:	2300      	movs	r3, #0
 80082b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082b6:	e14a      	b.n	800854e <UART_SetConfig+0x5a6>
 80082b8:	2304      	movs	r3, #4
 80082ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082be:	e146      	b.n	800854e <UART_SetConfig+0x5a6>
 80082c0:	2308      	movs	r3, #8
 80082c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082c6:	e142      	b.n	800854e <UART_SetConfig+0x5a6>
 80082c8:	2310      	movs	r3, #16
 80082ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082ce:	e13e      	b.n	800854e <UART_SetConfig+0x5a6>
 80082d0:	cfff69f3 	.word	0xcfff69f3
 80082d4:	58000c00 	.word	0x58000c00
 80082d8:	11fff4ff 	.word	0x11fff4ff
 80082dc:	40011000 	.word	0x40011000
 80082e0:	58024400 	.word	0x58024400
 80082e4:	40004400 	.word	0x40004400
 80082e8:	40004800 	.word	0x40004800
 80082ec:	40004c00 	.word	0x40004c00
 80082f0:	40005000 	.word	0x40005000
 80082f4:	2320      	movs	r3, #32
 80082f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082fa:	e128      	b.n	800854e <UART_SetConfig+0x5a6>
 80082fc:	2340      	movs	r3, #64	; 0x40
 80082fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008302:	e124      	b.n	800854e <UART_SetConfig+0x5a6>
 8008304:	2380      	movs	r3, #128	; 0x80
 8008306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800830a:	e120      	b.n	800854e <UART_SetConfig+0x5a6>
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4acb      	ldr	r2, [pc, #812]	; (8008640 <UART_SetConfig+0x698>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d176      	bne.n	8008404 <UART_SetConfig+0x45c>
 8008316:	4bcb      	ldr	r3, [pc, #812]	; (8008644 <UART_SetConfig+0x69c>)
 8008318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800831a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800831e:	2b28      	cmp	r3, #40	; 0x28
 8008320:	d86c      	bhi.n	80083fc <UART_SetConfig+0x454>
 8008322:	a201      	add	r2, pc, #4	; (adr r2, 8008328 <UART_SetConfig+0x380>)
 8008324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008328:	080083cd 	.word	0x080083cd
 800832c:	080083fd 	.word	0x080083fd
 8008330:	080083fd 	.word	0x080083fd
 8008334:	080083fd 	.word	0x080083fd
 8008338:	080083fd 	.word	0x080083fd
 800833c:	080083fd 	.word	0x080083fd
 8008340:	080083fd 	.word	0x080083fd
 8008344:	080083fd 	.word	0x080083fd
 8008348:	080083d5 	.word	0x080083d5
 800834c:	080083fd 	.word	0x080083fd
 8008350:	080083fd 	.word	0x080083fd
 8008354:	080083fd 	.word	0x080083fd
 8008358:	080083fd 	.word	0x080083fd
 800835c:	080083fd 	.word	0x080083fd
 8008360:	080083fd 	.word	0x080083fd
 8008364:	080083fd 	.word	0x080083fd
 8008368:	080083dd 	.word	0x080083dd
 800836c:	080083fd 	.word	0x080083fd
 8008370:	080083fd 	.word	0x080083fd
 8008374:	080083fd 	.word	0x080083fd
 8008378:	080083fd 	.word	0x080083fd
 800837c:	080083fd 	.word	0x080083fd
 8008380:	080083fd 	.word	0x080083fd
 8008384:	080083fd 	.word	0x080083fd
 8008388:	080083e5 	.word	0x080083e5
 800838c:	080083fd 	.word	0x080083fd
 8008390:	080083fd 	.word	0x080083fd
 8008394:	080083fd 	.word	0x080083fd
 8008398:	080083fd 	.word	0x080083fd
 800839c:	080083fd 	.word	0x080083fd
 80083a0:	080083fd 	.word	0x080083fd
 80083a4:	080083fd 	.word	0x080083fd
 80083a8:	080083ed 	.word	0x080083ed
 80083ac:	080083fd 	.word	0x080083fd
 80083b0:	080083fd 	.word	0x080083fd
 80083b4:	080083fd 	.word	0x080083fd
 80083b8:	080083fd 	.word	0x080083fd
 80083bc:	080083fd 	.word	0x080083fd
 80083c0:	080083fd 	.word	0x080083fd
 80083c4:	080083fd 	.word	0x080083fd
 80083c8:	080083f5 	.word	0x080083f5
 80083cc:	2301      	movs	r3, #1
 80083ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083d2:	e0bc      	b.n	800854e <UART_SetConfig+0x5a6>
 80083d4:	2304      	movs	r3, #4
 80083d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083da:	e0b8      	b.n	800854e <UART_SetConfig+0x5a6>
 80083dc:	2308      	movs	r3, #8
 80083de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083e2:	e0b4      	b.n	800854e <UART_SetConfig+0x5a6>
 80083e4:	2310      	movs	r3, #16
 80083e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083ea:	e0b0      	b.n	800854e <UART_SetConfig+0x5a6>
 80083ec:	2320      	movs	r3, #32
 80083ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083f2:	e0ac      	b.n	800854e <UART_SetConfig+0x5a6>
 80083f4:	2340      	movs	r3, #64	; 0x40
 80083f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083fa:	e0a8      	b.n	800854e <UART_SetConfig+0x5a6>
 80083fc:	2380      	movs	r3, #128	; 0x80
 80083fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008402:	e0a4      	b.n	800854e <UART_SetConfig+0x5a6>
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a8f      	ldr	r2, [pc, #572]	; (8008648 <UART_SetConfig+0x6a0>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d130      	bne.n	8008470 <UART_SetConfig+0x4c8>
 800840e:	4b8d      	ldr	r3, [pc, #564]	; (8008644 <UART_SetConfig+0x69c>)
 8008410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008412:	f003 0307 	and.w	r3, r3, #7
 8008416:	2b05      	cmp	r3, #5
 8008418:	d826      	bhi.n	8008468 <UART_SetConfig+0x4c0>
 800841a:	a201      	add	r2, pc, #4	; (adr r2, 8008420 <UART_SetConfig+0x478>)
 800841c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008420:	08008439 	.word	0x08008439
 8008424:	08008441 	.word	0x08008441
 8008428:	08008449 	.word	0x08008449
 800842c:	08008451 	.word	0x08008451
 8008430:	08008459 	.word	0x08008459
 8008434:	08008461 	.word	0x08008461
 8008438:	2300      	movs	r3, #0
 800843a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800843e:	e086      	b.n	800854e <UART_SetConfig+0x5a6>
 8008440:	2304      	movs	r3, #4
 8008442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008446:	e082      	b.n	800854e <UART_SetConfig+0x5a6>
 8008448:	2308      	movs	r3, #8
 800844a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800844e:	e07e      	b.n	800854e <UART_SetConfig+0x5a6>
 8008450:	2310      	movs	r3, #16
 8008452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008456:	e07a      	b.n	800854e <UART_SetConfig+0x5a6>
 8008458:	2320      	movs	r3, #32
 800845a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800845e:	e076      	b.n	800854e <UART_SetConfig+0x5a6>
 8008460:	2340      	movs	r3, #64	; 0x40
 8008462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008466:	e072      	b.n	800854e <UART_SetConfig+0x5a6>
 8008468:	2380      	movs	r3, #128	; 0x80
 800846a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800846e:	e06e      	b.n	800854e <UART_SetConfig+0x5a6>
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a75      	ldr	r2, [pc, #468]	; (800864c <UART_SetConfig+0x6a4>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d130      	bne.n	80084dc <UART_SetConfig+0x534>
 800847a:	4b72      	ldr	r3, [pc, #456]	; (8008644 <UART_SetConfig+0x69c>)
 800847c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800847e:	f003 0307 	and.w	r3, r3, #7
 8008482:	2b05      	cmp	r3, #5
 8008484:	d826      	bhi.n	80084d4 <UART_SetConfig+0x52c>
 8008486:	a201      	add	r2, pc, #4	; (adr r2, 800848c <UART_SetConfig+0x4e4>)
 8008488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800848c:	080084a5 	.word	0x080084a5
 8008490:	080084ad 	.word	0x080084ad
 8008494:	080084b5 	.word	0x080084b5
 8008498:	080084bd 	.word	0x080084bd
 800849c:	080084c5 	.word	0x080084c5
 80084a0:	080084cd 	.word	0x080084cd
 80084a4:	2300      	movs	r3, #0
 80084a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084aa:	e050      	b.n	800854e <UART_SetConfig+0x5a6>
 80084ac:	2304      	movs	r3, #4
 80084ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084b2:	e04c      	b.n	800854e <UART_SetConfig+0x5a6>
 80084b4:	2308      	movs	r3, #8
 80084b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084ba:	e048      	b.n	800854e <UART_SetConfig+0x5a6>
 80084bc:	2310      	movs	r3, #16
 80084be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084c2:	e044      	b.n	800854e <UART_SetConfig+0x5a6>
 80084c4:	2320      	movs	r3, #32
 80084c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084ca:	e040      	b.n	800854e <UART_SetConfig+0x5a6>
 80084cc:	2340      	movs	r3, #64	; 0x40
 80084ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084d2:	e03c      	b.n	800854e <UART_SetConfig+0x5a6>
 80084d4:	2380      	movs	r3, #128	; 0x80
 80084d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084da:	e038      	b.n	800854e <UART_SetConfig+0x5a6>
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a5b      	ldr	r2, [pc, #364]	; (8008650 <UART_SetConfig+0x6a8>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d130      	bne.n	8008548 <UART_SetConfig+0x5a0>
 80084e6:	4b57      	ldr	r3, [pc, #348]	; (8008644 <UART_SetConfig+0x69c>)
 80084e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084ea:	f003 0307 	and.w	r3, r3, #7
 80084ee:	2b05      	cmp	r3, #5
 80084f0:	d826      	bhi.n	8008540 <UART_SetConfig+0x598>
 80084f2:	a201      	add	r2, pc, #4	; (adr r2, 80084f8 <UART_SetConfig+0x550>)
 80084f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f8:	08008511 	.word	0x08008511
 80084fc:	08008519 	.word	0x08008519
 8008500:	08008521 	.word	0x08008521
 8008504:	08008529 	.word	0x08008529
 8008508:	08008531 	.word	0x08008531
 800850c:	08008539 	.word	0x08008539
 8008510:	2302      	movs	r3, #2
 8008512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008516:	e01a      	b.n	800854e <UART_SetConfig+0x5a6>
 8008518:	2304      	movs	r3, #4
 800851a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800851e:	e016      	b.n	800854e <UART_SetConfig+0x5a6>
 8008520:	2308      	movs	r3, #8
 8008522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008526:	e012      	b.n	800854e <UART_SetConfig+0x5a6>
 8008528:	2310      	movs	r3, #16
 800852a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800852e:	e00e      	b.n	800854e <UART_SetConfig+0x5a6>
 8008530:	2320      	movs	r3, #32
 8008532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008536:	e00a      	b.n	800854e <UART_SetConfig+0x5a6>
 8008538:	2340      	movs	r3, #64	; 0x40
 800853a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800853e:	e006      	b.n	800854e <UART_SetConfig+0x5a6>
 8008540:	2380      	movs	r3, #128	; 0x80
 8008542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008546:	e002      	b.n	800854e <UART_SetConfig+0x5a6>
 8008548:	2380      	movs	r3, #128	; 0x80
 800854a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a3f      	ldr	r2, [pc, #252]	; (8008650 <UART_SetConfig+0x6a8>)
 8008554:	4293      	cmp	r3, r2
 8008556:	f040 80f8 	bne.w	800874a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800855a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800855e:	2b20      	cmp	r3, #32
 8008560:	dc46      	bgt.n	80085f0 <UART_SetConfig+0x648>
 8008562:	2b02      	cmp	r3, #2
 8008564:	f2c0 8082 	blt.w	800866c <UART_SetConfig+0x6c4>
 8008568:	3b02      	subs	r3, #2
 800856a:	2b1e      	cmp	r3, #30
 800856c:	d87e      	bhi.n	800866c <UART_SetConfig+0x6c4>
 800856e:	a201      	add	r2, pc, #4	; (adr r2, 8008574 <UART_SetConfig+0x5cc>)
 8008570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008574:	080085f7 	.word	0x080085f7
 8008578:	0800866d 	.word	0x0800866d
 800857c:	080085ff 	.word	0x080085ff
 8008580:	0800866d 	.word	0x0800866d
 8008584:	0800866d 	.word	0x0800866d
 8008588:	0800866d 	.word	0x0800866d
 800858c:	0800860f 	.word	0x0800860f
 8008590:	0800866d 	.word	0x0800866d
 8008594:	0800866d 	.word	0x0800866d
 8008598:	0800866d 	.word	0x0800866d
 800859c:	0800866d 	.word	0x0800866d
 80085a0:	0800866d 	.word	0x0800866d
 80085a4:	0800866d 	.word	0x0800866d
 80085a8:	0800866d 	.word	0x0800866d
 80085ac:	0800861f 	.word	0x0800861f
 80085b0:	0800866d 	.word	0x0800866d
 80085b4:	0800866d 	.word	0x0800866d
 80085b8:	0800866d 	.word	0x0800866d
 80085bc:	0800866d 	.word	0x0800866d
 80085c0:	0800866d 	.word	0x0800866d
 80085c4:	0800866d 	.word	0x0800866d
 80085c8:	0800866d 	.word	0x0800866d
 80085cc:	0800866d 	.word	0x0800866d
 80085d0:	0800866d 	.word	0x0800866d
 80085d4:	0800866d 	.word	0x0800866d
 80085d8:	0800866d 	.word	0x0800866d
 80085dc:	0800866d 	.word	0x0800866d
 80085e0:	0800866d 	.word	0x0800866d
 80085e4:	0800866d 	.word	0x0800866d
 80085e8:	0800866d 	.word	0x0800866d
 80085ec:	0800865f 	.word	0x0800865f
 80085f0:	2b40      	cmp	r3, #64	; 0x40
 80085f2:	d037      	beq.n	8008664 <UART_SetConfig+0x6bc>
 80085f4:	e03a      	b.n	800866c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80085f6:	f7fe fe85 	bl	8007304 <HAL_RCCEx_GetD3PCLK1Freq>
 80085fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80085fc:	e03c      	b.n	8008678 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008602:	4618      	mov	r0, r3
 8008604:	f7fe fe94 	bl	8007330 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800860a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800860c:	e034      	b.n	8008678 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800860e:	f107 0318 	add.w	r3, r7, #24
 8008612:	4618      	mov	r0, r3
 8008614:	f7fe ffe0 	bl	80075d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008618:	69fb      	ldr	r3, [r7, #28]
 800861a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800861c:	e02c      	b.n	8008678 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800861e:	4b09      	ldr	r3, [pc, #36]	; (8008644 <UART_SetConfig+0x69c>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f003 0320 	and.w	r3, r3, #32
 8008626:	2b00      	cmp	r3, #0
 8008628:	d016      	beq.n	8008658 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800862a:	4b06      	ldr	r3, [pc, #24]	; (8008644 <UART_SetConfig+0x69c>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	08db      	lsrs	r3, r3, #3
 8008630:	f003 0303 	and.w	r3, r3, #3
 8008634:	4a07      	ldr	r2, [pc, #28]	; (8008654 <UART_SetConfig+0x6ac>)
 8008636:	fa22 f303 	lsr.w	r3, r2, r3
 800863a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800863c:	e01c      	b.n	8008678 <UART_SetConfig+0x6d0>
 800863e:	bf00      	nop
 8008640:	40011400 	.word	0x40011400
 8008644:	58024400 	.word	0x58024400
 8008648:	40007800 	.word	0x40007800
 800864c:	40007c00 	.word	0x40007c00
 8008650:	58000c00 	.word	0x58000c00
 8008654:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008658:	4b9d      	ldr	r3, [pc, #628]	; (80088d0 <UART_SetConfig+0x928>)
 800865a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800865c:	e00c      	b.n	8008678 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800865e:	4b9d      	ldr	r3, [pc, #628]	; (80088d4 <UART_SetConfig+0x92c>)
 8008660:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008662:	e009      	b.n	8008678 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008664:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008668:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800866a:	e005      	b.n	8008678 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800866c:	2300      	movs	r3, #0
 800866e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008670:	2301      	movs	r3, #1
 8008672:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008676:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800867a:	2b00      	cmp	r3, #0
 800867c:	f000 81de 	beq.w	8008a3c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008684:	4a94      	ldr	r2, [pc, #592]	; (80088d8 <UART_SetConfig+0x930>)
 8008686:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800868a:	461a      	mov	r2, r3
 800868c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800868e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008692:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	685a      	ldr	r2, [r3, #4]
 8008698:	4613      	mov	r3, r2
 800869a:	005b      	lsls	r3, r3, #1
 800869c:	4413      	add	r3, r2
 800869e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d305      	bcc.n	80086b0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80086aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d903      	bls.n	80086b8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80086b0:	2301      	movs	r3, #1
 80086b2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80086b6:	e1c1      	b.n	8008a3c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086ba:	2200      	movs	r2, #0
 80086bc:	60bb      	str	r3, [r7, #8]
 80086be:	60fa      	str	r2, [r7, #12]
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c4:	4a84      	ldr	r2, [pc, #528]	; (80088d8 <UART_SetConfig+0x930>)
 80086c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	2200      	movs	r2, #0
 80086ce:	603b      	str	r3, [r7, #0]
 80086d0:	607a      	str	r2, [r7, #4]
 80086d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80086da:	f7f8 f815 	bl	8000708 <__aeabi_uldivmod>
 80086de:	4602      	mov	r2, r0
 80086e0:	460b      	mov	r3, r1
 80086e2:	4610      	mov	r0, r2
 80086e4:	4619      	mov	r1, r3
 80086e6:	f04f 0200 	mov.w	r2, #0
 80086ea:	f04f 0300 	mov.w	r3, #0
 80086ee:	020b      	lsls	r3, r1, #8
 80086f0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80086f4:	0202      	lsls	r2, r0, #8
 80086f6:	6979      	ldr	r1, [r7, #20]
 80086f8:	6849      	ldr	r1, [r1, #4]
 80086fa:	0849      	lsrs	r1, r1, #1
 80086fc:	2000      	movs	r0, #0
 80086fe:	460c      	mov	r4, r1
 8008700:	4605      	mov	r5, r0
 8008702:	eb12 0804 	adds.w	r8, r2, r4
 8008706:	eb43 0905 	adc.w	r9, r3, r5
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	2200      	movs	r2, #0
 8008710:	469a      	mov	sl, r3
 8008712:	4693      	mov	fp, r2
 8008714:	4652      	mov	r2, sl
 8008716:	465b      	mov	r3, fp
 8008718:	4640      	mov	r0, r8
 800871a:	4649      	mov	r1, r9
 800871c:	f7f7 fff4 	bl	8000708 <__aeabi_uldivmod>
 8008720:	4602      	mov	r2, r0
 8008722:	460b      	mov	r3, r1
 8008724:	4613      	mov	r3, r2
 8008726:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800872a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800872e:	d308      	bcc.n	8008742 <UART_SetConfig+0x79a>
 8008730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008732:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008736:	d204      	bcs.n	8008742 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800873e:	60da      	str	r2, [r3, #12]
 8008740:	e17c      	b.n	8008a3c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008742:	2301      	movs	r3, #1
 8008744:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008748:	e178      	b.n	8008a3c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	69db      	ldr	r3, [r3, #28]
 800874e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008752:	f040 80c5 	bne.w	80088e0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008756:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800875a:	2b20      	cmp	r3, #32
 800875c:	dc48      	bgt.n	80087f0 <UART_SetConfig+0x848>
 800875e:	2b00      	cmp	r3, #0
 8008760:	db7b      	blt.n	800885a <UART_SetConfig+0x8b2>
 8008762:	2b20      	cmp	r3, #32
 8008764:	d879      	bhi.n	800885a <UART_SetConfig+0x8b2>
 8008766:	a201      	add	r2, pc, #4	; (adr r2, 800876c <UART_SetConfig+0x7c4>)
 8008768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800876c:	080087f7 	.word	0x080087f7
 8008770:	080087ff 	.word	0x080087ff
 8008774:	0800885b 	.word	0x0800885b
 8008778:	0800885b 	.word	0x0800885b
 800877c:	08008807 	.word	0x08008807
 8008780:	0800885b 	.word	0x0800885b
 8008784:	0800885b 	.word	0x0800885b
 8008788:	0800885b 	.word	0x0800885b
 800878c:	08008817 	.word	0x08008817
 8008790:	0800885b 	.word	0x0800885b
 8008794:	0800885b 	.word	0x0800885b
 8008798:	0800885b 	.word	0x0800885b
 800879c:	0800885b 	.word	0x0800885b
 80087a0:	0800885b 	.word	0x0800885b
 80087a4:	0800885b 	.word	0x0800885b
 80087a8:	0800885b 	.word	0x0800885b
 80087ac:	08008827 	.word	0x08008827
 80087b0:	0800885b 	.word	0x0800885b
 80087b4:	0800885b 	.word	0x0800885b
 80087b8:	0800885b 	.word	0x0800885b
 80087bc:	0800885b 	.word	0x0800885b
 80087c0:	0800885b 	.word	0x0800885b
 80087c4:	0800885b 	.word	0x0800885b
 80087c8:	0800885b 	.word	0x0800885b
 80087cc:	0800885b 	.word	0x0800885b
 80087d0:	0800885b 	.word	0x0800885b
 80087d4:	0800885b 	.word	0x0800885b
 80087d8:	0800885b 	.word	0x0800885b
 80087dc:	0800885b 	.word	0x0800885b
 80087e0:	0800885b 	.word	0x0800885b
 80087e4:	0800885b 	.word	0x0800885b
 80087e8:	0800885b 	.word	0x0800885b
 80087ec:	0800884d 	.word	0x0800884d
 80087f0:	2b40      	cmp	r3, #64	; 0x40
 80087f2:	d02e      	beq.n	8008852 <UART_SetConfig+0x8aa>
 80087f4:	e031      	b.n	800885a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087f6:	f7fc fdcf 	bl	8005398 <HAL_RCC_GetPCLK1Freq>
 80087fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80087fc:	e033      	b.n	8008866 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80087fe:	f7fc fde1 	bl	80053c4 <HAL_RCC_GetPCLK2Freq>
 8008802:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008804:	e02f      	b.n	8008866 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008806:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800880a:	4618      	mov	r0, r3
 800880c:	f7fe fd90 	bl	8007330 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008812:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008814:	e027      	b.n	8008866 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008816:	f107 0318 	add.w	r3, r7, #24
 800881a:	4618      	mov	r0, r3
 800881c:	f7fe fedc 	bl	80075d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008820:	69fb      	ldr	r3, [r7, #28]
 8008822:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008824:	e01f      	b.n	8008866 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008826:	4b2d      	ldr	r3, [pc, #180]	; (80088dc <UART_SetConfig+0x934>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f003 0320 	and.w	r3, r3, #32
 800882e:	2b00      	cmp	r3, #0
 8008830:	d009      	beq.n	8008846 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008832:	4b2a      	ldr	r3, [pc, #168]	; (80088dc <UART_SetConfig+0x934>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	08db      	lsrs	r3, r3, #3
 8008838:	f003 0303 	and.w	r3, r3, #3
 800883c:	4a24      	ldr	r2, [pc, #144]	; (80088d0 <UART_SetConfig+0x928>)
 800883e:	fa22 f303 	lsr.w	r3, r2, r3
 8008842:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008844:	e00f      	b.n	8008866 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008846:	4b22      	ldr	r3, [pc, #136]	; (80088d0 <UART_SetConfig+0x928>)
 8008848:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800884a:	e00c      	b.n	8008866 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800884c:	4b21      	ldr	r3, [pc, #132]	; (80088d4 <UART_SetConfig+0x92c>)
 800884e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008850:	e009      	b.n	8008866 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008852:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008856:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008858:	e005      	b.n	8008866 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800885a:	2300      	movs	r3, #0
 800885c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800885e:	2301      	movs	r3, #1
 8008860:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008864:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008868:	2b00      	cmp	r3, #0
 800886a:	f000 80e7 	beq.w	8008a3c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008872:	4a19      	ldr	r2, [pc, #100]	; (80088d8 <UART_SetConfig+0x930>)
 8008874:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008878:	461a      	mov	r2, r3
 800887a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800887c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008880:	005a      	lsls	r2, r3, #1
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	085b      	lsrs	r3, r3, #1
 8008888:	441a      	add	r2, r3
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008892:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008896:	2b0f      	cmp	r3, #15
 8008898:	d916      	bls.n	80088c8 <UART_SetConfig+0x920>
 800889a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800889c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088a0:	d212      	bcs.n	80088c8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80088a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	f023 030f 	bic.w	r3, r3, #15
 80088aa:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80088ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ae:	085b      	lsrs	r3, r3, #1
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	f003 0307 	and.w	r3, r3, #7
 80088b6:	b29a      	uxth	r2, r3
 80088b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80088ba:	4313      	orrs	r3, r2
 80088bc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80088c4:	60da      	str	r2, [r3, #12]
 80088c6:	e0b9      	b.n	8008a3c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80088c8:	2301      	movs	r3, #1
 80088ca:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80088ce:	e0b5      	b.n	8008a3c <UART_SetConfig+0xa94>
 80088d0:	03d09000 	.word	0x03d09000
 80088d4:	003d0900 	.word	0x003d0900
 80088d8:	0800dd1c 	.word	0x0800dd1c
 80088dc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80088e0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80088e4:	2b20      	cmp	r3, #32
 80088e6:	dc49      	bgt.n	800897c <UART_SetConfig+0x9d4>
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	db7c      	blt.n	80089e6 <UART_SetConfig+0xa3e>
 80088ec:	2b20      	cmp	r3, #32
 80088ee:	d87a      	bhi.n	80089e6 <UART_SetConfig+0xa3e>
 80088f0:	a201      	add	r2, pc, #4	; (adr r2, 80088f8 <UART_SetConfig+0x950>)
 80088f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088f6:	bf00      	nop
 80088f8:	08008983 	.word	0x08008983
 80088fc:	0800898b 	.word	0x0800898b
 8008900:	080089e7 	.word	0x080089e7
 8008904:	080089e7 	.word	0x080089e7
 8008908:	08008993 	.word	0x08008993
 800890c:	080089e7 	.word	0x080089e7
 8008910:	080089e7 	.word	0x080089e7
 8008914:	080089e7 	.word	0x080089e7
 8008918:	080089a3 	.word	0x080089a3
 800891c:	080089e7 	.word	0x080089e7
 8008920:	080089e7 	.word	0x080089e7
 8008924:	080089e7 	.word	0x080089e7
 8008928:	080089e7 	.word	0x080089e7
 800892c:	080089e7 	.word	0x080089e7
 8008930:	080089e7 	.word	0x080089e7
 8008934:	080089e7 	.word	0x080089e7
 8008938:	080089b3 	.word	0x080089b3
 800893c:	080089e7 	.word	0x080089e7
 8008940:	080089e7 	.word	0x080089e7
 8008944:	080089e7 	.word	0x080089e7
 8008948:	080089e7 	.word	0x080089e7
 800894c:	080089e7 	.word	0x080089e7
 8008950:	080089e7 	.word	0x080089e7
 8008954:	080089e7 	.word	0x080089e7
 8008958:	080089e7 	.word	0x080089e7
 800895c:	080089e7 	.word	0x080089e7
 8008960:	080089e7 	.word	0x080089e7
 8008964:	080089e7 	.word	0x080089e7
 8008968:	080089e7 	.word	0x080089e7
 800896c:	080089e7 	.word	0x080089e7
 8008970:	080089e7 	.word	0x080089e7
 8008974:	080089e7 	.word	0x080089e7
 8008978:	080089d9 	.word	0x080089d9
 800897c:	2b40      	cmp	r3, #64	; 0x40
 800897e:	d02e      	beq.n	80089de <UART_SetConfig+0xa36>
 8008980:	e031      	b.n	80089e6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008982:	f7fc fd09 	bl	8005398 <HAL_RCC_GetPCLK1Freq>
 8008986:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008988:	e033      	b.n	80089f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800898a:	f7fc fd1b 	bl	80053c4 <HAL_RCC_GetPCLK2Freq>
 800898e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008990:	e02f      	b.n	80089f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008992:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008996:	4618      	mov	r0, r3
 8008998:	f7fe fcca 	bl	8007330 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800899c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800899e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089a0:	e027      	b.n	80089f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089a2:	f107 0318 	add.w	r3, r7, #24
 80089a6:	4618      	mov	r0, r3
 80089a8:	f7fe fe16 	bl	80075d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80089ac:	69fb      	ldr	r3, [r7, #28]
 80089ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089b0:	e01f      	b.n	80089f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089b2:	4b2d      	ldr	r3, [pc, #180]	; (8008a68 <UART_SetConfig+0xac0>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f003 0320 	and.w	r3, r3, #32
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d009      	beq.n	80089d2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80089be:	4b2a      	ldr	r3, [pc, #168]	; (8008a68 <UART_SetConfig+0xac0>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	08db      	lsrs	r3, r3, #3
 80089c4:	f003 0303 	and.w	r3, r3, #3
 80089c8:	4a28      	ldr	r2, [pc, #160]	; (8008a6c <UART_SetConfig+0xac4>)
 80089ca:	fa22 f303 	lsr.w	r3, r2, r3
 80089ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80089d0:	e00f      	b.n	80089f2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80089d2:	4b26      	ldr	r3, [pc, #152]	; (8008a6c <UART_SetConfig+0xac4>)
 80089d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089d6:	e00c      	b.n	80089f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80089d8:	4b25      	ldr	r3, [pc, #148]	; (8008a70 <UART_SetConfig+0xac8>)
 80089da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089dc:	e009      	b.n	80089f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089e4:	e005      	b.n	80089f2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80089e6:	2300      	movs	r3, #0
 80089e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80089ea:	2301      	movs	r3, #1
 80089ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80089f0:	bf00      	nop
    }

    if (pclk != 0U)
 80089f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d021      	beq.n	8008a3c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089fc:	4a1d      	ldr	r2, [pc, #116]	; (8008a74 <UART_SetConfig+0xacc>)
 80089fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a02:	461a      	mov	r2, r3
 8008a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a06:	fbb3 f2f2 	udiv	r2, r3, r2
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	085b      	lsrs	r3, r3, #1
 8008a10:	441a      	add	r2, r3
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a1a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a1e:	2b0f      	cmp	r3, #15
 8008a20:	d909      	bls.n	8008a36 <UART_SetConfig+0xa8e>
 8008a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a28:	d205      	bcs.n	8008a36 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a2c:	b29a      	uxth	r2, r3
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	60da      	str	r2, [r3, #12]
 8008a34:	e002      	b.n	8008a3c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008a36:	2301      	movs	r3, #1
 8008a38:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	2201      	movs	r2, #1
 8008a48:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	2200      	movs	r2, #0
 8008a56:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008a58:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3748      	adds	r7, #72	; 0x48
 8008a60:	46bd      	mov	sp, r7
 8008a62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a66:	bf00      	nop
 8008a68:	58024400 	.word	0x58024400
 8008a6c:	03d09000 	.word	0x03d09000
 8008a70:	003d0900 	.word	0x003d0900
 8008a74:	0800dd1c 	.word	0x0800dd1c

08008a78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b083      	sub	sp, #12
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a84:	f003 0301 	and.w	r3, r3, #1
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d00a      	beq.n	8008aa2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	430a      	orrs	r2, r1
 8008aa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aa6:	f003 0302 	and.w	r3, r3, #2
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d00a      	beq.n	8008ac4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	430a      	orrs	r2, r1
 8008ac2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ac8:	f003 0304 	and.w	r3, r3, #4
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d00a      	beq.n	8008ae6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	430a      	orrs	r2, r1
 8008ae4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aea:	f003 0308 	and.w	r3, r3, #8
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d00a      	beq.n	8008b08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	430a      	orrs	r2, r1
 8008b06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b0c:	f003 0310 	and.w	r3, r3, #16
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d00a      	beq.n	8008b2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	430a      	orrs	r2, r1
 8008b28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b2e:	f003 0320 	and.w	r3, r3, #32
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d00a      	beq.n	8008b4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	689b      	ldr	r3, [r3, #8]
 8008b3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	430a      	orrs	r2, r1
 8008b4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d01a      	beq.n	8008b8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	430a      	orrs	r2, r1
 8008b6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b76:	d10a      	bne.n	8008b8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	430a      	orrs	r2, r1
 8008b8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d00a      	beq.n	8008bb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	430a      	orrs	r2, r1
 8008bae:	605a      	str	r2, [r3, #4]
  }
}
 8008bb0:	bf00      	nop
 8008bb2:	370c      	adds	r7, #12
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr

08008bbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b098      	sub	sp, #96	; 0x60
 8008bc0:	af02      	add	r7, sp, #8
 8008bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008bcc:	f7f9 f808 	bl	8001be0 <HAL_GetTick>
 8008bd0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f003 0308 	and.w	r3, r3, #8
 8008bdc:	2b08      	cmp	r3, #8
 8008bde:	d12f      	bne.n	8008c40 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008be0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008be4:	9300      	str	r3, [sp, #0]
 8008be6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008be8:	2200      	movs	r2, #0
 8008bea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 f88e 	bl	8008d10 <UART_WaitOnFlagUntilTimeout>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d022      	beq.n	8008c40 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c02:	e853 3f00 	ldrex	r3, [r3]
 8008c06:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c0e:	653b      	str	r3, [r7, #80]	; 0x50
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	461a      	mov	r2, r3
 8008c16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c18:	647b      	str	r3, [r7, #68]	; 0x44
 8008c1a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008c1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c20:	e841 2300 	strex	r3, r2, [r1]
 8008c24:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008c26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d1e6      	bne.n	8008bfa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2220      	movs	r2, #32
 8008c30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2200      	movs	r2, #0
 8008c38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c3c:	2303      	movs	r3, #3
 8008c3e:	e063      	b.n	8008d08 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f003 0304 	and.w	r3, r3, #4
 8008c4a:	2b04      	cmp	r3, #4
 8008c4c:	d149      	bne.n	8008ce2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c4e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c52:	9300      	str	r3, [sp, #0]
 8008c54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c56:	2200      	movs	r2, #0
 8008c58:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 f857 	bl	8008d10 <UART_WaitOnFlagUntilTimeout>
 8008c62:	4603      	mov	r3, r0
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d03c      	beq.n	8008ce2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c70:	e853 3f00 	ldrex	r3, [r3]
 8008c74:	623b      	str	r3, [r7, #32]
   return(result);
 8008c76:	6a3b      	ldr	r3, [r7, #32]
 8008c78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	461a      	mov	r2, r3
 8008c84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c86:	633b      	str	r3, [r7, #48]	; 0x30
 8008c88:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c8e:	e841 2300 	strex	r3, r2, [r1]
 8008c92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d1e6      	bne.n	8008c68 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	3308      	adds	r3, #8
 8008ca0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	e853 3f00 	ldrex	r3, [r3]
 8008ca8:	60fb      	str	r3, [r7, #12]
   return(result);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	f023 0301 	bic.w	r3, r3, #1
 8008cb0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	3308      	adds	r3, #8
 8008cb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008cba:	61fa      	str	r2, [r7, #28]
 8008cbc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cbe:	69b9      	ldr	r1, [r7, #24]
 8008cc0:	69fa      	ldr	r2, [r7, #28]
 8008cc2:	e841 2300 	strex	r3, r2, [r1]
 8008cc6:	617b      	str	r3, [r7, #20]
   return(result);
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d1e5      	bne.n	8008c9a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2220      	movs	r2, #32
 8008cd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cde:	2303      	movs	r3, #3
 8008ce0:	e012      	b.n	8008d08 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2220      	movs	r2, #32
 8008ce6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2220      	movs	r2, #32
 8008cee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2200      	movs	r2, #0
 8008d02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008d06:	2300      	movs	r3, #0
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3758      	adds	r7, #88	; 0x58
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b084      	sub	sp, #16
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	60f8      	str	r0, [r7, #12]
 8008d18:	60b9      	str	r1, [r7, #8]
 8008d1a:	603b      	str	r3, [r7, #0]
 8008d1c:	4613      	mov	r3, r2
 8008d1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d20:	e049      	b.n	8008db6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d22:	69bb      	ldr	r3, [r7, #24]
 8008d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d28:	d045      	beq.n	8008db6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d2a:	f7f8 ff59 	bl	8001be0 <HAL_GetTick>
 8008d2e:	4602      	mov	r2, r0
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	1ad3      	subs	r3, r2, r3
 8008d34:	69ba      	ldr	r2, [r7, #24]
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d302      	bcc.n	8008d40 <UART_WaitOnFlagUntilTimeout+0x30>
 8008d3a:	69bb      	ldr	r3, [r7, #24]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d101      	bne.n	8008d44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008d40:	2303      	movs	r3, #3
 8008d42:	e048      	b.n	8008dd6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f003 0304 	and.w	r3, r3, #4
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d031      	beq.n	8008db6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	69db      	ldr	r3, [r3, #28]
 8008d58:	f003 0308 	and.w	r3, r3, #8
 8008d5c:	2b08      	cmp	r3, #8
 8008d5e:	d110      	bne.n	8008d82 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	2208      	movs	r2, #8
 8008d66:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008d68:	68f8      	ldr	r0, [r7, #12]
 8008d6a:	f000 f839 	bl	8008de0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	2208      	movs	r2, #8
 8008d72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8008d7e:	2301      	movs	r3, #1
 8008d80:	e029      	b.n	8008dd6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	69db      	ldr	r3, [r3, #28]
 8008d88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d90:	d111      	bne.n	8008db6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008d9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008d9c:	68f8      	ldr	r0, [r7, #12]
 8008d9e:	f000 f81f 	bl	8008de0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2220      	movs	r2, #32
 8008da6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2200      	movs	r2, #0
 8008dae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008db2:	2303      	movs	r3, #3
 8008db4:	e00f      	b.n	8008dd6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	69da      	ldr	r2, [r3, #28]
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	4013      	ands	r3, r2
 8008dc0:	68ba      	ldr	r2, [r7, #8]
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	bf0c      	ite	eq
 8008dc6:	2301      	moveq	r3, #1
 8008dc8:	2300      	movne	r3, #0
 8008dca:	b2db      	uxtb	r3, r3
 8008dcc:	461a      	mov	r2, r3
 8008dce:	79fb      	ldrb	r3, [r7, #7]
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d0a6      	beq.n	8008d22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008dd4:	2300      	movs	r3, #0
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3710      	adds	r7, #16
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
	...

08008de0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b095      	sub	sp, #84	; 0x54
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008df0:	e853 3f00 	ldrex	r3, [r3]
 8008df4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008dfc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	461a      	mov	r2, r3
 8008e04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e06:	643b      	str	r3, [r7, #64]	; 0x40
 8008e08:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e0a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e0e:	e841 2300 	strex	r3, r2, [r1]
 8008e12:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d1e6      	bne.n	8008de8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	3308      	adds	r3, #8
 8008e20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e22:	6a3b      	ldr	r3, [r7, #32]
 8008e24:	e853 3f00 	ldrex	r3, [r3]
 8008e28:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e2a:	69fa      	ldr	r2, [r7, #28]
 8008e2c:	4b1e      	ldr	r3, [pc, #120]	; (8008ea8 <UART_EndRxTransfer+0xc8>)
 8008e2e:	4013      	ands	r3, r2
 8008e30:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	3308      	adds	r3, #8
 8008e38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e3c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e42:	e841 2300 	strex	r3, r2, [r1]
 8008e46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d1e5      	bne.n	8008e1a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e52:	2b01      	cmp	r3, #1
 8008e54:	d118      	bne.n	8008e88 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	e853 3f00 	ldrex	r3, [r3]
 8008e62:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	f023 0310 	bic.w	r3, r3, #16
 8008e6a:	647b      	str	r3, [r7, #68]	; 0x44
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	461a      	mov	r2, r3
 8008e72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e74:	61bb      	str	r3, [r7, #24]
 8008e76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e78:	6979      	ldr	r1, [r7, #20]
 8008e7a:	69ba      	ldr	r2, [r7, #24]
 8008e7c:	e841 2300 	strex	r3, r2, [r1]
 8008e80:	613b      	str	r3, [r7, #16]
   return(result);
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d1e6      	bne.n	8008e56 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2220      	movs	r2, #32
 8008e8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2200      	movs	r2, #0
 8008e94:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008e9c:	bf00      	nop
 8008e9e:	3754      	adds	r7, #84	; 0x54
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea6:	4770      	bx	lr
 8008ea8:	effffffe 	.word	0xeffffffe

08008eac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b085      	sub	sp, #20
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d101      	bne.n	8008ec2 <HAL_UARTEx_DisableFifoMode+0x16>
 8008ebe:	2302      	movs	r3, #2
 8008ec0:	e027      	b.n	8008f12 <HAL_UARTEx_DisableFifoMode+0x66>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2224      	movs	r2, #36	; 0x24
 8008ece:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	681a      	ldr	r2, [r3, #0]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f022 0201 	bic.w	r2, r2, #1
 8008ee8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008ef0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	68fa      	ldr	r2, [r7, #12]
 8008efe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2220      	movs	r2, #32
 8008f04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008f10:	2300      	movs	r3, #0
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3714      	adds	r7, #20
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr

08008f1e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008f1e:	b580      	push	{r7, lr}
 8008f20:	b084      	sub	sp, #16
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
 8008f26:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008f2e:	2b01      	cmp	r3, #1
 8008f30:	d101      	bne.n	8008f36 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008f32:	2302      	movs	r3, #2
 8008f34:	e02d      	b.n	8008f92 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2201      	movs	r2, #1
 8008f3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2224      	movs	r2, #36	; 0x24
 8008f42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	681a      	ldr	r2, [r3, #0]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f022 0201 	bic.w	r2, r2, #1
 8008f5c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	689b      	ldr	r3, [r3, #8]
 8008f64:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	683a      	ldr	r2, [r7, #0]
 8008f6e:	430a      	orrs	r2, r1
 8008f70:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 f850 	bl	8009018 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	68fa      	ldr	r2, [r7, #12]
 8008f7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2220      	movs	r2, #32
 8008f84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008f90:	2300      	movs	r3, #0
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3710      	adds	r7, #16
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}

08008f9a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008f9a:	b580      	push	{r7, lr}
 8008f9c:	b084      	sub	sp, #16
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	6078      	str	r0, [r7, #4]
 8008fa2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008faa:	2b01      	cmp	r3, #1
 8008fac:	d101      	bne.n	8008fb2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008fae:	2302      	movs	r3, #2
 8008fb0:	e02d      	b.n	800900e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2201      	movs	r2, #1
 8008fb6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2224      	movs	r2, #36	; 0x24
 8008fbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	681a      	ldr	r2, [r3, #0]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f022 0201 	bic.w	r2, r2, #1
 8008fd8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	683a      	ldr	r2, [r7, #0]
 8008fea:	430a      	orrs	r2, r1
 8008fec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f000 f812 	bl	8009018 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	68fa      	ldr	r2, [r7, #12]
 8008ffa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2220      	movs	r2, #32
 8009000:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2200      	movs	r2, #0
 8009008:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800900c:	2300      	movs	r3, #0
}
 800900e:	4618      	mov	r0, r3
 8009010:	3710      	adds	r7, #16
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
	...

08009018 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009018:	b480      	push	{r7}
 800901a:	b085      	sub	sp, #20
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009024:	2b00      	cmp	r3, #0
 8009026:	d108      	bne.n	800903a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2201      	movs	r2, #1
 800902c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2201      	movs	r2, #1
 8009034:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009038:	e031      	b.n	800909e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800903a:	2310      	movs	r3, #16
 800903c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800903e:	2310      	movs	r3, #16
 8009040:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	689b      	ldr	r3, [r3, #8]
 8009048:	0e5b      	lsrs	r3, r3, #25
 800904a:	b2db      	uxtb	r3, r3
 800904c:	f003 0307 	and.w	r3, r3, #7
 8009050:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	689b      	ldr	r3, [r3, #8]
 8009058:	0f5b      	lsrs	r3, r3, #29
 800905a:	b2db      	uxtb	r3, r3
 800905c:	f003 0307 	and.w	r3, r3, #7
 8009060:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009062:	7bbb      	ldrb	r3, [r7, #14]
 8009064:	7b3a      	ldrb	r2, [r7, #12]
 8009066:	4911      	ldr	r1, [pc, #68]	; (80090ac <UARTEx_SetNbDataToProcess+0x94>)
 8009068:	5c8a      	ldrb	r2, [r1, r2]
 800906a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800906e:	7b3a      	ldrb	r2, [r7, #12]
 8009070:	490f      	ldr	r1, [pc, #60]	; (80090b0 <UARTEx_SetNbDataToProcess+0x98>)
 8009072:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009074:	fb93 f3f2 	sdiv	r3, r3, r2
 8009078:	b29a      	uxth	r2, r3
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009080:	7bfb      	ldrb	r3, [r7, #15]
 8009082:	7b7a      	ldrb	r2, [r7, #13]
 8009084:	4909      	ldr	r1, [pc, #36]	; (80090ac <UARTEx_SetNbDataToProcess+0x94>)
 8009086:	5c8a      	ldrb	r2, [r1, r2]
 8009088:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800908c:	7b7a      	ldrb	r2, [r7, #13]
 800908e:	4908      	ldr	r1, [pc, #32]	; (80090b0 <UARTEx_SetNbDataToProcess+0x98>)
 8009090:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009092:	fb93 f3f2 	sdiv	r3, r3, r2
 8009096:	b29a      	uxth	r2, r3
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800909e:	bf00      	nop
 80090a0:	3714      	adds	r7, #20
 80090a2:	46bd      	mov	sp, r7
 80090a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a8:	4770      	bx	lr
 80090aa:	bf00      	nop
 80090ac:	0800dd34 	.word	0x0800dd34
 80090b0:	0800dd3c 	.word	0x0800dd3c

080090b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80090b4:	b084      	sub	sp, #16
 80090b6:	b580      	push	{r7, lr}
 80090b8:	b084      	sub	sp, #16
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	6078      	str	r0, [r7, #4]
 80090be:	f107 001c 	add.w	r0, r7, #28
 80090c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80090c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c8:	2b01      	cmp	r3, #1
 80090ca:	d120      	bne.n	800910e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	68da      	ldr	r2, [r3, #12]
 80090dc:	4b2a      	ldr	r3, [pc, #168]	; (8009188 <USB_CoreInit+0xd4>)
 80090de:	4013      	ands	r3, r2
 80090e0:	687a      	ldr	r2, [r7, #4]
 80090e2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	68db      	ldr	r3, [r3, #12]
 80090e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80090f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	d105      	bne.n	8009102 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	68db      	ldr	r3, [r3, #12]
 80090fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 faac 	bl	8009660 <USB_CoreReset>
 8009108:	4603      	mov	r3, r0
 800910a:	73fb      	strb	r3, [r7, #15]
 800910c:	e01a      	b.n	8009144 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	68db      	ldr	r3, [r3, #12]
 8009112:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f000 faa0 	bl	8009660 <USB_CoreReset>
 8009120:	4603      	mov	r3, r0
 8009122:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009126:	2b00      	cmp	r3, #0
 8009128:	d106      	bne.n	8009138 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800912e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	639a      	str	r2, [r3, #56]	; 0x38
 8009136:	e005      	b.n	8009144 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800913c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009146:	2b01      	cmp	r3, #1
 8009148:	d116      	bne.n	8009178 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800914e:	b29a      	uxth	r2, r3
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009158:	4b0c      	ldr	r3, [pc, #48]	; (800918c <USB_CoreInit+0xd8>)
 800915a:	4313      	orrs	r3, r2
 800915c:	687a      	ldr	r2, [r7, #4]
 800915e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	689b      	ldr	r3, [r3, #8]
 8009164:	f043 0206 	orr.w	r2, r3, #6
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	689b      	ldr	r3, [r3, #8]
 8009170:	f043 0220 	orr.w	r2, r3, #32
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009178:	7bfb      	ldrb	r3, [r7, #15]
}
 800917a:	4618      	mov	r0, r3
 800917c:	3710      	adds	r7, #16
 800917e:	46bd      	mov	sp, r7
 8009180:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009184:	b004      	add	sp, #16
 8009186:	4770      	bx	lr
 8009188:	ffbdffbf 	.word	0xffbdffbf
 800918c:	03ee0000 	.word	0x03ee0000

08009190 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009190:	b480      	push	{r7}
 8009192:	b083      	sub	sp, #12
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	689b      	ldr	r3, [r3, #8]
 800919c:	f023 0201 	bic.w	r2, r3, #1
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80091a4:	2300      	movs	r3, #0
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	370c      	adds	r7, #12
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr

080091b2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80091b2:	b580      	push	{r7, lr}
 80091b4:	b084      	sub	sp, #16
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
 80091ba:	460b      	mov	r3, r1
 80091bc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80091be:	2300      	movs	r3, #0
 80091c0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	68db      	ldr	r3, [r3, #12]
 80091c6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80091ce:	78fb      	ldrb	r3, [r7, #3]
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d115      	bne.n	8009200 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	68db      	ldr	r3, [r3, #12]
 80091d8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80091e0:	2001      	movs	r0, #1
 80091e2:	f7f8 fd09 	bl	8001bf8 <HAL_Delay>
      ms++;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	3301      	adds	r3, #1
 80091ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f000 fa29 	bl	8009644 <USB_GetMode>
 80091f2:	4603      	mov	r3, r0
 80091f4:	2b01      	cmp	r3, #1
 80091f6:	d01e      	beq.n	8009236 <USB_SetCurrentMode+0x84>
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	2b31      	cmp	r3, #49	; 0x31
 80091fc:	d9f0      	bls.n	80091e0 <USB_SetCurrentMode+0x2e>
 80091fe:	e01a      	b.n	8009236 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009200:	78fb      	ldrb	r3, [r7, #3]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d115      	bne.n	8009232 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	68db      	ldr	r3, [r3, #12]
 800920a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009212:	2001      	movs	r0, #1
 8009214:	f7f8 fcf0 	bl	8001bf8 <HAL_Delay>
      ms++;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	3301      	adds	r3, #1
 800921c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f000 fa10 	bl	8009644 <USB_GetMode>
 8009224:	4603      	mov	r3, r0
 8009226:	2b00      	cmp	r3, #0
 8009228:	d005      	beq.n	8009236 <USB_SetCurrentMode+0x84>
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2b31      	cmp	r3, #49	; 0x31
 800922e:	d9f0      	bls.n	8009212 <USB_SetCurrentMode+0x60>
 8009230:	e001      	b.n	8009236 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009232:	2301      	movs	r3, #1
 8009234:	e005      	b.n	8009242 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2b32      	cmp	r3, #50	; 0x32
 800923a:	d101      	bne.n	8009240 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800923c:	2301      	movs	r3, #1
 800923e:	e000      	b.n	8009242 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009240:	2300      	movs	r3, #0
}
 8009242:	4618      	mov	r0, r3
 8009244:	3710      	adds	r7, #16
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
	...

0800924c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800924c:	b084      	sub	sp, #16
 800924e:	b580      	push	{r7, lr}
 8009250:	b086      	sub	sp, #24
 8009252:	af00      	add	r7, sp, #0
 8009254:	6078      	str	r0, [r7, #4]
 8009256:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800925a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800925e:	2300      	movs	r3, #0
 8009260:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009266:	2300      	movs	r3, #0
 8009268:	613b      	str	r3, [r7, #16]
 800926a:	e009      	b.n	8009280 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800926c:	687a      	ldr	r2, [r7, #4]
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	3340      	adds	r3, #64	; 0x40
 8009272:	009b      	lsls	r3, r3, #2
 8009274:	4413      	add	r3, r2
 8009276:	2200      	movs	r2, #0
 8009278:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	3301      	adds	r3, #1
 800927e:	613b      	str	r3, [r7, #16]
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	2b0e      	cmp	r3, #14
 8009284:	d9f2      	bls.n	800926c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009288:	2b00      	cmp	r3, #0
 800928a:	d11c      	bne.n	80092c6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	68fa      	ldr	r2, [r7, #12]
 8009296:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800929a:	f043 0302 	orr.w	r3, r3, #2
 800929e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092a4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	601a      	str	r2, [r3, #0]
 80092c4:	e005      	b.n	80092d2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80092d8:	461a      	mov	r2, r3
 80092da:	2300      	movs	r3, #0
 80092dc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092e4:	4619      	mov	r1, r3
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092ec:	461a      	mov	r2, r3
 80092ee:	680b      	ldr	r3, [r1, #0]
 80092f0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80092f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f4:	2b01      	cmp	r3, #1
 80092f6:	d10c      	bne.n	8009312 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80092f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d104      	bne.n	8009308 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80092fe:	2100      	movs	r1, #0
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f000 f965 	bl	80095d0 <USB_SetDevSpeed>
 8009306:	e008      	b.n	800931a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009308:	2101      	movs	r1, #1
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f000 f960 	bl	80095d0 <USB_SetDevSpeed>
 8009310:	e003      	b.n	800931a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009312:	2103      	movs	r1, #3
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f000 f95b 	bl	80095d0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800931a:	2110      	movs	r1, #16
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f000 f8f3 	bl	8009508 <USB_FlushTxFifo>
 8009322:	4603      	mov	r3, r0
 8009324:	2b00      	cmp	r3, #0
 8009326:	d001      	beq.n	800932c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8009328:	2301      	movs	r3, #1
 800932a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f000 f91f 	bl	8009570 <USB_FlushRxFifo>
 8009332:	4603      	mov	r3, r0
 8009334:	2b00      	cmp	r3, #0
 8009336:	d001      	beq.n	800933c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8009338:	2301      	movs	r3, #1
 800933a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009342:	461a      	mov	r2, r3
 8009344:	2300      	movs	r3, #0
 8009346:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800934e:	461a      	mov	r2, r3
 8009350:	2300      	movs	r3, #0
 8009352:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800935a:	461a      	mov	r2, r3
 800935c:	2300      	movs	r3, #0
 800935e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009360:	2300      	movs	r3, #0
 8009362:	613b      	str	r3, [r7, #16]
 8009364:	e043      	b.n	80093ee <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	015a      	lsls	r2, r3, #5
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	4413      	add	r3, r2
 800936e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009378:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800937c:	d118      	bne.n	80093b0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d10a      	bne.n	800939a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	015a      	lsls	r2, r3, #5
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	4413      	add	r3, r2
 800938c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009390:	461a      	mov	r2, r3
 8009392:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009396:	6013      	str	r3, [r2, #0]
 8009398:	e013      	b.n	80093c2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	015a      	lsls	r2, r3, #5
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	4413      	add	r3, r2
 80093a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093a6:	461a      	mov	r2, r3
 80093a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80093ac:	6013      	str	r3, [r2, #0]
 80093ae:	e008      	b.n	80093c2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	015a      	lsls	r2, r3, #5
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	4413      	add	r3, r2
 80093b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093bc:	461a      	mov	r2, r3
 80093be:	2300      	movs	r3, #0
 80093c0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	015a      	lsls	r2, r3, #5
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	4413      	add	r3, r2
 80093ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093ce:	461a      	mov	r2, r3
 80093d0:	2300      	movs	r3, #0
 80093d2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80093d4:	693b      	ldr	r3, [r7, #16]
 80093d6:	015a      	lsls	r2, r3, #5
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	4413      	add	r3, r2
 80093dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093e0:	461a      	mov	r2, r3
 80093e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80093e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	3301      	adds	r3, #1
 80093ec:	613b      	str	r3, [r7, #16]
 80093ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f0:	693a      	ldr	r2, [r7, #16]
 80093f2:	429a      	cmp	r2, r3
 80093f4:	d3b7      	bcc.n	8009366 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80093f6:	2300      	movs	r3, #0
 80093f8:	613b      	str	r3, [r7, #16]
 80093fa:	e043      	b.n	8009484 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	015a      	lsls	r2, r3, #5
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	4413      	add	r3, r2
 8009404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800940e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009412:	d118      	bne.n	8009446 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d10a      	bne.n	8009430 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	015a      	lsls	r2, r3, #5
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	4413      	add	r3, r2
 8009422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009426:	461a      	mov	r2, r3
 8009428:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800942c:	6013      	str	r3, [r2, #0]
 800942e:	e013      	b.n	8009458 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	015a      	lsls	r2, r3, #5
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	4413      	add	r3, r2
 8009438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800943c:	461a      	mov	r2, r3
 800943e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009442:	6013      	str	r3, [r2, #0]
 8009444:	e008      	b.n	8009458 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	015a      	lsls	r2, r3, #5
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	4413      	add	r3, r2
 800944e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009452:	461a      	mov	r2, r3
 8009454:	2300      	movs	r3, #0
 8009456:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	015a      	lsls	r2, r3, #5
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	4413      	add	r3, r2
 8009460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009464:	461a      	mov	r2, r3
 8009466:	2300      	movs	r3, #0
 8009468:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	015a      	lsls	r2, r3, #5
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	4413      	add	r3, r2
 8009472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009476:	461a      	mov	r2, r3
 8009478:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800947c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	3301      	adds	r3, #1
 8009482:	613b      	str	r3, [r7, #16]
 8009484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009486:	693a      	ldr	r2, [r7, #16]
 8009488:	429a      	cmp	r2, r3
 800948a:	d3b7      	bcc.n	80093fc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009492:	691b      	ldr	r3, [r3, #16]
 8009494:	68fa      	ldr	r2, [r7, #12]
 8009496:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800949a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800949e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2200      	movs	r2, #0
 80094a4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80094ac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80094ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d105      	bne.n	80094c0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	699b      	ldr	r3, [r3, #24]
 80094b8:	f043 0210 	orr.w	r2, r3, #16
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	699a      	ldr	r2, [r3, #24]
 80094c4:	4b0e      	ldr	r3, [pc, #56]	; (8009500 <USB_DevInit+0x2b4>)
 80094c6:	4313      	orrs	r3, r2
 80094c8:	687a      	ldr	r2, [r7, #4]
 80094ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80094cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d005      	beq.n	80094de <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	699b      	ldr	r3, [r3, #24]
 80094d6:	f043 0208 	orr.w	r2, r3, #8
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80094de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094e0:	2b01      	cmp	r3, #1
 80094e2:	d105      	bne.n	80094f0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	699a      	ldr	r2, [r3, #24]
 80094e8:	4b06      	ldr	r3, [pc, #24]	; (8009504 <USB_DevInit+0x2b8>)
 80094ea:	4313      	orrs	r3, r2
 80094ec:	687a      	ldr	r2, [r7, #4]
 80094ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80094f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3718      	adds	r7, #24
 80094f6:	46bd      	mov	sp, r7
 80094f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80094fc:	b004      	add	sp, #16
 80094fe:	4770      	bx	lr
 8009500:	803c3800 	.word	0x803c3800
 8009504:	40000004 	.word	0x40000004

08009508 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009508:	b480      	push	{r7}
 800950a:	b085      	sub	sp, #20
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009512:	2300      	movs	r3, #0
 8009514:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	3301      	adds	r3, #1
 800951a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	4a13      	ldr	r2, [pc, #76]	; (800956c <USB_FlushTxFifo+0x64>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d901      	bls.n	8009528 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009524:	2303      	movs	r3, #3
 8009526:	e01b      	b.n	8009560 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	691b      	ldr	r3, [r3, #16]
 800952c:	2b00      	cmp	r3, #0
 800952e:	daf2      	bge.n	8009516 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009530:	2300      	movs	r3, #0
 8009532:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	019b      	lsls	r3, r3, #6
 8009538:	f043 0220 	orr.w	r2, r3, #32
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	3301      	adds	r3, #1
 8009544:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	4a08      	ldr	r2, [pc, #32]	; (800956c <USB_FlushTxFifo+0x64>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d901      	bls.n	8009552 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800954e:	2303      	movs	r3, #3
 8009550:	e006      	b.n	8009560 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	691b      	ldr	r3, [r3, #16]
 8009556:	f003 0320 	and.w	r3, r3, #32
 800955a:	2b20      	cmp	r3, #32
 800955c:	d0f0      	beq.n	8009540 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800955e:	2300      	movs	r3, #0
}
 8009560:	4618      	mov	r0, r3
 8009562:	3714      	adds	r7, #20
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr
 800956c:	00030d40 	.word	0x00030d40

08009570 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009570:	b480      	push	{r7}
 8009572:	b085      	sub	sp, #20
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009578:	2300      	movs	r3, #0
 800957a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	3301      	adds	r3, #1
 8009580:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	4a11      	ldr	r2, [pc, #68]	; (80095cc <USB_FlushRxFifo+0x5c>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d901      	bls.n	800958e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800958a:	2303      	movs	r3, #3
 800958c:	e018      	b.n	80095c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	691b      	ldr	r3, [r3, #16]
 8009592:	2b00      	cmp	r3, #0
 8009594:	daf2      	bge.n	800957c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009596:	2300      	movs	r3, #0
 8009598:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2210      	movs	r2, #16
 800959e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	3301      	adds	r3, #1
 80095a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	4a08      	ldr	r2, [pc, #32]	; (80095cc <USB_FlushRxFifo+0x5c>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d901      	bls.n	80095b2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80095ae:	2303      	movs	r3, #3
 80095b0:	e006      	b.n	80095c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	691b      	ldr	r3, [r3, #16]
 80095b6:	f003 0310 	and.w	r3, r3, #16
 80095ba:	2b10      	cmp	r3, #16
 80095bc:	d0f0      	beq.n	80095a0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80095be:	2300      	movs	r3, #0
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3714      	adds	r7, #20
 80095c4:	46bd      	mov	sp, r7
 80095c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ca:	4770      	bx	lr
 80095cc:	00030d40 	.word	0x00030d40

080095d0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b085      	sub	sp, #20
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	460b      	mov	r3, r1
 80095da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095e6:	681a      	ldr	r2, [r3, #0]
 80095e8:	78fb      	ldrb	r3, [r7, #3]
 80095ea:	68f9      	ldr	r1, [r7, #12]
 80095ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80095f0:	4313      	orrs	r3, r2
 80095f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80095f4:	2300      	movs	r3, #0
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3714      	adds	r7, #20
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr

08009602 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009602:	b480      	push	{r7}
 8009604:	b085      	sub	sp, #20
 8009606:	af00      	add	r7, sp, #0
 8009608:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	68fa      	ldr	r2, [r7, #12]
 8009618:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800961c:	f023 0303 	bic.w	r3, r3, #3
 8009620:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009628:	685b      	ldr	r3, [r3, #4]
 800962a:	68fa      	ldr	r2, [r7, #12]
 800962c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009630:	f043 0302 	orr.w	r3, r3, #2
 8009634:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009636:	2300      	movs	r3, #0
}
 8009638:	4618      	mov	r0, r3
 800963a:	3714      	adds	r7, #20
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr

08009644 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009644:	b480      	push	{r7}
 8009646:	b083      	sub	sp, #12
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	695b      	ldr	r3, [r3, #20]
 8009650:	f003 0301 	and.w	r3, r3, #1
}
 8009654:	4618      	mov	r0, r3
 8009656:	370c      	adds	r7, #12
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr

08009660 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009660:	b480      	push	{r7}
 8009662:	b085      	sub	sp, #20
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009668:	2300      	movs	r3, #0
 800966a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	3301      	adds	r3, #1
 8009670:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	4a13      	ldr	r2, [pc, #76]	; (80096c4 <USB_CoreReset+0x64>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d901      	bls.n	800967e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800967a:	2303      	movs	r3, #3
 800967c:	e01b      	b.n	80096b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	691b      	ldr	r3, [r3, #16]
 8009682:	2b00      	cmp	r3, #0
 8009684:	daf2      	bge.n	800966c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009686:	2300      	movs	r3, #0
 8009688:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	691b      	ldr	r3, [r3, #16]
 800968e:	f043 0201 	orr.w	r2, r3, #1
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	3301      	adds	r3, #1
 800969a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	4a09      	ldr	r2, [pc, #36]	; (80096c4 <USB_CoreReset+0x64>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d901      	bls.n	80096a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80096a4:	2303      	movs	r3, #3
 80096a6:	e006      	b.n	80096b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	691b      	ldr	r3, [r3, #16]
 80096ac:	f003 0301 	and.w	r3, r3, #1
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d0f0      	beq.n	8009696 <USB_CoreReset+0x36>

  return HAL_OK;
 80096b4:	2300      	movs	r3, #0
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3714      	adds	r7, #20
 80096ba:	46bd      	mov	sp, r7
 80096bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c0:	4770      	bx	lr
 80096c2:	bf00      	nop
 80096c4:	00030d40 	.word	0x00030d40

080096c8 <__cvt>:
 80096c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096ca:	ed2d 8b02 	vpush	{d8}
 80096ce:	eeb0 8b40 	vmov.f64	d8, d0
 80096d2:	b085      	sub	sp, #20
 80096d4:	4617      	mov	r7, r2
 80096d6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80096d8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80096da:	ee18 2a90 	vmov	r2, s17
 80096de:	f025 0520 	bic.w	r5, r5, #32
 80096e2:	2a00      	cmp	r2, #0
 80096e4:	bfb6      	itet	lt
 80096e6:	222d      	movlt	r2, #45	; 0x2d
 80096e8:	2200      	movge	r2, #0
 80096ea:	eeb1 8b40 	vneglt.f64	d8, d0
 80096ee:	2d46      	cmp	r5, #70	; 0x46
 80096f0:	460c      	mov	r4, r1
 80096f2:	701a      	strb	r2, [r3, #0]
 80096f4:	d004      	beq.n	8009700 <__cvt+0x38>
 80096f6:	2d45      	cmp	r5, #69	; 0x45
 80096f8:	d100      	bne.n	80096fc <__cvt+0x34>
 80096fa:	3401      	adds	r4, #1
 80096fc:	2102      	movs	r1, #2
 80096fe:	e000      	b.n	8009702 <__cvt+0x3a>
 8009700:	2103      	movs	r1, #3
 8009702:	ab03      	add	r3, sp, #12
 8009704:	9301      	str	r3, [sp, #4]
 8009706:	ab02      	add	r3, sp, #8
 8009708:	9300      	str	r3, [sp, #0]
 800970a:	4622      	mov	r2, r4
 800970c:	4633      	mov	r3, r6
 800970e:	eeb0 0b48 	vmov.f64	d0, d8
 8009712:	f001 f881 	bl	800a818 <_dtoa_r>
 8009716:	2d47      	cmp	r5, #71	; 0x47
 8009718:	d101      	bne.n	800971e <__cvt+0x56>
 800971a:	07fb      	lsls	r3, r7, #31
 800971c:	d51a      	bpl.n	8009754 <__cvt+0x8c>
 800971e:	2d46      	cmp	r5, #70	; 0x46
 8009720:	eb00 0204 	add.w	r2, r0, r4
 8009724:	d10c      	bne.n	8009740 <__cvt+0x78>
 8009726:	7803      	ldrb	r3, [r0, #0]
 8009728:	2b30      	cmp	r3, #48	; 0x30
 800972a:	d107      	bne.n	800973c <__cvt+0x74>
 800972c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009734:	bf1c      	itt	ne
 8009736:	f1c4 0401 	rsbne	r4, r4, #1
 800973a:	6034      	strne	r4, [r6, #0]
 800973c:	6833      	ldr	r3, [r6, #0]
 800973e:	441a      	add	r2, r3
 8009740:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009748:	bf08      	it	eq
 800974a:	9203      	streq	r2, [sp, #12]
 800974c:	2130      	movs	r1, #48	; 0x30
 800974e:	9b03      	ldr	r3, [sp, #12]
 8009750:	4293      	cmp	r3, r2
 8009752:	d307      	bcc.n	8009764 <__cvt+0x9c>
 8009754:	9b03      	ldr	r3, [sp, #12]
 8009756:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009758:	1a1b      	subs	r3, r3, r0
 800975a:	6013      	str	r3, [r2, #0]
 800975c:	b005      	add	sp, #20
 800975e:	ecbd 8b02 	vpop	{d8}
 8009762:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009764:	1c5c      	adds	r4, r3, #1
 8009766:	9403      	str	r4, [sp, #12]
 8009768:	7019      	strb	r1, [r3, #0]
 800976a:	e7f0      	b.n	800974e <__cvt+0x86>

0800976c <__exponent>:
 800976c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800976e:	4603      	mov	r3, r0
 8009770:	2900      	cmp	r1, #0
 8009772:	bfb8      	it	lt
 8009774:	4249      	neglt	r1, r1
 8009776:	f803 2b02 	strb.w	r2, [r3], #2
 800977a:	bfb4      	ite	lt
 800977c:	222d      	movlt	r2, #45	; 0x2d
 800977e:	222b      	movge	r2, #43	; 0x2b
 8009780:	2909      	cmp	r1, #9
 8009782:	7042      	strb	r2, [r0, #1]
 8009784:	dd2a      	ble.n	80097dc <__exponent+0x70>
 8009786:	f10d 0207 	add.w	r2, sp, #7
 800978a:	4617      	mov	r7, r2
 800978c:	260a      	movs	r6, #10
 800978e:	4694      	mov	ip, r2
 8009790:	fb91 f5f6 	sdiv	r5, r1, r6
 8009794:	fb06 1415 	mls	r4, r6, r5, r1
 8009798:	3430      	adds	r4, #48	; 0x30
 800979a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800979e:	460c      	mov	r4, r1
 80097a0:	2c63      	cmp	r4, #99	; 0x63
 80097a2:	f102 32ff 	add.w	r2, r2, #4294967295
 80097a6:	4629      	mov	r1, r5
 80097a8:	dcf1      	bgt.n	800978e <__exponent+0x22>
 80097aa:	3130      	adds	r1, #48	; 0x30
 80097ac:	f1ac 0402 	sub.w	r4, ip, #2
 80097b0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80097b4:	1c41      	adds	r1, r0, #1
 80097b6:	4622      	mov	r2, r4
 80097b8:	42ba      	cmp	r2, r7
 80097ba:	d30a      	bcc.n	80097d2 <__exponent+0x66>
 80097bc:	f10d 0209 	add.w	r2, sp, #9
 80097c0:	eba2 020c 	sub.w	r2, r2, ip
 80097c4:	42bc      	cmp	r4, r7
 80097c6:	bf88      	it	hi
 80097c8:	2200      	movhi	r2, #0
 80097ca:	4413      	add	r3, r2
 80097cc:	1a18      	subs	r0, r3, r0
 80097ce:	b003      	add	sp, #12
 80097d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097d2:	f812 5b01 	ldrb.w	r5, [r2], #1
 80097d6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80097da:	e7ed      	b.n	80097b8 <__exponent+0x4c>
 80097dc:	2330      	movs	r3, #48	; 0x30
 80097de:	3130      	adds	r1, #48	; 0x30
 80097e0:	7083      	strb	r3, [r0, #2]
 80097e2:	70c1      	strb	r1, [r0, #3]
 80097e4:	1d03      	adds	r3, r0, #4
 80097e6:	e7f1      	b.n	80097cc <__exponent+0x60>

080097e8 <_printf_float>:
 80097e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097ec:	b08b      	sub	sp, #44	; 0x2c
 80097ee:	460c      	mov	r4, r1
 80097f0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80097f4:	4616      	mov	r6, r2
 80097f6:	461f      	mov	r7, r3
 80097f8:	4605      	mov	r5, r0
 80097fa:	f000 ff05 	bl	800a608 <_localeconv_r>
 80097fe:	f8d0 b000 	ldr.w	fp, [r0]
 8009802:	4658      	mov	r0, fp
 8009804:	f7f6 fdbc 	bl	8000380 <strlen>
 8009808:	2300      	movs	r3, #0
 800980a:	9308      	str	r3, [sp, #32]
 800980c:	f8d8 3000 	ldr.w	r3, [r8]
 8009810:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009814:	6822      	ldr	r2, [r4, #0]
 8009816:	3307      	adds	r3, #7
 8009818:	f023 0307 	bic.w	r3, r3, #7
 800981c:	f103 0108 	add.w	r1, r3, #8
 8009820:	f8c8 1000 	str.w	r1, [r8]
 8009824:	ed93 0b00 	vldr	d0, [r3]
 8009828:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8009a88 <_printf_float+0x2a0>
 800982c:	eeb0 7bc0 	vabs.f64	d7, d0
 8009830:	eeb4 7b46 	vcmp.f64	d7, d6
 8009834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009838:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800983c:	4682      	mov	sl, r0
 800983e:	dd24      	ble.n	800988a <_printf_float+0xa2>
 8009840:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009848:	d502      	bpl.n	8009850 <_printf_float+0x68>
 800984a:	232d      	movs	r3, #45	; 0x2d
 800984c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009850:	498f      	ldr	r1, [pc, #572]	; (8009a90 <_printf_float+0x2a8>)
 8009852:	4b90      	ldr	r3, [pc, #576]	; (8009a94 <_printf_float+0x2ac>)
 8009854:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009858:	bf94      	ite	ls
 800985a:	4688      	movls	r8, r1
 800985c:	4698      	movhi	r8, r3
 800985e:	2303      	movs	r3, #3
 8009860:	6123      	str	r3, [r4, #16]
 8009862:	f022 0204 	bic.w	r2, r2, #4
 8009866:	2300      	movs	r3, #0
 8009868:	6022      	str	r2, [r4, #0]
 800986a:	9304      	str	r3, [sp, #16]
 800986c:	9700      	str	r7, [sp, #0]
 800986e:	4633      	mov	r3, r6
 8009870:	aa09      	add	r2, sp, #36	; 0x24
 8009872:	4621      	mov	r1, r4
 8009874:	4628      	mov	r0, r5
 8009876:	f000 f9d1 	bl	8009c1c <_printf_common>
 800987a:	3001      	adds	r0, #1
 800987c:	f040 808a 	bne.w	8009994 <_printf_float+0x1ac>
 8009880:	f04f 30ff 	mov.w	r0, #4294967295
 8009884:	b00b      	add	sp, #44	; 0x2c
 8009886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800988a:	eeb4 0b40 	vcmp.f64	d0, d0
 800988e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009892:	d709      	bvc.n	80098a8 <_printf_float+0xc0>
 8009894:	ee10 3a90 	vmov	r3, s1
 8009898:	2b00      	cmp	r3, #0
 800989a:	bfbc      	itt	lt
 800989c:	232d      	movlt	r3, #45	; 0x2d
 800989e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80098a2:	497d      	ldr	r1, [pc, #500]	; (8009a98 <_printf_float+0x2b0>)
 80098a4:	4b7d      	ldr	r3, [pc, #500]	; (8009a9c <_printf_float+0x2b4>)
 80098a6:	e7d5      	b.n	8009854 <_printf_float+0x6c>
 80098a8:	6863      	ldr	r3, [r4, #4]
 80098aa:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80098ae:	9104      	str	r1, [sp, #16]
 80098b0:	1c59      	adds	r1, r3, #1
 80098b2:	d13c      	bne.n	800992e <_printf_float+0x146>
 80098b4:	2306      	movs	r3, #6
 80098b6:	6063      	str	r3, [r4, #4]
 80098b8:	2300      	movs	r3, #0
 80098ba:	9303      	str	r3, [sp, #12]
 80098bc:	ab08      	add	r3, sp, #32
 80098be:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80098c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80098c6:	ab07      	add	r3, sp, #28
 80098c8:	6861      	ldr	r1, [r4, #4]
 80098ca:	9300      	str	r3, [sp, #0]
 80098cc:	6022      	str	r2, [r4, #0]
 80098ce:	f10d 031b 	add.w	r3, sp, #27
 80098d2:	4628      	mov	r0, r5
 80098d4:	f7ff fef8 	bl	80096c8 <__cvt>
 80098d8:	9b04      	ldr	r3, [sp, #16]
 80098da:	9907      	ldr	r1, [sp, #28]
 80098dc:	2b47      	cmp	r3, #71	; 0x47
 80098de:	4680      	mov	r8, r0
 80098e0:	d108      	bne.n	80098f4 <_printf_float+0x10c>
 80098e2:	1cc8      	adds	r0, r1, #3
 80098e4:	db02      	blt.n	80098ec <_printf_float+0x104>
 80098e6:	6863      	ldr	r3, [r4, #4]
 80098e8:	4299      	cmp	r1, r3
 80098ea:	dd41      	ble.n	8009970 <_printf_float+0x188>
 80098ec:	f1a9 0902 	sub.w	r9, r9, #2
 80098f0:	fa5f f989 	uxtb.w	r9, r9
 80098f4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80098f8:	d820      	bhi.n	800993c <_printf_float+0x154>
 80098fa:	3901      	subs	r1, #1
 80098fc:	464a      	mov	r2, r9
 80098fe:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009902:	9107      	str	r1, [sp, #28]
 8009904:	f7ff ff32 	bl	800976c <__exponent>
 8009908:	9a08      	ldr	r2, [sp, #32]
 800990a:	9004      	str	r0, [sp, #16]
 800990c:	1813      	adds	r3, r2, r0
 800990e:	2a01      	cmp	r2, #1
 8009910:	6123      	str	r3, [r4, #16]
 8009912:	dc02      	bgt.n	800991a <_printf_float+0x132>
 8009914:	6822      	ldr	r2, [r4, #0]
 8009916:	07d2      	lsls	r2, r2, #31
 8009918:	d501      	bpl.n	800991e <_printf_float+0x136>
 800991a:	3301      	adds	r3, #1
 800991c:	6123      	str	r3, [r4, #16]
 800991e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d0a2      	beq.n	800986c <_printf_float+0x84>
 8009926:	232d      	movs	r3, #45	; 0x2d
 8009928:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800992c:	e79e      	b.n	800986c <_printf_float+0x84>
 800992e:	9904      	ldr	r1, [sp, #16]
 8009930:	2947      	cmp	r1, #71	; 0x47
 8009932:	d1c1      	bne.n	80098b8 <_printf_float+0xd0>
 8009934:	2b00      	cmp	r3, #0
 8009936:	d1bf      	bne.n	80098b8 <_printf_float+0xd0>
 8009938:	2301      	movs	r3, #1
 800993a:	e7bc      	b.n	80098b6 <_printf_float+0xce>
 800993c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009940:	d118      	bne.n	8009974 <_printf_float+0x18c>
 8009942:	2900      	cmp	r1, #0
 8009944:	6863      	ldr	r3, [r4, #4]
 8009946:	dd0b      	ble.n	8009960 <_printf_float+0x178>
 8009948:	6121      	str	r1, [r4, #16]
 800994a:	b913      	cbnz	r3, 8009952 <_printf_float+0x16a>
 800994c:	6822      	ldr	r2, [r4, #0]
 800994e:	07d0      	lsls	r0, r2, #31
 8009950:	d502      	bpl.n	8009958 <_printf_float+0x170>
 8009952:	3301      	adds	r3, #1
 8009954:	440b      	add	r3, r1
 8009956:	6123      	str	r3, [r4, #16]
 8009958:	2300      	movs	r3, #0
 800995a:	65a1      	str	r1, [r4, #88]	; 0x58
 800995c:	9304      	str	r3, [sp, #16]
 800995e:	e7de      	b.n	800991e <_printf_float+0x136>
 8009960:	b913      	cbnz	r3, 8009968 <_printf_float+0x180>
 8009962:	6822      	ldr	r2, [r4, #0]
 8009964:	07d2      	lsls	r2, r2, #31
 8009966:	d501      	bpl.n	800996c <_printf_float+0x184>
 8009968:	3302      	adds	r3, #2
 800996a:	e7f4      	b.n	8009956 <_printf_float+0x16e>
 800996c:	2301      	movs	r3, #1
 800996e:	e7f2      	b.n	8009956 <_printf_float+0x16e>
 8009970:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009974:	9b08      	ldr	r3, [sp, #32]
 8009976:	4299      	cmp	r1, r3
 8009978:	db05      	blt.n	8009986 <_printf_float+0x19e>
 800997a:	6823      	ldr	r3, [r4, #0]
 800997c:	6121      	str	r1, [r4, #16]
 800997e:	07d8      	lsls	r0, r3, #31
 8009980:	d5ea      	bpl.n	8009958 <_printf_float+0x170>
 8009982:	1c4b      	adds	r3, r1, #1
 8009984:	e7e7      	b.n	8009956 <_printf_float+0x16e>
 8009986:	2900      	cmp	r1, #0
 8009988:	bfd4      	ite	le
 800998a:	f1c1 0202 	rsble	r2, r1, #2
 800998e:	2201      	movgt	r2, #1
 8009990:	4413      	add	r3, r2
 8009992:	e7e0      	b.n	8009956 <_printf_float+0x16e>
 8009994:	6823      	ldr	r3, [r4, #0]
 8009996:	055a      	lsls	r2, r3, #21
 8009998:	d407      	bmi.n	80099aa <_printf_float+0x1c2>
 800999a:	6923      	ldr	r3, [r4, #16]
 800999c:	4642      	mov	r2, r8
 800999e:	4631      	mov	r1, r6
 80099a0:	4628      	mov	r0, r5
 80099a2:	47b8      	blx	r7
 80099a4:	3001      	adds	r0, #1
 80099a6:	d12a      	bne.n	80099fe <_printf_float+0x216>
 80099a8:	e76a      	b.n	8009880 <_printf_float+0x98>
 80099aa:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80099ae:	f240 80e0 	bls.w	8009b72 <_printf_float+0x38a>
 80099b2:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80099b6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80099ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099be:	d133      	bne.n	8009a28 <_printf_float+0x240>
 80099c0:	4a37      	ldr	r2, [pc, #220]	; (8009aa0 <_printf_float+0x2b8>)
 80099c2:	2301      	movs	r3, #1
 80099c4:	4631      	mov	r1, r6
 80099c6:	4628      	mov	r0, r5
 80099c8:	47b8      	blx	r7
 80099ca:	3001      	adds	r0, #1
 80099cc:	f43f af58 	beq.w	8009880 <_printf_float+0x98>
 80099d0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80099d4:	429a      	cmp	r2, r3
 80099d6:	db02      	blt.n	80099de <_printf_float+0x1f6>
 80099d8:	6823      	ldr	r3, [r4, #0]
 80099da:	07d8      	lsls	r0, r3, #31
 80099dc:	d50f      	bpl.n	80099fe <_printf_float+0x216>
 80099de:	4653      	mov	r3, sl
 80099e0:	465a      	mov	r2, fp
 80099e2:	4631      	mov	r1, r6
 80099e4:	4628      	mov	r0, r5
 80099e6:	47b8      	blx	r7
 80099e8:	3001      	adds	r0, #1
 80099ea:	f43f af49 	beq.w	8009880 <_printf_float+0x98>
 80099ee:	f04f 0800 	mov.w	r8, #0
 80099f2:	f104 091a 	add.w	r9, r4, #26
 80099f6:	9b08      	ldr	r3, [sp, #32]
 80099f8:	3b01      	subs	r3, #1
 80099fa:	4543      	cmp	r3, r8
 80099fc:	dc09      	bgt.n	8009a12 <_printf_float+0x22a>
 80099fe:	6823      	ldr	r3, [r4, #0]
 8009a00:	079b      	lsls	r3, r3, #30
 8009a02:	f100 8106 	bmi.w	8009c12 <_printf_float+0x42a>
 8009a06:	68e0      	ldr	r0, [r4, #12]
 8009a08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a0a:	4298      	cmp	r0, r3
 8009a0c:	bfb8      	it	lt
 8009a0e:	4618      	movlt	r0, r3
 8009a10:	e738      	b.n	8009884 <_printf_float+0x9c>
 8009a12:	2301      	movs	r3, #1
 8009a14:	464a      	mov	r2, r9
 8009a16:	4631      	mov	r1, r6
 8009a18:	4628      	mov	r0, r5
 8009a1a:	47b8      	blx	r7
 8009a1c:	3001      	adds	r0, #1
 8009a1e:	f43f af2f 	beq.w	8009880 <_printf_float+0x98>
 8009a22:	f108 0801 	add.w	r8, r8, #1
 8009a26:	e7e6      	b.n	80099f6 <_printf_float+0x20e>
 8009a28:	9b07      	ldr	r3, [sp, #28]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	dc3a      	bgt.n	8009aa4 <_printf_float+0x2bc>
 8009a2e:	4a1c      	ldr	r2, [pc, #112]	; (8009aa0 <_printf_float+0x2b8>)
 8009a30:	2301      	movs	r3, #1
 8009a32:	4631      	mov	r1, r6
 8009a34:	4628      	mov	r0, r5
 8009a36:	47b8      	blx	r7
 8009a38:	3001      	adds	r0, #1
 8009a3a:	f43f af21 	beq.w	8009880 <_printf_float+0x98>
 8009a3e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8009a42:	4313      	orrs	r3, r2
 8009a44:	d102      	bne.n	8009a4c <_printf_float+0x264>
 8009a46:	6823      	ldr	r3, [r4, #0]
 8009a48:	07d9      	lsls	r1, r3, #31
 8009a4a:	d5d8      	bpl.n	80099fe <_printf_float+0x216>
 8009a4c:	4653      	mov	r3, sl
 8009a4e:	465a      	mov	r2, fp
 8009a50:	4631      	mov	r1, r6
 8009a52:	4628      	mov	r0, r5
 8009a54:	47b8      	blx	r7
 8009a56:	3001      	adds	r0, #1
 8009a58:	f43f af12 	beq.w	8009880 <_printf_float+0x98>
 8009a5c:	f04f 0900 	mov.w	r9, #0
 8009a60:	f104 0a1a 	add.w	sl, r4, #26
 8009a64:	9b07      	ldr	r3, [sp, #28]
 8009a66:	425b      	negs	r3, r3
 8009a68:	454b      	cmp	r3, r9
 8009a6a:	dc01      	bgt.n	8009a70 <_printf_float+0x288>
 8009a6c:	9b08      	ldr	r3, [sp, #32]
 8009a6e:	e795      	b.n	800999c <_printf_float+0x1b4>
 8009a70:	2301      	movs	r3, #1
 8009a72:	4652      	mov	r2, sl
 8009a74:	4631      	mov	r1, r6
 8009a76:	4628      	mov	r0, r5
 8009a78:	47b8      	blx	r7
 8009a7a:	3001      	adds	r0, #1
 8009a7c:	f43f af00 	beq.w	8009880 <_printf_float+0x98>
 8009a80:	f109 0901 	add.w	r9, r9, #1
 8009a84:	e7ee      	b.n	8009a64 <_printf_float+0x27c>
 8009a86:	bf00      	nop
 8009a88:	ffffffff 	.word	0xffffffff
 8009a8c:	7fefffff 	.word	0x7fefffff
 8009a90:	0800dd44 	.word	0x0800dd44
 8009a94:	0800dd48 	.word	0x0800dd48
 8009a98:	0800dd4c 	.word	0x0800dd4c
 8009a9c:	0800dd50 	.word	0x0800dd50
 8009aa0:	0800dd54 	.word	0x0800dd54
 8009aa4:	9a08      	ldr	r2, [sp, #32]
 8009aa6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009aa8:	429a      	cmp	r2, r3
 8009aaa:	bfa8      	it	ge
 8009aac:	461a      	movge	r2, r3
 8009aae:	2a00      	cmp	r2, #0
 8009ab0:	4691      	mov	r9, r2
 8009ab2:	dc38      	bgt.n	8009b26 <_printf_float+0x33e>
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	9305      	str	r3, [sp, #20]
 8009ab8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009abc:	f104 021a 	add.w	r2, r4, #26
 8009ac0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ac2:	9905      	ldr	r1, [sp, #20]
 8009ac4:	9304      	str	r3, [sp, #16]
 8009ac6:	eba3 0309 	sub.w	r3, r3, r9
 8009aca:	428b      	cmp	r3, r1
 8009acc:	dc33      	bgt.n	8009b36 <_printf_float+0x34e>
 8009ace:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009ad2:	429a      	cmp	r2, r3
 8009ad4:	db3c      	blt.n	8009b50 <_printf_float+0x368>
 8009ad6:	6823      	ldr	r3, [r4, #0]
 8009ad8:	07da      	lsls	r2, r3, #31
 8009ada:	d439      	bmi.n	8009b50 <_printf_float+0x368>
 8009adc:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8009ae0:	eba2 0903 	sub.w	r9, r2, r3
 8009ae4:	9b04      	ldr	r3, [sp, #16]
 8009ae6:	1ad2      	subs	r2, r2, r3
 8009ae8:	4591      	cmp	r9, r2
 8009aea:	bfa8      	it	ge
 8009aec:	4691      	movge	r9, r2
 8009aee:	f1b9 0f00 	cmp.w	r9, #0
 8009af2:	dc35      	bgt.n	8009b60 <_printf_float+0x378>
 8009af4:	f04f 0800 	mov.w	r8, #0
 8009af8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009afc:	f104 0a1a 	add.w	sl, r4, #26
 8009b00:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009b04:	1a9b      	subs	r3, r3, r2
 8009b06:	eba3 0309 	sub.w	r3, r3, r9
 8009b0a:	4543      	cmp	r3, r8
 8009b0c:	f77f af77 	ble.w	80099fe <_printf_float+0x216>
 8009b10:	2301      	movs	r3, #1
 8009b12:	4652      	mov	r2, sl
 8009b14:	4631      	mov	r1, r6
 8009b16:	4628      	mov	r0, r5
 8009b18:	47b8      	blx	r7
 8009b1a:	3001      	adds	r0, #1
 8009b1c:	f43f aeb0 	beq.w	8009880 <_printf_float+0x98>
 8009b20:	f108 0801 	add.w	r8, r8, #1
 8009b24:	e7ec      	b.n	8009b00 <_printf_float+0x318>
 8009b26:	4613      	mov	r3, r2
 8009b28:	4631      	mov	r1, r6
 8009b2a:	4642      	mov	r2, r8
 8009b2c:	4628      	mov	r0, r5
 8009b2e:	47b8      	blx	r7
 8009b30:	3001      	adds	r0, #1
 8009b32:	d1bf      	bne.n	8009ab4 <_printf_float+0x2cc>
 8009b34:	e6a4      	b.n	8009880 <_printf_float+0x98>
 8009b36:	2301      	movs	r3, #1
 8009b38:	4631      	mov	r1, r6
 8009b3a:	4628      	mov	r0, r5
 8009b3c:	9204      	str	r2, [sp, #16]
 8009b3e:	47b8      	blx	r7
 8009b40:	3001      	adds	r0, #1
 8009b42:	f43f ae9d 	beq.w	8009880 <_printf_float+0x98>
 8009b46:	9b05      	ldr	r3, [sp, #20]
 8009b48:	9a04      	ldr	r2, [sp, #16]
 8009b4a:	3301      	adds	r3, #1
 8009b4c:	9305      	str	r3, [sp, #20]
 8009b4e:	e7b7      	b.n	8009ac0 <_printf_float+0x2d8>
 8009b50:	4653      	mov	r3, sl
 8009b52:	465a      	mov	r2, fp
 8009b54:	4631      	mov	r1, r6
 8009b56:	4628      	mov	r0, r5
 8009b58:	47b8      	blx	r7
 8009b5a:	3001      	adds	r0, #1
 8009b5c:	d1be      	bne.n	8009adc <_printf_float+0x2f4>
 8009b5e:	e68f      	b.n	8009880 <_printf_float+0x98>
 8009b60:	9a04      	ldr	r2, [sp, #16]
 8009b62:	464b      	mov	r3, r9
 8009b64:	4442      	add	r2, r8
 8009b66:	4631      	mov	r1, r6
 8009b68:	4628      	mov	r0, r5
 8009b6a:	47b8      	blx	r7
 8009b6c:	3001      	adds	r0, #1
 8009b6e:	d1c1      	bne.n	8009af4 <_printf_float+0x30c>
 8009b70:	e686      	b.n	8009880 <_printf_float+0x98>
 8009b72:	9a08      	ldr	r2, [sp, #32]
 8009b74:	2a01      	cmp	r2, #1
 8009b76:	dc01      	bgt.n	8009b7c <_printf_float+0x394>
 8009b78:	07db      	lsls	r3, r3, #31
 8009b7a:	d537      	bpl.n	8009bec <_printf_float+0x404>
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	4642      	mov	r2, r8
 8009b80:	4631      	mov	r1, r6
 8009b82:	4628      	mov	r0, r5
 8009b84:	47b8      	blx	r7
 8009b86:	3001      	adds	r0, #1
 8009b88:	f43f ae7a 	beq.w	8009880 <_printf_float+0x98>
 8009b8c:	4653      	mov	r3, sl
 8009b8e:	465a      	mov	r2, fp
 8009b90:	4631      	mov	r1, r6
 8009b92:	4628      	mov	r0, r5
 8009b94:	47b8      	blx	r7
 8009b96:	3001      	adds	r0, #1
 8009b98:	f43f ae72 	beq.w	8009880 <_printf_float+0x98>
 8009b9c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009ba0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ba8:	9b08      	ldr	r3, [sp, #32]
 8009baa:	d01a      	beq.n	8009be2 <_printf_float+0x3fa>
 8009bac:	3b01      	subs	r3, #1
 8009bae:	f108 0201 	add.w	r2, r8, #1
 8009bb2:	4631      	mov	r1, r6
 8009bb4:	4628      	mov	r0, r5
 8009bb6:	47b8      	blx	r7
 8009bb8:	3001      	adds	r0, #1
 8009bba:	d10e      	bne.n	8009bda <_printf_float+0x3f2>
 8009bbc:	e660      	b.n	8009880 <_printf_float+0x98>
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	464a      	mov	r2, r9
 8009bc2:	4631      	mov	r1, r6
 8009bc4:	4628      	mov	r0, r5
 8009bc6:	47b8      	blx	r7
 8009bc8:	3001      	adds	r0, #1
 8009bca:	f43f ae59 	beq.w	8009880 <_printf_float+0x98>
 8009bce:	f108 0801 	add.w	r8, r8, #1
 8009bd2:	9b08      	ldr	r3, [sp, #32]
 8009bd4:	3b01      	subs	r3, #1
 8009bd6:	4543      	cmp	r3, r8
 8009bd8:	dcf1      	bgt.n	8009bbe <_printf_float+0x3d6>
 8009bda:	9b04      	ldr	r3, [sp, #16]
 8009bdc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009be0:	e6dd      	b.n	800999e <_printf_float+0x1b6>
 8009be2:	f04f 0800 	mov.w	r8, #0
 8009be6:	f104 091a 	add.w	r9, r4, #26
 8009bea:	e7f2      	b.n	8009bd2 <_printf_float+0x3ea>
 8009bec:	2301      	movs	r3, #1
 8009bee:	4642      	mov	r2, r8
 8009bf0:	e7df      	b.n	8009bb2 <_printf_float+0x3ca>
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	464a      	mov	r2, r9
 8009bf6:	4631      	mov	r1, r6
 8009bf8:	4628      	mov	r0, r5
 8009bfa:	47b8      	blx	r7
 8009bfc:	3001      	adds	r0, #1
 8009bfe:	f43f ae3f 	beq.w	8009880 <_printf_float+0x98>
 8009c02:	f108 0801 	add.w	r8, r8, #1
 8009c06:	68e3      	ldr	r3, [r4, #12]
 8009c08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c0a:	1a5b      	subs	r3, r3, r1
 8009c0c:	4543      	cmp	r3, r8
 8009c0e:	dcf0      	bgt.n	8009bf2 <_printf_float+0x40a>
 8009c10:	e6f9      	b.n	8009a06 <_printf_float+0x21e>
 8009c12:	f04f 0800 	mov.w	r8, #0
 8009c16:	f104 0919 	add.w	r9, r4, #25
 8009c1a:	e7f4      	b.n	8009c06 <_printf_float+0x41e>

08009c1c <_printf_common>:
 8009c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c20:	4616      	mov	r6, r2
 8009c22:	4699      	mov	r9, r3
 8009c24:	688a      	ldr	r2, [r1, #8]
 8009c26:	690b      	ldr	r3, [r1, #16]
 8009c28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	bfb8      	it	lt
 8009c30:	4613      	movlt	r3, r2
 8009c32:	6033      	str	r3, [r6, #0]
 8009c34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009c38:	4607      	mov	r7, r0
 8009c3a:	460c      	mov	r4, r1
 8009c3c:	b10a      	cbz	r2, 8009c42 <_printf_common+0x26>
 8009c3e:	3301      	adds	r3, #1
 8009c40:	6033      	str	r3, [r6, #0]
 8009c42:	6823      	ldr	r3, [r4, #0]
 8009c44:	0699      	lsls	r1, r3, #26
 8009c46:	bf42      	ittt	mi
 8009c48:	6833      	ldrmi	r3, [r6, #0]
 8009c4a:	3302      	addmi	r3, #2
 8009c4c:	6033      	strmi	r3, [r6, #0]
 8009c4e:	6825      	ldr	r5, [r4, #0]
 8009c50:	f015 0506 	ands.w	r5, r5, #6
 8009c54:	d106      	bne.n	8009c64 <_printf_common+0x48>
 8009c56:	f104 0a19 	add.w	sl, r4, #25
 8009c5a:	68e3      	ldr	r3, [r4, #12]
 8009c5c:	6832      	ldr	r2, [r6, #0]
 8009c5e:	1a9b      	subs	r3, r3, r2
 8009c60:	42ab      	cmp	r3, r5
 8009c62:	dc26      	bgt.n	8009cb2 <_printf_common+0x96>
 8009c64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009c68:	1e13      	subs	r3, r2, #0
 8009c6a:	6822      	ldr	r2, [r4, #0]
 8009c6c:	bf18      	it	ne
 8009c6e:	2301      	movne	r3, #1
 8009c70:	0692      	lsls	r2, r2, #26
 8009c72:	d42b      	bmi.n	8009ccc <_printf_common+0xb0>
 8009c74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c78:	4649      	mov	r1, r9
 8009c7a:	4638      	mov	r0, r7
 8009c7c:	47c0      	blx	r8
 8009c7e:	3001      	adds	r0, #1
 8009c80:	d01e      	beq.n	8009cc0 <_printf_common+0xa4>
 8009c82:	6823      	ldr	r3, [r4, #0]
 8009c84:	6922      	ldr	r2, [r4, #16]
 8009c86:	f003 0306 	and.w	r3, r3, #6
 8009c8a:	2b04      	cmp	r3, #4
 8009c8c:	bf02      	ittt	eq
 8009c8e:	68e5      	ldreq	r5, [r4, #12]
 8009c90:	6833      	ldreq	r3, [r6, #0]
 8009c92:	1aed      	subeq	r5, r5, r3
 8009c94:	68a3      	ldr	r3, [r4, #8]
 8009c96:	bf0c      	ite	eq
 8009c98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c9c:	2500      	movne	r5, #0
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	bfc4      	itt	gt
 8009ca2:	1a9b      	subgt	r3, r3, r2
 8009ca4:	18ed      	addgt	r5, r5, r3
 8009ca6:	2600      	movs	r6, #0
 8009ca8:	341a      	adds	r4, #26
 8009caa:	42b5      	cmp	r5, r6
 8009cac:	d11a      	bne.n	8009ce4 <_printf_common+0xc8>
 8009cae:	2000      	movs	r0, #0
 8009cb0:	e008      	b.n	8009cc4 <_printf_common+0xa8>
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	4652      	mov	r2, sl
 8009cb6:	4649      	mov	r1, r9
 8009cb8:	4638      	mov	r0, r7
 8009cba:	47c0      	blx	r8
 8009cbc:	3001      	adds	r0, #1
 8009cbe:	d103      	bne.n	8009cc8 <_printf_common+0xac>
 8009cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8009cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cc8:	3501      	adds	r5, #1
 8009cca:	e7c6      	b.n	8009c5a <_printf_common+0x3e>
 8009ccc:	18e1      	adds	r1, r4, r3
 8009cce:	1c5a      	adds	r2, r3, #1
 8009cd0:	2030      	movs	r0, #48	; 0x30
 8009cd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009cd6:	4422      	add	r2, r4
 8009cd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009cdc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009ce0:	3302      	adds	r3, #2
 8009ce2:	e7c7      	b.n	8009c74 <_printf_common+0x58>
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	4622      	mov	r2, r4
 8009ce8:	4649      	mov	r1, r9
 8009cea:	4638      	mov	r0, r7
 8009cec:	47c0      	blx	r8
 8009cee:	3001      	adds	r0, #1
 8009cf0:	d0e6      	beq.n	8009cc0 <_printf_common+0xa4>
 8009cf2:	3601      	adds	r6, #1
 8009cf4:	e7d9      	b.n	8009caa <_printf_common+0x8e>
	...

08009cf8 <_printf_i>:
 8009cf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009cfc:	7e0f      	ldrb	r7, [r1, #24]
 8009cfe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009d00:	2f78      	cmp	r7, #120	; 0x78
 8009d02:	4691      	mov	r9, r2
 8009d04:	4680      	mov	r8, r0
 8009d06:	460c      	mov	r4, r1
 8009d08:	469a      	mov	sl, r3
 8009d0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009d0e:	d807      	bhi.n	8009d20 <_printf_i+0x28>
 8009d10:	2f62      	cmp	r7, #98	; 0x62
 8009d12:	d80a      	bhi.n	8009d2a <_printf_i+0x32>
 8009d14:	2f00      	cmp	r7, #0
 8009d16:	f000 80d4 	beq.w	8009ec2 <_printf_i+0x1ca>
 8009d1a:	2f58      	cmp	r7, #88	; 0x58
 8009d1c:	f000 80c0 	beq.w	8009ea0 <_printf_i+0x1a8>
 8009d20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009d28:	e03a      	b.n	8009da0 <_printf_i+0xa8>
 8009d2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009d2e:	2b15      	cmp	r3, #21
 8009d30:	d8f6      	bhi.n	8009d20 <_printf_i+0x28>
 8009d32:	a101      	add	r1, pc, #4	; (adr r1, 8009d38 <_printf_i+0x40>)
 8009d34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009d38:	08009d91 	.word	0x08009d91
 8009d3c:	08009da5 	.word	0x08009da5
 8009d40:	08009d21 	.word	0x08009d21
 8009d44:	08009d21 	.word	0x08009d21
 8009d48:	08009d21 	.word	0x08009d21
 8009d4c:	08009d21 	.word	0x08009d21
 8009d50:	08009da5 	.word	0x08009da5
 8009d54:	08009d21 	.word	0x08009d21
 8009d58:	08009d21 	.word	0x08009d21
 8009d5c:	08009d21 	.word	0x08009d21
 8009d60:	08009d21 	.word	0x08009d21
 8009d64:	08009ea9 	.word	0x08009ea9
 8009d68:	08009dd1 	.word	0x08009dd1
 8009d6c:	08009e63 	.word	0x08009e63
 8009d70:	08009d21 	.word	0x08009d21
 8009d74:	08009d21 	.word	0x08009d21
 8009d78:	08009ecb 	.word	0x08009ecb
 8009d7c:	08009d21 	.word	0x08009d21
 8009d80:	08009dd1 	.word	0x08009dd1
 8009d84:	08009d21 	.word	0x08009d21
 8009d88:	08009d21 	.word	0x08009d21
 8009d8c:	08009e6b 	.word	0x08009e6b
 8009d90:	682b      	ldr	r3, [r5, #0]
 8009d92:	1d1a      	adds	r2, r3, #4
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	602a      	str	r2, [r5, #0]
 8009d98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009da0:	2301      	movs	r3, #1
 8009da2:	e09f      	b.n	8009ee4 <_printf_i+0x1ec>
 8009da4:	6820      	ldr	r0, [r4, #0]
 8009da6:	682b      	ldr	r3, [r5, #0]
 8009da8:	0607      	lsls	r7, r0, #24
 8009daa:	f103 0104 	add.w	r1, r3, #4
 8009dae:	6029      	str	r1, [r5, #0]
 8009db0:	d501      	bpl.n	8009db6 <_printf_i+0xbe>
 8009db2:	681e      	ldr	r6, [r3, #0]
 8009db4:	e003      	b.n	8009dbe <_printf_i+0xc6>
 8009db6:	0646      	lsls	r6, r0, #25
 8009db8:	d5fb      	bpl.n	8009db2 <_printf_i+0xba>
 8009dba:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009dbe:	2e00      	cmp	r6, #0
 8009dc0:	da03      	bge.n	8009dca <_printf_i+0xd2>
 8009dc2:	232d      	movs	r3, #45	; 0x2d
 8009dc4:	4276      	negs	r6, r6
 8009dc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009dca:	485a      	ldr	r0, [pc, #360]	; (8009f34 <_printf_i+0x23c>)
 8009dcc:	230a      	movs	r3, #10
 8009dce:	e012      	b.n	8009df6 <_printf_i+0xfe>
 8009dd0:	682b      	ldr	r3, [r5, #0]
 8009dd2:	6820      	ldr	r0, [r4, #0]
 8009dd4:	1d19      	adds	r1, r3, #4
 8009dd6:	6029      	str	r1, [r5, #0]
 8009dd8:	0605      	lsls	r5, r0, #24
 8009dda:	d501      	bpl.n	8009de0 <_printf_i+0xe8>
 8009ddc:	681e      	ldr	r6, [r3, #0]
 8009dde:	e002      	b.n	8009de6 <_printf_i+0xee>
 8009de0:	0641      	lsls	r1, r0, #25
 8009de2:	d5fb      	bpl.n	8009ddc <_printf_i+0xe4>
 8009de4:	881e      	ldrh	r6, [r3, #0]
 8009de6:	4853      	ldr	r0, [pc, #332]	; (8009f34 <_printf_i+0x23c>)
 8009de8:	2f6f      	cmp	r7, #111	; 0x6f
 8009dea:	bf0c      	ite	eq
 8009dec:	2308      	moveq	r3, #8
 8009dee:	230a      	movne	r3, #10
 8009df0:	2100      	movs	r1, #0
 8009df2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009df6:	6865      	ldr	r5, [r4, #4]
 8009df8:	60a5      	str	r5, [r4, #8]
 8009dfa:	2d00      	cmp	r5, #0
 8009dfc:	bfa2      	ittt	ge
 8009dfe:	6821      	ldrge	r1, [r4, #0]
 8009e00:	f021 0104 	bicge.w	r1, r1, #4
 8009e04:	6021      	strge	r1, [r4, #0]
 8009e06:	b90e      	cbnz	r6, 8009e0c <_printf_i+0x114>
 8009e08:	2d00      	cmp	r5, #0
 8009e0a:	d04b      	beq.n	8009ea4 <_printf_i+0x1ac>
 8009e0c:	4615      	mov	r5, r2
 8009e0e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009e12:	fb03 6711 	mls	r7, r3, r1, r6
 8009e16:	5dc7      	ldrb	r7, [r0, r7]
 8009e18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009e1c:	4637      	mov	r7, r6
 8009e1e:	42bb      	cmp	r3, r7
 8009e20:	460e      	mov	r6, r1
 8009e22:	d9f4      	bls.n	8009e0e <_printf_i+0x116>
 8009e24:	2b08      	cmp	r3, #8
 8009e26:	d10b      	bne.n	8009e40 <_printf_i+0x148>
 8009e28:	6823      	ldr	r3, [r4, #0]
 8009e2a:	07de      	lsls	r6, r3, #31
 8009e2c:	d508      	bpl.n	8009e40 <_printf_i+0x148>
 8009e2e:	6923      	ldr	r3, [r4, #16]
 8009e30:	6861      	ldr	r1, [r4, #4]
 8009e32:	4299      	cmp	r1, r3
 8009e34:	bfde      	ittt	le
 8009e36:	2330      	movle	r3, #48	; 0x30
 8009e38:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009e3c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009e40:	1b52      	subs	r2, r2, r5
 8009e42:	6122      	str	r2, [r4, #16]
 8009e44:	f8cd a000 	str.w	sl, [sp]
 8009e48:	464b      	mov	r3, r9
 8009e4a:	aa03      	add	r2, sp, #12
 8009e4c:	4621      	mov	r1, r4
 8009e4e:	4640      	mov	r0, r8
 8009e50:	f7ff fee4 	bl	8009c1c <_printf_common>
 8009e54:	3001      	adds	r0, #1
 8009e56:	d14a      	bne.n	8009eee <_printf_i+0x1f6>
 8009e58:	f04f 30ff 	mov.w	r0, #4294967295
 8009e5c:	b004      	add	sp, #16
 8009e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e62:	6823      	ldr	r3, [r4, #0]
 8009e64:	f043 0320 	orr.w	r3, r3, #32
 8009e68:	6023      	str	r3, [r4, #0]
 8009e6a:	4833      	ldr	r0, [pc, #204]	; (8009f38 <_printf_i+0x240>)
 8009e6c:	2778      	movs	r7, #120	; 0x78
 8009e6e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009e72:	6823      	ldr	r3, [r4, #0]
 8009e74:	6829      	ldr	r1, [r5, #0]
 8009e76:	061f      	lsls	r7, r3, #24
 8009e78:	f851 6b04 	ldr.w	r6, [r1], #4
 8009e7c:	d402      	bmi.n	8009e84 <_printf_i+0x18c>
 8009e7e:	065f      	lsls	r7, r3, #25
 8009e80:	bf48      	it	mi
 8009e82:	b2b6      	uxthmi	r6, r6
 8009e84:	07df      	lsls	r7, r3, #31
 8009e86:	bf48      	it	mi
 8009e88:	f043 0320 	orrmi.w	r3, r3, #32
 8009e8c:	6029      	str	r1, [r5, #0]
 8009e8e:	bf48      	it	mi
 8009e90:	6023      	strmi	r3, [r4, #0]
 8009e92:	b91e      	cbnz	r6, 8009e9c <_printf_i+0x1a4>
 8009e94:	6823      	ldr	r3, [r4, #0]
 8009e96:	f023 0320 	bic.w	r3, r3, #32
 8009e9a:	6023      	str	r3, [r4, #0]
 8009e9c:	2310      	movs	r3, #16
 8009e9e:	e7a7      	b.n	8009df0 <_printf_i+0xf8>
 8009ea0:	4824      	ldr	r0, [pc, #144]	; (8009f34 <_printf_i+0x23c>)
 8009ea2:	e7e4      	b.n	8009e6e <_printf_i+0x176>
 8009ea4:	4615      	mov	r5, r2
 8009ea6:	e7bd      	b.n	8009e24 <_printf_i+0x12c>
 8009ea8:	682b      	ldr	r3, [r5, #0]
 8009eaa:	6826      	ldr	r6, [r4, #0]
 8009eac:	6961      	ldr	r1, [r4, #20]
 8009eae:	1d18      	adds	r0, r3, #4
 8009eb0:	6028      	str	r0, [r5, #0]
 8009eb2:	0635      	lsls	r5, r6, #24
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	d501      	bpl.n	8009ebc <_printf_i+0x1c4>
 8009eb8:	6019      	str	r1, [r3, #0]
 8009eba:	e002      	b.n	8009ec2 <_printf_i+0x1ca>
 8009ebc:	0670      	lsls	r0, r6, #25
 8009ebe:	d5fb      	bpl.n	8009eb8 <_printf_i+0x1c0>
 8009ec0:	8019      	strh	r1, [r3, #0]
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	6123      	str	r3, [r4, #16]
 8009ec6:	4615      	mov	r5, r2
 8009ec8:	e7bc      	b.n	8009e44 <_printf_i+0x14c>
 8009eca:	682b      	ldr	r3, [r5, #0]
 8009ecc:	1d1a      	adds	r2, r3, #4
 8009ece:	602a      	str	r2, [r5, #0]
 8009ed0:	681d      	ldr	r5, [r3, #0]
 8009ed2:	6862      	ldr	r2, [r4, #4]
 8009ed4:	2100      	movs	r1, #0
 8009ed6:	4628      	mov	r0, r5
 8009ed8:	f7f6 fa02 	bl	80002e0 <memchr>
 8009edc:	b108      	cbz	r0, 8009ee2 <_printf_i+0x1ea>
 8009ede:	1b40      	subs	r0, r0, r5
 8009ee0:	6060      	str	r0, [r4, #4]
 8009ee2:	6863      	ldr	r3, [r4, #4]
 8009ee4:	6123      	str	r3, [r4, #16]
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009eec:	e7aa      	b.n	8009e44 <_printf_i+0x14c>
 8009eee:	6923      	ldr	r3, [r4, #16]
 8009ef0:	462a      	mov	r2, r5
 8009ef2:	4649      	mov	r1, r9
 8009ef4:	4640      	mov	r0, r8
 8009ef6:	47d0      	blx	sl
 8009ef8:	3001      	adds	r0, #1
 8009efa:	d0ad      	beq.n	8009e58 <_printf_i+0x160>
 8009efc:	6823      	ldr	r3, [r4, #0]
 8009efe:	079b      	lsls	r3, r3, #30
 8009f00:	d413      	bmi.n	8009f2a <_printf_i+0x232>
 8009f02:	68e0      	ldr	r0, [r4, #12]
 8009f04:	9b03      	ldr	r3, [sp, #12]
 8009f06:	4298      	cmp	r0, r3
 8009f08:	bfb8      	it	lt
 8009f0a:	4618      	movlt	r0, r3
 8009f0c:	e7a6      	b.n	8009e5c <_printf_i+0x164>
 8009f0e:	2301      	movs	r3, #1
 8009f10:	4632      	mov	r2, r6
 8009f12:	4649      	mov	r1, r9
 8009f14:	4640      	mov	r0, r8
 8009f16:	47d0      	blx	sl
 8009f18:	3001      	adds	r0, #1
 8009f1a:	d09d      	beq.n	8009e58 <_printf_i+0x160>
 8009f1c:	3501      	adds	r5, #1
 8009f1e:	68e3      	ldr	r3, [r4, #12]
 8009f20:	9903      	ldr	r1, [sp, #12]
 8009f22:	1a5b      	subs	r3, r3, r1
 8009f24:	42ab      	cmp	r3, r5
 8009f26:	dcf2      	bgt.n	8009f0e <_printf_i+0x216>
 8009f28:	e7eb      	b.n	8009f02 <_printf_i+0x20a>
 8009f2a:	2500      	movs	r5, #0
 8009f2c:	f104 0619 	add.w	r6, r4, #25
 8009f30:	e7f5      	b.n	8009f1e <_printf_i+0x226>
 8009f32:	bf00      	nop
 8009f34:	0800dd56 	.word	0x0800dd56
 8009f38:	0800dd67 	.word	0x0800dd67

08009f3c <_scanf_float>:
 8009f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f40:	b087      	sub	sp, #28
 8009f42:	4617      	mov	r7, r2
 8009f44:	9303      	str	r3, [sp, #12]
 8009f46:	688b      	ldr	r3, [r1, #8]
 8009f48:	1e5a      	subs	r2, r3, #1
 8009f4a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009f4e:	bf83      	ittte	hi
 8009f50:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009f54:	195b      	addhi	r3, r3, r5
 8009f56:	9302      	strhi	r3, [sp, #8]
 8009f58:	2300      	movls	r3, #0
 8009f5a:	bf86      	itte	hi
 8009f5c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009f60:	608b      	strhi	r3, [r1, #8]
 8009f62:	9302      	strls	r3, [sp, #8]
 8009f64:	680b      	ldr	r3, [r1, #0]
 8009f66:	468b      	mov	fp, r1
 8009f68:	2500      	movs	r5, #0
 8009f6a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009f6e:	f84b 3b1c 	str.w	r3, [fp], #28
 8009f72:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009f76:	4680      	mov	r8, r0
 8009f78:	460c      	mov	r4, r1
 8009f7a:	465e      	mov	r6, fp
 8009f7c:	46aa      	mov	sl, r5
 8009f7e:	46a9      	mov	r9, r5
 8009f80:	9501      	str	r5, [sp, #4]
 8009f82:	68a2      	ldr	r2, [r4, #8]
 8009f84:	b152      	cbz	r2, 8009f9c <_scanf_float+0x60>
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	2b4e      	cmp	r3, #78	; 0x4e
 8009f8c:	d864      	bhi.n	800a058 <_scanf_float+0x11c>
 8009f8e:	2b40      	cmp	r3, #64	; 0x40
 8009f90:	d83c      	bhi.n	800a00c <_scanf_float+0xd0>
 8009f92:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009f96:	b2c8      	uxtb	r0, r1
 8009f98:	280e      	cmp	r0, #14
 8009f9a:	d93a      	bls.n	800a012 <_scanf_float+0xd6>
 8009f9c:	f1b9 0f00 	cmp.w	r9, #0
 8009fa0:	d003      	beq.n	8009faa <_scanf_float+0x6e>
 8009fa2:	6823      	ldr	r3, [r4, #0]
 8009fa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009fa8:	6023      	str	r3, [r4, #0]
 8009faa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009fae:	f1ba 0f01 	cmp.w	sl, #1
 8009fb2:	f200 8113 	bhi.w	800a1dc <_scanf_float+0x2a0>
 8009fb6:	455e      	cmp	r6, fp
 8009fb8:	f200 8105 	bhi.w	800a1c6 <_scanf_float+0x28a>
 8009fbc:	2501      	movs	r5, #1
 8009fbe:	4628      	mov	r0, r5
 8009fc0:	b007      	add	sp, #28
 8009fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fc6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009fca:	2a0d      	cmp	r2, #13
 8009fcc:	d8e6      	bhi.n	8009f9c <_scanf_float+0x60>
 8009fce:	a101      	add	r1, pc, #4	; (adr r1, 8009fd4 <_scanf_float+0x98>)
 8009fd0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009fd4:	0800a113 	.word	0x0800a113
 8009fd8:	08009f9d 	.word	0x08009f9d
 8009fdc:	08009f9d 	.word	0x08009f9d
 8009fe0:	08009f9d 	.word	0x08009f9d
 8009fe4:	0800a173 	.word	0x0800a173
 8009fe8:	0800a14b 	.word	0x0800a14b
 8009fec:	08009f9d 	.word	0x08009f9d
 8009ff0:	08009f9d 	.word	0x08009f9d
 8009ff4:	0800a121 	.word	0x0800a121
 8009ff8:	08009f9d 	.word	0x08009f9d
 8009ffc:	08009f9d 	.word	0x08009f9d
 800a000:	08009f9d 	.word	0x08009f9d
 800a004:	08009f9d 	.word	0x08009f9d
 800a008:	0800a0d9 	.word	0x0800a0d9
 800a00c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a010:	e7db      	b.n	8009fca <_scanf_float+0x8e>
 800a012:	290e      	cmp	r1, #14
 800a014:	d8c2      	bhi.n	8009f9c <_scanf_float+0x60>
 800a016:	a001      	add	r0, pc, #4	; (adr r0, 800a01c <_scanf_float+0xe0>)
 800a018:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a01c:	0800a0cb 	.word	0x0800a0cb
 800a020:	08009f9d 	.word	0x08009f9d
 800a024:	0800a0cb 	.word	0x0800a0cb
 800a028:	0800a15f 	.word	0x0800a15f
 800a02c:	08009f9d 	.word	0x08009f9d
 800a030:	0800a079 	.word	0x0800a079
 800a034:	0800a0b5 	.word	0x0800a0b5
 800a038:	0800a0b5 	.word	0x0800a0b5
 800a03c:	0800a0b5 	.word	0x0800a0b5
 800a040:	0800a0b5 	.word	0x0800a0b5
 800a044:	0800a0b5 	.word	0x0800a0b5
 800a048:	0800a0b5 	.word	0x0800a0b5
 800a04c:	0800a0b5 	.word	0x0800a0b5
 800a050:	0800a0b5 	.word	0x0800a0b5
 800a054:	0800a0b5 	.word	0x0800a0b5
 800a058:	2b6e      	cmp	r3, #110	; 0x6e
 800a05a:	d809      	bhi.n	800a070 <_scanf_float+0x134>
 800a05c:	2b60      	cmp	r3, #96	; 0x60
 800a05e:	d8b2      	bhi.n	8009fc6 <_scanf_float+0x8a>
 800a060:	2b54      	cmp	r3, #84	; 0x54
 800a062:	d077      	beq.n	800a154 <_scanf_float+0x218>
 800a064:	2b59      	cmp	r3, #89	; 0x59
 800a066:	d199      	bne.n	8009f9c <_scanf_float+0x60>
 800a068:	2d07      	cmp	r5, #7
 800a06a:	d197      	bne.n	8009f9c <_scanf_float+0x60>
 800a06c:	2508      	movs	r5, #8
 800a06e:	e029      	b.n	800a0c4 <_scanf_float+0x188>
 800a070:	2b74      	cmp	r3, #116	; 0x74
 800a072:	d06f      	beq.n	800a154 <_scanf_float+0x218>
 800a074:	2b79      	cmp	r3, #121	; 0x79
 800a076:	e7f6      	b.n	800a066 <_scanf_float+0x12a>
 800a078:	6821      	ldr	r1, [r4, #0]
 800a07a:	05c8      	lsls	r0, r1, #23
 800a07c:	d51a      	bpl.n	800a0b4 <_scanf_float+0x178>
 800a07e:	9b02      	ldr	r3, [sp, #8]
 800a080:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a084:	6021      	str	r1, [r4, #0]
 800a086:	f109 0901 	add.w	r9, r9, #1
 800a08a:	b11b      	cbz	r3, 800a094 <_scanf_float+0x158>
 800a08c:	3b01      	subs	r3, #1
 800a08e:	3201      	adds	r2, #1
 800a090:	9302      	str	r3, [sp, #8]
 800a092:	60a2      	str	r2, [r4, #8]
 800a094:	68a3      	ldr	r3, [r4, #8]
 800a096:	3b01      	subs	r3, #1
 800a098:	60a3      	str	r3, [r4, #8]
 800a09a:	6923      	ldr	r3, [r4, #16]
 800a09c:	3301      	adds	r3, #1
 800a09e:	6123      	str	r3, [r4, #16]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	3b01      	subs	r3, #1
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	607b      	str	r3, [r7, #4]
 800a0a8:	f340 8084 	ble.w	800a1b4 <_scanf_float+0x278>
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	3301      	adds	r3, #1
 800a0b0:	603b      	str	r3, [r7, #0]
 800a0b2:	e766      	b.n	8009f82 <_scanf_float+0x46>
 800a0b4:	eb1a 0f05 	cmn.w	sl, r5
 800a0b8:	f47f af70 	bne.w	8009f9c <_scanf_float+0x60>
 800a0bc:	6822      	ldr	r2, [r4, #0]
 800a0be:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a0c2:	6022      	str	r2, [r4, #0]
 800a0c4:	f806 3b01 	strb.w	r3, [r6], #1
 800a0c8:	e7e4      	b.n	800a094 <_scanf_float+0x158>
 800a0ca:	6822      	ldr	r2, [r4, #0]
 800a0cc:	0610      	lsls	r0, r2, #24
 800a0ce:	f57f af65 	bpl.w	8009f9c <_scanf_float+0x60>
 800a0d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a0d6:	e7f4      	b.n	800a0c2 <_scanf_float+0x186>
 800a0d8:	f1ba 0f00 	cmp.w	sl, #0
 800a0dc:	d10e      	bne.n	800a0fc <_scanf_float+0x1c0>
 800a0de:	f1b9 0f00 	cmp.w	r9, #0
 800a0e2:	d10e      	bne.n	800a102 <_scanf_float+0x1c6>
 800a0e4:	6822      	ldr	r2, [r4, #0]
 800a0e6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a0ea:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a0ee:	d108      	bne.n	800a102 <_scanf_float+0x1c6>
 800a0f0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a0f4:	6022      	str	r2, [r4, #0]
 800a0f6:	f04f 0a01 	mov.w	sl, #1
 800a0fa:	e7e3      	b.n	800a0c4 <_scanf_float+0x188>
 800a0fc:	f1ba 0f02 	cmp.w	sl, #2
 800a100:	d055      	beq.n	800a1ae <_scanf_float+0x272>
 800a102:	2d01      	cmp	r5, #1
 800a104:	d002      	beq.n	800a10c <_scanf_float+0x1d0>
 800a106:	2d04      	cmp	r5, #4
 800a108:	f47f af48 	bne.w	8009f9c <_scanf_float+0x60>
 800a10c:	3501      	adds	r5, #1
 800a10e:	b2ed      	uxtb	r5, r5
 800a110:	e7d8      	b.n	800a0c4 <_scanf_float+0x188>
 800a112:	f1ba 0f01 	cmp.w	sl, #1
 800a116:	f47f af41 	bne.w	8009f9c <_scanf_float+0x60>
 800a11a:	f04f 0a02 	mov.w	sl, #2
 800a11e:	e7d1      	b.n	800a0c4 <_scanf_float+0x188>
 800a120:	b97d      	cbnz	r5, 800a142 <_scanf_float+0x206>
 800a122:	f1b9 0f00 	cmp.w	r9, #0
 800a126:	f47f af3c 	bne.w	8009fa2 <_scanf_float+0x66>
 800a12a:	6822      	ldr	r2, [r4, #0]
 800a12c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a130:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a134:	f47f af39 	bne.w	8009faa <_scanf_float+0x6e>
 800a138:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a13c:	6022      	str	r2, [r4, #0]
 800a13e:	2501      	movs	r5, #1
 800a140:	e7c0      	b.n	800a0c4 <_scanf_float+0x188>
 800a142:	2d03      	cmp	r5, #3
 800a144:	d0e2      	beq.n	800a10c <_scanf_float+0x1d0>
 800a146:	2d05      	cmp	r5, #5
 800a148:	e7de      	b.n	800a108 <_scanf_float+0x1cc>
 800a14a:	2d02      	cmp	r5, #2
 800a14c:	f47f af26 	bne.w	8009f9c <_scanf_float+0x60>
 800a150:	2503      	movs	r5, #3
 800a152:	e7b7      	b.n	800a0c4 <_scanf_float+0x188>
 800a154:	2d06      	cmp	r5, #6
 800a156:	f47f af21 	bne.w	8009f9c <_scanf_float+0x60>
 800a15a:	2507      	movs	r5, #7
 800a15c:	e7b2      	b.n	800a0c4 <_scanf_float+0x188>
 800a15e:	6822      	ldr	r2, [r4, #0]
 800a160:	0591      	lsls	r1, r2, #22
 800a162:	f57f af1b 	bpl.w	8009f9c <_scanf_float+0x60>
 800a166:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a16a:	6022      	str	r2, [r4, #0]
 800a16c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a170:	e7a8      	b.n	800a0c4 <_scanf_float+0x188>
 800a172:	6822      	ldr	r2, [r4, #0]
 800a174:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a178:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a17c:	d006      	beq.n	800a18c <_scanf_float+0x250>
 800a17e:	0550      	lsls	r0, r2, #21
 800a180:	f57f af0c 	bpl.w	8009f9c <_scanf_float+0x60>
 800a184:	f1b9 0f00 	cmp.w	r9, #0
 800a188:	f43f af0f 	beq.w	8009faa <_scanf_float+0x6e>
 800a18c:	0591      	lsls	r1, r2, #22
 800a18e:	bf58      	it	pl
 800a190:	9901      	ldrpl	r1, [sp, #4]
 800a192:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a196:	bf58      	it	pl
 800a198:	eba9 0101 	subpl.w	r1, r9, r1
 800a19c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a1a0:	bf58      	it	pl
 800a1a2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a1a6:	6022      	str	r2, [r4, #0]
 800a1a8:	f04f 0900 	mov.w	r9, #0
 800a1ac:	e78a      	b.n	800a0c4 <_scanf_float+0x188>
 800a1ae:	f04f 0a03 	mov.w	sl, #3
 800a1b2:	e787      	b.n	800a0c4 <_scanf_float+0x188>
 800a1b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a1b8:	4639      	mov	r1, r7
 800a1ba:	4640      	mov	r0, r8
 800a1bc:	4798      	blx	r3
 800a1be:	2800      	cmp	r0, #0
 800a1c0:	f43f aedf 	beq.w	8009f82 <_scanf_float+0x46>
 800a1c4:	e6ea      	b.n	8009f9c <_scanf_float+0x60>
 800a1c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a1ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a1ce:	463a      	mov	r2, r7
 800a1d0:	4640      	mov	r0, r8
 800a1d2:	4798      	blx	r3
 800a1d4:	6923      	ldr	r3, [r4, #16]
 800a1d6:	3b01      	subs	r3, #1
 800a1d8:	6123      	str	r3, [r4, #16]
 800a1da:	e6ec      	b.n	8009fb6 <_scanf_float+0x7a>
 800a1dc:	1e6b      	subs	r3, r5, #1
 800a1de:	2b06      	cmp	r3, #6
 800a1e0:	d825      	bhi.n	800a22e <_scanf_float+0x2f2>
 800a1e2:	2d02      	cmp	r5, #2
 800a1e4:	d836      	bhi.n	800a254 <_scanf_float+0x318>
 800a1e6:	455e      	cmp	r6, fp
 800a1e8:	f67f aee8 	bls.w	8009fbc <_scanf_float+0x80>
 800a1ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a1f0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a1f4:	463a      	mov	r2, r7
 800a1f6:	4640      	mov	r0, r8
 800a1f8:	4798      	blx	r3
 800a1fa:	6923      	ldr	r3, [r4, #16]
 800a1fc:	3b01      	subs	r3, #1
 800a1fe:	6123      	str	r3, [r4, #16]
 800a200:	e7f1      	b.n	800a1e6 <_scanf_float+0x2aa>
 800a202:	9802      	ldr	r0, [sp, #8]
 800a204:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a208:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a20c:	9002      	str	r0, [sp, #8]
 800a20e:	463a      	mov	r2, r7
 800a210:	4640      	mov	r0, r8
 800a212:	4798      	blx	r3
 800a214:	6923      	ldr	r3, [r4, #16]
 800a216:	3b01      	subs	r3, #1
 800a218:	6123      	str	r3, [r4, #16]
 800a21a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a21e:	fa5f fa8a 	uxtb.w	sl, sl
 800a222:	f1ba 0f02 	cmp.w	sl, #2
 800a226:	d1ec      	bne.n	800a202 <_scanf_float+0x2c6>
 800a228:	3d03      	subs	r5, #3
 800a22a:	b2ed      	uxtb	r5, r5
 800a22c:	1b76      	subs	r6, r6, r5
 800a22e:	6823      	ldr	r3, [r4, #0]
 800a230:	05da      	lsls	r2, r3, #23
 800a232:	d52f      	bpl.n	800a294 <_scanf_float+0x358>
 800a234:	055b      	lsls	r3, r3, #21
 800a236:	d510      	bpl.n	800a25a <_scanf_float+0x31e>
 800a238:	455e      	cmp	r6, fp
 800a23a:	f67f aebf 	bls.w	8009fbc <_scanf_float+0x80>
 800a23e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a242:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a246:	463a      	mov	r2, r7
 800a248:	4640      	mov	r0, r8
 800a24a:	4798      	blx	r3
 800a24c:	6923      	ldr	r3, [r4, #16]
 800a24e:	3b01      	subs	r3, #1
 800a250:	6123      	str	r3, [r4, #16]
 800a252:	e7f1      	b.n	800a238 <_scanf_float+0x2fc>
 800a254:	46aa      	mov	sl, r5
 800a256:	9602      	str	r6, [sp, #8]
 800a258:	e7df      	b.n	800a21a <_scanf_float+0x2de>
 800a25a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a25e:	6923      	ldr	r3, [r4, #16]
 800a260:	2965      	cmp	r1, #101	; 0x65
 800a262:	f103 33ff 	add.w	r3, r3, #4294967295
 800a266:	f106 35ff 	add.w	r5, r6, #4294967295
 800a26a:	6123      	str	r3, [r4, #16]
 800a26c:	d00c      	beq.n	800a288 <_scanf_float+0x34c>
 800a26e:	2945      	cmp	r1, #69	; 0x45
 800a270:	d00a      	beq.n	800a288 <_scanf_float+0x34c>
 800a272:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a276:	463a      	mov	r2, r7
 800a278:	4640      	mov	r0, r8
 800a27a:	4798      	blx	r3
 800a27c:	6923      	ldr	r3, [r4, #16]
 800a27e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a282:	3b01      	subs	r3, #1
 800a284:	1eb5      	subs	r5, r6, #2
 800a286:	6123      	str	r3, [r4, #16]
 800a288:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a28c:	463a      	mov	r2, r7
 800a28e:	4640      	mov	r0, r8
 800a290:	4798      	blx	r3
 800a292:	462e      	mov	r6, r5
 800a294:	6825      	ldr	r5, [r4, #0]
 800a296:	f015 0510 	ands.w	r5, r5, #16
 800a29a:	d14d      	bne.n	800a338 <_scanf_float+0x3fc>
 800a29c:	7035      	strb	r5, [r6, #0]
 800a29e:	6823      	ldr	r3, [r4, #0]
 800a2a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a2a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2a8:	d11a      	bne.n	800a2e0 <_scanf_float+0x3a4>
 800a2aa:	9b01      	ldr	r3, [sp, #4]
 800a2ac:	454b      	cmp	r3, r9
 800a2ae:	eba3 0209 	sub.w	r2, r3, r9
 800a2b2:	d122      	bne.n	800a2fa <_scanf_float+0x3be>
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	4659      	mov	r1, fp
 800a2b8:	4640      	mov	r0, r8
 800a2ba:	f002 fb8f 	bl	800c9dc <_strtod_r>
 800a2be:	9b03      	ldr	r3, [sp, #12]
 800a2c0:	6821      	ldr	r1, [r4, #0]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f011 0f02 	tst.w	r1, #2
 800a2c8:	f103 0204 	add.w	r2, r3, #4
 800a2cc:	d020      	beq.n	800a310 <_scanf_float+0x3d4>
 800a2ce:	9903      	ldr	r1, [sp, #12]
 800a2d0:	600a      	str	r2, [r1, #0]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	ed83 0b00 	vstr	d0, [r3]
 800a2d8:	68e3      	ldr	r3, [r4, #12]
 800a2da:	3301      	adds	r3, #1
 800a2dc:	60e3      	str	r3, [r4, #12]
 800a2de:	e66e      	b.n	8009fbe <_scanf_float+0x82>
 800a2e0:	9b04      	ldr	r3, [sp, #16]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d0e6      	beq.n	800a2b4 <_scanf_float+0x378>
 800a2e6:	9905      	ldr	r1, [sp, #20]
 800a2e8:	230a      	movs	r3, #10
 800a2ea:	462a      	mov	r2, r5
 800a2ec:	3101      	adds	r1, #1
 800a2ee:	4640      	mov	r0, r8
 800a2f0:	f002 fbfc 	bl	800caec <_strtol_r>
 800a2f4:	9b04      	ldr	r3, [sp, #16]
 800a2f6:	9e05      	ldr	r6, [sp, #20]
 800a2f8:	1ac2      	subs	r2, r0, r3
 800a2fa:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a2fe:	429e      	cmp	r6, r3
 800a300:	bf28      	it	cs
 800a302:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a306:	490d      	ldr	r1, [pc, #52]	; (800a33c <_scanf_float+0x400>)
 800a308:	4630      	mov	r0, r6
 800a30a:	f000 f911 	bl	800a530 <siprintf>
 800a30e:	e7d1      	b.n	800a2b4 <_scanf_float+0x378>
 800a310:	f011 0f04 	tst.w	r1, #4
 800a314:	9903      	ldr	r1, [sp, #12]
 800a316:	600a      	str	r2, [r1, #0]
 800a318:	d1db      	bne.n	800a2d2 <_scanf_float+0x396>
 800a31a:	eeb4 0b40 	vcmp.f64	d0, d0
 800a31e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a322:	681e      	ldr	r6, [r3, #0]
 800a324:	d705      	bvc.n	800a332 <_scanf_float+0x3f6>
 800a326:	4806      	ldr	r0, [pc, #24]	; (800a340 <_scanf_float+0x404>)
 800a328:	f000 f9e6 	bl	800a6f8 <nanf>
 800a32c:	ed86 0a00 	vstr	s0, [r6]
 800a330:	e7d2      	b.n	800a2d8 <_scanf_float+0x39c>
 800a332:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800a336:	e7f9      	b.n	800a32c <_scanf_float+0x3f0>
 800a338:	2500      	movs	r5, #0
 800a33a:	e640      	b.n	8009fbe <_scanf_float+0x82>
 800a33c:	0800dd78 	.word	0x0800dd78
 800a340:	0800e10d 	.word	0x0800e10d

0800a344 <std>:
 800a344:	2300      	movs	r3, #0
 800a346:	b510      	push	{r4, lr}
 800a348:	4604      	mov	r4, r0
 800a34a:	e9c0 3300 	strd	r3, r3, [r0]
 800a34e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a352:	6083      	str	r3, [r0, #8]
 800a354:	8181      	strh	r1, [r0, #12]
 800a356:	6643      	str	r3, [r0, #100]	; 0x64
 800a358:	81c2      	strh	r2, [r0, #14]
 800a35a:	6183      	str	r3, [r0, #24]
 800a35c:	4619      	mov	r1, r3
 800a35e:	2208      	movs	r2, #8
 800a360:	305c      	adds	r0, #92	; 0x5c
 800a362:	f000 f948 	bl	800a5f6 <memset>
 800a366:	4b0d      	ldr	r3, [pc, #52]	; (800a39c <std+0x58>)
 800a368:	6263      	str	r3, [r4, #36]	; 0x24
 800a36a:	4b0d      	ldr	r3, [pc, #52]	; (800a3a0 <std+0x5c>)
 800a36c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a36e:	4b0d      	ldr	r3, [pc, #52]	; (800a3a4 <std+0x60>)
 800a370:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a372:	4b0d      	ldr	r3, [pc, #52]	; (800a3a8 <std+0x64>)
 800a374:	6323      	str	r3, [r4, #48]	; 0x30
 800a376:	4b0d      	ldr	r3, [pc, #52]	; (800a3ac <std+0x68>)
 800a378:	6224      	str	r4, [r4, #32]
 800a37a:	429c      	cmp	r4, r3
 800a37c:	d006      	beq.n	800a38c <std+0x48>
 800a37e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a382:	4294      	cmp	r4, r2
 800a384:	d002      	beq.n	800a38c <std+0x48>
 800a386:	33d0      	adds	r3, #208	; 0xd0
 800a388:	429c      	cmp	r4, r3
 800a38a:	d105      	bne.n	800a398 <std+0x54>
 800a38c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a394:	f000 b9ac 	b.w	800a6f0 <__retarget_lock_init_recursive>
 800a398:	bd10      	pop	{r4, pc}
 800a39a:	bf00      	nop
 800a39c:	0800a571 	.word	0x0800a571
 800a3a0:	0800a593 	.word	0x0800a593
 800a3a4:	0800a5cb 	.word	0x0800a5cb
 800a3a8:	0800a5ef 	.word	0x0800a5ef
 800a3ac:	24000aa0 	.word	0x24000aa0

0800a3b0 <stdio_exit_handler>:
 800a3b0:	4a02      	ldr	r2, [pc, #8]	; (800a3bc <stdio_exit_handler+0xc>)
 800a3b2:	4903      	ldr	r1, [pc, #12]	; (800a3c0 <stdio_exit_handler+0x10>)
 800a3b4:	4803      	ldr	r0, [pc, #12]	; (800a3c4 <stdio_exit_handler+0x14>)
 800a3b6:	f000 b869 	b.w	800a48c <_fwalk_sglue>
 800a3ba:	bf00      	nop
 800a3bc:	24000010 	.word	0x24000010
 800a3c0:	0800cead 	.word	0x0800cead
 800a3c4:	2400001c 	.word	0x2400001c

0800a3c8 <cleanup_stdio>:
 800a3c8:	6841      	ldr	r1, [r0, #4]
 800a3ca:	4b0c      	ldr	r3, [pc, #48]	; (800a3fc <cleanup_stdio+0x34>)
 800a3cc:	4299      	cmp	r1, r3
 800a3ce:	b510      	push	{r4, lr}
 800a3d0:	4604      	mov	r4, r0
 800a3d2:	d001      	beq.n	800a3d8 <cleanup_stdio+0x10>
 800a3d4:	f002 fd6a 	bl	800ceac <_fflush_r>
 800a3d8:	68a1      	ldr	r1, [r4, #8]
 800a3da:	4b09      	ldr	r3, [pc, #36]	; (800a400 <cleanup_stdio+0x38>)
 800a3dc:	4299      	cmp	r1, r3
 800a3de:	d002      	beq.n	800a3e6 <cleanup_stdio+0x1e>
 800a3e0:	4620      	mov	r0, r4
 800a3e2:	f002 fd63 	bl	800ceac <_fflush_r>
 800a3e6:	68e1      	ldr	r1, [r4, #12]
 800a3e8:	4b06      	ldr	r3, [pc, #24]	; (800a404 <cleanup_stdio+0x3c>)
 800a3ea:	4299      	cmp	r1, r3
 800a3ec:	d004      	beq.n	800a3f8 <cleanup_stdio+0x30>
 800a3ee:	4620      	mov	r0, r4
 800a3f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3f4:	f002 bd5a 	b.w	800ceac <_fflush_r>
 800a3f8:	bd10      	pop	{r4, pc}
 800a3fa:	bf00      	nop
 800a3fc:	24000aa0 	.word	0x24000aa0
 800a400:	24000b08 	.word	0x24000b08
 800a404:	24000b70 	.word	0x24000b70

0800a408 <global_stdio_init.part.0>:
 800a408:	b510      	push	{r4, lr}
 800a40a:	4b0b      	ldr	r3, [pc, #44]	; (800a438 <global_stdio_init.part.0+0x30>)
 800a40c:	4c0b      	ldr	r4, [pc, #44]	; (800a43c <global_stdio_init.part.0+0x34>)
 800a40e:	4a0c      	ldr	r2, [pc, #48]	; (800a440 <global_stdio_init.part.0+0x38>)
 800a410:	601a      	str	r2, [r3, #0]
 800a412:	4620      	mov	r0, r4
 800a414:	2200      	movs	r2, #0
 800a416:	2104      	movs	r1, #4
 800a418:	f7ff ff94 	bl	800a344 <std>
 800a41c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a420:	2201      	movs	r2, #1
 800a422:	2109      	movs	r1, #9
 800a424:	f7ff ff8e 	bl	800a344 <std>
 800a428:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a42c:	2202      	movs	r2, #2
 800a42e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a432:	2112      	movs	r1, #18
 800a434:	f7ff bf86 	b.w	800a344 <std>
 800a438:	24000bd8 	.word	0x24000bd8
 800a43c:	24000aa0 	.word	0x24000aa0
 800a440:	0800a3b1 	.word	0x0800a3b1

0800a444 <__sfp_lock_acquire>:
 800a444:	4801      	ldr	r0, [pc, #4]	; (800a44c <__sfp_lock_acquire+0x8>)
 800a446:	f000 b954 	b.w	800a6f2 <__retarget_lock_acquire_recursive>
 800a44a:	bf00      	nop
 800a44c:	24000be1 	.word	0x24000be1

0800a450 <__sfp_lock_release>:
 800a450:	4801      	ldr	r0, [pc, #4]	; (800a458 <__sfp_lock_release+0x8>)
 800a452:	f000 b94f 	b.w	800a6f4 <__retarget_lock_release_recursive>
 800a456:	bf00      	nop
 800a458:	24000be1 	.word	0x24000be1

0800a45c <__sinit>:
 800a45c:	b510      	push	{r4, lr}
 800a45e:	4604      	mov	r4, r0
 800a460:	f7ff fff0 	bl	800a444 <__sfp_lock_acquire>
 800a464:	6a23      	ldr	r3, [r4, #32]
 800a466:	b11b      	cbz	r3, 800a470 <__sinit+0x14>
 800a468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a46c:	f7ff bff0 	b.w	800a450 <__sfp_lock_release>
 800a470:	4b04      	ldr	r3, [pc, #16]	; (800a484 <__sinit+0x28>)
 800a472:	6223      	str	r3, [r4, #32]
 800a474:	4b04      	ldr	r3, [pc, #16]	; (800a488 <__sinit+0x2c>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d1f5      	bne.n	800a468 <__sinit+0xc>
 800a47c:	f7ff ffc4 	bl	800a408 <global_stdio_init.part.0>
 800a480:	e7f2      	b.n	800a468 <__sinit+0xc>
 800a482:	bf00      	nop
 800a484:	0800a3c9 	.word	0x0800a3c9
 800a488:	24000bd8 	.word	0x24000bd8

0800a48c <_fwalk_sglue>:
 800a48c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a490:	4607      	mov	r7, r0
 800a492:	4688      	mov	r8, r1
 800a494:	4614      	mov	r4, r2
 800a496:	2600      	movs	r6, #0
 800a498:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a49c:	f1b9 0901 	subs.w	r9, r9, #1
 800a4a0:	d505      	bpl.n	800a4ae <_fwalk_sglue+0x22>
 800a4a2:	6824      	ldr	r4, [r4, #0]
 800a4a4:	2c00      	cmp	r4, #0
 800a4a6:	d1f7      	bne.n	800a498 <_fwalk_sglue+0xc>
 800a4a8:	4630      	mov	r0, r6
 800a4aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4ae:	89ab      	ldrh	r3, [r5, #12]
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	d907      	bls.n	800a4c4 <_fwalk_sglue+0x38>
 800a4b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a4b8:	3301      	adds	r3, #1
 800a4ba:	d003      	beq.n	800a4c4 <_fwalk_sglue+0x38>
 800a4bc:	4629      	mov	r1, r5
 800a4be:	4638      	mov	r0, r7
 800a4c0:	47c0      	blx	r8
 800a4c2:	4306      	orrs	r6, r0
 800a4c4:	3568      	adds	r5, #104	; 0x68
 800a4c6:	e7e9      	b.n	800a49c <_fwalk_sglue+0x10>

0800a4c8 <sniprintf>:
 800a4c8:	b40c      	push	{r2, r3}
 800a4ca:	b530      	push	{r4, r5, lr}
 800a4cc:	4b17      	ldr	r3, [pc, #92]	; (800a52c <sniprintf+0x64>)
 800a4ce:	1e0c      	subs	r4, r1, #0
 800a4d0:	681d      	ldr	r5, [r3, #0]
 800a4d2:	b09d      	sub	sp, #116	; 0x74
 800a4d4:	da08      	bge.n	800a4e8 <sniprintf+0x20>
 800a4d6:	238b      	movs	r3, #139	; 0x8b
 800a4d8:	602b      	str	r3, [r5, #0]
 800a4da:	f04f 30ff 	mov.w	r0, #4294967295
 800a4de:	b01d      	add	sp, #116	; 0x74
 800a4e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a4e4:	b002      	add	sp, #8
 800a4e6:	4770      	bx	lr
 800a4e8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a4ec:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a4f0:	bf14      	ite	ne
 800a4f2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a4f6:	4623      	moveq	r3, r4
 800a4f8:	9304      	str	r3, [sp, #16]
 800a4fa:	9307      	str	r3, [sp, #28]
 800a4fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a500:	9002      	str	r0, [sp, #8]
 800a502:	9006      	str	r0, [sp, #24]
 800a504:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a508:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a50a:	ab21      	add	r3, sp, #132	; 0x84
 800a50c:	a902      	add	r1, sp, #8
 800a50e:	4628      	mov	r0, r5
 800a510:	9301      	str	r3, [sp, #4]
 800a512:	f002 fb47 	bl	800cba4 <_svfiprintf_r>
 800a516:	1c43      	adds	r3, r0, #1
 800a518:	bfbc      	itt	lt
 800a51a:	238b      	movlt	r3, #139	; 0x8b
 800a51c:	602b      	strlt	r3, [r5, #0]
 800a51e:	2c00      	cmp	r4, #0
 800a520:	d0dd      	beq.n	800a4de <sniprintf+0x16>
 800a522:	9b02      	ldr	r3, [sp, #8]
 800a524:	2200      	movs	r2, #0
 800a526:	701a      	strb	r2, [r3, #0]
 800a528:	e7d9      	b.n	800a4de <sniprintf+0x16>
 800a52a:	bf00      	nop
 800a52c:	24000068 	.word	0x24000068

0800a530 <siprintf>:
 800a530:	b40e      	push	{r1, r2, r3}
 800a532:	b500      	push	{lr}
 800a534:	b09c      	sub	sp, #112	; 0x70
 800a536:	ab1d      	add	r3, sp, #116	; 0x74
 800a538:	9002      	str	r0, [sp, #8]
 800a53a:	9006      	str	r0, [sp, #24]
 800a53c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a540:	4809      	ldr	r0, [pc, #36]	; (800a568 <siprintf+0x38>)
 800a542:	9107      	str	r1, [sp, #28]
 800a544:	9104      	str	r1, [sp, #16]
 800a546:	4909      	ldr	r1, [pc, #36]	; (800a56c <siprintf+0x3c>)
 800a548:	f853 2b04 	ldr.w	r2, [r3], #4
 800a54c:	9105      	str	r1, [sp, #20]
 800a54e:	6800      	ldr	r0, [r0, #0]
 800a550:	9301      	str	r3, [sp, #4]
 800a552:	a902      	add	r1, sp, #8
 800a554:	f002 fb26 	bl	800cba4 <_svfiprintf_r>
 800a558:	9b02      	ldr	r3, [sp, #8]
 800a55a:	2200      	movs	r2, #0
 800a55c:	701a      	strb	r2, [r3, #0]
 800a55e:	b01c      	add	sp, #112	; 0x70
 800a560:	f85d eb04 	ldr.w	lr, [sp], #4
 800a564:	b003      	add	sp, #12
 800a566:	4770      	bx	lr
 800a568:	24000068 	.word	0x24000068
 800a56c:	ffff0208 	.word	0xffff0208

0800a570 <__sread>:
 800a570:	b510      	push	{r4, lr}
 800a572:	460c      	mov	r4, r1
 800a574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a578:	f000 f86c 	bl	800a654 <_read_r>
 800a57c:	2800      	cmp	r0, #0
 800a57e:	bfab      	itete	ge
 800a580:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a582:	89a3      	ldrhlt	r3, [r4, #12]
 800a584:	181b      	addge	r3, r3, r0
 800a586:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a58a:	bfac      	ite	ge
 800a58c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a58e:	81a3      	strhlt	r3, [r4, #12]
 800a590:	bd10      	pop	{r4, pc}

0800a592 <__swrite>:
 800a592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a596:	461f      	mov	r7, r3
 800a598:	898b      	ldrh	r3, [r1, #12]
 800a59a:	05db      	lsls	r3, r3, #23
 800a59c:	4605      	mov	r5, r0
 800a59e:	460c      	mov	r4, r1
 800a5a0:	4616      	mov	r6, r2
 800a5a2:	d505      	bpl.n	800a5b0 <__swrite+0x1e>
 800a5a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5a8:	2302      	movs	r3, #2
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	f000 f840 	bl	800a630 <_lseek_r>
 800a5b0:	89a3      	ldrh	r3, [r4, #12]
 800a5b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a5ba:	81a3      	strh	r3, [r4, #12]
 800a5bc:	4632      	mov	r2, r6
 800a5be:	463b      	mov	r3, r7
 800a5c0:	4628      	mov	r0, r5
 800a5c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5c6:	f000 b857 	b.w	800a678 <_write_r>

0800a5ca <__sseek>:
 800a5ca:	b510      	push	{r4, lr}
 800a5cc:	460c      	mov	r4, r1
 800a5ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5d2:	f000 f82d 	bl	800a630 <_lseek_r>
 800a5d6:	1c43      	adds	r3, r0, #1
 800a5d8:	89a3      	ldrh	r3, [r4, #12]
 800a5da:	bf15      	itete	ne
 800a5dc:	6560      	strne	r0, [r4, #84]	; 0x54
 800a5de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a5e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a5e6:	81a3      	strheq	r3, [r4, #12]
 800a5e8:	bf18      	it	ne
 800a5ea:	81a3      	strhne	r3, [r4, #12]
 800a5ec:	bd10      	pop	{r4, pc}

0800a5ee <__sclose>:
 800a5ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5f2:	f000 b80d 	b.w	800a610 <_close_r>

0800a5f6 <memset>:
 800a5f6:	4402      	add	r2, r0
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	d100      	bne.n	800a600 <memset+0xa>
 800a5fe:	4770      	bx	lr
 800a600:	f803 1b01 	strb.w	r1, [r3], #1
 800a604:	e7f9      	b.n	800a5fa <memset+0x4>
	...

0800a608 <_localeconv_r>:
 800a608:	4800      	ldr	r0, [pc, #0]	; (800a60c <_localeconv_r+0x4>)
 800a60a:	4770      	bx	lr
 800a60c:	2400015c 	.word	0x2400015c

0800a610 <_close_r>:
 800a610:	b538      	push	{r3, r4, r5, lr}
 800a612:	4d06      	ldr	r5, [pc, #24]	; (800a62c <_close_r+0x1c>)
 800a614:	2300      	movs	r3, #0
 800a616:	4604      	mov	r4, r0
 800a618:	4608      	mov	r0, r1
 800a61a:	602b      	str	r3, [r5, #0]
 800a61c:	f7f7 f9c5 	bl	80019aa <_close>
 800a620:	1c43      	adds	r3, r0, #1
 800a622:	d102      	bne.n	800a62a <_close_r+0x1a>
 800a624:	682b      	ldr	r3, [r5, #0]
 800a626:	b103      	cbz	r3, 800a62a <_close_r+0x1a>
 800a628:	6023      	str	r3, [r4, #0]
 800a62a:	bd38      	pop	{r3, r4, r5, pc}
 800a62c:	24000bdc 	.word	0x24000bdc

0800a630 <_lseek_r>:
 800a630:	b538      	push	{r3, r4, r5, lr}
 800a632:	4d07      	ldr	r5, [pc, #28]	; (800a650 <_lseek_r+0x20>)
 800a634:	4604      	mov	r4, r0
 800a636:	4608      	mov	r0, r1
 800a638:	4611      	mov	r1, r2
 800a63a:	2200      	movs	r2, #0
 800a63c:	602a      	str	r2, [r5, #0]
 800a63e:	461a      	mov	r2, r3
 800a640:	f7f7 f9da 	bl	80019f8 <_lseek>
 800a644:	1c43      	adds	r3, r0, #1
 800a646:	d102      	bne.n	800a64e <_lseek_r+0x1e>
 800a648:	682b      	ldr	r3, [r5, #0]
 800a64a:	b103      	cbz	r3, 800a64e <_lseek_r+0x1e>
 800a64c:	6023      	str	r3, [r4, #0]
 800a64e:	bd38      	pop	{r3, r4, r5, pc}
 800a650:	24000bdc 	.word	0x24000bdc

0800a654 <_read_r>:
 800a654:	b538      	push	{r3, r4, r5, lr}
 800a656:	4d07      	ldr	r5, [pc, #28]	; (800a674 <_read_r+0x20>)
 800a658:	4604      	mov	r4, r0
 800a65a:	4608      	mov	r0, r1
 800a65c:	4611      	mov	r1, r2
 800a65e:	2200      	movs	r2, #0
 800a660:	602a      	str	r2, [r5, #0]
 800a662:	461a      	mov	r2, r3
 800a664:	f7f7 f968 	bl	8001938 <_read>
 800a668:	1c43      	adds	r3, r0, #1
 800a66a:	d102      	bne.n	800a672 <_read_r+0x1e>
 800a66c:	682b      	ldr	r3, [r5, #0]
 800a66e:	b103      	cbz	r3, 800a672 <_read_r+0x1e>
 800a670:	6023      	str	r3, [r4, #0]
 800a672:	bd38      	pop	{r3, r4, r5, pc}
 800a674:	24000bdc 	.word	0x24000bdc

0800a678 <_write_r>:
 800a678:	b538      	push	{r3, r4, r5, lr}
 800a67a:	4d07      	ldr	r5, [pc, #28]	; (800a698 <_write_r+0x20>)
 800a67c:	4604      	mov	r4, r0
 800a67e:	4608      	mov	r0, r1
 800a680:	4611      	mov	r1, r2
 800a682:	2200      	movs	r2, #0
 800a684:	602a      	str	r2, [r5, #0]
 800a686:	461a      	mov	r2, r3
 800a688:	f7f7 f973 	bl	8001972 <_write>
 800a68c:	1c43      	adds	r3, r0, #1
 800a68e:	d102      	bne.n	800a696 <_write_r+0x1e>
 800a690:	682b      	ldr	r3, [r5, #0]
 800a692:	b103      	cbz	r3, 800a696 <_write_r+0x1e>
 800a694:	6023      	str	r3, [r4, #0]
 800a696:	bd38      	pop	{r3, r4, r5, pc}
 800a698:	24000bdc 	.word	0x24000bdc

0800a69c <__errno>:
 800a69c:	4b01      	ldr	r3, [pc, #4]	; (800a6a4 <__errno+0x8>)
 800a69e:	6818      	ldr	r0, [r3, #0]
 800a6a0:	4770      	bx	lr
 800a6a2:	bf00      	nop
 800a6a4:	24000068 	.word	0x24000068

0800a6a8 <__libc_init_array>:
 800a6a8:	b570      	push	{r4, r5, r6, lr}
 800a6aa:	4d0d      	ldr	r5, [pc, #52]	; (800a6e0 <__libc_init_array+0x38>)
 800a6ac:	4c0d      	ldr	r4, [pc, #52]	; (800a6e4 <__libc_init_array+0x3c>)
 800a6ae:	1b64      	subs	r4, r4, r5
 800a6b0:	10a4      	asrs	r4, r4, #2
 800a6b2:	2600      	movs	r6, #0
 800a6b4:	42a6      	cmp	r6, r4
 800a6b6:	d109      	bne.n	800a6cc <__libc_init_array+0x24>
 800a6b8:	4d0b      	ldr	r5, [pc, #44]	; (800a6e8 <__libc_init_array+0x40>)
 800a6ba:	4c0c      	ldr	r4, [pc, #48]	; (800a6ec <__libc_init_array+0x44>)
 800a6bc:	f003 fb0c 	bl	800dcd8 <_init>
 800a6c0:	1b64      	subs	r4, r4, r5
 800a6c2:	10a4      	asrs	r4, r4, #2
 800a6c4:	2600      	movs	r6, #0
 800a6c6:	42a6      	cmp	r6, r4
 800a6c8:	d105      	bne.n	800a6d6 <__libc_init_array+0x2e>
 800a6ca:	bd70      	pop	{r4, r5, r6, pc}
 800a6cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6d0:	4798      	blx	r3
 800a6d2:	3601      	adds	r6, #1
 800a6d4:	e7ee      	b.n	800a6b4 <__libc_init_array+0xc>
 800a6d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6da:	4798      	blx	r3
 800a6dc:	3601      	adds	r6, #1
 800a6de:	e7f2      	b.n	800a6c6 <__libc_init_array+0x1e>
 800a6e0:	0800e178 	.word	0x0800e178
 800a6e4:	0800e178 	.word	0x0800e178
 800a6e8:	0800e178 	.word	0x0800e178
 800a6ec:	0800e17c 	.word	0x0800e17c

0800a6f0 <__retarget_lock_init_recursive>:
 800a6f0:	4770      	bx	lr

0800a6f2 <__retarget_lock_acquire_recursive>:
 800a6f2:	4770      	bx	lr

0800a6f4 <__retarget_lock_release_recursive>:
 800a6f4:	4770      	bx	lr
	...

0800a6f8 <nanf>:
 800a6f8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a700 <nanf+0x8>
 800a6fc:	4770      	bx	lr
 800a6fe:	bf00      	nop
 800a700:	7fc00000 	.word	0x7fc00000

0800a704 <quorem>:
 800a704:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a708:	6903      	ldr	r3, [r0, #16]
 800a70a:	690c      	ldr	r4, [r1, #16]
 800a70c:	42a3      	cmp	r3, r4
 800a70e:	4607      	mov	r7, r0
 800a710:	db7e      	blt.n	800a810 <quorem+0x10c>
 800a712:	3c01      	subs	r4, #1
 800a714:	f101 0814 	add.w	r8, r1, #20
 800a718:	f100 0514 	add.w	r5, r0, #20
 800a71c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a720:	9301      	str	r3, [sp, #4]
 800a722:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a726:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a72a:	3301      	adds	r3, #1
 800a72c:	429a      	cmp	r2, r3
 800a72e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a732:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a736:	fbb2 f6f3 	udiv	r6, r2, r3
 800a73a:	d331      	bcc.n	800a7a0 <quorem+0x9c>
 800a73c:	f04f 0e00 	mov.w	lr, #0
 800a740:	4640      	mov	r0, r8
 800a742:	46ac      	mov	ip, r5
 800a744:	46f2      	mov	sl, lr
 800a746:	f850 2b04 	ldr.w	r2, [r0], #4
 800a74a:	b293      	uxth	r3, r2
 800a74c:	fb06 e303 	mla	r3, r6, r3, lr
 800a750:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a754:	0c1a      	lsrs	r2, r3, #16
 800a756:	b29b      	uxth	r3, r3
 800a758:	ebaa 0303 	sub.w	r3, sl, r3
 800a75c:	f8dc a000 	ldr.w	sl, [ip]
 800a760:	fa13 f38a 	uxtah	r3, r3, sl
 800a764:	fb06 220e 	mla	r2, r6, lr, r2
 800a768:	9300      	str	r3, [sp, #0]
 800a76a:	9b00      	ldr	r3, [sp, #0]
 800a76c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a770:	b292      	uxth	r2, r2
 800a772:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a776:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a77a:	f8bd 3000 	ldrh.w	r3, [sp]
 800a77e:	4581      	cmp	r9, r0
 800a780:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a784:	f84c 3b04 	str.w	r3, [ip], #4
 800a788:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a78c:	d2db      	bcs.n	800a746 <quorem+0x42>
 800a78e:	f855 300b 	ldr.w	r3, [r5, fp]
 800a792:	b92b      	cbnz	r3, 800a7a0 <quorem+0x9c>
 800a794:	9b01      	ldr	r3, [sp, #4]
 800a796:	3b04      	subs	r3, #4
 800a798:	429d      	cmp	r5, r3
 800a79a:	461a      	mov	r2, r3
 800a79c:	d32c      	bcc.n	800a7f8 <quorem+0xf4>
 800a79e:	613c      	str	r4, [r7, #16]
 800a7a0:	4638      	mov	r0, r7
 800a7a2:	f001 f96b 	bl	800ba7c <__mcmp>
 800a7a6:	2800      	cmp	r0, #0
 800a7a8:	db22      	blt.n	800a7f0 <quorem+0xec>
 800a7aa:	3601      	adds	r6, #1
 800a7ac:	4629      	mov	r1, r5
 800a7ae:	2000      	movs	r0, #0
 800a7b0:	f858 2b04 	ldr.w	r2, [r8], #4
 800a7b4:	f8d1 c000 	ldr.w	ip, [r1]
 800a7b8:	b293      	uxth	r3, r2
 800a7ba:	1ac3      	subs	r3, r0, r3
 800a7bc:	0c12      	lsrs	r2, r2, #16
 800a7be:	fa13 f38c 	uxtah	r3, r3, ip
 800a7c2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a7c6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a7ca:	b29b      	uxth	r3, r3
 800a7cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a7d0:	45c1      	cmp	r9, r8
 800a7d2:	f841 3b04 	str.w	r3, [r1], #4
 800a7d6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a7da:	d2e9      	bcs.n	800a7b0 <quorem+0xac>
 800a7dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a7e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a7e4:	b922      	cbnz	r2, 800a7f0 <quorem+0xec>
 800a7e6:	3b04      	subs	r3, #4
 800a7e8:	429d      	cmp	r5, r3
 800a7ea:	461a      	mov	r2, r3
 800a7ec:	d30a      	bcc.n	800a804 <quorem+0x100>
 800a7ee:	613c      	str	r4, [r7, #16]
 800a7f0:	4630      	mov	r0, r6
 800a7f2:	b003      	add	sp, #12
 800a7f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7f8:	6812      	ldr	r2, [r2, #0]
 800a7fa:	3b04      	subs	r3, #4
 800a7fc:	2a00      	cmp	r2, #0
 800a7fe:	d1ce      	bne.n	800a79e <quorem+0x9a>
 800a800:	3c01      	subs	r4, #1
 800a802:	e7c9      	b.n	800a798 <quorem+0x94>
 800a804:	6812      	ldr	r2, [r2, #0]
 800a806:	3b04      	subs	r3, #4
 800a808:	2a00      	cmp	r2, #0
 800a80a:	d1f0      	bne.n	800a7ee <quorem+0xea>
 800a80c:	3c01      	subs	r4, #1
 800a80e:	e7eb      	b.n	800a7e8 <quorem+0xe4>
 800a810:	2000      	movs	r0, #0
 800a812:	e7ee      	b.n	800a7f2 <quorem+0xee>
 800a814:	0000      	movs	r0, r0
	...

0800a818 <_dtoa_r>:
 800a818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a81c:	ed2d 8b02 	vpush	{d8}
 800a820:	69c5      	ldr	r5, [r0, #28]
 800a822:	b091      	sub	sp, #68	; 0x44
 800a824:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a828:	ec59 8b10 	vmov	r8, r9, d0
 800a82c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800a82e:	9106      	str	r1, [sp, #24]
 800a830:	4606      	mov	r6, r0
 800a832:	9208      	str	r2, [sp, #32]
 800a834:	930c      	str	r3, [sp, #48]	; 0x30
 800a836:	b975      	cbnz	r5, 800a856 <_dtoa_r+0x3e>
 800a838:	2010      	movs	r0, #16
 800a83a:	f000 fda5 	bl	800b388 <malloc>
 800a83e:	4602      	mov	r2, r0
 800a840:	61f0      	str	r0, [r6, #28]
 800a842:	b920      	cbnz	r0, 800a84e <_dtoa_r+0x36>
 800a844:	4ba6      	ldr	r3, [pc, #664]	; (800aae0 <_dtoa_r+0x2c8>)
 800a846:	21ef      	movs	r1, #239	; 0xef
 800a848:	48a6      	ldr	r0, [pc, #664]	; (800aae4 <_dtoa_r+0x2cc>)
 800a84a:	f002 fba9 	bl	800cfa0 <__assert_func>
 800a84e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a852:	6005      	str	r5, [r0, #0]
 800a854:	60c5      	str	r5, [r0, #12]
 800a856:	69f3      	ldr	r3, [r6, #28]
 800a858:	6819      	ldr	r1, [r3, #0]
 800a85a:	b151      	cbz	r1, 800a872 <_dtoa_r+0x5a>
 800a85c:	685a      	ldr	r2, [r3, #4]
 800a85e:	604a      	str	r2, [r1, #4]
 800a860:	2301      	movs	r3, #1
 800a862:	4093      	lsls	r3, r2
 800a864:	608b      	str	r3, [r1, #8]
 800a866:	4630      	mov	r0, r6
 800a868:	f000 fe82 	bl	800b570 <_Bfree>
 800a86c:	69f3      	ldr	r3, [r6, #28]
 800a86e:	2200      	movs	r2, #0
 800a870:	601a      	str	r2, [r3, #0]
 800a872:	f1b9 0300 	subs.w	r3, r9, #0
 800a876:	bfbb      	ittet	lt
 800a878:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a87c:	9303      	strlt	r3, [sp, #12]
 800a87e:	2300      	movge	r3, #0
 800a880:	2201      	movlt	r2, #1
 800a882:	bfac      	ite	ge
 800a884:	6023      	strge	r3, [r4, #0]
 800a886:	6022      	strlt	r2, [r4, #0]
 800a888:	4b97      	ldr	r3, [pc, #604]	; (800aae8 <_dtoa_r+0x2d0>)
 800a88a:	9c03      	ldr	r4, [sp, #12]
 800a88c:	43a3      	bics	r3, r4
 800a88e:	d11c      	bne.n	800a8ca <_dtoa_r+0xb2>
 800a890:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a892:	f242 730f 	movw	r3, #9999	; 0x270f
 800a896:	6013      	str	r3, [r2, #0]
 800a898:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a89c:	ea53 0308 	orrs.w	r3, r3, r8
 800a8a0:	f000 84fb 	beq.w	800b29a <_dtoa_r+0xa82>
 800a8a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a8a6:	b963      	cbnz	r3, 800a8c2 <_dtoa_r+0xaa>
 800a8a8:	4b90      	ldr	r3, [pc, #576]	; (800aaec <_dtoa_r+0x2d4>)
 800a8aa:	e020      	b.n	800a8ee <_dtoa_r+0xd6>
 800a8ac:	4b90      	ldr	r3, [pc, #576]	; (800aaf0 <_dtoa_r+0x2d8>)
 800a8ae:	9301      	str	r3, [sp, #4]
 800a8b0:	3308      	adds	r3, #8
 800a8b2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a8b4:	6013      	str	r3, [r2, #0]
 800a8b6:	9801      	ldr	r0, [sp, #4]
 800a8b8:	b011      	add	sp, #68	; 0x44
 800a8ba:	ecbd 8b02 	vpop	{d8}
 800a8be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8c2:	4b8a      	ldr	r3, [pc, #552]	; (800aaec <_dtoa_r+0x2d4>)
 800a8c4:	9301      	str	r3, [sp, #4]
 800a8c6:	3303      	adds	r3, #3
 800a8c8:	e7f3      	b.n	800a8b2 <_dtoa_r+0x9a>
 800a8ca:	ed9d 8b02 	vldr	d8, [sp, #8]
 800a8ce:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a8d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8d6:	d10c      	bne.n	800a8f2 <_dtoa_r+0xda>
 800a8d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a8da:	2301      	movs	r3, #1
 800a8dc:	6013      	str	r3, [r2, #0]
 800a8de:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	f000 84d7 	beq.w	800b294 <_dtoa_r+0xa7c>
 800a8e6:	4b83      	ldr	r3, [pc, #524]	; (800aaf4 <_dtoa_r+0x2dc>)
 800a8e8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a8ea:	6013      	str	r3, [r2, #0]
 800a8ec:	3b01      	subs	r3, #1
 800a8ee:	9301      	str	r3, [sp, #4]
 800a8f0:	e7e1      	b.n	800a8b6 <_dtoa_r+0x9e>
 800a8f2:	aa0e      	add	r2, sp, #56	; 0x38
 800a8f4:	a90f      	add	r1, sp, #60	; 0x3c
 800a8f6:	4630      	mov	r0, r6
 800a8f8:	eeb0 0b48 	vmov.f64	d0, d8
 800a8fc:	f001 f9d4 	bl	800bca8 <__d2b>
 800a900:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800a904:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a906:	4605      	mov	r5, r0
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d046      	beq.n	800a99a <_dtoa_r+0x182>
 800a90c:	eeb0 7b48 	vmov.f64	d7, d8
 800a910:	ee18 1a90 	vmov	r1, s17
 800a914:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a918:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800a91c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a920:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a924:	2000      	movs	r0, #0
 800a926:	ee07 1a90 	vmov	s15, r1
 800a92a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800a92e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800aac8 <_dtoa_r+0x2b0>
 800a932:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a936:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800aad0 <_dtoa_r+0x2b8>
 800a93a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a93e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800aad8 <_dtoa_r+0x2c0>
 800a942:	ee07 3a90 	vmov	s15, r3
 800a946:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800a94a:	eeb0 7b46 	vmov.f64	d7, d6
 800a94e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800a952:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a956:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a95a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a95e:	ee16 ba90 	vmov	fp, s13
 800a962:	9009      	str	r0, [sp, #36]	; 0x24
 800a964:	d508      	bpl.n	800a978 <_dtoa_r+0x160>
 800a966:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a96a:	eeb4 6b47 	vcmp.f64	d6, d7
 800a96e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a972:	bf18      	it	ne
 800a974:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800a978:	f1bb 0f16 	cmp.w	fp, #22
 800a97c:	d82b      	bhi.n	800a9d6 <_dtoa_r+0x1be>
 800a97e:	495e      	ldr	r1, [pc, #376]	; (800aaf8 <_dtoa_r+0x2e0>)
 800a980:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800a984:	ed91 7b00 	vldr	d7, [r1]
 800a988:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a98c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a990:	d501      	bpl.n	800a996 <_dtoa_r+0x17e>
 800a992:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a996:	2100      	movs	r1, #0
 800a998:	e01e      	b.n	800a9d8 <_dtoa_r+0x1c0>
 800a99a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a99c:	4413      	add	r3, r2
 800a99e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800a9a2:	2920      	cmp	r1, #32
 800a9a4:	bfc1      	itttt	gt
 800a9a6:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800a9aa:	408c      	lslgt	r4, r1
 800a9ac:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800a9b0:	fa28 f101 	lsrgt.w	r1, r8, r1
 800a9b4:	bfd6      	itet	le
 800a9b6:	f1c1 0120 	rsble	r1, r1, #32
 800a9ba:	4321      	orrgt	r1, r4
 800a9bc:	fa08 f101 	lslle.w	r1, r8, r1
 800a9c0:	ee07 1a90 	vmov	s15, r1
 800a9c4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a9c8:	3b01      	subs	r3, #1
 800a9ca:	ee17 1a90 	vmov	r1, s15
 800a9ce:	2001      	movs	r0, #1
 800a9d0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a9d4:	e7a7      	b.n	800a926 <_dtoa_r+0x10e>
 800a9d6:	2101      	movs	r1, #1
 800a9d8:	1ad2      	subs	r2, r2, r3
 800a9da:	1e53      	subs	r3, r2, #1
 800a9dc:	9305      	str	r3, [sp, #20]
 800a9de:	bf45      	ittet	mi
 800a9e0:	f1c2 0301 	rsbmi	r3, r2, #1
 800a9e4:	9304      	strmi	r3, [sp, #16]
 800a9e6:	2300      	movpl	r3, #0
 800a9e8:	2300      	movmi	r3, #0
 800a9ea:	bf4c      	ite	mi
 800a9ec:	9305      	strmi	r3, [sp, #20]
 800a9ee:	9304      	strpl	r3, [sp, #16]
 800a9f0:	f1bb 0f00 	cmp.w	fp, #0
 800a9f4:	910b      	str	r1, [sp, #44]	; 0x2c
 800a9f6:	db18      	blt.n	800aa2a <_dtoa_r+0x212>
 800a9f8:	9b05      	ldr	r3, [sp, #20]
 800a9fa:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800a9fe:	445b      	add	r3, fp
 800aa00:	9305      	str	r3, [sp, #20]
 800aa02:	2300      	movs	r3, #0
 800aa04:	9a06      	ldr	r2, [sp, #24]
 800aa06:	2a09      	cmp	r2, #9
 800aa08:	d848      	bhi.n	800aa9c <_dtoa_r+0x284>
 800aa0a:	2a05      	cmp	r2, #5
 800aa0c:	bfc4      	itt	gt
 800aa0e:	3a04      	subgt	r2, #4
 800aa10:	9206      	strgt	r2, [sp, #24]
 800aa12:	9a06      	ldr	r2, [sp, #24]
 800aa14:	f1a2 0202 	sub.w	r2, r2, #2
 800aa18:	bfcc      	ite	gt
 800aa1a:	2400      	movgt	r4, #0
 800aa1c:	2401      	movle	r4, #1
 800aa1e:	2a03      	cmp	r2, #3
 800aa20:	d847      	bhi.n	800aab2 <_dtoa_r+0x29a>
 800aa22:	e8df f002 	tbb	[pc, r2]
 800aa26:	2d0b      	.short	0x2d0b
 800aa28:	392b      	.short	0x392b
 800aa2a:	9b04      	ldr	r3, [sp, #16]
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	eba3 030b 	sub.w	r3, r3, fp
 800aa32:	9304      	str	r3, [sp, #16]
 800aa34:	920a      	str	r2, [sp, #40]	; 0x28
 800aa36:	f1cb 0300 	rsb	r3, fp, #0
 800aa3a:	e7e3      	b.n	800aa04 <_dtoa_r+0x1ec>
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	9207      	str	r2, [sp, #28]
 800aa40:	9a08      	ldr	r2, [sp, #32]
 800aa42:	2a00      	cmp	r2, #0
 800aa44:	dc38      	bgt.n	800aab8 <_dtoa_r+0x2a0>
 800aa46:	f04f 0a01 	mov.w	sl, #1
 800aa4a:	46d1      	mov	r9, sl
 800aa4c:	4652      	mov	r2, sl
 800aa4e:	f8cd a020 	str.w	sl, [sp, #32]
 800aa52:	69f7      	ldr	r7, [r6, #28]
 800aa54:	2100      	movs	r1, #0
 800aa56:	2004      	movs	r0, #4
 800aa58:	f100 0c14 	add.w	ip, r0, #20
 800aa5c:	4594      	cmp	ip, r2
 800aa5e:	d930      	bls.n	800aac2 <_dtoa_r+0x2aa>
 800aa60:	6079      	str	r1, [r7, #4]
 800aa62:	4630      	mov	r0, r6
 800aa64:	930d      	str	r3, [sp, #52]	; 0x34
 800aa66:	f000 fd43 	bl	800b4f0 <_Balloc>
 800aa6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa6c:	9001      	str	r0, [sp, #4]
 800aa6e:	4602      	mov	r2, r0
 800aa70:	2800      	cmp	r0, #0
 800aa72:	d145      	bne.n	800ab00 <_dtoa_r+0x2e8>
 800aa74:	4b21      	ldr	r3, [pc, #132]	; (800aafc <_dtoa_r+0x2e4>)
 800aa76:	f240 11af 	movw	r1, #431	; 0x1af
 800aa7a:	e6e5      	b.n	800a848 <_dtoa_r+0x30>
 800aa7c:	2201      	movs	r2, #1
 800aa7e:	e7de      	b.n	800aa3e <_dtoa_r+0x226>
 800aa80:	2200      	movs	r2, #0
 800aa82:	9207      	str	r2, [sp, #28]
 800aa84:	9a08      	ldr	r2, [sp, #32]
 800aa86:	eb0b 0a02 	add.w	sl, fp, r2
 800aa8a:	f10a 0901 	add.w	r9, sl, #1
 800aa8e:	464a      	mov	r2, r9
 800aa90:	2a01      	cmp	r2, #1
 800aa92:	bfb8      	it	lt
 800aa94:	2201      	movlt	r2, #1
 800aa96:	e7dc      	b.n	800aa52 <_dtoa_r+0x23a>
 800aa98:	2201      	movs	r2, #1
 800aa9a:	e7f2      	b.n	800aa82 <_dtoa_r+0x26a>
 800aa9c:	2401      	movs	r4, #1
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800aaa4:	f04f 3aff 	mov.w	sl, #4294967295
 800aaa8:	2100      	movs	r1, #0
 800aaaa:	46d1      	mov	r9, sl
 800aaac:	2212      	movs	r2, #18
 800aaae:	9108      	str	r1, [sp, #32]
 800aab0:	e7cf      	b.n	800aa52 <_dtoa_r+0x23a>
 800aab2:	2201      	movs	r2, #1
 800aab4:	9207      	str	r2, [sp, #28]
 800aab6:	e7f5      	b.n	800aaa4 <_dtoa_r+0x28c>
 800aab8:	f8dd a020 	ldr.w	sl, [sp, #32]
 800aabc:	46d1      	mov	r9, sl
 800aabe:	4652      	mov	r2, sl
 800aac0:	e7c7      	b.n	800aa52 <_dtoa_r+0x23a>
 800aac2:	3101      	adds	r1, #1
 800aac4:	0040      	lsls	r0, r0, #1
 800aac6:	e7c7      	b.n	800aa58 <_dtoa_r+0x240>
 800aac8:	636f4361 	.word	0x636f4361
 800aacc:	3fd287a7 	.word	0x3fd287a7
 800aad0:	8b60c8b3 	.word	0x8b60c8b3
 800aad4:	3fc68a28 	.word	0x3fc68a28
 800aad8:	509f79fb 	.word	0x509f79fb
 800aadc:	3fd34413 	.word	0x3fd34413
 800aae0:	0800dd8a 	.word	0x0800dd8a
 800aae4:	0800dda1 	.word	0x0800dda1
 800aae8:	7ff00000 	.word	0x7ff00000
 800aaec:	0800dd86 	.word	0x0800dd86
 800aaf0:	0800dd7d 	.word	0x0800dd7d
 800aaf4:	0800dd55 	.word	0x0800dd55
 800aaf8:	0800de90 	.word	0x0800de90
 800aafc:	0800ddf9 	.word	0x0800ddf9
 800ab00:	69f2      	ldr	r2, [r6, #28]
 800ab02:	9901      	ldr	r1, [sp, #4]
 800ab04:	6011      	str	r1, [r2, #0]
 800ab06:	f1b9 0f0e 	cmp.w	r9, #14
 800ab0a:	d86c      	bhi.n	800abe6 <_dtoa_r+0x3ce>
 800ab0c:	2c00      	cmp	r4, #0
 800ab0e:	d06a      	beq.n	800abe6 <_dtoa_r+0x3ce>
 800ab10:	f1bb 0f00 	cmp.w	fp, #0
 800ab14:	f340 80a0 	ble.w	800ac58 <_dtoa_r+0x440>
 800ab18:	4ac1      	ldr	r2, [pc, #772]	; (800ae20 <_dtoa_r+0x608>)
 800ab1a:	f00b 010f 	and.w	r1, fp, #15
 800ab1e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800ab22:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ab26:	ed92 7b00 	vldr	d7, [r2]
 800ab2a:	ea4f 122b 	mov.w	r2, fp, asr #4
 800ab2e:	f000 8087 	beq.w	800ac40 <_dtoa_r+0x428>
 800ab32:	49bc      	ldr	r1, [pc, #752]	; (800ae24 <_dtoa_r+0x60c>)
 800ab34:	ed91 6b08 	vldr	d6, [r1, #32]
 800ab38:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800ab3c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ab40:	f002 020f 	and.w	r2, r2, #15
 800ab44:	2103      	movs	r1, #3
 800ab46:	48b7      	ldr	r0, [pc, #732]	; (800ae24 <_dtoa_r+0x60c>)
 800ab48:	2a00      	cmp	r2, #0
 800ab4a:	d17b      	bne.n	800ac44 <_dtoa_r+0x42c>
 800ab4c:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ab50:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ab54:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ab58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ab5a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ab5e:	2a00      	cmp	r2, #0
 800ab60:	f000 80a0 	beq.w	800aca4 <_dtoa_r+0x48c>
 800ab64:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800ab68:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ab6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab70:	f140 8098 	bpl.w	800aca4 <_dtoa_r+0x48c>
 800ab74:	f1b9 0f00 	cmp.w	r9, #0
 800ab78:	f000 8094 	beq.w	800aca4 <_dtoa_r+0x48c>
 800ab7c:	f1ba 0f00 	cmp.w	sl, #0
 800ab80:	dd2f      	ble.n	800abe2 <_dtoa_r+0x3ca>
 800ab82:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800ab86:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ab8a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ab8e:	f10b 32ff 	add.w	r2, fp, #4294967295
 800ab92:	3101      	adds	r1, #1
 800ab94:	4654      	mov	r4, sl
 800ab96:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ab9a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800ab9e:	ee07 1a90 	vmov	s15, r1
 800aba2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800aba6:	eea7 5b06 	vfma.f64	d5, d7, d6
 800abaa:	ee15 7a90 	vmov	r7, s11
 800abae:	ec51 0b15 	vmov	r0, r1, d5
 800abb2:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800abb6:	2c00      	cmp	r4, #0
 800abb8:	d177      	bne.n	800acaa <_dtoa_r+0x492>
 800abba:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800abbe:	ee36 6b47 	vsub.f64	d6, d6, d7
 800abc2:	ec41 0b17 	vmov	d7, r0, r1
 800abc6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800abca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abce:	f300 826a 	bgt.w	800b0a6 <_dtoa_r+0x88e>
 800abd2:	eeb1 7b47 	vneg.f64	d7, d7
 800abd6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800abda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abde:	f100 8260 	bmi.w	800b0a2 <_dtoa_r+0x88a>
 800abe2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800abe6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800abe8:	2a00      	cmp	r2, #0
 800abea:	f2c0 811d 	blt.w	800ae28 <_dtoa_r+0x610>
 800abee:	f1bb 0f0e 	cmp.w	fp, #14
 800abf2:	f300 8119 	bgt.w	800ae28 <_dtoa_r+0x610>
 800abf6:	4b8a      	ldr	r3, [pc, #552]	; (800ae20 <_dtoa_r+0x608>)
 800abf8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800abfc:	ed93 6b00 	vldr	d6, [r3]
 800ac00:	9b08      	ldr	r3, [sp, #32]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	f280 80b7 	bge.w	800ad76 <_dtoa_r+0x55e>
 800ac08:	f1b9 0f00 	cmp.w	r9, #0
 800ac0c:	f300 80b3 	bgt.w	800ad76 <_dtoa_r+0x55e>
 800ac10:	f040 8246 	bne.w	800b0a0 <_dtoa_r+0x888>
 800ac14:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800ac18:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ac1c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ac20:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ac24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac28:	464c      	mov	r4, r9
 800ac2a:	464f      	mov	r7, r9
 800ac2c:	f280 821c 	bge.w	800b068 <_dtoa_r+0x850>
 800ac30:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ac34:	2331      	movs	r3, #49	; 0x31
 800ac36:	f808 3b01 	strb.w	r3, [r8], #1
 800ac3a:	f10b 0b01 	add.w	fp, fp, #1
 800ac3e:	e218      	b.n	800b072 <_dtoa_r+0x85a>
 800ac40:	2102      	movs	r1, #2
 800ac42:	e780      	b.n	800ab46 <_dtoa_r+0x32e>
 800ac44:	07d4      	lsls	r4, r2, #31
 800ac46:	d504      	bpl.n	800ac52 <_dtoa_r+0x43a>
 800ac48:	ed90 6b00 	vldr	d6, [r0]
 800ac4c:	3101      	adds	r1, #1
 800ac4e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ac52:	1052      	asrs	r2, r2, #1
 800ac54:	3008      	adds	r0, #8
 800ac56:	e777      	b.n	800ab48 <_dtoa_r+0x330>
 800ac58:	d022      	beq.n	800aca0 <_dtoa_r+0x488>
 800ac5a:	f1cb 0200 	rsb	r2, fp, #0
 800ac5e:	4970      	ldr	r1, [pc, #448]	; (800ae20 <_dtoa_r+0x608>)
 800ac60:	f002 000f 	and.w	r0, r2, #15
 800ac64:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800ac68:	ed91 7b00 	vldr	d7, [r1]
 800ac6c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800ac70:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ac74:	486b      	ldr	r0, [pc, #428]	; (800ae24 <_dtoa_r+0x60c>)
 800ac76:	1112      	asrs	r2, r2, #4
 800ac78:	2400      	movs	r4, #0
 800ac7a:	2102      	movs	r1, #2
 800ac7c:	b92a      	cbnz	r2, 800ac8a <_dtoa_r+0x472>
 800ac7e:	2c00      	cmp	r4, #0
 800ac80:	f43f af6a 	beq.w	800ab58 <_dtoa_r+0x340>
 800ac84:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ac88:	e766      	b.n	800ab58 <_dtoa_r+0x340>
 800ac8a:	07d7      	lsls	r7, r2, #31
 800ac8c:	d505      	bpl.n	800ac9a <_dtoa_r+0x482>
 800ac8e:	ed90 6b00 	vldr	d6, [r0]
 800ac92:	3101      	adds	r1, #1
 800ac94:	2401      	movs	r4, #1
 800ac96:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ac9a:	1052      	asrs	r2, r2, #1
 800ac9c:	3008      	adds	r0, #8
 800ac9e:	e7ed      	b.n	800ac7c <_dtoa_r+0x464>
 800aca0:	2102      	movs	r1, #2
 800aca2:	e759      	b.n	800ab58 <_dtoa_r+0x340>
 800aca4:	465a      	mov	r2, fp
 800aca6:	464c      	mov	r4, r9
 800aca8:	e775      	b.n	800ab96 <_dtoa_r+0x37e>
 800acaa:	ec41 0b17 	vmov	d7, r0, r1
 800acae:	495c      	ldr	r1, [pc, #368]	; (800ae20 <_dtoa_r+0x608>)
 800acb0:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800acb4:	ed11 4b02 	vldr	d4, [r1, #-8]
 800acb8:	9901      	ldr	r1, [sp, #4]
 800acba:	440c      	add	r4, r1
 800acbc:	9907      	ldr	r1, [sp, #28]
 800acbe:	b351      	cbz	r1, 800ad16 <_dtoa_r+0x4fe>
 800acc0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800acc4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800acc8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800accc:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800acd0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800acd4:	ee35 7b47 	vsub.f64	d7, d5, d7
 800acd8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800acdc:	ee14 1a90 	vmov	r1, s9
 800ace0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ace4:	3130      	adds	r1, #48	; 0x30
 800ace6:	ee36 6b45 	vsub.f64	d6, d6, d5
 800acea:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800acee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acf2:	f808 1b01 	strb.w	r1, [r8], #1
 800acf6:	d439      	bmi.n	800ad6c <_dtoa_r+0x554>
 800acf8:	ee32 5b46 	vsub.f64	d5, d2, d6
 800acfc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800ad00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad04:	d472      	bmi.n	800adec <_dtoa_r+0x5d4>
 800ad06:	45a0      	cmp	r8, r4
 800ad08:	f43f af6b 	beq.w	800abe2 <_dtoa_r+0x3ca>
 800ad0c:	ee27 7b03 	vmul.f64	d7, d7, d3
 800ad10:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ad14:	e7e0      	b.n	800acd8 <_dtoa_r+0x4c0>
 800ad16:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ad1a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ad1e:	4620      	mov	r0, r4
 800ad20:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800ad24:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ad28:	ee14 1a90 	vmov	r1, s9
 800ad2c:	3130      	adds	r1, #48	; 0x30
 800ad2e:	f808 1b01 	strb.w	r1, [r8], #1
 800ad32:	45a0      	cmp	r8, r4
 800ad34:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ad38:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ad3c:	d118      	bne.n	800ad70 <_dtoa_r+0x558>
 800ad3e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ad42:	ee37 4b05 	vadd.f64	d4, d7, d5
 800ad46:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800ad4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad4e:	dc4d      	bgt.n	800adec <_dtoa_r+0x5d4>
 800ad50:	ee35 5b47 	vsub.f64	d5, d5, d7
 800ad54:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800ad58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad5c:	f57f af41 	bpl.w	800abe2 <_dtoa_r+0x3ca>
 800ad60:	4680      	mov	r8, r0
 800ad62:	3801      	subs	r0, #1
 800ad64:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800ad68:	2b30      	cmp	r3, #48	; 0x30
 800ad6a:	d0f9      	beq.n	800ad60 <_dtoa_r+0x548>
 800ad6c:	4693      	mov	fp, r2
 800ad6e:	e02a      	b.n	800adc6 <_dtoa_r+0x5ae>
 800ad70:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ad74:	e7d6      	b.n	800ad24 <_dtoa_r+0x50c>
 800ad76:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ad7a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800ad7e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ad82:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800ad86:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800ad8a:	ee15 3a10 	vmov	r3, s10
 800ad8e:	3330      	adds	r3, #48	; 0x30
 800ad90:	f808 3b01 	strb.w	r3, [r8], #1
 800ad94:	9b01      	ldr	r3, [sp, #4]
 800ad96:	eba8 0303 	sub.w	r3, r8, r3
 800ad9a:	4599      	cmp	r9, r3
 800ad9c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800ada0:	eea3 7b46 	vfms.f64	d7, d3, d6
 800ada4:	d133      	bne.n	800ae0e <_dtoa_r+0x5f6>
 800ada6:	ee37 7b07 	vadd.f64	d7, d7, d7
 800adaa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800adae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adb2:	dc1a      	bgt.n	800adea <_dtoa_r+0x5d2>
 800adb4:	eeb4 7b46 	vcmp.f64	d7, d6
 800adb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adbc:	d103      	bne.n	800adc6 <_dtoa_r+0x5ae>
 800adbe:	ee15 3a10 	vmov	r3, s10
 800adc2:	07d9      	lsls	r1, r3, #31
 800adc4:	d411      	bmi.n	800adea <_dtoa_r+0x5d2>
 800adc6:	4629      	mov	r1, r5
 800adc8:	4630      	mov	r0, r6
 800adca:	f000 fbd1 	bl	800b570 <_Bfree>
 800adce:	2300      	movs	r3, #0
 800add0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800add2:	f888 3000 	strb.w	r3, [r8]
 800add6:	f10b 0301 	add.w	r3, fp, #1
 800adda:	6013      	str	r3, [r2, #0]
 800addc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800adde:	2b00      	cmp	r3, #0
 800ade0:	f43f ad69 	beq.w	800a8b6 <_dtoa_r+0x9e>
 800ade4:	f8c3 8000 	str.w	r8, [r3]
 800ade8:	e565      	b.n	800a8b6 <_dtoa_r+0x9e>
 800adea:	465a      	mov	r2, fp
 800adec:	4643      	mov	r3, r8
 800adee:	4698      	mov	r8, r3
 800adf0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800adf4:	2939      	cmp	r1, #57	; 0x39
 800adf6:	d106      	bne.n	800ae06 <_dtoa_r+0x5ee>
 800adf8:	9901      	ldr	r1, [sp, #4]
 800adfa:	4299      	cmp	r1, r3
 800adfc:	d1f7      	bne.n	800adee <_dtoa_r+0x5d6>
 800adfe:	9801      	ldr	r0, [sp, #4]
 800ae00:	2130      	movs	r1, #48	; 0x30
 800ae02:	3201      	adds	r2, #1
 800ae04:	7001      	strb	r1, [r0, #0]
 800ae06:	7819      	ldrb	r1, [r3, #0]
 800ae08:	3101      	adds	r1, #1
 800ae0a:	7019      	strb	r1, [r3, #0]
 800ae0c:	e7ae      	b.n	800ad6c <_dtoa_r+0x554>
 800ae0e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ae12:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ae16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae1a:	d1b2      	bne.n	800ad82 <_dtoa_r+0x56a>
 800ae1c:	e7d3      	b.n	800adc6 <_dtoa_r+0x5ae>
 800ae1e:	bf00      	nop
 800ae20:	0800de90 	.word	0x0800de90
 800ae24:	0800de68 	.word	0x0800de68
 800ae28:	9907      	ldr	r1, [sp, #28]
 800ae2a:	2900      	cmp	r1, #0
 800ae2c:	f000 80d0 	beq.w	800afd0 <_dtoa_r+0x7b8>
 800ae30:	9906      	ldr	r1, [sp, #24]
 800ae32:	2901      	cmp	r1, #1
 800ae34:	f300 80b4 	bgt.w	800afa0 <_dtoa_r+0x788>
 800ae38:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ae3a:	2900      	cmp	r1, #0
 800ae3c:	f000 80ac 	beq.w	800af98 <_dtoa_r+0x780>
 800ae40:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ae44:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ae48:	461c      	mov	r4, r3
 800ae4a:	9309      	str	r3, [sp, #36]	; 0x24
 800ae4c:	9b04      	ldr	r3, [sp, #16]
 800ae4e:	4413      	add	r3, r2
 800ae50:	9304      	str	r3, [sp, #16]
 800ae52:	9b05      	ldr	r3, [sp, #20]
 800ae54:	2101      	movs	r1, #1
 800ae56:	4413      	add	r3, r2
 800ae58:	4630      	mov	r0, r6
 800ae5a:	9305      	str	r3, [sp, #20]
 800ae5c:	f000 fc88 	bl	800b770 <__i2b>
 800ae60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae62:	4607      	mov	r7, r0
 800ae64:	f1b8 0f00 	cmp.w	r8, #0
 800ae68:	d00d      	beq.n	800ae86 <_dtoa_r+0x66e>
 800ae6a:	9a05      	ldr	r2, [sp, #20]
 800ae6c:	2a00      	cmp	r2, #0
 800ae6e:	dd0a      	ble.n	800ae86 <_dtoa_r+0x66e>
 800ae70:	4542      	cmp	r2, r8
 800ae72:	9904      	ldr	r1, [sp, #16]
 800ae74:	bfa8      	it	ge
 800ae76:	4642      	movge	r2, r8
 800ae78:	1a89      	subs	r1, r1, r2
 800ae7a:	9104      	str	r1, [sp, #16]
 800ae7c:	9905      	ldr	r1, [sp, #20]
 800ae7e:	eba8 0802 	sub.w	r8, r8, r2
 800ae82:	1a8a      	subs	r2, r1, r2
 800ae84:	9205      	str	r2, [sp, #20]
 800ae86:	b303      	cbz	r3, 800aeca <_dtoa_r+0x6b2>
 800ae88:	9a07      	ldr	r2, [sp, #28]
 800ae8a:	2a00      	cmp	r2, #0
 800ae8c:	f000 80a5 	beq.w	800afda <_dtoa_r+0x7c2>
 800ae90:	2c00      	cmp	r4, #0
 800ae92:	dd13      	ble.n	800aebc <_dtoa_r+0x6a4>
 800ae94:	4639      	mov	r1, r7
 800ae96:	4622      	mov	r2, r4
 800ae98:	4630      	mov	r0, r6
 800ae9a:	930d      	str	r3, [sp, #52]	; 0x34
 800ae9c:	f000 fd28 	bl	800b8f0 <__pow5mult>
 800aea0:	462a      	mov	r2, r5
 800aea2:	4601      	mov	r1, r0
 800aea4:	4607      	mov	r7, r0
 800aea6:	4630      	mov	r0, r6
 800aea8:	f000 fc78 	bl	800b79c <__multiply>
 800aeac:	4629      	mov	r1, r5
 800aeae:	9009      	str	r0, [sp, #36]	; 0x24
 800aeb0:	4630      	mov	r0, r6
 800aeb2:	f000 fb5d 	bl	800b570 <_Bfree>
 800aeb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aeb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aeba:	4615      	mov	r5, r2
 800aebc:	1b1a      	subs	r2, r3, r4
 800aebe:	d004      	beq.n	800aeca <_dtoa_r+0x6b2>
 800aec0:	4629      	mov	r1, r5
 800aec2:	4630      	mov	r0, r6
 800aec4:	f000 fd14 	bl	800b8f0 <__pow5mult>
 800aec8:	4605      	mov	r5, r0
 800aeca:	2101      	movs	r1, #1
 800aecc:	4630      	mov	r0, r6
 800aece:	f000 fc4f 	bl	800b770 <__i2b>
 800aed2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	4604      	mov	r4, r0
 800aed8:	f340 8081 	ble.w	800afde <_dtoa_r+0x7c6>
 800aedc:	461a      	mov	r2, r3
 800aede:	4601      	mov	r1, r0
 800aee0:	4630      	mov	r0, r6
 800aee2:	f000 fd05 	bl	800b8f0 <__pow5mult>
 800aee6:	9b06      	ldr	r3, [sp, #24]
 800aee8:	2b01      	cmp	r3, #1
 800aeea:	4604      	mov	r4, r0
 800aeec:	dd7a      	ble.n	800afe4 <_dtoa_r+0x7cc>
 800aeee:	2300      	movs	r3, #0
 800aef0:	9309      	str	r3, [sp, #36]	; 0x24
 800aef2:	6922      	ldr	r2, [r4, #16]
 800aef4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800aef8:	6910      	ldr	r0, [r2, #16]
 800aefa:	f000 fbeb 	bl	800b6d4 <__hi0bits>
 800aefe:	f1c0 0020 	rsb	r0, r0, #32
 800af02:	9b05      	ldr	r3, [sp, #20]
 800af04:	4418      	add	r0, r3
 800af06:	f010 001f 	ands.w	r0, r0, #31
 800af0a:	f000 8093 	beq.w	800b034 <_dtoa_r+0x81c>
 800af0e:	f1c0 0220 	rsb	r2, r0, #32
 800af12:	2a04      	cmp	r2, #4
 800af14:	f340 8085 	ble.w	800b022 <_dtoa_r+0x80a>
 800af18:	9b04      	ldr	r3, [sp, #16]
 800af1a:	f1c0 001c 	rsb	r0, r0, #28
 800af1e:	4403      	add	r3, r0
 800af20:	9304      	str	r3, [sp, #16]
 800af22:	9b05      	ldr	r3, [sp, #20]
 800af24:	4480      	add	r8, r0
 800af26:	4403      	add	r3, r0
 800af28:	9305      	str	r3, [sp, #20]
 800af2a:	9b04      	ldr	r3, [sp, #16]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	dd05      	ble.n	800af3c <_dtoa_r+0x724>
 800af30:	4629      	mov	r1, r5
 800af32:	461a      	mov	r2, r3
 800af34:	4630      	mov	r0, r6
 800af36:	f000 fd35 	bl	800b9a4 <__lshift>
 800af3a:	4605      	mov	r5, r0
 800af3c:	9b05      	ldr	r3, [sp, #20]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	dd05      	ble.n	800af4e <_dtoa_r+0x736>
 800af42:	4621      	mov	r1, r4
 800af44:	461a      	mov	r2, r3
 800af46:	4630      	mov	r0, r6
 800af48:	f000 fd2c 	bl	800b9a4 <__lshift>
 800af4c:	4604      	mov	r4, r0
 800af4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af50:	2b00      	cmp	r3, #0
 800af52:	d071      	beq.n	800b038 <_dtoa_r+0x820>
 800af54:	4621      	mov	r1, r4
 800af56:	4628      	mov	r0, r5
 800af58:	f000 fd90 	bl	800ba7c <__mcmp>
 800af5c:	2800      	cmp	r0, #0
 800af5e:	da6b      	bge.n	800b038 <_dtoa_r+0x820>
 800af60:	2300      	movs	r3, #0
 800af62:	4629      	mov	r1, r5
 800af64:	220a      	movs	r2, #10
 800af66:	4630      	mov	r0, r6
 800af68:	f000 fb24 	bl	800b5b4 <__multadd>
 800af6c:	9b07      	ldr	r3, [sp, #28]
 800af6e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800af72:	4605      	mov	r5, r0
 800af74:	2b00      	cmp	r3, #0
 800af76:	f000 8197 	beq.w	800b2a8 <_dtoa_r+0xa90>
 800af7a:	4639      	mov	r1, r7
 800af7c:	2300      	movs	r3, #0
 800af7e:	220a      	movs	r2, #10
 800af80:	4630      	mov	r0, r6
 800af82:	f000 fb17 	bl	800b5b4 <__multadd>
 800af86:	f1ba 0f00 	cmp.w	sl, #0
 800af8a:	4607      	mov	r7, r0
 800af8c:	f300 8093 	bgt.w	800b0b6 <_dtoa_r+0x89e>
 800af90:	9b06      	ldr	r3, [sp, #24]
 800af92:	2b02      	cmp	r3, #2
 800af94:	dc57      	bgt.n	800b046 <_dtoa_r+0x82e>
 800af96:	e08e      	b.n	800b0b6 <_dtoa_r+0x89e>
 800af98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af9a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800af9e:	e751      	b.n	800ae44 <_dtoa_r+0x62c>
 800afa0:	f109 34ff 	add.w	r4, r9, #4294967295
 800afa4:	42a3      	cmp	r3, r4
 800afa6:	bfbf      	itttt	lt
 800afa8:	1ae2      	sublt	r2, r4, r3
 800afaa:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800afac:	189b      	addlt	r3, r3, r2
 800afae:	930a      	strlt	r3, [sp, #40]	; 0x28
 800afb0:	bfae      	itee	ge
 800afb2:	1b1c      	subge	r4, r3, r4
 800afb4:	4623      	movlt	r3, r4
 800afb6:	2400      	movlt	r4, #0
 800afb8:	f1b9 0f00 	cmp.w	r9, #0
 800afbc:	bfb5      	itete	lt
 800afbe:	9a04      	ldrlt	r2, [sp, #16]
 800afc0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800afc4:	eba2 0809 	sublt.w	r8, r2, r9
 800afc8:	464a      	movge	r2, r9
 800afca:	bfb8      	it	lt
 800afcc:	2200      	movlt	r2, #0
 800afce:	e73c      	b.n	800ae4a <_dtoa_r+0x632>
 800afd0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800afd4:	9f07      	ldr	r7, [sp, #28]
 800afd6:	461c      	mov	r4, r3
 800afd8:	e744      	b.n	800ae64 <_dtoa_r+0x64c>
 800afda:	461a      	mov	r2, r3
 800afdc:	e770      	b.n	800aec0 <_dtoa_r+0x6a8>
 800afde:	9b06      	ldr	r3, [sp, #24]
 800afe0:	2b01      	cmp	r3, #1
 800afe2:	dc18      	bgt.n	800b016 <_dtoa_r+0x7fe>
 800afe4:	9b02      	ldr	r3, [sp, #8]
 800afe6:	b9b3      	cbnz	r3, 800b016 <_dtoa_r+0x7fe>
 800afe8:	9b03      	ldr	r3, [sp, #12]
 800afea:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800afee:	b9a2      	cbnz	r2, 800b01a <_dtoa_r+0x802>
 800aff0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800aff4:	0d12      	lsrs	r2, r2, #20
 800aff6:	0512      	lsls	r2, r2, #20
 800aff8:	b18a      	cbz	r2, 800b01e <_dtoa_r+0x806>
 800affa:	9b04      	ldr	r3, [sp, #16]
 800affc:	3301      	adds	r3, #1
 800affe:	9304      	str	r3, [sp, #16]
 800b000:	9b05      	ldr	r3, [sp, #20]
 800b002:	3301      	adds	r3, #1
 800b004:	9305      	str	r3, [sp, #20]
 800b006:	2301      	movs	r3, #1
 800b008:	9309      	str	r3, [sp, #36]	; 0x24
 800b00a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	f47f af70 	bne.w	800aef2 <_dtoa_r+0x6da>
 800b012:	2001      	movs	r0, #1
 800b014:	e775      	b.n	800af02 <_dtoa_r+0x6ea>
 800b016:	2300      	movs	r3, #0
 800b018:	e7f6      	b.n	800b008 <_dtoa_r+0x7f0>
 800b01a:	9b02      	ldr	r3, [sp, #8]
 800b01c:	e7f4      	b.n	800b008 <_dtoa_r+0x7f0>
 800b01e:	9209      	str	r2, [sp, #36]	; 0x24
 800b020:	e7f3      	b.n	800b00a <_dtoa_r+0x7f2>
 800b022:	d082      	beq.n	800af2a <_dtoa_r+0x712>
 800b024:	9b04      	ldr	r3, [sp, #16]
 800b026:	321c      	adds	r2, #28
 800b028:	4413      	add	r3, r2
 800b02a:	9304      	str	r3, [sp, #16]
 800b02c:	9b05      	ldr	r3, [sp, #20]
 800b02e:	4490      	add	r8, r2
 800b030:	4413      	add	r3, r2
 800b032:	e779      	b.n	800af28 <_dtoa_r+0x710>
 800b034:	4602      	mov	r2, r0
 800b036:	e7f5      	b.n	800b024 <_dtoa_r+0x80c>
 800b038:	f1b9 0f00 	cmp.w	r9, #0
 800b03c:	dc36      	bgt.n	800b0ac <_dtoa_r+0x894>
 800b03e:	9b06      	ldr	r3, [sp, #24]
 800b040:	2b02      	cmp	r3, #2
 800b042:	dd33      	ble.n	800b0ac <_dtoa_r+0x894>
 800b044:	46ca      	mov	sl, r9
 800b046:	f1ba 0f00 	cmp.w	sl, #0
 800b04a:	d10d      	bne.n	800b068 <_dtoa_r+0x850>
 800b04c:	4621      	mov	r1, r4
 800b04e:	4653      	mov	r3, sl
 800b050:	2205      	movs	r2, #5
 800b052:	4630      	mov	r0, r6
 800b054:	f000 faae 	bl	800b5b4 <__multadd>
 800b058:	4601      	mov	r1, r0
 800b05a:	4604      	mov	r4, r0
 800b05c:	4628      	mov	r0, r5
 800b05e:	f000 fd0d 	bl	800ba7c <__mcmp>
 800b062:	2800      	cmp	r0, #0
 800b064:	f73f ade4 	bgt.w	800ac30 <_dtoa_r+0x418>
 800b068:	9b08      	ldr	r3, [sp, #32]
 800b06a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b06e:	ea6f 0b03 	mvn.w	fp, r3
 800b072:	f04f 0900 	mov.w	r9, #0
 800b076:	4621      	mov	r1, r4
 800b078:	4630      	mov	r0, r6
 800b07a:	f000 fa79 	bl	800b570 <_Bfree>
 800b07e:	2f00      	cmp	r7, #0
 800b080:	f43f aea1 	beq.w	800adc6 <_dtoa_r+0x5ae>
 800b084:	f1b9 0f00 	cmp.w	r9, #0
 800b088:	d005      	beq.n	800b096 <_dtoa_r+0x87e>
 800b08a:	45b9      	cmp	r9, r7
 800b08c:	d003      	beq.n	800b096 <_dtoa_r+0x87e>
 800b08e:	4649      	mov	r1, r9
 800b090:	4630      	mov	r0, r6
 800b092:	f000 fa6d 	bl	800b570 <_Bfree>
 800b096:	4639      	mov	r1, r7
 800b098:	4630      	mov	r0, r6
 800b09a:	f000 fa69 	bl	800b570 <_Bfree>
 800b09e:	e692      	b.n	800adc6 <_dtoa_r+0x5ae>
 800b0a0:	2400      	movs	r4, #0
 800b0a2:	4627      	mov	r7, r4
 800b0a4:	e7e0      	b.n	800b068 <_dtoa_r+0x850>
 800b0a6:	4693      	mov	fp, r2
 800b0a8:	4627      	mov	r7, r4
 800b0aa:	e5c1      	b.n	800ac30 <_dtoa_r+0x418>
 800b0ac:	9b07      	ldr	r3, [sp, #28]
 800b0ae:	46ca      	mov	sl, r9
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	f000 8100 	beq.w	800b2b6 <_dtoa_r+0xa9e>
 800b0b6:	f1b8 0f00 	cmp.w	r8, #0
 800b0ba:	dd05      	ble.n	800b0c8 <_dtoa_r+0x8b0>
 800b0bc:	4639      	mov	r1, r7
 800b0be:	4642      	mov	r2, r8
 800b0c0:	4630      	mov	r0, r6
 800b0c2:	f000 fc6f 	bl	800b9a4 <__lshift>
 800b0c6:	4607      	mov	r7, r0
 800b0c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d05d      	beq.n	800b18a <_dtoa_r+0x972>
 800b0ce:	6879      	ldr	r1, [r7, #4]
 800b0d0:	4630      	mov	r0, r6
 800b0d2:	f000 fa0d 	bl	800b4f0 <_Balloc>
 800b0d6:	4680      	mov	r8, r0
 800b0d8:	b928      	cbnz	r0, 800b0e6 <_dtoa_r+0x8ce>
 800b0da:	4b82      	ldr	r3, [pc, #520]	; (800b2e4 <_dtoa_r+0xacc>)
 800b0dc:	4602      	mov	r2, r0
 800b0de:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b0e2:	f7ff bbb1 	b.w	800a848 <_dtoa_r+0x30>
 800b0e6:	693a      	ldr	r2, [r7, #16]
 800b0e8:	3202      	adds	r2, #2
 800b0ea:	0092      	lsls	r2, r2, #2
 800b0ec:	f107 010c 	add.w	r1, r7, #12
 800b0f0:	300c      	adds	r0, #12
 800b0f2:	f001 ff3f 	bl	800cf74 <memcpy>
 800b0f6:	2201      	movs	r2, #1
 800b0f8:	4641      	mov	r1, r8
 800b0fa:	4630      	mov	r0, r6
 800b0fc:	f000 fc52 	bl	800b9a4 <__lshift>
 800b100:	9b01      	ldr	r3, [sp, #4]
 800b102:	3301      	adds	r3, #1
 800b104:	9304      	str	r3, [sp, #16]
 800b106:	9b01      	ldr	r3, [sp, #4]
 800b108:	4453      	add	r3, sl
 800b10a:	9308      	str	r3, [sp, #32]
 800b10c:	9b02      	ldr	r3, [sp, #8]
 800b10e:	f003 0301 	and.w	r3, r3, #1
 800b112:	46b9      	mov	r9, r7
 800b114:	9307      	str	r3, [sp, #28]
 800b116:	4607      	mov	r7, r0
 800b118:	9b04      	ldr	r3, [sp, #16]
 800b11a:	4621      	mov	r1, r4
 800b11c:	3b01      	subs	r3, #1
 800b11e:	4628      	mov	r0, r5
 800b120:	9302      	str	r3, [sp, #8]
 800b122:	f7ff faef 	bl	800a704 <quorem>
 800b126:	4603      	mov	r3, r0
 800b128:	3330      	adds	r3, #48	; 0x30
 800b12a:	9005      	str	r0, [sp, #20]
 800b12c:	4649      	mov	r1, r9
 800b12e:	4628      	mov	r0, r5
 800b130:	9309      	str	r3, [sp, #36]	; 0x24
 800b132:	f000 fca3 	bl	800ba7c <__mcmp>
 800b136:	463a      	mov	r2, r7
 800b138:	4682      	mov	sl, r0
 800b13a:	4621      	mov	r1, r4
 800b13c:	4630      	mov	r0, r6
 800b13e:	f000 fcb9 	bl	800bab4 <__mdiff>
 800b142:	68c2      	ldr	r2, [r0, #12]
 800b144:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b146:	4680      	mov	r8, r0
 800b148:	bb0a      	cbnz	r2, 800b18e <_dtoa_r+0x976>
 800b14a:	4601      	mov	r1, r0
 800b14c:	4628      	mov	r0, r5
 800b14e:	f000 fc95 	bl	800ba7c <__mcmp>
 800b152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b154:	4602      	mov	r2, r0
 800b156:	4641      	mov	r1, r8
 800b158:	4630      	mov	r0, r6
 800b15a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800b15e:	f000 fa07 	bl	800b570 <_Bfree>
 800b162:	9b06      	ldr	r3, [sp, #24]
 800b164:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b166:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b16a:	ea43 0102 	orr.w	r1, r3, r2
 800b16e:	9b07      	ldr	r3, [sp, #28]
 800b170:	4319      	orrs	r1, r3
 800b172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b174:	d10d      	bne.n	800b192 <_dtoa_r+0x97a>
 800b176:	2b39      	cmp	r3, #57	; 0x39
 800b178:	d029      	beq.n	800b1ce <_dtoa_r+0x9b6>
 800b17a:	f1ba 0f00 	cmp.w	sl, #0
 800b17e:	dd01      	ble.n	800b184 <_dtoa_r+0x96c>
 800b180:	9b05      	ldr	r3, [sp, #20]
 800b182:	3331      	adds	r3, #49	; 0x31
 800b184:	9a02      	ldr	r2, [sp, #8]
 800b186:	7013      	strb	r3, [r2, #0]
 800b188:	e775      	b.n	800b076 <_dtoa_r+0x85e>
 800b18a:	4638      	mov	r0, r7
 800b18c:	e7b8      	b.n	800b100 <_dtoa_r+0x8e8>
 800b18e:	2201      	movs	r2, #1
 800b190:	e7e1      	b.n	800b156 <_dtoa_r+0x93e>
 800b192:	f1ba 0f00 	cmp.w	sl, #0
 800b196:	db06      	blt.n	800b1a6 <_dtoa_r+0x98e>
 800b198:	9906      	ldr	r1, [sp, #24]
 800b19a:	ea41 0a0a 	orr.w	sl, r1, sl
 800b19e:	9907      	ldr	r1, [sp, #28]
 800b1a0:	ea5a 0a01 	orrs.w	sl, sl, r1
 800b1a4:	d120      	bne.n	800b1e8 <_dtoa_r+0x9d0>
 800b1a6:	2a00      	cmp	r2, #0
 800b1a8:	ddec      	ble.n	800b184 <_dtoa_r+0x96c>
 800b1aa:	4629      	mov	r1, r5
 800b1ac:	2201      	movs	r2, #1
 800b1ae:	4630      	mov	r0, r6
 800b1b0:	9304      	str	r3, [sp, #16]
 800b1b2:	f000 fbf7 	bl	800b9a4 <__lshift>
 800b1b6:	4621      	mov	r1, r4
 800b1b8:	4605      	mov	r5, r0
 800b1ba:	f000 fc5f 	bl	800ba7c <__mcmp>
 800b1be:	2800      	cmp	r0, #0
 800b1c0:	9b04      	ldr	r3, [sp, #16]
 800b1c2:	dc02      	bgt.n	800b1ca <_dtoa_r+0x9b2>
 800b1c4:	d1de      	bne.n	800b184 <_dtoa_r+0x96c>
 800b1c6:	07da      	lsls	r2, r3, #31
 800b1c8:	d5dc      	bpl.n	800b184 <_dtoa_r+0x96c>
 800b1ca:	2b39      	cmp	r3, #57	; 0x39
 800b1cc:	d1d8      	bne.n	800b180 <_dtoa_r+0x968>
 800b1ce:	9a02      	ldr	r2, [sp, #8]
 800b1d0:	2339      	movs	r3, #57	; 0x39
 800b1d2:	7013      	strb	r3, [r2, #0]
 800b1d4:	4643      	mov	r3, r8
 800b1d6:	4698      	mov	r8, r3
 800b1d8:	3b01      	subs	r3, #1
 800b1da:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800b1de:	2a39      	cmp	r2, #57	; 0x39
 800b1e0:	d051      	beq.n	800b286 <_dtoa_r+0xa6e>
 800b1e2:	3201      	adds	r2, #1
 800b1e4:	701a      	strb	r2, [r3, #0]
 800b1e6:	e746      	b.n	800b076 <_dtoa_r+0x85e>
 800b1e8:	2a00      	cmp	r2, #0
 800b1ea:	dd03      	ble.n	800b1f4 <_dtoa_r+0x9dc>
 800b1ec:	2b39      	cmp	r3, #57	; 0x39
 800b1ee:	d0ee      	beq.n	800b1ce <_dtoa_r+0x9b6>
 800b1f0:	3301      	adds	r3, #1
 800b1f2:	e7c7      	b.n	800b184 <_dtoa_r+0x96c>
 800b1f4:	9a04      	ldr	r2, [sp, #16]
 800b1f6:	9908      	ldr	r1, [sp, #32]
 800b1f8:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b1fc:	428a      	cmp	r2, r1
 800b1fe:	d02b      	beq.n	800b258 <_dtoa_r+0xa40>
 800b200:	4629      	mov	r1, r5
 800b202:	2300      	movs	r3, #0
 800b204:	220a      	movs	r2, #10
 800b206:	4630      	mov	r0, r6
 800b208:	f000 f9d4 	bl	800b5b4 <__multadd>
 800b20c:	45b9      	cmp	r9, r7
 800b20e:	4605      	mov	r5, r0
 800b210:	f04f 0300 	mov.w	r3, #0
 800b214:	f04f 020a 	mov.w	r2, #10
 800b218:	4649      	mov	r1, r9
 800b21a:	4630      	mov	r0, r6
 800b21c:	d107      	bne.n	800b22e <_dtoa_r+0xa16>
 800b21e:	f000 f9c9 	bl	800b5b4 <__multadd>
 800b222:	4681      	mov	r9, r0
 800b224:	4607      	mov	r7, r0
 800b226:	9b04      	ldr	r3, [sp, #16]
 800b228:	3301      	adds	r3, #1
 800b22a:	9304      	str	r3, [sp, #16]
 800b22c:	e774      	b.n	800b118 <_dtoa_r+0x900>
 800b22e:	f000 f9c1 	bl	800b5b4 <__multadd>
 800b232:	4639      	mov	r1, r7
 800b234:	4681      	mov	r9, r0
 800b236:	2300      	movs	r3, #0
 800b238:	220a      	movs	r2, #10
 800b23a:	4630      	mov	r0, r6
 800b23c:	f000 f9ba 	bl	800b5b4 <__multadd>
 800b240:	4607      	mov	r7, r0
 800b242:	e7f0      	b.n	800b226 <_dtoa_r+0xa0e>
 800b244:	f1ba 0f00 	cmp.w	sl, #0
 800b248:	9a01      	ldr	r2, [sp, #4]
 800b24a:	bfcc      	ite	gt
 800b24c:	46d0      	movgt	r8, sl
 800b24e:	f04f 0801 	movle.w	r8, #1
 800b252:	4490      	add	r8, r2
 800b254:	f04f 0900 	mov.w	r9, #0
 800b258:	4629      	mov	r1, r5
 800b25a:	2201      	movs	r2, #1
 800b25c:	4630      	mov	r0, r6
 800b25e:	9302      	str	r3, [sp, #8]
 800b260:	f000 fba0 	bl	800b9a4 <__lshift>
 800b264:	4621      	mov	r1, r4
 800b266:	4605      	mov	r5, r0
 800b268:	f000 fc08 	bl	800ba7c <__mcmp>
 800b26c:	2800      	cmp	r0, #0
 800b26e:	dcb1      	bgt.n	800b1d4 <_dtoa_r+0x9bc>
 800b270:	d102      	bne.n	800b278 <_dtoa_r+0xa60>
 800b272:	9b02      	ldr	r3, [sp, #8]
 800b274:	07db      	lsls	r3, r3, #31
 800b276:	d4ad      	bmi.n	800b1d4 <_dtoa_r+0x9bc>
 800b278:	4643      	mov	r3, r8
 800b27a:	4698      	mov	r8, r3
 800b27c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b280:	2a30      	cmp	r2, #48	; 0x30
 800b282:	d0fa      	beq.n	800b27a <_dtoa_r+0xa62>
 800b284:	e6f7      	b.n	800b076 <_dtoa_r+0x85e>
 800b286:	9a01      	ldr	r2, [sp, #4]
 800b288:	429a      	cmp	r2, r3
 800b28a:	d1a4      	bne.n	800b1d6 <_dtoa_r+0x9be>
 800b28c:	f10b 0b01 	add.w	fp, fp, #1
 800b290:	2331      	movs	r3, #49	; 0x31
 800b292:	e778      	b.n	800b186 <_dtoa_r+0x96e>
 800b294:	4b14      	ldr	r3, [pc, #80]	; (800b2e8 <_dtoa_r+0xad0>)
 800b296:	f7ff bb2a 	b.w	800a8ee <_dtoa_r+0xd6>
 800b29a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	f47f ab05 	bne.w	800a8ac <_dtoa_r+0x94>
 800b2a2:	4b12      	ldr	r3, [pc, #72]	; (800b2ec <_dtoa_r+0xad4>)
 800b2a4:	f7ff bb23 	b.w	800a8ee <_dtoa_r+0xd6>
 800b2a8:	f1ba 0f00 	cmp.w	sl, #0
 800b2ac:	dc03      	bgt.n	800b2b6 <_dtoa_r+0xa9e>
 800b2ae:	9b06      	ldr	r3, [sp, #24]
 800b2b0:	2b02      	cmp	r3, #2
 800b2b2:	f73f aec8 	bgt.w	800b046 <_dtoa_r+0x82e>
 800b2b6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b2ba:	4621      	mov	r1, r4
 800b2bc:	4628      	mov	r0, r5
 800b2be:	f7ff fa21 	bl	800a704 <quorem>
 800b2c2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b2c6:	f808 3b01 	strb.w	r3, [r8], #1
 800b2ca:	9a01      	ldr	r2, [sp, #4]
 800b2cc:	eba8 0202 	sub.w	r2, r8, r2
 800b2d0:	4592      	cmp	sl, r2
 800b2d2:	ddb7      	ble.n	800b244 <_dtoa_r+0xa2c>
 800b2d4:	4629      	mov	r1, r5
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	220a      	movs	r2, #10
 800b2da:	4630      	mov	r0, r6
 800b2dc:	f000 f96a 	bl	800b5b4 <__multadd>
 800b2e0:	4605      	mov	r5, r0
 800b2e2:	e7ea      	b.n	800b2ba <_dtoa_r+0xaa2>
 800b2e4:	0800ddf9 	.word	0x0800ddf9
 800b2e8:	0800dd54 	.word	0x0800dd54
 800b2ec:	0800dd7d 	.word	0x0800dd7d

0800b2f0 <_free_r>:
 800b2f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b2f2:	2900      	cmp	r1, #0
 800b2f4:	d044      	beq.n	800b380 <_free_r+0x90>
 800b2f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2fa:	9001      	str	r0, [sp, #4]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	f1a1 0404 	sub.w	r4, r1, #4
 800b302:	bfb8      	it	lt
 800b304:	18e4      	addlt	r4, r4, r3
 800b306:	f000 f8e7 	bl	800b4d8 <__malloc_lock>
 800b30a:	4a1e      	ldr	r2, [pc, #120]	; (800b384 <_free_r+0x94>)
 800b30c:	9801      	ldr	r0, [sp, #4]
 800b30e:	6813      	ldr	r3, [r2, #0]
 800b310:	b933      	cbnz	r3, 800b320 <_free_r+0x30>
 800b312:	6063      	str	r3, [r4, #4]
 800b314:	6014      	str	r4, [r2, #0]
 800b316:	b003      	add	sp, #12
 800b318:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b31c:	f000 b8e2 	b.w	800b4e4 <__malloc_unlock>
 800b320:	42a3      	cmp	r3, r4
 800b322:	d908      	bls.n	800b336 <_free_r+0x46>
 800b324:	6825      	ldr	r5, [r4, #0]
 800b326:	1961      	adds	r1, r4, r5
 800b328:	428b      	cmp	r3, r1
 800b32a:	bf01      	itttt	eq
 800b32c:	6819      	ldreq	r1, [r3, #0]
 800b32e:	685b      	ldreq	r3, [r3, #4]
 800b330:	1949      	addeq	r1, r1, r5
 800b332:	6021      	streq	r1, [r4, #0]
 800b334:	e7ed      	b.n	800b312 <_free_r+0x22>
 800b336:	461a      	mov	r2, r3
 800b338:	685b      	ldr	r3, [r3, #4]
 800b33a:	b10b      	cbz	r3, 800b340 <_free_r+0x50>
 800b33c:	42a3      	cmp	r3, r4
 800b33e:	d9fa      	bls.n	800b336 <_free_r+0x46>
 800b340:	6811      	ldr	r1, [r2, #0]
 800b342:	1855      	adds	r5, r2, r1
 800b344:	42a5      	cmp	r5, r4
 800b346:	d10b      	bne.n	800b360 <_free_r+0x70>
 800b348:	6824      	ldr	r4, [r4, #0]
 800b34a:	4421      	add	r1, r4
 800b34c:	1854      	adds	r4, r2, r1
 800b34e:	42a3      	cmp	r3, r4
 800b350:	6011      	str	r1, [r2, #0]
 800b352:	d1e0      	bne.n	800b316 <_free_r+0x26>
 800b354:	681c      	ldr	r4, [r3, #0]
 800b356:	685b      	ldr	r3, [r3, #4]
 800b358:	6053      	str	r3, [r2, #4]
 800b35a:	440c      	add	r4, r1
 800b35c:	6014      	str	r4, [r2, #0]
 800b35e:	e7da      	b.n	800b316 <_free_r+0x26>
 800b360:	d902      	bls.n	800b368 <_free_r+0x78>
 800b362:	230c      	movs	r3, #12
 800b364:	6003      	str	r3, [r0, #0]
 800b366:	e7d6      	b.n	800b316 <_free_r+0x26>
 800b368:	6825      	ldr	r5, [r4, #0]
 800b36a:	1961      	adds	r1, r4, r5
 800b36c:	428b      	cmp	r3, r1
 800b36e:	bf04      	itt	eq
 800b370:	6819      	ldreq	r1, [r3, #0]
 800b372:	685b      	ldreq	r3, [r3, #4]
 800b374:	6063      	str	r3, [r4, #4]
 800b376:	bf04      	itt	eq
 800b378:	1949      	addeq	r1, r1, r5
 800b37a:	6021      	streq	r1, [r4, #0]
 800b37c:	6054      	str	r4, [r2, #4]
 800b37e:	e7ca      	b.n	800b316 <_free_r+0x26>
 800b380:	b003      	add	sp, #12
 800b382:	bd30      	pop	{r4, r5, pc}
 800b384:	24000be4 	.word	0x24000be4

0800b388 <malloc>:
 800b388:	4b02      	ldr	r3, [pc, #8]	; (800b394 <malloc+0xc>)
 800b38a:	4601      	mov	r1, r0
 800b38c:	6818      	ldr	r0, [r3, #0]
 800b38e:	f000 b823 	b.w	800b3d8 <_malloc_r>
 800b392:	bf00      	nop
 800b394:	24000068 	.word	0x24000068

0800b398 <sbrk_aligned>:
 800b398:	b570      	push	{r4, r5, r6, lr}
 800b39a:	4e0e      	ldr	r6, [pc, #56]	; (800b3d4 <sbrk_aligned+0x3c>)
 800b39c:	460c      	mov	r4, r1
 800b39e:	6831      	ldr	r1, [r6, #0]
 800b3a0:	4605      	mov	r5, r0
 800b3a2:	b911      	cbnz	r1, 800b3aa <sbrk_aligned+0x12>
 800b3a4:	f001 fdd6 	bl	800cf54 <_sbrk_r>
 800b3a8:	6030      	str	r0, [r6, #0]
 800b3aa:	4621      	mov	r1, r4
 800b3ac:	4628      	mov	r0, r5
 800b3ae:	f001 fdd1 	bl	800cf54 <_sbrk_r>
 800b3b2:	1c43      	adds	r3, r0, #1
 800b3b4:	d00a      	beq.n	800b3cc <sbrk_aligned+0x34>
 800b3b6:	1cc4      	adds	r4, r0, #3
 800b3b8:	f024 0403 	bic.w	r4, r4, #3
 800b3bc:	42a0      	cmp	r0, r4
 800b3be:	d007      	beq.n	800b3d0 <sbrk_aligned+0x38>
 800b3c0:	1a21      	subs	r1, r4, r0
 800b3c2:	4628      	mov	r0, r5
 800b3c4:	f001 fdc6 	bl	800cf54 <_sbrk_r>
 800b3c8:	3001      	adds	r0, #1
 800b3ca:	d101      	bne.n	800b3d0 <sbrk_aligned+0x38>
 800b3cc:	f04f 34ff 	mov.w	r4, #4294967295
 800b3d0:	4620      	mov	r0, r4
 800b3d2:	bd70      	pop	{r4, r5, r6, pc}
 800b3d4:	24000be8 	.word	0x24000be8

0800b3d8 <_malloc_r>:
 800b3d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3dc:	1ccd      	adds	r5, r1, #3
 800b3de:	f025 0503 	bic.w	r5, r5, #3
 800b3e2:	3508      	adds	r5, #8
 800b3e4:	2d0c      	cmp	r5, #12
 800b3e6:	bf38      	it	cc
 800b3e8:	250c      	movcc	r5, #12
 800b3ea:	2d00      	cmp	r5, #0
 800b3ec:	4607      	mov	r7, r0
 800b3ee:	db01      	blt.n	800b3f4 <_malloc_r+0x1c>
 800b3f0:	42a9      	cmp	r1, r5
 800b3f2:	d905      	bls.n	800b400 <_malloc_r+0x28>
 800b3f4:	230c      	movs	r3, #12
 800b3f6:	603b      	str	r3, [r7, #0]
 800b3f8:	2600      	movs	r6, #0
 800b3fa:	4630      	mov	r0, r6
 800b3fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b400:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b4d4 <_malloc_r+0xfc>
 800b404:	f000 f868 	bl	800b4d8 <__malloc_lock>
 800b408:	f8d8 3000 	ldr.w	r3, [r8]
 800b40c:	461c      	mov	r4, r3
 800b40e:	bb5c      	cbnz	r4, 800b468 <_malloc_r+0x90>
 800b410:	4629      	mov	r1, r5
 800b412:	4638      	mov	r0, r7
 800b414:	f7ff ffc0 	bl	800b398 <sbrk_aligned>
 800b418:	1c43      	adds	r3, r0, #1
 800b41a:	4604      	mov	r4, r0
 800b41c:	d155      	bne.n	800b4ca <_malloc_r+0xf2>
 800b41e:	f8d8 4000 	ldr.w	r4, [r8]
 800b422:	4626      	mov	r6, r4
 800b424:	2e00      	cmp	r6, #0
 800b426:	d145      	bne.n	800b4b4 <_malloc_r+0xdc>
 800b428:	2c00      	cmp	r4, #0
 800b42a:	d048      	beq.n	800b4be <_malloc_r+0xe6>
 800b42c:	6823      	ldr	r3, [r4, #0]
 800b42e:	4631      	mov	r1, r6
 800b430:	4638      	mov	r0, r7
 800b432:	eb04 0903 	add.w	r9, r4, r3
 800b436:	f001 fd8d 	bl	800cf54 <_sbrk_r>
 800b43a:	4581      	cmp	r9, r0
 800b43c:	d13f      	bne.n	800b4be <_malloc_r+0xe6>
 800b43e:	6821      	ldr	r1, [r4, #0]
 800b440:	1a6d      	subs	r5, r5, r1
 800b442:	4629      	mov	r1, r5
 800b444:	4638      	mov	r0, r7
 800b446:	f7ff ffa7 	bl	800b398 <sbrk_aligned>
 800b44a:	3001      	adds	r0, #1
 800b44c:	d037      	beq.n	800b4be <_malloc_r+0xe6>
 800b44e:	6823      	ldr	r3, [r4, #0]
 800b450:	442b      	add	r3, r5
 800b452:	6023      	str	r3, [r4, #0]
 800b454:	f8d8 3000 	ldr.w	r3, [r8]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d038      	beq.n	800b4ce <_malloc_r+0xf6>
 800b45c:	685a      	ldr	r2, [r3, #4]
 800b45e:	42a2      	cmp	r2, r4
 800b460:	d12b      	bne.n	800b4ba <_malloc_r+0xe2>
 800b462:	2200      	movs	r2, #0
 800b464:	605a      	str	r2, [r3, #4]
 800b466:	e00f      	b.n	800b488 <_malloc_r+0xb0>
 800b468:	6822      	ldr	r2, [r4, #0]
 800b46a:	1b52      	subs	r2, r2, r5
 800b46c:	d41f      	bmi.n	800b4ae <_malloc_r+0xd6>
 800b46e:	2a0b      	cmp	r2, #11
 800b470:	d917      	bls.n	800b4a2 <_malloc_r+0xca>
 800b472:	1961      	adds	r1, r4, r5
 800b474:	42a3      	cmp	r3, r4
 800b476:	6025      	str	r5, [r4, #0]
 800b478:	bf18      	it	ne
 800b47a:	6059      	strne	r1, [r3, #4]
 800b47c:	6863      	ldr	r3, [r4, #4]
 800b47e:	bf08      	it	eq
 800b480:	f8c8 1000 	streq.w	r1, [r8]
 800b484:	5162      	str	r2, [r4, r5]
 800b486:	604b      	str	r3, [r1, #4]
 800b488:	4638      	mov	r0, r7
 800b48a:	f104 060b 	add.w	r6, r4, #11
 800b48e:	f000 f829 	bl	800b4e4 <__malloc_unlock>
 800b492:	f026 0607 	bic.w	r6, r6, #7
 800b496:	1d23      	adds	r3, r4, #4
 800b498:	1af2      	subs	r2, r6, r3
 800b49a:	d0ae      	beq.n	800b3fa <_malloc_r+0x22>
 800b49c:	1b9b      	subs	r3, r3, r6
 800b49e:	50a3      	str	r3, [r4, r2]
 800b4a0:	e7ab      	b.n	800b3fa <_malloc_r+0x22>
 800b4a2:	42a3      	cmp	r3, r4
 800b4a4:	6862      	ldr	r2, [r4, #4]
 800b4a6:	d1dd      	bne.n	800b464 <_malloc_r+0x8c>
 800b4a8:	f8c8 2000 	str.w	r2, [r8]
 800b4ac:	e7ec      	b.n	800b488 <_malloc_r+0xb0>
 800b4ae:	4623      	mov	r3, r4
 800b4b0:	6864      	ldr	r4, [r4, #4]
 800b4b2:	e7ac      	b.n	800b40e <_malloc_r+0x36>
 800b4b4:	4634      	mov	r4, r6
 800b4b6:	6876      	ldr	r6, [r6, #4]
 800b4b8:	e7b4      	b.n	800b424 <_malloc_r+0x4c>
 800b4ba:	4613      	mov	r3, r2
 800b4bc:	e7cc      	b.n	800b458 <_malloc_r+0x80>
 800b4be:	230c      	movs	r3, #12
 800b4c0:	603b      	str	r3, [r7, #0]
 800b4c2:	4638      	mov	r0, r7
 800b4c4:	f000 f80e 	bl	800b4e4 <__malloc_unlock>
 800b4c8:	e797      	b.n	800b3fa <_malloc_r+0x22>
 800b4ca:	6025      	str	r5, [r4, #0]
 800b4cc:	e7dc      	b.n	800b488 <_malloc_r+0xb0>
 800b4ce:	605b      	str	r3, [r3, #4]
 800b4d0:	deff      	udf	#255	; 0xff
 800b4d2:	bf00      	nop
 800b4d4:	24000be4 	.word	0x24000be4

0800b4d8 <__malloc_lock>:
 800b4d8:	4801      	ldr	r0, [pc, #4]	; (800b4e0 <__malloc_lock+0x8>)
 800b4da:	f7ff b90a 	b.w	800a6f2 <__retarget_lock_acquire_recursive>
 800b4de:	bf00      	nop
 800b4e0:	24000be0 	.word	0x24000be0

0800b4e4 <__malloc_unlock>:
 800b4e4:	4801      	ldr	r0, [pc, #4]	; (800b4ec <__malloc_unlock+0x8>)
 800b4e6:	f7ff b905 	b.w	800a6f4 <__retarget_lock_release_recursive>
 800b4ea:	bf00      	nop
 800b4ec:	24000be0 	.word	0x24000be0

0800b4f0 <_Balloc>:
 800b4f0:	b570      	push	{r4, r5, r6, lr}
 800b4f2:	69c6      	ldr	r6, [r0, #28]
 800b4f4:	4604      	mov	r4, r0
 800b4f6:	460d      	mov	r5, r1
 800b4f8:	b976      	cbnz	r6, 800b518 <_Balloc+0x28>
 800b4fa:	2010      	movs	r0, #16
 800b4fc:	f7ff ff44 	bl	800b388 <malloc>
 800b500:	4602      	mov	r2, r0
 800b502:	61e0      	str	r0, [r4, #28]
 800b504:	b920      	cbnz	r0, 800b510 <_Balloc+0x20>
 800b506:	4b18      	ldr	r3, [pc, #96]	; (800b568 <_Balloc+0x78>)
 800b508:	4818      	ldr	r0, [pc, #96]	; (800b56c <_Balloc+0x7c>)
 800b50a:	216b      	movs	r1, #107	; 0x6b
 800b50c:	f001 fd48 	bl	800cfa0 <__assert_func>
 800b510:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b514:	6006      	str	r6, [r0, #0]
 800b516:	60c6      	str	r6, [r0, #12]
 800b518:	69e6      	ldr	r6, [r4, #28]
 800b51a:	68f3      	ldr	r3, [r6, #12]
 800b51c:	b183      	cbz	r3, 800b540 <_Balloc+0x50>
 800b51e:	69e3      	ldr	r3, [r4, #28]
 800b520:	68db      	ldr	r3, [r3, #12]
 800b522:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b526:	b9b8      	cbnz	r0, 800b558 <_Balloc+0x68>
 800b528:	2101      	movs	r1, #1
 800b52a:	fa01 f605 	lsl.w	r6, r1, r5
 800b52e:	1d72      	adds	r2, r6, #5
 800b530:	0092      	lsls	r2, r2, #2
 800b532:	4620      	mov	r0, r4
 800b534:	f001 fd52 	bl	800cfdc <_calloc_r>
 800b538:	b160      	cbz	r0, 800b554 <_Balloc+0x64>
 800b53a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b53e:	e00e      	b.n	800b55e <_Balloc+0x6e>
 800b540:	2221      	movs	r2, #33	; 0x21
 800b542:	2104      	movs	r1, #4
 800b544:	4620      	mov	r0, r4
 800b546:	f001 fd49 	bl	800cfdc <_calloc_r>
 800b54a:	69e3      	ldr	r3, [r4, #28]
 800b54c:	60f0      	str	r0, [r6, #12]
 800b54e:	68db      	ldr	r3, [r3, #12]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d1e4      	bne.n	800b51e <_Balloc+0x2e>
 800b554:	2000      	movs	r0, #0
 800b556:	bd70      	pop	{r4, r5, r6, pc}
 800b558:	6802      	ldr	r2, [r0, #0]
 800b55a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b55e:	2300      	movs	r3, #0
 800b560:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b564:	e7f7      	b.n	800b556 <_Balloc+0x66>
 800b566:	bf00      	nop
 800b568:	0800dd8a 	.word	0x0800dd8a
 800b56c:	0800de0a 	.word	0x0800de0a

0800b570 <_Bfree>:
 800b570:	b570      	push	{r4, r5, r6, lr}
 800b572:	69c6      	ldr	r6, [r0, #28]
 800b574:	4605      	mov	r5, r0
 800b576:	460c      	mov	r4, r1
 800b578:	b976      	cbnz	r6, 800b598 <_Bfree+0x28>
 800b57a:	2010      	movs	r0, #16
 800b57c:	f7ff ff04 	bl	800b388 <malloc>
 800b580:	4602      	mov	r2, r0
 800b582:	61e8      	str	r0, [r5, #28]
 800b584:	b920      	cbnz	r0, 800b590 <_Bfree+0x20>
 800b586:	4b09      	ldr	r3, [pc, #36]	; (800b5ac <_Bfree+0x3c>)
 800b588:	4809      	ldr	r0, [pc, #36]	; (800b5b0 <_Bfree+0x40>)
 800b58a:	218f      	movs	r1, #143	; 0x8f
 800b58c:	f001 fd08 	bl	800cfa0 <__assert_func>
 800b590:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b594:	6006      	str	r6, [r0, #0]
 800b596:	60c6      	str	r6, [r0, #12]
 800b598:	b13c      	cbz	r4, 800b5aa <_Bfree+0x3a>
 800b59a:	69eb      	ldr	r3, [r5, #28]
 800b59c:	6862      	ldr	r2, [r4, #4]
 800b59e:	68db      	ldr	r3, [r3, #12]
 800b5a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b5a4:	6021      	str	r1, [r4, #0]
 800b5a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b5aa:	bd70      	pop	{r4, r5, r6, pc}
 800b5ac:	0800dd8a 	.word	0x0800dd8a
 800b5b0:	0800de0a 	.word	0x0800de0a

0800b5b4 <__multadd>:
 800b5b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5b8:	690d      	ldr	r5, [r1, #16]
 800b5ba:	4607      	mov	r7, r0
 800b5bc:	460c      	mov	r4, r1
 800b5be:	461e      	mov	r6, r3
 800b5c0:	f101 0c14 	add.w	ip, r1, #20
 800b5c4:	2000      	movs	r0, #0
 800b5c6:	f8dc 3000 	ldr.w	r3, [ip]
 800b5ca:	b299      	uxth	r1, r3
 800b5cc:	fb02 6101 	mla	r1, r2, r1, r6
 800b5d0:	0c1e      	lsrs	r6, r3, #16
 800b5d2:	0c0b      	lsrs	r3, r1, #16
 800b5d4:	fb02 3306 	mla	r3, r2, r6, r3
 800b5d8:	b289      	uxth	r1, r1
 800b5da:	3001      	adds	r0, #1
 800b5dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b5e0:	4285      	cmp	r5, r0
 800b5e2:	f84c 1b04 	str.w	r1, [ip], #4
 800b5e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b5ea:	dcec      	bgt.n	800b5c6 <__multadd+0x12>
 800b5ec:	b30e      	cbz	r6, 800b632 <__multadd+0x7e>
 800b5ee:	68a3      	ldr	r3, [r4, #8]
 800b5f0:	42ab      	cmp	r3, r5
 800b5f2:	dc19      	bgt.n	800b628 <__multadd+0x74>
 800b5f4:	6861      	ldr	r1, [r4, #4]
 800b5f6:	4638      	mov	r0, r7
 800b5f8:	3101      	adds	r1, #1
 800b5fa:	f7ff ff79 	bl	800b4f0 <_Balloc>
 800b5fe:	4680      	mov	r8, r0
 800b600:	b928      	cbnz	r0, 800b60e <__multadd+0x5a>
 800b602:	4602      	mov	r2, r0
 800b604:	4b0c      	ldr	r3, [pc, #48]	; (800b638 <__multadd+0x84>)
 800b606:	480d      	ldr	r0, [pc, #52]	; (800b63c <__multadd+0x88>)
 800b608:	21ba      	movs	r1, #186	; 0xba
 800b60a:	f001 fcc9 	bl	800cfa0 <__assert_func>
 800b60e:	6922      	ldr	r2, [r4, #16]
 800b610:	3202      	adds	r2, #2
 800b612:	f104 010c 	add.w	r1, r4, #12
 800b616:	0092      	lsls	r2, r2, #2
 800b618:	300c      	adds	r0, #12
 800b61a:	f001 fcab 	bl	800cf74 <memcpy>
 800b61e:	4621      	mov	r1, r4
 800b620:	4638      	mov	r0, r7
 800b622:	f7ff ffa5 	bl	800b570 <_Bfree>
 800b626:	4644      	mov	r4, r8
 800b628:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b62c:	3501      	adds	r5, #1
 800b62e:	615e      	str	r6, [r3, #20]
 800b630:	6125      	str	r5, [r4, #16]
 800b632:	4620      	mov	r0, r4
 800b634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b638:	0800ddf9 	.word	0x0800ddf9
 800b63c:	0800de0a 	.word	0x0800de0a

0800b640 <__s2b>:
 800b640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b644:	460c      	mov	r4, r1
 800b646:	4615      	mov	r5, r2
 800b648:	461f      	mov	r7, r3
 800b64a:	2209      	movs	r2, #9
 800b64c:	3308      	adds	r3, #8
 800b64e:	4606      	mov	r6, r0
 800b650:	fb93 f3f2 	sdiv	r3, r3, r2
 800b654:	2100      	movs	r1, #0
 800b656:	2201      	movs	r2, #1
 800b658:	429a      	cmp	r2, r3
 800b65a:	db09      	blt.n	800b670 <__s2b+0x30>
 800b65c:	4630      	mov	r0, r6
 800b65e:	f7ff ff47 	bl	800b4f0 <_Balloc>
 800b662:	b940      	cbnz	r0, 800b676 <__s2b+0x36>
 800b664:	4602      	mov	r2, r0
 800b666:	4b19      	ldr	r3, [pc, #100]	; (800b6cc <__s2b+0x8c>)
 800b668:	4819      	ldr	r0, [pc, #100]	; (800b6d0 <__s2b+0x90>)
 800b66a:	21d3      	movs	r1, #211	; 0xd3
 800b66c:	f001 fc98 	bl	800cfa0 <__assert_func>
 800b670:	0052      	lsls	r2, r2, #1
 800b672:	3101      	adds	r1, #1
 800b674:	e7f0      	b.n	800b658 <__s2b+0x18>
 800b676:	9b08      	ldr	r3, [sp, #32]
 800b678:	6143      	str	r3, [r0, #20]
 800b67a:	2d09      	cmp	r5, #9
 800b67c:	f04f 0301 	mov.w	r3, #1
 800b680:	6103      	str	r3, [r0, #16]
 800b682:	dd16      	ble.n	800b6b2 <__s2b+0x72>
 800b684:	f104 0909 	add.w	r9, r4, #9
 800b688:	46c8      	mov	r8, r9
 800b68a:	442c      	add	r4, r5
 800b68c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b690:	4601      	mov	r1, r0
 800b692:	3b30      	subs	r3, #48	; 0x30
 800b694:	220a      	movs	r2, #10
 800b696:	4630      	mov	r0, r6
 800b698:	f7ff ff8c 	bl	800b5b4 <__multadd>
 800b69c:	45a0      	cmp	r8, r4
 800b69e:	d1f5      	bne.n	800b68c <__s2b+0x4c>
 800b6a0:	f1a5 0408 	sub.w	r4, r5, #8
 800b6a4:	444c      	add	r4, r9
 800b6a6:	1b2d      	subs	r5, r5, r4
 800b6a8:	1963      	adds	r3, r4, r5
 800b6aa:	42bb      	cmp	r3, r7
 800b6ac:	db04      	blt.n	800b6b8 <__s2b+0x78>
 800b6ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6b2:	340a      	adds	r4, #10
 800b6b4:	2509      	movs	r5, #9
 800b6b6:	e7f6      	b.n	800b6a6 <__s2b+0x66>
 800b6b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b6bc:	4601      	mov	r1, r0
 800b6be:	3b30      	subs	r3, #48	; 0x30
 800b6c0:	220a      	movs	r2, #10
 800b6c2:	4630      	mov	r0, r6
 800b6c4:	f7ff ff76 	bl	800b5b4 <__multadd>
 800b6c8:	e7ee      	b.n	800b6a8 <__s2b+0x68>
 800b6ca:	bf00      	nop
 800b6cc:	0800ddf9 	.word	0x0800ddf9
 800b6d0:	0800de0a 	.word	0x0800de0a

0800b6d4 <__hi0bits>:
 800b6d4:	0c03      	lsrs	r3, r0, #16
 800b6d6:	041b      	lsls	r3, r3, #16
 800b6d8:	b9d3      	cbnz	r3, 800b710 <__hi0bits+0x3c>
 800b6da:	0400      	lsls	r0, r0, #16
 800b6dc:	2310      	movs	r3, #16
 800b6de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b6e2:	bf04      	itt	eq
 800b6e4:	0200      	lsleq	r0, r0, #8
 800b6e6:	3308      	addeq	r3, #8
 800b6e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b6ec:	bf04      	itt	eq
 800b6ee:	0100      	lsleq	r0, r0, #4
 800b6f0:	3304      	addeq	r3, #4
 800b6f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b6f6:	bf04      	itt	eq
 800b6f8:	0080      	lsleq	r0, r0, #2
 800b6fa:	3302      	addeq	r3, #2
 800b6fc:	2800      	cmp	r0, #0
 800b6fe:	db05      	blt.n	800b70c <__hi0bits+0x38>
 800b700:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b704:	f103 0301 	add.w	r3, r3, #1
 800b708:	bf08      	it	eq
 800b70a:	2320      	moveq	r3, #32
 800b70c:	4618      	mov	r0, r3
 800b70e:	4770      	bx	lr
 800b710:	2300      	movs	r3, #0
 800b712:	e7e4      	b.n	800b6de <__hi0bits+0xa>

0800b714 <__lo0bits>:
 800b714:	6803      	ldr	r3, [r0, #0]
 800b716:	f013 0207 	ands.w	r2, r3, #7
 800b71a:	d00c      	beq.n	800b736 <__lo0bits+0x22>
 800b71c:	07d9      	lsls	r1, r3, #31
 800b71e:	d422      	bmi.n	800b766 <__lo0bits+0x52>
 800b720:	079a      	lsls	r2, r3, #30
 800b722:	bf49      	itett	mi
 800b724:	085b      	lsrmi	r3, r3, #1
 800b726:	089b      	lsrpl	r3, r3, #2
 800b728:	6003      	strmi	r3, [r0, #0]
 800b72a:	2201      	movmi	r2, #1
 800b72c:	bf5c      	itt	pl
 800b72e:	6003      	strpl	r3, [r0, #0]
 800b730:	2202      	movpl	r2, #2
 800b732:	4610      	mov	r0, r2
 800b734:	4770      	bx	lr
 800b736:	b299      	uxth	r1, r3
 800b738:	b909      	cbnz	r1, 800b73e <__lo0bits+0x2a>
 800b73a:	0c1b      	lsrs	r3, r3, #16
 800b73c:	2210      	movs	r2, #16
 800b73e:	b2d9      	uxtb	r1, r3
 800b740:	b909      	cbnz	r1, 800b746 <__lo0bits+0x32>
 800b742:	3208      	adds	r2, #8
 800b744:	0a1b      	lsrs	r3, r3, #8
 800b746:	0719      	lsls	r1, r3, #28
 800b748:	bf04      	itt	eq
 800b74a:	091b      	lsreq	r3, r3, #4
 800b74c:	3204      	addeq	r2, #4
 800b74e:	0799      	lsls	r1, r3, #30
 800b750:	bf04      	itt	eq
 800b752:	089b      	lsreq	r3, r3, #2
 800b754:	3202      	addeq	r2, #2
 800b756:	07d9      	lsls	r1, r3, #31
 800b758:	d403      	bmi.n	800b762 <__lo0bits+0x4e>
 800b75a:	085b      	lsrs	r3, r3, #1
 800b75c:	f102 0201 	add.w	r2, r2, #1
 800b760:	d003      	beq.n	800b76a <__lo0bits+0x56>
 800b762:	6003      	str	r3, [r0, #0]
 800b764:	e7e5      	b.n	800b732 <__lo0bits+0x1e>
 800b766:	2200      	movs	r2, #0
 800b768:	e7e3      	b.n	800b732 <__lo0bits+0x1e>
 800b76a:	2220      	movs	r2, #32
 800b76c:	e7e1      	b.n	800b732 <__lo0bits+0x1e>
	...

0800b770 <__i2b>:
 800b770:	b510      	push	{r4, lr}
 800b772:	460c      	mov	r4, r1
 800b774:	2101      	movs	r1, #1
 800b776:	f7ff febb 	bl	800b4f0 <_Balloc>
 800b77a:	4602      	mov	r2, r0
 800b77c:	b928      	cbnz	r0, 800b78a <__i2b+0x1a>
 800b77e:	4b05      	ldr	r3, [pc, #20]	; (800b794 <__i2b+0x24>)
 800b780:	4805      	ldr	r0, [pc, #20]	; (800b798 <__i2b+0x28>)
 800b782:	f240 1145 	movw	r1, #325	; 0x145
 800b786:	f001 fc0b 	bl	800cfa0 <__assert_func>
 800b78a:	2301      	movs	r3, #1
 800b78c:	6144      	str	r4, [r0, #20]
 800b78e:	6103      	str	r3, [r0, #16]
 800b790:	bd10      	pop	{r4, pc}
 800b792:	bf00      	nop
 800b794:	0800ddf9 	.word	0x0800ddf9
 800b798:	0800de0a 	.word	0x0800de0a

0800b79c <__multiply>:
 800b79c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7a0:	4691      	mov	r9, r2
 800b7a2:	690a      	ldr	r2, [r1, #16]
 800b7a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	bfb8      	it	lt
 800b7ac:	460b      	movlt	r3, r1
 800b7ae:	460c      	mov	r4, r1
 800b7b0:	bfbc      	itt	lt
 800b7b2:	464c      	movlt	r4, r9
 800b7b4:	4699      	movlt	r9, r3
 800b7b6:	6927      	ldr	r7, [r4, #16]
 800b7b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b7bc:	68a3      	ldr	r3, [r4, #8]
 800b7be:	6861      	ldr	r1, [r4, #4]
 800b7c0:	eb07 060a 	add.w	r6, r7, sl
 800b7c4:	42b3      	cmp	r3, r6
 800b7c6:	b085      	sub	sp, #20
 800b7c8:	bfb8      	it	lt
 800b7ca:	3101      	addlt	r1, #1
 800b7cc:	f7ff fe90 	bl	800b4f0 <_Balloc>
 800b7d0:	b930      	cbnz	r0, 800b7e0 <__multiply+0x44>
 800b7d2:	4602      	mov	r2, r0
 800b7d4:	4b44      	ldr	r3, [pc, #272]	; (800b8e8 <__multiply+0x14c>)
 800b7d6:	4845      	ldr	r0, [pc, #276]	; (800b8ec <__multiply+0x150>)
 800b7d8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b7dc:	f001 fbe0 	bl	800cfa0 <__assert_func>
 800b7e0:	f100 0514 	add.w	r5, r0, #20
 800b7e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b7e8:	462b      	mov	r3, r5
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	4543      	cmp	r3, r8
 800b7ee:	d321      	bcc.n	800b834 <__multiply+0x98>
 800b7f0:	f104 0314 	add.w	r3, r4, #20
 800b7f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b7f8:	f109 0314 	add.w	r3, r9, #20
 800b7fc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b800:	9202      	str	r2, [sp, #8]
 800b802:	1b3a      	subs	r2, r7, r4
 800b804:	3a15      	subs	r2, #21
 800b806:	f022 0203 	bic.w	r2, r2, #3
 800b80a:	3204      	adds	r2, #4
 800b80c:	f104 0115 	add.w	r1, r4, #21
 800b810:	428f      	cmp	r7, r1
 800b812:	bf38      	it	cc
 800b814:	2204      	movcc	r2, #4
 800b816:	9201      	str	r2, [sp, #4]
 800b818:	9a02      	ldr	r2, [sp, #8]
 800b81a:	9303      	str	r3, [sp, #12]
 800b81c:	429a      	cmp	r2, r3
 800b81e:	d80c      	bhi.n	800b83a <__multiply+0x9e>
 800b820:	2e00      	cmp	r6, #0
 800b822:	dd03      	ble.n	800b82c <__multiply+0x90>
 800b824:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d05b      	beq.n	800b8e4 <__multiply+0x148>
 800b82c:	6106      	str	r6, [r0, #16]
 800b82e:	b005      	add	sp, #20
 800b830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b834:	f843 2b04 	str.w	r2, [r3], #4
 800b838:	e7d8      	b.n	800b7ec <__multiply+0x50>
 800b83a:	f8b3 a000 	ldrh.w	sl, [r3]
 800b83e:	f1ba 0f00 	cmp.w	sl, #0
 800b842:	d024      	beq.n	800b88e <__multiply+0xf2>
 800b844:	f104 0e14 	add.w	lr, r4, #20
 800b848:	46a9      	mov	r9, r5
 800b84a:	f04f 0c00 	mov.w	ip, #0
 800b84e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b852:	f8d9 1000 	ldr.w	r1, [r9]
 800b856:	fa1f fb82 	uxth.w	fp, r2
 800b85a:	b289      	uxth	r1, r1
 800b85c:	fb0a 110b 	mla	r1, sl, fp, r1
 800b860:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b864:	f8d9 2000 	ldr.w	r2, [r9]
 800b868:	4461      	add	r1, ip
 800b86a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b86e:	fb0a c20b 	mla	r2, sl, fp, ip
 800b872:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b876:	b289      	uxth	r1, r1
 800b878:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b87c:	4577      	cmp	r7, lr
 800b87e:	f849 1b04 	str.w	r1, [r9], #4
 800b882:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b886:	d8e2      	bhi.n	800b84e <__multiply+0xb2>
 800b888:	9a01      	ldr	r2, [sp, #4]
 800b88a:	f845 c002 	str.w	ip, [r5, r2]
 800b88e:	9a03      	ldr	r2, [sp, #12]
 800b890:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b894:	3304      	adds	r3, #4
 800b896:	f1b9 0f00 	cmp.w	r9, #0
 800b89a:	d021      	beq.n	800b8e0 <__multiply+0x144>
 800b89c:	6829      	ldr	r1, [r5, #0]
 800b89e:	f104 0c14 	add.w	ip, r4, #20
 800b8a2:	46ae      	mov	lr, r5
 800b8a4:	f04f 0a00 	mov.w	sl, #0
 800b8a8:	f8bc b000 	ldrh.w	fp, [ip]
 800b8ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b8b0:	fb09 220b 	mla	r2, r9, fp, r2
 800b8b4:	4452      	add	r2, sl
 800b8b6:	b289      	uxth	r1, r1
 800b8b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b8bc:	f84e 1b04 	str.w	r1, [lr], #4
 800b8c0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b8c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b8c8:	f8be 1000 	ldrh.w	r1, [lr]
 800b8cc:	fb09 110a 	mla	r1, r9, sl, r1
 800b8d0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b8d4:	4567      	cmp	r7, ip
 800b8d6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b8da:	d8e5      	bhi.n	800b8a8 <__multiply+0x10c>
 800b8dc:	9a01      	ldr	r2, [sp, #4]
 800b8de:	50a9      	str	r1, [r5, r2]
 800b8e0:	3504      	adds	r5, #4
 800b8e2:	e799      	b.n	800b818 <__multiply+0x7c>
 800b8e4:	3e01      	subs	r6, #1
 800b8e6:	e79b      	b.n	800b820 <__multiply+0x84>
 800b8e8:	0800ddf9 	.word	0x0800ddf9
 800b8ec:	0800de0a 	.word	0x0800de0a

0800b8f0 <__pow5mult>:
 800b8f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8f4:	4615      	mov	r5, r2
 800b8f6:	f012 0203 	ands.w	r2, r2, #3
 800b8fa:	4606      	mov	r6, r0
 800b8fc:	460f      	mov	r7, r1
 800b8fe:	d007      	beq.n	800b910 <__pow5mult+0x20>
 800b900:	4c25      	ldr	r4, [pc, #148]	; (800b998 <__pow5mult+0xa8>)
 800b902:	3a01      	subs	r2, #1
 800b904:	2300      	movs	r3, #0
 800b906:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b90a:	f7ff fe53 	bl	800b5b4 <__multadd>
 800b90e:	4607      	mov	r7, r0
 800b910:	10ad      	asrs	r5, r5, #2
 800b912:	d03d      	beq.n	800b990 <__pow5mult+0xa0>
 800b914:	69f4      	ldr	r4, [r6, #28]
 800b916:	b97c      	cbnz	r4, 800b938 <__pow5mult+0x48>
 800b918:	2010      	movs	r0, #16
 800b91a:	f7ff fd35 	bl	800b388 <malloc>
 800b91e:	4602      	mov	r2, r0
 800b920:	61f0      	str	r0, [r6, #28]
 800b922:	b928      	cbnz	r0, 800b930 <__pow5mult+0x40>
 800b924:	4b1d      	ldr	r3, [pc, #116]	; (800b99c <__pow5mult+0xac>)
 800b926:	481e      	ldr	r0, [pc, #120]	; (800b9a0 <__pow5mult+0xb0>)
 800b928:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b92c:	f001 fb38 	bl	800cfa0 <__assert_func>
 800b930:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b934:	6004      	str	r4, [r0, #0]
 800b936:	60c4      	str	r4, [r0, #12]
 800b938:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b93c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b940:	b94c      	cbnz	r4, 800b956 <__pow5mult+0x66>
 800b942:	f240 2171 	movw	r1, #625	; 0x271
 800b946:	4630      	mov	r0, r6
 800b948:	f7ff ff12 	bl	800b770 <__i2b>
 800b94c:	2300      	movs	r3, #0
 800b94e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b952:	4604      	mov	r4, r0
 800b954:	6003      	str	r3, [r0, #0]
 800b956:	f04f 0900 	mov.w	r9, #0
 800b95a:	07eb      	lsls	r3, r5, #31
 800b95c:	d50a      	bpl.n	800b974 <__pow5mult+0x84>
 800b95e:	4639      	mov	r1, r7
 800b960:	4622      	mov	r2, r4
 800b962:	4630      	mov	r0, r6
 800b964:	f7ff ff1a 	bl	800b79c <__multiply>
 800b968:	4639      	mov	r1, r7
 800b96a:	4680      	mov	r8, r0
 800b96c:	4630      	mov	r0, r6
 800b96e:	f7ff fdff 	bl	800b570 <_Bfree>
 800b972:	4647      	mov	r7, r8
 800b974:	106d      	asrs	r5, r5, #1
 800b976:	d00b      	beq.n	800b990 <__pow5mult+0xa0>
 800b978:	6820      	ldr	r0, [r4, #0]
 800b97a:	b938      	cbnz	r0, 800b98c <__pow5mult+0x9c>
 800b97c:	4622      	mov	r2, r4
 800b97e:	4621      	mov	r1, r4
 800b980:	4630      	mov	r0, r6
 800b982:	f7ff ff0b 	bl	800b79c <__multiply>
 800b986:	6020      	str	r0, [r4, #0]
 800b988:	f8c0 9000 	str.w	r9, [r0]
 800b98c:	4604      	mov	r4, r0
 800b98e:	e7e4      	b.n	800b95a <__pow5mult+0x6a>
 800b990:	4638      	mov	r0, r7
 800b992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b996:	bf00      	nop
 800b998:	0800df58 	.word	0x0800df58
 800b99c:	0800dd8a 	.word	0x0800dd8a
 800b9a0:	0800de0a 	.word	0x0800de0a

0800b9a4 <__lshift>:
 800b9a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9a8:	460c      	mov	r4, r1
 800b9aa:	6849      	ldr	r1, [r1, #4]
 800b9ac:	6923      	ldr	r3, [r4, #16]
 800b9ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b9b2:	68a3      	ldr	r3, [r4, #8]
 800b9b4:	4607      	mov	r7, r0
 800b9b6:	4691      	mov	r9, r2
 800b9b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b9bc:	f108 0601 	add.w	r6, r8, #1
 800b9c0:	42b3      	cmp	r3, r6
 800b9c2:	db0b      	blt.n	800b9dc <__lshift+0x38>
 800b9c4:	4638      	mov	r0, r7
 800b9c6:	f7ff fd93 	bl	800b4f0 <_Balloc>
 800b9ca:	4605      	mov	r5, r0
 800b9cc:	b948      	cbnz	r0, 800b9e2 <__lshift+0x3e>
 800b9ce:	4602      	mov	r2, r0
 800b9d0:	4b28      	ldr	r3, [pc, #160]	; (800ba74 <__lshift+0xd0>)
 800b9d2:	4829      	ldr	r0, [pc, #164]	; (800ba78 <__lshift+0xd4>)
 800b9d4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b9d8:	f001 fae2 	bl	800cfa0 <__assert_func>
 800b9dc:	3101      	adds	r1, #1
 800b9de:	005b      	lsls	r3, r3, #1
 800b9e0:	e7ee      	b.n	800b9c0 <__lshift+0x1c>
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	f100 0114 	add.w	r1, r0, #20
 800b9e8:	f100 0210 	add.w	r2, r0, #16
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	4553      	cmp	r3, sl
 800b9f0:	db33      	blt.n	800ba5a <__lshift+0xb6>
 800b9f2:	6920      	ldr	r0, [r4, #16]
 800b9f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b9f8:	f104 0314 	add.w	r3, r4, #20
 800b9fc:	f019 091f 	ands.w	r9, r9, #31
 800ba00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ba04:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ba08:	d02b      	beq.n	800ba62 <__lshift+0xbe>
 800ba0a:	f1c9 0e20 	rsb	lr, r9, #32
 800ba0e:	468a      	mov	sl, r1
 800ba10:	2200      	movs	r2, #0
 800ba12:	6818      	ldr	r0, [r3, #0]
 800ba14:	fa00 f009 	lsl.w	r0, r0, r9
 800ba18:	4310      	orrs	r0, r2
 800ba1a:	f84a 0b04 	str.w	r0, [sl], #4
 800ba1e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba22:	459c      	cmp	ip, r3
 800ba24:	fa22 f20e 	lsr.w	r2, r2, lr
 800ba28:	d8f3      	bhi.n	800ba12 <__lshift+0x6e>
 800ba2a:	ebac 0304 	sub.w	r3, ip, r4
 800ba2e:	3b15      	subs	r3, #21
 800ba30:	f023 0303 	bic.w	r3, r3, #3
 800ba34:	3304      	adds	r3, #4
 800ba36:	f104 0015 	add.w	r0, r4, #21
 800ba3a:	4584      	cmp	ip, r0
 800ba3c:	bf38      	it	cc
 800ba3e:	2304      	movcc	r3, #4
 800ba40:	50ca      	str	r2, [r1, r3]
 800ba42:	b10a      	cbz	r2, 800ba48 <__lshift+0xa4>
 800ba44:	f108 0602 	add.w	r6, r8, #2
 800ba48:	3e01      	subs	r6, #1
 800ba4a:	4638      	mov	r0, r7
 800ba4c:	612e      	str	r6, [r5, #16]
 800ba4e:	4621      	mov	r1, r4
 800ba50:	f7ff fd8e 	bl	800b570 <_Bfree>
 800ba54:	4628      	mov	r0, r5
 800ba56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba5a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ba5e:	3301      	adds	r3, #1
 800ba60:	e7c5      	b.n	800b9ee <__lshift+0x4a>
 800ba62:	3904      	subs	r1, #4
 800ba64:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba68:	f841 2f04 	str.w	r2, [r1, #4]!
 800ba6c:	459c      	cmp	ip, r3
 800ba6e:	d8f9      	bhi.n	800ba64 <__lshift+0xc0>
 800ba70:	e7ea      	b.n	800ba48 <__lshift+0xa4>
 800ba72:	bf00      	nop
 800ba74:	0800ddf9 	.word	0x0800ddf9
 800ba78:	0800de0a 	.word	0x0800de0a

0800ba7c <__mcmp>:
 800ba7c:	b530      	push	{r4, r5, lr}
 800ba7e:	6902      	ldr	r2, [r0, #16]
 800ba80:	690c      	ldr	r4, [r1, #16]
 800ba82:	1b12      	subs	r2, r2, r4
 800ba84:	d10e      	bne.n	800baa4 <__mcmp+0x28>
 800ba86:	f100 0314 	add.w	r3, r0, #20
 800ba8a:	3114      	adds	r1, #20
 800ba8c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ba90:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ba94:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ba98:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ba9c:	42a5      	cmp	r5, r4
 800ba9e:	d003      	beq.n	800baa8 <__mcmp+0x2c>
 800baa0:	d305      	bcc.n	800baae <__mcmp+0x32>
 800baa2:	2201      	movs	r2, #1
 800baa4:	4610      	mov	r0, r2
 800baa6:	bd30      	pop	{r4, r5, pc}
 800baa8:	4283      	cmp	r3, r0
 800baaa:	d3f3      	bcc.n	800ba94 <__mcmp+0x18>
 800baac:	e7fa      	b.n	800baa4 <__mcmp+0x28>
 800baae:	f04f 32ff 	mov.w	r2, #4294967295
 800bab2:	e7f7      	b.n	800baa4 <__mcmp+0x28>

0800bab4 <__mdiff>:
 800bab4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bab8:	460c      	mov	r4, r1
 800baba:	4606      	mov	r6, r0
 800babc:	4611      	mov	r1, r2
 800babe:	4620      	mov	r0, r4
 800bac0:	4690      	mov	r8, r2
 800bac2:	f7ff ffdb 	bl	800ba7c <__mcmp>
 800bac6:	1e05      	subs	r5, r0, #0
 800bac8:	d110      	bne.n	800baec <__mdiff+0x38>
 800baca:	4629      	mov	r1, r5
 800bacc:	4630      	mov	r0, r6
 800bace:	f7ff fd0f 	bl	800b4f0 <_Balloc>
 800bad2:	b930      	cbnz	r0, 800bae2 <__mdiff+0x2e>
 800bad4:	4b3a      	ldr	r3, [pc, #232]	; (800bbc0 <__mdiff+0x10c>)
 800bad6:	4602      	mov	r2, r0
 800bad8:	f240 2137 	movw	r1, #567	; 0x237
 800badc:	4839      	ldr	r0, [pc, #228]	; (800bbc4 <__mdiff+0x110>)
 800bade:	f001 fa5f 	bl	800cfa0 <__assert_func>
 800bae2:	2301      	movs	r3, #1
 800bae4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bae8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baec:	bfa4      	itt	ge
 800baee:	4643      	movge	r3, r8
 800baf0:	46a0      	movge	r8, r4
 800baf2:	4630      	mov	r0, r6
 800baf4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800baf8:	bfa6      	itte	ge
 800bafa:	461c      	movge	r4, r3
 800bafc:	2500      	movge	r5, #0
 800bafe:	2501      	movlt	r5, #1
 800bb00:	f7ff fcf6 	bl	800b4f0 <_Balloc>
 800bb04:	b920      	cbnz	r0, 800bb10 <__mdiff+0x5c>
 800bb06:	4b2e      	ldr	r3, [pc, #184]	; (800bbc0 <__mdiff+0x10c>)
 800bb08:	4602      	mov	r2, r0
 800bb0a:	f240 2145 	movw	r1, #581	; 0x245
 800bb0e:	e7e5      	b.n	800badc <__mdiff+0x28>
 800bb10:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bb14:	6926      	ldr	r6, [r4, #16]
 800bb16:	60c5      	str	r5, [r0, #12]
 800bb18:	f104 0914 	add.w	r9, r4, #20
 800bb1c:	f108 0514 	add.w	r5, r8, #20
 800bb20:	f100 0e14 	add.w	lr, r0, #20
 800bb24:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bb28:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bb2c:	f108 0210 	add.w	r2, r8, #16
 800bb30:	46f2      	mov	sl, lr
 800bb32:	2100      	movs	r1, #0
 800bb34:	f859 3b04 	ldr.w	r3, [r9], #4
 800bb38:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bb3c:	fa11 f88b 	uxtah	r8, r1, fp
 800bb40:	b299      	uxth	r1, r3
 800bb42:	0c1b      	lsrs	r3, r3, #16
 800bb44:	eba8 0801 	sub.w	r8, r8, r1
 800bb48:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bb4c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bb50:	fa1f f888 	uxth.w	r8, r8
 800bb54:	1419      	asrs	r1, r3, #16
 800bb56:	454e      	cmp	r6, r9
 800bb58:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bb5c:	f84a 3b04 	str.w	r3, [sl], #4
 800bb60:	d8e8      	bhi.n	800bb34 <__mdiff+0x80>
 800bb62:	1b33      	subs	r3, r6, r4
 800bb64:	3b15      	subs	r3, #21
 800bb66:	f023 0303 	bic.w	r3, r3, #3
 800bb6a:	3304      	adds	r3, #4
 800bb6c:	3415      	adds	r4, #21
 800bb6e:	42a6      	cmp	r6, r4
 800bb70:	bf38      	it	cc
 800bb72:	2304      	movcc	r3, #4
 800bb74:	441d      	add	r5, r3
 800bb76:	4473      	add	r3, lr
 800bb78:	469e      	mov	lr, r3
 800bb7a:	462e      	mov	r6, r5
 800bb7c:	4566      	cmp	r6, ip
 800bb7e:	d30e      	bcc.n	800bb9e <__mdiff+0xea>
 800bb80:	f10c 0203 	add.w	r2, ip, #3
 800bb84:	1b52      	subs	r2, r2, r5
 800bb86:	f022 0203 	bic.w	r2, r2, #3
 800bb8a:	3d03      	subs	r5, #3
 800bb8c:	45ac      	cmp	ip, r5
 800bb8e:	bf38      	it	cc
 800bb90:	2200      	movcc	r2, #0
 800bb92:	4413      	add	r3, r2
 800bb94:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bb98:	b17a      	cbz	r2, 800bbba <__mdiff+0x106>
 800bb9a:	6107      	str	r7, [r0, #16]
 800bb9c:	e7a4      	b.n	800bae8 <__mdiff+0x34>
 800bb9e:	f856 8b04 	ldr.w	r8, [r6], #4
 800bba2:	fa11 f288 	uxtah	r2, r1, r8
 800bba6:	1414      	asrs	r4, r2, #16
 800bba8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bbac:	b292      	uxth	r2, r2
 800bbae:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bbb2:	f84e 2b04 	str.w	r2, [lr], #4
 800bbb6:	1421      	asrs	r1, r4, #16
 800bbb8:	e7e0      	b.n	800bb7c <__mdiff+0xc8>
 800bbba:	3f01      	subs	r7, #1
 800bbbc:	e7ea      	b.n	800bb94 <__mdiff+0xe0>
 800bbbe:	bf00      	nop
 800bbc0:	0800ddf9 	.word	0x0800ddf9
 800bbc4:	0800de0a 	.word	0x0800de0a

0800bbc8 <__ulp>:
 800bbc8:	b082      	sub	sp, #8
 800bbca:	ed8d 0b00 	vstr	d0, [sp]
 800bbce:	9a01      	ldr	r2, [sp, #4]
 800bbd0:	4b0f      	ldr	r3, [pc, #60]	; (800bc10 <__ulp+0x48>)
 800bbd2:	4013      	ands	r3, r2
 800bbd4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	dc08      	bgt.n	800bbee <__ulp+0x26>
 800bbdc:	425b      	negs	r3, r3
 800bbde:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800bbe2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bbe6:	da04      	bge.n	800bbf2 <__ulp+0x2a>
 800bbe8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bbec:	4113      	asrs	r3, r2
 800bbee:	2200      	movs	r2, #0
 800bbf0:	e008      	b.n	800bc04 <__ulp+0x3c>
 800bbf2:	f1a2 0314 	sub.w	r3, r2, #20
 800bbf6:	2b1e      	cmp	r3, #30
 800bbf8:	bfda      	itte	le
 800bbfa:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800bbfe:	40da      	lsrle	r2, r3
 800bc00:	2201      	movgt	r2, #1
 800bc02:	2300      	movs	r3, #0
 800bc04:	4619      	mov	r1, r3
 800bc06:	4610      	mov	r0, r2
 800bc08:	ec41 0b10 	vmov	d0, r0, r1
 800bc0c:	b002      	add	sp, #8
 800bc0e:	4770      	bx	lr
 800bc10:	7ff00000 	.word	0x7ff00000

0800bc14 <__b2d>:
 800bc14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc18:	6906      	ldr	r6, [r0, #16]
 800bc1a:	f100 0814 	add.w	r8, r0, #20
 800bc1e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800bc22:	1f37      	subs	r7, r6, #4
 800bc24:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bc28:	4610      	mov	r0, r2
 800bc2a:	f7ff fd53 	bl	800b6d4 <__hi0bits>
 800bc2e:	f1c0 0320 	rsb	r3, r0, #32
 800bc32:	280a      	cmp	r0, #10
 800bc34:	600b      	str	r3, [r1, #0]
 800bc36:	491b      	ldr	r1, [pc, #108]	; (800bca4 <__b2d+0x90>)
 800bc38:	dc15      	bgt.n	800bc66 <__b2d+0x52>
 800bc3a:	f1c0 0c0b 	rsb	ip, r0, #11
 800bc3e:	fa22 f30c 	lsr.w	r3, r2, ip
 800bc42:	45b8      	cmp	r8, r7
 800bc44:	ea43 0501 	orr.w	r5, r3, r1
 800bc48:	bf34      	ite	cc
 800bc4a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bc4e:	2300      	movcs	r3, #0
 800bc50:	3015      	adds	r0, #21
 800bc52:	fa02 f000 	lsl.w	r0, r2, r0
 800bc56:	fa23 f30c 	lsr.w	r3, r3, ip
 800bc5a:	4303      	orrs	r3, r0
 800bc5c:	461c      	mov	r4, r3
 800bc5e:	ec45 4b10 	vmov	d0, r4, r5
 800bc62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc66:	45b8      	cmp	r8, r7
 800bc68:	bf3a      	itte	cc
 800bc6a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bc6e:	f1a6 0708 	subcc.w	r7, r6, #8
 800bc72:	2300      	movcs	r3, #0
 800bc74:	380b      	subs	r0, #11
 800bc76:	d012      	beq.n	800bc9e <__b2d+0x8a>
 800bc78:	f1c0 0120 	rsb	r1, r0, #32
 800bc7c:	fa23 f401 	lsr.w	r4, r3, r1
 800bc80:	4082      	lsls	r2, r0
 800bc82:	4322      	orrs	r2, r4
 800bc84:	4547      	cmp	r7, r8
 800bc86:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800bc8a:	bf8c      	ite	hi
 800bc8c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800bc90:	2200      	movls	r2, #0
 800bc92:	4083      	lsls	r3, r0
 800bc94:	40ca      	lsrs	r2, r1
 800bc96:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bc9a:	4313      	orrs	r3, r2
 800bc9c:	e7de      	b.n	800bc5c <__b2d+0x48>
 800bc9e:	ea42 0501 	orr.w	r5, r2, r1
 800bca2:	e7db      	b.n	800bc5c <__b2d+0x48>
 800bca4:	3ff00000 	.word	0x3ff00000

0800bca8 <__d2b>:
 800bca8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bcac:	460f      	mov	r7, r1
 800bcae:	2101      	movs	r1, #1
 800bcb0:	ec59 8b10 	vmov	r8, r9, d0
 800bcb4:	4616      	mov	r6, r2
 800bcb6:	f7ff fc1b 	bl	800b4f0 <_Balloc>
 800bcba:	4604      	mov	r4, r0
 800bcbc:	b930      	cbnz	r0, 800bccc <__d2b+0x24>
 800bcbe:	4602      	mov	r2, r0
 800bcc0:	4b24      	ldr	r3, [pc, #144]	; (800bd54 <__d2b+0xac>)
 800bcc2:	4825      	ldr	r0, [pc, #148]	; (800bd58 <__d2b+0xb0>)
 800bcc4:	f240 310f 	movw	r1, #783	; 0x30f
 800bcc8:	f001 f96a 	bl	800cfa0 <__assert_func>
 800bccc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bcd0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bcd4:	bb2d      	cbnz	r5, 800bd22 <__d2b+0x7a>
 800bcd6:	9301      	str	r3, [sp, #4]
 800bcd8:	f1b8 0300 	subs.w	r3, r8, #0
 800bcdc:	d026      	beq.n	800bd2c <__d2b+0x84>
 800bcde:	4668      	mov	r0, sp
 800bce0:	9300      	str	r3, [sp, #0]
 800bce2:	f7ff fd17 	bl	800b714 <__lo0bits>
 800bce6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bcea:	b1e8      	cbz	r0, 800bd28 <__d2b+0x80>
 800bcec:	f1c0 0320 	rsb	r3, r0, #32
 800bcf0:	fa02 f303 	lsl.w	r3, r2, r3
 800bcf4:	430b      	orrs	r3, r1
 800bcf6:	40c2      	lsrs	r2, r0
 800bcf8:	6163      	str	r3, [r4, #20]
 800bcfa:	9201      	str	r2, [sp, #4]
 800bcfc:	9b01      	ldr	r3, [sp, #4]
 800bcfe:	61a3      	str	r3, [r4, #24]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	bf14      	ite	ne
 800bd04:	2202      	movne	r2, #2
 800bd06:	2201      	moveq	r2, #1
 800bd08:	6122      	str	r2, [r4, #16]
 800bd0a:	b1bd      	cbz	r5, 800bd3c <__d2b+0x94>
 800bd0c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bd10:	4405      	add	r5, r0
 800bd12:	603d      	str	r5, [r7, #0]
 800bd14:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bd18:	6030      	str	r0, [r6, #0]
 800bd1a:	4620      	mov	r0, r4
 800bd1c:	b003      	add	sp, #12
 800bd1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd26:	e7d6      	b.n	800bcd6 <__d2b+0x2e>
 800bd28:	6161      	str	r1, [r4, #20]
 800bd2a:	e7e7      	b.n	800bcfc <__d2b+0x54>
 800bd2c:	a801      	add	r0, sp, #4
 800bd2e:	f7ff fcf1 	bl	800b714 <__lo0bits>
 800bd32:	9b01      	ldr	r3, [sp, #4]
 800bd34:	6163      	str	r3, [r4, #20]
 800bd36:	3020      	adds	r0, #32
 800bd38:	2201      	movs	r2, #1
 800bd3a:	e7e5      	b.n	800bd08 <__d2b+0x60>
 800bd3c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bd40:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bd44:	6038      	str	r0, [r7, #0]
 800bd46:	6918      	ldr	r0, [r3, #16]
 800bd48:	f7ff fcc4 	bl	800b6d4 <__hi0bits>
 800bd4c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bd50:	e7e2      	b.n	800bd18 <__d2b+0x70>
 800bd52:	bf00      	nop
 800bd54:	0800ddf9 	.word	0x0800ddf9
 800bd58:	0800de0a 	.word	0x0800de0a

0800bd5c <__ratio>:
 800bd5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd60:	4688      	mov	r8, r1
 800bd62:	4669      	mov	r1, sp
 800bd64:	4681      	mov	r9, r0
 800bd66:	f7ff ff55 	bl	800bc14 <__b2d>
 800bd6a:	a901      	add	r1, sp, #4
 800bd6c:	4640      	mov	r0, r8
 800bd6e:	ec55 4b10 	vmov	r4, r5, d0
 800bd72:	ee10 aa10 	vmov	sl, s0
 800bd76:	f7ff ff4d 	bl	800bc14 <__b2d>
 800bd7a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800bd7e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800bd82:	1ad2      	subs	r2, r2, r3
 800bd84:	e9dd 3100 	ldrd	r3, r1, [sp]
 800bd88:	1a5b      	subs	r3, r3, r1
 800bd8a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800bd8e:	ec57 6b10 	vmov	r6, r7, d0
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	bfd6      	itet	le
 800bd96:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bd9a:	462a      	movgt	r2, r5
 800bd9c:	463a      	movle	r2, r7
 800bd9e:	46ab      	mov	fp, r5
 800bda0:	bfd6      	itet	le
 800bda2:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800bda6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800bdaa:	ee00 3a90 	vmovle	s1, r3
 800bdae:	ec4b ab17 	vmov	d7, sl, fp
 800bdb2:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800bdb6:	b003      	add	sp, #12
 800bdb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bdbc <__copybits>:
 800bdbc:	3901      	subs	r1, #1
 800bdbe:	b570      	push	{r4, r5, r6, lr}
 800bdc0:	1149      	asrs	r1, r1, #5
 800bdc2:	6914      	ldr	r4, [r2, #16]
 800bdc4:	3101      	adds	r1, #1
 800bdc6:	f102 0314 	add.w	r3, r2, #20
 800bdca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bdce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bdd2:	1f05      	subs	r5, r0, #4
 800bdd4:	42a3      	cmp	r3, r4
 800bdd6:	d30c      	bcc.n	800bdf2 <__copybits+0x36>
 800bdd8:	1aa3      	subs	r3, r4, r2
 800bdda:	3b11      	subs	r3, #17
 800bddc:	f023 0303 	bic.w	r3, r3, #3
 800bde0:	3211      	adds	r2, #17
 800bde2:	42a2      	cmp	r2, r4
 800bde4:	bf88      	it	hi
 800bde6:	2300      	movhi	r3, #0
 800bde8:	4418      	add	r0, r3
 800bdea:	2300      	movs	r3, #0
 800bdec:	4288      	cmp	r0, r1
 800bdee:	d305      	bcc.n	800bdfc <__copybits+0x40>
 800bdf0:	bd70      	pop	{r4, r5, r6, pc}
 800bdf2:	f853 6b04 	ldr.w	r6, [r3], #4
 800bdf6:	f845 6f04 	str.w	r6, [r5, #4]!
 800bdfa:	e7eb      	b.n	800bdd4 <__copybits+0x18>
 800bdfc:	f840 3b04 	str.w	r3, [r0], #4
 800be00:	e7f4      	b.n	800bdec <__copybits+0x30>

0800be02 <__any_on>:
 800be02:	f100 0214 	add.w	r2, r0, #20
 800be06:	6900      	ldr	r0, [r0, #16]
 800be08:	114b      	asrs	r3, r1, #5
 800be0a:	4298      	cmp	r0, r3
 800be0c:	b510      	push	{r4, lr}
 800be0e:	db11      	blt.n	800be34 <__any_on+0x32>
 800be10:	dd0a      	ble.n	800be28 <__any_on+0x26>
 800be12:	f011 011f 	ands.w	r1, r1, #31
 800be16:	d007      	beq.n	800be28 <__any_on+0x26>
 800be18:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800be1c:	fa24 f001 	lsr.w	r0, r4, r1
 800be20:	fa00 f101 	lsl.w	r1, r0, r1
 800be24:	428c      	cmp	r4, r1
 800be26:	d10b      	bne.n	800be40 <__any_on+0x3e>
 800be28:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800be2c:	4293      	cmp	r3, r2
 800be2e:	d803      	bhi.n	800be38 <__any_on+0x36>
 800be30:	2000      	movs	r0, #0
 800be32:	bd10      	pop	{r4, pc}
 800be34:	4603      	mov	r3, r0
 800be36:	e7f7      	b.n	800be28 <__any_on+0x26>
 800be38:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800be3c:	2900      	cmp	r1, #0
 800be3e:	d0f5      	beq.n	800be2c <__any_on+0x2a>
 800be40:	2001      	movs	r0, #1
 800be42:	e7f6      	b.n	800be32 <__any_on+0x30>

0800be44 <sulp>:
 800be44:	b570      	push	{r4, r5, r6, lr}
 800be46:	4604      	mov	r4, r0
 800be48:	460d      	mov	r5, r1
 800be4a:	4616      	mov	r6, r2
 800be4c:	ec45 4b10 	vmov	d0, r4, r5
 800be50:	f7ff feba 	bl	800bbc8 <__ulp>
 800be54:	b17e      	cbz	r6, 800be76 <sulp+0x32>
 800be56:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800be5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800be5e:	2b00      	cmp	r3, #0
 800be60:	dd09      	ble.n	800be76 <sulp+0x32>
 800be62:	051b      	lsls	r3, r3, #20
 800be64:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800be68:	2000      	movs	r0, #0
 800be6a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800be6e:	ec41 0b17 	vmov	d7, r0, r1
 800be72:	ee20 0b07 	vmul.f64	d0, d0, d7
 800be76:	bd70      	pop	{r4, r5, r6, pc}

0800be78 <_strtod_l>:
 800be78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be7c:	ed2d 8b0e 	vpush	{d8-d14}
 800be80:	b097      	sub	sp, #92	; 0x5c
 800be82:	4604      	mov	r4, r0
 800be84:	920d      	str	r2, [sp, #52]	; 0x34
 800be86:	2200      	movs	r2, #0
 800be88:	9212      	str	r2, [sp, #72]	; 0x48
 800be8a:	468a      	mov	sl, r1
 800be8c:	f04f 0800 	mov.w	r8, #0
 800be90:	f04f 0900 	mov.w	r9, #0
 800be94:	460a      	mov	r2, r1
 800be96:	9211      	str	r2, [sp, #68]	; 0x44
 800be98:	7811      	ldrb	r1, [r2, #0]
 800be9a:	292b      	cmp	r1, #43	; 0x2b
 800be9c:	d04c      	beq.n	800bf38 <_strtod_l+0xc0>
 800be9e:	d839      	bhi.n	800bf14 <_strtod_l+0x9c>
 800bea0:	290d      	cmp	r1, #13
 800bea2:	d833      	bhi.n	800bf0c <_strtod_l+0x94>
 800bea4:	2908      	cmp	r1, #8
 800bea6:	d833      	bhi.n	800bf10 <_strtod_l+0x98>
 800bea8:	2900      	cmp	r1, #0
 800beaa:	d03c      	beq.n	800bf26 <_strtod_l+0xae>
 800beac:	2200      	movs	r2, #0
 800beae:	9208      	str	r2, [sp, #32]
 800beb0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800beb2:	7832      	ldrb	r2, [r6, #0]
 800beb4:	2a30      	cmp	r2, #48	; 0x30
 800beb6:	f040 80b8 	bne.w	800c02a <_strtod_l+0x1b2>
 800beba:	7872      	ldrb	r2, [r6, #1]
 800bebc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800bec0:	2a58      	cmp	r2, #88	; 0x58
 800bec2:	d170      	bne.n	800bfa6 <_strtod_l+0x12e>
 800bec4:	9302      	str	r3, [sp, #8]
 800bec6:	9b08      	ldr	r3, [sp, #32]
 800bec8:	9301      	str	r3, [sp, #4]
 800beca:	ab12      	add	r3, sp, #72	; 0x48
 800becc:	9300      	str	r3, [sp, #0]
 800bece:	4a91      	ldr	r2, [pc, #580]	; (800c114 <_strtod_l+0x29c>)
 800bed0:	ab13      	add	r3, sp, #76	; 0x4c
 800bed2:	a911      	add	r1, sp, #68	; 0x44
 800bed4:	4620      	mov	r0, r4
 800bed6:	f001 f8ff 	bl	800d0d8 <__gethex>
 800beda:	f010 070f 	ands.w	r7, r0, #15
 800bede:	4605      	mov	r5, r0
 800bee0:	d005      	beq.n	800beee <_strtod_l+0x76>
 800bee2:	2f06      	cmp	r7, #6
 800bee4:	d12a      	bne.n	800bf3c <_strtod_l+0xc4>
 800bee6:	3601      	adds	r6, #1
 800bee8:	2300      	movs	r3, #0
 800beea:	9611      	str	r6, [sp, #68]	; 0x44
 800beec:	9308      	str	r3, [sp, #32]
 800beee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	f040 8555 	bne.w	800c9a0 <_strtod_l+0xb28>
 800bef6:	9b08      	ldr	r3, [sp, #32]
 800bef8:	ec49 8b10 	vmov	d0, r8, r9
 800befc:	b1cb      	cbz	r3, 800bf32 <_strtod_l+0xba>
 800befe:	eeb1 0b40 	vneg.f64	d0, d0
 800bf02:	b017      	add	sp, #92	; 0x5c
 800bf04:	ecbd 8b0e 	vpop	{d8-d14}
 800bf08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf0c:	2920      	cmp	r1, #32
 800bf0e:	d1cd      	bne.n	800beac <_strtod_l+0x34>
 800bf10:	3201      	adds	r2, #1
 800bf12:	e7c0      	b.n	800be96 <_strtod_l+0x1e>
 800bf14:	292d      	cmp	r1, #45	; 0x2d
 800bf16:	d1c9      	bne.n	800beac <_strtod_l+0x34>
 800bf18:	2101      	movs	r1, #1
 800bf1a:	9108      	str	r1, [sp, #32]
 800bf1c:	1c51      	adds	r1, r2, #1
 800bf1e:	9111      	str	r1, [sp, #68]	; 0x44
 800bf20:	7852      	ldrb	r2, [r2, #1]
 800bf22:	2a00      	cmp	r2, #0
 800bf24:	d1c4      	bne.n	800beb0 <_strtod_l+0x38>
 800bf26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bf28:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	f040 8535 	bne.w	800c99c <_strtod_l+0xb24>
 800bf32:	ec49 8b10 	vmov	d0, r8, r9
 800bf36:	e7e4      	b.n	800bf02 <_strtod_l+0x8a>
 800bf38:	2100      	movs	r1, #0
 800bf3a:	e7ee      	b.n	800bf1a <_strtod_l+0xa2>
 800bf3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bf3e:	b13a      	cbz	r2, 800bf50 <_strtod_l+0xd8>
 800bf40:	2135      	movs	r1, #53	; 0x35
 800bf42:	a814      	add	r0, sp, #80	; 0x50
 800bf44:	f7ff ff3a 	bl	800bdbc <__copybits>
 800bf48:	9912      	ldr	r1, [sp, #72]	; 0x48
 800bf4a:	4620      	mov	r0, r4
 800bf4c:	f7ff fb10 	bl	800b570 <_Bfree>
 800bf50:	1e7b      	subs	r3, r7, #1
 800bf52:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bf54:	2b04      	cmp	r3, #4
 800bf56:	d806      	bhi.n	800bf66 <_strtod_l+0xee>
 800bf58:	e8df f003 	tbb	[pc, r3]
 800bf5c:	201d0314 	.word	0x201d0314
 800bf60:	14          	.byte	0x14
 800bf61:	00          	.byte	0x00
 800bf62:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800bf66:	05eb      	lsls	r3, r5, #23
 800bf68:	bf48      	it	mi
 800bf6a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800bf6e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bf72:	0d1b      	lsrs	r3, r3, #20
 800bf74:	051b      	lsls	r3, r3, #20
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d1b9      	bne.n	800beee <_strtod_l+0x76>
 800bf7a:	f7fe fb8f 	bl	800a69c <__errno>
 800bf7e:	2322      	movs	r3, #34	; 0x22
 800bf80:	6003      	str	r3, [r0, #0]
 800bf82:	e7b4      	b.n	800beee <_strtod_l+0x76>
 800bf84:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800bf88:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800bf8c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bf90:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800bf94:	e7e7      	b.n	800bf66 <_strtod_l+0xee>
 800bf96:	f8df 9184 	ldr.w	r9, [pc, #388]	; 800c11c <_strtod_l+0x2a4>
 800bf9a:	e7e4      	b.n	800bf66 <_strtod_l+0xee>
 800bf9c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800bfa0:	f04f 38ff 	mov.w	r8, #4294967295
 800bfa4:	e7df      	b.n	800bf66 <_strtod_l+0xee>
 800bfa6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bfa8:	1c5a      	adds	r2, r3, #1
 800bfaa:	9211      	str	r2, [sp, #68]	; 0x44
 800bfac:	785b      	ldrb	r3, [r3, #1]
 800bfae:	2b30      	cmp	r3, #48	; 0x30
 800bfb0:	d0f9      	beq.n	800bfa6 <_strtod_l+0x12e>
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d09b      	beq.n	800beee <_strtod_l+0x76>
 800bfb6:	2301      	movs	r3, #1
 800bfb8:	9306      	str	r3, [sp, #24]
 800bfba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bfbc:	9309      	str	r3, [sp, #36]	; 0x24
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	9305      	str	r3, [sp, #20]
 800bfc2:	9307      	str	r3, [sp, #28]
 800bfc4:	461e      	mov	r6, r3
 800bfc6:	220a      	movs	r2, #10
 800bfc8:	9811      	ldr	r0, [sp, #68]	; 0x44
 800bfca:	7805      	ldrb	r5, [r0, #0]
 800bfcc:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800bfd0:	b2d9      	uxtb	r1, r3
 800bfd2:	2909      	cmp	r1, #9
 800bfd4:	d92b      	bls.n	800c02e <_strtod_l+0x1b6>
 800bfd6:	4950      	ldr	r1, [pc, #320]	; (800c118 <_strtod_l+0x2a0>)
 800bfd8:	2201      	movs	r2, #1
 800bfda:	f000 ffa9 	bl	800cf30 <strncmp>
 800bfde:	2800      	cmp	r0, #0
 800bfe0:	d035      	beq.n	800c04e <_strtod_l+0x1d6>
 800bfe2:	2000      	movs	r0, #0
 800bfe4:	462a      	mov	r2, r5
 800bfe6:	4633      	mov	r3, r6
 800bfe8:	4683      	mov	fp, r0
 800bfea:	4601      	mov	r1, r0
 800bfec:	2a65      	cmp	r2, #101	; 0x65
 800bfee:	d001      	beq.n	800bff4 <_strtod_l+0x17c>
 800bff0:	2a45      	cmp	r2, #69	; 0x45
 800bff2:	d118      	bne.n	800c026 <_strtod_l+0x1ae>
 800bff4:	b91b      	cbnz	r3, 800bffe <_strtod_l+0x186>
 800bff6:	9b06      	ldr	r3, [sp, #24]
 800bff8:	4303      	orrs	r3, r0
 800bffa:	d094      	beq.n	800bf26 <_strtod_l+0xae>
 800bffc:	2300      	movs	r3, #0
 800bffe:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 800c002:	f10a 0201 	add.w	r2, sl, #1
 800c006:	9211      	str	r2, [sp, #68]	; 0x44
 800c008:	f89a 2001 	ldrb.w	r2, [sl, #1]
 800c00c:	2a2b      	cmp	r2, #43	; 0x2b
 800c00e:	d075      	beq.n	800c0fc <_strtod_l+0x284>
 800c010:	2a2d      	cmp	r2, #45	; 0x2d
 800c012:	d07b      	beq.n	800c10c <_strtod_l+0x294>
 800c014:	f04f 0e00 	mov.w	lr, #0
 800c018:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800c01c:	2d09      	cmp	r5, #9
 800c01e:	f240 8083 	bls.w	800c128 <_strtod_l+0x2b0>
 800c022:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800c026:	2500      	movs	r5, #0
 800c028:	e09e      	b.n	800c168 <_strtod_l+0x2f0>
 800c02a:	2300      	movs	r3, #0
 800c02c:	e7c4      	b.n	800bfb8 <_strtod_l+0x140>
 800c02e:	2e08      	cmp	r6, #8
 800c030:	bfd5      	itete	le
 800c032:	9907      	ldrle	r1, [sp, #28]
 800c034:	9905      	ldrgt	r1, [sp, #20]
 800c036:	fb02 3301 	mlale	r3, r2, r1, r3
 800c03a:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c03e:	f100 0001 	add.w	r0, r0, #1
 800c042:	bfd4      	ite	le
 800c044:	9307      	strle	r3, [sp, #28]
 800c046:	9305      	strgt	r3, [sp, #20]
 800c048:	3601      	adds	r6, #1
 800c04a:	9011      	str	r0, [sp, #68]	; 0x44
 800c04c:	e7bc      	b.n	800bfc8 <_strtod_l+0x150>
 800c04e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c050:	1c5a      	adds	r2, r3, #1
 800c052:	9211      	str	r2, [sp, #68]	; 0x44
 800c054:	785a      	ldrb	r2, [r3, #1]
 800c056:	b3ae      	cbz	r6, 800c0c4 <_strtod_l+0x24c>
 800c058:	4683      	mov	fp, r0
 800c05a:	4633      	mov	r3, r6
 800c05c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c060:	2909      	cmp	r1, #9
 800c062:	d912      	bls.n	800c08a <_strtod_l+0x212>
 800c064:	2101      	movs	r1, #1
 800c066:	e7c1      	b.n	800bfec <_strtod_l+0x174>
 800c068:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c06a:	1c5a      	adds	r2, r3, #1
 800c06c:	9211      	str	r2, [sp, #68]	; 0x44
 800c06e:	785a      	ldrb	r2, [r3, #1]
 800c070:	3001      	adds	r0, #1
 800c072:	2a30      	cmp	r2, #48	; 0x30
 800c074:	d0f8      	beq.n	800c068 <_strtod_l+0x1f0>
 800c076:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c07a:	2b08      	cmp	r3, #8
 800c07c:	f200 8495 	bhi.w	800c9aa <_strtod_l+0xb32>
 800c080:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c082:	9309      	str	r3, [sp, #36]	; 0x24
 800c084:	4683      	mov	fp, r0
 800c086:	2000      	movs	r0, #0
 800c088:	4603      	mov	r3, r0
 800c08a:	3a30      	subs	r2, #48	; 0x30
 800c08c:	f100 0101 	add.w	r1, r0, #1
 800c090:	d012      	beq.n	800c0b8 <_strtod_l+0x240>
 800c092:	448b      	add	fp, r1
 800c094:	eb00 0c03 	add.w	ip, r0, r3
 800c098:	4619      	mov	r1, r3
 800c09a:	250a      	movs	r5, #10
 800c09c:	4561      	cmp	r1, ip
 800c09e:	d113      	bne.n	800c0c8 <_strtod_l+0x250>
 800c0a0:	1819      	adds	r1, r3, r0
 800c0a2:	2908      	cmp	r1, #8
 800c0a4:	f103 0301 	add.w	r3, r3, #1
 800c0a8:	4403      	add	r3, r0
 800c0aa:	dc1b      	bgt.n	800c0e4 <_strtod_l+0x26c>
 800c0ac:	9807      	ldr	r0, [sp, #28]
 800c0ae:	210a      	movs	r1, #10
 800c0b0:	fb01 2200 	mla	r2, r1, r0, r2
 800c0b4:	9207      	str	r2, [sp, #28]
 800c0b6:	2100      	movs	r1, #0
 800c0b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c0ba:	1c50      	adds	r0, r2, #1
 800c0bc:	9011      	str	r0, [sp, #68]	; 0x44
 800c0be:	7852      	ldrb	r2, [r2, #1]
 800c0c0:	4608      	mov	r0, r1
 800c0c2:	e7cb      	b.n	800c05c <_strtod_l+0x1e4>
 800c0c4:	4630      	mov	r0, r6
 800c0c6:	e7d4      	b.n	800c072 <_strtod_l+0x1fa>
 800c0c8:	2908      	cmp	r1, #8
 800c0ca:	f101 0101 	add.w	r1, r1, #1
 800c0ce:	dc03      	bgt.n	800c0d8 <_strtod_l+0x260>
 800c0d0:	9f07      	ldr	r7, [sp, #28]
 800c0d2:	436f      	muls	r7, r5
 800c0d4:	9707      	str	r7, [sp, #28]
 800c0d6:	e7e1      	b.n	800c09c <_strtod_l+0x224>
 800c0d8:	2910      	cmp	r1, #16
 800c0da:	bfde      	ittt	le
 800c0dc:	9f05      	ldrle	r7, [sp, #20]
 800c0de:	436f      	mulle	r7, r5
 800c0e0:	9705      	strle	r7, [sp, #20]
 800c0e2:	e7db      	b.n	800c09c <_strtod_l+0x224>
 800c0e4:	2b10      	cmp	r3, #16
 800c0e6:	bfdf      	itttt	le
 800c0e8:	9805      	ldrle	r0, [sp, #20]
 800c0ea:	210a      	movle	r1, #10
 800c0ec:	fb01 2200 	mlale	r2, r1, r0, r2
 800c0f0:	9205      	strle	r2, [sp, #20]
 800c0f2:	e7e0      	b.n	800c0b6 <_strtod_l+0x23e>
 800c0f4:	f04f 0b00 	mov.w	fp, #0
 800c0f8:	2101      	movs	r1, #1
 800c0fa:	e77c      	b.n	800bff6 <_strtod_l+0x17e>
 800c0fc:	f04f 0e00 	mov.w	lr, #0
 800c100:	f10a 0202 	add.w	r2, sl, #2
 800c104:	9211      	str	r2, [sp, #68]	; 0x44
 800c106:	f89a 2002 	ldrb.w	r2, [sl, #2]
 800c10a:	e785      	b.n	800c018 <_strtod_l+0x1a0>
 800c10c:	f04f 0e01 	mov.w	lr, #1
 800c110:	e7f6      	b.n	800c100 <_strtod_l+0x288>
 800c112:	bf00      	nop
 800c114:	0800df68 	.word	0x0800df68
 800c118:	0800df64 	.word	0x0800df64
 800c11c:	7ff00000 	.word	0x7ff00000
 800c120:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c122:	1c55      	adds	r5, r2, #1
 800c124:	9511      	str	r5, [sp, #68]	; 0x44
 800c126:	7852      	ldrb	r2, [r2, #1]
 800c128:	2a30      	cmp	r2, #48	; 0x30
 800c12a:	d0f9      	beq.n	800c120 <_strtod_l+0x2a8>
 800c12c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800c130:	2d08      	cmp	r5, #8
 800c132:	f63f af78 	bhi.w	800c026 <_strtod_l+0x1ae>
 800c136:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800c13a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c13c:	920a      	str	r2, [sp, #40]	; 0x28
 800c13e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c140:	1c55      	adds	r5, r2, #1
 800c142:	9511      	str	r5, [sp, #68]	; 0x44
 800c144:	7852      	ldrb	r2, [r2, #1]
 800c146:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800c14a:	2f09      	cmp	r7, #9
 800c14c:	d937      	bls.n	800c1be <_strtod_l+0x346>
 800c14e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800c150:	1bed      	subs	r5, r5, r7
 800c152:	2d08      	cmp	r5, #8
 800c154:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800c158:	dc02      	bgt.n	800c160 <_strtod_l+0x2e8>
 800c15a:	4565      	cmp	r5, ip
 800c15c:	bfa8      	it	ge
 800c15e:	4665      	movge	r5, ip
 800c160:	f1be 0f00 	cmp.w	lr, #0
 800c164:	d000      	beq.n	800c168 <_strtod_l+0x2f0>
 800c166:	426d      	negs	r5, r5
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d14d      	bne.n	800c208 <_strtod_l+0x390>
 800c16c:	9b06      	ldr	r3, [sp, #24]
 800c16e:	4303      	orrs	r3, r0
 800c170:	f47f aebd 	bne.w	800beee <_strtod_l+0x76>
 800c174:	2900      	cmp	r1, #0
 800c176:	f47f aed6 	bne.w	800bf26 <_strtod_l+0xae>
 800c17a:	2a69      	cmp	r2, #105	; 0x69
 800c17c:	d027      	beq.n	800c1ce <_strtod_l+0x356>
 800c17e:	dc24      	bgt.n	800c1ca <_strtod_l+0x352>
 800c180:	2a49      	cmp	r2, #73	; 0x49
 800c182:	d024      	beq.n	800c1ce <_strtod_l+0x356>
 800c184:	2a4e      	cmp	r2, #78	; 0x4e
 800c186:	f47f aece 	bne.w	800bf26 <_strtod_l+0xae>
 800c18a:	4995      	ldr	r1, [pc, #596]	; (800c3e0 <_strtod_l+0x568>)
 800c18c:	a811      	add	r0, sp, #68	; 0x44
 800c18e:	f001 f9e3 	bl	800d558 <__match>
 800c192:	2800      	cmp	r0, #0
 800c194:	f43f aec7 	beq.w	800bf26 <_strtod_l+0xae>
 800c198:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c19a:	781b      	ldrb	r3, [r3, #0]
 800c19c:	2b28      	cmp	r3, #40	; 0x28
 800c19e:	d12d      	bne.n	800c1fc <_strtod_l+0x384>
 800c1a0:	4990      	ldr	r1, [pc, #576]	; (800c3e4 <_strtod_l+0x56c>)
 800c1a2:	aa14      	add	r2, sp, #80	; 0x50
 800c1a4:	a811      	add	r0, sp, #68	; 0x44
 800c1a6:	f001 f9eb 	bl	800d580 <__hexnan>
 800c1aa:	2805      	cmp	r0, #5
 800c1ac:	d126      	bne.n	800c1fc <_strtod_l+0x384>
 800c1ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c1b0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800c1b4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800c1b8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800c1bc:	e697      	b.n	800beee <_strtod_l+0x76>
 800c1be:	250a      	movs	r5, #10
 800c1c0:	fb05 2c0c 	mla	ip, r5, ip, r2
 800c1c4:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800c1c8:	e7b9      	b.n	800c13e <_strtod_l+0x2c6>
 800c1ca:	2a6e      	cmp	r2, #110	; 0x6e
 800c1cc:	e7db      	b.n	800c186 <_strtod_l+0x30e>
 800c1ce:	4986      	ldr	r1, [pc, #536]	; (800c3e8 <_strtod_l+0x570>)
 800c1d0:	a811      	add	r0, sp, #68	; 0x44
 800c1d2:	f001 f9c1 	bl	800d558 <__match>
 800c1d6:	2800      	cmp	r0, #0
 800c1d8:	f43f aea5 	beq.w	800bf26 <_strtod_l+0xae>
 800c1dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c1de:	4983      	ldr	r1, [pc, #524]	; (800c3ec <_strtod_l+0x574>)
 800c1e0:	3b01      	subs	r3, #1
 800c1e2:	a811      	add	r0, sp, #68	; 0x44
 800c1e4:	9311      	str	r3, [sp, #68]	; 0x44
 800c1e6:	f001 f9b7 	bl	800d558 <__match>
 800c1ea:	b910      	cbnz	r0, 800c1f2 <_strtod_l+0x37a>
 800c1ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c1ee:	3301      	adds	r3, #1
 800c1f0:	9311      	str	r3, [sp, #68]	; 0x44
 800c1f2:	f8df 920c 	ldr.w	r9, [pc, #524]	; 800c400 <_strtod_l+0x588>
 800c1f6:	f04f 0800 	mov.w	r8, #0
 800c1fa:	e678      	b.n	800beee <_strtod_l+0x76>
 800c1fc:	487c      	ldr	r0, [pc, #496]	; (800c3f0 <_strtod_l+0x578>)
 800c1fe:	f000 fec7 	bl	800cf90 <nan>
 800c202:	ec59 8b10 	vmov	r8, r9, d0
 800c206:	e672      	b.n	800beee <_strtod_l+0x76>
 800c208:	eddd 7a07 	vldr	s15, [sp, #28]
 800c20c:	eba5 020b 	sub.w	r2, r5, fp
 800c210:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c214:	2e00      	cmp	r6, #0
 800c216:	bf08      	it	eq
 800c218:	461e      	moveq	r6, r3
 800c21a:	2b10      	cmp	r3, #16
 800c21c:	9206      	str	r2, [sp, #24]
 800c21e:	461a      	mov	r2, r3
 800c220:	bfa8      	it	ge
 800c222:	2210      	movge	r2, #16
 800c224:	2b09      	cmp	r3, #9
 800c226:	ec59 8b17 	vmov	r8, r9, d7
 800c22a:	dd0c      	ble.n	800c246 <_strtod_l+0x3ce>
 800c22c:	4971      	ldr	r1, [pc, #452]	; (800c3f4 <_strtod_l+0x57c>)
 800c22e:	eddd 6a05 	vldr	s13, [sp, #20]
 800c232:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800c236:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800c23a:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800c23e:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c242:	ec59 8b16 	vmov	r8, r9, d6
 800c246:	2b0f      	cmp	r3, #15
 800c248:	dc37      	bgt.n	800c2ba <_strtod_l+0x442>
 800c24a:	9906      	ldr	r1, [sp, #24]
 800c24c:	2900      	cmp	r1, #0
 800c24e:	f43f ae4e 	beq.w	800beee <_strtod_l+0x76>
 800c252:	dd23      	ble.n	800c29c <_strtod_l+0x424>
 800c254:	2916      	cmp	r1, #22
 800c256:	dc0b      	bgt.n	800c270 <_strtod_l+0x3f8>
 800c258:	4b66      	ldr	r3, [pc, #408]	; (800c3f4 <_strtod_l+0x57c>)
 800c25a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800c25e:	ed93 7b00 	vldr	d7, [r3]
 800c262:	ec49 8b16 	vmov	d6, r8, r9
 800c266:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c26a:	ec59 8b17 	vmov	r8, r9, d7
 800c26e:	e63e      	b.n	800beee <_strtod_l+0x76>
 800c270:	9806      	ldr	r0, [sp, #24]
 800c272:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800c276:	4281      	cmp	r1, r0
 800c278:	db1f      	blt.n	800c2ba <_strtod_l+0x442>
 800c27a:	4a5e      	ldr	r2, [pc, #376]	; (800c3f4 <_strtod_l+0x57c>)
 800c27c:	f1c3 030f 	rsb	r3, r3, #15
 800c280:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800c284:	ed91 7b00 	vldr	d7, [r1]
 800c288:	ec49 8b16 	vmov	d6, r8, r9
 800c28c:	1ac3      	subs	r3, r0, r3
 800c28e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c292:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c296:	ed92 6b00 	vldr	d6, [r2]
 800c29a:	e7e4      	b.n	800c266 <_strtod_l+0x3ee>
 800c29c:	9906      	ldr	r1, [sp, #24]
 800c29e:	3116      	adds	r1, #22
 800c2a0:	db0b      	blt.n	800c2ba <_strtod_l+0x442>
 800c2a2:	4b54      	ldr	r3, [pc, #336]	; (800c3f4 <_strtod_l+0x57c>)
 800c2a4:	ebab 0505 	sub.w	r5, fp, r5
 800c2a8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c2ac:	ed95 7b00 	vldr	d7, [r5]
 800c2b0:	ec49 8b16 	vmov	d6, r8, r9
 800c2b4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c2b8:	e7d7      	b.n	800c26a <_strtod_l+0x3f2>
 800c2ba:	9906      	ldr	r1, [sp, #24]
 800c2bc:	1a9a      	subs	r2, r3, r2
 800c2be:	440a      	add	r2, r1
 800c2c0:	2a00      	cmp	r2, #0
 800c2c2:	dd6e      	ble.n	800c3a2 <_strtod_l+0x52a>
 800c2c4:	f012 000f 	ands.w	r0, r2, #15
 800c2c8:	d00a      	beq.n	800c2e0 <_strtod_l+0x468>
 800c2ca:	494a      	ldr	r1, [pc, #296]	; (800c3f4 <_strtod_l+0x57c>)
 800c2cc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c2d0:	ed91 7b00 	vldr	d7, [r1]
 800c2d4:	ec49 8b16 	vmov	d6, r8, r9
 800c2d8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c2dc:	ec59 8b17 	vmov	r8, r9, d7
 800c2e0:	f032 020f 	bics.w	r2, r2, #15
 800c2e4:	d04e      	beq.n	800c384 <_strtod_l+0x50c>
 800c2e6:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800c2ea:	dd22      	ble.n	800c332 <_strtod_l+0x4ba>
 800c2ec:	2500      	movs	r5, #0
 800c2ee:	462e      	mov	r6, r5
 800c2f0:	9507      	str	r5, [sp, #28]
 800c2f2:	462f      	mov	r7, r5
 800c2f4:	2322      	movs	r3, #34	; 0x22
 800c2f6:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800c400 <_strtod_l+0x588>
 800c2fa:	6023      	str	r3, [r4, #0]
 800c2fc:	f04f 0800 	mov.w	r8, #0
 800c300:	9b07      	ldr	r3, [sp, #28]
 800c302:	2b00      	cmp	r3, #0
 800c304:	f43f adf3 	beq.w	800beee <_strtod_l+0x76>
 800c308:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c30a:	4620      	mov	r0, r4
 800c30c:	f7ff f930 	bl	800b570 <_Bfree>
 800c310:	4639      	mov	r1, r7
 800c312:	4620      	mov	r0, r4
 800c314:	f7ff f92c 	bl	800b570 <_Bfree>
 800c318:	4631      	mov	r1, r6
 800c31a:	4620      	mov	r0, r4
 800c31c:	f7ff f928 	bl	800b570 <_Bfree>
 800c320:	9907      	ldr	r1, [sp, #28]
 800c322:	4620      	mov	r0, r4
 800c324:	f7ff f924 	bl	800b570 <_Bfree>
 800c328:	4629      	mov	r1, r5
 800c32a:	4620      	mov	r0, r4
 800c32c:	f7ff f920 	bl	800b570 <_Bfree>
 800c330:	e5dd      	b.n	800beee <_strtod_l+0x76>
 800c332:	2000      	movs	r0, #0
 800c334:	ec49 8b17 	vmov	d7, r8, r9
 800c338:	4f2f      	ldr	r7, [pc, #188]	; (800c3f8 <_strtod_l+0x580>)
 800c33a:	1112      	asrs	r2, r2, #4
 800c33c:	4601      	mov	r1, r0
 800c33e:	2a01      	cmp	r2, #1
 800c340:	dc23      	bgt.n	800c38a <_strtod_l+0x512>
 800c342:	b108      	cbz	r0, 800c348 <_strtod_l+0x4d0>
 800c344:	ec59 8b17 	vmov	r8, r9, d7
 800c348:	4a2b      	ldr	r2, [pc, #172]	; (800c3f8 <_strtod_l+0x580>)
 800c34a:	482c      	ldr	r0, [pc, #176]	; (800c3fc <_strtod_l+0x584>)
 800c34c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800c350:	ed92 7b00 	vldr	d7, [r2]
 800c354:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800c358:	ec49 8b16 	vmov	d6, r8, r9
 800c35c:	4a28      	ldr	r2, [pc, #160]	; (800c400 <_strtod_l+0x588>)
 800c35e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c362:	ee17 1a90 	vmov	r1, s15
 800c366:	400a      	ands	r2, r1
 800c368:	4282      	cmp	r2, r0
 800c36a:	ec59 8b17 	vmov	r8, r9, d7
 800c36e:	d8bd      	bhi.n	800c2ec <_strtod_l+0x474>
 800c370:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800c374:	4282      	cmp	r2, r0
 800c376:	bf86      	itte	hi
 800c378:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 800c404 <_strtod_l+0x58c>
 800c37c:	f04f 38ff 	movhi.w	r8, #4294967295
 800c380:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800c384:	2200      	movs	r2, #0
 800c386:	9205      	str	r2, [sp, #20]
 800c388:	e076      	b.n	800c478 <_strtod_l+0x600>
 800c38a:	f012 0f01 	tst.w	r2, #1
 800c38e:	d004      	beq.n	800c39a <_strtod_l+0x522>
 800c390:	ed97 6b00 	vldr	d6, [r7]
 800c394:	2001      	movs	r0, #1
 800c396:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c39a:	3101      	adds	r1, #1
 800c39c:	1052      	asrs	r2, r2, #1
 800c39e:	3708      	adds	r7, #8
 800c3a0:	e7cd      	b.n	800c33e <_strtod_l+0x4c6>
 800c3a2:	d0ef      	beq.n	800c384 <_strtod_l+0x50c>
 800c3a4:	4252      	negs	r2, r2
 800c3a6:	f012 000f 	ands.w	r0, r2, #15
 800c3aa:	d00a      	beq.n	800c3c2 <_strtod_l+0x54a>
 800c3ac:	4911      	ldr	r1, [pc, #68]	; (800c3f4 <_strtod_l+0x57c>)
 800c3ae:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c3b2:	ed91 7b00 	vldr	d7, [r1]
 800c3b6:	ec49 8b16 	vmov	d6, r8, r9
 800c3ba:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c3be:	ec59 8b17 	vmov	r8, r9, d7
 800c3c2:	1112      	asrs	r2, r2, #4
 800c3c4:	d0de      	beq.n	800c384 <_strtod_l+0x50c>
 800c3c6:	2a1f      	cmp	r2, #31
 800c3c8:	dd1e      	ble.n	800c408 <_strtod_l+0x590>
 800c3ca:	2500      	movs	r5, #0
 800c3cc:	462e      	mov	r6, r5
 800c3ce:	9507      	str	r5, [sp, #28]
 800c3d0:	462f      	mov	r7, r5
 800c3d2:	2322      	movs	r3, #34	; 0x22
 800c3d4:	f04f 0800 	mov.w	r8, #0
 800c3d8:	f04f 0900 	mov.w	r9, #0
 800c3dc:	6023      	str	r3, [r4, #0]
 800c3de:	e78f      	b.n	800c300 <_strtod_l+0x488>
 800c3e0:	0800dd51 	.word	0x0800dd51
 800c3e4:	0800df7c 	.word	0x0800df7c
 800c3e8:	0800dd49 	.word	0x0800dd49
 800c3ec:	0800dd80 	.word	0x0800dd80
 800c3f0:	0800e10d 	.word	0x0800e10d
 800c3f4:	0800de90 	.word	0x0800de90
 800c3f8:	0800de68 	.word	0x0800de68
 800c3fc:	7ca00000 	.word	0x7ca00000
 800c400:	7ff00000 	.word	0x7ff00000
 800c404:	7fefffff 	.word	0x7fefffff
 800c408:	f012 0110 	ands.w	r1, r2, #16
 800c40c:	bf18      	it	ne
 800c40e:	216a      	movne	r1, #106	; 0x6a
 800c410:	9105      	str	r1, [sp, #20]
 800c412:	ec49 8b17 	vmov	d7, r8, r9
 800c416:	49be      	ldr	r1, [pc, #760]	; (800c710 <_strtod_l+0x898>)
 800c418:	2000      	movs	r0, #0
 800c41a:	07d7      	lsls	r7, r2, #31
 800c41c:	d504      	bpl.n	800c428 <_strtod_l+0x5b0>
 800c41e:	ed91 6b00 	vldr	d6, [r1]
 800c422:	2001      	movs	r0, #1
 800c424:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c428:	1052      	asrs	r2, r2, #1
 800c42a:	f101 0108 	add.w	r1, r1, #8
 800c42e:	d1f4      	bne.n	800c41a <_strtod_l+0x5a2>
 800c430:	b108      	cbz	r0, 800c436 <_strtod_l+0x5be>
 800c432:	ec59 8b17 	vmov	r8, r9, d7
 800c436:	9a05      	ldr	r2, [sp, #20]
 800c438:	b1ba      	cbz	r2, 800c46a <_strtod_l+0x5f2>
 800c43a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800c43e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800c442:	2a00      	cmp	r2, #0
 800c444:	4648      	mov	r0, r9
 800c446:	dd10      	ble.n	800c46a <_strtod_l+0x5f2>
 800c448:	2a1f      	cmp	r2, #31
 800c44a:	f340 812c 	ble.w	800c6a6 <_strtod_l+0x82e>
 800c44e:	2a34      	cmp	r2, #52	; 0x34
 800c450:	bfde      	ittt	le
 800c452:	f04f 32ff 	movle.w	r2, #4294967295
 800c456:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800c45a:	408a      	lslle	r2, r1
 800c45c:	f04f 0800 	mov.w	r8, #0
 800c460:	bfcc      	ite	gt
 800c462:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800c466:	ea02 0900 	andle.w	r9, r2, r0
 800c46a:	ec49 8b17 	vmov	d7, r8, r9
 800c46e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c476:	d0a8      	beq.n	800c3ca <_strtod_l+0x552>
 800c478:	9a07      	ldr	r2, [sp, #28]
 800c47a:	9200      	str	r2, [sp, #0]
 800c47c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c47e:	4632      	mov	r2, r6
 800c480:	4620      	mov	r0, r4
 800c482:	f7ff f8dd 	bl	800b640 <__s2b>
 800c486:	9007      	str	r0, [sp, #28]
 800c488:	2800      	cmp	r0, #0
 800c48a:	f43f af2f 	beq.w	800c2ec <_strtod_l+0x474>
 800c48e:	9a06      	ldr	r2, [sp, #24]
 800c490:	2a00      	cmp	r2, #0
 800c492:	ebab 0305 	sub.w	r3, fp, r5
 800c496:	ed9f 9b96 	vldr	d9, [pc, #600]	; 800c6f0 <_strtod_l+0x878>
 800c49a:	bfa8      	it	ge
 800c49c:	2300      	movge	r3, #0
 800c49e:	ed9f ab96 	vldr	d10, [pc, #600]	; 800c6f8 <_strtod_l+0x880>
 800c4a2:	ed9f bb97 	vldr	d11, [pc, #604]	; 800c700 <_strtod_l+0x888>
 800c4a6:	9309      	str	r3, [sp, #36]	; 0x24
 800c4a8:	2500      	movs	r5, #0
 800c4aa:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c4ae:	930c      	str	r3, [sp, #48]	; 0x30
 800c4b0:	462e      	mov	r6, r5
 800c4b2:	9b07      	ldr	r3, [sp, #28]
 800c4b4:	4620      	mov	r0, r4
 800c4b6:	6859      	ldr	r1, [r3, #4]
 800c4b8:	f7ff f81a 	bl	800b4f0 <_Balloc>
 800c4bc:	4607      	mov	r7, r0
 800c4be:	2800      	cmp	r0, #0
 800c4c0:	f43f af18 	beq.w	800c2f4 <_strtod_l+0x47c>
 800c4c4:	9b07      	ldr	r3, [sp, #28]
 800c4c6:	691a      	ldr	r2, [r3, #16]
 800c4c8:	3202      	adds	r2, #2
 800c4ca:	f103 010c 	add.w	r1, r3, #12
 800c4ce:	0092      	lsls	r2, r2, #2
 800c4d0:	300c      	adds	r0, #12
 800c4d2:	f000 fd4f 	bl	800cf74 <memcpy>
 800c4d6:	ec49 8b10 	vmov	d0, r8, r9
 800c4da:	aa14      	add	r2, sp, #80	; 0x50
 800c4dc:	a913      	add	r1, sp, #76	; 0x4c
 800c4de:	4620      	mov	r0, r4
 800c4e0:	f7ff fbe2 	bl	800bca8 <__d2b>
 800c4e4:	ec49 8b18 	vmov	d8, r8, r9
 800c4e8:	9012      	str	r0, [sp, #72]	; 0x48
 800c4ea:	2800      	cmp	r0, #0
 800c4ec:	f43f af02 	beq.w	800c2f4 <_strtod_l+0x47c>
 800c4f0:	2101      	movs	r1, #1
 800c4f2:	4620      	mov	r0, r4
 800c4f4:	f7ff f93c 	bl	800b770 <__i2b>
 800c4f8:	4606      	mov	r6, r0
 800c4fa:	2800      	cmp	r0, #0
 800c4fc:	f43f aefa 	beq.w	800c2f4 <_strtod_l+0x47c>
 800c500:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c502:	9914      	ldr	r1, [sp, #80]	; 0x50
 800c504:	2b00      	cmp	r3, #0
 800c506:	bfab      	itete	ge
 800c508:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800c50a:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800c50c:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800c510:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800c514:	bfac      	ite	ge
 800c516:	eb03 0b02 	addge.w	fp, r3, r2
 800c51a:	eba2 0a03 	sublt.w	sl, r2, r3
 800c51e:	9a05      	ldr	r2, [sp, #20]
 800c520:	1a9b      	subs	r3, r3, r2
 800c522:	440b      	add	r3, r1
 800c524:	4a7b      	ldr	r2, [pc, #492]	; (800c714 <_strtod_l+0x89c>)
 800c526:	3b01      	subs	r3, #1
 800c528:	4293      	cmp	r3, r2
 800c52a:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800c52e:	f280 80cd 	bge.w	800c6cc <_strtod_l+0x854>
 800c532:	1ad2      	subs	r2, r2, r3
 800c534:	2a1f      	cmp	r2, #31
 800c536:	eba1 0102 	sub.w	r1, r1, r2
 800c53a:	f04f 0001 	mov.w	r0, #1
 800c53e:	f300 80b9 	bgt.w	800c6b4 <_strtod_l+0x83c>
 800c542:	fa00 f302 	lsl.w	r3, r0, r2
 800c546:	930b      	str	r3, [sp, #44]	; 0x2c
 800c548:	2300      	movs	r3, #0
 800c54a:	930a      	str	r3, [sp, #40]	; 0x28
 800c54c:	eb0b 0301 	add.w	r3, fp, r1
 800c550:	9a05      	ldr	r2, [sp, #20]
 800c552:	459b      	cmp	fp, r3
 800c554:	448a      	add	sl, r1
 800c556:	4492      	add	sl, r2
 800c558:	465a      	mov	r2, fp
 800c55a:	bfa8      	it	ge
 800c55c:	461a      	movge	r2, r3
 800c55e:	4552      	cmp	r2, sl
 800c560:	bfa8      	it	ge
 800c562:	4652      	movge	r2, sl
 800c564:	2a00      	cmp	r2, #0
 800c566:	bfc2      	ittt	gt
 800c568:	1a9b      	subgt	r3, r3, r2
 800c56a:	ebaa 0a02 	subgt.w	sl, sl, r2
 800c56e:	ebab 0b02 	subgt.w	fp, fp, r2
 800c572:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c574:	2a00      	cmp	r2, #0
 800c576:	dd18      	ble.n	800c5aa <_strtod_l+0x732>
 800c578:	4631      	mov	r1, r6
 800c57a:	4620      	mov	r0, r4
 800c57c:	930f      	str	r3, [sp, #60]	; 0x3c
 800c57e:	f7ff f9b7 	bl	800b8f0 <__pow5mult>
 800c582:	4606      	mov	r6, r0
 800c584:	2800      	cmp	r0, #0
 800c586:	f43f aeb5 	beq.w	800c2f4 <_strtod_l+0x47c>
 800c58a:	4601      	mov	r1, r0
 800c58c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c58e:	4620      	mov	r0, r4
 800c590:	f7ff f904 	bl	800b79c <__multiply>
 800c594:	900e      	str	r0, [sp, #56]	; 0x38
 800c596:	2800      	cmp	r0, #0
 800c598:	f43f aeac 	beq.w	800c2f4 <_strtod_l+0x47c>
 800c59c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c59e:	4620      	mov	r0, r4
 800c5a0:	f7fe ffe6 	bl	800b570 <_Bfree>
 800c5a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c5a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c5a8:	9212      	str	r2, [sp, #72]	; 0x48
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	f300 8093 	bgt.w	800c6d6 <_strtod_l+0x85e>
 800c5b0:	9b06      	ldr	r3, [sp, #24]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	dd08      	ble.n	800c5c8 <_strtod_l+0x750>
 800c5b6:	4639      	mov	r1, r7
 800c5b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c5ba:	4620      	mov	r0, r4
 800c5bc:	f7ff f998 	bl	800b8f0 <__pow5mult>
 800c5c0:	4607      	mov	r7, r0
 800c5c2:	2800      	cmp	r0, #0
 800c5c4:	f43f ae96 	beq.w	800c2f4 <_strtod_l+0x47c>
 800c5c8:	f1ba 0f00 	cmp.w	sl, #0
 800c5cc:	dd08      	ble.n	800c5e0 <_strtod_l+0x768>
 800c5ce:	4639      	mov	r1, r7
 800c5d0:	4652      	mov	r2, sl
 800c5d2:	4620      	mov	r0, r4
 800c5d4:	f7ff f9e6 	bl	800b9a4 <__lshift>
 800c5d8:	4607      	mov	r7, r0
 800c5da:	2800      	cmp	r0, #0
 800c5dc:	f43f ae8a 	beq.w	800c2f4 <_strtod_l+0x47c>
 800c5e0:	f1bb 0f00 	cmp.w	fp, #0
 800c5e4:	dd08      	ble.n	800c5f8 <_strtod_l+0x780>
 800c5e6:	4631      	mov	r1, r6
 800c5e8:	465a      	mov	r2, fp
 800c5ea:	4620      	mov	r0, r4
 800c5ec:	f7ff f9da 	bl	800b9a4 <__lshift>
 800c5f0:	4606      	mov	r6, r0
 800c5f2:	2800      	cmp	r0, #0
 800c5f4:	f43f ae7e 	beq.w	800c2f4 <_strtod_l+0x47c>
 800c5f8:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c5fa:	463a      	mov	r2, r7
 800c5fc:	4620      	mov	r0, r4
 800c5fe:	f7ff fa59 	bl	800bab4 <__mdiff>
 800c602:	4605      	mov	r5, r0
 800c604:	2800      	cmp	r0, #0
 800c606:	f43f ae75 	beq.w	800c2f4 <_strtod_l+0x47c>
 800c60a:	2300      	movs	r3, #0
 800c60c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800c610:	60c3      	str	r3, [r0, #12]
 800c612:	4631      	mov	r1, r6
 800c614:	f7ff fa32 	bl	800ba7c <__mcmp>
 800c618:	2800      	cmp	r0, #0
 800c61a:	da7f      	bge.n	800c71c <_strtod_l+0x8a4>
 800c61c:	ea5a 0a08 	orrs.w	sl, sl, r8
 800c620:	f040 80a5 	bne.w	800c76e <_strtod_l+0x8f6>
 800c624:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c628:	2b00      	cmp	r3, #0
 800c62a:	f040 80a0 	bne.w	800c76e <_strtod_l+0x8f6>
 800c62e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c632:	0d1b      	lsrs	r3, r3, #20
 800c634:	051b      	lsls	r3, r3, #20
 800c636:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c63a:	f240 8098 	bls.w	800c76e <_strtod_l+0x8f6>
 800c63e:	696b      	ldr	r3, [r5, #20]
 800c640:	b91b      	cbnz	r3, 800c64a <_strtod_l+0x7d2>
 800c642:	692b      	ldr	r3, [r5, #16]
 800c644:	2b01      	cmp	r3, #1
 800c646:	f340 8092 	ble.w	800c76e <_strtod_l+0x8f6>
 800c64a:	4629      	mov	r1, r5
 800c64c:	2201      	movs	r2, #1
 800c64e:	4620      	mov	r0, r4
 800c650:	f7ff f9a8 	bl	800b9a4 <__lshift>
 800c654:	4631      	mov	r1, r6
 800c656:	4605      	mov	r5, r0
 800c658:	f7ff fa10 	bl	800ba7c <__mcmp>
 800c65c:	2800      	cmp	r0, #0
 800c65e:	f340 8086 	ble.w	800c76e <_strtod_l+0x8f6>
 800c662:	9905      	ldr	r1, [sp, #20]
 800c664:	4a2c      	ldr	r2, [pc, #176]	; (800c718 <_strtod_l+0x8a0>)
 800c666:	464b      	mov	r3, r9
 800c668:	2900      	cmp	r1, #0
 800c66a:	f000 809f 	beq.w	800c7ac <_strtod_l+0x934>
 800c66e:	ea02 0109 	and.w	r1, r2, r9
 800c672:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c676:	f300 8099 	bgt.w	800c7ac <_strtod_l+0x934>
 800c67a:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c67e:	f77f aea8 	ble.w	800c3d2 <_strtod_l+0x55a>
 800c682:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800c708 <_strtod_l+0x890>
 800c686:	ec49 8b16 	vmov	d6, r8, r9
 800c68a:	4b23      	ldr	r3, [pc, #140]	; (800c718 <_strtod_l+0x8a0>)
 800c68c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c690:	ee17 2a90 	vmov	r2, s15
 800c694:	4013      	ands	r3, r2
 800c696:	ec59 8b17 	vmov	r8, r9, d7
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	f47f ae34 	bne.w	800c308 <_strtod_l+0x490>
 800c6a0:	2322      	movs	r3, #34	; 0x22
 800c6a2:	6023      	str	r3, [r4, #0]
 800c6a4:	e630      	b.n	800c308 <_strtod_l+0x490>
 800c6a6:	f04f 31ff 	mov.w	r1, #4294967295
 800c6aa:	fa01 f202 	lsl.w	r2, r1, r2
 800c6ae:	ea02 0808 	and.w	r8, r2, r8
 800c6b2:	e6da      	b.n	800c46a <_strtod_l+0x5f2>
 800c6b4:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800c6b8:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800c6bc:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800c6c0:	33e2      	adds	r3, #226	; 0xe2
 800c6c2:	fa00 f303 	lsl.w	r3, r0, r3
 800c6c6:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800c6ca:	e73f      	b.n	800c54c <_strtod_l+0x6d4>
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	2301      	movs	r3, #1
 800c6d0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c6d4:	e73a      	b.n	800c54c <_strtod_l+0x6d4>
 800c6d6:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c6d8:	461a      	mov	r2, r3
 800c6da:	4620      	mov	r0, r4
 800c6dc:	f7ff f962 	bl	800b9a4 <__lshift>
 800c6e0:	9012      	str	r0, [sp, #72]	; 0x48
 800c6e2:	2800      	cmp	r0, #0
 800c6e4:	f47f af64 	bne.w	800c5b0 <_strtod_l+0x738>
 800c6e8:	e604      	b.n	800c2f4 <_strtod_l+0x47c>
 800c6ea:	bf00      	nop
 800c6ec:	f3af 8000 	nop.w
 800c6f0:	94a03595 	.word	0x94a03595
 800c6f4:	3fcfffff 	.word	0x3fcfffff
 800c6f8:	94a03595 	.word	0x94a03595
 800c6fc:	3fdfffff 	.word	0x3fdfffff
 800c700:	35afe535 	.word	0x35afe535
 800c704:	3fe00000 	.word	0x3fe00000
 800c708:	00000000 	.word	0x00000000
 800c70c:	39500000 	.word	0x39500000
 800c710:	0800df90 	.word	0x0800df90
 800c714:	fffffc02 	.word	0xfffffc02
 800c718:	7ff00000 	.word	0x7ff00000
 800c71c:	46cb      	mov	fp, r9
 800c71e:	d15f      	bne.n	800c7e0 <_strtod_l+0x968>
 800c720:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c724:	f1ba 0f00 	cmp.w	sl, #0
 800c728:	d02a      	beq.n	800c780 <_strtod_l+0x908>
 800c72a:	4aa7      	ldr	r2, [pc, #668]	; (800c9c8 <_strtod_l+0xb50>)
 800c72c:	4293      	cmp	r3, r2
 800c72e:	d12b      	bne.n	800c788 <_strtod_l+0x910>
 800c730:	9b05      	ldr	r3, [sp, #20]
 800c732:	4642      	mov	r2, r8
 800c734:	b1fb      	cbz	r3, 800c776 <_strtod_l+0x8fe>
 800c736:	4ba5      	ldr	r3, [pc, #660]	; (800c9cc <_strtod_l+0xb54>)
 800c738:	ea09 0303 	and.w	r3, r9, r3
 800c73c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c740:	f04f 31ff 	mov.w	r1, #4294967295
 800c744:	d81a      	bhi.n	800c77c <_strtod_l+0x904>
 800c746:	0d1b      	lsrs	r3, r3, #20
 800c748:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c74c:	fa01 f303 	lsl.w	r3, r1, r3
 800c750:	429a      	cmp	r2, r3
 800c752:	d119      	bne.n	800c788 <_strtod_l+0x910>
 800c754:	4b9e      	ldr	r3, [pc, #632]	; (800c9d0 <_strtod_l+0xb58>)
 800c756:	459b      	cmp	fp, r3
 800c758:	d102      	bne.n	800c760 <_strtod_l+0x8e8>
 800c75a:	3201      	adds	r2, #1
 800c75c:	f43f adca 	beq.w	800c2f4 <_strtod_l+0x47c>
 800c760:	4b9a      	ldr	r3, [pc, #616]	; (800c9cc <_strtod_l+0xb54>)
 800c762:	ea0b 0303 	and.w	r3, fp, r3
 800c766:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800c76a:	f04f 0800 	mov.w	r8, #0
 800c76e:	9b05      	ldr	r3, [sp, #20]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d186      	bne.n	800c682 <_strtod_l+0x80a>
 800c774:	e5c8      	b.n	800c308 <_strtod_l+0x490>
 800c776:	f04f 33ff 	mov.w	r3, #4294967295
 800c77a:	e7e9      	b.n	800c750 <_strtod_l+0x8d8>
 800c77c:	460b      	mov	r3, r1
 800c77e:	e7e7      	b.n	800c750 <_strtod_l+0x8d8>
 800c780:	ea53 0308 	orrs.w	r3, r3, r8
 800c784:	f43f af6d 	beq.w	800c662 <_strtod_l+0x7ea>
 800c788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c78a:	b1cb      	cbz	r3, 800c7c0 <_strtod_l+0x948>
 800c78c:	ea13 0f0b 	tst.w	r3, fp
 800c790:	d0ed      	beq.n	800c76e <_strtod_l+0x8f6>
 800c792:	9a05      	ldr	r2, [sp, #20]
 800c794:	4640      	mov	r0, r8
 800c796:	4649      	mov	r1, r9
 800c798:	f1ba 0f00 	cmp.w	sl, #0
 800c79c:	d014      	beq.n	800c7c8 <_strtod_l+0x950>
 800c79e:	f7ff fb51 	bl	800be44 <sulp>
 800c7a2:	ee38 7b00 	vadd.f64	d7, d8, d0
 800c7a6:	ec59 8b17 	vmov	r8, r9, d7
 800c7aa:	e7e0      	b.n	800c76e <_strtod_l+0x8f6>
 800c7ac:	4013      	ands	r3, r2
 800c7ae:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c7b2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800c7b6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800c7ba:	f04f 38ff 	mov.w	r8, #4294967295
 800c7be:	e7d6      	b.n	800c76e <_strtod_l+0x8f6>
 800c7c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7c2:	ea13 0f08 	tst.w	r3, r8
 800c7c6:	e7e3      	b.n	800c790 <_strtod_l+0x918>
 800c7c8:	f7ff fb3c 	bl	800be44 <sulp>
 800c7cc:	ee38 0b40 	vsub.f64	d0, d8, d0
 800c7d0:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800c7d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7d8:	ec59 8b10 	vmov	r8, r9, d0
 800c7dc:	d1c7      	bne.n	800c76e <_strtod_l+0x8f6>
 800c7de:	e5f8      	b.n	800c3d2 <_strtod_l+0x55a>
 800c7e0:	4631      	mov	r1, r6
 800c7e2:	4628      	mov	r0, r5
 800c7e4:	f7ff faba 	bl	800bd5c <__ratio>
 800c7e8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800c7ec:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800c7f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7f4:	d85f      	bhi.n	800c8b6 <_strtod_l+0xa3e>
 800c7f6:	f1ba 0f00 	cmp.w	sl, #0
 800c7fa:	d166      	bne.n	800c8ca <_strtod_l+0xa52>
 800c7fc:	f1b8 0f00 	cmp.w	r8, #0
 800c800:	d14d      	bne.n	800c89e <_strtod_l+0xa26>
 800c802:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c806:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d162      	bne.n	800c8d4 <_strtod_l+0xa5c>
 800c80e:	eeb4 0bcd 	vcmpe.f64	d0, d13
 800c812:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800c816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c81a:	d401      	bmi.n	800c820 <_strtod_l+0x9a8>
 800c81c:	ee20 db0d 	vmul.f64	d13, d0, d13
 800c820:	eeb1 cb4d 	vneg.f64	d12, d13
 800c824:	4869      	ldr	r0, [pc, #420]	; (800c9cc <_strtod_l+0xb54>)
 800c826:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 800c9d8 <_strtod_l+0xb60>
 800c82a:	ea0b 0100 	and.w	r1, fp, r0
 800c82e:	4561      	cmp	r1, ip
 800c830:	ec53 2b1c 	vmov	r2, r3, d12
 800c834:	d17a      	bne.n	800c92c <_strtod_l+0xab4>
 800c836:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800c83a:	ec49 8b10 	vmov	d0, r8, r9
 800c83e:	910a      	str	r1, [sp, #40]	; 0x28
 800c840:	f7ff f9c2 	bl	800bbc8 <__ulp>
 800c844:	ec49 8b1e 	vmov	d14, r8, r9
 800c848:	4860      	ldr	r0, [pc, #384]	; (800c9cc <_strtod_l+0xb54>)
 800c84a:	eea0 eb0c 	vfma.f64	d14, d0, d12
 800c84e:	ee1e 3a90 	vmov	r3, s29
 800c852:	4a60      	ldr	r2, [pc, #384]	; (800c9d4 <_strtod_l+0xb5c>)
 800c854:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c856:	4018      	ands	r0, r3
 800c858:	4290      	cmp	r0, r2
 800c85a:	ec59 8b1e 	vmov	r8, r9, d14
 800c85e:	d93c      	bls.n	800c8da <_strtod_l+0xa62>
 800c860:	ee18 2a90 	vmov	r2, s17
 800c864:	4b5a      	ldr	r3, [pc, #360]	; (800c9d0 <_strtod_l+0xb58>)
 800c866:	429a      	cmp	r2, r3
 800c868:	d104      	bne.n	800c874 <_strtod_l+0x9fc>
 800c86a:	ee18 3a10 	vmov	r3, s16
 800c86e:	3301      	adds	r3, #1
 800c870:	f43f ad40 	beq.w	800c2f4 <_strtod_l+0x47c>
 800c874:	f8df 9158 	ldr.w	r9, [pc, #344]	; 800c9d0 <_strtod_l+0xb58>
 800c878:	f04f 38ff 	mov.w	r8, #4294967295
 800c87c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c87e:	4620      	mov	r0, r4
 800c880:	f7fe fe76 	bl	800b570 <_Bfree>
 800c884:	4639      	mov	r1, r7
 800c886:	4620      	mov	r0, r4
 800c888:	f7fe fe72 	bl	800b570 <_Bfree>
 800c88c:	4631      	mov	r1, r6
 800c88e:	4620      	mov	r0, r4
 800c890:	f7fe fe6e 	bl	800b570 <_Bfree>
 800c894:	4629      	mov	r1, r5
 800c896:	4620      	mov	r0, r4
 800c898:	f7fe fe6a 	bl	800b570 <_Bfree>
 800c89c:	e609      	b.n	800c4b2 <_strtod_l+0x63a>
 800c89e:	f1b8 0f01 	cmp.w	r8, #1
 800c8a2:	d103      	bne.n	800c8ac <_strtod_l+0xa34>
 800c8a4:	f1b9 0f00 	cmp.w	r9, #0
 800c8a8:	f43f ad93 	beq.w	800c3d2 <_strtod_l+0x55a>
 800c8ac:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 800c8b0:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800c8b4:	e7b6      	b.n	800c824 <_strtod_l+0x9ac>
 800c8b6:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800c8ba:	ee20 db0d 	vmul.f64	d13, d0, d13
 800c8be:	f1ba 0f00 	cmp.w	sl, #0
 800c8c2:	d0ad      	beq.n	800c820 <_strtod_l+0x9a8>
 800c8c4:	eeb0 cb4d 	vmov.f64	d12, d13
 800c8c8:	e7ac      	b.n	800c824 <_strtod_l+0x9ac>
 800c8ca:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 800c8ce:	eeb0 db4c 	vmov.f64	d13, d12
 800c8d2:	e7a7      	b.n	800c824 <_strtod_l+0x9ac>
 800c8d4:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 800c8d8:	e7a4      	b.n	800c824 <_strtod_l+0x9ac>
 800c8da:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800c8de:	9b05      	ldr	r3, [sp, #20]
 800c8e0:	46cb      	mov	fp, r9
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d1ca      	bne.n	800c87c <_strtod_l+0xa04>
 800c8e6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c8ea:	0d1b      	lsrs	r3, r3, #20
 800c8ec:	051b      	lsls	r3, r3, #20
 800c8ee:	4299      	cmp	r1, r3
 800c8f0:	d1c4      	bne.n	800c87c <_strtod_l+0xa04>
 800c8f2:	ec51 0b1d 	vmov	r0, r1, d13
 800c8f6:	f7f3 ff1f 	bl	8000738 <__aeabi_d2lz>
 800c8fa:	f7f3 fed7 	bl	80006ac <__aeabi_l2d>
 800c8fe:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 800c902:	ec41 0b17 	vmov	d7, r0, r1
 800c906:	ea4b 0b08 	orr.w	fp, fp, r8
 800c90a:	ea5b 0b0a 	orrs.w	fp, fp, sl
 800c90e:	ee3d db47 	vsub.f64	d13, d13, d7
 800c912:	d03c      	beq.n	800c98e <_strtod_l+0xb16>
 800c914:	eeb4 dbca 	vcmpe.f64	d13, d10
 800c918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c91c:	f53f acf4 	bmi.w	800c308 <_strtod_l+0x490>
 800c920:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800c924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c928:	dda8      	ble.n	800c87c <_strtod_l+0xa04>
 800c92a:	e4ed      	b.n	800c308 <_strtod_l+0x490>
 800c92c:	9805      	ldr	r0, [sp, #20]
 800c92e:	b1f0      	cbz	r0, 800c96e <_strtod_l+0xaf6>
 800c930:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800c934:	d81b      	bhi.n	800c96e <_strtod_l+0xaf6>
 800c936:	ed9f 7b22 	vldr	d7, [pc, #136]	; 800c9c0 <_strtod_l+0xb48>
 800c93a:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800c93e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c942:	d811      	bhi.n	800c968 <_strtod_l+0xaf0>
 800c944:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800c948:	ee1d 3a10 	vmov	r3, s26
 800c94c:	2b01      	cmp	r3, #1
 800c94e:	bf38      	it	cc
 800c950:	2301      	movcc	r3, #1
 800c952:	ee0d 3a10 	vmov	s26, r3
 800c956:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800c95a:	f1ba 0f00 	cmp.w	sl, #0
 800c95e:	d113      	bne.n	800c988 <_strtod_l+0xb10>
 800c960:	eeb1 7b4d 	vneg.f64	d7, d13
 800c964:	ec53 2b17 	vmov	r2, r3, d7
 800c968:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800c96c:	1a43      	subs	r3, r0, r1
 800c96e:	eeb0 0b48 	vmov.f64	d0, d8
 800c972:	ec43 2b1c 	vmov	d12, r2, r3
 800c976:	910a      	str	r1, [sp, #40]	; 0x28
 800c978:	f7ff f926 	bl	800bbc8 <__ulp>
 800c97c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c97e:	eeac 8b00 	vfma.f64	d8, d12, d0
 800c982:	ec59 8b18 	vmov	r8, r9, d8
 800c986:	e7aa      	b.n	800c8de <_strtod_l+0xa66>
 800c988:	eeb0 7b4d 	vmov.f64	d7, d13
 800c98c:	e7ea      	b.n	800c964 <_strtod_l+0xaec>
 800c98e:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800c992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c996:	f57f af71 	bpl.w	800c87c <_strtod_l+0xa04>
 800c99a:	e4b5      	b.n	800c308 <_strtod_l+0x490>
 800c99c:	2300      	movs	r3, #0
 800c99e:	9308      	str	r3, [sp, #32]
 800c9a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c9a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c9a4:	6013      	str	r3, [r2, #0]
 800c9a6:	f7ff baa6 	b.w	800bef6 <_strtod_l+0x7e>
 800c9aa:	2a65      	cmp	r2, #101	; 0x65
 800c9ac:	f43f aba2 	beq.w	800c0f4 <_strtod_l+0x27c>
 800c9b0:	2a45      	cmp	r2, #69	; 0x45
 800c9b2:	f43f ab9f 	beq.w	800c0f4 <_strtod_l+0x27c>
 800c9b6:	2101      	movs	r1, #1
 800c9b8:	f7ff bbd8 	b.w	800c16c <_strtod_l+0x2f4>
 800c9bc:	f3af 8000 	nop.w
 800c9c0:	ffc00000 	.word	0xffc00000
 800c9c4:	41dfffff 	.word	0x41dfffff
 800c9c8:	000fffff 	.word	0x000fffff
 800c9cc:	7ff00000 	.word	0x7ff00000
 800c9d0:	7fefffff 	.word	0x7fefffff
 800c9d4:	7c9fffff 	.word	0x7c9fffff
 800c9d8:	7fe00000 	.word	0x7fe00000

0800c9dc <_strtod_r>:
 800c9dc:	4b01      	ldr	r3, [pc, #4]	; (800c9e4 <_strtod_r+0x8>)
 800c9de:	f7ff ba4b 	b.w	800be78 <_strtod_l>
 800c9e2:	bf00      	nop
 800c9e4:	2400006c 	.word	0x2400006c

0800c9e8 <_strtol_l.constprop.0>:
 800c9e8:	2b01      	cmp	r3, #1
 800c9ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9ee:	d001      	beq.n	800c9f4 <_strtol_l.constprop.0+0xc>
 800c9f0:	2b24      	cmp	r3, #36	; 0x24
 800c9f2:	d906      	bls.n	800ca02 <_strtol_l.constprop.0+0x1a>
 800c9f4:	f7fd fe52 	bl	800a69c <__errno>
 800c9f8:	2316      	movs	r3, #22
 800c9fa:	6003      	str	r3, [r0, #0]
 800c9fc:	2000      	movs	r0, #0
 800c9fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca02:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800cae8 <_strtol_l.constprop.0+0x100>
 800ca06:	460d      	mov	r5, r1
 800ca08:	462e      	mov	r6, r5
 800ca0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ca0e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800ca12:	f017 0708 	ands.w	r7, r7, #8
 800ca16:	d1f7      	bne.n	800ca08 <_strtol_l.constprop.0+0x20>
 800ca18:	2c2d      	cmp	r4, #45	; 0x2d
 800ca1a:	d132      	bne.n	800ca82 <_strtol_l.constprop.0+0x9a>
 800ca1c:	782c      	ldrb	r4, [r5, #0]
 800ca1e:	2701      	movs	r7, #1
 800ca20:	1cb5      	adds	r5, r6, #2
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d05b      	beq.n	800cade <_strtol_l.constprop.0+0xf6>
 800ca26:	2b10      	cmp	r3, #16
 800ca28:	d109      	bne.n	800ca3e <_strtol_l.constprop.0+0x56>
 800ca2a:	2c30      	cmp	r4, #48	; 0x30
 800ca2c:	d107      	bne.n	800ca3e <_strtol_l.constprop.0+0x56>
 800ca2e:	782c      	ldrb	r4, [r5, #0]
 800ca30:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ca34:	2c58      	cmp	r4, #88	; 0x58
 800ca36:	d14d      	bne.n	800cad4 <_strtol_l.constprop.0+0xec>
 800ca38:	786c      	ldrb	r4, [r5, #1]
 800ca3a:	2310      	movs	r3, #16
 800ca3c:	3502      	adds	r5, #2
 800ca3e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ca42:	f108 38ff 	add.w	r8, r8, #4294967295
 800ca46:	f04f 0e00 	mov.w	lr, #0
 800ca4a:	fbb8 f9f3 	udiv	r9, r8, r3
 800ca4e:	4676      	mov	r6, lr
 800ca50:	fb03 8a19 	mls	sl, r3, r9, r8
 800ca54:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ca58:	f1bc 0f09 	cmp.w	ip, #9
 800ca5c:	d816      	bhi.n	800ca8c <_strtol_l.constprop.0+0xa4>
 800ca5e:	4664      	mov	r4, ip
 800ca60:	42a3      	cmp	r3, r4
 800ca62:	dd24      	ble.n	800caae <_strtol_l.constprop.0+0xc6>
 800ca64:	f1be 3fff 	cmp.w	lr, #4294967295
 800ca68:	d008      	beq.n	800ca7c <_strtol_l.constprop.0+0x94>
 800ca6a:	45b1      	cmp	r9, r6
 800ca6c:	d31c      	bcc.n	800caa8 <_strtol_l.constprop.0+0xc0>
 800ca6e:	d101      	bne.n	800ca74 <_strtol_l.constprop.0+0x8c>
 800ca70:	45a2      	cmp	sl, r4
 800ca72:	db19      	blt.n	800caa8 <_strtol_l.constprop.0+0xc0>
 800ca74:	fb06 4603 	mla	r6, r6, r3, r4
 800ca78:	f04f 0e01 	mov.w	lr, #1
 800ca7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ca80:	e7e8      	b.n	800ca54 <_strtol_l.constprop.0+0x6c>
 800ca82:	2c2b      	cmp	r4, #43	; 0x2b
 800ca84:	bf04      	itt	eq
 800ca86:	782c      	ldrbeq	r4, [r5, #0]
 800ca88:	1cb5      	addeq	r5, r6, #2
 800ca8a:	e7ca      	b.n	800ca22 <_strtol_l.constprop.0+0x3a>
 800ca8c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ca90:	f1bc 0f19 	cmp.w	ip, #25
 800ca94:	d801      	bhi.n	800ca9a <_strtol_l.constprop.0+0xb2>
 800ca96:	3c37      	subs	r4, #55	; 0x37
 800ca98:	e7e2      	b.n	800ca60 <_strtol_l.constprop.0+0x78>
 800ca9a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ca9e:	f1bc 0f19 	cmp.w	ip, #25
 800caa2:	d804      	bhi.n	800caae <_strtol_l.constprop.0+0xc6>
 800caa4:	3c57      	subs	r4, #87	; 0x57
 800caa6:	e7db      	b.n	800ca60 <_strtol_l.constprop.0+0x78>
 800caa8:	f04f 3eff 	mov.w	lr, #4294967295
 800caac:	e7e6      	b.n	800ca7c <_strtol_l.constprop.0+0x94>
 800caae:	f1be 3fff 	cmp.w	lr, #4294967295
 800cab2:	d105      	bne.n	800cac0 <_strtol_l.constprop.0+0xd8>
 800cab4:	2322      	movs	r3, #34	; 0x22
 800cab6:	6003      	str	r3, [r0, #0]
 800cab8:	4646      	mov	r6, r8
 800caba:	b942      	cbnz	r2, 800cace <_strtol_l.constprop.0+0xe6>
 800cabc:	4630      	mov	r0, r6
 800cabe:	e79e      	b.n	800c9fe <_strtol_l.constprop.0+0x16>
 800cac0:	b107      	cbz	r7, 800cac4 <_strtol_l.constprop.0+0xdc>
 800cac2:	4276      	negs	r6, r6
 800cac4:	2a00      	cmp	r2, #0
 800cac6:	d0f9      	beq.n	800cabc <_strtol_l.constprop.0+0xd4>
 800cac8:	f1be 0f00 	cmp.w	lr, #0
 800cacc:	d000      	beq.n	800cad0 <_strtol_l.constprop.0+0xe8>
 800cace:	1e69      	subs	r1, r5, #1
 800cad0:	6011      	str	r1, [r2, #0]
 800cad2:	e7f3      	b.n	800cabc <_strtol_l.constprop.0+0xd4>
 800cad4:	2430      	movs	r4, #48	; 0x30
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d1b1      	bne.n	800ca3e <_strtol_l.constprop.0+0x56>
 800cada:	2308      	movs	r3, #8
 800cadc:	e7af      	b.n	800ca3e <_strtol_l.constprop.0+0x56>
 800cade:	2c30      	cmp	r4, #48	; 0x30
 800cae0:	d0a5      	beq.n	800ca2e <_strtol_l.constprop.0+0x46>
 800cae2:	230a      	movs	r3, #10
 800cae4:	e7ab      	b.n	800ca3e <_strtol_l.constprop.0+0x56>
 800cae6:	bf00      	nop
 800cae8:	0800dfb9 	.word	0x0800dfb9

0800caec <_strtol_r>:
 800caec:	f7ff bf7c 	b.w	800c9e8 <_strtol_l.constprop.0>

0800caf0 <__ssputs_r>:
 800caf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800caf4:	688e      	ldr	r6, [r1, #8]
 800caf6:	461f      	mov	r7, r3
 800caf8:	42be      	cmp	r6, r7
 800cafa:	680b      	ldr	r3, [r1, #0]
 800cafc:	4682      	mov	sl, r0
 800cafe:	460c      	mov	r4, r1
 800cb00:	4690      	mov	r8, r2
 800cb02:	d82c      	bhi.n	800cb5e <__ssputs_r+0x6e>
 800cb04:	898a      	ldrh	r2, [r1, #12]
 800cb06:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cb0a:	d026      	beq.n	800cb5a <__ssputs_r+0x6a>
 800cb0c:	6965      	ldr	r5, [r4, #20]
 800cb0e:	6909      	ldr	r1, [r1, #16]
 800cb10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cb14:	eba3 0901 	sub.w	r9, r3, r1
 800cb18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cb1c:	1c7b      	adds	r3, r7, #1
 800cb1e:	444b      	add	r3, r9
 800cb20:	106d      	asrs	r5, r5, #1
 800cb22:	429d      	cmp	r5, r3
 800cb24:	bf38      	it	cc
 800cb26:	461d      	movcc	r5, r3
 800cb28:	0553      	lsls	r3, r2, #21
 800cb2a:	d527      	bpl.n	800cb7c <__ssputs_r+0x8c>
 800cb2c:	4629      	mov	r1, r5
 800cb2e:	f7fe fc53 	bl	800b3d8 <_malloc_r>
 800cb32:	4606      	mov	r6, r0
 800cb34:	b360      	cbz	r0, 800cb90 <__ssputs_r+0xa0>
 800cb36:	6921      	ldr	r1, [r4, #16]
 800cb38:	464a      	mov	r2, r9
 800cb3a:	f000 fa1b 	bl	800cf74 <memcpy>
 800cb3e:	89a3      	ldrh	r3, [r4, #12]
 800cb40:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cb44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb48:	81a3      	strh	r3, [r4, #12]
 800cb4a:	6126      	str	r6, [r4, #16]
 800cb4c:	6165      	str	r5, [r4, #20]
 800cb4e:	444e      	add	r6, r9
 800cb50:	eba5 0509 	sub.w	r5, r5, r9
 800cb54:	6026      	str	r6, [r4, #0]
 800cb56:	60a5      	str	r5, [r4, #8]
 800cb58:	463e      	mov	r6, r7
 800cb5a:	42be      	cmp	r6, r7
 800cb5c:	d900      	bls.n	800cb60 <__ssputs_r+0x70>
 800cb5e:	463e      	mov	r6, r7
 800cb60:	6820      	ldr	r0, [r4, #0]
 800cb62:	4632      	mov	r2, r6
 800cb64:	4641      	mov	r1, r8
 800cb66:	f000 f9c9 	bl	800cefc <memmove>
 800cb6a:	68a3      	ldr	r3, [r4, #8]
 800cb6c:	1b9b      	subs	r3, r3, r6
 800cb6e:	60a3      	str	r3, [r4, #8]
 800cb70:	6823      	ldr	r3, [r4, #0]
 800cb72:	4433      	add	r3, r6
 800cb74:	6023      	str	r3, [r4, #0]
 800cb76:	2000      	movs	r0, #0
 800cb78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb7c:	462a      	mov	r2, r5
 800cb7e:	f000 fdac 	bl	800d6da <_realloc_r>
 800cb82:	4606      	mov	r6, r0
 800cb84:	2800      	cmp	r0, #0
 800cb86:	d1e0      	bne.n	800cb4a <__ssputs_r+0x5a>
 800cb88:	6921      	ldr	r1, [r4, #16]
 800cb8a:	4650      	mov	r0, sl
 800cb8c:	f7fe fbb0 	bl	800b2f0 <_free_r>
 800cb90:	230c      	movs	r3, #12
 800cb92:	f8ca 3000 	str.w	r3, [sl]
 800cb96:	89a3      	ldrh	r3, [r4, #12]
 800cb98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb9c:	81a3      	strh	r3, [r4, #12]
 800cb9e:	f04f 30ff 	mov.w	r0, #4294967295
 800cba2:	e7e9      	b.n	800cb78 <__ssputs_r+0x88>

0800cba4 <_svfiprintf_r>:
 800cba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cba8:	4698      	mov	r8, r3
 800cbaa:	898b      	ldrh	r3, [r1, #12]
 800cbac:	061b      	lsls	r3, r3, #24
 800cbae:	b09d      	sub	sp, #116	; 0x74
 800cbb0:	4607      	mov	r7, r0
 800cbb2:	460d      	mov	r5, r1
 800cbb4:	4614      	mov	r4, r2
 800cbb6:	d50e      	bpl.n	800cbd6 <_svfiprintf_r+0x32>
 800cbb8:	690b      	ldr	r3, [r1, #16]
 800cbba:	b963      	cbnz	r3, 800cbd6 <_svfiprintf_r+0x32>
 800cbbc:	2140      	movs	r1, #64	; 0x40
 800cbbe:	f7fe fc0b 	bl	800b3d8 <_malloc_r>
 800cbc2:	6028      	str	r0, [r5, #0]
 800cbc4:	6128      	str	r0, [r5, #16]
 800cbc6:	b920      	cbnz	r0, 800cbd2 <_svfiprintf_r+0x2e>
 800cbc8:	230c      	movs	r3, #12
 800cbca:	603b      	str	r3, [r7, #0]
 800cbcc:	f04f 30ff 	mov.w	r0, #4294967295
 800cbd0:	e0d0      	b.n	800cd74 <_svfiprintf_r+0x1d0>
 800cbd2:	2340      	movs	r3, #64	; 0x40
 800cbd4:	616b      	str	r3, [r5, #20]
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	9309      	str	r3, [sp, #36]	; 0x24
 800cbda:	2320      	movs	r3, #32
 800cbdc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cbe0:	f8cd 800c 	str.w	r8, [sp, #12]
 800cbe4:	2330      	movs	r3, #48	; 0x30
 800cbe6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cd8c <_svfiprintf_r+0x1e8>
 800cbea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cbee:	f04f 0901 	mov.w	r9, #1
 800cbf2:	4623      	mov	r3, r4
 800cbf4:	469a      	mov	sl, r3
 800cbf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cbfa:	b10a      	cbz	r2, 800cc00 <_svfiprintf_r+0x5c>
 800cbfc:	2a25      	cmp	r2, #37	; 0x25
 800cbfe:	d1f9      	bne.n	800cbf4 <_svfiprintf_r+0x50>
 800cc00:	ebba 0b04 	subs.w	fp, sl, r4
 800cc04:	d00b      	beq.n	800cc1e <_svfiprintf_r+0x7a>
 800cc06:	465b      	mov	r3, fp
 800cc08:	4622      	mov	r2, r4
 800cc0a:	4629      	mov	r1, r5
 800cc0c:	4638      	mov	r0, r7
 800cc0e:	f7ff ff6f 	bl	800caf0 <__ssputs_r>
 800cc12:	3001      	adds	r0, #1
 800cc14:	f000 80a9 	beq.w	800cd6a <_svfiprintf_r+0x1c6>
 800cc18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc1a:	445a      	add	r2, fp
 800cc1c:	9209      	str	r2, [sp, #36]	; 0x24
 800cc1e:	f89a 3000 	ldrb.w	r3, [sl]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	f000 80a1 	beq.w	800cd6a <_svfiprintf_r+0x1c6>
 800cc28:	2300      	movs	r3, #0
 800cc2a:	f04f 32ff 	mov.w	r2, #4294967295
 800cc2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc32:	f10a 0a01 	add.w	sl, sl, #1
 800cc36:	9304      	str	r3, [sp, #16]
 800cc38:	9307      	str	r3, [sp, #28]
 800cc3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cc3e:	931a      	str	r3, [sp, #104]	; 0x68
 800cc40:	4654      	mov	r4, sl
 800cc42:	2205      	movs	r2, #5
 800cc44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc48:	4850      	ldr	r0, [pc, #320]	; (800cd8c <_svfiprintf_r+0x1e8>)
 800cc4a:	f7f3 fb49 	bl	80002e0 <memchr>
 800cc4e:	9a04      	ldr	r2, [sp, #16]
 800cc50:	b9d8      	cbnz	r0, 800cc8a <_svfiprintf_r+0xe6>
 800cc52:	06d0      	lsls	r0, r2, #27
 800cc54:	bf44      	itt	mi
 800cc56:	2320      	movmi	r3, #32
 800cc58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc5c:	0711      	lsls	r1, r2, #28
 800cc5e:	bf44      	itt	mi
 800cc60:	232b      	movmi	r3, #43	; 0x2b
 800cc62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc66:	f89a 3000 	ldrb.w	r3, [sl]
 800cc6a:	2b2a      	cmp	r3, #42	; 0x2a
 800cc6c:	d015      	beq.n	800cc9a <_svfiprintf_r+0xf6>
 800cc6e:	9a07      	ldr	r2, [sp, #28]
 800cc70:	4654      	mov	r4, sl
 800cc72:	2000      	movs	r0, #0
 800cc74:	f04f 0c0a 	mov.w	ip, #10
 800cc78:	4621      	mov	r1, r4
 800cc7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc7e:	3b30      	subs	r3, #48	; 0x30
 800cc80:	2b09      	cmp	r3, #9
 800cc82:	d94d      	bls.n	800cd20 <_svfiprintf_r+0x17c>
 800cc84:	b1b0      	cbz	r0, 800ccb4 <_svfiprintf_r+0x110>
 800cc86:	9207      	str	r2, [sp, #28]
 800cc88:	e014      	b.n	800ccb4 <_svfiprintf_r+0x110>
 800cc8a:	eba0 0308 	sub.w	r3, r0, r8
 800cc8e:	fa09 f303 	lsl.w	r3, r9, r3
 800cc92:	4313      	orrs	r3, r2
 800cc94:	9304      	str	r3, [sp, #16]
 800cc96:	46a2      	mov	sl, r4
 800cc98:	e7d2      	b.n	800cc40 <_svfiprintf_r+0x9c>
 800cc9a:	9b03      	ldr	r3, [sp, #12]
 800cc9c:	1d19      	adds	r1, r3, #4
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	9103      	str	r1, [sp, #12]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	bfbb      	ittet	lt
 800cca6:	425b      	neglt	r3, r3
 800cca8:	f042 0202 	orrlt.w	r2, r2, #2
 800ccac:	9307      	strge	r3, [sp, #28]
 800ccae:	9307      	strlt	r3, [sp, #28]
 800ccb0:	bfb8      	it	lt
 800ccb2:	9204      	strlt	r2, [sp, #16]
 800ccb4:	7823      	ldrb	r3, [r4, #0]
 800ccb6:	2b2e      	cmp	r3, #46	; 0x2e
 800ccb8:	d10c      	bne.n	800ccd4 <_svfiprintf_r+0x130>
 800ccba:	7863      	ldrb	r3, [r4, #1]
 800ccbc:	2b2a      	cmp	r3, #42	; 0x2a
 800ccbe:	d134      	bne.n	800cd2a <_svfiprintf_r+0x186>
 800ccc0:	9b03      	ldr	r3, [sp, #12]
 800ccc2:	1d1a      	adds	r2, r3, #4
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	9203      	str	r2, [sp, #12]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	bfb8      	it	lt
 800cccc:	f04f 33ff 	movlt.w	r3, #4294967295
 800ccd0:	3402      	adds	r4, #2
 800ccd2:	9305      	str	r3, [sp, #20]
 800ccd4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800cd9c <_svfiprintf_r+0x1f8>
 800ccd8:	7821      	ldrb	r1, [r4, #0]
 800ccda:	2203      	movs	r2, #3
 800ccdc:	4650      	mov	r0, sl
 800ccde:	f7f3 faff 	bl	80002e0 <memchr>
 800cce2:	b138      	cbz	r0, 800ccf4 <_svfiprintf_r+0x150>
 800cce4:	9b04      	ldr	r3, [sp, #16]
 800cce6:	eba0 000a 	sub.w	r0, r0, sl
 800ccea:	2240      	movs	r2, #64	; 0x40
 800ccec:	4082      	lsls	r2, r0
 800ccee:	4313      	orrs	r3, r2
 800ccf0:	3401      	adds	r4, #1
 800ccf2:	9304      	str	r3, [sp, #16]
 800ccf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccf8:	4825      	ldr	r0, [pc, #148]	; (800cd90 <_svfiprintf_r+0x1ec>)
 800ccfa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ccfe:	2206      	movs	r2, #6
 800cd00:	f7f3 faee 	bl	80002e0 <memchr>
 800cd04:	2800      	cmp	r0, #0
 800cd06:	d038      	beq.n	800cd7a <_svfiprintf_r+0x1d6>
 800cd08:	4b22      	ldr	r3, [pc, #136]	; (800cd94 <_svfiprintf_r+0x1f0>)
 800cd0a:	bb1b      	cbnz	r3, 800cd54 <_svfiprintf_r+0x1b0>
 800cd0c:	9b03      	ldr	r3, [sp, #12]
 800cd0e:	3307      	adds	r3, #7
 800cd10:	f023 0307 	bic.w	r3, r3, #7
 800cd14:	3308      	adds	r3, #8
 800cd16:	9303      	str	r3, [sp, #12]
 800cd18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd1a:	4433      	add	r3, r6
 800cd1c:	9309      	str	r3, [sp, #36]	; 0x24
 800cd1e:	e768      	b.n	800cbf2 <_svfiprintf_r+0x4e>
 800cd20:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd24:	460c      	mov	r4, r1
 800cd26:	2001      	movs	r0, #1
 800cd28:	e7a6      	b.n	800cc78 <_svfiprintf_r+0xd4>
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	3401      	adds	r4, #1
 800cd2e:	9305      	str	r3, [sp, #20]
 800cd30:	4619      	mov	r1, r3
 800cd32:	f04f 0c0a 	mov.w	ip, #10
 800cd36:	4620      	mov	r0, r4
 800cd38:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd3c:	3a30      	subs	r2, #48	; 0x30
 800cd3e:	2a09      	cmp	r2, #9
 800cd40:	d903      	bls.n	800cd4a <_svfiprintf_r+0x1a6>
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d0c6      	beq.n	800ccd4 <_svfiprintf_r+0x130>
 800cd46:	9105      	str	r1, [sp, #20]
 800cd48:	e7c4      	b.n	800ccd4 <_svfiprintf_r+0x130>
 800cd4a:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd4e:	4604      	mov	r4, r0
 800cd50:	2301      	movs	r3, #1
 800cd52:	e7f0      	b.n	800cd36 <_svfiprintf_r+0x192>
 800cd54:	ab03      	add	r3, sp, #12
 800cd56:	9300      	str	r3, [sp, #0]
 800cd58:	462a      	mov	r2, r5
 800cd5a:	4b0f      	ldr	r3, [pc, #60]	; (800cd98 <_svfiprintf_r+0x1f4>)
 800cd5c:	a904      	add	r1, sp, #16
 800cd5e:	4638      	mov	r0, r7
 800cd60:	f7fc fd42 	bl	80097e8 <_printf_float>
 800cd64:	1c42      	adds	r2, r0, #1
 800cd66:	4606      	mov	r6, r0
 800cd68:	d1d6      	bne.n	800cd18 <_svfiprintf_r+0x174>
 800cd6a:	89ab      	ldrh	r3, [r5, #12]
 800cd6c:	065b      	lsls	r3, r3, #25
 800cd6e:	f53f af2d 	bmi.w	800cbcc <_svfiprintf_r+0x28>
 800cd72:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cd74:	b01d      	add	sp, #116	; 0x74
 800cd76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd7a:	ab03      	add	r3, sp, #12
 800cd7c:	9300      	str	r3, [sp, #0]
 800cd7e:	462a      	mov	r2, r5
 800cd80:	4b05      	ldr	r3, [pc, #20]	; (800cd98 <_svfiprintf_r+0x1f4>)
 800cd82:	a904      	add	r1, sp, #16
 800cd84:	4638      	mov	r0, r7
 800cd86:	f7fc ffb7 	bl	8009cf8 <_printf_i>
 800cd8a:	e7eb      	b.n	800cd64 <_svfiprintf_r+0x1c0>
 800cd8c:	0800e0b9 	.word	0x0800e0b9
 800cd90:	0800e0c3 	.word	0x0800e0c3
 800cd94:	080097e9 	.word	0x080097e9
 800cd98:	0800caf1 	.word	0x0800caf1
 800cd9c:	0800e0bf 	.word	0x0800e0bf

0800cda0 <__sflush_r>:
 800cda0:	898a      	ldrh	r2, [r1, #12]
 800cda2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cda6:	4605      	mov	r5, r0
 800cda8:	0710      	lsls	r0, r2, #28
 800cdaa:	460c      	mov	r4, r1
 800cdac:	d458      	bmi.n	800ce60 <__sflush_r+0xc0>
 800cdae:	684b      	ldr	r3, [r1, #4]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	dc05      	bgt.n	800cdc0 <__sflush_r+0x20>
 800cdb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	dc02      	bgt.n	800cdc0 <__sflush_r+0x20>
 800cdba:	2000      	movs	r0, #0
 800cdbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cdc2:	2e00      	cmp	r6, #0
 800cdc4:	d0f9      	beq.n	800cdba <__sflush_r+0x1a>
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cdcc:	682f      	ldr	r7, [r5, #0]
 800cdce:	6a21      	ldr	r1, [r4, #32]
 800cdd0:	602b      	str	r3, [r5, #0]
 800cdd2:	d032      	beq.n	800ce3a <__sflush_r+0x9a>
 800cdd4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cdd6:	89a3      	ldrh	r3, [r4, #12]
 800cdd8:	075a      	lsls	r2, r3, #29
 800cdda:	d505      	bpl.n	800cde8 <__sflush_r+0x48>
 800cddc:	6863      	ldr	r3, [r4, #4]
 800cdde:	1ac0      	subs	r0, r0, r3
 800cde0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cde2:	b10b      	cbz	r3, 800cde8 <__sflush_r+0x48>
 800cde4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cde6:	1ac0      	subs	r0, r0, r3
 800cde8:	2300      	movs	r3, #0
 800cdea:	4602      	mov	r2, r0
 800cdec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cdee:	6a21      	ldr	r1, [r4, #32]
 800cdf0:	4628      	mov	r0, r5
 800cdf2:	47b0      	blx	r6
 800cdf4:	1c43      	adds	r3, r0, #1
 800cdf6:	89a3      	ldrh	r3, [r4, #12]
 800cdf8:	d106      	bne.n	800ce08 <__sflush_r+0x68>
 800cdfa:	6829      	ldr	r1, [r5, #0]
 800cdfc:	291d      	cmp	r1, #29
 800cdfe:	d82b      	bhi.n	800ce58 <__sflush_r+0xb8>
 800ce00:	4a29      	ldr	r2, [pc, #164]	; (800cea8 <__sflush_r+0x108>)
 800ce02:	410a      	asrs	r2, r1
 800ce04:	07d6      	lsls	r6, r2, #31
 800ce06:	d427      	bmi.n	800ce58 <__sflush_r+0xb8>
 800ce08:	2200      	movs	r2, #0
 800ce0a:	6062      	str	r2, [r4, #4]
 800ce0c:	04d9      	lsls	r1, r3, #19
 800ce0e:	6922      	ldr	r2, [r4, #16]
 800ce10:	6022      	str	r2, [r4, #0]
 800ce12:	d504      	bpl.n	800ce1e <__sflush_r+0x7e>
 800ce14:	1c42      	adds	r2, r0, #1
 800ce16:	d101      	bne.n	800ce1c <__sflush_r+0x7c>
 800ce18:	682b      	ldr	r3, [r5, #0]
 800ce1a:	b903      	cbnz	r3, 800ce1e <__sflush_r+0x7e>
 800ce1c:	6560      	str	r0, [r4, #84]	; 0x54
 800ce1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce20:	602f      	str	r7, [r5, #0]
 800ce22:	2900      	cmp	r1, #0
 800ce24:	d0c9      	beq.n	800cdba <__sflush_r+0x1a>
 800ce26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ce2a:	4299      	cmp	r1, r3
 800ce2c:	d002      	beq.n	800ce34 <__sflush_r+0x94>
 800ce2e:	4628      	mov	r0, r5
 800ce30:	f7fe fa5e 	bl	800b2f0 <_free_r>
 800ce34:	2000      	movs	r0, #0
 800ce36:	6360      	str	r0, [r4, #52]	; 0x34
 800ce38:	e7c0      	b.n	800cdbc <__sflush_r+0x1c>
 800ce3a:	2301      	movs	r3, #1
 800ce3c:	4628      	mov	r0, r5
 800ce3e:	47b0      	blx	r6
 800ce40:	1c41      	adds	r1, r0, #1
 800ce42:	d1c8      	bne.n	800cdd6 <__sflush_r+0x36>
 800ce44:	682b      	ldr	r3, [r5, #0]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d0c5      	beq.n	800cdd6 <__sflush_r+0x36>
 800ce4a:	2b1d      	cmp	r3, #29
 800ce4c:	d001      	beq.n	800ce52 <__sflush_r+0xb2>
 800ce4e:	2b16      	cmp	r3, #22
 800ce50:	d101      	bne.n	800ce56 <__sflush_r+0xb6>
 800ce52:	602f      	str	r7, [r5, #0]
 800ce54:	e7b1      	b.n	800cdba <__sflush_r+0x1a>
 800ce56:	89a3      	ldrh	r3, [r4, #12]
 800ce58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce5c:	81a3      	strh	r3, [r4, #12]
 800ce5e:	e7ad      	b.n	800cdbc <__sflush_r+0x1c>
 800ce60:	690f      	ldr	r7, [r1, #16]
 800ce62:	2f00      	cmp	r7, #0
 800ce64:	d0a9      	beq.n	800cdba <__sflush_r+0x1a>
 800ce66:	0793      	lsls	r3, r2, #30
 800ce68:	680e      	ldr	r6, [r1, #0]
 800ce6a:	bf08      	it	eq
 800ce6c:	694b      	ldreq	r3, [r1, #20]
 800ce6e:	600f      	str	r7, [r1, #0]
 800ce70:	bf18      	it	ne
 800ce72:	2300      	movne	r3, #0
 800ce74:	eba6 0807 	sub.w	r8, r6, r7
 800ce78:	608b      	str	r3, [r1, #8]
 800ce7a:	f1b8 0f00 	cmp.w	r8, #0
 800ce7e:	dd9c      	ble.n	800cdba <__sflush_r+0x1a>
 800ce80:	6a21      	ldr	r1, [r4, #32]
 800ce82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ce84:	4643      	mov	r3, r8
 800ce86:	463a      	mov	r2, r7
 800ce88:	4628      	mov	r0, r5
 800ce8a:	47b0      	blx	r6
 800ce8c:	2800      	cmp	r0, #0
 800ce8e:	dc06      	bgt.n	800ce9e <__sflush_r+0xfe>
 800ce90:	89a3      	ldrh	r3, [r4, #12]
 800ce92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce96:	81a3      	strh	r3, [r4, #12]
 800ce98:	f04f 30ff 	mov.w	r0, #4294967295
 800ce9c:	e78e      	b.n	800cdbc <__sflush_r+0x1c>
 800ce9e:	4407      	add	r7, r0
 800cea0:	eba8 0800 	sub.w	r8, r8, r0
 800cea4:	e7e9      	b.n	800ce7a <__sflush_r+0xda>
 800cea6:	bf00      	nop
 800cea8:	dfbffffe 	.word	0xdfbffffe

0800ceac <_fflush_r>:
 800ceac:	b538      	push	{r3, r4, r5, lr}
 800ceae:	690b      	ldr	r3, [r1, #16]
 800ceb0:	4605      	mov	r5, r0
 800ceb2:	460c      	mov	r4, r1
 800ceb4:	b913      	cbnz	r3, 800cebc <_fflush_r+0x10>
 800ceb6:	2500      	movs	r5, #0
 800ceb8:	4628      	mov	r0, r5
 800ceba:	bd38      	pop	{r3, r4, r5, pc}
 800cebc:	b118      	cbz	r0, 800cec6 <_fflush_r+0x1a>
 800cebe:	6a03      	ldr	r3, [r0, #32]
 800cec0:	b90b      	cbnz	r3, 800cec6 <_fflush_r+0x1a>
 800cec2:	f7fd facb 	bl	800a45c <__sinit>
 800cec6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d0f3      	beq.n	800ceb6 <_fflush_r+0xa>
 800cece:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ced0:	07d0      	lsls	r0, r2, #31
 800ced2:	d404      	bmi.n	800cede <_fflush_r+0x32>
 800ced4:	0599      	lsls	r1, r3, #22
 800ced6:	d402      	bmi.n	800cede <_fflush_r+0x32>
 800ced8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ceda:	f7fd fc0a 	bl	800a6f2 <__retarget_lock_acquire_recursive>
 800cede:	4628      	mov	r0, r5
 800cee0:	4621      	mov	r1, r4
 800cee2:	f7ff ff5d 	bl	800cda0 <__sflush_r>
 800cee6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cee8:	07da      	lsls	r2, r3, #31
 800ceea:	4605      	mov	r5, r0
 800ceec:	d4e4      	bmi.n	800ceb8 <_fflush_r+0xc>
 800ceee:	89a3      	ldrh	r3, [r4, #12]
 800cef0:	059b      	lsls	r3, r3, #22
 800cef2:	d4e1      	bmi.n	800ceb8 <_fflush_r+0xc>
 800cef4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cef6:	f7fd fbfd 	bl	800a6f4 <__retarget_lock_release_recursive>
 800cefa:	e7dd      	b.n	800ceb8 <_fflush_r+0xc>

0800cefc <memmove>:
 800cefc:	4288      	cmp	r0, r1
 800cefe:	b510      	push	{r4, lr}
 800cf00:	eb01 0402 	add.w	r4, r1, r2
 800cf04:	d902      	bls.n	800cf0c <memmove+0x10>
 800cf06:	4284      	cmp	r4, r0
 800cf08:	4623      	mov	r3, r4
 800cf0a:	d807      	bhi.n	800cf1c <memmove+0x20>
 800cf0c:	1e43      	subs	r3, r0, #1
 800cf0e:	42a1      	cmp	r1, r4
 800cf10:	d008      	beq.n	800cf24 <memmove+0x28>
 800cf12:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cf16:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cf1a:	e7f8      	b.n	800cf0e <memmove+0x12>
 800cf1c:	4402      	add	r2, r0
 800cf1e:	4601      	mov	r1, r0
 800cf20:	428a      	cmp	r2, r1
 800cf22:	d100      	bne.n	800cf26 <memmove+0x2a>
 800cf24:	bd10      	pop	{r4, pc}
 800cf26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cf2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cf2e:	e7f7      	b.n	800cf20 <memmove+0x24>

0800cf30 <strncmp>:
 800cf30:	b510      	push	{r4, lr}
 800cf32:	b16a      	cbz	r2, 800cf50 <strncmp+0x20>
 800cf34:	3901      	subs	r1, #1
 800cf36:	1884      	adds	r4, r0, r2
 800cf38:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf3c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800cf40:	429a      	cmp	r2, r3
 800cf42:	d103      	bne.n	800cf4c <strncmp+0x1c>
 800cf44:	42a0      	cmp	r0, r4
 800cf46:	d001      	beq.n	800cf4c <strncmp+0x1c>
 800cf48:	2a00      	cmp	r2, #0
 800cf4a:	d1f5      	bne.n	800cf38 <strncmp+0x8>
 800cf4c:	1ad0      	subs	r0, r2, r3
 800cf4e:	bd10      	pop	{r4, pc}
 800cf50:	4610      	mov	r0, r2
 800cf52:	e7fc      	b.n	800cf4e <strncmp+0x1e>

0800cf54 <_sbrk_r>:
 800cf54:	b538      	push	{r3, r4, r5, lr}
 800cf56:	4d06      	ldr	r5, [pc, #24]	; (800cf70 <_sbrk_r+0x1c>)
 800cf58:	2300      	movs	r3, #0
 800cf5a:	4604      	mov	r4, r0
 800cf5c:	4608      	mov	r0, r1
 800cf5e:	602b      	str	r3, [r5, #0]
 800cf60:	f7f4 fd58 	bl	8001a14 <_sbrk>
 800cf64:	1c43      	adds	r3, r0, #1
 800cf66:	d102      	bne.n	800cf6e <_sbrk_r+0x1a>
 800cf68:	682b      	ldr	r3, [r5, #0]
 800cf6a:	b103      	cbz	r3, 800cf6e <_sbrk_r+0x1a>
 800cf6c:	6023      	str	r3, [r4, #0]
 800cf6e:	bd38      	pop	{r3, r4, r5, pc}
 800cf70:	24000bdc 	.word	0x24000bdc

0800cf74 <memcpy>:
 800cf74:	440a      	add	r2, r1
 800cf76:	4291      	cmp	r1, r2
 800cf78:	f100 33ff 	add.w	r3, r0, #4294967295
 800cf7c:	d100      	bne.n	800cf80 <memcpy+0xc>
 800cf7e:	4770      	bx	lr
 800cf80:	b510      	push	{r4, lr}
 800cf82:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf86:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cf8a:	4291      	cmp	r1, r2
 800cf8c:	d1f9      	bne.n	800cf82 <memcpy+0xe>
 800cf8e:	bd10      	pop	{r4, pc}

0800cf90 <nan>:
 800cf90:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cf98 <nan+0x8>
 800cf94:	4770      	bx	lr
 800cf96:	bf00      	nop
 800cf98:	00000000 	.word	0x00000000
 800cf9c:	7ff80000 	.word	0x7ff80000

0800cfa0 <__assert_func>:
 800cfa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cfa2:	4614      	mov	r4, r2
 800cfa4:	461a      	mov	r2, r3
 800cfa6:	4b09      	ldr	r3, [pc, #36]	; (800cfcc <__assert_func+0x2c>)
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	4605      	mov	r5, r0
 800cfac:	68d8      	ldr	r0, [r3, #12]
 800cfae:	b14c      	cbz	r4, 800cfc4 <__assert_func+0x24>
 800cfb0:	4b07      	ldr	r3, [pc, #28]	; (800cfd0 <__assert_func+0x30>)
 800cfb2:	9100      	str	r1, [sp, #0]
 800cfb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cfb8:	4906      	ldr	r1, [pc, #24]	; (800cfd4 <__assert_func+0x34>)
 800cfba:	462b      	mov	r3, r5
 800cfbc:	f000 fbca 	bl	800d754 <fiprintf>
 800cfc0:	f000 fbda 	bl	800d778 <abort>
 800cfc4:	4b04      	ldr	r3, [pc, #16]	; (800cfd8 <__assert_func+0x38>)
 800cfc6:	461c      	mov	r4, r3
 800cfc8:	e7f3      	b.n	800cfb2 <__assert_func+0x12>
 800cfca:	bf00      	nop
 800cfcc:	24000068 	.word	0x24000068
 800cfd0:	0800e0d2 	.word	0x0800e0d2
 800cfd4:	0800e0df 	.word	0x0800e0df
 800cfd8:	0800e10d 	.word	0x0800e10d

0800cfdc <_calloc_r>:
 800cfdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cfde:	fba1 2402 	umull	r2, r4, r1, r2
 800cfe2:	b94c      	cbnz	r4, 800cff8 <_calloc_r+0x1c>
 800cfe4:	4611      	mov	r1, r2
 800cfe6:	9201      	str	r2, [sp, #4]
 800cfe8:	f7fe f9f6 	bl	800b3d8 <_malloc_r>
 800cfec:	9a01      	ldr	r2, [sp, #4]
 800cfee:	4605      	mov	r5, r0
 800cff0:	b930      	cbnz	r0, 800d000 <_calloc_r+0x24>
 800cff2:	4628      	mov	r0, r5
 800cff4:	b003      	add	sp, #12
 800cff6:	bd30      	pop	{r4, r5, pc}
 800cff8:	220c      	movs	r2, #12
 800cffa:	6002      	str	r2, [r0, #0]
 800cffc:	2500      	movs	r5, #0
 800cffe:	e7f8      	b.n	800cff2 <_calloc_r+0x16>
 800d000:	4621      	mov	r1, r4
 800d002:	f7fd faf8 	bl	800a5f6 <memset>
 800d006:	e7f4      	b.n	800cff2 <_calloc_r+0x16>

0800d008 <rshift>:
 800d008:	6903      	ldr	r3, [r0, #16]
 800d00a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d00e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d012:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d016:	f100 0414 	add.w	r4, r0, #20
 800d01a:	dd45      	ble.n	800d0a8 <rshift+0xa0>
 800d01c:	f011 011f 	ands.w	r1, r1, #31
 800d020:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d024:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d028:	d10c      	bne.n	800d044 <rshift+0x3c>
 800d02a:	f100 0710 	add.w	r7, r0, #16
 800d02e:	4629      	mov	r1, r5
 800d030:	42b1      	cmp	r1, r6
 800d032:	d334      	bcc.n	800d09e <rshift+0x96>
 800d034:	1a9b      	subs	r3, r3, r2
 800d036:	009b      	lsls	r3, r3, #2
 800d038:	1eea      	subs	r2, r5, #3
 800d03a:	4296      	cmp	r6, r2
 800d03c:	bf38      	it	cc
 800d03e:	2300      	movcc	r3, #0
 800d040:	4423      	add	r3, r4
 800d042:	e015      	b.n	800d070 <rshift+0x68>
 800d044:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d048:	f1c1 0820 	rsb	r8, r1, #32
 800d04c:	40cf      	lsrs	r7, r1
 800d04e:	f105 0e04 	add.w	lr, r5, #4
 800d052:	46a1      	mov	r9, r4
 800d054:	4576      	cmp	r6, lr
 800d056:	46f4      	mov	ip, lr
 800d058:	d815      	bhi.n	800d086 <rshift+0x7e>
 800d05a:	1a9a      	subs	r2, r3, r2
 800d05c:	0092      	lsls	r2, r2, #2
 800d05e:	3a04      	subs	r2, #4
 800d060:	3501      	adds	r5, #1
 800d062:	42ae      	cmp	r6, r5
 800d064:	bf38      	it	cc
 800d066:	2200      	movcc	r2, #0
 800d068:	18a3      	adds	r3, r4, r2
 800d06a:	50a7      	str	r7, [r4, r2]
 800d06c:	b107      	cbz	r7, 800d070 <rshift+0x68>
 800d06e:	3304      	adds	r3, #4
 800d070:	1b1a      	subs	r2, r3, r4
 800d072:	42a3      	cmp	r3, r4
 800d074:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d078:	bf08      	it	eq
 800d07a:	2300      	moveq	r3, #0
 800d07c:	6102      	str	r2, [r0, #16]
 800d07e:	bf08      	it	eq
 800d080:	6143      	streq	r3, [r0, #20]
 800d082:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d086:	f8dc c000 	ldr.w	ip, [ip]
 800d08a:	fa0c fc08 	lsl.w	ip, ip, r8
 800d08e:	ea4c 0707 	orr.w	r7, ip, r7
 800d092:	f849 7b04 	str.w	r7, [r9], #4
 800d096:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d09a:	40cf      	lsrs	r7, r1
 800d09c:	e7da      	b.n	800d054 <rshift+0x4c>
 800d09e:	f851 cb04 	ldr.w	ip, [r1], #4
 800d0a2:	f847 cf04 	str.w	ip, [r7, #4]!
 800d0a6:	e7c3      	b.n	800d030 <rshift+0x28>
 800d0a8:	4623      	mov	r3, r4
 800d0aa:	e7e1      	b.n	800d070 <rshift+0x68>

0800d0ac <__hexdig_fun>:
 800d0ac:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d0b0:	2b09      	cmp	r3, #9
 800d0b2:	d802      	bhi.n	800d0ba <__hexdig_fun+0xe>
 800d0b4:	3820      	subs	r0, #32
 800d0b6:	b2c0      	uxtb	r0, r0
 800d0b8:	4770      	bx	lr
 800d0ba:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d0be:	2b05      	cmp	r3, #5
 800d0c0:	d801      	bhi.n	800d0c6 <__hexdig_fun+0x1a>
 800d0c2:	3847      	subs	r0, #71	; 0x47
 800d0c4:	e7f7      	b.n	800d0b6 <__hexdig_fun+0xa>
 800d0c6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d0ca:	2b05      	cmp	r3, #5
 800d0cc:	d801      	bhi.n	800d0d2 <__hexdig_fun+0x26>
 800d0ce:	3827      	subs	r0, #39	; 0x27
 800d0d0:	e7f1      	b.n	800d0b6 <__hexdig_fun+0xa>
 800d0d2:	2000      	movs	r0, #0
 800d0d4:	4770      	bx	lr
	...

0800d0d8 <__gethex>:
 800d0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0dc:	4617      	mov	r7, r2
 800d0de:	680a      	ldr	r2, [r1, #0]
 800d0e0:	b085      	sub	sp, #20
 800d0e2:	f102 0b02 	add.w	fp, r2, #2
 800d0e6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d0ea:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d0ee:	4681      	mov	r9, r0
 800d0f0:	468a      	mov	sl, r1
 800d0f2:	9302      	str	r3, [sp, #8]
 800d0f4:	32fe      	adds	r2, #254	; 0xfe
 800d0f6:	eb02 030b 	add.w	r3, r2, fp
 800d0fa:	46d8      	mov	r8, fp
 800d0fc:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800d100:	9301      	str	r3, [sp, #4]
 800d102:	2830      	cmp	r0, #48	; 0x30
 800d104:	d0f7      	beq.n	800d0f6 <__gethex+0x1e>
 800d106:	f7ff ffd1 	bl	800d0ac <__hexdig_fun>
 800d10a:	4604      	mov	r4, r0
 800d10c:	2800      	cmp	r0, #0
 800d10e:	d138      	bne.n	800d182 <__gethex+0xaa>
 800d110:	49a7      	ldr	r1, [pc, #668]	; (800d3b0 <__gethex+0x2d8>)
 800d112:	2201      	movs	r2, #1
 800d114:	4640      	mov	r0, r8
 800d116:	f7ff ff0b 	bl	800cf30 <strncmp>
 800d11a:	4606      	mov	r6, r0
 800d11c:	2800      	cmp	r0, #0
 800d11e:	d169      	bne.n	800d1f4 <__gethex+0x11c>
 800d120:	f898 0001 	ldrb.w	r0, [r8, #1]
 800d124:	465d      	mov	r5, fp
 800d126:	f7ff ffc1 	bl	800d0ac <__hexdig_fun>
 800d12a:	2800      	cmp	r0, #0
 800d12c:	d064      	beq.n	800d1f8 <__gethex+0x120>
 800d12e:	465a      	mov	r2, fp
 800d130:	7810      	ldrb	r0, [r2, #0]
 800d132:	2830      	cmp	r0, #48	; 0x30
 800d134:	4690      	mov	r8, r2
 800d136:	f102 0201 	add.w	r2, r2, #1
 800d13a:	d0f9      	beq.n	800d130 <__gethex+0x58>
 800d13c:	f7ff ffb6 	bl	800d0ac <__hexdig_fun>
 800d140:	2301      	movs	r3, #1
 800d142:	fab0 f480 	clz	r4, r0
 800d146:	0964      	lsrs	r4, r4, #5
 800d148:	465e      	mov	r6, fp
 800d14a:	9301      	str	r3, [sp, #4]
 800d14c:	4642      	mov	r2, r8
 800d14e:	4615      	mov	r5, r2
 800d150:	3201      	adds	r2, #1
 800d152:	7828      	ldrb	r0, [r5, #0]
 800d154:	f7ff ffaa 	bl	800d0ac <__hexdig_fun>
 800d158:	2800      	cmp	r0, #0
 800d15a:	d1f8      	bne.n	800d14e <__gethex+0x76>
 800d15c:	4994      	ldr	r1, [pc, #592]	; (800d3b0 <__gethex+0x2d8>)
 800d15e:	2201      	movs	r2, #1
 800d160:	4628      	mov	r0, r5
 800d162:	f7ff fee5 	bl	800cf30 <strncmp>
 800d166:	b978      	cbnz	r0, 800d188 <__gethex+0xb0>
 800d168:	b946      	cbnz	r6, 800d17c <__gethex+0xa4>
 800d16a:	1c6e      	adds	r6, r5, #1
 800d16c:	4632      	mov	r2, r6
 800d16e:	4615      	mov	r5, r2
 800d170:	3201      	adds	r2, #1
 800d172:	7828      	ldrb	r0, [r5, #0]
 800d174:	f7ff ff9a 	bl	800d0ac <__hexdig_fun>
 800d178:	2800      	cmp	r0, #0
 800d17a:	d1f8      	bne.n	800d16e <__gethex+0x96>
 800d17c:	1b73      	subs	r3, r6, r5
 800d17e:	009e      	lsls	r6, r3, #2
 800d180:	e004      	b.n	800d18c <__gethex+0xb4>
 800d182:	2400      	movs	r4, #0
 800d184:	4626      	mov	r6, r4
 800d186:	e7e1      	b.n	800d14c <__gethex+0x74>
 800d188:	2e00      	cmp	r6, #0
 800d18a:	d1f7      	bne.n	800d17c <__gethex+0xa4>
 800d18c:	782b      	ldrb	r3, [r5, #0]
 800d18e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d192:	2b50      	cmp	r3, #80	; 0x50
 800d194:	d13d      	bne.n	800d212 <__gethex+0x13a>
 800d196:	786b      	ldrb	r3, [r5, #1]
 800d198:	2b2b      	cmp	r3, #43	; 0x2b
 800d19a:	d02f      	beq.n	800d1fc <__gethex+0x124>
 800d19c:	2b2d      	cmp	r3, #45	; 0x2d
 800d19e:	d031      	beq.n	800d204 <__gethex+0x12c>
 800d1a0:	1c69      	adds	r1, r5, #1
 800d1a2:	f04f 0b00 	mov.w	fp, #0
 800d1a6:	7808      	ldrb	r0, [r1, #0]
 800d1a8:	f7ff ff80 	bl	800d0ac <__hexdig_fun>
 800d1ac:	1e42      	subs	r2, r0, #1
 800d1ae:	b2d2      	uxtb	r2, r2
 800d1b0:	2a18      	cmp	r2, #24
 800d1b2:	d82e      	bhi.n	800d212 <__gethex+0x13a>
 800d1b4:	f1a0 0210 	sub.w	r2, r0, #16
 800d1b8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d1bc:	f7ff ff76 	bl	800d0ac <__hexdig_fun>
 800d1c0:	f100 3cff 	add.w	ip, r0, #4294967295
 800d1c4:	fa5f fc8c 	uxtb.w	ip, ip
 800d1c8:	f1bc 0f18 	cmp.w	ip, #24
 800d1cc:	d91d      	bls.n	800d20a <__gethex+0x132>
 800d1ce:	f1bb 0f00 	cmp.w	fp, #0
 800d1d2:	d000      	beq.n	800d1d6 <__gethex+0xfe>
 800d1d4:	4252      	negs	r2, r2
 800d1d6:	4416      	add	r6, r2
 800d1d8:	f8ca 1000 	str.w	r1, [sl]
 800d1dc:	b1dc      	cbz	r4, 800d216 <__gethex+0x13e>
 800d1de:	9b01      	ldr	r3, [sp, #4]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	bf14      	ite	ne
 800d1e4:	f04f 0800 	movne.w	r8, #0
 800d1e8:	f04f 0806 	moveq.w	r8, #6
 800d1ec:	4640      	mov	r0, r8
 800d1ee:	b005      	add	sp, #20
 800d1f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1f4:	4645      	mov	r5, r8
 800d1f6:	4626      	mov	r6, r4
 800d1f8:	2401      	movs	r4, #1
 800d1fa:	e7c7      	b.n	800d18c <__gethex+0xb4>
 800d1fc:	f04f 0b00 	mov.w	fp, #0
 800d200:	1ca9      	adds	r1, r5, #2
 800d202:	e7d0      	b.n	800d1a6 <__gethex+0xce>
 800d204:	f04f 0b01 	mov.w	fp, #1
 800d208:	e7fa      	b.n	800d200 <__gethex+0x128>
 800d20a:	230a      	movs	r3, #10
 800d20c:	fb03 0002 	mla	r0, r3, r2, r0
 800d210:	e7d0      	b.n	800d1b4 <__gethex+0xdc>
 800d212:	4629      	mov	r1, r5
 800d214:	e7e0      	b.n	800d1d8 <__gethex+0x100>
 800d216:	eba5 0308 	sub.w	r3, r5, r8
 800d21a:	3b01      	subs	r3, #1
 800d21c:	4621      	mov	r1, r4
 800d21e:	2b07      	cmp	r3, #7
 800d220:	dc0a      	bgt.n	800d238 <__gethex+0x160>
 800d222:	4648      	mov	r0, r9
 800d224:	f7fe f964 	bl	800b4f0 <_Balloc>
 800d228:	4604      	mov	r4, r0
 800d22a:	b940      	cbnz	r0, 800d23e <__gethex+0x166>
 800d22c:	4b61      	ldr	r3, [pc, #388]	; (800d3b4 <__gethex+0x2dc>)
 800d22e:	4602      	mov	r2, r0
 800d230:	21e4      	movs	r1, #228	; 0xe4
 800d232:	4861      	ldr	r0, [pc, #388]	; (800d3b8 <__gethex+0x2e0>)
 800d234:	f7ff feb4 	bl	800cfa0 <__assert_func>
 800d238:	3101      	adds	r1, #1
 800d23a:	105b      	asrs	r3, r3, #1
 800d23c:	e7ef      	b.n	800d21e <__gethex+0x146>
 800d23e:	f100 0a14 	add.w	sl, r0, #20
 800d242:	2300      	movs	r3, #0
 800d244:	495a      	ldr	r1, [pc, #360]	; (800d3b0 <__gethex+0x2d8>)
 800d246:	f8cd a004 	str.w	sl, [sp, #4]
 800d24a:	469b      	mov	fp, r3
 800d24c:	45a8      	cmp	r8, r5
 800d24e:	d342      	bcc.n	800d2d6 <__gethex+0x1fe>
 800d250:	9801      	ldr	r0, [sp, #4]
 800d252:	f840 bb04 	str.w	fp, [r0], #4
 800d256:	eba0 000a 	sub.w	r0, r0, sl
 800d25a:	1080      	asrs	r0, r0, #2
 800d25c:	6120      	str	r0, [r4, #16]
 800d25e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800d262:	4658      	mov	r0, fp
 800d264:	f7fe fa36 	bl	800b6d4 <__hi0bits>
 800d268:	683d      	ldr	r5, [r7, #0]
 800d26a:	eba8 0000 	sub.w	r0, r8, r0
 800d26e:	42a8      	cmp	r0, r5
 800d270:	dd59      	ble.n	800d326 <__gethex+0x24e>
 800d272:	eba0 0805 	sub.w	r8, r0, r5
 800d276:	4641      	mov	r1, r8
 800d278:	4620      	mov	r0, r4
 800d27a:	f7fe fdc2 	bl	800be02 <__any_on>
 800d27e:	4683      	mov	fp, r0
 800d280:	b1b8      	cbz	r0, 800d2b2 <__gethex+0x1da>
 800d282:	f108 33ff 	add.w	r3, r8, #4294967295
 800d286:	1159      	asrs	r1, r3, #5
 800d288:	f003 021f 	and.w	r2, r3, #31
 800d28c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d290:	f04f 0b01 	mov.w	fp, #1
 800d294:	fa0b f202 	lsl.w	r2, fp, r2
 800d298:	420a      	tst	r2, r1
 800d29a:	d00a      	beq.n	800d2b2 <__gethex+0x1da>
 800d29c:	455b      	cmp	r3, fp
 800d29e:	dd06      	ble.n	800d2ae <__gethex+0x1d6>
 800d2a0:	f1a8 0102 	sub.w	r1, r8, #2
 800d2a4:	4620      	mov	r0, r4
 800d2a6:	f7fe fdac 	bl	800be02 <__any_on>
 800d2aa:	2800      	cmp	r0, #0
 800d2ac:	d138      	bne.n	800d320 <__gethex+0x248>
 800d2ae:	f04f 0b02 	mov.w	fp, #2
 800d2b2:	4641      	mov	r1, r8
 800d2b4:	4620      	mov	r0, r4
 800d2b6:	f7ff fea7 	bl	800d008 <rshift>
 800d2ba:	4446      	add	r6, r8
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	42b3      	cmp	r3, r6
 800d2c0:	da41      	bge.n	800d346 <__gethex+0x26e>
 800d2c2:	4621      	mov	r1, r4
 800d2c4:	4648      	mov	r0, r9
 800d2c6:	f7fe f953 	bl	800b570 <_Bfree>
 800d2ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	6013      	str	r3, [r2, #0]
 800d2d0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800d2d4:	e78a      	b.n	800d1ec <__gethex+0x114>
 800d2d6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800d2da:	2a2e      	cmp	r2, #46	; 0x2e
 800d2dc:	d014      	beq.n	800d308 <__gethex+0x230>
 800d2de:	2b20      	cmp	r3, #32
 800d2e0:	d106      	bne.n	800d2f0 <__gethex+0x218>
 800d2e2:	9b01      	ldr	r3, [sp, #4]
 800d2e4:	f843 bb04 	str.w	fp, [r3], #4
 800d2e8:	f04f 0b00 	mov.w	fp, #0
 800d2ec:	9301      	str	r3, [sp, #4]
 800d2ee:	465b      	mov	r3, fp
 800d2f0:	7828      	ldrb	r0, [r5, #0]
 800d2f2:	9303      	str	r3, [sp, #12]
 800d2f4:	f7ff feda 	bl	800d0ac <__hexdig_fun>
 800d2f8:	9b03      	ldr	r3, [sp, #12]
 800d2fa:	f000 000f 	and.w	r0, r0, #15
 800d2fe:	4098      	lsls	r0, r3
 800d300:	ea4b 0b00 	orr.w	fp, fp, r0
 800d304:	3304      	adds	r3, #4
 800d306:	e7a1      	b.n	800d24c <__gethex+0x174>
 800d308:	45a8      	cmp	r8, r5
 800d30a:	d8e8      	bhi.n	800d2de <__gethex+0x206>
 800d30c:	2201      	movs	r2, #1
 800d30e:	4628      	mov	r0, r5
 800d310:	9303      	str	r3, [sp, #12]
 800d312:	f7ff fe0d 	bl	800cf30 <strncmp>
 800d316:	4926      	ldr	r1, [pc, #152]	; (800d3b0 <__gethex+0x2d8>)
 800d318:	9b03      	ldr	r3, [sp, #12]
 800d31a:	2800      	cmp	r0, #0
 800d31c:	d1df      	bne.n	800d2de <__gethex+0x206>
 800d31e:	e795      	b.n	800d24c <__gethex+0x174>
 800d320:	f04f 0b03 	mov.w	fp, #3
 800d324:	e7c5      	b.n	800d2b2 <__gethex+0x1da>
 800d326:	da0b      	bge.n	800d340 <__gethex+0x268>
 800d328:	eba5 0800 	sub.w	r8, r5, r0
 800d32c:	4621      	mov	r1, r4
 800d32e:	4642      	mov	r2, r8
 800d330:	4648      	mov	r0, r9
 800d332:	f7fe fb37 	bl	800b9a4 <__lshift>
 800d336:	eba6 0608 	sub.w	r6, r6, r8
 800d33a:	4604      	mov	r4, r0
 800d33c:	f100 0a14 	add.w	sl, r0, #20
 800d340:	f04f 0b00 	mov.w	fp, #0
 800d344:	e7ba      	b.n	800d2bc <__gethex+0x1e4>
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	42b3      	cmp	r3, r6
 800d34a:	dd73      	ble.n	800d434 <__gethex+0x35c>
 800d34c:	1b9e      	subs	r6, r3, r6
 800d34e:	42b5      	cmp	r5, r6
 800d350:	dc34      	bgt.n	800d3bc <__gethex+0x2e4>
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	2b02      	cmp	r3, #2
 800d356:	d023      	beq.n	800d3a0 <__gethex+0x2c8>
 800d358:	2b03      	cmp	r3, #3
 800d35a:	d025      	beq.n	800d3a8 <__gethex+0x2d0>
 800d35c:	2b01      	cmp	r3, #1
 800d35e:	d115      	bne.n	800d38c <__gethex+0x2b4>
 800d360:	42b5      	cmp	r5, r6
 800d362:	d113      	bne.n	800d38c <__gethex+0x2b4>
 800d364:	2d01      	cmp	r5, #1
 800d366:	d10b      	bne.n	800d380 <__gethex+0x2a8>
 800d368:	9a02      	ldr	r2, [sp, #8]
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	6013      	str	r3, [r2, #0]
 800d36e:	2301      	movs	r3, #1
 800d370:	6123      	str	r3, [r4, #16]
 800d372:	f8ca 3000 	str.w	r3, [sl]
 800d376:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d378:	f04f 0862 	mov.w	r8, #98	; 0x62
 800d37c:	601c      	str	r4, [r3, #0]
 800d37e:	e735      	b.n	800d1ec <__gethex+0x114>
 800d380:	1e69      	subs	r1, r5, #1
 800d382:	4620      	mov	r0, r4
 800d384:	f7fe fd3d 	bl	800be02 <__any_on>
 800d388:	2800      	cmp	r0, #0
 800d38a:	d1ed      	bne.n	800d368 <__gethex+0x290>
 800d38c:	4621      	mov	r1, r4
 800d38e:	4648      	mov	r0, r9
 800d390:	f7fe f8ee 	bl	800b570 <_Bfree>
 800d394:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d396:	2300      	movs	r3, #0
 800d398:	6013      	str	r3, [r2, #0]
 800d39a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800d39e:	e725      	b.n	800d1ec <__gethex+0x114>
 800d3a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d1f2      	bne.n	800d38c <__gethex+0x2b4>
 800d3a6:	e7df      	b.n	800d368 <__gethex+0x290>
 800d3a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d1dc      	bne.n	800d368 <__gethex+0x290>
 800d3ae:	e7ed      	b.n	800d38c <__gethex+0x2b4>
 800d3b0:	0800df64 	.word	0x0800df64
 800d3b4:	0800ddf9 	.word	0x0800ddf9
 800d3b8:	0800e10e 	.word	0x0800e10e
 800d3bc:	f106 38ff 	add.w	r8, r6, #4294967295
 800d3c0:	f1bb 0f00 	cmp.w	fp, #0
 800d3c4:	d133      	bne.n	800d42e <__gethex+0x356>
 800d3c6:	f1b8 0f00 	cmp.w	r8, #0
 800d3ca:	d004      	beq.n	800d3d6 <__gethex+0x2fe>
 800d3cc:	4641      	mov	r1, r8
 800d3ce:	4620      	mov	r0, r4
 800d3d0:	f7fe fd17 	bl	800be02 <__any_on>
 800d3d4:	4683      	mov	fp, r0
 800d3d6:	ea4f 1268 	mov.w	r2, r8, asr #5
 800d3da:	2301      	movs	r3, #1
 800d3dc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d3e0:	f008 081f 	and.w	r8, r8, #31
 800d3e4:	fa03 f308 	lsl.w	r3, r3, r8
 800d3e8:	4213      	tst	r3, r2
 800d3ea:	4631      	mov	r1, r6
 800d3ec:	4620      	mov	r0, r4
 800d3ee:	bf18      	it	ne
 800d3f0:	f04b 0b02 	orrne.w	fp, fp, #2
 800d3f4:	1bad      	subs	r5, r5, r6
 800d3f6:	f7ff fe07 	bl	800d008 <rshift>
 800d3fa:	687e      	ldr	r6, [r7, #4]
 800d3fc:	f04f 0802 	mov.w	r8, #2
 800d400:	f1bb 0f00 	cmp.w	fp, #0
 800d404:	d04a      	beq.n	800d49c <__gethex+0x3c4>
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	2b02      	cmp	r3, #2
 800d40a:	d016      	beq.n	800d43a <__gethex+0x362>
 800d40c:	2b03      	cmp	r3, #3
 800d40e:	d018      	beq.n	800d442 <__gethex+0x36a>
 800d410:	2b01      	cmp	r3, #1
 800d412:	d109      	bne.n	800d428 <__gethex+0x350>
 800d414:	f01b 0f02 	tst.w	fp, #2
 800d418:	d006      	beq.n	800d428 <__gethex+0x350>
 800d41a:	f8da 3000 	ldr.w	r3, [sl]
 800d41e:	ea4b 0b03 	orr.w	fp, fp, r3
 800d422:	f01b 0f01 	tst.w	fp, #1
 800d426:	d10f      	bne.n	800d448 <__gethex+0x370>
 800d428:	f048 0810 	orr.w	r8, r8, #16
 800d42c:	e036      	b.n	800d49c <__gethex+0x3c4>
 800d42e:	f04f 0b01 	mov.w	fp, #1
 800d432:	e7d0      	b.n	800d3d6 <__gethex+0x2fe>
 800d434:	f04f 0801 	mov.w	r8, #1
 800d438:	e7e2      	b.n	800d400 <__gethex+0x328>
 800d43a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d43c:	f1c3 0301 	rsb	r3, r3, #1
 800d440:	930f      	str	r3, [sp, #60]	; 0x3c
 800d442:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d444:	2b00      	cmp	r3, #0
 800d446:	d0ef      	beq.n	800d428 <__gethex+0x350>
 800d448:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d44c:	f104 0214 	add.w	r2, r4, #20
 800d450:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800d454:	9301      	str	r3, [sp, #4]
 800d456:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800d45a:	2300      	movs	r3, #0
 800d45c:	4694      	mov	ip, r2
 800d45e:	f852 1b04 	ldr.w	r1, [r2], #4
 800d462:	f1b1 3fff 	cmp.w	r1, #4294967295
 800d466:	d01e      	beq.n	800d4a6 <__gethex+0x3ce>
 800d468:	3101      	adds	r1, #1
 800d46a:	f8cc 1000 	str.w	r1, [ip]
 800d46e:	f1b8 0f02 	cmp.w	r8, #2
 800d472:	f104 0214 	add.w	r2, r4, #20
 800d476:	d13d      	bne.n	800d4f4 <__gethex+0x41c>
 800d478:	683b      	ldr	r3, [r7, #0]
 800d47a:	3b01      	subs	r3, #1
 800d47c:	42ab      	cmp	r3, r5
 800d47e:	d10b      	bne.n	800d498 <__gethex+0x3c0>
 800d480:	1169      	asrs	r1, r5, #5
 800d482:	2301      	movs	r3, #1
 800d484:	f005 051f 	and.w	r5, r5, #31
 800d488:	fa03 f505 	lsl.w	r5, r3, r5
 800d48c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d490:	421d      	tst	r5, r3
 800d492:	bf18      	it	ne
 800d494:	f04f 0801 	movne.w	r8, #1
 800d498:	f048 0820 	orr.w	r8, r8, #32
 800d49c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d49e:	601c      	str	r4, [r3, #0]
 800d4a0:	9b02      	ldr	r3, [sp, #8]
 800d4a2:	601e      	str	r6, [r3, #0]
 800d4a4:	e6a2      	b.n	800d1ec <__gethex+0x114>
 800d4a6:	4290      	cmp	r0, r2
 800d4a8:	f842 3c04 	str.w	r3, [r2, #-4]
 800d4ac:	d8d6      	bhi.n	800d45c <__gethex+0x384>
 800d4ae:	68a2      	ldr	r2, [r4, #8]
 800d4b0:	4593      	cmp	fp, r2
 800d4b2:	db17      	blt.n	800d4e4 <__gethex+0x40c>
 800d4b4:	6861      	ldr	r1, [r4, #4]
 800d4b6:	4648      	mov	r0, r9
 800d4b8:	3101      	adds	r1, #1
 800d4ba:	f7fe f819 	bl	800b4f0 <_Balloc>
 800d4be:	4682      	mov	sl, r0
 800d4c0:	b918      	cbnz	r0, 800d4ca <__gethex+0x3f2>
 800d4c2:	4b1b      	ldr	r3, [pc, #108]	; (800d530 <__gethex+0x458>)
 800d4c4:	4602      	mov	r2, r0
 800d4c6:	2184      	movs	r1, #132	; 0x84
 800d4c8:	e6b3      	b.n	800d232 <__gethex+0x15a>
 800d4ca:	6922      	ldr	r2, [r4, #16]
 800d4cc:	3202      	adds	r2, #2
 800d4ce:	f104 010c 	add.w	r1, r4, #12
 800d4d2:	0092      	lsls	r2, r2, #2
 800d4d4:	300c      	adds	r0, #12
 800d4d6:	f7ff fd4d 	bl	800cf74 <memcpy>
 800d4da:	4621      	mov	r1, r4
 800d4dc:	4648      	mov	r0, r9
 800d4de:	f7fe f847 	bl	800b570 <_Bfree>
 800d4e2:	4654      	mov	r4, sl
 800d4e4:	6922      	ldr	r2, [r4, #16]
 800d4e6:	1c51      	adds	r1, r2, #1
 800d4e8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d4ec:	6121      	str	r1, [r4, #16]
 800d4ee:	2101      	movs	r1, #1
 800d4f0:	6151      	str	r1, [r2, #20]
 800d4f2:	e7bc      	b.n	800d46e <__gethex+0x396>
 800d4f4:	6921      	ldr	r1, [r4, #16]
 800d4f6:	4559      	cmp	r1, fp
 800d4f8:	dd0b      	ble.n	800d512 <__gethex+0x43a>
 800d4fa:	2101      	movs	r1, #1
 800d4fc:	4620      	mov	r0, r4
 800d4fe:	f7ff fd83 	bl	800d008 <rshift>
 800d502:	68bb      	ldr	r3, [r7, #8]
 800d504:	3601      	adds	r6, #1
 800d506:	42b3      	cmp	r3, r6
 800d508:	f6ff aedb 	blt.w	800d2c2 <__gethex+0x1ea>
 800d50c:	f04f 0801 	mov.w	r8, #1
 800d510:	e7c2      	b.n	800d498 <__gethex+0x3c0>
 800d512:	f015 051f 	ands.w	r5, r5, #31
 800d516:	d0f9      	beq.n	800d50c <__gethex+0x434>
 800d518:	9b01      	ldr	r3, [sp, #4]
 800d51a:	441a      	add	r2, r3
 800d51c:	f1c5 0520 	rsb	r5, r5, #32
 800d520:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800d524:	f7fe f8d6 	bl	800b6d4 <__hi0bits>
 800d528:	42a8      	cmp	r0, r5
 800d52a:	dbe6      	blt.n	800d4fa <__gethex+0x422>
 800d52c:	e7ee      	b.n	800d50c <__gethex+0x434>
 800d52e:	bf00      	nop
 800d530:	0800ddf9 	.word	0x0800ddf9

0800d534 <L_shift>:
 800d534:	f1c2 0208 	rsb	r2, r2, #8
 800d538:	0092      	lsls	r2, r2, #2
 800d53a:	b570      	push	{r4, r5, r6, lr}
 800d53c:	f1c2 0620 	rsb	r6, r2, #32
 800d540:	6843      	ldr	r3, [r0, #4]
 800d542:	6804      	ldr	r4, [r0, #0]
 800d544:	fa03 f506 	lsl.w	r5, r3, r6
 800d548:	432c      	orrs	r4, r5
 800d54a:	40d3      	lsrs	r3, r2
 800d54c:	6004      	str	r4, [r0, #0]
 800d54e:	f840 3f04 	str.w	r3, [r0, #4]!
 800d552:	4288      	cmp	r0, r1
 800d554:	d3f4      	bcc.n	800d540 <L_shift+0xc>
 800d556:	bd70      	pop	{r4, r5, r6, pc}

0800d558 <__match>:
 800d558:	b530      	push	{r4, r5, lr}
 800d55a:	6803      	ldr	r3, [r0, #0]
 800d55c:	3301      	adds	r3, #1
 800d55e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d562:	b914      	cbnz	r4, 800d56a <__match+0x12>
 800d564:	6003      	str	r3, [r0, #0]
 800d566:	2001      	movs	r0, #1
 800d568:	bd30      	pop	{r4, r5, pc}
 800d56a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d56e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d572:	2d19      	cmp	r5, #25
 800d574:	bf98      	it	ls
 800d576:	3220      	addls	r2, #32
 800d578:	42a2      	cmp	r2, r4
 800d57a:	d0f0      	beq.n	800d55e <__match+0x6>
 800d57c:	2000      	movs	r0, #0
 800d57e:	e7f3      	b.n	800d568 <__match+0x10>

0800d580 <__hexnan>:
 800d580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d584:	680b      	ldr	r3, [r1, #0]
 800d586:	6801      	ldr	r1, [r0, #0]
 800d588:	115e      	asrs	r6, r3, #5
 800d58a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d58e:	f013 031f 	ands.w	r3, r3, #31
 800d592:	b087      	sub	sp, #28
 800d594:	bf18      	it	ne
 800d596:	3604      	addne	r6, #4
 800d598:	2500      	movs	r5, #0
 800d59a:	1f37      	subs	r7, r6, #4
 800d59c:	4682      	mov	sl, r0
 800d59e:	4690      	mov	r8, r2
 800d5a0:	9301      	str	r3, [sp, #4]
 800d5a2:	f846 5c04 	str.w	r5, [r6, #-4]
 800d5a6:	46b9      	mov	r9, r7
 800d5a8:	463c      	mov	r4, r7
 800d5aa:	9502      	str	r5, [sp, #8]
 800d5ac:	46ab      	mov	fp, r5
 800d5ae:	784a      	ldrb	r2, [r1, #1]
 800d5b0:	1c4b      	adds	r3, r1, #1
 800d5b2:	9303      	str	r3, [sp, #12]
 800d5b4:	b342      	cbz	r2, 800d608 <__hexnan+0x88>
 800d5b6:	4610      	mov	r0, r2
 800d5b8:	9105      	str	r1, [sp, #20]
 800d5ba:	9204      	str	r2, [sp, #16]
 800d5bc:	f7ff fd76 	bl	800d0ac <__hexdig_fun>
 800d5c0:	2800      	cmp	r0, #0
 800d5c2:	d14f      	bne.n	800d664 <__hexnan+0xe4>
 800d5c4:	9a04      	ldr	r2, [sp, #16]
 800d5c6:	9905      	ldr	r1, [sp, #20]
 800d5c8:	2a20      	cmp	r2, #32
 800d5ca:	d818      	bhi.n	800d5fe <__hexnan+0x7e>
 800d5cc:	9b02      	ldr	r3, [sp, #8]
 800d5ce:	459b      	cmp	fp, r3
 800d5d0:	dd13      	ble.n	800d5fa <__hexnan+0x7a>
 800d5d2:	454c      	cmp	r4, r9
 800d5d4:	d206      	bcs.n	800d5e4 <__hexnan+0x64>
 800d5d6:	2d07      	cmp	r5, #7
 800d5d8:	dc04      	bgt.n	800d5e4 <__hexnan+0x64>
 800d5da:	462a      	mov	r2, r5
 800d5dc:	4649      	mov	r1, r9
 800d5de:	4620      	mov	r0, r4
 800d5e0:	f7ff ffa8 	bl	800d534 <L_shift>
 800d5e4:	4544      	cmp	r4, r8
 800d5e6:	d950      	bls.n	800d68a <__hexnan+0x10a>
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	f1a4 0904 	sub.w	r9, r4, #4
 800d5ee:	f844 3c04 	str.w	r3, [r4, #-4]
 800d5f2:	f8cd b008 	str.w	fp, [sp, #8]
 800d5f6:	464c      	mov	r4, r9
 800d5f8:	461d      	mov	r5, r3
 800d5fa:	9903      	ldr	r1, [sp, #12]
 800d5fc:	e7d7      	b.n	800d5ae <__hexnan+0x2e>
 800d5fe:	2a29      	cmp	r2, #41	; 0x29
 800d600:	d155      	bne.n	800d6ae <__hexnan+0x12e>
 800d602:	3102      	adds	r1, #2
 800d604:	f8ca 1000 	str.w	r1, [sl]
 800d608:	f1bb 0f00 	cmp.w	fp, #0
 800d60c:	d04f      	beq.n	800d6ae <__hexnan+0x12e>
 800d60e:	454c      	cmp	r4, r9
 800d610:	d206      	bcs.n	800d620 <__hexnan+0xa0>
 800d612:	2d07      	cmp	r5, #7
 800d614:	dc04      	bgt.n	800d620 <__hexnan+0xa0>
 800d616:	462a      	mov	r2, r5
 800d618:	4649      	mov	r1, r9
 800d61a:	4620      	mov	r0, r4
 800d61c:	f7ff ff8a 	bl	800d534 <L_shift>
 800d620:	4544      	cmp	r4, r8
 800d622:	d934      	bls.n	800d68e <__hexnan+0x10e>
 800d624:	f1a8 0204 	sub.w	r2, r8, #4
 800d628:	4623      	mov	r3, r4
 800d62a:	f853 1b04 	ldr.w	r1, [r3], #4
 800d62e:	f842 1f04 	str.w	r1, [r2, #4]!
 800d632:	429f      	cmp	r7, r3
 800d634:	d2f9      	bcs.n	800d62a <__hexnan+0xaa>
 800d636:	1b3b      	subs	r3, r7, r4
 800d638:	f023 0303 	bic.w	r3, r3, #3
 800d63c:	3304      	adds	r3, #4
 800d63e:	3e03      	subs	r6, #3
 800d640:	3401      	adds	r4, #1
 800d642:	42a6      	cmp	r6, r4
 800d644:	bf38      	it	cc
 800d646:	2304      	movcc	r3, #4
 800d648:	4443      	add	r3, r8
 800d64a:	2200      	movs	r2, #0
 800d64c:	f843 2b04 	str.w	r2, [r3], #4
 800d650:	429f      	cmp	r7, r3
 800d652:	d2fb      	bcs.n	800d64c <__hexnan+0xcc>
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	b91b      	cbnz	r3, 800d660 <__hexnan+0xe0>
 800d658:	4547      	cmp	r7, r8
 800d65a:	d126      	bne.n	800d6aa <__hexnan+0x12a>
 800d65c:	2301      	movs	r3, #1
 800d65e:	603b      	str	r3, [r7, #0]
 800d660:	2005      	movs	r0, #5
 800d662:	e025      	b.n	800d6b0 <__hexnan+0x130>
 800d664:	3501      	adds	r5, #1
 800d666:	2d08      	cmp	r5, #8
 800d668:	f10b 0b01 	add.w	fp, fp, #1
 800d66c:	dd06      	ble.n	800d67c <__hexnan+0xfc>
 800d66e:	4544      	cmp	r4, r8
 800d670:	d9c3      	bls.n	800d5fa <__hexnan+0x7a>
 800d672:	2300      	movs	r3, #0
 800d674:	f844 3c04 	str.w	r3, [r4, #-4]
 800d678:	2501      	movs	r5, #1
 800d67a:	3c04      	subs	r4, #4
 800d67c:	6822      	ldr	r2, [r4, #0]
 800d67e:	f000 000f 	and.w	r0, r0, #15
 800d682:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d686:	6020      	str	r0, [r4, #0]
 800d688:	e7b7      	b.n	800d5fa <__hexnan+0x7a>
 800d68a:	2508      	movs	r5, #8
 800d68c:	e7b5      	b.n	800d5fa <__hexnan+0x7a>
 800d68e:	9b01      	ldr	r3, [sp, #4]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d0df      	beq.n	800d654 <__hexnan+0xd4>
 800d694:	f1c3 0320 	rsb	r3, r3, #32
 800d698:	f04f 32ff 	mov.w	r2, #4294967295
 800d69c:	40da      	lsrs	r2, r3
 800d69e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d6a2:	4013      	ands	r3, r2
 800d6a4:	f846 3c04 	str.w	r3, [r6, #-4]
 800d6a8:	e7d4      	b.n	800d654 <__hexnan+0xd4>
 800d6aa:	3f04      	subs	r7, #4
 800d6ac:	e7d2      	b.n	800d654 <__hexnan+0xd4>
 800d6ae:	2004      	movs	r0, #4
 800d6b0:	b007      	add	sp, #28
 800d6b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d6b6 <__ascii_mbtowc>:
 800d6b6:	b082      	sub	sp, #8
 800d6b8:	b901      	cbnz	r1, 800d6bc <__ascii_mbtowc+0x6>
 800d6ba:	a901      	add	r1, sp, #4
 800d6bc:	b142      	cbz	r2, 800d6d0 <__ascii_mbtowc+0x1a>
 800d6be:	b14b      	cbz	r3, 800d6d4 <__ascii_mbtowc+0x1e>
 800d6c0:	7813      	ldrb	r3, [r2, #0]
 800d6c2:	600b      	str	r3, [r1, #0]
 800d6c4:	7812      	ldrb	r2, [r2, #0]
 800d6c6:	1e10      	subs	r0, r2, #0
 800d6c8:	bf18      	it	ne
 800d6ca:	2001      	movne	r0, #1
 800d6cc:	b002      	add	sp, #8
 800d6ce:	4770      	bx	lr
 800d6d0:	4610      	mov	r0, r2
 800d6d2:	e7fb      	b.n	800d6cc <__ascii_mbtowc+0x16>
 800d6d4:	f06f 0001 	mvn.w	r0, #1
 800d6d8:	e7f8      	b.n	800d6cc <__ascii_mbtowc+0x16>

0800d6da <_realloc_r>:
 800d6da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6de:	4680      	mov	r8, r0
 800d6e0:	4614      	mov	r4, r2
 800d6e2:	460e      	mov	r6, r1
 800d6e4:	b921      	cbnz	r1, 800d6f0 <_realloc_r+0x16>
 800d6e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d6ea:	4611      	mov	r1, r2
 800d6ec:	f7fd be74 	b.w	800b3d8 <_malloc_r>
 800d6f0:	b92a      	cbnz	r2, 800d6fe <_realloc_r+0x24>
 800d6f2:	f7fd fdfd 	bl	800b2f0 <_free_r>
 800d6f6:	4625      	mov	r5, r4
 800d6f8:	4628      	mov	r0, r5
 800d6fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6fe:	f000 f842 	bl	800d786 <_malloc_usable_size_r>
 800d702:	4284      	cmp	r4, r0
 800d704:	4607      	mov	r7, r0
 800d706:	d802      	bhi.n	800d70e <_realloc_r+0x34>
 800d708:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d70c:	d812      	bhi.n	800d734 <_realloc_r+0x5a>
 800d70e:	4621      	mov	r1, r4
 800d710:	4640      	mov	r0, r8
 800d712:	f7fd fe61 	bl	800b3d8 <_malloc_r>
 800d716:	4605      	mov	r5, r0
 800d718:	2800      	cmp	r0, #0
 800d71a:	d0ed      	beq.n	800d6f8 <_realloc_r+0x1e>
 800d71c:	42bc      	cmp	r4, r7
 800d71e:	4622      	mov	r2, r4
 800d720:	4631      	mov	r1, r6
 800d722:	bf28      	it	cs
 800d724:	463a      	movcs	r2, r7
 800d726:	f7ff fc25 	bl	800cf74 <memcpy>
 800d72a:	4631      	mov	r1, r6
 800d72c:	4640      	mov	r0, r8
 800d72e:	f7fd fddf 	bl	800b2f0 <_free_r>
 800d732:	e7e1      	b.n	800d6f8 <_realloc_r+0x1e>
 800d734:	4635      	mov	r5, r6
 800d736:	e7df      	b.n	800d6f8 <_realloc_r+0x1e>

0800d738 <__ascii_wctomb>:
 800d738:	b149      	cbz	r1, 800d74e <__ascii_wctomb+0x16>
 800d73a:	2aff      	cmp	r2, #255	; 0xff
 800d73c:	bf85      	ittet	hi
 800d73e:	238a      	movhi	r3, #138	; 0x8a
 800d740:	6003      	strhi	r3, [r0, #0]
 800d742:	700a      	strbls	r2, [r1, #0]
 800d744:	f04f 30ff 	movhi.w	r0, #4294967295
 800d748:	bf98      	it	ls
 800d74a:	2001      	movls	r0, #1
 800d74c:	4770      	bx	lr
 800d74e:	4608      	mov	r0, r1
 800d750:	4770      	bx	lr
	...

0800d754 <fiprintf>:
 800d754:	b40e      	push	{r1, r2, r3}
 800d756:	b503      	push	{r0, r1, lr}
 800d758:	4601      	mov	r1, r0
 800d75a:	ab03      	add	r3, sp, #12
 800d75c:	4805      	ldr	r0, [pc, #20]	; (800d774 <fiprintf+0x20>)
 800d75e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d762:	6800      	ldr	r0, [r0, #0]
 800d764:	9301      	str	r3, [sp, #4]
 800d766:	f000 f83f 	bl	800d7e8 <_vfiprintf_r>
 800d76a:	b002      	add	sp, #8
 800d76c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d770:	b003      	add	sp, #12
 800d772:	4770      	bx	lr
 800d774:	24000068 	.word	0x24000068

0800d778 <abort>:
 800d778:	b508      	push	{r3, lr}
 800d77a:	2006      	movs	r0, #6
 800d77c:	f000 fa0c 	bl	800db98 <raise>
 800d780:	2001      	movs	r0, #1
 800d782:	f7f4 f8cf 	bl	8001924 <_exit>

0800d786 <_malloc_usable_size_r>:
 800d786:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d78a:	1f18      	subs	r0, r3, #4
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	bfbc      	itt	lt
 800d790:	580b      	ldrlt	r3, [r1, r0]
 800d792:	18c0      	addlt	r0, r0, r3
 800d794:	4770      	bx	lr

0800d796 <__sfputc_r>:
 800d796:	6893      	ldr	r3, [r2, #8]
 800d798:	3b01      	subs	r3, #1
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	b410      	push	{r4}
 800d79e:	6093      	str	r3, [r2, #8]
 800d7a0:	da08      	bge.n	800d7b4 <__sfputc_r+0x1e>
 800d7a2:	6994      	ldr	r4, [r2, #24]
 800d7a4:	42a3      	cmp	r3, r4
 800d7a6:	db01      	blt.n	800d7ac <__sfputc_r+0x16>
 800d7a8:	290a      	cmp	r1, #10
 800d7aa:	d103      	bne.n	800d7b4 <__sfputc_r+0x1e>
 800d7ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d7b0:	f000 b934 	b.w	800da1c <__swbuf_r>
 800d7b4:	6813      	ldr	r3, [r2, #0]
 800d7b6:	1c58      	adds	r0, r3, #1
 800d7b8:	6010      	str	r0, [r2, #0]
 800d7ba:	7019      	strb	r1, [r3, #0]
 800d7bc:	4608      	mov	r0, r1
 800d7be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d7c2:	4770      	bx	lr

0800d7c4 <__sfputs_r>:
 800d7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7c6:	4606      	mov	r6, r0
 800d7c8:	460f      	mov	r7, r1
 800d7ca:	4614      	mov	r4, r2
 800d7cc:	18d5      	adds	r5, r2, r3
 800d7ce:	42ac      	cmp	r4, r5
 800d7d0:	d101      	bne.n	800d7d6 <__sfputs_r+0x12>
 800d7d2:	2000      	movs	r0, #0
 800d7d4:	e007      	b.n	800d7e6 <__sfputs_r+0x22>
 800d7d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7da:	463a      	mov	r2, r7
 800d7dc:	4630      	mov	r0, r6
 800d7de:	f7ff ffda 	bl	800d796 <__sfputc_r>
 800d7e2:	1c43      	adds	r3, r0, #1
 800d7e4:	d1f3      	bne.n	800d7ce <__sfputs_r+0xa>
 800d7e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d7e8 <_vfiprintf_r>:
 800d7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7ec:	460d      	mov	r5, r1
 800d7ee:	b09d      	sub	sp, #116	; 0x74
 800d7f0:	4614      	mov	r4, r2
 800d7f2:	4698      	mov	r8, r3
 800d7f4:	4606      	mov	r6, r0
 800d7f6:	b118      	cbz	r0, 800d800 <_vfiprintf_r+0x18>
 800d7f8:	6a03      	ldr	r3, [r0, #32]
 800d7fa:	b90b      	cbnz	r3, 800d800 <_vfiprintf_r+0x18>
 800d7fc:	f7fc fe2e 	bl	800a45c <__sinit>
 800d800:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d802:	07d9      	lsls	r1, r3, #31
 800d804:	d405      	bmi.n	800d812 <_vfiprintf_r+0x2a>
 800d806:	89ab      	ldrh	r3, [r5, #12]
 800d808:	059a      	lsls	r2, r3, #22
 800d80a:	d402      	bmi.n	800d812 <_vfiprintf_r+0x2a>
 800d80c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d80e:	f7fc ff70 	bl	800a6f2 <__retarget_lock_acquire_recursive>
 800d812:	89ab      	ldrh	r3, [r5, #12]
 800d814:	071b      	lsls	r3, r3, #28
 800d816:	d501      	bpl.n	800d81c <_vfiprintf_r+0x34>
 800d818:	692b      	ldr	r3, [r5, #16]
 800d81a:	b99b      	cbnz	r3, 800d844 <_vfiprintf_r+0x5c>
 800d81c:	4629      	mov	r1, r5
 800d81e:	4630      	mov	r0, r6
 800d820:	f000 f93a 	bl	800da98 <__swsetup_r>
 800d824:	b170      	cbz	r0, 800d844 <_vfiprintf_r+0x5c>
 800d826:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d828:	07dc      	lsls	r4, r3, #31
 800d82a:	d504      	bpl.n	800d836 <_vfiprintf_r+0x4e>
 800d82c:	f04f 30ff 	mov.w	r0, #4294967295
 800d830:	b01d      	add	sp, #116	; 0x74
 800d832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d836:	89ab      	ldrh	r3, [r5, #12]
 800d838:	0598      	lsls	r0, r3, #22
 800d83a:	d4f7      	bmi.n	800d82c <_vfiprintf_r+0x44>
 800d83c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d83e:	f7fc ff59 	bl	800a6f4 <__retarget_lock_release_recursive>
 800d842:	e7f3      	b.n	800d82c <_vfiprintf_r+0x44>
 800d844:	2300      	movs	r3, #0
 800d846:	9309      	str	r3, [sp, #36]	; 0x24
 800d848:	2320      	movs	r3, #32
 800d84a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d84e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d852:	2330      	movs	r3, #48	; 0x30
 800d854:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800da08 <_vfiprintf_r+0x220>
 800d858:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d85c:	f04f 0901 	mov.w	r9, #1
 800d860:	4623      	mov	r3, r4
 800d862:	469a      	mov	sl, r3
 800d864:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d868:	b10a      	cbz	r2, 800d86e <_vfiprintf_r+0x86>
 800d86a:	2a25      	cmp	r2, #37	; 0x25
 800d86c:	d1f9      	bne.n	800d862 <_vfiprintf_r+0x7a>
 800d86e:	ebba 0b04 	subs.w	fp, sl, r4
 800d872:	d00b      	beq.n	800d88c <_vfiprintf_r+0xa4>
 800d874:	465b      	mov	r3, fp
 800d876:	4622      	mov	r2, r4
 800d878:	4629      	mov	r1, r5
 800d87a:	4630      	mov	r0, r6
 800d87c:	f7ff ffa2 	bl	800d7c4 <__sfputs_r>
 800d880:	3001      	adds	r0, #1
 800d882:	f000 80a9 	beq.w	800d9d8 <_vfiprintf_r+0x1f0>
 800d886:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d888:	445a      	add	r2, fp
 800d88a:	9209      	str	r2, [sp, #36]	; 0x24
 800d88c:	f89a 3000 	ldrb.w	r3, [sl]
 800d890:	2b00      	cmp	r3, #0
 800d892:	f000 80a1 	beq.w	800d9d8 <_vfiprintf_r+0x1f0>
 800d896:	2300      	movs	r3, #0
 800d898:	f04f 32ff 	mov.w	r2, #4294967295
 800d89c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d8a0:	f10a 0a01 	add.w	sl, sl, #1
 800d8a4:	9304      	str	r3, [sp, #16]
 800d8a6:	9307      	str	r3, [sp, #28]
 800d8a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d8ac:	931a      	str	r3, [sp, #104]	; 0x68
 800d8ae:	4654      	mov	r4, sl
 800d8b0:	2205      	movs	r2, #5
 800d8b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8b6:	4854      	ldr	r0, [pc, #336]	; (800da08 <_vfiprintf_r+0x220>)
 800d8b8:	f7f2 fd12 	bl	80002e0 <memchr>
 800d8bc:	9a04      	ldr	r2, [sp, #16]
 800d8be:	b9d8      	cbnz	r0, 800d8f8 <_vfiprintf_r+0x110>
 800d8c0:	06d1      	lsls	r1, r2, #27
 800d8c2:	bf44      	itt	mi
 800d8c4:	2320      	movmi	r3, #32
 800d8c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d8ca:	0713      	lsls	r3, r2, #28
 800d8cc:	bf44      	itt	mi
 800d8ce:	232b      	movmi	r3, #43	; 0x2b
 800d8d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d8d4:	f89a 3000 	ldrb.w	r3, [sl]
 800d8d8:	2b2a      	cmp	r3, #42	; 0x2a
 800d8da:	d015      	beq.n	800d908 <_vfiprintf_r+0x120>
 800d8dc:	9a07      	ldr	r2, [sp, #28]
 800d8de:	4654      	mov	r4, sl
 800d8e0:	2000      	movs	r0, #0
 800d8e2:	f04f 0c0a 	mov.w	ip, #10
 800d8e6:	4621      	mov	r1, r4
 800d8e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d8ec:	3b30      	subs	r3, #48	; 0x30
 800d8ee:	2b09      	cmp	r3, #9
 800d8f0:	d94d      	bls.n	800d98e <_vfiprintf_r+0x1a6>
 800d8f2:	b1b0      	cbz	r0, 800d922 <_vfiprintf_r+0x13a>
 800d8f4:	9207      	str	r2, [sp, #28]
 800d8f6:	e014      	b.n	800d922 <_vfiprintf_r+0x13a>
 800d8f8:	eba0 0308 	sub.w	r3, r0, r8
 800d8fc:	fa09 f303 	lsl.w	r3, r9, r3
 800d900:	4313      	orrs	r3, r2
 800d902:	9304      	str	r3, [sp, #16]
 800d904:	46a2      	mov	sl, r4
 800d906:	e7d2      	b.n	800d8ae <_vfiprintf_r+0xc6>
 800d908:	9b03      	ldr	r3, [sp, #12]
 800d90a:	1d19      	adds	r1, r3, #4
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	9103      	str	r1, [sp, #12]
 800d910:	2b00      	cmp	r3, #0
 800d912:	bfbb      	ittet	lt
 800d914:	425b      	neglt	r3, r3
 800d916:	f042 0202 	orrlt.w	r2, r2, #2
 800d91a:	9307      	strge	r3, [sp, #28]
 800d91c:	9307      	strlt	r3, [sp, #28]
 800d91e:	bfb8      	it	lt
 800d920:	9204      	strlt	r2, [sp, #16]
 800d922:	7823      	ldrb	r3, [r4, #0]
 800d924:	2b2e      	cmp	r3, #46	; 0x2e
 800d926:	d10c      	bne.n	800d942 <_vfiprintf_r+0x15a>
 800d928:	7863      	ldrb	r3, [r4, #1]
 800d92a:	2b2a      	cmp	r3, #42	; 0x2a
 800d92c:	d134      	bne.n	800d998 <_vfiprintf_r+0x1b0>
 800d92e:	9b03      	ldr	r3, [sp, #12]
 800d930:	1d1a      	adds	r2, r3, #4
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	9203      	str	r2, [sp, #12]
 800d936:	2b00      	cmp	r3, #0
 800d938:	bfb8      	it	lt
 800d93a:	f04f 33ff 	movlt.w	r3, #4294967295
 800d93e:	3402      	adds	r4, #2
 800d940:	9305      	str	r3, [sp, #20]
 800d942:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800da18 <_vfiprintf_r+0x230>
 800d946:	7821      	ldrb	r1, [r4, #0]
 800d948:	2203      	movs	r2, #3
 800d94a:	4650      	mov	r0, sl
 800d94c:	f7f2 fcc8 	bl	80002e0 <memchr>
 800d950:	b138      	cbz	r0, 800d962 <_vfiprintf_r+0x17a>
 800d952:	9b04      	ldr	r3, [sp, #16]
 800d954:	eba0 000a 	sub.w	r0, r0, sl
 800d958:	2240      	movs	r2, #64	; 0x40
 800d95a:	4082      	lsls	r2, r0
 800d95c:	4313      	orrs	r3, r2
 800d95e:	3401      	adds	r4, #1
 800d960:	9304      	str	r3, [sp, #16]
 800d962:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d966:	4829      	ldr	r0, [pc, #164]	; (800da0c <_vfiprintf_r+0x224>)
 800d968:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d96c:	2206      	movs	r2, #6
 800d96e:	f7f2 fcb7 	bl	80002e0 <memchr>
 800d972:	2800      	cmp	r0, #0
 800d974:	d03f      	beq.n	800d9f6 <_vfiprintf_r+0x20e>
 800d976:	4b26      	ldr	r3, [pc, #152]	; (800da10 <_vfiprintf_r+0x228>)
 800d978:	bb1b      	cbnz	r3, 800d9c2 <_vfiprintf_r+0x1da>
 800d97a:	9b03      	ldr	r3, [sp, #12]
 800d97c:	3307      	adds	r3, #7
 800d97e:	f023 0307 	bic.w	r3, r3, #7
 800d982:	3308      	adds	r3, #8
 800d984:	9303      	str	r3, [sp, #12]
 800d986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d988:	443b      	add	r3, r7
 800d98a:	9309      	str	r3, [sp, #36]	; 0x24
 800d98c:	e768      	b.n	800d860 <_vfiprintf_r+0x78>
 800d98e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d992:	460c      	mov	r4, r1
 800d994:	2001      	movs	r0, #1
 800d996:	e7a6      	b.n	800d8e6 <_vfiprintf_r+0xfe>
 800d998:	2300      	movs	r3, #0
 800d99a:	3401      	adds	r4, #1
 800d99c:	9305      	str	r3, [sp, #20]
 800d99e:	4619      	mov	r1, r3
 800d9a0:	f04f 0c0a 	mov.w	ip, #10
 800d9a4:	4620      	mov	r0, r4
 800d9a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d9aa:	3a30      	subs	r2, #48	; 0x30
 800d9ac:	2a09      	cmp	r2, #9
 800d9ae:	d903      	bls.n	800d9b8 <_vfiprintf_r+0x1d0>
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d0c6      	beq.n	800d942 <_vfiprintf_r+0x15a>
 800d9b4:	9105      	str	r1, [sp, #20]
 800d9b6:	e7c4      	b.n	800d942 <_vfiprintf_r+0x15a>
 800d9b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d9bc:	4604      	mov	r4, r0
 800d9be:	2301      	movs	r3, #1
 800d9c0:	e7f0      	b.n	800d9a4 <_vfiprintf_r+0x1bc>
 800d9c2:	ab03      	add	r3, sp, #12
 800d9c4:	9300      	str	r3, [sp, #0]
 800d9c6:	462a      	mov	r2, r5
 800d9c8:	4b12      	ldr	r3, [pc, #72]	; (800da14 <_vfiprintf_r+0x22c>)
 800d9ca:	a904      	add	r1, sp, #16
 800d9cc:	4630      	mov	r0, r6
 800d9ce:	f7fb ff0b 	bl	80097e8 <_printf_float>
 800d9d2:	4607      	mov	r7, r0
 800d9d4:	1c78      	adds	r0, r7, #1
 800d9d6:	d1d6      	bne.n	800d986 <_vfiprintf_r+0x19e>
 800d9d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d9da:	07d9      	lsls	r1, r3, #31
 800d9dc:	d405      	bmi.n	800d9ea <_vfiprintf_r+0x202>
 800d9de:	89ab      	ldrh	r3, [r5, #12]
 800d9e0:	059a      	lsls	r2, r3, #22
 800d9e2:	d402      	bmi.n	800d9ea <_vfiprintf_r+0x202>
 800d9e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d9e6:	f7fc fe85 	bl	800a6f4 <__retarget_lock_release_recursive>
 800d9ea:	89ab      	ldrh	r3, [r5, #12]
 800d9ec:	065b      	lsls	r3, r3, #25
 800d9ee:	f53f af1d 	bmi.w	800d82c <_vfiprintf_r+0x44>
 800d9f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d9f4:	e71c      	b.n	800d830 <_vfiprintf_r+0x48>
 800d9f6:	ab03      	add	r3, sp, #12
 800d9f8:	9300      	str	r3, [sp, #0]
 800d9fa:	462a      	mov	r2, r5
 800d9fc:	4b05      	ldr	r3, [pc, #20]	; (800da14 <_vfiprintf_r+0x22c>)
 800d9fe:	a904      	add	r1, sp, #16
 800da00:	4630      	mov	r0, r6
 800da02:	f7fc f979 	bl	8009cf8 <_printf_i>
 800da06:	e7e4      	b.n	800d9d2 <_vfiprintf_r+0x1ea>
 800da08:	0800e0b9 	.word	0x0800e0b9
 800da0c:	0800e0c3 	.word	0x0800e0c3
 800da10:	080097e9 	.word	0x080097e9
 800da14:	0800d7c5 	.word	0x0800d7c5
 800da18:	0800e0bf 	.word	0x0800e0bf

0800da1c <__swbuf_r>:
 800da1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da1e:	460e      	mov	r6, r1
 800da20:	4614      	mov	r4, r2
 800da22:	4605      	mov	r5, r0
 800da24:	b118      	cbz	r0, 800da2e <__swbuf_r+0x12>
 800da26:	6a03      	ldr	r3, [r0, #32]
 800da28:	b90b      	cbnz	r3, 800da2e <__swbuf_r+0x12>
 800da2a:	f7fc fd17 	bl	800a45c <__sinit>
 800da2e:	69a3      	ldr	r3, [r4, #24]
 800da30:	60a3      	str	r3, [r4, #8]
 800da32:	89a3      	ldrh	r3, [r4, #12]
 800da34:	071a      	lsls	r2, r3, #28
 800da36:	d525      	bpl.n	800da84 <__swbuf_r+0x68>
 800da38:	6923      	ldr	r3, [r4, #16]
 800da3a:	b31b      	cbz	r3, 800da84 <__swbuf_r+0x68>
 800da3c:	6823      	ldr	r3, [r4, #0]
 800da3e:	6922      	ldr	r2, [r4, #16]
 800da40:	1a98      	subs	r0, r3, r2
 800da42:	6963      	ldr	r3, [r4, #20]
 800da44:	b2f6      	uxtb	r6, r6
 800da46:	4283      	cmp	r3, r0
 800da48:	4637      	mov	r7, r6
 800da4a:	dc04      	bgt.n	800da56 <__swbuf_r+0x3a>
 800da4c:	4621      	mov	r1, r4
 800da4e:	4628      	mov	r0, r5
 800da50:	f7ff fa2c 	bl	800ceac <_fflush_r>
 800da54:	b9e0      	cbnz	r0, 800da90 <__swbuf_r+0x74>
 800da56:	68a3      	ldr	r3, [r4, #8]
 800da58:	3b01      	subs	r3, #1
 800da5a:	60a3      	str	r3, [r4, #8]
 800da5c:	6823      	ldr	r3, [r4, #0]
 800da5e:	1c5a      	adds	r2, r3, #1
 800da60:	6022      	str	r2, [r4, #0]
 800da62:	701e      	strb	r6, [r3, #0]
 800da64:	6962      	ldr	r2, [r4, #20]
 800da66:	1c43      	adds	r3, r0, #1
 800da68:	429a      	cmp	r2, r3
 800da6a:	d004      	beq.n	800da76 <__swbuf_r+0x5a>
 800da6c:	89a3      	ldrh	r3, [r4, #12]
 800da6e:	07db      	lsls	r3, r3, #31
 800da70:	d506      	bpl.n	800da80 <__swbuf_r+0x64>
 800da72:	2e0a      	cmp	r6, #10
 800da74:	d104      	bne.n	800da80 <__swbuf_r+0x64>
 800da76:	4621      	mov	r1, r4
 800da78:	4628      	mov	r0, r5
 800da7a:	f7ff fa17 	bl	800ceac <_fflush_r>
 800da7e:	b938      	cbnz	r0, 800da90 <__swbuf_r+0x74>
 800da80:	4638      	mov	r0, r7
 800da82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da84:	4621      	mov	r1, r4
 800da86:	4628      	mov	r0, r5
 800da88:	f000 f806 	bl	800da98 <__swsetup_r>
 800da8c:	2800      	cmp	r0, #0
 800da8e:	d0d5      	beq.n	800da3c <__swbuf_r+0x20>
 800da90:	f04f 37ff 	mov.w	r7, #4294967295
 800da94:	e7f4      	b.n	800da80 <__swbuf_r+0x64>
	...

0800da98 <__swsetup_r>:
 800da98:	b538      	push	{r3, r4, r5, lr}
 800da9a:	4b2a      	ldr	r3, [pc, #168]	; (800db44 <__swsetup_r+0xac>)
 800da9c:	4605      	mov	r5, r0
 800da9e:	6818      	ldr	r0, [r3, #0]
 800daa0:	460c      	mov	r4, r1
 800daa2:	b118      	cbz	r0, 800daac <__swsetup_r+0x14>
 800daa4:	6a03      	ldr	r3, [r0, #32]
 800daa6:	b90b      	cbnz	r3, 800daac <__swsetup_r+0x14>
 800daa8:	f7fc fcd8 	bl	800a45c <__sinit>
 800daac:	89a3      	ldrh	r3, [r4, #12]
 800daae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dab2:	0718      	lsls	r0, r3, #28
 800dab4:	d422      	bmi.n	800dafc <__swsetup_r+0x64>
 800dab6:	06d9      	lsls	r1, r3, #27
 800dab8:	d407      	bmi.n	800daca <__swsetup_r+0x32>
 800daba:	2309      	movs	r3, #9
 800dabc:	602b      	str	r3, [r5, #0]
 800dabe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dac2:	81a3      	strh	r3, [r4, #12]
 800dac4:	f04f 30ff 	mov.w	r0, #4294967295
 800dac8:	e034      	b.n	800db34 <__swsetup_r+0x9c>
 800daca:	0758      	lsls	r0, r3, #29
 800dacc:	d512      	bpl.n	800daf4 <__swsetup_r+0x5c>
 800dace:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dad0:	b141      	cbz	r1, 800dae4 <__swsetup_r+0x4c>
 800dad2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dad6:	4299      	cmp	r1, r3
 800dad8:	d002      	beq.n	800dae0 <__swsetup_r+0x48>
 800dada:	4628      	mov	r0, r5
 800dadc:	f7fd fc08 	bl	800b2f0 <_free_r>
 800dae0:	2300      	movs	r3, #0
 800dae2:	6363      	str	r3, [r4, #52]	; 0x34
 800dae4:	89a3      	ldrh	r3, [r4, #12]
 800dae6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800daea:	81a3      	strh	r3, [r4, #12]
 800daec:	2300      	movs	r3, #0
 800daee:	6063      	str	r3, [r4, #4]
 800daf0:	6923      	ldr	r3, [r4, #16]
 800daf2:	6023      	str	r3, [r4, #0]
 800daf4:	89a3      	ldrh	r3, [r4, #12]
 800daf6:	f043 0308 	orr.w	r3, r3, #8
 800dafa:	81a3      	strh	r3, [r4, #12]
 800dafc:	6923      	ldr	r3, [r4, #16]
 800dafe:	b94b      	cbnz	r3, 800db14 <__swsetup_r+0x7c>
 800db00:	89a3      	ldrh	r3, [r4, #12]
 800db02:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800db06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800db0a:	d003      	beq.n	800db14 <__swsetup_r+0x7c>
 800db0c:	4621      	mov	r1, r4
 800db0e:	4628      	mov	r0, r5
 800db10:	f000 f884 	bl	800dc1c <__smakebuf_r>
 800db14:	89a0      	ldrh	r0, [r4, #12]
 800db16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800db1a:	f010 0301 	ands.w	r3, r0, #1
 800db1e:	d00a      	beq.n	800db36 <__swsetup_r+0x9e>
 800db20:	2300      	movs	r3, #0
 800db22:	60a3      	str	r3, [r4, #8]
 800db24:	6963      	ldr	r3, [r4, #20]
 800db26:	425b      	negs	r3, r3
 800db28:	61a3      	str	r3, [r4, #24]
 800db2a:	6923      	ldr	r3, [r4, #16]
 800db2c:	b943      	cbnz	r3, 800db40 <__swsetup_r+0xa8>
 800db2e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800db32:	d1c4      	bne.n	800dabe <__swsetup_r+0x26>
 800db34:	bd38      	pop	{r3, r4, r5, pc}
 800db36:	0781      	lsls	r1, r0, #30
 800db38:	bf58      	it	pl
 800db3a:	6963      	ldrpl	r3, [r4, #20]
 800db3c:	60a3      	str	r3, [r4, #8]
 800db3e:	e7f4      	b.n	800db2a <__swsetup_r+0x92>
 800db40:	2000      	movs	r0, #0
 800db42:	e7f7      	b.n	800db34 <__swsetup_r+0x9c>
 800db44:	24000068 	.word	0x24000068

0800db48 <_raise_r>:
 800db48:	291f      	cmp	r1, #31
 800db4a:	b538      	push	{r3, r4, r5, lr}
 800db4c:	4604      	mov	r4, r0
 800db4e:	460d      	mov	r5, r1
 800db50:	d904      	bls.n	800db5c <_raise_r+0x14>
 800db52:	2316      	movs	r3, #22
 800db54:	6003      	str	r3, [r0, #0]
 800db56:	f04f 30ff 	mov.w	r0, #4294967295
 800db5a:	bd38      	pop	{r3, r4, r5, pc}
 800db5c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800db5e:	b112      	cbz	r2, 800db66 <_raise_r+0x1e>
 800db60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800db64:	b94b      	cbnz	r3, 800db7a <_raise_r+0x32>
 800db66:	4620      	mov	r0, r4
 800db68:	f000 f830 	bl	800dbcc <_getpid_r>
 800db6c:	462a      	mov	r2, r5
 800db6e:	4601      	mov	r1, r0
 800db70:	4620      	mov	r0, r4
 800db72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800db76:	f000 b817 	b.w	800dba8 <_kill_r>
 800db7a:	2b01      	cmp	r3, #1
 800db7c:	d00a      	beq.n	800db94 <_raise_r+0x4c>
 800db7e:	1c59      	adds	r1, r3, #1
 800db80:	d103      	bne.n	800db8a <_raise_r+0x42>
 800db82:	2316      	movs	r3, #22
 800db84:	6003      	str	r3, [r0, #0]
 800db86:	2001      	movs	r0, #1
 800db88:	e7e7      	b.n	800db5a <_raise_r+0x12>
 800db8a:	2400      	movs	r4, #0
 800db8c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800db90:	4628      	mov	r0, r5
 800db92:	4798      	blx	r3
 800db94:	2000      	movs	r0, #0
 800db96:	e7e0      	b.n	800db5a <_raise_r+0x12>

0800db98 <raise>:
 800db98:	4b02      	ldr	r3, [pc, #8]	; (800dba4 <raise+0xc>)
 800db9a:	4601      	mov	r1, r0
 800db9c:	6818      	ldr	r0, [r3, #0]
 800db9e:	f7ff bfd3 	b.w	800db48 <_raise_r>
 800dba2:	bf00      	nop
 800dba4:	24000068 	.word	0x24000068

0800dba8 <_kill_r>:
 800dba8:	b538      	push	{r3, r4, r5, lr}
 800dbaa:	4d07      	ldr	r5, [pc, #28]	; (800dbc8 <_kill_r+0x20>)
 800dbac:	2300      	movs	r3, #0
 800dbae:	4604      	mov	r4, r0
 800dbb0:	4608      	mov	r0, r1
 800dbb2:	4611      	mov	r1, r2
 800dbb4:	602b      	str	r3, [r5, #0]
 800dbb6:	f7f3 fea5 	bl	8001904 <_kill>
 800dbba:	1c43      	adds	r3, r0, #1
 800dbbc:	d102      	bne.n	800dbc4 <_kill_r+0x1c>
 800dbbe:	682b      	ldr	r3, [r5, #0]
 800dbc0:	b103      	cbz	r3, 800dbc4 <_kill_r+0x1c>
 800dbc2:	6023      	str	r3, [r4, #0]
 800dbc4:	bd38      	pop	{r3, r4, r5, pc}
 800dbc6:	bf00      	nop
 800dbc8:	24000bdc 	.word	0x24000bdc

0800dbcc <_getpid_r>:
 800dbcc:	f7f3 be92 	b.w	80018f4 <_getpid>

0800dbd0 <__swhatbuf_r>:
 800dbd0:	b570      	push	{r4, r5, r6, lr}
 800dbd2:	460c      	mov	r4, r1
 800dbd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbd8:	2900      	cmp	r1, #0
 800dbda:	b096      	sub	sp, #88	; 0x58
 800dbdc:	4615      	mov	r5, r2
 800dbde:	461e      	mov	r6, r3
 800dbe0:	da0d      	bge.n	800dbfe <__swhatbuf_r+0x2e>
 800dbe2:	89a3      	ldrh	r3, [r4, #12]
 800dbe4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800dbe8:	f04f 0100 	mov.w	r1, #0
 800dbec:	bf0c      	ite	eq
 800dbee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800dbf2:	2340      	movne	r3, #64	; 0x40
 800dbf4:	2000      	movs	r0, #0
 800dbf6:	6031      	str	r1, [r6, #0]
 800dbf8:	602b      	str	r3, [r5, #0]
 800dbfa:	b016      	add	sp, #88	; 0x58
 800dbfc:	bd70      	pop	{r4, r5, r6, pc}
 800dbfe:	466a      	mov	r2, sp
 800dc00:	f000 f848 	bl	800dc94 <_fstat_r>
 800dc04:	2800      	cmp	r0, #0
 800dc06:	dbec      	blt.n	800dbe2 <__swhatbuf_r+0x12>
 800dc08:	9901      	ldr	r1, [sp, #4]
 800dc0a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800dc0e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800dc12:	4259      	negs	r1, r3
 800dc14:	4159      	adcs	r1, r3
 800dc16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc1a:	e7eb      	b.n	800dbf4 <__swhatbuf_r+0x24>

0800dc1c <__smakebuf_r>:
 800dc1c:	898b      	ldrh	r3, [r1, #12]
 800dc1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dc20:	079d      	lsls	r5, r3, #30
 800dc22:	4606      	mov	r6, r0
 800dc24:	460c      	mov	r4, r1
 800dc26:	d507      	bpl.n	800dc38 <__smakebuf_r+0x1c>
 800dc28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dc2c:	6023      	str	r3, [r4, #0]
 800dc2e:	6123      	str	r3, [r4, #16]
 800dc30:	2301      	movs	r3, #1
 800dc32:	6163      	str	r3, [r4, #20]
 800dc34:	b002      	add	sp, #8
 800dc36:	bd70      	pop	{r4, r5, r6, pc}
 800dc38:	ab01      	add	r3, sp, #4
 800dc3a:	466a      	mov	r2, sp
 800dc3c:	f7ff ffc8 	bl	800dbd0 <__swhatbuf_r>
 800dc40:	9900      	ldr	r1, [sp, #0]
 800dc42:	4605      	mov	r5, r0
 800dc44:	4630      	mov	r0, r6
 800dc46:	f7fd fbc7 	bl	800b3d8 <_malloc_r>
 800dc4a:	b948      	cbnz	r0, 800dc60 <__smakebuf_r+0x44>
 800dc4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc50:	059a      	lsls	r2, r3, #22
 800dc52:	d4ef      	bmi.n	800dc34 <__smakebuf_r+0x18>
 800dc54:	f023 0303 	bic.w	r3, r3, #3
 800dc58:	f043 0302 	orr.w	r3, r3, #2
 800dc5c:	81a3      	strh	r3, [r4, #12]
 800dc5e:	e7e3      	b.n	800dc28 <__smakebuf_r+0xc>
 800dc60:	89a3      	ldrh	r3, [r4, #12]
 800dc62:	6020      	str	r0, [r4, #0]
 800dc64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc68:	81a3      	strh	r3, [r4, #12]
 800dc6a:	9b00      	ldr	r3, [sp, #0]
 800dc6c:	6163      	str	r3, [r4, #20]
 800dc6e:	9b01      	ldr	r3, [sp, #4]
 800dc70:	6120      	str	r0, [r4, #16]
 800dc72:	b15b      	cbz	r3, 800dc8c <__smakebuf_r+0x70>
 800dc74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc78:	4630      	mov	r0, r6
 800dc7a:	f000 f81d 	bl	800dcb8 <_isatty_r>
 800dc7e:	b128      	cbz	r0, 800dc8c <__smakebuf_r+0x70>
 800dc80:	89a3      	ldrh	r3, [r4, #12]
 800dc82:	f023 0303 	bic.w	r3, r3, #3
 800dc86:	f043 0301 	orr.w	r3, r3, #1
 800dc8a:	81a3      	strh	r3, [r4, #12]
 800dc8c:	89a3      	ldrh	r3, [r4, #12]
 800dc8e:	431d      	orrs	r5, r3
 800dc90:	81a5      	strh	r5, [r4, #12]
 800dc92:	e7cf      	b.n	800dc34 <__smakebuf_r+0x18>

0800dc94 <_fstat_r>:
 800dc94:	b538      	push	{r3, r4, r5, lr}
 800dc96:	4d07      	ldr	r5, [pc, #28]	; (800dcb4 <_fstat_r+0x20>)
 800dc98:	2300      	movs	r3, #0
 800dc9a:	4604      	mov	r4, r0
 800dc9c:	4608      	mov	r0, r1
 800dc9e:	4611      	mov	r1, r2
 800dca0:	602b      	str	r3, [r5, #0]
 800dca2:	f7f3 fe8e 	bl	80019c2 <_fstat>
 800dca6:	1c43      	adds	r3, r0, #1
 800dca8:	d102      	bne.n	800dcb0 <_fstat_r+0x1c>
 800dcaa:	682b      	ldr	r3, [r5, #0]
 800dcac:	b103      	cbz	r3, 800dcb0 <_fstat_r+0x1c>
 800dcae:	6023      	str	r3, [r4, #0]
 800dcb0:	bd38      	pop	{r3, r4, r5, pc}
 800dcb2:	bf00      	nop
 800dcb4:	24000bdc 	.word	0x24000bdc

0800dcb8 <_isatty_r>:
 800dcb8:	b538      	push	{r3, r4, r5, lr}
 800dcba:	4d06      	ldr	r5, [pc, #24]	; (800dcd4 <_isatty_r+0x1c>)
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	4604      	mov	r4, r0
 800dcc0:	4608      	mov	r0, r1
 800dcc2:	602b      	str	r3, [r5, #0]
 800dcc4:	f7f3 fe8d 	bl	80019e2 <_isatty>
 800dcc8:	1c43      	adds	r3, r0, #1
 800dcca:	d102      	bne.n	800dcd2 <_isatty_r+0x1a>
 800dccc:	682b      	ldr	r3, [r5, #0]
 800dcce:	b103      	cbz	r3, 800dcd2 <_isatty_r+0x1a>
 800dcd0:	6023      	str	r3, [r4, #0]
 800dcd2:	bd38      	pop	{r3, r4, r5, pc}
 800dcd4:	24000bdc 	.word	0x24000bdc

0800dcd8 <_init>:
 800dcd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcda:	bf00      	nop
 800dcdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcde:	bc08      	pop	{r3}
 800dce0:	469e      	mov	lr, r3
 800dce2:	4770      	bx	lr

0800dce4 <_fini>:
 800dce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dce6:	bf00      	nop
 800dce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcea:	bc08      	pop	{r3}
 800dcec:	469e      	mov	lr, r3
 800dcee:	4770      	bx	lr
