
joystick_mulADC_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d9f0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  0800dc90  0800dc90  0001dc90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e110  0800e110  00020298  2**0
                  CONTENTS
  4 .ARM          00000008  0800e110  0800e110  0001e110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e118  0800e118  00020298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e118  0800e118  0001e118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e11c  0800e11c  0001e11c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  24000000  0800e120  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  240001d8  0800e2f8  000201d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000238  0800e358  00020238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000954  24000298  0800e3b8  00020298  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  24000bec  0800e3b8  00020bec  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020298  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000202c6  2**0
                  CONTENTS, READONLY
 15 .debug_info   0001da4a  00000000  00000000  00020309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00003253  00000000  00000000  0003dd53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001528  00000000  00000000  00040fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000104a  00000000  00000000  000424d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003d8f0  00000000  00000000  0004351a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001ad14  00000000  00000000  00080e0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00196791  00000000  00000000  0009bb1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00006f10  00000000  00000000  002322b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000070  00000000  00000000  002391c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000298 	.word	0x24000298
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800dc78 	.word	0x0800dc78

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400029c 	.word	0x2400029c
 80002dc:	0800dc78 	.word	0x0800dc78

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a8 	b.w	8000a70 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9e08      	ldr	r6, [sp, #32]
 80007ae:	460d      	mov	r5, r1
 80007b0:	4604      	mov	r4, r0
 80007b2:	460f      	mov	r7, r1
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d14a      	bne.n	800084e <__udivmoddi4+0xa6>
 80007b8:	428a      	cmp	r2, r1
 80007ba:	4694      	mov	ip, r2
 80007bc:	d965      	bls.n	800088a <__udivmoddi4+0xe2>
 80007be:	fab2 f382 	clz	r3, r2
 80007c2:	b143      	cbz	r3, 80007d6 <__udivmoddi4+0x2e>
 80007c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80007c8:	f1c3 0220 	rsb	r2, r3, #32
 80007cc:	409f      	lsls	r7, r3
 80007ce:	fa20 f202 	lsr.w	r2, r0, r2
 80007d2:	4317      	orrs	r7, r2
 80007d4:	409c      	lsls	r4, r3
 80007d6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80007da:	fa1f f58c 	uxth.w	r5, ip
 80007de:	fbb7 f1fe 	udiv	r1, r7, lr
 80007e2:	0c22      	lsrs	r2, r4, #16
 80007e4:	fb0e 7711 	mls	r7, lr, r1, r7
 80007e8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80007ec:	fb01 f005 	mul.w	r0, r1, r5
 80007f0:	4290      	cmp	r0, r2
 80007f2:	d90a      	bls.n	800080a <__udivmoddi4+0x62>
 80007f4:	eb1c 0202 	adds.w	r2, ip, r2
 80007f8:	f101 37ff 	add.w	r7, r1, #4294967295
 80007fc:	f080 811c 	bcs.w	8000a38 <__udivmoddi4+0x290>
 8000800:	4290      	cmp	r0, r2
 8000802:	f240 8119 	bls.w	8000a38 <__udivmoddi4+0x290>
 8000806:	3902      	subs	r1, #2
 8000808:	4462      	add	r2, ip
 800080a:	1a12      	subs	r2, r2, r0
 800080c:	b2a4      	uxth	r4, r4
 800080e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000812:	fb0e 2210 	mls	r2, lr, r0, r2
 8000816:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800081a:	fb00 f505 	mul.w	r5, r0, r5
 800081e:	42a5      	cmp	r5, r4
 8000820:	d90a      	bls.n	8000838 <__udivmoddi4+0x90>
 8000822:	eb1c 0404 	adds.w	r4, ip, r4
 8000826:	f100 32ff 	add.w	r2, r0, #4294967295
 800082a:	f080 8107 	bcs.w	8000a3c <__udivmoddi4+0x294>
 800082e:	42a5      	cmp	r5, r4
 8000830:	f240 8104 	bls.w	8000a3c <__udivmoddi4+0x294>
 8000834:	4464      	add	r4, ip
 8000836:	3802      	subs	r0, #2
 8000838:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800083c:	1b64      	subs	r4, r4, r5
 800083e:	2100      	movs	r1, #0
 8000840:	b11e      	cbz	r6, 800084a <__udivmoddi4+0xa2>
 8000842:	40dc      	lsrs	r4, r3
 8000844:	2300      	movs	r3, #0
 8000846:	e9c6 4300 	strd	r4, r3, [r6]
 800084a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084e:	428b      	cmp	r3, r1
 8000850:	d908      	bls.n	8000864 <__udivmoddi4+0xbc>
 8000852:	2e00      	cmp	r6, #0
 8000854:	f000 80ed 	beq.w	8000a32 <__udivmoddi4+0x28a>
 8000858:	2100      	movs	r1, #0
 800085a:	e9c6 0500 	strd	r0, r5, [r6]
 800085e:	4608      	mov	r0, r1
 8000860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000864:	fab3 f183 	clz	r1, r3
 8000868:	2900      	cmp	r1, #0
 800086a:	d149      	bne.n	8000900 <__udivmoddi4+0x158>
 800086c:	42ab      	cmp	r3, r5
 800086e:	d302      	bcc.n	8000876 <__udivmoddi4+0xce>
 8000870:	4282      	cmp	r2, r0
 8000872:	f200 80f8 	bhi.w	8000a66 <__udivmoddi4+0x2be>
 8000876:	1a84      	subs	r4, r0, r2
 8000878:	eb65 0203 	sbc.w	r2, r5, r3
 800087c:	2001      	movs	r0, #1
 800087e:	4617      	mov	r7, r2
 8000880:	2e00      	cmp	r6, #0
 8000882:	d0e2      	beq.n	800084a <__udivmoddi4+0xa2>
 8000884:	e9c6 4700 	strd	r4, r7, [r6]
 8000888:	e7df      	b.n	800084a <__udivmoddi4+0xa2>
 800088a:	b902      	cbnz	r2, 800088e <__udivmoddi4+0xe6>
 800088c:	deff      	udf	#255	; 0xff
 800088e:	fab2 f382 	clz	r3, r2
 8000892:	2b00      	cmp	r3, #0
 8000894:	f040 8090 	bne.w	80009b8 <__udivmoddi4+0x210>
 8000898:	1a8a      	subs	r2, r1, r2
 800089a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800089e:	fa1f fe8c 	uxth.w	lr, ip
 80008a2:	2101      	movs	r1, #1
 80008a4:	fbb2 f5f7 	udiv	r5, r2, r7
 80008a8:	fb07 2015 	mls	r0, r7, r5, r2
 80008ac:	0c22      	lsrs	r2, r4, #16
 80008ae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80008b2:	fb0e f005 	mul.w	r0, lr, r5
 80008b6:	4290      	cmp	r0, r2
 80008b8:	d908      	bls.n	80008cc <__udivmoddi4+0x124>
 80008ba:	eb1c 0202 	adds.w	r2, ip, r2
 80008be:	f105 38ff 	add.w	r8, r5, #4294967295
 80008c2:	d202      	bcs.n	80008ca <__udivmoddi4+0x122>
 80008c4:	4290      	cmp	r0, r2
 80008c6:	f200 80cb 	bhi.w	8000a60 <__udivmoddi4+0x2b8>
 80008ca:	4645      	mov	r5, r8
 80008cc:	1a12      	subs	r2, r2, r0
 80008ce:	b2a4      	uxth	r4, r4
 80008d0:	fbb2 f0f7 	udiv	r0, r2, r7
 80008d4:	fb07 2210 	mls	r2, r7, r0, r2
 80008d8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008dc:	fb0e fe00 	mul.w	lr, lr, r0
 80008e0:	45a6      	cmp	lr, r4
 80008e2:	d908      	bls.n	80008f6 <__udivmoddi4+0x14e>
 80008e4:	eb1c 0404 	adds.w	r4, ip, r4
 80008e8:	f100 32ff 	add.w	r2, r0, #4294967295
 80008ec:	d202      	bcs.n	80008f4 <__udivmoddi4+0x14c>
 80008ee:	45a6      	cmp	lr, r4
 80008f0:	f200 80bb 	bhi.w	8000a6a <__udivmoddi4+0x2c2>
 80008f4:	4610      	mov	r0, r2
 80008f6:	eba4 040e 	sub.w	r4, r4, lr
 80008fa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80008fe:	e79f      	b.n	8000840 <__udivmoddi4+0x98>
 8000900:	f1c1 0720 	rsb	r7, r1, #32
 8000904:	408b      	lsls	r3, r1
 8000906:	fa22 fc07 	lsr.w	ip, r2, r7
 800090a:	ea4c 0c03 	orr.w	ip, ip, r3
 800090e:	fa05 f401 	lsl.w	r4, r5, r1
 8000912:	fa20 f307 	lsr.w	r3, r0, r7
 8000916:	40fd      	lsrs	r5, r7
 8000918:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800091c:	4323      	orrs	r3, r4
 800091e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000922:	fa1f fe8c 	uxth.w	lr, ip
 8000926:	fb09 5518 	mls	r5, r9, r8, r5
 800092a:	0c1c      	lsrs	r4, r3, #16
 800092c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000930:	fb08 f50e 	mul.w	r5, r8, lr
 8000934:	42a5      	cmp	r5, r4
 8000936:	fa02 f201 	lsl.w	r2, r2, r1
 800093a:	fa00 f001 	lsl.w	r0, r0, r1
 800093e:	d90b      	bls.n	8000958 <__udivmoddi4+0x1b0>
 8000940:	eb1c 0404 	adds.w	r4, ip, r4
 8000944:	f108 3aff 	add.w	sl, r8, #4294967295
 8000948:	f080 8088 	bcs.w	8000a5c <__udivmoddi4+0x2b4>
 800094c:	42a5      	cmp	r5, r4
 800094e:	f240 8085 	bls.w	8000a5c <__udivmoddi4+0x2b4>
 8000952:	f1a8 0802 	sub.w	r8, r8, #2
 8000956:	4464      	add	r4, ip
 8000958:	1b64      	subs	r4, r4, r5
 800095a:	b29d      	uxth	r5, r3
 800095c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000960:	fb09 4413 	mls	r4, r9, r3, r4
 8000964:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000968:	fb03 fe0e 	mul.w	lr, r3, lr
 800096c:	45a6      	cmp	lr, r4
 800096e:	d908      	bls.n	8000982 <__udivmoddi4+0x1da>
 8000970:	eb1c 0404 	adds.w	r4, ip, r4
 8000974:	f103 35ff 	add.w	r5, r3, #4294967295
 8000978:	d26c      	bcs.n	8000a54 <__udivmoddi4+0x2ac>
 800097a:	45a6      	cmp	lr, r4
 800097c:	d96a      	bls.n	8000a54 <__udivmoddi4+0x2ac>
 800097e:	3b02      	subs	r3, #2
 8000980:	4464      	add	r4, ip
 8000982:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000986:	fba3 9502 	umull	r9, r5, r3, r2
 800098a:	eba4 040e 	sub.w	r4, r4, lr
 800098e:	42ac      	cmp	r4, r5
 8000990:	46c8      	mov	r8, r9
 8000992:	46ae      	mov	lr, r5
 8000994:	d356      	bcc.n	8000a44 <__udivmoddi4+0x29c>
 8000996:	d053      	beq.n	8000a40 <__udivmoddi4+0x298>
 8000998:	b156      	cbz	r6, 80009b0 <__udivmoddi4+0x208>
 800099a:	ebb0 0208 	subs.w	r2, r0, r8
 800099e:	eb64 040e 	sbc.w	r4, r4, lr
 80009a2:	fa04 f707 	lsl.w	r7, r4, r7
 80009a6:	40ca      	lsrs	r2, r1
 80009a8:	40cc      	lsrs	r4, r1
 80009aa:	4317      	orrs	r7, r2
 80009ac:	e9c6 7400 	strd	r7, r4, [r6]
 80009b0:	4618      	mov	r0, r3
 80009b2:	2100      	movs	r1, #0
 80009b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b8:	f1c3 0120 	rsb	r1, r3, #32
 80009bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80009c0:	fa20 f201 	lsr.w	r2, r0, r1
 80009c4:	fa25 f101 	lsr.w	r1, r5, r1
 80009c8:	409d      	lsls	r5, r3
 80009ca:	432a      	orrs	r2, r5
 80009cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009d0:	fa1f fe8c 	uxth.w	lr, ip
 80009d4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009d8:	fb07 1510 	mls	r5, r7, r0, r1
 80009dc:	0c11      	lsrs	r1, r2, #16
 80009de:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80009e2:	fb00 f50e 	mul.w	r5, r0, lr
 80009e6:	428d      	cmp	r5, r1
 80009e8:	fa04 f403 	lsl.w	r4, r4, r3
 80009ec:	d908      	bls.n	8000a00 <__udivmoddi4+0x258>
 80009ee:	eb1c 0101 	adds.w	r1, ip, r1
 80009f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80009f6:	d22f      	bcs.n	8000a58 <__udivmoddi4+0x2b0>
 80009f8:	428d      	cmp	r5, r1
 80009fa:	d92d      	bls.n	8000a58 <__udivmoddi4+0x2b0>
 80009fc:	3802      	subs	r0, #2
 80009fe:	4461      	add	r1, ip
 8000a00:	1b49      	subs	r1, r1, r5
 8000a02:	b292      	uxth	r2, r2
 8000a04:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a08:	fb07 1115 	mls	r1, r7, r5, r1
 8000a0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a10:	fb05 f10e 	mul.w	r1, r5, lr
 8000a14:	4291      	cmp	r1, r2
 8000a16:	d908      	bls.n	8000a2a <__udivmoddi4+0x282>
 8000a18:	eb1c 0202 	adds.w	r2, ip, r2
 8000a1c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a20:	d216      	bcs.n	8000a50 <__udivmoddi4+0x2a8>
 8000a22:	4291      	cmp	r1, r2
 8000a24:	d914      	bls.n	8000a50 <__udivmoddi4+0x2a8>
 8000a26:	3d02      	subs	r5, #2
 8000a28:	4462      	add	r2, ip
 8000a2a:	1a52      	subs	r2, r2, r1
 8000a2c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a30:	e738      	b.n	80008a4 <__udivmoddi4+0xfc>
 8000a32:	4631      	mov	r1, r6
 8000a34:	4630      	mov	r0, r6
 8000a36:	e708      	b.n	800084a <__udivmoddi4+0xa2>
 8000a38:	4639      	mov	r1, r7
 8000a3a:	e6e6      	b.n	800080a <__udivmoddi4+0x62>
 8000a3c:	4610      	mov	r0, r2
 8000a3e:	e6fb      	b.n	8000838 <__udivmoddi4+0x90>
 8000a40:	4548      	cmp	r0, r9
 8000a42:	d2a9      	bcs.n	8000998 <__udivmoddi4+0x1f0>
 8000a44:	ebb9 0802 	subs.w	r8, r9, r2
 8000a48:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a4c:	3b01      	subs	r3, #1
 8000a4e:	e7a3      	b.n	8000998 <__udivmoddi4+0x1f0>
 8000a50:	4645      	mov	r5, r8
 8000a52:	e7ea      	b.n	8000a2a <__udivmoddi4+0x282>
 8000a54:	462b      	mov	r3, r5
 8000a56:	e794      	b.n	8000982 <__udivmoddi4+0x1da>
 8000a58:	4640      	mov	r0, r8
 8000a5a:	e7d1      	b.n	8000a00 <__udivmoddi4+0x258>
 8000a5c:	46d0      	mov	r8, sl
 8000a5e:	e77b      	b.n	8000958 <__udivmoddi4+0x1b0>
 8000a60:	3d02      	subs	r5, #2
 8000a62:	4462      	add	r2, ip
 8000a64:	e732      	b.n	80008cc <__udivmoddi4+0x124>
 8000a66:	4608      	mov	r0, r1
 8000a68:	e70a      	b.n	8000880 <__udivmoddi4+0xd8>
 8000a6a:	4464      	add	r4, ip
 8000a6c:	3802      	subs	r0, #2
 8000a6e:	e742      	b.n	80008f6 <__udivmoddi4+0x14e>

08000a70 <__aeabi_idiv0>:
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a78:	4b3d      	ldr	r3, [pc, #244]	; (8000b70 <SystemInit+0xfc>)
 8000a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a7e:	4a3c      	ldr	r2, [pc, #240]	; (8000b70 <SystemInit+0xfc>)
 8000a80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000a88:	4b39      	ldr	r3, [pc, #228]	; (8000b70 <SystemInit+0xfc>)
 8000a8a:	691b      	ldr	r3, [r3, #16]
 8000a8c:	4a38      	ldr	r2, [pc, #224]	; (8000b70 <SystemInit+0xfc>)
 8000a8e:	f043 0310 	orr.w	r3, r3, #16
 8000a92:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a94:	4b37      	ldr	r3, [pc, #220]	; (8000b74 <SystemInit+0x100>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f003 030f 	and.w	r3, r3, #15
 8000a9c:	2b06      	cmp	r3, #6
 8000a9e:	d807      	bhi.n	8000ab0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000aa0:	4b34      	ldr	r3, [pc, #208]	; (8000b74 <SystemInit+0x100>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f023 030f 	bic.w	r3, r3, #15
 8000aa8:	4a32      	ldr	r2, [pc, #200]	; (8000b74 <SystemInit+0x100>)
 8000aaa:	f043 0307 	orr.w	r3, r3, #7
 8000aae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ab0:	4b31      	ldr	r3, [pc, #196]	; (8000b78 <SystemInit+0x104>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a30      	ldr	r2, [pc, #192]	; (8000b78 <SystemInit+0x104>)
 8000ab6:	f043 0301 	orr.w	r3, r3, #1
 8000aba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000abc:	4b2e      	ldr	r3, [pc, #184]	; (8000b78 <SystemInit+0x104>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ac2:	4b2d      	ldr	r3, [pc, #180]	; (8000b78 <SystemInit+0x104>)
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	492c      	ldr	r1, [pc, #176]	; (8000b78 <SystemInit+0x104>)
 8000ac8:	4b2c      	ldr	r3, [pc, #176]	; (8000b7c <SystemInit+0x108>)
 8000aca:	4013      	ands	r3, r2
 8000acc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ace:	4b29      	ldr	r3, [pc, #164]	; (8000b74 <SystemInit+0x100>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f003 0308 	and.w	r3, r3, #8
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d007      	beq.n	8000aea <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ada:	4b26      	ldr	r3, [pc, #152]	; (8000b74 <SystemInit+0x100>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f023 030f 	bic.w	r3, r3, #15
 8000ae2:	4a24      	ldr	r2, [pc, #144]	; (8000b74 <SystemInit+0x100>)
 8000ae4:	f043 0307 	orr.w	r3, r3, #7
 8000ae8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000aea:	4b23      	ldr	r3, [pc, #140]	; (8000b78 <SystemInit+0x104>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <SystemInit+0x104>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <SystemInit+0x104>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <SystemInit+0x104>)
 8000afe:	4a20      	ldr	r2, [pc, #128]	; (8000b80 <SystemInit+0x10c>)
 8000b00:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <SystemInit+0x104>)
 8000b04:	4a1f      	ldr	r2, [pc, #124]	; (8000b84 <SystemInit+0x110>)
 8000b06:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <SystemInit+0x104>)
 8000b0a:	4a1f      	ldr	r2, [pc, #124]	; (8000b88 <SystemInit+0x114>)
 8000b0c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b0e:	4b1a      	ldr	r3, [pc, #104]	; (8000b78 <SystemInit+0x104>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b14:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <SystemInit+0x104>)
 8000b16:	4a1c      	ldr	r2, [pc, #112]	; (8000b88 <SystemInit+0x114>)
 8000b18:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b1a:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <SystemInit+0x104>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <SystemInit+0x104>)
 8000b22:	4a19      	ldr	r2, [pc, #100]	; (8000b88 <SystemInit+0x114>)
 8000b24:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b26:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <SystemInit+0x104>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <SystemInit+0x104>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a11      	ldr	r2, [pc, #68]	; (8000b78 <SystemInit+0x104>)
 8000b32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b36:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <SystemInit+0x104>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b3e:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <SystemInit+0x118>)
 8000b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b42:	4a12      	ldr	r2, [pc, #72]	; (8000b8c <SystemInit+0x118>)
 8000b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b48:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b4a:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <SystemInit+0x11c>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <SystemInit+0x120>)
 8000b50:	4013      	ands	r3, r2
 8000b52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b56:	d202      	bcs.n	8000b5e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b58:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <SystemInit+0x124>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b5e:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <SystemInit+0x128>)
 8000b60:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b64:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000ed00 	.word	0xe000ed00
 8000b74:	52002000 	.word	0x52002000
 8000b78:	58024400 	.word	0x58024400
 8000b7c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b80:	02020200 	.word	0x02020200
 8000b84:	01ff0000 	.word	0x01ff0000
 8000b88:	01010280 	.word	0x01010280
 8000b8c:	580000c0 	.word	0x580000c0
 8000b90:	5c001000 	.word	0x5c001000
 8000b94:	ffff0000 	.word	0xffff0000
 8000b98:	51008108 	.word	0x51008108
 8000b9c:	52004000 	.word	0x52004000

08000ba0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af04      	add	r7, sp, #16
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000ba6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000baa:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000bac:	bf00      	nop
 8000bae:	4b87      	ldr	r3, [pc, #540]	; (8000dcc <main+0x22c>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d004      	beq.n	8000bc4 <main+0x24>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	1e5a      	subs	r2, r3, #1
 8000bbe:	607a      	str	r2, [r7, #4]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	dcf4      	bgt.n	8000bae <main+0xe>
  if ( timeout < 0 )
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	da01      	bge.n	8000bce <main+0x2e>
  {
  Error_Handler();
 8000bca:	f000 fbdd 	bl	8001388 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bce:	f000 ff65 	bl	8001a9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd2:	f000 f91d 	bl	8000e10 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000bd6:	f000 f999 	bl	8000f0c <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000bda:	4b7c      	ldr	r3, [pc, #496]	; (8000dcc <main+0x22c>)
 8000bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be0:	4a7a      	ldr	r2, [pc, #488]	; (8000dcc <main+0x22c>)
 8000be2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000be6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bea:	4b78      	ldr	r3, [pc, #480]	; (8000dcc <main+0x22c>)
 8000bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bf4:	603b      	str	r3, [r7, #0]
 8000bf6:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	f003 fa17 	bl	800402c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000bfe:	2100      	movs	r1, #0
 8000c00:	2000      	movs	r0, #0
 8000c02:	f003 fa2d 	bl	8004060 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000c06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c0a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000c0c:	bf00      	nop
 8000c0e:	4b6f      	ldr	r3, [pc, #444]	; (8000dcc <main+0x22c>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d104      	bne.n	8000c24 <main+0x84>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	1e5a      	subs	r2, r3, #1
 8000c1e:	607a      	str	r2, [r7, #4]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	dcf4      	bgt.n	8000c0e <main+0x6e>
if ( timeout < 0 )
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	da01      	bge.n	8000c2e <main+0x8e>
{
Error_Handler();
 8000c2a:	f000 fbad 	bl	8001388 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c2e:	f000 fb45 	bl	80012bc <MX_GPIO_Init>
  MX_ETH_Init();
 8000c32:	f000 fa79 	bl	8001128 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000c36:	f000 fac3 	bl	80011c0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000c3a:	f000 fb0d 	bl	8001258 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000c3e:	f000 f995 	bl	8000f6c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000c42:	f000 fa0b 	bl	800105c <MX_ADC2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HAL_ADC_Start(&hadc1);
 8000c46:	4862      	ldr	r0, [pc, #392]	; (8000dd0 <main+0x230>)
 8000c48:	f001 fb82 	bl	8002350 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c50:	485f      	ldr	r0, [pc, #380]	; (8000dd0 <main+0x230>)
 8000c52:	f001 fc47 	bl	80024e4 <HAL_ADC_PollForConversion>
    x_adc = HAL_ADC_GetValue(&hadc1);
 8000c56:	485e      	ldr	r0, [pc, #376]	; (8000dd0 <main+0x230>)
 8000c58:	f001 fd38 	bl	80026cc <HAL_ADC_GetValue>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	b29a      	uxth	r2, r3
 8000c60:	4b5c      	ldr	r3, [pc, #368]	; (8000dd4 <main+0x234>)
 8000c62:	801a      	strh	r2, [r3, #0]
    HAL_Delay(1);
 8000c64:	2001      	movs	r0, #1
 8000c66:	f000 ffab 	bl	8001bc0 <HAL_Delay>

    HAL_ADC_Start(&hadc2);
 8000c6a:	485b      	ldr	r0, [pc, #364]	; (8000dd8 <main+0x238>)
 8000c6c:	f001 fb70 	bl	8002350 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8000c70:	f04f 31ff 	mov.w	r1, #4294967295
 8000c74:	4858      	ldr	r0, [pc, #352]	; (8000dd8 <main+0x238>)
 8000c76:	f001 fc35 	bl	80024e4 <HAL_ADC_PollForConversion>
    y_adc = HAL_ADC_GetValue(&hadc2);
 8000c7a:	4857      	ldr	r0, [pc, #348]	; (8000dd8 <main+0x238>)
 8000c7c:	f001 fd26 	bl	80026cc <HAL_ADC_GetValue>
 8000c80:	4603      	mov	r3, r0
 8000c82:	b29a      	uxth	r2, r3
 8000c84:	4b55      	ldr	r3, [pc, #340]	; (8000ddc <main+0x23c>)
 8000c86:	801a      	strh	r2, [r3, #0]
    HAL_Delay(1);
 8000c88:	2001      	movs	r0, #1
 8000c8a:	f000 ff99 	bl	8001bc0 <HAL_Delay>

    x_axis = x_adc / 1000;
 8000c8e:	4b51      	ldr	r3, [pc, #324]	; (8000dd4 <main+0x234>)
 8000c90:	881b      	ldrh	r3, [r3, #0]
 8000c92:	4a53      	ldr	r2, [pc, #332]	; (8000de0 <main+0x240>)
 8000c94:	fba2 2303 	umull	r2, r3, r2, r3
 8000c98:	099b      	lsrs	r3, r3, #6
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	ee07 3a90 	vmov	s15, r3
 8000ca0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ca4:	4b4f      	ldr	r3, [pc, #316]	; (8000de4 <main+0x244>)
 8000ca6:	edc3 7a00 	vstr	s15, [r3]
    y_axis = y_adc / 1000;
 8000caa:	4b4c      	ldr	r3, [pc, #304]	; (8000ddc <main+0x23c>)
 8000cac:	881b      	ldrh	r3, [r3, #0]
 8000cae:	4a4c      	ldr	r2, [pc, #304]	; (8000de0 <main+0x240>)
 8000cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8000cb4:	099b      	lsrs	r3, r3, #6
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	ee07 3a90 	vmov	s15, r3
 8000cbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cc0:	4b49      	ldr	r3, [pc, #292]	; (8000de8 <main+0x248>)
 8000cc2:	edc3 7a00 	vstr	s15, [r3]
    in_min = 1;
 8000cc6:	4b49      	ldr	r3, [pc, #292]	; (8000dec <main+0x24c>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	601a      	str	r2, [r3, #0]
    in_max = 65;
 8000ccc:	4b48      	ldr	r3, [pc, #288]	; (8000df0 <main+0x250>)
 8000cce:	2241      	movs	r2, #65	; 0x41
 8000cd0:	601a      	str	r2, [r3, #0]
    out_min = -1;
 8000cd2:	4b48      	ldr	r3, [pc, #288]	; (8000df4 <main+0x254>)
 8000cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd8:	601a      	str	r2, [r3, #0]
    out_max = 1;
 8000cda:	4b47      	ldr	r3, [pc, #284]	; (8000df8 <main+0x258>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	601a      	str	r2, [r3, #0]

    x_map = (x_axis - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000ce0:	4b40      	ldr	r3, [pc, #256]	; (8000de4 <main+0x244>)
 8000ce2:	ed93 7a00 	vldr	s14, [r3]
 8000ce6:	4b41      	ldr	r3, [pc, #260]	; (8000dec <main+0x24c>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	ee07 3a90 	vmov	s15, r3
 8000cee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cf2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000cf6:	4b40      	ldr	r3, [pc, #256]	; (8000df8 <main+0x258>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	4b3e      	ldr	r3, [pc, #248]	; (8000df4 <main+0x254>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	1ad3      	subs	r3, r2, r3
 8000d00:	ee07 3a90 	vmov	s15, r3
 8000d04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d08:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000d0c:	4b38      	ldr	r3, [pc, #224]	; (8000df0 <main+0x250>)
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	4b36      	ldr	r3, [pc, #216]	; (8000dec <main+0x24c>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	ee07 3a90 	vmov	s15, r3
 8000d1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000d22:	4b34      	ldr	r3, [pc, #208]	; (8000df4 <main+0x254>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	ee07 3a90 	vmov	s15, r3
 8000d2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d32:	4b32      	ldr	r3, [pc, #200]	; (8000dfc <main+0x25c>)
 8000d34:	edc3 7a00 	vstr	s15, [r3]
    y_map = (y_axis - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000d38:	4b2b      	ldr	r3, [pc, #172]	; (8000de8 <main+0x248>)
 8000d3a:	ed93 7a00 	vldr	s14, [r3]
 8000d3e:	4b2b      	ldr	r3, [pc, #172]	; (8000dec <main+0x24c>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	ee07 3a90 	vmov	s15, r3
 8000d46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d4a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d4e:	4b2a      	ldr	r3, [pc, #168]	; (8000df8 <main+0x258>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	4b28      	ldr	r3, [pc, #160]	; (8000df4 <main+0x254>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	1ad3      	subs	r3, r2, r3
 8000d58:	ee07 3a90 	vmov	s15, r3
 8000d5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d60:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000d64:	4b22      	ldr	r3, [pc, #136]	; (8000df0 <main+0x250>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	4b20      	ldr	r3, [pc, #128]	; (8000dec <main+0x24c>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	ee07 3a90 	vmov	s15, r3
 8000d72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000d7a:	4b1e      	ldr	r3, [pc, #120]	; (8000df4 <main+0x254>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	ee07 3a90 	vmov	s15, r3
 8000d82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d8a:	4b1d      	ldr	r3, [pc, #116]	; (8000e00 <main+0x260>)
 8000d8c:	edc3 7a00 	vstr	s15, [r3]

    snprintf(msg, 100, "CH_1: %.2f, CH_2: %.2f \r\n", x_map, y_map);
 8000d90:	4b1a      	ldr	r3, [pc, #104]	; (8000dfc <main+0x25c>)
 8000d92:	edd3 7a00 	vldr	s15, [r3]
 8000d96:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d9a:	4b19      	ldr	r3, [pc, #100]	; (8000e00 <main+0x260>)
 8000d9c:	edd3 6a00 	vldr	s13, [r3]
 8000da0:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000da4:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000da8:	ed8d 7b00 	vstr	d7, [sp]
 8000dac:	4a15      	ldr	r2, [pc, #84]	; (8000e04 <main+0x264>)
 8000dae:	2164      	movs	r1, #100	; 0x64
 8000db0:	4815      	ldr	r0, [pc, #84]	; (8000e08 <main+0x268>)
 8000db2:	f009 fb5b 	bl	800a46c <sniprintf>
    HAL_UART_Transmit(&huart3,msg,sizeof(msg),10);// Sending in normal mode
 8000db6:	230a      	movs	r3, #10
 8000db8:	2264      	movs	r2, #100	; 0x64
 8000dba:	4913      	ldr	r1, [pc, #76]	; (8000e08 <main+0x268>)
 8000dbc:	4813      	ldr	r0, [pc, #76]	; (8000e0c <main+0x26c>)
 8000dbe:	f007 f849 	bl	8007e54 <HAL_UART_Transmit>
    HAL_Delay(10);
 8000dc2:	200a      	movs	r0, #10
 8000dc4:	f000 fefc 	bl	8001bc0 <HAL_Delay>
    HAL_ADC_Start(&hadc1);
 8000dc8:	e73d      	b.n	8000c46 <main+0xa6>
 8000dca:	bf00      	nop
 8000dcc:	58024400 	.word	0x58024400
 8000dd0:	240002ec 	.word	0x240002ec
 8000dd4:	24000a04 	.word	0x24000a04
 8000dd8:	24000350 	.word	0x24000350
 8000ddc:	24000a06 	.word	0x24000a06
 8000de0:	10624dd3 	.word	0x10624dd3
 8000de4:	24000a08 	.word	0x24000a08
 8000de8:	24000a0c 	.word	0x24000a0c
 8000dec:	24000a74 	.word	0x24000a74
 8000df0:	24000a78 	.word	0x24000a78
 8000df4:	24000a7c 	.word	0x24000a7c
 8000df8:	24000a80 	.word	0x24000a80
 8000dfc:	24000a84 	.word	0x24000a84
 8000e00:	24000a88 	.word	0x24000a88
 8000e04:	0800dc90 	.word	0x0800dc90
 8000e08:	24000a10 	.word	0x24000a10
 8000e0c:	24000464 	.word	0x24000464

08000e10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b09c      	sub	sp, #112	; 0x70
 8000e14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e1a:	224c      	movs	r2, #76	; 0x4c
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f009 fbbb 	bl	800a59a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	2220      	movs	r2, #32
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f009 fbb5 	bl	800a59a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000e30:	2004      	movs	r0, #4
 8000e32:	f003 fa71 	bl	8004318 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e36:	2300      	movs	r3, #0
 8000e38:	603b      	str	r3, [r7, #0]
 8000e3a:	4b32      	ldr	r3, [pc, #200]	; (8000f04 <SystemClock_Config+0xf4>)
 8000e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e3e:	4a31      	ldr	r2, [pc, #196]	; (8000f04 <SystemClock_Config+0xf4>)
 8000e40:	f023 0301 	bic.w	r3, r3, #1
 8000e44:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000e46:	4b2f      	ldr	r3, [pc, #188]	; (8000f04 <SystemClock_Config+0xf4>)
 8000e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	603b      	str	r3, [r7, #0]
 8000e50:	4b2d      	ldr	r3, [pc, #180]	; (8000f08 <SystemClock_Config+0xf8>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e58:	4a2b      	ldr	r2, [pc, #172]	; (8000f08 <SystemClock_Config+0xf8>)
 8000e5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e5e:	6193      	str	r3, [r2, #24]
 8000e60:	4b29      	ldr	r3, [pc, #164]	; (8000f08 <SystemClock_Config+0xf8>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e68:	603b      	str	r3, [r7, #0]
 8000e6a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e6c:	bf00      	nop
 8000e6e:	4b26      	ldr	r3, [pc, #152]	; (8000f08 <SystemClock_Config+0xf8>)
 8000e70:	699b      	ldr	r3, [r3, #24]
 8000e72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e7a:	d1f8      	bne.n	8000e6e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e80:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000e84:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e86:	2302      	movs	r3, #2
 8000e88:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000e92:	2312      	movs	r3, #18
 8000e94:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e96:	2302      	movs	r3, #2
 8000e98:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ea2:	230c      	movs	r3, #12
 8000ea4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000eaa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000eae:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f003 fa99 	bl	80043ec <HAL_RCC_OscConfig>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000ec0:	f000 fa62 	bl	8001388 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ec4:	233f      	movs	r3, #63	; 0x3f
 8000ec6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ed4:	2340      	movs	r3, #64	; 0x40
 8000ed6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ed8:	2340      	movs	r3, #64	; 0x40
 8000eda:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000edc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ee0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ee2:	2340      	movs	r3, #64	; 0x40
 8000ee4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ee6:	1d3b      	adds	r3, r7, #4
 8000ee8:	2101      	movs	r1, #1
 8000eea:	4618      	mov	r0, r3
 8000eec:	f003 fed8 	bl	8004ca0 <HAL_RCC_ClockConfig>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000ef6:	f000 fa47 	bl	8001388 <Error_Handler>
  }
}
 8000efa:	bf00      	nop
 8000efc:	3770      	adds	r7, #112	; 0x70
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	58000400 	.word	0x58000400
 8000f08:	58024800 	.word	0x58024800

08000f0c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b0b0      	sub	sp, #192	; 0xc0
 8000f10:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f12:	463b      	mov	r3, r7
 8000f14:	22c0      	movs	r2, #192	; 0xc0
 8000f16:	2100      	movs	r1, #0
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f009 fb3e 	bl	800a59a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f1e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 18;
 8000f2e:	2312      	movs	r3, #18
 8000f30:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000f32:	2304      	movs	r3, #4
 8000f34:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000f36:	2302      	movs	r3, #2
 8000f38:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000f3e:	23c0      	movs	r3, #192	; 0xc0
 8000f40:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000f42:	2320      	movs	r3, #32
 8000f44:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 8000f46:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f4a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f52:	463b      	mov	r3, r7
 8000f54:	4618      	mov	r0, r3
 8000f56:	f004 fa2f 	bl	80053b8 <HAL_RCCEx_PeriphCLKConfig>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8000f60:	f000 fa12 	bl	8001388 <Error_Handler>
  }
}
 8000f64:	bf00      	nop
 8000f66:	37c0      	adds	r7, #192	; 0xc0
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08a      	sub	sp, #40	; 0x28
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f72:	f107 031c 	add.w	r3, r7, #28
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f7e:	463b      	mov	r3, r7
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]
 8000f8c:	615a      	str	r2, [r3, #20]
 8000f8e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f90:	4b2f      	ldr	r3, [pc, #188]	; (8001050 <MX_ADC1_Init+0xe4>)
 8000f92:	4a30      	ldr	r2, [pc, #192]	; (8001054 <MX_ADC1_Init+0xe8>)
 8000f94:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f96:	4b2e      	ldr	r3, [pc, #184]	; (8001050 <MX_ADC1_Init+0xe4>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000f9c:	4b2c      	ldr	r3, [pc, #176]	; (8001050 <MX_ADC1_Init+0xe4>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fa2:	4b2b      	ldr	r3, [pc, #172]	; (8001050 <MX_ADC1_Init+0xe4>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fa8:	4b29      	ldr	r3, [pc, #164]	; (8001050 <MX_ADC1_Init+0xe4>)
 8000faa:	2204      	movs	r2, #4
 8000fac:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fae:	4b28      	ldr	r3, [pc, #160]	; (8001050 <MX_ADC1_Init+0xe4>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fb4:	4b26      	ldr	r3, [pc, #152]	; (8001050 <MX_ADC1_Init+0xe4>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000fba:	4b25      	ldr	r3, [pc, #148]	; (8001050 <MX_ADC1_Init+0xe4>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fc0:	4b23      	ldr	r3, [pc, #140]	; (8001050 <MX_ADC1_Init+0xe4>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fc6:	4b22      	ldr	r3, [pc, #136]	; (8001050 <MX_ADC1_Init+0xe4>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fcc:	4b20      	ldr	r3, [pc, #128]	; (8001050 <MX_ADC1_Init+0xe4>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000fd2:	4b1f      	ldr	r3, [pc, #124]	; (8001050 <MX_ADC1_Init+0xe4>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fd8:	4b1d      	ldr	r3, [pc, #116]	; (8001050 <MX_ADC1_Init+0xe4>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000fde:	4b1c      	ldr	r3, [pc, #112]	; (8001050 <MX_ADC1_Init+0xe4>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000fe4:	4b1a      	ldr	r3, [pc, #104]	; (8001050 <MX_ADC1_Init+0xe4>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fec:	4818      	ldr	r0, [pc, #96]	; (8001050 <MX_ADC1_Init+0xe4>)
 8000fee:	f001 f80d 	bl	800200c <HAL_ADC_Init>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ff8:	f000 f9c6 	bl	8001388 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001000:	f107 031c 	add.w	r3, r7, #28
 8001004:	4619      	mov	r1, r3
 8001006:	4812      	ldr	r0, [pc, #72]	; (8001050 <MX_ADC1_Init+0xe4>)
 8001008:	f002 f87a 	bl	8003100 <HAL_ADCEx_MultiModeConfigChannel>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001012:	f000 f9b9 	bl	8001388 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8001016:	4b10      	ldr	r3, [pc, #64]	; (8001058 <MX_ADC1_Init+0xec>)
 8001018:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800101a:	2306      	movs	r3, #6
 800101c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800101e:	2300      	movs	r3, #0
 8001020:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001022:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001026:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001028:	2304      	movs	r3, #4
 800102a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001030:	2300      	movs	r3, #0
 8001032:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001034:	463b      	mov	r3, r7
 8001036:	4619      	mov	r1, r3
 8001038:	4805      	ldr	r0, [pc, #20]	; (8001050 <MX_ADC1_Init+0xe4>)
 800103a:	f001 fb55 	bl	80026e8 <HAL_ADC_ConfigChannel>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001044:	f000 f9a0 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001048:	bf00      	nop
 800104a:	3728      	adds	r7, #40	; 0x28
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	240002ec 	.word	0x240002ec
 8001054:	40022000 	.word	0x40022000
 8001058:	4b840000 	.word	0x4b840000

0800105c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
 8001070:	615a      	str	r2, [r3, #20]
 8001072:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001074:	4b29      	ldr	r3, [pc, #164]	; (800111c <MX_ADC2_Init+0xc0>)
 8001076:	4a2a      	ldr	r2, [pc, #168]	; (8001120 <MX_ADC2_Init+0xc4>)
 8001078:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800107a:	4b28      	ldr	r3, [pc, #160]	; (800111c <MX_ADC2_Init+0xc0>)
 800107c:	2200      	movs	r2, #0
 800107e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8001080:	4b26      	ldr	r3, [pc, #152]	; (800111c <MX_ADC2_Init+0xc0>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001086:	4b25      	ldr	r3, [pc, #148]	; (800111c <MX_ADC2_Init+0xc0>)
 8001088:	2200      	movs	r2, #0
 800108a:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800108c:	4b23      	ldr	r3, [pc, #140]	; (800111c <MX_ADC2_Init+0xc0>)
 800108e:	2204      	movs	r2, #4
 8001090:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001092:	4b22      	ldr	r3, [pc, #136]	; (800111c <MX_ADC2_Init+0xc0>)
 8001094:	2200      	movs	r2, #0
 8001096:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001098:	4b20      	ldr	r3, [pc, #128]	; (800111c <MX_ADC2_Init+0xc0>)
 800109a:	2200      	movs	r2, #0
 800109c:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 800109e:	4b1f      	ldr	r3, [pc, #124]	; (800111c <MX_ADC2_Init+0xc0>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80010a4:	4b1d      	ldr	r3, [pc, #116]	; (800111c <MX_ADC2_Init+0xc0>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010aa:	4b1c      	ldr	r3, [pc, #112]	; (800111c <MX_ADC2_Init+0xc0>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010b0:	4b1a      	ldr	r3, [pc, #104]	; (800111c <MX_ADC2_Init+0xc0>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80010b6:	4b19      	ldr	r3, [pc, #100]	; (800111c <MX_ADC2_Init+0xc0>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010bc:	4b17      	ldr	r3, [pc, #92]	; (800111c <MX_ADC2_Init+0xc0>)
 80010be:	2200      	movs	r2, #0
 80010c0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80010c2:	4b16      	ldr	r3, [pc, #88]	; (800111c <MX_ADC2_Init+0xc0>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80010c8:	4b14      	ldr	r3, [pc, #80]	; (800111c <MX_ADC2_Init+0xc0>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80010d0:	4812      	ldr	r0, [pc, #72]	; (800111c <MX_ADC2_Init+0xc0>)
 80010d2:	f000 ff9b 	bl	800200c <HAL_ADC_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 80010dc:	f000 f954 	bl	8001388 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 80010e0:	4b10      	ldr	r3, [pc, #64]	; (8001124 <MX_ADC2_Init+0xc8>)
 80010e2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010e4:	2306      	movs	r3, #6
 80010e6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80010e8:	2300      	movs	r3, #0
 80010ea:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010ec:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80010f0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010f2:	2304      	movs	r3, #4
 80010f4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80010fa:	2300      	movs	r3, #0
 80010fc:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	4619      	mov	r1, r3
 8001102:	4806      	ldr	r0, [pc, #24]	; (800111c <MX_ADC2_Init+0xc0>)
 8001104:	f001 faf0 	bl	80026e8 <HAL_ADC_ConfigChannel>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800110e:	f000 f93b 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001112:	bf00      	nop
 8001114:	3720      	adds	r7, #32
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	24000350 	.word	0x24000350
 8001120:	40022100 	.word	0x40022100
 8001124:	4fb80000 	.word	0x4fb80000

08001128 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800112c:	4b1e      	ldr	r3, [pc, #120]	; (80011a8 <MX_ETH_Init+0x80>)
 800112e:	4a1f      	ldr	r2, [pc, #124]	; (80011ac <MX_ETH_Init+0x84>)
 8001130:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001132:	4b1f      	ldr	r3, [pc, #124]	; (80011b0 <MX_ETH_Init+0x88>)
 8001134:	2200      	movs	r2, #0
 8001136:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001138:	4b1d      	ldr	r3, [pc, #116]	; (80011b0 <MX_ETH_Init+0x88>)
 800113a:	2280      	movs	r2, #128	; 0x80
 800113c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800113e:	4b1c      	ldr	r3, [pc, #112]	; (80011b0 <MX_ETH_Init+0x88>)
 8001140:	22e1      	movs	r2, #225	; 0xe1
 8001142:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001144:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <MX_ETH_Init+0x88>)
 8001146:	2200      	movs	r2, #0
 8001148:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800114a:	4b19      	ldr	r3, [pc, #100]	; (80011b0 <MX_ETH_Init+0x88>)
 800114c:	2200      	movs	r2, #0
 800114e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001150:	4b17      	ldr	r3, [pc, #92]	; (80011b0 <MX_ETH_Init+0x88>)
 8001152:	2200      	movs	r2, #0
 8001154:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001156:	4b14      	ldr	r3, [pc, #80]	; (80011a8 <MX_ETH_Init+0x80>)
 8001158:	4a15      	ldr	r2, [pc, #84]	; (80011b0 <MX_ETH_Init+0x88>)
 800115a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800115c:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <MX_ETH_Init+0x80>)
 800115e:	2201      	movs	r2, #1
 8001160:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001162:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <MX_ETH_Init+0x80>)
 8001164:	4a13      	ldr	r2, [pc, #76]	; (80011b4 <MX_ETH_Init+0x8c>)
 8001166:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001168:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <MX_ETH_Init+0x80>)
 800116a:	4a13      	ldr	r2, [pc, #76]	; (80011b8 <MX_ETH_Init+0x90>)
 800116c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800116e:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <MX_ETH_Init+0x80>)
 8001170:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001174:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001176:	480c      	ldr	r0, [pc, #48]	; (80011a8 <MX_ETH_Init+0x80>)
 8001178:	f002 f984 	bl	8003484 <HAL_ETH_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8001182:	f000 f901 	bl	8001388 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001186:	2238      	movs	r2, #56	; 0x38
 8001188:	2100      	movs	r1, #0
 800118a:	480c      	ldr	r0, [pc, #48]	; (80011bc <MX_ETH_Init+0x94>)
 800118c:	f009 fa05 	bl	800a59a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001190:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <MX_ETH_Init+0x94>)
 8001192:	2221      	movs	r2, #33	; 0x21
 8001194:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001196:	4b09      	ldr	r3, [pc, #36]	; (80011bc <MX_ETH_Init+0x94>)
 8001198:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800119c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800119e:	4b07      	ldr	r3, [pc, #28]	; (80011bc <MX_ETH_Init+0x94>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80011a4:	bf00      	nop
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	240003b4 	.word	0x240003b4
 80011ac:	40028000 	.word	0x40028000
 80011b0:	24000a8c 	.word	0x24000a8c
 80011b4:	24000238 	.word	0x24000238
 80011b8:	240001d8 	.word	0x240001d8
 80011bc:	240002b4 	.word	0x240002b4

080011c0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011c4:	4b22      	ldr	r3, [pc, #136]	; (8001250 <MX_USART3_UART_Init+0x90>)
 80011c6:	4a23      	ldr	r2, [pc, #140]	; (8001254 <MX_USART3_UART_Init+0x94>)
 80011c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011ca:	4b21      	ldr	r3, [pc, #132]	; (8001250 <MX_USART3_UART_Init+0x90>)
 80011cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011d2:	4b1f      	ldr	r3, [pc, #124]	; (8001250 <MX_USART3_UART_Init+0x90>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011d8:	4b1d      	ldr	r3, [pc, #116]	; (8001250 <MX_USART3_UART_Init+0x90>)
 80011da:	2200      	movs	r2, #0
 80011dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011de:	4b1c      	ldr	r3, [pc, #112]	; (8001250 <MX_USART3_UART_Init+0x90>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011e4:	4b1a      	ldr	r3, [pc, #104]	; (8001250 <MX_USART3_UART_Init+0x90>)
 80011e6:	220c      	movs	r2, #12
 80011e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ea:	4b19      	ldr	r3, [pc, #100]	; (8001250 <MX_USART3_UART_Init+0x90>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f0:	4b17      	ldr	r3, [pc, #92]	; (8001250 <MX_USART3_UART_Init+0x90>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011f6:	4b16      	ldr	r3, [pc, #88]	; (8001250 <MX_USART3_UART_Init+0x90>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011fc:	4b14      	ldr	r3, [pc, #80]	; (8001250 <MX_USART3_UART_Init+0x90>)
 80011fe:	2200      	movs	r2, #0
 8001200:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001202:	4b13      	ldr	r3, [pc, #76]	; (8001250 <MX_USART3_UART_Init+0x90>)
 8001204:	2200      	movs	r2, #0
 8001206:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001208:	4811      	ldr	r0, [pc, #68]	; (8001250 <MX_USART3_UART_Init+0x90>)
 800120a:	f006 fdd3 	bl	8007db4 <HAL_UART_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001214:	f000 f8b8 	bl	8001388 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001218:	2100      	movs	r1, #0
 800121a:	480d      	ldr	r0, [pc, #52]	; (8001250 <MX_USART3_UART_Init+0x90>)
 800121c:	f007 fe63 	bl	8008ee6 <HAL_UARTEx_SetTxFifoThreshold>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001226:	f000 f8af 	bl	8001388 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800122a:	2100      	movs	r1, #0
 800122c:	4808      	ldr	r0, [pc, #32]	; (8001250 <MX_USART3_UART_Init+0x90>)
 800122e:	f007 fe98 	bl	8008f62 <HAL_UARTEx_SetRxFifoThreshold>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001238:	f000 f8a6 	bl	8001388 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800123c:	4804      	ldr	r0, [pc, #16]	; (8001250 <MX_USART3_UART_Init+0x90>)
 800123e:	f007 fe19 	bl	8008e74 <HAL_UARTEx_DisableFifoMode>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001248:	f000 f89e 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}
 8001250:	24000464 	.word	0x24000464
 8001254:	40004800 	.word	0x40004800

08001258 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800125c:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800125e:	4a16      	ldr	r2, [pc, #88]	; (80012b8 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001260:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001262:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001264:	2209      	movs	r2, #9
 8001266:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800126a:	2202      	movs	r2, #2
 800126c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800126e:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001270:	2200      	movs	r2, #0
 8001272:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001274:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001276:	2202      	movs	r2, #2
 8001278:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800127a:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800127c:	2200      	movs	r2, #0
 800127e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001280:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001282:	2200      	movs	r2, #0
 8001284:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001286:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001288:	2200      	movs	r2, #0
 800128a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800128c:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800128e:	2201      	movs	r2, #1
 8001290:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001292:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001294:	2201      	movs	r2, #1
 8001296:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800129a:	2200      	movs	r2, #0
 800129c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800129e:	4805      	ldr	r0, [pc, #20]	; (80012b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012a0:	f002 fef2 	bl	8004088 <HAL_PCD_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80012aa:	f000 f86d 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	240004f8 	.word	0x240004f8
 80012b8:	40080000 	.word	0x40080000

080012bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	b087      	sub	sp, #28
 80012c0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c2:	4b30      	ldr	r3, [pc, #192]	; (8001384 <MX_GPIO_Init+0xc8>)
 80012c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c8:	4a2e      	ldr	r2, [pc, #184]	; (8001384 <MX_GPIO_Init+0xc8>)
 80012ca:	f043 0304 	orr.w	r3, r3, #4
 80012ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012d2:	4b2c      	ldr	r3, [pc, #176]	; (8001384 <MX_GPIO_Init+0xc8>)
 80012d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012d8:	f003 0304 	and.w	r3, r3, #4
 80012dc:	617b      	str	r3, [r7, #20]
 80012de:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012e0:	4b28      	ldr	r3, [pc, #160]	; (8001384 <MX_GPIO_Init+0xc8>)
 80012e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012e6:	4a27      	ldr	r2, [pc, #156]	; (8001384 <MX_GPIO_Init+0xc8>)
 80012e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012f0:	4b24      	ldr	r3, [pc, #144]	; (8001384 <MX_GPIO_Init+0xc8>)
 80012f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012fa:	613b      	str	r3, [r7, #16]
 80012fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fe:	4b21      	ldr	r3, [pc, #132]	; (8001384 <MX_GPIO_Init+0xc8>)
 8001300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001304:	4a1f      	ldr	r2, [pc, #124]	; (8001384 <MX_GPIO_Init+0xc8>)
 8001306:	f043 0301 	orr.w	r3, r3, #1
 800130a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800130e:	4b1d      	ldr	r3, [pc, #116]	; (8001384 <MX_GPIO_Init+0xc8>)
 8001310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001314:	f003 0301 	and.w	r3, r3, #1
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800131c:	4b19      	ldr	r3, [pc, #100]	; (8001384 <MX_GPIO_Init+0xc8>)
 800131e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001322:	4a18      	ldr	r2, [pc, #96]	; (8001384 <MX_GPIO_Init+0xc8>)
 8001324:	f043 0302 	orr.w	r3, r3, #2
 8001328:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800132c:	4b15      	ldr	r3, [pc, #84]	; (8001384 <MX_GPIO_Init+0xc8>)
 800132e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800133a:	4b12      	ldr	r3, [pc, #72]	; (8001384 <MX_GPIO_Init+0xc8>)
 800133c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001340:	4a10      	ldr	r2, [pc, #64]	; (8001384 <MX_GPIO_Init+0xc8>)
 8001342:	f043 0308 	orr.w	r3, r3, #8
 8001346:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800134a:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <MX_GPIO_Init+0xc8>)
 800134c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001350:	f003 0308 	and.w	r3, r3, #8
 8001354:	607b      	str	r3, [r7, #4]
 8001356:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001358:	4b0a      	ldr	r3, [pc, #40]	; (8001384 <MX_GPIO_Init+0xc8>)
 800135a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800135e:	4a09      	ldr	r2, [pc, #36]	; (8001384 <MX_GPIO_Init+0xc8>)
 8001360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001364:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <MX_GPIO_Init+0xc8>)
 800136a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800136e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001372:	603b      	str	r3, [r7, #0]
 8001374:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001376:	bf00      	nop
 8001378:	371c      	adds	r7, #28
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	58024400 	.word	0x58024400

08001388 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800138c:	b672      	cpsid	i
}
 800138e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001390:	e7fe      	b.n	8001390 <Error_Handler+0x8>
	...

08001394 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139a:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <HAL_MspInit+0x30>)
 800139c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013a0:	4a08      	ldr	r2, [pc, #32]	; (80013c4 <HAL_MspInit+0x30>)
 80013a2:	f043 0302 	orr.w	r3, r3, #2
 80013a6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80013aa:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <HAL_MspInit+0x30>)
 80013ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013b0:	f003 0302 	and.w	r3, r3, #2
 80013b4:	607b      	str	r3, [r7, #4]
 80013b6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	58024400 	.word	0x58024400

080013c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08c      	sub	sp, #48	; 0x30
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f107 031c 	add.w	r3, r7, #28
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a39      	ldr	r2, [pc, #228]	; (80014cc <HAL_ADC_MspInit+0x104>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d133      	bne.n	8001452 <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80013ea:	4b39      	ldr	r3, [pc, #228]	; (80014d0 <HAL_ADC_MspInit+0x108>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	3301      	adds	r3, #1
 80013f0:	4a37      	ldr	r2, [pc, #220]	; (80014d0 <HAL_ADC_MspInit+0x108>)
 80013f2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013f4:	4b36      	ldr	r3, [pc, #216]	; (80014d0 <HAL_ADC_MspInit+0x108>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d10e      	bne.n	800141a <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80013fc:	4b35      	ldr	r3, [pc, #212]	; (80014d4 <HAL_ADC_MspInit+0x10c>)
 80013fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001402:	4a34      	ldr	r2, [pc, #208]	; (80014d4 <HAL_ADC_MspInit+0x10c>)
 8001404:	f043 0320 	orr.w	r3, r3, #32
 8001408:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800140c:	4b31      	ldr	r3, [pc, #196]	; (80014d4 <HAL_ADC_MspInit+0x10c>)
 800140e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001412:	f003 0320 	and.w	r3, r3, #32
 8001416:	61bb      	str	r3, [r7, #24]
 8001418:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141a:	4b2e      	ldr	r3, [pc, #184]	; (80014d4 <HAL_ADC_MspInit+0x10c>)
 800141c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001420:	4a2c      	ldr	r2, [pc, #176]	; (80014d4 <HAL_ADC_MspInit+0x10c>)
 8001422:	f043 0301 	orr.w	r3, r3, #1
 8001426:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800142a:	4b2a      	ldr	r3, [pc, #168]	; (80014d4 <HAL_ADC_MspInit+0x10c>)
 800142c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001430:	f003 0301 	and.w	r3, r3, #1
 8001434:	617b      	str	r3, [r7, #20]
 8001436:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_INP18
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001438:	2310      	movs	r3, #16
 800143a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800143c:	2303      	movs	r3, #3
 800143e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001444:	f107 031c 	add.w	r3, r7, #28
 8001448:	4619      	mov	r1, r3
 800144a:	4823      	ldr	r0, [pc, #140]	; (80014d8 <HAL_ADC_MspInit+0x110>)
 800144c:	f002 fc3e 	bl	8003ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001450:	e037      	b.n	80014c2 <HAL_ADC_MspInit+0xfa>
  else if(hadc->Instance==ADC2)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a21      	ldr	r2, [pc, #132]	; (80014dc <HAL_ADC_MspInit+0x114>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d132      	bne.n	80014c2 <HAL_ADC_MspInit+0xfa>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800145c:	4b1c      	ldr	r3, [pc, #112]	; (80014d0 <HAL_ADC_MspInit+0x108>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	3301      	adds	r3, #1
 8001462:	4a1b      	ldr	r2, [pc, #108]	; (80014d0 <HAL_ADC_MspInit+0x108>)
 8001464:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001466:	4b1a      	ldr	r3, [pc, #104]	; (80014d0 <HAL_ADC_MspInit+0x108>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d10e      	bne.n	800148c <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800146e:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <HAL_ADC_MspInit+0x10c>)
 8001470:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001474:	4a17      	ldr	r2, [pc, #92]	; (80014d4 <HAL_ADC_MspInit+0x10c>)
 8001476:	f043 0320 	orr.w	r3, r3, #32
 800147a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800147e:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <HAL_ADC_MspInit+0x10c>)
 8001480:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001484:	f003 0320 	and.w	r3, r3, #32
 8001488:	613b      	str	r3, [r7, #16]
 800148a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800148c:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <HAL_ADC_MspInit+0x10c>)
 800148e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001492:	4a10      	ldr	r2, [pc, #64]	; (80014d4 <HAL_ADC_MspInit+0x10c>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800149c:	4b0d      	ldr	r3, [pc, #52]	; (80014d4 <HAL_ADC_MspInit+0x10c>)
 800149e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80014aa:	2320      	movs	r3, #32
 80014ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ae:	2303      	movs	r3, #3
 80014b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b6:	f107 031c 	add.w	r3, r7, #28
 80014ba:	4619      	mov	r1, r3
 80014bc:	4806      	ldr	r0, [pc, #24]	; (80014d8 <HAL_ADC_MspInit+0x110>)
 80014be:	f002 fc05 	bl	8003ccc <HAL_GPIO_Init>
}
 80014c2:	bf00      	nop
 80014c4:	3730      	adds	r7, #48	; 0x30
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40022000 	.word	0x40022000
 80014d0:	24000a94 	.word	0x24000a94
 80014d4:	58024400 	.word	0x58024400
 80014d8:	58020000 	.word	0x58020000
 80014dc:	40022100 	.word	0x40022100

080014e0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08e      	sub	sp, #56	; 0x38
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a59      	ldr	r2, [pc, #356]	; (8001664 <HAL_ETH_MspInit+0x184>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	f040 80ab 	bne.w	800165a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001504:	4b58      	ldr	r3, [pc, #352]	; (8001668 <HAL_ETH_MspInit+0x188>)
 8001506:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800150a:	4a57      	ldr	r2, [pc, #348]	; (8001668 <HAL_ETH_MspInit+0x188>)
 800150c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001510:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001514:	4b54      	ldr	r3, [pc, #336]	; (8001668 <HAL_ETH_MspInit+0x188>)
 8001516:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800151a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800151e:	623b      	str	r3, [r7, #32]
 8001520:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001522:	4b51      	ldr	r3, [pc, #324]	; (8001668 <HAL_ETH_MspInit+0x188>)
 8001524:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001528:	4a4f      	ldr	r2, [pc, #316]	; (8001668 <HAL_ETH_MspInit+0x188>)
 800152a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800152e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001532:	4b4d      	ldr	r3, [pc, #308]	; (8001668 <HAL_ETH_MspInit+0x188>)
 8001534:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001538:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800153c:	61fb      	str	r3, [r7, #28]
 800153e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001540:	4b49      	ldr	r3, [pc, #292]	; (8001668 <HAL_ETH_MspInit+0x188>)
 8001542:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001546:	4a48      	ldr	r2, [pc, #288]	; (8001668 <HAL_ETH_MspInit+0x188>)
 8001548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800154c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001550:	4b45      	ldr	r3, [pc, #276]	; (8001668 <HAL_ETH_MspInit+0x188>)
 8001552:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155a:	61bb      	str	r3, [r7, #24]
 800155c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800155e:	4b42      	ldr	r3, [pc, #264]	; (8001668 <HAL_ETH_MspInit+0x188>)
 8001560:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001564:	4a40      	ldr	r2, [pc, #256]	; (8001668 <HAL_ETH_MspInit+0x188>)
 8001566:	f043 0304 	orr.w	r3, r3, #4
 800156a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800156e:	4b3e      	ldr	r3, [pc, #248]	; (8001668 <HAL_ETH_MspInit+0x188>)
 8001570:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001574:	f003 0304 	and.w	r3, r3, #4
 8001578:	617b      	str	r3, [r7, #20]
 800157a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800157c:	4b3a      	ldr	r3, [pc, #232]	; (8001668 <HAL_ETH_MspInit+0x188>)
 800157e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001582:	4a39      	ldr	r2, [pc, #228]	; (8001668 <HAL_ETH_MspInit+0x188>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800158c:	4b36      	ldr	r3, [pc, #216]	; (8001668 <HAL_ETH_MspInit+0x188>)
 800158e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	613b      	str	r3, [r7, #16]
 8001598:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800159a:	4b33      	ldr	r3, [pc, #204]	; (8001668 <HAL_ETH_MspInit+0x188>)
 800159c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a0:	4a31      	ldr	r2, [pc, #196]	; (8001668 <HAL_ETH_MspInit+0x188>)
 80015a2:	f043 0302 	orr.w	r3, r3, #2
 80015a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015aa:	4b2f      	ldr	r3, [pc, #188]	; (8001668 <HAL_ETH_MspInit+0x188>)
 80015ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80015b8:	4b2b      	ldr	r3, [pc, #172]	; (8001668 <HAL_ETH_MspInit+0x188>)
 80015ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015be:	4a2a      	ldr	r2, [pc, #168]	; (8001668 <HAL_ETH_MspInit+0x188>)
 80015c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015c8:	4b27      	ldr	r3, [pc, #156]	; (8001668 <HAL_ETH_MspInit+0x188>)
 80015ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015d2:	60bb      	str	r3, [r7, #8]
 80015d4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80015d6:	2332      	movs	r3, #50	; 0x32
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015da:	2302      	movs	r3, #2
 80015dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e2:	2300      	movs	r3, #0
 80015e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015e6:	230b      	movs	r3, #11
 80015e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ee:	4619      	mov	r1, r3
 80015f0:	481e      	ldr	r0, [pc, #120]	; (800166c <HAL_ETH_MspInit+0x18c>)
 80015f2:	f002 fb6b 	bl	8003ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80015f6:	2386      	movs	r3, #134	; 0x86
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fa:	2302      	movs	r3, #2
 80015fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001602:	2300      	movs	r3, #0
 8001604:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001606:	230b      	movs	r3, #11
 8001608:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800160e:	4619      	mov	r1, r3
 8001610:	4817      	ldr	r0, [pc, #92]	; (8001670 <HAL_ETH_MspInit+0x190>)
 8001612:	f002 fb5b 	bl	8003ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001616:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	2302      	movs	r3, #2
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001624:	2300      	movs	r3, #0
 8001626:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001628:	230b      	movs	r3, #11
 800162a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001630:	4619      	mov	r1, r3
 8001632:	4810      	ldr	r0, [pc, #64]	; (8001674 <HAL_ETH_MspInit+0x194>)
 8001634:	f002 fb4a 	bl	8003ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001638:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163e:	2302      	movs	r3, #2
 8001640:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001646:	2300      	movs	r3, #0
 8001648:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800164a:	230b      	movs	r3, #11
 800164c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800164e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001652:	4619      	mov	r1, r3
 8001654:	4808      	ldr	r0, [pc, #32]	; (8001678 <HAL_ETH_MspInit+0x198>)
 8001656:	f002 fb39 	bl	8003ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800165a:	bf00      	nop
 800165c:	3738      	adds	r7, #56	; 0x38
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40028000 	.word	0x40028000
 8001668:	58024400 	.word	0x58024400
 800166c:	58020800 	.word	0x58020800
 8001670:	58020000 	.word	0x58020000
 8001674:	58020400 	.word	0x58020400
 8001678:	58021800 	.word	0x58021800

0800167c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b0ba      	sub	sp, #232	; 0xe8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001684:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001694:	f107 0310 	add.w	r3, r7, #16
 8001698:	22c0      	movs	r2, #192	; 0xc0
 800169a:	2100      	movs	r1, #0
 800169c:	4618      	mov	r0, r3
 800169e:	f008 ff7c 	bl	800a59a <memset>
  if(huart->Instance==USART3)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a27      	ldr	r2, [pc, #156]	; (8001744 <HAL_UART_MspInit+0xc8>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d146      	bne.n	800173a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80016ac:	f04f 0202 	mov.w	r2, #2
 80016b0:	f04f 0300 	mov.w	r3, #0
 80016b4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80016b8:	2300      	movs	r3, #0
 80016ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016be:	f107 0310 	add.w	r3, r7, #16
 80016c2:	4618      	mov	r0, r3
 80016c4:	f003 fe78 	bl	80053b8 <HAL_RCCEx_PeriphCLKConfig>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80016ce:	f7ff fe5b 	bl	8001388 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80016d2:	4b1d      	ldr	r3, [pc, #116]	; (8001748 <HAL_UART_MspInit+0xcc>)
 80016d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016d8:	4a1b      	ldr	r2, [pc, #108]	; (8001748 <HAL_UART_MspInit+0xcc>)
 80016da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016de:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80016e2:	4b19      	ldr	r3, [pc, #100]	; (8001748 <HAL_UART_MspInit+0xcc>)
 80016e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016f0:	4b15      	ldr	r3, [pc, #84]	; (8001748 <HAL_UART_MspInit+0xcc>)
 80016f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016f6:	4a14      	ldr	r2, [pc, #80]	; (8001748 <HAL_UART_MspInit+0xcc>)
 80016f8:	f043 0308 	orr.w	r3, r3, #8
 80016fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001700:	4b11      	ldr	r3, [pc, #68]	; (8001748 <HAL_UART_MspInit+0xcc>)
 8001702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001706:	f003 0308 	and.w	r3, r3, #8
 800170a:	60bb      	str	r3, [r7, #8]
 800170c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800170e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001712:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001716:	2302      	movs	r3, #2
 8001718:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001722:	2300      	movs	r3, #0
 8001724:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001728:	2307      	movs	r3, #7
 800172a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800172e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001732:	4619      	mov	r1, r3
 8001734:	4805      	ldr	r0, [pc, #20]	; (800174c <HAL_UART_MspInit+0xd0>)
 8001736:	f002 fac9 	bl	8003ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800173a:	bf00      	nop
 800173c:	37e8      	adds	r7, #232	; 0xe8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40004800 	.word	0x40004800
 8001748:	58024400 	.word	0x58024400
 800174c:	58020c00 	.word	0x58020c00

08001750 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b0ba      	sub	sp, #232	; 0xe8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001758:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
 8001766:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001768:	f107 0310 	add.w	r3, r7, #16
 800176c:	22c0      	movs	r2, #192	; 0xc0
 800176e:	2100      	movs	r1, #0
 8001770:	4618      	mov	r0, r3
 8001772:	f008 ff12 	bl	800a59a <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a38      	ldr	r2, [pc, #224]	; (800185c <HAL_PCD_MspInit+0x10c>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d169      	bne.n	8001854 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001780:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001784:	f04f 0300 	mov.w	r3, #0
 8001788:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 800178c:	2301      	movs	r3, #1
 800178e:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8001790:	2312      	movs	r3, #18
 8001792:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001794:	2302      	movs	r3, #2
 8001796:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8001798:	2303      	movs	r3, #3
 800179a:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 800179c:	2302      	movs	r3, #2
 800179e:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80017a0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017a4:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 80017a6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80017aa:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80017ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80017b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017b4:	f107 0310 	add.w	r3, r7, #16
 80017b8:	4618      	mov	r0, r3
 80017ba:	f003 fdfd 	bl	80053b8 <HAL_RCCEx_PeriphCLKConfig>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 80017c4:	f7ff fde0 	bl	8001388 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80017c8:	f002 fe00 	bl	80043cc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017cc:	4b24      	ldr	r3, [pc, #144]	; (8001860 <HAL_PCD_MspInit+0x110>)
 80017ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017d2:	4a23      	ldr	r2, [pc, #140]	; (8001860 <HAL_PCD_MspInit+0x110>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017dc:	4b20      	ldr	r3, [pc, #128]	; (8001860 <HAL_PCD_MspInit+0x110>)
 80017de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80017ea:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80017ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f2:	2302      	movs	r3, #2
 80017f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fe:	2300      	movs	r3, #0
 8001800:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001804:	230a      	movs	r3, #10
 8001806:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800180e:	4619      	mov	r1, r3
 8001810:	4814      	ldr	r0, [pc, #80]	; (8001864 <HAL_PCD_MspInit+0x114>)
 8001812:	f002 fa5b 	bl	8003ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001816:	f44f 7300 	mov.w	r3, #512	; 0x200
 800181a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800181e:	2300      	movs	r3, #0
 8001820:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800182e:	4619      	mov	r1, r3
 8001830:	480c      	ldr	r0, [pc, #48]	; (8001864 <HAL_PCD_MspInit+0x114>)
 8001832:	f002 fa4b 	bl	8003ccc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001836:	4b0a      	ldr	r3, [pc, #40]	; (8001860 <HAL_PCD_MspInit+0x110>)
 8001838:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800183c:	4a08      	ldr	r2, [pc, #32]	; (8001860 <HAL_PCD_MspInit+0x110>)
 800183e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001842:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001846:	4b06      	ldr	r3, [pc, #24]	; (8001860 <HAL_PCD_MspInit+0x110>)
 8001848:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800184c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001850:	60bb      	str	r3, [r7, #8]
 8001852:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001854:	bf00      	nop
 8001856:	37e8      	adds	r7, #232	; 0xe8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40080000 	.word	0x40080000
 8001860:	58024400 	.word	0x58024400
 8001864:	58020000 	.word	0x58020000

08001868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800186c:	e7fe      	b.n	800186c <NMI_Handler+0x4>

0800186e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800186e:	b480      	push	{r7}
 8001870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001872:	e7fe      	b.n	8001872 <HardFault_Handler+0x4>

08001874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001878:	e7fe      	b.n	8001878 <MemManage_Handler+0x4>

0800187a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800187e:	e7fe      	b.n	800187e <BusFault_Handler+0x4>

08001880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001884:	e7fe      	b.n	8001884 <UsageFault_Handler+0x4>

08001886 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018b4:	f000 f964 	bl	8001b80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018b8:	bf00      	nop
 80018ba:	bd80      	pop	{r7, pc}

080018bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  return 1;
 80018c0:	2301      	movs	r3, #1
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <_kill>:

int _kill(int pid, int sig)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018d6:	f008 feb3 	bl	800a640 <__errno>
 80018da:	4603      	mov	r3, r0
 80018dc:	2216      	movs	r2, #22
 80018de:	601a      	str	r2, [r3, #0]
  return -1;
 80018e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <_exit>:

void _exit (int status)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018f4:	f04f 31ff 	mov.w	r1, #4294967295
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f7ff ffe7 	bl	80018cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80018fe:	e7fe      	b.n	80018fe <_exit+0x12>

08001900 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]
 8001910:	e00a      	b.n	8001928 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001912:	f3af 8000 	nop.w
 8001916:	4601      	mov	r1, r0
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	1c5a      	adds	r2, r3, #1
 800191c:	60ba      	str	r2, [r7, #8]
 800191e:	b2ca      	uxtb	r2, r1
 8001920:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	3301      	adds	r3, #1
 8001926:	617b      	str	r3, [r7, #20]
 8001928:	697a      	ldr	r2, [r7, #20]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	429a      	cmp	r2, r3
 800192e:	dbf0      	blt.n	8001912 <_read+0x12>
  }

  return len;
 8001930:	687b      	ldr	r3, [r7, #4]
}
 8001932:	4618      	mov	r0, r3
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b086      	sub	sp, #24
 800193e:	af00      	add	r7, sp, #0
 8001940:	60f8      	str	r0, [r7, #12]
 8001942:	60b9      	str	r1, [r7, #8]
 8001944:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001946:	2300      	movs	r3, #0
 8001948:	617b      	str	r3, [r7, #20]
 800194a:	e009      	b.n	8001960 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	1c5a      	adds	r2, r3, #1
 8001950:	60ba      	str	r2, [r7, #8]
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	3301      	adds	r3, #1
 800195e:	617b      	str	r3, [r7, #20]
 8001960:	697a      	ldr	r2, [r7, #20]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	429a      	cmp	r2, r3
 8001966:	dbf1      	blt.n	800194c <_write+0x12>
  }
  return len;
 8001968:	687b      	ldr	r3, [r7, #4]
}
 800196a:	4618      	mov	r0, r3
 800196c:	3718      	adds	r7, #24
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <_close>:

int _close(int file)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800197a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800197e:	4618      	mov	r0, r3
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
 8001992:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800199a:	605a      	str	r2, [r3, #4]
  return 0;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <_isatty>:

int _isatty(int file)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b083      	sub	sp, #12
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019b2:	2301      	movs	r3, #1
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3714      	adds	r7, #20
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
	...

080019dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019e4:	4a14      	ldr	r2, [pc, #80]	; (8001a38 <_sbrk+0x5c>)
 80019e6:	4b15      	ldr	r3, [pc, #84]	; (8001a3c <_sbrk+0x60>)
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019f0:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <_sbrk+0x64>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d102      	bne.n	80019fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019f8:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <_sbrk+0x64>)
 80019fa:	4a12      	ldr	r2, [pc, #72]	; (8001a44 <_sbrk+0x68>)
 80019fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019fe:	4b10      	ldr	r3, [pc, #64]	; (8001a40 <_sbrk+0x64>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4413      	add	r3, r2
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d207      	bcs.n	8001a1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a0c:	f008 fe18 	bl	800a640 <__errno>
 8001a10:	4603      	mov	r3, r0
 8001a12:	220c      	movs	r2, #12
 8001a14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a16:	f04f 33ff 	mov.w	r3, #4294967295
 8001a1a:	e009      	b.n	8001a30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a1c:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <_sbrk+0x64>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a22:	4b07      	ldr	r3, [pc, #28]	; (8001a40 <_sbrk+0x64>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4413      	add	r3, r2
 8001a2a:	4a05      	ldr	r2, [pc, #20]	; (8001a40 <_sbrk+0x64>)
 8001a2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3718      	adds	r7, #24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	24080000 	.word	0x24080000
 8001a3c:	00000400 	.word	0x00000400
 8001a40:	24000a98 	.word	0x24000a98
 8001a44:	24000bf0 	.word	0x24000bf0

08001a48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001a48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a80 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a4c:	f7ff f812 	bl	8000a74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a50:	480c      	ldr	r0, [pc, #48]	; (8001a84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a52:	490d      	ldr	r1, [pc, #52]	; (8001a88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a54:	4a0d      	ldr	r2, [pc, #52]	; (8001a8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a58:	e002      	b.n	8001a60 <LoopCopyDataInit>

08001a5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a5e:	3304      	adds	r3, #4

08001a60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a64:	d3f9      	bcc.n	8001a5a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a66:	4a0a      	ldr	r2, [pc, #40]	; (8001a90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a68:	4c0a      	ldr	r4, [pc, #40]	; (8001a94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a6c:	e001      	b.n	8001a72 <LoopFillZerobss>

08001a6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a70:	3204      	adds	r2, #4

08001a72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a74:	d3fb      	bcc.n	8001a6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a76:	f008 fde9 	bl	800a64c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a7a:	f7ff f891 	bl	8000ba0 <main>
  bx  lr
 8001a7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a80:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001a84:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001a88:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8001a8c:	0800e120 	.word	0x0800e120
  ldr r2, =_sbss
 8001a90:	24000298 	.word	0x24000298
  ldr r4, =_ebss
 8001a94:	24000bec 	.word	0x24000bec

08001a98 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a98:	e7fe      	b.n	8001a98 <ADC3_IRQHandler>
	...

08001a9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aa2:	2003      	movs	r0, #3
 8001aa4:	f001 fcbc 	bl	8003420 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001aa8:	f003 fab0 	bl	800500c <HAL_RCC_GetSysClockFreq>
 8001aac:	4602      	mov	r2, r0
 8001aae:	4b15      	ldr	r3, [pc, #84]	; (8001b04 <HAL_Init+0x68>)
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	0a1b      	lsrs	r3, r3, #8
 8001ab4:	f003 030f 	and.w	r3, r3, #15
 8001ab8:	4913      	ldr	r1, [pc, #76]	; (8001b08 <HAL_Init+0x6c>)
 8001aba:	5ccb      	ldrb	r3, [r1, r3]
 8001abc:	f003 031f 	and.w	r3, r3, #31
 8001ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ac4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ac6:	4b0f      	ldr	r3, [pc, #60]	; (8001b04 <HAL_Init+0x68>)
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	f003 030f 	and.w	r3, r3, #15
 8001ace:	4a0e      	ldr	r2, [pc, #56]	; (8001b08 <HAL_Init+0x6c>)
 8001ad0:	5cd3      	ldrb	r3, [r2, r3]
 8001ad2:	f003 031f 	and.w	r3, r3, #31
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8001adc:	4a0b      	ldr	r2, [pc, #44]	; (8001b0c <HAL_Init+0x70>)
 8001ade:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ae0:	4a0b      	ldr	r2, [pc, #44]	; (8001b10 <HAL_Init+0x74>)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ae6:	2000      	movs	r0, #0
 8001ae8:	f000 f814 	bl	8001b14 <HAL_InitTick>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e002      	b.n	8001afc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001af6:	f7ff fc4d 	bl	8001394 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	58024400 	.word	0x58024400
 8001b08:	0800dcac 	.word	0x0800dcac
 8001b0c:	24000004 	.word	0x24000004
 8001b10:	24000000 	.word	0x24000000

08001b14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001b1c:	4b15      	ldr	r3, [pc, #84]	; (8001b74 <HAL_InitTick+0x60>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d101      	bne.n	8001b28 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e021      	b.n	8001b6c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001b28:	4b13      	ldr	r3, [pc, #76]	; (8001b78 <HAL_InitTick+0x64>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	4b11      	ldr	r3, [pc, #68]	; (8001b74 <HAL_InitTick+0x60>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	4619      	mov	r1, r3
 8001b32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f001 fc93 	bl	800346a <HAL_SYSTICK_Config>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e00e      	b.n	8001b6c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2b0f      	cmp	r3, #15
 8001b52:	d80a      	bhi.n	8001b6a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b54:	2200      	movs	r2, #0
 8001b56:	6879      	ldr	r1, [r7, #4]
 8001b58:	f04f 30ff 	mov.w	r0, #4294967295
 8001b5c:	f001 fc6b 	bl	8003436 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b60:	4a06      	ldr	r2, [pc, #24]	; (8001b7c <HAL_InitTick+0x68>)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b66:	2300      	movs	r3, #0
 8001b68:	e000      	b.n	8001b6c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	2400000c 	.word	0x2400000c
 8001b78:	24000000 	.word	0x24000000
 8001b7c:	24000008 	.word	0x24000008

08001b80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b84:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <HAL_IncTick+0x20>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	461a      	mov	r2, r3
 8001b8a:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <HAL_IncTick+0x24>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4413      	add	r3, r2
 8001b90:	4a04      	ldr	r2, [pc, #16]	; (8001ba4 <HAL_IncTick+0x24>)
 8001b92:	6013      	str	r3, [r2, #0]
}
 8001b94:	bf00      	nop
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	2400000c 	.word	0x2400000c
 8001ba4:	24000a9c 	.word	0x24000a9c

08001ba8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  return uwTick;
 8001bac:	4b03      	ldr	r3, [pc, #12]	; (8001bbc <HAL_GetTick+0x14>)
 8001bae:	681b      	ldr	r3, [r3, #0]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	24000a9c 	.word	0x24000a9c

08001bc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bc8:	f7ff ffee 	bl	8001ba8 <HAL_GetTick>
 8001bcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd8:	d005      	beq.n	8001be6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bda:	4b0a      	ldr	r3, [pc, #40]	; (8001c04 <HAL_Delay+0x44>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	461a      	mov	r2, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	4413      	add	r3, r2
 8001be4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001be6:	bf00      	nop
 8001be8:	f7ff ffde 	bl	8001ba8 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d8f7      	bhi.n	8001be8 <HAL_Delay+0x28>
  {
  }
}
 8001bf8:	bf00      	nop
 8001bfa:	bf00      	nop
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	2400000c 	.word	0x2400000c

08001c08 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001c0c:	4b03      	ldr	r3, [pc, #12]	; (8001c1c <HAL_GetREVID+0x14>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	0c1b      	lsrs	r3, r3, #16
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	5c001000 	.word	0x5c001000

08001c20 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001c28:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001c30:	4904      	ldr	r1, [pc, #16]	; (8001c44 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	604b      	str	r3, [r1, #4]
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	58000400 	.word	0x58000400

08001c48 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	431a      	orrs	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	609a      	str	r2, [r3, #8]
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
 8001c76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	431a      	orrs	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	609a      	str	r2, [r3, #8]
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b087      	sub	sp, #28
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
 8001cbc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	3360      	adds	r3, #96	; 0x60
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	430b      	orrs	r3, r1
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001ce4:	bf00      	nop
 8001ce6:	371c      	adds	r7, #28
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	f003 031f 	and.w	r3, r3, #31
 8001d0a:	6879      	ldr	r1, [r7, #4]
 8001d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d10:	431a      	orrs	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	611a      	str	r2, [r3, #16]
}
 8001d16:	bf00      	nop
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b087      	sub	sp, #28
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	60f8      	str	r0, [r7, #12]
 8001d2a:	60b9      	str	r1, [r7, #8]
 8001d2c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	3360      	adds	r3, #96	; 0x60
 8001d32:	461a      	mov	r2, r3
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	431a      	orrs	r2, r3
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	601a      	str	r2, [r3, #0]
  }
}
 8001d4c:	bf00      	nop
 8001d4e:	371c      	adds	r7, #28
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d101      	bne.n	8001d70 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e000      	b.n	8001d72 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b087      	sub	sp, #28
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	60f8      	str	r0, [r7, #12]
 8001d86:	60b9      	str	r1, [r7, #8]
 8001d88:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	3330      	adds	r3, #48	; 0x30
 8001d8e:	461a      	mov	r2, r3
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	0a1b      	lsrs	r3, r3, #8
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	f003 030c 	and.w	r3, r3, #12
 8001d9a:	4413      	add	r3, r2
 8001d9c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	f003 031f 	and.w	r3, r3, #31
 8001da8:	211f      	movs	r1, #31
 8001daa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dae:	43db      	mvns	r3, r3
 8001db0:	401a      	ands	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	0e9b      	lsrs	r3, r3, #26
 8001db6:	f003 011f 	and.w	r1, r3, #31
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	f003 031f 	and.w	r3, r3, #31
 8001dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc4:	431a      	orrs	r2, r3
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001dca:	bf00      	nop
 8001dcc:	371c      	adds	r7, #28
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b087      	sub	sp, #28
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	60f8      	str	r0, [r7, #12]
 8001dde:	60b9      	str	r1, [r7, #8]
 8001de0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	3314      	adds	r3, #20
 8001de6:	461a      	mov	r2, r3
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	0e5b      	lsrs	r3, r3, #25
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	f003 0304 	and.w	r3, r3, #4
 8001df2:	4413      	add	r3, r2
 8001df4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	0d1b      	lsrs	r3, r3, #20
 8001dfe:	f003 031f 	and.w	r3, r3, #31
 8001e02:	2107      	movs	r1, #7
 8001e04:	fa01 f303 	lsl.w	r3, r1, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	401a      	ands	r2, r3
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	0d1b      	lsrs	r3, r3, #20
 8001e10:	f003 031f 	and.w	r3, r3, #31
 8001e14:	6879      	ldr	r1, [r7, #4]
 8001e16:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1a:	431a      	orrs	r2, r3
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001e20:	bf00      	nop
 8001e22:	371c      	adds	r7, #28
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e44:	43db      	mvns	r3, r3
 8001e46:	401a      	ands	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f003 0318 	and.w	r3, r3, #24
 8001e4e:	4908      	ldr	r1, [pc, #32]	; (8001e70 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e50:	40d9      	lsrs	r1, r3
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	400b      	ands	r3, r1
 8001e56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001e62:	bf00      	nop
 8001e64:	3714      	adds	r7, #20
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	000fffff 	.word	0x000fffff

08001e74 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f003 031f 	and.w	r3, r3, #31
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689a      	ldr	r2, [r3, #8]
 8001eb8:	4b04      	ldr	r3, [pc, #16]	; (8001ecc <LL_ADC_DisableDeepPowerDown+0x20>)
 8001eba:	4013      	ands	r3, r2
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	6093      	str	r3, [r2, #8]
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	5fffffc0 	.word	0x5fffffc0

08001ed0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ee0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ee4:	d101      	bne.n	8001eea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e000      	b.n	8001eec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <LL_ADC_EnableInternalRegulator+0x24>)
 8001f06:	4013      	ands	r3, r2
 8001f08:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	6fffffc0 	.word	0x6fffffc0

08001f20 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f34:	d101      	bne.n	8001f3a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f36:	2301      	movs	r3, #1
 8001f38:	e000      	b.n	8001f3c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689a      	ldr	r2, [r3, #8]
 8001f54:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <LL_ADC_Enable+0x24>)
 8001f56:	4013      	ands	r3, r2
 8001f58:	f043 0201 	orr.w	r2, r3, #1
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	7fffffc0 	.word	0x7fffffc0

08001f70 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d101      	bne.n	8001f88 <LL_ADC_IsEnabled+0x18>
 8001f84:	2301      	movs	r3, #1
 8001f86:	e000      	b.n	8001f8a <LL_ADC_IsEnabled+0x1a>
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
	...

08001f98 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	4b05      	ldr	r3, [pc, #20]	; (8001fbc <LL_ADC_REG_StartConversion+0x24>)
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	f043 0204 	orr.w	r2, r3, #4
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	7fffffc0 	.word	0x7fffffc0

08001fc0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f003 0304 	and.w	r3, r3, #4
 8001fd0:	2b04      	cmp	r3, #4
 8001fd2:	d101      	bne.n	8001fd8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e000      	b.n	8001fda <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f003 0308 	and.w	r3, r3, #8
 8001ff6:	2b08      	cmp	r3, #8
 8001ff8:	d101      	bne.n	8001ffe <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e000      	b.n	8002000 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	4618      	mov	r0, r3
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800200c:	b590      	push	{r4, r7, lr}
 800200e:	b089      	sub	sp, #36	; 0x24
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002014:	2300      	movs	r3, #0
 8002016:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002018:	2300      	movs	r3, #0
 800201a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e18f      	b.n	8002346 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002030:	2b00      	cmp	r3, #0
 8002032:	d109      	bne.n	8002048 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f7ff f9c7 	bl	80013c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff ff3f 	bl	8001ed0 <LL_ADC_IsDeepPowerDownEnabled>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d004      	beq.n	8002062 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff ff25 	bl	8001eac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff ff5a 	bl	8001f20 <LL_ADC_IsInternalRegulatorEnabled>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d114      	bne.n	800209c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff ff3e 	bl	8001ef8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800207c:	4b87      	ldr	r3, [pc, #540]	; (800229c <HAL_ADC_Init+0x290>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	099b      	lsrs	r3, r3, #6
 8002082:	4a87      	ldr	r2, [pc, #540]	; (80022a0 <HAL_ADC_Init+0x294>)
 8002084:	fba2 2303 	umull	r2, r3, r2, r3
 8002088:	099b      	lsrs	r3, r3, #6
 800208a:	3301      	adds	r3, #1
 800208c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800208e:	e002      	b.n	8002096 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	3b01      	subs	r3, #1
 8002094:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1f9      	bne.n	8002090 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff ff3d 	bl	8001f20 <LL_ADC_IsInternalRegulatorEnabled>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d10d      	bne.n	80020c8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b0:	f043 0210 	orr.w	r2, r3, #16
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020bc:	f043 0201 	orr.w	r2, r3, #1
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff ff77 	bl	8001fc0 <LL_ADC_REG_IsConversionOngoing>
 80020d2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d8:	f003 0310 	and.w	r3, r3, #16
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f040 8129 	bne.w	8002334 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f040 8125 	bne.w	8002334 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ee:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80020f2:	f043 0202 	orr.w	r2, r3, #2
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff ff36 	bl	8001f70 <LL_ADC_IsEnabled>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d136      	bne.n	8002178 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a65      	ldr	r2, [pc, #404]	; (80022a4 <HAL_ADC_Init+0x298>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d004      	beq.n	800211e <HAL_ADC_Init+0x112>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a63      	ldr	r2, [pc, #396]	; (80022a8 <HAL_ADC_Init+0x29c>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d10e      	bne.n	800213c <HAL_ADC_Init+0x130>
 800211e:	4861      	ldr	r0, [pc, #388]	; (80022a4 <HAL_ADC_Init+0x298>)
 8002120:	f7ff ff26 	bl	8001f70 <LL_ADC_IsEnabled>
 8002124:	4604      	mov	r4, r0
 8002126:	4860      	ldr	r0, [pc, #384]	; (80022a8 <HAL_ADC_Init+0x29c>)
 8002128:	f7ff ff22 	bl	8001f70 <LL_ADC_IsEnabled>
 800212c:	4603      	mov	r3, r0
 800212e:	4323      	orrs	r3, r4
 8002130:	2b00      	cmp	r3, #0
 8002132:	bf0c      	ite	eq
 8002134:	2301      	moveq	r3, #1
 8002136:	2300      	movne	r3, #0
 8002138:	b2db      	uxtb	r3, r3
 800213a:	e008      	b.n	800214e <HAL_ADC_Init+0x142>
 800213c:	485b      	ldr	r0, [pc, #364]	; (80022ac <HAL_ADC_Init+0x2a0>)
 800213e:	f7ff ff17 	bl	8001f70 <LL_ADC_IsEnabled>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	bf0c      	ite	eq
 8002148:	2301      	moveq	r3, #1
 800214a:	2300      	movne	r3, #0
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d012      	beq.n	8002178 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a53      	ldr	r2, [pc, #332]	; (80022a4 <HAL_ADC_Init+0x298>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d004      	beq.n	8002166 <HAL_ADC_Init+0x15a>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a51      	ldr	r2, [pc, #324]	; (80022a8 <HAL_ADC_Init+0x29c>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d101      	bne.n	800216a <HAL_ADC_Init+0x15e>
 8002166:	4a52      	ldr	r2, [pc, #328]	; (80022b0 <HAL_ADC_Init+0x2a4>)
 8002168:	e000      	b.n	800216c <HAL_ADC_Init+0x160>
 800216a:	4a52      	ldr	r2, [pc, #328]	; (80022b4 <HAL_ADC_Init+0x2a8>)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	4619      	mov	r1, r3
 8002172:	4610      	mov	r0, r2
 8002174:	f7ff fd68 	bl	8001c48 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002178:	f7ff fd46 	bl	8001c08 <HAL_GetREVID>
 800217c:	4603      	mov	r3, r0
 800217e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002182:	4293      	cmp	r3, r2
 8002184:	d914      	bls.n	80021b0 <HAL_ADC_Init+0x1a4>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	2b10      	cmp	r3, #16
 800218c:	d110      	bne.n	80021b0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	7d5b      	ldrb	r3, [r3, #21]
 8002192:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002198:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800219e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	7f1b      	ldrb	r3, [r3, #28]
 80021a4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80021a6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80021a8:	f043 030c 	orr.w	r3, r3, #12
 80021ac:	61bb      	str	r3, [r7, #24]
 80021ae:	e00d      	b.n	80021cc <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	7d5b      	ldrb	r3, [r3, #21]
 80021b4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80021ba:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80021c0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	7f1b      	ldrb	r3, [r3, #28]
 80021c6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80021c8:	4313      	orrs	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	7f1b      	ldrb	r3, [r3, #28]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d106      	bne.n	80021e2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a1b      	ldr	r3, [r3, #32]
 80021d8:	3b01      	subs	r3, #1
 80021da:	045b      	lsls	r3, r3, #17
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	4313      	orrs	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d009      	beq.n	80021fe <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ee:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68da      	ldr	r2, [r3, #12]
 8002204:	4b2c      	ldr	r3, [pc, #176]	; (80022b8 <HAL_ADC_Init+0x2ac>)
 8002206:	4013      	ands	r3, r2
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	6812      	ldr	r2, [r2, #0]
 800220c:	69b9      	ldr	r1, [r7, #24]
 800220e:	430b      	orrs	r3, r1
 8002210:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff fed2 	bl	8001fc0 <LL_ADC_REG_IsConversionOngoing>
 800221c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f7ff fedf 	bl	8001fe6 <LL_ADC_INJ_IsConversionOngoing>
 8002228:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d15f      	bne.n	80022f0 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d15c      	bne.n	80022f0 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	7d1b      	ldrb	r3, [r3, #20]
 800223a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002240:	4313      	orrs	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68da      	ldr	r2, [r3, #12]
 800224a:	4b1c      	ldr	r3, [pc, #112]	; (80022bc <HAL_ADC_Init+0x2b0>)
 800224c:	4013      	ands	r3, r2
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	6812      	ldr	r2, [r2, #0]
 8002252:	69b9      	ldr	r1, [r7, #24]
 8002254:	430b      	orrs	r3, r1
 8002256:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800225e:	2b01      	cmp	r3, #1
 8002260:	d130      	bne.n	80022c4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002266:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	691a      	ldr	r2, [r3, #16]
 800226e:	4b14      	ldr	r3, [pc, #80]	; (80022c0 <HAL_ADC_Init+0x2b4>)
 8002270:	4013      	ands	r3, r2
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002276:	3a01      	subs	r2, #1
 8002278:	0411      	lsls	r1, r2, #16
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800227e:	4311      	orrs	r1, r2
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002284:	4311      	orrs	r1, r2
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800228a:	430a      	orrs	r2, r1
 800228c:	431a      	orrs	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f042 0201 	orr.w	r2, r2, #1
 8002296:	611a      	str	r2, [r3, #16]
 8002298:	e01c      	b.n	80022d4 <HAL_ADC_Init+0x2c8>
 800229a:	bf00      	nop
 800229c:	24000000 	.word	0x24000000
 80022a0:	053e2d63 	.word	0x053e2d63
 80022a4:	40022000 	.word	0x40022000
 80022a8:	40022100 	.word	0x40022100
 80022ac:	58026000 	.word	0x58026000
 80022b0:	40022300 	.word	0x40022300
 80022b4:	58026300 	.word	0x58026300
 80022b8:	fff0c003 	.word	0xfff0c003
 80022bc:	ffffbffc 	.word	0xffffbffc
 80022c0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	691a      	ldr	r2, [r3, #16]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f022 0201 	bic.w	r2, r2, #1
 80022d2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 fdd6 	bl	8002e9c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d10c      	bne.n	8002312 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	f023 010f 	bic.w	r1, r3, #15
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	1e5a      	subs	r2, r3, #1
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	430a      	orrs	r2, r1
 800230e:	631a      	str	r2, [r3, #48]	; 0x30
 8002310:	e007      	b.n	8002322 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f022 020f 	bic.w	r2, r2, #15
 8002320:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002326:	f023 0303 	bic.w	r3, r3, #3
 800232a:	f043 0201 	orr.w	r2, r3, #1
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	655a      	str	r2, [r3, #84]	; 0x54
 8002332:	e007      	b.n	8002344 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002338:	f043 0210 	orr.w	r2, r3, #16
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002344:	7ffb      	ldrb	r3, [r7, #31]
}
 8002346:	4618      	mov	r0, r3
 8002348:	3724      	adds	r7, #36	; 0x24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd90      	pop	{r4, r7, pc}
 800234e:	bf00      	nop

08002350 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a5c      	ldr	r2, [pc, #368]	; (80024d0 <HAL_ADC_Start+0x180>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d004      	beq.n	800236c <HAL_ADC_Start+0x1c>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a5b      	ldr	r2, [pc, #364]	; (80024d4 <HAL_ADC_Start+0x184>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d101      	bne.n	8002370 <HAL_ADC_Start+0x20>
 800236c:	4b5a      	ldr	r3, [pc, #360]	; (80024d8 <HAL_ADC_Start+0x188>)
 800236e:	e000      	b.n	8002372 <HAL_ADC_Start+0x22>
 8002370:	4b5a      	ldr	r3, [pc, #360]	; (80024dc <HAL_ADC_Start+0x18c>)
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff fd7e 	bl	8001e74 <LL_ADC_GetMultimode>
 8002378:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff fe1e 	bl	8001fc0 <LL_ADC_REG_IsConversionOngoing>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	f040 809a 	bne.w	80024c0 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002392:	2b01      	cmp	r3, #1
 8002394:	d101      	bne.n	800239a <HAL_ADC_Start+0x4a>
 8002396:	2302      	movs	r3, #2
 8002398:	e095      	b.n	80024c6 <HAL_ADC_Start+0x176>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 fcf0 	bl	8002d88 <ADC_Enable>
 80023a8:	4603      	mov	r3, r0
 80023aa:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80023ac:	7dfb      	ldrb	r3, [r7, #23]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f040 8081 	bne.w	80024b6 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80023b8:	4b49      	ldr	r3, [pc, #292]	; (80024e0 <HAL_ADC_Start+0x190>)
 80023ba:	4013      	ands	r3, r2
 80023bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a42      	ldr	r2, [pc, #264]	; (80024d4 <HAL_ADC_Start+0x184>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d002      	beq.n	80023d4 <HAL_ADC_Start+0x84>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	e000      	b.n	80023d6 <HAL_ADC_Start+0x86>
 80023d4:	4b3e      	ldr	r3, [pc, #248]	; (80024d0 <HAL_ADC_Start+0x180>)
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	6812      	ldr	r2, [r2, #0]
 80023da:	4293      	cmp	r3, r2
 80023dc:	d002      	beq.n	80023e4 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d105      	bne.n	80023f0 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023fc:	d106      	bne.n	800240c <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002402:	f023 0206 	bic.w	r2, r3, #6
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	659a      	str	r2, [r3, #88]	; 0x58
 800240a:	e002      	b.n	8002412 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	221c      	movs	r2, #28
 8002418:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a2b      	ldr	r2, [pc, #172]	; (80024d4 <HAL_ADC_Start+0x184>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d002      	beq.n	8002432 <HAL_ADC_Start+0xe2>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	e000      	b.n	8002434 <HAL_ADC_Start+0xe4>
 8002432:	4b27      	ldr	r3, [pc, #156]	; (80024d0 <HAL_ADC_Start+0x180>)
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	6812      	ldr	r2, [r2, #0]
 8002438:	4293      	cmp	r3, r2
 800243a:	d008      	beq.n	800244e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d005      	beq.n	800244e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	2b05      	cmp	r3, #5
 8002446:	d002      	beq.n	800244e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	2b09      	cmp	r3, #9
 800244c:	d114      	bne.n	8002478 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d007      	beq.n	800246c <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002460:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002464:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff fd91 	bl	8001f98 <LL_ADC_REG_StartConversion>
 8002476:	e025      	b.n	80024c4 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800247c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a12      	ldr	r2, [pc, #72]	; (80024d4 <HAL_ADC_Start+0x184>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d002      	beq.n	8002494 <HAL_ADC_Start+0x144>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	e000      	b.n	8002496 <HAL_ADC_Start+0x146>
 8002494:	4b0e      	ldr	r3, [pc, #56]	; (80024d0 <HAL_ADC_Start+0x180>)
 8002496:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d00f      	beq.n	80024c4 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024ac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	655a      	str	r2, [r3, #84]	; 0x54
 80024b4:	e006      	b.n	80024c4 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80024be:	e001      	b.n	80024c4 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80024c0:	2302      	movs	r3, #2
 80024c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80024c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3718      	adds	r7, #24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40022000 	.word	0x40022000
 80024d4:	40022100 	.word	0x40022100
 80024d8:	40022300 	.word	0x40022300
 80024dc:	58026300 	.word	0x58026300
 80024e0:	fffff0fe 	.word	0xfffff0fe

080024e4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b088      	sub	sp, #32
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a72      	ldr	r2, [pc, #456]	; (80026bc <HAL_ADC_PollForConversion+0x1d8>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d004      	beq.n	8002502 <HAL_ADC_PollForConversion+0x1e>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a70      	ldr	r2, [pc, #448]	; (80026c0 <HAL_ADC_PollForConversion+0x1dc>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d101      	bne.n	8002506 <HAL_ADC_PollForConversion+0x22>
 8002502:	4b70      	ldr	r3, [pc, #448]	; (80026c4 <HAL_ADC_PollForConversion+0x1e0>)
 8002504:	e000      	b.n	8002508 <HAL_ADC_PollForConversion+0x24>
 8002506:	4b70      	ldr	r3, [pc, #448]	; (80026c8 <HAL_ADC_PollForConversion+0x1e4>)
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff fcb3 	bl	8001e74 <LL_ADC_GetMultimode>
 800250e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	2b08      	cmp	r3, #8
 8002516:	d102      	bne.n	800251e <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002518:	2308      	movs	r3, #8
 800251a:	61fb      	str	r3, [r7, #28]
 800251c:	e037      	b.n	800258e <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d005      	beq.n	8002530 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	2b05      	cmp	r3, #5
 8002528:	d002      	beq.n	8002530 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	2b09      	cmp	r3, #9
 800252e:	d111      	bne.n	8002554 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	d007      	beq.n	800254e <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002542:	f043 0220 	orr.w	r2, r3, #32
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e0b1      	b.n	80026b2 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800254e:	2304      	movs	r3, #4
 8002550:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8002552:	e01c      	b.n	800258e <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a58      	ldr	r2, [pc, #352]	; (80026bc <HAL_ADC_PollForConversion+0x1d8>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d004      	beq.n	8002568 <HAL_ADC_PollForConversion+0x84>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a57      	ldr	r2, [pc, #348]	; (80026c0 <HAL_ADC_PollForConversion+0x1dc>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d101      	bne.n	800256c <HAL_ADC_PollForConversion+0x88>
 8002568:	4b56      	ldr	r3, [pc, #344]	; (80026c4 <HAL_ADC_PollForConversion+0x1e0>)
 800256a:	e000      	b.n	800256e <HAL_ADC_PollForConversion+0x8a>
 800256c:	4b56      	ldr	r3, [pc, #344]	; (80026c8 <HAL_ADC_PollForConversion+0x1e4>)
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff fc8e 	bl	8001e90 <LL_ADC_GetMultiDMATransfer>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d007      	beq.n	800258a <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800257e:	f043 0220 	orr.w	r2, r3, #32
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e093      	b.n	80026b2 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800258a:	2304      	movs	r3, #4
 800258c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800258e:	f7ff fb0b 	bl	8001ba8 <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002594:	e021      	b.n	80025da <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800259c:	d01d      	beq.n	80025da <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800259e:	f7ff fb03 	bl	8001ba8 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d302      	bcc.n	80025b4 <HAL_ADC_PollForConversion+0xd0>
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d112      	bne.n	80025da <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	4013      	ands	r3, r2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10b      	bne.n	80025da <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c6:	f043 0204 	orr.w	r2, r3, #4
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e06b      	b.n	80026b2 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	4013      	ands	r3, r2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d0d6      	beq.n	8002596 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff fbad 	bl	8001d58 <LL_ADC_REG_IsTriggerSourceSWStart>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d01c      	beq.n	800263e <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	7d5b      	ldrb	r3, [r3, #21]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d118      	bne.n	800263e <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0308 	and.w	r3, r3, #8
 8002616:	2b08      	cmp	r3, #8
 8002618:	d111      	bne.n	800263e <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800261e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800262a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d105      	bne.n	800263e <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002636:	f043 0201 	orr.w	r2, r3, #1
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a1f      	ldr	r2, [pc, #124]	; (80026c0 <HAL_ADC_PollForConversion+0x1dc>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d002      	beq.n	800264e <HAL_ADC_PollForConversion+0x16a>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	e000      	b.n	8002650 <HAL_ADC_PollForConversion+0x16c>
 800264e:	4b1b      	ldr	r3, [pc, #108]	; (80026bc <HAL_ADC_PollForConversion+0x1d8>)
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	6812      	ldr	r2, [r2, #0]
 8002654:	4293      	cmp	r3, r2
 8002656:	d008      	beq.n	800266a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d005      	beq.n	800266a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	2b05      	cmp	r3, #5
 8002662:	d002      	beq.n	800266a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	2b09      	cmp	r3, #9
 8002668:	d104      	bne.n	8002674 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	61bb      	str	r3, [r7, #24]
 8002672:	e00c      	b.n	800268e <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a11      	ldr	r2, [pc, #68]	; (80026c0 <HAL_ADC_PollForConversion+0x1dc>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d002      	beq.n	8002684 <HAL_ADC_PollForConversion+0x1a0>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	e000      	b.n	8002686 <HAL_ADC_PollForConversion+0x1a2>
 8002684:	4b0d      	ldr	r3, [pc, #52]	; (80026bc <HAL_ADC_PollForConversion+0x1d8>)
 8002686:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	2b08      	cmp	r3, #8
 8002692:	d104      	bne.n	800269e <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2208      	movs	r2, #8
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	e008      	b.n	80026b0 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d103      	bne.n	80026b0 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	220c      	movs	r2, #12
 80026ae:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3720      	adds	r7, #32
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40022000 	.word	0x40022000
 80026c0:	40022100 	.word	0x40022100
 80026c4:	40022300 	.word	0x40022300
 80026c8:	58026300 	.word	0x58026300

080026cc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80026da:	4618      	mov	r0, r3
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
	...

080026e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80026e8:	b590      	push	{r4, r7, lr}
 80026ea:	b0a1      	sub	sp, #132	; 0x84
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026f2:	2300      	movs	r3, #0
 80026f4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80026f8:	2300      	movs	r3, #0
 80026fa:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	4a9d      	ldr	r2, [pc, #628]	; (8002978 <HAL_ADC_ConfigChannel+0x290>)
 8002702:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800270a:	2b01      	cmp	r3, #1
 800270c:	d101      	bne.n	8002712 <HAL_ADC_ConfigChannel+0x2a>
 800270e:	2302      	movs	r3, #2
 8002710:	e321      	b.n	8002d56 <HAL_ADC_ConfigChannel+0x66e>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4618      	mov	r0, r3
 8002720:	f7ff fc4e 	bl	8001fc0 <LL_ADC_REG_IsConversionOngoing>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	f040 8306 	bne.w	8002d38 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002734:	2b00      	cmp	r3, #0
 8002736:	d108      	bne.n	800274a <HAL_ADC_ConfigChannel+0x62>
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	0e9b      	lsrs	r3, r3, #26
 800273e:	f003 031f 	and.w	r3, r3, #31
 8002742:	2201      	movs	r2, #1
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	e016      	b.n	8002778 <HAL_ADC_ConfigChannel+0x90>
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002750:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002752:	fa93 f3a3 	rbit	r3, r3
 8002756:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002758:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800275a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800275c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002762:	2320      	movs	r3, #32
 8002764:	e003      	b.n	800276e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002766:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002768:	fab3 f383 	clz	r3, r3
 800276c:	b2db      	uxtb	r3, r3
 800276e:	f003 031f 	and.w	r3, r3, #31
 8002772:	2201      	movs	r2, #1
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	6812      	ldr	r2, [r2, #0]
 800277c:	69d1      	ldr	r1, [r2, #28]
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	6812      	ldr	r2, [r2, #0]
 8002782:	430b      	orrs	r3, r1
 8002784:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6818      	ldr	r0, [r3, #0]
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	6859      	ldr	r1, [r3, #4]
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	461a      	mov	r2, r3
 8002794:	f7ff faf3 	bl	8001d7e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff fc0f 	bl	8001fc0 <LL_ADC_REG_IsConversionOngoing>
 80027a2:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff fc1c 	bl	8001fe6 <LL_ADC_INJ_IsConversionOngoing>
 80027ae:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f040 80b3 	bne.w	800291e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f040 80af 	bne.w	800291e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6818      	ldr	r0, [r3, #0]
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	6819      	ldr	r1, [r3, #0]
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	461a      	mov	r2, r3
 80027ce:	f7ff fb02 	bl	8001dd6 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80027d2:	4b6a      	ldr	r3, [pc, #424]	; (800297c <HAL_ADC_ConfigChannel+0x294>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80027da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027de:	d10b      	bne.n	80027f8 <HAL_ADC_ConfigChannel+0x110>
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	695a      	ldr	r2, [r3, #20]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	089b      	lsrs	r3, r3, #2
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	e01d      	b.n	8002834 <HAL_ADC_ConfigChannel+0x14c>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	f003 0310 	and.w	r3, r3, #16
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10b      	bne.n	800281e <HAL_ADC_ConfigChannel+0x136>
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	695a      	ldr	r2, [r3, #20]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	089b      	lsrs	r3, r3, #2
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	e00a      	b.n	8002834 <HAL_ADC_ConfigChannel+0x14c>
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	695a      	ldr	r2, [r3, #20]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	089b      	lsrs	r3, r3, #2
 800282a:	f003 0304 	and.w	r3, r3, #4
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	2b04      	cmp	r3, #4
 800283c:	d027      	beq.n	800288e <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6818      	ldr	r0, [r3, #0]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	6919      	ldr	r1, [r3, #16]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800284c:	f7ff fa30 	bl	8001cb0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6818      	ldr	r0, [r3, #0]
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	6919      	ldr	r1, [r3, #16]
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	7e5b      	ldrb	r3, [r3, #25]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d102      	bne.n	8002866 <HAL_ADC_ConfigChannel+0x17e>
 8002860:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002864:	e000      	b.n	8002868 <HAL_ADC_ConfigChannel+0x180>
 8002866:	2300      	movs	r3, #0
 8002868:	461a      	mov	r2, r3
 800286a:	f7ff fa5a 	bl	8001d22 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6818      	ldr	r0, [r3, #0]
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	6919      	ldr	r1, [r3, #16]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	7e1b      	ldrb	r3, [r3, #24]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d102      	bne.n	8002884 <HAL_ADC_ConfigChannel+0x19c>
 800287e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002882:	e000      	b.n	8002886 <HAL_ADC_ConfigChannel+0x19e>
 8002884:	2300      	movs	r3, #0
 8002886:	461a      	mov	r2, r3
 8002888:	f7ff fa32 	bl	8001cf0 <LL_ADC_SetDataRightShift>
 800288c:	e047      	b.n	800291e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002894:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	069b      	lsls	r3, r3, #26
 800289e:	429a      	cmp	r2, r3
 80028a0:	d107      	bne.n	80028b2 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80028b0:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	069b      	lsls	r3, r3, #26
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d107      	bne.n	80028d6 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80028d4:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	069b      	lsls	r3, r3, #26
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d107      	bne.n	80028fa <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80028f8:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002900:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	069b      	lsls	r3, r3, #26
 800290a:	429a      	cmp	r2, r3
 800290c:	d107      	bne.n	800291e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800291c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff fb24 	bl	8001f70 <LL_ADC_IsEnabled>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	f040 820d 	bne.w	8002d4a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6818      	ldr	r0, [r3, #0]
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	6819      	ldr	r1, [r3, #0]
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	461a      	mov	r2, r3
 800293e:	f7ff fa75 	bl	8001e2c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	4a0c      	ldr	r2, [pc, #48]	; (8002978 <HAL_ADC_ConfigChannel+0x290>)
 8002948:	4293      	cmp	r3, r2
 800294a:	f040 8133 	bne.w	8002bb4 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800295a:	2b00      	cmp	r3, #0
 800295c:	d110      	bne.n	8002980 <HAL_ADC_ConfigChannel+0x298>
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	0e9b      	lsrs	r3, r3, #26
 8002964:	3301      	adds	r3, #1
 8002966:	f003 031f 	and.w	r3, r3, #31
 800296a:	2b09      	cmp	r3, #9
 800296c:	bf94      	ite	ls
 800296e:	2301      	movls	r3, #1
 8002970:	2300      	movhi	r3, #0
 8002972:	b2db      	uxtb	r3, r3
 8002974:	e01e      	b.n	80029b4 <HAL_ADC_ConfigChannel+0x2cc>
 8002976:	bf00      	nop
 8002978:	47ff0000 	.word	0x47ff0000
 800297c:	5c001000 	.word	0x5c001000
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002986:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002988:	fa93 f3a3 	rbit	r3, r3
 800298c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800298e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002990:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002992:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002994:	2b00      	cmp	r3, #0
 8002996:	d101      	bne.n	800299c <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002998:	2320      	movs	r3, #32
 800299a:	e003      	b.n	80029a4 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800299c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800299e:	fab3 f383 	clz	r3, r3
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	3301      	adds	r3, #1
 80029a6:	f003 031f 	and.w	r3, r3, #31
 80029aa:	2b09      	cmp	r3, #9
 80029ac:	bf94      	ite	ls
 80029ae:	2301      	movls	r3, #1
 80029b0:	2300      	movhi	r3, #0
 80029b2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d079      	beq.n	8002aac <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d107      	bne.n	80029d4 <HAL_ADC_ConfigChannel+0x2ec>
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	0e9b      	lsrs	r3, r3, #26
 80029ca:	3301      	adds	r3, #1
 80029cc:	069b      	lsls	r3, r3, #26
 80029ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029d2:	e015      	b.n	8002a00 <HAL_ADC_ConfigChannel+0x318>
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029dc:	fa93 f3a3 	rbit	r3, r3
 80029e0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80029e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029e4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80029e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d101      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80029ec:	2320      	movs	r3, #32
 80029ee:	e003      	b.n	80029f8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80029f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029f2:	fab3 f383 	clz	r3, r3
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	3301      	adds	r3, #1
 80029fa:	069b      	lsls	r3, r3, #26
 80029fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d109      	bne.n	8002a20 <HAL_ADC_ConfigChannel+0x338>
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	0e9b      	lsrs	r3, r3, #26
 8002a12:	3301      	adds	r3, #1
 8002a14:	f003 031f 	and.w	r3, r3, #31
 8002a18:	2101      	movs	r1, #1
 8002a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1e:	e017      	b.n	8002a50 <HAL_ADC_ConfigChannel+0x368>
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a28:	fa93 f3a3 	rbit	r3, r3
 8002a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a30:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002a32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d101      	bne.n	8002a3c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002a38:	2320      	movs	r3, #32
 8002a3a:	e003      	b.n	8002a44 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002a3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a3e:	fab3 f383 	clz	r3, r3
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	3301      	adds	r3, #1
 8002a46:	f003 031f 	and.w	r3, r3, #31
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a50:	ea42 0103 	orr.w	r1, r2, r3
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d10a      	bne.n	8002a76 <HAL_ADC_ConfigChannel+0x38e>
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	0e9b      	lsrs	r3, r3, #26
 8002a66:	3301      	adds	r3, #1
 8002a68:	f003 021f 	and.w	r2, r3, #31
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	4413      	add	r3, r2
 8002a72:	051b      	lsls	r3, r3, #20
 8002a74:	e018      	b.n	8002aa8 <HAL_ADC_ConfigChannel+0x3c0>
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a7e:	fa93 f3a3 	rbit	r3, r3
 8002a82:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a86:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002a8e:	2320      	movs	r3, #32
 8002a90:	e003      	b.n	8002a9a <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8002a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a94:	fab3 f383 	clz	r3, r3
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	f003 021f 	and.w	r2, r3, #31
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	4413      	add	r3, r2
 8002aa6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002aa8:	430b      	orrs	r3, r1
 8002aaa:	e07e      	b.n	8002baa <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d107      	bne.n	8002ac8 <HAL_ADC_ConfigChannel+0x3e0>
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	0e9b      	lsrs	r3, r3, #26
 8002abe:	3301      	adds	r3, #1
 8002ac0:	069b      	lsls	r3, r3, #26
 8002ac2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ac6:	e015      	b.n	8002af4 <HAL_ADC_ConfigChannel+0x40c>
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad0:	fa93 f3a3 	rbit	r3, r3
 8002ad4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002ae0:	2320      	movs	r3, #32
 8002ae2:	e003      	b.n	8002aec <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae6:	fab3 f383 	clz	r3, r3
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	3301      	adds	r3, #1
 8002aee:	069b      	lsls	r3, r3, #26
 8002af0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d109      	bne.n	8002b14 <HAL_ADC_ConfigChannel+0x42c>
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	0e9b      	lsrs	r3, r3, #26
 8002b06:	3301      	adds	r3, #1
 8002b08:	f003 031f 	and.w	r3, r3, #31
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b12:	e017      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x45c>
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	fa93 f3a3 	rbit	r3, r3
 8002b20:	61bb      	str	r3, [r7, #24]
  return result;
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002b26:	6a3b      	ldr	r3, [r7, #32]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002b2c:	2320      	movs	r3, #32
 8002b2e:	e003      	b.n	8002b38 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8002b30:	6a3b      	ldr	r3, [r7, #32]
 8002b32:	fab3 f383 	clz	r3, r3
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	3301      	adds	r3, #1
 8002b3a:	f003 031f 	and.w	r3, r3, #31
 8002b3e:	2101      	movs	r1, #1
 8002b40:	fa01 f303 	lsl.w	r3, r1, r3
 8002b44:	ea42 0103 	orr.w	r1, r2, r3
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d10d      	bne.n	8002b70 <HAL_ADC_ConfigChannel+0x488>
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	0e9b      	lsrs	r3, r3, #26
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	f003 021f 	and.w	r2, r3, #31
 8002b60:	4613      	mov	r3, r2
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	4413      	add	r3, r2
 8002b66:	3b1e      	subs	r3, #30
 8002b68:	051b      	lsls	r3, r3, #20
 8002b6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b6e:	e01b      	b.n	8002ba8 <HAL_ADC_ConfigChannel+0x4c0>
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	fa93 f3a3 	rbit	r3, r3
 8002b7c:	60fb      	str	r3, [r7, #12]
  return result;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d101      	bne.n	8002b8c <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002b88:	2320      	movs	r3, #32
 8002b8a:	e003      	b.n	8002b94 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	fab3 f383 	clz	r3, r3
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	3301      	adds	r3, #1
 8002b96:	f003 021f 	and.w	r2, r3, #31
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	4413      	add	r3, r2
 8002ba0:	3b1e      	subs	r3, #30
 8002ba2:	051b      	lsls	r3, r3, #20
 8002ba4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ba8:	430b      	orrs	r3, r1
 8002baa:	683a      	ldr	r2, [r7, #0]
 8002bac:	6892      	ldr	r2, [r2, #8]
 8002bae:	4619      	mov	r1, r3
 8002bb0:	f7ff f911 	bl	8001dd6 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f280 80c6 	bge.w	8002d4a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a67      	ldr	r2, [pc, #412]	; (8002d60 <HAL_ADC_ConfigChannel+0x678>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d004      	beq.n	8002bd2 <HAL_ADC_ConfigChannel+0x4ea>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a65      	ldr	r2, [pc, #404]	; (8002d64 <HAL_ADC_ConfigChannel+0x67c>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d101      	bne.n	8002bd6 <HAL_ADC_ConfigChannel+0x4ee>
 8002bd2:	4b65      	ldr	r3, [pc, #404]	; (8002d68 <HAL_ADC_ConfigChannel+0x680>)
 8002bd4:	e000      	b.n	8002bd8 <HAL_ADC_ConfigChannel+0x4f0>
 8002bd6:	4b65      	ldr	r3, [pc, #404]	; (8002d6c <HAL_ADC_ConfigChannel+0x684>)
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7ff f85b 	bl	8001c94 <LL_ADC_GetCommonPathInternalCh>
 8002bde:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a5e      	ldr	r2, [pc, #376]	; (8002d60 <HAL_ADC_ConfigChannel+0x678>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d004      	beq.n	8002bf4 <HAL_ADC_ConfigChannel+0x50c>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a5d      	ldr	r2, [pc, #372]	; (8002d64 <HAL_ADC_ConfigChannel+0x67c>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d10e      	bne.n	8002c12 <HAL_ADC_ConfigChannel+0x52a>
 8002bf4:	485a      	ldr	r0, [pc, #360]	; (8002d60 <HAL_ADC_ConfigChannel+0x678>)
 8002bf6:	f7ff f9bb 	bl	8001f70 <LL_ADC_IsEnabled>
 8002bfa:	4604      	mov	r4, r0
 8002bfc:	4859      	ldr	r0, [pc, #356]	; (8002d64 <HAL_ADC_ConfigChannel+0x67c>)
 8002bfe:	f7ff f9b7 	bl	8001f70 <LL_ADC_IsEnabled>
 8002c02:	4603      	mov	r3, r0
 8002c04:	4323      	orrs	r3, r4
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	bf0c      	ite	eq
 8002c0a:	2301      	moveq	r3, #1
 8002c0c:	2300      	movne	r3, #0
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	e008      	b.n	8002c24 <HAL_ADC_ConfigChannel+0x53c>
 8002c12:	4857      	ldr	r0, [pc, #348]	; (8002d70 <HAL_ADC_ConfigChannel+0x688>)
 8002c14:	f7ff f9ac 	bl	8001f70 <LL_ADC_IsEnabled>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	bf0c      	ite	eq
 8002c1e:	2301      	moveq	r3, #1
 8002c20:	2300      	movne	r3, #0
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d07d      	beq.n	8002d24 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a51      	ldr	r2, [pc, #324]	; (8002d74 <HAL_ADC_ConfigChannel+0x68c>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d130      	bne.n	8002c94 <HAL_ADC_ConfigChannel+0x5ac>
 8002c32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d12b      	bne.n	8002c94 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a4b      	ldr	r2, [pc, #300]	; (8002d70 <HAL_ADC_ConfigChannel+0x688>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	f040 8081 	bne.w	8002d4a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a44      	ldr	r2, [pc, #272]	; (8002d60 <HAL_ADC_ConfigChannel+0x678>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d004      	beq.n	8002c5c <HAL_ADC_ConfigChannel+0x574>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a43      	ldr	r2, [pc, #268]	; (8002d64 <HAL_ADC_ConfigChannel+0x67c>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d101      	bne.n	8002c60 <HAL_ADC_ConfigChannel+0x578>
 8002c5c:	4a42      	ldr	r2, [pc, #264]	; (8002d68 <HAL_ADC_ConfigChannel+0x680>)
 8002c5e:	e000      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x57a>
 8002c60:	4a42      	ldr	r2, [pc, #264]	; (8002d6c <HAL_ADC_ConfigChannel+0x684>)
 8002c62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c64:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4610      	mov	r0, r2
 8002c6c:	f7fe ffff 	bl	8001c6e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c70:	4b41      	ldr	r3, [pc, #260]	; (8002d78 <HAL_ADC_ConfigChannel+0x690>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	099b      	lsrs	r3, r3, #6
 8002c76:	4a41      	ldr	r2, [pc, #260]	; (8002d7c <HAL_ADC_ConfigChannel+0x694>)
 8002c78:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7c:	099b      	lsrs	r3, r3, #6
 8002c7e:	3301      	adds	r3, #1
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002c84:	e002      	b.n	8002c8c <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1f9      	bne.n	8002c86 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c92:	e05a      	b.n	8002d4a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a39      	ldr	r2, [pc, #228]	; (8002d80 <HAL_ADC_ConfigChannel+0x698>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d11e      	bne.n	8002cdc <HAL_ADC_ConfigChannel+0x5f4>
 8002c9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ca0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d119      	bne.n	8002cdc <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a30      	ldr	r2, [pc, #192]	; (8002d70 <HAL_ADC_ConfigChannel+0x688>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d14b      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a2a      	ldr	r2, [pc, #168]	; (8002d60 <HAL_ADC_ConfigChannel+0x678>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d004      	beq.n	8002cc6 <HAL_ADC_ConfigChannel+0x5de>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a28      	ldr	r2, [pc, #160]	; (8002d64 <HAL_ADC_ConfigChannel+0x67c>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d101      	bne.n	8002cca <HAL_ADC_ConfigChannel+0x5e2>
 8002cc6:	4a28      	ldr	r2, [pc, #160]	; (8002d68 <HAL_ADC_ConfigChannel+0x680>)
 8002cc8:	e000      	b.n	8002ccc <HAL_ADC_ConfigChannel+0x5e4>
 8002cca:	4a28      	ldr	r2, [pc, #160]	; (8002d6c <HAL_ADC_ConfigChannel+0x684>)
 8002ccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	4610      	mov	r0, r2
 8002cd6:	f7fe ffca 	bl	8001c6e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cda:	e036      	b.n	8002d4a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a28      	ldr	r2, [pc, #160]	; (8002d84 <HAL_ADC_ConfigChannel+0x69c>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d131      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x662>
 8002ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ce8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d12c      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a1e      	ldr	r2, [pc, #120]	; (8002d70 <HAL_ADC_ConfigChannel+0x688>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d127      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a18      	ldr	r2, [pc, #96]	; (8002d60 <HAL_ADC_ConfigChannel+0x678>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d004      	beq.n	8002d0e <HAL_ADC_ConfigChannel+0x626>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a16      	ldr	r2, [pc, #88]	; (8002d64 <HAL_ADC_ConfigChannel+0x67c>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d101      	bne.n	8002d12 <HAL_ADC_ConfigChannel+0x62a>
 8002d0e:	4a16      	ldr	r2, [pc, #88]	; (8002d68 <HAL_ADC_ConfigChannel+0x680>)
 8002d10:	e000      	b.n	8002d14 <HAL_ADC_ConfigChannel+0x62c>
 8002d12:	4a16      	ldr	r2, [pc, #88]	; (8002d6c <HAL_ADC_ConfigChannel+0x684>)
 8002d14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	4610      	mov	r0, r2
 8002d1e:	f7fe ffa6 	bl	8001c6e <LL_ADC_SetCommonPathInternalCh>
 8002d22:	e012      	b.n	8002d4a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d28:	f043 0220 	orr.w	r2, r3, #32
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002d36:	e008      	b.n	8002d4a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d3c:	f043 0220 	orr.w	r2, r3, #32
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d52:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3784      	adds	r7, #132	; 0x84
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd90      	pop	{r4, r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40022000 	.word	0x40022000
 8002d64:	40022100 	.word	0x40022100
 8002d68:	40022300 	.word	0x40022300
 8002d6c:	58026300 	.word	0x58026300
 8002d70:	58026000 	.word	0x58026000
 8002d74:	cb840000 	.word	0xcb840000
 8002d78:	24000000 	.word	0x24000000
 8002d7c:	053e2d63 	.word	0x053e2d63
 8002d80:	c7520000 	.word	0xc7520000
 8002d84:	cfb80000 	.word	0xcfb80000

08002d88 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff f8eb 	bl	8001f70 <LL_ADC_IsEnabled>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d16e      	bne.n	8002e7e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689a      	ldr	r2, [r3, #8]
 8002da6:	4b38      	ldr	r3, [pc, #224]	; (8002e88 <ADC_Enable+0x100>)
 8002da8:	4013      	ands	r3, r2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00d      	beq.n	8002dca <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db2:	f043 0210 	orr.w	r2, r3, #16
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dbe:	f043 0201 	orr.w	r2, r3, #1
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e05a      	b.n	8002e80 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7ff f8ba 	bl	8001f48 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002dd4:	f7fe fee8 	bl	8001ba8 <HAL_GetTick>
 8002dd8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a2b      	ldr	r2, [pc, #172]	; (8002e8c <ADC_Enable+0x104>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d004      	beq.n	8002dee <ADC_Enable+0x66>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a29      	ldr	r2, [pc, #164]	; (8002e90 <ADC_Enable+0x108>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d101      	bne.n	8002df2 <ADC_Enable+0x6a>
 8002dee:	4b29      	ldr	r3, [pc, #164]	; (8002e94 <ADC_Enable+0x10c>)
 8002df0:	e000      	b.n	8002df4 <ADC_Enable+0x6c>
 8002df2:	4b29      	ldr	r3, [pc, #164]	; (8002e98 <ADC_Enable+0x110>)
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff f83d 	bl	8001e74 <LL_ADC_GetMultimode>
 8002dfa:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a23      	ldr	r2, [pc, #140]	; (8002e90 <ADC_Enable+0x108>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d002      	beq.n	8002e0c <ADC_Enable+0x84>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	e000      	b.n	8002e0e <ADC_Enable+0x86>
 8002e0c:	4b1f      	ldr	r3, [pc, #124]	; (8002e8c <ADC_Enable+0x104>)
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6812      	ldr	r2, [r2, #0]
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d02c      	beq.n	8002e70 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d130      	bne.n	8002e7e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e1c:	e028      	b.n	8002e70 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7ff f8a4 	bl	8001f70 <LL_ADC_IsEnabled>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d104      	bne.n	8002e38 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff f888 	bl	8001f48 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e38:	f7fe feb6 	bl	8001ba8 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d914      	bls.n	8002e70 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d00d      	beq.n	8002e70 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e58:	f043 0210 	orr.w	r2, r3, #16
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e64:	f043 0201 	orr.w	r2, r3, #1
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e007      	b.n	8002e80 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d1cf      	bne.n	8002e1e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	8000003f 	.word	0x8000003f
 8002e8c:	40022000 	.word	0x40022000
 8002e90:	40022100 	.word	0x40022100
 8002e94:	40022300 	.word	0x40022300
 8002e98:	58026300 	.word	0x58026300

08002e9c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a7a      	ldr	r2, [pc, #488]	; (8003094 <ADC_ConfigureBoostMode+0x1f8>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d004      	beq.n	8002eb8 <ADC_ConfigureBoostMode+0x1c>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a79      	ldr	r2, [pc, #484]	; (8003098 <ADC_ConfigureBoostMode+0x1fc>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d109      	bne.n	8002ecc <ADC_ConfigureBoostMode+0x30>
 8002eb8:	4b78      	ldr	r3, [pc, #480]	; (800309c <ADC_ConfigureBoostMode+0x200>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	bf14      	ite	ne
 8002ec4:	2301      	movne	r3, #1
 8002ec6:	2300      	moveq	r3, #0
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	e008      	b.n	8002ede <ADC_ConfigureBoostMode+0x42>
 8002ecc:	4b74      	ldr	r3, [pc, #464]	; (80030a0 <ADC_ConfigureBoostMode+0x204>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	bf14      	ite	ne
 8002ed8:	2301      	movne	r3, #1
 8002eda:	2300      	moveq	r3, #0
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d01c      	beq.n	8002f1c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002ee2:	f002 fa0d 	bl	8005300 <HAL_RCC_GetHCLKFreq>
 8002ee6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002ef0:	d010      	beq.n	8002f14 <ADC_ConfigureBoostMode+0x78>
 8002ef2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002ef6:	d873      	bhi.n	8002fe0 <ADC_ConfigureBoostMode+0x144>
 8002ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002efc:	d002      	beq.n	8002f04 <ADC_ConfigureBoostMode+0x68>
 8002efe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f02:	d16d      	bne.n	8002fe0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	0c1b      	lsrs	r3, r3, #16
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f10:	60fb      	str	r3, [r7, #12]
        break;
 8002f12:	e068      	b.n	8002fe6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	089b      	lsrs	r3, r3, #2
 8002f18:	60fb      	str	r3, [r7, #12]
        break;
 8002f1a:	e064      	b.n	8002fe6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002f1c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002f20:	f04f 0100 	mov.w	r1, #0
 8002f24:	f003 fc52 	bl	80067cc <HAL_RCCEx_GetPeriphCLKFreq>
 8002f28:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002f32:	d051      	beq.n	8002fd8 <ADC_ConfigureBoostMode+0x13c>
 8002f34:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002f38:	d854      	bhi.n	8002fe4 <ADC_ConfigureBoostMode+0x148>
 8002f3a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002f3e:	d047      	beq.n	8002fd0 <ADC_ConfigureBoostMode+0x134>
 8002f40:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002f44:	d84e      	bhi.n	8002fe4 <ADC_ConfigureBoostMode+0x148>
 8002f46:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002f4a:	d03d      	beq.n	8002fc8 <ADC_ConfigureBoostMode+0x12c>
 8002f4c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002f50:	d848      	bhi.n	8002fe4 <ADC_ConfigureBoostMode+0x148>
 8002f52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f56:	d033      	beq.n	8002fc0 <ADC_ConfigureBoostMode+0x124>
 8002f58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f5c:	d842      	bhi.n	8002fe4 <ADC_ConfigureBoostMode+0x148>
 8002f5e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002f62:	d029      	beq.n	8002fb8 <ADC_ConfigureBoostMode+0x11c>
 8002f64:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002f68:	d83c      	bhi.n	8002fe4 <ADC_ConfigureBoostMode+0x148>
 8002f6a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002f6e:	d01a      	beq.n	8002fa6 <ADC_ConfigureBoostMode+0x10a>
 8002f70:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002f74:	d836      	bhi.n	8002fe4 <ADC_ConfigureBoostMode+0x148>
 8002f76:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002f7a:	d014      	beq.n	8002fa6 <ADC_ConfigureBoostMode+0x10a>
 8002f7c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002f80:	d830      	bhi.n	8002fe4 <ADC_ConfigureBoostMode+0x148>
 8002f82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f86:	d00e      	beq.n	8002fa6 <ADC_ConfigureBoostMode+0x10a>
 8002f88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f8c:	d82a      	bhi.n	8002fe4 <ADC_ConfigureBoostMode+0x148>
 8002f8e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002f92:	d008      	beq.n	8002fa6 <ADC_ConfigureBoostMode+0x10a>
 8002f94:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002f98:	d824      	bhi.n	8002fe4 <ADC_ConfigureBoostMode+0x148>
 8002f9a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f9e:	d002      	beq.n	8002fa6 <ADC_ConfigureBoostMode+0x10a>
 8002fa0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002fa4:	d11e      	bne.n	8002fe4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	0c9b      	lsrs	r3, r3, #18
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	68fa      	ldr	r2, [r7, #12]
 8002fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb4:	60fb      	str	r3, [r7, #12]
        break;
 8002fb6:	e016      	b.n	8002fe6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	091b      	lsrs	r3, r3, #4
 8002fbc:	60fb      	str	r3, [r7, #12]
        break;
 8002fbe:	e012      	b.n	8002fe6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	095b      	lsrs	r3, r3, #5
 8002fc4:	60fb      	str	r3, [r7, #12]
        break;
 8002fc6:	e00e      	b.n	8002fe6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	099b      	lsrs	r3, r3, #6
 8002fcc:	60fb      	str	r3, [r7, #12]
        break;
 8002fce:	e00a      	b.n	8002fe6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	09db      	lsrs	r3, r3, #7
 8002fd4:	60fb      	str	r3, [r7, #12]
        break;
 8002fd6:	e006      	b.n	8002fe6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	0a1b      	lsrs	r3, r3, #8
 8002fdc:	60fb      	str	r3, [r7, #12]
        break;
 8002fde:	e002      	b.n	8002fe6 <ADC_ConfigureBoostMode+0x14a>
        break;
 8002fe0:	bf00      	nop
 8002fe2:	e000      	b.n	8002fe6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002fe4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002fe6:	f7fe fe0f 	bl	8001c08 <HAL_GetREVID>
 8002fea:	4603      	mov	r3, r0
 8002fec:	f241 0203 	movw	r2, #4099	; 0x1003
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d815      	bhi.n	8003020 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	4a2b      	ldr	r2, [pc, #172]	; (80030a4 <ADC_ConfigureBoostMode+0x208>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d908      	bls.n	800300e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	689a      	ldr	r2, [r3, #8]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800300a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800300c:	e03e      	b.n	800308c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800301c:	609a      	str	r2, [r3, #8]
}
 800301e:	e035      	b.n	800308c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	085b      	lsrs	r3, r3, #1
 8003024:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	4a1f      	ldr	r2, [pc, #124]	; (80030a8 <ADC_ConfigureBoostMode+0x20c>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d808      	bhi.n	8003040 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800303c:	609a      	str	r2, [r3, #8]
}
 800303e:	e025      	b.n	800308c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	4a1a      	ldr	r2, [pc, #104]	; (80030ac <ADC_ConfigureBoostMode+0x210>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d80a      	bhi.n	800305e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800305a:	609a      	str	r2, [r3, #8]
}
 800305c:	e016      	b.n	800308c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	4a13      	ldr	r2, [pc, #76]	; (80030b0 <ADC_ConfigureBoostMode+0x214>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d80a      	bhi.n	800307c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003078:	609a      	str	r2, [r3, #8]
}
 800307a:	e007      	b.n	800308c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689a      	ldr	r2, [r3, #8]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800308a:	609a      	str	r2, [r3, #8]
}
 800308c:	bf00      	nop
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40022000 	.word	0x40022000
 8003098:	40022100 	.word	0x40022100
 800309c:	40022300 	.word	0x40022300
 80030a0:	58026300 	.word	0x58026300
 80030a4:	01312d00 	.word	0x01312d00
 80030a8:	005f5e10 	.word	0x005f5e10
 80030ac:	00bebc20 	.word	0x00bebc20
 80030b0:	017d7840 	.word	0x017d7840

080030b4 <LL_ADC_IsEnabled>:
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d101      	bne.n	80030cc <LL_ADC_IsEnabled+0x18>
 80030c8:	2301      	movs	r3, #1
 80030ca:	e000      	b.n	80030ce <LL_ADC_IsEnabled+0x1a>
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	370c      	adds	r7, #12
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr

080030da <LL_ADC_REG_IsConversionOngoing>:
{
 80030da:	b480      	push	{r7}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f003 0304 	and.w	r3, r3, #4
 80030ea:	2b04      	cmp	r3, #4
 80030ec:	d101      	bne.n	80030f2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80030ee:	2301      	movs	r3, #1
 80030f0:	e000      	b.n	80030f4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003100:	b590      	push	{r4, r7, lr}
 8003102:	b09f      	sub	sp, #124	; 0x7c
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800310a:	2300      	movs	r3, #0
 800310c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003116:	2b01      	cmp	r3, #1
 8003118:	d101      	bne.n	800311e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800311a:	2302      	movs	r3, #2
 800311c:	e0be      	b.n	800329c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003126:	2300      	movs	r3, #0
 8003128:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800312a:	2300      	movs	r3, #0
 800312c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a5c      	ldr	r2, [pc, #368]	; (80032a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d102      	bne.n	800313e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003138:	4b5b      	ldr	r3, [pc, #364]	; (80032a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800313a:	60bb      	str	r3, [r7, #8]
 800313c:	e001      	b.n	8003142 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800313e:	2300      	movs	r3, #0
 8003140:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d10b      	bne.n	8003160 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800314c:	f043 0220 	orr.w	r2, r3, #32
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e09d      	b.n	800329c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	4618      	mov	r0, r3
 8003164:	f7ff ffb9 	bl	80030da <LL_ADC_REG_IsConversionOngoing>
 8003168:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4618      	mov	r0, r3
 8003170:	f7ff ffb3 	bl	80030da <LL_ADC_REG_IsConversionOngoing>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d17f      	bne.n	800327a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800317a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800317c:	2b00      	cmp	r3, #0
 800317e:	d17c      	bne.n	800327a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a47      	ldr	r2, [pc, #284]	; (80032a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d004      	beq.n	8003194 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a46      	ldr	r2, [pc, #280]	; (80032a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d101      	bne.n	8003198 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003194:	4b45      	ldr	r3, [pc, #276]	; (80032ac <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003196:	e000      	b.n	800319a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003198:	4b45      	ldr	r3, [pc, #276]	; (80032b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800319a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d039      	beq.n	8003218 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80031a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	431a      	orrs	r2, r3
 80031b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031b4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a3a      	ldr	r2, [pc, #232]	; (80032a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d004      	beq.n	80031ca <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a38      	ldr	r2, [pc, #224]	; (80032a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d10e      	bne.n	80031e8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80031ca:	4836      	ldr	r0, [pc, #216]	; (80032a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80031cc:	f7ff ff72 	bl	80030b4 <LL_ADC_IsEnabled>
 80031d0:	4604      	mov	r4, r0
 80031d2:	4835      	ldr	r0, [pc, #212]	; (80032a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80031d4:	f7ff ff6e 	bl	80030b4 <LL_ADC_IsEnabled>
 80031d8:	4603      	mov	r3, r0
 80031da:	4323      	orrs	r3, r4
 80031dc:	2b00      	cmp	r3, #0
 80031de:	bf0c      	ite	eq
 80031e0:	2301      	moveq	r3, #1
 80031e2:	2300      	movne	r3, #0
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	e008      	b.n	80031fa <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80031e8:	4832      	ldr	r0, [pc, #200]	; (80032b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80031ea:	f7ff ff63 	bl	80030b4 <LL_ADC_IsEnabled>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	bf0c      	ite	eq
 80031f4:	2301      	moveq	r3, #1
 80031f6:	2300      	movne	r3, #0
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d047      	beq.n	800328e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80031fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003200:	689a      	ldr	r2, [r3, #8]
 8003202:	4b2d      	ldr	r3, [pc, #180]	; (80032b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003204:	4013      	ands	r3, r2
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	6811      	ldr	r1, [r2, #0]
 800320a:	683a      	ldr	r2, [r7, #0]
 800320c:	6892      	ldr	r2, [r2, #8]
 800320e:	430a      	orrs	r2, r1
 8003210:	431a      	orrs	r2, r3
 8003212:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003214:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003216:	e03a      	b.n	800328e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003218:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003220:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003222:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a1e      	ldr	r2, [pc, #120]	; (80032a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d004      	beq.n	8003238 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a1d      	ldr	r2, [pc, #116]	; (80032a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d10e      	bne.n	8003256 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003238:	481a      	ldr	r0, [pc, #104]	; (80032a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800323a:	f7ff ff3b 	bl	80030b4 <LL_ADC_IsEnabled>
 800323e:	4604      	mov	r4, r0
 8003240:	4819      	ldr	r0, [pc, #100]	; (80032a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003242:	f7ff ff37 	bl	80030b4 <LL_ADC_IsEnabled>
 8003246:	4603      	mov	r3, r0
 8003248:	4323      	orrs	r3, r4
 800324a:	2b00      	cmp	r3, #0
 800324c:	bf0c      	ite	eq
 800324e:	2301      	moveq	r3, #1
 8003250:	2300      	movne	r3, #0
 8003252:	b2db      	uxtb	r3, r3
 8003254:	e008      	b.n	8003268 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003256:	4817      	ldr	r0, [pc, #92]	; (80032b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003258:	f7ff ff2c 	bl	80030b4 <LL_ADC_IsEnabled>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	bf0c      	ite	eq
 8003262:	2301      	moveq	r3, #1
 8003264:	2300      	movne	r3, #0
 8003266:	b2db      	uxtb	r3, r3
 8003268:	2b00      	cmp	r3, #0
 800326a:	d010      	beq.n	800328e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800326c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800326e:	689a      	ldr	r2, [r3, #8]
 8003270:	4b11      	ldr	r3, [pc, #68]	; (80032b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003272:	4013      	ands	r3, r2
 8003274:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003276:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003278:	e009      	b.n	800328e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327e:	f043 0220 	orr.w	r2, r3, #32
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800328c:	e000      	b.n	8003290 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800328e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003298:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800329c:	4618      	mov	r0, r3
 800329e:	377c      	adds	r7, #124	; 0x7c
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd90      	pop	{r4, r7, pc}
 80032a4:	40022000 	.word	0x40022000
 80032a8:	40022100 	.word	0x40022100
 80032ac:	40022300 	.word	0x40022300
 80032b0:	58026300 	.word	0x58026300
 80032b4:	58026000 	.word	0x58026000
 80032b8:	fffff0e0 	.word	0xfffff0e0

080032bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f003 0307 	and.w	r3, r3, #7
 80032ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032cc:	4b0b      	ldr	r3, [pc, #44]	; (80032fc <__NVIC_SetPriorityGrouping+0x40>)
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032d8:	4013      	ands	r3, r2
 80032da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80032e4:	4b06      	ldr	r3, [pc, #24]	; (8003300 <__NVIC_SetPriorityGrouping+0x44>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032ea:	4a04      	ldr	r2, [pc, #16]	; (80032fc <__NVIC_SetPriorityGrouping+0x40>)
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	60d3      	str	r3, [r2, #12]
}
 80032f0:	bf00      	nop
 80032f2:	3714      	adds	r7, #20
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr
 80032fc:	e000ed00 	.word	0xe000ed00
 8003300:	05fa0000 	.word	0x05fa0000

08003304 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003308:	4b04      	ldr	r3, [pc, #16]	; (800331c <__NVIC_GetPriorityGrouping+0x18>)
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	0a1b      	lsrs	r3, r3, #8
 800330e:	f003 0307 	and.w	r3, r3, #7
}
 8003312:	4618      	mov	r0, r3
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr
 800331c:	e000ed00 	.word	0xe000ed00

08003320 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	4603      	mov	r3, r0
 8003328:	6039      	str	r1, [r7, #0]
 800332a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800332c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003330:	2b00      	cmp	r3, #0
 8003332:	db0a      	blt.n	800334a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	b2da      	uxtb	r2, r3
 8003338:	490c      	ldr	r1, [pc, #48]	; (800336c <__NVIC_SetPriority+0x4c>)
 800333a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800333e:	0112      	lsls	r2, r2, #4
 8003340:	b2d2      	uxtb	r2, r2
 8003342:	440b      	add	r3, r1
 8003344:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003348:	e00a      	b.n	8003360 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	b2da      	uxtb	r2, r3
 800334e:	4908      	ldr	r1, [pc, #32]	; (8003370 <__NVIC_SetPriority+0x50>)
 8003350:	88fb      	ldrh	r3, [r7, #6]
 8003352:	f003 030f 	and.w	r3, r3, #15
 8003356:	3b04      	subs	r3, #4
 8003358:	0112      	lsls	r2, r2, #4
 800335a:	b2d2      	uxtb	r2, r2
 800335c:	440b      	add	r3, r1
 800335e:	761a      	strb	r2, [r3, #24]
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr
 800336c:	e000e100 	.word	0xe000e100
 8003370:	e000ed00 	.word	0xe000ed00

08003374 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003374:	b480      	push	{r7}
 8003376:	b089      	sub	sp, #36	; 0x24
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f003 0307 	and.w	r3, r3, #7
 8003386:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	f1c3 0307 	rsb	r3, r3, #7
 800338e:	2b04      	cmp	r3, #4
 8003390:	bf28      	it	cs
 8003392:	2304      	movcs	r3, #4
 8003394:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	3304      	adds	r3, #4
 800339a:	2b06      	cmp	r3, #6
 800339c:	d902      	bls.n	80033a4 <NVIC_EncodePriority+0x30>
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	3b03      	subs	r3, #3
 80033a2:	e000      	b.n	80033a6 <NVIC_EncodePriority+0x32>
 80033a4:	2300      	movs	r3, #0
 80033a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033a8:	f04f 32ff 	mov.w	r2, #4294967295
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	43da      	mvns	r2, r3
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	401a      	ands	r2, r3
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033bc:	f04f 31ff 	mov.w	r1, #4294967295
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	fa01 f303 	lsl.w	r3, r1, r3
 80033c6:	43d9      	mvns	r1, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033cc:	4313      	orrs	r3, r2
         );
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3724      	adds	r7, #36	; 0x24
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
	...

080033dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	3b01      	subs	r3, #1
 80033e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033ec:	d301      	bcc.n	80033f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033ee:	2301      	movs	r3, #1
 80033f0:	e00f      	b.n	8003412 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033f2:	4a0a      	ldr	r2, [pc, #40]	; (800341c <SysTick_Config+0x40>)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	3b01      	subs	r3, #1
 80033f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033fa:	210f      	movs	r1, #15
 80033fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003400:	f7ff ff8e 	bl	8003320 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003404:	4b05      	ldr	r3, [pc, #20]	; (800341c <SysTick_Config+0x40>)
 8003406:	2200      	movs	r2, #0
 8003408:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800340a:	4b04      	ldr	r3, [pc, #16]	; (800341c <SysTick_Config+0x40>)
 800340c:	2207      	movs	r2, #7
 800340e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	e000e010 	.word	0xe000e010

08003420 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f7ff ff47 	bl	80032bc <__NVIC_SetPriorityGrouping>
}
 800342e:	bf00      	nop
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b086      	sub	sp, #24
 800343a:	af00      	add	r7, sp, #0
 800343c:	4603      	mov	r3, r0
 800343e:	60b9      	str	r1, [r7, #8]
 8003440:	607a      	str	r2, [r7, #4]
 8003442:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003444:	f7ff ff5e 	bl	8003304 <__NVIC_GetPriorityGrouping>
 8003448:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	68b9      	ldr	r1, [r7, #8]
 800344e:	6978      	ldr	r0, [r7, #20]
 8003450:	f7ff ff90 	bl	8003374 <NVIC_EncodePriority>
 8003454:	4602      	mov	r2, r0
 8003456:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800345a:	4611      	mov	r1, r2
 800345c:	4618      	mov	r0, r3
 800345e:	f7ff ff5f 	bl	8003320 <__NVIC_SetPriority>
}
 8003462:	bf00      	nop
 8003464:	3718      	adds	r7, #24
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b082      	sub	sp, #8
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f7ff ffb2 	bl	80033dc <SysTick_Config>
 8003478:	4603      	mov	r3, r0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
	...

08003484 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e0cf      	b.n	8003636 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800349c:	2b00      	cmp	r3, #0
 800349e:	d106      	bne.n	80034ae <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2223      	movs	r2, #35	; 0x23
 80034a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f7fe f819 	bl	80014e0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034ae:	4b64      	ldr	r3, [pc, #400]	; (8003640 <HAL_ETH_Init+0x1bc>)
 80034b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80034b4:	4a62      	ldr	r2, [pc, #392]	; (8003640 <HAL_ETH_Init+0x1bc>)
 80034b6:	f043 0302 	orr.w	r3, r3, #2
 80034ba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80034be:	4b60      	ldr	r3, [pc, #384]	; (8003640 <HAL_ETH_Init+0x1bc>)
 80034c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	60bb      	str	r3, [r7, #8]
 80034ca:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	7a1b      	ldrb	r3, [r3, #8]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d103      	bne.n	80034dc <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80034d4:	2000      	movs	r0, #0
 80034d6:	f7fe fba3 	bl	8001c20 <HAL_SYSCFG_ETHInterfaceSelect>
 80034da:	e003      	b.n	80034e4 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80034dc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80034e0:	f7fe fb9e 	bl	8001c20 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80034e4:	4b57      	ldr	r3, [pc, #348]	; (8003644 <HAL_ETH_Init+0x1c0>)
 80034e6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	6812      	ldr	r2, [r2, #0]
 80034f6:	f043 0301 	orr.w	r3, r3, #1
 80034fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80034fe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003500:	f7fe fb52 	bl	8001ba8 <HAL_GetTick>
 8003504:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003506:	e011      	b.n	800352c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003508:	f7fe fb4e 	bl	8001ba8 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003516:	d909      	bls.n	800352c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2204      	movs	r2, #4
 800351c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	22e0      	movs	r2, #224	; 0xe0
 8003524:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e084      	b.n	8003636 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1e4      	bne.n	8003508 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 f886 	bl	8003650 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003544:	f001 fedc 	bl	8005300 <HAL_RCC_GetHCLKFreq>
 8003548:	4603      	mov	r3, r0
 800354a:	4a3f      	ldr	r2, [pc, #252]	; (8003648 <HAL_ETH_Init+0x1c4>)
 800354c:	fba2 2303 	umull	r2, r3, r2, r3
 8003550:	0c9a      	lsrs	r2, r3, #18
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	3a01      	subs	r2, #1
 8003558:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 fa71 	bl	8003a44 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800356a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800356e:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	6812      	ldr	r2, [r2, #0]
 8003576:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800357a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800357e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	f003 0303 	and.w	r3, r3, #3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d009      	beq.n	80035a2 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	22e0      	movs	r2, #224	; 0xe0
 800359a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e049      	b.n	8003636 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035aa:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80035ae:	4b27      	ldr	r3, [pc, #156]	; (800364c <HAL_ETH_Init+0x1c8>)
 80035b0:	4013      	ands	r3, r2
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	6952      	ldr	r2, [r2, #20]
 80035b6:	0051      	lsls	r1, r2, #1
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	6812      	ldr	r2, [r2, #0]
 80035bc:	430b      	orrs	r3, r1
 80035be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80035c2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 fad9 	bl	8003b7e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 fb1f 	bl	8003c10 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	3305      	adds	r3, #5
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	021a      	lsls	r2, r3, #8
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	3304      	adds	r3, #4
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	4619      	mov	r1, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	3303      	adds	r3, #3
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	061a      	lsls	r2, r3, #24
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	3302      	adds	r3, #2
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	041b      	lsls	r3, r3, #16
 8003604:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	3301      	adds	r3, #1
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003610:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800361e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003620:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2210      	movs	r2, #16
 8003630:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	58024400 	.word	0x58024400
 8003644:	58000400 	.word	0x58000400
 8003648:	431bde83 	.word	0x431bde83
 800364c:	ffff8001 	.word	0xffff8001

08003650 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003660:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003668:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800366a:	f001 fe49 	bl	8005300 <HAL_RCC_GetHCLKFreq>
 800366e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	4a1e      	ldr	r2, [pc, #120]	; (80036ec <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d908      	bls.n	800368a <HAL_ETH_SetMDIOClockRange+0x3a>
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	4a1d      	ldr	r2, [pc, #116]	; (80036f0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d804      	bhi.n	800368a <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003686:	60fb      	str	r3, [r7, #12]
 8003688:	e027      	b.n	80036da <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	4a18      	ldr	r2, [pc, #96]	; (80036f0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d908      	bls.n	80036a4 <HAL_ETH_SetMDIOClockRange+0x54>
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	4a17      	ldr	r2, [pc, #92]	; (80036f4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d204      	bcs.n	80036a4 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	e01a      	b.n	80036da <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	4a13      	ldr	r2, [pc, #76]	; (80036f4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d303      	bcc.n	80036b4 <HAL_ETH_SetMDIOClockRange+0x64>
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	4a12      	ldr	r2, [pc, #72]	; (80036f8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d911      	bls.n	80036d8 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	4a10      	ldr	r2, [pc, #64]	; (80036f8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d908      	bls.n	80036ce <HAL_ETH_SetMDIOClockRange+0x7e>
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	4a0f      	ldr	r2, [pc, #60]	; (80036fc <HAL_ETH_SetMDIOClockRange+0xac>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d804      	bhi.n	80036ce <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ca:	60fb      	str	r3, [r7, #12]
 80036cc:	e005      	b.n	80036da <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036d4:	60fb      	str	r3, [r7, #12]
 80036d6:	e000      	b.n	80036da <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80036d8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80036e4:	bf00      	nop
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	01312cff 	.word	0x01312cff
 80036f0:	02160ebf 	.word	0x02160ebf
 80036f4:	03938700 	.word	0x03938700
 80036f8:	05f5e0ff 	.word	0x05f5e0ff
 80036fc:	08f0d17f 	.word	0x08f0d17f

08003700 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003700:	b480      	push	{r7}
 8003702:	b085      	sub	sp, #20
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8003712:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	791b      	ldrb	r3, [r3, #4]
 8003718:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800371a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	7b1b      	ldrb	r3, [r3, #12]
 8003720:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003722:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	7b5b      	ldrb	r3, [r3, #13]
 8003728:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800372a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	7b9b      	ldrb	r3, [r3, #14]
 8003730:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003732:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	7bdb      	ldrb	r3, [r3, #15]
 8003738:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800373a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	7c12      	ldrb	r2, [r2, #16]
 8003740:	2a00      	cmp	r2, #0
 8003742:	d102      	bne.n	800374a <ETH_SetMACConfig+0x4a>
 8003744:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003748:	e000      	b.n	800374c <ETH_SetMACConfig+0x4c>
 800374a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800374c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800374e:	683a      	ldr	r2, [r7, #0]
 8003750:	7c52      	ldrb	r2, [r2, #17]
 8003752:	2a00      	cmp	r2, #0
 8003754:	d102      	bne.n	800375c <ETH_SetMACConfig+0x5c>
 8003756:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800375a:	e000      	b.n	800375e <ETH_SetMACConfig+0x5e>
 800375c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800375e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	7c9b      	ldrb	r3, [r3, #18]
 8003764:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003766:	431a      	orrs	r2, r3
               macconf->Speed |
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800376c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8003772:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	7f1b      	ldrb	r3, [r3, #28]
 8003778:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800377a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	7f5b      	ldrb	r3, [r3, #29]
 8003780:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003782:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003784:	683a      	ldr	r2, [r7, #0]
 8003786:	7f92      	ldrb	r2, [r2, #30]
 8003788:	2a00      	cmp	r2, #0
 800378a:	d102      	bne.n	8003792 <ETH_SetMACConfig+0x92>
 800378c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003790:	e000      	b.n	8003794 <ETH_SetMACConfig+0x94>
 8003792:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003794:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	7fdb      	ldrb	r3, [r3, #31]
 800379a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800379c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80037a4:	2a00      	cmp	r2, #0
 80037a6:	d102      	bne.n	80037ae <ETH_SetMACConfig+0xae>
 80037a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037ac:	e000      	b.n	80037b0 <ETH_SetMACConfig+0xb0>
 80037ae:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80037b0:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80037b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80037be:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80037c0:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80037c6:	4313      	orrs	r3, r2
 80037c8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	4b56      	ldr	r3, [pc, #344]	; (800392c <ETH_SetMACConfig+0x22c>)
 80037d2:	4013      	ands	r3, r2
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	6812      	ldr	r2, [r2, #0]
 80037d8:	68f9      	ldr	r1, [r7, #12]
 80037da:	430b      	orrs	r3, r1
 80037dc:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80037ea:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80037ec:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80037f4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80037f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80037fe:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003800:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8003808:	2a00      	cmp	r2, #0
 800380a:	d102      	bne.n	8003812 <ETH_SetMACConfig+0x112>
 800380c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003810:	e000      	b.n	8003814 <ETH_SetMACConfig+0x114>
 8003812:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003814:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800381a:	4313      	orrs	r3, r2
 800381c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	685a      	ldr	r2, [r3, #4]
 8003824:	4b42      	ldr	r3, [pc, #264]	; (8003930 <ETH_SetMACConfig+0x230>)
 8003826:	4013      	ands	r3, r2
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	6812      	ldr	r2, [r2, #0]
 800382c:	68f9      	ldr	r1, [r7, #12]
 800382e:	430b      	orrs	r3, r1
 8003830:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003838:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800383e:	4313      	orrs	r3, r2
 8003840:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68da      	ldr	r2, [r3, #12]
 8003848:	4b3a      	ldr	r3, [pc, #232]	; (8003934 <ETH_SetMACConfig+0x234>)
 800384a:	4013      	ands	r3, r2
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	6812      	ldr	r2, [r2, #0]
 8003850:	68f9      	ldr	r1, [r7, #12]
 8003852:	430b      	orrs	r3, r1
 8003854:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800385c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003862:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8003864:	683a      	ldr	r2, [r7, #0]
 8003866:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800386a:	2a00      	cmp	r2, #0
 800386c:	d101      	bne.n	8003872 <ETH_SetMACConfig+0x172>
 800386e:	2280      	movs	r2, #128	; 0x80
 8003870:	e000      	b.n	8003874 <ETH_SetMACConfig+0x174>
 8003872:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003874:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800387a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800387c:	4313      	orrs	r3, r2
 800387e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003886:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800388a:	4013      	ands	r3, r2
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	6812      	ldr	r2, [r2, #0]
 8003890:	68f9      	ldr	r1, [r7, #12]
 8003892:	430b      	orrs	r3, r1
 8003894:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800389c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80038a4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80038a6:	4313      	orrs	r3, r2
 80038a8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b2:	f023 0103 	bic.w	r1, r3, #3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	430a      	orrs	r2, r1
 80038be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80038ca:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80038e0:	683a      	ldr	r2, [r7, #0]
 80038e2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80038e6:	2a00      	cmp	r2, #0
 80038e8:	d101      	bne.n	80038ee <ETH_SetMACConfig+0x1ee>
 80038ea:	2240      	movs	r2, #64	; 0x40
 80038ec:	e000      	b.n	80038f0 <ETH_SetMACConfig+0x1f0>
 80038ee:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80038f0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80038f8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80038fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8003902:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003904:	4313      	orrs	r3, r2
 8003906:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003910:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	430a      	orrs	r2, r1
 800391c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8003920:	bf00      	nop
 8003922:	3714      	adds	r7, #20
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr
 800392c:	00048083 	.word	0x00048083
 8003930:	c0f88000 	.word	0xc0f88000
 8003934:	fffffef0 	.word	0xfffffef0

08003938 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	4b38      	ldr	r3, [pc, #224]	; (8003a30 <ETH_SetDMAConfig+0xf8>)
 800394e:	4013      	ands	r3, r2
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	6811      	ldr	r1, [r2, #0]
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	6812      	ldr	r2, [r2, #0]
 8003958:	430b      	orrs	r3, r1
 800395a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800395e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	791b      	ldrb	r3, [r3, #4]
 8003964:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800396a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	7b1b      	ldrb	r3, [r3, #12]
 8003970:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003972:	4313      	orrs	r3, r2
 8003974:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800397e:	685a      	ldr	r2, [r3, #4]
 8003980:	4b2c      	ldr	r3, [pc, #176]	; (8003a34 <ETH_SetDMAConfig+0xfc>)
 8003982:	4013      	ands	r3, r2
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	6812      	ldr	r2, [r2, #0]
 8003988:	68f9      	ldr	r1, [r7, #12]
 800398a:	430b      	orrs	r3, r1
 800398c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003990:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	7b5b      	ldrb	r3, [r3, #13]
 8003996:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800399c:	4313      	orrs	r3, r2
 800399e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039a8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80039ac:	4b22      	ldr	r3, [pc, #136]	; (8003a38 <ETH_SetDMAConfig+0x100>)
 80039ae:	4013      	ands	r3, r2
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	6812      	ldr	r2, [r2, #0]
 80039b4:	68f9      	ldr	r1, [r7, #12]
 80039b6:	430b      	orrs	r3, r1
 80039b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80039bc:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	7d1b      	ldrb	r3, [r3, #20]
 80039c8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80039ca:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	7f5b      	ldrb	r3, [r3, #29]
 80039d0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80039d2:	4313      	orrs	r3, r2
 80039d4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039de:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80039e2:	4b16      	ldr	r3, [pc, #88]	; (8003a3c <ETH_SetDMAConfig+0x104>)
 80039e4:	4013      	ands	r3, r2
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	6812      	ldr	r2, [r2, #0]
 80039ea:	68f9      	ldr	r1, [r7, #12]
 80039ec:	430b      	orrs	r3, r1
 80039ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80039f2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	7f1b      	ldrb	r3, [r3, #28]
 80039fa:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003a00:	4313      	orrs	r3, r2
 8003a02:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a0c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003a10:	4b0b      	ldr	r3, [pc, #44]	; (8003a40 <ETH_SetDMAConfig+0x108>)
 8003a12:	4013      	ands	r3, r2
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	6812      	ldr	r2, [r2, #0]
 8003a18:	68f9      	ldr	r1, [r7, #12]
 8003a1a:	430b      	orrs	r3, r1
 8003a1c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a20:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8003a24:	bf00      	nop
 8003a26:	3714      	adds	r7, #20
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr
 8003a30:	ffff87fd 	.word	0xffff87fd
 8003a34:	ffff2ffe 	.word	0xffff2ffe
 8003a38:	fffec000 	.word	0xfffec000
 8003a3c:	ffc0efef 	.word	0xffc0efef
 8003a40:	7fc0ffff 	.word	0x7fc0ffff

08003a44 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b0a4      	sub	sp, #144	; 0x90
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003a52:	2300      	movs	r3, #0
 8003a54:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003a56:	2300      	movs	r3, #0
 8003a58:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003a62:	2301      	movs	r3, #1
 8003a64:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003a74:	2300      	movs	r3, #0
 8003a76:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003a80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a84:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003a86:	2300      	movs	r3, #0
 8003a88:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003a90:	2300      	movs	r3, #0
 8003a92:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003a96:	2300      	movs	r3, #0
 8003a98:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8003a9c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8003aa0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8003aac:	2301      	movs	r3, #1
 8003aae:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8003aca:	2300      	movs	r3, #0
 8003acc:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003adc:	2320      	movs	r3, #32
 8003ade:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8003aee:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8003af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003af4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003af8:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8003afa:	2300      	movs	r3, #0
 8003afc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003b00:	2302      	movs	r3, #2
 8003b02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003b06:	2300      	movs	r3, #0
 8003b08:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8003b12:	2300      	movs	r3, #0
 8003b14:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8003b22:	2301      	movs	r3, #1
 8003b24:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003b28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7ff fde6 	bl	8003700 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003b34:	2301      	movs	r3, #1
 8003b36:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003b40:	2300      	movs	r3, #0
 8003b42:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003b46:	2300      	movs	r3, #0
 8003b48:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003b4e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003b52:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003b54:	2300      	movs	r3, #0
 8003b56:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003b58:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003b5c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8003b64:	f44f 7306 	mov.w	r3, #536	; 0x218
 8003b68:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003b6a:	f107 0308 	add.w	r3, r7, #8
 8003b6e:	4619      	mov	r1, r3
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f7ff fee1 	bl	8003938 <ETH_SetDMAConfig>
}
 8003b76:	bf00      	nop
 8003b78:	3790      	adds	r7, #144	; 0x90
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	b085      	sub	sp, #20
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003b86:	2300      	movs	r3, #0
 8003b88:	60fb      	str	r3, [r7, #12]
 8003b8a:	e01d      	b.n	8003bc8 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68d9      	ldr	r1, [r3, #12]
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	4613      	mov	r3, r2
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	4413      	add	r3, r2
 8003b98:	00db      	lsls	r3, r3, #3
 8003b9a:	440b      	add	r3, r1
 8003b9c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	2200      	movs	r2, #0
 8003bae:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003bb6:	68b9      	ldr	r1, [r7, #8]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	3206      	adds	r2, #6
 8003bbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	60fb      	str	r3, [r7, #12]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2b03      	cmp	r3, #3
 8003bcc:	d9de      	bls.n	8003b8c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bdc:	461a      	mov	r2, r3
 8003bde:	2303      	movs	r3, #3
 8003be0:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	68da      	ldr	r2, [r3, #12]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bf0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	68da      	ldr	r2, [r3, #12]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c00:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8003c04:	bf00      	nop
 8003c06:	3714      	adds	r7, #20
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003c18:	2300      	movs	r3, #0
 8003c1a:	60fb      	str	r3, [r7, #12]
 8003c1c:	e023      	b.n	8003c66 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6919      	ldr	r1, [r3, #16]
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	4613      	mov	r3, r2
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	4413      	add	r3, r2
 8003c2a:	00db      	lsls	r3, r3, #3
 8003c2c:	440b      	add	r3, r1
 8003c2e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	2200      	movs	r2, #0
 8003c34:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	2200      	movs	r2, #0
 8003c46:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	2200      	movs	r2, #0
 8003c52:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003c54:	68b9      	ldr	r1, [r7, #8]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	3212      	adds	r2, #18
 8003c5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	3301      	adds	r3, #1
 8003c64:	60fb      	str	r3, [r7, #12]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2b03      	cmp	r3, #3
 8003c6a:	d9d8      	bls.n	8003c1e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c92:	461a      	mov	r2, r3
 8003c94:	2303      	movs	r3, #3
 8003c96:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	691a      	ldr	r2, [r3, #16]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ca6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cba:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8003cbe:	bf00      	nop
 8003cc0:	3714      	adds	r7, #20
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
	...

08003ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b089      	sub	sp, #36	; 0x24
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003cda:	4b89      	ldr	r3, [pc, #548]	; (8003f00 <HAL_GPIO_Init+0x234>)
 8003cdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003cde:	e194      	b.n	800400a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cec:	4013      	ands	r3, r2
 8003cee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	f000 8186 	beq.w	8004004 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f003 0303 	and.w	r3, r3, #3
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d005      	beq.n	8003d10 <HAL_GPIO_Init+0x44>
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f003 0303 	and.w	r3, r3, #3
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d130      	bne.n	8003d72 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	005b      	lsls	r3, r3, #1
 8003d1a:	2203      	movs	r2, #3
 8003d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d20:	43db      	mvns	r3, r3
 8003d22:	69ba      	ldr	r2, [r7, #24]
 8003d24:	4013      	ands	r3, r2
 8003d26:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	68da      	ldr	r2, [r3, #12]
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	005b      	lsls	r3, r3, #1
 8003d30:	fa02 f303 	lsl.w	r3, r2, r3
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d46:	2201      	movs	r2, #1
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4e:	43db      	mvns	r3, r3
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	4013      	ands	r3, r2
 8003d54:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	091b      	lsrs	r3, r3, #4
 8003d5c:	f003 0201 	and.w	r2, r3, #1
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	fa02 f303 	lsl.w	r3, r2, r3
 8003d66:	69ba      	ldr	r2, [r7, #24]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	69ba      	ldr	r2, [r7, #24]
 8003d70:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f003 0303 	and.w	r3, r3, #3
 8003d7a:	2b03      	cmp	r3, #3
 8003d7c:	d017      	beq.n	8003dae <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	005b      	lsls	r3, r3, #1
 8003d88:	2203      	movs	r2, #3
 8003d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8e:	43db      	mvns	r3, r3
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	4013      	ands	r3, r2
 8003d94:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	689a      	ldr	r2, [r3, #8]
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f003 0303 	and.w	r3, r3, #3
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d123      	bne.n	8003e02 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	08da      	lsrs	r2, r3, #3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	3208      	adds	r2, #8
 8003dc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	f003 0307 	and.w	r3, r3, #7
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	220f      	movs	r2, #15
 8003dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd6:	43db      	mvns	r3, r3
 8003dd8:	69ba      	ldr	r2, [r7, #24]
 8003dda:	4013      	ands	r3, r2
 8003ddc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	691a      	ldr	r2, [r3, #16]
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	f003 0307 	and.w	r3, r3, #7
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	fa02 f303 	lsl.w	r3, r2, r3
 8003dee:	69ba      	ldr	r2, [r7, #24]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	08da      	lsrs	r2, r3, #3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	3208      	adds	r2, #8
 8003dfc:	69b9      	ldr	r1, [r7, #24]
 8003dfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	005b      	lsls	r3, r3, #1
 8003e0c:	2203      	movs	r2, #3
 8003e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e12:	43db      	mvns	r3, r3
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	4013      	ands	r3, r2
 8003e18:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f003 0203 	and.w	r2, r3, #3
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	005b      	lsls	r3, r3, #1
 8003e26:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2a:	69ba      	ldr	r2, [r7, #24]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	69ba      	ldr	r2, [r7, #24]
 8003e34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f000 80e0 	beq.w	8004004 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e44:	4b2f      	ldr	r3, [pc, #188]	; (8003f04 <HAL_GPIO_Init+0x238>)
 8003e46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003e4a:	4a2e      	ldr	r2, [pc, #184]	; (8003f04 <HAL_GPIO_Init+0x238>)
 8003e4c:	f043 0302 	orr.w	r3, r3, #2
 8003e50:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003e54:	4b2b      	ldr	r3, [pc, #172]	; (8003f04 <HAL_GPIO_Init+0x238>)
 8003e56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	60fb      	str	r3, [r7, #12]
 8003e60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e62:	4a29      	ldr	r2, [pc, #164]	; (8003f08 <HAL_GPIO_Init+0x23c>)
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	089b      	lsrs	r3, r3, #2
 8003e68:	3302      	adds	r3, #2
 8003e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	f003 0303 	and.w	r3, r3, #3
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	220f      	movs	r2, #15
 8003e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7e:	43db      	mvns	r3, r3
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	4013      	ands	r3, r2
 8003e84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a20      	ldr	r2, [pc, #128]	; (8003f0c <HAL_GPIO_Init+0x240>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d052      	beq.n	8003f34 <HAL_GPIO_Init+0x268>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a1f      	ldr	r2, [pc, #124]	; (8003f10 <HAL_GPIO_Init+0x244>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d031      	beq.n	8003efa <HAL_GPIO_Init+0x22e>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a1e      	ldr	r2, [pc, #120]	; (8003f14 <HAL_GPIO_Init+0x248>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d02b      	beq.n	8003ef6 <HAL_GPIO_Init+0x22a>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a1d      	ldr	r2, [pc, #116]	; (8003f18 <HAL_GPIO_Init+0x24c>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d025      	beq.n	8003ef2 <HAL_GPIO_Init+0x226>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a1c      	ldr	r2, [pc, #112]	; (8003f1c <HAL_GPIO_Init+0x250>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d01f      	beq.n	8003eee <HAL_GPIO_Init+0x222>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a1b      	ldr	r2, [pc, #108]	; (8003f20 <HAL_GPIO_Init+0x254>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d019      	beq.n	8003eea <HAL_GPIO_Init+0x21e>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a1a      	ldr	r2, [pc, #104]	; (8003f24 <HAL_GPIO_Init+0x258>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d013      	beq.n	8003ee6 <HAL_GPIO_Init+0x21a>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a19      	ldr	r2, [pc, #100]	; (8003f28 <HAL_GPIO_Init+0x25c>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d00d      	beq.n	8003ee2 <HAL_GPIO_Init+0x216>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a18      	ldr	r2, [pc, #96]	; (8003f2c <HAL_GPIO_Init+0x260>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d007      	beq.n	8003ede <HAL_GPIO_Init+0x212>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a17      	ldr	r2, [pc, #92]	; (8003f30 <HAL_GPIO_Init+0x264>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d101      	bne.n	8003eda <HAL_GPIO_Init+0x20e>
 8003ed6:	2309      	movs	r3, #9
 8003ed8:	e02d      	b.n	8003f36 <HAL_GPIO_Init+0x26a>
 8003eda:	230a      	movs	r3, #10
 8003edc:	e02b      	b.n	8003f36 <HAL_GPIO_Init+0x26a>
 8003ede:	2308      	movs	r3, #8
 8003ee0:	e029      	b.n	8003f36 <HAL_GPIO_Init+0x26a>
 8003ee2:	2307      	movs	r3, #7
 8003ee4:	e027      	b.n	8003f36 <HAL_GPIO_Init+0x26a>
 8003ee6:	2306      	movs	r3, #6
 8003ee8:	e025      	b.n	8003f36 <HAL_GPIO_Init+0x26a>
 8003eea:	2305      	movs	r3, #5
 8003eec:	e023      	b.n	8003f36 <HAL_GPIO_Init+0x26a>
 8003eee:	2304      	movs	r3, #4
 8003ef0:	e021      	b.n	8003f36 <HAL_GPIO_Init+0x26a>
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e01f      	b.n	8003f36 <HAL_GPIO_Init+0x26a>
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	e01d      	b.n	8003f36 <HAL_GPIO_Init+0x26a>
 8003efa:	2301      	movs	r3, #1
 8003efc:	e01b      	b.n	8003f36 <HAL_GPIO_Init+0x26a>
 8003efe:	bf00      	nop
 8003f00:	58000080 	.word	0x58000080
 8003f04:	58024400 	.word	0x58024400
 8003f08:	58000400 	.word	0x58000400
 8003f0c:	58020000 	.word	0x58020000
 8003f10:	58020400 	.word	0x58020400
 8003f14:	58020800 	.word	0x58020800
 8003f18:	58020c00 	.word	0x58020c00
 8003f1c:	58021000 	.word	0x58021000
 8003f20:	58021400 	.word	0x58021400
 8003f24:	58021800 	.word	0x58021800
 8003f28:	58021c00 	.word	0x58021c00
 8003f2c:	58022000 	.word	0x58022000
 8003f30:	58022400 	.word	0x58022400
 8003f34:	2300      	movs	r3, #0
 8003f36:	69fa      	ldr	r2, [r7, #28]
 8003f38:	f002 0203 	and.w	r2, r2, #3
 8003f3c:	0092      	lsls	r2, r2, #2
 8003f3e:	4093      	lsls	r3, r2
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f46:	4938      	ldr	r1, [pc, #224]	; (8004028 <HAL_GPIO_Init+0x35c>)
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	089b      	lsrs	r3, r3, #2
 8003f4c:	3302      	adds	r3, #2
 8003f4e:	69ba      	ldr	r2, [r7, #24]
 8003f50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	43db      	mvns	r3, r3
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	4013      	ands	r3, r2
 8003f64:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003f72:	69ba      	ldr	r2, [r7, #24]
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003f7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003f82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	43db      	mvns	r3, r3
 8003f8e:	69ba      	ldr	r2, [r7, #24]
 8003f90:	4013      	ands	r3, r2
 8003f92:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d003      	beq.n	8003fa8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003fa0:	69ba      	ldr	r2, [r7, #24]
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003fa8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	43db      	mvns	r3, r3
 8003fba:	69ba      	ldr	r2, [r7, #24]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d003      	beq.n	8003fd4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	69ba      	ldr	r2, [r7, #24]
 8003fd8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	43db      	mvns	r3, r3
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003ff6:	69ba      	ldr	r2, [r7, #24]
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	3301      	adds	r3, #1
 8004008:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	fa22 f303 	lsr.w	r3, r2, r3
 8004014:	2b00      	cmp	r3, #0
 8004016:	f47f ae63 	bne.w	8003ce0 <HAL_GPIO_Init+0x14>
  }
}
 800401a:	bf00      	nop
 800401c:	bf00      	nop
 800401e:	3724      	adds	r7, #36	; 0x24
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	58000400 	.word	0x58000400

0800402c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004034:	4a08      	ldr	r2, [pc, #32]	; (8004058 <HAL_HSEM_FastTake+0x2c>)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	3320      	adds	r3, #32
 800403a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800403e:	4a07      	ldr	r2, [pc, #28]	; (800405c <HAL_HSEM_FastTake+0x30>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d101      	bne.n	8004048 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8004044:	2300      	movs	r3, #0
 8004046:	e000      	b.n	800404a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
}
 800404a:	4618      	mov	r0, r3
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	58026400 	.word	0x58026400
 800405c:	80000300 	.word	0x80000300

08004060 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800406a:	4906      	ldr	r1, [pc, #24]	; (8004084 <HAL_HSEM_Release+0x24>)
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr
 8004084:	58026400 	.word	0x58026400

08004088 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800408a:	b08f      	sub	sp, #60	; 0x3c
 800408c:	af0a      	add	r7, sp, #40	; 0x28
 800408e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e116      	b.n	80042c8 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d106      	bne.n	80040ba <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f7fd fb4b 	bl	8001750 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2203      	movs	r2, #3
 80040be:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d102      	bne.n	80040d4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4618      	mov	r0, r3
 80040da:	f005 f83d 	bl	8009158 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	603b      	str	r3, [r7, #0]
 80040e4:	687e      	ldr	r6, [r7, #4]
 80040e6:	466d      	mov	r5, sp
 80040e8:	f106 0410 	add.w	r4, r6, #16
 80040ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80040f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80040fc:	1d33      	adds	r3, r6, #4
 80040fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004100:	6838      	ldr	r0, [r7, #0]
 8004102:	f004 ffbb 	bl	800907c <USB_CoreInit>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d005      	beq.n	8004118 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2202      	movs	r2, #2
 8004110:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e0d7      	b.n	80042c8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2100      	movs	r1, #0
 800411e:	4618      	mov	r0, r3
 8004120:	f005 f82b 	bl	800917a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004124:	2300      	movs	r3, #0
 8004126:	73fb      	strb	r3, [r7, #15]
 8004128:	e04a      	b.n	80041c0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800412a:	7bfa      	ldrb	r2, [r7, #15]
 800412c:	6879      	ldr	r1, [r7, #4]
 800412e:	4613      	mov	r3, r2
 8004130:	00db      	lsls	r3, r3, #3
 8004132:	4413      	add	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	440b      	add	r3, r1
 8004138:	333d      	adds	r3, #61	; 0x3d
 800413a:	2201      	movs	r2, #1
 800413c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800413e:	7bfa      	ldrb	r2, [r7, #15]
 8004140:	6879      	ldr	r1, [r7, #4]
 8004142:	4613      	mov	r3, r2
 8004144:	00db      	lsls	r3, r3, #3
 8004146:	4413      	add	r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	440b      	add	r3, r1
 800414c:	333c      	adds	r3, #60	; 0x3c
 800414e:	7bfa      	ldrb	r2, [r7, #15]
 8004150:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004152:	7bfa      	ldrb	r2, [r7, #15]
 8004154:	7bfb      	ldrb	r3, [r7, #15]
 8004156:	b298      	uxth	r0, r3
 8004158:	6879      	ldr	r1, [r7, #4]
 800415a:	4613      	mov	r3, r2
 800415c:	00db      	lsls	r3, r3, #3
 800415e:	4413      	add	r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	440b      	add	r3, r1
 8004164:	3356      	adds	r3, #86	; 0x56
 8004166:	4602      	mov	r2, r0
 8004168:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800416a:	7bfa      	ldrb	r2, [r7, #15]
 800416c:	6879      	ldr	r1, [r7, #4]
 800416e:	4613      	mov	r3, r2
 8004170:	00db      	lsls	r3, r3, #3
 8004172:	4413      	add	r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	440b      	add	r3, r1
 8004178:	3340      	adds	r3, #64	; 0x40
 800417a:	2200      	movs	r2, #0
 800417c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800417e:	7bfa      	ldrb	r2, [r7, #15]
 8004180:	6879      	ldr	r1, [r7, #4]
 8004182:	4613      	mov	r3, r2
 8004184:	00db      	lsls	r3, r3, #3
 8004186:	4413      	add	r3, r2
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	440b      	add	r3, r1
 800418c:	3344      	adds	r3, #68	; 0x44
 800418e:	2200      	movs	r2, #0
 8004190:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004192:	7bfa      	ldrb	r2, [r7, #15]
 8004194:	6879      	ldr	r1, [r7, #4]
 8004196:	4613      	mov	r3, r2
 8004198:	00db      	lsls	r3, r3, #3
 800419a:	4413      	add	r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	440b      	add	r3, r1
 80041a0:	3348      	adds	r3, #72	; 0x48
 80041a2:	2200      	movs	r2, #0
 80041a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80041a6:	7bfa      	ldrb	r2, [r7, #15]
 80041a8:	6879      	ldr	r1, [r7, #4]
 80041aa:	4613      	mov	r3, r2
 80041ac:	00db      	lsls	r3, r3, #3
 80041ae:	4413      	add	r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	440b      	add	r3, r1
 80041b4:	334c      	adds	r3, #76	; 0x4c
 80041b6:	2200      	movs	r2, #0
 80041b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041ba:	7bfb      	ldrb	r3, [r7, #15]
 80041bc:	3301      	adds	r3, #1
 80041be:	73fb      	strb	r3, [r7, #15]
 80041c0:	7bfa      	ldrb	r2, [r7, #15]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d3af      	bcc.n	800412a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041ca:	2300      	movs	r3, #0
 80041cc:	73fb      	strb	r3, [r7, #15]
 80041ce:	e044      	b.n	800425a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80041d0:	7bfa      	ldrb	r2, [r7, #15]
 80041d2:	6879      	ldr	r1, [r7, #4]
 80041d4:	4613      	mov	r3, r2
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	4413      	add	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	440b      	add	r3, r1
 80041de:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80041e2:	2200      	movs	r2, #0
 80041e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80041e6:	7bfa      	ldrb	r2, [r7, #15]
 80041e8:	6879      	ldr	r1, [r7, #4]
 80041ea:	4613      	mov	r3, r2
 80041ec:	00db      	lsls	r3, r3, #3
 80041ee:	4413      	add	r3, r2
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	440b      	add	r3, r1
 80041f4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80041f8:	7bfa      	ldrb	r2, [r7, #15]
 80041fa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80041fc:	7bfa      	ldrb	r2, [r7, #15]
 80041fe:	6879      	ldr	r1, [r7, #4]
 8004200:	4613      	mov	r3, r2
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	4413      	add	r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	440b      	add	r3, r1
 800420a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800420e:	2200      	movs	r2, #0
 8004210:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004212:	7bfa      	ldrb	r2, [r7, #15]
 8004214:	6879      	ldr	r1, [r7, #4]
 8004216:	4613      	mov	r3, r2
 8004218:	00db      	lsls	r3, r3, #3
 800421a:	4413      	add	r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	440b      	add	r3, r1
 8004220:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004224:	2200      	movs	r2, #0
 8004226:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004228:	7bfa      	ldrb	r2, [r7, #15]
 800422a:	6879      	ldr	r1, [r7, #4]
 800422c:	4613      	mov	r3, r2
 800422e:	00db      	lsls	r3, r3, #3
 8004230:	4413      	add	r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	440b      	add	r3, r1
 8004236:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800423a:	2200      	movs	r2, #0
 800423c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800423e:	7bfa      	ldrb	r2, [r7, #15]
 8004240:	6879      	ldr	r1, [r7, #4]
 8004242:	4613      	mov	r3, r2
 8004244:	00db      	lsls	r3, r3, #3
 8004246:	4413      	add	r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	440b      	add	r3, r1
 800424c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004250:	2200      	movs	r2, #0
 8004252:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004254:	7bfb      	ldrb	r3, [r7, #15]
 8004256:	3301      	adds	r3, #1
 8004258:	73fb      	strb	r3, [r7, #15]
 800425a:	7bfa      	ldrb	r2, [r7, #15]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	429a      	cmp	r2, r3
 8004262:	d3b5      	bcc.n	80041d0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	603b      	str	r3, [r7, #0]
 800426a:	687e      	ldr	r6, [r7, #4]
 800426c:	466d      	mov	r5, sp
 800426e:	f106 0410 	add.w	r4, r6, #16
 8004272:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004274:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004276:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004278:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800427a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800427e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004282:	1d33      	adds	r3, r6, #4
 8004284:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004286:	6838      	ldr	r0, [r7, #0]
 8004288:	f004 ffc4 	bl	8009214 <USB_DevInit>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d005      	beq.n	800429e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2202      	movs	r2, #2
 8004296:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e014      	b.n	80042c8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2201      	movs	r2, #1
 80042aa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d102      	bne.n	80042bc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f80a 	bl	80042d0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f005 f982 	bl	80095ca <USB_DevDisconnect>

  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3714      	adds	r7, #20
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080042d0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042fe:	4b05      	ldr	r3, [pc, #20]	; (8004314 <HAL_PCDEx_ActivateLPM+0x44>)
 8004300:	4313      	orrs	r3, r2
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3714      	adds	r7, #20
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	10000003 	.word	0x10000003

08004318 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004320:	4b29      	ldr	r3, [pc, #164]	; (80043c8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	f003 0307 	and.w	r3, r3, #7
 8004328:	2b06      	cmp	r3, #6
 800432a:	d00a      	beq.n	8004342 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800432c:	4b26      	ldr	r3, [pc, #152]	; (80043c8 <HAL_PWREx_ConfigSupply+0xb0>)
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	429a      	cmp	r2, r3
 8004338:	d001      	beq.n	800433e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e040      	b.n	80043c0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800433e:	2300      	movs	r3, #0
 8004340:	e03e      	b.n	80043c0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004342:	4b21      	ldr	r3, [pc, #132]	; (80043c8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800434a:	491f      	ldr	r1, [pc, #124]	; (80043c8 <HAL_PWREx_ConfigSupply+0xb0>)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4313      	orrs	r3, r2
 8004350:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004352:	f7fd fc29 	bl	8001ba8 <HAL_GetTick>
 8004356:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004358:	e009      	b.n	800436e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800435a:	f7fd fc25 	bl	8001ba8 <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004368:	d901      	bls.n	800436e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e028      	b.n	80043c0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800436e:	4b16      	ldr	r3, [pc, #88]	; (80043c8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004376:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800437a:	d1ee      	bne.n	800435a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2b1e      	cmp	r3, #30
 8004380:	d008      	beq.n	8004394 <HAL_PWREx_ConfigSupply+0x7c>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2b2e      	cmp	r3, #46	; 0x2e
 8004386:	d005      	beq.n	8004394 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b1d      	cmp	r3, #29
 800438c:	d002      	beq.n	8004394 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2b2d      	cmp	r3, #45	; 0x2d
 8004392:	d114      	bne.n	80043be <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004394:	f7fd fc08 	bl	8001ba8 <HAL_GetTick>
 8004398:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800439a:	e009      	b.n	80043b0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800439c:	f7fd fc04 	bl	8001ba8 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043aa:	d901      	bls.n	80043b0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e007      	b.n	80043c0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80043b0:	4b05      	ldr	r3, [pc, #20]	; (80043c8 <HAL_PWREx_ConfigSupply+0xb0>)
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043bc:	d1ee      	bne.n	800439c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3710      	adds	r7, #16
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	58024800 	.word	0x58024800

080043cc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80043cc:	b480      	push	{r7}
 80043ce:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80043d0:	4b05      	ldr	r3, [pc, #20]	; (80043e8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	4a04      	ldr	r2, [pc, #16]	; (80043e8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80043d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043da:	60d3      	str	r3, [r2, #12]
}
 80043dc:	bf00      	nop
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	58024800 	.word	0x58024800

080043ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b08c      	sub	sp, #48	; 0x30
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d102      	bne.n	8004400 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	f000 bc48 	b.w	8004c90 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0301 	and.w	r3, r3, #1
 8004408:	2b00      	cmp	r3, #0
 800440a:	f000 8088 	beq.w	800451e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800440e:	4b99      	ldr	r3, [pc, #612]	; (8004674 <HAL_RCC_OscConfig+0x288>)
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004416:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004418:	4b96      	ldr	r3, [pc, #600]	; (8004674 <HAL_RCC_OscConfig+0x288>)
 800441a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800441e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004420:	2b10      	cmp	r3, #16
 8004422:	d007      	beq.n	8004434 <HAL_RCC_OscConfig+0x48>
 8004424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004426:	2b18      	cmp	r3, #24
 8004428:	d111      	bne.n	800444e <HAL_RCC_OscConfig+0x62>
 800442a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800442c:	f003 0303 	and.w	r3, r3, #3
 8004430:	2b02      	cmp	r3, #2
 8004432:	d10c      	bne.n	800444e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004434:	4b8f      	ldr	r3, [pc, #572]	; (8004674 <HAL_RCC_OscConfig+0x288>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d06d      	beq.n	800451c <HAL_RCC_OscConfig+0x130>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d169      	bne.n	800451c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	f000 bc21 	b.w	8004c90 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004456:	d106      	bne.n	8004466 <HAL_RCC_OscConfig+0x7a>
 8004458:	4b86      	ldr	r3, [pc, #536]	; (8004674 <HAL_RCC_OscConfig+0x288>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a85      	ldr	r2, [pc, #532]	; (8004674 <HAL_RCC_OscConfig+0x288>)
 800445e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004462:	6013      	str	r3, [r2, #0]
 8004464:	e02e      	b.n	80044c4 <HAL_RCC_OscConfig+0xd8>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10c      	bne.n	8004488 <HAL_RCC_OscConfig+0x9c>
 800446e:	4b81      	ldr	r3, [pc, #516]	; (8004674 <HAL_RCC_OscConfig+0x288>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a80      	ldr	r2, [pc, #512]	; (8004674 <HAL_RCC_OscConfig+0x288>)
 8004474:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004478:	6013      	str	r3, [r2, #0]
 800447a:	4b7e      	ldr	r3, [pc, #504]	; (8004674 <HAL_RCC_OscConfig+0x288>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a7d      	ldr	r2, [pc, #500]	; (8004674 <HAL_RCC_OscConfig+0x288>)
 8004480:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004484:	6013      	str	r3, [r2, #0]
 8004486:	e01d      	b.n	80044c4 <HAL_RCC_OscConfig+0xd8>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004490:	d10c      	bne.n	80044ac <HAL_RCC_OscConfig+0xc0>
 8004492:	4b78      	ldr	r3, [pc, #480]	; (8004674 <HAL_RCC_OscConfig+0x288>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a77      	ldr	r2, [pc, #476]	; (8004674 <HAL_RCC_OscConfig+0x288>)
 8004498:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800449c:	6013      	str	r3, [r2, #0]
 800449e:	4b75      	ldr	r3, [pc, #468]	; (8004674 <HAL_RCC_OscConfig+0x288>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a74      	ldr	r2, [pc, #464]	; (8004674 <HAL_RCC_OscConfig+0x288>)
 80044a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044a8:	6013      	str	r3, [r2, #0]
 80044aa:	e00b      	b.n	80044c4 <HAL_RCC_OscConfig+0xd8>
 80044ac:	4b71      	ldr	r3, [pc, #452]	; (8004674 <HAL_RCC_OscConfig+0x288>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a70      	ldr	r2, [pc, #448]	; (8004674 <HAL_RCC_OscConfig+0x288>)
 80044b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044b6:	6013      	str	r3, [r2, #0]
 80044b8:	4b6e      	ldr	r3, [pc, #440]	; (8004674 <HAL_RCC_OscConfig+0x288>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a6d      	ldr	r2, [pc, #436]	; (8004674 <HAL_RCC_OscConfig+0x288>)
 80044be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d013      	beq.n	80044f4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044cc:	f7fd fb6c 	bl	8001ba8 <HAL_GetTick>
 80044d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80044d2:	e008      	b.n	80044e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044d4:	f7fd fb68 	bl	8001ba8 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b64      	cmp	r3, #100	; 0x64
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e3d4      	b.n	8004c90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80044e6:	4b63      	ldr	r3, [pc, #396]	; (8004674 <HAL_RCC_OscConfig+0x288>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d0f0      	beq.n	80044d4 <HAL_RCC_OscConfig+0xe8>
 80044f2:	e014      	b.n	800451e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f4:	f7fd fb58 	bl	8001ba8 <HAL_GetTick>
 80044f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80044fa:	e008      	b.n	800450e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044fc:	f7fd fb54 	bl	8001ba8 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b64      	cmp	r3, #100	; 0x64
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e3c0      	b.n	8004c90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800450e:	4b59      	ldr	r3, [pc, #356]	; (8004674 <HAL_RCC_OscConfig+0x288>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1f0      	bne.n	80044fc <HAL_RCC_OscConfig+0x110>
 800451a:	e000      	b.n	800451e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800451c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	f000 80ca 	beq.w	80046c0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800452c:	4b51      	ldr	r3, [pc, #324]	; (8004674 <HAL_RCC_OscConfig+0x288>)
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004534:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004536:	4b4f      	ldr	r3, [pc, #316]	; (8004674 <HAL_RCC_OscConfig+0x288>)
 8004538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800453a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800453c:	6a3b      	ldr	r3, [r7, #32]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d007      	beq.n	8004552 <HAL_RCC_OscConfig+0x166>
 8004542:	6a3b      	ldr	r3, [r7, #32]
 8004544:	2b18      	cmp	r3, #24
 8004546:	d156      	bne.n	80045f6 <HAL_RCC_OscConfig+0x20a>
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	f003 0303 	and.w	r3, r3, #3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d151      	bne.n	80045f6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004552:	4b48      	ldr	r3, [pc, #288]	; (8004674 <HAL_RCC_OscConfig+0x288>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0304 	and.w	r3, r3, #4
 800455a:	2b00      	cmp	r3, #0
 800455c:	d005      	beq.n	800456a <HAL_RCC_OscConfig+0x17e>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e392      	b.n	8004c90 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800456a:	4b42      	ldr	r3, [pc, #264]	; (8004674 <HAL_RCC_OscConfig+0x288>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f023 0219 	bic.w	r2, r3, #25
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	493f      	ldr	r1, [pc, #252]	; (8004674 <HAL_RCC_OscConfig+0x288>)
 8004578:	4313      	orrs	r3, r2
 800457a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800457c:	f7fd fb14 	bl	8001ba8 <HAL_GetTick>
 8004580:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004582:	e008      	b.n	8004596 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004584:	f7fd fb10 	bl	8001ba8 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b02      	cmp	r3, #2
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e37c      	b.n	8004c90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004596:	4b37      	ldr	r3, [pc, #220]	; (8004674 <HAL_RCC_OscConfig+0x288>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0304 	and.w	r3, r3, #4
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d0f0      	beq.n	8004584 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045a2:	f7fd fb31 	bl	8001c08 <HAL_GetREVID>
 80045a6:	4603      	mov	r3, r0
 80045a8:	f241 0203 	movw	r2, #4099	; 0x1003
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d817      	bhi.n	80045e0 <HAL_RCC_OscConfig+0x1f4>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	2b40      	cmp	r3, #64	; 0x40
 80045b6:	d108      	bne.n	80045ca <HAL_RCC_OscConfig+0x1de>
 80045b8:	4b2e      	ldr	r3, [pc, #184]	; (8004674 <HAL_RCC_OscConfig+0x288>)
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80045c0:	4a2c      	ldr	r2, [pc, #176]	; (8004674 <HAL_RCC_OscConfig+0x288>)
 80045c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045c6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045c8:	e07a      	b.n	80046c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ca:	4b2a      	ldr	r3, [pc, #168]	; (8004674 <HAL_RCC_OscConfig+0x288>)
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	031b      	lsls	r3, r3, #12
 80045d8:	4926      	ldr	r1, [pc, #152]	; (8004674 <HAL_RCC_OscConfig+0x288>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045de:	e06f      	b.n	80046c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045e0:	4b24      	ldr	r3, [pc, #144]	; (8004674 <HAL_RCC_OscConfig+0x288>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	061b      	lsls	r3, r3, #24
 80045ee:	4921      	ldr	r1, [pc, #132]	; (8004674 <HAL_RCC_OscConfig+0x288>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045f4:	e064      	b.n	80046c0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d047      	beq.n	800468e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80045fe:	4b1d      	ldr	r3, [pc, #116]	; (8004674 <HAL_RCC_OscConfig+0x288>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f023 0219 	bic.w	r2, r3, #25
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	491a      	ldr	r1, [pc, #104]	; (8004674 <HAL_RCC_OscConfig+0x288>)
 800460c:	4313      	orrs	r3, r2
 800460e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004610:	f7fd faca 	bl	8001ba8 <HAL_GetTick>
 8004614:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004616:	e008      	b.n	800462a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004618:	f7fd fac6 	bl	8001ba8 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	2b02      	cmp	r3, #2
 8004624:	d901      	bls.n	800462a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e332      	b.n	8004c90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800462a:	4b12      	ldr	r3, [pc, #72]	; (8004674 <HAL_RCC_OscConfig+0x288>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0304 	and.w	r3, r3, #4
 8004632:	2b00      	cmp	r3, #0
 8004634:	d0f0      	beq.n	8004618 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004636:	f7fd fae7 	bl	8001c08 <HAL_GetREVID>
 800463a:	4603      	mov	r3, r0
 800463c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004640:	4293      	cmp	r3, r2
 8004642:	d819      	bhi.n	8004678 <HAL_RCC_OscConfig+0x28c>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	2b40      	cmp	r3, #64	; 0x40
 800464a:	d108      	bne.n	800465e <HAL_RCC_OscConfig+0x272>
 800464c:	4b09      	ldr	r3, [pc, #36]	; (8004674 <HAL_RCC_OscConfig+0x288>)
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004654:	4a07      	ldr	r2, [pc, #28]	; (8004674 <HAL_RCC_OscConfig+0x288>)
 8004656:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800465a:	6053      	str	r3, [r2, #4]
 800465c:	e030      	b.n	80046c0 <HAL_RCC_OscConfig+0x2d4>
 800465e:	4b05      	ldr	r3, [pc, #20]	; (8004674 <HAL_RCC_OscConfig+0x288>)
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	031b      	lsls	r3, r3, #12
 800466c:	4901      	ldr	r1, [pc, #4]	; (8004674 <HAL_RCC_OscConfig+0x288>)
 800466e:	4313      	orrs	r3, r2
 8004670:	604b      	str	r3, [r1, #4]
 8004672:	e025      	b.n	80046c0 <HAL_RCC_OscConfig+0x2d4>
 8004674:	58024400 	.word	0x58024400
 8004678:	4b9a      	ldr	r3, [pc, #616]	; (80048e4 <HAL_RCC_OscConfig+0x4f8>)
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	061b      	lsls	r3, r3, #24
 8004686:	4997      	ldr	r1, [pc, #604]	; (80048e4 <HAL_RCC_OscConfig+0x4f8>)
 8004688:	4313      	orrs	r3, r2
 800468a:	604b      	str	r3, [r1, #4]
 800468c:	e018      	b.n	80046c0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800468e:	4b95      	ldr	r3, [pc, #596]	; (80048e4 <HAL_RCC_OscConfig+0x4f8>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a94      	ldr	r2, [pc, #592]	; (80048e4 <HAL_RCC_OscConfig+0x4f8>)
 8004694:	f023 0301 	bic.w	r3, r3, #1
 8004698:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800469a:	f7fd fa85 	bl	8001ba8 <HAL_GetTick>
 800469e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80046a0:	e008      	b.n	80046b4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046a2:	f7fd fa81 	bl	8001ba8 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d901      	bls.n	80046b4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e2ed      	b.n	8004c90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80046b4:	4b8b      	ldr	r3, [pc, #556]	; (80048e4 <HAL_RCC_OscConfig+0x4f8>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0304 	and.w	r3, r3, #4
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d1f0      	bne.n	80046a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0310 	and.w	r3, r3, #16
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f000 80a9 	beq.w	8004820 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046ce:	4b85      	ldr	r3, [pc, #532]	; (80048e4 <HAL_RCC_OscConfig+0x4f8>)
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046d6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80046d8:	4b82      	ldr	r3, [pc, #520]	; (80048e4 <HAL_RCC_OscConfig+0x4f8>)
 80046da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046dc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	2b08      	cmp	r3, #8
 80046e2:	d007      	beq.n	80046f4 <HAL_RCC_OscConfig+0x308>
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	2b18      	cmp	r3, #24
 80046e8:	d13a      	bne.n	8004760 <HAL_RCC_OscConfig+0x374>
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	f003 0303 	and.w	r3, r3, #3
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d135      	bne.n	8004760 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80046f4:	4b7b      	ldr	r3, [pc, #492]	; (80048e4 <HAL_RCC_OscConfig+0x4f8>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d005      	beq.n	800470c <HAL_RCC_OscConfig+0x320>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	69db      	ldr	r3, [r3, #28]
 8004704:	2b80      	cmp	r3, #128	; 0x80
 8004706:	d001      	beq.n	800470c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e2c1      	b.n	8004c90 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800470c:	f7fd fa7c 	bl	8001c08 <HAL_GetREVID>
 8004710:	4603      	mov	r3, r0
 8004712:	f241 0203 	movw	r2, #4099	; 0x1003
 8004716:	4293      	cmp	r3, r2
 8004718:	d817      	bhi.n	800474a <HAL_RCC_OscConfig+0x35e>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	2b20      	cmp	r3, #32
 8004720:	d108      	bne.n	8004734 <HAL_RCC_OscConfig+0x348>
 8004722:	4b70      	ldr	r3, [pc, #448]	; (80048e4 <HAL_RCC_OscConfig+0x4f8>)
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800472a:	4a6e      	ldr	r2, [pc, #440]	; (80048e4 <HAL_RCC_OscConfig+0x4f8>)
 800472c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004730:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004732:	e075      	b.n	8004820 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004734:	4b6b      	ldr	r3, [pc, #428]	; (80048e4 <HAL_RCC_OscConfig+0x4f8>)
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a1b      	ldr	r3, [r3, #32]
 8004740:	069b      	lsls	r3, r3, #26
 8004742:	4968      	ldr	r1, [pc, #416]	; (80048e4 <HAL_RCC_OscConfig+0x4f8>)
 8004744:	4313      	orrs	r3, r2
 8004746:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004748:	e06a      	b.n	8004820 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800474a:	4b66      	ldr	r3, [pc, #408]	; (80048e4 <HAL_RCC_OscConfig+0x4f8>)
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	061b      	lsls	r3, r3, #24
 8004758:	4962      	ldr	r1, [pc, #392]	; (80048e4 <HAL_RCC_OscConfig+0x4f8>)
 800475a:	4313      	orrs	r3, r2
 800475c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800475e:	e05f      	b.n	8004820 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	69db      	ldr	r3, [r3, #28]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d042      	beq.n	80047ee <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004768:	4b5e      	ldr	r3, [pc, #376]	; (80048e4 <HAL_RCC_OscConfig+0x4f8>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a5d      	ldr	r2, [pc, #372]	; (80048e4 <HAL_RCC_OscConfig+0x4f8>)
 800476e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004772:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004774:	f7fd fa18 	bl	8001ba8 <HAL_GetTick>
 8004778:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800477a:	e008      	b.n	800478e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800477c:	f7fd fa14 	bl	8001ba8 <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	2b02      	cmp	r3, #2
 8004788:	d901      	bls.n	800478e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e280      	b.n	8004c90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800478e:	4b55      	ldr	r3, [pc, #340]	; (80048e4 <HAL_RCC_OscConfig+0x4f8>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004796:	2b00      	cmp	r3, #0
 8004798:	d0f0      	beq.n	800477c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800479a:	f7fd fa35 	bl	8001c08 <HAL_GetREVID>
 800479e:	4603      	mov	r3, r0
 80047a0:	f241 0203 	movw	r2, #4099	; 0x1003
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d817      	bhi.n	80047d8 <HAL_RCC_OscConfig+0x3ec>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a1b      	ldr	r3, [r3, #32]
 80047ac:	2b20      	cmp	r3, #32
 80047ae:	d108      	bne.n	80047c2 <HAL_RCC_OscConfig+0x3d6>
 80047b0:	4b4c      	ldr	r3, [pc, #304]	; (80048e4 <HAL_RCC_OscConfig+0x4f8>)
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80047b8:	4a4a      	ldr	r2, [pc, #296]	; (80048e4 <HAL_RCC_OscConfig+0x4f8>)
 80047ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047be:	6053      	str	r3, [r2, #4]
 80047c0:	e02e      	b.n	8004820 <HAL_RCC_OscConfig+0x434>
 80047c2:	4b48      	ldr	r3, [pc, #288]	; (80048e4 <HAL_RCC_OscConfig+0x4f8>)
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	069b      	lsls	r3, r3, #26
 80047d0:	4944      	ldr	r1, [pc, #272]	; (80048e4 <HAL_RCC_OscConfig+0x4f8>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	604b      	str	r3, [r1, #4]
 80047d6:	e023      	b.n	8004820 <HAL_RCC_OscConfig+0x434>
 80047d8:	4b42      	ldr	r3, [pc, #264]	; (80048e4 <HAL_RCC_OscConfig+0x4f8>)
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a1b      	ldr	r3, [r3, #32]
 80047e4:	061b      	lsls	r3, r3, #24
 80047e6:	493f      	ldr	r1, [pc, #252]	; (80048e4 <HAL_RCC_OscConfig+0x4f8>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	60cb      	str	r3, [r1, #12]
 80047ec:	e018      	b.n	8004820 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80047ee:	4b3d      	ldr	r3, [pc, #244]	; (80048e4 <HAL_RCC_OscConfig+0x4f8>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a3c      	ldr	r2, [pc, #240]	; (80048e4 <HAL_RCC_OscConfig+0x4f8>)
 80047f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047fa:	f7fd f9d5 	bl	8001ba8 <HAL_GetTick>
 80047fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004800:	e008      	b.n	8004814 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004802:	f7fd f9d1 	bl	8001ba8 <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	2b02      	cmp	r3, #2
 800480e:	d901      	bls.n	8004814 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e23d      	b.n	8004c90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004814:	4b33      	ldr	r3, [pc, #204]	; (80048e4 <HAL_RCC_OscConfig+0x4f8>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800481c:	2b00      	cmp	r3, #0
 800481e:	d1f0      	bne.n	8004802 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0308 	and.w	r3, r3, #8
 8004828:	2b00      	cmp	r3, #0
 800482a:	d036      	beq.n	800489a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	695b      	ldr	r3, [r3, #20]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d019      	beq.n	8004868 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004834:	4b2b      	ldr	r3, [pc, #172]	; (80048e4 <HAL_RCC_OscConfig+0x4f8>)
 8004836:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004838:	4a2a      	ldr	r2, [pc, #168]	; (80048e4 <HAL_RCC_OscConfig+0x4f8>)
 800483a:	f043 0301 	orr.w	r3, r3, #1
 800483e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004840:	f7fd f9b2 	bl	8001ba8 <HAL_GetTick>
 8004844:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004846:	e008      	b.n	800485a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004848:	f7fd f9ae 	bl	8001ba8 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	2b02      	cmp	r3, #2
 8004854:	d901      	bls.n	800485a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e21a      	b.n	8004c90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800485a:	4b22      	ldr	r3, [pc, #136]	; (80048e4 <HAL_RCC_OscConfig+0x4f8>)
 800485c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d0f0      	beq.n	8004848 <HAL_RCC_OscConfig+0x45c>
 8004866:	e018      	b.n	800489a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004868:	4b1e      	ldr	r3, [pc, #120]	; (80048e4 <HAL_RCC_OscConfig+0x4f8>)
 800486a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800486c:	4a1d      	ldr	r2, [pc, #116]	; (80048e4 <HAL_RCC_OscConfig+0x4f8>)
 800486e:	f023 0301 	bic.w	r3, r3, #1
 8004872:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004874:	f7fd f998 	bl	8001ba8 <HAL_GetTick>
 8004878:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800487a:	e008      	b.n	800488e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800487c:	f7fd f994 	bl	8001ba8 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	2b02      	cmp	r3, #2
 8004888:	d901      	bls.n	800488e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e200      	b.n	8004c90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800488e:	4b15      	ldr	r3, [pc, #84]	; (80048e4 <HAL_RCC_OscConfig+0x4f8>)
 8004890:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1f0      	bne.n	800487c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0320 	and.w	r3, r3, #32
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d039      	beq.n	800491a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d01c      	beq.n	80048e8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80048ae:	4b0d      	ldr	r3, [pc, #52]	; (80048e4 <HAL_RCC_OscConfig+0x4f8>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a0c      	ldr	r2, [pc, #48]	; (80048e4 <HAL_RCC_OscConfig+0x4f8>)
 80048b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80048b8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80048ba:	f7fd f975 	bl	8001ba8 <HAL_GetTick>
 80048be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80048c0:	e008      	b.n	80048d4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048c2:	f7fd f971 	bl	8001ba8 <HAL_GetTick>
 80048c6:	4602      	mov	r2, r0
 80048c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d901      	bls.n	80048d4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	e1dd      	b.n	8004c90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80048d4:	4b03      	ldr	r3, [pc, #12]	; (80048e4 <HAL_RCC_OscConfig+0x4f8>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d0f0      	beq.n	80048c2 <HAL_RCC_OscConfig+0x4d6>
 80048e0:	e01b      	b.n	800491a <HAL_RCC_OscConfig+0x52e>
 80048e2:	bf00      	nop
 80048e4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80048e8:	4b9b      	ldr	r3, [pc, #620]	; (8004b58 <HAL_RCC_OscConfig+0x76c>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a9a      	ldr	r2, [pc, #616]	; (8004b58 <HAL_RCC_OscConfig+0x76c>)
 80048ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048f2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80048f4:	f7fd f958 	bl	8001ba8 <HAL_GetTick>
 80048f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80048fa:	e008      	b.n	800490e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048fc:	f7fd f954 	bl	8001ba8 <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	2b02      	cmp	r3, #2
 8004908:	d901      	bls.n	800490e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e1c0      	b.n	8004c90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800490e:	4b92      	ldr	r3, [pc, #584]	; (8004b58 <HAL_RCC_OscConfig+0x76c>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1f0      	bne.n	80048fc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0304 	and.w	r3, r3, #4
 8004922:	2b00      	cmp	r3, #0
 8004924:	f000 8081 	beq.w	8004a2a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004928:	4b8c      	ldr	r3, [pc, #560]	; (8004b5c <HAL_RCC_OscConfig+0x770>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a8b      	ldr	r2, [pc, #556]	; (8004b5c <HAL_RCC_OscConfig+0x770>)
 800492e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004932:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004934:	f7fd f938 	bl	8001ba8 <HAL_GetTick>
 8004938:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800493a:	e008      	b.n	800494e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800493c:	f7fd f934 	bl	8001ba8 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b64      	cmp	r3, #100	; 0x64
 8004948:	d901      	bls.n	800494e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e1a0      	b.n	8004c90 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800494e:	4b83      	ldr	r3, [pc, #524]	; (8004b5c <HAL_RCC_OscConfig+0x770>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004956:	2b00      	cmp	r3, #0
 8004958:	d0f0      	beq.n	800493c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	2b01      	cmp	r3, #1
 8004960:	d106      	bne.n	8004970 <HAL_RCC_OscConfig+0x584>
 8004962:	4b7d      	ldr	r3, [pc, #500]	; (8004b58 <HAL_RCC_OscConfig+0x76c>)
 8004964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004966:	4a7c      	ldr	r2, [pc, #496]	; (8004b58 <HAL_RCC_OscConfig+0x76c>)
 8004968:	f043 0301 	orr.w	r3, r3, #1
 800496c:	6713      	str	r3, [r2, #112]	; 0x70
 800496e:	e02d      	b.n	80049cc <HAL_RCC_OscConfig+0x5e0>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d10c      	bne.n	8004992 <HAL_RCC_OscConfig+0x5a6>
 8004978:	4b77      	ldr	r3, [pc, #476]	; (8004b58 <HAL_RCC_OscConfig+0x76c>)
 800497a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800497c:	4a76      	ldr	r2, [pc, #472]	; (8004b58 <HAL_RCC_OscConfig+0x76c>)
 800497e:	f023 0301 	bic.w	r3, r3, #1
 8004982:	6713      	str	r3, [r2, #112]	; 0x70
 8004984:	4b74      	ldr	r3, [pc, #464]	; (8004b58 <HAL_RCC_OscConfig+0x76c>)
 8004986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004988:	4a73      	ldr	r2, [pc, #460]	; (8004b58 <HAL_RCC_OscConfig+0x76c>)
 800498a:	f023 0304 	bic.w	r3, r3, #4
 800498e:	6713      	str	r3, [r2, #112]	; 0x70
 8004990:	e01c      	b.n	80049cc <HAL_RCC_OscConfig+0x5e0>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	2b05      	cmp	r3, #5
 8004998:	d10c      	bne.n	80049b4 <HAL_RCC_OscConfig+0x5c8>
 800499a:	4b6f      	ldr	r3, [pc, #444]	; (8004b58 <HAL_RCC_OscConfig+0x76c>)
 800499c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800499e:	4a6e      	ldr	r2, [pc, #440]	; (8004b58 <HAL_RCC_OscConfig+0x76c>)
 80049a0:	f043 0304 	orr.w	r3, r3, #4
 80049a4:	6713      	str	r3, [r2, #112]	; 0x70
 80049a6:	4b6c      	ldr	r3, [pc, #432]	; (8004b58 <HAL_RCC_OscConfig+0x76c>)
 80049a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049aa:	4a6b      	ldr	r2, [pc, #428]	; (8004b58 <HAL_RCC_OscConfig+0x76c>)
 80049ac:	f043 0301 	orr.w	r3, r3, #1
 80049b0:	6713      	str	r3, [r2, #112]	; 0x70
 80049b2:	e00b      	b.n	80049cc <HAL_RCC_OscConfig+0x5e0>
 80049b4:	4b68      	ldr	r3, [pc, #416]	; (8004b58 <HAL_RCC_OscConfig+0x76c>)
 80049b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b8:	4a67      	ldr	r2, [pc, #412]	; (8004b58 <HAL_RCC_OscConfig+0x76c>)
 80049ba:	f023 0301 	bic.w	r3, r3, #1
 80049be:	6713      	str	r3, [r2, #112]	; 0x70
 80049c0:	4b65      	ldr	r3, [pc, #404]	; (8004b58 <HAL_RCC_OscConfig+0x76c>)
 80049c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c4:	4a64      	ldr	r2, [pc, #400]	; (8004b58 <HAL_RCC_OscConfig+0x76c>)
 80049c6:	f023 0304 	bic.w	r3, r3, #4
 80049ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d015      	beq.n	8004a00 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d4:	f7fd f8e8 	bl	8001ba8 <HAL_GetTick>
 80049d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049da:	e00a      	b.n	80049f2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049dc:	f7fd f8e4 	bl	8001ba8 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d901      	bls.n	80049f2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e14e      	b.n	8004c90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049f2:	4b59      	ldr	r3, [pc, #356]	; (8004b58 <HAL_RCC_OscConfig+0x76c>)
 80049f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f6:	f003 0302 	and.w	r3, r3, #2
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d0ee      	beq.n	80049dc <HAL_RCC_OscConfig+0x5f0>
 80049fe:	e014      	b.n	8004a2a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a00:	f7fd f8d2 	bl	8001ba8 <HAL_GetTick>
 8004a04:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004a06:	e00a      	b.n	8004a1e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a08:	f7fd f8ce 	bl	8001ba8 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e138      	b.n	8004c90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004a1e:	4b4e      	ldr	r3, [pc, #312]	; (8004b58 <HAL_RCC_OscConfig+0x76c>)
 8004a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a22:	f003 0302 	and.w	r3, r3, #2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1ee      	bne.n	8004a08 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	f000 812d 	beq.w	8004c8e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004a34:	4b48      	ldr	r3, [pc, #288]	; (8004b58 <HAL_RCC_OscConfig+0x76c>)
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a3c:	2b18      	cmp	r3, #24
 8004a3e:	f000 80bd 	beq.w	8004bbc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	f040 809e 	bne.w	8004b88 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a4c:	4b42      	ldr	r3, [pc, #264]	; (8004b58 <HAL_RCC_OscConfig+0x76c>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a41      	ldr	r2, [pc, #260]	; (8004b58 <HAL_RCC_OscConfig+0x76c>)
 8004a52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a58:	f7fd f8a6 	bl	8001ba8 <HAL_GetTick>
 8004a5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a5e:	e008      	b.n	8004a72 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a60:	f7fd f8a2 	bl	8001ba8 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e10e      	b.n	8004c90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a72:	4b39      	ldr	r3, [pc, #228]	; (8004b58 <HAL_RCC_OscConfig+0x76c>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1f0      	bne.n	8004a60 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a7e:	4b36      	ldr	r3, [pc, #216]	; (8004b58 <HAL_RCC_OscConfig+0x76c>)
 8004a80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a82:	4b37      	ldr	r3, [pc, #220]	; (8004b60 <HAL_RCC_OscConfig+0x774>)
 8004a84:	4013      	ands	r3, r2
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004a8e:	0112      	lsls	r2, r2, #4
 8004a90:	430a      	orrs	r2, r1
 8004a92:	4931      	ldr	r1, [pc, #196]	; (8004b58 <HAL_RCC_OscConfig+0x76c>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	628b      	str	r3, [r1, #40]	; 0x28
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	025b      	lsls	r3, r3, #9
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	431a      	orrs	r2, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	041b      	lsls	r3, r3, #16
 8004ab6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004aba:	431a      	orrs	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	061b      	lsls	r3, r3, #24
 8004ac4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004ac8:	4923      	ldr	r1, [pc, #140]	; (8004b58 <HAL_RCC_OscConfig+0x76c>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004ace:	4b22      	ldr	r3, [pc, #136]	; (8004b58 <HAL_RCC_OscConfig+0x76c>)
 8004ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad2:	4a21      	ldr	r2, [pc, #132]	; (8004b58 <HAL_RCC_OscConfig+0x76c>)
 8004ad4:	f023 0301 	bic.w	r3, r3, #1
 8004ad8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004ada:	4b1f      	ldr	r3, [pc, #124]	; (8004b58 <HAL_RCC_OscConfig+0x76c>)
 8004adc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ade:	4b21      	ldr	r3, [pc, #132]	; (8004b64 <HAL_RCC_OscConfig+0x778>)
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004ae6:	00d2      	lsls	r2, r2, #3
 8004ae8:	491b      	ldr	r1, [pc, #108]	; (8004b58 <HAL_RCC_OscConfig+0x76c>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004aee:	4b1a      	ldr	r3, [pc, #104]	; (8004b58 <HAL_RCC_OscConfig+0x76c>)
 8004af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af2:	f023 020c 	bic.w	r2, r3, #12
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afa:	4917      	ldr	r1, [pc, #92]	; (8004b58 <HAL_RCC_OscConfig+0x76c>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004b00:	4b15      	ldr	r3, [pc, #84]	; (8004b58 <HAL_RCC_OscConfig+0x76c>)
 8004b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b04:	f023 0202 	bic.w	r2, r3, #2
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b0c:	4912      	ldr	r1, [pc, #72]	; (8004b58 <HAL_RCC_OscConfig+0x76c>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004b12:	4b11      	ldr	r3, [pc, #68]	; (8004b58 <HAL_RCC_OscConfig+0x76c>)
 8004b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b16:	4a10      	ldr	r2, [pc, #64]	; (8004b58 <HAL_RCC_OscConfig+0x76c>)
 8004b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b1e:	4b0e      	ldr	r3, [pc, #56]	; (8004b58 <HAL_RCC_OscConfig+0x76c>)
 8004b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b22:	4a0d      	ldr	r2, [pc, #52]	; (8004b58 <HAL_RCC_OscConfig+0x76c>)
 8004b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b28:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004b2a:	4b0b      	ldr	r3, [pc, #44]	; (8004b58 <HAL_RCC_OscConfig+0x76c>)
 8004b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b2e:	4a0a      	ldr	r2, [pc, #40]	; (8004b58 <HAL_RCC_OscConfig+0x76c>)
 8004b30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b34:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004b36:	4b08      	ldr	r3, [pc, #32]	; (8004b58 <HAL_RCC_OscConfig+0x76c>)
 8004b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3a:	4a07      	ldr	r2, [pc, #28]	; (8004b58 <HAL_RCC_OscConfig+0x76c>)
 8004b3c:	f043 0301 	orr.w	r3, r3, #1
 8004b40:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b42:	4b05      	ldr	r3, [pc, #20]	; (8004b58 <HAL_RCC_OscConfig+0x76c>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a04      	ldr	r2, [pc, #16]	; (8004b58 <HAL_RCC_OscConfig+0x76c>)
 8004b48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b4e:	f7fd f82b 	bl	8001ba8 <HAL_GetTick>
 8004b52:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b54:	e011      	b.n	8004b7a <HAL_RCC_OscConfig+0x78e>
 8004b56:	bf00      	nop
 8004b58:	58024400 	.word	0x58024400
 8004b5c:	58024800 	.word	0x58024800
 8004b60:	fffffc0c 	.word	0xfffffc0c
 8004b64:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b68:	f7fd f81e 	bl	8001ba8 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e08a      	b.n	8004c90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b7a:	4b47      	ldr	r3, [pc, #284]	; (8004c98 <HAL_RCC_OscConfig+0x8ac>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d0f0      	beq.n	8004b68 <HAL_RCC_OscConfig+0x77c>
 8004b86:	e082      	b.n	8004c8e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b88:	4b43      	ldr	r3, [pc, #268]	; (8004c98 <HAL_RCC_OscConfig+0x8ac>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a42      	ldr	r2, [pc, #264]	; (8004c98 <HAL_RCC_OscConfig+0x8ac>)
 8004b8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b94:	f7fd f808 	bl	8001ba8 <HAL_GetTick>
 8004b98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b9a:	e008      	b.n	8004bae <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b9c:	f7fd f804 	bl	8001ba8 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e070      	b.n	8004c90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004bae:	4b3a      	ldr	r3, [pc, #232]	; (8004c98 <HAL_RCC_OscConfig+0x8ac>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1f0      	bne.n	8004b9c <HAL_RCC_OscConfig+0x7b0>
 8004bba:	e068      	b.n	8004c8e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004bbc:	4b36      	ldr	r3, [pc, #216]	; (8004c98 <HAL_RCC_OscConfig+0x8ac>)
 8004bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004bc2:	4b35      	ldr	r3, [pc, #212]	; (8004c98 <HAL_RCC_OscConfig+0x8ac>)
 8004bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d031      	beq.n	8004c34 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	f003 0203 	and.w	r2, r3, #3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d12a      	bne.n	8004c34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	091b      	lsrs	r3, r3, #4
 8004be2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d122      	bne.n	8004c34 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d11a      	bne.n	8004c34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	0a5b      	lsrs	r3, r3, #9
 8004c02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c0a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d111      	bne.n	8004c34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	0c1b      	lsrs	r3, r3, #16
 8004c14:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d108      	bne.n	8004c34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	0e1b      	lsrs	r3, r3, #24
 8004c26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c2e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d001      	beq.n	8004c38 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e02b      	b.n	8004c90 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004c38:	4b17      	ldr	r3, [pc, #92]	; (8004c98 <HAL_RCC_OscConfig+0x8ac>)
 8004c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c3c:	08db      	lsrs	r3, r3, #3
 8004c3e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c42:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c48:	693a      	ldr	r2, [r7, #16]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d01f      	beq.n	8004c8e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004c4e:	4b12      	ldr	r3, [pc, #72]	; (8004c98 <HAL_RCC_OscConfig+0x8ac>)
 8004c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c52:	4a11      	ldr	r2, [pc, #68]	; (8004c98 <HAL_RCC_OscConfig+0x8ac>)
 8004c54:	f023 0301 	bic.w	r3, r3, #1
 8004c58:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c5a:	f7fc ffa5 	bl	8001ba8 <HAL_GetTick>
 8004c5e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004c60:	bf00      	nop
 8004c62:	f7fc ffa1 	bl	8001ba8 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d0f9      	beq.n	8004c62 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004c6e:	4b0a      	ldr	r3, [pc, #40]	; (8004c98 <HAL_RCC_OscConfig+0x8ac>)
 8004c70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c72:	4b0a      	ldr	r3, [pc, #40]	; (8004c9c <HAL_RCC_OscConfig+0x8b0>)
 8004c74:	4013      	ands	r3, r2
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004c7a:	00d2      	lsls	r2, r2, #3
 8004c7c:	4906      	ldr	r1, [pc, #24]	; (8004c98 <HAL_RCC_OscConfig+0x8ac>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004c82:	4b05      	ldr	r3, [pc, #20]	; (8004c98 <HAL_RCC_OscConfig+0x8ac>)
 8004c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c86:	4a04      	ldr	r2, [pc, #16]	; (8004c98 <HAL_RCC_OscConfig+0x8ac>)
 8004c88:	f043 0301 	orr.w	r3, r3, #1
 8004c8c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3730      	adds	r7, #48	; 0x30
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	58024400 	.word	0x58024400
 8004c9c:	ffff0007 	.word	0xffff0007

08004ca0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b086      	sub	sp, #24
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d101      	bne.n	8004cb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e19c      	b.n	8004fee <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cb4:	4b8a      	ldr	r3, [pc, #552]	; (8004ee0 <HAL_RCC_ClockConfig+0x240>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 030f 	and.w	r3, r3, #15
 8004cbc:	683a      	ldr	r2, [r7, #0]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d910      	bls.n	8004ce4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cc2:	4b87      	ldr	r3, [pc, #540]	; (8004ee0 <HAL_RCC_ClockConfig+0x240>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f023 020f 	bic.w	r2, r3, #15
 8004cca:	4985      	ldr	r1, [pc, #532]	; (8004ee0 <HAL_RCC_ClockConfig+0x240>)
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cd2:	4b83      	ldr	r3, [pc, #524]	; (8004ee0 <HAL_RCC_ClockConfig+0x240>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 030f 	and.w	r3, r3, #15
 8004cda:	683a      	ldr	r2, [r7, #0]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d001      	beq.n	8004ce4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e184      	b.n	8004fee <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0304 	and.w	r3, r3, #4
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d010      	beq.n	8004d12 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	691a      	ldr	r2, [r3, #16]
 8004cf4:	4b7b      	ldr	r3, [pc, #492]	; (8004ee4 <HAL_RCC_ClockConfig+0x244>)
 8004cf6:	699b      	ldr	r3, [r3, #24]
 8004cf8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d908      	bls.n	8004d12 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004d00:	4b78      	ldr	r3, [pc, #480]	; (8004ee4 <HAL_RCC_ClockConfig+0x244>)
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	4975      	ldr	r1, [pc, #468]	; (8004ee4 <HAL_RCC_ClockConfig+0x244>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0308 	and.w	r3, r3, #8
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d010      	beq.n	8004d40 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	695a      	ldr	r2, [r3, #20]
 8004d22:	4b70      	ldr	r3, [pc, #448]	; (8004ee4 <HAL_RCC_ClockConfig+0x244>)
 8004d24:	69db      	ldr	r3, [r3, #28]
 8004d26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d908      	bls.n	8004d40 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004d2e:	4b6d      	ldr	r3, [pc, #436]	; (8004ee4 <HAL_RCC_ClockConfig+0x244>)
 8004d30:	69db      	ldr	r3, [r3, #28]
 8004d32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	496a      	ldr	r1, [pc, #424]	; (8004ee4 <HAL_RCC_ClockConfig+0x244>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0310 	and.w	r3, r3, #16
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d010      	beq.n	8004d6e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	699a      	ldr	r2, [r3, #24]
 8004d50:	4b64      	ldr	r3, [pc, #400]	; (8004ee4 <HAL_RCC_ClockConfig+0x244>)
 8004d52:	69db      	ldr	r3, [r3, #28]
 8004d54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d908      	bls.n	8004d6e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004d5c:	4b61      	ldr	r3, [pc, #388]	; (8004ee4 <HAL_RCC_ClockConfig+0x244>)
 8004d5e:	69db      	ldr	r3, [r3, #28]
 8004d60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	699b      	ldr	r3, [r3, #24]
 8004d68:	495e      	ldr	r1, [pc, #376]	; (8004ee4 <HAL_RCC_ClockConfig+0x244>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0320 	and.w	r3, r3, #32
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d010      	beq.n	8004d9c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	69da      	ldr	r2, [r3, #28]
 8004d7e:	4b59      	ldr	r3, [pc, #356]	; (8004ee4 <HAL_RCC_ClockConfig+0x244>)
 8004d80:	6a1b      	ldr	r3, [r3, #32]
 8004d82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d908      	bls.n	8004d9c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004d8a:	4b56      	ldr	r3, [pc, #344]	; (8004ee4 <HAL_RCC_ClockConfig+0x244>)
 8004d8c:	6a1b      	ldr	r3, [r3, #32]
 8004d8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	69db      	ldr	r3, [r3, #28]
 8004d96:	4953      	ldr	r1, [pc, #332]	; (8004ee4 <HAL_RCC_ClockConfig+0x244>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0302 	and.w	r3, r3, #2
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d010      	beq.n	8004dca <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	68da      	ldr	r2, [r3, #12]
 8004dac:	4b4d      	ldr	r3, [pc, #308]	; (8004ee4 <HAL_RCC_ClockConfig+0x244>)
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	f003 030f 	and.w	r3, r3, #15
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d908      	bls.n	8004dca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004db8:	4b4a      	ldr	r3, [pc, #296]	; (8004ee4 <HAL_RCC_ClockConfig+0x244>)
 8004dba:	699b      	ldr	r3, [r3, #24]
 8004dbc:	f023 020f 	bic.w	r2, r3, #15
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	4947      	ldr	r1, [pc, #284]	; (8004ee4 <HAL_RCC_ClockConfig+0x244>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d055      	beq.n	8004e82 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004dd6:	4b43      	ldr	r3, [pc, #268]	; (8004ee4 <HAL_RCC_ClockConfig+0x244>)
 8004dd8:	699b      	ldr	r3, [r3, #24]
 8004dda:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	4940      	ldr	r1, [pc, #256]	; (8004ee4 <HAL_RCC_ClockConfig+0x244>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d107      	bne.n	8004e00 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004df0:	4b3c      	ldr	r3, [pc, #240]	; (8004ee4 <HAL_RCC_ClockConfig+0x244>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d121      	bne.n	8004e40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e0f6      	b.n	8004fee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	2b03      	cmp	r3, #3
 8004e06:	d107      	bne.n	8004e18 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e08:	4b36      	ldr	r3, [pc, #216]	; (8004ee4 <HAL_RCC_ClockConfig+0x244>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d115      	bne.n	8004e40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e0ea      	b.n	8004fee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d107      	bne.n	8004e30 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e20:	4b30      	ldr	r3, [pc, #192]	; (8004ee4 <HAL_RCC_ClockConfig+0x244>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d109      	bne.n	8004e40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e0de      	b.n	8004fee <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e30:	4b2c      	ldr	r3, [pc, #176]	; (8004ee4 <HAL_RCC_ClockConfig+0x244>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0304 	and.w	r3, r3, #4
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d101      	bne.n	8004e40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e0d6      	b.n	8004fee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e40:	4b28      	ldr	r3, [pc, #160]	; (8004ee4 <HAL_RCC_ClockConfig+0x244>)
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	f023 0207 	bic.w	r2, r3, #7
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	4925      	ldr	r1, [pc, #148]	; (8004ee4 <HAL_RCC_ClockConfig+0x244>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e52:	f7fc fea9 	bl	8001ba8 <HAL_GetTick>
 8004e56:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e58:	e00a      	b.n	8004e70 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e5a:	f7fc fea5 	bl	8001ba8 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d901      	bls.n	8004e70 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e0be      	b.n	8004fee <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e70:	4b1c      	ldr	r3, [pc, #112]	; (8004ee4 <HAL_RCC_ClockConfig+0x244>)
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	00db      	lsls	r3, r3, #3
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d1eb      	bne.n	8004e5a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0302 	and.w	r3, r3, #2
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d010      	beq.n	8004eb0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68da      	ldr	r2, [r3, #12]
 8004e92:	4b14      	ldr	r3, [pc, #80]	; (8004ee4 <HAL_RCC_ClockConfig+0x244>)
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	f003 030f 	and.w	r3, r3, #15
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d208      	bcs.n	8004eb0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e9e:	4b11      	ldr	r3, [pc, #68]	; (8004ee4 <HAL_RCC_ClockConfig+0x244>)
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	f023 020f 	bic.w	r2, r3, #15
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	490e      	ldr	r1, [pc, #56]	; (8004ee4 <HAL_RCC_ClockConfig+0x244>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004eb0:	4b0b      	ldr	r3, [pc, #44]	; (8004ee0 <HAL_RCC_ClockConfig+0x240>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 030f 	and.w	r3, r3, #15
 8004eb8:	683a      	ldr	r2, [r7, #0]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d214      	bcs.n	8004ee8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ebe:	4b08      	ldr	r3, [pc, #32]	; (8004ee0 <HAL_RCC_ClockConfig+0x240>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f023 020f 	bic.w	r2, r3, #15
 8004ec6:	4906      	ldr	r1, [pc, #24]	; (8004ee0 <HAL_RCC_ClockConfig+0x240>)
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ece:	4b04      	ldr	r3, [pc, #16]	; (8004ee0 <HAL_RCC_ClockConfig+0x240>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 030f 	and.w	r3, r3, #15
 8004ed6:	683a      	ldr	r2, [r7, #0]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d005      	beq.n	8004ee8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e086      	b.n	8004fee <HAL_RCC_ClockConfig+0x34e>
 8004ee0:	52002000 	.word	0x52002000
 8004ee4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0304 	and.w	r3, r3, #4
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d010      	beq.n	8004f16 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	691a      	ldr	r2, [r3, #16]
 8004ef8:	4b3f      	ldr	r3, [pc, #252]	; (8004ff8 <HAL_RCC_ClockConfig+0x358>)
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d208      	bcs.n	8004f16 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004f04:	4b3c      	ldr	r3, [pc, #240]	; (8004ff8 <HAL_RCC_ClockConfig+0x358>)
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	4939      	ldr	r1, [pc, #228]	; (8004ff8 <HAL_RCC_ClockConfig+0x358>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0308 	and.w	r3, r3, #8
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d010      	beq.n	8004f44 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	695a      	ldr	r2, [r3, #20]
 8004f26:	4b34      	ldr	r3, [pc, #208]	; (8004ff8 <HAL_RCC_ClockConfig+0x358>)
 8004f28:	69db      	ldr	r3, [r3, #28]
 8004f2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d208      	bcs.n	8004f44 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004f32:	4b31      	ldr	r3, [pc, #196]	; (8004ff8 <HAL_RCC_ClockConfig+0x358>)
 8004f34:	69db      	ldr	r3, [r3, #28]
 8004f36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	492e      	ldr	r1, [pc, #184]	; (8004ff8 <HAL_RCC_ClockConfig+0x358>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0310 	and.w	r3, r3, #16
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d010      	beq.n	8004f72 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	699a      	ldr	r2, [r3, #24]
 8004f54:	4b28      	ldr	r3, [pc, #160]	; (8004ff8 <HAL_RCC_ClockConfig+0x358>)
 8004f56:	69db      	ldr	r3, [r3, #28]
 8004f58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d208      	bcs.n	8004f72 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004f60:	4b25      	ldr	r3, [pc, #148]	; (8004ff8 <HAL_RCC_ClockConfig+0x358>)
 8004f62:	69db      	ldr	r3, [r3, #28]
 8004f64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	699b      	ldr	r3, [r3, #24]
 8004f6c:	4922      	ldr	r1, [pc, #136]	; (8004ff8 <HAL_RCC_ClockConfig+0x358>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0320 	and.w	r3, r3, #32
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d010      	beq.n	8004fa0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	69da      	ldr	r2, [r3, #28]
 8004f82:	4b1d      	ldr	r3, [pc, #116]	; (8004ff8 <HAL_RCC_ClockConfig+0x358>)
 8004f84:	6a1b      	ldr	r3, [r3, #32]
 8004f86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d208      	bcs.n	8004fa0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004f8e:	4b1a      	ldr	r3, [pc, #104]	; (8004ff8 <HAL_RCC_ClockConfig+0x358>)
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	69db      	ldr	r3, [r3, #28]
 8004f9a:	4917      	ldr	r1, [pc, #92]	; (8004ff8 <HAL_RCC_ClockConfig+0x358>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004fa0:	f000 f834 	bl	800500c <HAL_RCC_GetSysClockFreq>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	4b14      	ldr	r3, [pc, #80]	; (8004ff8 <HAL_RCC_ClockConfig+0x358>)
 8004fa8:	699b      	ldr	r3, [r3, #24]
 8004faa:	0a1b      	lsrs	r3, r3, #8
 8004fac:	f003 030f 	and.w	r3, r3, #15
 8004fb0:	4912      	ldr	r1, [pc, #72]	; (8004ffc <HAL_RCC_ClockConfig+0x35c>)
 8004fb2:	5ccb      	ldrb	r3, [r1, r3]
 8004fb4:	f003 031f 	and.w	r3, r3, #31
 8004fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8004fbc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004fbe:	4b0e      	ldr	r3, [pc, #56]	; (8004ff8 <HAL_RCC_ClockConfig+0x358>)
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	f003 030f 	and.w	r3, r3, #15
 8004fc6:	4a0d      	ldr	r2, [pc, #52]	; (8004ffc <HAL_RCC_ClockConfig+0x35c>)
 8004fc8:	5cd3      	ldrb	r3, [r2, r3]
 8004fca:	f003 031f 	and.w	r3, r3, #31
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8004fd4:	4a0a      	ldr	r2, [pc, #40]	; (8005000 <HAL_RCC_ClockConfig+0x360>)
 8004fd6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004fd8:	4a0a      	ldr	r2, [pc, #40]	; (8005004 <HAL_RCC_ClockConfig+0x364>)
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004fde:	4b0a      	ldr	r3, [pc, #40]	; (8005008 <HAL_RCC_ClockConfig+0x368>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7fc fd96 	bl	8001b14 <HAL_InitTick>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3718      	adds	r7, #24
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	58024400 	.word	0x58024400
 8004ffc:	0800dcac 	.word	0x0800dcac
 8005000:	24000004 	.word	0x24000004
 8005004:	24000000 	.word	0x24000000
 8005008:	24000008 	.word	0x24000008

0800500c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800500c:	b480      	push	{r7}
 800500e:	b089      	sub	sp, #36	; 0x24
 8005010:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005012:	4bb3      	ldr	r3, [pc, #716]	; (80052e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800501a:	2b18      	cmp	r3, #24
 800501c:	f200 8155 	bhi.w	80052ca <HAL_RCC_GetSysClockFreq+0x2be>
 8005020:	a201      	add	r2, pc, #4	; (adr r2, 8005028 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005026:	bf00      	nop
 8005028:	0800508d 	.word	0x0800508d
 800502c:	080052cb 	.word	0x080052cb
 8005030:	080052cb 	.word	0x080052cb
 8005034:	080052cb 	.word	0x080052cb
 8005038:	080052cb 	.word	0x080052cb
 800503c:	080052cb 	.word	0x080052cb
 8005040:	080052cb 	.word	0x080052cb
 8005044:	080052cb 	.word	0x080052cb
 8005048:	080050b3 	.word	0x080050b3
 800504c:	080052cb 	.word	0x080052cb
 8005050:	080052cb 	.word	0x080052cb
 8005054:	080052cb 	.word	0x080052cb
 8005058:	080052cb 	.word	0x080052cb
 800505c:	080052cb 	.word	0x080052cb
 8005060:	080052cb 	.word	0x080052cb
 8005064:	080052cb 	.word	0x080052cb
 8005068:	080050b9 	.word	0x080050b9
 800506c:	080052cb 	.word	0x080052cb
 8005070:	080052cb 	.word	0x080052cb
 8005074:	080052cb 	.word	0x080052cb
 8005078:	080052cb 	.word	0x080052cb
 800507c:	080052cb 	.word	0x080052cb
 8005080:	080052cb 	.word	0x080052cb
 8005084:	080052cb 	.word	0x080052cb
 8005088:	080050bf 	.word	0x080050bf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800508c:	4b94      	ldr	r3, [pc, #592]	; (80052e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0320 	and.w	r3, r3, #32
 8005094:	2b00      	cmp	r3, #0
 8005096:	d009      	beq.n	80050ac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005098:	4b91      	ldr	r3, [pc, #580]	; (80052e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	08db      	lsrs	r3, r3, #3
 800509e:	f003 0303 	and.w	r3, r3, #3
 80050a2:	4a90      	ldr	r2, [pc, #576]	; (80052e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80050a4:	fa22 f303 	lsr.w	r3, r2, r3
 80050a8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80050aa:	e111      	b.n	80052d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80050ac:	4b8d      	ldr	r3, [pc, #564]	; (80052e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80050ae:	61bb      	str	r3, [r7, #24]
      break;
 80050b0:	e10e      	b.n	80052d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80050b2:	4b8d      	ldr	r3, [pc, #564]	; (80052e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80050b4:	61bb      	str	r3, [r7, #24]
      break;
 80050b6:	e10b      	b.n	80052d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80050b8:	4b8c      	ldr	r3, [pc, #560]	; (80052ec <HAL_RCC_GetSysClockFreq+0x2e0>)
 80050ba:	61bb      	str	r3, [r7, #24]
      break;
 80050bc:	e108      	b.n	80052d0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80050be:	4b88      	ldr	r3, [pc, #544]	; (80052e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c2:	f003 0303 	and.w	r3, r3, #3
 80050c6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80050c8:	4b85      	ldr	r3, [pc, #532]	; (80052e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050cc:	091b      	lsrs	r3, r3, #4
 80050ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050d2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80050d4:	4b82      	ldr	r3, [pc, #520]	; (80052e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d8:	f003 0301 	and.w	r3, r3, #1
 80050dc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80050de:	4b80      	ldr	r3, [pc, #512]	; (80052e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050e2:	08db      	lsrs	r3, r3, #3
 80050e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	fb02 f303 	mul.w	r3, r2, r3
 80050ee:	ee07 3a90 	vmov	s15, r3
 80050f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050f6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f000 80e1 	beq.w	80052c4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	2b02      	cmp	r3, #2
 8005106:	f000 8083 	beq.w	8005210 <HAL_RCC_GetSysClockFreq+0x204>
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	2b02      	cmp	r3, #2
 800510e:	f200 80a1 	bhi.w	8005254 <HAL_RCC_GetSysClockFreq+0x248>
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d003      	beq.n	8005120 <HAL_RCC_GetSysClockFreq+0x114>
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	2b01      	cmp	r3, #1
 800511c:	d056      	beq.n	80051cc <HAL_RCC_GetSysClockFreq+0x1c0>
 800511e:	e099      	b.n	8005254 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005120:	4b6f      	ldr	r3, [pc, #444]	; (80052e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0320 	and.w	r3, r3, #32
 8005128:	2b00      	cmp	r3, #0
 800512a:	d02d      	beq.n	8005188 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800512c:	4b6c      	ldr	r3, [pc, #432]	; (80052e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	08db      	lsrs	r3, r3, #3
 8005132:	f003 0303 	and.w	r3, r3, #3
 8005136:	4a6b      	ldr	r2, [pc, #428]	; (80052e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005138:	fa22 f303 	lsr.w	r3, r2, r3
 800513c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	ee07 3a90 	vmov	s15, r3
 8005144:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	ee07 3a90 	vmov	s15, r3
 800514e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005156:	4b62      	ldr	r3, [pc, #392]	; (80052e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800515e:	ee07 3a90 	vmov	s15, r3
 8005162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005166:	ed97 6a02 	vldr	s12, [r7, #8]
 800516a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80052f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800516e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005176:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800517a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800517e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005182:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005186:	e087      	b.n	8005298 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	ee07 3a90 	vmov	s15, r3
 800518e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005192:	eddf 6a58 	vldr	s13, [pc, #352]	; 80052f4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800519a:	4b51      	ldr	r3, [pc, #324]	; (80052e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800519c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051a2:	ee07 3a90 	vmov	s15, r3
 80051a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80051ae:	eddf 5a50 	vldr	s11, [pc, #320]	; 80052f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80051b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80051ca:	e065      	b.n	8005298 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	ee07 3a90 	vmov	s15, r3
 80051d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051d6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80052f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80051da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051de:	4b40      	ldr	r3, [pc, #256]	; (80052e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051e6:	ee07 3a90 	vmov	s15, r3
 80051ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80051f2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80052f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80051f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800520a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800520e:	e043      	b.n	8005298 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	ee07 3a90 	vmov	s15, r3
 8005216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800521a:	eddf 6a38 	vldr	s13, [pc, #224]	; 80052fc <HAL_RCC_GetSysClockFreq+0x2f0>
 800521e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005222:	4b2f      	ldr	r3, [pc, #188]	; (80052e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800522a:	ee07 3a90 	vmov	s15, r3
 800522e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005232:	ed97 6a02 	vldr	s12, [r7, #8]
 8005236:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80052f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800523a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800523e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005242:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800524a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800524e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005252:	e021      	b.n	8005298 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	ee07 3a90 	vmov	s15, r3
 800525a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800525e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80052f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005266:	4b1e      	ldr	r3, [pc, #120]	; (80052e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800526e:	ee07 3a90 	vmov	s15, r3
 8005272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005276:	ed97 6a02 	vldr	s12, [r7, #8]
 800527a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80052f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800527e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005286:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800528a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800528e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005292:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005296:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005298:	4b11      	ldr	r3, [pc, #68]	; (80052e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800529a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529c:	0a5b      	lsrs	r3, r3, #9
 800529e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052a2:	3301      	adds	r3, #1
 80052a4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	ee07 3a90 	vmov	s15, r3
 80052ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80052b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80052b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052bc:	ee17 3a90 	vmov	r3, s15
 80052c0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80052c2:	e005      	b.n	80052d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80052c4:	2300      	movs	r3, #0
 80052c6:	61bb      	str	r3, [r7, #24]
      break;
 80052c8:	e002      	b.n	80052d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80052ca:	4b07      	ldr	r3, [pc, #28]	; (80052e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80052cc:	61bb      	str	r3, [r7, #24]
      break;
 80052ce:	bf00      	nop
  }

  return sysclockfreq;
 80052d0:	69bb      	ldr	r3, [r7, #24]
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3724      	adds	r7, #36	; 0x24
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	58024400 	.word	0x58024400
 80052e4:	03d09000 	.word	0x03d09000
 80052e8:	003d0900 	.word	0x003d0900
 80052ec:	007a1200 	.word	0x007a1200
 80052f0:	46000000 	.word	0x46000000
 80052f4:	4c742400 	.word	0x4c742400
 80052f8:	4a742400 	.word	0x4a742400
 80052fc:	4af42400 	.word	0x4af42400

08005300 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005306:	f7ff fe81 	bl	800500c <HAL_RCC_GetSysClockFreq>
 800530a:	4602      	mov	r2, r0
 800530c:	4b10      	ldr	r3, [pc, #64]	; (8005350 <HAL_RCC_GetHCLKFreq+0x50>)
 800530e:	699b      	ldr	r3, [r3, #24]
 8005310:	0a1b      	lsrs	r3, r3, #8
 8005312:	f003 030f 	and.w	r3, r3, #15
 8005316:	490f      	ldr	r1, [pc, #60]	; (8005354 <HAL_RCC_GetHCLKFreq+0x54>)
 8005318:	5ccb      	ldrb	r3, [r1, r3]
 800531a:	f003 031f 	and.w	r3, r3, #31
 800531e:	fa22 f303 	lsr.w	r3, r2, r3
 8005322:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005324:	4b0a      	ldr	r3, [pc, #40]	; (8005350 <HAL_RCC_GetHCLKFreq+0x50>)
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	f003 030f 	and.w	r3, r3, #15
 800532c:	4a09      	ldr	r2, [pc, #36]	; (8005354 <HAL_RCC_GetHCLKFreq+0x54>)
 800532e:	5cd3      	ldrb	r3, [r2, r3]
 8005330:	f003 031f 	and.w	r3, r3, #31
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	fa22 f303 	lsr.w	r3, r2, r3
 800533a:	4a07      	ldr	r2, [pc, #28]	; (8005358 <HAL_RCC_GetHCLKFreq+0x58>)
 800533c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800533e:	4a07      	ldr	r2, [pc, #28]	; (800535c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005344:	4b04      	ldr	r3, [pc, #16]	; (8005358 <HAL_RCC_GetHCLKFreq+0x58>)
 8005346:	681b      	ldr	r3, [r3, #0]
}
 8005348:	4618      	mov	r0, r3
 800534a:	3708      	adds	r7, #8
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}
 8005350:	58024400 	.word	0x58024400
 8005354:	0800dcac 	.word	0x0800dcac
 8005358:	24000004 	.word	0x24000004
 800535c:	24000000 	.word	0x24000000

08005360 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005364:	f7ff ffcc 	bl	8005300 <HAL_RCC_GetHCLKFreq>
 8005368:	4602      	mov	r2, r0
 800536a:	4b06      	ldr	r3, [pc, #24]	; (8005384 <HAL_RCC_GetPCLK1Freq+0x24>)
 800536c:	69db      	ldr	r3, [r3, #28]
 800536e:	091b      	lsrs	r3, r3, #4
 8005370:	f003 0307 	and.w	r3, r3, #7
 8005374:	4904      	ldr	r1, [pc, #16]	; (8005388 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005376:	5ccb      	ldrb	r3, [r1, r3]
 8005378:	f003 031f 	and.w	r3, r3, #31
 800537c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005380:	4618      	mov	r0, r3
 8005382:	bd80      	pop	{r7, pc}
 8005384:	58024400 	.word	0x58024400
 8005388:	0800dcac 	.word	0x0800dcac

0800538c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005390:	f7ff ffb6 	bl	8005300 <HAL_RCC_GetHCLKFreq>
 8005394:	4602      	mov	r2, r0
 8005396:	4b06      	ldr	r3, [pc, #24]	; (80053b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005398:	69db      	ldr	r3, [r3, #28]
 800539a:	0a1b      	lsrs	r3, r3, #8
 800539c:	f003 0307 	and.w	r3, r3, #7
 80053a0:	4904      	ldr	r1, [pc, #16]	; (80053b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80053a2:	5ccb      	ldrb	r3, [r1, r3]
 80053a4:	f003 031f 	and.w	r3, r3, #31
 80053a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	58024400 	.word	0x58024400
 80053b4:	0800dcac 	.word	0x0800dcac

080053b8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053bc:	b0ca      	sub	sp, #296	; 0x128
 80053be:	af00      	add	r7, sp, #0
 80053c0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80053c4:	2300      	movs	r3, #0
 80053c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80053ca:	2300      	movs	r3, #0
 80053cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80053d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80053dc:	2500      	movs	r5, #0
 80053de:	ea54 0305 	orrs.w	r3, r4, r5
 80053e2:	d049      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80053e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80053ee:	d02f      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80053f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80053f4:	d828      	bhi.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80053f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053fa:	d01a      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80053fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005400:	d822      	bhi.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005402:	2b00      	cmp	r3, #0
 8005404:	d003      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005406:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800540a:	d007      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800540c:	e01c      	b.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800540e:	4bb8      	ldr	r3, [pc, #736]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005412:	4ab7      	ldr	r2, [pc, #732]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005418:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800541a:	e01a      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800541c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005420:	3308      	adds	r3, #8
 8005422:	2102      	movs	r1, #2
 8005424:	4618      	mov	r0, r3
 8005426:	f002 fb61 	bl	8007aec <RCCEx_PLL2_Config>
 800542a:	4603      	mov	r3, r0
 800542c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005430:	e00f      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005432:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005436:	3328      	adds	r3, #40	; 0x28
 8005438:	2102      	movs	r1, #2
 800543a:	4618      	mov	r0, r3
 800543c:	f002 fc08 	bl	8007c50 <RCCEx_PLL3_Config>
 8005440:	4603      	mov	r3, r0
 8005442:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005446:	e004      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800544e:	e000      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005450:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005452:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005456:	2b00      	cmp	r3, #0
 8005458:	d10a      	bne.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800545a:	4ba5      	ldr	r3, [pc, #660]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800545c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800545e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005462:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005466:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005468:	4aa1      	ldr	r2, [pc, #644]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800546a:	430b      	orrs	r3, r1
 800546c:	6513      	str	r3, [r2, #80]	; 0x50
 800546e:	e003      	b.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005470:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005474:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005478:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800547c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005480:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005484:	f04f 0900 	mov.w	r9, #0
 8005488:	ea58 0309 	orrs.w	r3, r8, r9
 800548c:	d047      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800548e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005494:	2b04      	cmp	r3, #4
 8005496:	d82a      	bhi.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005498:	a201      	add	r2, pc, #4	; (adr r2, 80054a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800549a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800549e:	bf00      	nop
 80054a0:	080054b5 	.word	0x080054b5
 80054a4:	080054c3 	.word	0x080054c3
 80054a8:	080054d9 	.word	0x080054d9
 80054ac:	080054f7 	.word	0x080054f7
 80054b0:	080054f7 	.word	0x080054f7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054b4:	4b8e      	ldr	r3, [pc, #568]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b8:	4a8d      	ldr	r2, [pc, #564]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80054c0:	e01a      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054c6:	3308      	adds	r3, #8
 80054c8:	2100      	movs	r1, #0
 80054ca:	4618      	mov	r0, r3
 80054cc:	f002 fb0e 	bl	8007aec <RCCEx_PLL2_Config>
 80054d0:	4603      	mov	r3, r0
 80054d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80054d6:	e00f      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80054d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054dc:	3328      	adds	r3, #40	; 0x28
 80054de:	2100      	movs	r1, #0
 80054e0:	4618      	mov	r0, r3
 80054e2:	f002 fbb5 	bl	8007c50 <RCCEx_PLL3_Config>
 80054e6:	4603      	mov	r3, r0
 80054e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80054ec:	e004      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80054f4:	e000      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80054f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d10a      	bne.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005500:	4b7b      	ldr	r3, [pc, #492]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005504:	f023 0107 	bic.w	r1, r3, #7
 8005508:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800550c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800550e:	4a78      	ldr	r2, [pc, #480]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005510:	430b      	orrs	r3, r1
 8005512:	6513      	str	r3, [r2, #80]	; 0x50
 8005514:	e003      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005516:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800551a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800551e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005526:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800552a:	f04f 0b00 	mov.w	fp, #0
 800552e:	ea5a 030b 	orrs.w	r3, sl, fp
 8005532:	d04c      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005534:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800553a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800553e:	d030      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005540:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005544:	d829      	bhi.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005546:	2bc0      	cmp	r3, #192	; 0xc0
 8005548:	d02d      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800554a:	2bc0      	cmp	r3, #192	; 0xc0
 800554c:	d825      	bhi.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800554e:	2b80      	cmp	r3, #128	; 0x80
 8005550:	d018      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005552:	2b80      	cmp	r3, #128	; 0x80
 8005554:	d821      	bhi.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005556:	2b00      	cmp	r3, #0
 8005558:	d002      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800555a:	2b40      	cmp	r3, #64	; 0x40
 800555c:	d007      	beq.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800555e:	e01c      	b.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005560:	4b63      	ldr	r3, [pc, #396]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005564:	4a62      	ldr	r2, [pc, #392]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800556a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800556c:	e01c      	b.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800556e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005572:	3308      	adds	r3, #8
 8005574:	2100      	movs	r1, #0
 8005576:	4618      	mov	r0, r3
 8005578:	f002 fab8 	bl	8007aec <RCCEx_PLL2_Config>
 800557c:	4603      	mov	r3, r0
 800557e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005582:	e011      	b.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005584:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005588:	3328      	adds	r3, #40	; 0x28
 800558a:	2100      	movs	r1, #0
 800558c:	4618      	mov	r0, r3
 800558e:	f002 fb5f 	bl	8007c50 <RCCEx_PLL3_Config>
 8005592:	4603      	mov	r3, r0
 8005594:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005598:	e006      	b.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80055a0:	e002      	b.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80055a2:	bf00      	nop
 80055a4:	e000      	b.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80055a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d10a      	bne.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80055b0:	4b4f      	ldr	r3, [pc, #316]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055b4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80055b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055be:	4a4c      	ldr	r2, [pc, #304]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055c0:	430b      	orrs	r3, r1
 80055c2:	6513      	str	r3, [r2, #80]	; 0x50
 80055c4:	e003      	b.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80055ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80055da:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80055de:	2300      	movs	r3, #0
 80055e0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80055e4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80055e8:	460b      	mov	r3, r1
 80055ea:	4313      	orrs	r3, r2
 80055ec:	d053      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80055ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80055f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055fa:	d035      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80055fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005600:	d82e      	bhi.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005602:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005606:	d031      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005608:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800560c:	d828      	bhi.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800560e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005612:	d01a      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005614:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005618:	d822      	bhi.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800561a:	2b00      	cmp	r3, #0
 800561c:	d003      	beq.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800561e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005622:	d007      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005624:	e01c      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005626:	4b32      	ldr	r3, [pc, #200]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562a:	4a31      	ldr	r2, [pc, #196]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800562c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005630:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005632:	e01c      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005634:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005638:	3308      	adds	r3, #8
 800563a:	2100      	movs	r1, #0
 800563c:	4618      	mov	r0, r3
 800563e:	f002 fa55 	bl	8007aec <RCCEx_PLL2_Config>
 8005642:	4603      	mov	r3, r0
 8005644:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005648:	e011      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800564a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800564e:	3328      	adds	r3, #40	; 0x28
 8005650:	2100      	movs	r1, #0
 8005652:	4618      	mov	r0, r3
 8005654:	f002 fafc 	bl	8007c50 <RCCEx_PLL3_Config>
 8005658:	4603      	mov	r3, r0
 800565a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800565e:	e006      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005666:	e002      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005668:	bf00      	nop
 800566a:	e000      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800566c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800566e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005672:	2b00      	cmp	r3, #0
 8005674:	d10b      	bne.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005676:	4b1e      	ldr	r3, [pc, #120]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800567a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800567e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005682:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005686:	4a1a      	ldr	r2, [pc, #104]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005688:	430b      	orrs	r3, r1
 800568a:	6593      	str	r3, [r2, #88]	; 0x58
 800568c:	e003      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800568e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005692:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005696:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800569a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800569e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80056a2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80056a6:	2300      	movs	r3, #0
 80056a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80056ac:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80056b0:	460b      	mov	r3, r1
 80056b2:	4313      	orrs	r3, r2
 80056b4:	d056      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80056b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80056be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80056c2:	d038      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80056c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80056c8:	d831      	bhi.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80056ca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80056ce:	d034      	beq.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80056d0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80056d4:	d82b      	bhi.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80056d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056da:	d01d      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80056dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056e0:	d825      	bhi.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d006      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80056e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80056ea:	d00a      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80056ec:	e01f      	b.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80056ee:	bf00      	nop
 80056f0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056f4:	4ba2      	ldr	r3, [pc, #648]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f8:	4aa1      	ldr	r2, [pc, #644]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005700:	e01c      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005702:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005706:	3308      	adds	r3, #8
 8005708:	2100      	movs	r1, #0
 800570a:	4618      	mov	r0, r3
 800570c:	f002 f9ee 	bl	8007aec <RCCEx_PLL2_Config>
 8005710:	4603      	mov	r3, r0
 8005712:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005716:	e011      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005718:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800571c:	3328      	adds	r3, #40	; 0x28
 800571e:	2100      	movs	r1, #0
 8005720:	4618      	mov	r0, r3
 8005722:	f002 fa95 	bl	8007c50 <RCCEx_PLL3_Config>
 8005726:	4603      	mov	r3, r0
 8005728:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800572c:	e006      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005734:	e002      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005736:	bf00      	nop
 8005738:	e000      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800573a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800573c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005740:	2b00      	cmp	r3, #0
 8005742:	d10b      	bne.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005744:	4b8e      	ldr	r3, [pc, #568]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005748:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800574c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005750:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005754:	4a8a      	ldr	r2, [pc, #552]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005756:	430b      	orrs	r3, r1
 8005758:	6593      	str	r3, [r2, #88]	; 0x58
 800575a:	e003      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800575c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005760:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005764:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005770:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005774:	2300      	movs	r3, #0
 8005776:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800577a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800577e:	460b      	mov	r3, r1
 8005780:	4313      	orrs	r3, r2
 8005782:	d03a      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005784:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800578a:	2b30      	cmp	r3, #48	; 0x30
 800578c:	d01f      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x416>
 800578e:	2b30      	cmp	r3, #48	; 0x30
 8005790:	d819      	bhi.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005792:	2b20      	cmp	r3, #32
 8005794:	d00c      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005796:	2b20      	cmp	r3, #32
 8005798:	d815      	bhi.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800579a:	2b00      	cmp	r3, #0
 800579c:	d019      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800579e:	2b10      	cmp	r3, #16
 80057a0:	d111      	bne.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057a2:	4b77      	ldr	r3, [pc, #476]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a6:	4a76      	ldr	r2, [pc, #472]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80057ae:	e011      	b.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80057b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057b4:	3308      	adds	r3, #8
 80057b6:	2102      	movs	r1, #2
 80057b8:	4618      	mov	r0, r3
 80057ba:	f002 f997 	bl	8007aec <RCCEx_PLL2_Config>
 80057be:	4603      	mov	r3, r0
 80057c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80057c4:	e006      	b.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80057cc:	e002      	b.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80057ce:	bf00      	nop
 80057d0:	e000      	b.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80057d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d10a      	bne.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80057dc:	4b68      	ldr	r3, [pc, #416]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057e0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80057e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057ea:	4a65      	ldr	r2, [pc, #404]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057ec:	430b      	orrs	r3, r1
 80057ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80057f0:	e003      	b.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80057fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005802:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005806:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800580a:	2300      	movs	r3, #0
 800580c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005810:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005814:	460b      	mov	r3, r1
 8005816:	4313      	orrs	r3, r2
 8005818:	d051      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800581a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800581e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005820:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005824:	d035      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005826:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800582a:	d82e      	bhi.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800582c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005830:	d031      	beq.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005832:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005836:	d828      	bhi.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005838:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800583c:	d01a      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800583e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005842:	d822      	bhi.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005844:	2b00      	cmp	r3, #0
 8005846:	d003      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800584c:	d007      	beq.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800584e:	e01c      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005850:	4b4b      	ldr	r3, [pc, #300]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005854:	4a4a      	ldr	r2, [pc, #296]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005856:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800585a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800585c:	e01c      	b.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800585e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005862:	3308      	adds	r3, #8
 8005864:	2100      	movs	r1, #0
 8005866:	4618      	mov	r0, r3
 8005868:	f002 f940 	bl	8007aec <RCCEx_PLL2_Config>
 800586c:	4603      	mov	r3, r0
 800586e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005872:	e011      	b.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005874:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005878:	3328      	adds	r3, #40	; 0x28
 800587a:	2100      	movs	r1, #0
 800587c:	4618      	mov	r0, r3
 800587e:	f002 f9e7 	bl	8007c50 <RCCEx_PLL3_Config>
 8005882:	4603      	mov	r3, r0
 8005884:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005888:	e006      	b.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005890:	e002      	b.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005892:	bf00      	nop
 8005894:	e000      	b.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005896:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005898:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800589c:	2b00      	cmp	r3, #0
 800589e:	d10a      	bne.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80058a0:	4b37      	ldr	r3, [pc, #220]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058a4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80058a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058ae:	4a34      	ldr	r2, [pc, #208]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058b0:	430b      	orrs	r3, r1
 80058b2:	6513      	str	r3, [r2, #80]	; 0x50
 80058b4:	e003      	b.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80058be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80058ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80058ce:	2300      	movs	r3, #0
 80058d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80058d4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80058d8:	460b      	mov	r3, r1
 80058da:	4313      	orrs	r3, r2
 80058dc:	d056      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80058de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058e8:	d033      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80058ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058ee:	d82c      	bhi.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80058f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80058f4:	d02f      	beq.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80058f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80058fa:	d826      	bhi.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80058fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005900:	d02b      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005902:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005906:	d820      	bhi.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005908:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800590c:	d012      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800590e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005912:	d81a      	bhi.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005914:	2b00      	cmp	r3, #0
 8005916:	d022      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800591c:	d115      	bne.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800591e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005922:	3308      	adds	r3, #8
 8005924:	2101      	movs	r1, #1
 8005926:	4618      	mov	r0, r3
 8005928:	f002 f8e0 	bl	8007aec <RCCEx_PLL2_Config>
 800592c:	4603      	mov	r3, r0
 800592e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005932:	e015      	b.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005934:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005938:	3328      	adds	r3, #40	; 0x28
 800593a:	2101      	movs	r1, #1
 800593c:	4618      	mov	r0, r3
 800593e:	f002 f987 	bl	8007c50 <RCCEx_PLL3_Config>
 8005942:	4603      	mov	r3, r0
 8005944:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005948:	e00a      	b.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005950:	e006      	b.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005952:	bf00      	nop
 8005954:	e004      	b.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005956:	bf00      	nop
 8005958:	e002      	b.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800595a:	bf00      	nop
 800595c:	e000      	b.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800595e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005960:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005964:	2b00      	cmp	r3, #0
 8005966:	d10d      	bne.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005968:	4b05      	ldr	r3, [pc, #20]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800596a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800596c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005970:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005974:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005976:	4a02      	ldr	r2, [pc, #8]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005978:	430b      	orrs	r3, r1
 800597a:	6513      	str	r3, [r2, #80]	; 0x50
 800597c:	e006      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800597e:	bf00      	nop
 8005980:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005984:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005988:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800598c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005994:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005998:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800599c:	2300      	movs	r3, #0
 800599e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80059a2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80059a6:	460b      	mov	r3, r1
 80059a8:	4313      	orrs	r3, r2
 80059aa:	d055      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80059ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80059b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80059b8:	d033      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80059ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80059be:	d82c      	bhi.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80059c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059c4:	d02f      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80059c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ca:	d826      	bhi.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80059cc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80059d0:	d02b      	beq.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x672>
 80059d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80059d6:	d820      	bhi.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80059d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059dc:	d012      	beq.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80059de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059e2:	d81a      	bhi.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d022      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x676>
 80059e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059ec:	d115      	bne.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80059ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059f2:	3308      	adds	r3, #8
 80059f4:	2101      	movs	r1, #1
 80059f6:	4618      	mov	r0, r3
 80059f8:	f002 f878 	bl	8007aec <RCCEx_PLL2_Config>
 80059fc:	4603      	mov	r3, r0
 80059fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005a02:	e015      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a08:	3328      	adds	r3, #40	; 0x28
 8005a0a:	2101      	movs	r1, #1
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f002 f91f 	bl	8007c50 <RCCEx_PLL3_Config>
 8005a12:	4603      	mov	r3, r0
 8005a14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005a18:	e00a      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005a20:	e006      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005a22:	bf00      	nop
 8005a24:	e004      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005a26:	bf00      	nop
 8005a28:	e002      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005a2a:	bf00      	nop
 8005a2c:	e000      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005a2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d10b      	bne.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005a38:	4ba3      	ldr	r3, [pc, #652]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a3c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a44:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a48:	4a9f      	ldr	r2, [pc, #636]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a4a:	430b      	orrs	r3, r1
 8005a4c:	6593      	str	r3, [r2, #88]	; 0x58
 8005a4e:	e003      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a54:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a60:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005a64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005a68:	2300      	movs	r3, #0
 8005a6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005a6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005a72:	460b      	mov	r3, r1
 8005a74:	4313      	orrs	r3, r2
 8005a76:	d037      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a82:	d00e      	beq.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005a84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a88:	d816      	bhi.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d018      	beq.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005a8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a92:	d111      	bne.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a94:	4b8c      	ldr	r3, [pc, #560]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a98:	4a8b      	ldr	r2, [pc, #556]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005aa0:	e00f      	b.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aa6:	3308      	adds	r3, #8
 8005aa8:	2101      	movs	r1, #1
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f002 f81e 	bl	8007aec <RCCEx_PLL2_Config>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005ab6:	e004      	b.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005abe:	e000      	b.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005ac0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ac2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d10a      	bne.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005aca:	4b7f      	ldr	r3, [pc, #508]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ace:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ad8:	4a7b      	ldr	r2, [pc, #492]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ada:	430b      	orrs	r3, r1
 8005adc:	6513      	str	r3, [r2, #80]	; 0x50
 8005ade:	e003      	b.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ae0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ae4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005af4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005af8:	2300      	movs	r3, #0
 8005afa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005afe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005b02:	460b      	mov	r3, r1
 8005b04:	4313      	orrs	r3, r2
 8005b06:	d039      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b0e:	2b03      	cmp	r3, #3
 8005b10:	d81c      	bhi.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005b12:	a201      	add	r2, pc, #4	; (adr r2, 8005b18 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b18:	08005b55 	.word	0x08005b55
 8005b1c:	08005b29 	.word	0x08005b29
 8005b20:	08005b37 	.word	0x08005b37
 8005b24:	08005b55 	.word	0x08005b55
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b28:	4b67      	ldr	r3, [pc, #412]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2c:	4a66      	ldr	r2, [pc, #408]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005b34:	e00f      	b.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b3a:	3308      	adds	r3, #8
 8005b3c:	2102      	movs	r1, #2
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f001 ffd4 	bl	8007aec <RCCEx_PLL2_Config>
 8005b44:	4603      	mov	r3, r0
 8005b46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005b4a:	e004      	b.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b52:	e000      	b.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005b54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d10a      	bne.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005b5e:	4b5a      	ldr	r3, [pc, #360]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b62:	f023 0103 	bic.w	r1, r3, #3
 8005b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b6c:	4a56      	ldr	r2, [pc, #344]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b6e:	430b      	orrs	r3, r1
 8005b70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005b72:	e003      	b.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b78:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b84:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005b88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005b92:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005b96:	460b      	mov	r3, r1
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	f000 809f 	beq.w	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b9e:	4b4b      	ldr	r3, [pc, #300]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a4a      	ldr	r2, [pc, #296]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005ba4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ba8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005baa:	f7fb fffd 	bl	8001ba8 <HAL_GetTick>
 8005bae:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005bb2:	e00b      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bb4:	f7fb fff8 	bl	8001ba8 <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005bbe:	1ad3      	subs	r3, r2, r3
 8005bc0:	2b64      	cmp	r3, #100	; 0x64
 8005bc2:	d903      	bls.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005bca:	e005      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005bcc:	4b3f      	ldr	r3, [pc, #252]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d0ed      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005bd8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d179      	bne.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005be0:	4b39      	ldr	r3, [pc, #228]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005be2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005be8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005bec:	4053      	eors	r3, r2
 8005bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d015      	beq.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005bf6:	4b34      	ldr	r3, [pc, #208]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bfe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c02:	4b31      	ldr	r3, [pc, #196]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c06:	4a30      	ldr	r2, [pc, #192]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c0c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c0e:	4b2e      	ldr	r3, [pc, #184]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c12:	4a2d      	ldr	r2, [pc, #180]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c18:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005c1a:	4a2b      	ldr	r2, [pc, #172]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c20:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c26:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005c2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c2e:	d118      	bne.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c30:	f7fb ffba 	bl	8001ba8 <HAL_GetTick>
 8005c34:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c38:	e00d      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c3a:	f7fb ffb5 	bl	8001ba8 <HAL_GetTick>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005c44:	1ad2      	subs	r2, r2, r3
 8005c46:	f241 3388 	movw	r3, #5000	; 0x1388
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d903      	bls.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8005c54:	e005      	b.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c56:	4b1c      	ldr	r3, [pc, #112]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c5a:	f003 0302 	and.w	r3, r3, #2
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d0eb      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005c62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d129      	bne.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c6e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005c72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c7a:	d10e      	bne.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005c7c:	4b12      	ldr	r3, [pc, #72]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c88:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005c8c:	091a      	lsrs	r2, r3, #4
 8005c8e:	4b10      	ldr	r3, [pc, #64]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005c90:	4013      	ands	r3, r2
 8005c92:	4a0d      	ldr	r2, [pc, #52]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c94:	430b      	orrs	r3, r1
 8005c96:	6113      	str	r3, [r2, #16]
 8005c98:	e005      	b.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005c9a:	4b0b      	ldr	r3, [pc, #44]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	4a0a      	ldr	r2, [pc, #40]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ca0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005ca4:	6113      	str	r3, [r2, #16]
 8005ca6:	4b08      	ldr	r3, [pc, #32]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ca8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005cb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cb6:	4a04      	ldr	r2, [pc, #16]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cb8:	430b      	orrs	r3, r1
 8005cba:	6713      	str	r3, [r2, #112]	; 0x70
 8005cbc:	e00e      	b.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005cbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cc2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8005cc6:	e009      	b.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005cc8:	58024400 	.word	0x58024400
 8005ccc:	58024800 	.word	0x58024800
 8005cd0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cd8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005cdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce4:	f002 0301 	and.w	r3, r2, #1
 8005ce8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005cec:	2300      	movs	r3, #0
 8005cee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005cf2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	f000 8089 	beq.w	8005e10 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d04:	2b28      	cmp	r3, #40	; 0x28
 8005d06:	d86b      	bhi.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005d08:	a201      	add	r2, pc, #4	; (adr r2, 8005d10 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d0e:	bf00      	nop
 8005d10:	08005de9 	.word	0x08005de9
 8005d14:	08005de1 	.word	0x08005de1
 8005d18:	08005de1 	.word	0x08005de1
 8005d1c:	08005de1 	.word	0x08005de1
 8005d20:	08005de1 	.word	0x08005de1
 8005d24:	08005de1 	.word	0x08005de1
 8005d28:	08005de1 	.word	0x08005de1
 8005d2c:	08005de1 	.word	0x08005de1
 8005d30:	08005db5 	.word	0x08005db5
 8005d34:	08005de1 	.word	0x08005de1
 8005d38:	08005de1 	.word	0x08005de1
 8005d3c:	08005de1 	.word	0x08005de1
 8005d40:	08005de1 	.word	0x08005de1
 8005d44:	08005de1 	.word	0x08005de1
 8005d48:	08005de1 	.word	0x08005de1
 8005d4c:	08005de1 	.word	0x08005de1
 8005d50:	08005dcb 	.word	0x08005dcb
 8005d54:	08005de1 	.word	0x08005de1
 8005d58:	08005de1 	.word	0x08005de1
 8005d5c:	08005de1 	.word	0x08005de1
 8005d60:	08005de1 	.word	0x08005de1
 8005d64:	08005de1 	.word	0x08005de1
 8005d68:	08005de1 	.word	0x08005de1
 8005d6c:	08005de1 	.word	0x08005de1
 8005d70:	08005de9 	.word	0x08005de9
 8005d74:	08005de1 	.word	0x08005de1
 8005d78:	08005de1 	.word	0x08005de1
 8005d7c:	08005de1 	.word	0x08005de1
 8005d80:	08005de1 	.word	0x08005de1
 8005d84:	08005de1 	.word	0x08005de1
 8005d88:	08005de1 	.word	0x08005de1
 8005d8c:	08005de1 	.word	0x08005de1
 8005d90:	08005de9 	.word	0x08005de9
 8005d94:	08005de1 	.word	0x08005de1
 8005d98:	08005de1 	.word	0x08005de1
 8005d9c:	08005de1 	.word	0x08005de1
 8005da0:	08005de1 	.word	0x08005de1
 8005da4:	08005de1 	.word	0x08005de1
 8005da8:	08005de1 	.word	0x08005de1
 8005dac:	08005de1 	.word	0x08005de1
 8005db0:	08005de9 	.word	0x08005de9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005db8:	3308      	adds	r3, #8
 8005dba:	2101      	movs	r1, #1
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f001 fe95 	bl	8007aec <RCCEx_PLL2_Config>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005dc8:	e00f      	b.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dce:	3328      	adds	r3, #40	; 0x28
 8005dd0:	2101      	movs	r1, #1
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f001 ff3c 	bl	8007c50 <RCCEx_PLL3_Config>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005dde:	e004      	b.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005de6:	e000      	b.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005de8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d10a      	bne.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005df2:	4bbf      	ldr	r3, [pc, #764]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005df6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e00:	4abb      	ldr	r2, [pc, #748]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e02:	430b      	orrs	r3, r1
 8005e04:	6553      	str	r3, [r2, #84]	; 0x54
 8005e06:	e003      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e0c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e18:	f002 0302 	and.w	r3, r2, #2
 8005e1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e20:	2300      	movs	r3, #0
 8005e22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005e26:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	d041      	beq.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e36:	2b05      	cmp	r3, #5
 8005e38:	d824      	bhi.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005e3a:	a201      	add	r2, pc, #4	; (adr r2, 8005e40 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e40:	08005e8d 	.word	0x08005e8d
 8005e44:	08005e59 	.word	0x08005e59
 8005e48:	08005e6f 	.word	0x08005e6f
 8005e4c:	08005e8d 	.word	0x08005e8d
 8005e50:	08005e8d 	.word	0x08005e8d
 8005e54:	08005e8d 	.word	0x08005e8d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e5c:	3308      	adds	r3, #8
 8005e5e:	2101      	movs	r1, #1
 8005e60:	4618      	mov	r0, r3
 8005e62:	f001 fe43 	bl	8007aec <RCCEx_PLL2_Config>
 8005e66:	4603      	mov	r3, r0
 8005e68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005e6c:	e00f      	b.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e72:	3328      	adds	r3, #40	; 0x28
 8005e74:	2101      	movs	r1, #1
 8005e76:	4618      	mov	r0, r3
 8005e78:	f001 feea 	bl	8007c50 <RCCEx_PLL3_Config>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005e82:	e004      	b.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005e8a:	e000      	b.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005e8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d10a      	bne.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005e96:	4b96      	ldr	r3, [pc, #600]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e9a:	f023 0107 	bic.w	r1, r3, #7
 8005e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ea2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ea4:	4a92      	ldr	r2, [pc, #584]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ea6:	430b      	orrs	r3, r1
 8005ea8:	6553      	str	r3, [r2, #84]	; 0x54
 8005eaa:	e003      	b.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005eb0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ebc:	f002 0304 	and.w	r3, r2, #4
 8005ec0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005eca:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005ece:	460b      	mov	r3, r1
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	d044      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ed8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005edc:	2b05      	cmp	r3, #5
 8005ede:	d825      	bhi.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005ee0:	a201      	add	r2, pc, #4	; (adr r2, 8005ee8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee6:	bf00      	nop
 8005ee8:	08005f35 	.word	0x08005f35
 8005eec:	08005f01 	.word	0x08005f01
 8005ef0:	08005f17 	.word	0x08005f17
 8005ef4:	08005f35 	.word	0x08005f35
 8005ef8:	08005f35 	.word	0x08005f35
 8005efc:	08005f35 	.word	0x08005f35
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f04:	3308      	adds	r3, #8
 8005f06:	2101      	movs	r1, #1
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f001 fdef 	bl	8007aec <RCCEx_PLL2_Config>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005f14:	e00f      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f1a:	3328      	adds	r3, #40	; 0x28
 8005f1c:	2101      	movs	r1, #1
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f001 fe96 	bl	8007c50 <RCCEx_PLL3_Config>
 8005f24:	4603      	mov	r3, r0
 8005f26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005f2a:	e004      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005f32:	e000      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005f34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d10b      	bne.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005f3e:	4b6c      	ldr	r3, [pc, #432]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f42:	f023 0107 	bic.w	r1, r3, #7
 8005f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f4e:	4a68      	ldr	r2, [pc, #416]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f50:	430b      	orrs	r3, r1
 8005f52:	6593      	str	r3, [r2, #88]	; 0x58
 8005f54:	e003      	b.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f66:	f002 0320 	and.w	r3, r2, #32
 8005f6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005f6e:	2300      	movs	r3, #0
 8005f70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005f78:	460b      	mov	r3, r1
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	d055      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f8a:	d033      	beq.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005f8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f90:	d82c      	bhi.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005f92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f96:	d02f      	beq.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f9c:	d826      	bhi.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005f9e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005fa2:	d02b      	beq.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005fa4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005fa8:	d820      	bhi.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005faa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fae:	d012      	beq.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005fb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fb4:	d81a      	bhi.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d022      	beq.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005fba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fbe:	d115      	bne.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fc4:	3308      	adds	r3, #8
 8005fc6:	2100      	movs	r1, #0
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f001 fd8f 	bl	8007aec <RCCEx_PLL2_Config>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005fd4:	e015      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fda:	3328      	adds	r3, #40	; 0x28
 8005fdc:	2102      	movs	r1, #2
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f001 fe36 	bl	8007c50 <RCCEx_PLL3_Config>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005fea:	e00a      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005ff2:	e006      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005ff4:	bf00      	nop
 8005ff6:	e004      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005ff8:	bf00      	nop
 8005ffa:	e002      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005ffc:	bf00      	nop
 8005ffe:	e000      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006000:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006002:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006006:	2b00      	cmp	r3, #0
 8006008:	d10b      	bne.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800600a:	4b39      	ldr	r3, [pc, #228]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800600c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800600e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006012:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800601a:	4a35      	ldr	r2, [pc, #212]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800601c:	430b      	orrs	r3, r1
 800601e:	6553      	str	r3, [r2, #84]	; 0x54
 8006020:	e003      	b.n	800602a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006022:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006026:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800602a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800602e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006032:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006036:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800603a:	2300      	movs	r3, #0
 800603c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006040:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006044:	460b      	mov	r3, r1
 8006046:	4313      	orrs	r3, r2
 8006048:	d058      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800604a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800604e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006052:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006056:	d033      	beq.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006058:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800605c:	d82c      	bhi.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800605e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006062:	d02f      	beq.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006064:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006068:	d826      	bhi.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800606a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800606e:	d02b      	beq.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006070:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006074:	d820      	bhi.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006076:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800607a:	d012      	beq.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800607c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006080:	d81a      	bhi.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006082:	2b00      	cmp	r3, #0
 8006084:	d022      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006086:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800608a:	d115      	bne.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800608c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006090:	3308      	adds	r3, #8
 8006092:	2100      	movs	r1, #0
 8006094:	4618      	mov	r0, r3
 8006096:	f001 fd29 	bl	8007aec <RCCEx_PLL2_Config>
 800609a:	4603      	mov	r3, r0
 800609c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80060a0:	e015      	b.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80060a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060a6:	3328      	adds	r3, #40	; 0x28
 80060a8:	2102      	movs	r1, #2
 80060aa:	4618      	mov	r0, r3
 80060ac:	f001 fdd0 	bl	8007c50 <RCCEx_PLL3_Config>
 80060b0:	4603      	mov	r3, r0
 80060b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80060b6:	e00a      	b.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80060be:	e006      	b.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80060c0:	bf00      	nop
 80060c2:	e004      	b.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80060c4:	bf00      	nop
 80060c6:	e002      	b.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80060c8:	bf00      	nop
 80060ca:	e000      	b.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80060cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d10e      	bne.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80060d6:	4b06      	ldr	r3, [pc, #24]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80060d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060da:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80060de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060e6:	4a02      	ldr	r2, [pc, #8]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80060e8:	430b      	orrs	r3, r1
 80060ea:	6593      	str	r3, [r2, #88]	; 0x58
 80060ec:	e006      	b.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80060ee:	bf00      	nop
 80060f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80060f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80060fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006104:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006108:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800610c:	2300      	movs	r3, #0
 800610e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006112:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006116:	460b      	mov	r3, r1
 8006118:	4313      	orrs	r3, r2
 800611a:	d055      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800611c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006120:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006124:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006128:	d033      	beq.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800612a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800612e:	d82c      	bhi.n	800618a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006130:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006134:	d02f      	beq.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006136:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800613a:	d826      	bhi.n	800618a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800613c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006140:	d02b      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006142:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006146:	d820      	bhi.n	800618a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006148:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800614c:	d012      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800614e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006152:	d81a      	bhi.n	800618a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006154:	2b00      	cmp	r3, #0
 8006156:	d022      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006158:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800615c:	d115      	bne.n	800618a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800615e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006162:	3308      	adds	r3, #8
 8006164:	2100      	movs	r1, #0
 8006166:	4618      	mov	r0, r3
 8006168:	f001 fcc0 	bl	8007aec <RCCEx_PLL2_Config>
 800616c:	4603      	mov	r3, r0
 800616e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006172:	e015      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006174:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006178:	3328      	adds	r3, #40	; 0x28
 800617a:	2102      	movs	r1, #2
 800617c:	4618      	mov	r0, r3
 800617e:	f001 fd67 	bl	8007c50 <RCCEx_PLL3_Config>
 8006182:	4603      	mov	r3, r0
 8006184:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006188:	e00a      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006190:	e006      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006192:	bf00      	nop
 8006194:	e004      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006196:	bf00      	nop
 8006198:	e002      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800619a:	bf00      	nop
 800619c:	e000      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800619e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d10b      	bne.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80061a8:	4ba1      	ldr	r3, [pc, #644]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ac:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80061b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80061b8:	4a9d      	ldr	r2, [pc, #628]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061ba:	430b      	orrs	r3, r1
 80061bc:	6593      	str	r3, [r2, #88]	; 0x58
 80061be:	e003      	b.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80061c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d0:	f002 0308 	and.w	r3, r2, #8
 80061d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80061d8:	2300      	movs	r3, #0
 80061da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80061de:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80061e2:	460b      	mov	r3, r1
 80061e4:	4313      	orrs	r3, r2
 80061e6:	d01e      	beq.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80061e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061f4:	d10c      	bne.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80061f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061fa:	3328      	adds	r3, #40	; 0x28
 80061fc:	2102      	movs	r1, #2
 80061fe:	4618      	mov	r0, r3
 8006200:	f001 fd26 	bl	8007c50 <RCCEx_PLL3_Config>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d002      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006210:	4b87      	ldr	r3, [pc, #540]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006214:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006218:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800621c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006220:	4a83      	ldr	r2, [pc, #524]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006222:	430b      	orrs	r3, r1
 8006224:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006226:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800622a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622e:	f002 0310 	and.w	r3, r2, #16
 8006232:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006236:	2300      	movs	r3, #0
 8006238:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800623c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006240:	460b      	mov	r3, r1
 8006242:	4313      	orrs	r3, r2
 8006244:	d01e      	beq.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006246:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800624a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800624e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006252:	d10c      	bne.n	800626e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006254:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006258:	3328      	adds	r3, #40	; 0x28
 800625a:	2102      	movs	r1, #2
 800625c:	4618      	mov	r0, r3
 800625e:	f001 fcf7 	bl	8007c50 <RCCEx_PLL3_Config>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d002      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800626e:	4b70      	ldr	r3, [pc, #448]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006272:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006276:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800627a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800627e:	4a6c      	ldr	r2, [pc, #432]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006280:	430b      	orrs	r3, r1
 8006282:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006284:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006290:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006294:	2300      	movs	r3, #0
 8006296:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800629a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800629e:	460b      	mov	r3, r1
 80062a0:	4313      	orrs	r3, r2
 80062a2:	d03e      	beq.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80062a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80062ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062b0:	d022      	beq.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80062b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062b6:	d81b      	bhi.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d003      	beq.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80062bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062c0:	d00b      	beq.n	80062da <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80062c2:	e015      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062c8:	3308      	adds	r3, #8
 80062ca:	2100      	movs	r1, #0
 80062cc:	4618      	mov	r0, r3
 80062ce:	f001 fc0d 	bl	8007aec <RCCEx_PLL2_Config>
 80062d2:	4603      	mov	r3, r0
 80062d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80062d8:	e00f      	b.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80062da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062de:	3328      	adds	r3, #40	; 0x28
 80062e0:	2102      	movs	r1, #2
 80062e2:	4618      	mov	r0, r3
 80062e4:	f001 fcb4 	bl	8007c50 <RCCEx_PLL3_Config>
 80062e8:	4603      	mov	r3, r0
 80062ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80062ee:	e004      	b.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80062f6:	e000      	b.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80062f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d10b      	bne.n	800631a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006302:	4b4b      	ldr	r3, [pc, #300]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006306:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800630a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800630e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006312:	4a47      	ldr	r2, [pc, #284]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006314:	430b      	orrs	r3, r1
 8006316:	6593      	str	r3, [r2, #88]	; 0x58
 8006318:	e003      	b.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800631a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800631e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006322:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800632e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006330:	2300      	movs	r3, #0
 8006332:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006334:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006338:	460b      	mov	r3, r1
 800633a:	4313      	orrs	r3, r2
 800633c:	d03b      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800633e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006346:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800634a:	d01f      	beq.n	800638c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800634c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006350:	d818      	bhi.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006352:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006356:	d003      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006358:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800635c:	d007      	beq.n	800636e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800635e:	e011      	b.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006360:	4b33      	ldr	r3, [pc, #204]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006364:	4a32      	ldr	r2, [pc, #200]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006366:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800636a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800636c:	e00f      	b.n	800638e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800636e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006372:	3328      	adds	r3, #40	; 0x28
 8006374:	2101      	movs	r1, #1
 8006376:	4618      	mov	r0, r3
 8006378:	f001 fc6a 	bl	8007c50 <RCCEx_PLL3_Config>
 800637c:	4603      	mov	r3, r0
 800637e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006382:	e004      	b.n	800638e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800638a:	e000      	b.n	800638e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800638c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800638e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006392:	2b00      	cmp	r3, #0
 8006394:	d10b      	bne.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006396:	4b26      	ldr	r3, [pc, #152]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800639a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800639e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063a6:	4a22      	ldr	r2, [pc, #136]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063a8:	430b      	orrs	r3, r1
 80063aa:	6553      	str	r3, [r2, #84]	; 0x54
 80063ac:	e003      	b.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80063b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063be:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80063c2:	673b      	str	r3, [r7, #112]	; 0x70
 80063c4:	2300      	movs	r3, #0
 80063c6:	677b      	str	r3, [r7, #116]	; 0x74
 80063c8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80063cc:	460b      	mov	r3, r1
 80063ce:	4313      	orrs	r3, r2
 80063d0:	d034      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80063d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d003      	beq.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80063dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063e0:	d007      	beq.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80063e2:	e011      	b.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063e4:	4b12      	ldr	r3, [pc, #72]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e8:	4a11      	ldr	r2, [pc, #68]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80063f0:	e00e      	b.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80063f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063f6:	3308      	adds	r3, #8
 80063f8:	2102      	movs	r1, #2
 80063fa:	4618      	mov	r0, r3
 80063fc:	f001 fb76 	bl	8007aec <RCCEx_PLL2_Config>
 8006400:	4603      	mov	r3, r0
 8006402:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006406:	e003      	b.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800640e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006410:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006414:	2b00      	cmp	r3, #0
 8006416:	d10d      	bne.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006418:	4b05      	ldr	r3, [pc, #20]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800641a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800641c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006420:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006426:	4a02      	ldr	r2, [pc, #8]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006428:	430b      	orrs	r3, r1
 800642a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800642c:	e006      	b.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800642e:	bf00      	nop
 8006430:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006434:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006438:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800643c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006444:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006448:	66bb      	str	r3, [r7, #104]	; 0x68
 800644a:	2300      	movs	r3, #0
 800644c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800644e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006452:	460b      	mov	r3, r1
 8006454:	4313      	orrs	r3, r2
 8006456:	d00c      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006458:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800645c:	3328      	adds	r3, #40	; 0x28
 800645e:	2102      	movs	r1, #2
 8006460:	4618      	mov	r0, r3
 8006462:	f001 fbf5 	bl	8007c50 <RCCEx_PLL3_Config>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d002      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006472:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800647a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800647e:	663b      	str	r3, [r7, #96]	; 0x60
 8006480:	2300      	movs	r3, #0
 8006482:	667b      	str	r3, [r7, #100]	; 0x64
 8006484:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006488:	460b      	mov	r3, r1
 800648a:	4313      	orrs	r3, r2
 800648c:	d038      	beq.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800648e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006492:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006496:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800649a:	d018      	beq.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800649c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064a0:	d811      	bhi.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80064a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064a6:	d014      	beq.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80064a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064ac:	d80b      	bhi.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d011      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80064b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064b6:	d106      	bne.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064b8:	4bc3      	ldr	r3, [pc, #780]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064bc:	4ac2      	ldr	r2, [pc, #776]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80064c4:	e008      	b.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80064cc:	e004      	b.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80064ce:	bf00      	nop
 80064d0:	e002      	b.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80064d2:	bf00      	nop
 80064d4:	e000      	b.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80064d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d10b      	bne.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80064e0:	4bb9      	ldr	r3, [pc, #740]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064e4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80064e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064f0:	4ab5      	ldr	r2, [pc, #724]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064f2:	430b      	orrs	r3, r1
 80064f4:	6553      	str	r3, [r2, #84]	; 0x54
 80064f6:	e003      	b.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006500:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006508:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800650c:	65bb      	str	r3, [r7, #88]	; 0x58
 800650e:	2300      	movs	r3, #0
 8006510:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006512:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006516:	460b      	mov	r3, r1
 8006518:	4313      	orrs	r3, r2
 800651a:	d009      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800651c:	4baa      	ldr	r3, [pc, #680]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800651e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006520:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006524:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800652a:	4aa7      	ldr	r2, [pc, #668]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800652c:	430b      	orrs	r3, r1
 800652e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006530:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006538:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800653c:	653b      	str	r3, [r7, #80]	; 0x50
 800653e:	2300      	movs	r3, #0
 8006540:	657b      	str	r3, [r7, #84]	; 0x54
 8006542:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006546:	460b      	mov	r3, r1
 8006548:	4313      	orrs	r3, r2
 800654a:	d00a      	beq.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800654c:	4b9e      	ldr	r3, [pc, #632]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800654e:	691b      	ldr	r3, [r3, #16]
 8006550:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8006554:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006558:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800655c:	4a9a      	ldr	r2, [pc, #616]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800655e:	430b      	orrs	r3, r1
 8006560:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006562:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800656e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006570:	2300      	movs	r3, #0
 8006572:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006574:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006578:	460b      	mov	r3, r1
 800657a:	4313      	orrs	r3, r2
 800657c:	d009      	beq.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800657e:	4b92      	ldr	r3, [pc, #584]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006582:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006586:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800658a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800658c:	4a8e      	ldr	r2, [pc, #568]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800658e:	430b      	orrs	r3, r1
 8006590:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006592:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800659e:	643b      	str	r3, [r7, #64]	; 0x40
 80065a0:	2300      	movs	r3, #0
 80065a2:	647b      	str	r3, [r7, #68]	; 0x44
 80065a4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80065a8:	460b      	mov	r3, r1
 80065aa:	4313      	orrs	r3, r2
 80065ac:	d00e      	beq.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80065ae:	4b86      	ldr	r3, [pc, #536]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	4a85      	ldr	r2, [pc, #532]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80065b8:	6113      	str	r3, [r2, #16]
 80065ba:	4b83      	ldr	r3, [pc, #524]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065bc:	6919      	ldr	r1, [r3, #16]
 80065be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065c2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80065c6:	4a80      	ldr	r2, [pc, #512]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065c8:	430b      	orrs	r3, r1
 80065ca:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80065cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d4:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80065d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80065da:	2300      	movs	r3, #0
 80065dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065de:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80065e2:	460b      	mov	r3, r1
 80065e4:	4313      	orrs	r3, r2
 80065e6:	d009      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80065e8:	4b77      	ldr	r3, [pc, #476]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065ec:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80065f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065f6:	4a74      	ldr	r2, [pc, #464]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065f8:	430b      	orrs	r3, r1
 80065fa:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80065fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006604:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006608:	633b      	str	r3, [r7, #48]	; 0x30
 800660a:	2300      	movs	r3, #0
 800660c:	637b      	str	r3, [r7, #52]	; 0x34
 800660e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006612:	460b      	mov	r3, r1
 8006614:	4313      	orrs	r3, r2
 8006616:	d00a      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006618:	4b6b      	ldr	r3, [pc, #428]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800661a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800661c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006620:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006624:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006628:	4a67      	ldr	r2, [pc, #412]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800662a:	430b      	orrs	r3, r1
 800662c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800662e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006636:	2100      	movs	r1, #0
 8006638:	62b9      	str	r1, [r7, #40]	; 0x28
 800663a:	f003 0301 	and.w	r3, r3, #1
 800663e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006640:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006644:	460b      	mov	r3, r1
 8006646:	4313      	orrs	r3, r2
 8006648:	d011      	beq.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800664a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800664e:	3308      	adds	r3, #8
 8006650:	2100      	movs	r1, #0
 8006652:	4618      	mov	r0, r3
 8006654:	f001 fa4a 	bl	8007aec <RCCEx_PLL2_Config>
 8006658:	4603      	mov	r3, r0
 800665a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800665e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006662:	2b00      	cmp	r3, #0
 8006664:	d003      	beq.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006666:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800666a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800666e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006676:	2100      	movs	r1, #0
 8006678:	6239      	str	r1, [r7, #32]
 800667a:	f003 0302 	and.w	r3, r3, #2
 800667e:	627b      	str	r3, [r7, #36]	; 0x24
 8006680:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006684:	460b      	mov	r3, r1
 8006686:	4313      	orrs	r3, r2
 8006688:	d011      	beq.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800668a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800668e:	3308      	adds	r3, #8
 8006690:	2101      	movs	r1, #1
 8006692:	4618      	mov	r0, r3
 8006694:	f001 fa2a 	bl	8007aec <RCCEx_PLL2_Config>
 8006698:	4603      	mov	r3, r0
 800669a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800669e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d003      	beq.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80066ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b6:	2100      	movs	r1, #0
 80066b8:	61b9      	str	r1, [r7, #24]
 80066ba:	f003 0304 	and.w	r3, r3, #4
 80066be:	61fb      	str	r3, [r7, #28]
 80066c0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80066c4:	460b      	mov	r3, r1
 80066c6:	4313      	orrs	r3, r2
 80066c8:	d011      	beq.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80066ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066ce:	3308      	adds	r3, #8
 80066d0:	2102      	movs	r1, #2
 80066d2:	4618      	mov	r0, r3
 80066d4:	f001 fa0a 	bl	8007aec <RCCEx_PLL2_Config>
 80066d8:	4603      	mov	r3, r0
 80066da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80066de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d003      	beq.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80066ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f6:	2100      	movs	r1, #0
 80066f8:	6139      	str	r1, [r7, #16]
 80066fa:	f003 0308 	and.w	r3, r3, #8
 80066fe:	617b      	str	r3, [r7, #20]
 8006700:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006704:	460b      	mov	r3, r1
 8006706:	4313      	orrs	r3, r2
 8006708:	d011      	beq.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800670a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800670e:	3328      	adds	r3, #40	; 0x28
 8006710:	2100      	movs	r1, #0
 8006712:	4618      	mov	r0, r3
 8006714:	f001 fa9c 	bl	8007c50 <RCCEx_PLL3_Config>
 8006718:	4603      	mov	r3, r0
 800671a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800671e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006722:	2b00      	cmp	r3, #0
 8006724:	d003      	beq.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006726:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800672a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800672e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006736:	2100      	movs	r1, #0
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	f003 0310 	and.w	r3, r3, #16
 800673e:	60fb      	str	r3, [r7, #12]
 8006740:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006744:	460b      	mov	r3, r1
 8006746:	4313      	orrs	r3, r2
 8006748:	d011      	beq.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800674a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800674e:	3328      	adds	r3, #40	; 0x28
 8006750:	2101      	movs	r1, #1
 8006752:	4618      	mov	r0, r3
 8006754:	f001 fa7c 	bl	8007c50 <RCCEx_PLL3_Config>
 8006758:	4603      	mov	r3, r0
 800675a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800675e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006762:	2b00      	cmp	r3, #0
 8006764:	d003      	beq.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006766:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800676a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800676e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006776:	2100      	movs	r1, #0
 8006778:	6039      	str	r1, [r7, #0]
 800677a:	f003 0320 	and.w	r3, r3, #32
 800677e:	607b      	str	r3, [r7, #4]
 8006780:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006784:	460b      	mov	r3, r1
 8006786:	4313      	orrs	r3, r2
 8006788:	d011      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800678a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800678e:	3328      	adds	r3, #40	; 0x28
 8006790:	2102      	movs	r1, #2
 8006792:	4618      	mov	r0, r3
 8006794:	f001 fa5c 	bl	8007c50 <RCCEx_PLL3_Config>
 8006798:	4603      	mov	r3, r0
 800679a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800679e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d003      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80067ae:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d101      	bne.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80067b6:	2300      	movs	r3, #0
 80067b8:	e000      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
}
 80067bc:	4618      	mov	r0, r3
 80067be:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80067c2:	46bd      	mov	sp, r7
 80067c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067c8:	58024400 	.word	0x58024400

080067cc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b090      	sub	sp, #64	; 0x40
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80067d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067da:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80067de:	430b      	orrs	r3, r1
 80067e0:	f040 8094 	bne.w	800690c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80067e4:	4b9e      	ldr	r3, [pc, #632]	; (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80067e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067e8:	f003 0307 	and.w	r3, r3, #7
 80067ec:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80067ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f0:	2b04      	cmp	r3, #4
 80067f2:	f200 8087 	bhi.w	8006904 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80067f6:	a201      	add	r2, pc, #4	; (adr r2, 80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80067f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067fc:	08006811 	.word	0x08006811
 8006800:	08006839 	.word	0x08006839
 8006804:	08006861 	.word	0x08006861
 8006808:	080068fd 	.word	0x080068fd
 800680c:	08006889 	.word	0x08006889
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006810:	4b93      	ldr	r3, [pc, #588]	; (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006818:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800681c:	d108      	bne.n	8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800681e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006822:	4618      	mov	r0, r3
 8006824:	f001 f810 	bl	8007848 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800682a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800682c:	f000 bd45 	b.w	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006830:	2300      	movs	r3, #0
 8006832:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006834:	f000 bd41 	b.w	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006838:	4b89      	ldr	r3, [pc, #548]	; (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006840:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006844:	d108      	bne.n	8006858 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006846:	f107 0318 	add.w	r3, r7, #24
 800684a:	4618      	mov	r0, r3
 800684c:	f000 fd54 	bl	80072f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006850:	69bb      	ldr	r3, [r7, #24]
 8006852:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006854:	f000 bd31 	b.w	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006858:	2300      	movs	r3, #0
 800685a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800685c:	f000 bd2d 	b.w	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006860:	4b7f      	ldr	r3, [pc, #508]	; (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006868:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800686c:	d108      	bne.n	8006880 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800686e:	f107 030c 	add.w	r3, r7, #12
 8006872:	4618      	mov	r0, r3
 8006874:	f000 fe94 	bl	80075a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800687c:	f000 bd1d 	b.w	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006880:	2300      	movs	r3, #0
 8006882:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006884:	f000 bd19 	b.w	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006888:	4b75      	ldr	r3, [pc, #468]	; (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800688a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800688c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006890:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006892:	4b73      	ldr	r3, [pc, #460]	; (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 0304 	and.w	r3, r3, #4
 800689a:	2b04      	cmp	r3, #4
 800689c:	d10c      	bne.n	80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800689e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d109      	bne.n	80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80068a4:	4b6e      	ldr	r3, [pc, #440]	; (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	08db      	lsrs	r3, r3, #3
 80068aa:	f003 0303 	and.w	r3, r3, #3
 80068ae:	4a6d      	ldr	r2, [pc, #436]	; (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80068b0:	fa22 f303 	lsr.w	r3, r2, r3
 80068b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068b6:	e01f      	b.n	80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80068b8:	4b69      	ldr	r3, [pc, #420]	; (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068c4:	d106      	bne.n	80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80068c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068cc:	d102      	bne.n	80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80068ce:	4b66      	ldr	r3, [pc, #408]	; (8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80068d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068d2:	e011      	b.n	80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80068d4:	4b62      	ldr	r3, [pc, #392]	; (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068e0:	d106      	bne.n	80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80068e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068e8:	d102      	bne.n	80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80068ea:	4b60      	ldr	r3, [pc, #384]	; (8006a6c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80068ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068ee:	e003      	b.n	80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80068f0:	2300      	movs	r3, #0
 80068f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80068f4:	f000 bce1 	b.w	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80068f8:	f000 bcdf 	b.w	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80068fc:	4b5c      	ldr	r3, [pc, #368]	; (8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80068fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006900:	f000 bcdb 	b.w	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006904:	2300      	movs	r3, #0
 8006906:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006908:	f000 bcd7 	b.w	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800690c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006910:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8006914:	430b      	orrs	r3, r1
 8006916:	f040 80ad 	bne.w	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800691a:	4b51      	ldr	r3, [pc, #324]	; (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800691c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800691e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006922:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006926:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800692a:	d056      	beq.n	80069da <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800692c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006932:	f200 8090 	bhi.w	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006938:	2bc0      	cmp	r3, #192	; 0xc0
 800693a:	f000 8088 	beq.w	8006a4e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800693e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006940:	2bc0      	cmp	r3, #192	; 0xc0
 8006942:	f200 8088 	bhi.w	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006948:	2b80      	cmp	r3, #128	; 0x80
 800694a:	d032      	beq.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800694c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694e:	2b80      	cmp	r3, #128	; 0x80
 8006950:	f200 8081 	bhi.w	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006956:	2b00      	cmp	r3, #0
 8006958:	d003      	beq.n	8006962 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800695a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800695c:	2b40      	cmp	r3, #64	; 0x40
 800695e:	d014      	beq.n	800698a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006960:	e079      	b.n	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006962:	4b3f      	ldr	r3, [pc, #252]	; (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800696a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800696e:	d108      	bne.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006974:	4618      	mov	r0, r3
 8006976:	f000 ff67 	bl	8007848 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800697a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800697e:	f000 bc9c 	b.w	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006982:	2300      	movs	r3, #0
 8006984:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006986:	f000 bc98 	b.w	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800698a:	4b35      	ldr	r3, [pc, #212]	; (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006992:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006996:	d108      	bne.n	80069aa <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006998:	f107 0318 	add.w	r3, r7, #24
 800699c:	4618      	mov	r0, r3
 800699e:	f000 fcab 	bl	80072f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80069a2:	69bb      	ldr	r3, [r7, #24]
 80069a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069a6:	f000 bc88 	b.w	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069aa:	2300      	movs	r3, #0
 80069ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069ae:	f000 bc84 	b.w	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80069b2:	4b2b      	ldr	r3, [pc, #172]	; (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069be:	d108      	bne.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069c0:	f107 030c 	add.w	r3, r7, #12
 80069c4:	4618      	mov	r0, r3
 80069c6:	f000 fdeb 	bl	80075a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069ce:	f000 bc74 	b.w	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069d2:	2300      	movs	r3, #0
 80069d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069d6:	f000 bc70 	b.w	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80069da:	4b21      	ldr	r3, [pc, #132]	; (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80069dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80069e2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80069e4:	4b1e      	ldr	r3, [pc, #120]	; (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 0304 	and.w	r3, r3, #4
 80069ec:	2b04      	cmp	r3, #4
 80069ee:	d10c      	bne.n	8006a0a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80069f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d109      	bne.n	8006a0a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80069f6:	4b1a      	ldr	r3, [pc, #104]	; (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	08db      	lsrs	r3, r3, #3
 80069fc:	f003 0303 	and.w	r3, r3, #3
 8006a00:	4a18      	ldr	r2, [pc, #96]	; (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006a02:	fa22 f303 	lsr.w	r3, r2, r3
 8006a06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a08:	e01f      	b.n	8006a4a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a0a:	4b15      	ldr	r3, [pc, #84]	; (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a16:	d106      	bne.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a1e:	d102      	bne.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006a20:	4b11      	ldr	r3, [pc, #68]	; (8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006a22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a24:	e011      	b.n	8006a4a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006a26:	4b0e      	ldr	r3, [pc, #56]	; (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a32:	d106      	bne.n	8006a42 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8006a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a3a:	d102      	bne.n	8006a42 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006a3c:	4b0b      	ldr	r3, [pc, #44]	; (8006a6c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a40:	e003      	b.n	8006a4a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006a42:	2300      	movs	r3, #0
 8006a44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006a46:	f000 bc38 	b.w	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006a4a:	f000 bc36 	b.w	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006a4e:	4b08      	ldr	r3, [pc, #32]	; (8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006a50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a52:	f000 bc32 	b.w	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006a56:	2300      	movs	r3, #0
 8006a58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a5a:	f000 bc2e 	b.w	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006a5e:	bf00      	nop
 8006a60:	58024400 	.word	0x58024400
 8006a64:	03d09000 	.word	0x03d09000
 8006a68:	003d0900 	.word	0x003d0900
 8006a6c:	007a1200 	.word	0x007a1200
 8006a70:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006a74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a78:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8006a7c:	430b      	orrs	r3, r1
 8006a7e:	f040 809c 	bne.w	8006bba <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006a82:	4b9e      	ldr	r3, [pc, #632]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a86:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006a8a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a92:	d054      	beq.n	8006b3e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a96:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a9a:	f200 808b 	bhi.w	8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006aa4:	f000 8083 	beq.w	8006bae <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aaa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006aae:	f200 8081 	bhi.w	8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ab8:	d02f      	beq.n	8006b1a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8006aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006abc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ac0:	d878      	bhi.n	8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d004      	beq.n	8006ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ace:	d012      	beq.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006ad0:	e070      	b.n	8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006ad2:	4b8a      	ldr	r3, [pc, #552]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ada:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ade:	d107      	bne.n	8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ae0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f000 feaf 	bl	8007848 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006aee:	e3e4      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006af0:	2300      	movs	r3, #0
 8006af2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006af4:	e3e1      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006af6:	4b81      	ldr	r3, [pc, #516]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006afe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b02:	d107      	bne.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b04:	f107 0318 	add.w	r3, r7, #24
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f000 fbf5 	bl	80072f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b12:	e3d2      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b14:	2300      	movs	r3, #0
 8006b16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b18:	e3cf      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b1a:	4b78      	ldr	r3, [pc, #480]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b26:	d107      	bne.n	8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b28:	f107 030c 	add.w	r3, r7, #12
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f000 fd37 	bl	80075a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b36:	e3c0      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b3c:	e3bd      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006b3e:	4b6f      	ldr	r3, [pc, #444]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b42:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006b46:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006b48:	4b6c      	ldr	r3, [pc, #432]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f003 0304 	and.w	r3, r3, #4
 8006b50:	2b04      	cmp	r3, #4
 8006b52:	d10c      	bne.n	8006b6e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d109      	bne.n	8006b6e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b5a:	4b68      	ldr	r3, [pc, #416]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	08db      	lsrs	r3, r3, #3
 8006b60:	f003 0303 	and.w	r3, r3, #3
 8006b64:	4a66      	ldr	r2, [pc, #408]	; (8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006b66:	fa22 f303 	lsr.w	r3, r2, r3
 8006b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b6c:	e01e      	b.n	8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006b6e:	4b63      	ldr	r3, [pc, #396]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b7a:	d106      	bne.n	8006b8a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b82:	d102      	bne.n	8006b8a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006b84:	4b5f      	ldr	r3, [pc, #380]	; (8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006b86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b88:	e010      	b.n	8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006b8a:	4b5c      	ldr	r3, [pc, #368]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b96:	d106      	bne.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b9e:	d102      	bne.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006ba0:	4b59      	ldr	r3, [pc, #356]	; (8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ba4:	e002      	b.n	8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006baa:	e386      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006bac:	e385      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006bae:	4b57      	ldr	r3, [pc, #348]	; (8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bb2:	e382      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bb8:	e37f      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006bba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bbe:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8006bc2:	430b      	orrs	r3, r1
 8006bc4:	f040 80a7 	bne.w	8006d16 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006bc8:	4b4c      	ldr	r3, [pc, #304]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bcc:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006bd0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006bd8:	d055      	beq.n	8006c86 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8006bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bdc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006be0:	f200 8096 	bhi.w	8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006bea:	f000 8084 	beq.w	8006cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006bf4:	f200 808c 	bhi.w	8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006bfe:	d030      	beq.n	8006c62 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8006c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c06:	f200 8083 	bhi.w	8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d004      	beq.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c12:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006c16:	d012      	beq.n	8006c3e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8006c18:	e07a      	b.n	8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c1a:	4b38      	ldr	r3, [pc, #224]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c26:	d107      	bne.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f000 fe0b 	bl	8007848 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c34:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c36:	e340      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c3c:	e33d      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c3e:	4b2f      	ldr	r3, [pc, #188]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c4a:	d107      	bne.n	8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c4c:	f107 0318 	add.w	r3, r7, #24
 8006c50:	4618      	mov	r0, r3
 8006c52:	f000 fb51 	bl	80072f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c5a:	e32e      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c60:	e32b      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006c62:	4b26      	ldr	r3, [pc, #152]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c6e:	d107      	bne.n	8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c70:	f107 030c 	add.w	r3, r7, #12
 8006c74:	4618      	mov	r0, r3
 8006c76:	f000 fc93 	bl	80075a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c7e:	e31c      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c80:	2300      	movs	r3, #0
 8006c82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c84:	e319      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006c86:	4b1d      	ldr	r3, [pc, #116]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c8a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006c8e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006c90:	4b1a      	ldr	r3, [pc, #104]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 0304 	and.w	r3, r3, #4
 8006c98:	2b04      	cmp	r3, #4
 8006c9a:	d10c      	bne.n	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d109      	bne.n	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ca2:	4b16      	ldr	r3, [pc, #88]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	08db      	lsrs	r3, r3, #3
 8006ca8:	f003 0303 	and.w	r3, r3, #3
 8006cac:	4a14      	ldr	r2, [pc, #80]	; (8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006cae:	fa22 f303 	lsr.w	r3, r2, r3
 8006cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cb4:	e01e      	b.n	8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006cb6:	4b11      	ldr	r3, [pc, #68]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cc2:	d106      	bne.n	8006cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cca:	d102      	bne.n	8006cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006ccc:	4b0d      	ldr	r3, [pc, #52]	; (8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006cce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cd0:	e010      	b.n	8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006cd2:	4b0a      	ldr	r3, [pc, #40]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cde:	d106      	bne.n	8006cee <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8006ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ce2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ce6:	d102      	bne.n	8006cee <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006ce8:	4b07      	ldr	r3, [pc, #28]	; (8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006cea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cec:	e002      	b.n	8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006cf2:	e2e2      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006cf4:	e2e1      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006cf6:	4b05      	ldr	r3, [pc, #20]	; (8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cfa:	e2de      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006cfc:	58024400 	.word	0x58024400
 8006d00:	03d09000 	.word	0x03d09000
 8006d04:	003d0900 	.word	0x003d0900
 8006d08:	007a1200 	.word	0x007a1200
 8006d0c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8006d10:	2300      	movs	r3, #0
 8006d12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d14:	e2d1      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006d16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d1a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8006d1e:	430b      	orrs	r3, r1
 8006d20:	f040 809c 	bne.w	8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006d24:	4b93      	ldr	r3, [pc, #588]	; (8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d28:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006d2c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d34:	d054      	beq.n	8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d3c:	f200 808b 	bhi.w	8006e56 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d42:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d46:	f000 8083 	beq.w	8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d4c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d50:	f200 8081 	bhi.w	8006e56 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d5a:	d02f      	beq.n	8006dbc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d62:	d878      	bhi.n	8006e56 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d004      	beq.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d70:	d012      	beq.n	8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006d72:	e070      	b.n	8006e56 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006d74:	4b7f      	ldr	r3, [pc, #508]	; (8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d80:	d107      	bne.n	8006d92 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d86:	4618      	mov	r0, r3
 8006d88:	f000 fd5e 	bl	8007848 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d90:	e293      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d92:	2300      	movs	r3, #0
 8006d94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d96:	e290      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006d98:	4b76      	ldr	r3, [pc, #472]	; (8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006da0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006da4:	d107      	bne.n	8006db6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006da6:	f107 0318 	add.w	r3, r7, #24
 8006daa:	4618      	mov	r0, r3
 8006dac:	f000 faa4 	bl	80072f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006db0:	69bb      	ldr	r3, [r7, #24]
 8006db2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006db4:	e281      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006db6:	2300      	movs	r3, #0
 8006db8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006dba:	e27e      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006dbc:	4b6d      	ldr	r3, [pc, #436]	; (8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006dc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006dc8:	d107      	bne.n	8006dda <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006dca:	f107 030c 	add.w	r3, r7, #12
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f000 fbe6 	bl	80075a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006dd8:	e26f      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006dde:	e26c      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006de0:	4b64      	ldr	r3, [pc, #400]	; (8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006de4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006de8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006dea:	4b62      	ldr	r3, [pc, #392]	; (8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f003 0304 	and.w	r3, r3, #4
 8006df2:	2b04      	cmp	r3, #4
 8006df4:	d10c      	bne.n	8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d109      	bne.n	8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006dfc:	4b5d      	ldr	r3, [pc, #372]	; (8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	08db      	lsrs	r3, r3, #3
 8006e02:	f003 0303 	and.w	r3, r3, #3
 8006e06:	4a5c      	ldr	r2, [pc, #368]	; (8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006e08:	fa22 f303 	lsr.w	r3, r2, r3
 8006e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e0e:	e01e      	b.n	8006e4e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e10:	4b58      	ldr	r3, [pc, #352]	; (8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e1c:	d106      	bne.n	8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e24:	d102      	bne.n	8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006e26:	4b55      	ldr	r3, [pc, #340]	; (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006e28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e2a:	e010      	b.n	8006e4e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e2c:	4b51      	ldr	r3, [pc, #324]	; (8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e38:	d106      	bne.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e40:	d102      	bne.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006e42:	4b4f      	ldr	r3, [pc, #316]	; (8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006e44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e46:	e002      	b.n	8006e4e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006e4c:	e235      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006e4e:	e234      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006e50:	4b4c      	ldr	r3, [pc, #304]	; (8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006e52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e54:	e231      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006e56:	2300      	movs	r3, #0
 8006e58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e5a:	e22e      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006e5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e60:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8006e64:	430b      	orrs	r3, r1
 8006e66:	f040 808f 	bne.w	8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006e6a:	4b42      	ldr	r3, [pc, #264]	; (8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e6e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006e72:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8006e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e7a:	d06b      	beq.n	8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e7e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e82:	d874      	bhi.n	8006f6e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e86:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006e8a:	d056      	beq.n	8006f3a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e8e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006e92:	d86c      	bhi.n	8006f6e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e96:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006e9a:	d03b      	beq.n	8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e9e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006ea2:	d864      	bhi.n	8006f6e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006eaa:	d021      	beq.n	8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006eb2:	d85c      	bhi.n	8006f6e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d004      	beq.n	8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ec0:	d004      	beq.n	8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006ec2:	e054      	b.n	8006f6e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006ec4:	f7fe fa4c 	bl	8005360 <HAL_RCC_GetPCLK1Freq>
 8006ec8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006eca:	e1f6      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ecc:	4b29      	ldr	r3, [pc, #164]	; (8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ed4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ed8:	d107      	bne.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006eda:	f107 0318 	add.w	r3, r7, #24
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f000 fa0a 	bl	80072f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ee8:	e1e7      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006eea:	2300      	movs	r3, #0
 8006eec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006eee:	e1e4      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006ef0:	4b20      	ldr	r3, [pc, #128]	; (8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ef8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006efc:	d107      	bne.n	8006f0e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006efe:	f107 030c 	add.w	r3, r7, #12
 8006f02:	4618      	mov	r0, r3
 8006f04:	f000 fb4c 	bl	80075a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f0c:	e1d5      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f12:	e1d2      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f14:	4b17      	ldr	r3, [pc, #92]	; (8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 0304 	and.w	r3, r3, #4
 8006f1c:	2b04      	cmp	r3, #4
 8006f1e:	d109      	bne.n	8006f34 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f20:	4b14      	ldr	r3, [pc, #80]	; (8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	08db      	lsrs	r3, r3, #3
 8006f26:	f003 0303 	and.w	r3, r3, #3
 8006f2a:	4a13      	ldr	r2, [pc, #76]	; (8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8006f30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f32:	e1c2      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f34:	2300      	movs	r3, #0
 8006f36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f38:	e1bf      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006f3a:	4b0e      	ldr	r3, [pc, #56]	; (8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f46:	d102      	bne.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8006f48:	4b0c      	ldr	r3, [pc, #48]	; (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f4c:	e1b5      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f52:	e1b2      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006f54:	4b07      	ldr	r3, [pc, #28]	; (8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f60:	d102      	bne.n	8006f68 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8006f62:	4b07      	ldr	r3, [pc, #28]	; (8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006f64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f66:	e1a8      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f6c:	e1a5      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f72:	e1a2      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006f74:	58024400 	.word	0x58024400
 8006f78:	03d09000 	.word	0x03d09000
 8006f7c:	003d0900 	.word	0x003d0900
 8006f80:	007a1200 	.word	0x007a1200
 8006f84:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006f88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f8c:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8006f90:	430b      	orrs	r3, r1
 8006f92:	d173      	bne.n	800707c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006f94:	4b9c      	ldr	r3, [pc, #624]	; (8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006f9c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fa4:	d02f      	beq.n	8007006 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fac:	d863      	bhi.n	8007076 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8006fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d004      	beq.n	8006fbe <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8006fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fba:	d012      	beq.n	8006fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006fbc:	e05b      	b.n	8007076 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006fbe:	4b92      	ldr	r3, [pc, #584]	; (8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fca:	d107      	bne.n	8006fdc <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fcc:	f107 0318 	add.w	r3, r7, #24
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f000 f991 	bl	80072f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006fd6:	69bb      	ldr	r3, [r7, #24]
 8006fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fda:	e16e      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fe0:	e16b      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006fe2:	4b89      	ldr	r3, [pc, #548]	; (8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fee:	d107      	bne.n	8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ff0:	f107 030c 	add.w	r3, r7, #12
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f000 fad3 	bl	80075a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ffe:	e15c      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007000:	2300      	movs	r3, #0
 8007002:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007004:	e159      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007006:	4b80      	ldr	r3, [pc, #512]	; (8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800700a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800700e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007010:	4b7d      	ldr	r3, [pc, #500]	; (8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f003 0304 	and.w	r3, r3, #4
 8007018:	2b04      	cmp	r3, #4
 800701a:	d10c      	bne.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800701c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800701e:	2b00      	cmp	r3, #0
 8007020:	d109      	bne.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007022:	4b79      	ldr	r3, [pc, #484]	; (8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	08db      	lsrs	r3, r3, #3
 8007028:	f003 0303 	and.w	r3, r3, #3
 800702c:	4a77      	ldr	r2, [pc, #476]	; (800720c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800702e:	fa22 f303 	lsr.w	r3, r2, r3
 8007032:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007034:	e01e      	b.n	8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007036:	4b74      	ldr	r3, [pc, #464]	; (8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800703e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007042:	d106      	bne.n	8007052 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8007044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007046:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800704a:	d102      	bne.n	8007052 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800704c:	4b70      	ldr	r3, [pc, #448]	; (8007210 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800704e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007050:	e010      	b.n	8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007052:	4b6d      	ldr	r3, [pc, #436]	; (8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800705a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800705e:	d106      	bne.n	800706e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007062:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007066:	d102      	bne.n	800706e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007068:	4b6a      	ldr	r3, [pc, #424]	; (8007214 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800706a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800706c:	e002      	b.n	8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800706e:	2300      	movs	r3, #0
 8007070:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007072:	e122      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007074:	e121      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007076:	2300      	movs	r3, #0
 8007078:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800707a:	e11e      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800707c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007080:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8007084:	430b      	orrs	r3, r1
 8007086:	d133      	bne.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007088:	4b5f      	ldr	r3, [pc, #380]	; (8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800708a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800708c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007090:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007094:	2b00      	cmp	r3, #0
 8007096:	d004      	beq.n	80070a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800709a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800709e:	d012      	beq.n	80070c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80070a0:	e023      	b.n	80070ea <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80070a2:	4b59      	ldr	r3, [pc, #356]	; (8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070ae:	d107      	bne.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80070b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070b4:	4618      	mov	r0, r3
 80070b6:	f000 fbc7 	bl	8007848 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80070ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070be:	e0fc      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070c0:	2300      	movs	r3, #0
 80070c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070c4:	e0f9      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070c6:	4b50      	ldr	r3, [pc, #320]	; (8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070d2:	d107      	bne.n	80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070d4:	f107 0318 	add.w	r3, r7, #24
 80070d8:	4618      	mov	r0, r3
 80070da:	f000 f90d 	bl	80072f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80070de:	6a3b      	ldr	r3, [r7, #32]
 80070e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070e2:	e0ea      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070e4:	2300      	movs	r3, #0
 80070e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070e8:	e0e7      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80070ea:	2300      	movs	r3, #0
 80070ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070ee:	e0e4      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80070f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070f4:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80070f8:	430b      	orrs	r3, r1
 80070fa:	f040 808d 	bne.w	8007218 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80070fe:	4b42      	ldr	r3, [pc, #264]	; (8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007102:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007106:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800710a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800710e:	d06b      	beq.n	80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007112:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007116:	d874      	bhi.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800711a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800711e:	d056      	beq.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007126:	d86c      	bhi.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800712a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800712e:	d03b      	beq.n	80071a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007132:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007136:	d864      	bhi.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800713a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800713e:	d021      	beq.n	8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007142:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007146:	d85c      	bhi.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800714a:	2b00      	cmp	r3, #0
 800714c:	d004      	beq.n	8007158 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800714e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007150:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007154:	d004      	beq.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8007156:	e054      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007158:	f000 f8b8 	bl	80072cc <HAL_RCCEx_GetD3PCLK1Freq>
 800715c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800715e:	e0ac      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007160:	4b29      	ldr	r3, [pc, #164]	; (8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007168:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800716c:	d107      	bne.n	800717e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800716e:	f107 0318 	add.w	r3, r7, #24
 8007172:	4618      	mov	r0, r3
 8007174:	f000 f8c0 	bl	80072f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800717c:	e09d      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800717e:	2300      	movs	r3, #0
 8007180:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007182:	e09a      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007184:	4b20      	ldr	r3, [pc, #128]	; (8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800718c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007190:	d107      	bne.n	80071a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007192:	f107 030c 	add.w	r3, r7, #12
 8007196:	4618      	mov	r0, r3
 8007198:	f000 fa02 	bl	80075a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071a0:	e08b      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071a2:	2300      	movs	r3, #0
 80071a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071a6:	e088      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80071a8:	4b17      	ldr	r3, [pc, #92]	; (8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f003 0304 	and.w	r3, r3, #4
 80071b0:	2b04      	cmp	r3, #4
 80071b2:	d109      	bne.n	80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80071b4:	4b14      	ldr	r3, [pc, #80]	; (8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	08db      	lsrs	r3, r3, #3
 80071ba:	f003 0303 	and.w	r3, r3, #3
 80071be:	4a13      	ldr	r2, [pc, #76]	; (800720c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80071c0:	fa22 f303 	lsr.w	r3, r2, r3
 80071c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071c6:	e078      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071c8:	2300      	movs	r3, #0
 80071ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071cc:	e075      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80071ce:	4b0e      	ldr	r3, [pc, #56]	; (8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071da:	d102      	bne.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80071dc:	4b0c      	ldr	r3, [pc, #48]	; (8007210 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80071de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071e0:	e06b      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071e2:	2300      	movs	r3, #0
 80071e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071e6:	e068      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80071e8:	4b07      	ldr	r3, [pc, #28]	; (8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071f4:	d102      	bne.n	80071fc <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80071f6:	4b07      	ldr	r3, [pc, #28]	; (8007214 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80071f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071fa:	e05e      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071fc:	2300      	movs	r3, #0
 80071fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007200:	e05b      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007202:	2300      	movs	r3, #0
 8007204:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007206:	e058      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007208:	58024400 	.word	0x58024400
 800720c:	03d09000 	.word	0x03d09000
 8007210:	003d0900 	.word	0x003d0900
 8007214:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007218:	e9d7 2300 	ldrd	r2, r3, [r7]
 800721c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8007220:	430b      	orrs	r3, r1
 8007222:	d148      	bne.n	80072b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007224:	4b27      	ldr	r3, [pc, #156]	; (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007228:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800722c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800722e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007230:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007234:	d02a      	beq.n	800728c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8007236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007238:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800723c:	d838      	bhi.n	80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800723e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007240:	2b00      	cmp	r3, #0
 8007242:	d004      	beq.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007246:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800724a:	d00d      	beq.n	8007268 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800724c:	e030      	b.n	80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800724e:	4b1d      	ldr	r3, [pc, #116]	; (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007256:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800725a:	d102      	bne.n	8007262 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800725c:	4b1a      	ldr	r3, [pc, #104]	; (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800725e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007260:	e02b      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007262:	2300      	movs	r3, #0
 8007264:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007266:	e028      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007268:	4b16      	ldr	r3, [pc, #88]	; (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007270:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007274:	d107      	bne.n	8007286 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007276:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800727a:	4618      	mov	r0, r3
 800727c:	f000 fae4 	bl	8007848 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007282:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007284:	e019      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007286:	2300      	movs	r3, #0
 8007288:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800728a:	e016      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800728c:	4b0d      	ldr	r3, [pc, #52]	; (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007294:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007298:	d107      	bne.n	80072aa <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800729a:	f107 0318 	add.w	r3, r7, #24
 800729e:	4618      	mov	r0, r3
 80072a0:	f000 f82a 	bl	80072f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072a8:	e007      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072aa:	2300      	movs	r3, #0
 80072ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072ae:	e004      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80072b0:	2300      	movs	r3, #0
 80072b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072b4:	e001      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80072b6:	2300      	movs	r3, #0
 80072b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 80072ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3740      	adds	r7, #64	; 0x40
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}
 80072c4:	58024400 	.word	0x58024400
 80072c8:	007a1200 	.word	0x007a1200

080072cc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80072d0:	f7fe f816 	bl	8005300 <HAL_RCC_GetHCLKFreq>
 80072d4:	4602      	mov	r2, r0
 80072d6:	4b06      	ldr	r3, [pc, #24]	; (80072f0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80072d8:	6a1b      	ldr	r3, [r3, #32]
 80072da:	091b      	lsrs	r3, r3, #4
 80072dc:	f003 0307 	and.w	r3, r3, #7
 80072e0:	4904      	ldr	r1, [pc, #16]	; (80072f4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80072e2:	5ccb      	ldrb	r3, [r1, r3]
 80072e4:	f003 031f 	and.w	r3, r3, #31
 80072e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	58024400 	.word	0x58024400
 80072f4:	0800dcac 	.word	0x0800dcac

080072f8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b089      	sub	sp, #36	; 0x24
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007300:	4ba1      	ldr	r3, [pc, #644]	; (8007588 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007304:	f003 0303 	and.w	r3, r3, #3
 8007308:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800730a:	4b9f      	ldr	r3, [pc, #636]	; (8007588 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800730c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800730e:	0b1b      	lsrs	r3, r3, #12
 8007310:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007314:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007316:	4b9c      	ldr	r3, [pc, #624]	; (8007588 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800731a:	091b      	lsrs	r3, r3, #4
 800731c:	f003 0301 	and.w	r3, r3, #1
 8007320:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007322:	4b99      	ldr	r3, [pc, #612]	; (8007588 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007326:	08db      	lsrs	r3, r3, #3
 8007328:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800732c:	693a      	ldr	r2, [r7, #16]
 800732e:	fb02 f303 	mul.w	r3, r2, r3
 8007332:	ee07 3a90 	vmov	s15, r3
 8007336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800733a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	2b00      	cmp	r3, #0
 8007342:	f000 8111 	beq.w	8007568 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007346:	69bb      	ldr	r3, [r7, #24]
 8007348:	2b02      	cmp	r3, #2
 800734a:	f000 8083 	beq.w	8007454 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800734e:	69bb      	ldr	r3, [r7, #24]
 8007350:	2b02      	cmp	r3, #2
 8007352:	f200 80a1 	bhi.w	8007498 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007356:	69bb      	ldr	r3, [r7, #24]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d003      	beq.n	8007364 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	2b01      	cmp	r3, #1
 8007360:	d056      	beq.n	8007410 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007362:	e099      	b.n	8007498 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007364:	4b88      	ldr	r3, [pc, #544]	; (8007588 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f003 0320 	and.w	r3, r3, #32
 800736c:	2b00      	cmp	r3, #0
 800736e:	d02d      	beq.n	80073cc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007370:	4b85      	ldr	r3, [pc, #532]	; (8007588 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	08db      	lsrs	r3, r3, #3
 8007376:	f003 0303 	and.w	r3, r3, #3
 800737a:	4a84      	ldr	r2, [pc, #528]	; (800758c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800737c:	fa22 f303 	lsr.w	r3, r2, r3
 8007380:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	ee07 3a90 	vmov	s15, r3
 8007388:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	ee07 3a90 	vmov	s15, r3
 8007392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800739a:	4b7b      	ldr	r3, [pc, #492]	; (8007588 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800739c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800739e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073a2:	ee07 3a90 	vmov	s15, r3
 80073a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80073ae:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007590 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80073b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073c6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80073ca:	e087      	b.n	80074dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	ee07 3a90 	vmov	s15, r3
 80073d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073d6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007594 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80073da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073de:	4b6a      	ldr	r3, [pc, #424]	; (8007588 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073e6:	ee07 3a90 	vmov	s15, r3
 80073ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80073f2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007590 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80073f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800740a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800740e:	e065      	b.n	80074dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	ee07 3a90 	vmov	s15, r3
 8007416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800741a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007598 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800741e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007422:	4b59      	ldr	r3, [pc, #356]	; (8007588 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800742a:	ee07 3a90 	vmov	s15, r3
 800742e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007432:	ed97 6a03 	vldr	s12, [r7, #12]
 8007436:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007590 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800743a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800743e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007442:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007446:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800744a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800744e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007452:	e043      	b.n	80074dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	ee07 3a90 	vmov	s15, r3
 800745a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800745e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800759c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007466:	4b48      	ldr	r3, [pc, #288]	; (8007588 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800746a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800746e:	ee07 3a90 	vmov	s15, r3
 8007472:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007476:	ed97 6a03 	vldr	s12, [r7, #12]
 800747a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007590 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800747e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007482:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007486:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800748a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800748e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007492:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007496:	e021      	b.n	80074dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	ee07 3a90 	vmov	s15, r3
 800749e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074a2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007598 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80074a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074aa:	4b37      	ldr	r3, [pc, #220]	; (8007588 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074b2:	ee07 3a90 	vmov	s15, r3
 80074b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80074be:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007590 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80074c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074da:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80074dc:	4b2a      	ldr	r3, [pc, #168]	; (8007588 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e0:	0a5b      	lsrs	r3, r3, #9
 80074e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074e6:	ee07 3a90 	vmov	s15, r3
 80074ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80074fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007502:	ee17 2a90 	vmov	r2, s15
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800750a:	4b1f      	ldr	r3, [pc, #124]	; (8007588 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800750c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800750e:	0c1b      	lsrs	r3, r3, #16
 8007510:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007514:	ee07 3a90 	vmov	s15, r3
 8007518:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800751c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007520:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007524:	edd7 6a07 	vldr	s13, [r7, #28]
 8007528:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800752c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007530:	ee17 2a90 	vmov	r2, s15
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007538:	4b13      	ldr	r3, [pc, #76]	; (8007588 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800753a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800753c:	0e1b      	lsrs	r3, r3, #24
 800753e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007542:	ee07 3a90 	vmov	s15, r3
 8007546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800754a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800754e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007552:	edd7 6a07 	vldr	s13, [r7, #28]
 8007556:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800755a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800755e:	ee17 2a90 	vmov	r2, s15
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007566:	e008      	b.n	800757a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	609a      	str	r2, [r3, #8]
}
 800757a:	bf00      	nop
 800757c:	3724      	adds	r7, #36	; 0x24
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr
 8007586:	bf00      	nop
 8007588:	58024400 	.word	0x58024400
 800758c:	03d09000 	.word	0x03d09000
 8007590:	46000000 	.word	0x46000000
 8007594:	4c742400 	.word	0x4c742400
 8007598:	4a742400 	.word	0x4a742400
 800759c:	4af42400 	.word	0x4af42400

080075a0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b089      	sub	sp, #36	; 0x24
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80075a8:	4ba1      	ldr	r3, [pc, #644]	; (8007830 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ac:	f003 0303 	and.w	r3, r3, #3
 80075b0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80075b2:	4b9f      	ldr	r3, [pc, #636]	; (8007830 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b6:	0d1b      	lsrs	r3, r3, #20
 80075b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075bc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80075be:	4b9c      	ldr	r3, [pc, #624]	; (8007830 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c2:	0a1b      	lsrs	r3, r3, #8
 80075c4:	f003 0301 	and.w	r3, r3, #1
 80075c8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80075ca:	4b99      	ldr	r3, [pc, #612]	; (8007830 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075ce:	08db      	lsrs	r3, r3, #3
 80075d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80075d4:	693a      	ldr	r2, [r7, #16]
 80075d6:	fb02 f303 	mul.w	r3, r2, r3
 80075da:	ee07 3a90 	vmov	s15, r3
 80075de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	f000 8111 	beq.w	8007810 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80075ee:	69bb      	ldr	r3, [r7, #24]
 80075f0:	2b02      	cmp	r3, #2
 80075f2:	f000 8083 	beq.w	80076fc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80075f6:	69bb      	ldr	r3, [r7, #24]
 80075f8:	2b02      	cmp	r3, #2
 80075fa:	f200 80a1 	bhi.w	8007740 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80075fe:	69bb      	ldr	r3, [r7, #24]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d003      	beq.n	800760c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007604:	69bb      	ldr	r3, [r7, #24]
 8007606:	2b01      	cmp	r3, #1
 8007608:	d056      	beq.n	80076b8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800760a:	e099      	b.n	8007740 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800760c:	4b88      	ldr	r3, [pc, #544]	; (8007830 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f003 0320 	and.w	r3, r3, #32
 8007614:	2b00      	cmp	r3, #0
 8007616:	d02d      	beq.n	8007674 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007618:	4b85      	ldr	r3, [pc, #532]	; (8007830 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	08db      	lsrs	r3, r3, #3
 800761e:	f003 0303 	and.w	r3, r3, #3
 8007622:	4a84      	ldr	r2, [pc, #528]	; (8007834 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007624:	fa22 f303 	lsr.w	r3, r2, r3
 8007628:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	ee07 3a90 	vmov	s15, r3
 8007630:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	ee07 3a90 	vmov	s15, r3
 800763a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800763e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007642:	4b7b      	ldr	r3, [pc, #492]	; (8007830 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800764a:	ee07 3a90 	vmov	s15, r3
 800764e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007652:	ed97 6a03 	vldr	s12, [r7, #12]
 8007656:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007838 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800765a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800765e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007662:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007666:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800766a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800766e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007672:	e087      	b.n	8007784 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	ee07 3a90 	vmov	s15, r3
 800767a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800767e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800783c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007682:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007686:	4b6a      	ldr	r3, [pc, #424]	; (8007830 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800768a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800768e:	ee07 3a90 	vmov	s15, r3
 8007692:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007696:	ed97 6a03 	vldr	s12, [r7, #12]
 800769a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007838 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800769e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076b6:	e065      	b.n	8007784 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	ee07 3a90 	vmov	s15, r3
 80076be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076c2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007840 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80076c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076ca:	4b59      	ldr	r3, [pc, #356]	; (8007830 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076d2:	ee07 3a90 	vmov	s15, r3
 80076d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076da:	ed97 6a03 	vldr	s12, [r7, #12]
 80076de:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007838 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80076e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076fa:	e043      	b.n	8007784 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	ee07 3a90 	vmov	s15, r3
 8007702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007706:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007844 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800770a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800770e:	4b48      	ldr	r3, [pc, #288]	; (8007830 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007716:	ee07 3a90 	vmov	s15, r3
 800771a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800771e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007722:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007838 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800772a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800772e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800773a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800773e:	e021      	b.n	8007784 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	ee07 3a90 	vmov	s15, r3
 8007746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800774a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007840 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800774e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007752:	4b37      	ldr	r3, [pc, #220]	; (8007830 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800775a:	ee07 3a90 	vmov	s15, r3
 800775e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007762:	ed97 6a03 	vldr	s12, [r7, #12]
 8007766:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007838 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800776a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800776e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007772:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800777a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800777e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007782:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007784:	4b2a      	ldr	r3, [pc, #168]	; (8007830 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007788:	0a5b      	lsrs	r3, r3, #9
 800778a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800778e:	ee07 3a90 	vmov	s15, r3
 8007792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007796:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800779a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800779e:	edd7 6a07 	vldr	s13, [r7, #28]
 80077a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077aa:	ee17 2a90 	vmov	r2, s15
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80077b2:	4b1f      	ldr	r3, [pc, #124]	; (8007830 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b6:	0c1b      	lsrs	r3, r3, #16
 80077b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077bc:	ee07 3a90 	vmov	s15, r3
 80077c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80077d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077d8:	ee17 2a90 	vmov	r2, s15
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80077e0:	4b13      	ldr	r3, [pc, #76]	; (8007830 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e4:	0e1b      	lsrs	r3, r3, #24
 80077e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077ea:	ee07 3a90 	vmov	s15, r3
 80077ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80077fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007802:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007806:	ee17 2a90 	vmov	r2, s15
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800780e:	e008      	b.n	8007822 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2200      	movs	r2, #0
 800781a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	609a      	str	r2, [r3, #8]
}
 8007822:	bf00      	nop
 8007824:	3724      	adds	r7, #36	; 0x24
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr
 800782e:	bf00      	nop
 8007830:	58024400 	.word	0x58024400
 8007834:	03d09000 	.word	0x03d09000
 8007838:	46000000 	.word	0x46000000
 800783c:	4c742400 	.word	0x4c742400
 8007840:	4a742400 	.word	0x4a742400
 8007844:	4af42400 	.word	0x4af42400

08007848 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007848:	b480      	push	{r7}
 800784a:	b089      	sub	sp, #36	; 0x24
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007850:	4ba0      	ldr	r3, [pc, #640]	; (8007ad4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007854:	f003 0303 	and.w	r3, r3, #3
 8007858:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800785a:	4b9e      	ldr	r3, [pc, #632]	; (8007ad4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800785c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800785e:	091b      	lsrs	r3, r3, #4
 8007860:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007864:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007866:	4b9b      	ldr	r3, [pc, #620]	; (8007ad4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800786a:	f003 0301 	and.w	r3, r3, #1
 800786e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007870:	4b98      	ldr	r3, [pc, #608]	; (8007ad4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007874:	08db      	lsrs	r3, r3, #3
 8007876:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800787a:	693a      	ldr	r2, [r7, #16]
 800787c:	fb02 f303 	mul.w	r3, r2, r3
 8007880:	ee07 3a90 	vmov	s15, r3
 8007884:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007888:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	2b00      	cmp	r3, #0
 8007890:	f000 8111 	beq.w	8007ab6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007894:	69bb      	ldr	r3, [r7, #24]
 8007896:	2b02      	cmp	r3, #2
 8007898:	f000 8083 	beq.w	80079a2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800789c:	69bb      	ldr	r3, [r7, #24]
 800789e:	2b02      	cmp	r3, #2
 80078a0:	f200 80a1 	bhi.w	80079e6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80078a4:	69bb      	ldr	r3, [r7, #24]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d003      	beq.n	80078b2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80078aa:	69bb      	ldr	r3, [r7, #24]
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d056      	beq.n	800795e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80078b0:	e099      	b.n	80079e6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078b2:	4b88      	ldr	r3, [pc, #544]	; (8007ad4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f003 0320 	and.w	r3, r3, #32
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d02d      	beq.n	800791a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80078be:	4b85      	ldr	r3, [pc, #532]	; (8007ad4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	08db      	lsrs	r3, r3, #3
 80078c4:	f003 0303 	and.w	r3, r3, #3
 80078c8:	4a83      	ldr	r2, [pc, #524]	; (8007ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80078ca:	fa22 f303 	lsr.w	r3, r2, r3
 80078ce:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	ee07 3a90 	vmov	s15, r3
 80078d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	ee07 3a90 	vmov	s15, r3
 80078e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078e8:	4b7a      	ldr	r3, [pc, #488]	; (8007ad4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078f0:	ee07 3a90 	vmov	s15, r3
 80078f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80078fc:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007adc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007900:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007904:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007908:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800790c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007910:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007914:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007918:	e087      	b.n	8007a2a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	ee07 3a90 	vmov	s15, r3
 8007920:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007924:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007ae0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007928:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800792c:	4b69      	ldr	r3, [pc, #420]	; (8007ad4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800792e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007930:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007934:	ee07 3a90 	vmov	s15, r3
 8007938:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800793c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007940:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007adc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007944:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007948:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800794c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007950:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007954:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007958:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800795c:	e065      	b.n	8007a2a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	ee07 3a90 	vmov	s15, r3
 8007964:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007968:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007ae4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800796c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007970:	4b58      	ldr	r3, [pc, #352]	; (8007ad4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007978:	ee07 3a90 	vmov	s15, r3
 800797c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007980:	ed97 6a03 	vldr	s12, [r7, #12]
 8007984:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007adc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007988:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800798c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007990:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007994:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007998:	ee67 7a27 	vmul.f32	s15, s14, s15
 800799c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079a0:	e043      	b.n	8007a2a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	ee07 3a90 	vmov	s15, r3
 80079a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ac:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007ae8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80079b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079b4:	4b47      	ldr	r3, [pc, #284]	; (8007ad4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079bc:	ee07 3a90 	vmov	s15, r3
 80079c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80079c8:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007adc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80079cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079e4:	e021      	b.n	8007a2a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	ee07 3a90 	vmov	s15, r3
 80079ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079f0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007ae0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80079f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079f8:	4b36      	ldr	r3, [pc, #216]	; (8007ad4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a00:	ee07 3a90 	vmov	s15, r3
 8007a04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a08:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a0c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007adc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007a10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a24:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a28:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007a2a:	4b2a      	ldr	r3, [pc, #168]	; (8007ad4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a2e:	0a5b      	lsrs	r3, r3, #9
 8007a30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a34:	ee07 3a90 	vmov	s15, r3
 8007a38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a40:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a44:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a50:	ee17 2a90 	vmov	r2, s15
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007a58:	4b1e      	ldr	r3, [pc, #120]	; (8007ad4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a5c:	0c1b      	lsrs	r3, r3, #16
 8007a5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a62:	ee07 3a90 	vmov	s15, r3
 8007a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a72:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a7e:	ee17 2a90 	vmov	r2, s15
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007a86:	4b13      	ldr	r3, [pc, #76]	; (8007ad4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a8a:	0e1b      	lsrs	r3, r3, #24
 8007a8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a90:	ee07 3a90 	vmov	s15, r3
 8007a94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007aa0:	edd7 6a07 	vldr	s13, [r7, #28]
 8007aa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007aa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007aac:	ee17 2a90 	vmov	r2, s15
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007ab4:	e008      	b.n	8007ac8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	609a      	str	r2, [r3, #8]
}
 8007ac8:	bf00      	nop
 8007aca:	3724      	adds	r7, #36	; 0x24
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr
 8007ad4:	58024400 	.word	0x58024400
 8007ad8:	03d09000 	.word	0x03d09000
 8007adc:	46000000 	.word	0x46000000
 8007ae0:	4c742400 	.word	0x4c742400
 8007ae4:	4a742400 	.word	0x4a742400
 8007ae8:	4af42400 	.word	0x4af42400

08007aec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007af6:	2300      	movs	r3, #0
 8007af8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007afa:	4b53      	ldr	r3, [pc, #332]	; (8007c48 <RCCEx_PLL2_Config+0x15c>)
 8007afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007afe:	f003 0303 	and.w	r3, r3, #3
 8007b02:	2b03      	cmp	r3, #3
 8007b04:	d101      	bne.n	8007b0a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	e099      	b.n	8007c3e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007b0a:	4b4f      	ldr	r3, [pc, #316]	; (8007c48 <RCCEx_PLL2_Config+0x15c>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a4e      	ldr	r2, [pc, #312]	; (8007c48 <RCCEx_PLL2_Config+0x15c>)
 8007b10:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007b14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b16:	f7fa f847 	bl	8001ba8 <HAL_GetTick>
 8007b1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007b1c:	e008      	b.n	8007b30 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007b1e:	f7fa f843 	bl	8001ba8 <HAL_GetTick>
 8007b22:	4602      	mov	r2, r0
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	1ad3      	subs	r3, r2, r3
 8007b28:	2b02      	cmp	r3, #2
 8007b2a:	d901      	bls.n	8007b30 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007b2c:	2303      	movs	r3, #3
 8007b2e:	e086      	b.n	8007c3e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007b30:	4b45      	ldr	r3, [pc, #276]	; (8007c48 <RCCEx_PLL2_Config+0x15c>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d1f0      	bne.n	8007b1e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007b3c:	4b42      	ldr	r3, [pc, #264]	; (8007c48 <RCCEx_PLL2_Config+0x15c>)
 8007b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b40:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	031b      	lsls	r3, r3, #12
 8007b4a:	493f      	ldr	r1, [pc, #252]	; (8007c48 <RCCEx_PLL2_Config+0x15c>)
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	628b      	str	r3, [r1, #40]	; 0x28
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	3b01      	subs	r3, #1
 8007b56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	689b      	ldr	r3, [r3, #8]
 8007b5e:	3b01      	subs	r3, #1
 8007b60:	025b      	lsls	r3, r3, #9
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	431a      	orrs	r2, r3
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	68db      	ldr	r3, [r3, #12]
 8007b6a:	3b01      	subs	r3, #1
 8007b6c:	041b      	lsls	r3, r3, #16
 8007b6e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007b72:	431a      	orrs	r2, r3
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	691b      	ldr	r3, [r3, #16]
 8007b78:	3b01      	subs	r3, #1
 8007b7a:	061b      	lsls	r3, r3, #24
 8007b7c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007b80:	4931      	ldr	r1, [pc, #196]	; (8007c48 <RCCEx_PLL2_Config+0x15c>)
 8007b82:	4313      	orrs	r3, r2
 8007b84:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007b86:	4b30      	ldr	r3, [pc, #192]	; (8007c48 <RCCEx_PLL2_Config+0x15c>)
 8007b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b8a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	695b      	ldr	r3, [r3, #20]
 8007b92:	492d      	ldr	r1, [pc, #180]	; (8007c48 <RCCEx_PLL2_Config+0x15c>)
 8007b94:	4313      	orrs	r3, r2
 8007b96:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007b98:	4b2b      	ldr	r3, [pc, #172]	; (8007c48 <RCCEx_PLL2_Config+0x15c>)
 8007b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b9c:	f023 0220 	bic.w	r2, r3, #32
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	699b      	ldr	r3, [r3, #24]
 8007ba4:	4928      	ldr	r1, [pc, #160]	; (8007c48 <RCCEx_PLL2_Config+0x15c>)
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007baa:	4b27      	ldr	r3, [pc, #156]	; (8007c48 <RCCEx_PLL2_Config+0x15c>)
 8007bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bae:	4a26      	ldr	r2, [pc, #152]	; (8007c48 <RCCEx_PLL2_Config+0x15c>)
 8007bb0:	f023 0310 	bic.w	r3, r3, #16
 8007bb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007bb6:	4b24      	ldr	r3, [pc, #144]	; (8007c48 <RCCEx_PLL2_Config+0x15c>)
 8007bb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007bba:	4b24      	ldr	r3, [pc, #144]	; (8007c4c <RCCEx_PLL2_Config+0x160>)
 8007bbc:	4013      	ands	r3, r2
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	69d2      	ldr	r2, [r2, #28]
 8007bc2:	00d2      	lsls	r2, r2, #3
 8007bc4:	4920      	ldr	r1, [pc, #128]	; (8007c48 <RCCEx_PLL2_Config+0x15c>)
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007bca:	4b1f      	ldr	r3, [pc, #124]	; (8007c48 <RCCEx_PLL2_Config+0x15c>)
 8007bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bce:	4a1e      	ldr	r2, [pc, #120]	; (8007c48 <RCCEx_PLL2_Config+0x15c>)
 8007bd0:	f043 0310 	orr.w	r3, r3, #16
 8007bd4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d106      	bne.n	8007bea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007bdc:	4b1a      	ldr	r3, [pc, #104]	; (8007c48 <RCCEx_PLL2_Config+0x15c>)
 8007bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be0:	4a19      	ldr	r2, [pc, #100]	; (8007c48 <RCCEx_PLL2_Config+0x15c>)
 8007be2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007be6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007be8:	e00f      	b.n	8007c0a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d106      	bne.n	8007bfe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007bf0:	4b15      	ldr	r3, [pc, #84]	; (8007c48 <RCCEx_PLL2_Config+0x15c>)
 8007bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf4:	4a14      	ldr	r2, [pc, #80]	; (8007c48 <RCCEx_PLL2_Config+0x15c>)
 8007bf6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007bfa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007bfc:	e005      	b.n	8007c0a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007bfe:	4b12      	ldr	r3, [pc, #72]	; (8007c48 <RCCEx_PLL2_Config+0x15c>)
 8007c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c02:	4a11      	ldr	r2, [pc, #68]	; (8007c48 <RCCEx_PLL2_Config+0x15c>)
 8007c04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007c08:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007c0a:	4b0f      	ldr	r3, [pc, #60]	; (8007c48 <RCCEx_PLL2_Config+0x15c>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a0e      	ldr	r2, [pc, #56]	; (8007c48 <RCCEx_PLL2_Config+0x15c>)
 8007c10:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007c14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c16:	f7f9 ffc7 	bl	8001ba8 <HAL_GetTick>
 8007c1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007c1c:	e008      	b.n	8007c30 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007c1e:	f7f9 ffc3 	bl	8001ba8 <HAL_GetTick>
 8007c22:	4602      	mov	r2, r0
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	1ad3      	subs	r3, r2, r3
 8007c28:	2b02      	cmp	r3, #2
 8007c2a:	d901      	bls.n	8007c30 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007c2c:	2303      	movs	r3, #3
 8007c2e:	e006      	b.n	8007c3e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007c30:	4b05      	ldr	r3, [pc, #20]	; (8007c48 <RCCEx_PLL2_Config+0x15c>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d0f0      	beq.n	8007c1e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3710      	adds	r7, #16
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop
 8007c48:	58024400 	.word	0x58024400
 8007c4c:	ffff0007 	.word	0xffff0007

08007c50 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007c5e:	4b53      	ldr	r3, [pc, #332]	; (8007dac <RCCEx_PLL3_Config+0x15c>)
 8007c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c62:	f003 0303 	and.w	r3, r3, #3
 8007c66:	2b03      	cmp	r3, #3
 8007c68:	d101      	bne.n	8007c6e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e099      	b.n	8007da2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007c6e:	4b4f      	ldr	r3, [pc, #316]	; (8007dac <RCCEx_PLL3_Config+0x15c>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a4e      	ldr	r2, [pc, #312]	; (8007dac <RCCEx_PLL3_Config+0x15c>)
 8007c74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c7a:	f7f9 ff95 	bl	8001ba8 <HAL_GetTick>
 8007c7e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c80:	e008      	b.n	8007c94 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007c82:	f7f9 ff91 	bl	8001ba8 <HAL_GetTick>
 8007c86:	4602      	mov	r2, r0
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	1ad3      	subs	r3, r2, r3
 8007c8c:	2b02      	cmp	r3, #2
 8007c8e:	d901      	bls.n	8007c94 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007c90:	2303      	movs	r3, #3
 8007c92:	e086      	b.n	8007da2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c94:	4b45      	ldr	r3, [pc, #276]	; (8007dac <RCCEx_PLL3_Config+0x15c>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d1f0      	bne.n	8007c82 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007ca0:	4b42      	ldr	r3, [pc, #264]	; (8007dac <RCCEx_PLL3_Config+0x15c>)
 8007ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ca4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	051b      	lsls	r3, r3, #20
 8007cae:	493f      	ldr	r1, [pc, #252]	; (8007dac <RCCEx_PLL3_Config+0x15c>)
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	628b      	str	r3, [r1, #40]	; 0x28
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	3b01      	subs	r3, #1
 8007cba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	3b01      	subs	r3, #1
 8007cc4:	025b      	lsls	r3, r3, #9
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	431a      	orrs	r2, r3
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	68db      	ldr	r3, [r3, #12]
 8007cce:	3b01      	subs	r3, #1
 8007cd0:	041b      	lsls	r3, r3, #16
 8007cd2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007cd6:	431a      	orrs	r2, r3
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	691b      	ldr	r3, [r3, #16]
 8007cdc:	3b01      	subs	r3, #1
 8007cde:	061b      	lsls	r3, r3, #24
 8007ce0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007ce4:	4931      	ldr	r1, [pc, #196]	; (8007dac <RCCEx_PLL3_Config+0x15c>)
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007cea:	4b30      	ldr	r3, [pc, #192]	; (8007dac <RCCEx_PLL3_Config+0x15c>)
 8007cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	695b      	ldr	r3, [r3, #20]
 8007cf6:	492d      	ldr	r1, [pc, #180]	; (8007dac <RCCEx_PLL3_Config+0x15c>)
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007cfc:	4b2b      	ldr	r3, [pc, #172]	; (8007dac <RCCEx_PLL3_Config+0x15c>)
 8007cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d00:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	699b      	ldr	r3, [r3, #24]
 8007d08:	4928      	ldr	r1, [pc, #160]	; (8007dac <RCCEx_PLL3_Config+0x15c>)
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007d0e:	4b27      	ldr	r3, [pc, #156]	; (8007dac <RCCEx_PLL3_Config+0x15c>)
 8007d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d12:	4a26      	ldr	r2, [pc, #152]	; (8007dac <RCCEx_PLL3_Config+0x15c>)
 8007d14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007d1a:	4b24      	ldr	r3, [pc, #144]	; (8007dac <RCCEx_PLL3_Config+0x15c>)
 8007d1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d1e:	4b24      	ldr	r3, [pc, #144]	; (8007db0 <RCCEx_PLL3_Config+0x160>)
 8007d20:	4013      	ands	r3, r2
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	69d2      	ldr	r2, [r2, #28]
 8007d26:	00d2      	lsls	r2, r2, #3
 8007d28:	4920      	ldr	r1, [pc, #128]	; (8007dac <RCCEx_PLL3_Config+0x15c>)
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007d2e:	4b1f      	ldr	r3, [pc, #124]	; (8007dac <RCCEx_PLL3_Config+0x15c>)
 8007d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d32:	4a1e      	ldr	r2, [pc, #120]	; (8007dac <RCCEx_PLL3_Config+0x15c>)
 8007d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d106      	bne.n	8007d4e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007d40:	4b1a      	ldr	r3, [pc, #104]	; (8007dac <RCCEx_PLL3_Config+0x15c>)
 8007d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d44:	4a19      	ldr	r2, [pc, #100]	; (8007dac <RCCEx_PLL3_Config+0x15c>)
 8007d46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007d4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007d4c:	e00f      	b.n	8007d6e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d106      	bne.n	8007d62 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007d54:	4b15      	ldr	r3, [pc, #84]	; (8007dac <RCCEx_PLL3_Config+0x15c>)
 8007d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d58:	4a14      	ldr	r2, [pc, #80]	; (8007dac <RCCEx_PLL3_Config+0x15c>)
 8007d5a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007d5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007d60:	e005      	b.n	8007d6e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007d62:	4b12      	ldr	r3, [pc, #72]	; (8007dac <RCCEx_PLL3_Config+0x15c>)
 8007d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d66:	4a11      	ldr	r2, [pc, #68]	; (8007dac <RCCEx_PLL3_Config+0x15c>)
 8007d68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007d6c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007d6e:	4b0f      	ldr	r3, [pc, #60]	; (8007dac <RCCEx_PLL3_Config+0x15c>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a0e      	ldr	r2, [pc, #56]	; (8007dac <RCCEx_PLL3_Config+0x15c>)
 8007d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d7a:	f7f9 ff15 	bl	8001ba8 <HAL_GetTick>
 8007d7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007d80:	e008      	b.n	8007d94 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007d82:	f7f9 ff11 	bl	8001ba8 <HAL_GetTick>
 8007d86:	4602      	mov	r2, r0
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	1ad3      	subs	r3, r2, r3
 8007d8c:	2b02      	cmp	r3, #2
 8007d8e:	d901      	bls.n	8007d94 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007d90:	2303      	movs	r3, #3
 8007d92:	e006      	b.n	8007da2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007d94:	4b05      	ldr	r3, [pc, #20]	; (8007dac <RCCEx_PLL3_Config+0x15c>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d0f0      	beq.n	8007d82 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3710      	adds	r7, #16
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	bf00      	nop
 8007dac:	58024400 	.word	0x58024400
 8007db0:	ffff0007 	.word	0xffff0007

08007db4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b082      	sub	sp, #8
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d101      	bne.n	8007dc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	e042      	b.n	8007e4c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d106      	bne.n	8007dde <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f7f9 fc4f 	bl	800167c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2224      	movs	r2, #36	; 0x24
 8007de2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f022 0201 	bic.w	r2, r2, #1
 8007df4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 f8ba 	bl	8007f70 <UART_SetConfig>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d101      	bne.n	8007e06 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	e022      	b.n	8007e4c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d002      	beq.n	8007e14 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 fe16 	bl	8008a40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	685a      	ldr	r2, [r3, #4]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	689a      	ldr	r2, [r3, #8]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f042 0201 	orr.w	r2, r2, #1
 8007e42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 fe9d 	bl	8008b84 <UART_CheckIdleState>
 8007e4a:	4603      	mov	r3, r0
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3708      	adds	r7, #8
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b08a      	sub	sp, #40	; 0x28
 8007e58:	af02      	add	r7, sp, #8
 8007e5a:	60f8      	str	r0, [r7, #12]
 8007e5c:	60b9      	str	r1, [r7, #8]
 8007e5e:	603b      	str	r3, [r7, #0]
 8007e60:	4613      	mov	r3, r2
 8007e62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e6a:	2b20      	cmp	r3, #32
 8007e6c:	d17b      	bne.n	8007f66 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d002      	beq.n	8007e7a <HAL_UART_Transmit+0x26>
 8007e74:	88fb      	ldrh	r3, [r7, #6]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d101      	bne.n	8007e7e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	e074      	b.n	8007f68 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2200      	movs	r2, #0
 8007e82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2221      	movs	r2, #33	; 0x21
 8007e8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e8e:	f7f9 fe8b 	bl	8001ba8 <HAL_GetTick>
 8007e92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	88fa      	ldrh	r2, [r7, #6]
 8007e98:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	88fa      	ldrh	r2, [r7, #6]
 8007ea0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007eac:	d108      	bne.n	8007ec0 <HAL_UART_Transmit+0x6c>
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	691b      	ldr	r3, [r3, #16]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d104      	bne.n	8007ec0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	61bb      	str	r3, [r7, #24]
 8007ebe:	e003      	b.n	8007ec8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007ec8:	e030      	b.n	8007f2c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	9300      	str	r3, [sp, #0]
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	2180      	movs	r1, #128	; 0x80
 8007ed4:	68f8      	ldr	r0, [r7, #12]
 8007ed6:	f000 feff 	bl	8008cd8 <UART_WaitOnFlagUntilTimeout>
 8007eda:	4603      	mov	r3, r0
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d005      	beq.n	8007eec <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2220      	movs	r2, #32
 8007ee4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8007ee8:	2303      	movs	r3, #3
 8007eea:	e03d      	b.n	8007f68 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007eec:	69fb      	ldr	r3, [r7, #28]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d10b      	bne.n	8007f0a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007ef2:	69bb      	ldr	r3, [r7, #24]
 8007ef4:	881b      	ldrh	r3, [r3, #0]
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f00:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007f02:	69bb      	ldr	r3, [r7, #24]
 8007f04:	3302      	adds	r3, #2
 8007f06:	61bb      	str	r3, [r7, #24]
 8007f08:	e007      	b.n	8007f1a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f0a:	69fb      	ldr	r3, [r7, #28]
 8007f0c:	781a      	ldrb	r2, [r3, #0]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	3301      	adds	r3, #1
 8007f18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	3b01      	subs	r3, #1
 8007f24:	b29a      	uxth	r2, r3
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d1c8      	bne.n	8007eca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	9300      	str	r3, [sp, #0]
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	2140      	movs	r1, #64	; 0x40
 8007f42:	68f8      	ldr	r0, [r7, #12]
 8007f44:	f000 fec8 	bl	8008cd8 <UART_WaitOnFlagUntilTimeout>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d005      	beq.n	8007f5a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2220      	movs	r2, #32
 8007f52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8007f56:	2303      	movs	r3, #3
 8007f58:	e006      	b.n	8007f68 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2220      	movs	r2, #32
 8007f5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007f62:	2300      	movs	r3, #0
 8007f64:	e000      	b.n	8007f68 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007f66:	2302      	movs	r3, #2
  }
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3720      	adds	r7, #32
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f74:	b092      	sub	sp, #72	; 0x48
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	689a      	ldr	r2, [r3, #8]
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	691b      	ldr	r3, [r3, #16]
 8007f88:	431a      	orrs	r2, r3
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	695b      	ldr	r3, [r3, #20]
 8007f8e:	431a      	orrs	r2, r3
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	69db      	ldr	r3, [r3, #28]
 8007f94:	4313      	orrs	r3, r2
 8007f96:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	4bbe      	ldr	r3, [pc, #760]	; (8008298 <UART_SetConfig+0x328>)
 8007fa0:	4013      	ands	r3, r2
 8007fa2:	697a      	ldr	r2, [r7, #20]
 8007fa4:	6812      	ldr	r2, [r2, #0]
 8007fa6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007fa8:	430b      	orrs	r3, r1
 8007faa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	68da      	ldr	r2, [r3, #12]
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	430a      	orrs	r2, r1
 8007fc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	699b      	ldr	r3, [r3, #24]
 8007fc6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4ab3      	ldr	r2, [pc, #716]	; (800829c <UART_SetConfig+0x32c>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d004      	beq.n	8007fdc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	6a1b      	ldr	r3, [r3, #32]
 8007fd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	689a      	ldr	r2, [r3, #8]
 8007fe2:	4baf      	ldr	r3, [pc, #700]	; (80082a0 <UART_SetConfig+0x330>)
 8007fe4:	4013      	ands	r3, r2
 8007fe6:	697a      	ldr	r2, [r7, #20]
 8007fe8:	6812      	ldr	r2, [r2, #0]
 8007fea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007fec:	430b      	orrs	r3, r1
 8007fee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff6:	f023 010f 	bic.w	r1, r3, #15
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	430a      	orrs	r2, r1
 8008004:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4aa6      	ldr	r2, [pc, #664]	; (80082a4 <UART_SetConfig+0x334>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d177      	bne.n	8008100 <UART_SetConfig+0x190>
 8008010:	4ba5      	ldr	r3, [pc, #660]	; (80082a8 <UART_SetConfig+0x338>)
 8008012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008014:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008018:	2b28      	cmp	r3, #40	; 0x28
 800801a:	d86d      	bhi.n	80080f8 <UART_SetConfig+0x188>
 800801c:	a201      	add	r2, pc, #4	; (adr r2, 8008024 <UART_SetConfig+0xb4>)
 800801e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008022:	bf00      	nop
 8008024:	080080c9 	.word	0x080080c9
 8008028:	080080f9 	.word	0x080080f9
 800802c:	080080f9 	.word	0x080080f9
 8008030:	080080f9 	.word	0x080080f9
 8008034:	080080f9 	.word	0x080080f9
 8008038:	080080f9 	.word	0x080080f9
 800803c:	080080f9 	.word	0x080080f9
 8008040:	080080f9 	.word	0x080080f9
 8008044:	080080d1 	.word	0x080080d1
 8008048:	080080f9 	.word	0x080080f9
 800804c:	080080f9 	.word	0x080080f9
 8008050:	080080f9 	.word	0x080080f9
 8008054:	080080f9 	.word	0x080080f9
 8008058:	080080f9 	.word	0x080080f9
 800805c:	080080f9 	.word	0x080080f9
 8008060:	080080f9 	.word	0x080080f9
 8008064:	080080d9 	.word	0x080080d9
 8008068:	080080f9 	.word	0x080080f9
 800806c:	080080f9 	.word	0x080080f9
 8008070:	080080f9 	.word	0x080080f9
 8008074:	080080f9 	.word	0x080080f9
 8008078:	080080f9 	.word	0x080080f9
 800807c:	080080f9 	.word	0x080080f9
 8008080:	080080f9 	.word	0x080080f9
 8008084:	080080e1 	.word	0x080080e1
 8008088:	080080f9 	.word	0x080080f9
 800808c:	080080f9 	.word	0x080080f9
 8008090:	080080f9 	.word	0x080080f9
 8008094:	080080f9 	.word	0x080080f9
 8008098:	080080f9 	.word	0x080080f9
 800809c:	080080f9 	.word	0x080080f9
 80080a0:	080080f9 	.word	0x080080f9
 80080a4:	080080e9 	.word	0x080080e9
 80080a8:	080080f9 	.word	0x080080f9
 80080ac:	080080f9 	.word	0x080080f9
 80080b0:	080080f9 	.word	0x080080f9
 80080b4:	080080f9 	.word	0x080080f9
 80080b8:	080080f9 	.word	0x080080f9
 80080bc:	080080f9 	.word	0x080080f9
 80080c0:	080080f9 	.word	0x080080f9
 80080c4:	080080f1 	.word	0x080080f1
 80080c8:	2301      	movs	r3, #1
 80080ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080ce:	e222      	b.n	8008516 <UART_SetConfig+0x5a6>
 80080d0:	2304      	movs	r3, #4
 80080d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080d6:	e21e      	b.n	8008516 <UART_SetConfig+0x5a6>
 80080d8:	2308      	movs	r3, #8
 80080da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080de:	e21a      	b.n	8008516 <UART_SetConfig+0x5a6>
 80080e0:	2310      	movs	r3, #16
 80080e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080e6:	e216      	b.n	8008516 <UART_SetConfig+0x5a6>
 80080e8:	2320      	movs	r3, #32
 80080ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080ee:	e212      	b.n	8008516 <UART_SetConfig+0x5a6>
 80080f0:	2340      	movs	r3, #64	; 0x40
 80080f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080f6:	e20e      	b.n	8008516 <UART_SetConfig+0x5a6>
 80080f8:	2380      	movs	r3, #128	; 0x80
 80080fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080fe:	e20a      	b.n	8008516 <UART_SetConfig+0x5a6>
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a69      	ldr	r2, [pc, #420]	; (80082ac <UART_SetConfig+0x33c>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d130      	bne.n	800816c <UART_SetConfig+0x1fc>
 800810a:	4b67      	ldr	r3, [pc, #412]	; (80082a8 <UART_SetConfig+0x338>)
 800810c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800810e:	f003 0307 	and.w	r3, r3, #7
 8008112:	2b05      	cmp	r3, #5
 8008114:	d826      	bhi.n	8008164 <UART_SetConfig+0x1f4>
 8008116:	a201      	add	r2, pc, #4	; (adr r2, 800811c <UART_SetConfig+0x1ac>)
 8008118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800811c:	08008135 	.word	0x08008135
 8008120:	0800813d 	.word	0x0800813d
 8008124:	08008145 	.word	0x08008145
 8008128:	0800814d 	.word	0x0800814d
 800812c:	08008155 	.word	0x08008155
 8008130:	0800815d 	.word	0x0800815d
 8008134:	2300      	movs	r3, #0
 8008136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800813a:	e1ec      	b.n	8008516 <UART_SetConfig+0x5a6>
 800813c:	2304      	movs	r3, #4
 800813e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008142:	e1e8      	b.n	8008516 <UART_SetConfig+0x5a6>
 8008144:	2308      	movs	r3, #8
 8008146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800814a:	e1e4      	b.n	8008516 <UART_SetConfig+0x5a6>
 800814c:	2310      	movs	r3, #16
 800814e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008152:	e1e0      	b.n	8008516 <UART_SetConfig+0x5a6>
 8008154:	2320      	movs	r3, #32
 8008156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800815a:	e1dc      	b.n	8008516 <UART_SetConfig+0x5a6>
 800815c:	2340      	movs	r3, #64	; 0x40
 800815e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008162:	e1d8      	b.n	8008516 <UART_SetConfig+0x5a6>
 8008164:	2380      	movs	r3, #128	; 0x80
 8008166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800816a:	e1d4      	b.n	8008516 <UART_SetConfig+0x5a6>
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a4f      	ldr	r2, [pc, #316]	; (80082b0 <UART_SetConfig+0x340>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d130      	bne.n	80081d8 <UART_SetConfig+0x268>
 8008176:	4b4c      	ldr	r3, [pc, #304]	; (80082a8 <UART_SetConfig+0x338>)
 8008178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800817a:	f003 0307 	and.w	r3, r3, #7
 800817e:	2b05      	cmp	r3, #5
 8008180:	d826      	bhi.n	80081d0 <UART_SetConfig+0x260>
 8008182:	a201      	add	r2, pc, #4	; (adr r2, 8008188 <UART_SetConfig+0x218>)
 8008184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008188:	080081a1 	.word	0x080081a1
 800818c:	080081a9 	.word	0x080081a9
 8008190:	080081b1 	.word	0x080081b1
 8008194:	080081b9 	.word	0x080081b9
 8008198:	080081c1 	.word	0x080081c1
 800819c:	080081c9 	.word	0x080081c9
 80081a0:	2300      	movs	r3, #0
 80081a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081a6:	e1b6      	b.n	8008516 <UART_SetConfig+0x5a6>
 80081a8:	2304      	movs	r3, #4
 80081aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081ae:	e1b2      	b.n	8008516 <UART_SetConfig+0x5a6>
 80081b0:	2308      	movs	r3, #8
 80081b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081b6:	e1ae      	b.n	8008516 <UART_SetConfig+0x5a6>
 80081b8:	2310      	movs	r3, #16
 80081ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081be:	e1aa      	b.n	8008516 <UART_SetConfig+0x5a6>
 80081c0:	2320      	movs	r3, #32
 80081c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081c6:	e1a6      	b.n	8008516 <UART_SetConfig+0x5a6>
 80081c8:	2340      	movs	r3, #64	; 0x40
 80081ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081ce:	e1a2      	b.n	8008516 <UART_SetConfig+0x5a6>
 80081d0:	2380      	movs	r3, #128	; 0x80
 80081d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081d6:	e19e      	b.n	8008516 <UART_SetConfig+0x5a6>
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a35      	ldr	r2, [pc, #212]	; (80082b4 <UART_SetConfig+0x344>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d130      	bne.n	8008244 <UART_SetConfig+0x2d4>
 80081e2:	4b31      	ldr	r3, [pc, #196]	; (80082a8 <UART_SetConfig+0x338>)
 80081e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081e6:	f003 0307 	and.w	r3, r3, #7
 80081ea:	2b05      	cmp	r3, #5
 80081ec:	d826      	bhi.n	800823c <UART_SetConfig+0x2cc>
 80081ee:	a201      	add	r2, pc, #4	; (adr r2, 80081f4 <UART_SetConfig+0x284>)
 80081f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081f4:	0800820d 	.word	0x0800820d
 80081f8:	08008215 	.word	0x08008215
 80081fc:	0800821d 	.word	0x0800821d
 8008200:	08008225 	.word	0x08008225
 8008204:	0800822d 	.word	0x0800822d
 8008208:	08008235 	.word	0x08008235
 800820c:	2300      	movs	r3, #0
 800820e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008212:	e180      	b.n	8008516 <UART_SetConfig+0x5a6>
 8008214:	2304      	movs	r3, #4
 8008216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800821a:	e17c      	b.n	8008516 <UART_SetConfig+0x5a6>
 800821c:	2308      	movs	r3, #8
 800821e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008222:	e178      	b.n	8008516 <UART_SetConfig+0x5a6>
 8008224:	2310      	movs	r3, #16
 8008226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800822a:	e174      	b.n	8008516 <UART_SetConfig+0x5a6>
 800822c:	2320      	movs	r3, #32
 800822e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008232:	e170      	b.n	8008516 <UART_SetConfig+0x5a6>
 8008234:	2340      	movs	r3, #64	; 0x40
 8008236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800823a:	e16c      	b.n	8008516 <UART_SetConfig+0x5a6>
 800823c:	2380      	movs	r3, #128	; 0x80
 800823e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008242:	e168      	b.n	8008516 <UART_SetConfig+0x5a6>
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a1b      	ldr	r2, [pc, #108]	; (80082b8 <UART_SetConfig+0x348>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d142      	bne.n	80082d4 <UART_SetConfig+0x364>
 800824e:	4b16      	ldr	r3, [pc, #88]	; (80082a8 <UART_SetConfig+0x338>)
 8008250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008252:	f003 0307 	and.w	r3, r3, #7
 8008256:	2b05      	cmp	r3, #5
 8008258:	d838      	bhi.n	80082cc <UART_SetConfig+0x35c>
 800825a:	a201      	add	r2, pc, #4	; (adr r2, 8008260 <UART_SetConfig+0x2f0>)
 800825c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008260:	08008279 	.word	0x08008279
 8008264:	08008281 	.word	0x08008281
 8008268:	08008289 	.word	0x08008289
 800826c:	08008291 	.word	0x08008291
 8008270:	080082bd 	.word	0x080082bd
 8008274:	080082c5 	.word	0x080082c5
 8008278:	2300      	movs	r3, #0
 800827a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800827e:	e14a      	b.n	8008516 <UART_SetConfig+0x5a6>
 8008280:	2304      	movs	r3, #4
 8008282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008286:	e146      	b.n	8008516 <UART_SetConfig+0x5a6>
 8008288:	2308      	movs	r3, #8
 800828a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800828e:	e142      	b.n	8008516 <UART_SetConfig+0x5a6>
 8008290:	2310      	movs	r3, #16
 8008292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008296:	e13e      	b.n	8008516 <UART_SetConfig+0x5a6>
 8008298:	cfff69f3 	.word	0xcfff69f3
 800829c:	58000c00 	.word	0x58000c00
 80082a0:	11fff4ff 	.word	0x11fff4ff
 80082a4:	40011000 	.word	0x40011000
 80082a8:	58024400 	.word	0x58024400
 80082ac:	40004400 	.word	0x40004400
 80082b0:	40004800 	.word	0x40004800
 80082b4:	40004c00 	.word	0x40004c00
 80082b8:	40005000 	.word	0x40005000
 80082bc:	2320      	movs	r3, #32
 80082be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082c2:	e128      	b.n	8008516 <UART_SetConfig+0x5a6>
 80082c4:	2340      	movs	r3, #64	; 0x40
 80082c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082ca:	e124      	b.n	8008516 <UART_SetConfig+0x5a6>
 80082cc:	2380      	movs	r3, #128	; 0x80
 80082ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082d2:	e120      	b.n	8008516 <UART_SetConfig+0x5a6>
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4acb      	ldr	r2, [pc, #812]	; (8008608 <UART_SetConfig+0x698>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d176      	bne.n	80083cc <UART_SetConfig+0x45c>
 80082de:	4bcb      	ldr	r3, [pc, #812]	; (800860c <UART_SetConfig+0x69c>)
 80082e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80082e6:	2b28      	cmp	r3, #40	; 0x28
 80082e8:	d86c      	bhi.n	80083c4 <UART_SetConfig+0x454>
 80082ea:	a201      	add	r2, pc, #4	; (adr r2, 80082f0 <UART_SetConfig+0x380>)
 80082ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f0:	08008395 	.word	0x08008395
 80082f4:	080083c5 	.word	0x080083c5
 80082f8:	080083c5 	.word	0x080083c5
 80082fc:	080083c5 	.word	0x080083c5
 8008300:	080083c5 	.word	0x080083c5
 8008304:	080083c5 	.word	0x080083c5
 8008308:	080083c5 	.word	0x080083c5
 800830c:	080083c5 	.word	0x080083c5
 8008310:	0800839d 	.word	0x0800839d
 8008314:	080083c5 	.word	0x080083c5
 8008318:	080083c5 	.word	0x080083c5
 800831c:	080083c5 	.word	0x080083c5
 8008320:	080083c5 	.word	0x080083c5
 8008324:	080083c5 	.word	0x080083c5
 8008328:	080083c5 	.word	0x080083c5
 800832c:	080083c5 	.word	0x080083c5
 8008330:	080083a5 	.word	0x080083a5
 8008334:	080083c5 	.word	0x080083c5
 8008338:	080083c5 	.word	0x080083c5
 800833c:	080083c5 	.word	0x080083c5
 8008340:	080083c5 	.word	0x080083c5
 8008344:	080083c5 	.word	0x080083c5
 8008348:	080083c5 	.word	0x080083c5
 800834c:	080083c5 	.word	0x080083c5
 8008350:	080083ad 	.word	0x080083ad
 8008354:	080083c5 	.word	0x080083c5
 8008358:	080083c5 	.word	0x080083c5
 800835c:	080083c5 	.word	0x080083c5
 8008360:	080083c5 	.word	0x080083c5
 8008364:	080083c5 	.word	0x080083c5
 8008368:	080083c5 	.word	0x080083c5
 800836c:	080083c5 	.word	0x080083c5
 8008370:	080083b5 	.word	0x080083b5
 8008374:	080083c5 	.word	0x080083c5
 8008378:	080083c5 	.word	0x080083c5
 800837c:	080083c5 	.word	0x080083c5
 8008380:	080083c5 	.word	0x080083c5
 8008384:	080083c5 	.word	0x080083c5
 8008388:	080083c5 	.word	0x080083c5
 800838c:	080083c5 	.word	0x080083c5
 8008390:	080083bd 	.word	0x080083bd
 8008394:	2301      	movs	r3, #1
 8008396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800839a:	e0bc      	b.n	8008516 <UART_SetConfig+0x5a6>
 800839c:	2304      	movs	r3, #4
 800839e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083a2:	e0b8      	b.n	8008516 <UART_SetConfig+0x5a6>
 80083a4:	2308      	movs	r3, #8
 80083a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083aa:	e0b4      	b.n	8008516 <UART_SetConfig+0x5a6>
 80083ac:	2310      	movs	r3, #16
 80083ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083b2:	e0b0      	b.n	8008516 <UART_SetConfig+0x5a6>
 80083b4:	2320      	movs	r3, #32
 80083b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083ba:	e0ac      	b.n	8008516 <UART_SetConfig+0x5a6>
 80083bc:	2340      	movs	r3, #64	; 0x40
 80083be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083c2:	e0a8      	b.n	8008516 <UART_SetConfig+0x5a6>
 80083c4:	2380      	movs	r3, #128	; 0x80
 80083c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083ca:	e0a4      	b.n	8008516 <UART_SetConfig+0x5a6>
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a8f      	ldr	r2, [pc, #572]	; (8008610 <UART_SetConfig+0x6a0>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d130      	bne.n	8008438 <UART_SetConfig+0x4c8>
 80083d6:	4b8d      	ldr	r3, [pc, #564]	; (800860c <UART_SetConfig+0x69c>)
 80083d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083da:	f003 0307 	and.w	r3, r3, #7
 80083de:	2b05      	cmp	r3, #5
 80083e0:	d826      	bhi.n	8008430 <UART_SetConfig+0x4c0>
 80083e2:	a201      	add	r2, pc, #4	; (adr r2, 80083e8 <UART_SetConfig+0x478>)
 80083e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e8:	08008401 	.word	0x08008401
 80083ec:	08008409 	.word	0x08008409
 80083f0:	08008411 	.word	0x08008411
 80083f4:	08008419 	.word	0x08008419
 80083f8:	08008421 	.word	0x08008421
 80083fc:	08008429 	.word	0x08008429
 8008400:	2300      	movs	r3, #0
 8008402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008406:	e086      	b.n	8008516 <UART_SetConfig+0x5a6>
 8008408:	2304      	movs	r3, #4
 800840a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800840e:	e082      	b.n	8008516 <UART_SetConfig+0x5a6>
 8008410:	2308      	movs	r3, #8
 8008412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008416:	e07e      	b.n	8008516 <UART_SetConfig+0x5a6>
 8008418:	2310      	movs	r3, #16
 800841a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800841e:	e07a      	b.n	8008516 <UART_SetConfig+0x5a6>
 8008420:	2320      	movs	r3, #32
 8008422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008426:	e076      	b.n	8008516 <UART_SetConfig+0x5a6>
 8008428:	2340      	movs	r3, #64	; 0x40
 800842a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800842e:	e072      	b.n	8008516 <UART_SetConfig+0x5a6>
 8008430:	2380      	movs	r3, #128	; 0x80
 8008432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008436:	e06e      	b.n	8008516 <UART_SetConfig+0x5a6>
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a75      	ldr	r2, [pc, #468]	; (8008614 <UART_SetConfig+0x6a4>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d130      	bne.n	80084a4 <UART_SetConfig+0x534>
 8008442:	4b72      	ldr	r3, [pc, #456]	; (800860c <UART_SetConfig+0x69c>)
 8008444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008446:	f003 0307 	and.w	r3, r3, #7
 800844a:	2b05      	cmp	r3, #5
 800844c:	d826      	bhi.n	800849c <UART_SetConfig+0x52c>
 800844e:	a201      	add	r2, pc, #4	; (adr r2, 8008454 <UART_SetConfig+0x4e4>)
 8008450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008454:	0800846d 	.word	0x0800846d
 8008458:	08008475 	.word	0x08008475
 800845c:	0800847d 	.word	0x0800847d
 8008460:	08008485 	.word	0x08008485
 8008464:	0800848d 	.word	0x0800848d
 8008468:	08008495 	.word	0x08008495
 800846c:	2300      	movs	r3, #0
 800846e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008472:	e050      	b.n	8008516 <UART_SetConfig+0x5a6>
 8008474:	2304      	movs	r3, #4
 8008476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800847a:	e04c      	b.n	8008516 <UART_SetConfig+0x5a6>
 800847c:	2308      	movs	r3, #8
 800847e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008482:	e048      	b.n	8008516 <UART_SetConfig+0x5a6>
 8008484:	2310      	movs	r3, #16
 8008486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800848a:	e044      	b.n	8008516 <UART_SetConfig+0x5a6>
 800848c:	2320      	movs	r3, #32
 800848e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008492:	e040      	b.n	8008516 <UART_SetConfig+0x5a6>
 8008494:	2340      	movs	r3, #64	; 0x40
 8008496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800849a:	e03c      	b.n	8008516 <UART_SetConfig+0x5a6>
 800849c:	2380      	movs	r3, #128	; 0x80
 800849e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084a2:	e038      	b.n	8008516 <UART_SetConfig+0x5a6>
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a5b      	ldr	r2, [pc, #364]	; (8008618 <UART_SetConfig+0x6a8>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d130      	bne.n	8008510 <UART_SetConfig+0x5a0>
 80084ae:	4b57      	ldr	r3, [pc, #348]	; (800860c <UART_SetConfig+0x69c>)
 80084b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084b2:	f003 0307 	and.w	r3, r3, #7
 80084b6:	2b05      	cmp	r3, #5
 80084b8:	d826      	bhi.n	8008508 <UART_SetConfig+0x598>
 80084ba:	a201      	add	r2, pc, #4	; (adr r2, 80084c0 <UART_SetConfig+0x550>)
 80084bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c0:	080084d9 	.word	0x080084d9
 80084c4:	080084e1 	.word	0x080084e1
 80084c8:	080084e9 	.word	0x080084e9
 80084cc:	080084f1 	.word	0x080084f1
 80084d0:	080084f9 	.word	0x080084f9
 80084d4:	08008501 	.word	0x08008501
 80084d8:	2302      	movs	r3, #2
 80084da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084de:	e01a      	b.n	8008516 <UART_SetConfig+0x5a6>
 80084e0:	2304      	movs	r3, #4
 80084e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084e6:	e016      	b.n	8008516 <UART_SetConfig+0x5a6>
 80084e8:	2308      	movs	r3, #8
 80084ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084ee:	e012      	b.n	8008516 <UART_SetConfig+0x5a6>
 80084f0:	2310      	movs	r3, #16
 80084f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084f6:	e00e      	b.n	8008516 <UART_SetConfig+0x5a6>
 80084f8:	2320      	movs	r3, #32
 80084fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084fe:	e00a      	b.n	8008516 <UART_SetConfig+0x5a6>
 8008500:	2340      	movs	r3, #64	; 0x40
 8008502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008506:	e006      	b.n	8008516 <UART_SetConfig+0x5a6>
 8008508:	2380      	movs	r3, #128	; 0x80
 800850a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800850e:	e002      	b.n	8008516 <UART_SetConfig+0x5a6>
 8008510:	2380      	movs	r3, #128	; 0x80
 8008512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a3f      	ldr	r2, [pc, #252]	; (8008618 <UART_SetConfig+0x6a8>)
 800851c:	4293      	cmp	r3, r2
 800851e:	f040 80f8 	bne.w	8008712 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008522:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008526:	2b20      	cmp	r3, #32
 8008528:	dc46      	bgt.n	80085b8 <UART_SetConfig+0x648>
 800852a:	2b02      	cmp	r3, #2
 800852c:	f2c0 8082 	blt.w	8008634 <UART_SetConfig+0x6c4>
 8008530:	3b02      	subs	r3, #2
 8008532:	2b1e      	cmp	r3, #30
 8008534:	d87e      	bhi.n	8008634 <UART_SetConfig+0x6c4>
 8008536:	a201      	add	r2, pc, #4	; (adr r2, 800853c <UART_SetConfig+0x5cc>)
 8008538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800853c:	080085bf 	.word	0x080085bf
 8008540:	08008635 	.word	0x08008635
 8008544:	080085c7 	.word	0x080085c7
 8008548:	08008635 	.word	0x08008635
 800854c:	08008635 	.word	0x08008635
 8008550:	08008635 	.word	0x08008635
 8008554:	080085d7 	.word	0x080085d7
 8008558:	08008635 	.word	0x08008635
 800855c:	08008635 	.word	0x08008635
 8008560:	08008635 	.word	0x08008635
 8008564:	08008635 	.word	0x08008635
 8008568:	08008635 	.word	0x08008635
 800856c:	08008635 	.word	0x08008635
 8008570:	08008635 	.word	0x08008635
 8008574:	080085e7 	.word	0x080085e7
 8008578:	08008635 	.word	0x08008635
 800857c:	08008635 	.word	0x08008635
 8008580:	08008635 	.word	0x08008635
 8008584:	08008635 	.word	0x08008635
 8008588:	08008635 	.word	0x08008635
 800858c:	08008635 	.word	0x08008635
 8008590:	08008635 	.word	0x08008635
 8008594:	08008635 	.word	0x08008635
 8008598:	08008635 	.word	0x08008635
 800859c:	08008635 	.word	0x08008635
 80085a0:	08008635 	.word	0x08008635
 80085a4:	08008635 	.word	0x08008635
 80085a8:	08008635 	.word	0x08008635
 80085ac:	08008635 	.word	0x08008635
 80085b0:	08008635 	.word	0x08008635
 80085b4:	08008627 	.word	0x08008627
 80085b8:	2b40      	cmp	r3, #64	; 0x40
 80085ba:	d037      	beq.n	800862c <UART_SetConfig+0x6bc>
 80085bc:	e03a      	b.n	8008634 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80085be:	f7fe fe85 	bl	80072cc <HAL_RCCEx_GetD3PCLK1Freq>
 80085c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80085c4:	e03c      	b.n	8008640 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085ca:	4618      	mov	r0, r3
 80085cc:	f7fe fe94 	bl	80072f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80085d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085d4:	e034      	b.n	8008640 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085d6:	f107 0318 	add.w	r3, r7, #24
 80085da:	4618      	mov	r0, r3
 80085dc:	f7fe ffe0 	bl	80075a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80085e0:	69fb      	ldr	r3, [r7, #28]
 80085e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085e4:	e02c      	b.n	8008640 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085e6:	4b09      	ldr	r3, [pc, #36]	; (800860c <UART_SetConfig+0x69c>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f003 0320 	and.w	r3, r3, #32
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d016      	beq.n	8008620 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80085f2:	4b06      	ldr	r3, [pc, #24]	; (800860c <UART_SetConfig+0x69c>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	08db      	lsrs	r3, r3, #3
 80085f8:	f003 0303 	and.w	r3, r3, #3
 80085fc:	4a07      	ldr	r2, [pc, #28]	; (800861c <UART_SetConfig+0x6ac>)
 80085fe:	fa22 f303 	lsr.w	r3, r2, r3
 8008602:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008604:	e01c      	b.n	8008640 <UART_SetConfig+0x6d0>
 8008606:	bf00      	nop
 8008608:	40011400 	.word	0x40011400
 800860c:	58024400 	.word	0x58024400
 8008610:	40007800 	.word	0x40007800
 8008614:	40007c00 	.word	0x40007c00
 8008618:	58000c00 	.word	0x58000c00
 800861c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008620:	4b9d      	ldr	r3, [pc, #628]	; (8008898 <UART_SetConfig+0x928>)
 8008622:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008624:	e00c      	b.n	8008640 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008626:	4b9d      	ldr	r3, [pc, #628]	; (800889c <UART_SetConfig+0x92c>)
 8008628:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800862a:	e009      	b.n	8008640 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800862c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008630:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008632:	e005      	b.n	8008640 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008634:	2300      	movs	r3, #0
 8008636:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008638:	2301      	movs	r3, #1
 800863a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800863e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008642:	2b00      	cmp	r3, #0
 8008644:	f000 81de 	beq.w	8008a04 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800864c:	4a94      	ldr	r2, [pc, #592]	; (80088a0 <UART_SetConfig+0x930>)
 800864e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008652:	461a      	mov	r2, r3
 8008654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008656:	fbb3 f3f2 	udiv	r3, r3, r2
 800865a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	685a      	ldr	r2, [r3, #4]
 8008660:	4613      	mov	r3, r2
 8008662:	005b      	lsls	r3, r3, #1
 8008664:	4413      	add	r3, r2
 8008666:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008668:	429a      	cmp	r2, r3
 800866a:	d305      	bcc.n	8008678 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008672:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008674:	429a      	cmp	r2, r3
 8008676:	d903      	bls.n	8008680 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008678:	2301      	movs	r3, #1
 800867a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800867e:	e1c1      	b.n	8008a04 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008682:	2200      	movs	r2, #0
 8008684:	60bb      	str	r3, [r7, #8]
 8008686:	60fa      	str	r2, [r7, #12]
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868c:	4a84      	ldr	r2, [pc, #528]	; (80088a0 <UART_SetConfig+0x930>)
 800868e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008692:	b29b      	uxth	r3, r3
 8008694:	2200      	movs	r2, #0
 8008696:	603b      	str	r3, [r7, #0]
 8008698:	607a      	str	r2, [r7, #4]
 800869a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800869e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80086a2:	f7f8 f831 	bl	8000708 <__aeabi_uldivmod>
 80086a6:	4602      	mov	r2, r0
 80086a8:	460b      	mov	r3, r1
 80086aa:	4610      	mov	r0, r2
 80086ac:	4619      	mov	r1, r3
 80086ae:	f04f 0200 	mov.w	r2, #0
 80086b2:	f04f 0300 	mov.w	r3, #0
 80086b6:	020b      	lsls	r3, r1, #8
 80086b8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80086bc:	0202      	lsls	r2, r0, #8
 80086be:	6979      	ldr	r1, [r7, #20]
 80086c0:	6849      	ldr	r1, [r1, #4]
 80086c2:	0849      	lsrs	r1, r1, #1
 80086c4:	2000      	movs	r0, #0
 80086c6:	460c      	mov	r4, r1
 80086c8:	4605      	mov	r5, r0
 80086ca:	eb12 0804 	adds.w	r8, r2, r4
 80086ce:	eb43 0905 	adc.w	r9, r3, r5
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	2200      	movs	r2, #0
 80086d8:	469a      	mov	sl, r3
 80086da:	4693      	mov	fp, r2
 80086dc:	4652      	mov	r2, sl
 80086de:	465b      	mov	r3, fp
 80086e0:	4640      	mov	r0, r8
 80086e2:	4649      	mov	r1, r9
 80086e4:	f7f8 f810 	bl	8000708 <__aeabi_uldivmod>
 80086e8:	4602      	mov	r2, r0
 80086ea:	460b      	mov	r3, r1
 80086ec:	4613      	mov	r3, r2
 80086ee:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80086f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80086f6:	d308      	bcc.n	800870a <UART_SetConfig+0x79a>
 80086f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086fe:	d204      	bcs.n	800870a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008706:	60da      	str	r2, [r3, #12]
 8008708:	e17c      	b.n	8008a04 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800870a:	2301      	movs	r3, #1
 800870c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008710:	e178      	b.n	8008a04 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	69db      	ldr	r3, [r3, #28]
 8008716:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800871a:	f040 80c5 	bne.w	80088a8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800871e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008722:	2b20      	cmp	r3, #32
 8008724:	dc48      	bgt.n	80087b8 <UART_SetConfig+0x848>
 8008726:	2b00      	cmp	r3, #0
 8008728:	db7b      	blt.n	8008822 <UART_SetConfig+0x8b2>
 800872a:	2b20      	cmp	r3, #32
 800872c:	d879      	bhi.n	8008822 <UART_SetConfig+0x8b2>
 800872e:	a201      	add	r2, pc, #4	; (adr r2, 8008734 <UART_SetConfig+0x7c4>)
 8008730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008734:	080087bf 	.word	0x080087bf
 8008738:	080087c7 	.word	0x080087c7
 800873c:	08008823 	.word	0x08008823
 8008740:	08008823 	.word	0x08008823
 8008744:	080087cf 	.word	0x080087cf
 8008748:	08008823 	.word	0x08008823
 800874c:	08008823 	.word	0x08008823
 8008750:	08008823 	.word	0x08008823
 8008754:	080087df 	.word	0x080087df
 8008758:	08008823 	.word	0x08008823
 800875c:	08008823 	.word	0x08008823
 8008760:	08008823 	.word	0x08008823
 8008764:	08008823 	.word	0x08008823
 8008768:	08008823 	.word	0x08008823
 800876c:	08008823 	.word	0x08008823
 8008770:	08008823 	.word	0x08008823
 8008774:	080087ef 	.word	0x080087ef
 8008778:	08008823 	.word	0x08008823
 800877c:	08008823 	.word	0x08008823
 8008780:	08008823 	.word	0x08008823
 8008784:	08008823 	.word	0x08008823
 8008788:	08008823 	.word	0x08008823
 800878c:	08008823 	.word	0x08008823
 8008790:	08008823 	.word	0x08008823
 8008794:	08008823 	.word	0x08008823
 8008798:	08008823 	.word	0x08008823
 800879c:	08008823 	.word	0x08008823
 80087a0:	08008823 	.word	0x08008823
 80087a4:	08008823 	.word	0x08008823
 80087a8:	08008823 	.word	0x08008823
 80087ac:	08008823 	.word	0x08008823
 80087b0:	08008823 	.word	0x08008823
 80087b4:	08008815 	.word	0x08008815
 80087b8:	2b40      	cmp	r3, #64	; 0x40
 80087ba:	d02e      	beq.n	800881a <UART_SetConfig+0x8aa>
 80087bc:	e031      	b.n	8008822 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087be:	f7fc fdcf 	bl	8005360 <HAL_RCC_GetPCLK1Freq>
 80087c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80087c4:	e033      	b.n	800882e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80087c6:	f7fc fde1 	bl	800538c <HAL_RCC_GetPCLK2Freq>
 80087ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80087cc:	e02f      	b.n	800882e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087d2:	4618      	mov	r0, r3
 80087d4:	f7fe fd90 	bl	80072f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80087d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087dc:	e027      	b.n	800882e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087de:	f107 0318 	add.w	r3, r7, #24
 80087e2:	4618      	mov	r0, r3
 80087e4:	f7fe fedc 	bl	80075a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087ec:	e01f      	b.n	800882e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087ee:	4b2d      	ldr	r3, [pc, #180]	; (80088a4 <UART_SetConfig+0x934>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f003 0320 	and.w	r3, r3, #32
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d009      	beq.n	800880e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80087fa:	4b2a      	ldr	r3, [pc, #168]	; (80088a4 <UART_SetConfig+0x934>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	08db      	lsrs	r3, r3, #3
 8008800:	f003 0303 	and.w	r3, r3, #3
 8008804:	4a24      	ldr	r2, [pc, #144]	; (8008898 <UART_SetConfig+0x928>)
 8008806:	fa22 f303 	lsr.w	r3, r2, r3
 800880a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800880c:	e00f      	b.n	800882e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800880e:	4b22      	ldr	r3, [pc, #136]	; (8008898 <UART_SetConfig+0x928>)
 8008810:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008812:	e00c      	b.n	800882e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008814:	4b21      	ldr	r3, [pc, #132]	; (800889c <UART_SetConfig+0x92c>)
 8008816:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008818:	e009      	b.n	800882e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800881a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800881e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008820:	e005      	b.n	800882e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008822:	2300      	movs	r3, #0
 8008824:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008826:	2301      	movs	r3, #1
 8008828:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800882c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800882e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008830:	2b00      	cmp	r3, #0
 8008832:	f000 80e7 	beq.w	8008a04 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800883a:	4a19      	ldr	r2, [pc, #100]	; (80088a0 <UART_SetConfig+0x930>)
 800883c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008840:	461a      	mov	r2, r3
 8008842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008844:	fbb3 f3f2 	udiv	r3, r3, r2
 8008848:	005a      	lsls	r2, r3, #1
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	085b      	lsrs	r3, r3, #1
 8008850:	441a      	add	r2, r3
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	fbb2 f3f3 	udiv	r3, r2, r3
 800885a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800885c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800885e:	2b0f      	cmp	r3, #15
 8008860:	d916      	bls.n	8008890 <UART_SetConfig+0x920>
 8008862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008868:	d212      	bcs.n	8008890 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800886a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800886c:	b29b      	uxth	r3, r3
 800886e:	f023 030f 	bic.w	r3, r3, #15
 8008872:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008876:	085b      	lsrs	r3, r3, #1
 8008878:	b29b      	uxth	r3, r3
 800887a:	f003 0307 	and.w	r3, r3, #7
 800887e:	b29a      	uxth	r2, r3
 8008880:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008882:	4313      	orrs	r3, r2
 8008884:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800888c:	60da      	str	r2, [r3, #12]
 800888e:	e0b9      	b.n	8008a04 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008890:	2301      	movs	r3, #1
 8008892:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008896:	e0b5      	b.n	8008a04 <UART_SetConfig+0xa94>
 8008898:	03d09000 	.word	0x03d09000
 800889c:	003d0900 	.word	0x003d0900
 80088a0:	0800dcbc 	.word	0x0800dcbc
 80088a4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80088a8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80088ac:	2b20      	cmp	r3, #32
 80088ae:	dc49      	bgt.n	8008944 <UART_SetConfig+0x9d4>
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	db7c      	blt.n	80089ae <UART_SetConfig+0xa3e>
 80088b4:	2b20      	cmp	r3, #32
 80088b6:	d87a      	bhi.n	80089ae <UART_SetConfig+0xa3e>
 80088b8:	a201      	add	r2, pc, #4	; (adr r2, 80088c0 <UART_SetConfig+0x950>)
 80088ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088be:	bf00      	nop
 80088c0:	0800894b 	.word	0x0800894b
 80088c4:	08008953 	.word	0x08008953
 80088c8:	080089af 	.word	0x080089af
 80088cc:	080089af 	.word	0x080089af
 80088d0:	0800895b 	.word	0x0800895b
 80088d4:	080089af 	.word	0x080089af
 80088d8:	080089af 	.word	0x080089af
 80088dc:	080089af 	.word	0x080089af
 80088e0:	0800896b 	.word	0x0800896b
 80088e4:	080089af 	.word	0x080089af
 80088e8:	080089af 	.word	0x080089af
 80088ec:	080089af 	.word	0x080089af
 80088f0:	080089af 	.word	0x080089af
 80088f4:	080089af 	.word	0x080089af
 80088f8:	080089af 	.word	0x080089af
 80088fc:	080089af 	.word	0x080089af
 8008900:	0800897b 	.word	0x0800897b
 8008904:	080089af 	.word	0x080089af
 8008908:	080089af 	.word	0x080089af
 800890c:	080089af 	.word	0x080089af
 8008910:	080089af 	.word	0x080089af
 8008914:	080089af 	.word	0x080089af
 8008918:	080089af 	.word	0x080089af
 800891c:	080089af 	.word	0x080089af
 8008920:	080089af 	.word	0x080089af
 8008924:	080089af 	.word	0x080089af
 8008928:	080089af 	.word	0x080089af
 800892c:	080089af 	.word	0x080089af
 8008930:	080089af 	.word	0x080089af
 8008934:	080089af 	.word	0x080089af
 8008938:	080089af 	.word	0x080089af
 800893c:	080089af 	.word	0x080089af
 8008940:	080089a1 	.word	0x080089a1
 8008944:	2b40      	cmp	r3, #64	; 0x40
 8008946:	d02e      	beq.n	80089a6 <UART_SetConfig+0xa36>
 8008948:	e031      	b.n	80089ae <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800894a:	f7fc fd09 	bl	8005360 <HAL_RCC_GetPCLK1Freq>
 800894e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008950:	e033      	b.n	80089ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008952:	f7fc fd1b 	bl	800538c <HAL_RCC_GetPCLK2Freq>
 8008956:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008958:	e02f      	b.n	80089ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800895a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800895e:	4618      	mov	r0, r3
 8008960:	f7fe fcca 	bl	80072f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008966:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008968:	e027      	b.n	80089ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800896a:	f107 0318 	add.w	r3, r7, #24
 800896e:	4618      	mov	r0, r3
 8008970:	f7fe fe16 	bl	80075a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008974:	69fb      	ldr	r3, [r7, #28]
 8008976:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008978:	e01f      	b.n	80089ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800897a:	4b2d      	ldr	r3, [pc, #180]	; (8008a30 <UART_SetConfig+0xac0>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f003 0320 	and.w	r3, r3, #32
 8008982:	2b00      	cmp	r3, #0
 8008984:	d009      	beq.n	800899a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008986:	4b2a      	ldr	r3, [pc, #168]	; (8008a30 <UART_SetConfig+0xac0>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	08db      	lsrs	r3, r3, #3
 800898c:	f003 0303 	and.w	r3, r3, #3
 8008990:	4a28      	ldr	r2, [pc, #160]	; (8008a34 <UART_SetConfig+0xac4>)
 8008992:	fa22 f303 	lsr.w	r3, r2, r3
 8008996:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008998:	e00f      	b.n	80089ba <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800899a:	4b26      	ldr	r3, [pc, #152]	; (8008a34 <UART_SetConfig+0xac4>)
 800899c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800899e:	e00c      	b.n	80089ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80089a0:	4b25      	ldr	r3, [pc, #148]	; (8008a38 <UART_SetConfig+0xac8>)
 80089a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089a4:	e009      	b.n	80089ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089ac:	e005      	b.n	80089ba <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80089ae:	2300      	movs	r3, #0
 80089b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80089b2:	2301      	movs	r3, #1
 80089b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80089b8:	bf00      	nop
    }

    if (pclk != 0U)
 80089ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d021      	beq.n	8008a04 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c4:	4a1d      	ldr	r2, [pc, #116]	; (8008a3c <UART_SetConfig+0xacc>)
 80089c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089ca:	461a      	mov	r2, r3
 80089cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089ce:	fbb3 f2f2 	udiv	r2, r3, r2
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	085b      	lsrs	r3, r3, #1
 80089d8:	441a      	add	r2, r3
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	685b      	ldr	r3, [r3, #4]
 80089de:	fbb2 f3f3 	udiv	r3, r2, r3
 80089e2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089e6:	2b0f      	cmp	r3, #15
 80089e8:	d909      	bls.n	80089fe <UART_SetConfig+0xa8e>
 80089ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089f0:	d205      	bcs.n	80089fe <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80089f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089f4:	b29a      	uxth	r2, r3
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	60da      	str	r2, [r3, #12]
 80089fc:	e002      	b.n	8008a04 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80089fe:	2301      	movs	r3, #1
 8008a00:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	2201      	movs	r2, #1
 8008a08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	2200      	movs	r2, #0
 8008a18:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008a20:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3748      	adds	r7, #72	; 0x48
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a2e:	bf00      	nop
 8008a30:	58024400 	.word	0x58024400
 8008a34:	03d09000 	.word	0x03d09000
 8008a38:	003d0900 	.word	0x003d0900
 8008a3c:	0800dcbc 	.word	0x0800dcbc

08008a40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b083      	sub	sp, #12
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a4c:	f003 0301 	and.w	r3, r3, #1
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d00a      	beq.n	8008a6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	430a      	orrs	r2, r1
 8008a68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a6e:	f003 0302 	and.w	r3, r3, #2
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d00a      	beq.n	8008a8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	430a      	orrs	r2, r1
 8008a8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a90:	f003 0304 	and.w	r3, r3, #4
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d00a      	beq.n	8008aae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	430a      	orrs	r2, r1
 8008aac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ab2:	f003 0308 	and.w	r3, r3, #8
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d00a      	beq.n	8008ad0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	430a      	orrs	r2, r1
 8008ace:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ad4:	f003 0310 	and.w	r3, r3, #16
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d00a      	beq.n	8008af2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	689b      	ldr	r3, [r3, #8]
 8008ae2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	430a      	orrs	r2, r1
 8008af0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008af6:	f003 0320 	and.w	r3, r3, #32
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d00a      	beq.n	8008b14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	689b      	ldr	r3, [r3, #8]
 8008b04:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	430a      	orrs	r2, r1
 8008b12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d01a      	beq.n	8008b56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	430a      	orrs	r2, r1
 8008b34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b3e:	d10a      	bne.n	8008b56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	430a      	orrs	r2, r1
 8008b54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d00a      	beq.n	8008b78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	430a      	orrs	r2, r1
 8008b76:	605a      	str	r2, [r3, #4]
  }
}
 8008b78:	bf00      	nop
 8008b7a:	370c      	adds	r7, #12
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr

08008b84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b098      	sub	sp, #96	; 0x60
 8008b88:	af02      	add	r7, sp, #8
 8008b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008b94:	f7f9 f808 	bl	8001ba8 <HAL_GetTick>
 8008b98:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f003 0308 	and.w	r3, r3, #8
 8008ba4:	2b08      	cmp	r3, #8
 8008ba6:	d12f      	bne.n	8008c08 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ba8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008bac:	9300      	str	r3, [sp, #0]
 8008bae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 f88e 	bl	8008cd8 <UART_WaitOnFlagUntilTimeout>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d022      	beq.n	8008c08 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bca:	e853 3f00 	ldrex	r3, [r3]
 8008bce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008bd6:	653b      	str	r3, [r7, #80]	; 0x50
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	461a      	mov	r2, r3
 8008bde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008be0:	647b      	str	r3, [r7, #68]	; 0x44
 8008be2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008be6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008be8:	e841 2300 	strex	r3, r2, [r1]
 8008bec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008bee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d1e6      	bne.n	8008bc2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2220      	movs	r2, #32
 8008bf8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c04:	2303      	movs	r3, #3
 8008c06:	e063      	b.n	8008cd0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f003 0304 	and.w	r3, r3, #4
 8008c12:	2b04      	cmp	r3, #4
 8008c14:	d149      	bne.n	8008caa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c16:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c1a:	9300      	str	r3, [sp, #0]
 8008c1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c1e:	2200      	movs	r2, #0
 8008c20:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f000 f857 	bl	8008cd8 <UART_WaitOnFlagUntilTimeout>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d03c      	beq.n	8008caa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c38:	e853 3f00 	ldrex	r3, [r3]
 8008c3c:	623b      	str	r3, [r7, #32]
   return(result);
 8008c3e:	6a3b      	ldr	r3, [r7, #32]
 8008c40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c44:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	461a      	mov	r2, r3
 8008c4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c4e:	633b      	str	r3, [r7, #48]	; 0x30
 8008c50:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c56:	e841 2300 	strex	r3, r2, [r1]
 8008c5a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d1e6      	bne.n	8008c30 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	3308      	adds	r3, #8
 8008c68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	e853 3f00 	ldrex	r3, [r3]
 8008c70:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f023 0301 	bic.w	r3, r3, #1
 8008c78:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	3308      	adds	r3, #8
 8008c80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c82:	61fa      	str	r2, [r7, #28]
 8008c84:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c86:	69b9      	ldr	r1, [r7, #24]
 8008c88:	69fa      	ldr	r2, [r7, #28]
 8008c8a:	e841 2300 	strex	r3, r2, [r1]
 8008c8e:	617b      	str	r3, [r7, #20]
   return(result);
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d1e5      	bne.n	8008c62 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2220      	movs	r2, #32
 8008c9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ca6:	2303      	movs	r3, #3
 8008ca8:	e012      	b.n	8008cd0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2220      	movs	r2, #32
 8008cae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2220      	movs	r2, #32
 8008cb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008cce:	2300      	movs	r3, #0
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3758      	adds	r7, #88	; 0x58
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b084      	sub	sp, #16
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	60f8      	str	r0, [r7, #12]
 8008ce0:	60b9      	str	r1, [r7, #8]
 8008ce2:	603b      	str	r3, [r7, #0]
 8008ce4:	4613      	mov	r3, r2
 8008ce6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ce8:	e049      	b.n	8008d7e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cf0:	d045      	beq.n	8008d7e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cf2:	f7f8 ff59 	bl	8001ba8 <HAL_GetTick>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	1ad3      	subs	r3, r2, r3
 8008cfc:	69ba      	ldr	r2, [r7, #24]
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d302      	bcc.n	8008d08 <UART_WaitOnFlagUntilTimeout+0x30>
 8008d02:	69bb      	ldr	r3, [r7, #24]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d101      	bne.n	8008d0c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008d08:	2303      	movs	r3, #3
 8008d0a:	e048      	b.n	8008d9e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f003 0304 	and.w	r3, r3, #4
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d031      	beq.n	8008d7e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	69db      	ldr	r3, [r3, #28]
 8008d20:	f003 0308 	and.w	r3, r3, #8
 8008d24:	2b08      	cmp	r3, #8
 8008d26:	d110      	bne.n	8008d4a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	2208      	movs	r2, #8
 8008d2e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008d30:	68f8      	ldr	r0, [r7, #12]
 8008d32:	f000 f839 	bl	8008da8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2208      	movs	r2, #8
 8008d3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2200      	movs	r2, #0
 8008d42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8008d46:	2301      	movs	r3, #1
 8008d48:	e029      	b.n	8008d9e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	69db      	ldr	r3, [r3, #28]
 8008d50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d58:	d111      	bne.n	8008d7e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008d62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008d64:	68f8      	ldr	r0, [r7, #12]
 8008d66:	f000 f81f 	bl	8008da8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2220      	movs	r2, #32
 8008d6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2200      	movs	r2, #0
 8008d76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008d7a:	2303      	movs	r3, #3
 8008d7c:	e00f      	b.n	8008d9e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	69da      	ldr	r2, [r3, #28]
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	4013      	ands	r3, r2
 8008d88:	68ba      	ldr	r2, [r7, #8]
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	bf0c      	ite	eq
 8008d8e:	2301      	moveq	r3, #1
 8008d90:	2300      	movne	r3, #0
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	461a      	mov	r2, r3
 8008d96:	79fb      	ldrb	r3, [r7, #7]
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d0a6      	beq.n	8008cea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008d9c:	2300      	movs	r3, #0
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3710      	adds	r7, #16
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
	...

08008da8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b095      	sub	sp, #84	; 0x54
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008db8:	e853 3f00 	ldrex	r3, [r3]
 8008dbc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008dc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	461a      	mov	r2, r3
 8008dcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dce:	643b      	str	r3, [r7, #64]	; 0x40
 8008dd0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008dd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008dd6:	e841 2300 	strex	r3, r2, [r1]
 8008dda:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d1e6      	bne.n	8008db0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	3308      	adds	r3, #8
 8008de8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dea:	6a3b      	ldr	r3, [r7, #32]
 8008dec:	e853 3f00 	ldrex	r3, [r3]
 8008df0:	61fb      	str	r3, [r7, #28]
   return(result);
 8008df2:	69fa      	ldr	r2, [r7, #28]
 8008df4:	4b1e      	ldr	r3, [pc, #120]	; (8008e70 <UART_EndRxTransfer+0xc8>)
 8008df6:	4013      	ands	r3, r2
 8008df8:	64bb      	str	r3, [r7, #72]	; 0x48
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	3308      	adds	r3, #8
 8008e00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e04:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e0a:	e841 2300 	strex	r3, r2, [r1]
 8008e0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d1e5      	bne.n	8008de2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e1a:	2b01      	cmp	r3, #1
 8008e1c:	d118      	bne.n	8008e50 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	e853 3f00 	ldrex	r3, [r3]
 8008e2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	f023 0310 	bic.w	r3, r3, #16
 8008e32:	647b      	str	r3, [r7, #68]	; 0x44
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	461a      	mov	r2, r3
 8008e3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e3c:	61bb      	str	r3, [r7, #24]
 8008e3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e40:	6979      	ldr	r1, [r7, #20]
 8008e42:	69ba      	ldr	r2, [r7, #24]
 8008e44:	e841 2300 	strex	r3, r2, [r1]
 8008e48:	613b      	str	r3, [r7, #16]
   return(result);
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d1e6      	bne.n	8008e1e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2220      	movs	r2, #32
 8008e54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2200      	movs	r2, #0
 8008e62:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008e64:	bf00      	nop
 8008e66:	3754      	adds	r7, #84	; 0x54
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr
 8008e70:	effffffe 	.word	0xeffffffe

08008e74 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b085      	sub	sp, #20
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008e82:	2b01      	cmp	r3, #1
 8008e84:	d101      	bne.n	8008e8a <HAL_UARTEx_DisableFifoMode+0x16>
 8008e86:	2302      	movs	r3, #2
 8008e88:	e027      	b.n	8008eda <HAL_UARTEx_DisableFifoMode+0x66>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2201      	movs	r2, #1
 8008e8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2224      	movs	r2, #36	; 0x24
 8008e96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	681a      	ldr	r2, [r3, #0]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f022 0201 	bic.w	r2, r2, #1
 8008eb0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008eb8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	68fa      	ldr	r2, [r7, #12]
 8008ec6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2220      	movs	r2, #32
 8008ecc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008ed8:	2300      	movs	r3, #0
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3714      	adds	r7, #20
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr

08008ee6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ee6:	b580      	push	{r7, lr}
 8008ee8:	b084      	sub	sp, #16
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
 8008eee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008ef6:	2b01      	cmp	r3, #1
 8008ef8:	d101      	bne.n	8008efe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008efa:	2302      	movs	r3, #2
 8008efc:	e02d      	b.n	8008f5a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2201      	movs	r2, #1
 8008f02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2224      	movs	r2, #36	; 0x24
 8008f0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	681a      	ldr	r2, [r3, #0]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f022 0201 	bic.w	r2, r2, #1
 8008f24:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	689b      	ldr	r3, [r3, #8]
 8008f2c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	683a      	ldr	r2, [r7, #0]
 8008f36:	430a      	orrs	r2, r1
 8008f38:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f000 f850 	bl	8008fe0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	68fa      	ldr	r2, [r7, #12]
 8008f46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2220      	movs	r2, #32
 8008f4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2200      	movs	r2, #0
 8008f54:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008f58:	2300      	movs	r3, #0
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3710      	adds	r7, #16
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}

08008f62 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008f62:	b580      	push	{r7, lr}
 8008f64:	b084      	sub	sp, #16
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
 8008f6a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d101      	bne.n	8008f7a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008f76:	2302      	movs	r3, #2
 8008f78:	e02d      	b.n	8008fd6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2224      	movs	r2, #36	; 0x24
 8008f86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	681a      	ldr	r2, [r3, #0]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f022 0201 	bic.w	r2, r2, #1
 8008fa0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	689b      	ldr	r3, [r3, #8]
 8008fa8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	683a      	ldr	r2, [r7, #0]
 8008fb2:	430a      	orrs	r2, r1
 8008fb4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 f812 	bl	8008fe0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	68fa      	ldr	r2, [r7, #12]
 8008fc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2220      	movs	r2, #32
 8008fc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008fd4:	2300      	movs	r3, #0
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3710      	adds	r7, #16
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
	...

08008fe0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b085      	sub	sp, #20
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d108      	bne.n	8009002 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009000:	e031      	b.n	8009066 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009002:	2310      	movs	r3, #16
 8009004:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009006:	2310      	movs	r3, #16
 8009008:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	689b      	ldr	r3, [r3, #8]
 8009010:	0e5b      	lsrs	r3, r3, #25
 8009012:	b2db      	uxtb	r3, r3
 8009014:	f003 0307 	and.w	r3, r3, #7
 8009018:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	689b      	ldr	r3, [r3, #8]
 8009020:	0f5b      	lsrs	r3, r3, #29
 8009022:	b2db      	uxtb	r3, r3
 8009024:	f003 0307 	and.w	r3, r3, #7
 8009028:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800902a:	7bbb      	ldrb	r3, [r7, #14]
 800902c:	7b3a      	ldrb	r2, [r7, #12]
 800902e:	4911      	ldr	r1, [pc, #68]	; (8009074 <UARTEx_SetNbDataToProcess+0x94>)
 8009030:	5c8a      	ldrb	r2, [r1, r2]
 8009032:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009036:	7b3a      	ldrb	r2, [r7, #12]
 8009038:	490f      	ldr	r1, [pc, #60]	; (8009078 <UARTEx_SetNbDataToProcess+0x98>)
 800903a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800903c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009040:	b29a      	uxth	r2, r3
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009048:	7bfb      	ldrb	r3, [r7, #15]
 800904a:	7b7a      	ldrb	r2, [r7, #13]
 800904c:	4909      	ldr	r1, [pc, #36]	; (8009074 <UARTEx_SetNbDataToProcess+0x94>)
 800904e:	5c8a      	ldrb	r2, [r1, r2]
 8009050:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009054:	7b7a      	ldrb	r2, [r7, #13]
 8009056:	4908      	ldr	r1, [pc, #32]	; (8009078 <UARTEx_SetNbDataToProcess+0x98>)
 8009058:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800905a:	fb93 f3f2 	sdiv	r3, r3, r2
 800905e:	b29a      	uxth	r2, r3
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009066:	bf00      	nop
 8009068:	3714      	adds	r7, #20
 800906a:	46bd      	mov	sp, r7
 800906c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009070:	4770      	bx	lr
 8009072:	bf00      	nop
 8009074:	0800dcd4 	.word	0x0800dcd4
 8009078:	0800dcdc 	.word	0x0800dcdc

0800907c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800907c:	b084      	sub	sp, #16
 800907e:	b580      	push	{r7, lr}
 8009080:	b084      	sub	sp, #16
 8009082:	af00      	add	r7, sp, #0
 8009084:	6078      	str	r0, [r7, #4]
 8009086:	f107 001c 	add.w	r0, r7, #28
 800908a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800908e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009090:	2b01      	cmp	r3, #1
 8009092:	d120      	bne.n	80090d6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009098:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	68da      	ldr	r2, [r3, #12]
 80090a4:	4b2a      	ldr	r3, [pc, #168]	; (8009150 <USB_CoreInit+0xd4>)
 80090a6:	4013      	ands	r3, r2
 80090a8:	687a      	ldr	r2, [r7, #4]
 80090aa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	68db      	ldr	r3, [r3, #12]
 80090b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80090b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090ba:	2b01      	cmp	r3, #1
 80090bc:	d105      	bne.n	80090ca <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	68db      	ldr	r3, [r3, #12]
 80090c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f000 faac 	bl	8009628 <USB_CoreReset>
 80090d0:	4603      	mov	r3, r0
 80090d2:	73fb      	strb	r3, [r7, #15]
 80090d4:	e01a      	b.n	800910c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	68db      	ldr	r3, [r3, #12]
 80090da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f000 faa0 	bl	8009628 <USB_CoreReset>
 80090e8:	4603      	mov	r3, r0
 80090ea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80090ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d106      	bne.n	8009100 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	639a      	str	r2, [r3, #56]	; 0x38
 80090fe:	e005      	b.n	800910c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009104:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800910c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800910e:	2b01      	cmp	r3, #1
 8009110:	d116      	bne.n	8009140 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009116:	b29a      	uxth	r2, r3
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009120:	4b0c      	ldr	r3, [pc, #48]	; (8009154 <USB_CoreInit+0xd8>)
 8009122:	4313      	orrs	r3, r2
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	689b      	ldr	r3, [r3, #8]
 800912c:	f043 0206 	orr.w	r2, r3, #6
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	689b      	ldr	r3, [r3, #8]
 8009138:	f043 0220 	orr.w	r2, r3, #32
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009140:	7bfb      	ldrb	r3, [r7, #15]
}
 8009142:	4618      	mov	r0, r3
 8009144:	3710      	adds	r7, #16
 8009146:	46bd      	mov	sp, r7
 8009148:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800914c:	b004      	add	sp, #16
 800914e:	4770      	bx	lr
 8009150:	ffbdffbf 	.word	0xffbdffbf
 8009154:	03ee0000 	.word	0x03ee0000

08009158 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009158:	b480      	push	{r7}
 800915a:	b083      	sub	sp, #12
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	689b      	ldr	r3, [r3, #8]
 8009164:	f023 0201 	bic.w	r2, r3, #1
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800916c:	2300      	movs	r3, #0
}
 800916e:	4618      	mov	r0, r3
 8009170:	370c      	adds	r7, #12
 8009172:	46bd      	mov	sp, r7
 8009174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009178:	4770      	bx	lr

0800917a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800917a:	b580      	push	{r7, lr}
 800917c:	b084      	sub	sp, #16
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]
 8009182:	460b      	mov	r3, r1
 8009184:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009186:	2300      	movs	r3, #0
 8009188:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	68db      	ldr	r3, [r3, #12]
 800918e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009196:	78fb      	ldrb	r3, [r7, #3]
 8009198:	2b01      	cmp	r3, #1
 800919a:	d115      	bne.n	80091c8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	68db      	ldr	r3, [r3, #12]
 80091a0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80091a8:	2001      	movs	r0, #1
 80091aa:	f7f8 fd09 	bl	8001bc0 <HAL_Delay>
      ms++;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	3301      	adds	r3, #1
 80091b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f000 fa29 	bl	800960c <USB_GetMode>
 80091ba:	4603      	mov	r3, r0
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d01e      	beq.n	80091fe <USB_SetCurrentMode+0x84>
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2b31      	cmp	r3, #49	; 0x31
 80091c4:	d9f0      	bls.n	80091a8 <USB_SetCurrentMode+0x2e>
 80091c6:	e01a      	b.n	80091fe <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80091c8:	78fb      	ldrb	r3, [r7, #3]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d115      	bne.n	80091fa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	68db      	ldr	r3, [r3, #12]
 80091d2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80091da:	2001      	movs	r0, #1
 80091dc:	f7f8 fcf0 	bl	8001bc0 <HAL_Delay>
      ms++;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	3301      	adds	r3, #1
 80091e4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f000 fa10 	bl	800960c <USB_GetMode>
 80091ec:	4603      	mov	r3, r0
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d005      	beq.n	80091fe <USB_SetCurrentMode+0x84>
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2b31      	cmp	r3, #49	; 0x31
 80091f6:	d9f0      	bls.n	80091da <USB_SetCurrentMode+0x60>
 80091f8:	e001      	b.n	80091fe <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80091fa:	2301      	movs	r3, #1
 80091fc:	e005      	b.n	800920a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2b32      	cmp	r3, #50	; 0x32
 8009202:	d101      	bne.n	8009208 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009204:	2301      	movs	r3, #1
 8009206:	e000      	b.n	800920a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009208:	2300      	movs	r3, #0
}
 800920a:	4618      	mov	r0, r3
 800920c:	3710      	adds	r7, #16
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}
	...

08009214 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009214:	b084      	sub	sp, #16
 8009216:	b580      	push	{r7, lr}
 8009218:	b086      	sub	sp, #24
 800921a:	af00      	add	r7, sp, #0
 800921c:	6078      	str	r0, [r7, #4]
 800921e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009222:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009226:	2300      	movs	r3, #0
 8009228:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800922e:	2300      	movs	r3, #0
 8009230:	613b      	str	r3, [r7, #16]
 8009232:	e009      	b.n	8009248 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009234:	687a      	ldr	r2, [r7, #4]
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	3340      	adds	r3, #64	; 0x40
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	4413      	add	r3, r2
 800923e:	2200      	movs	r2, #0
 8009240:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	3301      	adds	r3, #1
 8009246:	613b      	str	r3, [r7, #16]
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	2b0e      	cmp	r3, #14
 800924c:	d9f2      	bls.n	8009234 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800924e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009250:	2b00      	cmp	r3, #0
 8009252:	d11c      	bne.n	800928e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	68fa      	ldr	r2, [r7, #12]
 800925e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009262:	f043 0302 	orr.w	r3, r3, #2
 8009266:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800926c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	601a      	str	r2, [r3, #0]
 800928c:	e005      	b.n	800929a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009292:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80092a0:	461a      	mov	r2, r3
 80092a2:	2300      	movs	r3, #0
 80092a4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092ac:	4619      	mov	r1, r3
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092b4:	461a      	mov	r2, r3
 80092b6:	680b      	ldr	r3, [r1, #0]
 80092b8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80092ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092bc:	2b01      	cmp	r3, #1
 80092be:	d10c      	bne.n	80092da <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80092c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d104      	bne.n	80092d0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80092c6:	2100      	movs	r1, #0
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f000 f965 	bl	8009598 <USB_SetDevSpeed>
 80092ce:	e008      	b.n	80092e2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80092d0:	2101      	movs	r1, #1
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f000 f960 	bl	8009598 <USB_SetDevSpeed>
 80092d8:	e003      	b.n	80092e2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80092da:	2103      	movs	r1, #3
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f000 f95b 	bl	8009598 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80092e2:	2110      	movs	r1, #16
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f000 f8f3 	bl	80094d0 <USB_FlushTxFifo>
 80092ea:	4603      	mov	r3, r0
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d001      	beq.n	80092f4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80092f0:	2301      	movs	r3, #1
 80092f2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f000 f91f 	bl	8009538 <USB_FlushRxFifo>
 80092fa:	4603      	mov	r3, r0
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d001      	beq.n	8009304 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8009300:	2301      	movs	r3, #1
 8009302:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800930a:	461a      	mov	r2, r3
 800930c:	2300      	movs	r3, #0
 800930e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009316:	461a      	mov	r2, r3
 8009318:	2300      	movs	r3, #0
 800931a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009322:	461a      	mov	r2, r3
 8009324:	2300      	movs	r3, #0
 8009326:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009328:	2300      	movs	r3, #0
 800932a:	613b      	str	r3, [r7, #16]
 800932c:	e043      	b.n	80093b6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	015a      	lsls	r2, r3, #5
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	4413      	add	r3, r2
 8009336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009340:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009344:	d118      	bne.n	8009378 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d10a      	bne.n	8009362 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	015a      	lsls	r2, r3, #5
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	4413      	add	r3, r2
 8009354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009358:	461a      	mov	r2, r3
 800935a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800935e:	6013      	str	r3, [r2, #0]
 8009360:	e013      	b.n	800938a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	015a      	lsls	r2, r3, #5
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	4413      	add	r3, r2
 800936a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800936e:	461a      	mov	r2, r3
 8009370:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009374:	6013      	str	r3, [r2, #0]
 8009376:	e008      	b.n	800938a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	015a      	lsls	r2, r3, #5
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	4413      	add	r3, r2
 8009380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009384:	461a      	mov	r2, r3
 8009386:	2300      	movs	r3, #0
 8009388:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	015a      	lsls	r2, r3, #5
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	4413      	add	r3, r2
 8009392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009396:	461a      	mov	r2, r3
 8009398:	2300      	movs	r3, #0
 800939a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	015a      	lsls	r2, r3, #5
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	4413      	add	r3, r2
 80093a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093a8:	461a      	mov	r2, r3
 80093aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80093ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	3301      	adds	r3, #1
 80093b4:	613b      	str	r3, [r7, #16]
 80093b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b8:	693a      	ldr	r2, [r7, #16]
 80093ba:	429a      	cmp	r2, r3
 80093bc:	d3b7      	bcc.n	800932e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80093be:	2300      	movs	r3, #0
 80093c0:	613b      	str	r3, [r7, #16]
 80093c2:	e043      	b.n	800944c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	015a      	lsls	r2, r3, #5
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	4413      	add	r3, r2
 80093cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80093d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80093da:	d118      	bne.n	800940e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d10a      	bne.n	80093f8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	015a      	lsls	r2, r3, #5
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	4413      	add	r3, r2
 80093ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093ee:	461a      	mov	r2, r3
 80093f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80093f4:	6013      	str	r3, [r2, #0]
 80093f6:	e013      	b.n	8009420 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	015a      	lsls	r2, r3, #5
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	4413      	add	r3, r2
 8009400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009404:	461a      	mov	r2, r3
 8009406:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800940a:	6013      	str	r3, [r2, #0]
 800940c:	e008      	b.n	8009420 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	015a      	lsls	r2, r3, #5
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	4413      	add	r3, r2
 8009416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800941a:	461a      	mov	r2, r3
 800941c:	2300      	movs	r3, #0
 800941e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	015a      	lsls	r2, r3, #5
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	4413      	add	r3, r2
 8009428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800942c:	461a      	mov	r2, r3
 800942e:	2300      	movs	r3, #0
 8009430:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	015a      	lsls	r2, r3, #5
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	4413      	add	r3, r2
 800943a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800943e:	461a      	mov	r2, r3
 8009440:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009444:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	3301      	adds	r3, #1
 800944a:	613b      	str	r3, [r7, #16]
 800944c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944e:	693a      	ldr	r2, [r7, #16]
 8009450:	429a      	cmp	r2, r3
 8009452:	d3b7      	bcc.n	80093c4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800945a:	691b      	ldr	r3, [r3, #16]
 800945c:	68fa      	ldr	r2, [r7, #12]
 800945e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009462:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009466:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2200      	movs	r2, #0
 800946c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009474:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009478:	2b00      	cmp	r3, #0
 800947a:	d105      	bne.n	8009488 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	699b      	ldr	r3, [r3, #24]
 8009480:	f043 0210 	orr.w	r2, r3, #16
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	699a      	ldr	r2, [r3, #24]
 800948c:	4b0e      	ldr	r3, [pc, #56]	; (80094c8 <USB_DevInit+0x2b4>)
 800948e:	4313      	orrs	r3, r2
 8009490:	687a      	ldr	r2, [r7, #4]
 8009492:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009496:	2b00      	cmp	r3, #0
 8009498:	d005      	beq.n	80094a6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	699b      	ldr	r3, [r3, #24]
 800949e:	f043 0208 	orr.w	r2, r3, #8
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80094a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d105      	bne.n	80094b8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	699a      	ldr	r2, [r3, #24]
 80094b0:	4b06      	ldr	r3, [pc, #24]	; (80094cc <USB_DevInit+0x2b8>)
 80094b2:	4313      	orrs	r3, r2
 80094b4:	687a      	ldr	r2, [r7, #4]
 80094b6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80094b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3718      	adds	r7, #24
 80094be:	46bd      	mov	sp, r7
 80094c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80094c4:	b004      	add	sp, #16
 80094c6:	4770      	bx	lr
 80094c8:	803c3800 	.word	0x803c3800
 80094cc:	40000004 	.word	0x40000004

080094d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b085      	sub	sp, #20
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80094da:	2300      	movs	r3, #0
 80094dc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	3301      	adds	r3, #1
 80094e2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	4a13      	ldr	r2, [pc, #76]	; (8009534 <USB_FlushTxFifo+0x64>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d901      	bls.n	80094f0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80094ec:	2303      	movs	r3, #3
 80094ee:	e01b      	b.n	8009528 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	691b      	ldr	r3, [r3, #16]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	daf2      	bge.n	80094de <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80094f8:	2300      	movs	r3, #0
 80094fa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	019b      	lsls	r3, r3, #6
 8009500:	f043 0220 	orr.w	r2, r3, #32
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	3301      	adds	r3, #1
 800950c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	4a08      	ldr	r2, [pc, #32]	; (8009534 <USB_FlushTxFifo+0x64>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d901      	bls.n	800951a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009516:	2303      	movs	r3, #3
 8009518:	e006      	b.n	8009528 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	691b      	ldr	r3, [r3, #16]
 800951e:	f003 0320 	and.w	r3, r3, #32
 8009522:	2b20      	cmp	r3, #32
 8009524:	d0f0      	beq.n	8009508 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009526:	2300      	movs	r3, #0
}
 8009528:	4618      	mov	r0, r3
 800952a:	3714      	adds	r7, #20
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr
 8009534:	00030d40 	.word	0x00030d40

08009538 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009538:	b480      	push	{r7}
 800953a:	b085      	sub	sp, #20
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009540:	2300      	movs	r3, #0
 8009542:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	3301      	adds	r3, #1
 8009548:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	4a11      	ldr	r2, [pc, #68]	; (8009594 <USB_FlushRxFifo+0x5c>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d901      	bls.n	8009556 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009552:	2303      	movs	r3, #3
 8009554:	e018      	b.n	8009588 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	691b      	ldr	r3, [r3, #16]
 800955a:	2b00      	cmp	r3, #0
 800955c:	daf2      	bge.n	8009544 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800955e:	2300      	movs	r3, #0
 8009560:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2210      	movs	r2, #16
 8009566:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	3301      	adds	r3, #1
 800956c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	4a08      	ldr	r2, [pc, #32]	; (8009594 <USB_FlushRxFifo+0x5c>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d901      	bls.n	800957a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009576:	2303      	movs	r3, #3
 8009578:	e006      	b.n	8009588 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	691b      	ldr	r3, [r3, #16]
 800957e:	f003 0310 	and.w	r3, r3, #16
 8009582:	2b10      	cmp	r3, #16
 8009584:	d0f0      	beq.n	8009568 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009586:	2300      	movs	r3, #0
}
 8009588:	4618      	mov	r0, r3
 800958a:	3714      	adds	r7, #20
 800958c:	46bd      	mov	sp, r7
 800958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009592:	4770      	bx	lr
 8009594:	00030d40 	.word	0x00030d40

08009598 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009598:	b480      	push	{r7}
 800959a:	b085      	sub	sp, #20
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
 80095a0:	460b      	mov	r3, r1
 80095a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095ae:	681a      	ldr	r2, [r3, #0]
 80095b0:	78fb      	ldrb	r3, [r7, #3]
 80095b2:	68f9      	ldr	r1, [r7, #12]
 80095b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80095b8:	4313      	orrs	r3, r2
 80095ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80095bc:	2300      	movs	r3, #0
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3714      	adds	r7, #20
 80095c2:	46bd      	mov	sp, r7
 80095c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c8:	4770      	bx	lr

080095ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80095ca:	b480      	push	{r7}
 80095cc:	b085      	sub	sp, #20
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	68fa      	ldr	r2, [r7, #12]
 80095e0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80095e4:	f023 0303 	bic.w	r3, r3, #3
 80095e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095f0:	685b      	ldr	r3, [r3, #4]
 80095f2:	68fa      	ldr	r2, [r7, #12]
 80095f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80095f8:	f043 0302 	orr.w	r3, r3, #2
 80095fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80095fe:	2300      	movs	r3, #0
}
 8009600:	4618      	mov	r0, r3
 8009602:	3714      	adds	r7, #20
 8009604:	46bd      	mov	sp, r7
 8009606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960a:	4770      	bx	lr

0800960c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800960c:	b480      	push	{r7}
 800960e:	b083      	sub	sp, #12
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	695b      	ldr	r3, [r3, #20]
 8009618:	f003 0301 	and.w	r3, r3, #1
}
 800961c:	4618      	mov	r0, r3
 800961e:	370c      	adds	r7, #12
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr

08009628 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009628:	b480      	push	{r7}
 800962a:	b085      	sub	sp, #20
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009630:	2300      	movs	r3, #0
 8009632:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	3301      	adds	r3, #1
 8009638:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	4a13      	ldr	r2, [pc, #76]	; (800968c <USB_CoreReset+0x64>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d901      	bls.n	8009646 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009642:	2303      	movs	r3, #3
 8009644:	e01b      	b.n	800967e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	691b      	ldr	r3, [r3, #16]
 800964a:	2b00      	cmp	r3, #0
 800964c:	daf2      	bge.n	8009634 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800964e:	2300      	movs	r3, #0
 8009650:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	691b      	ldr	r3, [r3, #16]
 8009656:	f043 0201 	orr.w	r2, r3, #1
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	3301      	adds	r3, #1
 8009662:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	4a09      	ldr	r2, [pc, #36]	; (800968c <USB_CoreReset+0x64>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d901      	bls.n	8009670 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800966c:	2303      	movs	r3, #3
 800966e:	e006      	b.n	800967e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	691b      	ldr	r3, [r3, #16]
 8009674:	f003 0301 	and.w	r3, r3, #1
 8009678:	2b01      	cmp	r3, #1
 800967a:	d0f0      	beq.n	800965e <USB_CoreReset+0x36>

  return HAL_OK;
 800967c:	2300      	movs	r3, #0
}
 800967e:	4618      	mov	r0, r3
 8009680:	3714      	adds	r7, #20
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr
 800968a:	bf00      	nop
 800968c:	00030d40 	.word	0x00030d40

08009690 <__cvt>:
 8009690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009692:	ed2d 8b02 	vpush	{d8}
 8009696:	eeb0 8b40 	vmov.f64	d8, d0
 800969a:	b085      	sub	sp, #20
 800969c:	4617      	mov	r7, r2
 800969e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80096a0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80096a2:	ee18 2a90 	vmov	r2, s17
 80096a6:	f025 0520 	bic.w	r5, r5, #32
 80096aa:	2a00      	cmp	r2, #0
 80096ac:	bfb6      	itet	lt
 80096ae:	222d      	movlt	r2, #45	; 0x2d
 80096b0:	2200      	movge	r2, #0
 80096b2:	eeb1 8b40 	vneglt.f64	d8, d0
 80096b6:	2d46      	cmp	r5, #70	; 0x46
 80096b8:	460c      	mov	r4, r1
 80096ba:	701a      	strb	r2, [r3, #0]
 80096bc:	d004      	beq.n	80096c8 <__cvt+0x38>
 80096be:	2d45      	cmp	r5, #69	; 0x45
 80096c0:	d100      	bne.n	80096c4 <__cvt+0x34>
 80096c2:	3401      	adds	r4, #1
 80096c4:	2102      	movs	r1, #2
 80096c6:	e000      	b.n	80096ca <__cvt+0x3a>
 80096c8:	2103      	movs	r1, #3
 80096ca:	ab03      	add	r3, sp, #12
 80096cc:	9301      	str	r3, [sp, #4]
 80096ce:	ab02      	add	r3, sp, #8
 80096d0:	9300      	str	r3, [sp, #0]
 80096d2:	4622      	mov	r2, r4
 80096d4:	4633      	mov	r3, r6
 80096d6:	eeb0 0b48 	vmov.f64	d0, d8
 80096da:	f001 f86d 	bl	800a7b8 <_dtoa_r>
 80096de:	2d47      	cmp	r5, #71	; 0x47
 80096e0:	d101      	bne.n	80096e6 <__cvt+0x56>
 80096e2:	07fb      	lsls	r3, r7, #31
 80096e4:	d51a      	bpl.n	800971c <__cvt+0x8c>
 80096e6:	2d46      	cmp	r5, #70	; 0x46
 80096e8:	eb00 0204 	add.w	r2, r0, r4
 80096ec:	d10c      	bne.n	8009708 <__cvt+0x78>
 80096ee:	7803      	ldrb	r3, [r0, #0]
 80096f0:	2b30      	cmp	r3, #48	; 0x30
 80096f2:	d107      	bne.n	8009704 <__cvt+0x74>
 80096f4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80096f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096fc:	bf1c      	itt	ne
 80096fe:	f1c4 0401 	rsbne	r4, r4, #1
 8009702:	6034      	strne	r4, [r6, #0]
 8009704:	6833      	ldr	r3, [r6, #0]
 8009706:	441a      	add	r2, r3
 8009708:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800970c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009710:	bf08      	it	eq
 8009712:	9203      	streq	r2, [sp, #12]
 8009714:	2130      	movs	r1, #48	; 0x30
 8009716:	9b03      	ldr	r3, [sp, #12]
 8009718:	4293      	cmp	r3, r2
 800971a:	d307      	bcc.n	800972c <__cvt+0x9c>
 800971c:	9b03      	ldr	r3, [sp, #12]
 800971e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009720:	1a1b      	subs	r3, r3, r0
 8009722:	6013      	str	r3, [r2, #0]
 8009724:	b005      	add	sp, #20
 8009726:	ecbd 8b02 	vpop	{d8}
 800972a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800972c:	1c5c      	adds	r4, r3, #1
 800972e:	9403      	str	r4, [sp, #12]
 8009730:	7019      	strb	r1, [r3, #0]
 8009732:	e7f0      	b.n	8009716 <__cvt+0x86>

08009734 <__exponent>:
 8009734:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009736:	4603      	mov	r3, r0
 8009738:	2900      	cmp	r1, #0
 800973a:	bfb8      	it	lt
 800973c:	4249      	neglt	r1, r1
 800973e:	f803 2b02 	strb.w	r2, [r3], #2
 8009742:	bfb4      	ite	lt
 8009744:	222d      	movlt	r2, #45	; 0x2d
 8009746:	222b      	movge	r2, #43	; 0x2b
 8009748:	2909      	cmp	r1, #9
 800974a:	7042      	strb	r2, [r0, #1]
 800974c:	dd2a      	ble.n	80097a4 <__exponent+0x70>
 800974e:	f10d 0207 	add.w	r2, sp, #7
 8009752:	4617      	mov	r7, r2
 8009754:	260a      	movs	r6, #10
 8009756:	4694      	mov	ip, r2
 8009758:	fb91 f5f6 	sdiv	r5, r1, r6
 800975c:	fb06 1415 	mls	r4, r6, r5, r1
 8009760:	3430      	adds	r4, #48	; 0x30
 8009762:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009766:	460c      	mov	r4, r1
 8009768:	2c63      	cmp	r4, #99	; 0x63
 800976a:	f102 32ff 	add.w	r2, r2, #4294967295
 800976e:	4629      	mov	r1, r5
 8009770:	dcf1      	bgt.n	8009756 <__exponent+0x22>
 8009772:	3130      	adds	r1, #48	; 0x30
 8009774:	f1ac 0402 	sub.w	r4, ip, #2
 8009778:	f802 1c01 	strb.w	r1, [r2, #-1]
 800977c:	1c41      	adds	r1, r0, #1
 800977e:	4622      	mov	r2, r4
 8009780:	42ba      	cmp	r2, r7
 8009782:	d30a      	bcc.n	800979a <__exponent+0x66>
 8009784:	f10d 0209 	add.w	r2, sp, #9
 8009788:	eba2 020c 	sub.w	r2, r2, ip
 800978c:	42bc      	cmp	r4, r7
 800978e:	bf88      	it	hi
 8009790:	2200      	movhi	r2, #0
 8009792:	4413      	add	r3, r2
 8009794:	1a18      	subs	r0, r3, r0
 8009796:	b003      	add	sp, #12
 8009798:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800979a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800979e:	f801 5f01 	strb.w	r5, [r1, #1]!
 80097a2:	e7ed      	b.n	8009780 <__exponent+0x4c>
 80097a4:	2330      	movs	r3, #48	; 0x30
 80097a6:	3130      	adds	r1, #48	; 0x30
 80097a8:	7083      	strb	r3, [r0, #2]
 80097aa:	70c1      	strb	r1, [r0, #3]
 80097ac:	1d03      	adds	r3, r0, #4
 80097ae:	e7f1      	b.n	8009794 <__exponent+0x60>

080097b0 <_printf_float>:
 80097b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097b4:	b08b      	sub	sp, #44	; 0x2c
 80097b6:	460c      	mov	r4, r1
 80097b8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80097bc:	4616      	mov	r6, r2
 80097be:	461f      	mov	r7, r3
 80097c0:	4605      	mov	r5, r0
 80097c2:	f000 fef3 	bl	800a5ac <_localeconv_r>
 80097c6:	f8d0 b000 	ldr.w	fp, [r0]
 80097ca:	4658      	mov	r0, fp
 80097cc:	f7f6 fdd8 	bl	8000380 <strlen>
 80097d0:	2300      	movs	r3, #0
 80097d2:	9308      	str	r3, [sp, #32]
 80097d4:	f8d8 3000 	ldr.w	r3, [r8]
 80097d8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80097dc:	6822      	ldr	r2, [r4, #0]
 80097de:	3307      	adds	r3, #7
 80097e0:	f023 0307 	bic.w	r3, r3, #7
 80097e4:	f103 0108 	add.w	r1, r3, #8
 80097e8:	f8c8 1000 	str.w	r1, [r8]
 80097ec:	ed93 0b00 	vldr	d0, [r3]
 80097f0:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8009a50 <_printf_float+0x2a0>
 80097f4:	eeb0 7bc0 	vabs.f64	d7, d0
 80097f8:	eeb4 7b46 	vcmp.f64	d7, d6
 80097fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009800:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8009804:	4682      	mov	sl, r0
 8009806:	dd24      	ble.n	8009852 <_printf_float+0xa2>
 8009808:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800980c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009810:	d502      	bpl.n	8009818 <_printf_float+0x68>
 8009812:	232d      	movs	r3, #45	; 0x2d
 8009814:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009818:	498f      	ldr	r1, [pc, #572]	; (8009a58 <_printf_float+0x2a8>)
 800981a:	4b90      	ldr	r3, [pc, #576]	; (8009a5c <_printf_float+0x2ac>)
 800981c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009820:	bf94      	ite	ls
 8009822:	4688      	movls	r8, r1
 8009824:	4698      	movhi	r8, r3
 8009826:	2303      	movs	r3, #3
 8009828:	6123      	str	r3, [r4, #16]
 800982a:	f022 0204 	bic.w	r2, r2, #4
 800982e:	2300      	movs	r3, #0
 8009830:	6022      	str	r2, [r4, #0]
 8009832:	9304      	str	r3, [sp, #16]
 8009834:	9700      	str	r7, [sp, #0]
 8009836:	4633      	mov	r3, r6
 8009838:	aa09      	add	r2, sp, #36	; 0x24
 800983a:	4621      	mov	r1, r4
 800983c:	4628      	mov	r0, r5
 800983e:	f000 f9d1 	bl	8009be4 <_printf_common>
 8009842:	3001      	adds	r0, #1
 8009844:	f040 808a 	bne.w	800995c <_printf_float+0x1ac>
 8009848:	f04f 30ff 	mov.w	r0, #4294967295
 800984c:	b00b      	add	sp, #44	; 0x2c
 800984e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009852:	eeb4 0b40 	vcmp.f64	d0, d0
 8009856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800985a:	d709      	bvc.n	8009870 <_printf_float+0xc0>
 800985c:	ee10 3a90 	vmov	r3, s1
 8009860:	2b00      	cmp	r3, #0
 8009862:	bfbc      	itt	lt
 8009864:	232d      	movlt	r3, #45	; 0x2d
 8009866:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800986a:	497d      	ldr	r1, [pc, #500]	; (8009a60 <_printf_float+0x2b0>)
 800986c:	4b7d      	ldr	r3, [pc, #500]	; (8009a64 <_printf_float+0x2b4>)
 800986e:	e7d5      	b.n	800981c <_printf_float+0x6c>
 8009870:	6863      	ldr	r3, [r4, #4]
 8009872:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009876:	9104      	str	r1, [sp, #16]
 8009878:	1c59      	adds	r1, r3, #1
 800987a:	d13c      	bne.n	80098f6 <_printf_float+0x146>
 800987c:	2306      	movs	r3, #6
 800987e:	6063      	str	r3, [r4, #4]
 8009880:	2300      	movs	r3, #0
 8009882:	9303      	str	r3, [sp, #12]
 8009884:	ab08      	add	r3, sp, #32
 8009886:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800988a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800988e:	ab07      	add	r3, sp, #28
 8009890:	6861      	ldr	r1, [r4, #4]
 8009892:	9300      	str	r3, [sp, #0]
 8009894:	6022      	str	r2, [r4, #0]
 8009896:	f10d 031b 	add.w	r3, sp, #27
 800989a:	4628      	mov	r0, r5
 800989c:	f7ff fef8 	bl	8009690 <__cvt>
 80098a0:	9b04      	ldr	r3, [sp, #16]
 80098a2:	9907      	ldr	r1, [sp, #28]
 80098a4:	2b47      	cmp	r3, #71	; 0x47
 80098a6:	4680      	mov	r8, r0
 80098a8:	d108      	bne.n	80098bc <_printf_float+0x10c>
 80098aa:	1cc8      	adds	r0, r1, #3
 80098ac:	db02      	blt.n	80098b4 <_printf_float+0x104>
 80098ae:	6863      	ldr	r3, [r4, #4]
 80098b0:	4299      	cmp	r1, r3
 80098b2:	dd41      	ble.n	8009938 <_printf_float+0x188>
 80098b4:	f1a9 0902 	sub.w	r9, r9, #2
 80098b8:	fa5f f989 	uxtb.w	r9, r9
 80098bc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80098c0:	d820      	bhi.n	8009904 <_printf_float+0x154>
 80098c2:	3901      	subs	r1, #1
 80098c4:	464a      	mov	r2, r9
 80098c6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80098ca:	9107      	str	r1, [sp, #28]
 80098cc:	f7ff ff32 	bl	8009734 <__exponent>
 80098d0:	9a08      	ldr	r2, [sp, #32]
 80098d2:	9004      	str	r0, [sp, #16]
 80098d4:	1813      	adds	r3, r2, r0
 80098d6:	2a01      	cmp	r2, #1
 80098d8:	6123      	str	r3, [r4, #16]
 80098da:	dc02      	bgt.n	80098e2 <_printf_float+0x132>
 80098dc:	6822      	ldr	r2, [r4, #0]
 80098de:	07d2      	lsls	r2, r2, #31
 80098e0:	d501      	bpl.n	80098e6 <_printf_float+0x136>
 80098e2:	3301      	adds	r3, #1
 80098e4:	6123      	str	r3, [r4, #16]
 80098e6:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d0a2      	beq.n	8009834 <_printf_float+0x84>
 80098ee:	232d      	movs	r3, #45	; 0x2d
 80098f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098f4:	e79e      	b.n	8009834 <_printf_float+0x84>
 80098f6:	9904      	ldr	r1, [sp, #16]
 80098f8:	2947      	cmp	r1, #71	; 0x47
 80098fa:	d1c1      	bne.n	8009880 <_printf_float+0xd0>
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d1bf      	bne.n	8009880 <_printf_float+0xd0>
 8009900:	2301      	movs	r3, #1
 8009902:	e7bc      	b.n	800987e <_printf_float+0xce>
 8009904:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009908:	d118      	bne.n	800993c <_printf_float+0x18c>
 800990a:	2900      	cmp	r1, #0
 800990c:	6863      	ldr	r3, [r4, #4]
 800990e:	dd0b      	ble.n	8009928 <_printf_float+0x178>
 8009910:	6121      	str	r1, [r4, #16]
 8009912:	b913      	cbnz	r3, 800991a <_printf_float+0x16a>
 8009914:	6822      	ldr	r2, [r4, #0]
 8009916:	07d0      	lsls	r0, r2, #31
 8009918:	d502      	bpl.n	8009920 <_printf_float+0x170>
 800991a:	3301      	adds	r3, #1
 800991c:	440b      	add	r3, r1
 800991e:	6123      	str	r3, [r4, #16]
 8009920:	2300      	movs	r3, #0
 8009922:	65a1      	str	r1, [r4, #88]	; 0x58
 8009924:	9304      	str	r3, [sp, #16]
 8009926:	e7de      	b.n	80098e6 <_printf_float+0x136>
 8009928:	b913      	cbnz	r3, 8009930 <_printf_float+0x180>
 800992a:	6822      	ldr	r2, [r4, #0]
 800992c:	07d2      	lsls	r2, r2, #31
 800992e:	d501      	bpl.n	8009934 <_printf_float+0x184>
 8009930:	3302      	adds	r3, #2
 8009932:	e7f4      	b.n	800991e <_printf_float+0x16e>
 8009934:	2301      	movs	r3, #1
 8009936:	e7f2      	b.n	800991e <_printf_float+0x16e>
 8009938:	f04f 0967 	mov.w	r9, #103	; 0x67
 800993c:	9b08      	ldr	r3, [sp, #32]
 800993e:	4299      	cmp	r1, r3
 8009940:	db05      	blt.n	800994e <_printf_float+0x19e>
 8009942:	6823      	ldr	r3, [r4, #0]
 8009944:	6121      	str	r1, [r4, #16]
 8009946:	07d8      	lsls	r0, r3, #31
 8009948:	d5ea      	bpl.n	8009920 <_printf_float+0x170>
 800994a:	1c4b      	adds	r3, r1, #1
 800994c:	e7e7      	b.n	800991e <_printf_float+0x16e>
 800994e:	2900      	cmp	r1, #0
 8009950:	bfd4      	ite	le
 8009952:	f1c1 0202 	rsble	r2, r1, #2
 8009956:	2201      	movgt	r2, #1
 8009958:	4413      	add	r3, r2
 800995a:	e7e0      	b.n	800991e <_printf_float+0x16e>
 800995c:	6823      	ldr	r3, [r4, #0]
 800995e:	055a      	lsls	r2, r3, #21
 8009960:	d407      	bmi.n	8009972 <_printf_float+0x1c2>
 8009962:	6923      	ldr	r3, [r4, #16]
 8009964:	4642      	mov	r2, r8
 8009966:	4631      	mov	r1, r6
 8009968:	4628      	mov	r0, r5
 800996a:	47b8      	blx	r7
 800996c:	3001      	adds	r0, #1
 800996e:	d12a      	bne.n	80099c6 <_printf_float+0x216>
 8009970:	e76a      	b.n	8009848 <_printf_float+0x98>
 8009972:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009976:	f240 80e0 	bls.w	8009b3a <_printf_float+0x38a>
 800997a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800997e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009986:	d133      	bne.n	80099f0 <_printf_float+0x240>
 8009988:	4a37      	ldr	r2, [pc, #220]	; (8009a68 <_printf_float+0x2b8>)
 800998a:	2301      	movs	r3, #1
 800998c:	4631      	mov	r1, r6
 800998e:	4628      	mov	r0, r5
 8009990:	47b8      	blx	r7
 8009992:	3001      	adds	r0, #1
 8009994:	f43f af58 	beq.w	8009848 <_printf_float+0x98>
 8009998:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800999c:	429a      	cmp	r2, r3
 800999e:	db02      	blt.n	80099a6 <_printf_float+0x1f6>
 80099a0:	6823      	ldr	r3, [r4, #0]
 80099a2:	07d8      	lsls	r0, r3, #31
 80099a4:	d50f      	bpl.n	80099c6 <_printf_float+0x216>
 80099a6:	4653      	mov	r3, sl
 80099a8:	465a      	mov	r2, fp
 80099aa:	4631      	mov	r1, r6
 80099ac:	4628      	mov	r0, r5
 80099ae:	47b8      	blx	r7
 80099b0:	3001      	adds	r0, #1
 80099b2:	f43f af49 	beq.w	8009848 <_printf_float+0x98>
 80099b6:	f04f 0800 	mov.w	r8, #0
 80099ba:	f104 091a 	add.w	r9, r4, #26
 80099be:	9b08      	ldr	r3, [sp, #32]
 80099c0:	3b01      	subs	r3, #1
 80099c2:	4543      	cmp	r3, r8
 80099c4:	dc09      	bgt.n	80099da <_printf_float+0x22a>
 80099c6:	6823      	ldr	r3, [r4, #0]
 80099c8:	079b      	lsls	r3, r3, #30
 80099ca:	f100 8106 	bmi.w	8009bda <_printf_float+0x42a>
 80099ce:	68e0      	ldr	r0, [r4, #12]
 80099d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099d2:	4298      	cmp	r0, r3
 80099d4:	bfb8      	it	lt
 80099d6:	4618      	movlt	r0, r3
 80099d8:	e738      	b.n	800984c <_printf_float+0x9c>
 80099da:	2301      	movs	r3, #1
 80099dc:	464a      	mov	r2, r9
 80099de:	4631      	mov	r1, r6
 80099e0:	4628      	mov	r0, r5
 80099e2:	47b8      	blx	r7
 80099e4:	3001      	adds	r0, #1
 80099e6:	f43f af2f 	beq.w	8009848 <_printf_float+0x98>
 80099ea:	f108 0801 	add.w	r8, r8, #1
 80099ee:	e7e6      	b.n	80099be <_printf_float+0x20e>
 80099f0:	9b07      	ldr	r3, [sp, #28]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	dc3a      	bgt.n	8009a6c <_printf_float+0x2bc>
 80099f6:	4a1c      	ldr	r2, [pc, #112]	; (8009a68 <_printf_float+0x2b8>)
 80099f8:	2301      	movs	r3, #1
 80099fa:	4631      	mov	r1, r6
 80099fc:	4628      	mov	r0, r5
 80099fe:	47b8      	blx	r7
 8009a00:	3001      	adds	r0, #1
 8009a02:	f43f af21 	beq.w	8009848 <_printf_float+0x98>
 8009a06:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	d102      	bne.n	8009a14 <_printf_float+0x264>
 8009a0e:	6823      	ldr	r3, [r4, #0]
 8009a10:	07d9      	lsls	r1, r3, #31
 8009a12:	d5d8      	bpl.n	80099c6 <_printf_float+0x216>
 8009a14:	4653      	mov	r3, sl
 8009a16:	465a      	mov	r2, fp
 8009a18:	4631      	mov	r1, r6
 8009a1a:	4628      	mov	r0, r5
 8009a1c:	47b8      	blx	r7
 8009a1e:	3001      	adds	r0, #1
 8009a20:	f43f af12 	beq.w	8009848 <_printf_float+0x98>
 8009a24:	f04f 0900 	mov.w	r9, #0
 8009a28:	f104 0a1a 	add.w	sl, r4, #26
 8009a2c:	9b07      	ldr	r3, [sp, #28]
 8009a2e:	425b      	negs	r3, r3
 8009a30:	454b      	cmp	r3, r9
 8009a32:	dc01      	bgt.n	8009a38 <_printf_float+0x288>
 8009a34:	9b08      	ldr	r3, [sp, #32]
 8009a36:	e795      	b.n	8009964 <_printf_float+0x1b4>
 8009a38:	2301      	movs	r3, #1
 8009a3a:	4652      	mov	r2, sl
 8009a3c:	4631      	mov	r1, r6
 8009a3e:	4628      	mov	r0, r5
 8009a40:	47b8      	blx	r7
 8009a42:	3001      	adds	r0, #1
 8009a44:	f43f af00 	beq.w	8009848 <_printf_float+0x98>
 8009a48:	f109 0901 	add.w	r9, r9, #1
 8009a4c:	e7ee      	b.n	8009a2c <_printf_float+0x27c>
 8009a4e:	bf00      	nop
 8009a50:	ffffffff 	.word	0xffffffff
 8009a54:	7fefffff 	.word	0x7fefffff
 8009a58:	0800dce4 	.word	0x0800dce4
 8009a5c:	0800dce8 	.word	0x0800dce8
 8009a60:	0800dcec 	.word	0x0800dcec
 8009a64:	0800dcf0 	.word	0x0800dcf0
 8009a68:	0800dcf4 	.word	0x0800dcf4
 8009a6c:	9a08      	ldr	r2, [sp, #32]
 8009a6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009a70:	429a      	cmp	r2, r3
 8009a72:	bfa8      	it	ge
 8009a74:	461a      	movge	r2, r3
 8009a76:	2a00      	cmp	r2, #0
 8009a78:	4691      	mov	r9, r2
 8009a7a:	dc38      	bgt.n	8009aee <_printf_float+0x33e>
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	9305      	str	r3, [sp, #20]
 8009a80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a84:	f104 021a 	add.w	r2, r4, #26
 8009a88:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009a8a:	9905      	ldr	r1, [sp, #20]
 8009a8c:	9304      	str	r3, [sp, #16]
 8009a8e:	eba3 0309 	sub.w	r3, r3, r9
 8009a92:	428b      	cmp	r3, r1
 8009a94:	dc33      	bgt.n	8009afe <_printf_float+0x34e>
 8009a96:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	db3c      	blt.n	8009b18 <_printf_float+0x368>
 8009a9e:	6823      	ldr	r3, [r4, #0]
 8009aa0:	07da      	lsls	r2, r3, #31
 8009aa2:	d439      	bmi.n	8009b18 <_printf_float+0x368>
 8009aa4:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8009aa8:	eba2 0903 	sub.w	r9, r2, r3
 8009aac:	9b04      	ldr	r3, [sp, #16]
 8009aae:	1ad2      	subs	r2, r2, r3
 8009ab0:	4591      	cmp	r9, r2
 8009ab2:	bfa8      	it	ge
 8009ab4:	4691      	movge	r9, r2
 8009ab6:	f1b9 0f00 	cmp.w	r9, #0
 8009aba:	dc35      	bgt.n	8009b28 <_printf_float+0x378>
 8009abc:	f04f 0800 	mov.w	r8, #0
 8009ac0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ac4:	f104 0a1a 	add.w	sl, r4, #26
 8009ac8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009acc:	1a9b      	subs	r3, r3, r2
 8009ace:	eba3 0309 	sub.w	r3, r3, r9
 8009ad2:	4543      	cmp	r3, r8
 8009ad4:	f77f af77 	ble.w	80099c6 <_printf_float+0x216>
 8009ad8:	2301      	movs	r3, #1
 8009ada:	4652      	mov	r2, sl
 8009adc:	4631      	mov	r1, r6
 8009ade:	4628      	mov	r0, r5
 8009ae0:	47b8      	blx	r7
 8009ae2:	3001      	adds	r0, #1
 8009ae4:	f43f aeb0 	beq.w	8009848 <_printf_float+0x98>
 8009ae8:	f108 0801 	add.w	r8, r8, #1
 8009aec:	e7ec      	b.n	8009ac8 <_printf_float+0x318>
 8009aee:	4613      	mov	r3, r2
 8009af0:	4631      	mov	r1, r6
 8009af2:	4642      	mov	r2, r8
 8009af4:	4628      	mov	r0, r5
 8009af6:	47b8      	blx	r7
 8009af8:	3001      	adds	r0, #1
 8009afa:	d1bf      	bne.n	8009a7c <_printf_float+0x2cc>
 8009afc:	e6a4      	b.n	8009848 <_printf_float+0x98>
 8009afe:	2301      	movs	r3, #1
 8009b00:	4631      	mov	r1, r6
 8009b02:	4628      	mov	r0, r5
 8009b04:	9204      	str	r2, [sp, #16]
 8009b06:	47b8      	blx	r7
 8009b08:	3001      	adds	r0, #1
 8009b0a:	f43f ae9d 	beq.w	8009848 <_printf_float+0x98>
 8009b0e:	9b05      	ldr	r3, [sp, #20]
 8009b10:	9a04      	ldr	r2, [sp, #16]
 8009b12:	3301      	adds	r3, #1
 8009b14:	9305      	str	r3, [sp, #20]
 8009b16:	e7b7      	b.n	8009a88 <_printf_float+0x2d8>
 8009b18:	4653      	mov	r3, sl
 8009b1a:	465a      	mov	r2, fp
 8009b1c:	4631      	mov	r1, r6
 8009b1e:	4628      	mov	r0, r5
 8009b20:	47b8      	blx	r7
 8009b22:	3001      	adds	r0, #1
 8009b24:	d1be      	bne.n	8009aa4 <_printf_float+0x2f4>
 8009b26:	e68f      	b.n	8009848 <_printf_float+0x98>
 8009b28:	9a04      	ldr	r2, [sp, #16]
 8009b2a:	464b      	mov	r3, r9
 8009b2c:	4442      	add	r2, r8
 8009b2e:	4631      	mov	r1, r6
 8009b30:	4628      	mov	r0, r5
 8009b32:	47b8      	blx	r7
 8009b34:	3001      	adds	r0, #1
 8009b36:	d1c1      	bne.n	8009abc <_printf_float+0x30c>
 8009b38:	e686      	b.n	8009848 <_printf_float+0x98>
 8009b3a:	9a08      	ldr	r2, [sp, #32]
 8009b3c:	2a01      	cmp	r2, #1
 8009b3e:	dc01      	bgt.n	8009b44 <_printf_float+0x394>
 8009b40:	07db      	lsls	r3, r3, #31
 8009b42:	d537      	bpl.n	8009bb4 <_printf_float+0x404>
 8009b44:	2301      	movs	r3, #1
 8009b46:	4642      	mov	r2, r8
 8009b48:	4631      	mov	r1, r6
 8009b4a:	4628      	mov	r0, r5
 8009b4c:	47b8      	blx	r7
 8009b4e:	3001      	adds	r0, #1
 8009b50:	f43f ae7a 	beq.w	8009848 <_printf_float+0x98>
 8009b54:	4653      	mov	r3, sl
 8009b56:	465a      	mov	r2, fp
 8009b58:	4631      	mov	r1, r6
 8009b5a:	4628      	mov	r0, r5
 8009b5c:	47b8      	blx	r7
 8009b5e:	3001      	adds	r0, #1
 8009b60:	f43f ae72 	beq.w	8009848 <_printf_float+0x98>
 8009b64:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009b68:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b70:	9b08      	ldr	r3, [sp, #32]
 8009b72:	d01a      	beq.n	8009baa <_printf_float+0x3fa>
 8009b74:	3b01      	subs	r3, #1
 8009b76:	f108 0201 	add.w	r2, r8, #1
 8009b7a:	4631      	mov	r1, r6
 8009b7c:	4628      	mov	r0, r5
 8009b7e:	47b8      	blx	r7
 8009b80:	3001      	adds	r0, #1
 8009b82:	d10e      	bne.n	8009ba2 <_printf_float+0x3f2>
 8009b84:	e660      	b.n	8009848 <_printf_float+0x98>
 8009b86:	2301      	movs	r3, #1
 8009b88:	464a      	mov	r2, r9
 8009b8a:	4631      	mov	r1, r6
 8009b8c:	4628      	mov	r0, r5
 8009b8e:	47b8      	blx	r7
 8009b90:	3001      	adds	r0, #1
 8009b92:	f43f ae59 	beq.w	8009848 <_printf_float+0x98>
 8009b96:	f108 0801 	add.w	r8, r8, #1
 8009b9a:	9b08      	ldr	r3, [sp, #32]
 8009b9c:	3b01      	subs	r3, #1
 8009b9e:	4543      	cmp	r3, r8
 8009ba0:	dcf1      	bgt.n	8009b86 <_printf_float+0x3d6>
 8009ba2:	9b04      	ldr	r3, [sp, #16]
 8009ba4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009ba8:	e6dd      	b.n	8009966 <_printf_float+0x1b6>
 8009baa:	f04f 0800 	mov.w	r8, #0
 8009bae:	f104 091a 	add.w	r9, r4, #26
 8009bb2:	e7f2      	b.n	8009b9a <_printf_float+0x3ea>
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	4642      	mov	r2, r8
 8009bb8:	e7df      	b.n	8009b7a <_printf_float+0x3ca>
 8009bba:	2301      	movs	r3, #1
 8009bbc:	464a      	mov	r2, r9
 8009bbe:	4631      	mov	r1, r6
 8009bc0:	4628      	mov	r0, r5
 8009bc2:	47b8      	blx	r7
 8009bc4:	3001      	adds	r0, #1
 8009bc6:	f43f ae3f 	beq.w	8009848 <_printf_float+0x98>
 8009bca:	f108 0801 	add.w	r8, r8, #1
 8009bce:	68e3      	ldr	r3, [r4, #12]
 8009bd0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009bd2:	1a5b      	subs	r3, r3, r1
 8009bd4:	4543      	cmp	r3, r8
 8009bd6:	dcf0      	bgt.n	8009bba <_printf_float+0x40a>
 8009bd8:	e6f9      	b.n	80099ce <_printf_float+0x21e>
 8009bda:	f04f 0800 	mov.w	r8, #0
 8009bde:	f104 0919 	add.w	r9, r4, #25
 8009be2:	e7f4      	b.n	8009bce <_printf_float+0x41e>

08009be4 <_printf_common>:
 8009be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009be8:	4616      	mov	r6, r2
 8009bea:	4699      	mov	r9, r3
 8009bec:	688a      	ldr	r2, [r1, #8]
 8009bee:	690b      	ldr	r3, [r1, #16]
 8009bf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	bfb8      	it	lt
 8009bf8:	4613      	movlt	r3, r2
 8009bfa:	6033      	str	r3, [r6, #0]
 8009bfc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009c00:	4607      	mov	r7, r0
 8009c02:	460c      	mov	r4, r1
 8009c04:	b10a      	cbz	r2, 8009c0a <_printf_common+0x26>
 8009c06:	3301      	adds	r3, #1
 8009c08:	6033      	str	r3, [r6, #0]
 8009c0a:	6823      	ldr	r3, [r4, #0]
 8009c0c:	0699      	lsls	r1, r3, #26
 8009c0e:	bf42      	ittt	mi
 8009c10:	6833      	ldrmi	r3, [r6, #0]
 8009c12:	3302      	addmi	r3, #2
 8009c14:	6033      	strmi	r3, [r6, #0]
 8009c16:	6825      	ldr	r5, [r4, #0]
 8009c18:	f015 0506 	ands.w	r5, r5, #6
 8009c1c:	d106      	bne.n	8009c2c <_printf_common+0x48>
 8009c1e:	f104 0a19 	add.w	sl, r4, #25
 8009c22:	68e3      	ldr	r3, [r4, #12]
 8009c24:	6832      	ldr	r2, [r6, #0]
 8009c26:	1a9b      	subs	r3, r3, r2
 8009c28:	42ab      	cmp	r3, r5
 8009c2a:	dc26      	bgt.n	8009c7a <_printf_common+0x96>
 8009c2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009c30:	1e13      	subs	r3, r2, #0
 8009c32:	6822      	ldr	r2, [r4, #0]
 8009c34:	bf18      	it	ne
 8009c36:	2301      	movne	r3, #1
 8009c38:	0692      	lsls	r2, r2, #26
 8009c3a:	d42b      	bmi.n	8009c94 <_printf_common+0xb0>
 8009c3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c40:	4649      	mov	r1, r9
 8009c42:	4638      	mov	r0, r7
 8009c44:	47c0      	blx	r8
 8009c46:	3001      	adds	r0, #1
 8009c48:	d01e      	beq.n	8009c88 <_printf_common+0xa4>
 8009c4a:	6823      	ldr	r3, [r4, #0]
 8009c4c:	6922      	ldr	r2, [r4, #16]
 8009c4e:	f003 0306 	and.w	r3, r3, #6
 8009c52:	2b04      	cmp	r3, #4
 8009c54:	bf02      	ittt	eq
 8009c56:	68e5      	ldreq	r5, [r4, #12]
 8009c58:	6833      	ldreq	r3, [r6, #0]
 8009c5a:	1aed      	subeq	r5, r5, r3
 8009c5c:	68a3      	ldr	r3, [r4, #8]
 8009c5e:	bf0c      	ite	eq
 8009c60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c64:	2500      	movne	r5, #0
 8009c66:	4293      	cmp	r3, r2
 8009c68:	bfc4      	itt	gt
 8009c6a:	1a9b      	subgt	r3, r3, r2
 8009c6c:	18ed      	addgt	r5, r5, r3
 8009c6e:	2600      	movs	r6, #0
 8009c70:	341a      	adds	r4, #26
 8009c72:	42b5      	cmp	r5, r6
 8009c74:	d11a      	bne.n	8009cac <_printf_common+0xc8>
 8009c76:	2000      	movs	r0, #0
 8009c78:	e008      	b.n	8009c8c <_printf_common+0xa8>
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	4652      	mov	r2, sl
 8009c7e:	4649      	mov	r1, r9
 8009c80:	4638      	mov	r0, r7
 8009c82:	47c0      	blx	r8
 8009c84:	3001      	adds	r0, #1
 8009c86:	d103      	bne.n	8009c90 <_printf_common+0xac>
 8009c88:	f04f 30ff 	mov.w	r0, #4294967295
 8009c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c90:	3501      	adds	r5, #1
 8009c92:	e7c6      	b.n	8009c22 <_printf_common+0x3e>
 8009c94:	18e1      	adds	r1, r4, r3
 8009c96:	1c5a      	adds	r2, r3, #1
 8009c98:	2030      	movs	r0, #48	; 0x30
 8009c9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009c9e:	4422      	add	r2, r4
 8009ca0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009ca4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009ca8:	3302      	adds	r3, #2
 8009caa:	e7c7      	b.n	8009c3c <_printf_common+0x58>
 8009cac:	2301      	movs	r3, #1
 8009cae:	4622      	mov	r2, r4
 8009cb0:	4649      	mov	r1, r9
 8009cb2:	4638      	mov	r0, r7
 8009cb4:	47c0      	blx	r8
 8009cb6:	3001      	adds	r0, #1
 8009cb8:	d0e6      	beq.n	8009c88 <_printf_common+0xa4>
 8009cba:	3601      	adds	r6, #1
 8009cbc:	e7d9      	b.n	8009c72 <_printf_common+0x8e>
	...

08009cc0 <_printf_i>:
 8009cc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009cc4:	7e0f      	ldrb	r7, [r1, #24]
 8009cc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009cc8:	2f78      	cmp	r7, #120	; 0x78
 8009cca:	4691      	mov	r9, r2
 8009ccc:	4680      	mov	r8, r0
 8009cce:	460c      	mov	r4, r1
 8009cd0:	469a      	mov	sl, r3
 8009cd2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009cd6:	d807      	bhi.n	8009ce8 <_printf_i+0x28>
 8009cd8:	2f62      	cmp	r7, #98	; 0x62
 8009cda:	d80a      	bhi.n	8009cf2 <_printf_i+0x32>
 8009cdc:	2f00      	cmp	r7, #0
 8009cde:	f000 80d4 	beq.w	8009e8a <_printf_i+0x1ca>
 8009ce2:	2f58      	cmp	r7, #88	; 0x58
 8009ce4:	f000 80c0 	beq.w	8009e68 <_printf_i+0x1a8>
 8009ce8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009cec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009cf0:	e03a      	b.n	8009d68 <_printf_i+0xa8>
 8009cf2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009cf6:	2b15      	cmp	r3, #21
 8009cf8:	d8f6      	bhi.n	8009ce8 <_printf_i+0x28>
 8009cfa:	a101      	add	r1, pc, #4	; (adr r1, 8009d00 <_printf_i+0x40>)
 8009cfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009d00:	08009d59 	.word	0x08009d59
 8009d04:	08009d6d 	.word	0x08009d6d
 8009d08:	08009ce9 	.word	0x08009ce9
 8009d0c:	08009ce9 	.word	0x08009ce9
 8009d10:	08009ce9 	.word	0x08009ce9
 8009d14:	08009ce9 	.word	0x08009ce9
 8009d18:	08009d6d 	.word	0x08009d6d
 8009d1c:	08009ce9 	.word	0x08009ce9
 8009d20:	08009ce9 	.word	0x08009ce9
 8009d24:	08009ce9 	.word	0x08009ce9
 8009d28:	08009ce9 	.word	0x08009ce9
 8009d2c:	08009e71 	.word	0x08009e71
 8009d30:	08009d99 	.word	0x08009d99
 8009d34:	08009e2b 	.word	0x08009e2b
 8009d38:	08009ce9 	.word	0x08009ce9
 8009d3c:	08009ce9 	.word	0x08009ce9
 8009d40:	08009e93 	.word	0x08009e93
 8009d44:	08009ce9 	.word	0x08009ce9
 8009d48:	08009d99 	.word	0x08009d99
 8009d4c:	08009ce9 	.word	0x08009ce9
 8009d50:	08009ce9 	.word	0x08009ce9
 8009d54:	08009e33 	.word	0x08009e33
 8009d58:	682b      	ldr	r3, [r5, #0]
 8009d5a:	1d1a      	adds	r2, r3, #4
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	602a      	str	r2, [r5, #0]
 8009d60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d68:	2301      	movs	r3, #1
 8009d6a:	e09f      	b.n	8009eac <_printf_i+0x1ec>
 8009d6c:	6820      	ldr	r0, [r4, #0]
 8009d6e:	682b      	ldr	r3, [r5, #0]
 8009d70:	0607      	lsls	r7, r0, #24
 8009d72:	f103 0104 	add.w	r1, r3, #4
 8009d76:	6029      	str	r1, [r5, #0]
 8009d78:	d501      	bpl.n	8009d7e <_printf_i+0xbe>
 8009d7a:	681e      	ldr	r6, [r3, #0]
 8009d7c:	e003      	b.n	8009d86 <_printf_i+0xc6>
 8009d7e:	0646      	lsls	r6, r0, #25
 8009d80:	d5fb      	bpl.n	8009d7a <_printf_i+0xba>
 8009d82:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009d86:	2e00      	cmp	r6, #0
 8009d88:	da03      	bge.n	8009d92 <_printf_i+0xd2>
 8009d8a:	232d      	movs	r3, #45	; 0x2d
 8009d8c:	4276      	negs	r6, r6
 8009d8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d92:	485a      	ldr	r0, [pc, #360]	; (8009efc <_printf_i+0x23c>)
 8009d94:	230a      	movs	r3, #10
 8009d96:	e012      	b.n	8009dbe <_printf_i+0xfe>
 8009d98:	682b      	ldr	r3, [r5, #0]
 8009d9a:	6820      	ldr	r0, [r4, #0]
 8009d9c:	1d19      	adds	r1, r3, #4
 8009d9e:	6029      	str	r1, [r5, #0]
 8009da0:	0605      	lsls	r5, r0, #24
 8009da2:	d501      	bpl.n	8009da8 <_printf_i+0xe8>
 8009da4:	681e      	ldr	r6, [r3, #0]
 8009da6:	e002      	b.n	8009dae <_printf_i+0xee>
 8009da8:	0641      	lsls	r1, r0, #25
 8009daa:	d5fb      	bpl.n	8009da4 <_printf_i+0xe4>
 8009dac:	881e      	ldrh	r6, [r3, #0]
 8009dae:	4853      	ldr	r0, [pc, #332]	; (8009efc <_printf_i+0x23c>)
 8009db0:	2f6f      	cmp	r7, #111	; 0x6f
 8009db2:	bf0c      	ite	eq
 8009db4:	2308      	moveq	r3, #8
 8009db6:	230a      	movne	r3, #10
 8009db8:	2100      	movs	r1, #0
 8009dba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009dbe:	6865      	ldr	r5, [r4, #4]
 8009dc0:	60a5      	str	r5, [r4, #8]
 8009dc2:	2d00      	cmp	r5, #0
 8009dc4:	bfa2      	ittt	ge
 8009dc6:	6821      	ldrge	r1, [r4, #0]
 8009dc8:	f021 0104 	bicge.w	r1, r1, #4
 8009dcc:	6021      	strge	r1, [r4, #0]
 8009dce:	b90e      	cbnz	r6, 8009dd4 <_printf_i+0x114>
 8009dd0:	2d00      	cmp	r5, #0
 8009dd2:	d04b      	beq.n	8009e6c <_printf_i+0x1ac>
 8009dd4:	4615      	mov	r5, r2
 8009dd6:	fbb6 f1f3 	udiv	r1, r6, r3
 8009dda:	fb03 6711 	mls	r7, r3, r1, r6
 8009dde:	5dc7      	ldrb	r7, [r0, r7]
 8009de0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009de4:	4637      	mov	r7, r6
 8009de6:	42bb      	cmp	r3, r7
 8009de8:	460e      	mov	r6, r1
 8009dea:	d9f4      	bls.n	8009dd6 <_printf_i+0x116>
 8009dec:	2b08      	cmp	r3, #8
 8009dee:	d10b      	bne.n	8009e08 <_printf_i+0x148>
 8009df0:	6823      	ldr	r3, [r4, #0]
 8009df2:	07de      	lsls	r6, r3, #31
 8009df4:	d508      	bpl.n	8009e08 <_printf_i+0x148>
 8009df6:	6923      	ldr	r3, [r4, #16]
 8009df8:	6861      	ldr	r1, [r4, #4]
 8009dfa:	4299      	cmp	r1, r3
 8009dfc:	bfde      	ittt	le
 8009dfe:	2330      	movle	r3, #48	; 0x30
 8009e00:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009e04:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009e08:	1b52      	subs	r2, r2, r5
 8009e0a:	6122      	str	r2, [r4, #16]
 8009e0c:	f8cd a000 	str.w	sl, [sp]
 8009e10:	464b      	mov	r3, r9
 8009e12:	aa03      	add	r2, sp, #12
 8009e14:	4621      	mov	r1, r4
 8009e16:	4640      	mov	r0, r8
 8009e18:	f7ff fee4 	bl	8009be4 <_printf_common>
 8009e1c:	3001      	adds	r0, #1
 8009e1e:	d14a      	bne.n	8009eb6 <_printf_i+0x1f6>
 8009e20:	f04f 30ff 	mov.w	r0, #4294967295
 8009e24:	b004      	add	sp, #16
 8009e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e2a:	6823      	ldr	r3, [r4, #0]
 8009e2c:	f043 0320 	orr.w	r3, r3, #32
 8009e30:	6023      	str	r3, [r4, #0]
 8009e32:	4833      	ldr	r0, [pc, #204]	; (8009f00 <_printf_i+0x240>)
 8009e34:	2778      	movs	r7, #120	; 0x78
 8009e36:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009e3a:	6823      	ldr	r3, [r4, #0]
 8009e3c:	6829      	ldr	r1, [r5, #0]
 8009e3e:	061f      	lsls	r7, r3, #24
 8009e40:	f851 6b04 	ldr.w	r6, [r1], #4
 8009e44:	d402      	bmi.n	8009e4c <_printf_i+0x18c>
 8009e46:	065f      	lsls	r7, r3, #25
 8009e48:	bf48      	it	mi
 8009e4a:	b2b6      	uxthmi	r6, r6
 8009e4c:	07df      	lsls	r7, r3, #31
 8009e4e:	bf48      	it	mi
 8009e50:	f043 0320 	orrmi.w	r3, r3, #32
 8009e54:	6029      	str	r1, [r5, #0]
 8009e56:	bf48      	it	mi
 8009e58:	6023      	strmi	r3, [r4, #0]
 8009e5a:	b91e      	cbnz	r6, 8009e64 <_printf_i+0x1a4>
 8009e5c:	6823      	ldr	r3, [r4, #0]
 8009e5e:	f023 0320 	bic.w	r3, r3, #32
 8009e62:	6023      	str	r3, [r4, #0]
 8009e64:	2310      	movs	r3, #16
 8009e66:	e7a7      	b.n	8009db8 <_printf_i+0xf8>
 8009e68:	4824      	ldr	r0, [pc, #144]	; (8009efc <_printf_i+0x23c>)
 8009e6a:	e7e4      	b.n	8009e36 <_printf_i+0x176>
 8009e6c:	4615      	mov	r5, r2
 8009e6e:	e7bd      	b.n	8009dec <_printf_i+0x12c>
 8009e70:	682b      	ldr	r3, [r5, #0]
 8009e72:	6826      	ldr	r6, [r4, #0]
 8009e74:	6961      	ldr	r1, [r4, #20]
 8009e76:	1d18      	adds	r0, r3, #4
 8009e78:	6028      	str	r0, [r5, #0]
 8009e7a:	0635      	lsls	r5, r6, #24
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	d501      	bpl.n	8009e84 <_printf_i+0x1c4>
 8009e80:	6019      	str	r1, [r3, #0]
 8009e82:	e002      	b.n	8009e8a <_printf_i+0x1ca>
 8009e84:	0670      	lsls	r0, r6, #25
 8009e86:	d5fb      	bpl.n	8009e80 <_printf_i+0x1c0>
 8009e88:	8019      	strh	r1, [r3, #0]
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	6123      	str	r3, [r4, #16]
 8009e8e:	4615      	mov	r5, r2
 8009e90:	e7bc      	b.n	8009e0c <_printf_i+0x14c>
 8009e92:	682b      	ldr	r3, [r5, #0]
 8009e94:	1d1a      	adds	r2, r3, #4
 8009e96:	602a      	str	r2, [r5, #0]
 8009e98:	681d      	ldr	r5, [r3, #0]
 8009e9a:	6862      	ldr	r2, [r4, #4]
 8009e9c:	2100      	movs	r1, #0
 8009e9e:	4628      	mov	r0, r5
 8009ea0:	f7f6 fa1e 	bl	80002e0 <memchr>
 8009ea4:	b108      	cbz	r0, 8009eaa <_printf_i+0x1ea>
 8009ea6:	1b40      	subs	r0, r0, r5
 8009ea8:	6060      	str	r0, [r4, #4]
 8009eaa:	6863      	ldr	r3, [r4, #4]
 8009eac:	6123      	str	r3, [r4, #16]
 8009eae:	2300      	movs	r3, #0
 8009eb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009eb4:	e7aa      	b.n	8009e0c <_printf_i+0x14c>
 8009eb6:	6923      	ldr	r3, [r4, #16]
 8009eb8:	462a      	mov	r2, r5
 8009eba:	4649      	mov	r1, r9
 8009ebc:	4640      	mov	r0, r8
 8009ebe:	47d0      	blx	sl
 8009ec0:	3001      	adds	r0, #1
 8009ec2:	d0ad      	beq.n	8009e20 <_printf_i+0x160>
 8009ec4:	6823      	ldr	r3, [r4, #0]
 8009ec6:	079b      	lsls	r3, r3, #30
 8009ec8:	d413      	bmi.n	8009ef2 <_printf_i+0x232>
 8009eca:	68e0      	ldr	r0, [r4, #12]
 8009ecc:	9b03      	ldr	r3, [sp, #12]
 8009ece:	4298      	cmp	r0, r3
 8009ed0:	bfb8      	it	lt
 8009ed2:	4618      	movlt	r0, r3
 8009ed4:	e7a6      	b.n	8009e24 <_printf_i+0x164>
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	4632      	mov	r2, r6
 8009eda:	4649      	mov	r1, r9
 8009edc:	4640      	mov	r0, r8
 8009ede:	47d0      	blx	sl
 8009ee0:	3001      	adds	r0, #1
 8009ee2:	d09d      	beq.n	8009e20 <_printf_i+0x160>
 8009ee4:	3501      	adds	r5, #1
 8009ee6:	68e3      	ldr	r3, [r4, #12]
 8009ee8:	9903      	ldr	r1, [sp, #12]
 8009eea:	1a5b      	subs	r3, r3, r1
 8009eec:	42ab      	cmp	r3, r5
 8009eee:	dcf2      	bgt.n	8009ed6 <_printf_i+0x216>
 8009ef0:	e7eb      	b.n	8009eca <_printf_i+0x20a>
 8009ef2:	2500      	movs	r5, #0
 8009ef4:	f104 0619 	add.w	r6, r4, #25
 8009ef8:	e7f5      	b.n	8009ee6 <_printf_i+0x226>
 8009efa:	bf00      	nop
 8009efc:	0800dcf6 	.word	0x0800dcf6
 8009f00:	0800dd07 	.word	0x0800dd07

08009f04 <_scanf_float>:
 8009f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f08:	b087      	sub	sp, #28
 8009f0a:	4617      	mov	r7, r2
 8009f0c:	9303      	str	r3, [sp, #12]
 8009f0e:	688b      	ldr	r3, [r1, #8]
 8009f10:	1e5a      	subs	r2, r3, #1
 8009f12:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009f16:	bf83      	ittte	hi
 8009f18:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009f1c:	195b      	addhi	r3, r3, r5
 8009f1e:	9302      	strhi	r3, [sp, #8]
 8009f20:	2300      	movls	r3, #0
 8009f22:	bf86      	itte	hi
 8009f24:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009f28:	608b      	strhi	r3, [r1, #8]
 8009f2a:	9302      	strls	r3, [sp, #8]
 8009f2c:	680b      	ldr	r3, [r1, #0]
 8009f2e:	468b      	mov	fp, r1
 8009f30:	2500      	movs	r5, #0
 8009f32:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009f36:	f84b 3b1c 	str.w	r3, [fp], #28
 8009f3a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009f3e:	4680      	mov	r8, r0
 8009f40:	460c      	mov	r4, r1
 8009f42:	465e      	mov	r6, fp
 8009f44:	46aa      	mov	sl, r5
 8009f46:	46a9      	mov	r9, r5
 8009f48:	9501      	str	r5, [sp, #4]
 8009f4a:	68a2      	ldr	r2, [r4, #8]
 8009f4c:	b152      	cbz	r2, 8009f64 <_scanf_float+0x60>
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	2b4e      	cmp	r3, #78	; 0x4e
 8009f54:	d864      	bhi.n	800a020 <_scanf_float+0x11c>
 8009f56:	2b40      	cmp	r3, #64	; 0x40
 8009f58:	d83c      	bhi.n	8009fd4 <_scanf_float+0xd0>
 8009f5a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009f5e:	b2c8      	uxtb	r0, r1
 8009f60:	280e      	cmp	r0, #14
 8009f62:	d93a      	bls.n	8009fda <_scanf_float+0xd6>
 8009f64:	f1b9 0f00 	cmp.w	r9, #0
 8009f68:	d003      	beq.n	8009f72 <_scanf_float+0x6e>
 8009f6a:	6823      	ldr	r3, [r4, #0]
 8009f6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f70:	6023      	str	r3, [r4, #0]
 8009f72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009f76:	f1ba 0f01 	cmp.w	sl, #1
 8009f7a:	f200 8113 	bhi.w	800a1a4 <_scanf_float+0x2a0>
 8009f7e:	455e      	cmp	r6, fp
 8009f80:	f200 8105 	bhi.w	800a18e <_scanf_float+0x28a>
 8009f84:	2501      	movs	r5, #1
 8009f86:	4628      	mov	r0, r5
 8009f88:	b007      	add	sp, #28
 8009f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f8e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009f92:	2a0d      	cmp	r2, #13
 8009f94:	d8e6      	bhi.n	8009f64 <_scanf_float+0x60>
 8009f96:	a101      	add	r1, pc, #4	; (adr r1, 8009f9c <_scanf_float+0x98>)
 8009f98:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009f9c:	0800a0db 	.word	0x0800a0db
 8009fa0:	08009f65 	.word	0x08009f65
 8009fa4:	08009f65 	.word	0x08009f65
 8009fa8:	08009f65 	.word	0x08009f65
 8009fac:	0800a13b 	.word	0x0800a13b
 8009fb0:	0800a113 	.word	0x0800a113
 8009fb4:	08009f65 	.word	0x08009f65
 8009fb8:	08009f65 	.word	0x08009f65
 8009fbc:	0800a0e9 	.word	0x0800a0e9
 8009fc0:	08009f65 	.word	0x08009f65
 8009fc4:	08009f65 	.word	0x08009f65
 8009fc8:	08009f65 	.word	0x08009f65
 8009fcc:	08009f65 	.word	0x08009f65
 8009fd0:	0800a0a1 	.word	0x0800a0a1
 8009fd4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009fd8:	e7db      	b.n	8009f92 <_scanf_float+0x8e>
 8009fda:	290e      	cmp	r1, #14
 8009fdc:	d8c2      	bhi.n	8009f64 <_scanf_float+0x60>
 8009fde:	a001      	add	r0, pc, #4	; (adr r0, 8009fe4 <_scanf_float+0xe0>)
 8009fe0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009fe4:	0800a093 	.word	0x0800a093
 8009fe8:	08009f65 	.word	0x08009f65
 8009fec:	0800a093 	.word	0x0800a093
 8009ff0:	0800a127 	.word	0x0800a127
 8009ff4:	08009f65 	.word	0x08009f65
 8009ff8:	0800a041 	.word	0x0800a041
 8009ffc:	0800a07d 	.word	0x0800a07d
 800a000:	0800a07d 	.word	0x0800a07d
 800a004:	0800a07d 	.word	0x0800a07d
 800a008:	0800a07d 	.word	0x0800a07d
 800a00c:	0800a07d 	.word	0x0800a07d
 800a010:	0800a07d 	.word	0x0800a07d
 800a014:	0800a07d 	.word	0x0800a07d
 800a018:	0800a07d 	.word	0x0800a07d
 800a01c:	0800a07d 	.word	0x0800a07d
 800a020:	2b6e      	cmp	r3, #110	; 0x6e
 800a022:	d809      	bhi.n	800a038 <_scanf_float+0x134>
 800a024:	2b60      	cmp	r3, #96	; 0x60
 800a026:	d8b2      	bhi.n	8009f8e <_scanf_float+0x8a>
 800a028:	2b54      	cmp	r3, #84	; 0x54
 800a02a:	d077      	beq.n	800a11c <_scanf_float+0x218>
 800a02c:	2b59      	cmp	r3, #89	; 0x59
 800a02e:	d199      	bne.n	8009f64 <_scanf_float+0x60>
 800a030:	2d07      	cmp	r5, #7
 800a032:	d197      	bne.n	8009f64 <_scanf_float+0x60>
 800a034:	2508      	movs	r5, #8
 800a036:	e029      	b.n	800a08c <_scanf_float+0x188>
 800a038:	2b74      	cmp	r3, #116	; 0x74
 800a03a:	d06f      	beq.n	800a11c <_scanf_float+0x218>
 800a03c:	2b79      	cmp	r3, #121	; 0x79
 800a03e:	e7f6      	b.n	800a02e <_scanf_float+0x12a>
 800a040:	6821      	ldr	r1, [r4, #0]
 800a042:	05c8      	lsls	r0, r1, #23
 800a044:	d51a      	bpl.n	800a07c <_scanf_float+0x178>
 800a046:	9b02      	ldr	r3, [sp, #8]
 800a048:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a04c:	6021      	str	r1, [r4, #0]
 800a04e:	f109 0901 	add.w	r9, r9, #1
 800a052:	b11b      	cbz	r3, 800a05c <_scanf_float+0x158>
 800a054:	3b01      	subs	r3, #1
 800a056:	3201      	adds	r2, #1
 800a058:	9302      	str	r3, [sp, #8]
 800a05a:	60a2      	str	r2, [r4, #8]
 800a05c:	68a3      	ldr	r3, [r4, #8]
 800a05e:	3b01      	subs	r3, #1
 800a060:	60a3      	str	r3, [r4, #8]
 800a062:	6923      	ldr	r3, [r4, #16]
 800a064:	3301      	adds	r3, #1
 800a066:	6123      	str	r3, [r4, #16]
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	3b01      	subs	r3, #1
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	607b      	str	r3, [r7, #4]
 800a070:	f340 8084 	ble.w	800a17c <_scanf_float+0x278>
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	3301      	adds	r3, #1
 800a078:	603b      	str	r3, [r7, #0]
 800a07a:	e766      	b.n	8009f4a <_scanf_float+0x46>
 800a07c:	eb1a 0f05 	cmn.w	sl, r5
 800a080:	f47f af70 	bne.w	8009f64 <_scanf_float+0x60>
 800a084:	6822      	ldr	r2, [r4, #0]
 800a086:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a08a:	6022      	str	r2, [r4, #0]
 800a08c:	f806 3b01 	strb.w	r3, [r6], #1
 800a090:	e7e4      	b.n	800a05c <_scanf_float+0x158>
 800a092:	6822      	ldr	r2, [r4, #0]
 800a094:	0610      	lsls	r0, r2, #24
 800a096:	f57f af65 	bpl.w	8009f64 <_scanf_float+0x60>
 800a09a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a09e:	e7f4      	b.n	800a08a <_scanf_float+0x186>
 800a0a0:	f1ba 0f00 	cmp.w	sl, #0
 800a0a4:	d10e      	bne.n	800a0c4 <_scanf_float+0x1c0>
 800a0a6:	f1b9 0f00 	cmp.w	r9, #0
 800a0aa:	d10e      	bne.n	800a0ca <_scanf_float+0x1c6>
 800a0ac:	6822      	ldr	r2, [r4, #0]
 800a0ae:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a0b2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a0b6:	d108      	bne.n	800a0ca <_scanf_float+0x1c6>
 800a0b8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a0bc:	6022      	str	r2, [r4, #0]
 800a0be:	f04f 0a01 	mov.w	sl, #1
 800a0c2:	e7e3      	b.n	800a08c <_scanf_float+0x188>
 800a0c4:	f1ba 0f02 	cmp.w	sl, #2
 800a0c8:	d055      	beq.n	800a176 <_scanf_float+0x272>
 800a0ca:	2d01      	cmp	r5, #1
 800a0cc:	d002      	beq.n	800a0d4 <_scanf_float+0x1d0>
 800a0ce:	2d04      	cmp	r5, #4
 800a0d0:	f47f af48 	bne.w	8009f64 <_scanf_float+0x60>
 800a0d4:	3501      	adds	r5, #1
 800a0d6:	b2ed      	uxtb	r5, r5
 800a0d8:	e7d8      	b.n	800a08c <_scanf_float+0x188>
 800a0da:	f1ba 0f01 	cmp.w	sl, #1
 800a0de:	f47f af41 	bne.w	8009f64 <_scanf_float+0x60>
 800a0e2:	f04f 0a02 	mov.w	sl, #2
 800a0e6:	e7d1      	b.n	800a08c <_scanf_float+0x188>
 800a0e8:	b97d      	cbnz	r5, 800a10a <_scanf_float+0x206>
 800a0ea:	f1b9 0f00 	cmp.w	r9, #0
 800a0ee:	f47f af3c 	bne.w	8009f6a <_scanf_float+0x66>
 800a0f2:	6822      	ldr	r2, [r4, #0]
 800a0f4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a0f8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a0fc:	f47f af39 	bne.w	8009f72 <_scanf_float+0x6e>
 800a100:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a104:	6022      	str	r2, [r4, #0]
 800a106:	2501      	movs	r5, #1
 800a108:	e7c0      	b.n	800a08c <_scanf_float+0x188>
 800a10a:	2d03      	cmp	r5, #3
 800a10c:	d0e2      	beq.n	800a0d4 <_scanf_float+0x1d0>
 800a10e:	2d05      	cmp	r5, #5
 800a110:	e7de      	b.n	800a0d0 <_scanf_float+0x1cc>
 800a112:	2d02      	cmp	r5, #2
 800a114:	f47f af26 	bne.w	8009f64 <_scanf_float+0x60>
 800a118:	2503      	movs	r5, #3
 800a11a:	e7b7      	b.n	800a08c <_scanf_float+0x188>
 800a11c:	2d06      	cmp	r5, #6
 800a11e:	f47f af21 	bne.w	8009f64 <_scanf_float+0x60>
 800a122:	2507      	movs	r5, #7
 800a124:	e7b2      	b.n	800a08c <_scanf_float+0x188>
 800a126:	6822      	ldr	r2, [r4, #0]
 800a128:	0591      	lsls	r1, r2, #22
 800a12a:	f57f af1b 	bpl.w	8009f64 <_scanf_float+0x60>
 800a12e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a132:	6022      	str	r2, [r4, #0]
 800a134:	f8cd 9004 	str.w	r9, [sp, #4]
 800a138:	e7a8      	b.n	800a08c <_scanf_float+0x188>
 800a13a:	6822      	ldr	r2, [r4, #0]
 800a13c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a140:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a144:	d006      	beq.n	800a154 <_scanf_float+0x250>
 800a146:	0550      	lsls	r0, r2, #21
 800a148:	f57f af0c 	bpl.w	8009f64 <_scanf_float+0x60>
 800a14c:	f1b9 0f00 	cmp.w	r9, #0
 800a150:	f43f af0f 	beq.w	8009f72 <_scanf_float+0x6e>
 800a154:	0591      	lsls	r1, r2, #22
 800a156:	bf58      	it	pl
 800a158:	9901      	ldrpl	r1, [sp, #4]
 800a15a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a15e:	bf58      	it	pl
 800a160:	eba9 0101 	subpl.w	r1, r9, r1
 800a164:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a168:	bf58      	it	pl
 800a16a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a16e:	6022      	str	r2, [r4, #0]
 800a170:	f04f 0900 	mov.w	r9, #0
 800a174:	e78a      	b.n	800a08c <_scanf_float+0x188>
 800a176:	f04f 0a03 	mov.w	sl, #3
 800a17a:	e787      	b.n	800a08c <_scanf_float+0x188>
 800a17c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a180:	4639      	mov	r1, r7
 800a182:	4640      	mov	r0, r8
 800a184:	4798      	blx	r3
 800a186:	2800      	cmp	r0, #0
 800a188:	f43f aedf 	beq.w	8009f4a <_scanf_float+0x46>
 800a18c:	e6ea      	b.n	8009f64 <_scanf_float+0x60>
 800a18e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a192:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a196:	463a      	mov	r2, r7
 800a198:	4640      	mov	r0, r8
 800a19a:	4798      	blx	r3
 800a19c:	6923      	ldr	r3, [r4, #16]
 800a19e:	3b01      	subs	r3, #1
 800a1a0:	6123      	str	r3, [r4, #16]
 800a1a2:	e6ec      	b.n	8009f7e <_scanf_float+0x7a>
 800a1a4:	1e6b      	subs	r3, r5, #1
 800a1a6:	2b06      	cmp	r3, #6
 800a1a8:	d825      	bhi.n	800a1f6 <_scanf_float+0x2f2>
 800a1aa:	2d02      	cmp	r5, #2
 800a1ac:	d836      	bhi.n	800a21c <_scanf_float+0x318>
 800a1ae:	455e      	cmp	r6, fp
 800a1b0:	f67f aee8 	bls.w	8009f84 <_scanf_float+0x80>
 800a1b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a1b8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a1bc:	463a      	mov	r2, r7
 800a1be:	4640      	mov	r0, r8
 800a1c0:	4798      	blx	r3
 800a1c2:	6923      	ldr	r3, [r4, #16]
 800a1c4:	3b01      	subs	r3, #1
 800a1c6:	6123      	str	r3, [r4, #16]
 800a1c8:	e7f1      	b.n	800a1ae <_scanf_float+0x2aa>
 800a1ca:	9802      	ldr	r0, [sp, #8]
 800a1cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a1d0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a1d4:	9002      	str	r0, [sp, #8]
 800a1d6:	463a      	mov	r2, r7
 800a1d8:	4640      	mov	r0, r8
 800a1da:	4798      	blx	r3
 800a1dc:	6923      	ldr	r3, [r4, #16]
 800a1de:	3b01      	subs	r3, #1
 800a1e0:	6123      	str	r3, [r4, #16]
 800a1e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a1e6:	fa5f fa8a 	uxtb.w	sl, sl
 800a1ea:	f1ba 0f02 	cmp.w	sl, #2
 800a1ee:	d1ec      	bne.n	800a1ca <_scanf_float+0x2c6>
 800a1f0:	3d03      	subs	r5, #3
 800a1f2:	b2ed      	uxtb	r5, r5
 800a1f4:	1b76      	subs	r6, r6, r5
 800a1f6:	6823      	ldr	r3, [r4, #0]
 800a1f8:	05da      	lsls	r2, r3, #23
 800a1fa:	d52f      	bpl.n	800a25c <_scanf_float+0x358>
 800a1fc:	055b      	lsls	r3, r3, #21
 800a1fe:	d510      	bpl.n	800a222 <_scanf_float+0x31e>
 800a200:	455e      	cmp	r6, fp
 800a202:	f67f aebf 	bls.w	8009f84 <_scanf_float+0x80>
 800a206:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a20a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a20e:	463a      	mov	r2, r7
 800a210:	4640      	mov	r0, r8
 800a212:	4798      	blx	r3
 800a214:	6923      	ldr	r3, [r4, #16]
 800a216:	3b01      	subs	r3, #1
 800a218:	6123      	str	r3, [r4, #16]
 800a21a:	e7f1      	b.n	800a200 <_scanf_float+0x2fc>
 800a21c:	46aa      	mov	sl, r5
 800a21e:	9602      	str	r6, [sp, #8]
 800a220:	e7df      	b.n	800a1e2 <_scanf_float+0x2de>
 800a222:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a226:	6923      	ldr	r3, [r4, #16]
 800a228:	2965      	cmp	r1, #101	; 0x65
 800a22a:	f103 33ff 	add.w	r3, r3, #4294967295
 800a22e:	f106 35ff 	add.w	r5, r6, #4294967295
 800a232:	6123      	str	r3, [r4, #16]
 800a234:	d00c      	beq.n	800a250 <_scanf_float+0x34c>
 800a236:	2945      	cmp	r1, #69	; 0x45
 800a238:	d00a      	beq.n	800a250 <_scanf_float+0x34c>
 800a23a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a23e:	463a      	mov	r2, r7
 800a240:	4640      	mov	r0, r8
 800a242:	4798      	blx	r3
 800a244:	6923      	ldr	r3, [r4, #16]
 800a246:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a24a:	3b01      	subs	r3, #1
 800a24c:	1eb5      	subs	r5, r6, #2
 800a24e:	6123      	str	r3, [r4, #16]
 800a250:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a254:	463a      	mov	r2, r7
 800a256:	4640      	mov	r0, r8
 800a258:	4798      	blx	r3
 800a25a:	462e      	mov	r6, r5
 800a25c:	6825      	ldr	r5, [r4, #0]
 800a25e:	f015 0510 	ands.w	r5, r5, #16
 800a262:	d14d      	bne.n	800a300 <_scanf_float+0x3fc>
 800a264:	7035      	strb	r5, [r6, #0]
 800a266:	6823      	ldr	r3, [r4, #0]
 800a268:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a26c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a270:	d11a      	bne.n	800a2a8 <_scanf_float+0x3a4>
 800a272:	9b01      	ldr	r3, [sp, #4]
 800a274:	454b      	cmp	r3, r9
 800a276:	eba3 0209 	sub.w	r2, r3, r9
 800a27a:	d122      	bne.n	800a2c2 <_scanf_float+0x3be>
 800a27c:	2200      	movs	r2, #0
 800a27e:	4659      	mov	r1, fp
 800a280:	4640      	mov	r0, r8
 800a282:	f002 fb7b 	bl	800c97c <_strtod_r>
 800a286:	9b03      	ldr	r3, [sp, #12]
 800a288:	6821      	ldr	r1, [r4, #0]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f011 0f02 	tst.w	r1, #2
 800a290:	f103 0204 	add.w	r2, r3, #4
 800a294:	d020      	beq.n	800a2d8 <_scanf_float+0x3d4>
 800a296:	9903      	ldr	r1, [sp, #12]
 800a298:	600a      	str	r2, [r1, #0]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	ed83 0b00 	vstr	d0, [r3]
 800a2a0:	68e3      	ldr	r3, [r4, #12]
 800a2a2:	3301      	adds	r3, #1
 800a2a4:	60e3      	str	r3, [r4, #12]
 800a2a6:	e66e      	b.n	8009f86 <_scanf_float+0x82>
 800a2a8:	9b04      	ldr	r3, [sp, #16]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d0e6      	beq.n	800a27c <_scanf_float+0x378>
 800a2ae:	9905      	ldr	r1, [sp, #20]
 800a2b0:	230a      	movs	r3, #10
 800a2b2:	462a      	mov	r2, r5
 800a2b4:	3101      	adds	r1, #1
 800a2b6:	4640      	mov	r0, r8
 800a2b8:	f002 fbe8 	bl	800ca8c <_strtol_r>
 800a2bc:	9b04      	ldr	r3, [sp, #16]
 800a2be:	9e05      	ldr	r6, [sp, #20]
 800a2c0:	1ac2      	subs	r2, r0, r3
 800a2c2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a2c6:	429e      	cmp	r6, r3
 800a2c8:	bf28      	it	cs
 800a2ca:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a2ce:	490d      	ldr	r1, [pc, #52]	; (800a304 <_scanf_float+0x400>)
 800a2d0:	4630      	mov	r0, r6
 800a2d2:	f000 f8ff 	bl	800a4d4 <siprintf>
 800a2d6:	e7d1      	b.n	800a27c <_scanf_float+0x378>
 800a2d8:	f011 0f04 	tst.w	r1, #4
 800a2dc:	9903      	ldr	r1, [sp, #12]
 800a2de:	600a      	str	r2, [r1, #0]
 800a2e0:	d1db      	bne.n	800a29a <_scanf_float+0x396>
 800a2e2:	eeb4 0b40 	vcmp.f64	d0, d0
 800a2e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2ea:	681e      	ldr	r6, [r3, #0]
 800a2ec:	d705      	bvc.n	800a2fa <_scanf_float+0x3f6>
 800a2ee:	4806      	ldr	r0, [pc, #24]	; (800a308 <_scanf_float+0x404>)
 800a2f0:	f000 f9d2 	bl	800a698 <nanf>
 800a2f4:	ed86 0a00 	vstr	s0, [r6]
 800a2f8:	e7d2      	b.n	800a2a0 <_scanf_float+0x39c>
 800a2fa:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800a2fe:	e7f9      	b.n	800a2f4 <_scanf_float+0x3f0>
 800a300:	2500      	movs	r5, #0
 800a302:	e640      	b.n	8009f86 <_scanf_float+0x82>
 800a304:	0800dd18 	.word	0x0800dd18
 800a308:	0800e0ad 	.word	0x0800e0ad

0800a30c <std>:
 800a30c:	2300      	movs	r3, #0
 800a30e:	b510      	push	{r4, lr}
 800a310:	4604      	mov	r4, r0
 800a312:	e9c0 3300 	strd	r3, r3, [r0]
 800a316:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a31a:	6083      	str	r3, [r0, #8]
 800a31c:	8181      	strh	r1, [r0, #12]
 800a31e:	6643      	str	r3, [r0, #100]	; 0x64
 800a320:	81c2      	strh	r2, [r0, #14]
 800a322:	6183      	str	r3, [r0, #24]
 800a324:	4619      	mov	r1, r3
 800a326:	2208      	movs	r2, #8
 800a328:	305c      	adds	r0, #92	; 0x5c
 800a32a:	f000 f936 	bl	800a59a <memset>
 800a32e:	4b05      	ldr	r3, [pc, #20]	; (800a344 <std+0x38>)
 800a330:	6263      	str	r3, [r4, #36]	; 0x24
 800a332:	4b05      	ldr	r3, [pc, #20]	; (800a348 <std+0x3c>)
 800a334:	62a3      	str	r3, [r4, #40]	; 0x28
 800a336:	4b05      	ldr	r3, [pc, #20]	; (800a34c <std+0x40>)
 800a338:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a33a:	4b05      	ldr	r3, [pc, #20]	; (800a350 <std+0x44>)
 800a33c:	6224      	str	r4, [r4, #32]
 800a33e:	6323      	str	r3, [r4, #48]	; 0x30
 800a340:	bd10      	pop	{r4, pc}
 800a342:	bf00      	nop
 800a344:	0800a515 	.word	0x0800a515
 800a348:	0800a537 	.word	0x0800a537
 800a34c:	0800a56f 	.word	0x0800a56f
 800a350:	0800a593 	.word	0x0800a593

0800a354 <stdio_exit_handler>:
 800a354:	4a02      	ldr	r2, [pc, #8]	; (800a360 <stdio_exit_handler+0xc>)
 800a356:	4903      	ldr	r1, [pc, #12]	; (800a364 <stdio_exit_handler+0x10>)
 800a358:	4803      	ldr	r0, [pc, #12]	; (800a368 <stdio_exit_handler+0x14>)
 800a35a:	f000 b869 	b.w	800a430 <_fwalk_sglue>
 800a35e:	bf00      	nop
 800a360:	24000010 	.word	0x24000010
 800a364:	0800ce4d 	.word	0x0800ce4d
 800a368:	2400001c 	.word	0x2400001c

0800a36c <cleanup_stdio>:
 800a36c:	6841      	ldr	r1, [r0, #4]
 800a36e:	4b0c      	ldr	r3, [pc, #48]	; (800a3a0 <cleanup_stdio+0x34>)
 800a370:	4299      	cmp	r1, r3
 800a372:	b510      	push	{r4, lr}
 800a374:	4604      	mov	r4, r0
 800a376:	d001      	beq.n	800a37c <cleanup_stdio+0x10>
 800a378:	f002 fd68 	bl	800ce4c <_fflush_r>
 800a37c:	68a1      	ldr	r1, [r4, #8]
 800a37e:	4b09      	ldr	r3, [pc, #36]	; (800a3a4 <cleanup_stdio+0x38>)
 800a380:	4299      	cmp	r1, r3
 800a382:	d002      	beq.n	800a38a <cleanup_stdio+0x1e>
 800a384:	4620      	mov	r0, r4
 800a386:	f002 fd61 	bl	800ce4c <_fflush_r>
 800a38a:	68e1      	ldr	r1, [r4, #12]
 800a38c:	4b06      	ldr	r3, [pc, #24]	; (800a3a8 <cleanup_stdio+0x3c>)
 800a38e:	4299      	cmp	r1, r3
 800a390:	d004      	beq.n	800a39c <cleanup_stdio+0x30>
 800a392:	4620      	mov	r0, r4
 800a394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a398:	f002 bd58 	b.w	800ce4c <_fflush_r>
 800a39c:	bd10      	pop	{r4, pc}
 800a39e:	bf00      	nop
 800a3a0:	24000aa0 	.word	0x24000aa0
 800a3a4:	24000b08 	.word	0x24000b08
 800a3a8:	24000b70 	.word	0x24000b70

0800a3ac <global_stdio_init.part.0>:
 800a3ac:	b510      	push	{r4, lr}
 800a3ae:	4b0b      	ldr	r3, [pc, #44]	; (800a3dc <global_stdio_init.part.0+0x30>)
 800a3b0:	4c0b      	ldr	r4, [pc, #44]	; (800a3e0 <global_stdio_init.part.0+0x34>)
 800a3b2:	4a0c      	ldr	r2, [pc, #48]	; (800a3e4 <global_stdio_init.part.0+0x38>)
 800a3b4:	601a      	str	r2, [r3, #0]
 800a3b6:	4620      	mov	r0, r4
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	2104      	movs	r1, #4
 800a3bc:	f7ff ffa6 	bl	800a30c <std>
 800a3c0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a3c4:	2201      	movs	r2, #1
 800a3c6:	2109      	movs	r1, #9
 800a3c8:	f7ff ffa0 	bl	800a30c <std>
 800a3cc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a3d0:	2202      	movs	r2, #2
 800a3d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3d6:	2112      	movs	r1, #18
 800a3d8:	f7ff bf98 	b.w	800a30c <std>
 800a3dc:	24000bd8 	.word	0x24000bd8
 800a3e0:	24000aa0 	.word	0x24000aa0
 800a3e4:	0800a355 	.word	0x0800a355

0800a3e8 <__sfp_lock_acquire>:
 800a3e8:	4801      	ldr	r0, [pc, #4]	; (800a3f0 <__sfp_lock_acquire+0x8>)
 800a3ea:	f000 b953 	b.w	800a694 <__retarget_lock_acquire_recursive>
 800a3ee:	bf00      	nop
 800a3f0:	24000be1 	.word	0x24000be1

0800a3f4 <__sfp_lock_release>:
 800a3f4:	4801      	ldr	r0, [pc, #4]	; (800a3fc <__sfp_lock_release+0x8>)
 800a3f6:	f000 b94e 	b.w	800a696 <__retarget_lock_release_recursive>
 800a3fa:	bf00      	nop
 800a3fc:	24000be1 	.word	0x24000be1

0800a400 <__sinit>:
 800a400:	b510      	push	{r4, lr}
 800a402:	4604      	mov	r4, r0
 800a404:	f7ff fff0 	bl	800a3e8 <__sfp_lock_acquire>
 800a408:	6a23      	ldr	r3, [r4, #32]
 800a40a:	b11b      	cbz	r3, 800a414 <__sinit+0x14>
 800a40c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a410:	f7ff bff0 	b.w	800a3f4 <__sfp_lock_release>
 800a414:	4b04      	ldr	r3, [pc, #16]	; (800a428 <__sinit+0x28>)
 800a416:	6223      	str	r3, [r4, #32]
 800a418:	4b04      	ldr	r3, [pc, #16]	; (800a42c <__sinit+0x2c>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d1f5      	bne.n	800a40c <__sinit+0xc>
 800a420:	f7ff ffc4 	bl	800a3ac <global_stdio_init.part.0>
 800a424:	e7f2      	b.n	800a40c <__sinit+0xc>
 800a426:	bf00      	nop
 800a428:	0800a36d 	.word	0x0800a36d
 800a42c:	24000bd8 	.word	0x24000bd8

0800a430 <_fwalk_sglue>:
 800a430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a434:	4607      	mov	r7, r0
 800a436:	4688      	mov	r8, r1
 800a438:	4614      	mov	r4, r2
 800a43a:	2600      	movs	r6, #0
 800a43c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a440:	f1b9 0901 	subs.w	r9, r9, #1
 800a444:	d505      	bpl.n	800a452 <_fwalk_sglue+0x22>
 800a446:	6824      	ldr	r4, [r4, #0]
 800a448:	2c00      	cmp	r4, #0
 800a44a:	d1f7      	bne.n	800a43c <_fwalk_sglue+0xc>
 800a44c:	4630      	mov	r0, r6
 800a44e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a452:	89ab      	ldrh	r3, [r5, #12]
 800a454:	2b01      	cmp	r3, #1
 800a456:	d907      	bls.n	800a468 <_fwalk_sglue+0x38>
 800a458:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a45c:	3301      	adds	r3, #1
 800a45e:	d003      	beq.n	800a468 <_fwalk_sglue+0x38>
 800a460:	4629      	mov	r1, r5
 800a462:	4638      	mov	r0, r7
 800a464:	47c0      	blx	r8
 800a466:	4306      	orrs	r6, r0
 800a468:	3568      	adds	r5, #104	; 0x68
 800a46a:	e7e9      	b.n	800a440 <_fwalk_sglue+0x10>

0800a46c <sniprintf>:
 800a46c:	b40c      	push	{r2, r3}
 800a46e:	b530      	push	{r4, r5, lr}
 800a470:	4b17      	ldr	r3, [pc, #92]	; (800a4d0 <sniprintf+0x64>)
 800a472:	1e0c      	subs	r4, r1, #0
 800a474:	681d      	ldr	r5, [r3, #0]
 800a476:	b09d      	sub	sp, #116	; 0x74
 800a478:	da08      	bge.n	800a48c <sniprintf+0x20>
 800a47a:	238b      	movs	r3, #139	; 0x8b
 800a47c:	602b      	str	r3, [r5, #0]
 800a47e:	f04f 30ff 	mov.w	r0, #4294967295
 800a482:	b01d      	add	sp, #116	; 0x74
 800a484:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a488:	b002      	add	sp, #8
 800a48a:	4770      	bx	lr
 800a48c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a490:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a494:	bf14      	ite	ne
 800a496:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a49a:	4623      	moveq	r3, r4
 800a49c:	9304      	str	r3, [sp, #16]
 800a49e:	9307      	str	r3, [sp, #28]
 800a4a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a4a4:	9002      	str	r0, [sp, #8]
 800a4a6:	9006      	str	r0, [sp, #24]
 800a4a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a4ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a4ae:	ab21      	add	r3, sp, #132	; 0x84
 800a4b0:	a902      	add	r1, sp, #8
 800a4b2:	4628      	mov	r0, r5
 800a4b4:	9301      	str	r3, [sp, #4]
 800a4b6:	f002 fb45 	bl	800cb44 <_svfiprintf_r>
 800a4ba:	1c43      	adds	r3, r0, #1
 800a4bc:	bfbc      	itt	lt
 800a4be:	238b      	movlt	r3, #139	; 0x8b
 800a4c0:	602b      	strlt	r3, [r5, #0]
 800a4c2:	2c00      	cmp	r4, #0
 800a4c4:	d0dd      	beq.n	800a482 <sniprintf+0x16>
 800a4c6:	9b02      	ldr	r3, [sp, #8]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	701a      	strb	r2, [r3, #0]
 800a4cc:	e7d9      	b.n	800a482 <sniprintf+0x16>
 800a4ce:	bf00      	nop
 800a4d0:	24000068 	.word	0x24000068

0800a4d4 <siprintf>:
 800a4d4:	b40e      	push	{r1, r2, r3}
 800a4d6:	b500      	push	{lr}
 800a4d8:	b09c      	sub	sp, #112	; 0x70
 800a4da:	ab1d      	add	r3, sp, #116	; 0x74
 800a4dc:	9002      	str	r0, [sp, #8]
 800a4de:	9006      	str	r0, [sp, #24]
 800a4e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a4e4:	4809      	ldr	r0, [pc, #36]	; (800a50c <siprintf+0x38>)
 800a4e6:	9107      	str	r1, [sp, #28]
 800a4e8:	9104      	str	r1, [sp, #16]
 800a4ea:	4909      	ldr	r1, [pc, #36]	; (800a510 <siprintf+0x3c>)
 800a4ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4f0:	9105      	str	r1, [sp, #20]
 800a4f2:	6800      	ldr	r0, [r0, #0]
 800a4f4:	9301      	str	r3, [sp, #4]
 800a4f6:	a902      	add	r1, sp, #8
 800a4f8:	f002 fb24 	bl	800cb44 <_svfiprintf_r>
 800a4fc:	9b02      	ldr	r3, [sp, #8]
 800a4fe:	2200      	movs	r2, #0
 800a500:	701a      	strb	r2, [r3, #0]
 800a502:	b01c      	add	sp, #112	; 0x70
 800a504:	f85d eb04 	ldr.w	lr, [sp], #4
 800a508:	b003      	add	sp, #12
 800a50a:	4770      	bx	lr
 800a50c:	24000068 	.word	0x24000068
 800a510:	ffff0208 	.word	0xffff0208

0800a514 <__sread>:
 800a514:	b510      	push	{r4, lr}
 800a516:	460c      	mov	r4, r1
 800a518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a51c:	f000 f86c 	bl	800a5f8 <_read_r>
 800a520:	2800      	cmp	r0, #0
 800a522:	bfab      	itete	ge
 800a524:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a526:	89a3      	ldrhlt	r3, [r4, #12]
 800a528:	181b      	addge	r3, r3, r0
 800a52a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a52e:	bfac      	ite	ge
 800a530:	6563      	strge	r3, [r4, #84]	; 0x54
 800a532:	81a3      	strhlt	r3, [r4, #12]
 800a534:	bd10      	pop	{r4, pc}

0800a536 <__swrite>:
 800a536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a53a:	461f      	mov	r7, r3
 800a53c:	898b      	ldrh	r3, [r1, #12]
 800a53e:	05db      	lsls	r3, r3, #23
 800a540:	4605      	mov	r5, r0
 800a542:	460c      	mov	r4, r1
 800a544:	4616      	mov	r6, r2
 800a546:	d505      	bpl.n	800a554 <__swrite+0x1e>
 800a548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a54c:	2302      	movs	r3, #2
 800a54e:	2200      	movs	r2, #0
 800a550:	f000 f840 	bl	800a5d4 <_lseek_r>
 800a554:	89a3      	ldrh	r3, [r4, #12]
 800a556:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a55a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a55e:	81a3      	strh	r3, [r4, #12]
 800a560:	4632      	mov	r2, r6
 800a562:	463b      	mov	r3, r7
 800a564:	4628      	mov	r0, r5
 800a566:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a56a:	f000 b857 	b.w	800a61c <_write_r>

0800a56e <__sseek>:
 800a56e:	b510      	push	{r4, lr}
 800a570:	460c      	mov	r4, r1
 800a572:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a576:	f000 f82d 	bl	800a5d4 <_lseek_r>
 800a57a:	1c43      	adds	r3, r0, #1
 800a57c:	89a3      	ldrh	r3, [r4, #12]
 800a57e:	bf15      	itete	ne
 800a580:	6560      	strne	r0, [r4, #84]	; 0x54
 800a582:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a586:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a58a:	81a3      	strheq	r3, [r4, #12]
 800a58c:	bf18      	it	ne
 800a58e:	81a3      	strhne	r3, [r4, #12]
 800a590:	bd10      	pop	{r4, pc}

0800a592 <__sclose>:
 800a592:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a596:	f000 b80d 	b.w	800a5b4 <_close_r>

0800a59a <memset>:
 800a59a:	4402      	add	r2, r0
 800a59c:	4603      	mov	r3, r0
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d100      	bne.n	800a5a4 <memset+0xa>
 800a5a2:	4770      	bx	lr
 800a5a4:	f803 1b01 	strb.w	r1, [r3], #1
 800a5a8:	e7f9      	b.n	800a59e <memset+0x4>
	...

0800a5ac <_localeconv_r>:
 800a5ac:	4800      	ldr	r0, [pc, #0]	; (800a5b0 <_localeconv_r+0x4>)
 800a5ae:	4770      	bx	lr
 800a5b0:	2400015c 	.word	0x2400015c

0800a5b4 <_close_r>:
 800a5b4:	b538      	push	{r3, r4, r5, lr}
 800a5b6:	4d06      	ldr	r5, [pc, #24]	; (800a5d0 <_close_r+0x1c>)
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	4604      	mov	r4, r0
 800a5bc:	4608      	mov	r0, r1
 800a5be:	602b      	str	r3, [r5, #0]
 800a5c0:	f7f7 f9d7 	bl	8001972 <_close>
 800a5c4:	1c43      	adds	r3, r0, #1
 800a5c6:	d102      	bne.n	800a5ce <_close_r+0x1a>
 800a5c8:	682b      	ldr	r3, [r5, #0]
 800a5ca:	b103      	cbz	r3, 800a5ce <_close_r+0x1a>
 800a5cc:	6023      	str	r3, [r4, #0]
 800a5ce:	bd38      	pop	{r3, r4, r5, pc}
 800a5d0:	24000bdc 	.word	0x24000bdc

0800a5d4 <_lseek_r>:
 800a5d4:	b538      	push	{r3, r4, r5, lr}
 800a5d6:	4d07      	ldr	r5, [pc, #28]	; (800a5f4 <_lseek_r+0x20>)
 800a5d8:	4604      	mov	r4, r0
 800a5da:	4608      	mov	r0, r1
 800a5dc:	4611      	mov	r1, r2
 800a5de:	2200      	movs	r2, #0
 800a5e0:	602a      	str	r2, [r5, #0]
 800a5e2:	461a      	mov	r2, r3
 800a5e4:	f7f7 f9ec 	bl	80019c0 <_lseek>
 800a5e8:	1c43      	adds	r3, r0, #1
 800a5ea:	d102      	bne.n	800a5f2 <_lseek_r+0x1e>
 800a5ec:	682b      	ldr	r3, [r5, #0]
 800a5ee:	b103      	cbz	r3, 800a5f2 <_lseek_r+0x1e>
 800a5f0:	6023      	str	r3, [r4, #0]
 800a5f2:	bd38      	pop	{r3, r4, r5, pc}
 800a5f4:	24000bdc 	.word	0x24000bdc

0800a5f8 <_read_r>:
 800a5f8:	b538      	push	{r3, r4, r5, lr}
 800a5fa:	4d07      	ldr	r5, [pc, #28]	; (800a618 <_read_r+0x20>)
 800a5fc:	4604      	mov	r4, r0
 800a5fe:	4608      	mov	r0, r1
 800a600:	4611      	mov	r1, r2
 800a602:	2200      	movs	r2, #0
 800a604:	602a      	str	r2, [r5, #0]
 800a606:	461a      	mov	r2, r3
 800a608:	f7f7 f97a 	bl	8001900 <_read>
 800a60c:	1c43      	adds	r3, r0, #1
 800a60e:	d102      	bne.n	800a616 <_read_r+0x1e>
 800a610:	682b      	ldr	r3, [r5, #0]
 800a612:	b103      	cbz	r3, 800a616 <_read_r+0x1e>
 800a614:	6023      	str	r3, [r4, #0]
 800a616:	bd38      	pop	{r3, r4, r5, pc}
 800a618:	24000bdc 	.word	0x24000bdc

0800a61c <_write_r>:
 800a61c:	b538      	push	{r3, r4, r5, lr}
 800a61e:	4d07      	ldr	r5, [pc, #28]	; (800a63c <_write_r+0x20>)
 800a620:	4604      	mov	r4, r0
 800a622:	4608      	mov	r0, r1
 800a624:	4611      	mov	r1, r2
 800a626:	2200      	movs	r2, #0
 800a628:	602a      	str	r2, [r5, #0]
 800a62a:	461a      	mov	r2, r3
 800a62c:	f7f7 f985 	bl	800193a <_write>
 800a630:	1c43      	adds	r3, r0, #1
 800a632:	d102      	bne.n	800a63a <_write_r+0x1e>
 800a634:	682b      	ldr	r3, [r5, #0]
 800a636:	b103      	cbz	r3, 800a63a <_write_r+0x1e>
 800a638:	6023      	str	r3, [r4, #0]
 800a63a:	bd38      	pop	{r3, r4, r5, pc}
 800a63c:	24000bdc 	.word	0x24000bdc

0800a640 <__errno>:
 800a640:	4b01      	ldr	r3, [pc, #4]	; (800a648 <__errno+0x8>)
 800a642:	6818      	ldr	r0, [r3, #0]
 800a644:	4770      	bx	lr
 800a646:	bf00      	nop
 800a648:	24000068 	.word	0x24000068

0800a64c <__libc_init_array>:
 800a64c:	b570      	push	{r4, r5, r6, lr}
 800a64e:	4d0d      	ldr	r5, [pc, #52]	; (800a684 <__libc_init_array+0x38>)
 800a650:	4c0d      	ldr	r4, [pc, #52]	; (800a688 <__libc_init_array+0x3c>)
 800a652:	1b64      	subs	r4, r4, r5
 800a654:	10a4      	asrs	r4, r4, #2
 800a656:	2600      	movs	r6, #0
 800a658:	42a6      	cmp	r6, r4
 800a65a:	d109      	bne.n	800a670 <__libc_init_array+0x24>
 800a65c:	4d0b      	ldr	r5, [pc, #44]	; (800a68c <__libc_init_array+0x40>)
 800a65e:	4c0c      	ldr	r4, [pc, #48]	; (800a690 <__libc_init_array+0x44>)
 800a660:	f003 fb0a 	bl	800dc78 <_init>
 800a664:	1b64      	subs	r4, r4, r5
 800a666:	10a4      	asrs	r4, r4, #2
 800a668:	2600      	movs	r6, #0
 800a66a:	42a6      	cmp	r6, r4
 800a66c:	d105      	bne.n	800a67a <__libc_init_array+0x2e>
 800a66e:	bd70      	pop	{r4, r5, r6, pc}
 800a670:	f855 3b04 	ldr.w	r3, [r5], #4
 800a674:	4798      	blx	r3
 800a676:	3601      	adds	r6, #1
 800a678:	e7ee      	b.n	800a658 <__libc_init_array+0xc>
 800a67a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a67e:	4798      	blx	r3
 800a680:	3601      	adds	r6, #1
 800a682:	e7f2      	b.n	800a66a <__libc_init_array+0x1e>
 800a684:	0800e118 	.word	0x0800e118
 800a688:	0800e118 	.word	0x0800e118
 800a68c:	0800e118 	.word	0x0800e118
 800a690:	0800e11c 	.word	0x0800e11c

0800a694 <__retarget_lock_acquire_recursive>:
 800a694:	4770      	bx	lr

0800a696 <__retarget_lock_release_recursive>:
 800a696:	4770      	bx	lr

0800a698 <nanf>:
 800a698:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a6a0 <nanf+0x8>
 800a69c:	4770      	bx	lr
 800a69e:	bf00      	nop
 800a6a0:	7fc00000 	.word	0x7fc00000

0800a6a4 <quorem>:
 800a6a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6a8:	6903      	ldr	r3, [r0, #16]
 800a6aa:	690c      	ldr	r4, [r1, #16]
 800a6ac:	42a3      	cmp	r3, r4
 800a6ae:	4607      	mov	r7, r0
 800a6b0:	db7e      	blt.n	800a7b0 <quorem+0x10c>
 800a6b2:	3c01      	subs	r4, #1
 800a6b4:	f101 0814 	add.w	r8, r1, #20
 800a6b8:	f100 0514 	add.w	r5, r0, #20
 800a6bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a6c0:	9301      	str	r3, [sp, #4]
 800a6c2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a6c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a6ca:	3301      	adds	r3, #1
 800a6cc:	429a      	cmp	r2, r3
 800a6ce:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a6d2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a6d6:	fbb2 f6f3 	udiv	r6, r2, r3
 800a6da:	d331      	bcc.n	800a740 <quorem+0x9c>
 800a6dc:	f04f 0e00 	mov.w	lr, #0
 800a6e0:	4640      	mov	r0, r8
 800a6e2:	46ac      	mov	ip, r5
 800a6e4:	46f2      	mov	sl, lr
 800a6e6:	f850 2b04 	ldr.w	r2, [r0], #4
 800a6ea:	b293      	uxth	r3, r2
 800a6ec:	fb06 e303 	mla	r3, r6, r3, lr
 800a6f0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a6f4:	0c1a      	lsrs	r2, r3, #16
 800a6f6:	b29b      	uxth	r3, r3
 800a6f8:	ebaa 0303 	sub.w	r3, sl, r3
 800a6fc:	f8dc a000 	ldr.w	sl, [ip]
 800a700:	fa13 f38a 	uxtah	r3, r3, sl
 800a704:	fb06 220e 	mla	r2, r6, lr, r2
 800a708:	9300      	str	r3, [sp, #0]
 800a70a:	9b00      	ldr	r3, [sp, #0]
 800a70c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a710:	b292      	uxth	r2, r2
 800a712:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a716:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a71a:	f8bd 3000 	ldrh.w	r3, [sp]
 800a71e:	4581      	cmp	r9, r0
 800a720:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a724:	f84c 3b04 	str.w	r3, [ip], #4
 800a728:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a72c:	d2db      	bcs.n	800a6e6 <quorem+0x42>
 800a72e:	f855 300b 	ldr.w	r3, [r5, fp]
 800a732:	b92b      	cbnz	r3, 800a740 <quorem+0x9c>
 800a734:	9b01      	ldr	r3, [sp, #4]
 800a736:	3b04      	subs	r3, #4
 800a738:	429d      	cmp	r5, r3
 800a73a:	461a      	mov	r2, r3
 800a73c:	d32c      	bcc.n	800a798 <quorem+0xf4>
 800a73e:	613c      	str	r4, [r7, #16]
 800a740:	4638      	mov	r0, r7
 800a742:	f001 f96b 	bl	800ba1c <__mcmp>
 800a746:	2800      	cmp	r0, #0
 800a748:	db22      	blt.n	800a790 <quorem+0xec>
 800a74a:	3601      	adds	r6, #1
 800a74c:	4629      	mov	r1, r5
 800a74e:	2000      	movs	r0, #0
 800a750:	f858 2b04 	ldr.w	r2, [r8], #4
 800a754:	f8d1 c000 	ldr.w	ip, [r1]
 800a758:	b293      	uxth	r3, r2
 800a75a:	1ac3      	subs	r3, r0, r3
 800a75c:	0c12      	lsrs	r2, r2, #16
 800a75e:	fa13 f38c 	uxtah	r3, r3, ip
 800a762:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a766:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a76a:	b29b      	uxth	r3, r3
 800a76c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a770:	45c1      	cmp	r9, r8
 800a772:	f841 3b04 	str.w	r3, [r1], #4
 800a776:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a77a:	d2e9      	bcs.n	800a750 <quorem+0xac>
 800a77c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a780:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a784:	b922      	cbnz	r2, 800a790 <quorem+0xec>
 800a786:	3b04      	subs	r3, #4
 800a788:	429d      	cmp	r5, r3
 800a78a:	461a      	mov	r2, r3
 800a78c:	d30a      	bcc.n	800a7a4 <quorem+0x100>
 800a78e:	613c      	str	r4, [r7, #16]
 800a790:	4630      	mov	r0, r6
 800a792:	b003      	add	sp, #12
 800a794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a798:	6812      	ldr	r2, [r2, #0]
 800a79a:	3b04      	subs	r3, #4
 800a79c:	2a00      	cmp	r2, #0
 800a79e:	d1ce      	bne.n	800a73e <quorem+0x9a>
 800a7a0:	3c01      	subs	r4, #1
 800a7a2:	e7c9      	b.n	800a738 <quorem+0x94>
 800a7a4:	6812      	ldr	r2, [r2, #0]
 800a7a6:	3b04      	subs	r3, #4
 800a7a8:	2a00      	cmp	r2, #0
 800a7aa:	d1f0      	bne.n	800a78e <quorem+0xea>
 800a7ac:	3c01      	subs	r4, #1
 800a7ae:	e7eb      	b.n	800a788 <quorem+0xe4>
 800a7b0:	2000      	movs	r0, #0
 800a7b2:	e7ee      	b.n	800a792 <quorem+0xee>
 800a7b4:	0000      	movs	r0, r0
	...

0800a7b8 <_dtoa_r>:
 800a7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7bc:	ed2d 8b02 	vpush	{d8}
 800a7c0:	69c5      	ldr	r5, [r0, #28]
 800a7c2:	b091      	sub	sp, #68	; 0x44
 800a7c4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a7c8:	ec59 8b10 	vmov	r8, r9, d0
 800a7cc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800a7ce:	9106      	str	r1, [sp, #24]
 800a7d0:	4606      	mov	r6, r0
 800a7d2:	9208      	str	r2, [sp, #32]
 800a7d4:	930c      	str	r3, [sp, #48]	; 0x30
 800a7d6:	b975      	cbnz	r5, 800a7f6 <_dtoa_r+0x3e>
 800a7d8:	2010      	movs	r0, #16
 800a7da:	f000 fda5 	bl	800b328 <malloc>
 800a7de:	4602      	mov	r2, r0
 800a7e0:	61f0      	str	r0, [r6, #28]
 800a7e2:	b920      	cbnz	r0, 800a7ee <_dtoa_r+0x36>
 800a7e4:	4ba6      	ldr	r3, [pc, #664]	; (800aa80 <_dtoa_r+0x2c8>)
 800a7e6:	21ef      	movs	r1, #239	; 0xef
 800a7e8:	48a6      	ldr	r0, [pc, #664]	; (800aa84 <_dtoa_r+0x2cc>)
 800a7ea:	f002 fba9 	bl	800cf40 <__assert_func>
 800a7ee:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a7f2:	6005      	str	r5, [r0, #0]
 800a7f4:	60c5      	str	r5, [r0, #12]
 800a7f6:	69f3      	ldr	r3, [r6, #28]
 800a7f8:	6819      	ldr	r1, [r3, #0]
 800a7fa:	b151      	cbz	r1, 800a812 <_dtoa_r+0x5a>
 800a7fc:	685a      	ldr	r2, [r3, #4]
 800a7fe:	604a      	str	r2, [r1, #4]
 800a800:	2301      	movs	r3, #1
 800a802:	4093      	lsls	r3, r2
 800a804:	608b      	str	r3, [r1, #8]
 800a806:	4630      	mov	r0, r6
 800a808:	f000 fe82 	bl	800b510 <_Bfree>
 800a80c:	69f3      	ldr	r3, [r6, #28]
 800a80e:	2200      	movs	r2, #0
 800a810:	601a      	str	r2, [r3, #0]
 800a812:	f1b9 0300 	subs.w	r3, r9, #0
 800a816:	bfbb      	ittet	lt
 800a818:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a81c:	9303      	strlt	r3, [sp, #12]
 800a81e:	2300      	movge	r3, #0
 800a820:	2201      	movlt	r2, #1
 800a822:	bfac      	ite	ge
 800a824:	6023      	strge	r3, [r4, #0]
 800a826:	6022      	strlt	r2, [r4, #0]
 800a828:	4b97      	ldr	r3, [pc, #604]	; (800aa88 <_dtoa_r+0x2d0>)
 800a82a:	9c03      	ldr	r4, [sp, #12]
 800a82c:	43a3      	bics	r3, r4
 800a82e:	d11c      	bne.n	800a86a <_dtoa_r+0xb2>
 800a830:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a832:	f242 730f 	movw	r3, #9999	; 0x270f
 800a836:	6013      	str	r3, [r2, #0]
 800a838:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a83c:	ea53 0308 	orrs.w	r3, r3, r8
 800a840:	f000 84fb 	beq.w	800b23a <_dtoa_r+0xa82>
 800a844:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a846:	b963      	cbnz	r3, 800a862 <_dtoa_r+0xaa>
 800a848:	4b90      	ldr	r3, [pc, #576]	; (800aa8c <_dtoa_r+0x2d4>)
 800a84a:	e020      	b.n	800a88e <_dtoa_r+0xd6>
 800a84c:	4b90      	ldr	r3, [pc, #576]	; (800aa90 <_dtoa_r+0x2d8>)
 800a84e:	9301      	str	r3, [sp, #4]
 800a850:	3308      	adds	r3, #8
 800a852:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a854:	6013      	str	r3, [r2, #0]
 800a856:	9801      	ldr	r0, [sp, #4]
 800a858:	b011      	add	sp, #68	; 0x44
 800a85a:	ecbd 8b02 	vpop	{d8}
 800a85e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a862:	4b8a      	ldr	r3, [pc, #552]	; (800aa8c <_dtoa_r+0x2d4>)
 800a864:	9301      	str	r3, [sp, #4]
 800a866:	3303      	adds	r3, #3
 800a868:	e7f3      	b.n	800a852 <_dtoa_r+0x9a>
 800a86a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800a86e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a876:	d10c      	bne.n	800a892 <_dtoa_r+0xda>
 800a878:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a87a:	2301      	movs	r3, #1
 800a87c:	6013      	str	r3, [r2, #0]
 800a87e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a880:	2b00      	cmp	r3, #0
 800a882:	f000 84d7 	beq.w	800b234 <_dtoa_r+0xa7c>
 800a886:	4b83      	ldr	r3, [pc, #524]	; (800aa94 <_dtoa_r+0x2dc>)
 800a888:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a88a:	6013      	str	r3, [r2, #0]
 800a88c:	3b01      	subs	r3, #1
 800a88e:	9301      	str	r3, [sp, #4]
 800a890:	e7e1      	b.n	800a856 <_dtoa_r+0x9e>
 800a892:	aa0e      	add	r2, sp, #56	; 0x38
 800a894:	a90f      	add	r1, sp, #60	; 0x3c
 800a896:	4630      	mov	r0, r6
 800a898:	eeb0 0b48 	vmov.f64	d0, d8
 800a89c:	f001 f9d4 	bl	800bc48 <__d2b>
 800a8a0:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800a8a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a8a6:	4605      	mov	r5, r0
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d046      	beq.n	800a93a <_dtoa_r+0x182>
 800a8ac:	eeb0 7b48 	vmov.f64	d7, d8
 800a8b0:	ee18 1a90 	vmov	r1, s17
 800a8b4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a8b8:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800a8bc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a8c0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a8c4:	2000      	movs	r0, #0
 800a8c6:	ee07 1a90 	vmov	s15, r1
 800a8ca:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800a8ce:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800aa68 <_dtoa_r+0x2b0>
 800a8d2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a8d6:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800aa70 <_dtoa_r+0x2b8>
 800a8da:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a8de:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800aa78 <_dtoa_r+0x2c0>
 800a8e2:	ee07 3a90 	vmov	s15, r3
 800a8e6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800a8ea:	eeb0 7b46 	vmov.f64	d7, d6
 800a8ee:	eea4 7b05 	vfma.f64	d7, d4, d5
 800a8f2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a8f6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a8fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8fe:	ee16 ba90 	vmov	fp, s13
 800a902:	9009      	str	r0, [sp, #36]	; 0x24
 800a904:	d508      	bpl.n	800a918 <_dtoa_r+0x160>
 800a906:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a90a:	eeb4 6b47 	vcmp.f64	d6, d7
 800a90e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a912:	bf18      	it	ne
 800a914:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800a918:	f1bb 0f16 	cmp.w	fp, #22
 800a91c:	d82b      	bhi.n	800a976 <_dtoa_r+0x1be>
 800a91e:	495e      	ldr	r1, [pc, #376]	; (800aa98 <_dtoa_r+0x2e0>)
 800a920:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800a924:	ed91 7b00 	vldr	d7, [r1]
 800a928:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a92c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a930:	d501      	bpl.n	800a936 <_dtoa_r+0x17e>
 800a932:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a936:	2100      	movs	r1, #0
 800a938:	e01e      	b.n	800a978 <_dtoa_r+0x1c0>
 800a93a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a93c:	4413      	add	r3, r2
 800a93e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800a942:	2920      	cmp	r1, #32
 800a944:	bfc1      	itttt	gt
 800a946:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800a94a:	408c      	lslgt	r4, r1
 800a94c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800a950:	fa28 f101 	lsrgt.w	r1, r8, r1
 800a954:	bfd6      	itet	le
 800a956:	f1c1 0120 	rsble	r1, r1, #32
 800a95a:	4321      	orrgt	r1, r4
 800a95c:	fa08 f101 	lslle.w	r1, r8, r1
 800a960:	ee07 1a90 	vmov	s15, r1
 800a964:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a968:	3b01      	subs	r3, #1
 800a96a:	ee17 1a90 	vmov	r1, s15
 800a96e:	2001      	movs	r0, #1
 800a970:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a974:	e7a7      	b.n	800a8c6 <_dtoa_r+0x10e>
 800a976:	2101      	movs	r1, #1
 800a978:	1ad2      	subs	r2, r2, r3
 800a97a:	1e53      	subs	r3, r2, #1
 800a97c:	9305      	str	r3, [sp, #20]
 800a97e:	bf45      	ittet	mi
 800a980:	f1c2 0301 	rsbmi	r3, r2, #1
 800a984:	9304      	strmi	r3, [sp, #16]
 800a986:	2300      	movpl	r3, #0
 800a988:	2300      	movmi	r3, #0
 800a98a:	bf4c      	ite	mi
 800a98c:	9305      	strmi	r3, [sp, #20]
 800a98e:	9304      	strpl	r3, [sp, #16]
 800a990:	f1bb 0f00 	cmp.w	fp, #0
 800a994:	910b      	str	r1, [sp, #44]	; 0x2c
 800a996:	db18      	blt.n	800a9ca <_dtoa_r+0x212>
 800a998:	9b05      	ldr	r3, [sp, #20]
 800a99a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800a99e:	445b      	add	r3, fp
 800a9a0:	9305      	str	r3, [sp, #20]
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	9a06      	ldr	r2, [sp, #24]
 800a9a6:	2a09      	cmp	r2, #9
 800a9a8:	d848      	bhi.n	800aa3c <_dtoa_r+0x284>
 800a9aa:	2a05      	cmp	r2, #5
 800a9ac:	bfc4      	itt	gt
 800a9ae:	3a04      	subgt	r2, #4
 800a9b0:	9206      	strgt	r2, [sp, #24]
 800a9b2:	9a06      	ldr	r2, [sp, #24]
 800a9b4:	f1a2 0202 	sub.w	r2, r2, #2
 800a9b8:	bfcc      	ite	gt
 800a9ba:	2400      	movgt	r4, #0
 800a9bc:	2401      	movle	r4, #1
 800a9be:	2a03      	cmp	r2, #3
 800a9c0:	d847      	bhi.n	800aa52 <_dtoa_r+0x29a>
 800a9c2:	e8df f002 	tbb	[pc, r2]
 800a9c6:	2d0b      	.short	0x2d0b
 800a9c8:	392b      	.short	0x392b
 800a9ca:	9b04      	ldr	r3, [sp, #16]
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	eba3 030b 	sub.w	r3, r3, fp
 800a9d2:	9304      	str	r3, [sp, #16]
 800a9d4:	920a      	str	r2, [sp, #40]	; 0x28
 800a9d6:	f1cb 0300 	rsb	r3, fp, #0
 800a9da:	e7e3      	b.n	800a9a4 <_dtoa_r+0x1ec>
 800a9dc:	2200      	movs	r2, #0
 800a9de:	9207      	str	r2, [sp, #28]
 800a9e0:	9a08      	ldr	r2, [sp, #32]
 800a9e2:	2a00      	cmp	r2, #0
 800a9e4:	dc38      	bgt.n	800aa58 <_dtoa_r+0x2a0>
 800a9e6:	f04f 0a01 	mov.w	sl, #1
 800a9ea:	46d1      	mov	r9, sl
 800a9ec:	4652      	mov	r2, sl
 800a9ee:	f8cd a020 	str.w	sl, [sp, #32]
 800a9f2:	69f7      	ldr	r7, [r6, #28]
 800a9f4:	2100      	movs	r1, #0
 800a9f6:	2004      	movs	r0, #4
 800a9f8:	f100 0c14 	add.w	ip, r0, #20
 800a9fc:	4594      	cmp	ip, r2
 800a9fe:	d930      	bls.n	800aa62 <_dtoa_r+0x2aa>
 800aa00:	6079      	str	r1, [r7, #4]
 800aa02:	4630      	mov	r0, r6
 800aa04:	930d      	str	r3, [sp, #52]	; 0x34
 800aa06:	f000 fd43 	bl	800b490 <_Balloc>
 800aa0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa0c:	9001      	str	r0, [sp, #4]
 800aa0e:	4602      	mov	r2, r0
 800aa10:	2800      	cmp	r0, #0
 800aa12:	d145      	bne.n	800aaa0 <_dtoa_r+0x2e8>
 800aa14:	4b21      	ldr	r3, [pc, #132]	; (800aa9c <_dtoa_r+0x2e4>)
 800aa16:	f240 11af 	movw	r1, #431	; 0x1af
 800aa1a:	e6e5      	b.n	800a7e8 <_dtoa_r+0x30>
 800aa1c:	2201      	movs	r2, #1
 800aa1e:	e7de      	b.n	800a9de <_dtoa_r+0x226>
 800aa20:	2200      	movs	r2, #0
 800aa22:	9207      	str	r2, [sp, #28]
 800aa24:	9a08      	ldr	r2, [sp, #32]
 800aa26:	eb0b 0a02 	add.w	sl, fp, r2
 800aa2a:	f10a 0901 	add.w	r9, sl, #1
 800aa2e:	464a      	mov	r2, r9
 800aa30:	2a01      	cmp	r2, #1
 800aa32:	bfb8      	it	lt
 800aa34:	2201      	movlt	r2, #1
 800aa36:	e7dc      	b.n	800a9f2 <_dtoa_r+0x23a>
 800aa38:	2201      	movs	r2, #1
 800aa3a:	e7f2      	b.n	800aa22 <_dtoa_r+0x26a>
 800aa3c:	2401      	movs	r4, #1
 800aa3e:	2200      	movs	r2, #0
 800aa40:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800aa44:	f04f 3aff 	mov.w	sl, #4294967295
 800aa48:	2100      	movs	r1, #0
 800aa4a:	46d1      	mov	r9, sl
 800aa4c:	2212      	movs	r2, #18
 800aa4e:	9108      	str	r1, [sp, #32]
 800aa50:	e7cf      	b.n	800a9f2 <_dtoa_r+0x23a>
 800aa52:	2201      	movs	r2, #1
 800aa54:	9207      	str	r2, [sp, #28]
 800aa56:	e7f5      	b.n	800aa44 <_dtoa_r+0x28c>
 800aa58:	f8dd a020 	ldr.w	sl, [sp, #32]
 800aa5c:	46d1      	mov	r9, sl
 800aa5e:	4652      	mov	r2, sl
 800aa60:	e7c7      	b.n	800a9f2 <_dtoa_r+0x23a>
 800aa62:	3101      	adds	r1, #1
 800aa64:	0040      	lsls	r0, r0, #1
 800aa66:	e7c7      	b.n	800a9f8 <_dtoa_r+0x240>
 800aa68:	636f4361 	.word	0x636f4361
 800aa6c:	3fd287a7 	.word	0x3fd287a7
 800aa70:	8b60c8b3 	.word	0x8b60c8b3
 800aa74:	3fc68a28 	.word	0x3fc68a28
 800aa78:	509f79fb 	.word	0x509f79fb
 800aa7c:	3fd34413 	.word	0x3fd34413
 800aa80:	0800dd2a 	.word	0x0800dd2a
 800aa84:	0800dd41 	.word	0x0800dd41
 800aa88:	7ff00000 	.word	0x7ff00000
 800aa8c:	0800dd26 	.word	0x0800dd26
 800aa90:	0800dd1d 	.word	0x0800dd1d
 800aa94:	0800dcf5 	.word	0x0800dcf5
 800aa98:	0800de30 	.word	0x0800de30
 800aa9c:	0800dd99 	.word	0x0800dd99
 800aaa0:	69f2      	ldr	r2, [r6, #28]
 800aaa2:	9901      	ldr	r1, [sp, #4]
 800aaa4:	6011      	str	r1, [r2, #0]
 800aaa6:	f1b9 0f0e 	cmp.w	r9, #14
 800aaaa:	d86c      	bhi.n	800ab86 <_dtoa_r+0x3ce>
 800aaac:	2c00      	cmp	r4, #0
 800aaae:	d06a      	beq.n	800ab86 <_dtoa_r+0x3ce>
 800aab0:	f1bb 0f00 	cmp.w	fp, #0
 800aab4:	f340 80a0 	ble.w	800abf8 <_dtoa_r+0x440>
 800aab8:	4ac1      	ldr	r2, [pc, #772]	; (800adc0 <_dtoa_r+0x608>)
 800aaba:	f00b 010f 	and.w	r1, fp, #15
 800aabe:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800aac2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800aac6:	ed92 7b00 	vldr	d7, [r2]
 800aaca:	ea4f 122b 	mov.w	r2, fp, asr #4
 800aace:	f000 8087 	beq.w	800abe0 <_dtoa_r+0x428>
 800aad2:	49bc      	ldr	r1, [pc, #752]	; (800adc4 <_dtoa_r+0x60c>)
 800aad4:	ed91 6b08 	vldr	d6, [r1, #32]
 800aad8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800aadc:	ed8d 6b02 	vstr	d6, [sp, #8]
 800aae0:	f002 020f 	and.w	r2, r2, #15
 800aae4:	2103      	movs	r1, #3
 800aae6:	48b7      	ldr	r0, [pc, #732]	; (800adc4 <_dtoa_r+0x60c>)
 800aae8:	2a00      	cmp	r2, #0
 800aaea:	d17b      	bne.n	800abe4 <_dtoa_r+0x42c>
 800aaec:	ed9d 6b02 	vldr	d6, [sp, #8]
 800aaf0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800aaf4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800aaf8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aafa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aafe:	2a00      	cmp	r2, #0
 800ab00:	f000 80a0 	beq.w	800ac44 <_dtoa_r+0x48c>
 800ab04:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800ab08:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ab0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab10:	f140 8098 	bpl.w	800ac44 <_dtoa_r+0x48c>
 800ab14:	f1b9 0f00 	cmp.w	r9, #0
 800ab18:	f000 8094 	beq.w	800ac44 <_dtoa_r+0x48c>
 800ab1c:	f1ba 0f00 	cmp.w	sl, #0
 800ab20:	dd2f      	ble.n	800ab82 <_dtoa_r+0x3ca>
 800ab22:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800ab26:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ab2a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ab2e:	f10b 32ff 	add.w	r2, fp, #4294967295
 800ab32:	3101      	adds	r1, #1
 800ab34:	4654      	mov	r4, sl
 800ab36:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ab3a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800ab3e:	ee07 1a90 	vmov	s15, r1
 800ab42:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ab46:	eea7 5b06 	vfma.f64	d5, d7, d6
 800ab4a:	ee15 7a90 	vmov	r7, s11
 800ab4e:	ec51 0b15 	vmov	r0, r1, d5
 800ab52:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800ab56:	2c00      	cmp	r4, #0
 800ab58:	d177      	bne.n	800ac4a <_dtoa_r+0x492>
 800ab5a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800ab5e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ab62:	ec41 0b17 	vmov	d7, r0, r1
 800ab66:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ab6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab6e:	f300 826a 	bgt.w	800b046 <_dtoa_r+0x88e>
 800ab72:	eeb1 7b47 	vneg.f64	d7, d7
 800ab76:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ab7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab7e:	f100 8260 	bmi.w	800b042 <_dtoa_r+0x88a>
 800ab82:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ab86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ab88:	2a00      	cmp	r2, #0
 800ab8a:	f2c0 811d 	blt.w	800adc8 <_dtoa_r+0x610>
 800ab8e:	f1bb 0f0e 	cmp.w	fp, #14
 800ab92:	f300 8119 	bgt.w	800adc8 <_dtoa_r+0x610>
 800ab96:	4b8a      	ldr	r3, [pc, #552]	; (800adc0 <_dtoa_r+0x608>)
 800ab98:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ab9c:	ed93 6b00 	vldr	d6, [r3]
 800aba0:	9b08      	ldr	r3, [sp, #32]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	f280 80b7 	bge.w	800ad16 <_dtoa_r+0x55e>
 800aba8:	f1b9 0f00 	cmp.w	r9, #0
 800abac:	f300 80b3 	bgt.w	800ad16 <_dtoa_r+0x55e>
 800abb0:	f040 8246 	bne.w	800b040 <_dtoa_r+0x888>
 800abb4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800abb8:	ee26 6b07 	vmul.f64	d6, d6, d7
 800abbc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800abc0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800abc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abc8:	464c      	mov	r4, r9
 800abca:	464f      	mov	r7, r9
 800abcc:	f280 821c 	bge.w	800b008 <_dtoa_r+0x850>
 800abd0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800abd4:	2331      	movs	r3, #49	; 0x31
 800abd6:	f808 3b01 	strb.w	r3, [r8], #1
 800abda:	f10b 0b01 	add.w	fp, fp, #1
 800abde:	e218      	b.n	800b012 <_dtoa_r+0x85a>
 800abe0:	2102      	movs	r1, #2
 800abe2:	e780      	b.n	800aae6 <_dtoa_r+0x32e>
 800abe4:	07d4      	lsls	r4, r2, #31
 800abe6:	d504      	bpl.n	800abf2 <_dtoa_r+0x43a>
 800abe8:	ed90 6b00 	vldr	d6, [r0]
 800abec:	3101      	adds	r1, #1
 800abee:	ee27 7b06 	vmul.f64	d7, d7, d6
 800abf2:	1052      	asrs	r2, r2, #1
 800abf4:	3008      	adds	r0, #8
 800abf6:	e777      	b.n	800aae8 <_dtoa_r+0x330>
 800abf8:	d022      	beq.n	800ac40 <_dtoa_r+0x488>
 800abfa:	f1cb 0200 	rsb	r2, fp, #0
 800abfe:	4970      	ldr	r1, [pc, #448]	; (800adc0 <_dtoa_r+0x608>)
 800ac00:	f002 000f 	and.w	r0, r2, #15
 800ac04:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800ac08:	ed91 7b00 	vldr	d7, [r1]
 800ac0c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800ac10:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ac14:	486b      	ldr	r0, [pc, #428]	; (800adc4 <_dtoa_r+0x60c>)
 800ac16:	1112      	asrs	r2, r2, #4
 800ac18:	2400      	movs	r4, #0
 800ac1a:	2102      	movs	r1, #2
 800ac1c:	b92a      	cbnz	r2, 800ac2a <_dtoa_r+0x472>
 800ac1e:	2c00      	cmp	r4, #0
 800ac20:	f43f af6a 	beq.w	800aaf8 <_dtoa_r+0x340>
 800ac24:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ac28:	e766      	b.n	800aaf8 <_dtoa_r+0x340>
 800ac2a:	07d7      	lsls	r7, r2, #31
 800ac2c:	d505      	bpl.n	800ac3a <_dtoa_r+0x482>
 800ac2e:	ed90 6b00 	vldr	d6, [r0]
 800ac32:	3101      	adds	r1, #1
 800ac34:	2401      	movs	r4, #1
 800ac36:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ac3a:	1052      	asrs	r2, r2, #1
 800ac3c:	3008      	adds	r0, #8
 800ac3e:	e7ed      	b.n	800ac1c <_dtoa_r+0x464>
 800ac40:	2102      	movs	r1, #2
 800ac42:	e759      	b.n	800aaf8 <_dtoa_r+0x340>
 800ac44:	465a      	mov	r2, fp
 800ac46:	464c      	mov	r4, r9
 800ac48:	e775      	b.n	800ab36 <_dtoa_r+0x37e>
 800ac4a:	ec41 0b17 	vmov	d7, r0, r1
 800ac4e:	495c      	ldr	r1, [pc, #368]	; (800adc0 <_dtoa_r+0x608>)
 800ac50:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800ac54:	ed11 4b02 	vldr	d4, [r1, #-8]
 800ac58:	9901      	ldr	r1, [sp, #4]
 800ac5a:	440c      	add	r4, r1
 800ac5c:	9907      	ldr	r1, [sp, #28]
 800ac5e:	b351      	cbz	r1, 800acb6 <_dtoa_r+0x4fe>
 800ac60:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800ac64:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800ac68:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ac6c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800ac70:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800ac74:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ac78:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ac7c:	ee14 1a90 	vmov	r1, s9
 800ac80:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ac84:	3130      	adds	r1, #48	; 0x30
 800ac86:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ac8a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ac8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac92:	f808 1b01 	strb.w	r1, [r8], #1
 800ac96:	d439      	bmi.n	800ad0c <_dtoa_r+0x554>
 800ac98:	ee32 5b46 	vsub.f64	d5, d2, d6
 800ac9c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800aca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aca4:	d472      	bmi.n	800ad8c <_dtoa_r+0x5d4>
 800aca6:	45a0      	cmp	r8, r4
 800aca8:	f43f af6b 	beq.w	800ab82 <_dtoa_r+0x3ca>
 800acac:	ee27 7b03 	vmul.f64	d7, d7, d3
 800acb0:	ee26 6b03 	vmul.f64	d6, d6, d3
 800acb4:	e7e0      	b.n	800ac78 <_dtoa_r+0x4c0>
 800acb6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800acba:	ee27 7b04 	vmul.f64	d7, d7, d4
 800acbe:	4620      	mov	r0, r4
 800acc0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800acc4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800acc8:	ee14 1a90 	vmov	r1, s9
 800accc:	3130      	adds	r1, #48	; 0x30
 800acce:	f808 1b01 	strb.w	r1, [r8], #1
 800acd2:	45a0      	cmp	r8, r4
 800acd4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800acd8:	ee36 6b45 	vsub.f64	d6, d6, d5
 800acdc:	d118      	bne.n	800ad10 <_dtoa_r+0x558>
 800acde:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ace2:	ee37 4b05 	vadd.f64	d4, d7, d5
 800ace6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800acea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acee:	dc4d      	bgt.n	800ad8c <_dtoa_r+0x5d4>
 800acf0:	ee35 5b47 	vsub.f64	d5, d5, d7
 800acf4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800acf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acfc:	f57f af41 	bpl.w	800ab82 <_dtoa_r+0x3ca>
 800ad00:	4680      	mov	r8, r0
 800ad02:	3801      	subs	r0, #1
 800ad04:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800ad08:	2b30      	cmp	r3, #48	; 0x30
 800ad0a:	d0f9      	beq.n	800ad00 <_dtoa_r+0x548>
 800ad0c:	4693      	mov	fp, r2
 800ad0e:	e02a      	b.n	800ad66 <_dtoa_r+0x5ae>
 800ad10:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ad14:	e7d6      	b.n	800acc4 <_dtoa_r+0x50c>
 800ad16:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ad1a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800ad1e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ad22:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800ad26:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800ad2a:	ee15 3a10 	vmov	r3, s10
 800ad2e:	3330      	adds	r3, #48	; 0x30
 800ad30:	f808 3b01 	strb.w	r3, [r8], #1
 800ad34:	9b01      	ldr	r3, [sp, #4]
 800ad36:	eba8 0303 	sub.w	r3, r8, r3
 800ad3a:	4599      	cmp	r9, r3
 800ad3c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800ad40:	eea3 7b46 	vfms.f64	d7, d3, d6
 800ad44:	d133      	bne.n	800adae <_dtoa_r+0x5f6>
 800ad46:	ee37 7b07 	vadd.f64	d7, d7, d7
 800ad4a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ad4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad52:	dc1a      	bgt.n	800ad8a <_dtoa_r+0x5d2>
 800ad54:	eeb4 7b46 	vcmp.f64	d7, d6
 800ad58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad5c:	d103      	bne.n	800ad66 <_dtoa_r+0x5ae>
 800ad5e:	ee15 3a10 	vmov	r3, s10
 800ad62:	07d9      	lsls	r1, r3, #31
 800ad64:	d411      	bmi.n	800ad8a <_dtoa_r+0x5d2>
 800ad66:	4629      	mov	r1, r5
 800ad68:	4630      	mov	r0, r6
 800ad6a:	f000 fbd1 	bl	800b510 <_Bfree>
 800ad6e:	2300      	movs	r3, #0
 800ad70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ad72:	f888 3000 	strb.w	r3, [r8]
 800ad76:	f10b 0301 	add.w	r3, fp, #1
 800ad7a:	6013      	str	r3, [r2, #0]
 800ad7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	f43f ad69 	beq.w	800a856 <_dtoa_r+0x9e>
 800ad84:	f8c3 8000 	str.w	r8, [r3]
 800ad88:	e565      	b.n	800a856 <_dtoa_r+0x9e>
 800ad8a:	465a      	mov	r2, fp
 800ad8c:	4643      	mov	r3, r8
 800ad8e:	4698      	mov	r8, r3
 800ad90:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800ad94:	2939      	cmp	r1, #57	; 0x39
 800ad96:	d106      	bne.n	800ada6 <_dtoa_r+0x5ee>
 800ad98:	9901      	ldr	r1, [sp, #4]
 800ad9a:	4299      	cmp	r1, r3
 800ad9c:	d1f7      	bne.n	800ad8e <_dtoa_r+0x5d6>
 800ad9e:	9801      	ldr	r0, [sp, #4]
 800ada0:	2130      	movs	r1, #48	; 0x30
 800ada2:	3201      	adds	r2, #1
 800ada4:	7001      	strb	r1, [r0, #0]
 800ada6:	7819      	ldrb	r1, [r3, #0]
 800ada8:	3101      	adds	r1, #1
 800adaa:	7019      	strb	r1, [r3, #0]
 800adac:	e7ae      	b.n	800ad0c <_dtoa_r+0x554>
 800adae:	ee27 7b04 	vmul.f64	d7, d7, d4
 800adb2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800adb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adba:	d1b2      	bne.n	800ad22 <_dtoa_r+0x56a>
 800adbc:	e7d3      	b.n	800ad66 <_dtoa_r+0x5ae>
 800adbe:	bf00      	nop
 800adc0:	0800de30 	.word	0x0800de30
 800adc4:	0800de08 	.word	0x0800de08
 800adc8:	9907      	ldr	r1, [sp, #28]
 800adca:	2900      	cmp	r1, #0
 800adcc:	f000 80d0 	beq.w	800af70 <_dtoa_r+0x7b8>
 800add0:	9906      	ldr	r1, [sp, #24]
 800add2:	2901      	cmp	r1, #1
 800add4:	f300 80b4 	bgt.w	800af40 <_dtoa_r+0x788>
 800add8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800adda:	2900      	cmp	r1, #0
 800addc:	f000 80ac 	beq.w	800af38 <_dtoa_r+0x780>
 800ade0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ade4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ade8:	461c      	mov	r4, r3
 800adea:	9309      	str	r3, [sp, #36]	; 0x24
 800adec:	9b04      	ldr	r3, [sp, #16]
 800adee:	4413      	add	r3, r2
 800adf0:	9304      	str	r3, [sp, #16]
 800adf2:	9b05      	ldr	r3, [sp, #20]
 800adf4:	2101      	movs	r1, #1
 800adf6:	4413      	add	r3, r2
 800adf8:	4630      	mov	r0, r6
 800adfa:	9305      	str	r3, [sp, #20]
 800adfc:	f000 fc88 	bl	800b710 <__i2b>
 800ae00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae02:	4607      	mov	r7, r0
 800ae04:	f1b8 0f00 	cmp.w	r8, #0
 800ae08:	d00d      	beq.n	800ae26 <_dtoa_r+0x66e>
 800ae0a:	9a05      	ldr	r2, [sp, #20]
 800ae0c:	2a00      	cmp	r2, #0
 800ae0e:	dd0a      	ble.n	800ae26 <_dtoa_r+0x66e>
 800ae10:	4542      	cmp	r2, r8
 800ae12:	9904      	ldr	r1, [sp, #16]
 800ae14:	bfa8      	it	ge
 800ae16:	4642      	movge	r2, r8
 800ae18:	1a89      	subs	r1, r1, r2
 800ae1a:	9104      	str	r1, [sp, #16]
 800ae1c:	9905      	ldr	r1, [sp, #20]
 800ae1e:	eba8 0802 	sub.w	r8, r8, r2
 800ae22:	1a8a      	subs	r2, r1, r2
 800ae24:	9205      	str	r2, [sp, #20]
 800ae26:	b303      	cbz	r3, 800ae6a <_dtoa_r+0x6b2>
 800ae28:	9a07      	ldr	r2, [sp, #28]
 800ae2a:	2a00      	cmp	r2, #0
 800ae2c:	f000 80a5 	beq.w	800af7a <_dtoa_r+0x7c2>
 800ae30:	2c00      	cmp	r4, #0
 800ae32:	dd13      	ble.n	800ae5c <_dtoa_r+0x6a4>
 800ae34:	4639      	mov	r1, r7
 800ae36:	4622      	mov	r2, r4
 800ae38:	4630      	mov	r0, r6
 800ae3a:	930d      	str	r3, [sp, #52]	; 0x34
 800ae3c:	f000 fd28 	bl	800b890 <__pow5mult>
 800ae40:	462a      	mov	r2, r5
 800ae42:	4601      	mov	r1, r0
 800ae44:	4607      	mov	r7, r0
 800ae46:	4630      	mov	r0, r6
 800ae48:	f000 fc78 	bl	800b73c <__multiply>
 800ae4c:	4629      	mov	r1, r5
 800ae4e:	9009      	str	r0, [sp, #36]	; 0x24
 800ae50:	4630      	mov	r0, r6
 800ae52:	f000 fb5d 	bl	800b510 <_Bfree>
 800ae56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae5a:	4615      	mov	r5, r2
 800ae5c:	1b1a      	subs	r2, r3, r4
 800ae5e:	d004      	beq.n	800ae6a <_dtoa_r+0x6b2>
 800ae60:	4629      	mov	r1, r5
 800ae62:	4630      	mov	r0, r6
 800ae64:	f000 fd14 	bl	800b890 <__pow5mult>
 800ae68:	4605      	mov	r5, r0
 800ae6a:	2101      	movs	r1, #1
 800ae6c:	4630      	mov	r0, r6
 800ae6e:	f000 fc4f 	bl	800b710 <__i2b>
 800ae72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	4604      	mov	r4, r0
 800ae78:	f340 8081 	ble.w	800af7e <_dtoa_r+0x7c6>
 800ae7c:	461a      	mov	r2, r3
 800ae7e:	4601      	mov	r1, r0
 800ae80:	4630      	mov	r0, r6
 800ae82:	f000 fd05 	bl	800b890 <__pow5mult>
 800ae86:	9b06      	ldr	r3, [sp, #24]
 800ae88:	2b01      	cmp	r3, #1
 800ae8a:	4604      	mov	r4, r0
 800ae8c:	dd7a      	ble.n	800af84 <_dtoa_r+0x7cc>
 800ae8e:	2300      	movs	r3, #0
 800ae90:	9309      	str	r3, [sp, #36]	; 0x24
 800ae92:	6922      	ldr	r2, [r4, #16]
 800ae94:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ae98:	6910      	ldr	r0, [r2, #16]
 800ae9a:	f000 fbeb 	bl	800b674 <__hi0bits>
 800ae9e:	f1c0 0020 	rsb	r0, r0, #32
 800aea2:	9b05      	ldr	r3, [sp, #20]
 800aea4:	4418      	add	r0, r3
 800aea6:	f010 001f 	ands.w	r0, r0, #31
 800aeaa:	f000 8093 	beq.w	800afd4 <_dtoa_r+0x81c>
 800aeae:	f1c0 0220 	rsb	r2, r0, #32
 800aeb2:	2a04      	cmp	r2, #4
 800aeb4:	f340 8085 	ble.w	800afc2 <_dtoa_r+0x80a>
 800aeb8:	9b04      	ldr	r3, [sp, #16]
 800aeba:	f1c0 001c 	rsb	r0, r0, #28
 800aebe:	4403      	add	r3, r0
 800aec0:	9304      	str	r3, [sp, #16]
 800aec2:	9b05      	ldr	r3, [sp, #20]
 800aec4:	4480      	add	r8, r0
 800aec6:	4403      	add	r3, r0
 800aec8:	9305      	str	r3, [sp, #20]
 800aeca:	9b04      	ldr	r3, [sp, #16]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	dd05      	ble.n	800aedc <_dtoa_r+0x724>
 800aed0:	4629      	mov	r1, r5
 800aed2:	461a      	mov	r2, r3
 800aed4:	4630      	mov	r0, r6
 800aed6:	f000 fd35 	bl	800b944 <__lshift>
 800aeda:	4605      	mov	r5, r0
 800aedc:	9b05      	ldr	r3, [sp, #20]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	dd05      	ble.n	800aeee <_dtoa_r+0x736>
 800aee2:	4621      	mov	r1, r4
 800aee4:	461a      	mov	r2, r3
 800aee6:	4630      	mov	r0, r6
 800aee8:	f000 fd2c 	bl	800b944 <__lshift>
 800aeec:	4604      	mov	r4, r0
 800aeee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d071      	beq.n	800afd8 <_dtoa_r+0x820>
 800aef4:	4621      	mov	r1, r4
 800aef6:	4628      	mov	r0, r5
 800aef8:	f000 fd90 	bl	800ba1c <__mcmp>
 800aefc:	2800      	cmp	r0, #0
 800aefe:	da6b      	bge.n	800afd8 <_dtoa_r+0x820>
 800af00:	2300      	movs	r3, #0
 800af02:	4629      	mov	r1, r5
 800af04:	220a      	movs	r2, #10
 800af06:	4630      	mov	r0, r6
 800af08:	f000 fb24 	bl	800b554 <__multadd>
 800af0c:	9b07      	ldr	r3, [sp, #28]
 800af0e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800af12:	4605      	mov	r5, r0
 800af14:	2b00      	cmp	r3, #0
 800af16:	f000 8197 	beq.w	800b248 <_dtoa_r+0xa90>
 800af1a:	4639      	mov	r1, r7
 800af1c:	2300      	movs	r3, #0
 800af1e:	220a      	movs	r2, #10
 800af20:	4630      	mov	r0, r6
 800af22:	f000 fb17 	bl	800b554 <__multadd>
 800af26:	f1ba 0f00 	cmp.w	sl, #0
 800af2a:	4607      	mov	r7, r0
 800af2c:	f300 8093 	bgt.w	800b056 <_dtoa_r+0x89e>
 800af30:	9b06      	ldr	r3, [sp, #24]
 800af32:	2b02      	cmp	r3, #2
 800af34:	dc57      	bgt.n	800afe6 <_dtoa_r+0x82e>
 800af36:	e08e      	b.n	800b056 <_dtoa_r+0x89e>
 800af38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af3a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800af3e:	e751      	b.n	800ade4 <_dtoa_r+0x62c>
 800af40:	f109 34ff 	add.w	r4, r9, #4294967295
 800af44:	42a3      	cmp	r3, r4
 800af46:	bfbf      	itttt	lt
 800af48:	1ae2      	sublt	r2, r4, r3
 800af4a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800af4c:	189b      	addlt	r3, r3, r2
 800af4e:	930a      	strlt	r3, [sp, #40]	; 0x28
 800af50:	bfae      	itee	ge
 800af52:	1b1c      	subge	r4, r3, r4
 800af54:	4623      	movlt	r3, r4
 800af56:	2400      	movlt	r4, #0
 800af58:	f1b9 0f00 	cmp.w	r9, #0
 800af5c:	bfb5      	itete	lt
 800af5e:	9a04      	ldrlt	r2, [sp, #16]
 800af60:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800af64:	eba2 0809 	sublt.w	r8, r2, r9
 800af68:	464a      	movge	r2, r9
 800af6a:	bfb8      	it	lt
 800af6c:	2200      	movlt	r2, #0
 800af6e:	e73c      	b.n	800adea <_dtoa_r+0x632>
 800af70:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800af74:	9f07      	ldr	r7, [sp, #28]
 800af76:	461c      	mov	r4, r3
 800af78:	e744      	b.n	800ae04 <_dtoa_r+0x64c>
 800af7a:	461a      	mov	r2, r3
 800af7c:	e770      	b.n	800ae60 <_dtoa_r+0x6a8>
 800af7e:	9b06      	ldr	r3, [sp, #24]
 800af80:	2b01      	cmp	r3, #1
 800af82:	dc18      	bgt.n	800afb6 <_dtoa_r+0x7fe>
 800af84:	9b02      	ldr	r3, [sp, #8]
 800af86:	b9b3      	cbnz	r3, 800afb6 <_dtoa_r+0x7fe>
 800af88:	9b03      	ldr	r3, [sp, #12]
 800af8a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800af8e:	b9a2      	cbnz	r2, 800afba <_dtoa_r+0x802>
 800af90:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800af94:	0d12      	lsrs	r2, r2, #20
 800af96:	0512      	lsls	r2, r2, #20
 800af98:	b18a      	cbz	r2, 800afbe <_dtoa_r+0x806>
 800af9a:	9b04      	ldr	r3, [sp, #16]
 800af9c:	3301      	adds	r3, #1
 800af9e:	9304      	str	r3, [sp, #16]
 800afa0:	9b05      	ldr	r3, [sp, #20]
 800afa2:	3301      	adds	r3, #1
 800afa4:	9305      	str	r3, [sp, #20]
 800afa6:	2301      	movs	r3, #1
 800afa8:	9309      	str	r3, [sp, #36]	; 0x24
 800afaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afac:	2b00      	cmp	r3, #0
 800afae:	f47f af70 	bne.w	800ae92 <_dtoa_r+0x6da>
 800afb2:	2001      	movs	r0, #1
 800afb4:	e775      	b.n	800aea2 <_dtoa_r+0x6ea>
 800afb6:	2300      	movs	r3, #0
 800afb8:	e7f6      	b.n	800afa8 <_dtoa_r+0x7f0>
 800afba:	9b02      	ldr	r3, [sp, #8]
 800afbc:	e7f4      	b.n	800afa8 <_dtoa_r+0x7f0>
 800afbe:	9209      	str	r2, [sp, #36]	; 0x24
 800afc0:	e7f3      	b.n	800afaa <_dtoa_r+0x7f2>
 800afc2:	d082      	beq.n	800aeca <_dtoa_r+0x712>
 800afc4:	9b04      	ldr	r3, [sp, #16]
 800afc6:	321c      	adds	r2, #28
 800afc8:	4413      	add	r3, r2
 800afca:	9304      	str	r3, [sp, #16]
 800afcc:	9b05      	ldr	r3, [sp, #20]
 800afce:	4490      	add	r8, r2
 800afd0:	4413      	add	r3, r2
 800afd2:	e779      	b.n	800aec8 <_dtoa_r+0x710>
 800afd4:	4602      	mov	r2, r0
 800afd6:	e7f5      	b.n	800afc4 <_dtoa_r+0x80c>
 800afd8:	f1b9 0f00 	cmp.w	r9, #0
 800afdc:	dc36      	bgt.n	800b04c <_dtoa_r+0x894>
 800afde:	9b06      	ldr	r3, [sp, #24]
 800afe0:	2b02      	cmp	r3, #2
 800afe2:	dd33      	ble.n	800b04c <_dtoa_r+0x894>
 800afe4:	46ca      	mov	sl, r9
 800afe6:	f1ba 0f00 	cmp.w	sl, #0
 800afea:	d10d      	bne.n	800b008 <_dtoa_r+0x850>
 800afec:	4621      	mov	r1, r4
 800afee:	4653      	mov	r3, sl
 800aff0:	2205      	movs	r2, #5
 800aff2:	4630      	mov	r0, r6
 800aff4:	f000 faae 	bl	800b554 <__multadd>
 800aff8:	4601      	mov	r1, r0
 800affa:	4604      	mov	r4, r0
 800affc:	4628      	mov	r0, r5
 800affe:	f000 fd0d 	bl	800ba1c <__mcmp>
 800b002:	2800      	cmp	r0, #0
 800b004:	f73f ade4 	bgt.w	800abd0 <_dtoa_r+0x418>
 800b008:	9b08      	ldr	r3, [sp, #32]
 800b00a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b00e:	ea6f 0b03 	mvn.w	fp, r3
 800b012:	f04f 0900 	mov.w	r9, #0
 800b016:	4621      	mov	r1, r4
 800b018:	4630      	mov	r0, r6
 800b01a:	f000 fa79 	bl	800b510 <_Bfree>
 800b01e:	2f00      	cmp	r7, #0
 800b020:	f43f aea1 	beq.w	800ad66 <_dtoa_r+0x5ae>
 800b024:	f1b9 0f00 	cmp.w	r9, #0
 800b028:	d005      	beq.n	800b036 <_dtoa_r+0x87e>
 800b02a:	45b9      	cmp	r9, r7
 800b02c:	d003      	beq.n	800b036 <_dtoa_r+0x87e>
 800b02e:	4649      	mov	r1, r9
 800b030:	4630      	mov	r0, r6
 800b032:	f000 fa6d 	bl	800b510 <_Bfree>
 800b036:	4639      	mov	r1, r7
 800b038:	4630      	mov	r0, r6
 800b03a:	f000 fa69 	bl	800b510 <_Bfree>
 800b03e:	e692      	b.n	800ad66 <_dtoa_r+0x5ae>
 800b040:	2400      	movs	r4, #0
 800b042:	4627      	mov	r7, r4
 800b044:	e7e0      	b.n	800b008 <_dtoa_r+0x850>
 800b046:	4693      	mov	fp, r2
 800b048:	4627      	mov	r7, r4
 800b04a:	e5c1      	b.n	800abd0 <_dtoa_r+0x418>
 800b04c:	9b07      	ldr	r3, [sp, #28]
 800b04e:	46ca      	mov	sl, r9
 800b050:	2b00      	cmp	r3, #0
 800b052:	f000 8100 	beq.w	800b256 <_dtoa_r+0xa9e>
 800b056:	f1b8 0f00 	cmp.w	r8, #0
 800b05a:	dd05      	ble.n	800b068 <_dtoa_r+0x8b0>
 800b05c:	4639      	mov	r1, r7
 800b05e:	4642      	mov	r2, r8
 800b060:	4630      	mov	r0, r6
 800b062:	f000 fc6f 	bl	800b944 <__lshift>
 800b066:	4607      	mov	r7, r0
 800b068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d05d      	beq.n	800b12a <_dtoa_r+0x972>
 800b06e:	6879      	ldr	r1, [r7, #4]
 800b070:	4630      	mov	r0, r6
 800b072:	f000 fa0d 	bl	800b490 <_Balloc>
 800b076:	4680      	mov	r8, r0
 800b078:	b928      	cbnz	r0, 800b086 <_dtoa_r+0x8ce>
 800b07a:	4b82      	ldr	r3, [pc, #520]	; (800b284 <_dtoa_r+0xacc>)
 800b07c:	4602      	mov	r2, r0
 800b07e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b082:	f7ff bbb1 	b.w	800a7e8 <_dtoa_r+0x30>
 800b086:	693a      	ldr	r2, [r7, #16]
 800b088:	3202      	adds	r2, #2
 800b08a:	0092      	lsls	r2, r2, #2
 800b08c:	f107 010c 	add.w	r1, r7, #12
 800b090:	300c      	adds	r0, #12
 800b092:	f001 ff3f 	bl	800cf14 <memcpy>
 800b096:	2201      	movs	r2, #1
 800b098:	4641      	mov	r1, r8
 800b09a:	4630      	mov	r0, r6
 800b09c:	f000 fc52 	bl	800b944 <__lshift>
 800b0a0:	9b01      	ldr	r3, [sp, #4]
 800b0a2:	3301      	adds	r3, #1
 800b0a4:	9304      	str	r3, [sp, #16]
 800b0a6:	9b01      	ldr	r3, [sp, #4]
 800b0a8:	4453      	add	r3, sl
 800b0aa:	9308      	str	r3, [sp, #32]
 800b0ac:	9b02      	ldr	r3, [sp, #8]
 800b0ae:	f003 0301 	and.w	r3, r3, #1
 800b0b2:	46b9      	mov	r9, r7
 800b0b4:	9307      	str	r3, [sp, #28]
 800b0b6:	4607      	mov	r7, r0
 800b0b8:	9b04      	ldr	r3, [sp, #16]
 800b0ba:	4621      	mov	r1, r4
 800b0bc:	3b01      	subs	r3, #1
 800b0be:	4628      	mov	r0, r5
 800b0c0:	9302      	str	r3, [sp, #8]
 800b0c2:	f7ff faef 	bl	800a6a4 <quorem>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	3330      	adds	r3, #48	; 0x30
 800b0ca:	9005      	str	r0, [sp, #20]
 800b0cc:	4649      	mov	r1, r9
 800b0ce:	4628      	mov	r0, r5
 800b0d0:	9309      	str	r3, [sp, #36]	; 0x24
 800b0d2:	f000 fca3 	bl	800ba1c <__mcmp>
 800b0d6:	463a      	mov	r2, r7
 800b0d8:	4682      	mov	sl, r0
 800b0da:	4621      	mov	r1, r4
 800b0dc:	4630      	mov	r0, r6
 800b0de:	f000 fcb9 	bl	800ba54 <__mdiff>
 800b0e2:	68c2      	ldr	r2, [r0, #12]
 800b0e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0e6:	4680      	mov	r8, r0
 800b0e8:	bb0a      	cbnz	r2, 800b12e <_dtoa_r+0x976>
 800b0ea:	4601      	mov	r1, r0
 800b0ec:	4628      	mov	r0, r5
 800b0ee:	f000 fc95 	bl	800ba1c <__mcmp>
 800b0f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0f4:	4602      	mov	r2, r0
 800b0f6:	4641      	mov	r1, r8
 800b0f8:	4630      	mov	r0, r6
 800b0fa:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800b0fe:	f000 fa07 	bl	800b510 <_Bfree>
 800b102:	9b06      	ldr	r3, [sp, #24]
 800b104:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b106:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b10a:	ea43 0102 	orr.w	r1, r3, r2
 800b10e:	9b07      	ldr	r3, [sp, #28]
 800b110:	4319      	orrs	r1, r3
 800b112:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b114:	d10d      	bne.n	800b132 <_dtoa_r+0x97a>
 800b116:	2b39      	cmp	r3, #57	; 0x39
 800b118:	d029      	beq.n	800b16e <_dtoa_r+0x9b6>
 800b11a:	f1ba 0f00 	cmp.w	sl, #0
 800b11e:	dd01      	ble.n	800b124 <_dtoa_r+0x96c>
 800b120:	9b05      	ldr	r3, [sp, #20]
 800b122:	3331      	adds	r3, #49	; 0x31
 800b124:	9a02      	ldr	r2, [sp, #8]
 800b126:	7013      	strb	r3, [r2, #0]
 800b128:	e775      	b.n	800b016 <_dtoa_r+0x85e>
 800b12a:	4638      	mov	r0, r7
 800b12c:	e7b8      	b.n	800b0a0 <_dtoa_r+0x8e8>
 800b12e:	2201      	movs	r2, #1
 800b130:	e7e1      	b.n	800b0f6 <_dtoa_r+0x93e>
 800b132:	f1ba 0f00 	cmp.w	sl, #0
 800b136:	db06      	blt.n	800b146 <_dtoa_r+0x98e>
 800b138:	9906      	ldr	r1, [sp, #24]
 800b13a:	ea41 0a0a 	orr.w	sl, r1, sl
 800b13e:	9907      	ldr	r1, [sp, #28]
 800b140:	ea5a 0a01 	orrs.w	sl, sl, r1
 800b144:	d120      	bne.n	800b188 <_dtoa_r+0x9d0>
 800b146:	2a00      	cmp	r2, #0
 800b148:	ddec      	ble.n	800b124 <_dtoa_r+0x96c>
 800b14a:	4629      	mov	r1, r5
 800b14c:	2201      	movs	r2, #1
 800b14e:	4630      	mov	r0, r6
 800b150:	9304      	str	r3, [sp, #16]
 800b152:	f000 fbf7 	bl	800b944 <__lshift>
 800b156:	4621      	mov	r1, r4
 800b158:	4605      	mov	r5, r0
 800b15a:	f000 fc5f 	bl	800ba1c <__mcmp>
 800b15e:	2800      	cmp	r0, #0
 800b160:	9b04      	ldr	r3, [sp, #16]
 800b162:	dc02      	bgt.n	800b16a <_dtoa_r+0x9b2>
 800b164:	d1de      	bne.n	800b124 <_dtoa_r+0x96c>
 800b166:	07da      	lsls	r2, r3, #31
 800b168:	d5dc      	bpl.n	800b124 <_dtoa_r+0x96c>
 800b16a:	2b39      	cmp	r3, #57	; 0x39
 800b16c:	d1d8      	bne.n	800b120 <_dtoa_r+0x968>
 800b16e:	9a02      	ldr	r2, [sp, #8]
 800b170:	2339      	movs	r3, #57	; 0x39
 800b172:	7013      	strb	r3, [r2, #0]
 800b174:	4643      	mov	r3, r8
 800b176:	4698      	mov	r8, r3
 800b178:	3b01      	subs	r3, #1
 800b17a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800b17e:	2a39      	cmp	r2, #57	; 0x39
 800b180:	d051      	beq.n	800b226 <_dtoa_r+0xa6e>
 800b182:	3201      	adds	r2, #1
 800b184:	701a      	strb	r2, [r3, #0]
 800b186:	e746      	b.n	800b016 <_dtoa_r+0x85e>
 800b188:	2a00      	cmp	r2, #0
 800b18a:	dd03      	ble.n	800b194 <_dtoa_r+0x9dc>
 800b18c:	2b39      	cmp	r3, #57	; 0x39
 800b18e:	d0ee      	beq.n	800b16e <_dtoa_r+0x9b6>
 800b190:	3301      	adds	r3, #1
 800b192:	e7c7      	b.n	800b124 <_dtoa_r+0x96c>
 800b194:	9a04      	ldr	r2, [sp, #16]
 800b196:	9908      	ldr	r1, [sp, #32]
 800b198:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b19c:	428a      	cmp	r2, r1
 800b19e:	d02b      	beq.n	800b1f8 <_dtoa_r+0xa40>
 800b1a0:	4629      	mov	r1, r5
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	220a      	movs	r2, #10
 800b1a6:	4630      	mov	r0, r6
 800b1a8:	f000 f9d4 	bl	800b554 <__multadd>
 800b1ac:	45b9      	cmp	r9, r7
 800b1ae:	4605      	mov	r5, r0
 800b1b0:	f04f 0300 	mov.w	r3, #0
 800b1b4:	f04f 020a 	mov.w	r2, #10
 800b1b8:	4649      	mov	r1, r9
 800b1ba:	4630      	mov	r0, r6
 800b1bc:	d107      	bne.n	800b1ce <_dtoa_r+0xa16>
 800b1be:	f000 f9c9 	bl	800b554 <__multadd>
 800b1c2:	4681      	mov	r9, r0
 800b1c4:	4607      	mov	r7, r0
 800b1c6:	9b04      	ldr	r3, [sp, #16]
 800b1c8:	3301      	adds	r3, #1
 800b1ca:	9304      	str	r3, [sp, #16]
 800b1cc:	e774      	b.n	800b0b8 <_dtoa_r+0x900>
 800b1ce:	f000 f9c1 	bl	800b554 <__multadd>
 800b1d2:	4639      	mov	r1, r7
 800b1d4:	4681      	mov	r9, r0
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	220a      	movs	r2, #10
 800b1da:	4630      	mov	r0, r6
 800b1dc:	f000 f9ba 	bl	800b554 <__multadd>
 800b1e0:	4607      	mov	r7, r0
 800b1e2:	e7f0      	b.n	800b1c6 <_dtoa_r+0xa0e>
 800b1e4:	f1ba 0f00 	cmp.w	sl, #0
 800b1e8:	9a01      	ldr	r2, [sp, #4]
 800b1ea:	bfcc      	ite	gt
 800b1ec:	46d0      	movgt	r8, sl
 800b1ee:	f04f 0801 	movle.w	r8, #1
 800b1f2:	4490      	add	r8, r2
 800b1f4:	f04f 0900 	mov.w	r9, #0
 800b1f8:	4629      	mov	r1, r5
 800b1fa:	2201      	movs	r2, #1
 800b1fc:	4630      	mov	r0, r6
 800b1fe:	9302      	str	r3, [sp, #8]
 800b200:	f000 fba0 	bl	800b944 <__lshift>
 800b204:	4621      	mov	r1, r4
 800b206:	4605      	mov	r5, r0
 800b208:	f000 fc08 	bl	800ba1c <__mcmp>
 800b20c:	2800      	cmp	r0, #0
 800b20e:	dcb1      	bgt.n	800b174 <_dtoa_r+0x9bc>
 800b210:	d102      	bne.n	800b218 <_dtoa_r+0xa60>
 800b212:	9b02      	ldr	r3, [sp, #8]
 800b214:	07db      	lsls	r3, r3, #31
 800b216:	d4ad      	bmi.n	800b174 <_dtoa_r+0x9bc>
 800b218:	4643      	mov	r3, r8
 800b21a:	4698      	mov	r8, r3
 800b21c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b220:	2a30      	cmp	r2, #48	; 0x30
 800b222:	d0fa      	beq.n	800b21a <_dtoa_r+0xa62>
 800b224:	e6f7      	b.n	800b016 <_dtoa_r+0x85e>
 800b226:	9a01      	ldr	r2, [sp, #4]
 800b228:	429a      	cmp	r2, r3
 800b22a:	d1a4      	bne.n	800b176 <_dtoa_r+0x9be>
 800b22c:	f10b 0b01 	add.w	fp, fp, #1
 800b230:	2331      	movs	r3, #49	; 0x31
 800b232:	e778      	b.n	800b126 <_dtoa_r+0x96e>
 800b234:	4b14      	ldr	r3, [pc, #80]	; (800b288 <_dtoa_r+0xad0>)
 800b236:	f7ff bb2a 	b.w	800a88e <_dtoa_r+0xd6>
 800b23a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	f47f ab05 	bne.w	800a84c <_dtoa_r+0x94>
 800b242:	4b12      	ldr	r3, [pc, #72]	; (800b28c <_dtoa_r+0xad4>)
 800b244:	f7ff bb23 	b.w	800a88e <_dtoa_r+0xd6>
 800b248:	f1ba 0f00 	cmp.w	sl, #0
 800b24c:	dc03      	bgt.n	800b256 <_dtoa_r+0xa9e>
 800b24e:	9b06      	ldr	r3, [sp, #24]
 800b250:	2b02      	cmp	r3, #2
 800b252:	f73f aec8 	bgt.w	800afe6 <_dtoa_r+0x82e>
 800b256:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b25a:	4621      	mov	r1, r4
 800b25c:	4628      	mov	r0, r5
 800b25e:	f7ff fa21 	bl	800a6a4 <quorem>
 800b262:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b266:	f808 3b01 	strb.w	r3, [r8], #1
 800b26a:	9a01      	ldr	r2, [sp, #4]
 800b26c:	eba8 0202 	sub.w	r2, r8, r2
 800b270:	4592      	cmp	sl, r2
 800b272:	ddb7      	ble.n	800b1e4 <_dtoa_r+0xa2c>
 800b274:	4629      	mov	r1, r5
 800b276:	2300      	movs	r3, #0
 800b278:	220a      	movs	r2, #10
 800b27a:	4630      	mov	r0, r6
 800b27c:	f000 f96a 	bl	800b554 <__multadd>
 800b280:	4605      	mov	r5, r0
 800b282:	e7ea      	b.n	800b25a <_dtoa_r+0xaa2>
 800b284:	0800dd99 	.word	0x0800dd99
 800b288:	0800dcf4 	.word	0x0800dcf4
 800b28c:	0800dd1d 	.word	0x0800dd1d

0800b290 <_free_r>:
 800b290:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b292:	2900      	cmp	r1, #0
 800b294:	d044      	beq.n	800b320 <_free_r+0x90>
 800b296:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b29a:	9001      	str	r0, [sp, #4]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	f1a1 0404 	sub.w	r4, r1, #4
 800b2a2:	bfb8      	it	lt
 800b2a4:	18e4      	addlt	r4, r4, r3
 800b2a6:	f000 f8e7 	bl	800b478 <__malloc_lock>
 800b2aa:	4a1e      	ldr	r2, [pc, #120]	; (800b324 <_free_r+0x94>)
 800b2ac:	9801      	ldr	r0, [sp, #4]
 800b2ae:	6813      	ldr	r3, [r2, #0]
 800b2b0:	b933      	cbnz	r3, 800b2c0 <_free_r+0x30>
 800b2b2:	6063      	str	r3, [r4, #4]
 800b2b4:	6014      	str	r4, [r2, #0]
 800b2b6:	b003      	add	sp, #12
 800b2b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b2bc:	f000 b8e2 	b.w	800b484 <__malloc_unlock>
 800b2c0:	42a3      	cmp	r3, r4
 800b2c2:	d908      	bls.n	800b2d6 <_free_r+0x46>
 800b2c4:	6825      	ldr	r5, [r4, #0]
 800b2c6:	1961      	adds	r1, r4, r5
 800b2c8:	428b      	cmp	r3, r1
 800b2ca:	bf01      	itttt	eq
 800b2cc:	6819      	ldreq	r1, [r3, #0]
 800b2ce:	685b      	ldreq	r3, [r3, #4]
 800b2d0:	1949      	addeq	r1, r1, r5
 800b2d2:	6021      	streq	r1, [r4, #0]
 800b2d4:	e7ed      	b.n	800b2b2 <_free_r+0x22>
 800b2d6:	461a      	mov	r2, r3
 800b2d8:	685b      	ldr	r3, [r3, #4]
 800b2da:	b10b      	cbz	r3, 800b2e0 <_free_r+0x50>
 800b2dc:	42a3      	cmp	r3, r4
 800b2de:	d9fa      	bls.n	800b2d6 <_free_r+0x46>
 800b2e0:	6811      	ldr	r1, [r2, #0]
 800b2e2:	1855      	adds	r5, r2, r1
 800b2e4:	42a5      	cmp	r5, r4
 800b2e6:	d10b      	bne.n	800b300 <_free_r+0x70>
 800b2e8:	6824      	ldr	r4, [r4, #0]
 800b2ea:	4421      	add	r1, r4
 800b2ec:	1854      	adds	r4, r2, r1
 800b2ee:	42a3      	cmp	r3, r4
 800b2f0:	6011      	str	r1, [r2, #0]
 800b2f2:	d1e0      	bne.n	800b2b6 <_free_r+0x26>
 800b2f4:	681c      	ldr	r4, [r3, #0]
 800b2f6:	685b      	ldr	r3, [r3, #4]
 800b2f8:	6053      	str	r3, [r2, #4]
 800b2fa:	440c      	add	r4, r1
 800b2fc:	6014      	str	r4, [r2, #0]
 800b2fe:	e7da      	b.n	800b2b6 <_free_r+0x26>
 800b300:	d902      	bls.n	800b308 <_free_r+0x78>
 800b302:	230c      	movs	r3, #12
 800b304:	6003      	str	r3, [r0, #0]
 800b306:	e7d6      	b.n	800b2b6 <_free_r+0x26>
 800b308:	6825      	ldr	r5, [r4, #0]
 800b30a:	1961      	adds	r1, r4, r5
 800b30c:	428b      	cmp	r3, r1
 800b30e:	bf04      	itt	eq
 800b310:	6819      	ldreq	r1, [r3, #0]
 800b312:	685b      	ldreq	r3, [r3, #4]
 800b314:	6063      	str	r3, [r4, #4]
 800b316:	bf04      	itt	eq
 800b318:	1949      	addeq	r1, r1, r5
 800b31a:	6021      	streq	r1, [r4, #0]
 800b31c:	6054      	str	r4, [r2, #4]
 800b31e:	e7ca      	b.n	800b2b6 <_free_r+0x26>
 800b320:	b003      	add	sp, #12
 800b322:	bd30      	pop	{r4, r5, pc}
 800b324:	24000be4 	.word	0x24000be4

0800b328 <malloc>:
 800b328:	4b02      	ldr	r3, [pc, #8]	; (800b334 <malloc+0xc>)
 800b32a:	4601      	mov	r1, r0
 800b32c:	6818      	ldr	r0, [r3, #0]
 800b32e:	f000 b823 	b.w	800b378 <_malloc_r>
 800b332:	bf00      	nop
 800b334:	24000068 	.word	0x24000068

0800b338 <sbrk_aligned>:
 800b338:	b570      	push	{r4, r5, r6, lr}
 800b33a:	4e0e      	ldr	r6, [pc, #56]	; (800b374 <sbrk_aligned+0x3c>)
 800b33c:	460c      	mov	r4, r1
 800b33e:	6831      	ldr	r1, [r6, #0]
 800b340:	4605      	mov	r5, r0
 800b342:	b911      	cbnz	r1, 800b34a <sbrk_aligned+0x12>
 800b344:	f001 fdd6 	bl	800cef4 <_sbrk_r>
 800b348:	6030      	str	r0, [r6, #0]
 800b34a:	4621      	mov	r1, r4
 800b34c:	4628      	mov	r0, r5
 800b34e:	f001 fdd1 	bl	800cef4 <_sbrk_r>
 800b352:	1c43      	adds	r3, r0, #1
 800b354:	d00a      	beq.n	800b36c <sbrk_aligned+0x34>
 800b356:	1cc4      	adds	r4, r0, #3
 800b358:	f024 0403 	bic.w	r4, r4, #3
 800b35c:	42a0      	cmp	r0, r4
 800b35e:	d007      	beq.n	800b370 <sbrk_aligned+0x38>
 800b360:	1a21      	subs	r1, r4, r0
 800b362:	4628      	mov	r0, r5
 800b364:	f001 fdc6 	bl	800cef4 <_sbrk_r>
 800b368:	3001      	adds	r0, #1
 800b36a:	d101      	bne.n	800b370 <sbrk_aligned+0x38>
 800b36c:	f04f 34ff 	mov.w	r4, #4294967295
 800b370:	4620      	mov	r0, r4
 800b372:	bd70      	pop	{r4, r5, r6, pc}
 800b374:	24000be8 	.word	0x24000be8

0800b378 <_malloc_r>:
 800b378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b37c:	1ccd      	adds	r5, r1, #3
 800b37e:	f025 0503 	bic.w	r5, r5, #3
 800b382:	3508      	adds	r5, #8
 800b384:	2d0c      	cmp	r5, #12
 800b386:	bf38      	it	cc
 800b388:	250c      	movcc	r5, #12
 800b38a:	2d00      	cmp	r5, #0
 800b38c:	4607      	mov	r7, r0
 800b38e:	db01      	blt.n	800b394 <_malloc_r+0x1c>
 800b390:	42a9      	cmp	r1, r5
 800b392:	d905      	bls.n	800b3a0 <_malloc_r+0x28>
 800b394:	230c      	movs	r3, #12
 800b396:	603b      	str	r3, [r7, #0]
 800b398:	2600      	movs	r6, #0
 800b39a:	4630      	mov	r0, r6
 800b39c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3a0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b474 <_malloc_r+0xfc>
 800b3a4:	f000 f868 	bl	800b478 <__malloc_lock>
 800b3a8:	f8d8 3000 	ldr.w	r3, [r8]
 800b3ac:	461c      	mov	r4, r3
 800b3ae:	bb5c      	cbnz	r4, 800b408 <_malloc_r+0x90>
 800b3b0:	4629      	mov	r1, r5
 800b3b2:	4638      	mov	r0, r7
 800b3b4:	f7ff ffc0 	bl	800b338 <sbrk_aligned>
 800b3b8:	1c43      	adds	r3, r0, #1
 800b3ba:	4604      	mov	r4, r0
 800b3bc:	d155      	bne.n	800b46a <_malloc_r+0xf2>
 800b3be:	f8d8 4000 	ldr.w	r4, [r8]
 800b3c2:	4626      	mov	r6, r4
 800b3c4:	2e00      	cmp	r6, #0
 800b3c6:	d145      	bne.n	800b454 <_malloc_r+0xdc>
 800b3c8:	2c00      	cmp	r4, #0
 800b3ca:	d048      	beq.n	800b45e <_malloc_r+0xe6>
 800b3cc:	6823      	ldr	r3, [r4, #0]
 800b3ce:	4631      	mov	r1, r6
 800b3d0:	4638      	mov	r0, r7
 800b3d2:	eb04 0903 	add.w	r9, r4, r3
 800b3d6:	f001 fd8d 	bl	800cef4 <_sbrk_r>
 800b3da:	4581      	cmp	r9, r0
 800b3dc:	d13f      	bne.n	800b45e <_malloc_r+0xe6>
 800b3de:	6821      	ldr	r1, [r4, #0]
 800b3e0:	1a6d      	subs	r5, r5, r1
 800b3e2:	4629      	mov	r1, r5
 800b3e4:	4638      	mov	r0, r7
 800b3e6:	f7ff ffa7 	bl	800b338 <sbrk_aligned>
 800b3ea:	3001      	adds	r0, #1
 800b3ec:	d037      	beq.n	800b45e <_malloc_r+0xe6>
 800b3ee:	6823      	ldr	r3, [r4, #0]
 800b3f0:	442b      	add	r3, r5
 800b3f2:	6023      	str	r3, [r4, #0]
 800b3f4:	f8d8 3000 	ldr.w	r3, [r8]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d038      	beq.n	800b46e <_malloc_r+0xf6>
 800b3fc:	685a      	ldr	r2, [r3, #4]
 800b3fe:	42a2      	cmp	r2, r4
 800b400:	d12b      	bne.n	800b45a <_malloc_r+0xe2>
 800b402:	2200      	movs	r2, #0
 800b404:	605a      	str	r2, [r3, #4]
 800b406:	e00f      	b.n	800b428 <_malloc_r+0xb0>
 800b408:	6822      	ldr	r2, [r4, #0]
 800b40a:	1b52      	subs	r2, r2, r5
 800b40c:	d41f      	bmi.n	800b44e <_malloc_r+0xd6>
 800b40e:	2a0b      	cmp	r2, #11
 800b410:	d917      	bls.n	800b442 <_malloc_r+0xca>
 800b412:	1961      	adds	r1, r4, r5
 800b414:	42a3      	cmp	r3, r4
 800b416:	6025      	str	r5, [r4, #0]
 800b418:	bf18      	it	ne
 800b41a:	6059      	strne	r1, [r3, #4]
 800b41c:	6863      	ldr	r3, [r4, #4]
 800b41e:	bf08      	it	eq
 800b420:	f8c8 1000 	streq.w	r1, [r8]
 800b424:	5162      	str	r2, [r4, r5]
 800b426:	604b      	str	r3, [r1, #4]
 800b428:	4638      	mov	r0, r7
 800b42a:	f104 060b 	add.w	r6, r4, #11
 800b42e:	f000 f829 	bl	800b484 <__malloc_unlock>
 800b432:	f026 0607 	bic.w	r6, r6, #7
 800b436:	1d23      	adds	r3, r4, #4
 800b438:	1af2      	subs	r2, r6, r3
 800b43a:	d0ae      	beq.n	800b39a <_malloc_r+0x22>
 800b43c:	1b9b      	subs	r3, r3, r6
 800b43e:	50a3      	str	r3, [r4, r2]
 800b440:	e7ab      	b.n	800b39a <_malloc_r+0x22>
 800b442:	42a3      	cmp	r3, r4
 800b444:	6862      	ldr	r2, [r4, #4]
 800b446:	d1dd      	bne.n	800b404 <_malloc_r+0x8c>
 800b448:	f8c8 2000 	str.w	r2, [r8]
 800b44c:	e7ec      	b.n	800b428 <_malloc_r+0xb0>
 800b44e:	4623      	mov	r3, r4
 800b450:	6864      	ldr	r4, [r4, #4]
 800b452:	e7ac      	b.n	800b3ae <_malloc_r+0x36>
 800b454:	4634      	mov	r4, r6
 800b456:	6876      	ldr	r6, [r6, #4]
 800b458:	e7b4      	b.n	800b3c4 <_malloc_r+0x4c>
 800b45a:	4613      	mov	r3, r2
 800b45c:	e7cc      	b.n	800b3f8 <_malloc_r+0x80>
 800b45e:	230c      	movs	r3, #12
 800b460:	603b      	str	r3, [r7, #0]
 800b462:	4638      	mov	r0, r7
 800b464:	f000 f80e 	bl	800b484 <__malloc_unlock>
 800b468:	e797      	b.n	800b39a <_malloc_r+0x22>
 800b46a:	6025      	str	r5, [r4, #0]
 800b46c:	e7dc      	b.n	800b428 <_malloc_r+0xb0>
 800b46e:	605b      	str	r3, [r3, #4]
 800b470:	deff      	udf	#255	; 0xff
 800b472:	bf00      	nop
 800b474:	24000be4 	.word	0x24000be4

0800b478 <__malloc_lock>:
 800b478:	4801      	ldr	r0, [pc, #4]	; (800b480 <__malloc_lock+0x8>)
 800b47a:	f7ff b90b 	b.w	800a694 <__retarget_lock_acquire_recursive>
 800b47e:	bf00      	nop
 800b480:	24000be0 	.word	0x24000be0

0800b484 <__malloc_unlock>:
 800b484:	4801      	ldr	r0, [pc, #4]	; (800b48c <__malloc_unlock+0x8>)
 800b486:	f7ff b906 	b.w	800a696 <__retarget_lock_release_recursive>
 800b48a:	bf00      	nop
 800b48c:	24000be0 	.word	0x24000be0

0800b490 <_Balloc>:
 800b490:	b570      	push	{r4, r5, r6, lr}
 800b492:	69c6      	ldr	r6, [r0, #28]
 800b494:	4604      	mov	r4, r0
 800b496:	460d      	mov	r5, r1
 800b498:	b976      	cbnz	r6, 800b4b8 <_Balloc+0x28>
 800b49a:	2010      	movs	r0, #16
 800b49c:	f7ff ff44 	bl	800b328 <malloc>
 800b4a0:	4602      	mov	r2, r0
 800b4a2:	61e0      	str	r0, [r4, #28]
 800b4a4:	b920      	cbnz	r0, 800b4b0 <_Balloc+0x20>
 800b4a6:	4b18      	ldr	r3, [pc, #96]	; (800b508 <_Balloc+0x78>)
 800b4a8:	4818      	ldr	r0, [pc, #96]	; (800b50c <_Balloc+0x7c>)
 800b4aa:	216b      	movs	r1, #107	; 0x6b
 800b4ac:	f001 fd48 	bl	800cf40 <__assert_func>
 800b4b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b4b4:	6006      	str	r6, [r0, #0]
 800b4b6:	60c6      	str	r6, [r0, #12]
 800b4b8:	69e6      	ldr	r6, [r4, #28]
 800b4ba:	68f3      	ldr	r3, [r6, #12]
 800b4bc:	b183      	cbz	r3, 800b4e0 <_Balloc+0x50>
 800b4be:	69e3      	ldr	r3, [r4, #28]
 800b4c0:	68db      	ldr	r3, [r3, #12]
 800b4c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b4c6:	b9b8      	cbnz	r0, 800b4f8 <_Balloc+0x68>
 800b4c8:	2101      	movs	r1, #1
 800b4ca:	fa01 f605 	lsl.w	r6, r1, r5
 800b4ce:	1d72      	adds	r2, r6, #5
 800b4d0:	0092      	lsls	r2, r2, #2
 800b4d2:	4620      	mov	r0, r4
 800b4d4:	f001 fd52 	bl	800cf7c <_calloc_r>
 800b4d8:	b160      	cbz	r0, 800b4f4 <_Balloc+0x64>
 800b4da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b4de:	e00e      	b.n	800b4fe <_Balloc+0x6e>
 800b4e0:	2221      	movs	r2, #33	; 0x21
 800b4e2:	2104      	movs	r1, #4
 800b4e4:	4620      	mov	r0, r4
 800b4e6:	f001 fd49 	bl	800cf7c <_calloc_r>
 800b4ea:	69e3      	ldr	r3, [r4, #28]
 800b4ec:	60f0      	str	r0, [r6, #12]
 800b4ee:	68db      	ldr	r3, [r3, #12]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d1e4      	bne.n	800b4be <_Balloc+0x2e>
 800b4f4:	2000      	movs	r0, #0
 800b4f6:	bd70      	pop	{r4, r5, r6, pc}
 800b4f8:	6802      	ldr	r2, [r0, #0]
 800b4fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b4fe:	2300      	movs	r3, #0
 800b500:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b504:	e7f7      	b.n	800b4f6 <_Balloc+0x66>
 800b506:	bf00      	nop
 800b508:	0800dd2a 	.word	0x0800dd2a
 800b50c:	0800ddaa 	.word	0x0800ddaa

0800b510 <_Bfree>:
 800b510:	b570      	push	{r4, r5, r6, lr}
 800b512:	69c6      	ldr	r6, [r0, #28]
 800b514:	4605      	mov	r5, r0
 800b516:	460c      	mov	r4, r1
 800b518:	b976      	cbnz	r6, 800b538 <_Bfree+0x28>
 800b51a:	2010      	movs	r0, #16
 800b51c:	f7ff ff04 	bl	800b328 <malloc>
 800b520:	4602      	mov	r2, r0
 800b522:	61e8      	str	r0, [r5, #28]
 800b524:	b920      	cbnz	r0, 800b530 <_Bfree+0x20>
 800b526:	4b09      	ldr	r3, [pc, #36]	; (800b54c <_Bfree+0x3c>)
 800b528:	4809      	ldr	r0, [pc, #36]	; (800b550 <_Bfree+0x40>)
 800b52a:	218f      	movs	r1, #143	; 0x8f
 800b52c:	f001 fd08 	bl	800cf40 <__assert_func>
 800b530:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b534:	6006      	str	r6, [r0, #0]
 800b536:	60c6      	str	r6, [r0, #12]
 800b538:	b13c      	cbz	r4, 800b54a <_Bfree+0x3a>
 800b53a:	69eb      	ldr	r3, [r5, #28]
 800b53c:	6862      	ldr	r2, [r4, #4]
 800b53e:	68db      	ldr	r3, [r3, #12]
 800b540:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b544:	6021      	str	r1, [r4, #0]
 800b546:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b54a:	bd70      	pop	{r4, r5, r6, pc}
 800b54c:	0800dd2a 	.word	0x0800dd2a
 800b550:	0800ddaa 	.word	0x0800ddaa

0800b554 <__multadd>:
 800b554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b558:	690d      	ldr	r5, [r1, #16]
 800b55a:	4607      	mov	r7, r0
 800b55c:	460c      	mov	r4, r1
 800b55e:	461e      	mov	r6, r3
 800b560:	f101 0c14 	add.w	ip, r1, #20
 800b564:	2000      	movs	r0, #0
 800b566:	f8dc 3000 	ldr.w	r3, [ip]
 800b56a:	b299      	uxth	r1, r3
 800b56c:	fb02 6101 	mla	r1, r2, r1, r6
 800b570:	0c1e      	lsrs	r6, r3, #16
 800b572:	0c0b      	lsrs	r3, r1, #16
 800b574:	fb02 3306 	mla	r3, r2, r6, r3
 800b578:	b289      	uxth	r1, r1
 800b57a:	3001      	adds	r0, #1
 800b57c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b580:	4285      	cmp	r5, r0
 800b582:	f84c 1b04 	str.w	r1, [ip], #4
 800b586:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b58a:	dcec      	bgt.n	800b566 <__multadd+0x12>
 800b58c:	b30e      	cbz	r6, 800b5d2 <__multadd+0x7e>
 800b58e:	68a3      	ldr	r3, [r4, #8]
 800b590:	42ab      	cmp	r3, r5
 800b592:	dc19      	bgt.n	800b5c8 <__multadd+0x74>
 800b594:	6861      	ldr	r1, [r4, #4]
 800b596:	4638      	mov	r0, r7
 800b598:	3101      	adds	r1, #1
 800b59a:	f7ff ff79 	bl	800b490 <_Balloc>
 800b59e:	4680      	mov	r8, r0
 800b5a0:	b928      	cbnz	r0, 800b5ae <__multadd+0x5a>
 800b5a2:	4602      	mov	r2, r0
 800b5a4:	4b0c      	ldr	r3, [pc, #48]	; (800b5d8 <__multadd+0x84>)
 800b5a6:	480d      	ldr	r0, [pc, #52]	; (800b5dc <__multadd+0x88>)
 800b5a8:	21ba      	movs	r1, #186	; 0xba
 800b5aa:	f001 fcc9 	bl	800cf40 <__assert_func>
 800b5ae:	6922      	ldr	r2, [r4, #16]
 800b5b0:	3202      	adds	r2, #2
 800b5b2:	f104 010c 	add.w	r1, r4, #12
 800b5b6:	0092      	lsls	r2, r2, #2
 800b5b8:	300c      	adds	r0, #12
 800b5ba:	f001 fcab 	bl	800cf14 <memcpy>
 800b5be:	4621      	mov	r1, r4
 800b5c0:	4638      	mov	r0, r7
 800b5c2:	f7ff ffa5 	bl	800b510 <_Bfree>
 800b5c6:	4644      	mov	r4, r8
 800b5c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b5cc:	3501      	adds	r5, #1
 800b5ce:	615e      	str	r6, [r3, #20]
 800b5d0:	6125      	str	r5, [r4, #16]
 800b5d2:	4620      	mov	r0, r4
 800b5d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5d8:	0800dd99 	.word	0x0800dd99
 800b5dc:	0800ddaa 	.word	0x0800ddaa

0800b5e0 <__s2b>:
 800b5e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5e4:	460c      	mov	r4, r1
 800b5e6:	4615      	mov	r5, r2
 800b5e8:	461f      	mov	r7, r3
 800b5ea:	2209      	movs	r2, #9
 800b5ec:	3308      	adds	r3, #8
 800b5ee:	4606      	mov	r6, r0
 800b5f0:	fb93 f3f2 	sdiv	r3, r3, r2
 800b5f4:	2100      	movs	r1, #0
 800b5f6:	2201      	movs	r2, #1
 800b5f8:	429a      	cmp	r2, r3
 800b5fa:	db09      	blt.n	800b610 <__s2b+0x30>
 800b5fc:	4630      	mov	r0, r6
 800b5fe:	f7ff ff47 	bl	800b490 <_Balloc>
 800b602:	b940      	cbnz	r0, 800b616 <__s2b+0x36>
 800b604:	4602      	mov	r2, r0
 800b606:	4b19      	ldr	r3, [pc, #100]	; (800b66c <__s2b+0x8c>)
 800b608:	4819      	ldr	r0, [pc, #100]	; (800b670 <__s2b+0x90>)
 800b60a:	21d3      	movs	r1, #211	; 0xd3
 800b60c:	f001 fc98 	bl	800cf40 <__assert_func>
 800b610:	0052      	lsls	r2, r2, #1
 800b612:	3101      	adds	r1, #1
 800b614:	e7f0      	b.n	800b5f8 <__s2b+0x18>
 800b616:	9b08      	ldr	r3, [sp, #32]
 800b618:	6143      	str	r3, [r0, #20]
 800b61a:	2d09      	cmp	r5, #9
 800b61c:	f04f 0301 	mov.w	r3, #1
 800b620:	6103      	str	r3, [r0, #16]
 800b622:	dd16      	ble.n	800b652 <__s2b+0x72>
 800b624:	f104 0909 	add.w	r9, r4, #9
 800b628:	46c8      	mov	r8, r9
 800b62a:	442c      	add	r4, r5
 800b62c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b630:	4601      	mov	r1, r0
 800b632:	3b30      	subs	r3, #48	; 0x30
 800b634:	220a      	movs	r2, #10
 800b636:	4630      	mov	r0, r6
 800b638:	f7ff ff8c 	bl	800b554 <__multadd>
 800b63c:	45a0      	cmp	r8, r4
 800b63e:	d1f5      	bne.n	800b62c <__s2b+0x4c>
 800b640:	f1a5 0408 	sub.w	r4, r5, #8
 800b644:	444c      	add	r4, r9
 800b646:	1b2d      	subs	r5, r5, r4
 800b648:	1963      	adds	r3, r4, r5
 800b64a:	42bb      	cmp	r3, r7
 800b64c:	db04      	blt.n	800b658 <__s2b+0x78>
 800b64e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b652:	340a      	adds	r4, #10
 800b654:	2509      	movs	r5, #9
 800b656:	e7f6      	b.n	800b646 <__s2b+0x66>
 800b658:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b65c:	4601      	mov	r1, r0
 800b65e:	3b30      	subs	r3, #48	; 0x30
 800b660:	220a      	movs	r2, #10
 800b662:	4630      	mov	r0, r6
 800b664:	f7ff ff76 	bl	800b554 <__multadd>
 800b668:	e7ee      	b.n	800b648 <__s2b+0x68>
 800b66a:	bf00      	nop
 800b66c:	0800dd99 	.word	0x0800dd99
 800b670:	0800ddaa 	.word	0x0800ddaa

0800b674 <__hi0bits>:
 800b674:	0c03      	lsrs	r3, r0, #16
 800b676:	041b      	lsls	r3, r3, #16
 800b678:	b9d3      	cbnz	r3, 800b6b0 <__hi0bits+0x3c>
 800b67a:	0400      	lsls	r0, r0, #16
 800b67c:	2310      	movs	r3, #16
 800b67e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b682:	bf04      	itt	eq
 800b684:	0200      	lsleq	r0, r0, #8
 800b686:	3308      	addeq	r3, #8
 800b688:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b68c:	bf04      	itt	eq
 800b68e:	0100      	lsleq	r0, r0, #4
 800b690:	3304      	addeq	r3, #4
 800b692:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b696:	bf04      	itt	eq
 800b698:	0080      	lsleq	r0, r0, #2
 800b69a:	3302      	addeq	r3, #2
 800b69c:	2800      	cmp	r0, #0
 800b69e:	db05      	blt.n	800b6ac <__hi0bits+0x38>
 800b6a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b6a4:	f103 0301 	add.w	r3, r3, #1
 800b6a8:	bf08      	it	eq
 800b6aa:	2320      	moveq	r3, #32
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	4770      	bx	lr
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	e7e4      	b.n	800b67e <__hi0bits+0xa>

0800b6b4 <__lo0bits>:
 800b6b4:	6803      	ldr	r3, [r0, #0]
 800b6b6:	f013 0207 	ands.w	r2, r3, #7
 800b6ba:	d00c      	beq.n	800b6d6 <__lo0bits+0x22>
 800b6bc:	07d9      	lsls	r1, r3, #31
 800b6be:	d422      	bmi.n	800b706 <__lo0bits+0x52>
 800b6c0:	079a      	lsls	r2, r3, #30
 800b6c2:	bf49      	itett	mi
 800b6c4:	085b      	lsrmi	r3, r3, #1
 800b6c6:	089b      	lsrpl	r3, r3, #2
 800b6c8:	6003      	strmi	r3, [r0, #0]
 800b6ca:	2201      	movmi	r2, #1
 800b6cc:	bf5c      	itt	pl
 800b6ce:	6003      	strpl	r3, [r0, #0]
 800b6d0:	2202      	movpl	r2, #2
 800b6d2:	4610      	mov	r0, r2
 800b6d4:	4770      	bx	lr
 800b6d6:	b299      	uxth	r1, r3
 800b6d8:	b909      	cbnz	r1, 800b6de <__lo0bits+0x2a>
 800b6da:	0c1b      	lsrs	r3, r3, #16
 800b6dc:	2210      	movs	r2, #16
 800b6de:	b2d9      	uxtb	r1, r3
 800b6e0:	b909      	cbnz	r1, 800b6e6 <__lo0bits+0x32>
 800b6e2:	3208      	adds	r2, #8
 800b6e4:	0a1b      	lsrs	r3, r3, #8
 800b6e6:	0719      	lsls	r1, r3, #28
 800b6e8:	bf04      	itt	eq
 800b6ea:	091b      	lsreq	r3, r3, #4
 800b6ec:	3204      	addeq	r2, #4
 800b6ee:	0799      	lsls	r1, r3, #30
 800b6f0:	bf04      	itt	eq
 800b6f2:	089b      	lsreq	r3, r3, #2
 800b6f4:	3202      	addeq	r2, #2
 800b6f6:	07d9      	lsls	r1, r3, #31
 800b6f8:	d403      	bmi.n	800b702 <__lo0bits+0x4e>
 800b6fa:	085b      	lsrs	r3, r3, #1
 800b6fc:	f102 0201 	add.w	r2, r2, #1
 800b700:	d003      	beq.n	800b70a <__lo0bits+0x56>
 800b702:	6003      	str	r3, [r0, #0]
 800b704:	e7e5      	b.n	800b6d2 <__lo0bits+0x1e>
 800b706:	2200      	movs	r2, #0
 800b708:	e7e3      	b.n	800b6d2 <__lo0bits+0x1e>
 800b70a:	2220      	movs	r2, #32
 800b70c:	e7e1      	b.n	800b6d2 <__lo0bits+0x1e>
	...

0800b710 <__i2b>:
 800b710:	b510      	push	{r4, lr}
 800b712:	460c      	mov	r4, r1
 800b714:	2101      	movs	r1, #1
 800b716:	f7ff febb 	bl	800b490 <_Balloc>
 800b71a:	4602      	mov	r2, r0
 800b71c:	b928      	cbnz	r0, 800b72a <__i2b+0x1a>
 800b71e:	4b05      	ldr	r3, [pc, #20]	; (800b734 <__i2b+0x24>)
 800b720:	4805      	ldr	r0, [pc, #20]	; (800b738 <__i2b+0x28>)
 800b722:	f240 1145 	movw	r1, #325	; 0x145
 800b726:	f001 fc0b 	bl	800cf40 <__assert_func>
 800b72a:	2301      	movs	r3, #1
 800b72c:	6144      	str	r4, [r0, #20]
 800b72e:	6103      	str	r3, [r0, #16]
 800b730:	bd10      	pop	{r4, pc}
 800b732:	bf00      	nop
 800b734:	0800dd99 	.word	0x0800dd99
 800b738:	0800ddaa 	.word	0x0800ddaa

0800b73c <__multiply>:
 800b73c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b740:	4691      	mov	r9, r2
 800b742:	690a      	ldr	r2, [r1, #16]
 800b744:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b748:	429a      	cmp	r2, r3
 800b74a:	bfb8      	it	lt
 800b74c:	460b      	movlt	r3, r1
 800b74e:	460c      	mov	r4, r1
 800b750:	bfbc      	itt	lt
 800b752:	464c      	movlt	r4, r9
 800b754:	4699      	movlt	r9, r3
 800b756:	6927      	ldr	r7, [r4, #16]
 800b758:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b75c:	68a3      	ldr	r3, [r4, #8]
 800b75e:	6861      	ldr	r1, [r4, #4]
 800b760:	eb07 060a 	add.w	r6, r7, sl
 800b764:	42b3      	cmp	r3, r6
 800b766:	b085      	sub	sp, #20
 800b768:	bfb8      	it	lt
 800b76a:	3101      	addlt	r1, #1
 800b76c:	f7ff fe90 	bl	800b490 <_Balloc>
 800b770:	b930      	cbnz	r0, 800b780 <__multiply+0x44>
 800b772:	4602      	mov	r2, r0
 800b774:	4b44      	ldr	r3, [pc, #272]	; (800b888 <__multiply+0x14c>)
 800b776:	4845      	ldr	r0, [pc, #276]	; (800b88c <__multiply+0x150>)
 800b778:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b77c:	f001 fbe0 	bl	800cf40 <__assert_func>
 800b780:	f100 0514 	add.w	r5, r0, #20
 800b784:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b788:	462b      	mov	r3, r5
 800b78a:	2200      	movs	r2, #0
 800b78c:	4543      	cmp	r3, r8
 800b78e:	d321      	bcc.n	800b7d4 <__multiply+0x98>
 800b790:	f104 0314 	add.w	r3, r4, #20
 800b794:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b798:	f109 0314 	add.w	r3, r9, #20
 800b79c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b7a0:	9202      	str	r2, [sp, #8]
 800b7a2:	1b3a      	subs	r2, r7, r4
 800b7a4:	3a15      	subs	r2, #21
 800b7a6:	f022 0203 	bic.w	r2, r2, #3
 800b7aa:	3204      	adds	r2, #4
 800b7ac:	f104 0115 	add.w	r1, r4, #21
 800b7b0:	428f      	cmp	r7, r1
 800b7b2:	bf38      	it	cc
 800b7b4:	2204      	movcc	r2, #4
 800b7b6:	9201      	str	r2, [sp, #4]
 800b7b8:	9a02      	ldr	r2, [sp, #8]
 800b7ba:	9303      	str	r3, [sp, #12]
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	d80c      	bhi.n	800b7da <__multiply+0x9e>
 800b7c0:	2e00      	cmp	r6, #0
 800b7c2:	dd03      	ble.n	800b7cc <__multiply+0x90>
 800b7c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d05b      	beq.n	800b884 <__multiply+0x148>
 800b7cc:	6106      	str	r6, [r0, #16]
 800b7ce:	b005      	add	sp, #20
 800b7d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7d4:	f843 2b04 	str.w	r2, [r3], #4
 800b7d8:	e7d8      	b.n	800b78c <__multiply+0x50>
 800b7da:	f8b3 a000 	ldrh.w	sl, [r3]
 800b7de:	f1ba 0f00 	cmp.w	sl, #0
 800b7e2:	d024      	beq.n	800b82e <__multiply+0xf2>
 800b7e4:	f104 0e14 	add.w	lr, r4, #20
 800b7e8:	46a9      	mov	r9, r5
 800b7ea:	f04f 0c00 	mov.w	ip, #0
 800b7ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b7f2:	f8d9 1000 	ldr.w	r1, [r9]
 800b7f6:	fa1f fb82 	uxth.w	fp, r2
 800b7fa:	b289      	uxth	r1, r1
 800b7fc:	fb0a 110b 	mla	r1, sl, fp, r1
 800b800:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b804:	f8d9 2000 	ldr.w	r2, [r9]
 800b808:	4461      	add	r1, ip
 800b80a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b80e:	fb0a c20b 	mla	r2, sl, fp, ip
 800b812:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b816:	b289      	uxth	r1, r1
 800b818:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b81c:	4577      	cmp	r7, lr
 800b81e:	f849 1b04 	str.w	r1, [r9], #4
 800b822:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b826:	d8e2      	bhi.n	800b7ee <__multiply+0xb2>
 800b828:	9a01      	ldr	r2, [sp, #4]
 800b82a:	f845 c002 	str.w	ip, [r5, r2]
 800b82e:	9a03      	ldr	r2, [sp, #12]
 800b830:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b834:	3304      	adds	r3, #4
 800b836:	f1b9 0f00 	cmp.w	r9, #0
 800b83a:	d021      	beq.n	800b880 <__multiply+0x144>
 800b83c:	6829      	ldr	r1, [r5, #0]
 800b83e:	f104 0c14 	add.w	ip, r4, #20
 800b842:	46ae      	mov	lr, r5
 800b844:	f04f 0a00 	mov.w	sl, #0
 800b848:	f8bc b000 	ldrh.w	fp, [ip]
 800b84c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b850:	fb09 220b 	mla	r2, r9, fp, r2
 800b854:	4452      	add	r2, sl
 800b856:	b289      	uxth	r1, r1
 800b858:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b85c:	f84e 1b04 	str.w	r1, [lr], #4
 800b860:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b864:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b868:	f8be 1000 	ldrh.w	r1, [lr]
 800b86c:	fb09 110a 	mla	r1, r9, sl, r1
 800b870:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b874:	4567      	cmp	r7, ip
 800b876:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b87a:	d8e5      	bhi.n	800b848 <__multiply+0x10c>
 800b87c:	9a01      	ldr	r2, [sp, #4]
 800b87e:	50a9      	str	r1, [r5, r2]
 800b880:	3504      	adds	r5, #4
 800b882:	e799      	b.n	800b7b8 <__multiply+0x7c>
 800b884:	3e01      	subs	r6, #1
 800b886:	e79b      	b.n	800b7c0 <__multiply+0x84>
 800b888:	0800dd99 	.word	0x0800dd99
 800b88c:	0800ddaa 	.word	0x0800ddaa

0800b890 <__pow5mult>:
 800b890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b894:	4615      	mov	r5, r2
 800b896:	f012 0203 	ands.w	r2, r2, #3
 800b89a:	4606      	mov	r6, r0
 800b89c:	460f      	mov	r7, r1
 800b89e:	d007      	beq.n	800b8b0 <__pow5mult+0x20>
 800b8a0:	4c25      	ldr	r4, [pc, #148]	; (800b938 <__pow5mult+0xa8>)
 800b8a2:	3a01      	subs	r2, #1
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b8aa:	f7ff fe53 	bl	800b554 <__multadd>
 800b8ae:	4607      	mov	r7, r0
 800b8b0:	10ad      	asrs	r5, r5, #2
 800b8b2:	d03d      	beq.n	800b930 <__pow5mult+0xa0>
 800b8b4:	69f4      	ldr	r4, [r6, #28]
 800b8b6:	b97c      	cbnz	r4, 800b8d8 <__pow5mult+0x48>
 800b8b8:	2010      	movs	r0, #16
 800b8ba:	f7ff fd35 	bl	800b328 <malloc>
 800b8be:	4602      	mov	r2, r0
 800b8c0:	61f0      	str	r0, [r6, #28]
 800b8c2:	b928      	cbnz	r0, 800b8d0 <__pow5mult+0x40>
 800b8c4:	4b1d      	ldr	r3, [pc, #116]	; (800b93c <__pow5mult+0xac>)
 800b8c6:	481e      	ldr	r0, [pc, #120]	; (800b940 <__pow5mult+0xb0>)
 800b8c8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b8cc:	f001 fb38 	bl	800cf40 <__assert_func>
 800b8d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b8d4:	6004      	str	r4, [r0, #0]
 800b8d6:	60c4      	str	r4, [r0, #12]
 800b8d8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b8dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b8e0:	b94c      	cbnz	r4, 800b8f6 <__pow5mult+0x66>
 800b8e2:	f240 2171 	movw	r1, #625	; 0x271
 800b8e6:	4630      	mov	r0, r6
 800b8e8:	f7ff ff12 	bl	800b710 <__i2b>
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	f8c8 0008 	str.w	r0, [r8, #8]
 800b8f2:	4604      	mov	r4, r0
 800b8f4:	6003      	str	r3, [r0, #0]
 800b8f6:	f04f 0900 	mov.w	r9, #0
 800b8fa:	07eb      	lsls	r3, r5, #31
 800b8fc:	d50a      	bpl.n	800b914 <__pow5mult+0x84>
 800b8fe:	4639      	mov	r1, r7
 800b900:	4622      	mov	r2, r4
 800b902:	4630      	mov	r0, r6
 800b904:	f7ff ff1a 	bl	800b73c <__multiply>
 800b908:	4639      	mov	r1, r7
 800b90a:	4680      	mov	r8, r0
 800b90c:	4630      	mov	r0, r6
 800b90e:	f7ff fdff 	bl	800b510 <_Bfree>
 800b912:	4647      	mov	r7, r8
 800b914:	106d      	asrs	r5, r5, #1
 800b916:	d00b      	beq.n	800b930 <__pow5mult+0xa0>
 800b918:	6820      	ldr	r0, [r4, #0]
 800b91a:	b938      	cbnz	r0, 800b92c <__pow5mult+0x9c>
 800b91c:	4622      	mov	r2, r4
 800b91e:	4621      	mov	r1, r4
 800b920:	4630      	mov	r0, r6
 800b922:	f7ff ff0b 	bl	800b73c <__multiply>
 800b926:	6020      	str	r0, [r4, #0]
 800b928:	f8c0 9000 	str.w	r9, [r0]
 800b92c:	4604      	mov	r4, r0
 800b92e:	e7e4      	b.n	800b8fa <__pow5mult+0x6a>
 800b930:	4638      	mov	r0, r7
 800b932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b936:	bf00      	nop
 800b938:	0800def8 	.word	0x0800def8
 800b93c:	0800dd2a 	.word	0x0800dd2a
 800b940:	0800ddaa 	.word	0x0800ddaa

0800b944 <__lshift>:
 800b944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b948:	460c      	mov	r4, r1
 800b94a:	6849      	ldr	r1, [r1, #4]
 800b94c:	6923      	ldr	r3, [r4, #16]
 800b94e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b952:	68a3      	ldr	r3, [r4, #8]
 800b954:	4607      	mov	r7, r0
 800b956:	4691      	mov	r9, r2
 800b958:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b95c:	f108 0601 	add.w	r6, r8, #1
 800b960:	42b3      	cmp	r3, r6
 800b962:	db0b      	blt.n	800b97c <__lshift+0x38>
 800b964:	4638      	mov	r0, r7
 800b966:	f7ff fd93 	bl	800b490 <_Balloc>
 800b96a:	4605      	mov	r5, r0
 800b96c:	b948      	cbnz	r0, 800b982 <__lshift+0x3e>
 800b96e:	4602      	mov	r2, r0
 800b970:	4b28      	ldr	r3, [pc, #160]	; (800ba14 <__lshift+0xd0>)
 800b972:	4829      	ldr	r0, [pc, #164]	; (800ba18 <__lshift+0xd4>)
 800b974:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b978:	f001 fae2 	bl	800cf40 <__assert_func>
 800b97c:	3101      	adds	r1, #1
 800b97e:	005b      	lsls	r3, r3, #1
 800b980:	e7ee      	b.n	800b960 <__lshift+0x1c>
 800b982:	2300      	movs	r3, #0
 800b984:	f100 0114 	add.w	r1, r0, #20
 800b988:	f100 0210 	add.w	r2, r0, #16
 800b98c:	4618      	mov	r0, r3
 800b98e:	4553      	cmp	r3, sl
 800b990:	db33      	blt.n	800b9fa <__lshift+0xb6>
 800b992:	6920      	ldr	r0, [r4, #16]
 800b994:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b998:	f104 0314 	add.w	r3, r4, #20
 800b99c:	f019 091f 	ands.w	r9, r9, #31
 800b9a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b9a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b9a8:	d02b      	beq.n	800ba02 <__lshift+0xbe>
 800b9aa:	f1c9 0e20 	rsb	lr, r9, #32
 800b9ae:	468a      	mov	sl, r1
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	6818      	ldr	r0, [r3, #0]
 800b9b4:	fa00 f009 	lsl.w	r0, r0, r9
 800b9b8:	4310      	orrs	r0, r2
 800b9ba:	f84a 0b04 	str.w	r0, [sl], #4
 800b9be:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9c2:	459c      	cmp	ip, r3
 800b9c4:	fa22 f20e 	lsr.w	r2, r2, lr
 800b9c8:	d8f3      	bhi.n	800b9b2 <__lshift+0x6e>
 800b9ca:	ebac 0304 	sub.w	r3, ip, r4
 800b9ce:	3b15      	subs	r3, #21
 800b9d0:	f023 0303 	bic.w	r3, r3, #3
 800b9d4:	3304      	adds	r3, #4
 800b9d6:	f104 0015 	add.w	r0, r4, #21
 800b9da:	4584      	cmp	ip, r0
 800b9dc:	bf38      	it	cc
 800b9de:	2304      	movcc	r3, #4
 800b9e0:	50ca      	str	r2, [r1, r3]
 800b9e2:	b10a      	cbz	r2, 800b9e8 <__lshift+0xa4>
 800b9e4:	f108 0602 	add.w	r6, r8, #2
 800b9e8:	3e01      	subs	r6, #1
 800b9ea:	4638      	mov	r0, r7
 800b9ec:	612e      	str	r6, [r5, #16]
 800b9ee:	4621      	mov	r1, r4
 800b9f0:	f7ff fd8e 	bl	800b510 <_Bfree>
 800b9f4:	4628      	mov	r0, r5
 800b9f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9fa:	f842 0f04 	str.w	r0, [r2, #4]!
 800b9fe:	3301      	adds	r3, #1
 800ba00:	e7c5      	b.n	800b98e <__lshift+0x4a>
 800ba02:	3904      	subs	r1, #4
 800ba04:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba08:	f841 2f04 	str.w	r2, [r1, #4]!
 800ba0c:	459c      	cmp	ip, r3
 800ba0e:	d8f9      	bhi.n	800ba04 <__lshift+0xc0>
 800ba10:	e7ea      	b.n	800b9e8 <__lshift+0xa4>
 800ba12:	bf00      	nop
 800ba14:	0800dd99 	.word	0x0800dd99
 800ba18:	0800ddaa 	.word	0x0800ddaa

0800ba1c <__mcmp>:
 800ba1c:	b530      	push	{r4, r5, lr}
 800ba1e:	6902      	ldr	r2, [r0, #16]
 800ba20:	690c      	ldr	r4, [r1, #16]
 800ba22:	1b12      	subs	r2, r2, r4
 800ba24:	d10e      	bne.n	800ba44 <__mcmp+0x28>
 800ba26:	f100 0314 	add.w	r3, r0, #20
 800ba2a:	3114      	adds	r1, #20
 800ba2c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ba30:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ba34:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ba38:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ba3c:	42a5      	cmp	r5, r4
 800ba3e:	d003      	beq.n	800ba48 <__mcmp+0x2c>
 800ba40:	d305      	bcc.n	800ba4e <__mcmp+0x32>
 800ba42:	2201      	movs	r2, #1
 800ba44:	4610      	mov	r0, r2
 800ba46:	bd30      	pop	{r4, r5, pc}
 800ba48:	4283      	cmp	r3, r0
 800ba4a:	d3f3      	bcc.n	800ba34 <__mcmp+0x18>
 800ba4c:	e7fa      	b.n	800ba44 <__mcmp+0x28>
 800ba4e:	f04f 32ff 	mov.w	r2, #4294967295
 800ba52:	e7f7      	b.n	800ba44 <__mcmp+0x28>

0800ba54 <__mdiff>:
 800ba54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba58:	460c      	mov	r4, r1
 800ba5a:	4606      	mov	r6, r0
 800ba5c:	4611      	mov	r1, r2
 800ba5e:	4620      	mov	r0, r4
 800ba60:	4690      	mov	r8, r2
 800ba62:	f7ff ffdb 	bl	800ba1c <__mcmp>
 800ba66:	1e05      	subs	r5, r0, #0
 800ba68:	d110      	bne.n	800ba8c <__mdiff+0x38>
 800ba6a:	4629      	mov	r1, r5
 800ba6c:	4630      	mov	r0, r6
 800ba6e:	f7ff fd0f 	bl	800b490 <_Balloc>
 800ba72:	b930      	cbnz	r0, 800ba82 <__mdiff+0x2e>
 800ba74:	4b3a      	ldr	r3, [pc, #232]	; (800bb60 <__mdiff+0x10c>)
 800ba76:	4602      	mov	r2, r0
 800ba78:	f240 2137 	movw	r1, #567	; 0x237
 800ba7c:	4839      	ldr	r0, [pc, #228]	; (800bb64 <__mdiff+0x110>)
 800ba7e:	f001 fa5f 	bl	800cf40 <__assert_func>
 800ba82:	2301      	movs	r3, #1
 800ba84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ba88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba8c:	bfa4      	itt	ge
 800ba8e:	4643      	movge	r3, r8
 800ba90:	46a0      	movge	r8, r4
 800ba92:	4630      	mov	r0, r6
 800ba94:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ba98:	bfa6      	itte	ge
 800ba9a:	461c      	movge	r4, r3
 800ba9c:	2500      	movge	r5, #0
 800ba9e:	2501      	movlt	r5, #1
 800baa0:	f7ff fcf6 	bl	800b490 <_Balloc>
 800baa4:	b920      	cbnz	r0, 800bab0 <__mdiff+0x5c>
 800baa6:	4b2e      	ldr	r3, [pc, #184]	; (800bb60 <__mdiff+0x10c>)
 800baa8:	4602      	mov	r2, r0
 800baaa:	f240 2145 	movw	r1, #581	; 0x245
 800baae:	e7e5      	b.n	800ba7c <__mdiff+0x28>
 800bab0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bab4:	6926      	ldr	r6, [r4, #16]
 800bab6:	60c5      	str	r5, [r0, #12]
 800bab8:	f104 0914 	add.w	r9, r4, #20
 800babc:	f108 0514 	add.w	r5, r8, #20
 800bac0:	f100 0e14 	add.w	lr, r0, #20
 800bac4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bac8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bacc:	f108 0210 	add.w	r2, r8, #16
 800bad0:	46f2      	mov	sl, lr
 800bad2:	2100      	movs	r1, #0
 800bad4:	f859 3b04 	ldr.w	r3, [r9], #4
 800bad8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800badc:	fa11 f88b 	uxtah	r8, r1, fp
 800bae0:	b299      	uxth	r1, r3
 800bae2:	0c1b      	lsrs	r3, r3, #16
 800bae4:	eba8 0801 	sub.w	r8, r8, r1
 800bae8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800baec:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800baf0:	fa1f f888 	uxth.w	r8, r8
 800baf4:	1419      	asrs	r1, r3, #16
 800baf6:	454e      	cmp	r6, r9
 800baf8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bafc:	f84a 3b04 	str.w	r3, [sl], #4
 800bb00:	d8e8      	bhi.n	800bad4 <__mdiff+0x80>
 800bb02:	1b33      	subs	r3, r6, r4
 800bb04:	3b15      	subs	r3, #21
 800bb06:	f023 0303 	bic.w	r3, r3, #3
 800bb0a:	3304      	adds	r3, #4
 800bb0c:	3415      	adds	r4, #21
 800bb0e:	42a6      	cmp	r6, r4
 800bb10:	bf38      	it	cc
 800bb12:	2304      	movcc	r3, #4
 800bb14:	441d      	add	r5, r3
 800bb16:	4473      	add	r3, lr
 800bb18:	469e      	mov	lr, r3
 800bb1a:	462e      	mov	r6, r5
 800bb1c:	4566      	cmp	r6, ip
 800bb1e:	d30e      	bcc.n	800bb3e <__mdiff+0xea>
 800bb20:	f10c 0203 	add.w	r2, ip, #3
 800bb24:	1b52      	subs	r2, r2, r5
 800bb26:	f022 0203 	bic.w	r2, r2, #3
 800bb2a:	3d03      	subs	r5, #3
 800bb2c:	45ac      	cmp	ip, r5
 800bb2e:	bf38      	it	cc
 800bb30:	2200      	movcc	r2, #0
 800bb32:	4413      	add	r3, r2
 800bb34:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bb38:	b17a      	cbz	r2, 800bb5a <__mdiff+0x106>
 800bb3a:	6107      	str	r7, [r0, #16]
 800bb3c:	e7a4      	b.n	800ba88 <__mdiff+0x34>
 800bb3e:	f856 8b04 	ldr.w	r8, [r6], #4
 800bb42:	fa11 f288 	uxtah	r2, r1, r8
 800bb46:	1414      	asrs	r4, r2, #16
 800bb48:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bb4c:	b292      	uxth	r2, r2
 800bb4e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bb52:	f84e 2b04 	str.w	r2, [lr], #4
 800bb56:	1421      	asrs	r1, r4, #16
 800bb58:	e7e0      	b.n	800bb1c <__mdiff+0xc8>
 800bb5a:	3f01      	subs	r7, #1
 800bb5c:	e7ea      	b.n	800bb34 <__mdiff+0xe0>
 800bb5e:	bf00      	nop
 800bb60:	0800dd99 	.word	0x0800dd99
 800bb64:	0800ddaa 	.word	0x0800ddaa

0800bb68 <__ulp>:
 800bb68:	b082      	sub	sp, #8
 800bb6a:	ed8d 0b00 	vstr	d0, [sp]
 800bb6e:	9a01      	ldr	r2, [sp, #4]
 800bb70:	4b0f      	ldr	r3, [pc, #60]	; (800bbb0 <__ulp+0x48>)
 800bb72:	4013      	ands	r3, r2
 800bb74:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	dc08      	bgt.n	800bb8e <__ulp+0x26>
 800bb7c:	425b      	negs	r3, r3
 800bb7e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800bb82:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bb86:	da04      	bge.n	800bb92 <__ulp+0x2a>
 800bb88:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bb8c:	4113      	asrs	r3, r2
 800bb8e:	2200      	movs	r2, #0
 800bb90:	e008      	b.n	800bba4 <__ulp+0x3c>
 800bb92:	f1a2 0314 	sub.w	r3, r2, #20
 800bb96:	2b1e      	cmp	r3, #30
 800bb98:	bfda      	itte	le
 800bb9a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800bb9e:	40da      	lsrle	r2, r3
 800bba0:	2201      	movgt	r2, #1
 800bba2:	2300      	movs	r3, #0
 800bba4:	4619      	mov	r1, r3
 800bba6:	4610      	mov	r0, r2
 800bba8:	ec41 0b10 	vmov	d0, r0, r1
 800bbac:	b002      	add	sp, #8
 800bbae:	4770      	bx	lr
 800bbb0:	7ff00000 	.word	0x7ff00000

0800bbb4 <__b2d>:
 800bbb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbb8:	6906      	ldr	r6, [r0, #16]
 800bbba:	f100 0814 	add.w	r8, r0, #20
 800bbbe:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800bbc2:	1f37      	subs	r7, r6, #4
 800bbc4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bbc8:	4610      	mov	r0, r2
 800bbca:	f7ff fd53 	bl	800b674 <__hi0bits>
 800bbce:	f1c0 0320 	rsb	r3, r0, #32
 800bbd2:	280a      	cmp	r0, #10
 800bbd4:	600b      	str	r3, [r1, #0]
 800bbd6:	491b      	ldr	r1, [pc, #108]	; (800bc44 <__b2d+0x90>)
 800bbd8:	dc15      	bgt.n	800bc06 <__b2d+0x52>
 800bbda:	f1c0 0c0b 	rsb	ip, r0, #11
 800bbde:	fa22 f30c 	lsr.w	r3, r2, ip
 800bbe2:	45b8      	cmp	r8, r7
 800bbe4:	ea43 0501 	orr.w	r5, r3, r1
 800bbe8:	bf34      	ite	cc
 800bbea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bbee:	2300      	movcs	r3, #0
 800bbf0:	3015      	adds	r0, #21
 800bbf2:	fa02 f000 	lsl.w	r0, r2, r0
 800bbf6:	fa23 f30c 	lsr.w	r3, r3, ip
 800bbfa:	4303      	orrs	r3, r0
 800bbfc:	461c      	mov	r4, r3
 800bbfe:	ec45 4b10 	vmov	d0, r4, r5
 800bc02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc06:	45b8      	cmp	r8, r7
 800bc08:	bf3a      	itte	cc
 800bc0a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bc0e:	f1a6 0708 	subcc.w	r7, r6, #8
 800bc12:	2300      	movcs	r3, #0
 800bc14:	380b      	subs	r0, #11
 800bc16:	d012      	beq.n	800bc3e <__b2d+0x8a>
 800bc18:	f1c0 0120 	rsb	r1, r0, #32
 800bc1c:	fa23 f401 	lsr.w	r4, r3, r1
 800bc20:	4082      	lsls	r2, r0
 800bc22:	4322      	orrs	r2, r4
 800bc24:	4547      	cmp	r7, r8
 800bc26:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800bc2a:	bf8c      	ite	hi
 800bc2c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800bc30:	2200      	movls	r2, #0
 800bc32:	4083      	lsls	r3, r0
 800bc34:	40ca      	lsrs	r2, r1
 800bc36:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bc3a:	4313      	orrs	r3, r2
 800bc3c:	e7de      	b.n	800bbfc <__b2d+0x48>
 800bc3e:	ea42 0501 	orr.w	r5, r2, r1
 800bc42:	e7db      	b.n	800bbfc <__b2d+0x48>
 800bc44:	3ff00000 	.word	0x3ff00000

0800bc48 <__d2b>:
 800bc48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bc4c:	460f      	mov	r7, r1
 800bc4e:	2101      	movs	r1, #1
 800bc50:	ec59 8b10 	vmov	r8, r9, d0
 800bc54:	4616      	mov	r6, r2
 800bc56:	f7ff fc1b 	bl	800b490 <_Balloc>
 800bc5a:	4604      	mov	r4, r0
 800bc5c:	b930      	cbnz	r0, 800bc6c <__d2b+0x24>
 800bc5e:	4602      	mov	r2, r0
 800bc60:	4b24      	ldr	r3, [pc, #144]	; (800bcf4 <__d2b+0xac>)
 800bc62:	4825      	ldr	r0, [pc, #148]	; (800bcf8 <__d2b+0xb0>)
 800bc64:	f240 310f 	movw	r1, #783	; 0x30f
 800bc68:	f001 f96a 	bl	800cf40 <__assert_func>
 800bc6c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bc70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bc74:	bb2d      	cbnz	r5, 800bcc2 <__d2b+0x7a>
 800bc76:	9301      	str	r3, [sp, #4]
 800bc78:	f1b8 0300 	subs.w	r3, r8, #0
 800bc7c:	d026      	beq.n	800bccc <__d2b+0x84>
 800bc7e:	4668      	mov	r0, sp
 800bc80:	9300      	str	r3, [sp, #0]
 800bc82:	f7ff fd17 	bl	800b6b4 <__lo0bits>
 800bc86:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bc8a:	b1e8      	cbz	r0, 800bcc8 <__d2b+0x80>
 800bc8c:	f1c0 0320 	rsb	r3, r0, #32
 800bc90:	fa02 f303 	lsl.w	r3, r2, r3
 800bc94:	430b      	orrs	r3, r1
 800bc96:	40c2      	lsrs	r2, r0
 800bc98:	6163      	str	r3, [r4, #20]
 800bc9a:	9201      	str	r2, [sp, #4]
 800bc9c:	9b01      	ldr	r3, [sp, #4]
 800bc9e:	61a3      	str	r3, [r4, #24]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	bf14      	ite	ne
 800bca4:	2202      	movne	r2, #2
 800bca6:	2201      	moveq	r2, #1
 800bca8:	6122      	str	r2, [r4, #16]
 800bcaa:	b1bd      	cbz	r5, 800bcdc <__d2b+0x94>
 800bcac:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bcb0:	4405      	add	r5, r0
 800bcb2:	603d      	str	r5, [r7, #0]
 800bcb4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bcb8:	6030      	str	r0, [r6, #0]
 800bcba:	4620      	mov	r0, r4
 800bcbc:	b003      	add	sp, #12
 800bcbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bcc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bcc6:	e7d6      	b.n	800bc76 <__d2b+0x2e>
 800bcc8:	6161      	str	r1, [r4, #20]
 800bcca:	e7e7      	b.n	800bc9c <__d2b+0x54>
 800bccc:	a801      	add	r0, sp, #4
 800bcce:	f7ff fcf1 	bl	800b6b4 <__lo0bits>
 800bcd2:	9b01      	ldr	r3, [sp, #4]
 800bcd4:	6163      	str	r3, [r4, #20]
 800bcd6:	3020      	adds	r0, #32
 800bcd8:	2201      	movs	r2, #1
 800bcda:	e7e5      	b.n	800bca8 <__d2b+0x60>
 800bcdc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bce0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bce4:	6038      	str	r0, [r7, #0]
 800bce6:	6918      	ldr	r0, [r3, #16]
 800bce8:	f7ff fcc4 	bl	800b674 <__hi0bits>
 800bcec:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bcf0:	e7e2      	b.n	800bcb8 <__d2b+0x70>
 800bcf2:	bf00      	nop
 800bcf4:	0800dd99 	.word	0x0800dd99
 800bcf8:	0800ddaa 	.word	0x0800ddaa

0800bcfc <__ratio>:
 800bcfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd00:	4688      	mov	r8, r1
 800bd02:	4669      	mov	r1, sp
 800bd04:	4681      	mov	r9, r0
 800bd06:	f7ff ff55 	bl	800bbb4 <__b2d>
 800bd0a:	a901      	add	r1, sp, #4
 800bd0c:	4640      	mov	r0, r8
 800bd0e:	ec55 4b10 	vmov	r4, r5, d0
 800bd12:	ee10 aa10 	vmov	sl, s0
 800bd16:	f7ff ff4d 	bl	800bbb4 <__b2d>
 800bd1a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800bd1e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800bd22:	1ad2      	subs	r2, r2, r3
 800bd24:	e9dd 3100 	ldrd	r3, r1, [sp]
 800bd28:	1a5b      	subs	r3, r3, r1
 800bd2a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800bd2e:	ec57 6b10 	vmov	r6, r7, d0
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	bfd6      	itet	le
 800bd36:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bd3a:	462a      	movgt	r2, r5
 800bd3c:	463a      	movle	r2, r7
 800bd3e:	46ab      	mov	fp, r5
 800bd40:	bfd6      	itet	le
 800bd42:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800bd46:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800bd4a:	ee00 3a90 	vmovle	s1, r3
 800bd4e:	ec4b ab17 	vmov	d7, sl, fp
 800bd52:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800bd56:	b003      	add	sp, #12
 800bd58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bd5c <__copybits>:
 800bd5c:	3901      	subs	r1, #1
 800bd5e:	b570      	push	{r4, r5, r6, lr}
 800bd60:	1149      	asrs	r1, r1, #5
 800bd62:	6914      	ldr	r4, [r2, #16]
 800bd64:	3101      	adds	r1, #1
 800bd66:	f102 0314 	add.w	r3, r2, #20
 800bd6a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bd6e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bd72:	1f05      	subs	r5, r0, #4
 800bd74:	42a3      	cmp	r3, r4
 800bd76:	d30c      	bcc.n	800bd92 <__copybits+0x36>
 800bd78:	1aa3      	subs	r3, r4, r2
 800bd7a:	3b11      	subs	r3, #17
 800bd7c:	f023 0303 	bic.w	r3, r3, #3
 800bd80:	3211      	adds	r2, #17
 800bd82:	42a2      	cmp	r2, r4
 800bd84:	bf88      	it	hi
 800bd86:	2300      	movhi	r3, #0
 800bd88:	4418      	add	r0, r3
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	4288      	cmp	r0, r1
 800bd8e:	d305      	bcc.n	800bd9c <__copybits+0x40>
 800bd90:	bd70      	pop	{r4, r5, r6, pc}
 800bd92:	f853 6b04 	ldr.w	r6, [r3], #4
 800bd96:	f845 6f04 	str.w	r6, [r5, #4]!
 800bd9a:	e7eb      	b.n	800bd74 <__copybits+0x18>
 800bd9c:	f840 3b04 	str.w	r3, [r0], #4
 800bda0:	e7f4      	b.n	800bd8c <__copybits+0x30>

0800bda2 <__any_on>:
 800bda2:	f100 0214 	add.w	r2, r0, #20
 800bda6:	6900      	ldr	r0, [r0, #16]
 800bda8:	114b      	asrs	r3, r1, #5
 800bdaa:	4298      	cmp	r0, r3
 800bdac:	b510      	push	{r4, lr}
 800bdae:	db11      	blt.n	800bdd4 <__any_on+0x32>
 800bdb0:	dd0a      	ble.n	800bdc8 <__any_on+0x26>
 800bdb2:	f011 011f 	ands.w	r1, r1, #31
 800bdb6:	d007      	beq.n	800bdc8 <__any_on+0x26>
 800bdb8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bdbc:	fa24 f001 	lsr.w	r0, r4, r1
 800bdc0:	fa00 f101 	lsl.w	r1, r0, r1
 800bdc4:	428c      	cmp	r4, r1
 800bdc6:	d10b      	bne.n	800bde0 <__any_on+0x3e>
 800bdc8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bdcc:	4293      	cmp	r3, r2
 800bdce:	d803      	bhi.n	800bdd8 <__any_on+0x36>
 800bdd0:	2000      	movs	r0, #0
 800bdd2:	bd10      	pop	{r4, pc}
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	e7f7      	b.n	800bdc8 <__any_on+0x26>
 800bdd8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bddc:	2900      	cmp	r1, #0
 800bdde:	d0f5      	beq.n	800bdcc <__any_on+0x2a>
 800bde0:	2001      	movs	r0, #1
 800bde2:	e7f6      	b.n	800bdd2 <__any_on+0x30>

0800bde4 <sulp>:
 800bde4:	b570      	push	{r4, r5, r6, lr}
 800bde6:	4604      	mov	r4, r0
 800bde8:	460d      	mov	r5, r1
 800bdea:	4616      	mov	r6, r2
 800bdec:	ec45 4b10 	vmov	d0, r4, r5
 800bdf0:	f7ff feba 	bl	800bb68 <__ulp>
 800bdf4:	b17e      	cbz	r6, 800be16 <sulp+0x32>
 800bdf6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bdfa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	dd09      	ble.n	800be16 <sulp+0x32>
 800be02:	051b      	lsls	r3, r3, #20
 800be04:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800be08:	2000      	movs	r0, #0
 800be0a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800be0e:	ec41 0b17 	vmov	d7, r0, r1
 800be12:	ee20 0b07 	vmul.f64	d0, d0, d7
 800be16:	bd70      	pop	{r4, r5, r6, pc}

0800be18 <_strtod_l>:
 800be18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be1c:	ed2d 8b0e 	vpush	{d8-d14}
 800be20:	b097      	sub	sp, #92	; 0x5c
 800be22:	4604      	mov	r4, r0
 800be24:	920d      	str	r2, [sp, #52]	; 0x34
 800be26:	2200      	movs	r2, #0
 800be28:	9212      	str	r2, [sp, #72]	; 0x48
 800be2a:	468a      	mov	sl, r1
 800be2c:	f04f 0800 	mov.w	r8, #0
 800be30:	f04f 0900 	mov.w	r9, #0
 800be34:	460a      	mov	r2, r1
 800be36:	9211      	str	r2, [sp, #68]	; 0x44
 800be38:	7811      	ldrb	r1, [r2, #0]
 800be3a:	292b      	cmp	r1, #43	; 0x2b
 800be3c:	d04c      	beq.n	800bed8 <_strtod_l+0xc0>
 800be3e:	d839      	bhi.n	800beb4 <_strtod_l+0x9c>
 800be40:	290d      	cmp	r1, #13
 800be42:	d833      	bhi.n	800beac <_strtod_l+0x94>
 800be44:	2908      	cmp	r1, #8
 800be46:	d833      	bhi.n	800beb0 <_strtod_l+0x98>
 800be48:	2900      	cmp	r1, #0
 800be4a:	d03c      	beq.n	800bec6 <_strtod_l+0xae>
 800be4c:	2200      	movs	r2, #0
 800be4e:	9208      	str	r2, [sp, #32]
 800be50:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800be52:	7832      	ldrb	r2, [r6, #0]
 800be54:	2a30      	cmp	r2, #48	; 0x30
 800be56:	f040 80b8 	bne.w	800bfca <_strtod_l+0x1b2>
 800be5a:	7872      	ldrb	r2, [r6, #1]
 800be5c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800be60:	2a58      	cmp	r2, #88	; 0x58
 800be62:	d170      	bne.n	800bf46 <_strtod_l+0x12e>
 800be64:	9302      	str	r3, [sp, #8]
 800be66:	9b08      	ldr	r3, [sp, #32]
 800be68:	9301      	str	r3, [sp, #4]
 800be6a:	ab12      	add	r3, sp, #72	; 0x48
 800be6c:	9300      	str	r3, [sp, #0]
 800be6e:	4a91      	ldr	r2, [pc, #580]	; (800c0b4 <_strtod_l+0x29c>)
 800be70:	ab13      	add	r3, sp, #76	; 0x4c
 800be72:	a911      	add	r1, sp, #68	; 0x44
 800be74:	4620      	mov	r0, r4
 800be76:	f001 f8ff 	bl	800d078 <__gethex>
 800be7a:	f010 070f 	ands.w	r7, r0, #15
 800be7e:	4605      	mov	r5, r0
 800be80:	d005      	beq.n	800be8e <_strtod_l+0x76>
 800be82:	2f06      	cmp	r7, #6
 800be84:	d12a      	bne.n	800bedc <_strtod_l+0xc4>
 800be86:	3601      	adds	r6, #1
 800be88:	2300      	movs	r3, #0
 800be8a:	9611      	str	r6, [sp, #68]	; 0x44
 800be8c:	9308      	str	r3, [sp, #32]
 800be8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be90:	2b00      	cmp	r3, #0
 800be92:	f040 8555 	bne.w	800c940 <_strtod_l+0xb28>
 800be96:	9b08      	ldr	r3, [sp, #32]
 800be98:	ec49 8b10 	vmov	d0, r8, r9
 800be9c:	b1cb      	cbz	r3, 800bed2 <_strtod_l+0xba>
 800be9e:	eeb1 0b40 	vneg.f64	d0, d0
 800bea2:	b017      	add	sp, #92	; 0x5c
 800bea4:	ecbd 8b0e 	vpop	{d8-d14}
 800bea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beac:	2920      	cmp	r1, #32
 800beae:	d1cd      	bne.n	800be4c <_strtod_l+0x34>
 800beb0:	3201      	adds	r2, #1
 800beb2:	e7c0      	b.n	800be36 <_strtod_l+0x1e>
 800beb4:	292d      	cmp	r1, #45	; 0x2d
 800beb6:	d1c9      	bne.n	800be4c <_strtod_l+0x34>
 800beb8:	2101      	movs	r1, #1
 800beba:	9108      	str	r1, [sp, #32]
 800bebc:	1c51      	adds	r1, r2, #1
 800bebe:	9111      	str	r1, [sp, #68]	; 0x44
 800bec0:	7852      	ldrb	r2, [r2, #1]
 800bec2:	2a00      	cmp	r2, #0
 800bec4:	d1c4      	bne.n	800be50 <_strtod_l+0x38>
 800bec6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bec8:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800becc:	2b00      	cmp	r3, #0
 800bece:	f040 8535 	bne.w	800c93c <_strtod_l+0xb24>
 800bed2:	ec49 8b10 	vmov	d0, r8, r9
 800bed6:	e7e4      	b.n	800bea2 <_strtod_l+0x8a>
 800bed8:	2100      	movs	r1, #0
 800beda:	e7ee      	b.n	800beba <_strtod_l+0xa2>
 800bedc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bede:	b13a      	cbz	r2, 800bef0 <_strtod_l+0xd8>
 800bee0:	2135      	movs	r1, #53	; 0x35
 800bee2:	a814      	add	r0, sp, #80	; 0x50
 800bee4:	f7ff ff3a 	bl	800bd5c <__copybits>
 800bee8:	9912      	ldr	r1, [sp, #72]	; 0x48
 800beea:	4620      	mov	r0, r4
 800beec:	f7ff fb10 	bl	800b510 <_Bfree>
 800bef0:	1e7b      	subs	r3, r7, #1
 800bef2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bef4:	2b04      	cmp	r3, #4
 800bef6:	d806      	bhi.n	800bf06 <_strtod_l+0xee>
 800bef8:	e8df f003 	tbb	[pc, r3]
 800befc:	201d0314 	.word	0x201d0314
 800bf00:	14          	.byte	0x14
 800bf01:	00          	.byte	0x00
 800bf02:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800bf06:	05eb      	lsls	r3, r5, #23
 800bf08:	bf48      	it	mi
 800bf0a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800bf0e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bf12:	0d1b      	lsrs	r3, r3, #20
 800bf14:	051b      	lsls	r3, r3, #20
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d1b9      	bne.n	800be8e <_strtod_l+0x76>
 800bf1a:	f7fe fb91 	bl	800a640 <__errno>
 800bf1e:	2322      	movs	r3, #34	; 0x22
 800bf20:	6003      	str	r3, [r0, #0]
 800bf22:	e7b4      	b.n	800be8e <_strtod_l+0x76>
 800bf24:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800bf28:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800bf2c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bf30:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800bf34:	e7e7      	b.n	800bf06 <_strtod_l+0xee>
 800bf36:	f8df 9184 	ldr.w	r9, [pc, #388]	; 800c0bc <_strtod_l+0x2a4>
 800bf3a:	e7e4      	b.n	800bf06 <_strtod_l+0xee>
 800bf3c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800bf40:	f04f 38ff 	mov.w	r8, #4294967295
 800bf44:	e7df      	b.n	800bf06 <_strtod_l+0xee>
 800bf46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bf48:	1c5a      	adds	r2, r3, #1
 800bf4a:	9211      	str	r2, [sp, #68]	; 0x44
 800bf4c:	785b      	ldrb	r3, [r3, #1]
 800bf4e:	2b30      	cmp	r3, #48	; 0x30
 800bf50:	d0f9      	beq.n	800bf46 <_strtod_l+0x12e>
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d09b      	beq.n	800be8e <_strtod_l+0x76>
 800bf56:	2301      	movs	r3, #1
 800bf58:	9306      	str	r3, [sp, #24]
 800bf5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bf5c:	9309      	str	r3, [sp, #36]	; 0x24
 800bf5e:	2300      	movs	r3, #0
 800bf60:	9305      	str	r3, [sp, #20]
 800bf62:	9307      	str	r3, [sp, #28]
 800bf64:	461e      	mov	r6, r3
 800bf66:	220a      	movs	r2, #10
 800bf68:	9811      	ldr	r0, [sp, #68]	; 0x44
 800bf6a:	7805      	ldrb	r5, [r0, #0]
 800bf6c:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800bf70:	b2d9      	uxtb	r1, r3
 800bf72:	2909      	cmp	r1, #9
 800bf74:	d92b      	bls.n	800bfce <_strtod_l+0x1b6>
 800bf76:	4950      	ldr	r1, [pc, #320]	; (800c0b8 <_strtod_l+0x2a0>)
 800bf78:	2201      	movs	r2, #1
 800bf7a:	f000 ffa9 	bl	800ced0 <strncmp>
 800bf7e:	2800      	cmp	r0, #0
 800bf80:	d035      	beq.n	800bfee <_strtod_l+0x1d6>
 800bf82:	2000      	movs	r0, #0
 800bf84:	462a      	mov	r2, r5
 800bf86:	4633      	mov	r3, r6
 800bf88:	4683      	mov	fp, r0
 800bf8a:	4601      	mov	r1, r0
 800bf8c:	2a65      	cmp	r2, #101	; 0x65
 800bf8e:	d001      	beq.n	800bf94 <_strtod_l+0x17c>
 800bf90:	2a45      	cmp	r2, #69	; 0x45
 800bf92:	d118      	bne.n	800bfc6 <_strtod_l+0x1ae>
 800bf94:	b91b      	cbnz	r3, 800bf9e <_strtod_l+0x186>
 800bf96:	9b06      	ldr	r3, [sp, #24]
 800bf98:	4303      	orrs	r3, r0
 800bf9a:	d094      	beq.n	800bec6 <_strtod_l+0xae>
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 800bfa2:	f10a 0201 	add.w	r2, sl, #1
 800bfa6:	9211      	str	r2, [sp, #68]	; 0x44
 800bfa8:	f89a 2001 	ldrb.w	r2, [sl, #1]
 800bfac:	2a2b      	cmp	r2, #43	; 0x2b
 800bfae:	d075      	beq.n	800c09c <_strtod_l+0x284>
 800bfb0:	2a2d      	cmp	r2, #45	; 0x2d
 800bfb2:	d07b      	beq.n	800c0ac <_strtod_l+0x294>
 800bfb4:	f04f 0e00 	mov.w	lr, #0
 800bfb8:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800bfbc:	2d09      	cmp	r5, #9
 800bfbe:	f240 8083 	bls.w	800c0c8 <_strtod_l+0x2b0>
 800bfc2:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800bfc6:	2500      	movs	r5, #0
 800bfc8:	e09e      	b.n	800c108 <_strtod_l+0x2f0>
 800bfca:	2300      	movs	r3, #0
 800bfcc:	e7c4      	b.n	800bf58 <_strtod_l+0x140>
 800bfce:	2e08      	cmp	r6, #8
 800bfd0:	bfd5      	itete	le
 800bfd2:	9907      	ldrle	r1, [sp, #28]
 800bfd4:	9905      	ldrgt	r1, [sp, #20]
 800bfd6:	fb02 3301 	mlale	r3, r2, r1, r3
 800bfda:	fb02 3301 	mlagt	r3, r2, r1, r3
 800bfde:	f100 0001 	add.w	r0, r0, #1
 800bfe2:	bfd4      	ite	le
 800bfe4:	9307      	strle	r3, [sp, #28]
 800bfe6:	9305      	strgt	r3, [sp, #20]
 800bfe8:	3601      	adds	r6, #1
 800bfea:	9011      	str	r0, [sp, #68]	; 0x44
 800bfec:	e7bc      	b.n	800bf68 <_strtod_l+0x150>
 800bfee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bff0:	1c5a      	adds	r2, r3, #1
 800bff2:	9211      	str	r2, [sp, #68]	; 0x44
 800bff4:	785a      	ldrb	r2, [r3, #1]
 800bff6:	b3ae      	cbz	r6, 800c064 <_strtod_l+0x24c>
 800bff8:	4683      	mov	fp, r0
 800bffa:	4633      	mov	r3, r6
 800bffc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c000:	2909      	cmp	r1, #9
 800c002:	d912      	bls.n	800c02a <_strtod_l+0x212>
 800c004:	2101      	movs	r1, #1
 800c006:	e7c1      	b.n	800bf8c <_strtod_l+0x174>
 800c008:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c00a:	1c5a      	adds	r2, r3, #1
 800c00c:	9211      	str	r2, [sp, #68]	; 0x44
 800c00e:	785a      	ldrb	r2, [r3, #1]
 800c010:	3001      	adds	r0, #1
 800c012:	2a30      	cmp	r2, #48	; 0x30
 800c014:	d0f8      	beq.n	800c008 <_strtod_l+0x1f0>
 800c016:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c01a:	2b08      	cmp	r3, #8
 800c01c:	f200 8495 	bhi.w	800c94a <_strtod_l+0xb32>
 800c020:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c022:	9309      	str	r3, [sp, #36]	; 0x24
 800c024:	4683      	mov	fp, r0
 800c026:	2000      	movs	r0, #0
 800c028:	4603      	mov	r3, r0
 800c02a:	3a30      	subs	r2, #48	; 0x30
 800c02c:	f100 0101 	add.w	r1, r0, #1
 800c030:	d012      	beq.n	800c058 <_strtod_l+0x240>
 800c032:	448b      	add	fp, r1
 800c034:	eb00 0c03 	add.w	ip, r0, r3
 800c038:	4619      	mov	r1, r3
 800c03a:	250a      	movs	r5, #10
 800c03c:	4561      	cmp	r1, ip
 800c03e:	d113      	bne.n	800c068 <_strtod_l+0x250>
 800c040:	1819      	adds	r1, r3, r0
 800c042:	2908      	cmp	r1, #8
 800c044:	f103 0301 	add.w	r3, r3, #1
 800c048:	4403      	add	r3, r0
 800c04a:	dc1b      	bgt.n	800c084 <_strtod_l+0x26c>
 800c04c:	9807      	ldr	r0, [sp, #28]
 800c04e:	210a      	movs	r1, #10
 800c050:	fb01 2200 	mla	r2, r1, r0, r2
 800c054:	9207      	str	r2, [sp, #28]
 800c056:	2100      	movs	r1, #0
 800c058:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c05a:	1c50      	adds	r0, r2, #1
 800c05c:	9011      	str	r0, [sp, #68]	; 0x44
 800c05e:	7852      	ldrb	r2, [r2, #1]
 800c060:	4608      	mov	r0, r1
 800c062:	e7cb      	b.n	800bffc <_strtod_l+0x1e4>
 800c064:	4630      	mov	r0, r6
 800c066:	e7d4      	b.n	800c012 <_strtod_l+0x1fa>
 800c068:	2908      	cmp	r1, #8
 800c06a:	f101 0101 	add.w	r1, r1, #1
 800c06e:	dc03      	bgt.n	800c078 <_strtod_l+0x260>
 800c070:	9f07      	ldr	r7, [sp, #28]
 800c072:	436f      	muls	r7, r5
 800c074:	9707      	str	r7, [sp, #28]
 800c076:	e7e1      	b.n	800c03c <_strtod_l+0x224>
 800c078:	2910      	cmp	r1, #16
 800c07a:	bfde      	ittt	le
 800c07c:	9f05      	ldrle	r7, [sp, #20]
 800c07e:	436f      	mulle	r7, r5
 800c080:	9705      	strle	r7, [sp, #20]
 800c082:	e7db      	b.n	800c03c <_strtod_l+0x224>
 800c084:	2b10      	cmp	r3, #16
 800c086:	bfdf      	itttt	le
 800c088:	9805      	ldrle	r0, [sp, #20]
 800c08a:	210a      	movle	r1, #10
 800c08c:	fb01 2200 	mlale	r2, r1, r0, r2
 800c090:	9205      	strle	r2, [sp, #20]
 800c092:	e7e0      	b.n	800c056 <_strtod_l+0x23e>
 800c094:	f04f 0b00 	mov.w	fp, #0
 800c098:	2101      	movs	r1, #1
 800c09a:	e77c      	b.n	800bf96 <_strtod_l+0x17e>
 800c09c:	f04f 0e00 	mov.w	lr, #0
 800c0a0:	f10a 0202 	add.w	r2, sl, #2
 800c0a4:	9211      	str	r2, [sp, #68]	; 0x44
 800c0a6:	f89a 2002 	ldrb.w	r2, [sl, #2]
 800c0aa:	e785      	b.n	800bfb8 <_strtod_l+0x1a0>
 800c0ac:	f04f 0e01 	mov.w	lr, #1
 800c0b0:	e7f6      	b.n	800c0a0 <_strtod_l+0x288>
 800c0b2:	bf00      	nop
 800c0b4:	0800df08 	.word	0x0800df08
 800c0b8:	0800df04 	.word	0x0800df04
 800c0bc:	7ff00000 	.word	0x7ff00000
 800c0c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c0c2:	1c55      	adds	r5, r2, #1
 800c0c4:	9511      	str	r5, [sp, #68]	; 0x44
 800c0c6:	7852      	ldrb	r2, [r2, #1]
 800c0c8:	2a30      	cmp	r2, #48	; 0x30
 800c0ca:	d0f9      	beq.n	800c0c0 <_strtod_l+0x2a8>
 800c0cc:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800c0d0:	2d08      	cmp	r5, #8
 800c0d2:	f63f af78 	bhi.w	800bfc6 <_strtod_l+0x1ae>
 800c0d6:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800c0da:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c0dc:	920a      	str	r2, [sp, #40]	; 0x28
 800c0de:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c0e0:	1c55      	adds	r5, r2, #1
 800c0e2:	9511      	str	r5, [sp, #68]	; 0x44
 800c0e4:	7852      	ldrb	r2, [r2, #1]
 800c0e6:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800c0ea:	2f09      	cmp	r7, #9
 800c0ec:	d937      	bls.n	800c15e <_strtod_l+0x346>
 800c0ee:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800c0f0:	1bed      	subs	r5, r5, r7
 800c0f2:	2d08      	cmp	r5, #8
 800c0f4:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800c0f8:	dc02      	bgt.n	800c100 <_strtod_l+0x2e8>
 800c0fa:	4565      	cmp	r5, ip
 800c0fc:	bfa8      	it	ge
 800c0fe:	4665      	movge	r5, ip
 800c100:	f1be 0f00 	cmp.w	lr, #0
 800c104:	d000      	beq.n	800c108 <_strtod_l+0x2f0>
 800c106:	426d      	negs	r5, r5
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d14d      	bne.n	800c1a8 <_strtod_l+0x390>
 800c10c:	9b06      	ldr	r3, [sp, #24]
 800c10e:	4303      	orrs	r3, r0
 800c110:	f47f aebd 	bne.w	800be8e <_strtod_l+0x76>
 800c114:	2900      	cmp	r1, #0
 800c116:	f47f aed6 	bne.w	800bec6 <_strtod_l+0xae>
 800c11a:	2a69      	cmp	r2, #105	; 0x69
 800c11c:	d027      	beq.n	800c16e <_strtod_l+0x356>
 800c11e:	dc24      	bgt.n	800c16a <_strtod_l+0x352>
 800c120:	2a49      	cmp	r2, #73	; 0x49
 800c122:	d024      	beq.n	800c16e <_strtod_l+0x356>
 800c124:	2a4e      	cmp	r2, #78	; 0x4e
 800c126:	f47f aece 	bne.w	800bec6 <_strtod_l+0xae>
 800c12a:	4995      	ldr	r1, [pc, #596]	; (800c380 <_strtod_l+0x568>)
 800c12c:	a811      	add	r0, sp, #68	; 0x44
 800c12e:	f001 f9e3 	bl	800d4f8 <__match>
 800c132:	2800      	cmp	r0, #0
 800c134:	f43f aec7 	beq.w	800bec6 <_strtod_l+0xae>
 800c138:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c13a:	781b      	ldrb	r3, [r3, #0]
 800c13c:	2b28      	cmp	r3, #40	; 0x28
 800c13e:	d12d      	bne.n	800c19c <_strtod_l+0x384>
 800c140:	4990      	ldr	r1, [pc, #576]	; (800c384 <_strtod_l+0x56c>)
 800c142:	aa14      	add	r2, sp, #80	; 0x50
 800c144:	a811      	add	r0, sp, #68	; 0x44
 800c146:	f001 f9eb 	bl	800d520 <__hexnan>
 800c14a:	2805      	cmp	r0, #5
 800c14c:	d126      	bne.n	800c19c <_strtod_l+0x384>
 800c14e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c150:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800c154:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800c158:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800c15c:	e697      	b.n	800be8e <_strtod_l+0x76>
 800c15e:	250a      	movs	r5, #10
 800c160:	fb05 2c0c 	mla	ip, r5, ip, r2
 800c164:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800c168:	e7b9      	b.n	800c0de <_strtod_l+0x2c6>
 800c16a:	2a6e      	cmp	r2, #110	; 0x6e
 800c16c:	e7db      	b.n	800c126 <_strtod_l+0x30e>
 800c16e:	4986      	ldr	r1, [pc, #536]	; (800c388 <_strtod_l+0x570>)
 800c170:	a811      	add	r0, sp, #68	; 0x44
 800c172:	f001 f9c1 	bl	800d4f8 <__match>
 800c176:	2800      	cmp	r0, #0
 800c178:	f43f aea5 	beq.w	800bec6 <_strtod_l+0xae>
 800c17c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c17e:	4983      	ldr	r1, [pc, #524]	; (800c38c <_strtod_l+0x574>)
 800c180:	3b01      	subs	r3, #1
 800c182:	a811      	add	r0, sp, #68	; 0x44
 800c184:	9311      	str	r3, [sp, #68]	; 0x44
 800c186:	f001 f9b7 	bl	800d4f8 <__match>
 800c18a:	b910      	cbnz	r0, 800c192 <_strtod_l+0x37a>
 800c18c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c18e:	3301      	adds	r3, #1
 800c190:	9311      	str	r3, [sp, #68]	; 0x44
 800c192:	f8df 920c 	ldr.w	r9, [pc, #524]	; 800c3a0 <_strtod_l+0x588>
 800c196:	f04f 0800 	mov.w	r8, #0
 800c19a:	e678      	b.n	800be8e <_strtod_l+0x76>
 800c19c:	487c      	ldr	r0, [pc, #496]	; (800c390 <_strtod_l+0x578>)
 800c19e:	f000 fec7 	bl	800cf30 <nan>
 800c1a2:	ec59 8b10 	vmov	r8, r9, d0
 800c1a6:	e672      	b.n	800be8e <_strtod_l+0x76>
 800c1a8:	eddd 7a07 	vldr	s15, [sp, #28]
 800c1ac:	eba5 020b 	sub.w	r2, r5, fp
 800c1b0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c1b4:	2e00      	cmp	r6, #0
 800c1b6:	bf08      	it	eq
 800c1b8:	461e      	moveq	r6, r3
 800c1ba:	2b10      	cmp	r3, #16
 800c1bc:	9206      	str	r2, [sp, #24]
 800c1be:	461a      	mov	r2, r3
 800c1c0:	bfa8      	it	ge
 800c1c2:	2210      	movge	r2, #16
 800c1c4:	2b09      	cmp	r3, #9
 800c1c6:	ec59 8b17 	vmov	r8, r9, d7
 800c1ca:	dd0c      	ble.n	800c1e6 <_strtod_l+0x3ce>
 800c1cc:	4971      	ldr	r1, [pc, #452]	; (800c394 <_strtod_l+0x57c>)
 800c1ce:	eddd 6a05 	vldr	s13, [sp, #20]
 800c1d2:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800c1d6:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800c1da:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800c1de:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c1e2:	ec59 8b16 	vmov	r8, r9, d6
 800c1e6:	2b0f      	cmp	r3, #15
 800c1e8:	dc37      	bgt.n	800c25a <_strtod_l+0x442>
 800c1ea:	9906      	ldr	r1, [sp, #24]
 800c1ec:	2900      	cmp	r1, #0
 800c1ee:	f43f ae4e 	beq.w	800be8e <_strtod_l+0x76>
 800c1f2:	dd23      	ble.n	800c23c <_strtod_l+0x424>
 800c1f4:	2916      	cmp	r1, #22
 800c1f6:	dc0b      	bgt.n	800c210 <_strtod_l+0x3f8>
 800c1f8:	4b66      	ldr	r3, [pc, #408]	; (800c394 <_strtod_l+0x57c>)
 800c1fa:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800c1fe:	ed93 7b00 	vldr	d7, [r3]
 800c202:	ec49 8b16 	vmov	d6, r8, r9
 800c206:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c20a:	ec59 8b17 	vmov	r8, r9, d7
 800c20e:	e63e      	b.n	800be8e <_strtod_l+0x76>
 800c210:	9806      	ldr	r0, [sp, #24]
 800c212:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800c216:	4281      	cmp	r1, r0
 800c218:	db1f      	blt.n	800c25a <_strtod_l+0x442>
 800c21a:	4a5e      	ldr	r2, [pc, #376]	; (800c394 <_strtod_l+0x57c>)
 800c21c:	f1c3 030f 	rsb	r3, r3, #15
 800c220:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800c224:	ed91 7b00 	vldr	d7, [r1]
 800c228:	ec49 8b16 	vmov	d6, r8, r9
 800c22c:	1ac3      	subs	r3, r0, r3
 800c22e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c232:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c236:	ed92 6b00 	vldr	d6, [r2]
 800c23a:	e7e4      	b.n	800c206 <_strtod_l+0x3ee>
 800c23c:	9906      	ldr	r1, [sp, #24]
 800c23e:	3116      	adds	r1, #22
 800c240:	db0b      	blt.n	800c25a <_strtod_l+0x442>
 800c242:	4b54      	ldr	r3, [pc, #336]	; (800c394 <_strtod_l+0x57c>)
 800c244:	ebab 0505 	sub.w	r5, fp, r5
 800c248:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c24c:	ed95 7b00 	vldr	d7, [r5]
 800c250:	ec49 8b16 	vmov	d6, r8, r9
 800c254:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c258:	e7d7      	b.n	800c20a <_strtod_l+0x3f2>
 800c25a:	9906      	ldr	r1, [sp, #24]
 800c25c:	1a9a      	subs	r2, r3, r2
 800c25e:	440a      	add	r2, r1
 800c260:	2a00      	cmp	r2, #0
 800c262:	dd6e      	ble.n	800c342 <_strtod_l+0x52a>
 800c264:	f012 000f 	ands.w	r0, r2, #15
 800c268:	d00a      	beq.n	800c280 <_strtod_l+0x468>
 800c26a:	494a      	ldr	r1, [pc, #296]	; (800c394 <_strtod_l+0x57c>)
 800c26c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c270:	ed91 7b00 	vldr	d7, [r1]
 800c274:	ec49 8b16 	vmov	d6, r8, r9
 800c278:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c27c:	ec59 8b17 	vmov	r8, r9, d7
 800c280:	f032 020f 	bics.w	r2, r2, #15
 800c284:	d04e      	beq.n	800c324 <_strtod_l+0x50c>
 800c286:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800c28a:	dd22      	ble.n	800c2d2 <_strtod_l+0x4ba>
 800c28c:	2500      	movs	r5, #0
 800c28e:	462e      	mov	r6, r5
 800c290:	9507      	str	r5, [sp, #28]
 800c292:	462f      	mov	r7, r5
 800c294:	2322      	movs	r3, #34	; 0x22
 800c296:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800c3a0 <_strtod_l+0x588>
 800c29a:	6023      	str	r3, [r4, #0]
 800c29c:	f04f 0800 	mov.w	r8, #0
 800c2a0:	9b07      	ldr	r3, [sp, #28]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	f43f adf3 	beq.w	800be8e <_strtod_l+0x76>
 800c2a8:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c2aa:	4620      	mov	r0, r4
 800c2ac:	f7ff f930 	bl	800b510 <_Bfree>
 800c2b0:	4639      	mov	r1, r7
 800c2b2:	4620      	mov	r0, r4
 800c2b4:	f7ff f92c 	bl	800b510 <_Bfree>
 800c2b8:	4631      	mov	r1, r6
 800c2ba:	4620      	mov	r0, r4
 800c2bc:	f7ff f928 	bl	800b510 <_Bfree>
 800c2c0:	9907      	ldr	r1, [sp, #28]
 800c2c2:	4620      	mov	r0, r4
 800c2c4:	f7ff f924 	bl	800b510 <_Bfree>
 800c2c8:	4629      	mov	r1, r5
 800c2ca:	4620      	mov	r0, r4
 800c2cc:	f7ff f920 	bl	800b510 <_Bfree>
 800c2d0:	e5dd      	b.n	800be8e <_strtod_l+0x76>
 800c2d2:	2000      	movs	r0, #0
 800c2d4:	ec49 8b17 	vmov	d7, r8, r9
 800c2d8:	4f2f      	ldr	r7, [pc, #188]	; (800c398 <_strtod_l+0x580>)
 800c2da:	1112      	asrs	r2, r2, #4
 800c2dc:	4601      	mov	r1, r0
 800c2de:	2a01      	cmp	r2, #1
 800c2e0:	dc23      	bgt.n	800c32a <_strtod_l+0x512>
 800c2e2:	b108      	cbz	r0, 800c2e8 <_strtod_l+0x4d0>
 800c2e4:	ec59 8b17 	vmov	r8, r9, d7
 800c2e8:	4a2b      	ldr	r2, [pc, #172]	; (800c398 <_strtod_l+0x580>)
 800c2ea:	482c      	ldr	r0, [pc, #176]	; (800c39c <_strtod_l+0x584>)
 800c2ec:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800c2f0:	ed92 7b00 	vldr	d7, [r2]
 800c2f4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800c2f8:	ec49 8b16 	vmov	d6, r8, r9
 800c2fc:	4a28      	ldr	r2, [pc, #160]	; (800c3a0 <_strtod_l+0x588>)
 800c2fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c302:	ee17 1a90 	vmov	r1, s15
 800c306:	400a      	ands	r2, r1
 800c308:	4282      	cmp	r2, r0
 800c30a:	ec59 8b17 	vmov	r8, r9, d7
 800c30e:	d8bd      	bhi.n	800c28c <_strtod_l+0x474>
 800c310:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800c314:	4282      	cmp	r2, r0
 800c316:	bf86      	itte	hi
 800c318:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 800c3a4 <_strtod_l+0x58c>
 800c31c:	f04f 38ff 	movhi.w	r8, #4294967295
 800c320:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800c324:	2200      	movs	r2, #0
 800c326:	9205      	str	r2, [sp, #20]
 800c328:	e076      	b.n	800c418 <_strtod_l+0x600>
 800c32a:	f012 0f01 	tst.w	r2, #1
 800c32e:	d004      	beq.n	800c33a <_strtod_l+0x522>
 800c330:	ed97 6b00 	vldr	d6, [r7]
 800c334:	2001      	movs	r0, #1
 800c336:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c33a:	3101      	adds	r1, #1
 800c33c:	1052      	asrs	r2, r2, #1
 800c33e:	3708      	adds	r7, #8
 800c340:	e7cd      	b.n	800c2de <_strtod_l+0x4c6>
 800c342:	d0ef      	beq.n	800c324 <_strtod_l+0x50c>
 800c344:	4252      	negs	r2, r2
 800c346:	f012 000f 	ands.w	r0, r2, #15
 800c34a:	d00a      	beq.n	800c362 <_strtod_l+0x54a>
 800c34c:	4911      	ldr	r1, [pc, #68]	; (800c394 <_strtod_l+0x57c>)
 800c34e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c352:	ed91 7b00 	vldr	d7, [r1]
 800c356:	ec49 8b16 	vmov	d6, r8, r9
 800c35a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c35e:	ec59 8b17 	vmov	r8, r9, d7
 800c362:	1112      	asrs	r2, r2, #4
 800c364:	d0de      	beq.n	800c324 <_strtod_l+0x50c>
 800c366:	2a1f      	cmp	r2, #31
 800c368:	dd1e      	ble.n	800c3a8 <_strtod_l+0x590>
 800c36a:	2500      	movs	r5, #0
 800c36c:	462e      	mov	r6, r5
 800c36e:	9507      	str	r5, [sp, #28]
 800c370:	462f      	mov	r7, r5
 800c372:	2322      	movs	r3, #34	; 0x22
 800c374:	f04f 0800 	mov.w	r8, #0
 800c378:	f04f 0900 	mov.w	r9, #0
 800c37c:	6023      	str	r3, [r4, #0]
 800c37e:	e78f      	b.n	800c2a0 <_strtod_l+0x488>
 800c380:	0800dcf1 	.word	0x0800dcf1
 800c384:	0800df1c 	.word	0x0800df1c
 800c388:	0800dce9 	.word	0x0800dce9
 800c38c:	0800dd20 	.word	0x0800dd20
 800c390:	0800e0ad 	.word	0x0800e0ad
 800c394:	0800de30 	.word	0x0800de30
 800c398:	0800de08 	.word	0x0800de08
 800c39c:	7ca00000 	.word	0x7ca00000
 800c3a0:	7ff00000 	.word	0x7ff00000
 800c3a4:	7fefffff 	.word	0x7fefffff
 800c3a8:	f012 0110 	ands.w	r1, r2, #16
 800c3ac:	bf18      	it	ne
 800c3ae:	216a      	movne	r1, #106	; 0x6a
 800c3b0:	9105      	str	r1, [sp, #20]
 800c3b2:	ec49 8b17 	vmov	d7, r8, r9
 800c3b6:	49be      	ldr	r1, [pc, #760]	; (800c6b0 <_strtod_l+0x898>)
 800c3b8:	2000      	movs	r0, #0
 800c3ba:	07d7      	lsls	r7, r2, #31
 800c3bc:	d504      	bpl.n	800c3c8 <_strtod_l+0x5b0>
 800c3be:	ed91 6b00 	vldr	d6, [r1]
 800c3c2:	2001      	movs	r0, #1
 800c3c4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c3c8:	1052      	asrs	r2, r2, #1
 800c3ca:	f101 0108 	add.w	r1, r1, #8
 800c3ce:	d1f4      	bne.n	800c3ba <_strtod_l+0x5a2>
 800c3d0:	b108      	cbz	r0, 800c3d6 <_strtod_l+0x5be>
 800c3d2:	ec59 8b17 	vmov	r8, r9, d7
 800c3d6:	9a05      	ldr	r2, [sp, #20]
 800c3d8:	b1ba      	cbz	r2, 800c40a <_strtod_l+0x5f2>
 800c3da:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800c3de:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800c3e2:	2a00      	cmp	r2, #0
 800c3e4:	4648      	mov	r0, r9
 800c3e6:	dd10      	ble.n	800c40a <_strtod_l+0x5f2>
 800c3e8:	2a1f      	cmp	r2, #31
 800c3ea:	f340 812c 	ble.w	800c646 <_strtod_l+0x82e>
 800c3ee:	2a34      	cmp	r2, #52	; 0x34
 800c3f0:	bfde      	ittt	le
 800c3f2:	f04f 32ff 	movle.w	r2, #4294967295
 800c3f6:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800c3fa:	408a      	lslle	r2, r1
 800c3fc:	f04f 0800 	mov.w	r8, #0
 800c400:	bfcc      	ite	gt
 800c402:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800c406:	ea02 0900 	andle.w	r9, r2, r0
 800c40a:	ec49 8b17 	vmov	d7, r8, r9
 800c40e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c416:	d0a8      	beq.n	800c36a <_strtod_l+0x552>
 800c418:	9a07      	ldr	r2, [sp, #28]
 800c41a:	9200      	str	r2, [sp, #0]
 800c41c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c41e:	4632      	mov	r2, r6
 800c420:	4620      	mov	r0, r4
 800c422:	f7ff f8dd 	bl	800b5e0 <__s2b>
 800c426:	9007      	str	r0, [sp, #28]
 800c428:	2800      	cmp	r0, #0
 800c42a:	f43f af2f 	beq.w	800c28c <_strtod_l+0x474>
 800c42e:	9a06      	ldr	r2, [sp, #24]
 800c430:	2a00      	cmp	r2, #0
 800c432:	ebab 0305 	sub.w	r3, fp, r5
 800c436:	ed9f 9b96 	vldr	d9, [pc, #600]	; 800c690 <_strtod_l+0x878>
 800c43a:	bfa8      	it	ge
 800c43c:	2300      	movge	r3, #0
 800c43e:	ed9f ab96 	vldr	d10, [pc, #600]	; 800c698 <_strtod_l+0x880>
 800c442:	ed9f bb97 	vldr	d11, [pc, #604]	; 800c6a0 <_strtod_l+0x888>
 800c446:	9309      	str	r3, [sp, #36]	; 0x24
 800c448:	2500      	movs	r5, #0
 800c44a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c44e:	930c      	str	r3, [sp, #48]	; 0x30
 800c450:	462e      	mov	r6, r5
 800c452:	9b07      	ldr	r3, [sp, #28]
 800c454:	4620      	mov	r0, r4
 800c456:	6859      	ldr	r1, [r3, #4]
 800c458:	f7ff f81a 	bl	800b490 <_Balloc>
 800c45c:	4607      	mov	r7, r0
 800c45e:	2800      	cmp	r0, #0
 800c460:	f43f af18 	beq.w	800c294 <_strtod_l+0x47c>
 800c464:	9b07      	ldr	r3, [sp, #28]
 800c466:	691a      	ldr	r2, [r3, #16]
 800c468:	3202      	adds	r2, #2
 800c46a:	f103 010c 	add.w	r1, r3, #12
 800c46e:	0092      	lsls	r2, r2, #2
 800c470:	300c      	adds	r0, #12
 800c472:	f000 fd4f 	bl	800cf14 <memcpy>
 800c476:	ec49 8b10 	vmov	d0, r8, r9
 800c47a:	aa14      	add	r2, sp, #80	; 0x50
 800c47c:	a913      	add	r1, sp, #76	; 0x4c
 800c47e:	4620      	mov	r0, r4
 800c480:	f7ff fbe2 	bl	800bc48 <__d2b>
 800c484:	ec49 8b18 	vmov	d8, r8, r9
 800c488:	9012      	str	r0, [sp, #72]	; 0x48
 800c48a:	2800      	cmp	r0, #0
 800c48c:	f43f af02 	beq.w	800c294 <_strtod_l+0x47c>
 800c490:	2101      	movs	r1, #1
 800c492:	4620      	mov	r0, r4
 800c494:	f7ff f93c 	bl	800b710 <__i2b>
 800c498:	4606      	mov	r6, r0
 800c49a:	2800      	cmp	r0, #0
 800c49c:	f43f aefa 	beq.w	800c294 <_strtod_l+0x47c>
 800c4a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c4a2:	9914      	ldr	r1, [sp, #80]	; 0x50
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	bfab      	itete	ge
 800c4a8:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800c4aa:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800c4ac:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800c4b0:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800c4b4:	bfac      	ite	ge
 800c4b6:	eb03 0b02 	addge.w	fp, r3, r2
 800c4ba:	eba2 0a03 	sublt.w	sl, r2, r3
 800c4be:	9a05      	ldr	r2, [sp, #20]
 800c4c0:	1a9b      	subs	r3, r3, r2
 800c4c2:	440b      	add	r3, r1
 800c4c4:	4a7b      	ldr	r2, [pc, #492]	; (800c6b4 <_strtod_l+0x89c>)
 800c4c6:	3b01      	subs	r3, #1
 800c4c8:	4293      	cmp	r3, r2
 800c4ca:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800c4ce:	f280 80cd 	bge.w	800c66c <_strtod_l+0x854>
 800c4d2:	1ad2      	subs	r2, r2, r3
 800c4d4:	2a1f      	cmp	r2, #31
 800c4d6:	eba1 0102 	sub.w	r1, r1, r2
 800c4da:	f04f 0001 	mov.w	r0, #1
 800c4de:	f300 80b9 	bgt.w	800c654 <_strtod_l+0x83c>
 800c4e2:	fa00 f302 	lsl.w	r3, r0, r2
 800c4e6:	930b      	str	r3, [sp, #44]	; 0x2c
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	930a      	str	r3, [sp, #40]	; 0x28
 800c4ec:	eb0b 0301 	add.w	r3, fp, r1
 800c4f0:	9a05      	ldr	r2, [sp, #20]
 800c4f2:	459b      	cmp	fp, r3
 800c4f4:	448a      	add	sl, r1
 800c4f6:	4492      	add	sl, r2
 800c4f8:	465a      	mov	r2, fp
 800c4fa:	bfa8      	it	ge
 800c4fc:	461a      	movge	r2, r3
 800c4fe:	4552      	cmp	r2, sl
 800c500:	bfa8      	it	ge
 800c502:	4652      	movge	r2, sl
 800c504:	2a00      	cmp	r2, #0
 800c506:	bfc2      	ittt	gt
 800c508:	1a9b      	subgt	r3, r3, r2
 800c50a:	ebaa 0a02 	subgt.w	sl, sl, r2
 800c50e:	ebab 0b02 	subgt.w	fp, fp, r2
 800c512:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c514:	2a00      	cmp	r2, #0
 800c516:	dd18      	ble.n	800c54a <_strtod_l+0x732>
 800c518:	4631      	mov	r1, r6
 800c51a:	4620      	mov	r0, r4
 800c51c:	930f      	str	r3, [sp, #60]	; 0x3c
 800c51e:	f7ff f9b7 	bl	800b890 <__pow5mult>
 800c522:	4606      	mov	r6, r0
 800c524:	2800      	cmp	r0, #0
 800c526:	f43f aeb5 	beq.w	800c294 <_strtod_l+0x47c>
 800c52a:	4601      	mov	r1, r0
 800c52c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c52e:	4620      	mov	r0, r4
 800c530:	f7ff f904 	bl	800b73c <__multiply>
 800c534:	900e      	str	r0, [sp, #56]	; 0x38
 800c536:	2800      	cmp	r0, #0
 800c538:	f43f aeac 	beq.w	800c294 <_strtod_l+0x47c>
 800c53c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c53e:	4620      	mov	r0, r4
 800c540:	f7fe ffe6 	bl	800b510 <_Bfree>
 800c544:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c546:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c548:	9212      	str	r2, [sp, #72]	; 0x48
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	f300 8093 	bgt.w	800c676 <_strtod_l+0x85e>
 800c550:	9b06      	ldr	r3, [sp, #24]
 800c552:	2b00      	cmp	r3, #0
 800c554:	dd08      	ble.n	800c568 <_strtod_l+0x750>
 800c556:	4639      	mov	r1, r7
 800c558:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c55a:	4620      	mov	r0, r4
 800c55c:	f7ff f998 	bl	800b890 <__pow5mult>
 800c560:	4607      	mov	r7, r0
 800c562:	2800      	cmp	r0, #0
 800c564:	f43f ae96 	beq.w	800c294 <_strtod_l+0x47c>
 800c568:	f1ba 0f00 	cmp.w	sl, #0
 800c56c:	dd08      	ble.n	800c580 <_strtod_l+0x768>
 800c56e:	4639      	mov	r1, r7
 800c570:	4652      	mov	r2, sl
 800c572:	4620      	mov	r0, r4
 800c574:	f7ff f9e6 	bl	800b944 <__lshift>
 800c578:	4607      	mov	r7, r0
 800c57a:	2800      	cmp	r0, #0
 800c57c:	f43f ae8a 	beq.w	800c294 <_strtod_l+0x47c>
 800c580:	f1bb 0f00 	cmp.w	fp, #0
 800c584:	dd08      	ble.n	800c598 <_strtod_l+0x780>
 800c586:	4631      	mov	r1, r6
 800c588:	465a      	mov	r2, fp
 800c58a:	4620      	mov	r0, r4
 800c58c:	f7ff f9da 	bl	800b944 <__lshift>
 800c590:	4606      	mov	r6, r0
 800c592:	2800      	cmp	r0, #0
 800c594:	f43f ae7e 	beq.w	800c294 <_strtod_l+0x47c>
 800c598:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c59a:	463a      	mov	r2, r7
 800c59c:	4620      	mov	r0, r4
 800c59e:	f7ff fa59 	bl	800ba54 <__mdiff>
 800c5a2:	4605      	mov	r5, r0
 800c5a4:	2800      	cmp	r0, #0
 800c5a6:	f43f ae75 	beq.w	800c294 <_strtod_l+0x47c>
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800c5b0:	60c3      	str	r3, [r0, #12]
 800c5b2:	4631      	mov	r1, r6
 800c5b4:	f7ff fa32 	bl	800ba1c <__mcmp>
 800c5b8:	2800      	cmp	r0, #0
 800c5ba:	da7f      	bge.n	800c6bc <_strtod_l+0x8a4>
 800c5bc:	ea5a 0a08 	orrs.w	sl, sl, r8
 800c5c0:	f040 80a5 	bne.w	800c70e <_strtod_l+0x8f6>
 800c5c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	f040 80a0 	bne.w	800c70e <_strtod_l+0x8f6>
 800c5ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c5d2:	0d1b      	lsrs	r3, r3, #20
 800c5d4:	051b      	lsls	r3, r3, #20
 800c5d6:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c5da:	f240 8098 	bls.w	800c70e <_strtod_l+0x8f6>
 800c5de:	696b      	ldr	r3, [r5, #20]
 800c5e0:	b91b      	cbnz	r3, 800c5ea <_strtod_l+0x7d2>
 800c5e2:	692b      	ldr	r3, [r5, #16]
 800c5e4:	2b01      	cmp	r3, #1
 800c5e6:	f340 8092 	ble.w	800c70e <_strtod_l+0x8f6>
 800c5ea:	4629      	mov	r1, r5
 800c5ec:	2201      	movs	r2, #1
 800c5ee:	4620      	mov	r0, r4
 800c5f0:	f7ff f9a8 	bl	800b944 <__lshift>
 800c5f4:	4631      	mov	r1, r6
 800c5f6:	4605      	mov	r5, r0
 800c5f8:	f7ff fa10 	bl	800ba1c <__mcmp>
 800c5fc:	2800      	cmp	r0, #0
 800c5fe:	f340 8086 	ble.w	800c70e <_strtod_l+0x8f6>
 800c602:	9905      	ldr	r1, [sp, #20]
 800c604:	4a2c      	ldr	r2, [pc, #176]	; (800c6b8 <_strtod_l+0x8a0>)
 800c606:	464b      	mov	r3, r9
 800c608:	2900      	cmp	r1, #0
 800c60a:	f000 809f 	beq.w	800c74c <_strtod_l+0x934>
 800c60e:	ea02 0109 	and.w	r1, r2, r9
 800c612:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c616:	f300 8099 	bgt.w	800c74c <_strtod_l+0x934>
 800c61a:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c61e:	f77f aea8 	ble.w	800c372 <_strtod_l+0x55a>
 800c622:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800c6a8 <_strtod_l+0x890>
 800c626:	ec49 8b16 	vmov	d6, r8, r9
 800c62a:	4b23      	ldr	r3, [pc, #140]	; (800c6b8 <_strtod_l+0x8a0>)
 800c62c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c630:	ee17 2a90 	vmov	r2, s15
 800c634:	4013      	ands	r3, r2
 800c636:	ec59 8b17 	vmov	r8, r9, d7
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	f47f ae34 	bne.w	800c2a8 <_strtod_l+0x490>
 800c640:	2322      	movs	r3, #34	; 0x22
 800c642:	6023      	str	r3, [r4, #0]
 800c644:	e630      	b.n	800c2a8 <_strtod_l+0x490>
 800c646:	f04f 31ff 	mov.w	r1, #4294967295
 800c64a:	fa01 f202 	lsl.w	r2, r1, r2
 800c64e:	ea02 0808 	and.w	r8, r2, r8
 800c652:	e6da      	b.n	800c40a <_strtod_l+0x5f2>
 800c654:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800c658:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800c65c:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800c660:	33e2      	adds	r3, #226	; 0xe2
 800c662:	fa00 f303 	lsl.w	r3, r0, r3
 800c666:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800c66a:	e73f      	b.n	800c4ec <_strtod_l+0x6d4>
 800c66c:	2200      	movs	r2, #0
 800c66e:	2301      	movs	r3, #1
 800c670:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c674:	e73a      	b.n	800c4ec <_strtod_l+0x6d4>
 800c676:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c678:	461a      	mov	r2, r3
 800c67a:	4620      	mov	r0, r4
 800c67c:	f7ff f962 	bl	800b944 <__lshift>
 800c680:	9012      	str	r0, [sp, #72]	; 0x48
 800c682:	2800      	cmp	r0, #0
 800c684:	f47f af64 	bne.w	800c550 <_strtod_l+0x738>
 800c688:	e604      	b.n	800c294 <_strtod_l+0x47c>
 800c68a:	bf00      	nop
 800c68c:	f3af 8000 	nop.w
 800c690:	94a03595 	.word	0x94a03595
 800c694:	3fcfffff 	.word	0x3fcfffff
 800c698:	94a03595 	.word	0x94a03595
 800c69c:	3fdfffff 	.word	0x3fdfffff
 800c6a0:	35afe535 	.word	0x35afe535
 800c6a4:	3fe00000 	.word	0x3fe00000
 800c6a8:	00000000 	.word	0x00000000
 800c6ac:	39500000 	.word	0x39500000
 800c6b0:	0800df30 	.word	0x0800df30
 800c6b4:	fffffc02 	.word	0xfffffc02
 800c6b8:	7ff00000 	.word	0x7ff00000
 800c6bc:	46cb      	mov	fp, r9
 800c6be:	d15f      	bne.n	800c780 <_strtod_l+0x968>
 800c6c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c6c4:	f1ba 0f00 	cmp.w	sl, #0
 800c6c8:	d02a      	beq.n	800c720 <_strtod_l+0x908>
 800c6ca:	4aa7      	ldr	r2, [pc, #668]	; (800c968 <_strtod_l+0xb50>)
 800c6cc:	4293      	cmp	r3, r2
 800c6ce:	d12b      	bne.n	800c728 <_strtod_l+0x910>
 800c6d0:	9b05      	ldr	r3, [sp, #20]
 800c6d2:	4642      	mov	r2, r8
 800c6d4:	b1fb      	cbz	r3, 800c716 <_strtod_l+0x8fe>
 800c6d6:	4ba5      	ldr	r3, [pc, #660]	; (800c96c <_strtod_l+0xb54>)
 800c6d8:	ea09 0303 	and.w	r3, r9, r3
 800c6dc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c6e0:	f04f 31ff 	mov.w	r1, #4294967295
 800c6e4:	d81a      	bhi.n	800c71c <_strtod_l+0x904>
 800c6e6:	0d1b      	lsrs	r3, r3, #20
 800c6e8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c6ec:	fa01 f303 	lsl.w	r3, r1, r3
 800c6f0:	429a      	cmp	r2, r3
 800c6f2:	d119      	bne.n	800c728 <_strtod_l+0x910>
 800c6f4:	4b9e      	ldr	r3, [pc, #632]	; (800c970 <_strtod_l+0xb58>)
 800c6f6:	459b      	cmp	fp, r3
 800c6f8:	d102      	bne.n	800c700 <_strtod_l+0x8e8>
 800c6fa:	3201      	adds	r2, #1
 800c6fc:	f43f adca 	beq.w	800c294 <_strtod_l+0x47c>
 800c700:	4b9a      	ldr	r3, [pc, #616]	; (800c96c <_strtod_l+0xb54>)
 800c702:	ea0b 0303 	and.w	r3, fp, r3
 800c706:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800c70a:	f04f 0800 	mov.w	r8, #0
 800c70e:	9b05      	ldr	r3, [sp, #20]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d186      	bne.n	800c622 <_strtod_l+0x80a>
 800c714:	e5c8      	b.n	800c2a8 <_strtod_l+0x490>
 800c716:	f04f 33ff 	mov.w	r3, #4294967295
 800c71a:	e7e9      	b.n	800c6f0 <_strtod_l+0x8d8>
 800c71c:	460b      	mov	r3, r1
 800c71e:	e7e7      	b.n	800c6f0 <_strtod_l+0x8d8>
 800c720:	ea53 0308 	orrs.w	r3, r3, r8
 800c724:	f43f af6d 	beq.w	800c602 <_strtod_l+0x7ea>
 800c728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c72a:	b1cb      	cbz	r3, 800c760 <_strtod_l+0x948>
 800c72c:	ea13 0f0b 	tst.w	r3, fp
 800c730:	d0ed      	beq.n	800c70e <_strtod_l+0x8f6>
 800c732:	9a05      	ldr	r2, [sp, #20]
 800c734:	4640      	mov	r0, r8
 800c736:	4649      	mov	r1, r9
 800c738:	f1ba 0f00 	cmp.w	sl, #0
 800c73c:	d014      	beq.n	800c768 <_strtod_l+0x950>
 800c73e:	f7ff fb51 	bl	800bde4 <sulp>
 800c742:	ee38 7b00 	vadd.f64	d7, d8, d0
 800c746:	ec59 8b17 	vmov	r8, r9, d7
 800c74a:	e7e0      	b.n	800c70e <_strtod_l+0x8f6>
 800c74c:	4013      	ands	r3, r2
 800c74e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c752:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800c756:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800c75a:	f04f 38ff 	mov.w	r8, #4294967295
 800c75e:	e7d6      	b.n	800c70e <_strtod_l+0x8f6>
 800c760:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c762:	ea13 0f08 	tst.w	r3, r8
 800c766:	e7e3      	b.n	800c730 <_strtod_l+0x918>
 800c768:	f7ff fb3c 	bl	800bde4 <sulp>
 800c76c:	ee38 0b40 	vsub.f64	d0, d8, d0
 800c770:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800c774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c778:	ec59 8b10 	vmov	r8, r9, d0
 800c77c:	d1c7      	bne.n	800c70e <_strtod_l+0x8f6>
 800c77e:	e5f8      	b.n	800c372 <_strtod_l+0x55a>
 800c780:	4631      	mov	r1, r6
 800c782:	4628      	mov	r0, r5
 800c784:	f7ff faba 	bl	800bcfc <__ratio>
 800c788:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800c78c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800c790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c794:	d85f      	bhi.n	800c856 <_strtod_l+0xa3e>
 800c796:	f1ba 0f00 	cmp.w	sl, #0
 800c79a:	d166      	bne.n	800c86a <_strtod_l+0xa52>
 800c79c:	f1b8 0f00 	cmp.w	r8, #0
 800c7a0:	d14d      	bne.n	800c83e <_strtod_l+0xa26>
 800c7a2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c7a6:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d162      	bne.n	800c874 <_strtod_l+0xa5c>
 800c7ae:	eeb4 0bcd 	vcmpe.f64	d0, d13
 800c7b2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800c7b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7ba:	d401      	bmi.n	800c7c0 <_strtod_l+0x9a8>
 800c7bc:	ee20 db0d 	vmul.f64	d13, d0, d13
 800c7c0:	eeb1 cb4d 	vneg.f64	d12, d13
 800c7c4:	4869      	ldr	r0, [pc, #420]	; (800c96c <_strtod_l+0xb54>)
 800c7c6:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 800c978 <_strtod_l+0xb60>
 800c7ca:	ea0b 0100 	and.w	r1, fp, r0
 800c7ce:	4561      	cmp	r1, ip
 800c7d0:	ec53 2b1c 	vmov	r2, r3, d12
 800c7d4:	d17a      	bne.n	800c8cc <_strtod_l+0xab4>
 800c7d6:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800c7da:	ec49 8b10 	vmov	d0, r8, r9
 800c7de:	910a      	str	r1, [sp, #40]	; 0x28
 800c7e0:	f7ff f9c2 	bl	800bb68 <__ulp>
 800c7e4:	ec49 8b1e 	vmov	d14, r8, r9
 800c7e8:	4860      	ldr	r0, [pc, #384]	; (800c96c <_strtod_l+0xb54>)
 800c7ea:	eea0 eb0c 	vfma.f64	d14, d0, d12
 800c7ee:	ee1e 3a90 	vmov	r3, s29
 800c7f2:	4a60      	ldr	r2, [pc, #384]	; (800c974 <_strtod_l+0xb5c>)
 800c7f4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c7f6:	4018      	ands	r0, r3
 800c7f8:	4290      	cmp	r0, r2
 800c7fa:	ec59 8b1e 	vmov	r8, r9, d14
 800c7fe:	d93c      	bls.n	800c87a <_strtod_l+0xa62>
 800c800:	ee18 2a90 	vmov	r2, s17
 800c804:	4b5a      	ldr	r3, [pc, #360]	; (800c970 <_strtod_l+0xb58>)
 800c806:	429a      	cmp	r2, r3
 800c808:	d104      	bne.n	800c814 <_strtod_l+0x9fc>
 800c80a:	ee18 3a10 	vmov	r3, s16
 800c80e:	3301      	adds	r3, #1
 800c810:	f43f ad40 	beq.w	800c294 <_strtod_l+0x47c>
 800c814:	f8df 9158 	ldr.w	r9, [pc, #344]	; 800c970 <_strtod_l+0xb58>
 800c818:	f04f 38ff 	mov.w	r8, #4294967295
 800c81c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c81e:	4620      	mov	r0, r4
 800c820:	f7fe fe76 	bl	800b510 <_Bfree>
 800c824:	4639      	mov	r1, r7
 800c826:	4620      	mov	r0, r4
 800c828:	f7fe fe72 	bl	800b510 <_Bfree>
 800c82c:	4631      	mov	r1, r6
 800c82e:	4620      	mov	r0, r4
 800c830:	f7fe fe6e 	bl	800b510 <_Bfree>
 800c834:	4629      	mov	r1, r5
 800c836:	4620      	mov	r0, r4
 800c838:	f7fe fe6a 	bl	800b510 <_Bfree>
 800c83c:	e609      	b.n	800c452 <_strtod_l+0x63a>
 800c83e:	f1b8 0f01 	cmp.w	r8, #1
 800c842:	d103      	bne.n	800c84c <_strtod_l+0xa34>
 800c844:	f1b9 0f00 	cmp.w	r9, #0
 800c848:	f43f ad93 	beq.w	800c372 <_strtod_l+0x55a>
 800c84c:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 800c850:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800c854:	e7b6      	b.n	800c7c4 <_strtod_l+0x9ac>
 800c856:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800c85a:	ee20 db0d 	vmul.f64	d13, d0, d13
 800c85e:	f1ba 0f00 	cmp.w	sl, #0
 800c862:	d0ad      	beq.n	800c7c0 <_strtod_l+0x9a8>
 800c864:	eeb0 cb4d 	vmov.f64	d12, d13
 800c868:	e7ac      	b.n	800c7c4 <_strtod_l+0x9ac>
 800c86a:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 800c86e:	eeb0 db4c 	vmov.f64	d13, d12
 800c872:	e7a7      	b.n	800c7c4 <_strtod_l+0x9ac>
 800c874:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 800c878:	e7a4      	b.n	800c7c4 <_strtod_l+0x9ac>
 800c87a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800c87e:	9b05      	ldr	r3, [sp, #20]
 800c880:	46cb      	mov	fp, r9
 800c882:	2b00      	cmp	r3, #0
 800c884:	d1ca      	bne.n	800c81c <_strtod_l+0xa04>
 800c886:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c88a:	0d1b      	lsrs	r3, r3, #20
 800c88c:	051b      	lsls	r3, r3, #20
 800c88e:	4299      	cmp	r1, r3
 800c890:	d1c4      	bne.n	800c81c <_strtod_l+0xa04>
 800c892:	ec51 0b1d 	vmov	r0, r1, d13
 800c896:	f7f3 ff4f 	bl	8000738 <__aeabi_d2lz>
 800c89a:	f7f3 ff07 	bl	80006ac <__aeabi_l2d>
 800c89e:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 800c8a2:	ec41 0b17 	vmov	d7, r0, r1
 800c8a6:	ea4b 0b08 	orr.w	fp, fp, r8
 800c8aa:	ea5b 0b0a 	orrs.w	fp, fp, sl
 800c8ae:	ee3d db47 	vsub.f64	d13, d13, d7
 800c8b2:	d03c      	beq.n	800c92e <_strtod_l+0xb16>
 800c8b4:	eeb4 dbca 	vcmpe.f64	d13, d10
 800c8b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8bc:	f53f acf4 	bmi.w	800c2a8 <_strtod_l+0x490>
 800c8c0:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800c8c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8c8:	dda8      	ble.n	800c81c <_strtod_l+0xa04>
 800c8ca:	e4ed      	b.n	800c2a8 <_strtod_l+0x490>
 800c8cc:	9805      	ldr	r0, [sp, #20]
 800c8ce:	b1f0      	cbz	r0, 800c90e <_strtod_l+0xaf6>
 800c8d0:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800c8d4:	d81b      	bhi.n	800c90e <_strtod_l+0xaf6>
 800c8d6:	ed9f 7b22 	vldr	d7, [pc, #136]	; 800c960 <_strtod_l+0xb48>
 800c8da:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800c8de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8e2:	d811      	bhi.n	800c908 <_strtod_l+0xaf0>
 800c8e4:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800c8e8:	ee1d 3a10 	vmov	r3, s26
 800c8ec:	2b01      	cmp	r3, #1
 800c8ee:	bf38      	it	cc
 800c8f0:	2301      	movcc	r3, #1
 800c8f2:	ee0d 3a10 	vmov	s26, r3
 800c8f6:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800c8fa:	f1ba 0f00 	cmp.w	sl, #0
 800c8fe:	d113      	bne.n	800c928 <_strtod_l+0xb10>
 800c900:	eeb1 7b4d 	vneg.f64	d7, d13
 800c904:	ec53 2b17 	vmov	r2, r3, d7
 800c908:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800c90c:	1a43      	subs	r3, r0, r1
 800c90e:	eeb0 0b48 	vmov.f64	d0, d8
 800c912:	ec43 2b1c 	vmov	d12, r2, r3
 800c916:	910a      	str	r1, [sp, #40]	; 0x28
 800c918:	f7ff f926 	bl	800bb68 <__ulp>
 800c91c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c91e:	eeac 8b00 	vfma.f64	d8, d12, d0
 800c922:	ec59 8b18 	vmov	r8, r9, d8
 800c926:	e7aa      	b.n	800c87e <_strtod_l+0xa66>
 800c928:	eeb0 7b4d 	vmov.f64	d7, d13
 800c92c:	e7ea      	b.n	800c904 <_strtod_l+0xaec>
 800c92e:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800c932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c936:	f57f af71 	bpl.w	800c81c <_strtod_l+0xa04>
 800c93a:	e4b5      	b.n	800c2a8 <_strtod_l+0x490>
 800c93c:	2300      	movs	r3, #0
 800c93e:	9308      	str	r3, [sp, #32]
 800c940:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c942:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c944:	6013      	str	r3, [r2, #0]
 800c946:	f7ff baa6 	b.w	800be96 <_strtod_l+0x7e>
 800c94a:	2a65      	cmp	r2, #101	; 0x65
 800c94c:	f43f aba2 	beq.w	800c094 <_strtod_l+0x27c>
 800c950:	2a45      	cmp	r2, #69	; 0x45
 800c952:	f43f ab9f 	beq.w	800c094 <_strtod_l+0x27c>
 800c956:	2101      	movs	r1, #1
 800c958:	f7ff bbd8 	b.w	800c10c <_strtod_l+0x2f4>
 800c95c:	f3af 8000 	nop.w
 800c960:	ffc00000 	.word	0xffc00000
 800c964:	41dfffff 	.word	0x41dfffff
 800c968:	000fffff 	.word	0x000fffff
 800c96c:	7ff00000 	.word	0x7ff00000
 800c970:	7fefffff 	.word	0x7fefffff
 800c974:	7c9fffff 	.word	0x7c9fffff
 800c978:	7fe00000 	.word	0x7fe00000

0800c97c <_strtod_r>:
 800c97c:	4b01      	ldr	r3, [pc, #4]	; (800c984 <_strtod_r+0x8>)
 800c97e:	f7ff ba4b 	b.w	800be18 <_strtod_l>
 800c982:	bf00      	nop
 800c984:	2400006c 	.word	0x2400006c

0800c988 <_strtol_l.constprop.0>:
 800c988:	2b01      	cmp	r3, #1
 800c98a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c98e:	d001      	beq.n	800c994 <_strtol_l.constprop.0+0xc>
 800c990:	2b24      	cmp	r3, #36	; 0x24
 800c992:	d906      	bls.n	800c9a2 <_strtol_l.constprop.0+0x1a>
 800c994:	f7fd fe54 	bl	800a640 <__errno>
 800c998:	2316      	movs	r3, #22
 800c99a:	6003      	str	r3, [r0, #0]
 800c99c:	2000      	movs	r0, #0
 800c99e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9a2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ca88 <_strtol_l.constprop.0+0x100>
 800c9a6:	460d      	mov	r5, r1
 800c9a8:	462e      	mov	r6, r5
 800c9aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c9ae:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800c9b2:	f017 0708 	ands.w	r7, r7, #8
 800c9b6:	d1f7      	bne.n	800c9a8 <_strtol_l.constprop.0+0x20>
 800c9b8:	2c2d      	cmp	r4, #45	; 0x2d
 800c9ba:	d132      	bne.n	800ca22 <_strtol_l.constprop.0+0x9a>
 800c9bc:	782c      	ldrb	r4, [r5, #0]
 800c9be:	2701      	movs	r7, #1
 800c9c0:	1cb5      	adds	r5, r6, #2
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d05b      	beq.n	800ca7e <_strtol_l.constprop.0+0xf6>
 800c9c6:	2b10      	cmp	r3, #16
 800c9c8:	d109      	bne.n	800c9de <_strtol_l.constprop.0+0x56>
 800c9ca:	2c30      	cmp	r4, #48	; 0x30
 800c9cc:	d107      	bne.n	800c9de <_strtol_l.constprop.0+0x56>
 800c9ce:	782c      	ldrb	r4, [r5, #0]
 800c9d0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c9d4:	2c58      	cmp	r4, #88	; 0x58
 800c9d6:	d14d      	bne.n	800ca74 <_strtol_l.constprop.0+0xec>
 800c9d8:	786c      	ldrb	r4, [r5, #1]
 800c9da:	2310      	movs	r3, #16
 800c9dc:	3502      	adds	r5, #2
 800c9de:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c9e2:	f108 38ff 	add.w	r8, r8, #4294967295
 800c9e6:	f04f 0e00 	mov.w	lr, #0
 800c9ea:	fbb8 f9f3 	udiv	r9, r8, r3
 800c9ee:	4676      	mov	r6, lr
 800c9f0:	fb03 8a19 	mls	sl, r3, r9, r8
 800c9f4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c9f8:	f1bc 0f09 	cmp.w	ip, #9
 800c9fc:	d816      	bhi.n	800ca2c <_strtol_l.constprop.0+0xa4>
 800c9fe:	4664      	mov	r4, ip
 800ca00:	42a3      	cmp	r3, r4
 800ca02:	dd24      	ble.n	800ca4e <_strtol_l.constprop.0+0xc6>
 800ca04:	f1be 3fff 	cmp.w	lr, #4294967295
 800ca08:	d008      	beq.n	800ca1c <_strtol_l.constprop.0+0x94>
 800ca0a:	45b1      	cmp	r9, r6
 800ca0c:	d31c      	bcc.n	800ca48 <_strtol_l.constprop.0+0xc0>
 800ca0e:	d101      	bne.n	800ca14 <_strtol_l.constprop.0+0x8c>
 800ca10:	45a2      	cmp	sl, r4
 800ca12:	db19      	blt.n	800ca48 <_strtol_l.constprop.0+0xc0>
 800ca14:	fb06 4603 	mla	r6, r6, r3, r4
 800ca18:	f04f 0e01 	mov.w	lr, #1
 800ca1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ca20:	e7e8      	b.n	800c9f4 <_strtol_l.constprop.0+0x6c>
 800ca22:	2c2b      	cmp	r4, #43	; 0x2b
 800ca24:	bf04      	itt	eq
 800ca26:	782c      	ldrbeq	r4, [r5, #0]
 800ca28:	1cb5      	addeq	r5, r6, #2
 800ca2a:	e7ca      	b.n	800c9c2 <_strtol_l.constprop.0+0x3a>
 800ca2c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ca30:	f1bc 0f19 	cmp.w	ip, #25
 800ca34:	d801      	bhi.n	800ca3a <_strtol_l.constprop.0+0xb2>
 800ca36:	3c37      	subs	r4, #55	; 0x37
 800ca38:	e7e2      	b.n	800ca00 <_strtol_l.constprop.0+0x78>
 800ca3a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ca3e:	f1bc 0f19 	cmp.w	ip, #25
 800ca42:	d804      	bhi.n	800ca4e <_strtol_l.constprop.0+0xc6>
 800ca44:	3c57      	subs	r4, #87	; 0x57
 800ca46:	e7db      	b.n	800ca00 <_strtol_l.constprop.0+0x78>
 800ca48:	f04f 3eff 	mov.w	lr, #4294967295
 800ca4c:	e7e6      	b.n	800ca1c <_strtol_l.constprop.0+0x94>
 800ca4e:	f1be 3fff 	cmp.w	lr, #4294967295
 800ca52:	d105      	bne.n	800ca60 <_strtol_l.constprop.0+0xd8>
 800ca54:	2322      	movs	r3, #34	; 0x22
 800ca56:	6003      	str	r3, [r0, #0]
 800ca58:	4646      	mov	r6, r8
 800ca5a:	b942      	cbnz	r2, 800ca6e <_strtol_l.constprop.0+0xe6>
 800ca5c:	4630      	mov	r0, r6
 800ca5e:	e79e      	b.n	800c99e <_strtol_l.constprop.0+0x16>
 800ca60:	b107      	cbz	r7, 800ca64 <_strtol_l.constprop.0+0xdc>
 800ca62:	4276      	negs	r6, r6
 800ca64:	2a00      	cmp	r2, #0
 800ca66:	d0f9      	beq.n	800ca5c <_strtol_l.constprop.0+0xd4>
 800ca68:	f1be 0f00 	cmp.w	lr, #0
 800ca6c:	d000      	beq.n	800ca70 <_strtol_l.constprop.0+0xe8>
 800ca6e:	1e69      	subs	r1, r5, #1
 800ca70:	6011      	str	r1, [r2, #0]
 800ca72:	e7f3      	b.n	800ca5c <_strtol_l.constprop.0+0xd4>
 800ca74:	2430      	movs	r4, #48	; 0x30
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d1b1      	bne.n	800c9de <_strtol_l.constprop.0+0x56>
 800ca7a:	2308      	movs	r3, #8
 800ca7c:	e7af      	b.n	800c9de <_strtol_l.constprop.0+0x56>
 800ca7e:	2c30      	cmp	r4, #48	; 0x30
 800ca80:	d0a5      	beq.n	800c9ce <_strtol_l.constprop.0+0x46>
 800ca82:	230a      	movs	r3, #10
 800ca84:	e7ab      	b.n	800c9de <_strtol_l.constprop.0+0x56>
 800ca86:	bf00      	nop
 800ca88:	0800df59 	.word	0x0800df59

0800ca8c <_strtol_r>:
 800ca8c:	f7ff bf7c 	b.w	800c988 <_strtol_l.constprop.0>

0800ca90 <__ssputs_r>:
 800ca90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca94:	688e      	ldr	r6, [r1, #8]
 800ca96:	461f      	mov	r7, r3
 800ca98:	42be      	cmp	r6, r7
 800ca9a:	680b      	ldr	r3, [r1, #0]
 800ca9c:	4682      	mov	sl, r0
 800ca9e:	460c      	mov	r4, r1
 800caa0:	4690      	mov	r8, r2
 800caa2:	d82c      	bhi.n	800cafe <__ssputs_r+0x6e>
 800caa4:	898a      	ldrh	r2, [r1, #12]
 800caa6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800caaa:	d026      	beq.n	800cafa <__ssputs_r+0x6a>
 800caac:	6965      	ldr	r5, [r4, #20]
 800caae:	6909      	ldr	r1, [r1, #16]
 800cab0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cab4:	eba3 0901 	sub.w	r9, r3, r1
 800cab8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cabc:	1c7b      	adds	r3, r7, #1
 800cabe:	444b      	add	r3, r9
 800cac0:	106d      	asrs	r5, r5, #1
 800cac2:	429d      	cmp	r5, r3
 800cac4:	bf38      	it	cc
 800cac6:	461d      	movcc	r5, r3
 800cac8:	0553      	lsls	r3, r2, #21
 800caca:	d527      	bpl.n	800cb1c <__ssputs_r+0x8c>
 800cacc:	4629      	mov	r1, r5
 800cace:	f7fe fc53 	bl	800b378 <_malloc_r>
 800cad2:	4606      	mov	r6, r0
 800cad4:	b360      	cbz	r0, 800cb30 <__ssputs_r+0xa0>
 800cad6:	6921      	ldr	r1, [r4, #16]
 800cad8:	464a      	mov	r2, r9
 800cada:	f000 fa1b 	bl	800cf14 <memcpy>
 800cade:	89a3      	ldrh	r3, [r4, #12]
 800cae0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cae8:	81a3      	strh	r3, [r4, #12]
 800caea:	6126      	str	r6, [r4, #16]
 800caec:	6165      	str	r5, [r4, #20]
 800caee:	444e      	add	r6, r9
 800caf0:	eba5 0509 	sub.w	r5, r5, r9
 800caf4:	6026      	str	r6, [r4, #0]
 800caf6:	60a5      	str	r5, [r4, #8]
 800caf8:	463e      	mov	r6, r7
 800cafa:	42be      	cmp	r6, r7
 800cafc:	d900      	bls.n	800cb00 <__ssputs_r+0x70>
 800cafe:	463e      	mov	r6, r7
 800cb00:	6820      	ldr	r0, [r4, #0]
 800cb02:	4632      	mov	r2, r6
 800cb04:	4641      	mov	r1, r8
 800cb06:	f000 f9c9 	bl	800ce9c <memmove>
 800cb0a:	68a3      	ldr	r3, [r4, #8]
 800cb0c:	1b9b      	subs	r3, r3, r6
 800cb0e:	60a3      	str	r3, [r4, #8]
 800cb10:	6823      	ldr	r3, [r4, #0]
 800cb12:	4433      	add	r3, r6
 800cb14:	6023      	str	r3, [r4, #0]
 800cb16:	2000      	movs	r0, #0
 800cb18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb1c:	462a      	mov	r2, r5
 800cb1e:	f000 fdac 	bl	800d67a <_realloc_r>
 800cb22:	4606      	mov	r6, r0
 800cb24:	2800      	cmp	r0, #0
 800cb26:	d1e0      	bne.n	800caea <__ssputs_r+0x5a>
 800cb28:	6921      	ldr	r1, [r4, #16]
 800cb2a:	4650      	mov	r0, sl
 800cb2c:	f7fe fbb0 	bl	800b290 <_free_r>
 800cb30:	230c      	movs	r3, #12
 800cb32:	f8ca 3000 	str.w	r3, [sl]
 800cb36:	89a3      	ldrh	r3, [r4, #12]
 800cb38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb3c:	81a3      	strh	r3, [r4, #12]
 800cb3e:	f04f 30ff 	mov.w	r0, #4294967295
 800cb42:	e7e9      	b.n	800cb18 <__ssputs_r+0x88>

0800cb44 <_svfiprintf_r>:
 800cb44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb48:	4698      	mov	r8, r3
 800cb4a:	898b      	ldrh	r3, [r1, #12]
 800cb4c:	061b      	lsls	r3, r3, #24
 800cb4e:	b09d      	sub	sp, #116	; 0x74
 800cb50:	4607      	mov	r7, r0
 800cb52:	460d      	mov	r5, r1
 800cb54:	4614      	mov	r4, r2
 800cb56:	d50e      	bpl.n	800cb76 <_svfiprintf_r+0x32>
 800cb58:	690b      	ldr	r3, [r1, #16]
 800cb5a:	b963      	cbnz	r3, 800cb76 <_svfiprintf_r+0x32>
 800cb5c:	2140      	movs	r1, #64	; 0x40
 800cb5e:	f7fe fc0b 	bl	800b378 <_malloc_r>
 800cb62:	6028      	str	r0, [r5, #0]
 800cb64:	6128      	str	r0, [r5, #16]
 800cb66:	b920      	cbnz	r0, 800cb72 <_svfiprintf_r+0x2e>
 800cb68:	230c      	movs	r3, #12
 800cb6a:	603b      	str	r3, [r7, #0]
 800cb6c:	f04f 30ff 	mov.w	r0, #4294967295
 800cb70:	e0d0      	b.n	800cd14 <_svfiprintf_r+0x1d0>
 800cb72:	2340      	movs	r3, #64	; 0x40
 800cb74:	616b      	str	r3, [r5, #20]
 800cb76:	2300      	movs	r3, #0
 800cb78:	9309      	str	r3, [sp, #36]	; 0x24
 800cb7a:	2320      	movs	r3, #32
 800cb7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb80:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb84:	2330      	movs	r3, #48	; 0x30
 800cb86:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cd2c <_svfiprintf_r+0x1e8>
 800cb8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cb8e:	f04f 0901 	mov.w	r9, #1
 800cb92:	4623      	mov	r3, r4
 800cb94:	469a      	mov	sl, r3
 800cb96:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb9a:	b10a      	cbz	r2, 800cba0 <_svfiprintf_r+0x5c>
 800cb9c:	2a25      	cmp	r2, #37	; 0x25
 800cb9e:	d1f9      	bne.n	800cb94 <_svfiprintf_r+0x50>
 800cba0:	ebba 0b04 	subs.w	fp, sl, r4
 800cba4:	d00b      	beq.n	800cbbe <_svfiprintf_r+0x7a>
 800cba6:	465b      	mov	r3, fp
 800cba8:	4622      	mov	r2, r4
 800cbaa:	4629      	mov	r1, r5
 800cbac:	4638      	mov	r0, r7
 800cbae:	f7ff ff6f 	bl	800ca90 <__ssputs_r>
 800cbb2:	3001      	adds	r0, #1
 800cbb4:	f000 80a9 	beq.w	800cd0a <_svfiprintf_r+0x1c6>
 800cbb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cbba:	445a      	add	r2, fp
 800cbbc:	9209      	str	r2, [sp, #36]	; 0x24
 800cbbe:	f89a 3000 	ldrb.w	r3, [sl]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	f000 80a1 	beq.w	800cd0a <_svfiprintf_r+0x1c6>
 800cbc8:	2300      	movs	r3, #0
 800cbca:	f04f 32ff 	mov.w	r2, #4294967295
 800cbce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cbd2:	f10a 0a01 	add.w	sl, sl, #1
 800cbd6:	9304      	str	r3, [sp, #16]
 800cbd8:	9307      	str	r3, [sp, #28]
 800cbda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cbde:	931a      	str	r3, [sp, #104]	; 0x68
 800cbe0:	4654      	mov	r4, sl
 800cbe2:	2205      	movs	r2, #5
 800cbe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbe8:	4850      	ldr	r0, [pc, #320]	; (800cd2c <_svfiprintf_r+0x1e8>)
 800cbea:	f7f3 fb79 	bl	80002e0 <memchr>
 800cbee:	9a04      	ldr	r2, [sp, #16]
 800cbf0:	b9d8      	cbnz	r0, 800cc2a <_svfiprintf_r+0xe6>
 800cbf2:	06d0      	lsls	r0, r2, #27
 800cbf4:	bf44      	itt	mi
 800cbf6:	2320      	movmi	r3, #32
 800cbf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbfc:	0711      	lsls	r1, r2, #28
 800cbfe:	bf44      	itt	mi
 800cc00:	232b      	movmi	r3, #43	; 0x2b
 800cc02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc06:	f89a 3000 	ldrb.w	r3, [sl]
 800cc0a:	2b2a      	cmp	r3, #42	; 0x2a
 800cc0c:	d015      	beq.n	800cc3a <_svfiprintf_r+0xf6>
 800cc0e:	9a07      	ldr	r2, [sp, #28]
 800cc10:	4654      	mov	r4, sl
 800cc12:	2000      	movs	r0, #0
 800cc14:	f04f 0c0a 	mov.w	ip, #10
 800cc18:	4621      	mov	r1, r4
 800cc1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc1e:	3b30      	subs	r3, #48	; 0x30
 800cc20:	2b09      	cmp	r3, #9
 800cc22:	d94d      	bls.n	800ccc0 <_svfiprintf_r+0x17c>
 800cc24:	b1b0      	cbz	r0, 800cc54 <_svfiprintf_r+0x110>
 800cc26:	9207      	str	r2, [sp, #28]
 800cc28:	e014      	b.n	800cc54 <_svfiprintf_r+0x110>
 800cc2a:	eba0 0308 	sub.w	r3, r0, r8
 800cc2e:	fa09 f303 	lsl.w	r3, r9, r3
 800cc32:	4313      	orrs	r3, r2
 800cc34:	9304      	str	r3, [sp, #16]
 800cc36:	46a2      	mov	sl, r4
 800cc38:	e7d2      	b.n	800cbe0 <_svfiprintf_r+0x9c>
 800cc3a:	9b03      	ldr	r3, [sp, #12]
 800cc3c:	1d19      	adds	r1, r3, #4
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	9103      	str	r1, [sp, #12]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	bfbb      	ittet	lt
 800cc46:	425b      	neglt	r3, r3
 800cc48:	f042 0202 	orrlt.w	r2, r2, #2
 800cc4c:	9307      	strge	r3, [sp, #28]
 800cc4e:	9307      	strlt	r3, [sp, #28]
 800cc50:	bfb8      	it	lt
 800cc52:	9204      	strlt	r2, [sp, #16]
 800cc54:	7823      	ldrb	r3, [r4, #0]
 800cc56:	2b2e      	cmp	r3, #46	; 0x2e
 800cc58:	d10c      	bne.n	800cc74 <_svfiprintf_r+0x130>
 800cc5a:	7863      	ldrb	r3, [r4, #1]
 800cc5c:	2b2a      	cmp	r3, #42	; 0x2a
 800cc5e:	d134      	bne.n	800ccca <_svfiprintf_r+0x186>
 800cc60:	9b03      	ldr	r3, [sp, #12]
 800cc62:	1d1a      	adds	r2, r3, #4
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	9203      	str	r2, [sp, #12]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	bfb8      	it	lt
 800cc6c:	f04f 33ff 	movlt.w	r3, #4294967295
 800cc70:	3402      	adds	r4, #2
 800cc72:	9305      	str	r3, [sp, #20]
 800cc74:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800cd3c <_svfiprintf_r+0x1f8>
 800cc78:	7821      	ldrb	r1, [r4, #0]
 800cc7a:	2203      	movs	r2, #3
 800cc7c:	4650      	mov	r0, sl
 800cc7e:	f7f3 fb2f 	bl	80002e0 <memchr>
 800cc82:	b138      	cbz	r0, 800cc94 <_svfiprintf_r+0x150>
 800cc84:	9b04      	ldr	r3, [sp, #16]
 800cc86:	eba0 000a 	sub.w	r0, r0, sl
 800cc8a:	2240      	movs	r2, #64	; 0x40
 800cc8c:	4082      	lsls	r2, r0
 800cc8e:	4313      	orrs	r3, r2
 800cc90:	3401      	adds	r4, #1
 800cc92:	9304      	str	r3, [sp, #16]
 800cc94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc98:	4825      	ldr	r0, [pc, #148]	; (800cd30 <_svfiprintf_r+0x1ec>)
 800cc9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cc9e:	2206      	movs	r2, #6
 800cca0:	f7f3 fb1e 	bl	80002e0 <memchr>
 800cca4:	2800      	cmp	r0, #0
 800cca6:	d038      	beq.n	800cd1a <_svfiprintf_r+0x1d6>
 800cca8:	4b22      	ldr	r3, [pc, #136]	; (800cd34 <_svfiprintf_r+0x1f0>)
 800ccaa:	bb1b      	cbnz	r3, 800ccf4 <_svfiprintf_r+0x1b0>
 800ccac:	9b03      	ldr	r3, [sp, #12]
 800ccae:	3307      	adds	r3, #7
 800ccb0:	f023 0307 	bic.w	r3, r3, #7
 800ccb4:	3308      	adds	r3, #8
 800ccb6:	9303      	str	r3, [sp, #12]
 800ccb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccba:	4433      	add	r3, r6
 800ccbc:	9309      	str	r3, [sp, #36]	; 0x24
 800ccbe:	e768      	b.n	800cb92 <_svfiprintf_r+0x4e>
 800ccc0:	fb0c 3202 	mla	r2, ip, r2, r3
 800ccc4:	460c      	mov	r4, r1
 800ccc6:	2001      	movs	r0, #1
 800ccc8:	e7a6      	b.n	800cc18 <_svfiprintf_r+0xd4>
 800ccca:	2300      	movs	r3, #0
 800cccc:	3401      	adds	r4, #1
 800ccce:	9305      	str	r3, [sp, #20]
 800ccd0:	4619      	mov	r1, r3
 800ccd2:	f04f 0c0a 	mov.w	ip, #10
 800ccd6:	4620      	mov	r0, r4
 800ccd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ccdc:	3a30      	subs	r2, #48	; 0x30
 800ccde:	2a09      	cmp	r2, #9
 800cce0:	d903      	bls.n	800ccea <_svfiprintf_r+0x1a6>
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d0c6      	beq.n	800cc74 <_svfiprintf_r+0x130>
 800cce6:	9105      	str	r1, [sp, #20]
 800cce8:	e7c4      	b.n	800cc74 <_svfiprintf_r+0x130>
 800ccea:	fb0c 2101 	mla	r1, ip, r1, r2
 800ccee:	4604      	mov	r4, r0
 800ccf0:	2301      	movs	r3, #1
 800ccf2:	e7f0      	b.n	800ccd6 <_svfiprintf_r+0x192>
 800ccf4:	ab03      	add	r3, sp, #12
 800ccf6:	9300      	str	r3, [sp, #0]
 800ccf8:	462a      	mov	r2, r5
 800ccfa:	4b0f      	ldr	r3, [pc, #60]	; (800cd38 <_svfiprintf_r+0x1f4>)
 800ccfc:	a904      	add	r1, sp, #16
 800ccfe:	4638      	mov	r0, r7
 800cd00:	f7fc fd56 	bl	80097b0 <_printf_float>
 800cd04:	1c42      	adds	r2, r0, #1
 800cd06:	4606      	mov	r6, r0
 800cd08:	d1d6      	bne.n	800ccb8 <_svfiprintf_r+0x174>
 800cd0a:	89ab      	ldrh	r3, [r5, #12]
 800cd0c:	065b      	lsls	r3, r3, #25
 800cd0e:	f53f af2d 	bmi.w	800cb6c <_svfiprintf_r+0x28>
 800cd12:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cd14:	b01d      	add	sp, #116	; 0x74
 800cd16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd1a:	ab03      	add	r3, sp, #12
 800cd1c:	9300      	str	r3, [sp, #0]
 800cd1e:	462a      	mov	r2, r5
 800cd20:	4b05      	ldr	r3, [pc, #20]	; (800cd38 <_svfiprintf_r+0x1f4>)
 800cd22:	a904      	add	r1, sp, #16
 800cd24:	4638      	mov	r0, r7
 800cd26:	f7fc ffcb 	bl	8009cc0 <_printf_i>
 800cd2a:	e7eb      	b.n	800cd04 <_svfiprintf_r+0x1c0>
 800cd2c:	0800e059 	.word	0x0800e059
 800cd30:	0800e063 	.word	0x0800e063
 800cd34:	080097b1 	.word	0x080097b1
 800cd38:	0800ca91 	.word	0x0800ca91
 800cd3c:	0800e05f 	.word	0x0800e05f

0800cd40 <__sflush_r>:
 800cd40:	898a      	ldrh	r2, [r1, #12]
 800cd42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd46:	4605      	mov	r5, r0
 800cd48:	0710      	lsls	r0, r2, #28
 800cd4a:	460c      	mov	r4, r1
 800cd4c:	d458      	bmi.n	800ce00 <__sflush_r+0xc0>
 800cd4e:	684b      	ldr	r3, [r1, #4]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	dc05      	bgt.n	800cd60 <__sflush_r+0x20>
 800cd54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	dc02      	bgt.n	800cd60 <__sflush_r+0x20>
 800cd5a:	2000      	movs	r0, #0
 800cd5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cd62:	2e00      	cmp	r6, #0
 800cd64:	d0f9      	beq.n	800cd5a <__sflush_r+0x1a>
 800cd66:	2300      	movs	r3, #0
 800cd68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cd6c:	682f      	ldr	r7, [r5, #0]
 800cd6e:	6a21      	ldr	r1, [r4, #32]
 800cd70:	602b      	str	r3, [r5, #0]
 800cd72:	d032      	beq.n	800cdda <__sflush_r+0x9a>
 800cd74:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cd76:	89a3      	ldrh	r3, [r4, #12]
 800cd78:	075a      	lsls	r2, r3, #29
 800cd7a:	d505      	bpl.n	800cd88 <__sflush_r+0x48>
 800cd7c:	6863      	ldr	r3, [r4, #4]
 800cd7e:	1ac0      	subs	r0, r0, r3
 800cd80:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cd82:	b10b      	cbz	r3, 800cd88 <__sflush_r+0x48>
 800cd84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cd86:	1ac0      	subs	r0, r0, r3
 800cd88:	2300      	movs	r3, #0
 800cd8a:	4602      	mov	r2, r0
 800cd8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cd8e:	6a21      	ldr	r1, [r4, #32]
 800cd90:	4628      	mov	r0, r5
 800cd92:	47b0      	blx	r6
 800cd94:	1c43      	adds	r3, r0, #1
 800cd96:	89a3      	ldrh	r3, [r4, #12]
 800cd98:	d106      	bne.n	800cda8 <__sflush_r+0x68>
 800cd9a:	6829      	ldr	r1, [r5, #0]
 800cd9c:	291d      	cmp	r1, #29
 800cd9e:	d82b      	bhi.n	800cdf8 <__sflush_r+0xb8>
 800cda0:	4a29      	ldr	r2, [pc, #164]	; (800ce48 <__sflush_r+0x108>)
 800cda2:	410a      	asrs	r2, r1
 800cda4:	07d6      	lsls	r6, r2, #31
 800cda6:	d427      	bmi.n	800cdf8 <__sflush_r+0xb8>
 800cda8:	2200      	movs	r2, #0
 800cdaa:	6062      	str	r2, [r4, #4]
 800cdac:	04d9      	lsls	r1, r3, #19
 800cdae:	6922      	ldr	r2, [r4, #16]
 800cdb0:	6022      	str	r2, [r4, #0]
 800cdb2:	d504      	bpl.n	800cdbe <__sflush_r+0x7e>
 800cdb4:	1c42      	adds	r2, r0, #1
 800cdb6:	d101      	bne.n	800cdbc <__sflush_r+0x7c>
 800cdb8:	682b      	ldr	r3, [r5, #0]
 800cdba:	b903      	cbnz	r3, 800cdbe <__sflush_r+0x7e>
 800cdbc:	6560      	str	r0, [r4, #84]	; 0x54
 800cdbe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cdc0:	602f      	str	r7, [r5, #0]
 800cdc2:	2900      	cmp	r1, #0
 800cdc4:	d0c9      	beq.n	800cd5a <__sflush_r+0x1a>
 800cdc6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cdca:	4299      	cmp	r1, r3
 800cdcc:	d002      	beq.n	800cdd4 <__sflush_r+0x94>
 800cdce:	4628      	mov	r0, r5
 800cdd0:	f7fe fa5e 	bl	800b290 <_free_r>
 800cdd4:	2000      	movs	r0, #0
 800cdd6:	6360      	str	r0, [r4, #52]	; 0x34
 800cdd8:	e7c0      	b.n	800cd5c <__sflush_r+0x1c>
 800cdda:	2301      	movs	r3, #1
 800cddc:	4628      	mov	r0, r5
 800cdde:	47b0      	blx	r6
 800cde0:	1c41      	adds	r1, r0, #1
 800cde2:	d1c8      	bne.n	800cd76 <__sflush_r+0x36>
 800cde4:	682b      	ldr	r3, [r5, #0]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d0c5      	beq.n	800cd76 <__sflush_r+0x36>
 800cdea:	2b1d      	cmp	r3, #29
 800cdec:	d001      	beq.n	800cdf2 <__sflush_r+0xb2>
 800cdee:	2b16      	cmp	r3, #22
 800cdf0:	d101      	bne.n	800cdf6 <__sflush_r+0xb6>
 800cdf2:	602f      	str	r7, [r5, #0]
 800cdf4:	e7b1      	b.n	800cd5a <__sflush_r+0x1a>
 800cdf6:	89a3      	ldrh	r3, [r4, #12]
 800cdf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cdfc:	81a3      	strh	r3, [r4, #12]
 800cdfe:	e7ad      	b.n	800cd5c <__sflush_r+0x1c>
 800ce00:	690f      	ldr	r7, [r1, #16]
 800ce02:	2f00      	cmp	r7, #0
 800ce04:	d0a9      	beq.n	800cd5a <__sflush_r+0x1a>
 800ce06:	0793      	lsls	r3, r2, #30
 800ce08:	680e      	ldr	r6, [r1, #0]
 800ce0a:	bf08      	it	eq
 800ce0c:	694b      	ldreq	r3, [r1, #20]
 800ce0e:	600f      	str	r7, [r1, #0]
 800ce10:	bf18      	it	ne
 800ce12:	2300      	movne	r3, #0
 800ce14:	eba6 0807 	sub.w	r8, r6, r7
 800ce18:	608b      	str	r3, [r1, #8]
 800ce1a:	f1b8 0f00 	cmp.w	r8, #0
 800ce1e:	dd9c      	ble.n	800cd5a <__sflush_r+0x1a>
 800ce20:	6a21      	ldr	r1, [r4, #32]
 800ce22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ce24:	4643      	mov	r3, r8
 800ce26:	463a      	mov	r2, r7
 800ce28:	4628      	mov	r0, r5
 800ce2a:	47b0      	blx	r6
 800ce2c:	2800      	cmp	r0, #0
 800ce2e:	dc06      	bgt.n	800ce3e <__sflush_r+0xfe>
 800ce30:	89a3      	ldrh	r3, [r4, #12]
 800ce32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce36:	81a3      	strh	r3, [r4, #12]
 800ce38:	f04f 30ff 	mov.w	r0, #4294967295
 800ce3c:	e78e      	b.n	800cd5c <__sflush_r+0x1c>
 800ce3e:	4407      	add	r7, r0
 800ce40:	eba8 0800 	sub.w	r8, r8, r0
 800ce44:	e7e9      	b.n	800ce1a <__sflush_r+0xda>
 800ce46:	bf00      	nop
 800ce48:	dfbffffe 	.word	0xdfbffffe

0800ce4c <_fflush_r>:
 800ce4c:	b538      	push	{r3, r4, r5, lr}
 800ce4e:	690b      	ldr	r3, [r1, #16]
 800ce50:	4605      	mov	r5, r0
 800ce52:	460c      	mov	r4, r1
 800ce54:	b913      	cbnz	r3, 800ce5c <_fflush_r+0x10>
 800ce56:	2500      	movs	r5, #0
 800ce58:	4628      	mov	r0, r5
 800ce5a:	bd38      	pop	{r3, r4, r5, pc}
 800ce5c:	b118      	cbz	r0, 800ce66 <_fflush_r+0x1a>
 800ce5e:	6a03      	ldr	r3, [r0, #32]
 800ce60:	b90b      	cbnz	r3, 800ce66 <_fflush_r+0x1a>
 800ce62:	f7fd facd 	bl	800a400 <__sinit>
 800ce66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d0f3      	beq.n	800ce56 <_fflush_r+0xa>
 800ce6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ce70:	07d0      	lsls	r0, r2, #31
 800ce72:	d404      	bmi.n	800ce7e <_fflush_r+0x32>
 800ce74:	0599      	lsls	r1, r3, #22
 800ce76:	d402      	bmi.n	800ce7e <_fflush_r+0x32>
 800ce78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce7a:	f7fd fc0b 	bl	800a694 <__retarget_lock_acquire_recursive>
 800ce7e:	4628      	mov	r0, r5
 800ce80:	4621      	mov	r1, r4
 800ce82:	f7ff ff5d 	bl	800cd40 <__sflush_r>
 800ce86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ce88:	07da      	lsls	r2, r3, #31
 800ce8a:	4605      	mov	r5, r0
 800ce8c:	d4e4      	bmi.n	800ce58 <_fflush_r+0xc>
 800ce8e:	89a3      	ldrh	r3, [r4, #12]
 800ce90:	059b      	lsls	r3, r3, #22
 800ce92:	d4e1      	bmi.n	800ce58 <_fflush_r+0xc>
 800ce94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce96:	f7fd fbfe 	bl	800a696 <__retarget_lock_release_recursive>
 800ce9a:	e7dd      	b.n	800ce58 <_fflush_r+0xc>

0800ce9c <memmove>:
 800ce9c:	4288      	cmp	r0, r1
 800ce9e:	b510      	push	{r4, lr}
 800cea0:	eb01 0402 	add.w	r4, r1, r2
 800cea4:	d902      	bls.n	800ceac <memmove+0x10>
 800cea6:	4284      	cmp	r4, r0
 800cea8:	4623      	mov	r3, r4
 800ceaa:	d807      	bhi.n	800cebc <memmove+0x20>
 800ceac:	1e43      	subs	r3, r0, #1
 800ceae:	42a1      	cmp	r1, r4
 800ceb0:	d008      	beq.n	800cec4 <memmove+0x28>
 800ceb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ceb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ceba:	e7f8      	b.n	800ceae <memmove+0x12>
 800cebc:	4402      	add	r2, r0
 800cebe:	4601      	mov	r1, r0
 800cec0:	428a      	cmp	r2, r1
 800cec2:	d100      	bne.n	800cec6 <memmove+0x2a>
 800cec4:	bd10      	pop	{r4, pc}
 800cec6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ceca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cece:	e7f7      	b.n	800cec0 <memmove+0x24>

0800ced0 <strncmp>:
 800ced0:	b510      	push	{r4, lr}
 800ced2:	b16a      	cbz	r2, 800cef0 <strncmp+0x20>
 800ced4:	3901      	subs	r1, #1
 800ced6:	1884      	adds	r4, r0, r2
 800ced8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cedc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800cee0:	429a      	cmp	r2, r3
 800cee2:	d103      	bne.n	800ceec <strncmp+0x1c>
 800cee4:	42a0      	cmp	r0, r4
 800cee6:	d001      	beq.n	800ceec <strncmp+0x1c>
 800cee8:	2a00      	cmp	r2, #0
 800ceea:	d1f5      	bne.n	800ced8 <strncmp+0x8>
 800ceec:	1ad0      	subs	r0, r2, r3
 800ceee:	bd10      	pop	{r4, pc}
 800cef0:	4610      	mov	r0, r2
 800cef2:	e7fc      	b.n	800ceee <strncmp+0x1e>

0800cef4 <_sbrk_r>:
 800cef4:	b538      	push	{r3, r4, r5, lr}
 800cef6:	4d06      	ldr	r5, [pc, #24]	; (800cf10 <_sbrk_r+0x1c>)
 800cef8:	2300      	movs	r3, #0
 800cefa:	4604      	mov	r4, r0
 800cefc:	4608      	mov	r0, r1
 800cefe:	602b      	str	r3, [r5, #0]
 800cf00:	f7f4 fd6c 	bl	80019dc <_sbrk>
 800cf04:	1c43      	adds	r3, r0, #1
 800cf06:	d102      	bne.n	800cf0e <_sbrk_r+0x1a>
 800cf08:	682b      	ldr	r3, [r5, #0]
 800cf0a:	b103      	cbz	r3, 800cf0e <_sbrk_r+0x1a>
 800cf0c:	6023      	str	r3, [r4, #0]
 800cf0e:	bd38      	pop	{r3, r4, r5, pc}
 800cf10:	24000bdc 	.word	0x24000bdc

0800cf14 <memcpy>:
 800cf14:	440a      	add	r2, r1
 800cf16:	4291      	cmp	r1, r2
 800cf18:	f100 33ff 	add.w	r3, r0, #4294967295
 800cf1c:	d100      	bne.n	800cf20 <memcpy+0xc>
 800cf1e:	4770      	bx	lr
 800cf20:	b510      	push	{r4, lr}
 800cf22:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf26:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cf2a:	4291      	cmp	r1, r2
 800cf2c:	d1f9      	bne.n	800cf22 <memcpy+0xe>
 800cf2e:	bd10      	pop	{r4, pc}

0800cf30 <nan>:
 800cf30:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cf38 <nan+0x8>
 800cf34:	4770      	bx	lr
 800cf36:	bf00      	nop
 800cf38:	00000000 	.word	0x00000000
 800cf3c:	7ff80000 	.word	0x7ff80000

0800cf40 <__assert_func>:
 800cf40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cf42:	4614      	mov	r4, r2
 800cf44:	461a      	mov	r2, r3
 800cf46:	4b09      	ldr	r3, [pc, #36]	; (800cf6c <__assert_func+0x2c>)
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	4605      	mov	r5, r0
 800cf4c:	68d8      	ldr	r0, [r3, #12]
 800cf4e:	b14c      	cbz	r4, 800cf64 <__assert_func+0x24>
 800cf50:	4b07      	ldr	r3, [pc, #28]	; (800cf70 <__assert_func+0x30>)
 800cf52:	9100      	str	r1, [sp, #0]
 800cf54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cf58:	4906      	ldr	r1, [pc, #24]	; (800cf74 <__assert_func+0x34>)
 800cf5a:	462b      	mov	r3, r5
 800cf5c:	f000 fbca 	bl	800d6f4 <fiprintf>
 800cf60:	f000 fbda 	bl	800d718 <abort>
 800cf64:	4b04      	ldr	r3, [pc, #16]	; (800cf78 <__assert_func+0x38>)
 800cf66:	461c      	mov	r4, r3
 800cf68:	e7f3      	b.n	800cf52 <__assert_func+0x12>
 800cf6a:	bf00      	nop
 800cf6c:	24000068 	.word	0x24000068
 800cf70:	0800e072 	.word	0x0800e072
 800cf74:	0800e07f 	.word	0x0800e07f
 800cf78:	0800e0ad 	.word	0x0800e0ad

0800cf7c <_calloc_r>:
 800cf7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cf7e:	fba1 2402 	umull	r2, r4, r1, r2
 800cf82:	b94c      	cbnz	r4, 800cf98 <_calloc_r+0x1c>
 800cf84:	4611      	mov	r1, r2
 800cf86:	9201      	str	r2, [sp, #4]
 800cf88:	f7fe f9f6 	bl	800b378 <_malloc_r>
 800cf8c:	9a01      	ldr	r2, [sp, #4]
 800cf8e:	4605      	mov	r5, r0
 800cf90:	b930      	cbnz	r0, 800cfa0 <_calloc_r+0x24>
 800cf92:	4628      	mov	r0, r5
 800cf94:	b003      	add	sp, #12
 800cf96:	bd30      	pop	{r4, r5, pc}
 800cf98:	220c      	movs	r2, #12
 800cf9a:	6002      	str	r2, [r0, #0]
 800cf9c:	2500      	movs	r5, #0
 800cf9e:	e7f8      	b.n	800cf92 <_calloc_r+0x16>
 800cfa0:	4621      	mov	r1, r4
 800cfa2:	f7fd fafa 	bl	800a59a <memset>
 800cfa6:	e7f4      	b.n	800cf92 <_calloc_r+0x16>

0800cfa8 <rshift>:
 800cfa8:	6903      	ldr	r3, [r0, #16]
 800cfaa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cfae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cfb2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cfb6:	f100 0414 	add.w	r4, r0, #20
 800cfba:	dd45      	ble.n	800d048 <rshift+0xa0>
 800cfbc:	f011 011f 	ands.w	r1, r1, #31
 800cfc0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cfc4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cfc8:	d10c      	bne.n	800cfe4 <rshift+0x3c>
 800cfca:	f100 0710 	add.w	r7, r0, #16
 800cfce:	4629      	mov	r1, r5
 800cfd0:	42b1      	cmp	r1, r6
 800cfd2:	d334      	bcc.n	800d03e <rshift+0x96>
 800cfd4:	1a9b      	subs	r3, r3, r2
 800cfd6:	009b      	lsls	r3, r3, #2
 800cfd8:	1eea      	subs	r2, r5, #3
 800cfda:	4296      	cmp	r6, r2
 800cfdc:	bf38      	it	cc
 800cfde:	2300      	movcc	r3, #0
 800cfe0:	4423      	add	r3, r4
 800cfe2:	e015      	b.n	800d010 <rshift+0x68>
 800cfe4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cfe8:	f1c1 0820 	rsb	r8, r1, #32
 800cfec:	40cf      	lsrs	r7, r1
 800cfee:	f105 0e04 	add.w	lr, r5, #4
 800cff2:	46a1      	mov	r9, r4
 800cff4:	4576      	cmp	r6, lr
 800cff6:	46f4      	mov	ip, lr
 800cff8:	d815      	bhi.n	800d026 <rshift+0x7e>
 800cffa:	1a9a      	subs	r2, r3, r2
 800cffc:	0092      	lsls	r2, r2, #2
 800cffe:	3a04      	subs	r2, #4
 800d000:	3501      	adds	r5, #1
 800d002:	42ae      	cmp	r6, r5
 800d004:	bf38      	it	cc
 800d006:	2200      	movcc	r2, #0
 800d008:	18a3      	adds	r3, r4, r2
 800d00a:	50a7      	str	r7, [r4, r2]
 800d00c:	b107      	cbz	r7, 800d010 <rshift+0x68>
 800d00e:	3304      	adds	r3, #4
 800d010:	1b1a      	subs	r2, r3, r4
 800d012:	42a3      	cmp	r3, r4
 800d014:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d018:	bf08      	it	eq
 800d01a:	2300      	moveq	r3, #0
 800d01c:	6102      	str	r2, [r0, #16]
 800d01e:	bf08      	it	eq
 800d020:	6143      	streq	r3, [r0, #20]
 800d022:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d026:	f8dc c000 	ldr.w	ip, [ip]
 800d02a:	fa0c fc08 	lsl.w	ip, ip, r8
 800d02e:	ea4c 0707 	orr.w	r7, ip, r7
 800d032:	f849 7b04 	str.w	r7, [r9], #4
 800d036:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d03a:	40cf      	lsrs	r7, r1
 800d03c:	e7da      	b.n	800cff4 <rshift+0x4c>
 800d03e:	f851 cb04 	ldr.w	ip, [r1], #4
 800d042:	f847 cf04 	str.w	ip, [r7, #4]!
 800d046:	e7c3      	b.n	800cfd0 <rshift+0x28>
 800d048:	4623      	mov	r3, r4
 800d04a:	e7e1      	b.n	800d010 <rshift+0x68>

0800d04c <__hexdig_fun>:
 800d04c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d050:	2b09      	cmp	r3, #9
 800d052:	d802      	bhi.n	800d05a <__hexdig_fun+0xe>
 800d054:	3820      	subs	r0, #32
 800d056:	b2c0      	uxtb	r0, r0
 800d058:	4770      	bx	lr
 800d05a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d05e:	2b05      	cmp	r3, #5
 800d060:	d801      	bhi.n	800d066 <__hexdig_fun+0x1a>
 800d062:	3847      	subs	r0, #71	; 0x47
 800d064:	e7f7      	b.n	800d056 <__hexdig_fun+0xa>
 800d066:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d06a:	2b05      	cmp	r3, #5
 800d06c:	d801      	bhi.n	800d072 <__hexdig_fun+0x26>
 800d06e:	3827      	subs	r0, #39	; 0x27
 800d070:	e7f1      	b.n	800d056 <__hexdig_fun+0xa>
 800d072:	2000      	movs	r0, #0
 800d074:	4770      	bx	lr
	...

0800d078 <__gethex>:
 800d078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d07c:	4617      	mov	r7, r2
 800d07e:	680a      	ldr	r2, [r1, #0]
 800d080:	b085      	sub	sp, #20
 800d082:	f102 0b02 	add.w	fp, r2, #2
 800d086:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d08a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d08e:	4681      	mov	r9, r0
 800d090:	468a      	mov	sl, r1
 800d092:	9302      	str	r3, [sp, #8]
 800d094:	32fe      	adds	r2, #254	; 0xfe
 800d096:	eb02 030b 	add.w	r3, r2, fp
 800d09a:	46d8      	mov	r8, fp
 800d09c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800d0a0:	9301      	str	r3, [sp, #4]
 800d0a2:	2830      	cmp	r0, #48	; 0x30
 800d0a4:	d0f7      	beq.n	800d096 <__gethex+0x1e>
 800d0a6:	f7ff ffd1 	bl	800d04c <__hexdig_fun>
 800d0aa:	4604      	mov	r4, r0
 800d0ac:	2800      	cmp	r0, #0
 800d0ae:	d138      	bne.n	800d122 <__gethex+0xaa>
 800d0b0:	49a7      	ldr	r1, [pc, #668]	; (800d350 <__gethex+0x2d8>)
 800d0b2:	2201      	movs	r2, #1
 800d0b4:	4640      	mov	r0, r8
 800d0b6:	f7ff ff0b 	bl	800ced0 <strncmp>
 800d0ba:	4606      	mov	r6, r0
 800d0bc:	2800      	cmp	r0, #0
 800d0be:	d169      	bne.n	800d194 <__gethex+0x11c>
 800d0c0:	f898 0001 	ldrb.w	r0, [r8, #1]
 800d0c4:	465d      	mov	r5, fp
 800d0c6:	f7ff ffc1 	bl	800d04c <__hexdig_fun>
 800d0ca:	2800      	cmp	r0, #0
 800d0cc:	d064      	beq.n	800d198 <__gethex+0x120>
 800d0ce:	465a      	mov	r2, fp
 800d0d0:	7810      	ldrb	r0, [r2, #0]
 800d0d2:	2830      	cmp	r0, #48	; 0x30
 800d0d4:	4690      	mov	r8, r2
 800d0d6:	f102 0201 	add.w	r2, r2, #1
 800d0da:	d0f9      	beq.n	800d0d0 <__gethex+0x58>
 800d0dc:	f7ff ffb6 	bl	800d04c <__hexdig_fun>
 800d0e0:	2301      	movs	r3, #1
 800d0e2:	fab0 f480 	clz	r4, r0
 800d0e6:	0964      	lsrs	r4, r4, #5
 800d0e8:	465e      	mov	r6, fp
 800d0ea:	9301      	str	r3, [sp, #4]
 800d0ec:	4642      	mov	r2, r8
 800d0ee:	4615      	mov	r5, r2
 800d0f0:	3201      	adds	r2, #1
 800d0f2:	7828      	ldrb	r0, [r5, #0]
 800d0f4:	f7ff ffaa 	bl	800d04c <__hexdig_fun>
 800d0f8:	2800      	cmp	r0, #0
 800d0fa:	d1f8      	bne.n	800d0ee <__gethex+0x76>
 800d0fc:	4994      	ldr	r1, [pc, #592]	; (800d350 <__gethex+0x2d8>)
 800d0fe:	2201      	movs	r2, #1
 800d100:	4628      	mov	r0, r5
 800d102:	f7ff fee5 	bl	800ced0 <strncmp>
 800d106:	b978      	cbnz	r0, 800d128 <__gethex+0xb0>
 800d108:	b946      	cbnz	r6, 800d11c <__gethex+0xa4>
 800d10a:	1c6e      	adds	r6, r5, #1
 800d10c:	4632      	mov	r2, r6
 800d10e:	4615      	mov	r5, r2
 800d110:	3201      	adds	r2, #1
 800d112:	7828      	ldrb	r0, [r5, #0]
 800d114:	f7ff ff9a 	bl	800d04c <__hexdig_fun>
 800d118:	2800      	cmp	r0, #0
 800d11a:	d1f8      	bne.n	800d10e <__gethex+0x96>
 800d11c:	1b73      	subs	r3, r6, r5
 800d11e:	009e      	lsls	r6, r3, #2
 800d120:	e004      	b.n	800d12c <__gethex+0xb4>
 800d122:	2400      	movs	r4, #0
 800d124:	4626      	mov	r6, r4
 800d126:	e7e1      	b.n	800d0ec <__gethex+0x74>
 800d128:	2e00      	cmp	r6, #0
 800d12a:	d1f7      	bne.n	800d11c <__gethex+0xa4>
 800d12c:	782b      	ldrb	r3, [r5, #0]
 800d12e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d132:	2b50      	cmp	r3, #80	; 0x50
 800d134:	d13d      	bne.n	800d1b2 <__gethex+0x13a>
 800d136:	786b      	ldrb	r3, [r5, #1]
 800d138:	2b2b      	cmp	r3, #43	; 0x2b
 800d13a:	d02f      	beq.n	800d19c <__gethex+0x124>
 800d13c:	2b2d      	cmp	r3, #45	; 0x2d
 800d13e:	d031      	beq.n	800d1a4 <__gethex+0x12c>
 800d140:	1c69      	adds	r1, r5, #1
 800d142:	f04f 0b00 	mov.w	fp, #0
 800d146:	7808      	ldrb	r0, [r1, #0]
 800d148:	f7ff ff80 	bl	800d04c <__hexdig_fun>
 800d14c:	1e42      	subs	r2, r0, #1
 800d14e:	b2d2      	uxtb	r2, r2
 800d150:	2a18      	cmp	r2, #24
 800d152:	d82e      	bhi.n	800d1b2 <__gethex+0x13a>
 800d154:	f1a0 0210 	sub.w	r2, r0, #16
 800d158:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d15c:	f7ff ff76 	bl	800d04c <__hexdig_fun>
 800d160:	f100 3cff 	add.w	ip, r0, #4294967295
 800d164:	fa5f fc8c 	uxtb.w	ip, ip
 800d168:	f1bc 0f18 	cmp.w	ip, #24
 800d16c:	d91d      	bls.n	800d1aa <__gethex+0x132>
 800d16e:	f1bb 0f00 	cmp.w	fp, #0
 800d172:	d000      	beq.n	800d176 <__gethex+0xfe>
 800d174:	4252      	negs	r2, r2
 800d176:	4416      	add	r6, r2
 800d178:	f8ca 1000 	str.w	r1, [sl]
 800d17c:	b1dc      	cbz	r4, 800d1b6 <__gethex+0x13e>
 800d17e:	9b01      	ldr	r3, [sp, #4]
 800d180:	2b00      	cmp	r3, #0
 800d182:	bf14      	ite	ne
 800d184:	f04f 0800 	movne.w	r8, #0
 800d188:	f04f 0806 	moveq.w	r8, #6
 800d18c:	4640      	mov	r0, r8
 800d18e:	b005      	add	sp, #20
 800d190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d194:	4645      	mov	r5, r8
 800d196:	4626      	mov	r6, r4
 800d198:	2401      	movs	r4, #1
 800d19a:	e7c7      	b.n	800d12c <__gethex+0xb4>
 800d19c:	f04f 0b00 	mov.w	fp, #0
 800d1a0:	1ca9      	adds	r1, r5, #2
 800d1a2:	e7d0      	b.n	800d146 <__gethex+0xce>
 800d1a4:	f04f 0b01 	mov.w	fp, #1
 800d1a8:	e7fa      	b.n	800d1a0 <__gethex+0x128>
 800d1aa:	230a      	movs	r3, #10
 800d1ac:	fb03 0002 	mla	r0, r3, r2, r0
 800d1b0:	e7d0      	b.n	800d154 <__gethex+0xdc>
 800d1b2:	4629      	mov	r1, r5
 800d1b4:	e7e0      	b.n	800d178 <__gethex+0x100>
 800d1b6:	eba5 0308 	sub.w	r3, r5, r8
 800d1ba:	3b01      	subs	r3, #1
 800d1bc:	4621      	mov	r1, r4
 800d1be:	2b07      	cmp	r3, #7
 800d1c0:	dc0a      	bgt.n	800d1d8 <__gethex+0x160>
 800d1c2:	4648      	mov	r0, r9
 800d1c4:	f7fe f964 	bl	800b490 <_Balloc>
 800d1c8:	4604      	mov	r4, r0
 800d1ca:	b940      	cbnz	r0, 800d1de <__gethex+0x166>
 800d1cc:	4b61      	ldr	r3, [pc, #388]	; (800d354 <__gethex+0x2dc>)
 800d1ce:	4602      	mov	r2, r0
 800d1d0:	21e4      	movs	r1, #228	; 0xe4
 800d1d2:	4861      	ldr	r0, [pc, #388]	; (800d358 <__gethex+0x2e0>)
 800d1d4:	f7ff feb4 	bl	800cf40 <__assert_func>
 800d1d8:	3101      	adds	r1, #1
 800d1da:	105b      	asrs	r3, r3, #1
 800d1dc:	e7ef      	b.n	800d1be <__gethex+0x146>
 800d1de:	f100 0a14 	add.w	sl, r0, #20
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	495a      	ldr	r1, [pc, #360]	; (800d350 <__gethex+0x2d8>)
 800d1e6:	f8cd a004 	str.w	sl, [sp, #4]
 800d1ea:	469b      	mov	fp, r3
 800d1ec:	45a8      	cmp	r8, r5
 800d1ee:	d342      	bcc.n	800d276 <__gethex+0x1fe>
 800d1f0:	9801      	ldr	r0, [sp, #4]
 800d1f2:	f840 bb04 	str.w	fp, [r0], #4
 800d1f6:	eba0 000a 	sub.w	r0, r0, sl
 800d1fa:	1080      	asrs	r0, r0, #2
 800d1fc:	6120      	str	r0, [r4, #16]
 800d1fe:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800d202:	4658      	mov	r0, fp
 800d204:	f7fe fa36 	bl	800b674 <__hi0bits>
 800d208:	683d      	ldr	r5, [r7, #0]
 800d20a:	eba8 0000 	sub.w	r0, r8, r0
 800d20e:	42a8      	cmp	r0, r5
 800d210:	dd59      	ble.n	800d2c6 <__gethex+0x24e>
 800d212:	eba0 0805 	sub.w	r8, r0, r5
 800d216:	4641      	mov	r1, r8
 800d218:	4620      	mov	r0, r4
 800d21a:	f7fe fdc2 	bl	800bda2 <__any_on>
 800d21e:	4683      	mov	fp, r0
 800d220:	b1b8      	cbz	r0, 800d252 <__gethex+0x1da>
 800d222:	f108 33ff 	add.w	r3, r8, #4294967295
 800d226:	1159      	asrs	r1, r3, #5
 800d228:	f003 021f 	and.w	r2, r3, #31
 800d22c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d230:	f04f 0b01 	mov.w	fp, #1
 800d234:	fa0b f202 	lsl.w	r2, fp, r2
 800d238:	420a      	tst	r2, r1
 800d23a:	d00a      	beq.n	800d252 <__gethex+0x1da>
 800d23c:	455b      	cmp	r3, fp
 800d23e:	dd06      	ble.n	800d24e <__gethex+0x1d6>
 800d240:	f1a8 0102 	sub.w	r1, r8, #2
 800d244:	4620      	mov	r0, r4
 800d246:	f7fe fdac 	bl	800bda2 <__any_on>
 800d24a:	2800      	cmp	r0, #0
 800d24c:	d138      	bne.n	800d2c0 <__gethex+0x248>
 800d24e:	f04f 0b02 	mov.w	fp, #2
 800d252:	4641      	mov	r1, r8
 800d254:	4620      	mov	r0, r4
 800d256:	f7ff fea7 	bl	800cfa8 <rshift>
 800d25a:	4446      	add	r6, r8
 800d25c:	68bb      	ldr	r3, [r7, #8]
 800d25e:	42b3      	cmp	r3, r6
 800d260:	da41      	bge.n	800d2e6 <__gethex+0x26e>
 800d262:	4621      	mov	r1, r4
 800d264:	4648      	mov	r0, r9
 800d266:	f7fe f953 	bl	800b510 <_Bfree>
 800d26a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d26c:	2300      	movs	r3, #0
 800d26e:	6013      	str	r3, [r2, #0]
 800d270:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800d274:	e78a      	b.n	800d18c <__gethex+0x114>
 800d276:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800d27a:	2a2e      	cmp	r2, #46	; 0x2e
 800d27c:	d014      	beq.n	800d2a8 <__gethex+0x230>
 800d27e:	2b20      	cmp	r3, #32
 800d280:	d106      	bne.n	800d290 <__gethex+0x218>
 800d282:	9b01      	ldr	r3, [sp, #4]
 800d284:	f843 bb04 	str.w	fp, [r3], #4
 800d288:	f04f 0b00 	mov.w	fp, #0
 800d28c:	9301      	str	r3, [sp, #4]
 800d28e:	465b      	mov	r3, fp
 800d290:	7828      	ldrb	r0, [r5, #0]
 800d292:	9303      	str	r3, [sp, #12]
 800d294:	f7ff feda 	bl	800d04c <__hexdig_fun>
 800d298:	9b03      	ldr	r3, [sp, #12]
 800d29a:	f000 000f 	and.w	r0, r0, #15
 800d29e:	4098      	lsls	r0, r3
 800d2a0:	ea4b 0b00 	orr.w	fp, fp, r0
 800d2a4:	3304      	adds	r3, #4
 800d2a6:	e7a1      	b.n	800d1ec <__gethex+0x174>
 800d2a8:	45a8      	cmp	r8, r5
 800d2aa:	d8e8      	bhi.n	800d27e <__gethex+0x206>
 800d2ac:	2201      	movs	r2, #1
 800d2ae:	4628      	mov	r0, r5
 800d2b0:	9303      	str	r3, [sp, #12]
 800d2b2:	f7ff fe0d 	bl	800ced0 <strncmp>
 800d2b6:	4926      	ldr	r1, [pc, #152]	; (800d350 <__gethex+0x2d8>)
 800d2b8:	9b03      	ldr	r3, [sp, #12]
 800d2ba:	2800      	cmp	r0, #0
 800d2bc:	d1df      	bne.n	800d27e <__gethex+0x206>
 800d2be:	e795      	b.n	800d1ec <__gethex+0x174>
 800d2c0:	f04f 0b03 	mov.w	fp, #3
 800d2c4:	e7c5      	b.n	800d252 <__gethex+0x1da>
 800d2c6:	da0b      	bge.n	800d2e0 <__gethex+0x268>
 800d2c8:	eba5 0800 	sub.w	r8, r5, r0
 800d2cc:	4621      	mov	r1, r4
 800d2ce:	4642      	mov	r2, r8
 800d2d0:	4648      	mov	r0, r9
 800d2d2:	f7fe fb37 	bl	800b944 <__lshift>
 800d2d6:	eba6 0608 	sub.w	r6, r6, r8
 800d2da:	4604      	mov	r4, r0
 800d2dc:	f100 0a14 	add.w	sl, r0, #20
 800d2e0:	f04f 0b00 	mov.w	fp, #0
 800d2e4:	e7ba      	b.n	800d25c <__gethex+0x1e4>
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	42b3      	cmp	r3, r6
 800d2ea:	dd73      	ble.n	800d3d4 <__gethex+0x35c>
 800d2ec:	1b9e      	subs	r6, r3, r6
 800d2ee:	42b5      	cmp	r5, r6
 800d2f0:	dc34      	bgt.n	800d35c <__gethex+0x2e4>
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	2b02      	cmp	r3, #2
 800d2f6:	d023      	beq.n	800d340 <__gethex+0x2c8>
 800d2f8:	2b03      	cmp	r3, #3
 800d2fa:	d025      	beq.n	800d348 <__gethex+0x2d0>
 800d2fc:	2b01      	cmp	r3, #1
 800d2fe:	d115      	bne.n	800d32c <__gethex+0x2b4>
 800d300:	42b5      	cmp	r5, r6
 800d302:	d113      	bne.n	800d32c <__gethex+0x2b4>
 800d304:	2d01      	cmp	r5, #1
 800d306:	d10b      	bne.n	800d320 <__gethex+0x2a8>
 800d308:	9a02      	ldr	r2, [sp, #8]
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	6013      	str	r3, [r2, #0]
 800d30e:	2301      	movs	r3, #1
 800d310:	6123      	str	r3, [r4, #16]
 800d312:	f8ca 3000 	str.w	r3, [sl]
 800d316:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d318:	f04f 0862 	mov.w	r8, #98	; 0x62
 800d31c:	601c      	str	r4, [r3, #0]
 800d31e:	e735      	b.n	800d18c <__gethex+0x114>
 800d320:	1e69      	subs	r1, r5, #1
 800d322:	4620      	mov	r0, r4
 800d324:	f7fe fd3d 	bl	800bda2 <__any_on>
 800d328:	2800      	cmp	r0, #0
 800d32a:	d1ed      	bne.n	800d308 <__gethex+0x290>
 800d32c:	4621      	mov	r1, r4
 800d32e:	4648      	mov	r0, r9
 800d330:	f7fe f8ee 	bl	800b510 <_Bfree>
 800d334:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d336:	2300      	movs	r3, #0
 800d338:	6013      	str	r3, [r2, #0]
 800d33a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800d33e:	e725      	b.n	800d18c <__gethex+0x114>
 800d340:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d342:	2b00      	cmp	r3, #0
 800d344:	d1f2      	bne.n	800d32c <__gethex+0x2b4>
 800d346:	e7df      	b.n	800d308 <__gethex+0x290>
 800d348:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d1dc      	bne.n	800d308 <__gethex+0x290>
 800d34e:	e7ed      	b.n	800d32c <__gethex+0x2b4>
 800d350:	0800df04 	.word	0x0800df04
 800d354:	0800dd99 	.word	0x0800dd99
 800d358:	0800e0ae 	.word	0x0800e0ae
 800d35c:	f106 38ff 	add.w	r8, r6, #4294967295
 800d360:	f1bb 0f00 	cmp.w	fp, #0
 800d364:	d133      	bne.n	800d3ce <__gethex+0x356>
 800d366:	f1b8 0f00 	cmp.w	r8, #0
 800d36a:	d004      	beq.n	800d376 <__gethex+0x2fe>
 800d36c:	4641      	mov	r1, r8
 800d36e:	4620      	mov	r0, r4
 800d370:	f7fe fd17 	bl	800bda2 <__any_on>
 800d374:	4683      	mov	fp, r0
 800d376:	ea4f 1268 	mov.w	r2, r8, asr #5
 800d37a:	2301      	movs	r3, #1
 800d37c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d380:	f008 081f 	and.w	r8, r8, #31
 800d384:	fa03 f308 	lsl.w	r3, r3, r8
 800d388:	4213      	tst	r3, r2
 800d38a:	4631      	mov	r1, r6
 800d38c:	4620      	mov	r0, r4
 800d38e:	bf18      	it	ne
 800d390:	f04b 0b02 	orrne.w	fp, fp, #2
 800d394:	1bad      	subs	r5, r5, r6
 800d396:	f7ff fe07 	bl	800cfa8 <rshift>
 800d39a:	687e      	ldr	r6, [r7, #4]
 800d39c:	f04f 0802 	mov.w	r8, #2
 800d3a0:	f1bb 0f00 	cmp.w	fp, #0
 800d3a4:	d04a      	beq.n	800d43c <__gethex+0x3c4>
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	2b02      	cmp	r3, #2
 800d3aa:	d016      	beq.n	800d3da <__gethex+0x362>
 800d3ac:	2b03      	cmp	r3, #3
 800d3ae:	d018      	beq.n	800d3e2 <__gethex+0x36a>
 800d3b0:	2b01      	cmp	r3, #1
 800d3b2:	d109      	bne.n	800d3c8 <__gethex+0x350>
 800d3b4:	f01b 0f02 	tst.w	fp, #2
 800d3b8:	d006      	beq.n	800d3c8 <__gethex+0x350>
 800d3ba:	f8da 3000 	ldr.w	r3, [sl]
 800d3be:	ea4b 0b03 	orr.w	fp, fp, r3
 800d3c2:	f01b 0f01 	tst.w	fp, #1
 800d3c6:	d10f      	bne.n	800d3e8 <__gethex+0x370>
 800d3c8:	f048 0810 	orr.w	r8, r8, #16
 800d3cc:	e036      	b.n	800d43c <__gethex+0x3c4>
 800d3ce:	f04f 0b01 	mov.w	fp, #1
 800d3d2:	e7d0      	b.n	800d376 <__gethex+0x2fe>
 800d3d4:	f04f 0801 	mov.w	r8, #1
 800d3d8:	e7e2      	b.n	800d3a0 <__gethex+0x328>
 800d3da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d3dc:	f1c3 0301 	rsb	r3, r3, #1
 800d3e0:	930f      	str	r3, [sp, #60]	; 0x3c
 800d3e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d0ef      	beq.n	800d3c8 <__gethex+0x350>
 800d3e8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d3ec:	f104 0214 	add.w	r2, r4, #20
 800d3f0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800d3f4:	9301      	str	r3, [sp, #4]
 800d3f6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	4694      	mov	ip, r2
 800d3fe:	f852 1b04 	ldr.w	r1, [r2], #4
 800d402:	f1b1 3fff 	cmp.w	r1, #4294967295
 800d406:	d01e      	beq.n	800d446 <__gethex+0x3ce>
 800d408:	3101      	adds	r1, #1
 800d40a:	f8cc 1000 	str.w	r1, [ip]
 800d40e:	f1b8 0f02 	cmp.w	r8, #2
 800d412:	f104 0214 	add.w	r2, r4, #20
 800d416:	d13d      	bne.n	800d494 <__gethex+0x41c>
 800d418:	683b      	ldr	r3, [r7, #0]
 800d41a:	3b01      	subs	r3, #1
 800d41c:	42ab      	cmp	r3, r5
 800d41e:	d10b      	bne.n	800d438 <__gethex+0x3c0>
 800d420:	1169      	asrs	r1, r5, #5
 800d422:	2301      	movs	r3, #1
 800d424:	f005 051f 	and.w	r5, r5, #31
 800d428:	fa03 f505 	lsl.w	r5, r3, r5
 800d42c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d430:	421d      	tst	r5, r3
 800d432:	bf18      	it	ne
 800d434:	f04f 0801 	movne.w	r8, #1
 800d438:	f048 0820 	orr.w	r8, r8, #32
 800d43c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d43e:	601c      	str	r4, [r3, #0]
 800d440:	9b02      	ldr	r3, [sp, #8]
 800d442:	601e      	str	r6, [r3, #0]
 800d444:	e6a2      	b.n	800d18c <__gethex+0x114>
 800d446:	4290      	cmp	r0, r2
 800d448:	f842 3c04 	str.w	r3, [r2, #-4]
 800d44c:	d8d6      	bhi.n	800d3fc <__gethex+0x384>
 800d44e:	68a2      	ldr	r2, [r4, #8]
 800d450:	4593      	cmp	fp, r2
 800d452:	db17      	blt.n	800d484 <__gethex+0x40c>
 800d454:	6861      	ldr	r1, [r4, #4]
 800d456:	4648      	mov	r0, r9
 800d458:	3101      	adds	r1, #1
 800d45a:	f7fe f819 	bl	800b490 <_Balloc>
 800d45e:	4682      	mov	sl, r0
 800d460:	b918      	cbnz	r0, 800d46a <__gethex+0x3f2>
 800d462:	4b1b      	ldr	r3, [pc, #108]	; (800d4d0 <__gethex+0x458>)
 800d464:	4602      	mov	r2, r0
 800d466:	2184      	movs	r1, #132	; 0x84
 800d468:	e6b3      	b.n	800d1d2 <__gethex+0x15a>
 800d46a:	6922      	ldr	r2, [r4, #16]
 800d46c:	3202      	adds	r2, #2
 800d46e:	f104 010c 	add.w	r1, r4, #12
 800d472:	0092      	lsls	r2, r2, #2
 800d474:	300c      	adds	r0, #12
 800d476:	f7ff fd4d 	bl	800cf14 <memcpy>
 800d47a:	4621      	mov	r1, r4
 800d47c:	4648      	mov	r0, r9
 800d47e:	f7fe f847 	bl	800b510 <_Bfree>
 800d482:	4654      	mov	r4, sl
 800d484:	6922      	ldr	r2, [r4, #16]
 800d486:	1c51      	adds	r1, r2, #1
 800d488:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d48c:	6121      	str	r1, [r4, #16]
 800d48e:	2101      	movs	r1, #1
 800d490:	6151      	str	r1, [r2, #20]
 800d492:	e7bc      	b.n	800d40e <__gethex+0x396>
 800d494:	6921      	ldr	r1, [r4, #16]
 800d496:	4559      	cmp	r1, fp
 800d498:	dd0b      	ble.n	800d4b2 <__gethex+0x43a>
 800d49a:	2101      	movs	r1, #1
 800d49c:	4620      	mov	r0, r4
 800d49e:	f7ff fd83 	bl	800cfa8 <rshift>
 800d4a2:	68bb      	ldr	r3, [r7, #8]
 800d4a4:	3601      	adds	r6, #1
 800d4a6:	42b3      	cmp	r3, r6
 800d4a8:	f6ff aedb 	blt.w	800d262 <__gethex+0x1ea>
 800d4ac:	f04f 0801 	mov.w	r8, #1
 800d4b0:	e7c2      	b.n	800d438 <__gethex+0x3c0>
 800d4b2:	f015 051f 	ands.w	r5, r5, #31
 800d4b6:	d0f9      	beq.n	800d4ac <__gethex+0x434>
 800d4b8:	9b01      	ldr	r3, [sp, #4]
 800d4ba:	441a      	add	r2, r3
 800d4bc:	f1c5 0520 	rsb	r5, r5, #32
 800d4c0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800d4c4:	f7fe f8d6 	bl	800b674 <__hi0bits>
 800d4c8:	42a8      	cmp	r0, r5
 800d4ca:	dbe6      	blt.n	800d49a <__gethex+0x422>
 800d4cc:	e7ee      	b.n	800d4ac <__gethex+0x434>
 800d4ce:	bf00      	nop
 800d4d0:	0800dd99 	.word	0x0800dd99

0800d4d4 <L_shift>:
 800d4d4:	f1c2 0208 	rsb	r2, r2, #8
 800d4d8:	0092      	lsls	r2, r2, #2
 800d4da:	b570      	push	{r4, r5, r6, lr}
 800d4dc:	f1c2 0620 	rsb	r6, r2, #32
 800d4e0:	6843      	ldr	r3, [r0, #4]
 800d4e2:	6804      	ldr	r4, [r0, #0]
 800d4e4:	fa03 f506 	lsl.w	r5, r3, r6
 800d4e8:	432c      	orrs	r4, r5
 800d4ea:	40d3      	lsrs	r3, r2
 800d4ec:	6004      	str	r4, [r0, #0]
 800d4ee:	f840 3f04 	str.w	r3, [r0, #4]!
 800d4f2:	4288      	cmp	r0, r1
 800d4f4:	d3f4      	bcc.n	800d4e0 <L_shift+0xc>
 800d4f6:	bd70      	pop	{r4, r5, r6, pc}

0800d4f8 <__match>:
 800d4f8:	b530      	push	{r4, r5, lr}
 800d4fa:	6803      	ldr	r3, [r0, #0]
 800d4fc:	3301      	adds	r3, #1
 800d4fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d502:	b914      	cbnz	r4, 800d50a <__match+0x12>
 800d504:	6003      	str	r3, [r0, #0]
 800d506:	2001      	movs	r0, #1
 800d508:	bd30      	pop	{r4, r5, pc}
 800d50a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d50e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d512:	2d19      	cmp	r5, #25
 800d514:	bf98      	it	ls
 800d516:	3220      	addls	r2, #32
 800d518:	42a2      	cmp	r2, r4
 800d51a:	d0f0      	beq.n	800d4fe <__match+0x6>
 800d51c:	2000      	movs	r0, #0
 800d51e:	e7f3      	b.n	800d508 <__match+0x10>

0800d520 <__hexnan>:
 800d520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d524:	680b      	ldr	r3, [r1, #0]
 800d526:	6801      	ldr	r1, [r0, #0]
 800d528:	115e      	asrs	r6, r3, #5
 800d52a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d52e:	f013 031f 	ands.w	r3, r3, #31
 800d532:	b087      	sub	sp, #28
 800d534:	bf18      	it	ne
 800d536:	3604      	addne	r6, #4
 800d538:	2500      	movs	r5, #0
 800d53a:	1f37      	subs	r7, r6, #4
 800d53c:	4682      	mov	sl, r0
 800d53e:	4690      	mov	r8, r2
 800d540:	9301      	str	r3, [sp, #4]
 800d542:	f846 5c04 	str.w	r5, [r6, #-4]
 800d546:	46b9      	mov	r9, r7
 800d548:	463c      	mov	r4, r7
 800d54a:	9502      	str	r5, [sp, #8]
 800d54c:	46ab      	mov	fp, r5
 800d54e:	784a      	ldrb	r2, [r1, #1]
 800d550:	1c4b      	adds	r3, r1, #1
 800d552:	9303      	str	r3, [sp, #12]
 800d554:	b342      	cbz	r2, 800d5a8 <__hexnan+0x88>
 800d556:	4610      	mov	r0, r2
 800d558:	9105      	str	r1, [sp, #20]
 800d55a:	9204      	str	r2, [sp, #16]
 800d55c:	f7ff fd76 	bl	800d04c <__hexdig_fun>
 800d560:	2800      	cmp	r0, #0
 800d562:	d14f      	bne.n	800d604 <__hexnan+0xe4>
 800d564:	9a04      	ldr	r2, [sp, #16]
 800d566:	9905      	ldr	r1, [sp, #20]
 800d568:	2a20      	cmp	r2, #32
 800d56a:	d818      	bhi.n	800d59e <__hexnan+0x7e>
 800d56c:	9b02      	ldr	r3, [sp, #8]
 800d56e:	459b      	cmp	fp, r3
 800d570:	dd13      	ble.n	800d59a <__hexnan+0x7a>
 800d572:	454c      	cmp	r4, r9
 800d574:	d206      	bcs.n	800d584 <__hexnan+0x64>
 800d576:	2d07      	cmp	r5, #7
 800d578:	dc04      	bgt.n	800d584 <__hexnan+0x64>
 800d57a:	462a      	mov	r2, r5
 800d57c:	4649      	mov	r1, r9
 800d57e:	4620      	mov	r0, r4
 800d580:	f7ff ffa8 	bl	800d4d4 <L_shift>
 800d584:	4544      	cmp	r4, r8
 800d586:	d950      	bls.n	800d62a <__hexnan+0x10a>
 800d588:	2300      	movs	r3, #0
 800d58a:	f1a4 0904 	sub.w	r9, r4, #4
 800d58e:	f844 3c04 	str.w	r3, [r4, #-4]
 800d592:	f8cd b008 	str.w	fp, [sp, #8]
 800d596:	464c      	mov	r4, r9
 800d598:	461d      	mov	r5, r3
 800d59a:	9903      	ldr	r1, [sp, #12]
 800d59c:	e7d7      	b.n	800d54e <__hexnan+0x2e>
 800d59e:	2a29      	cmp	r2, #41	; 0x29
 800d5a0:	d155      	bne.n	800d64e <__hexnan+0x12e>
 800d5a2:	3102      	adds	r1, #2
 800d5a4:	f8ca 1000 	str.w	r1, [sl]
 800d5a8:	f1bb 0f00 	cmp.w	fp, #0
 800d5ac:	d04f      	beq.n	800d64e <__hexnan+0x12e>
 800d5ae:	454c      	cmp	r4, r9
 800d5b0:	d206      	bcs.n	800d5c0 <__hexnan+0xa0>
 800d5b2:	2d07      	cmp	r5, #7
 800d5b4:	dc04      	bgt.n	800d5c0 <__hexnan+0xa0>
 800d5b6:	462a      	mov	r2, r5
 800d5b8:	4649      	mov	r1, r9
 800d5ba:	4620      	mov	r0, r4
 800d5bc:	f7ff ff8a 	bl	800d4d4 <L_shift>
 800d5c0:	4544      	cmp	r4, r8
 800d5c2:	d934      	bls.n	800d62e <__hexnan+0x10e>
 800d5c4:	f1a8 0204 	sub.w	r2, r8, #4
 800d5c8:	4623      	mov	r3, r4
 800d5ca:	f853 1b04 	ldr.w	r1, [r3], #4
 800d5ce:	f842 1f04 	str.w	r1, [r2, #4]!
 800d5d2:	429f      	cmp	r7, r3
 800d5d4:	d2f9      	bcs.n	800d5ca <__hexnan+0xaa>
 800d5d6:	1b3b      	subs	r3, r7, r4
 800d5d8:	f023 0303 	bic.w	r3, r3, #3
 800d5dc:	3304      	adds	r3, #4
 800d5de:	3e03      	subs	r6, #3
 800d5e0:	3401      	adds	r4, #1
 800d5e2:	42a6      	cmp	r6, r4
 800d5e4:	bf38      	it	cc
 800d5e6:	2304      	movcc	r3, #4
 800d5e8:	4443      	add	r3, r8
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	f843 2b04 	str.w	r2, [r3], #4
 800d5f0:	429f      	cmp	r7, r3
 800d5f2:	d2fb      	bcs.n	800d5ec <__hexnan+0xcc>
 800d5f4:	683b      	ldr	r3, [r7, #0]
 800d5f6:	b91b      	cbnz	r3, 800d600 <__hexnan+0xe0>
 800d5f8:	4547      	cmp	r7, r8
 800d5fa:	d126      	bne.n	800d64a <__hexnan+0x12a>
 800d5fc:	2301      	movs	r3, #1
 800d5fe:	603b      	str	r3, [r7, #0]
 800d600:	2005      	movs	r0, #5
 800d602:	e025      	b.n	800d650 <__hexnan+0x130>
 800d604:	3501      	adds	r5, #1
 800d606:	2d08      	cmp	r5, #8
 800d608:	f10b 0b01 	add.w	fp, fp, #1
 800d60c:	dd06      	ble.n	800d61c <__hexnan+0xfc>
 800d60e:	4544      	cmp	r4, r8
 800d610:	d9c3      	bls.n	800d59a <__hexnan+0x7a>
 800d612:	2300      	movs	r3, #0
 800d614:	f844 3c04 	str.w	r3, [r4, #-4]
 800d618:	2501      	movs	r5, #1
 800d61a:	3c04      	subs	r4, #4
 800d61c:	6822      	ldr	r2, [r4, #0]
 800d61e:	f000 000f 	and.w	r0, r0, #15
 800d622:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d626:	6020      	str	r0, [r4, #0]
 800d628:	e7b7      	b.n	800d59a <__hexnan+0x7a>
 800d62a:	2508      	movs	r5, #8
 800d62c:	e7b5      	b.n	800d59a <__hexnan+0x7a>
 800d62e:	9b01      	ldr	r3, [sp, #4]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d0df      	beq.n	800d5f4 <__hexnan+0xd4>
 800d634:	f1c3 0320 	rsb	r3, r3, #32
 800d638:	f04f 32ff 	mov.w	r2, #4294967295
 800d63c:	40da      	lsrs	r2, r3
 800d63e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d642:	4013      	ands	r3, r2
 800d644:	f846 3c04 	str.w	r3, [r6, #-4]
 800d648:	e7d4      	b.n	800d5f4 <__hexnan+0xd4>
 800d64a:	3f04      	subs	r7, #4
 800d64c:	e7d2      	b.n	800d5f4 <__hexnan+0xd4>
 800d64e:	2004      	movs	r0, #4
 800d650:	b007      	add	sp, #28
 800d652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d656 <__ascii_mbtowc>:
 800d656:	b082      	sub	sp, #8
 800d658:	b901      	cbnz	r1, 800d65c <__ascii_mbtowc+0x6>
 800d65a:	a901      	add	r1, sp, #4
 800d65c:	b142      	cbz	r2, 800d670 <__ascii_mbtowc+0x1a>
 800d65e:	b14b      	cbz	r3, 800d674 <__ascii_mbtowc+0x1e>
 800d660:	7813      	ldrb	r3, [r2, #0]
 800d662:	600b      	str	r3, [r1, #0]
 800d664:	7812      	ldrb	r2, [r2, #0]
 800d666:	1e10      	subs	r0, r2, #0
 800d668:	bf18      	it	ne
 800d66a:	2001      	movne	r0, #1
 800d66c:	b002      	add	sp, #8
 800d66e:	4770      	bx	lr
 800d670:	4610      	mov	r0, r2
 800d672:	e7fb      	b.n	800d66c <__ascii_mbtowc+0x16>
 800d674:	f06f 0001 	mvn.w	r0, #1
 800d678:	e7f8      	b.n	800d66c <__ascii_mbtowc+0x16>

0800d67a <_realloc_r>:
 800d67a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d67e:	4680      	mov	r8, r0
 800d680:	4614      	mov	r4, r2
 800d682:	460e      	mov	r6, r1
 800d684:	b921      	cbnz	r1, 800d690 <_realloc_r+0x16>
 800d686:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d68a:	4611      	mov	r1, r2
 800d68c:	f7fd be74 	b.w	800b378 <_malloc_r>
 800d690:	b92a      	cbnz	r2, 800d69e <_realloc_r+0x24>
 800d692:	f7fd fdfd 	bl	800b290 <_free_r>
 800d696:	4625      	mov	r5, r4
 800d698:	4628      	mov	r0, r5
 800d69a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d69e:	f000 f842 	bl	800d726 <_malloc_usable_size_r>
 800d6a2:	4284      	cmp	r4, r0
 800d6a4:	4607      	mov	r7, r0
 800d6a6:	d802      	bhi.n	800d6ae <_realloc_r+0x34>
 800d6a8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d6ac:	d812      	bhi.n	800d6d4 <_realloc_r+0x5a>
 800d6ae:	4621      	mov	r1, r4
 800d6b0:	4640      	mov	r0, r8
 800d6b2:	f7fd fe61 	bl	800b378 <_malloc_r>
 800d6b6:	4605      	mov	r5, r0
 800d6b8:	2800      	cmp	r0, #0
 800d6ba:	d0ed      	beq.n	800d698 <_realloc_r+0x1e>
 800d6bc:	42bc      	cmp	r4, r7
 800d6be:	4622      	mov	r2, r4
 800d6c0:	4631      	mov	r1, r6
 800d6c2:	bf28      	it	cs
 800d6c4:	463a      	movcs	r2, r7
 800d6c6:	f7ff fc25 	bl	800cf14 <memcpy>
 800d6ca:	4631      	mov	r1, r6
 800d6cc:	4640      	mov	r0, r8
 800d6ce:	f7fd fddf 	bl	800b290 <_free_r>
 800d6d2:	e7e1      	b.n	800d698 <_realloc_r+0x1e>
 800d6d4:	4635      	mov	r5, r6
 800d6d6:	e7df      	b.n	800d698 <_realloc_r+0x1e>

0800d6d8 <__ascii_wctomb>:
 800d6d8:	b149      	cbz	r1, 800d6ee <__ascii_wctomb+0x16>
 800d6da:	2aff      	cmp	r2, #255	; 0xff
 800d6dc:	bf85      	ittet	hi
 800d6de:	238a      	movhi	r3, #138	; 0x8a
 800d6e0:	6003      	strhi	r3, [r0, #0]
 800d6e2:	700a      	strbls	r2, [r1, #0]
 800d6e4:	f04f 30ff 	movhi.w	r0, #4294967295
 800d6e8:	bf98      	it	ls
 800d6ea:	2001      	movls	r0, #1
 800d6ec:	4770      	bx	lr
 800d6ee:	4608      	mov	r0, r1
 800d6f0:	4770      	bx	lr
	...

0800d6f4 <fiprintf>:
 800d6f4:	b40e      	push	{r1, r2, r3}
 800d6f6:	b503      	push	{r0, r1, lr}
 800d6f8:	4601      	mov	r1, r0
 800d6fa:	ab03      	add	r3, sp, #12
 800d6fc:	4805      	ldr	r0, [pc, #20]	; (800d714 <fiprintf+0x20>)
 800d6fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800d702:	6800      	ldr	r0, [r0, #0]
 800d704:	9301      	str	r3, [sp, #4]
 800d706:	f000 f83f 	bl	800d788 <_vfiprintf_r>
 800d70a:	b002      	add	sp, #8
 800d70c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d710:	b003      	add	sp, #12
 800d712:	4770      	bx	lr
 800d714:	24000068 	.word	0x24000068

0800d718 <abort>:
 800d718:	b508      	push	{r3, lr}
 800d71a:	2006      	movs	r0, #6
 800d71c:	f000 fa0c 	bl	800db38 <raise>
 800d720:	2001      	movs	r0, #1
 800d722:	f7f4 f8e3 	bl	80018ec <_exit>

0800d726 <_malloc_usable_size_r>:
 800d726:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d72a:	1f18      	subs	r0, r3, #4
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	bfbc      	itt	lt
 800d730:	580b      	ldrlt	r3, [r1, r0]
 800d732:	18c0      	addlt	r0, r0, r3
 800d734:	4770      	bx	lr

0800d736 <__sfputc_r>:
 800d736:	6893      	ldr	r3, [r2, #8]
 800d738:	3b01      	subs	r3, #1
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	b410      	push	{r4}
 800d73e:	6093      	str	r3, [r2, #8]
 800d740:	da08      	bge.n	800d754 <__sfputc_r+0x1e>
 800d742:	6994      	ldr	r4, [r2, #24]
 800d744:	42a3      	cmp	r3, r4
 800d746:	db01      	blt.n	800d74c <__sfputc_r+0x16>
 800d748:	290a      	cmp	r1, #10
 800d74a:	d103      	bne.n	800d754 <__sfputc_r+0x1e>
 800d74c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d750:	f000 b934 	b.w	800d9bc <__swbuf_r>
 800d754:	6813      	ldr	r3, [r2, #0]
 800d756:	1c58      	adds	r0, r3, #1
 800d758:	6010      	str	r0, [r2, #0]
 800d75a:	7019      	strb	r1, [r3, #0]
 800d75c:	4608      	mov	r0, r1
 800d75e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d762:	4770      	bx	lr

0800d764 <__sfputs_r>:
 800d764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d766:	4606      	mov	r6, r0
 800d768:	460f      	mov	r7, r1
 800d76a:	4614      	mov	r4, r2
 800d76c:	18d5      	adds	r5, r2, r3
 800d76e:	42ac      	cmp	r4, r5
 800d770:	d101      	bne.n	800d776 <__sfputs_r+0x12>
 800d772:	2000      	movs	r0, #0
 800d774:	e007      	b.n	800d786 <__sfputs_r+0x22>
 800d776:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d77a:	463a      	mov	r2, r7
 800d77c:	4630      	mov	r0, r6
 800d77e:	f7ff ffda 	bl	800d736 <__sfputc_r>
 800d782:	1c43      	adds	r3, r0, #1
 800d784:	d1f3      	bne.n	800d76e <__sfputs_r+0xa>
 800d786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d788 <_vfiprintf_r>:
 800d788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d78c:	460d      	mov	r5, r1
 800d78e:	b09d      	sub	sp, #116	; 0x74
 800d790:	4614      	mov	r4, r2
 800d792:	4698      	mov	r8, r3
 800d794:	4606      	mov	r6, r0
 800d796:	b118      	cbz	r0, 800d7a0 <_vfiprintf_r+0x18>
 800d798:	6a03      	ldr	r3, [r0, #32]
 800d79a:	b90b      	cbnz	r3, 800d7a0 <_vfiprintf_r+0x18>
 800d79c:	f7fc fe30 	bl	800a400 <__sinit>
 800d7a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d7a2:	07d9      	lsls	r1, r3, #31
 800d7a4:	d405      	bmi.n	800d7b2 <_vfiprintf_r+0x2a>
 800d7a6:	89ab      	ldrh	r3, [r5, #12]
 800d7a8:	059a      	lsls	r2, r3, #22
 800d7aa:	d402      	bmi.n	800d7b2 <_vfiprintf_r+0x2a>
 800d7ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d7ae:	f7fc ff71 	bl	800a694 <__retarget_lock_acquire_recursive>
 800d7b2:	89ab      	ldrh	r3, [r5, #12]
 800d7b4:	071b      	lsls	r3, r3, #28
 800d7b6:	d501      	bpl.n	800d7bc <_vfiprintf_r+0x34>
 800d7b8:	692b      	ldr	r3, [r5, #16]
 800d7ba:	b99b      	cbnz	r3, 800d7e4 <_vfiprintf_r+0x5c>
 800d7bc:	4629      	mov	r1, r5
 800d7be:	4630      	mov	r0, r6
 800d7c0:	f000 f93a 	bl	800da38 <__swsetup_r>
 800d7c4:	b170      	cbz	r0, 800d7e4 <_vfiprintf_r+0x5c>
 800d7c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d7c8:	07dc      	lsls	r4, r3, #31
 800d7ca:	d504      	bpl.n	800d7d6 <_vfiprintf_r+0x4e>
 800d7cc:	f04f 30ff 	mov.w	r0, #4294967295
 800d7d0:	b01d      	add	sp, #116	; 0x74
 800d7d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7d6:	89ab      	ldrh	r3, [r5, #12]
 800d7d8:	0598      	lsls	r0, r3, #22
 800d7da:	d4f7      	bmi.n	800d7cc <_vfiprintf_r+0x44>
 800d7dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d7de:	f7fc ff5a 	bl	800a696 <__retarget_lock_release_recursive>
 800d7e2:	e7f3      	b.n	800d7cc <_vfiprintf_r+0x44>
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	9309      	str	r3, [sp, #36]	; 0x24
 800d7e8:	2320      	movs	r3, #32
 800d7ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d7ee:	f8cd 800c 	str.w	r8, [sp, #12]
 800d7f2:	2330      	movs	r3, #48	; 0x30
 800d7f4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d9a8 <_vfiprintf_r+0x220>
 800d7f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d7fc:	f04f 0901 	mov.w	r9, #1
 800d800:	4623      	mov	r3, r4
 800d802:	469a      	mov	sl, r3
 800d804:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d808:	b10a      	cbz	r2, 800d80e <_vfiprintf_r+0x86>
 800d80a:	2a25      	cmp	r2, #37	; 0x25
 800d80c:	d1f9      	bne.n	800d802 <_vfiprintf_r+0x7a>
 800d80e:	ebba 0b04 	subs.w	fp, sl, r4
 800d812:	d00b      	beq.n	800d82c <_vfiprintf_r+0xa4>
 800d814:	465b      	mov	r3, fp
 800d816:	4622      	mov	r2, r4
 800d818:	4629      	mov	r1, r5
 800d81a:	4630      	mov	r0, r6
 800d81c:	f7ff ffa2 	bl	800d764 <__sfputs_r>
 800d820:	3001      	adds	r0, #1
 800d822:	f000 80a9 	beq.w	800d978 <_vfiprintf_r+0x1f0>
 800d826:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d828:	445a      	add	r2, fp
 800d82a:	9209      	str	r2, [sp, #36]	; 0x24
 800d82c:	f89a 3000 	ldrb.w	r3, [sl]
 800d830:	2b00      	cmp	r3, #0
 800d832:	f000 80a1 	beq.w	800d978 <_vfiprintf_r+0x1f0>
 800d836:	2300      	movs	r3, #0
 800d838:	f04f 32ff 	mov.w	r2, #4294967295
 800d83c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d840:	f10a 0a01 	add.w	sl, sl, #1
 800d844:	9304      	str	r3, [sp, #16]
 800d846:	9307      	str	r3, [sp, #28]
 800d848:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d84c:	931a      	str	r3, [sp, #104]	; 0x68
 800d84e:	4654      	mov	r4, sl
 800d850:	2205      	movs	r2, #5
 800d852:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d856:	4854      	ldr	r0, [pc, #336]	; (800d9a8 <_vfiprintf_r+0x220>)
 800d858:	f7f2 fd42 	bl	80002e0 <memchr>
 800d85c:	9a04      	ldr	r2, [sp, #16]
 800d85e:	b9d8      	cbnz	r0, 800d898 <_vfiprintf_r+0x110>
 800d860:	06d1      	lsls	r1, r2, #27
 800d862:	bf44      	itt	mi
 800d864:	2320      	movmi	r3, #32
 800d866:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d86a:	0713      	lsls	r3, r2, #28
 800d86c:	bf44      	itt	mi
 800d86e:	232b      	movmi	r3, #43	; 0x2b
 800d870:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d874:	f89a 3000 	ldrb.w	r3, [sl]
 800d878:	2b2a      	cmp	r3, #42	; 0x2a
 800d87a:	d015      	beq.n	800d8a8 <_vfiprintf_r+0x120>
 800d87c:	9a07      	ldr	r2, [sp, #28]
 800d87e:	4654      	mov	r4, sl
 800d880:	2000      	movs	r0, #0
 800d882:	f04f 0c0a 	mov.w	ip, #10
 800d886:	4621      	mov	r1, r4
 800d888:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d88c:	3b30      	subs	r3, #48	; 0x30
 800d88e:	2b09      	cmp	r3, #9
 800d890:	d94d      	bls.n	800d92e <_vfiprintf_r+0x1a6>
 800d892:	b1b0      	cbz	r0, 800d8c2 <_vfiprintf_r+0x13a>
 800d894:	9207      	str	r2, [sp, #28]
 800d896:	e014      	b.n	800d8c2 <_vfiprintf_r+0x13a>
 800d898:	eba0 0308 	sub.w	r3, r0, r8
 800d89c:	fa09 f303 	lsl.w	r3, r9, r3
 800d8a0:	4313      	orrs	r3, r2
 800d8a2:	9304      	str	r3, [sp, #16]
 800d8a4:	46a2      	mov	sl, r4
 800d8a6:	e7d2      	b.n	800d84e <_vfiprintf_r+0xc6>
 800d8a8:	9b03      	ldr	r3, [sp, #12]
 800d8aa:	1d19      	adds	r1, r3, #4
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	9103      	str	r1, [sp, #12]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	bfbb      	ittet	lt
 800d8b4:	425b      	neglt	r3, r3
 800d8b6:	f042 0202 	orrlt.w	r2, r2, #2
 800d8ba:	9307      	strge	r3, [sp, #28]
 800d8bc:	9307      	strlt	r3, [sp, #28]
 800d8be:	bfb8      	it	lt
 800d8c0:	9204      	strlt	r2, [sp, #16]
 800d8c2:	7823      	ldrb	r3, [r4, #0]
 800d8c4:	2b2e      	cmp	r3, #46	; 0x2e
 800d8c6:	d10c      	bne.n	800d8e2 <_vfiprintf_r+0x15a>
 800d8c8:	7863      	ldrb	r3, [r4, #1]
 800d8ca:	2b2a      	cmp	r3, #42	; 0x2a
 800d8cc:	d134      	bne.n	800d938 <_vfiprintf_r+0x1b0>
 800d8ce:	9b03      	ldr	r3, [sp, #12]
 800d8d0:	1d1a      	adds	r2, r3, #4
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	9203      	str	r2, [sp, #12]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	bfb8      	it	lt
 800d8da:	f04f 33ff 	movlt.w	r3, #4294967295
 800d8de:	3402      	adds	r4, #2
 800d8e0:	9305      	str	r3, [sp, #20]
 800d8e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d9b8 <_vfiprintf_r+0x230>
 800d8e6:	7821      	ldrb	r1, [r4, #0]
 800d8e8:	2203      	movs	r2, #3
 800d8ea:	4650      	mov	r0, sl
 800d8ec:	f7f2 fcf8 	bl	80002e0 <memchr>
 800d8f0:	b138      	cbz	r0, 800d902 <_vfiprintf_r+0x17a>
 800d8f2:	9b04      	ldr	r3, [sp, #16]
 800d8f4:	eba0 000a 	sub.w	r0, r0, sl
 800d8f8:	2240      	movs	r2, #64	; 0x40
 800d8fa:	4082      	lsls	r2, r0
 800d8fc:	4313      	orrs	r3, r2
 800d8fe:	3401      	adds	r4, #1
 800d900:	9304      	str	r3, [sp, #16]
 800d902:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d906:	4829      	ldr	r0, [pc, #164]	; (800d9ac <_vfiprintf_r+0x224>)
 800d908:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d90c:	2206      	movs	r2, #6
 800d90e:	f7f2 fce7 	bl	80002e0 <memchr>
 800d912:	2800      	cmp	r0, #0
 800d914:	d03f      	beq.n	800d996 <_vfiprintf_r+0x20e>
 800d916:	4b26      	ldr	r3, [pc, #152]	; (800d9b0 <_vfiprintf_r+0x228>)
 800d918:	bb1b      	cbnz	r3, 800d962 <_vfiprintf_r+0x1da>
 800d91a:	9b03      	ldr	r3, [sp, #12]
 800d91c:	3307      	adds	r3, #7
 800d91e:	f023 0307 	bic.w	r3, r3, #7
 800d922:	3308      	adds	r3, #8
 800d924:	9303      	str	r3, [sp, #12]
 800d926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d928:	443b      	add	r3, r7
 800d92a:	9309      	str	r3, [sp, #36]	; 0x24
 800d92c:	e768      	b.n	800d800 <_vfiprintf_r+0x78>
 800d92e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d932:	460c      	mov	r4, r1
 800d934:	2001      	movs	r0, #1
 800d936:	e7a6      	b.n	800d886 <_vfiprintf_r+0xfe>
 800d938:	2300      	movs	r3, #0
 800d93a:	3401      	adds	r4, #1
 800d93c:	9305      	str	r3, [sp, #20]
 800d93e:	4619      	mov	r1, r3
 800d940:	f04f 0c0a 	mov.w	ip, #10
 800d944:	4620      	mov	r0, r4
 800d946:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d94a:	3a30      	subs	r2, #48	; 0x30
 800d94c:	2a09      	cmp	r2, #9
 800d94e:	d903      	bls.n	800d958 <_vfiprintf_r+0x1d0>
 800d950:	2b00      	cmp	r3, #0
 800d952:	d0c6      	beq.n	800d8e2 <_vfiprintf_r+0x15a>
 800d954:	9105      	str	r1, [sp, #20]
 800d956:	e7c4      	b.n	800d8e2 <_vfiprintf_r+0x15a>
 800d958:	fb0c 2101 	mla	r1, ip, r1, r2
 800d95c:	4604      	mov	r4, r0
 800d95e:	2301      	movs	r3, #1
 800d960:	e7f0      	b.n	800d944 <_vfiprintf_r+0x1bc>
 800d962:	ab03      	add	r3, sp, #12
 800d964:	9300      	str	r3, [sp, #0]
 800d966:	462a      	mov	r2, r5
 800d968:	4b12      	ldr	r3, [pc, #72]	; (800d9b4 <_vfiprintf_r+0x22c>)
 800d96a:	a904      	add	r1, sp, #16
 800d96c:	4630      	mov	r0, r6
 800d96e:	f7fb ff1f 	bl	80097b0 <_printf_float>
 800d972:	4607      	mov	r7, r0
 800d974:	1c78      	adds	r0, r7, #1
 800d976:	d1d6      	bne.n	800d926 <_vfiprintf_r+0x19e>
 800d978:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d97a:	07d9      	lsls	r1, r3, #31
 800d97c:	d405      	bmi.n	800d98a <_vfiprintf_r+0x202>
 800d97e:	89ab      	ldrh	r3, [r5, #12]
 800d980:	059a      	lsls	r2, r3, #22
 800d982:	d402      	bmi.n	800d98a <_vfiprintf_r+0x202>
 800d984:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d986:	f7fc fe86 	bl	800a696 <__retarget_lock_release_recursive>
 800d98a:	89ab      	ldrh	r3, [r5, #12]
 800d98c:	065b      	lsls	r3, r3, #25
 800d98e:	f53f af1d 	bmi.w	800d7cc <_vfiprintf_r+0x44>
 800d992:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d994:	e71c      	b.n	800d7d0 <_vfiprintf_r+0x48>
 800d996:	ab03      	add	r3, sp, #12
 800d998:	9300      	str	r3, [sp, #0]
 800d99a:	462a      	mov	r2, r5
 800d99c:	4b05      	ldr	r3, [pc, #20]	; (800d9b4 <_vfiprintf_r+0x22c>)
 800d99e:	a904      	add	r1, sp, #16
 800d9a0:	4630      	mov	r0, r6
 800d9a2:	f7fc f98d 	bl	8009cc0 <_printf_i>
 800d9a6:	e7e4      	b.n	800d972 <_vfiprintf_r+0x1ea>
 800d9a8:	0800e059 	.word	0x0800e059
 800d9ac:	0800e063 	.word	0x0800e063
 800d9b0:	080097b1 	.word	0x080097b1
 800d9b4:	0800d765 	.word	0x0800d765
 800d9b8:	0800e05f 	.word	0x0800e05f

0800d9bc <__swbuf_r>:
 800d9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9be:	460e      	mov	r6, r1
 800d9c0:	4614      	mov	r4, r2
 800d9c2:	4605      	mov	r5, r0
 800d9c4:	b118      	cbz	r0, 800d9ce <__swbuf_r+0x12>
 800d9c6:	6a03      	ldr	r3, [r0, #32]
 800d9c8:	b90b      	cbnz	r3, 800d9ce <__swbuf_r+0x12>
 800d9ca:	f7fc fd19 	bl	800a400 <__sinit>
 800d9ce:	69a3      	ldr	r3, [r4, #24]
 800d9d0:	60a3      	str	r3, [r4, #8]
 800d9d2:	89a3      	ldrh	r3, [r4, #12]
 800d9d4:	071a      	lsls	r2, r3, #28
 800d9d6:	d525      	bpl.n	800da24 <__swbuf_r+0x68>
 800d9d8:	6923      	ldr	r3, [r4, #16]
 800d9da:	b31b      	cbz	r3, 800da24 <__swbuf_r+0x68>
 800d9dc:	6823      	ldr	r3, [r4, #0]
 800d9de:	6922      	ldr	r2, [r4, #16]
 800d9e0:	1a98      	subs	r0, r3, r2
 800d9e2:	6963      	ldr	r3, [r4, #20]
 800d9e4:	b2f6      	uxtb	r6, r6
 800d9e6:	4283      	cmp	r3, r0
 800d9e8:	4637      	mov	r7, r6
 800d9ea:	dc04      	bgt.n	800d9f6 <__swbuf_r+0x3a>
 800d9ec:	4621      	mov	r1, r4
 800d9ee:	4628      	mov	r0, r5
 800d9f0:	f7ff fa2c 	bl	800ce4c <_fflush_r>
 800d9f4:	b9e0      	cbnz	r0, 800da30 <__swbuf_r+0x74>
 800d9f6:	68a3      	ldr	r3, [r4, #8]
 800d9f8:	3b01      	subs	r3, #1
 800d9fa:	60a3      	str	r3, [r4, #8]
 800d9fc:	6823      	ldr	r3, [r4, #0]
 800d9fe:	1c5a      	adds	r2, r3, #1
 800da00:	6022      	str	r2, [r4, #0]
 800da02:	701e      	strb	r6, [r3, #0]
 800da04:	6962      	ldr	r2, [r4, #20]
 800da06:	1c43      	adds	r3, r0, #1
 800da08:	429a      	cmp	r2, r3
 800da0a:	d004      	beq.n	800da16 <__swbuf_r+0x5a>
 800da0c:	89a3      	ldrh	r3, [r4, #12]
 800da0e:	07db      	lsls	r3, r3, #31
 800da10:	d506      	bpl.n	800da20 <__swbuf_r+0x64>
 800da12:	2e0a      	cmp	r6, #10
 800da14:	d104      	bne.n	800da20 <__swbuf_r+0x64>
 800da16:	4621      	mov	r1, r4
 800da18:	4628      	mov	r0, r5
 800da1a:	f7ff fa17 	bl	800ce4c <_fflush_r>
 800da1e:	b938      	cbnz	r0, 800da30 <__swbuf_r+0x74>
 800da20:	4638      	mov	r0, r7
 800da22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da24:	4621      	mov	r1, r4
 800da26:	4628      	mov	r0, r5
 800da28:	f000 f806 	bl	800da38 <__swsetup_r>
 800da2c:	2800      	cmp	r0, #0
 800da2e:	d0d5      	beq.n	800d9dc <__swbuf_r+0x20>
 800da30:	f04f 37ff 	mov.w	r7, #4294967295
 800da34:	e7f4      	b.n	800da20 <__swbuf_r+0x64>
	...

0800da38 <__swsetup_r>:
 800da38:	b538      	push	{r3, r4, r5, lr}
 800da3a:	4b2a      	ldr	r3, [pc, #168]	; (800dae4 <__swsetup_r+0xac>)
 800da3c:	4605      	mov	r5, r0
 800da3e:	6818      	ldr	r0, [r3, #0]
 800da40:	460c      	mov	r4, r1
 800da42:	b118      	cbz	r0, 800da4c <__swsetup_r+0x14>
 800da44:	6a03      	ldr	r3, [r0, #32]
 800da46:	b90b      	cbnz	r3, 800da4c <__swsetup_r+0x14>
 800da48:	f7fc fcda 	bl	800a400 <__sinit>
 800da4c:	89a3      	ldrh	r3, [r4, #12]
 800da4e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800da52:	0718      	lsls	r0, r3, #28
 800da54:	d422      	bmi.n	800da9c <__swsetup_r+0x64>
 800da56:	06d9      	lsls	r1, r3, #27
 800da58:	d407      	bmi.n	800da6a <__swsetup_r+0x32>
 800da5a:	2309      	movs	r3, #9
 800da5c:	602b      	str	r3, [r5, #0]
 800da5e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800da62:	81a3      	strh	r3, [r4, #12]
 800da64:	f04f 30ff 	mov.w	r0, #4294967295
 800da68:	e034      	b.n	800dad4 <__swsetup_r+0x9c>
 800da6a:	0758      	lsls	r0, r3, #29
 800da6c:	d512      	bpl.n	800da94 <__swsetup_r+0x5c>
 800da6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800da70:	b141      	cbz	r1, 800da84 <__swsetup_r+0x4c>
 800da72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800da76:	4299      	cmp	r1, r3
 800da78:	d002      	beq.n	800da80 <__swsetup_r+0x48>
 800da7a:	4628      	mov	r0, r5
 800da7c:	f7fd fc08 	bl	800b290 <_free_r>
 800da80:	2300      	movs	r3, #0
 800da82:	6363      	str	r3, [r4, #52]	; 0x34
 800da84:	89a3      	ldrh	r3, [r4, #12]
 800da86:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800da8a:	81a3      	strh	r3, [r4, #12]
 800da8c:	2300      	movs	r3, #0
 800da8e:	6063      	str	r3, [r4, #4]
 800da90:	6923      	ldr	r3, [r4, #16]
 800da92:	6023      	str	r3, [r4, #0]
 800da94:	89a3      	ldrh	r3, [r4, #12]
 800da96:	f043 0308 	orr.w	r3, r3, #8
 800da9a:	81a3      	strh	r3, [r4, #12]
 800da9c:	6923      	ldr	r3, [r4, #16]
 800da9e:	b94b      	cbnz	r3, 800dab4 <__swsetup_r+0x7c>
 800daa0:	89a3      	ldrh	r3, [r4, #12]
 800daa2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800daa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800daaa:	d003      	beq.n	800dab4 <__swsetup_r+0x7c>
 800daac:	4621      	mov	r1, r4
 800daae:	4628      	mov	r0, r5
 800dab0:	f000 f884 	bl	800dbbc <__smakebuf_r>
 800dab4:	89a0      	ldrh	r0, [r4, #12]
 800dab6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800daba:	f010 0301 	ands.w	r3, r0, #1
 800dabe:	d00a      	beq.n	800dad6 <__swsetup_r+0x9e>
 800dac0:	2300      	movs	r3, #0
 800dac2:	60a3      	str	r3, [r4, #8]
 800dac4:	6963      	ldr	r3, [r4, #20]
 800dac6:	425b      	negs	r3, r3
 800dac8:	61a3      	str	r3, [r4, #24]
 800daca:	6923      	ldr	r3, [r4, #16]
 800dacc:	b943      	cbnz	r3, 800dae0 <__swsetup_r+0xa8>
 800dace:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dad2:	d1c4      	bne.n	800da5e <__swsetup_r+0x26>
 800dad4:	bd38      	pop	{r3, r4, r5, pc}
 800dad6:	0781      	lsls	r1, r0, #30
 800dad8:	bf58      	it	pl
 800dada:	6963      	ldrpl	r3, [r4, #20]
 800dadc:	60a3      	str	r3, [r4, #8]
 800dade:	e7f4      	b.n	800daca <__swsetup_r+0x92>
 800dae0:	2000      	movs	r0, #0
 800dae2:	e7f7      	b.n	800dad4 <__swsetup_r+0x9c>
 800dae4:	24000068 	.word	0x24000068

0800dae8 <_raise_r>:
 800dae8:	291f      	cmp	r1, #31
 800daea:	b538      	push	{r3, r4, r5, lr}
 800daec:	4604      	mov	r4, r0
 800daee:	460d      	mov	r5, r1
 800daf0:	d904      	bls.n	800dafc <_raise_r+0x14>
 800daf2:	2316      	movs	r3, #22
 800daf4:	6003      	str	r3, [r0, #0]
 800daf6:	f04f 30ff 	mov.w	r0, #4294967295
 800dafa:	bd38      	pop	{r3, r4, r5, pc}
 800dafc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800dafe:	b112      	cbz	r2, 800db06 <_raise_r+0x1e>
 800db00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800db04:	b94b      	cbnz	r3, 800db1a <_raise_r+0x32>
 800db06:	4620      	mov	r0, r4
 800db08:	f000 f830 	bl	800db6c <_getpid_r>
 800db0c:	462a      	mov	r2, r5
 800db0e:	4601      	mov	r1, r0
 800db10:	4620      	mov	r0, r4
 800db12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800db16:	f000 b817 	b.w	800db48 <_kill_r>
 800db1a:	2b01      	cmp	r3, #1
 800db1c:	d00a      	beq.n	800db34 <_raise_r+0x4c>
 800db1e:	1c59      	adds	r1, r3, #1
 800db20:	d103      	bne.n	800db2a <_raise_r+0x42>
 800db22:	2316      	movs	r3, #22
 800db24:	6003      	str	r3, [r0, #0]
 800db26:	2001      	movs	r0, #1
 800db28:	e7e7      	b.n	800dafa <_raise_r+0x12>
 800db2a:	2400      	movs	r4, #0
 800db2c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800db30:	4628      	mov	r0, r5
 800db32:	4798      	blx	r3
 800db34:	2000      	movs	r0, #0
 800db36:	e7e0      	b.n	800dafa <_raise_r+0x12>

0800db38 <raise>:
 800db38:	4b02      	ldr	r3, [pc, #8]	; (800db44 <raise+0xc>)
 800db3a:	4601      	mov	r1, r0
 800db3c:	6818      	ldr	r0, [r3, #0]
 800db3e:	f7ff bfd3 	b.w	800dae8 <_raise_r>
 800db42:	bf00      	nop
 800db44:	24000068 	.word	0x24000068

0800db48 <_kill_r>:
 800db48:	b538      	push	{r3, r4, r5, lr}
 800db4a:	4d07      	ldr	r5, [pc, #28]	; (800db68 <_kill_r+0x20>)
 800db4c:	2300      	movs	r3, #0
 800db4e:	4604      	mov	r4, r0
 800db50:	4608      	mov	r0, r1
 800db52:	4611      	mov	r1, r2
 800db54:	602b      	str	r3, [r5, #0]
 800db56:	f7f3 feb9 	bl	80018cc <_kill>
 800db5a:	1c43      	adds	r3, r0, #1
 800db5c:	d102      	bne.n	800db64 <_kill_r+0x1c>
 800db5e:	682b      	ldr	r3, [r5, #0]
 800db60:	b103      	cbz	r3, 800db64 <_kill_r+0x1c>
 800db62:	6023      	str	r3, [r4, #0]
 800db64:	bd38      	pop	{r3, r4, r5, pc}
 800db66:	bf00      	nop
 800db68:	24000bdc 	.word	0x24000bdc

0800db6c <_getpid_r>:
 800db6c:	f7f3 bea6 	b.w	80018bc <_getpid>

0800db70 <__swhatbuf_r>:
 800db70:	b570      	push	{r4, r5, r6, lr}
 800db72:	460c      	mov	r4, r1
 800db74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db78:	2900      	cmp	r1, #0
 800db7a:	b096      	sub	sp, #88	; 0x58
 800db7c:	4615      	mov	r5, r2
 800db7e:	461e      	mov	r6, r3
 800db80:	da0d      	bge.n	800db9e <__swhatbuf_r+0x2e>
 800db82:	89a3      	ldrh	r3, [r4, #12]
 800db84:	f013 0f80 	tst.w	r3, #128	; 0x80
 800db88:	f04f 0100 	mov.w	r1, #0
 800db8c:	bf0c      	ite	eq
 800db8e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800db92:	2340      	movne	r3, #64	; 0x40
 800db94:	2000      	movs	r0, #0
 800db96:	6031      	str	r1, [r6, #0]
 800db98:	602b      	str	r3, [r5, #0]
 800db9a:	b016      	add	sp, #88	; 0x58
 800db9c:	bd70      	pop	{r4, r5, r6, pc}
 800db9e:	466a      	mov	r2, sp
 800dba0:	f000 f848 	bl	800dc34 <_fstat_r>
 800dba4:	2800      	cmp	r0, #0
 800dba6:	dbec      	blt.n	800db82 <__swhatbuf_r+0x12>
 800dba8:	9901      	ldr	r1, [sp, #4]
 800dbaa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800dbae:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800dbb2:	4259      	negs	r1, r3
 800dbb4:	4159      	adcs	r1, r3
 800dbb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dbba:	e7eb      	b.n	800db94 <__swhatbuf_r+0x24>

0800dbbc <__smakebuf_r>:
 800dbbc:	898b      	ldrh	r3, [r1, #12]
 800dbbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dbc0:	079d      	lsls	r5, r3, #30
 800dbc2:	4606      	mov	r6, r0
 800dbc4:	460c      	mov	r4, r1
 800dbc6:	d507      	bpl.n	800dbd8 <__smakebuf_r+0x1c>
 800dbc8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dbcc:	6023      	str	r3, [r4, #0]
 800dbce:	6123      	str	r3, [r4, #16]
 800dbd0:	2301      	movs	r3, #1
 800dbd2:	6163      	str	r3, [r4, #20]
 800dbd4:	b002      	add	sp, #8
 800dbd6:	bd70      	pop	{r4, r5, r6, pc}
 800dbd8:	ab01      	add	r3, sp, #4
 800dbda:	466a      	mov	r2, sp
 800dbdc:	f7ff ffc8 	bl	800db70 <__swhatbuf_r>
 800dbe0:	9900      	ldr	r1, [sp, #0]
 800dbe2:	4605      	mov	r5, r0
 800dbe4:	4630      	mov	r0, r6
 800dbe6:	f7fd fbc7 	bl	800b378 <_malloc_r>
 800dbea:	b948      	cbnz	r0, 800dc00 <__smakebuf_r+0x44>
 800dbec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbf0:	059a      	lsls	r2, r3, #22
 800dbf2:	d4ef      	bmi.n	800dbd4 <__smakebuf_r+0x18>
 800dbf4:	f023 0303 	bic.w	r3, r3, #3
 800dbf8:	f043 0302 	orr.w	r3, r3, #2
 800dbfc:	81a3      	strh	r3, [r4, #12]
 800dbfe:	e7e3      	b.n	800dbc8 <__smakebuf_r+0xc>
 800dc00:	89a3      	ldrh	r3, [r4, #12]
 800dc02:	6020      	str	r0, [r4, #0]
 800dc04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc08:	81a3      	strh	r3, [r4, #12]
 800dc0a:	9b00      	ldr	r3, [sp, #0]
 800dc0c:	6163      	str	r3, [r4, #20]
 800dc0e:	9b01      	ldr	r3, [sp, #4]
 800dc10:	6120      	str	r0, [r4, #16]
 800dc12:	b15b      	cbz	r3, 800dc2c <__smakebuf_r+0x70>
 800dc14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc18:	4630      	mov	r0, r6
 800dc1a:	f000 f81d 	bl	800dc58 <_isatty_r>
 800dc1e:	b128      	cbz	r0, 800dc2c <__smakebuf_r+0x70>
 800dc20:	89a3      	ldrh	r3, [r4, #12]
 800dc22:	f023 0303 	bic.w	r3, r3, #3
 800dc26:	f043 0301 	orr.w	r3, r3, #1
 800dc2a:	81a3      	strh	r3, [r4, #12]
 800dc2c:	89a3      	ldrh	r3, [r4, #12]
 800dc2e:	431d      	orrs	r5, r3
 800dc30:	81a5      	strh	r5, [r4, #12]
 800dc32:	e7cf      	b.n	800dbd4 <__smakebuf_r+0x18>

0800dc34 <_fstat_r>:
 800dc34:	b538      	push	{r3, r4, r5, lr}
 800dc36:	4d07      	ldr	r5, [pc, #28]	; (800dc54 <_fstat_r+0x20>)
 800dc38:	2300      	movs	r3, #0
 800dc3a:	4604      	mov	r4, r0
 800dc3c:	4608      	mov	r0, r1
 800dc3e:	4611      	mov	r1, r2
 800dc40:	602b      	str	r3, [r5, #0]
 800dc42:	f7f3 fea2 	bl	800198a <_fstat>
 800dc46:	1c43      	adds	r3, r0, #1
 800dc48:	d102      	bne.n	800dc50 <_fstat_r+0x1c>
 800dc4a:	682b      	ldr	r3, [r5, #0]
 800dc4c:	b103      	cbz	r3, 800dc50 <_fstat_r+0x1c>
 800dc4e:	6023      	str	r3, [r4, #0]
 800dc50:	bd38      	pop	{r3, r4, r5, pc}
 800dc52:	bf00      	nop
 800dc54:	24000bdc 	.word	0x24000bdc

0800dc58 <_isatty_r>:
 800dc58:	b538      	push	{r3, r4, r5, lr}
 800dc5a:	4d06      	ldr	r5, [pc, #24]	; (800dc74 <_isatty_r+0x1c>)
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	4604      	mov	r4, r0
 800dc60:	4608      	mov	r0, r1
 800dc62:	602b      	str	r3, [r5, #0]
 800dc64:	f7f3 fea1 	bl	80019aa <_isatty>
 800dc68:	1c43      	adds	r3, r0, #1
 800dc6a:	d102      	bne.n	800dc72 <_isatty_r+0x1a>
 800dc6c:	682b      	ldr	r3, [r5, #0]
 800dc6e:	b103      	cbz	r3, 800dc72 <_isatty_r+0x1a>
 800dc70:	6023      	str	r3, [r4, #0]
 800dc72:	bd38      	pop	{r3, r4, r5, pc}
 800dc74:	24000bdc 	.word	0x24000bdc

0800dc78 <_init>:
 800dc78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc7a:	bf00      	nop
 800dc7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc7e:	bc08      	pop	{r3}
 800dc80:	469e      	mov	lr, r3
 800dc82:	4770      	bx	lr

0800dc84 <_fini>:
 800dc84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc86:	bf00      	nop
 800dc88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc8a:	bc08      	pop	{r3}
 800dc8c:	469e      	mov	lr, r3
 800dc8e:	4770      	bx	lr
