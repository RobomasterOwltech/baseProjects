
acelerometro_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f330  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f8  0800f5d0  0800f5d0  0001f5d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fac8  0800fac8  0002029c  2**0
                  CONTENTS
  4 .ARM          00000008  0800fac8  0800fac8  0001fac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fad0  0800fad0  0002029c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fad0  0800fad0  0001fad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fad4  0800fad4  0001fad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  24000000  0800fad8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  240001dc  0800fcb4  000201dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  2400023c  0800fd14  0002023c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000052a8  2400029c  0800fd74  0002029c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  24005544  0800fd74  00025544  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0002029c  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000202ca  2**0
                  CONTENTS, READONLY
 15 .debug_info   0002da07  00000000  00000000  0002030d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00004f15  00000000  00000000  0004dd14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000021c0  00000000  00000000  00052c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001a53  00000000  00000000  00054df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003ec7c  00000000  00000000  00056843  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00029eb9  00000000  00000000  000954bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00199dc1  00000000  00000000  000bf378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000a568  00000000  00000000  0025913c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006c  00000000  00000000  002636a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400029c 	.word	0x2400029c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f5b8 	.word	0x0800f5b8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002a0 	.word	0x240002a0
 80002dc:	0800f5b8 	.word	0x0800f5b8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a8 	b.w	8000a70 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9e08      	ldr	r6, [sp, #32]
 80007ae:	460d      	mov	r5, r1
 80007b0:	4604      	mov	r4, r0
 80007b2:	460f      	mov	r7, r1
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d14a      	bne.n	800084e <__udivmoddi4+0xa6>
 80007b8:	428a      	cmp	r2, r1
 80007ba:	4694      	mov	ip, r2
 80007bc:	d965      	bls.n	800088a <__udivmoddi4+0xe2>
 80007be:	fab2 f382 	clz	r3, r2
 80007c2:	b143      	cbz	r3, 80007d6 <__udivmoddi4+0x2e>
 80007c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80007c8:	f1c3 0220 	rsb	r2, r3, #32
 80007cc:	409f      	lsls	r7, r3
 80007ce:	fa20 f202 	lsr.w	r2, r0, r2
 80007d2:	4317      	orrs	r7, r2
 80007d4:	409c      	lsls	r4, r3
 80007d6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80007da:	fa1f f58c 	uxth.w	r5, ip
 80007de:	fbb7 f1fe 	udiv	r1, r7, lr
 80007e2:	0c22      	lsrs	r2, r4, #16
 80007e4:	fb0e 7711 	mls	r7, lr, r1, r7
 80007e8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80007ec:	fb01 f005 	mul.w	r0, r1, r5
 80007f0:	4290      	cmp	r0, r2
 80007f2:	d90a      	bls.n	800080a <__udivmoddi4+0x62>
 80007f4:	eb1c 0202 	adds.w	r2, ip, r2
 80007f8:	f101 37ff 	add.w	r7, r1, #4294967295
 80007fc:	f080 811c 	bcs.w	8000a38 <__udivmoddi4+0x290>
 8000800:	4290      	cmp	r0, r2
 8000802:	f240 8119 	bls.w	8000a38 <__udivmoddi4+0x290>
 8000806:	3902      	subs	r1, #2
 8000808:	4462      	add	r2, ip
 800080a:	1a12      	subs	r2, r2, r0
 800080c:	b2a4      	uxth	r4, r4
 800080e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000812:	fb0e 2210 	mls	r2, lr, r0, r2
 8000816:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800081a:	fb00 f505 	mul.w	r5, r0, r5
 800081e:	42a5      	cmp	r5, r4
 8000820:	d90a      	bls.n	8000838 <__udivmoddi4+0x90>
 8000822:	eb1c 0404 	adds.w	r4, ip, r4
 8000826:	f100 32ff 	add.w	r2, r0, #4294967295
 800082a:	f080 8107 	bcs.w	8000a3c <__udivmoddi4+0x294>
 800082e:	42a5      	cmp	r5, r4
 8000830:	f240 8104 	bls.w	8000a3c <__udivmoddi4+0x294>
 8000834:	4464      	add	r4, ip
 8000836:	3802      	subs	r0, #2
 8000838:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800083c:	1b64      	subs	r4, r4, r5
 800083e:	2100      	movs	r1, #0
 8000840:	b11e      	cbz	r6, 800084a <__udivmoddi4+0xa2>
 8000842:	40dc      	lsrs	r4, r3
 8000844:	2300      	movs	r3, #0
 8000846:	e9c6 4300 	strd	r4, r3, [r6]
 800084a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084e:	428b      	cmp	r3, r1
 8000850:	d908      	bls.n	8000864 <__udivmoddi4+0xbc>
 8000852:	2e00      	cmp	r6, #0
 8000854:	f000 80ed 	beq.w	8000a32 <__udivmoddi4+0x28a>
 8000858:	2100      	movs	r1, #0
 800085a:	e9c6 0500 	strd	r0, r5, [r6]
 800085e:	4608      	mov	r0, r1
 8000860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000864:	fab3 f183 	clz	r1, r3
 8000868:	2900      	cmp	r1, #0
 800086a:	d149      	bne.n	8000900 <__udivmoddi4+0x158>
 800086c:	42ab      	cmp	r3, r5
 800086e:	d302      	bcc.n	8000876 <__udivmoddi4+0xce>
 8000870:	4282      	cmp	r2, r0
 8000872:	f200 80f8 	bhi.w	8000a66 <__udivmoddi4+0x2be>
 8000876:	1a84      	subs	r4, r0, r2
 8000878:	eb65 0203 	sbc.w	r2, r5, r3
 800087c:	2001      	movs	r0, #1
 800087e:	4617      	mov	r7, r2
 8000880:	2e00      	cmp	r6, #0
 8000882:	d0e2      	beq.n	800084a <__udivmoddi4+0xa2>
 8000884:	e9c6 4700 	strd	r4, r7, [r6]
 8000888:	e7df      	b.n	800084a <__udivmoddi4+0xa2>
 800088a:	b902      	cbnz	r2, 800088e <__udivmoddi4+0xe6>
 800088c:	deff      	udf	#255	; 0xff
 800088e:	fab2 f382 	clz	r3, r2
 8000892:	2b00      	cmp	r3, #0
 8000894:	f040 8090 	bne.w	80009b8 <__udivmoddi4+0x210>
 8000898:	1a8a      	subs	r2, r1, r2
 800089a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800089e:	fa1f fe8c 	uxth.w	lr, ip
 80008a2:	2101      	movs	r1, #1
 80008a4:	fbb2 f5f7 	udiv	r5, r2, r7
 80008a8:	fb07 2015 	mls	r0, r7, r5, r2
 80008ac:	0c22      	lsrs	r2, r4, #16
 80008ae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80008b2:	fb0e f005 	mul.w	r0, lr, r5
 80008b6:	4290      	cmp	r0, r2
 80008b8:	d908      	bls.n	80008cc <__udivmoddi4+0x124>
 80008ba:	eb1c 0202 	adds.w	r2, ip, r2
 80008be:	f105 38ff 	add.w	r8, r5, #4294967295
 80008c2:	d202      	bcs.n	80008ca <__udivmoddi4+0x122>
 80008c4:	4290      	cmp	r0, r2
 80008c6:	f200 80cb 	bhi.w	8000a60 <__udivmoddi4+0x2b8>
 80008ca:	4645      	mov	r5, r8
 80008cc:	1a12      	subs	r2, r2, r0
 80008ce:	b2a4      	uxth	r4, r4
 80008d0:	fbb2 f0f7 	udiv	r0, r2, r7
 80008d4:	fb07 2210 	mls	r2, r7, r0, r2
 80008d8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008dc:	fb0e fe00 	mul.w	lr, lr, r0
 80008e0:	45a6      	cmp	lr, r4
 80008e2:	d908      	bls.n	80008f6 <__udivmoddi4+0x14e>
 80008e4:	eb1c 0404 	adds.w	r4, ip, r4
 80008e8:	f100 32ff 	add.w	r2, r0, #4294967295
 80008ec:	d202      	bcs.n	80008f4 <__udivmoddi4+0x14c>
 80008ee:	45a6      	cmp	lr, r4
 80008f0:	f200 80bb 	bhi.w	8000a6a <__udivmoddi4+0x2c2>
 80008f4:	4610      	mov	r0, r2
 80008f6:	eba4 040e 	sub.w	r4, r4, lr
 80008fa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80008fe:	e79f      	b.n	8000840 <__udivmoddi4+0x98>
 8000900:	f1c1 0720 	rsb	r7, r1, #32
 8000904:	408b      	lsls	r3, r1
 8000906:	fa22 fc07 	lsr.w	ip, r2, r7
 800090a:	ea4c 0c03 	orr.w	ip, ip, r3
 800090e:	fa05 f401 	lsl.w	r4, r5, r1
 8000912:	fa20 f307 	lsr.w	r3, r0, r7
 8000916:	40fd      	lsrs	r5, r7
 8000918:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800091c:	4323      	orrs	r3, r4
 800091e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000922:	fa1f fe8c 	uxth.w	lr, ip
 8000926:	fb09 5518 	mls	r5, r9, r8, r5
 800092a:	0c1c      	lsrs	r4, r3, #16
 800092c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000930:	fb08 f50e 	mul.w	r5, r8, lr
 8000934:	42a5      	cmp	r5, r4
 8000936:	fa02 f201 	lsl.w	r2, r2, r1
 800093a:	fa00 f001 	lsl.w	r0, r0, r1
 800093e:	d90b      	bls.n	8000958 <__udivmoddi4+0x1b0>
 8000940:	eb1c 0404 	adds.w	r4, ip, r4
 8000944:	f108 3aff 	add.w	sl, r8, #4294967295
 8000948:	f080 8088 	bcs.w	8000a5c <__udivmoddi4+0x2b4>
 800094c:	42a5      	cmp	r5, r4
 800094e:	f240 8085 	bls.w	8000a5c <__udivmoddi4+0x2b4>
 8000952:	f1a8 0802 	sub.w	r8, r8, #2
 8000956:	4464      	add	r4, ip
 8000958:	1b64      	subs	r4, r4, r5
 800095a:	b29d      	uxth	r5, r3
 800095c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000960:	fb09 4413 	mls	r4, r9, r3, r4
 8000964:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000968:	fb03 fe0e 	mul.w	lr, r3, lr
 800096c:	45a6      	cmp	lr, r4
 800096e:	d908      	bls.n	8000982 <__udivmoddi4+0x1da>
 8000970:	eb1c 0404 	adds.w	r4, ip, r4
 8000974:	f103 35ff 	add.w	r5, r3, #4294967295
 8000978:	d26c      	bcs.n	8000a54 <__udivmoddi4+0x2ac>
 800097a:	45a6      	cmp	lr, r4
 800097c:	d96a      	bls.n	8000a54 <__udivmoddi4+0x2ac>
 800097e:	3b02      	subs	r3, #2
 8000980:	4464      	add	r4, ip
 8000982:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000986:	fba3 9502 	umull	r9, r5, r3, r2
 800098a:	eba4 040e 	sub.w	r4, r4, lr
 800098e:	42ac      	cmp	r4, r5
 8000990:	46c8      	mov	r8, r9
 8000992:	46ae      	mov	lr, r5
 8000994:	d356      	bcc.n	8000a44 <__udivmoddi4+0x29c>
 8000996:	d053      	beq.n	8000a40 <__udivmoddi4+0x298>
 8000998:	b156      	cbz	r6, 80009b0 <__udivmoddi4+0x208>
 800099a:	ebb0 0208 	subs.w	r2, r0, r8
 800099e:	eb64 040e 	sbc.w	r4, r4, lr
 80009a2:	fa04 f707 	lsl.w	r7, r4, r7
 80009a6:	40ca      	lsrs	r2, r1
 80009a8:	40cc      	lsrs	r4, r1
 80009aa:	4317      	orrs	r7, r2
 80009ac:	e9c6 7400 	strd	r7, r4, [r6]
 80009b0:	4618      	mov	r0, r3
 80009b2:	2100      	movs	r1, #0
 80009b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b8:	f1c3 0120 	rsb	r1, r3, #32
 80009bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80009c0:	fa20 f201 	lsr.w	r2, r0, r1
 80009c4:	fa25 f101 	lsr.w	r1, r5, r1
 80009c8:	409d      	lsls	r5, r3
 80009ca:	432a      	orrs	r2, r5
 80009cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009d0:	fa1f fe8c 	uxth.w	lr, ip
 80009d4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009d8:	fb07 1510 	mls	r5, r7, r0, r1
 80009dc:	0c11      	lsrs	r1, r2, #16
 80009de:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80009e2:	fb00 f50e 	mul.w	r5, r0, lr
 80009e6:	428d      	cmp	r5, r1
 80009e8:	fa04 f403 	lsl.w	r4, r4, r3
 80009ec:	d908      	bls.n	8000a00 <__udivmoddi4+0x258>
 80009ee:	eb1c 0101 	adds.w	r1, ip, r1
 80009f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80009f6:	d22f      	bcs.n	8000a58 <__udivmoddi4+0x2b0>
 80009f8:	428d      	cmp	r5, r1
 80009fa:	d92d      	bls.n	8000a58 <__udivmoddi4+0x2b0>
 80009fc:	3802      	subs	r0, #2
 80009fe:	4461      	add	r1, ip
 8000a00:	1b49      	subs	r1, r1, r5
 8000a02:	b292      	uxth	r2, r2
 8000a04:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a08:	fb07 1115 	mls	r1, r7, r5, r1
 8000a0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a10:	fb05 f10e 	mul.w	r1, r5, lr
 8000a14:	4291      	cmp	r1, r2
 8000a16:	d908      	bls.n	8000a2a <__udivmoddi4+0x282>
 8000a18:	eb1c 0202 	adds.w	r2, ip, r2
 8000a1c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a20:	d216      	bcs.n	8000a50 <__udivmoddi4+0x2a8>
 8000a22:	4291      	cmp	r1, r2
 8000a24:	d914      	bls.n	8000a50 <__udivmoddi4+0x2a8>
 8000a26:	3d02      	subs	r5, #2
 8000a28:	4462      	add	r2, ip
 8000a2a:	1a52      	subs	r2, r2, r1
 8000a2c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a30:	e738      	b.n	80008a4 <__udivmoddi4+0xfc>
 8000a32:	4631      	mov	r1, r6
 8000a34:	4630      	mov	r0, r6
 8000a36:	e708      	b.n	800084a <__udivmoddi4+0xa2>
 8000a38:	4639      	mov	r1, r7
 8000a3a:	e6e6      	b.n	800080a <__udivmoddi4+0x62>
 8000a3c:	4610      	mov	r0, r2
 8000a3e:	e6fb      	b.n	8000838 <__udivmoddi4+0x90>
 8000a40:	4548      	cmp	r0, r9
 8000a42:	d2a9      	bcs.n	8000998 <__udivmoddi4+0x1f0>
 8000a44:	ebb9 0802 	subs.w	r8, r9, r2
 8000a48:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a4c:	3b01      	subs	r3, #1
 8000a4e:	e7a3      	b.n	8000998 <__udivmoddi4+0x1f0>
 8000a50:	4645      	mov	r5, r8
 8000a52:	e7ea      	b.n	8000a2a <__udivmoddi4+0x282>
 8000a54:	462b      	mov	r3, r5
 8000a56:	e794      	b.n	8000982 <__udivmoddi4+0x1da>
 8000a58:	4640      	mov	r0, r8
 8000a5a:	e7d1      	b.n	8000a00 <__udivmoddi4+0x258>
 8000a5c:	46d0      	mov	r8, sl
 8000a5e:	e77b      	b.n	8000958 <__udivmoddi4+0x1b0>
 8000a60:	3d02      	subs	r5, #2
 8000a62:	4462      	add	r2, ip
 8000a64:	e732      	b.n	80008cc <__udivmoddi4+0x124>
 8000a66:	4608      	mov	r0, r1
 8000a68:	e70a      	b.n	8000880 <__udivmoddi4+0xd8>
 8000a6a:	4464      	add	r4, ip
 8000a6c:	3802      	subs	r0, #2
 8000a6e:	e742      	b.n	80008f6 <__udivmoddi4+0x14e>

08000a70 <__aeabi_idiv0>:
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a78:	4b3d      	ldr	r3, [pc, #244]	; (8000b70 <SystemInit+0xfc>)
 8000a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a7e:	4a3c      	ldr	r2, [pc, #240]	; (8000b70 <SystemInit+0xfc>)
 8000a80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000a88:	4b39      	ldr	r3, [pc, #228]	; (8000b70 <SystemInit+0xfc>)
 8000a8a:	691b      	ldr	r3, [r3, #16]
 8000a8c:	4a38      	ldr	r2, [pc, #224]	; (8000b70 <SystemInit+0xfc>)
 8000a8e:	f043 0310 	orr.w	r3, r3, #16
 8000a92:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a94:	4b37      	ldr	r3, [pc, #220]	; (8000b74 <SystemInit+0x100>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f003 030f 	and.w	r3, r3, #15
 8000a9c:	2b06      	cmp	r3, #6
 8000a9e:	d807      	bhi.n	8000ab0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000aa0:	4b34      	ldr	r3, [pc, #208]	; (8000b74 <SystemInit+0x100>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f023 030f 	bic.w	r3, r3, #15
 8000aa8:	4a32      	ldr	r2, [pc, #200]	; (8000b74 <SystemInit+0x100>)
 8000aaa:	f043 0307 	orr.w	r3, r3, #7
 8000aae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ab0:	4b31      	ldr	r3, [pc, #196]	; (8000b78 <SystemInit+0x104>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a30      	ldr	r2, [pc, #192]	; (8000b78 <SystemInit+0x104>)
 8000ab6:	f043 0301 	orr.w	r3, r3, #1
 8000aba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000abc:	4b2e      	ldr	r3, [pc, #184]	; (8000b78 <SystemInit+0x104>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ac2:	4b2d      	ldr	r3, [pc, #180]	; (8000b78 <SystemInit+0x104>)
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	492c      	ldr	r1, [pc, #176]	; (8000b78 <SystemInit+0x104>)
 8000ac8:	4b2c      	ldr	r3, [pc, #176]	; (8000b7c <SystemInit+0x108>)
 8000aca:	4013      	ands	r3, r2
 8000acc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ace:	4b29      	ldr	r3, [pc, #164]	; (8000b74 <SystemInit+0x100>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f003 0308 	and.w	r3, r3, #8
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d007      	beq.n	8000aea <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ada:	4b26      	ldr	r3, [pc, #152]	; (8000b74 <SystemInit+0x100>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f023 030f 	bic.w	r3, r3, #15
 8000ae2:	4a24      	ldr	r2, [pc, #144]	; (8000b74 <SystemInit+0x100>)
 8000ae4:	f043 0307 	orr.w	r3, r3, #7
 8000ae8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000aea:	4b23      	ldr	r3, [pc, #140]	; (8000b78 <SystemInit+0x104>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <SystemInit+0x104>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <SystemInit+0x104>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <SystemInit+0x104>)
 8000afe:	4a20      	ldr	r2, [pc, #128]	; (8000b80 <SystemInit+0x10c>)
 8000b00:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <SystemInit+0x104>)
 8000b04:	4a1f      	ldr	r2, [pc, #124]	; (8000b84 <SystemInit+0x110>)
 8000b06:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <SystemInit+0x104>)
 8000b0a:	4a1f      	ldr	r2, [pc, #124]	; (8000b88 <SystemInit+0x114>)
 8000b0c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b0e:	4b1a      	ldr	r3, [pc, #104]	; (8000b78 <SystemInit+0x104>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b14:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <SystemInit+0x104>)
 8000b16:	4a1c      	ldr	r2, [pc, #112]	; (8000b88 <SystemInit+0x114>)
 8000b18:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b1a:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <SystemInit+0x104>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <SystemInit+0x104>)
 8000b22:	4a19      	ldr	r2, [pc, #100]	; (8000b88 <SystemInit+0x114>)
 8000b24:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b26:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <SystemInit+0x104>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <SystemInit+0x104>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a11      	ldr	r2, [pc, #68]	; (8000b78 <SystemInit+0x104>)
 8000b32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b36:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <SystemInit+0x104>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b3e:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <SystemInit+0x118>)
 8000b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b42:	4a12      	ldr	r2, [pc, #72]	; (8000b8c <SystemInit+0x118>)
 8000b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b48:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b4a:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <SystemInit+0x11c>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <SystemInit+0x120>)
 8000b50:	4013      	ands	r3, r2
 8000b52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b56:	d202      	bcs.n	8000b5e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b58:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <SystemInit+0x124>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b5e:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <SystemInit+0x128>)
 8000b60:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b64:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000ed00 	.word	0xe000ed00
 8000b74:	52002000 	.word	0x52002000
 8000b78:	58024400 	.word	0x58024400
 8000b7c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b80:	02020200 	.word	0x02020200
 8000b84:	01ff0000 	.word	0x01ff0000
 8000b88:	01010280 	.word	0x01010280
 8000b8c:	580000c0 	.word	0x580000c0
 8000b90:	5c001000 	.word	0x5c001000
 8000b94:	ffff0000 	.word	0xffff0000
 8000b98:	51008108 	.word	0x51008108
 8000b9c:	52004000 	.word	0x52004000

08000ba0 <MPU6050_Init>:
#define WHO_AM_I_REG 0x75
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void MPU6050_Init (void){
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af04      	add	r7, sp, #16
	uint8_t check, Data;
	HAL_I2C_Mem_Read(&hi2c2, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8000ba6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000baa:	9302      	str	r3, [sp, #8]
 8000bac:	2301      	movs	r3, #1
 8000bae:	9301      	str	r3, [sp, #4]
 8000bb0:	1dfb      	adds	r3, r7, #7
 8000bb2:	9300      	str	r3, [sp, #0]
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	2275      	movs	r2, #117	; 0x75
 8000bb8:	21d0      	movs	r1, #208	; 0xd0
 8000bba:	4814      	ldr	r0, [pc, #80]	; (8000c0c <MPU6050_Init+0x6c>)
 8000bbc:	f002 f834 	bl	8002c28 <HAL_I2C_Mem_Read>
	if(check==104){ //if device is present
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	2b68      	cmp	r3, #104	; 0x68
 8000bc4:	d11d      	bne.n	8000c02 <MPU6050_Init+0x62>
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data=0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8000bca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bce:	9302      	str	r3, [sp, #8]
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	9301      	str	r3, [sp, #4]
 8000bd4:	1dbb      	adds	r3, r7, #6
 8000bd6:	9300      	str	r3, [sp, #0]
 8000bd8:	2301      	movs	r3, #1
 8000bda:	226b      	movs	r2, #107	; 0x6b
 8000bdc:	21d0      	movs	r1, #208	; 0xd0
 8000bde:	480b      	ldr	r0, [pc, #44]	; (8000c0c <MPU6050_Init+0x6c>)
 8000be0:	f001 ff0e 	bl	8002a00 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8000be4:	2307      	movs	r3, #7
 8000be6:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8000be8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bec:	9302      	str	r3, [sp, #8]
 8000bee:	2301      	movs	r3, #1
 8000bf0:	9301      	str	r3, [sp, #4]
 8000bf2:	1dbb      	adds	r3, r7, #6
 8000bf4:	9300      	str	r3, [sp, #0]
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	2219      	movs	r2, #25
 8000bfa:	21d0      	movs	r1, #208	; 0xd0
 8000bfc:	4803      	ldr	r0, [pc, #12]	; (8000c0c <MPU6050_Init+0x6c>)
 8000bfe:	f001 feff 	bl	8002a00 <HAL_I2C_Mem_Write>
	}

}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	240003a0 	.word	0x240003a0

08000c10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000c16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c1a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000c1c:	bf00      	nop
 8000c1e:	4b2f      	ldr	r3, [pc, #188]	; (8000cdc <main+0xcc>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d004      	beq.n	8000c34 <main+0x24>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	1e5a      	subs	r2, r3, #1
 8000c2e:	607a      	str	r2, [r7, #4]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	dcf4      	bgt.n	8000c1e <main+0xe>
  if ( timeout < 0 )
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	da01      	bge.n	8000c3e <main+0x2e>
  {
  Error_Handler();
 8000c3a:	f000 fb01 	bl	8001240 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c3e:	f000 fecd 	bl	80019dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c42:	f000 f859 	bl	8000cf8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000c46:	4b25      	ldr	r3, [pc, #148]	; (8000cdc <main+0xcc>)
 8000c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4c:	4a23      	ldr	r2, [pc, #140]	; (8000cdc <main+0xcc>)
 8000c4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c56:	4b21      	ldr	r3, [pc, #132]	; (8000cdc <main+0xcc>)
 8000c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c60:	603b      	str	r3, [r7, #0]
 8000c62:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000c64:	2000      	movs	r0, #0
 8000c66:	f001 fe0d 	bl	8002884 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f001 fe23 	bl	80028b8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000c72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c76:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000c78:	bf00      	nop
 8000c7a:	4b18      	ldr	r3, [pc, #96]	; (8000cdc <main+0xcc>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d104      	bne.n	8000c90 <main+0x80>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	1e5a      	subs	r2, r3, #1
 8000c8a:	607a      	str	r2, [r7, #4]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	dcf4      	bgt.n	8000c7a <main+0x6a>
if ( timeout < 0 )
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	da01      	bge.n	8000c9a <main+0x8a>
{
Error_Handler();
 8000c96:	f000 fad3 	bl	8001240 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c9a:	f000 f9b5 	bl	8001008 <MX_GPIO_Init>
  MX_ETH_Init();
 8000c9e:	f000 f8a9 	bl	8000df4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000ca2:	f000 f933 	bl	8000f0c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000ca6:	f000 f97d 	bl	8000fa4 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 8000caa:	f000 f8ef 	bl	8000e8c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init();
 8000cae:	f7ff ff77 	bl	8000ba0 <MPU6050_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000cb2:	f007 fbb5 	bl	8008420 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000cb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <main+0xd0>)
 8000cb8:	2100      	movs	r1, #0
 8000cba:	480a      	ldr	r0, [pc, #40]	; (8000ce4 <main+0xd4>)
 8000cbc:	f007 fbfa 	bl	80084b4 <osThreadNew>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	4a09      	ldr	r2, [pc, #36]	; (8000ce8 <main+0xd8>)
 8000cc4:	6013      	str	r3, [r2, #0]

  /* creation of accTask */
  accTaskHandle = osThreadNew(accStartTask, NULL, &accTask_attributes);
 8000cc6:	4a09      	ldr	r2, [pc, #36]	; (8000cec <main+0xdc>)
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4809      	ldr	r0, [pc, #36]	; (8000cf0 <main+0xe0>)
 8000ccc:	f007 fbf2 	bl	80084b4 <osThreadNew>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	4a08      	ldr	r2, [pc, #32]	; (8000cf4 <main+0xe4>)
 8000cd4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000cd6:	f007 fbc7 	bl	8008468 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cda:	e7fe      	b.n	8000cda <main+0xca>
 8000cdc:	58024400 	.word	0x58024400
 8000ce0:	0800f62c 	.word	0x0800f62c
 8000ce4:	080010d5 	.word	0x080010d5
 8000ce8:	24000994 	.word	0x24000994
 8000cec:	0800f650 	.word	0x0800f650
 8000cf0:	080010e5 	.word	0x080010e5
 8000cf4:	24000998 	.word	0x24000998

08000cf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b09c      	sub	sp, #112	; 0x70
 8000cfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d02:	224c      	movs	r2, #76	; 0x4c
 8000d04:	2100      	movs	r1, #0
 8000d06:	4618      	mov	r0, r3
 8000d08:	f00b f88f 	bl	800be2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d0c:	1d3b      	adds	r3, r7, #4
 8000d0e:	2220      	movs	r2, #32
 8000d10:	2100      	movs	r1, #0
 8000d12:	4618      	mov	r0, r3
 8000d14:	f00b f889 	bl	800be2a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000d18:	2004      	movs	r0, #4
 8000d1a:	f002 fd37 	bl	800378c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d1e:	2300      	movs	r3, #0
 8000d20:	603b      	str	r3, [r7, #0]
 8000d22:	4b32      	ldr	r3, [pc, #200]	; (8000dec <SystemClock_Config+0xf4>)
 8000d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d26:	4a31      	ldr	r2, [pc, #196]	; (8000dec <SystemClock_Config+0xf4>)
 8000d28:	f023 0301 	bic.w	r3, r3, #1
 8000d2c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000d2e:	4b2f      	ldr	r3, [pc, #188]	; (8000dec <SystemClock_Config+0xf4>)
 8000d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	603b      	str	r3, [r7, #0]
 8000d38:	4b2d      	ldr	r3, [pc, #180]	; (8000df0 <SystemClock_Config+0xf8>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d40:	4a2b      	ldr	r2, [pc, #172]	; (8000df0 <SystemClock_Config+0xf8>)
 8000d42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d46:	6193      	str	r3, [r2, #24]
 8000d48:	4b29      	ldr	r3, [pc, #164]	; (8000df0 <SystemClock_Config+0xf8>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d50:	603b      	str	r3, [r7, #0]
 8000d52:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d54:	bf00      	nop
 8000d56:	4b26      	ldr	r3, [pc, #152]	; (8000df0 <SystemClock_Config+0xf8>)
 8000d58:	699b      	ldr	r3, [r3, #24]
 8000d5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d62:	d1f8      	bne.n	8000d56 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d64:	2301      	movs	r3, #1
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d68:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000d6c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d72:	2302      	movs	r3, #2
 8000d74:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d76:	2301      	movs	r3, #1
 8000d78:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000d7a:	2312      	movs	r3, #18
 8000d7c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d82:	2302      	movs	r3, #2
 8000d84:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d86:	2302      	movs	r3, #2
 8000d88:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d8a:	230c      	movs	r3, #12
 8000d8c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000d92:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d96:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f002 fd5f 	bl	8003860 <HAL_RCC_OscConfig>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000da8:	f000 fa4a 	bl	8001240 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dac:	233f      	movs	r3, #63	; 0x3f
 8000dae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000db0:	2303      	movs	r3, #3
 8000db2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000db4:	2300      	movs	r3, #0
 8000db6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000db8:	2300      	movs	r3, #0
 8000dba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000dbc:	2340      	movs	r3, #64	; 0x40
 8000dbe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000dc0:	2340      	movs	r3, #64	; 0x40
 8000dc2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000dc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dc8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000dca:	2340      	movs	r3, #64	; 0x40
 8000dcc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f003 f99e 	bl	8004114 <HAL_RCC_ClockConfig>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000dde:	f000 fa2f 	bl	8001240 <Error_Handler>
  }
}
 8000de2:	bf00      	nop
 8000de4:	3770      	adds	r7, #112	; 0x70
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	58000400 	.word	0x58000400
 8000df0:	58024800 	.word	0x58024800

08000df4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000df8:	4b1e      	ldr	r3, [pc, #120]	; (8000e74 <MX_ETH_Init+0x80>)
 8000dfa:	4a1f      	ldr	r2, [pc, #124]	; (8000e78 <MX_ETH_Init+0x84>)
 8000dfc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000dfe:	4b1f      	ldr	r3, [pc, #124]	; (8000e7c <MX_ETH_Init+0x88>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000e04:	4b1d      	ldr	r3, [pc, #116]	; (8000e7c <MX_ETH_Init+0x88>)
 8000e06:	2280      	movs	r2, #128	; 0x80
 8000e08:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000e0a:	4b1c      	ldr	r3, [pc, #112]	; (8000e7c <MX_ETH_Init+0x88>)
 8000e0c:	22e1      	movs	r2, #225	; 0xe1
 8000e0e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000e10:	4b1a      	ldr	r3, [pc, #104]	; (8000e7c <MX_ETH_Init+0x88>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000e16:	4b19      	ldr	r3, [pc, #100]	; (8000e7c <MX_ETH_Init+0x88>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000e1c:	4b17      	ldr	r3, [pc, #92]	; (8000e7c <MX_ETH_Init+0x88>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000e22:	4b14      	ldr	r3, [pc, #80]	; (8000e74 <MX_ETH_Init+0x80>)
 8000e24:	4a15      	ldr	r2, [pc, #84]	; (8000e7c <MX_ETH_Init+0x88>)
 8000e26:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000e28:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <MX_ETH_Init+0x80>)
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000e2e:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <MX_ETH_Init+0x80>)
 8000e30:	4a13      	ldr	r2, [pc, #76]	; (8000e80 <MX_ETH_Init+0x8c>)
 8000e32:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000e34:	4b0f      	ldr	r3, [pc, #60]	; (8000e74 <MX_ETH_Init+0x80>)
 8000e36:	4a13      	ldr	r2, [pc, #76]	; (8000e84 <MX_ETH_Init+0x90>)
 8000e38:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000e3a:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <MX_ETH_Init+0x80>)
 8000e3c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000e40:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000e42:	480c      	ldr	r0, [pc, #48]	; (8000e74 <MX_ETH_Init+0x80>)
 8000e44:	f000 ff4a 	bl	8001cdc <HAL_ETH_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000e4e:	f000 f9f7 	bl	8001240 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000e52:	2238      	movs	r2, #56	; 0x38
 8000e54:	2100      	movs	r1, #0
 8000e56:	480c      	ldr	r0, [pc, #48]	; (8000e88 <MX_ETH_Init+0x94>)
 8000e58:	f00a ffe7 	bl	800be2a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000e5c:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <MX_ETH_Init+0x94>)
 8000e5e:	2221      	movs	r2, #33	; 0x21
 8000e60:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000e62:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <MX_ETH_Init+0x94>)
 8000e64:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e68:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000e6a:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <MX_ETH_Init+0x94>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000e70:	bf00      	nop
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	240002f0 	.word	0x240002f0
 8000e78:	40028000 	.word	0x40028000
 8000e7c:	240009b4 	.word	0x240009b4
 8000e80:	2400023c 	.word	0x2400023c
 8000e84:	240001dc 	.word	0x240001dc
 8000e88:	240002b8 	.word	0x240002b8

08000e8c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e90:	4b1b      	ldr	r3, [pc, #108]	; (8000f00 <MX_I2C2_Init+0x74>)
 8000e92:	4a1c      	ldr	r2, [pc, #112]	; (8000f04 <MX_I2C2_Init+0x78>)
 8000e94:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00909FCE;
 8000e96:	4b1a      	ldr	r3, [pc, #104]	; (8000f00 <MX_I2C2_Init+0x74>)
 8000e98:	4a1b      	ldr	r2, [pc, #108]	; (8000f08 <MX_I2C2_Init+0x7c>)
 8000e9a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000e9c:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <MX_I2C2_Init+0x74>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ea2:	4b17      	ldr	r3, [pc, #92]	; (8000f00 <MX_I2C2_Init+0x74>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ea8:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <MX_I2C2_Init+0x74>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000eae:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <MX_I2C2_Init+0x74>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000eb4:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <MX_I2C2_Init+0x74>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eba:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <MX_I2C2_Init+0x74>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ec0:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <MX_I2C2_Init+0x74>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ec6:	480e      	ldr	r0, [pc, #56]	; (8000f00 <MX_I2C2_Init+0x74>)
 8000ec8:	f001 fd0a 	bl	80028e0 <HAL_I2C_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000ed2:	f000 f9b5 	bl	8001240 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4809      	ldr	r0, [pc, #36]	; (8000f00 <MX_I2C2_Init+0x74>)
 8000eda:	f002 fa77 	bl	80033cc <HAL_I2CEx_ConfigAnalogFilter>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ee4:	f000 f9ac 	bl	8001240 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4805      	ldr	r0, [pc, #20]	; (8000f00 <MX_I2C2_Init+0x74>)
 8000eec:	f002 fab9 	bl	8003462 <HAL_I2CEx_ConfigDigitalFilter>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000ef6:	f000 f9a3 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	240003a0 	.word	0x240003a0
 8000f04:	40005800 	.word	0x40005800
 8000f08:	00909fce 	.word	0x00909fce

08000f0c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f10:	4b22      	ldr	r3, [pc, #136]	; (8000f9c <MX_USART3_UART_Init+0x90>)
 8000f12:	4a23      	ldr	r2, [pc, #140]	; (8000fa0 <MX_USART3_UART_Init+0x94>)
 8000f14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f16:	4b21      	ldr	r3, [pc, #132]	; (8000f9c <MX_USART3_UART_Init+0x90>)
 8000f18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f1e:	4b1f      	ldr	r3, [pc, #124]	; (8000f9c <MX_USART3_UART_Init+0x90>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f24:	4b1d      	ldr	r3, [pc, #116]	; (8000f9c <MX_USART3_UART_Init+0x90>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f2a:	4b1c      	ldr	r3, [pc, #112]	; (8000f9c <MX_USART3_UART_Init+0x90>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f30:	4b1a      	ldr	r3, [pc, #104]	; (8000f9c <MX_USART3_UART_Init+0x90>)
 8000f32:	220c      	movs	r2, #12
 8000f34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f36:	4b19      	ldr	r3, [pc, #100]	; (8000f9c <MX_USART3_UART_Init+0x90>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f3c:	4b17      	ldr	r3, [pc, #92]	; (8000f9c <MX_USART3_UART_Init+0x90>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f42:	4b16      	ldr	r3, [pc, #88]	; (8000f9c <MX_USART3_UART_Init+0x90>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f48:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <MX_USART3_UART_Init+0x90>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f4e:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <MX_USART3_UART_Init+0x90>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f54:	4811      	ldr	r0, [pc, #68]	; (8000f9c <MX_USART3_UART_Init+0x90>)
 8000f56:	f005 fdb1 	bl	8006abc <HAL_UART_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000f60:	f000 f96e 	bl	8001240 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f64:	2100      	movs	r1, #0
 8000f66:	480d      	ldr	r0, [pc, #52]	; (8000f9c <MX_USART3_UART_Init+0x90>)
 8000f68:	f006 fe41 	bl	8007bee <HAL_UARTEx_SetTxFifoThreshold>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000f72:	f000 f965 	bl	8001240 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f76:	2100      	movs	r1, #0
 8000f78:	4808      	ldr	r0, [pc, #32]	; (8000f9c <MX_USART3_UART_Init+0x90>)
 8000f7a:	f006 fe76 	bl	8007c6a <HAL_UARTEx_SetRxFifoThreshold>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000f84:	f000 f95c 	bl	8001240 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000f88:	4804      	ldr	r0, [pc, #16]	; (8000f9c <MX_USART3_UART_Init+0x90>)
 8000f8a:	f006 fdf7 	bl	8007b7c <HAL_UARTEx_DisableFifoMode>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000f94:	f000 f954 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f98:	bf00      	nop
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	240003f4 	.word	0x240003f4
 8000fa0:	40004800 	.word	0x40004800

08000fa4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000fa8:	4b15      	ldr	r3, [pc, #84]	; (8001000 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000faa:	4a16      	ldr	r2, [pc, #88]	; (8001004 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000fac:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000fae:	4b14      	ldr	r3, [pc, #80]	; (8001000 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fb0:	2209      	movs	r2, #9
 8000fb2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000fb4:	4b12      	ldr	r3, [pc, #72]	; (8001000 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fb6:	2202      	movs	r2, #2
 8000fb8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000fba:	4b11      	ldr	r3, [pc, #68]	; (8001000 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fc2:	2202      	movs	r2, #2
 8000fc4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000fd2:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000fd8:	4b09      	ldr	r3, [pc, #36]	; (8001000 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000fde:	4b08      	ldr	r3, [pc, #32]	; (8001000 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000fea:	4805      	ldr	r0, [pc, #20]	; (8001000 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fec:	f002 fa85 	bl	80034fa <HAL_PCD_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000ff6:	f000 f923 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	24000488 	.word	0x24000488
 8001004:	40080000 	.word	0x40080000

08001008 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001008:	b480      	push	{r7}
 800100a:	b087      	sub	sp, #28
 800100c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800100e:	4b30      	ldr	r3, [pc, #192]	; (80010d0 <MX_GPIO_Init+0xc8>)
 8001010:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001014:	4a2e      	ldr	r2, [pc, #184]	; (80010d0 <MX_GPIO_Init+0xc8>)
 8001016:	f043 0304 	orr.w	r3, r3, #4
 800101a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800101e:	4b2c      	ldr	r3, [pc, #176]	; (80010d0 <MX_GPIO_Init+0xc8>)
 8001020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001024:	f003 0304 	and.w	r3, r3, #4
 8001028:	617b      	str	r3, [r7, #20]
 800102a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800102c:	4b28      	ldr	r3, [pc, #160]	; (80010d0 <MX_GPIO_Init+0xc8>)
 800102e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001032:	4a27      	ldr	r2, [pc, #156]	; (80010d0 <MX_GPIO_Init+0xc8>)
 8001034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001038:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800103c:	4b24      	ldr	r3, [pc, #144]	; (80010d0 <MX_GPIO_Init+0xc8>)
 800103e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800104a:	4b21      	ldr	r3, [pc, #132]	; (80010d0 <MX_GPIO_Init+0xc8>)
 800104c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001050:	4a1f      	ldr	r2, [pc, #124]	; (80010d0 <MX_GPIO_Init+0xc8>)
 8001052:	f043 0301 	orr.w	r3, r3, #1
 8001056:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800105a:	4b1d      	ldr	r3, [pc, #116]	; (80010d0 <MX_GPIO_Init+0xc8>)
 800105c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001060:	f003 0301 	and.w	r3, r3, #1
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001068:	4b19      	ldr	r3, [pc, #100]	; (80010d0 <MX_GPIO_Init+0xc8>)
 800106a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800106e:	4a18      	ldr	r2, [pc, #96]	; (80010d0 <MX_GPIO_Init+0xc8>)
 8001070:	f043 0302 	orr.w	r3, r3, #2
 8001074:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001078:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <MX_GPIO_Init+0xc8>)
 800107a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800107e:	f003 0302 	and.w	r3, r3, #2
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001086:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <MX_GPIO_Init+0xc8>)
 8001088:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800108c:	4a10      	ldr	r2, [pc, #64]	; (80010d0 <MX_GPIO_Init+0xc8>)
 800108e:	f043 0308 	orr.w	r3, r3, #8
 8001092:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001096:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <MX_GPIO_Init+0xc8>)
 8001098:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800109c:	f003 0308 	and.w	r3, r3, #8
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010a4:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <MX_GPIO_Init+0xc8>)
 80010a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010aa:	4a09      	ldr	r2, [pc, #36]	; (80010d0 <MX_GPIO_Init+0xc8>)
 80010ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <MX_GPIO_Init+0xc8>)
 80010b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010be:	603b      	str	r3, [r7, #0]
 80010c0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010c2:	bf00      	nop
 80010c4:	371c      	adds	r7, #28
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	58024400 	.word	0x58024400

080010d4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80010dc:	2001      	movs	r0, #1
 80010de:	f007 fa7b 	bl	80085d8 <osDelay>
 80010e2:	e7fb      	b.n	80010dc <StartDefaultTask+0x8>

080010e4 <accStartTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_accStartTask */
void accStartTask(void *argument)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b098      	sub	sp, #96	; 0x60
 80010e8:	af06      	add	r7, sp, #24
 80010ea:	6078      	str	r0, [r7, #4]
	char msg [50];

  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 80010ec:	2064      	movs	r0, #100	; 0x64
 80010ee:	f007 fa73 	bl	80085d8 <osDelay>
    uint8_t Rec_Data[6];

    	// Read 6 BYTES of data starting from ACCEL_XOUT_H register
    	HAL_I2C_Mem_Read(&hi2c2, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 80010f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010f6:	9302      	str	r3, [sp, #8]
 80010f8:	2306      	movs	r3, #6
 80010fa:	9301      	str	r3, [sp, #4]
 80010fc:	f107 030c 	add.w	r3, r7, #12
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	2301      	movs	r3, #1
 8001104:	223b      	movs	r2, #59	; 0x3b
 8001106:	21d0      	movs	r1, #208	; 0xd0
 8001108:	483a      	ldr	r0, [pc, #232]	; (80011f4 <accStartTask+0x110>)
 800110a:	f001 fd8d 	bl	8002c28 <HAL_I2C_Mem_Read>
    	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 800110e:	7b3b      	ldrb	r3, [r7, #12]
 8001110:	021b      	lsls	r3, r3, #8
 8001112:	b21a      	sxth	r2, r3
 8001114:	7b7b      	ldrb	r3, [r7, #13]
 8001116:	b21b      	sxth	r3, r3
 8001118:	4313      	orrs	r3, r2
 800111a:	b21b      	sxth	r3, r3
 800111c:	ee07 3a90 	vmov	s15, r3
 8001120:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001124:	4b34      	ldr	r3, [pc, #208]	; (80011f8 <accStartTask+0x114>)
 8001126:	edc3 7a00 	vstr	s15, [r3]
    	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 800112a:	7bbb      	ldrb	r3, [r7, #14]
 800112c:	021b      	lsls	r3, r3, #8
 800112e:	b21a      	sxth	r2, r3
 8001130:	7bfb      	ldrb	r3, [r7, #15]
 8001132:	b21b      	sxth	r3, r3
 8001134:	4313      	orrs	r3, r2
 8001136:	b21b      	sxth	r3, r3
 8001138:	ee07 3a90 	vmov	s15, r3
 800113c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001140:	4b2e      	ldr	r3, [pc, #184]	; (80011fc <accStartTask+0x118>)
 8001142:	edc3 7a00 	vstr	s15, [r3]
    	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8001146:	7c3b      	ldrb	r3, [r7, #16]
 8001148:	021b      	lsls	r3, r3, #8
 800114a:	b21a      	sxth	r2, r3
 800114c:	7c7b      	ldrb	r3, [r7, #17]
 800114e:	b21b      	sxth	r3, r3
 8001150:	4313      	orrs	r3, r2
 8001152:	b21b      	sxth	r3, r3
 8001154:	ee07 3a90 	vmov	s15, r3
 8001158:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800115c:	4b28      	ldr	r3, [pc, #160]	; (8001200 <accStartTask+0x11c>)
 800115e:	edc3 7a00 	vstr	s15, [r3]
    	/*** convert the RAW values into acceleration in 'g'
    	     we have to divide according to the Full scale value set in FS_SEL
    	     I have configured FS_SEL = 0. So I am dividing by 16384.0
    	     for more details check ACCEL_CONFIG Register              ****/

    	Ax = Accel_X_RAW/16384.0;  // get the float g
 8001162:	4b25      	ldr	r3, [pc, #148]	; (80011f8 <accStartTask+0x114>)
 8001164:	ed93 7a00 	vldr	s14, [r3]
 8001168:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001204 <accStartTask+0x120>
 800116c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001170:	4b25      	ldr	r3, [pc, #148]	; (8001208 <accStartTask+0x124>)
 8001172:	edc3 7a00 	vstr	s15, [r3]
    	Ay = Accel_Y_RAW/16384.0;
 8001176:	4b21      	ldr	r3, [pc, #132]	; (80011fc <accStartTask+0x118>)
 8001178:	ed93 7a00 	vldr	s14, [r3]
 800117c:	eddf 6a21 	vldr	s13, [pc, #132]	; 8001204 <accStartTask+0x120>
 8001180:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001184:	4b21      	ldr	r3, [pc, #132]	; (800120c <accStartTask+0x128>)
 8001186:	edc3 7a00 	vstr	s15, [r3]
    	Az = Accel_Z_RAW/16384.0;
 800118a:	4b1d      	ldr	r3, [pc, #116]	; (8001200 <accStartTask+0x11c>)
 800118c:	ed93 7a00 	vldr	s14, [r3]
 8001190:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001204 <accStartTask+0x120>
 8001194:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001198:	4b1d      	ldr	r3, [pc, #116]	; (8001210 <accStartTask+0x12c>)
 800119a:	edc3 7a00 	vstr	s15, [r3]

        snprintf(msg, sizeof(msg), "Ace: X=%.2f, Y=%.2f, Z=%.2f \r\n", Ax, Ay, Az);
 800119e:	4b1a      	ldr	r3, [pc, #104]	; (8001208 <accStartTask+0x124>)
 80011a0:	edd3 7a00 	vldr	s15, [r3]
 80011a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011a8:	4b18      	ldr	r3, [pc, #96]	; (800120c <accStartTask+0x128>)
 80011aa:	edd3 6a00 	vldr	s13, [r3]
 80011ae:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80011b2:	4b17      	ldr	r3, [pc, #92]	; (8001210 <accStartTask+0x12c>)
 80011b4:	edd3 5a00 	vldr	s11, [r3]
 80011b8:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	ed8d 5b04 	vstr	d5, [sp, #16]
 80011c4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80011c8:	ed8d 7b00 	vstr	d7, [sp]
 80011cc:	4a11      	ldr	r2, [pc, #68]	; (8001214 <accStartTask+0x130>)
 80011ce:	2132      	movs	r1, #50	; 0x32
 80011d0:	4618      	mov	r0, r3
 80011d2:	f00a fd93 	bl	800bcfc <sniprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), 10);
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff f8d0 	bl	8000380 <strlen>
 80011e0:	4603      	mov	r3, r0
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	f107 0114 	add.w	r1, r7, #20
 80011e8:	230a      	movs	r3, #10
 80011ea:	480b      	ldr	r0, [pc, #44]	; (8001218 <accStartTask+0x134>)
 80011ec:	f005 fcb6 	bl	8006b5c <HAL_UART_Transmit>
  {
 80011f0:	e77c      	b.n	80010ec <accStartTask+0x8>
 80011f2:	bf00      	nop
 80011f4:	240003a0 	.word	0x240003a0
 80011f8:	2400099c 	.word	0x2400099c
 80011fc:	240009a0 	.word	0x240009a0
 8001200:	240009a4 	.word	0x240009a4
 8001204:	46800000 	.word	0x46800000
 8001208:	240009a8 	.word	0x240009a8
 800120c:	240009ac 	.word	0x240009ac
 8001210:	240009b0 	.word	0x240009b0
 8001214:	0800f5e4 	.word	0x0800f5e4
 8001218:	240003f4 	.word	0x240003f4

0800121c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a04      	ldr	r2, [pc, #16]	; (800123c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d101      	bne.n	8001232 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800122e:	f000 fc11 	bl	8001a54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40002000 	.word	0x40002000

08001240 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001244:	b672      	cpsid	i
}
 8001246:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001248:	e7fe      	b.n	8001248 <Error_Handler+0x8>
	...

0800124c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001252:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <HAL_MspInit+0x38>)
 8001254:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001258:	4a0a      	ldr	r2, [pc, #40]	; (8001284 <HAL_MspInit+0x38>)
 800125a:	f043 0302 	orr.w	r3, r3, #2
 800125e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001262:	4b08      	ldr	r3, [pc, #32]	; (8001284 <HAL_MspInit+0x38>)
 8001264:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001268:	f003 0302 	and.w	r3, r3, #2
 800126c:	607b      	str	r3, [r7, #4]
 800126e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001270:	2200      	movs	r2, #0
 8001272:	210f      	movs	r1, #15
 8001274:	f06f 0001 	mvn.w	r0, #1
 8001278:	f000 fd08 	bl	8001c8c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800127c:	bf00      	nop
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	58024400 	.word	0x58024400

08001288 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08e      	sub	sp, #56	; 0x38
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a59      	ldr	r2, [pc, #356]	; (800140c <HAL_ETH_MspInit+0x184>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	f040 80ab 	bne.w	8001402 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80012ac:	4b58      	ldr	r3, [pc, #352]	; (8001410 <HAL_ETH_MspInit+0x188>)
 80012ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012b2:	4a57      	ldr	r2, [pc, #348]	; (8001410 <HAL_ETH_MspInit+0x188>)
 80012b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012b8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80012bc:	4b54      	ldr	r3, [pc, #336]	; (8001410 <HAL_ETH_MspInit+0x188>)
 80012be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012c6:	623b      	str	r3, [r7, #32]
 80012c8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80012ca:	4b51      	ldr	r3, [pc, #324]	; (8001410 <HAL_ETH_MspInit+0x188>)
 80012cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012d0:	4a4f      	ldr	r2, [pc, #316]	; (8001410 <HAL_ETH_MspInit+0x188>)
 80012d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012d6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80012da:	4b4d      	ldr	r3, [pc, #308]	; (8001410 <HAL_ETH_MspInit+0x188>)
 80012dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e4:	61fb      	str	r3, [r7, #28]
 80012e6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80012e8:	4b49      	ldr	r3, [pc, #292]	; (8001410 <HAL_ETH_MspInit+0x188>)
 80012ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012ee:	4a48      	ldr	r2, [pc, #288]	; (8001410 <HAL_ETH_MspInit+0x188>)
 80012f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80012f8:	4b45      	ldr	r3, [pc, #276]	; (8001410 <HAL_ETH_MspInit+0x188>)
 80012fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001302:	61bb      	str	r3, [r7, #24]
 8001304:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001306:	4b42      	ldr	r3, [pc, #264]	; (8001410 <HAL_ETH_MspInit+0x188>)
 8001308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800130c:	4a40      	ldr	r2, [pc, #256]	; (8001410 <HAL_ETH_MspInit+0x188>)
 800130e:	f043 0304 	orr.w	r3, r3, #4
 8001312:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001316:	4b3e      	ldr	r3, [pc, #248]	; (8001410 <HAL_ETH_MspInit+0x188>)
 8001318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800131c:	f003 0304 	and.w	r3, r3, #4
 8001320:	617b      	str	r3, [r7, #20]
 8001322:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001324:	4b3a      	ldr	r3, [pc, #232]	; (8001410 <HAL_ETH_MspInit+0x188>)
 8001326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800132a:	4a39      	ldr	r2, [pc, #228]	; (8001410 <HAL_ETH_MspInit+0x188>)
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001334:	4b36      	ldr	r3, [pc, #216]	; (8001410 <HAL_ETH_MspInit+0x188>)
 8001336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	613b      	str	r3, [r7, #16]
 8001340:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001342:	4b33      	ldr	r3, [pc, #204]	; (8001410 <HAL_ETH_MspInit+0x188>)
 8001344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001348:	4a31      	ldr	r2, [pc, #196]	; (8001410 <HAL_ETH_MspInit+0x188>)
 800134a:	f043 0302 	orr.w	r3, r3, #2
 800134e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001352:	4b2f      	ldr	r3, [pc, #188]	; (8001410 <HAL_ETH_MspInit+0x188>)
 8001354:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001358:	f003 0302 	and.w	r3, r3, #2
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001360:	4b2b      	ldr	r3, [pc, #172]	; (8001410 <HAL_ETH_MspInit+0x188>)
 8001362:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001366:	4a2a      	ldr	r2, [pc, #168]	; (8001410 <HAL_ETH_MspInit+0x188>)
 8001368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800136c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001370:	4b27      	ldr	r3, [pc, #156]	; (8001410 <HAL_ETH_MspInit+0x188>)
 8001372:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800137e:	2332      	movs	r3, #50	; 0x32
 8001380:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001382:	2302      	movs	r3, #2
 8001384:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138a:	2300      	movs	r3, #0
 800138c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800138e:	230b      	movs	r3, #11
 8001390:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001392:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001396:	4619      	mov	r1, r3
 8001398:	481e      	ldr	r0, [pc, #120]	; (8001414 <HAL_ETH_MspInit+0x18c>)
 800139a:	f001 f8c3 	bl	8002524 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800139e:	2386      	movs	r3, #134	; 0x86
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a2:	2302      	movs	r3, #2
 80013a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013aa:	2300      	movs	r3, #0
 80013ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013ae:	230b      	movs	r3, #11
 80013b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b6:	4619      	mov	r1, r3
 80013b8:	4817      	ldr	r0, [pc, #92]	; (8001418 <HAL_ETH_MspInit+0x190>)
 80013ba:	f001 f8b3 	bl	8002524 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80013be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c4:	2302      	movs	r3, #2
 80013c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013cc:	2300      	movs	r3, #0
 80013ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013d0:	230b      	movs	r3, #11
 80013d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d8:	4619      	mov	r1, r3
 80013da:	4810      	ldr	r0, [pc, #64]	; (800141c <HAL_ETH_MspInit+0x194>)
 80013dc:	f001 f8a2 	bl	8002524 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80013e0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80013e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e6:	2302      	movs	r3, #2
 80013e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ee:	2300      	movs	r3, #0
 80013f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013f2:	230b      	movs	r3, #11
 80013f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fa:	4619      	mov	r1, r3
 80013fc:	4808      	ldr	r0, [pc, #32]	; (8001420 <HAL_ETH_MspInit+0x198>)
 80013fe:	f001 f891 	bl	8002524 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001402:	bf00      	nop
 8001404:	3738      	adds	r7, #56	; 0x38
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40028000 	.word	0x40028000
 8001410:	58024400 	.word	0x58024400
 8001414:	58020800 	.word	0x58020800
 8001418:	58020000 	.word	0x58020000
 800141c:	58020400 	.word	0x58020400
 8001420:	58021800 	.word	0x58021800

08001424 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b0ba      	sub	sp, #232	; 0xe8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800143c:	f107 0310 	add.w	r3, r7, #16
 8001440:	22c0      	movs	r2, #192	; 0xc0
 8001442:	2100      	movs	r1, #0
 8001444:	4618      	mov	r0, r3
 8001446:	f00a fcf0 	bl	800be2a <memset>
  if(hi2c->Instance==I2C2)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a27      	ldr	r2, [pc, #156]	; (80014ec <HAL_I2C_MspInit+0xc8>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d146      	bne.n	80014e2 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001454:	f04f 0208 	mov.w	r2, #8
 8001458:	f04f 0300 	mov.w	r3, #0
 800145c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001460:	2300      	movs	r3, #0
 8001462:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001466:	f107 0310 	add.w	r3, r7, #16
 800146a:	4618      	mov	r0, r3
 800146c:	f003 fa20 	bl	80048b0 <HAL_RCCEx_PeriphCLKConfig>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001476:	f7ff fee3 	bl	8001240 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800147a:	4b1d      	ldr	r3, [pc, #116]	; (80014f0 <HAL_I2C_MspInit+0xcc>)
 800147c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001480:	4a1b      	ldr	r2, [pc, #108]	; (80014f0 <HAL_I2C_MspInit+0xcc>)
 8001482:	f043 0302 	orr.w	r3, r3, #2
 8001486:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800148a:	4b19      	ldr	r3, [pc, #100]	; (80014f0 <HAL_I2C_MspInit+0xcc>)
 800148c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001490:	f003 0302 	and.w	r3, r3, #2
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001498:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800149c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014a0:	2312      	movs	r3, #18
 80014a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ac:	2300      	movs	r3, #0
 80014ae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014b2:	2304      	movs	r3, #4
 80014b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014bc:	4619      	mov	r1, r3
 80014be:	480d      	ldr	r0, [pc, #52]	; (80014f4 <HAL_I2C_MspInit+0xd0>)
 80014c0:	f001 f830 	bl	8002524 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014c4:	4b0a      	ldr	r3, [pc, #40]	; (80014f0 <HAL_I2C_MspInit+0xcc>)
 80014c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014ca:	4a09      	ldr	r2, [pc, #36]	; (80014f0 <HAL_I2C_MspInit+0xcc>)
 80014cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014d0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <HAL_I2C_MspInit+0xcc>)
 80014d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80014e2:	bf00      	nop
 80014e4:	37e8      	adds	r7, #232	; 0xe8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40005800 	.word	0x40005800
 80014f0:	58024400 	.word	0x58024400
 80014f4:	58020400 	.word	0x58020400

080014f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b0ba      	sub	sp, #232	; 0xe8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001500:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001510:	f107 0310 	add.w	r3, r7, #16
 8001514:	22c0      	movs	r2, #192	; 0xc0
 8001516:	2100      	movs	r1, #0
 8001518:	4618      	mov	r0, r3
 800151a:	f00a fc86 	bl	800be2a <memset>
  if(huart->Instance==USART3)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a27      	ldr	r2, [pc, #156]	; (80015c0 <HAL_UART_MspInit+0xc8>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d146      	bne.n	80015b6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001528:	f04f 0202 	mov.w	r2, #2
 800152c:	f04f 0300 	mov.w	r3, #0
 8001530:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001534:	2300      	movs	r3, #0
 8001536:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800153a:	f107 0310 	add.w	r3, r7, #16
 800153e:	4618      	mov	r0, r3
 8001540:	f003 f9b6 	bl	80048b0 <HAL_RCCEx_PeriphCLKConfig>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800154a:	f7ff fe79 	bl	8001240 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800154e:	4b1d      	ldr	r3, [pc, #116]	; (80015c4 <HAL_UART_MspInit+0xcc>)
 8001550:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001554:	4a1b      	ldr	r2, [pc, #108]	; (80015c4 <HAL_UART_MspInit+0xcc>)
 8001556:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800155a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800155e:	4b19      	ldr	r3, [pc, #100]	; (80015c4 <HAL_UART_MspInit+0xcc>)
 8001560:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001564:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800156c:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <HAL_UART_MspInit+0xcc>)
 800156e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001572:	4a14      	ldr	r2, [pc, #80]	; (80015c4 <HAL_UART_MspInit+0xcc>)
 8001574:	f043 0308 	orr.w	r3, r3, #8
 8001578:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800157c:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <HAL_UART_MspInit+0xcc>)
 800157e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001582:	f003 0308 	and.w	r3, r3, #8
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800158a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800158e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001592:	2302      	movs	r3, #2
 8001594:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159e:	2300      	movs	r3, #0
 80015a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015a4:	2307      	movs	r3, #7
 80015a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015aa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80015ae:	4619      	mov	r1, r3
 80015b0:	4805      	ldr	r0, [pc, #20]	; (80015c8 <HAL_UART_MspInit+0xd0>)
 80015b2:	f000 ffb7 	bl	8002524 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015b6:	bf00      	nop
 80015b8:	37e8      	adds	r7, #232	; 0xe8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40004800 	.word	0x40004800
 80015c4:	58024400 	.word	0x58024400
 80015c8:	58020c00 	.word	0x58020c00

080015cc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b0ba      	sub	sp, #232	; 0xe8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015e4:	f107 0310 	add.w	r3, r7, #16
 80015e8:	22c0      	movs	r2, #192	; 0xc0
 80015ea:	2100      	movs	r1, #0
 80015ec:	4618      	mov	r0, r3
 80015ee:	f00a fc1c 	bl	800be2a <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a38      	ldr	r2, [pc, #224]	; (80016d8 <HAL_PCD_MspInit+0x10c>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d169      	bne.n	80016d0 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80015fc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001600:	f04f 0300 	mov.w	r3, #0
 8001604:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001608:	2301      	movs	r3, #1
 800160a:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 800160c:	2312      	movs	r3, #18
 800160e:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001610:	2302      	movs	r3, #2
 8001612:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8001614:	2303      	movs	r3, #3
 8001616:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001618:	2302      	movs	r3, #2
 800161a:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 800161c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001620:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8001622:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001626:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001628:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800162c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001630:	f107 0310 	add.w	r3, r7, #16
 8001634:	4618      	mov	r0, r3
 8001636:	f003 f93b 	bl	80048b0 <HAL_RCCEx_PeriphCLKConfig>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 8001640:	f7ff fdfe 	bl	8001240 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001644:	f002 f8fc 	bl	8003840 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001648:	4b24      	ldr	r3, [pc, #144]	; (80016dc <HAL_PCD_MspInit+0x110>)
 800164a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800164e:	4a23      	ldr	r2, [pc, #140]	; (80016dc <HAL_PCD_MspInit+0x110>)
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001658:	4b20      	ldr	r3, [pc, #128]	; (80016dc <HAL_PCD_MspInit+0x110>)
 800165a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001666:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800166a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166e:	2302      	movs	r3, #2
 8001670:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167a:	2300      	movs	r3, #0
 800167c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001680:	230a      	movs	r3, #10
 8001682:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001686:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800168a:	4619      	mov	r1, r3
 800168c:	4814      	ldr	r0, [pc, #80]	; (80016e0 <HAL_PCD_MspInit+0x114>)
 800168e:	f000 ff49 	bl	8002524 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001692:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001696:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800169a:	2300      	movs	r3, #0
 800169c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016aa:	4619      	mov	r1, r3
 80016ac:	480c      	ldr	r0, [pc, #48]	; (80016e0 <HAL_PCD_MspInit+0x114>)
 80016ae:	f000 ff39 	bl	8002524 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80016b2:	4b0a      	ldr	r3, [pc, #40]	; (80016dc <HAL_PCD_MspInit+0x110>)
 80016b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80016b8:	4a08      	ldr	r2, [pc, #32]	; (80016dc <HAL_PCD_MspInit+0x110>)
 80016ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80016be:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80016c2:	4b06      	ldr	r3, [pc, #24]	; (80016dc <HAL_PCD_MspInit+0x110>)
 80016c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80016c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80016cc:	60bb      	str	r3, [r7, #8]
 80016ce:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80016d0:	bf00      	nop
 80016d2:	37e8      	adds	r7, #232	; 0xe8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40080000 	.word	0x40080000
 80016dc:	58024400 	.word	0x58024400
 80016e0:	58020000 	.word	0x58020000

080016e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b090      	sub	sp, #64	; 0x40
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM14 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b0f      	cmp	r3, #15
 80016f0:	d827      	bhi.n	8001742 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0U);
 80016f2:	2200      	movs	r2, #0
 80016f4:	6879      	ldr	r1, [r7, #4]
 80016f6:	202d      	movs	r0, #45	; 0x2d
 80016f8:	f000 fac8 	bl	8001c8c <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80016fc:	202d      	movs	r0, #45	; 0x2d
 80016fe:	f000 fadf 	bl	8001cc0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001702:	4a29      	ldr	r2, [pc, #164]	; (80017a8 <HAL_InitTick+0xc4>)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8001708:	4b28      	ldr	r3, [pc, #160]	; (80017ac <HAL_InitTick+0xc8>)
 800170a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800170e:	4a27      	ldr	r2, [pc, #156]	; (80017ac <HAL_InitTick+0xc8>)
 8001710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001714:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001718:	4b24      	ldr	r3, [pc, #144]	; (80017ac <HAL_InitTick+0xc8>)
 800171a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800171e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001726:	f107 0210 	add.w	r2, r7, #16
 800172a:	f107 0314 	add.w	r3, r7, #20
 800172e:	4611      	mov	r1, r2
 8001730:	4618      	mov	r0, r3
 8001732:	f003 f87b 	bl	800482c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001738:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800173a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800173c:	2b00      	cmp	r3, #0
 800173e:	d106      	bne.n	800174e <HAL_InitTick+0x6a>
 8001740:	e001      	b.n	8001746 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e02b      	b.n	800179e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001746:	f003 f845 	bl	80047d4 <HAL_RCC_GetPCLK1Freq>
 800174a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800174c:	e004      	b.n	8001758 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800174e:	f003 f841 	bl	80047d4 <HAL_RCC_GetPCLK1Freq>
 8001752:	4603      	mov	r3, r0
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800175a:	4a15      	ldr	r2, [pc, #84]	; (80017b0 <HAL_InitTick+0xcc>)
 800175c:	fba2 2303 	umull	r2, r3, r2, r3
 8001760:	0c9b      	lsrs	r3, r3, #18
 8001762:	3b01      	subs	r3, #1
 8001764:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8001766:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <HAL_InitTick+0xd0>)
 8001768:	4a13      	ldr	r2, [pc, #76]	; (80017b8 <HAL_InitTick+0xd4>)
 800176a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 800176c:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <HAL_InitTick+0xd0>)
 800176e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001772:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8001774:	4a0f      	ldr	r2, [pc, #60]	; (80017b4 <HAL_InitTick+0xd0>)
 8001776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001778:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 800177a:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <HAL_InitTick+0xd0>)
 800177c:	2200      	movs	r2, #0
 800177e:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <HAL_InitTick+0xd0>)
 8001782:	2200      	movs	r2, #0
 8001784:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8001786:	480b      	ldr	r0, [pc, #44]	; (80017b4 <HAL_InitTick+0xd0>)
 8001788:	f004 febe 	bl	8006508 <HAL_TIM_Base_Init>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d104      	bne.n	800179c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8001792:	4808      	ldr	r0, [pc, #32]	; (80017b4 <HAL_InitTick+0xd0>)
 8001794:	f004 ff1a 	bl	80065cc <HAL_TIM_Base_Start_IT>
 8001798:	4603      	mov	r3, r0
 800179a:	e000      	b.n	800179e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3740      	adds	r7, #64	; 0x40
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	24000008 	.word	0x24000008
 80017ac:	58024400 	.word	0x58024400
 80017b0:	431bde83 	.word	0x431bde83
 80017b4:	240009bc 	.word	0x240009bc
 80017b8:	40002000 	.word	0x40002000

080017bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017c0:	e7fe      	b.n	80017c0 <NMI_Handler+0x4>

080017c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017c6:	e7fe      	b.n	80017c6 <HardFault_Handler+0x4>

080017c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017cc:	e7fe      	b.n	80017cc <MemManage_Handler+0x4>

080017ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017d2:	e7fe      	b.n	80017d2 <BusFault_Handler+0x4>

080017d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d8:	e7fe      	b.n	80017d8 <UsageFault_Handler+0x4>

080017da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80017ec:	4802      	ldr	r0, [pc, #8]	; (80017f8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80017ee:	f004 ff65 	bl	80066bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	240009bc 	.word	0x240009bc

080017fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  return 1;
 8001800:	2301      	movs	r3, #1
}
 8001802:	4618      	mov	r0, r3
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <_kill>:

int _kill(int pid, int sig)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001816:	f00a fbb1 	bl	800bf7c <__errno>
 800181a:	4603      	mov	r3, r0
 800181c:	2216      	movs	r2, #22
 800181e:	601a      	str	r2, [r3, #0]
  return -1;
 8001820:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001824:	4618      	mov	r0, r3
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <_exit>:

void _exit (int status)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001834:	f04f 31ff 	mov.w	r1, #4294967295
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7ff ffe7 	bl	800180c <_kill>
  while (1) {}    /* Make sure we hang here */
 800183e:	e7fe      	b.n	800183e <_exit+0x12>

08001840 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	e00a      	b.n	8001868 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001852:	f3af 8000 	nop.w
 8001856:	4601      	mov	r1, r0
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	1c5a      	adds	r2, r3, #1
 800185c:	60ba      	str	r2, [r7, #8]
 800185e:	b2ca      	uxtb	r2, r1
 8001860:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	3301      	adds	r3, #1
 8001866:	617b      	str	r3, [r7, #20]
 8001868:	697a      	ldr	r2, [r7, #20]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	429a      	cmp	r2, r3
 800186e:	dbf0      	blt.n	8001852 <_read+0x12>
  }

  return len;
 8001870:	687b      	ldr	r3, [r7, #4]
}
 8001872:	4618      	mov	r0, r3
 8001874:	3718      	adds	r7, #24
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b086      	sub	sp, #24
 800187e:	af00      	add	r7, sp, #0
 8001880:	60f8      	str	r0, [r7, #12]
 8001882:	60b9      	str	r1, [r7, #8]
 8001884:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]
 800188a:	e009      	b.n	80018a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	1c5a      	adds	r2, r3, #1
 8001890:	60ba      	str	r2, [r7, #8]
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	3301      	adds	r3, #1
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	697a      	ldr	r2, [r7, #20]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	dbf1      	blt.n	800188c <_write+0x12>
  }
  return len;
 80018a8:	687b      	ldr	r3, [r7, #4]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3718      	adds	r7, #24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <_close>:

int _close(int file)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018be:	4618      	mov	r0, r3
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018ca:	b480      	push	{r7}
 80018cc:	b083      	sub	sp, #12
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
 80018d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018da:	605a      	str	r2, [r3, #4]
  return 0;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <_isatty>:

int _isatty(int file)
{
 80018ea:	b480      	push	{r7}
 80018ec:	b083      	sub	sp, #12
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018f2:	2301      	movs	r3, #1
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3714      	adds	r7, #20
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
	...

0800191c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001924:	4a14      	ldr	r2, [pc, #80]	; (8001978 <_sbrk+0x5c>)
 8001926:	4b15      	ldr	r3, [pc, #84]	; (800197c <_sbrk+0x60>)
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001930:	4b13      	ldr	r3, [pc, #76]	; (8001980 <_sbrk+0x64>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d102      	bne.n	800193e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001938:	4b11      	ldr	r3, [pc, #68]	; (8001980 <_sbrk+0x64>)
 800193a:	4a12      	ldr	r2, [pc, #72]	; (8001984 <_sbrk+0x68>)
 800193c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800193e:	4b10      	ldr	r3, [pc, #64]	; (8001980 <_sbrk+0x64>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4413      	add	r3, r2
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	429a      	cmp	r2, r3
 800194a:	d207      	bcs.n	800195c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800194c:	f00a fb16 	bl	800bf7c <__errno>
 8001950:	4603      	mov	r3, r0
 8001952:	220c      	movs	r2, #12
 8001954:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001956:	f04f 33ff 	mov.w	r3, #4294967295
 800195a:	e009      	b.n	8001970 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800195c:	4b08      	ldr	r3, [pc, #32]	; (8001980 <_sbrk+0x64>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001962:	4b07      	ldr	r3, [pc, #28]	; (8001980 <_sbrk+0x64>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4413      	add	r3, r2
 800196a:	4a05      	ldr	r2, [pc, #20]	; (8001980 <_sbrk+0x64>)
 800196c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800196e:	68fb      	ldr	r3, [r7, #12]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3718      	adds	r7, #24
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	24080000 	.word	0x24080000
 800197c:	00000400 	.word	0x00000400
 8001980:	24000a08 	.word	0x24000a08
 8001984:	24005548 	.word	0x24005548

08001988 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001988:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800198c:	f7ff f872 	bl	8000a74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001990:	480c      	ldr	r0, [pc, #48]	; (80019c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001992:	490d      	ldr	r1, [pc, #52]	; (80019c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001994:	4a0d      	ldr	r2, [pc, #52]	; (80019cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001996:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001998:	e002      	b.n	80019a0 <LoopCopyDataInit>

0800199a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800199a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800199c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800199e:	3304      	adds	r3, #4

080019a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019a4:	d3f9      	bcc.n	800199a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019a6:	4a0a      	ldr	r2, [pc, #40]	; (80019d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019a8:	4c0a      	ldr	r4, [pc, #40]	; (80019d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019ac:	e001      	b.n	80019b2 <LoopFillZerobss>

080019ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019b0:	3204      	adds	r2, #4

080019b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019b4:	d3fb      	bcc.n	80019ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019b6:	f00a fae7 	bl	800bf88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ba:	f7ff f929 	bl	8000c10 <main>
  bx  lr
 80019be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019c0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80019c4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80019c8:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 80019cc:	0800fad8 	.word	0x0800fad8
  ldr r2, =_sbss
 80019d0:	2400029c 	.word	0x2400029c
  ldr r4, =_ebss
 80019d4:	24005544 	.word	0x24005544

080019d8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019d8:	e7fe      	b.n	80019d8 <ADC3_IRQHandler>
	...

080019dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019e2:	2003      	movs	r0, #3
 80019e4:	f000 f947 	bl	8001c76 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80019e8:	f002 fd4a 	bl	8004480 <HAL_RCC_GetSysClockFreq>
 80019ec:	4602      	mov	r2, r0
 80019ee:	4b15      	ldr	r3, [pc, #84]	; (8001a44 <HAL_Init+0x68>)
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	0a1b      	lsrs	r3, r3, #8
 80019f4:	f003 030f 	and.w	r3, r3, #15
 80019f8:	4913      	ldr	r1, [pc, #76]	; (8001a48 <HAL_Init+0x6c>)
 80019fa:	5ccb      	ldrb	r3, [r1, r3]
 80019fc:	f003 031f 	and.w	r3, r3, #31
 8001a00:	fa22 f303 	lsr.w	r3, r2, r3
 8001a04:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a06:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <HAL_Init+0x68>)
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	f003 030f 	and.w	r3, r3, #15
 8001a0e:	4a0e      	ldr	r2, [pc, #56]	; (8001a48 <HAL_Init+0x6c>)
 8001a10:	5cd3      	ldrb	r3, [r2, r3]
 8001a12:	f003 031f 	and.w	r3, r3, #31
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	fa22 f303 	lsr.w	r3, r2, r3
 8001a1c:	4a0b      	ldr	r2, [pc, #44]	; (8001a4c <HAL_Init+0x70>)
 8001a1e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a20:	4a0b      	ldr	r2, [pc, #44]	; (8001a50 <HAL_Init+0x74>)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a26:	200f      	movs	r0, #15
 8001a28:	f7ff fe5c 	bl	80016e4 <HAL_InitTick>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e002      	b.n	8001a3c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a36:	f7ff fc09 	bl	800124c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	58024400 	.word	0x58024400
 8001a48:	0800f61c 	.word	0x0800f61c
 8001a4c:	24000004 	.word	0x24000004
 8001a50:	24000000 	.word	0x24000000

08001a54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a58:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <HAL_IncTick+0x20>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <HAL_IncTick+0x24>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4413      	add	r3, r2
 8001a64:	4a04      	ldr	r2, [pc, #16]	; (8001a78 <HAL_IncTick+0x24>)
 8001a66:	6013      	str	r3, [r2, #0]
}
 8001a68:	bf00      	nop
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	2400000c 	.word	0x2400000c
 8001a78:	24000a0c 	.word	0x24000a0c

08001a7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a80:	4b03      	ldr	r3, [pc, #12]	; (8001a90 <HAL_GetTick+0x14>)
 8001a82:	681b      	ldr	r3, [r3, #0]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	24000a0c 	.word	0x24000a0c

08001a94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a9c:	f7ff ffee 	bl	8001a7c <HAL_GetTick>
 8001aa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aac:	d005      	beq.n	8001aba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aae:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <HAL_Delay+0x44>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001aba:	bf00      	nop
 8001abc:	f7ff ffde 	bl	8001a7c <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d8f7      	bhi.n	8001abc <HAL_Delay+0x28>
  {
  }
}
 8001acc:	bf00      	nop
 8001ace:	bf00      	nop
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	2400000c 	.word	0x2400000c

08001adc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001ae0:	4b03      	ldr	r3, [pc, #12]	; (8001af0 <HAL_GetREVID+0x14>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	0c1b      	lsrs	r3, r3, #16
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	5c001000 	.word	0x5c001000

08001af4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001afc:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001b04:	4904      	ldr	r1, [pc, #16]	; (8001b18 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	604b      	str	r3, [r1, #4]
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	58000400 	.word	0x58000400

08001b1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b2c:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <__NVIC_SetPriorityGrouping+0x40>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b32:	68ba      	ldr	r2, [r7, #8]
 8001b34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b38:	4013      	ands	r3, r2
 8001b3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b44:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <__NVIC_SetPriorityGrouping+0x44>)
 8001b46:	4313      	orrs	r3, r2
 8001b48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b4a:	4a04      	ldr	r2, [pc, #16]	; (8001b5c <__NVIC_SetPriorityGrouping+0x40>)
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	60d3      	str	r3, [r2, #12]
}
 8001b50:	bf00      	nop
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	e000ed00 	.word	0xe000ed00
 8001b60:	05fa0000 	.word	0x05fa0000

08001b64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b68:	4b04      	ldr	r3, [pc, #16]	; (8001b7c <__NVIC_GetPriorityGrouping+0x18>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	0a1b      	lsrs	r3, r3, #8
 8001b6e:	f003 0307 	and.w	r3, r3, #7
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	e000ed00 	.word	0xe000ed00

08001b80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	db0b      	blt.n	8001baa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b92:	88fb      	ldrh	r3, [r7, #6]
 8001b94:	f003 021f 	and.w	r2, r3, #31
 8001b98:	4907      	ldr	r1, [pc, #28]	; (8001bb8 <__NVIC_EnableIRQ+0x38>)
 8001b9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b9e:	095b      	lsrs	r3, r3, #5
 8001ba0:	2001      	movs	r0, #1
 8001ba2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	e000e100 	.word	0xe000e100

08001bbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	6039      	str	r1, [r7, #0]
 8001bc6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001bc8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	db0a      	blt.n	8001be6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	490c      	ldr	r1, [pc, #48]	; (8001c08 <__NVIC_SetPriority+0x4c>)
 8001bd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bda:	0112      	lsls	r2, r2, #4
 8001bdc:	b2d2      	uxtb	r2, r2
 8001bde:	440b      	add	r3, r1
 8001be0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001be4:	e00a      	b.n	8001bfc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	4908      	ldr	r1, [pc, #32]	; (8001c0c <__NVIC_SetPriority+0x50>)
 8001bec:	88fb      	ldrh	r3, [r7, #6]
 8001bee:	f003 030f 	and.w	r3, r3, #15
 8001bf2:	3b04      	subs	r3, #4
 8001bf4:	0112      	lsls	r2, r2, #4
 8001bf6:	b2d2      	uxtb	r2, r2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	761a      	strb	r2, [r3, #24]
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	e000e100 	.word	0xe000e100
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b089      	sub	sp, #36	; 0x24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	f1c3 0307 	rsb	r3, r3, #7
 8001c2a:	2b04      	cmp	r3, #4
 8001c2c:	bf28      	it	cs
 8001c2e:	2304      	movcs	r3, #4
 8001c30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	3304      	adds	r3, #4
 8001c36:	2b06      	cmp	r3, #6
 8001c38:	d902      	bls.n	8001c40 <NVIC_EncodePriority+0x30>
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	3b03      	subs	r3, #3
 8001c3e:	e000      	b.n	8001c42 <NVIC_EncodePriority+0x32>
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c44:	f04f 32ff 	mov.w	r2, #4294967295
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43da      	mvns	r2, r3
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	401a      	ands	r2, r3
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c58:	f04f 31ff 	mov.w	r1, #4294967295
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c62:	43d9      	mvns	r1, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c68:	4313      	orrs	r3, r2
         );
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3724      	adds	r7, #36	; 0x24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b082      	sub	sp, #8
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f7ff ff4c 	bl	8001b1c <__NVIC_SetPriorityGrouping>
}
 8001c84:	bf00      	nop
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
 8001c98:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c9a:	f7ff ff63 	bl	8001b64 <__NVIC_GetPriorityGrouping>
 8001c9e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	68b9      	ldr	r1, [r7, #8]
 8001ca4:	6978      	ldr	r0, [r7, #20]
 8001ca6:	f7ff ffb3 	bl	8001c10 <NVIC_EncodePriority>
 8001caa:	4602      	mov	r2, r0
 8001cac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001cb0:	4611      	mov	r1, r2
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff ff82 	bl	8001bbc <__NVIC_SetPriority>
}
 8001cb8:	bf00      	nop
 8001cba:	3718      	adds	r7, #24
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff ff56 	bl	8001b80 <__NVIC_EnableIRQ>
}
 8001cd4:	bf00      	nop
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e0cf      	b.n	8001e8e <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d106      	bne.n	8001d06 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2223      	movs	r2, #35	; 0x23
 8001cfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f7ff fac1 	bl	8001288 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d06:	4b64      	ldr	r3, [pc, #400]	; (8001e98 <HAL_ETH_Init+0x1bc>)
 8001d08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d0c:	4a62      	ldr	r2, [pc, #392]	; (8001e98 <HAL_ETH_Init+0x1bc>)
 8001d0e:	f043 0302 	orr.w	r3, r3, #2
 8001d12:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001d16:	4b60      	ldr	r3, [pc, #384]	; (8001e98 <HAL_ETH_Init+0x1bc>)
 8001d18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	60bb      	str	r3, [r7, #8]
 8001d22:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	7a1b      	ldrb	r3, [r3, #8]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d103      	bne.n	8001d34 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001d2c:	2000      	movs	r0, #0
 8001d2e:	f7ff fee1 	bl	8001af4 <HAL_SYSCFG_ETHInterfaceSelect>
 8001d32:	e003      	b.n	8001d3c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001d34:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001d38:	f7ff fedc 	bl	8001af4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001d3c:	4b57      	ldr	r3, [pc, #348]	; (8001e9c <HAL_ETH_Init+0x1c0>)
 8001d3e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	6812      	ldr	r2, [r2, #0]
 8001d4e:	f043 0301 	orr.w	r3, r3, #1
 8001d52:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d56:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d58:	f7ff fe90 	bl	8001a7c <HAL_GetTick>
 8001d5c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001d5e:	e011      	b.n	8001d84 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001d60:	f7ff fe8c 	bl	8001a7c <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d6e:	d909      	bls.n	8001d84 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2204      	movs	r2, #4
 8001d74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	22e0      	movs	r2, #224	; 0xe0
 8001d7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e084      	b.n	8001e8e <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1e4      	bne.n	8001d60 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 f886 	bl	8001ea8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001d9c:	f002 fcea 	bl	8004774 <HAL_RCC_GetHCLKFreq>
 8001da0:	4603      	mov	r3, r0
 8001da2:	4a3f      	ldr	r2, [pc, #252]	; (8001ea0 <HAL_ETH_Init+0x1c4>)
 8001da4:	fba2 2303 	umull	r2, r3, r2, r3
 8001da8:	0c9a      	lsrs	r2, r3, #18
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	3a01      	subs	r2, #1
 8001db0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f000 fa71 	bl	800229c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dc2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001dc6:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	6812      	ldr	r2, [r2, #0]
 8001dce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001dd2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001dd6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d009      	beq.n	8001dfa <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2201      	movs	r2, #1
 8001dea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	22e0      	movs	r2, #224	; 0xe0
 8001df2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e049      	b.n	8001e8e <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e02:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001e06:	4b27      	ldr	r3, [pc, #156]	; (8001ea4 <HAL_ETH_Init+0x1c8>)
 8001e08:	4013      	ands	r3, r2
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	6952      	ldr	r2, [r2, #20]
 8001e0e:	0051      	lsls	r1, r2, #1
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	6812      	ldr	r2, [r2, #0]
 8001e14:	430b      	orrs	r3, r1
 8001e16:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e1a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 fad9 	bl	80023d6 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 fb1f 	bl	8002468 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	3305      	adds	r3, #5
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	021a      	lsls	r2, r3, #8
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	3304      	adds	r3, #4
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	430a      	orrs	r2, r1
 8001e44:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	3303      	adds	r3, #3
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	061a      	lsls	r2, r3, #24
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	3302      	adds	r3, #2
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	041b      	lsls	r3, r3, #16
 8001e5c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	3301      	adds	r3, #1
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001e68:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001e76:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001e78:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2210      	movs	r2, #16
 8001e88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	58024400 	.word	0x58024400
 8001e9c:	58000400 	.word	0x58000400
 8001ea0:	431bde83 	.word	0x431bde83
 8001ea4:	ffff8001 	.word	0xffff8001

08001ea8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001eb8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ec0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001ec2:	f002 fc57 	bl	8004774 <HAL_RCC_GetHCLKFreq>
 8001ec6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	4a1e      	ldr	r2, [pc, #120]	; (8001f44 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d908      	bls.n	8001ee2 <HAL_ETH_SetMDIOClockRange+0x3a>
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	4a1d      	ldr	r2, [pc, #116]	; (8001f48 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d804      	bhi.n	8001ee2 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	e027      	b.n	8001f32 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	4a18      	ldr	r2, [pc, #96]	; (8001f48 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d908      	bls.n	8001efc <HAL_ETH_SetMDIOClockRange+0x54>
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	4a17      	ldr	r2, [pc, #92]	; (8001f4c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d204      	bcs.n	8001efc <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	e01a      	b.n	8001f32 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	4a13      	ldr	r2, [pc, #76]	; (8001f4c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d303      	bcc.n	8001f0c <HAL_ETH_SetMDIOClockRange+0x64>
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	4a12      	ldr	r2, [pc, #72]	; (8001f50 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d911      	bls.n	8001f30 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	4a10      	ldr	r2, [pc, #64]	; (8001f50 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d908      	bls.n	8001f26 <HAL_ETH_SetMDIOClockRange+0x7e>
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	4a0f      	ldr	r2, [pc, #60]	; (8001f54 <HAL_ETH_SetMDIOClockRange+0xac>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d804      	bhi.n	8001f26 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	e005      	b.n	8001f32 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	e000      	b.n	8001f32 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001f30:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001f3c:	bf00      	nop
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	01312cff 	.word	0x01312cff
 8001f48:	02160ebf 	.word	0x02160ebf
 8001f4c:	03938700 	.word	0x03938700
 8001f50:	05f5e0ff 	.word	0x05f5e0ff
 8001f54:	08f0d17f 	.word	0x08f0d17f

08001f58 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001f6a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	791b      	ldrb	r3, [r3, #4]
 8001f70:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001f72:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	7b1b      	ldrb	r3, [r3, #12]
 8001f78:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001f7a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	7b5b      	ldrb	r3, [r3, #13]
 8001f80:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001f82:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	7b9b      	ldrb	r3, [r3, #14]
 8001f88:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001f8a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	7bdb      	ldrb	r3, [r3, #15]
 8001f90:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001f92:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	7c12      	ldrb	r2, [r2, #16]
 8001f98:	2a00      	cmp	r2, #0
 8001f9a:	d102      	bne.n	8001fa2 <ETH_SetMACConfig+0x4a>
 8001f9c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001fa0:	e000      	b.n	8001fa4 <ETH_SetMACConfig+0x4c>
 8001fa2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001fa4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	7c52      	ldrb	r2, [r2, #17]
 8001faa:	2a00      	cmp	r2, #0
 8001fac:	d102      	bne.n	8001fb4 <ETH_SetMACConfig+0x5c>
 8001fae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fb2:	e000      	b.n	8001fb6 <ETH_SetMACConfig+0x5e>
 8001fb4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001fb6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	7c9b      	ldrb	r3, [r3, #18]
 8001fbc:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001fbe:	431a      	orrs	r2, r3
               macconf->Speed |
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001fc4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001fca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	7f1b      	ldrb	r3, [r3, #28]
 8001fd0:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001fd2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	7f5b      	ldrb	r3, [r3, #29]
 8001fd8:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001fda:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	7f92      	ldrb	r2, [r2, #30]
 8001fe0:	2a00      	cmp	r2, #0
 8001fe2:	d102      	bne.n	8001fea <ETH_SetMACConfig+0x92>
 8001fe4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fe8:	e000      	b.n	8001fec <ETH_SetMACConfig+0x94>
 8001fea:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001fec:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	7fdb      	ldrb	r3, [r3, #31]
 8001ff2:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001ff4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001ffc:	2a00      	cmp	r2, #0
 8001ffe:	d102      	bne.n	8002006 <ETH_SetMACConfig+0xae>
 8002000:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002004:	e000      	b.n	8002008 <ETH_SetMACConfig+0xb0>
 8002006:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002008:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800200e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002016:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002018:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800201e:	4313      	orrs	r3, r2
 8002020:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	4b56      	ldr	r3, [pc, #344]	; (8002184 <ETH_SetMACConfig+0x22c>)
 800202a:	4013      	ands	r3, r2
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	6812      	ldr	r2, [r2, #0]
 8002030:	68f9      	ldr	r1, [r7, #12]
 8002032:	430b      	orrs	r3, r1
 8002034:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800203a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002042:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002044:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800204c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800204e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002056:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002058:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002060:	2a00      	cmp	r2, #0
 8002062:	d102      	bne.n	800206a <ETH_SetMACConfig+0x112>
 8002064:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002068:	e000      	b.n	800206c <ETH_SetMACConfig+0x114>
 800206a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800206c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002072:	4313      	orrs	r3, r2
 8002074:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	4b42      	ldr	r3, [pc, #264]	; (8002188 <ETH_SetMACConfig+0x230>)
 800207e:	4013      	ands	r3, r2
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	6812      	ldr	r2, [r2, #0]
 8002084:	68f9      	ldr	r1, [r7, #12]
 8002086:	430b      	orrs	r3, r1
 8002088:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002090:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002096:	4313      	orrs	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68da      	ldr	r2, [r3, #12]
 80020a0:	4b3a      	ldr	r3, [pc, #232]	; (800218c <ETH_SetMACConfig+0x234>)
 80020a2:	4013      	ands	r3, r2
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	6812      	ldr	r2, [r2, #0]
 80020a8:	68f9      	ldr	r1, [r7, #12]
 80020aa:	430b      	orrs	r3, r1
 80020ac:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80020b4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80020ba:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80020c2:	2a00      	cmp	r2, #0
 80020c4:	d101      	bne.n	80020ca <ETH_SetMACConfig+0x172>
 80020c6:	2280      	movs	r2, #128	; 0x80
 80020c8:	e000      	b.n	80020cc <ETH_SetMACConfig+0x174>
 80020ca:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80020cc:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020d2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80020d4:	4313      	orrs	r3, r2
 80020d6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80020de:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80020e2:	4013      	ands	r3, r2
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	6812      	ldr	r2, [r2, #0]
 80020e8:	68f9      	ldr	r1, [r7, #12]
 80020ea:	430b      	orrs	r3, r1
 80020ec:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80020f4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80020fc:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80020fe:	4313      	orrs	r3, r2
 8002100:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800210a:	f023 0103 	bic.w	r1, r3, #3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	430a      	orrs	r2, r1
 8002116:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002122:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	430a      	orrs	r2, r1
 8002130:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800213e:	2a00      	cmp	r2, #0
 8002140:	d101      	bne.n	8002146 <ETH_SetMACConfig+0x1ee>
 8002142:	2240      	movs	r2, #64	; 0x40
 8002144:	e000      	b.n	8002148 <ETH_SetMACConfig+0x1f0>
 8002146:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002148:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002150:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002152:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800215a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800215c:	4313      	orrs	r3, r2
 800215e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002168:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	430a      	orrs	r2, r1
 8002174:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002178:	bf00      	nop
 800217a:	3714      	adds	r7, #20
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	00048083 	.word	0x00048083
 8002188:	c0f88000 	.word	0xc0f88000
 800218c:	fffffef0 	.word	0xfffffef0

08002190 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	4b38      	ldr	r3, [pc, #224]	; (8002288 <ETH_SetDMAConfig+0xf8>)
 80021a6:	4013      	ands	r3, r2
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	6811      	ldr	r1, [r2, #0]
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	6812      	ldr	r2, [r2, #0]
 80021b0:	430b      	orrs	r3, r1
 80021b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80021b6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	791b      	ldrb	r3, [r3, #4]
 80021bc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80021c2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	7b1b      	ldrb	r3, [r3, #12]
 80021c8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80021ca:	4313      	orrs	r3, r2
 80021cc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021d6:	685a      	ldr	r2, [r3, #4]
 80021d8:	4b2c      	ldr	r3, [pc, #176]	; (800228c <ETH_SetDMAConfig+0xfc>)
 80021da:	4013      	ands	r3, r2
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	6812      	ldr	r2, [r2, #0]
 80021e0:	68f9      	ldr	r1, [r7, #12]
 80021e2:	430b      	orrs	r3, r1
 80021e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80021e8:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	7b5b      	ldrb	r3, [r3, #13]
 80021ee:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80021f4:	4313      	orrs	r3, r2
 80021f6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002200:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8002204:	4b22      	ldr	r3, [pc, #136]	; (8002290 <ETH_SetDMAConfig+0x100>)
 8002206:	4013      	ands	r3, r2
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	6812      	ldr	r2, [r2, #0]
 800220c:	68f9      	ldr	r1, [r7, #12]
 800220e:	430b      	orrs	r3, r1
 8002210:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002214:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	7d1b      	ldrb	r3, [r3, #20]
 8002220:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002222:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	7f5b      	ldrb	r3, [r3, #29]
 8002228:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800222a:	4313      	orrs	r3, r2
 800222c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002236:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800223a:	4b16      	ldr	r3, [pc, #88]	; (8002294 <ETH_SetDMAConfig+0x104>)
 800223c:	4013      	ands	r3, r2
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	6812      	ldr	r2, [r2, #0]
 8002242:	68f9      	ldr	r1, [r7, #12]
 8002244:	430b      	orrs	r3, r1
 8002246:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800224a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	7f1b      	ldrb	r3, [r3, #28]
 8002252:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002258:	4313      	orrs	r3, r2
 800225a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002264:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002268:	4b0b      	ldr	r3, [pc, #44]	; (8002298 <ETH_SetDMAConfig+0x108>)
 800226a:	4013      	ands	r3, r2
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	6812      	ldr	r2, [r2, #0]
 8002270:	68f9      	ldr	r1, [r7, #12]
 8002272:	430b      	orrs	r3, r1
 8002274:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002278:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 800227c:	bf00      	nop
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	ffff87fd 	.word	0xffff87fd
 800228c:	ffff2ffe 	.word	0xffff2ffe
 8002290:	fffec000 	.word	0xfffec000
 8002294:	ffc0efef 	.word	0xffc0efef
 8002298:	7fc0ffff 	.word	0x7fc0ffff

0800229c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b0a4      	sub	sp, #144	; 0x90
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80022a4:	2301      	movs	r3, #1
 80022a6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80022aa:	2300      	movs	r3, #0
 80022ac:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80022ae:	2300      	movs	r3, #0
 80022b0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80022b4:	2300      	movs	r3, #0
 80022b6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80022ba:	2301      	movs	r3, #1
 80022bc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80022c0:	2301      	movs	r3, #1
 80022c2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80022c6:	2301      	movs	r3, #1
 80022c8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80022cc:	2300      	movs	r3, #0
 80022ce:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80022d2:	2301      	movs	r3, #1
 80022d4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80022d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022dc:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80022de:	2300      	movs	r3, #0
 80022e0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80022e4:	2300      	movs	r3, #0
 80022e6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80022e8:	2300      	movs	r3, #0
 80022ea:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80022ee:	2300      	movs	r3, #0
 80022f0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80022f4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80022f8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80022fa:	2300      	movs	r3, #0
 80022fc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002300:	2300      	movs	r3, #0
 8002302:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002304:	2301      	movs	r3, #1
 8002306:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800230a:	2300      	movs	r3, #0
 800230c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002310:	2300      	movs	r3, #0
 8002312:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002316:	2300      	movs	r3, #0
 8002318:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800231a:	2300      	movs	r3, #0
 800231c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800231e:	2300      	movs	r3, #0
 8002320:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002322:	2300      	movs	r3, #0
 8002324:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002328:	2300      	movs	r3, #0
 800232a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800232e:	2301      	movs	r3, #1
 8002330:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002334:	2320      	movs	r3, #32
 8002336:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800233a:	2301      	movs	r3, #1
 800233c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002340:	2300      	movs	r3, #0
 8002342:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002346:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800234a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800234c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002350:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002352:	2300      	movs	r3, #0
 8002354:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002358:	2302      	movs	r3, #2
 800235a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800235e:	2300      	movs	r3, #0
 8002360:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002364:	2300      	movs	r3, #0
 8002366:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800236a:	2300      	movs	r3, #0
 800236c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002370:	2301      	movs	r3, #1
 8002372:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002376:	2300      	movs	r3, #0
 8002378:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800237a:	2301      	movs	r3, #1
 800237c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002380:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002384:	4619      	mov	r1, r3
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f7ff fde6 	bl	8001f58 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800238c:	2301      	movs	r3, #1
 800238e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002390:	2301      	movs	r3, #1
 8002392:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002394:	2300      	movs	r3, #0
 8002396:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002398:	2300      	movs	r3, #0
 800239a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800239e:	2300      	movs	r3, #0
 80023a0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80023a2:	2300      	movs	r3, #0
 80023a4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80023a6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80023aa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80023ac:	2300      	movs	r3, #0
 80023ae:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80023b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80023b4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80023b6:	2300      	movs	r3, #0
 80023b8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80023bc:	f44f 7306 	mov.w	r3, #536	; 0x218
 80023c0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80023c2:	f107 0308 	add.w	r3, r7, #8
 80023c6:	4619      	mov	r1, r3
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f7ff fee1 	bl	8002190 <ETH_SetDMAConfig>
}
 80023ce:	bf00      	nop
 80023d0:	3790      	adds	r7, #144	; 0x90
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b085      	sub	sp, #20
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80023de:	2300      	movs	r3, #0
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	e01d      	b.n	8002420 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68d9      	ldr	r1, [r3, #12]
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	4613      	mov	r3, r2
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	4413      	add	r3, r2
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	440b      	add	r3, r1
 80023f4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	2200      	movs	r2, #0
 8002400:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	2200      	movs	r2, #0
 8002406:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	2200      	movs	r2, #0
 800240c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800240e:	68b9      	ldr	r1, [r7, #8]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	3206      	adds	r2, #6
 8002416:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	3301      	adds	r3, #1
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2b03      	cmp	r3, #3
 8002424:	d9de      	bls.n	80023e4 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002434:	461a      	mov	r2, r3
 8002436:	2303      	movs	r3, #3
 8002438:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68da      	ldr	r2, [r3, #12]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002448:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	68da      	ldr	r2, [r3, #12]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002458:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 800245c:	bf00      	nop
 800245e:	3714      	adds	r7, #20
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002470:	2300      	movs	r3, #0
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	e023      	b.n	80024be <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6919      	ldr	r1, [r3, #16]
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	4613      	mov	r3, r2
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	4413      	add	r3, r2
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	440b      	add	r3, r1
 8002486:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	2200      	movs	r2, #0
 8002492:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	2200      	movs	r2, #0
 8002498:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	2200      	movs	r2, #0
 800249e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	2200      	movs	r2, #0
 80024a4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	2200      	movs	r2, #0
 80024aa:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80024ac:	68b9      	ldr	r1, [r7, #8]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	3212      	adds	r2, #18
 80024b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	3301      	adds	r3, #1
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2b03      	cmp	r3, #3
 80024c2:	d9d8      	bls.n	8002476 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024ea:	461a      	mov	r2, r3
 80024ec:	2303      	movs	r3, #3
 80024ee:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	691a      	ldr	r2, [r3, #16]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024fe:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002512:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8002516:	bf00      	nop
 8002518:	3714      	adds	r7, #20
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
	...

08002524 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002524:	b480      	push	{r7}
 8002526:	b089      	sub	sp, #36	; 0x24
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800252e:	2300      	movs	r3, #0
 8002530:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002532:	4b89      	ldr	r3, [pc, #548]	; (8002758 <HAL_GPIO_Init+0x234>)
 8002534:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002536:	e194      	b.n	8002862 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	2101      	movs	r1, #1
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	fa01 f303 	lsl.w	r3, r1, r3
 8002544:	4013      	ands	r3, r2
 8002546:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	2b00      	cmp	r3, #0
 800254c:	f000 8186 	beq.w	800285c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f003 0303 	and.w	r3, r3, #3
 8002558:	2b01      	cmp	r3, #1
 800255a:	d005      	beq.n	8002568 <HAL_GPIO_Init+0x44>
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f003 0303 	and.w	r3, r3, #3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d130      	bne.n	80025ca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	2203      	movs	r2, #3
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	43db      	mvns	r3, r3
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	4013      	ands	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	68da      	ldr	r2, [r3, #12]
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	4313      	orrs	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800259e:	2201      	movs	r2, #1
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	43db      	mvns	r3, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	4013      	ands	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	091b      	lsrs	r3, r3, #4
 80025b4:	f003 0201 	and.w	r2, r3, #1
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	2b03      	cmp	r3, #3
 80025d4:	d017      	beq.n	8002606 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	2203      	movs	r2, #3
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	43db      	mvns	r3, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4013      	ands	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	689a      	ldr	r2, [r3, #8]
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f003 0303 	and.w	r3, r3, #3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d123      	bne.n	800265a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	08da      	lsrs	r2, r3, #3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	3208      	adds	r2, #8
 800261a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800261e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	220f      	movs	r2, #15
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	43db      	mvns	r3, r3
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	4013      	ands	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	691a      	ldr	r2, [r3, #16]
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	f003 0307 	and.w	r3, r3, #7
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4313      	orrs	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	08da      	lsrs	r2, r3, #3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	3208      	adds	r2, #8
 8002654:	69b9      	ldr	r1, [r7, #24]
 8002656:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	2203      	movs	r2, #3
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	43db      	mvns	r3, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4013      	ands	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f003 0203 	and.w	r2, r3, #3
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4313      	orrs	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002696:	2b00      	cmp	r3, #0
 8002698:	f000 80e0 	beq.w	800285c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800269c:	4b2f      	ldr	r3, [pc, #188]	; (800275c <HAL_GPIO_Init+0x238>)
 800269e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80026a2:	4a2e      	ldr	r2, [pc, #184]	; (800275c <HAL_GPIO_Init+0x238>)
 80026a4:	f043 0302 	orr.w	r3, r3, #2
 80026a8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80026ac:	4b2b      	ldr	r3, [pc, #172]	; (800275c <HAL_GPIO_Init+0x238>)
 80026ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026ba:	4a29      	ldr	r2, [pc, #164]	; (8002760 <HAL_GPIO_Init+0x23c>)
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	089b      	lsrs	r3, r3, #2
 80026c0:	3302      	adds	r3, #2
 80026c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	f003 0303 	and.w	r3, r3, #3
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	220f      	movs	r2, #15
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	43db      	mvns	r3, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4013      	ands	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a20      	ldr	r2, [pc, #128]	; (8002764 <HAL_GPIO_Init+0x240>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d052      	beq.n	800278c <HAL_GPIO_Init+0x268>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a1f      	ldr	r2, [pc, #124]	; (8002768 <HAL_GPIO_Init+0x244>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d031      	beq.n	8002752 <HAL_GPIO_Init+0x22e>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a1e      	ldr	r2, [pc, #120]	; (800276c <HAL_GPIO_Init+0x248>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d02b      	beq.n	800274e <HAL_GPIO_Init+0x22a>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a1d      	ldr	r2, [pc, #116]	; (8002770 <HAL_GPIO_Init+0x24c>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d025      	beq.n	800274a <HAL_GPIO_Init+0x226>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a1c      	ldr	r2, [pc, #112]	; (8002774 <HAL_GPIO_Init+0x250>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d01f      	beq.n	8002746 <HAL_GPIO_Init+0x222>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a1b      	ldr	r2, [pc, #108]	; (8002778 <HAL_GPIO_Init+0x254>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d019      	beq.n	8002742 <HAL_GPIO_Init+0x21e>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a1a      	ldr	r2, [pc, #104]	; (800277c <HAL_GPIO_Init+0x258>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d013      	beq.n	800273e <HAL_GPIO_Init+0x21a>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a19      	ldr	r2, [pc, #100]	; (8002780 <HAL_GPIO_Init+0x25c>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d00d      	beq.n	800273a <HAL_GPIO_Init+0x216>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a18      	ldr	r2, [pc, #96]	; (8002784 <HAL_GPIO_Init+0x260>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d007      	beq.n	8002736 <HAL_GPIO_Init+0x212>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a17      	ldr	r2, [pc, #92]	; (8002788 <HAL_GPIO_Init+0x264>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d101      	bne.n	8002732 <HAL_GPIO_Init+0x20e>
 800272e:	2309      	movs	r3, #9
 8002730:	e02d      	b.n	800278e <HAL_GPIO_Init+0x26a>
 8002732:	230a      	movs	r3, #10
 8002734:	e02b      	b.n	800278e <HAL_GPIO_Init+0x26a>
 8002736:	2308      	movs	r3, #8
 8002738:	e029      	b.n	800278e <HAL_GPIO_Init+0x26a>
 800273a:	2307      	movs	r3, #7
 800273c:	e027      	b.n	800278e <HAL_GPIO_Init+0x26a>
 800273e:	2306      	movs	r3, #6
 8002740:	e025      	b.n	800278e <HAL_GPIO_Init+0x26a>
 8002742:	2305      	movs	r3, #5
 8002744:	e023      	b.n	800278e <HAL_GPIO_Init+0x26a>
 8002746:	2304      	movs	r3, #4
 8002748:	e021      	b.n	800278e <HAL_GPIO_Init+0x26a>
 800274a:	2303      	movs	r3, #3
 800274c:	e01f      	b.n	800278e <HAL_GPIO_Init+0x26a>
 800274e:	2302      	movs	r3, #2
 8002750:	e01d      	b.n	800278e <HAL_GPIO_Init+0x26a>
 8002752:	2301      	movs	r3, #1
 8002754:	e01b      	b.n	800278e <HAL_GPIO_Init+0x26a>
 8002756:	bf00      	nop
 8002758:	58000080 	.word	0x58000080
 800275c:	58024400 	.word	0x58024400
 8002760:	58000400 	.word	0x58000400
 8002764:	58020000 	.word	0x58020000
 8002768:	58020400 	.word	0x58020400
 800276c:	58020800 	.word	0x58020800
 8002770:	58020c00 	.word	0x58020c00
 8002774:	58021000 	.word	0x58021000
 8002778:	58021400 	.word	0x58021400
 800277c:	58021800 	.word	0x58021800
 8002780:	58021c00 	.word	0x58021c00
 8002784:	58022000 	.word	0x58022000
 8002788:	58022400 	.word	0x58022400
 800278c:	2300      	movs	r3, #0
 800278e:	69fa      	ldr	r2, [r7, #28]
 8002790:	f002 0203 	and.w	r2, r2, #3
 8002794:	0092      	lsls	r2, r2, #2
 8002796:	4093      	lsls	r3, r2
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4313      	orrs	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800279e:	4938      	ldr	r1, [pc, #224]	; (8002880 <HAL_GPIO_Init+0x35c>)
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	089b      	lsrs	r3, r3, #2
 80027a4:	3302      	adds	r3, #2
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	43db      	mvns	r3, r3
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	4013      	ands	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80027d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80027da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	43db      	mvns	r3, r3
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4013      	ands	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002800:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	43db      	mvns	r3, r3
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	4013      	ands	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d003      	beq.n	800282c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	4313      	orrs	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	43db      	mvns	r3, r3
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4013      	ands	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	4313      	orrs	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	3301      	adds	r3, #1
 8002860:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	fa22 f303 	lsr.w	r3, r2, r3
 800286c:	2b00      	cmp	r3, #0
 800286e:	f47f ae63 	bne.w	8002538 <HAL_GPIO_Init+0x14>
  }
}
 8002872:	bf00      	nop
 8002874:	bf00      	nop
 8002876:	3724      	adds	r7, #36	; 0x24
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr
 8002880:	58000400 	.word	0x58000400

08002884 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800288c:	4a08      	ldr	r2, [pc, #32]	; (80028b0 <HAL_HSEM_FastTake+0x2c>)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	3320      	adds	r3, #32
 8002892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002896:	4a07      	ldr	r2, [pc, #28]	; (80028b4 <HAL_HSEM_FastTake+0x30>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d101      	bne.n	80028a0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800289c:	2300      	movs	r3, #0
 800289e:	e000      	b.n	80028a2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	58026400 	.word	0x58026400
 80028b4:	80000300 	.word	0x80000300

080028b8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80028c2:	4906      	ldr	r1, [pc, #24]	; (80028dc <HAL_HSEM_Release+0x24>)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr
 80028dc:	58026400 	.word	0x58026400

080028e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e07f      	b.n	80029f2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d106      	bne.n	800290c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7fe fd8c 	bl	8001424 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2224      	movs	r2, #36	; 0x24
 8002910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f022 0201 	bic.w	r2, r2, #1
 8002922:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685a      	ldr	r2, [r3, #4]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002930:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002940:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d107      	bne.n	800295a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	689a      	ldr	r2, [r3, #8]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002956:	609a      	str	r2, [r3, #8]
 8002958:	e006      	b.n	8002968 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002966:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	2b02      	cmp	r3, #2
 800296e:	d104      	bne.n	800297a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002978:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	6859      	ldr	r1, [r3, #4]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	4b1d      	ldr	r3, [pc, #116]	; (80029fc <HAL_I2C_Init+0x11c>)
 8002986:	430b      	orrs	r3, r1
 8002988:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68da      	ldr	r2, [r3, #12]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002998:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	691a      	ldr	r2, [r3, #16]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	69d9      	ldr	r1, [r3, #28]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a1a      	ldr	r2, [r3, #32]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	430a      	orrs	r2, r1
 80029c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f042 0201 	orr.w	r2, r2, #1
 80029d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2220      	movs	r2, #32
 80029de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	02008000 	.word	0x02008000

08002a00 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b088      	sub	sp, #32
 8002a04:	af02      	add	r7, sp, #8
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	4608      	mov	r0, r1
 8002a0a:	4611      	mov	r1, r2
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	4603      	mov	r3, r0
 8002a10:	817b      	strh	r3, [r7, #10]
 8002a12:	460b      	mov	r3, r1
 8002a14:	813b      	strh	r3, [r7, #8]
 8002a16:	4613      	mov	r3, r2
 8002a18:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b20      	cmp	r3, #32
 8002a24:	f040 80f9 	bne.w	8002c1a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a28:	6a3b      	ldr	r3, [r7, #32]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d002      	beq.n	8002a34 <HAL_I2C_Mem_Write+0x34>
 8002a2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d105      	bne.n	8002a40 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a3a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e0ed      	b.n	8002c1c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d101      	bne.n	8002a4e <HAL_I2C_Mem_Write+0x4e>
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	e0e6      	b.n	8002c1c <HAL_I2C_Mem_Write+0x21c>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2201      	movs	r2, #1
 8002a52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a56:	f7ff f811 	bl	8001a7c <HAL_GetTick>
 8002a5a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	9300      	str	r3, [sp, #0]
 8002a60:	2319      	movs	r3, #25
 8002a62:	2201      	movs	r2, #1
 8002a64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f000 fac3 	bl	8002ff4 <I2C_WaitOnFlagUntilTimeout>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e0d1      	b.n	8002c1c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2221      	movs	r2, #33	; 0x21
 8002a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2240      	movs	r2, #64	; 0x40
 8002a84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6a3a      	ldr	r2, [r7, #32]
 8002a92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002aa0:	88f8      	ldrh	r0, [r7, #6]
 8002aa2:	893a      	ldrh	r2, [r7, #8]
 8002aa4:	8979      	ldrh	r1, [r7, #10]
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	9301      	str	r3, [sp, #4]
 8002aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	4603      	mov	r3, r0
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f000 f9d3 	bl	8002e5c <I2C_RequestMemoryWrite>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d005      	beq.n	8002ac8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e0a9      	b.n	8002c1c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	2bff      	cmp	r3, #255	; 0xff
 8002ad0:	d90e      	bls.n	8002af0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	22ff      	movs	r2, #255	; 0xff
 8002ad6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002adc:	b2da      	uxtb	r2, r3
 8002ade:	8979      	ldrh	r1, [r7, #10]
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f000 fc3d 	bl	8003368 <I2C_TransferConfig>
 8002aee:	e00f      	b.n	8002b10 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002afe:	b2da      	uxtb	r2, r3
 8002b00:	8979      	ldrh	r1, [r7, #10]
 8002b02:	2300      	movs	r3, #0
 8002b04:	9300      	str	r3, [sp, #0]
 8002b06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f000 fc2c 	bl	8003368 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b10:	697a      	ldr	r2, [r7, #20]
 8002b12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f000 fabc 	bl	8003092 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e07b      	b.n	8002c1c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b28:	781a      	ldrb	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b34:	1c5a      	adds	r2, r3, #1
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	3b01      	subs	r3, #1
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d034      	beq.n	8002bc8 <HAL_I2C_Mem_Write+0x1c8>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d130      	bne.n	8002bc8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	9300      	str	r3, [sp, #0]
 8002b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	2180      	movs	r1, #128	; 0x80
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f000 fa3f 	bl	8002ff4 <I2C_WaitOnFlagUntilTimeout>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e04d      	b.n	8002c1c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	2bff      	cmp	r3, #255	; 0xff
 8002b88:	d90e      	bls.n	8002ba8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	22ff      	movs	r2, #255	; 0xff
 8002b8e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b94:	b2da      	uxtb	r2, r3
 8002b96:	8979      	ldrh	r1, [r7, #10]
 8002b98:	2300      	movs	r3, #0
 8002b9a:	9300      	str	r3, [sp, #0]
 8002b9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ba0:	68f8      	ldr	r0, [r7, #12]
 8002ba2:	f000 fbe1 	bl	8003368 <I2C_TransferConfig>
 8002ba6:	e00f      	b.n	8002bc8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb6:	b2da      	uxtb	r2, r3
 8002bb8:	8979      	ldrh	r1, [r7, #10]
 8002bba:	2300      	movs	r3, #0
 8002bbc:	9300      	str	r3, [sp, #0]
 8002bbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bc2:	68f8      	ldr	r0, [r7, #12]
 8002bc4:	f000 fbd0 	bl	8003368 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d19e      	bne.n	8002b10 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bd6:	68f8      	ldr	r0, [r7, #12]
 8002bd8:	f000 faa2 	bl	8003120 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e01a      	b.n	8002c1c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2220      	movs	r2, #32
 8002bec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	6859      	ldr	r1, [r3, #4]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	4b0a      	ldr	r3, [pc, #40]	; (8002c24 <HAL_I2C_Mem_Write+0x224>)
 8002bfa:	400b      	ands	r3, r1
 8002bfc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2220      	movs	r2, #32
 8002c02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c16:	2300      	movs	r3, #0
 8002c18:	e000      	b.n	8002c1c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002c1a:	2302      	movs	r3, #2
  }
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3718      	adds	r7, #24
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	fe00e800 	.word	0xfe00e800

08002c28 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b088      	sub	sp, #32
 8002c2c:	af02      	add	r7, sp, #8
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	4608      	mov	r0, r1
 8002c32:	4611      	mov	r1, r2
 8002c34:	461a      	mov	r2, r3
 8002c36:	4603      	mov	r3, r0
 8002c38:	817b      	strh	r3, [r7, #10]
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	813b      	strh	r3, [r7, #8]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b20      	cmp	r3, #32
 8002c4c:	f040 80fd 	bne.w	8002e4a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c50:	6a3b      	ldr	r3, [r7, #32]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d002      	beq.n	8002c5c <HAL_I2C_Mem_Read+0x34>
 8002c56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d105      	bne.n	8002c68 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c62:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e0f1      	b.n	8002e4c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d101      	bne.n	8002c76 <HAL_I2C_Mem_Read+0x4e>
 8002c72:	2302      	movs	r3, #2
 8002c74:	e0ea      	b.n	8002e4c <HAL_I2C_Mem_Read+0x224>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c7e:	f7fe fefd 	bl	8001a7c <HAL_GetTick>
 8002c82:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	9300      	str	r3, [sp, #0]
 8002c88:	2319      	movs	r3, #25
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f000 f9af 	bl	8002ff4 <I2C_WaitOnFlagUntilTimeout>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e0d5      	b.n	8002e4c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2222      	movs	r2, #34	; 0x22
 8002ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2240      	movs	r2, #64	; 0x40
 8002cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6a3a      	ldr	r2, [r7, #32]
 8002cba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002cc0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cc8:	88f8      	ldrh	r0, [r7, #6]
 8002cca:	893a      	ldrh	r2, [r7, #8]
 8002ccc:	8979      	ldrh	r1, [r7, #10]
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	9301      	str	r3, [sp, #4]
 8002cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd4:	9300      	str	r3, [sp, #0]
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f000 f913 	bl	8002f04 <I2C_RequestMemoryRead>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d005      	beq.n	8002cf0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e0ad      	b.n	8002e4c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	2bff      	cmp	r3, #255	; 0xff
 8002cf8:	d90e      	bls.n	8002d18 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	22ff      	movs	r2, #255	; 0xff
 8002cfe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d04:	b2da      	uxtb	r2, r3
 8002d06:	8979      	ldrh	r1, [r7, #10]
 8002d08:	4b52      	ldr	r3, [pc, #328]	; (8002e54 <HAL_I2C_Mem_Read+0x22c>)
 8002d0a:	9300      	str	r3, [sp, #0]
 8002d0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f000 fb29 	bl	8003368 <I2C_TransferConfig>
 8002d16:	e00f      	b.n	8002d38 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d26:	b2da      	uxtb	r2, r3
 8002d28:	8979      	ldrh	r1, [r7, #10]
 8002d2a:	4b4a      	ldr	r3, [pc, #296]	; (8002e54 <HAL_I2C_Mem_Read+0x22c>)
 8002d2c:	9300      	str	r3, [sp, #0]
 8002d2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f000 fb18 	bl	8003368 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	9300      	str	r3, [sp, #0]
 8002d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3e:	2200      	movs	r2, #0
 8002d40:	2104      	movs	r1, #4
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f000 f956 	bl	8002ff4 <I2C_WaitOnFlagUntilTimeout>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e07c      	b.n	8002e4c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5c:	b2d2      	uxtb	r2, r2
 8002d5e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d64:	1c5a      	adds	r2, r3, #1
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d034      	beq.n	8002df8 <HAL_I2C_Mem_Read+0x1d0>
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d130      	bne.n	8002df8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	9300      	str	r3, [sp, #0]
 8002d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	2180      	movs	r1, #128	; 0x80
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f000 f927 	bl	8002ff4 <I2C_WaitOnFlagUntilTimeout>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d001      	beq.n	8002db0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e04d      	b.n	8002e4c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	2bff      	cmp	r3, #255	; 0xff
 8002db8:	d90e      	bls.n	8002dd8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	22ff      	movs	r2, #255	; 0xff
 8002dbe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	8979      	ldrh	r1, [r7, #10]
 8002dc8:	2300      	movs	r3, #0
 8002dca:	9300      	str	r3, [sp, #0]
 8002dcc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f000 fac9 	bl	8003368 <I2C_TransferConfig>
 8002dd6:	e00f      	b.n	8002df8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de6:	b2da      	uxtb	r2, r3
 8002de8:	8979      	ldrh	r1, [r7, #10]
 8002dea:	2300      	movs	r3, #0
 8002dec:	9300      	str	r3, [sp, #0]
 8002dee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f000 fab8 	bl	8003368 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d19a      	bne.n	8002d38 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f000 f98a 	bl	8003120 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e01a      	b.n	8002e4c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	6859      	ldr	r1, [r3, #4]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	4b0b      	ldr	r3, [pc, #44]	; (8002e58 <HAL_I2C_Mem_Read+0x230>)
 8002e2a:	400b      	ands	r3, r1
 8002e2c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2220      	movs	r2, #32
 8002e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e46:	2300      	movs	r3, #0
 8002e48:	e000      	b.n	8002e4c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002e4a:	2302      	movs	r3, #2
  }
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3718      	adds	r7, #24
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	80002400 	.word	0x80002400
 8002e58:	fe00e800 	.word	0xfe00e800

08002e5c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b086      	sub	sp, #24
 8002e60:	af02      	add	r7, sp, #8
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	4608      	mov	r0, r1
 8002e66:	4611      	mov	r1, r2
 8002e68:	461a      	mov	r2, r3
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	817b      	strh	r3, [r7, #10]
 8002e6e:	460b      	mov	r3, r1
 8002e70:	813b      	strh	r3, [r7, #8]
 8002e72:	4613      	mov	r3, r2
 8002e74:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002e76:	88fb      	ldrh	r3, [r7, #6]
 8002e78:	b2da      	uxtb	r2, r3
 8002e7a:	8979      	ldrh	r1, [r7, #10]
 8002e7c:	4b20      	ldr	r3, [pc, #128]	; (8002f00 <I2C_RequestMemoryWrite+0xa4>)
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f000 fa6f 	bl	8003368 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e8a:	69fa      	ldr	r2, [r7, #28]
 8002e8c:	69b9      	ldr	r1, [r7, #24]
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f000 f8ff 	bl	8003092 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e02c      	b.n	8002ef8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e9e:	88fb      	ldrh	r3, [r7, #6]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d105      	bne.n	8002eb0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ea4:	893b      	ldrh	r3, [r7, #8]
 8002ea6:	b2da      	uxtb	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	629a      	str	r2, [r3, #40]	; 0x28
 8002eae:	e015      	b.n	8002edc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002eb0:	893b      	ldrh	r3, [r7, #8]
 8002eb2:	0a1b      	lsrs	r3, r3, #8
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	b2da      	uxtb	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ebe:	69fa      	ldr	r2, [r7, #28]
 8002ec0:	69b9      	ldr	r1, [r7, #24]
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f000 f8e5 	bl	8003092 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e012      	b.n	8002ef8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ed2:	893b      	ldrh	r3, [r7, #8]
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	2180      	movs	r1, #128	; 0x80
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f000 f884 	bl	8002ff4 <I2C_WaitOnFlagUntilTimeout>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e000      	b.n	8002ef8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	80002000 	.word	0x80002000

08002f04 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af02      	add	r7, sp, #8
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	4608      	mov	r0, r1
 8002f0e:	4611      	mov	r1, r2
 8002f10:	461a      	mov	r2, r3
 8002f12:	4603      	mov	r3, r0
 8002f14:	817b      	strh	r3, [r7, #10]
 8002f16:	460b      	mov	r3, r1
 8002f18:	813b      	strh	r3, [r7, #8]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002f1e:	88fb      	ldrh	r3, [r7, #6]
 8002f20:	b2da      	uxtb	r2, r3
 8002f22:	8979      	ldrh	r1, [r7, #10]
 8002f24:	4b20      	ldr	r3, [pc, #128]	; (8002fa8 <I2C_RequestMemoryRead+0xa4>)
 8002f26:	9300      	str	r3, [sp, #0]
 8002f28:	2300      	movs	r3, #0
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 fa1c 	bl	8003368 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f30:	69fa      	ldr	r2, [r7, #28]
 8002f32:	69b9      	ldr	r1, [r7, #24]
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f000 f8ac 	bl	8003092 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e02c      	b.n	8002f9e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f44:	88fb      	ldrh	r3, [r7, #6]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d105      	bne.n	8002f56 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f4a:	893b      	ldrh	r3, [r7, #8]
 8002f4c:	b2da      	uxtb	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	629a      	str	r2, [r3, #40]	; 0x28
 8002f54:	e015      	b.n	8002f82 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002f56:	893b      	ldrh	r3, [r7, #8]
 8002f58:	0a1b      	lsrs	r3, r3, #8
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	b2da      	uxtb	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f64:	69fa      	ldr	r2, [r7, #28]
 8002f66:	69b9      	ldr	r1, [r7, #24]
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f000 f892 	bl	8003092 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e012      	b.n	8002f9e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f78:	893b      	ldrh	r3, [r7, #8]
 8002f7a:	b2da      	uxtb	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	2140      	movs	r1, #64	; 0x40
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f000 f831 	bl	8002ff4 <I2C_WaitOnFlagUntilTimeout>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e000      	b.n	8002f9e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	80002000 	.word	0x80002000

08002fac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d103      	bne.n	8002fca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d007      	beq.n	8002fe8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	699a      	ldr	r2, [r3, #24]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f042 0201 	orr.w	r2, r2, #1
 8002fe6:	619a      	str	r2, [r3, #24]
  }
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	603b      	str	r3, [r7, #0]
 8003000:	4613      	mov	r3, r2
 8003002:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003004:	e031      	b.n	800306a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800300c:	d02d      	beq.n	800306a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800300e:	f7fe fd35 	bl	8001a7c <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	683a      	ldr	r2, [r7, #0]
 800301a:	429a      	cmp	r2, r3
 800301c:	d302      	bcc.n	8003024 <I2C_WaitOnFlagUntilTimeout+0x30>
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d122      	bne.n	800306a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	699a      	ldr	r2, [r3, #24]
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	4013      	ands	r3, r2
 800302e:	68ba      	ldr	r2, [r7, #8]
 8003030:	429a      	cmp	r2, r3
 8003032:	bf0c      	ite	eq
 8003034:	2301      	moveq	r3, #1
 8003036:	2300      	movne	r3, #0
 8003038:	b2db      	uxtb	r3, r3
 800303a:	461a      	mov	r2, r3
 800303c:	79fb      	ldrb	r3, [r7, #7]
 800303e:	429a      	cmp	r2, r3
 8003040:	d113      	bne.n	800306a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003046:	f043 0220 	orr.w	r2, r3, #32
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2220      	movs	r2, #32
 8003052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e00f      	b.n	800308a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	699a      	ldr	r2, [r3, #24]
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	4013      	ands	r3, r2
 8003074:	68ba      	ldr	r2, [r7, #8]
 8003076:	429a      	cmp	r2, r3
 8003078:	bf0c      	ite	eq
 800307a:	2301      	moveq	r3, #1
 800307c:	2300      	movne	r3, #0
 800307e:	b2db      	uxtb	r3, r3
 8003080:	461a      	mov	r2, r3
 8003082:	79fb      	ldrb	r3, [r7, #7]
 8003084:	429a      	cmp	r2, r3
 8003086:	d0be      	beq.n	8003006 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3710      	adds	r7, #16
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b084      	sub	sp, #16
 8003096:	af00      	add	r7, sp, #0
 8003098:	60f8      	str	r0, [r7, #12]
 800309a:	60b9      	str	r1, [r7, #8]
 800309c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800309e:	e033      	b.n	8003108 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	68b9      	ldr	r1, [r7, #8]
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f000 f87f 	bl	80031a8 <I2C_IsErrorOccurred>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e031      	b.n	8003118 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ba:	d025      	beq.n	8003108 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030bc:	f7fe fcde 	bl	8001a7c <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	68ba      	ldr	r2, [r7, #8]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d302      	bcc.n	80030d2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d11a      	bne.n	8003108 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d013      	beq.n	8003108 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e4:	f043 0220 	orr.w	r2, r3, #32
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2220      	movs	r2, #32
 80030f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e007      	b.n	8003118 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b02      	cmp	r3, #2
 8003114:	d1c4      	bne.n	80030a0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800312c:	e02f      	b.n	800318e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	68b9      	ldr	r1, [r7, #8]
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f000 f838 	bl	80031a8 <I2C_IsErrorOccurred>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e02d      	b.n	800319e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003142:	f7fe fc9b 	bl	8001a7c <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	68ba      	ldr	r2, [r7, #8]
 800314e:	429a      	cmp	r2, r3
 8003150:	d302      	bcc.n	8003158 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d11a      	bne.n	800318e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	f003 0320 	and.w	r3, r3, #32
 8003162:	2b20      	cmp	r3, #32
 8003164:	d013      	beq.n	800318e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316a:	f043 0220 	orr.w	r2, r3, #32
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2220      	movs	r2, #32
 8003176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e007      	b.n	800319e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	f003 0320 	and.w	r3, r3, #32
 8003198:	2b20      	cmp	r3, #32
 800319a:	d1c8      	bne.n	800312e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
	...

080031a8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b08a      	sub	sp, #40	; 0x28
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031b4:	2300      	movs	r3, #0
 80031b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80031c2:	2300      	movs	r3, #0
 80031c4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	f003 0310 	and.w	r3, r3, #16
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d068      	beq.n	80032a6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2210      	movs	r2, #16
 80031da:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80031dc:	e049      	b.n	8003272 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e4:	d045      	beq.n	8003272 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80031e6:	f7fe fc49 	bl	8001a7c <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	68ba      	ldr	r2, [r7, #8]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d302      	bcc.n	80031fc <I2C_IsErrorOccurred+0x54>
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d13a      	bne.n	8003272 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003206:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800320e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800321a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800321e:	d121      	bne.n	8003264 <I2C_IsErrorOccurred+0xbc>
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003226:	d01d      	beq.n	8003264 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003228:	7cfb      	ldrb	r3, [r7, #19]
 800322a:	2b20      	cmp	r3, #32
 800322c:	d01a      	beq.n	8003264 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800323c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800323e:	f7fe fc1d 	bl	8001a7c <HAL_GetTick>
 8003242:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003244:	e00e      	b.n	8003264 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003246:	f7fe fc19 	bl	8001a7c <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b19      	cmp	r3, #25
 8003252:	d907      	bls.n	8003264 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003254:	6a3b      	ldr	r3, [r7, #32]
 8003256:	f043 0320 	orr.w	r3, r3, #32
 800325a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003262:	e006      	b.n	8003272 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	f003 0320 	and.w	r3, r3, #32
 800326e:	2b20      	cmp	r3, #32
 8003270:	d1e9      	bne.n	8003246 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	f003 0320 	and.w	r3, r3, #32
 800327c:	2b20      	cmp	r3, #32
 800327e:	d003      	beq.n	8003288 <I2C_IsErrorOccurred+0xe0>
 8003280:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003284:	2b00      	cmp	r3, #0
 8003286:	d0aa      	beq.n	80031de <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003288:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800328c:	2b00      	cmp	r3, #0
 800328e:	d103      	bne.n	8003298 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2220      	movs	r2, #32
 8003296:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003298:	6a3b      	ldr	r3, [r7, #32]
 800329a:	f043 0304 	orr.w	r3, r3, #4
 800329e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00b      	beq.n	80032d0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80032b8:	6a3b      	ldr	r3, [r7, #32]
 80032ba:	f043 0301 	orr.w	r3, r3, #1
 80032be:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00b      	beq.n	80032f2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80032da:	6a3b      	ldr	r3, [r7, #32]
 80032dc:	f043 0308 	orr.w	r3, r3, #8
 80032e0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032ea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00b      	beq.n	8003314 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80032fc:	6a3b      	ldr	r3, [r7, #32]
 80032fe:	f043 0302 	orr.w	r3, r3, #2
 8003302:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f44f 7200 	mov.w	r2, #512	; 0x200
 800330c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003314:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003318:	2b00      	cmp	r3, #0
 800331a:	d01c      	beq.n	8003356 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	f7ff fe45 	bl	8002fac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	6859      	ldr	r1, [r3, #4]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	4b0d      	ldr	r3, [pc, #52]	; (8003364 <I2C_IsErrorOccurred+0x1bc>)
 800332e:	400b      	ands	r3, r1
 8003330:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003336:	6a3b      	ldr	r3, [r7, #32]
 8003338:	431a      	orrs	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2220      	movs	r2, #32
 8003342:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003356:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800335a:	4618      	mov	r0, r3
 800335c:	3728      	adds	r7, #40	; 0x28
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	fe00e800 	.word	0xfe00e800

08003368 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003368:	b480      	push	{r7}
 800336a:	b087      	sub	sp, #28
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	607b      	str	r3, [r7, #4]
 8003372:	460b      	mov	r3, r1
 8003374:	817b      	strh	r3, [r7, #10]
 8003376:	4613      	mov	r3, r2
 8003378:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800337a:	897b      	ldrh	r3, [r7, #10]
 800337c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003380:	7a7b      	ldrb	r3, [r7, #9]
 8003382:	041b      	lsls	r3, r3, #16
 8003384:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003388:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800338e:	6a3b      	ldr	r3, [r7, #32]
 8003390:	4313      	orrs	r3, r2
 8003392:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003396:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	685a      	ldr	r2, [r3, #4]
 800339e:	6a3b      	ldr	r3, [r7, #32]
 80033a0:	0d5b      	lsrs	r3, r3, #21
 80033a2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80033a6:	4b08      	ldr	r3, [pc, #32]	; (80033c8 <I2C_TransferConfig+0x60>)
 80033a8:	430b      	orrs	r3, r1
 80033aa:	43db      	mvns	r3, r3
 80033ac:	ea02 0103 	and.w	r1, r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80033ba:	bf00      	nop
 80033bc:	371c      	adds	r7, #28
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	03ff63ff 	.word	0x03ff63ff

080033cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b20      	cmp	r3, #32
 80033e0:	d138      	bne.n	8003454 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d101      	bne.n	80033f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80033ec:	2302      	movs	r3, #2
 80033ee:	e032      	b.n	8003456 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2224      	movs	r2, #36	; 0x24
 80033fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 0201 	bic.w	r2, r2, #1
 800340e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800341e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6819      	ldr	r1, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	430a      	orrs	r2, r1
 800342e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f042 0201 	orr.w	r2, r2, #1
 800343e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2220      	movs	r2, #32
 8003444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003450:	2300      	movs	r3, #0
 8003452:	e000      	b.n	8003456 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003454:	2302      	movs	r3, #2
  }
}
 8003456:	4618      	mov	r0, r3
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr

08003462 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003462:	b480      	push	{r7}
 8003464:	b085      	sub	sp, #20
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
 800346a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2b20      	cmp	r3, #32
 8003476:	d139      	bne.n	80034ec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800347e:	2b01      	cmp	r3, #1
 8003480:	d101      	bne.n	8003486 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003482:	2302      	movs	r3, #2
 8003484:	e033      	b.n	80034ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2224      	movs	r2, #36	; 0x24
 8003492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 0201 	bic.w	r2, r2, #1
 80034a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80034b4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	021b      	lsls	r3, r3, #8
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	4313      	orrs	r3, r2
 80034be:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f042 0201 	orr.w	r2, r2, #1
 80034d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2220      	movs	r2, #32
 80034dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034e8:	2300      	movs	r3, #0
 80034ea:	e000      	b.n	80034ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80034ec:	2302      	movs	r3, #2
  }
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3714      	adds	r7, #20
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr

080034fa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80034fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034fc:	b08f      	sub	sp, #60	; 0x3c
 80034fe:	af0a      	add	r7, sp, #40	; 0x28
 8003500:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d101      	bne.n	800350c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e116      	b.n	800373a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d106      	bne.n	800352c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7fe f850 	bl	80015cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2203      	movs	r2, #3
 8003530:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353c:	2b00      	cmp	r3, #0
 800353e:	d102      	bne.n	8003546 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4618      	mov	r0, r3
 800354c:	f004 fc88 	bl	8007e60 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	603b      	str	r3, [r7, #0]
 8003556:	687e      	ldr	r6, [r7, #4]
 8003558:	466d      	mov	r5, sp
 800355a:	f106 0410 	add.w	r4, r6, #16
 800355e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003560:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003562:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003564:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003566:	e894 0003 	ldmia.w	r4, {r0, r1}
 800356a:	e885 0003 	stmia.w	r5, {r0, r1}
 800356e:	1d33      	adds	r3, r6, #4
 8003570:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003572:	6838      	ldr	r0, [r7, #0]
 8003574:	f004 fc06 	bl	8007d84 <USB_CoreInit>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d005      	beq.n	800358a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2202      	movs	r2, #2
 8003582:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e0d7      	b.n	800373a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2100      	movs	r1, #0
 8003590:	4618      	mov	r0, r3
 8003592:	f004 fc76 	bl	8007e82 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003596:	2300      	movs	r3, #0
 8003598:	73fb      	strb	r3, [r7, #15]
 800359a:	e04a      	b.n	8003632 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800359c:	7bfa      	ldrb	r2, [r7, #15]
 800359e:	6879      	ldr	r1, [r7, #4]
 80035a0:	4613      	mov	r3, r2
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	4413      	add	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	440b      	add	r3, r1
 80035aa:	333d      	adds	r3, #61	; 0x3d
 80035ac:	2201      	movs	r2, #1
 80035ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80035b0:	7bfa      	ldrb	r2, [r7, #15]
 80035b2:	6879      	ldr	r1, [r7, #4]
 80035b4:	4613      	mov	r3, r2
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	4413      	add	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	440b      	add	r3, r1
 80035be:	333c      	adds	r3, #60	; 0x3c
 80035c0:	7bfa      	ldrb	r2, [r7, #15]
 80035c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80035c4:	7bfa      	ldrb	r2, [r7, #15]
 80035c6:	7bfb      	ldrb	r3, [r7, #15]
 80035c8:	b298      	uxth	r0, r3
 80035ca:	6879      	ldr	r1, [r7, #4]
 80035cc:	4613      	mov	r3, r2
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	4413      	add	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	440b      	add	r3, r1
 80035d6:	3356      	adds	r3, #86	; 0x56
 80035d8:	4602      	mov	r2, r0
 80035da:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80035dc:	7bfa      	ldrb	r2, [r7, #15]
 80035de:	6879      	ldr	r1, [r7, #4]
 80035e0:	4613      	mov	r3, r2
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	4413      	add	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	440b      	add	r3, r1
 80035ea:	3340      	adds	r3, #64	; 0x40
 80035ec:	2200      	movs	r2, #0
 80035ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80035f0:	7bfa      	ldrb	r2, [r7, #15]
 80035f2:	6879      	ldr	r1, [r7, #4]
 80035f4:	4613      	mov	r3, r2
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	4413      	add	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	440b      	add	r3, r1
 80035fe:	3344      	adds	r3, #68	; 0x44
 8003600:	2200      	movs	r2, #0
 8003602:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003604:	7bfa      	ldrb	r2, [r7, #15]
 8003606:	6879      	ldr	r1, [r7, #4]
 8003608:	4613      	mov	r3, r2
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	4413      	add	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	440b      	add	r3, r1
 8003612:	3348      	adds	r3, #72	; 0x48
 8003614:	2200      	movs	r2, #0
 8003616:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003618:	7bfa      	ldrb	r2, [r7, #15]
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	4613      	mov	r3, r2
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	4413      	add	r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	334c      	adds	r3, #76	; 0x4c
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800362c:	7bfb      	ldrb	r3, [r7, #15]
 800362e:	3301      	adds	r3, #1
 8003630:	73fb      	strb	r3, [r7, #15]
 8003632:	7bfa      	ldrb	r2, [r7, #15]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	429a      	cmp	r2, r3
 800363a:	d3af      	bcc.n	800359c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800363c:	2300      	movs	r3, #0
 800363e:	73fb      	strb	r3, [r7, #15]
 8003640:	e044      	b.n	80036cc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003642:	7bfa      	ldrb	r2, [r7, #15]
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	4613      	mov	r3, r2
 8003648:	00db      	lsls	r3, r3, #3
 800364a:	4413      	add	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	440b      	add	r3, r1
 8003650:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003654:	2200      	movs	r2, #0
 8003656:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003658:	7bfa      	ldrb	r2, [r7, #15]
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	4613      	mov	r3, r2
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	4413      	add	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	440b      	add	r3, r1
 8003666:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800366a:	7bfa      	ldrb	r2, [r7, #15]
 800366c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800366e:	7bfa      	ldrb	r2, [r7, #15]
 8003670:	6879      	ldr	r1, [r7, #4]
 8003672:	4613      	mov	r3, r2
 8003674:	00db      	lsls	r3, r3, #3
 8003676:	4413      	add	r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	440b      	add	r3, r1
 800367c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003680:	2200      	movs	r2, #0
 8003682:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003684:	7bfa      	ldrb	r2, [r7, #15]
 8003686:	6879      	ldr	r1, [r7, #4]
 8003688:	4613      	mov	r3, r2
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	4413      	add	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	440b      	add	r3, r1
 8003692:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8003696:	2200      	movs	r2, #0
 8003698:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800369a:	7bfa      	ldrb	r2, [r7, #15]
 800369c:	6879      	ldr	r1, [r7, #4]
 800369e:	4613      	mov	r3, r2
 80036a0:	00db      	lsls	r3, r3, #3
 80036a2:	4413      	add	r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	440b      	add	r3, r1
 80036a8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80036ac:	2200      	movs	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80036b0:	7bfa      	ldrb	r2, [r7, #15]
 80036b2:	6879      	ldr	r1, [r7, #4]
 80036b4:	4613      	mov	r3, r2
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	4413      	add	r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	440b      	add	r3, r1
 80036be:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80036c2:	2200      	movs	r2, #0
 80036c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036c6:	7bfb      	ldrb	r3, [r7, #15]
 80036c8:	3301      	adds	r3, #1
 80036ca:	73fb      	strb	r3, [r7, #15]
 80036cc:	7bfa      	ldrb	r2, [r7, #15]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d3b5      	bcc.n	8003642 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	603b      	str	r3, [r7, #0]
 80036dc:	687e      	ldr	r6, [r7, #4]
 80036de:	466d      	mov	r5, sp
 80036e0:	f106 0410 	add.w	r4, r6, #16
 80036e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80036f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80036f4:	1d33      	adds	r3, r6, #4
 80036f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036f8:	6838      	ldr	r0, [r7, #0]
 80036fa:	f004 fc0f 	bl	8007f1c <USB_DevInit>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d005      	beq.n	8003710 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2202      	movs	r2, #2
 8003708:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e014      	b.n	800373a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003724:	2b01      	cmp	r3, #1
 8003726:	d102      	bne.n	800372e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 f80b 	bl	8003744 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f004 fdcd 	bl	80082d2 <USB_DevDisconnect>

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3714      	adds	r7, #20
 800373e:	46bd      	mov	sp, r7
 8003740:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003744 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003772:	4b05      	ldr	r3, [pc, #20]	; (8003788 <HAL_PCDEx_ActivateLPM+0x44>)
 8003774:	4313      	orrs	r3, r2
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3714      	adds	r7, #20
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr
 8003788:	10000003 	.word	0x10000003

0800378c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003794:	4b29      	ldr	r3, [pc, #164]	; (800383c <HAL_PWREx_ConfigSupply+0xb0>)
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	f003 0307 	and.w	r3, r3, #7
 800379c:	2b06      	cmp	r3, #6
 800379e:	d00a      	beq.n	80037b6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80037a0:	4b26      	ldr	r3, [pc, #152]	; (800383c <HAL_PWREx_ConfigSupply+0xb0>)
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d001      	beq.n	80037b2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e040      	b.n	8003834 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80037b2:	2300      	movs	r3, #0
 80037b4:	e03e      	b.n	8003834 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80037b6:	4b21      	ldr	r3, [pc, #132]	; (800383c <HAL_PWREx_ConfigSupply+0xb0>)
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80037be:	491f      	ldr	r1, [pc, #124]	; (800383c <HAL_PWREx_ConfigSupply+0xb0>)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80037c6:	f7fe f959 	bl	8001a7c <HAL_GetTick>
 80037ca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80037cc:	e009      	b.n	80037e2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80037ce:	f7fe f955 	bl	8001a7c <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037dc:	d901      	bls.n	80037e2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e028      	b.n	8003834 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80037e2:	4b16      	ldr	r3, [pc, #88]	; (800383c <HAL_PWREx_ConfigSupply+0xb0>)
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037ee:	d1ee      	bne.n	80037ce <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b1e      	cmp	r3, #30
 80037f4:	d008      	beq.n	8003808 <HAL_PWREx_ConfigSupply+0x7c>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2b2e      	cmp	r3, #46	; 0x2e
 80037fa:	d005      	beq.n	8003808 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b1d      	cmp	r3, #29
 8003800:	d002      	beq.n	8003808 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2b2d      	cmp	r3, #45	; 0x2d
 8003806:	d114      	bne.n	8003832 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003808:	f7fe f938 	bl	8001a7c <HAL_GetTick>
 800380c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800380e:	e009      	b.n	8003824 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003810:	f7fe f934 	bl	8001a7c <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800381e:	d901      	bls.n	8003824 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e007      	b.n	8003834 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003824:	4b05      	ldr	r3, [pc, #20]	; (800383c <HAL_PWREx_ConfigSupply+0xb0>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800382c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003830:	d1ee      	bne.n	8003810 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	58024800 	.word	0x58024800

08003840 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003844:	4b05      	ldr	r3, [pc, #20]	; (800385c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	4a04      	ldr	r2, [pc, #16]	; (800385c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800384a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800384e:	60d3      	str	r3, [r2, #12]
}
 8003850:	bf00      	nop
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	58024800 	.word	0x58024800

08003860 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b08c      	sub	sp, #48	; 0x30
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d102      	bne.n	8003874 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	f000 bc48 	b.w	8004104 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0301 	and.w	r3, r3, #1
 800387c:	2b00      	cmp	r3, #0
 800387e:	f000 8088 	beq.w	8003992 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003882:	4b99      	ldr	r3, [pc, #612]	; (8003ae8 <HAL_RCC_OscConfig+0x288>)
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800388a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800388c:	4b96      	ldr	r3, [pc, #600]	; (8003ae8 <HAL_RCC_OscConfig+0x288>)
 800388e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003890:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003894:	2b10      	cmp	r3, #16
 8003896:	d007      	beq.n	80038a8 <HAL_RCC_OscConfig+0x48>
 8003898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800389a:	2b18      	cmp	r3, #24
 800389c:	d111      	bne.n	80038c2 <HAL_RCC_OscConfig+0x62>
 800389e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a0:	f003 0303 	and.w	r3, r3, #3
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d10c      	bne.n	80038c2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038a8:	4b8f      	ldr	r3, [pc, #572]	; (8003ae8 <HAL_RCC_OscConfig+0x288>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d06d      	beq.n	8003990 <HAL_RCC_OscConfig+0x130>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d169      	bne.n	8003990 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	f000 bc21 	b.w	8004104 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038ca:	d106      	bne.n	80038da <HAL_RCC_OscConfig+0x7a>
 80038cc:	4b86      	ldr	r3, [pc, #536]	; (8003ae8 <HAL_RCC_OscConfig+0x288>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a85      	ldr	r2, [pc, #532]	; (8003ae8 <HAL_RCC_OscConfig+0x288>)
 80038d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038d6:	6013      	str	r3, [r2, #0]
 80038d8:	e02e      	b.n	8003938 <HAL_RCC_OscConfig+0xd8>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d10c      	bne.n	80038fc <HAL_RCC_OscConfig+0x9c>
 80038e2:	4b81      	ldr	r3, [pc, #516]	; (8003ae8 <HAL_RCC_OscConfig+0x288>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a80      	ldr	r2, [pc, #512]	; (8003ae8 <HAL_RCC_OscConfig+0x288>)
 80038e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038ec:	6013      	str	r3, [r2, #0]
 80038ee:	4b7e      	ldr	r3, [pc, #504]	; (8003ae8 <HAL_RCC_OscConfig+0x288>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a7d      	ldr	r2, [pc, #500]	; (8003ae8 <HAL_RCC_OscConfig+0x288>)
 80038f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038f8:	6013      	str	r3, [r2, #0]
 80038fa:	e01d      	b.n	8003938 <HAL_RCC_OscConfig+0xd8>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003904:	d10c      	bne.n	8003920 <HAL_RCC_OscConfig+0xc0>
 8003906:	4b78      	ldr	r3, [pc, #480]	; (8003ae8 <HAL_RCC_OscConfig+0x288>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a77      	ldr	r2, [pc, #476]	; (8003ae8 <HAL_RCC_OscConfig+0x288>)
 800390c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003910:	6013      	str	r3, [r2, #0]
 8003912:	4b75      	ldr	r3, [pc, #468]	; (8003ae8 <HAL_RCC_OscConfig+0x288>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a74      	ldr	r2, [pc, #464]	; (8003ae8 <HAL_RCC_OscConfig+0x288>)
 8003918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800391c:	6013      	str	r3, [r2, #0]
 800391e:	e00b      	b.n	8003938 <HAL_RCC_OscConfig+0xd8>
 8003920:	4b71      	ldr	r3, [pc, #452]	; (8003ae8 <HAL_RCC_OscConfig+0x288>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a70      	ldr	r2, [pc, #448]	; (8003ae8 <HAL_RCC_OscConfig+0x288>)
 8003926:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800392a:	6013      	str	r3, [r2, #0]
 800392c:	4b6e      	ldr	r3, [pc, #440]	; (8003ae8 <HAL_RCC_OscConfig+0x288>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a6d      	ldr	r2, [pc, #436]	; (8003ae8 <HAL_RCC_OscConfig+0x288>)
 8003932:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003936:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d013      	beq.n	8003968 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003940:	f7fe f89c 	bl	8001a7c <HAL_GetTick>
 8003944:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003948:	f7fe f898 	bl	8001a7c <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b64      	cmp	r3, #100	; 0x64
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e3d4      	b.n	8004104 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800395a:	4b63      	ldr	r3, [pc, #396]	; (8003ae8 <HAL_RCC_OscConfig+0x288>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d0f0      	beq.n	8003948 <HAL_RCC_OscConfig+0xe8>
 8003966:	e014      	b.n	8003992 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003968:	f7fe f888 	bl	8001a7c <HAL_GetTick>
 800396c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800396e:	e008      	b.n	8003982 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003970:	f7fe f884 	bl	8001a7c <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b64      	cmp	r3, #100	; 0x64
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e3c0      	b.n	8004104 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003982:	4b59      	ldr	r3, [pc, #356]	; (8003ae8 <HAL_RCC_OscConfig+0x288>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1f0      	bne.n	8003970 <HAL_RCC_OscConfig+0x110>
 800398e:	e000      	b.n	8003992 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003990:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	f000 80ca 	beq.w	8003b34 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039a0:	4b51      	ldr	r3, [pc, #324]	; (8003ae8 <HAL_RCC_OscConfig+0x288>)
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039a8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80039aa:	4b4f      	ldr	r3, [pc, #316]	; (8003ae8 <HAL_RCC_OscConfig+0x288>)
 80039ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ae:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80039b0:	6a3b      	ldr	r3, [r7, #32]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d007      	beq.n	80039c6 <HAL_RCC_OscConfig+0x166>
 80039b6:	6a3b      	ldr	r3, [r7, #32]
 80039b8:	2b18      	cmp	r3, #24
 80039ba:	d156      	bne.n	8003a6a <HAL_RCC_OscConfig+0x20a>
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	f003 0303 	and.w	r3, r3, #3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d151      	bne.n	8003a6a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039c6:	4b48      	ldr	r3, [pc, #288]	; (8003ae8 <HAL_RCC_OscConfig+0x288>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0304 	and.w	r3, r3, #4
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d005      	beq.n	80039de <HAL_RCC_OscConfig+0x17e>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e392      	b.n	8004104 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80039de:	4b42      	ldr	r3, [pc, #264]	; (8003ae8 <HAL_RCC_OscConfig+0x288>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f023 0219 	bic.w	r2, r3, #25
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	493f      	ldr	r1, [pc, #252]	; (8003ae8 <HAL_RCC_OscConfig+0x288>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f0:	f7fe f844 	bl	8001a7c <HAL_GetTick>
 80039f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039f6:	e008      	b.n	8003a0a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039f8:	f7fe f840 	bl	8001a7c <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e37c      	b.n	8004104 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a0a:	4b37      	ldr	r3, [pc, #220]	; (8003ae8 <HAL_RCC_OscConfig+0x288>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0304 	and.w	r3, r3, #4
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d0f0      	beq.n	80039f8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a16:	f7fe f861 	bl	8001adc <HAL_GetREVID>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d817      	bhi.n	8003a54 <HAL_RCC_OscConfig+0x1f4>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	2b40      	cmp	r3, #64	; 0x40
 8003a2a:	d108      	bne.n	8003a3e <HAL_RCC_OscConfig+0x1de>
 8003a2c:	4b2e      	ldr	r3, [pc, #184]	; (8003ae8 <HAL_RCC_OscConfig+0x288>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003a34:	4a2c      	ldr	r2, [pc, #176]	; (8003ae8 <HAL_RCC_OscConfig+0x288>)
 8003a36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a3a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a3c:	e07a      	b.n	8003b34 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a3e:	4b2a      	ldr	r3, [pc, #168]	; (8003ae8 <HAL_RCC_OscConfig+0x288>)
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	031b      	lsls	r3, r3, #12
 8003a4c:	4926      	ldr	r1, [pc, #152]	; (8003ae8 <HAL_RCC_OscConfig+0x288>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a52:	e06f      	b.n	8003b34 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a54:	4b24      	ldr	r3, [pc, #144]	; (8003ae8 <HAL_RCC_OscConfig+0x288>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	691b      	ldr	r3, [r3, #16]
 8003a60:	061b      	lsls	r3, r3, #24
 8003a62:	4921      	ldr	r1, [pc, #132]	; (8003ae8 <HAL_RCC_OscConfig+0x288>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a68:	e064      	b.n	8003b34 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d047      	beq.n	8003b02 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003a72:	4b1d      	ldr	r3, [pc, #116]	; (8003ae8 <HAL_RCC_OscConfig+0x288>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f023 0219 	bic.w	r2, r3, #25
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	491a      	ldr	r1, [pc, #104]	; (8003ae8 <HAL_RCC_OscConfig+0x288>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a84:	f7fd fffa 	bl	8001a7c <HAL_GetTick>
 8003a88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a8c:	f7fd fff6 	bl	8001a7c <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e332      	b.n	8004104 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a9e:	4b12      	ldr	r3, [pc, #72]	; (8003ae8 <HAL_RCC_OscConfig+0x288>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0304 	and.w	r3, r3, #4
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d0f0      	beq.n	8003a8c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aaa:	f7fe f817 	bl	8001adc <HAL_GetREVID>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	f241 0203 	movw	r2, #4099	; 0x1003
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d819      	bhi.n	8003aec <HAL_RCC_OscConfig+0x28c>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	2b40      	cmp	r3, #64	; 0x40
 8003abe:	d108      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x272>
 8003ac0:	4b09      	ldr	r3, [pc, #36]	; (8003ae8 <HAL_RCC_OscConfig+0x288>)
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003ac8:	4a07      	ldr	r2, [pc, #28]	; (8003ae8 <HAL_RCC_OscConfig+0x288>)
 8003aca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ace:	6053      	str	r3, [r2, #4]
 8003ad0:	e030      	b.n	8003b34 <HAL_RCC_OscConfig+0x2d4>
 8003ad2:	4b05      	ldr	r3, [pc, #20]	; (8003ae8 <HAL_RCC_OscConfig+0x288>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	031b      	lsls	r3, r3, #12
 8003ae0:	4901      	ldr	r1, [pc, #4]	; (8003ae8 <HAL_RCC_OscConfig+0x288>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	604b      	str	r3, [r1, #4]
 8003ae6:	e025      	b.n	8003b34 <HAL_RCC_OscConfig+0x2d4>
 8003ae8:	58024400 	.word	0x58024400
 8003aec:	4b9a      	ldr	r3, [pc, #616]	; (8003d58 <HAL_RCC_OscConfig+0x4f8>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	061b      	lsls	r3, r3, #24
 8003afa:	4997      	ldr	r1, [pc, #604]	; (8003d58 <HAL_RCC_OscConfig+0x4f8>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	604b      	str	r3, [r1, #4]
 8003b00:	e018      	b.n	8003b34 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b02:	4b95      	ldr	r3, [pc, #596]	; (8003d58 <HAL_RCC_OscConfig+0x4f8>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a94      	ldr	r2, [pc, #592]	; (8003d58 <HAL_RCC_OscConfig+0x4f8>)
 8003b08:	f023 0301 	bic.w	r3, r3, #1
 8003b0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0e:	f7fd ffb5 	bl	8001a7c <HAL_GetTick>
 8003b12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b14:	e008      	b.n	8003b28 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b16:	f7fd ffb1 	bl	8001a7c <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d901      	bls.n	8003b28 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e2ed      	b.n	8004104 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b28:	4b8b      	ldr	r3, [pc, #556]	; (8003d58 <HAL_RCC_OscConfig+0x4f8>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0304 	and.w	r3, r3, #4
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d1f0      	bne.n	8003b16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0310 	and.w	r3, r3, #16
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f000 80a9 	beq.w	8003c94 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b42:	4b85      	ldr	r3, [pc, #532]	; (8003d58 <HAL_RCC_OscConfig+0x4f8>)
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b4a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b4c:	4b82      	ldr	r3, [pc, #520]	; (8003d58 <HAL_RCC_OscConfig+0x4f8>)
 8003b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b50:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	2b08      	cmp	r3, #8
 8003b56:	d007      	beq.n	8003b68 <HAL_RCC_OscConfig+0x308>
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	2b18      	cmp	r3, #24
 8003b5c:	d13a      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x374>
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	f003 0303 	and.w	r3, r3, #3
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d135      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b68:	4b7b      	ldr	r3, [pc, #492]	; (8003d58 <HAL_RCC_OscConfig+0x4f8>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d005      	beq.n	8003b80 <HAL_RCC_OscConfig+0x320>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	69db      	ldr	r3, [r3, #28]
 8003b78:	2b80      	cmp	r3, #128	; 0x80
 8003b7a:	d001      	beq.n	8003b80 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e2c1      	b.n	8004104 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b80:	f7fd ffac 	bl	8001adc <HAL_GetREVID>
 8003b84:	4603      	mov	r3, r0
 8003b86:	f241 0203 	movw	r2, #4099	; 0x1003
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d817      	bhi.n	8003bbe <HAL_RCC_OscConfig+0x35e>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	2b20      	cmp	r3, #32
 8003b94:	d108      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x348>
 8003b96:	4b70      	ldr	r3, [pc, #448]	; (8003d58 <HAL_RCC_OscConfig+0x4f8>)
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003b9e:	4a6e      	ldr	r2, [pc, #440]	; (8003d58 <HAL_RCC_OscConfig+0x4f8>)
 8003ba0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ba4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ba6:	e075      	b.n	8003c94 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ba8:	4b6b      	ldr	r3, [pc, #428]	; (8003d58 <HAL_RCC_OscConfig+0x4f8>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	069b      	lsls	r3, r3, #26
 8003bb6:	4968      	ldr	r1, [pc, #416]	; (8003d58 <HAL_RCC_OscConfig+0x4f8>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003bbc:	e06a      	b.n	8003c94 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003bbe:	4b66      	ldr	r3, [pc, #408]	; (8003d58 <HAL_RCC_OscConfig+0x4f8>)
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	061b      	lsls	r3, r3, #24
 8003bcc:	4962      	ldr	r1, [pc, #392]	; (8003d58 <HAL_RCC_OscConfig+0x4f8>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003bd2:	e05f      	b.n	8003c94 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	69db      	ldr	r3, [r3, #28]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d042      	beq.n	8003c62 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003bdc:	4b5e      	ldr	r3, [pc, #376]	; (8003d58 <HAL_RCC_OscConfig+0x4f8>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a5d      	ldr	r2, [pc, #372]	; (8003d58 <HAL_RCC_OscConfig+0x4f8>)
 8003be2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003be6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be8:	f7fd ff48 	bl	8001a7c <HAL_GetTick>
 8003bec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003bee:	e008      	b.n	8003c02 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003bf0:	f7fd ff44 	bl	8001a7c <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e280      	b.n	8004104 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c02:	4b55      	ldr	r3, [pc, #340]	; (8003d58 <HAL_RCC_OscConfig+0x4f8>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d0f0      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c0e:	f7fd ff65 	bl	8001adc <HAL_GetREVID>
 8003c12:	4603      	mov	r3, r0
 8003c14:	f241 0203 	movw	r2, #4099	; 0x1003
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d817      	bhi.n	8003c4c <HAL_RCC_OscConfig+0x3ec>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	2b20      	cmp	r3, #32
 8003c22:	d108      	bne.n	8003c36 <HAL_RCC_OscConfig+0x3d6>
 8003c24:	4b4c      	ldr	r3, [pc, #304]	; (8003d58 <HAL_RCC_OscConfig+0x4f8>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003c2c:	4a4a      	ldr	r2, [pc, #296]	; (8003d58 <HAL_RCC_OscConfig+0x4f8>)
 8003c2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c32:	6053      	str	r3, [r2, #4]
 8003c34:	e02e      	b.n	8003c94 <HAL_RCC_OscConfig+0x434>
 8003c36:	4b48      	ldr	r3, [pc, #288]	; (8003d58 <HAL_RCC_OscConfig+0x4f8>)
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	069b      	lsls	r3, r3, #26
 8003c44:	4944      	ldr	r1, [pc, #272]	; (8003d58 <HAL_RCC_OscConfig+0x4f8>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	604b      	str	r3, [r1, #4]
 8003c4a:	e023      	b.n	8003c94 <HAL_RCC_OscConfig+0x434>
 8003c4c:	4b42      	ldr	r3, [pc, #264]	; (8003d58 <HAL_RCC_OscConfig+0x4f8>)
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a1b      	ldr	r3, [r3, #32]
 8003c58:	061b      	lsls	r3, r3, #24
 8003c5a:	493f      	ldr	r1, [pc, #252]	; (8003d58 <HAL_RCC_OscConfig+0x4f8>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	60cb      	str	r3, [r1, #12]
 8003c60:	e018      	b.n	8003c94 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003c62:	4b3d      	ldr	r3, [pc, #244]	; (8003d58 <HAL_RCC_OscConfig+0x4f8>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a3c      	ldr	r2, [pc, #240]	; (8003d58 <HAL_RCC_OscConfig+0x4f8>)
 8003c68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c6e:	f7fd ff05 	bl	8001a7c <HAL_GetTick>
 8003c72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c74:	e008      	b.n	8003c88 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003c76:	f7fd ff01 	bl	8001a7c <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d901      	bls.n	8003c88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e23d      	b.n	8004104 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c88:	4b33      	ldr	r3, [pc, #204]	; (8003d58 <HAL_RCC_OscConfig+0x4f8>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1f0      	bne.n	8003c76 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0308 	and.w	r3, r3, #8
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d036      	beq.n	8003d0e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d019      	beq.n	8003cdc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ca8:	4b2b      	ldr	r3, [pc, #172]	; (8003d58 <HAL_RCC_OscConfig+0x4f8>)
 8003caa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cac:	4a2a      	ldr	r2, [pc, #168]	; (8003d58 <HAL_RCC_OscConfig+0x4f8>)
 8003cae:	f043 0301 	orr.w	r3, r3, #1
 8003cb2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb4:	f7fd fee2 	bl	8001a7c <HAL_GetTick>
 8003cb8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003cba:	e008      	b.n	8003cce <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cbc:	f7fd fede 	bl	8001a7c <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e21a      	b.n	8004104 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003cce:	4b22      	ldr	r3, [pc, #136]	; (8003d58 <HAL_RCC_OscConfig+0x4f8>)
 8003cd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d0f0      	beq.n	8003cbc <HAL_RCC_OscConfig+0x45c>
 8003cda:	e018      	b.n	8003d0e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cdc:	4b1e      	ldr	r3, [pc, #120]	; (8003d58 <HAL_RCC_OscConfig+0x4f8>)
 8003cde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ce0:	4a1d      	ldr	r2, [pc, #116]	; (8003d58 <HAL_RCC_OscConfig+0x4f8>)
 8003ce2:	f023 0301 	bic.w	r3, r3, #1
 8003ce6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce8:	f7fd fec8 	bl	8001a7c <HAL_GetTick>
 8003cec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003cee:	e008      	b.n	8003d02 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cf0:	f7fd fec4 	bl	8001a7c <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e200      	b.n	8004104 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d02:	4b15      	ldr	r3, [pc, #84]	; (8003d58 <HAL_RCC_OscConfig+0x4f8>)
 8003d04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1f0      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0320 	and.w	r3, r3, #32
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d039      	beq.n	8003d8e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d01c      	beq.n	8003d5c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d22:	4b0d      	ldr	r3, [pc, #52]	; (8003d58 <HAL_RCC_OscConfig+0x4f8>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a0c      	ldr	r2, [pc, #48]	; (8003d58 <HAL_RCC_OscConfig+0x4f8>)
 8003d28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d2c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d2e:	f7fd fea5 	bl	8001a7c <HAL_GetTick>
 8003d32:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d34:	e008      	b.n	8003d48 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d36:	f7fd fea1 	bl	8001a7c <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d901      	bls.n	8003d48 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e1dd      	b.n	8004104 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d48:	4b03      	ldr	r3, [pc, #12]	; (8003d58 <HAL_RCC_OscConfig+0x4f8>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d0f0      	beq.n	8003d36 <HAL_RCC_OscConfig+0x4d6>
 8003d54:	e01b      	b.n	8003d8e <HAL_RCC_OscConfig+0x52e>
 8003d56:	bf00      	nop
 8003d58:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d5c:	4b9b      	ldr	r3, [pc, #620]	; (8003fcc <HAL_RCC_OscConfig+0x76c>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a9a      	ldr	r2, [pc, #616]	; (8003fcc <HAL_RCC_OscConfig+0x76c>)
 8003d62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d66:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d68:	f7fd fe88 	bl	8001a7c <HAL_GetTick>
 8003d6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d6e:	e008      	b.n	8003d82 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d70:	f7fd fe84 	bl	8001a7c <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e1c0      	b.n	8004104 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d82:	4b92      	ldr	r3, [pc, #584]	; (8003fcc <HAL_RCC_OscConfig+0x76c>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1f0      	bne.n	8003d70 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0304 	and.w	r3, r3, #4
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	f000 8081 	beq.w	8003e9e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d9c:	4b8c      	ldr	r3, [pc, #560]	; (8003fd0 <HAL_RCC_OscConfig+0x770>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a8b      	ldr	r2, [pc, #556]	; (8003fd0 <HAL_RCC_OscConfig+0x770>)
 8003da2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003da6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003da8:	f7fd fe68 	bl	8001a7c <HAL_GetTick>
 8003dac:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dae:	e008      	b.n	8003dc2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003db0:	f7fd fe64 	bl	8001a7c <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b64      	cmp	r3, #100	; 0x64
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e1a0      	b.n	8004104 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dc2:	4b83      	ldr	r3, [pc, #524]	; (8003fd0 <HAL_RCC_OscConfig+0x770>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d0f0      	beq.n	8003db0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d106      	bne.n	8003de4 <HAL_RCC_OscConfig+0x584>
 8003dd6:	4b7d      	ldr	r3, [pc, #500]	; (8003fcc <HAL_RCC_OscConfig+0x76c>)
 8003dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dda:	4a7c      	ldr	r2, [pc, #496]	; (8003fcc <HAL_RCC_OscConfig+0x76c>)
 8003ddc:	f043 0301 	orr.w	r3, r3, #1
 8003de0:	6713      	str	r3, [r2, #112]	; 0x70
 8003de2:	e02d      	b.n	8003e40 <HAL_RCC_OscConfig+0x5e0>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d10c      	bne.n	8003e06 <HAL_RCC_OscConfig+0x5a6>
 8003dec:	4b77      	ldr	r3, [pc, #476]	; (8003fcc <HAL_RCC_OscConfig+0x76c>)
 8003dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df0:	4a76      	ldr	r2, [pc, #472]	; (8003fcc <HAL_RCC_OscConfig+0x76c>)
 8003df2:	f023 0301 	bic.w	r3, r3, #1
 8003df6:	6713      	str	r3, [r2, #112]	; 0x70
 8003df8:	4b74      	ldr	r3, [pc, #464]	; (8003fcc <HAL_RCC_OscConfig+0x76c>)
 8003dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfc:	4a73      	ldr	r2, [pc, #460]	; (8003fcc <HAL_RCC_OscConfig+0x76c>)
 8003dfe:	f023 0304 	bic.w	r3, r3, #4
 8003e02:	6713      	str	r3, [r2, #112]	; 0x70
 8003e04:	e01c      	b.n	8003e40 <HAL_RCC_OscConfig+0x5e0>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	2b05      	cmp	r3, #5
 8003e0c:	d10c      	bne.n	8003e28 <HAL_RCC_OscConfig+0x5c8>
 8003e0e:	4b6f      	ldr	r3, [pc, #444]	; (8003fcc <HAL_RCC_OscConfig+0x76c>)
 8003e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e12:	4a6e      	ldr	r2, [pc, #440]	; (8003fcc <HAL_RCC_OscConfig+0x76c>)
 8003e14:	f043 0304 	orr.w	r3, r3, #4
 8003e18:	6713      	str	r3, [r2, #112]	; 0x70
 8003e1a:	4b6c      	ldr	r3, [pc, #432]	; (8003fcc <HAL_RCC_OscConfig+0x76c>)
 8003e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1e:	4a6b      	ldr	r2, [pc, #428]	; (8003fcc <HAL_RCC_OscConfig+0x76c>)
 8003e20:	f043 0301 	orr.w	r3, r3, #1
 8003e24:	6713      	str	r3, [r2, #112]	; 0x70
 8003e26:	e00b      	b.n	8003e40 <HAL_RCC_OscConfig+0x5e0>
 8003e28:	4b68      	ldr	r3, [pc, #416]	; (8003fcc <HAL_RCC_OscConfig+0x76c>)
 8003e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2c:	4a67      	ldr	r2, [pc, #412]	; (8003fcc <HAL_RCC_OscConfig+0x76c>)
 8003e2e:	f023 0301 	bic.w	r3, r3, #1
 8003e32:	6713      	str	r3, [r2, #112]	; 0x70
 8003e34:	4b65      	ldr	r3, [pc, #404]	; (8003fcc <HAL_RCC_OscConfig+0x76c>)
 8003e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e38:	4a64      	ldr	r2, [pc, #400]	; (8003fcc <HAL_RCC_OscConfig+0x76c>)
 8003e3a:	f023 0304 	bic.w	r3, r3, #4
 8003e3e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d015      	beq.n	8003e74 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e48:	f7fd fe18 	bl	8001a7c <HAL_GetTick>
 8003e4c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e4e:	e00a      	b.n	8003e66 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e50:	f7fd fe14 	bl	8001a7c <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e14e      	b.n	8004104 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e66:	4b59      	ldr	r3, [pc, #356]	; (8003fcc <HAL_RCC_OscConfig+0x76c>)
 8003e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d0ee      	beq.n	8003e50 <HAL_RCC_OscConfig+0x5f0>
 8003e72:	e014      	b.n	8003e9e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e74:	f7fd fe02 	bl	8001a7c <HAL_GetTick>
 8003e78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e7a:	e00a      	b.n	8003e92 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e7c:	f7fd fdfe 	bl	8001a7c <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e138      	b.n	8004104 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e92:	4b4e      	ldr	r3, [pc, #312]	; (8003fcc <HAL_RCC_OscConfig+0x76c>)
 8003e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1ee      	bne.n	8003e7c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f000 812d 	beq.w	8004102 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003ea8:	4b48      	ldr	r3, [pc, #288]	; (8003fcc <HAL_RCC_OscConfig+0x76c>)
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003eb0:	2b18      	cmp	r3, #24
 8003eb2:	f000 80bd 	beq.w	8004030 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	f040 809e 	bne.w	8003ffc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ec0:	4b42      	ldr	r3, [pc, #264]	; (8003fcc <HAL_RCC_OscConfig+0x76c>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a41      	ldr	r2, [pc, #260]	; (8003fcc <HAL_RCC_OscConfig+0x76c>)
 8003ec6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003eca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ecc:	f7fd fdd6 	bl	8001a7c <HAL_GetTick>
 8003ed0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ed2:	e008      	b.n	8003ee6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ed4:	f7fd fdd2 	bl	8001a7c <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e10e      	b.n	8004104 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ee6:	4b39      	ldr	r3, [pc, #228]	; (8003fcc <HAL_RCC_OscConfig+0x76c>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1f0      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ef2:	4b36      	ldr	r3, [pc, #216]	; (8003fcc <HAL_RCC_OscConfig+0x76c>)
 8003ef4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ef6:	4b37      	ldr	r3, [pc, #220]	; (8003fd4 <HAL_RCC_OscConfig+0x774>)
 8003ef8:	4013      	ands	r3, r2
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003f02:	0112      	lsls	r2, r2, #4
 8003f04:	430a      	orrs	r2, r1
 8003f06:	4931      	ldr	r1, [pc, #196]	; (8003fcc <HAL_RCC_OscConfig+0x76c>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	628b      	str	r3, [r1, #40]	; 0x28
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f10:	3b01      	subs	r3, #1
 8003f12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	025b      	lsls	r3, r3, #9
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	431a      	orrs	r2, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f26:	3b01      	subs	r3, #1
 8003f28:	041b      	lsls	r3, r3, #16
 8003f2a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f34:	3b01      	subs	r3, #1
 8003f36:	061b      	lsls	r3, r3, #24
 8003f38:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003f3c:	4923      	ldr	r1, [pc, #140]	; (8003fcc <HAL_RCC_OscConfig+0x76c>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003f42:	4b22      	ldr	r3, [pc, #136]	; (8003fcc <HAL_RCC_OscConfig+0x76c>)
 8003f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f46:	4a21      	ldr	r2, [pc, #132]	; (8003fcc <HAL_RCC_OscConfig+0x76c>)
 8003f48:	f023 0301 	bic.w	r3, r3, #1
 8003f4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003f4e:	4b1f      	ldr	r3, [pc, #124]	; (8003fcc <HAL_RCC_OscConfig+0x76c>)
 8003f50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f52:	4b21      	ldr	r3, [pc, #132]	; (8003fd8 <HAL_RCC_OscConfig+0x778>)
 8003f54:	4013      	ands	r3, r2
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003f5a:	00d2      	lsls	r2, r2, #3
 8003f5c:	491b      	ldr	r1, [pc, #108]	; (8003fcc <HAL_RCC_OscConfig+0x76c>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003f62:	4b1a      	ldr	r3, [pc, #104]	; (8003fcc <HAL_RCC_OscConfig+0x76c>)
 8003f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f66:	f023 020c 	bic.w	r2, r3, #12
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	4917      	ldr	r1, [pc, #92]	; (8003fcc <HAL_RCC_OscConfig+0x76c>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003f74:	4b15      	ldr	r3, [pc, #84]	; (8003fcc <HAL_RCC_OscConfig+0x76c>)
 8003f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f78:	f023 0202 	bic.w	r2, r3, #2
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f80:	4912      	ldr	r1, [pc, #72]	; (8003fcc <HAL_RCC_OscConfig+0x76c>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003f86:	4b11      	ldr	r3, [pc, #68]	; (8003fcc <HAL_RCC_OscConfig+0x76c>)
 8003f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8a:	4a10      	ldr	r2, [pc, #64]	; (8003fcc <HAL_RCC_OscConfig+0x76c>)
 8003f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f90:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f92:	4b0e      	ldr	r3, [pc, #56]	; (8003fcc <HAL_RCC_OscConfig+0x76c>)
 8003f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f96:	4a0d      	ldr	r2, [pc, #52]	; (8003fcc <HAL_RCC_OscConfig+0x76c>)
 8003f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f9c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003f9e:	4b0b      	ldr	r3, [pc, #44]	; (8003fcc <HAL_RCC_OscConfig+0x76c>)
 8003fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa2:	4a0a      	ldr	r2, [pc, #40]	; (8003fcc <HAL_RCC_OscConfig+0x76c>)
 8003fa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fa8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003faa:	4b08      	ldr	r3, [pc, #32]	; (8003fcc <HAL_RCC_OscConfig+0x76c>)
 8003fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fae:	4a07      	ldr	r2, [pc, #28]	; (8003fcc <HAL_RCC_OscConfig+0x76c>)
 8003fb0:	f043 0301 	orr.w	r3, r3, #1
 8003fb4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fb6:	4b05      	ldr	r3, [pc, #20]	; (8003fcc <HAL_RCC_OscConfig+0x76c>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a04      	ldr	r2, [pc, #16]	; (8003fcc <HAL_RCC_OscConfig+0x76c>)
 8003fbc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc2:	f7fd fd5b 	bl	8001a7c <HAL_GetTick>
 8003fc6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003fc8:	e011      	b.n	8003fee <HAL_RCC_OscConfig+0x78e>
 8003fca:	bf00      	nop
 8003fcc:	58024400 	.word	0x58024400
 8003fd0:	58024800 	.word	0x58024800
 8003fd4:	fffffc0c 	.word	0xfffffc0c
 8003fd8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fdc:	f7fd fd4e 	bl	8001a7c <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e08a      	b.n	8004104 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003fee:	4b47      	ldr	r3, [pc, #284]	; (800410c <HAL_RCC_OscConfig+0x8ac>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d0f0      	beq.n	8003fdc <HAL_RCC_OscConfig+0x77c>
 8003ffa:	e082      	b.n	8004102 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ffc:	4b43      	ldr	r3, [pc, #268]	; (800410c <HAL_RCC_OscConfig+0x8ac>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a42      	ldr	r2, [pc, #264]	; (800410c <HAL_RCC_OscConfig+0x8ac>)
 8004002:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004006:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004008:	f7fd fd38 	bl	8001a7c <HAL_GetTick>
 800400c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004010:	f7fd fd34 	bl	8001a7c <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e070      	b.n	8004104 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004022:	4b3a      	ldr	r3, [pc, #232]	; (800410c <HAL_RCC_OscConfig+0x8ac>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1f0      	bne.n	8004010 <HAL_RCC_OscConfig+0x7b0>
 800402e:	e068      	b.n	8004102 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004030:	4b36      	ldr	r3, [pc, #216]	; (800410c <HAL_RCC_OscConfig+0x8ac>)
 8004032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004034:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004036:	4b35      	ldr	r3, [pc, #212]	; (800410c <HAL_RCC_OscConfig+0x8ac>)
 8004038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004040:	2b01      	cmp	r3, #1
 8004042:	d031      	beq.n	80040a8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	f003 0203 	and.w	r2, r3, #3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800404e:	429a      	cmp	r2, r3
 8004050:	d12a      	bne.n	80040a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	091b      	lsrs	r3, r3, #4
 8004056:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800405e:	429a      	cmp	r2, r3
 8004060:	d122      	bne.n	80040a8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800406e:	429a      	cmp	r2, r3
 8004070:	d11a      	bne.n	80040a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	0a5b      	lsrs	r3, r3, #9
 8004076:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800407e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004080:	429a      	cmp	r2, r3
 8004082:	d111      	bne.n	80040a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	0c1b      	lsrs	r3, r3, #16
 8004088:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004090:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004092:	429a      	cmp	r2, r3
 8004094:	d108      	bne.n	80040a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	0e1b      	lsrs	r3, r3, #24
 800409a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d001      	beq.n	80040ac <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e02b      	b.n	8004104 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80040ac:	4b17      	ldr	r3, [pc, #92]	; (800410c <HAL_RCC_OscConfig+0x8ac>)
 80040ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040b0:	08db      	lsrs	r3, r3, #3
 80040b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80040b6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d01f      	beq.n	8004102 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80040c2:	4b12      	ldr	r3, [pc, #72]	; (800410c <HAL_RCC_OscConfig+0x8ac>)
 80040c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c6:	4a11      	ldr	r2, [pc, #68]	; (800410c <HAL_RCC_OscConfig+0x8ac>)
 80040c8:	f023 0301 	bic.w	r3, r3, #1
 80040cc:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80040ce:	f7fd fcd5 	bl	8001a7c <HAL_GetTick>
 80040d2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80040d4:	bf00      	nop
 80040d6:	f7fd fcd1 	bl	8001a7c <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040de:	4293      	cmp	r3, r2
 80040e0:	d0f9      	beq.n	80040d6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80040e2:	4b0a      	ldr	r3, [pc, #40]	; (800410c <HAL_RCC_OscConfig+0x8ac>)
 80040e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040e6:	4b0a      	ldr	r3, [pc, #40]	; (8004110 <HAL_RCC_OscConfig+0x8b0>)
 80040e8:	4013      	ands	r3, r2
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80040ee:	00d2      	lsls	r2, r2, #3
 80040f0:	4906      	ldr	r1, [pc, #24]	; (800410c <HAL_RCC_OscConfig+0x8ac>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80040f6:	4b05      	ldr	r3, [pc, #20]	; (800410c <HAL_RCC_OscConfig+0x8ac>)
 80040f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fa:	4a04      	ldr	r2, [pc, #16]	; (800410c <HAL_RCC_OscConfig+0x8ac>)
 80040fc:	f043 0301 	orr.w	r3, r3, #1
 8004100:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3730      	adds	r7, #48	; 0x30
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	58024400 	.word	0x58024400
 8004110:	ffff0007 	.word	0xffff0007

08004114 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d101      	bne.n	8004128 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e19c      	b.n	8004462 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004128:	4b8a      	ldr	r3, [pc, #552]	; (8004354 <HAL_RCC_ClockConfig+0x240>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 030f 	and.w	r3, r3, #15
 8004130:	683a      	ldr	r2, [r7, #0]
 8004132:	429a      	cmp	r2, r3
 8004134:	d910      	bls.n	8004158 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004136:	4b87      	ldr	r3, [pc, #540]	; (8004354 <HAL_RCC_ClockConfig+0x240>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f023 020f 	bic.w	r2, r3, #15
 800413e:	4985      	ldr	r1, [pc, #532]	; (8004354 <HAL_RCC_ClockConfig+0x240>)
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	4313      	orrs	r3, r2
 8004144:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004146:	4b83      	ldr	r3, [pc, #524]	; (8004354 <HAL_RCC_ClockConfig+0x240>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 030f 	and.w	r3, r3, #15
 800414e:	683a      	ldr	r2, [r7, #0]
 8004150:	429a      	cmp	r2, r3
 8004152:	d001      	beq.n	8004158 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e184      	b.n	8004462 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0304 	and.w	r3, r3, #4
 8004160:	2b00      	cmp	r3, #0
 8004162:	d010      	beq.n	8004186 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	691a      	ldr	r2, [r3, #16]
 8004168:	4b7b      	ldr	r3, [pc, #492]	; (8004358 <HAL_RCC_ClockConfig+0x244>)
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004170:	429a      	cmp	r2, r3
 8004172:	d908      	bls.n	8004186 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004174:	4b78      	ldr	r3, [pc, #480]	; (8004358 <HAL_RCC_ClockConfig+0x244>)
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	4975      	ldr	r1, [pc, #468]	; (8004358 <HAL_RCC_ClockConfig+0x244>)
 8004182:	4313      	orrs	r3, r2
 8004184:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0308 	and.w	r3, r3, #8
 800418e:	2b00      	cmp	r3, #0
 8004190:	d010      	beq.n	80041b4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	695a      	ldr	r2, [r3, #20]
 8004196:	4b70      	ldr	r3, [pc, #448]	; (8004358 <HAL_RCC_ClockConfig+0x244>)
 8004198:	69db      	ldr	r3, [r3, #28]
 800419a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800419e:	429a      	cmp	r2, r3
 80041a0:	d908      	bls.n	80041b4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80041a2:	4b6d      	ldr	r3, [pc, #436]	; (8004358 <HAL_RCC_ClockConfig+0x244>)
 80041a4:	69db      	ldr	r3, [r3, #28]
 80041a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	496a      	ldr	r1, [pc, #424]	; (8004358 <HAL_RCC_ClockConfig+0x244>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0310 	and.w	r3, r3, #16
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d010      	beq.n	80041e2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	699a      	ldr	r2, [r3, #24]
 80041c4:	4b64      	ldr	r3, [pc, #400]	; (8004358 <HAL_RCC_ClockConfig+0x244>)
 80041c6:	69db      	ldr	r3, [r3, #28]
 80041c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d908      	bls.n	80041e2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80041d0:	4b61      	ldr	r3, [pc, #388]	; (8004358 <HAL_RCC_ClockConfig+0x244>)
 80041d2:	69db      	ldr	r3, [r3, #28]
 80041d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	495e      	ldr	r1, [pc, #376]	; (8004358 <HAL_RCC_ClockConfig+0x244>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0320 	and.w	r3, r3, #32
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d010      	beq.n	8004210 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	69da      	ldr	r2, [r3, #28]
 80041f2:	4b59      	ldr	r3, [pc, #356]	; (8004358 <HAL_RCC_ClockConfig+0x244>)
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d908      	bls.n	8004210 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80041fe:	4b56      	ldr	r3, [pc, #344]	; (8004358 <HAL_RCC_ClockConfig+0x244>)
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	4953      	ldr	r1, [pc, #332]	; (8004358 <HAL_RCC_ClockConfig+0x244>)
 800420c:	4313      	orrs	r3, r2
 800420e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d010      	beq.n	800423e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	68da      	ldr	r2, [r3, #12]
 8004220:	4b4d      	ldr	r3, [pc, #308]	; (8004358 <HAL_RCC_ClockConfig+0x244>)
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	f003 030f 	and.w	r3, r3, #15
 8004228:	429a      	cmp	r2, r3
 800422a:	d908      	bls.n	800423e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800422c:	4b4a      	ldr	r3, [pc, #296]	; (8004358 <HAL_RCC_ClockConfig+0x244>)
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	f023 020f 	bic.w	r2, r3, #15
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	4947      	ldr	r1, [pc, #284]	; (8004358 <HAL_RCC_ClockConfig+0x244>)
 800423a:	4313      	orrs	r3, r2
 800423c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0301 	and.w	r3, r3, #1
 8004246:	2b00      	cmp	r3, #0
 8004248:	d055      	beq.n	80042f6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800424a:	4b43      	ldr	r3, [pc, #268]	; (8004358 <HAL_RCC_ClockConfig+0x244>)
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	4940      	ldr	r1, [pc, #256]	; (8004358 <HAL_RCC_ClockConfig+0x244>)
 8004258:	4313      	orrs	r3, r2
 800425a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	2b02      	cmp	r3, #2
 8004262:	d107      	bne.n	8004274 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004264:	4b3c      	ldr	r3, [pc, #240]	; (8004358 <HAL_RCC_ClockConfig+0x244>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d121      	bne.n	80042b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e0f6      	b.n	8004462 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	2b03      	cmp	r3, #3
 800427a:	d107      	bne.n	800428c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800427c:	4b36      	ldr	r3, [pc, #216]	; (8004358 <HAL_RCC_ClockConfig+0x244>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d115      	bne.n	80042b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e0ea      	b.n	8004462 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d107      	bne.n	80042a4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004294:	4b30      	ldr	r3, [pc, #192]	; (8004358 <HAL_RCC_ClockConfig+0x244>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800429c:	2b00      	cmp	r3, #0
 800429e:	d109      	bne.n	80042b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e0de      	b.n	8004462 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042a4:	4b2c      	ldr	r3, [pc, #176]	; (8004358 <HAL_RCC_ClockConfig+0x244>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0304 	and.w	r3, r3, #4
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d101      	bne.n	80042b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e0d6      	b.n	8004462 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042b4:	4b28      	ldr	r3, [pc, #160]	; (8004358 <HAL_RCC_ClockConfig+0x244>)
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	f023 0207 	bic.w	r2, r3, #7
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	4925      	ldr	r1, [pc, #148]	; (8004358 <HAL_RCC_ClockConfig+0x244>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042c6:	f7fd fbd9 	bl	8001a7c <HAL_GetTick>
 80042ca:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042cc:	e00a      	b.n	80042e4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042ce:	f7fd fbd5 	bl	8001a7c <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042dc:	4293      	cmp	r3, r2
 80042de:	d901      	bls.n	80042e4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e0be      	b.n	8004462 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042e4:	4b1c      	ldr	r3, [pc, #112]	; (8004358 <HAL_RCC_ClockConfig+0x244>)
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	00db      	lsls	r3, r3, #3
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d1eb      	bne.n	80042ce <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d010      	beq.n	8004324 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68da      	ldr	r2, [r3, #12]
 8004306:	4b14      	ldr	r3, [pc, #80]	; (8004358 <HAL_RCC_ClockConfig+0x244>)
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	f003 030f 	and.w	r3, r3, #15
 800430e:	429a      	cmp	r2, r3
 8004310:	d208      	bcs.n	8004324 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004312:	4b11      	ldr	r3, [pc, #68]	; (8004358 <HAL_RCC_ClockConfig+0x244>)
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	f023 020f 	bic.w	r2, r3, #15
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	490e      	ldr	r1, [pc, #56]	; (8004358 <HAL_RCC_ClockConfig+0x244>)
 8004320:	4313      	orrs	r3, r2
 8004322:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004324:	4b0b      	ldr	r3, [pc, #44]	; (8004354 <HAL_RCC_ClockConfig+0x240>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 030f 	and.w	r3, r3, #15
 800432c:	683a      	ldr	r2, [r7, #0]
 800432e:	429a      	cmp	r2, r3
 8004330:	d214      	bcs.n	800435c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004332:	4b08      	ldr	r3, [pc, #32]	; (8004354 <HAL_RCC_ClockConfig+0x240>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f023 020f 	bic.w	r2, r3, #15
 800433a:	4906      	ldr	r1, [pc, #24]	; (8004354 <HAL_RCC_ClockConfig+0x240>)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	4313      	orrs	r3, r2
 8004340:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004342:	4b04      	ldr	r3, [pc, #16]	; (8004354 <HAL_RCC_ClockConfig+0x240>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 030f 	and.w	r3, r3, #15
 800434a:	683a      	ldr	r2, [r7, #0]
 800434c:	429a      	cmp	r2, r3
 800434e:	d005      	beq.n	800435c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e086      	b.n	8004462 <HAL_RCC_ClockConfig+0x34e>
 8004354:	52002000 	.word	0x52002000
 8004358:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0304 	and.w	r3, r3, #4
 8004364:	2b00      	cmp	r3, #0
 8004366:	d010      	beq.n	800438a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	691a      	ldr	r2, [r3, #16]
 800436c:	4b3f      	ldr	r3, [pc, #252]	; (800446c <HAL_RCC_ClockConfig+0x358>)
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004374:	429a      	cmp	r2, r3
 8004376:	d208      	bcs.n	800438a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004378:	4b3c      	ldr	r3, [pc, #240]	; (800446c <HAL_RCC_ClockConfig+0x358>)
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	4939      	ldr	r1, [pc, #228]	; (800446c <HAL_RCC_ClockConfig+0x358>)
 8004386:	4313      	orrs	r3, r2
 8004388:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0308 	and.w	r3, r3, #8
 8004392:	2b00      	cmp	r3, #0
 8004394:	d010      	beq.n	80043b8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	695a      	ldr	r2, [r3, #20]
 800439a:	4b34      	ldr	r3, [pc, #208]	; (800446c <HAL_RCC_ClockConfig+0x358>)
 800439c:	69db      	ldr	r3, [r3, #28]
 800439e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d208      	bcs.n	80043b8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80043a6:	4b31      	ldr	r3, [pc, #196]	; (800446c <HAL_RCC_ClockConfig+0x358>)
 80043a8:	69db      	ldr	r3, [r3, #28]
 80043aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	492e      	ldr	r1, [pc, #184]	; (800446c <HAL_RCC_ClockConfig+0x358>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0310 	and.w	r3, r3, #16
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d010      	beq.n	80043e6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	699a      	ldr	r2, [r3, #24]
 80043c8:	4b28      	ldr	r3, [pc, #160]	; (800446c <HAL_RCC_ClockConfig+0x358>)
 80043ca:	69db      	ldr	r3, [r3, #28]
 80043cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d208      	bcs.n	80043e6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80043d4:	4b25      	ldr	r3, [pc, #148]	; (800446c <HAL_RCC_ClockConfig+0x358>)
 80043d6:	69db      	ldr	r3, [r3, #28]
 80043d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	4922      	ldr	r1, [pc, #136]	; (800446c <HAL_RCC_ClockConfig+0x358>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0320 	and.w	r3, r3, #32
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d010      	beq.n	8004414 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	69da      	ldr	r2, [r3, #28]
 80043f6:	4b1d      	ldr	r3, [pc, #116]	; (800446c <HAL_RCC_ClockConfig+0x358>)
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043fe:	429a      	cmp	r2, r3
 8004400:	d208      	bcs.n	8004414 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004402:	4b1a      	ldr	r3, [pc, #104]	; (800446c <HAL_RCC_ClockConfig+0x358>)
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	69db      	ldr	r3, [r3, #28]
 800440e:	4917      	ldr	r1, [pc, #92]	; (800446c <HAL_RCC_ClockConfig+0x358>)
 8004410:	4313      	orrs	r3, r2
 8004412:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004414:	f000 f834 	bl	8004480 <HAL_RCC_GetSysClockFreq>
 8004418:	4602      	mov	r2, r0
 800441a:	4b14      	ldr	r3, [pc, #80]	; (800446c <HAL_RCC_ClockConfig+0x358>)
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	0a1b      	lsrs	r3, r3, #8
 8004420:	f003 030f 	and.w	r3, r3, #15
 8004424:	4912      	ldr	r1, [pc, #72]	; (8004470 <HAL_RCC_ClockConfig+0x35c>)
 8004426:	5ccb      	ldrb	r3, [r1, r3]
 8004428:	f003 031f 	and.w	r3, r3, #31
 800442c:	fa22 f303 	lsr.w	r3, r2, r3
 8004430:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004432:	4b0e      	ldr	r3, [pc, #56]	; (800446c <HAL_RCC_ClockConfig+0x358>)
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	f003 030f 	and.w	r3, r3, #15
 800443a:	4a0d      	ldr	r2, [pc, #52]	; (8004470 <HAL_RCC_ClockConfig+0x35c>)
 800443c:	5cd3      	ldrb	r3, [r2, r3]
 800443e:	f003 031f 	and.w	r3, r3, #31
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	fa22 f303 	lsr.w	r3, r2, r3
 8004448:	4a0a      	ldr	r2, [pc, #40]	; (8004474 <HAL_RCC_ClockConfig+0x360>)
 800444a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800444c:	4a0a      	ldr	r2, [pc, #40]	; (8004478 <HAL_RCC_ClockConfig+0x364>)
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004452:	4b0a      	ldr	r3, [pc, #40]	; (800447c <HAL_RCC_ClockConfig+0x368>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4618      	mov	r0, r3
 8004458:	f7fd f944 	bl	80016e4 <HAL_InitTick>
 800445c:	4603      	mov	r3, r0
 800445e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004460:	7bfb      	ldrb	r3, [r7, #15]
}
 8004462:	4618      	mov	r0, r3
 8004464:	3718      	adds	r7, #24
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	58024400 	.word	0x58024400
 8004470:	0800f61c 	.word	0x0800f61c
 8004474:	24000004 	.word	0x24000004
 8004478:	24000000 	.word	0x24000000
 800447c:	24000008 	.word	0x24000008

08004480 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004480:	b480      	push	{r7}
 8004482:	b089      	sub	sp, #36	; 0x24
 8004484:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004486:	4bb3      	ldr	r3, [pc, #716]	; (8004754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800448e:	2b18      	cmp	r3, #24
 8004490:	f200 8155 	bhi.w	800473e <HAL_RCC_GetSysClockFreq+0x2be>
 8004494:	a201      	add	r2, pc, #4	; (adr r2, 800449c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800449a:	bf00      	nop
 800449c:	08004501 	.word	0x08004501
 80044a0:	0800473f 	.word	0x0800473f
 80044a4:	0800473f 	.word	0x0800473f
 80044a8:	0800473f 	.word	0x0800473f
 80044ac:	0800473f 	.word	0x0800473f
 80044b0:	0800473f 	.word	0x0800473f
 80044b4:	0800473f 	.word	0x0800473f
 80044b8:	0800473f 	.word	0x0800473f
 80044bc:	08004527 	.word	0x08004527
 80044c0:	0800473f 	.word	0x0800473f
 80044c4:	0800473f 	.word	0x0800473f
 80044c8:	0800473f 	.word	0x0800473f
 80044cc:	0800473f 	.word	0x0800473f
 80044d0:	0800473f 	.word	0x0800473f
 80044d4:	0800473f 	.word	0x0800473f
 80044d8:	0800473f 	.word	0x0800473f
 80044dc:	0800452d 	.word	0x0800452d
 80044e0:	0800473f 	.word	0x0800473f
 80044e4:	0800473f 	.word	0x0800473f
 80044e8:	0800473f 	.word	0x0800473f
 80044ec:	0800473f 	.word	0x0800473f
 80044f0:	0800473f 	.word	0x0800473f
 80044f4:	0800473f 	.word	0x0800473f
 80044f8:	0800473f 	.word	0x0800473f
 80044fc:	08004533 	.word	0x08004533
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004500:	4b94      	ldr	r3, [pc, #592]	; (8004754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0320 	and.w	r3, r3, #32
 8004508:	2b00      	cmp	r3, #0
 800450a:	d009      	beq.n	8004520 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800450c:	4b91      	ldr	r3, [pc, #580]	; (8004754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	08db      	lsrs	r3, r3, #3
 8004512:	f003 0303 	and.w	r3, r3, #3
 8004516:	4a90      	ldr	r2, [pc, #576]	; (8004758 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004518:	fa22 f303 	lsr.w	r3, r2, r3
 800451c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800451e:	e111      	b.n	8004744 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004520:	4b8d      	ldr	r3, [pc, #564]	; (8004758 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004522:	61bb      	str	r3, [r7, #24]
      break;
 8004524:	e10e      	b.n	8004744 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004526:	4b8d      	ldr	r3, [pc, #564]	; (800475c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004528:	61bb      	str	r3, [r7, #24]
      break;
 800452a:	e10b      	b.n	8004744 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800452c:	4b8c      	ldr	r3, [pc, #560]	; (8004760 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800452e:	61bb      	str	r3, [r7, #24]
      break;
 8004530:	e108      	b.n	8004744 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004532:	4b88      	ldr	r3, [pc, #544]	; (8004754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004536:	f003 0303 	and.w	r3, r3, #3
 800453a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800453c:	4b85      	ldr	r3, [pc, #532]	; (8004754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800453e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004540:	091b      	lsrs	r3, r3, #4
 8004542:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004546:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004548:	4b82      	ldr	r3, [pc, #520]	; (8004754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800454a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454c:	f003 0301 	and.w	r3, r3, #1
 8004550:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004552:	4b80      	ldr	r3, [pc, #512]	; (8004754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004556:	08db      	lsrs	r3, r3, #3
 8004558:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	fb02 f303 	mul.w	r3, r2, r3
 8004562:	ee07 3a90 	vmov	s15, r3
 8004566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800456a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	2b00      	cmp	r3, #0
 8004572:	f000 80e1 	beq.w	8004738 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	2b02      	cmp	r3, #2
 800457a:	f000 8083 	beq.w	8004684 <HAL_RCC_GetSysClockFreq+0x204>
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	2b02      	cmp	r3, #2
 8004582:	f200 80a1 	bhi.w	80046c8 <HAL_RCC_GetSysClockFreq+0x248>
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d003      	beq.n	8004594 <HAL_RCC_GetSysClockFreq+0x114>
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d056      	beq.n	8004640 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004592:	e099      	b.n	80046c8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004594:	4b6f      	ldr	r3, [pc, #444]	; (8004754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0320 	and.w	r3, r3, #32
 800459c:	2b00      	cmp	r3, #0
 800459e:	d02d      	beq.n	80045fc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80045a0:	4b6c      	ldr	r3, [pc, #432]	; (8004754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	08db      	lsrs	r3, r3, #3
 80045a6:	f003 0303 	and.w	r3, r3, #3
 80045aa:	4a6b      	ldr	r2, [pc, #428]	; (8004758 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80045ac:	fa22 f303 	lsr.w	r3, r2, r3
 80045b0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	ee07 3a90 	vmov	s15, r3
 80045b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	ee07 3a90 	vmov	s15, r3
 80045c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045ca:	4b62      	ldr	r3, [pc, #392]	; (8004754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045d2:	ee07 3a90 	vmov	s15, r3
 80045d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045da:	ed97 6a02 	vldr	s12, [r7, #8]
 80045de:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004764 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045f6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80045fa:	e087      	b.n	800470c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	ee07 3a90 	vmov	s15, r3
 8004602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004606:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004768 <HAL_RCC_GetSysClockFreq+0x2e8>
 800460a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800460e:	4b51      	ldr	r3, [pc, #324]	; (8004754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004616:	ee07 3a90 	vmov	s15, r3
 800461a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800461e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004622:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004764 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004626:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800462a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800462e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004632:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800463a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800463e:	e065      	b.n	800470c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	ee07 3a90 	vmov	s15, r3
 8004646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800464a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800476c <HAL_RCC_GetSysClockFreq+0x2ec>
 800464e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004652:	4b40      	ldr	r3, [pc, #256]	; (8004754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800465a:	ee07 3a90 	vmov	s15, r3
 800465e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004662:	ed97 6a02 	vldr	s12, [r7, #8]
 8004666:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004764 <HAL_RCC_GetSysClockFreq+0x2e4>
 800466a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800466e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004672:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800467a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800467e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004682:	e043      	b.n	800470c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	ee07 3a90 	vmov	s15, r3
 800468a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800468e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004770 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004696:	4b2f      	ldr	r3, [pc, #188]	; (8004754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800469e:	ee07 3a90 	vmov	s15, r3
 80046a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80046aa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004764 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80046c6:	e021      	b.n	800470c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	ee07 3a90 	vmov	s15, r3
 80046ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046d2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800476c <HAL_RCC_GetSysClockFreq+0x2ec>
 80046d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046da:	4b1e      	ldr	r3, [pc, #120]	; (8004754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046e2:	ee07 3a90 	vmov	s15, r3
 80046e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80046ee:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004764 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004706:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800470a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800470c:	4b11      	ldr	r3, [pc, #68]	; (8004754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800470e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004710:	0a5b      	lsrs	r3, r3, #9
 8004712:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004716:	3301      	adds	r3, #1
 8004718:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	ee07 3a90 	vmov	s15, r3
 8004720:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004724:	edd7 6a07 	vldr	s13, [r7, #28]
 8004728:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800472c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004730:	ee17 3a90 	vmov	r3, s15
 8004734:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004736:	e005      	b.n	8004744 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004738:	2300      	movs	r3, #0
 800473a:	61bb      	str	r3, [r7, #24]
      break;
 800473c:	e002      	b.n	8004744 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800473e:	4b07      	ldr	r3, [pc, #28]	; (800475c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004740:	61bb      	str	r3, [r7, #24]
      break;
 8004742:	bf00      	nop
  }

  return sysclockfreq;
 8004744:	69bb      	ldr	r3, [r7, #24]
}
 8004746:	4618      	mov	r0, r3
 8004748:	3724      	adds	r7, #36	; 0x24
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	58024400 	.word	0x58024400
 8004758:	03d09000 	.word	0x03d09000
 800475c:	003d0900 	.word	0x003d0900
 8004760:	007a1200 	.word	0x007a1200
 8004764:	46000000 	.word	0x46000000
 8004768:	4c742400 	.word	0x4c742400
 800476c:	4a742400 	.word	0x4a742400
 8004770:	4af42400 	.word	0x4af42400

08004774 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800477a:	f7ff fe81 	bl	8004480 <HAL_RCC_GetSysClockFreq>
 800477e:	4602      	mov	r2, r0
 8004780:	4b10      	ldr	r3, [pc, #64]	; (80047c4 <HAL_RCC_GetHCLKFreq+0x50>)
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	0a1b      	lsrs	r3, r3, #8
 8004786:	f003 030f 	and.w	r3, r3, #15
 800478a:	490f      	ldr	r1, [pc, #60]	; (80047c8 <HAL_RCC_GetHCLKFreq+0x54>)
 800478c:	5ccb      	ldrb	r3, [r1, r3]
 800478e:	f003 031f 	and.w	r3, r3, #31
 8004792:	fa22 f303 	lsr.w	r3, r2, r3
 8004796:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004798:	4b0a      	ldr	r3, [pc, #40]	; (80047c4 <HAL_RCC_GetHCLKFreq+0x50>)
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	f003 030f 	and.w	r3, r3, #15
 80047a0:	4a09      	ldr	r2, [pc, #36]	; (80047c8 <HAL_RCC_GetHCLKFreq+0x54>)
 80047a2:	5cd3      	ldrb	r3, [r2, r3]
 80047a4:	f003 031f 	and.w	r3, r3, #31
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	fa22 f303 	lsr.w	r3, r2, r3
 80047ae:	4a07      	ldr	r2, [pc, #28]	; (80047cc <HAL_RCC_GetHCLKFreq+0x58>)
 80047b0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80047b2:	4a07      	ldr	r2, [pc, #28]	; (80047d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80047b8:	4b04      	ldr	r3, [pc, #16]	; (80047cc <HAL_RCC_GetHCLKFreq+0x58>)
 80047ba:	681b      	ldr	r3, [r3, #0]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3708      	adds	r7, #8
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	58024400 	.word	0x58024400
 80047c8:	0800f61c 	.word	0x0800f61c
 80047cc:	24000004 	.word	0x24000004
 80047d0:	24000000 	.word	0x24000000

080047d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80047d8:	f7ff ffcc 	bl	8004774 <HAL_RCC_GetHCLKFreq>
 80047dc:	4602      	mov	r2, r0
 80047de:	4b06      	ldr	r3, [pc, #24]	; (80047f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047e0:	69db      	ldr	r3, [r3, #28]
 80047e2:	091b      	lsrs	r3, r3, #4
 80047e4:	f003 0307 	and.w	r3, r3, #7
 80047e8:	4904      	ldr	r1, [pc, #16]	; (80047fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80047ea:	5ccb      	ldrb	r3, [r1, r3]
 80047ec:	f003 031f 	and.w	r3, r3, #31
 80047f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	58024400 	.word	0x58024400
 80047fc:	0800f61c 	.word	0x0800f61c

08004800 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004804:	f7ff ffb6 	bl	8004774 <HAL_RCC_GetHCLKFreq>
 8004808:	4602      	mov	r2, r0
 800480a:	4b06      	ldr	r3, [pc, #24]	; (8004824 <HAL_RCC_GetPCLK2Freq+0x24>)
 800480c:	69db      	ldr	r3, [r3, #28]
 800480e:	0a1b      	lsrs	r3, r3, #8
 8004810:	f003 0307 	and.w	r3, r3, #7
 8004814:	4904      	ldr	r1, [pc, #16]	; (8004828 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004816:	5ccb      	ldrb	r3, [r1, r3]
 8004818:	f003 031f 	and.w	r3, r3, #31
 800481c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004820:	4618      	mov	r0, r3
 8004822:	bd80      	pop	{r7, pc}
 8004824:	58024400 	.word	0x58024400
 8004828:	0800f61c 	.word	0x0800f61c

0800482c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	223f      	movs	r2, #63	; 0x3f
 800483a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800483c:	4b1a      	ldr	r3, [pc, #104]	; (80048a8 <HAL_RCC_GetClockConfig+0x7c>)
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	f003 0207 	and.w	r2, r3, #7
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004848:	4b17      	ldr	r3, [pc, #92]	; (80048a8 <HAL_RCC_GetClockConfig+0x7c>)
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004854:	4b14      	ldr	r3, [pc, #80]	; (80048a8 <HAL_RCC_GetClockConfig+0x7c>)
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	f003 020f 	and.w	r2, r3, #15
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004860:	4b11      	ldr	r3, [pc, #68]	; (80048a8 <HAL_RCC_GetClockConfig+0x7c>)
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800486c:	4b0e      	ldr	r3, [pc, #56]	; (80048a8 <HAL_RCC_GetClockConfig+0x7c>)
 800486e:	69db      	ldr	r3, [r3, #28]
 8004870:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004878:	4b0b      	ldr	r3, [pc, #44]	; (80048a8 <HAL_RCC_GetClockConfig+0x7c>)
 800487a:	69db      	ldr	r3, [r3, #28]
 800487c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004884:	4b08      	ldr	r3, [pc, #32]	; (80048a8 <HAL_RCC_GetClockConfig+0x7c>)
 8004886:	6a1b      	ldr	r3, [r3, #32]
 8004888:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004890:	4b06      	ldr	r3, [pc, #24]	; (80048ac <HAL_RCC_GetClockConfig+0x80>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 020f 	and.w	r2, r3, #15
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	601a      	str	r2, [r3, #0]
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr
 80048a8:	58024400 	.word	0x58024400
 80048ac:	52002000 	.word	0x52002000

080048b0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048b4:	b0ca      	sub	sp, #296	; 0x128
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80048bc:	2300      	movs	r3, #0
 80048be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80048c2:	2300      	movs	r3, #0
 80048c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80048c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80048d4:	2500      	movs	r5, #0
 80048d6:	ea54 0305 	orrs.w	r3, r4, r5
 80048da:	d049      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80048dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048e6:	d02f      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80048e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048ec:	d828      	bhi.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80048ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048f2:	d01a      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80048f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048f8:	d822      	bhi.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d003      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80048fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004902:	d007      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004904:	e01c      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004906:	4bb8      	ldr	r3, [pc, #736]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490a:	4ab7      	ldr	r2, [pc, #732]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800490c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004910:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004912:	e01a      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004914:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004918:	3308      	adds	r3, #8
 800491a:	2102      	movs	r1, #2
 800491c:	4618      	mov	r0, r3
 800491e:	f001 fc8f 	bl	8006240 <RCCEx_PLL2_Config>
 8004922:	4603      	mov	r3, r0
 8004924:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004928:	e00f      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800492a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800492e:	3328      	adds	r3, #40	; 0x28
 8004930:	2102      	movs	r1, #2
 8004932:	4618      	mov	r0, r3
 8004934:	f001 fd36 	bl	80063a4 <RCCEx_PLL3_Config>
 8004938:	4603      	mov	r3, r0
 800493a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800493e:	e004      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004946:	e000      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004948:	bf00      	nop
    }

    if (ret == HAL_OK)
 800494a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10a      	bne.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004952:	4ba5      	ldr	r3, [pc, #660]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004956:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800495a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800495e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004960:	4aa1      	ldr	r2, [pc, #644]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004962:	430b      	orrs	r3, r1
 8004964:	6513      	str	r3, [r2, #80]	; 0x50
 8004966:	e003      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004968:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800496c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004970:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004978:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800497c:	f04f 0900 	mov.w	r9, #0
 8004980:	ea58 0309 	orrs.w	r3, r8, r9
 8004984:	d047      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004986:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800498a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800498c:	2b04      	cmp	r3, #4
 800498e:	d82a      	bhi.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004990:	a201      	add	r2, pc, #4	; (adr r2, 8004998 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004996:	bf00      	nop
 8004998:	080049ad 	.word	0x080049ad
 800499c:	080049bb 	.word	0x080049bb
 80049a0:	080049d1 	.word	0x080049d1
 80049a4:	080049ef 	.word	0x080049ef
 80049a8:	080049ef 	.word	0x080049ef
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049ac:	4b8e      	ldr	r3, [pc, #568]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b0:	4a8d      	ldr	r2, [pc, #564]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80049b8:	e01a      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049be:	3308      	adds	r3, #8
 80049c0:	2100      	movs	r1, #0
 80049c2:	4618      	mov	r0, r3
 80049c4:	f001 fc3c 	bl	8006240 <RCCEx_PLL2_Config>
 80049c8:	4603      	mov	r3, r0
 80049ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80049ce:	e00f      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80049d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049d4:	3328      	adds	r3, #40	; 0x28
 80049d6:	2100      	movs	r1, #0
 80049d8:	4618      	mov	r0, r3
 80049da:	f001 fce3 	bl	80063a4 <RCCEx_PLL3_Config>
 80049de:	4603      	mov	r3, r0
 80049e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80049e4:	e004      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80049ec:	e000      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80049ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d10a      	bne.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049f8:	4b7b      	ldr	r3, [pc, #492]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049fc:	f023 0107 	bic.w	r1, r3, #7
 8004a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a06:	4a78      	ldr	r2, [pc, #480]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a08:	430b      	orrs	r3, r1
 8004a0a:	6513      	str	r3, [r2, #80]	; 0x50
 8004a0c:	e003      	b.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a1e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8004a22:	f04f 0b00 	mov.w	fp, #0
 8004a26:	ea5a 030b 	orrs.w	r3, sl, fp
 8004a2a:	d04c      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a36:	d030      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004a38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a3c:	d829      	bhi.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004a3e:	2bc0      	cmp	r3, #192	; 0xc0
 8004a40:	d02d      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004a42:	2bc0      	cmp	r3, #192	; 0xc0
 8004a44:	d825      	bhi.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004a46:	2b80      	cmp	r3, #128	; 0x80
 8004a48:	d018      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004a4a:	2b80      	cmp	r3, #128	; 0x80
 8004a4c:	d821      	bhi.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d002      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004a52:	2b40      	cmp	r3, #64	; 0x40
 8004a54:	d007      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004a56:	e01c      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a58:	4b63      	ldr	r3, [pc, #396]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5c:	4a62      	ldr	r2, [pc, #392]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004a64:	e01c      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a6a:	3308      	adds	r3, #8
 8004a6c:	2100      	movs	r1, #0
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f001 fbe6 	bl	8006240 <RCCEx_PLL2_Config>
 8004a74:	4603      	mov	r3, r0
 8004a76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004a7a:	e011      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a80:	3328      	adds	r3, #40	; 0x28
 8004a82:	2100      	movs	r1, #0
 8004a84:	4618      	mov	r0, r3
 8004a86:	f001 fc8d 	bl	80063a4 <RCCEx_PLL3_Config>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004a90:	e006      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004a98:	e002      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004a9a:	bf00      	nop
 8004a9c:	e000      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004a9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004aa0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10a      	bne.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004aa8:	4b4f      	ldr	r3, [pc, #316]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aac:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ab6:	4a4c      	ldr	r2, [pc, #304]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ab8:	430b      	orrs	r3, r1
 8004aba:	6513      	str	r3, [r2, #80]	; 0x50
 8004abc:	e003      	b.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004abe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ac2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ace:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004ad2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004adc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	d053      	beq.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004aea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004aee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004af2:	d035      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004af4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004af8:	d82e      	bhi.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004afa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004afe:	d031      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004b00:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004b04:	d828      	bhi.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004b06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b0a:	d01a      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004b0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b10:	d822      	bhi.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d003      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004b16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b1a:	d007      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004b1c:	e01c      	b.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b1e:	4b32      	ldr	r3, [pc, #200]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b22:	4a31      	ldr	r2, [pc, #196]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b28:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b2a:	e01c      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b30:	3308      	adds	r3, #8
 8004b32:	2100      	movs	r1, #0
 8004b34:	4618      	mov	r0, r3
 8004b36:	f001 fb83 	bl	8006240 <RCCEx_PLL2_Config>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004b40:	e011      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b46:	3328      	adds	r3, #40	; 0x28
 8004b48:	2100      	movs	r1, #0
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f001 fc2a 	bl	80063a4 <RCCEx_PLL3_Config>
 8004b50:	4603      	mov	r3, r0
 8004b52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b56:	e006      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004b5e:	e002      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004b60:	bf00      	nop
 8004b62:	e000      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004b64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d10b      	bne.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004b6e:	4b1e      	ldr	r3, [pc, #120]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b72:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8004b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b7a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004b7e:	4a1a      	ldr	r2, [pc, #104]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b80:	430b      	orrs	r3, r1
 8004b82:	6593      	str	r3, [r2, #88]	; 0x58
 8004b84:	e003      	b.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b8a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b96:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004b9a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004ba4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8004ba8:	460b      	mov	r3, r1
 8004baa:	4313      	orrs	r3, r2
 8004bac:	d056      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bb2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004bb6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004bba:	d038      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004bbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004bc0:	d831      	bhi.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004bc2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004bc6:	d034      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004bc8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004bcc:	d82b      	bhi.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004bce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004bd2:	d01d      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004bd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004bd8:	d825      	bhi.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d006      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004bde:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004be2:	d00a      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004be4:	e01f      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004be6:	bf00      	nop
 8004be8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bec:	4ba2      	ldr	r3, [pc, #648]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf0:	4aa1      	ldr	r2, [pc, #644]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bf6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004bf8:	e01c      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bfe:	3308      	adds	r3, #8
 8004c00:	2100      	movs	r1, #0
 8004c02:	4618      	mov	r0, r3
 8004c04:	f001 fb1c 	bl	8006240 <RCCEx_PLL2_Config>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004c0e:	e011      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c14:	3328      	adds	r3, #40	; 0x28
 8004c16:	2100      	movs	r1, #0
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f001 fbc3 	bl	80063a4 <RCCEx_PLL3_Config>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004c24:	e006      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004c2c:	e002      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004c2e:	bf00      	nop
 8004c30:	e000      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004c32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d10b      	bne.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004c3c:	4b8e      	ldr	r3, [pc, #568]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c40:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c48:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004c4c:	4a8a      	ldr	r2, [pc, #552]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c4e:	430b      	orrs	r3, r1
 8004c50:	6593      	str	r3, [r2, #88]	; 0x58
 8004c52:	e003      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c64:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004c68:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004c72:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004c76:	460b      	mov	r3, r1
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	d03a      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c82:	2b30      	cmp	r3, #48	; 0x30
 8004c84:	d01f      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004c86:	2b30      	cmp	r3, #48	; 0x30
 8004c88:	d819      	bhi.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004c8a:	2b20      	cmp	r3, #32
 8004c8c:	d00c      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004c8e:	2b20      	cmp	r3, #32
 8004c90:	d815      	bhi.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d019      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004c96:	2b10      	cmp	r3, #16
 8004c98:	d111      	bne.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c9a:	4b77      	ldr	r3, [pc, #476]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9e:	4a76      	ldr	r2, [pc, #472]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ca4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004ca6:	e011      	b.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cac:	3308      	adds	r3, #8
 8004cae:	2102      	movs	r1, #2
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f001 fac5 	bl	8006240 <RCCEx_PLL2_Config>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004cbc:	e006      	b.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004cc4:	e002      	b.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004cc6:	bf00      	nop
 8004cc8:	e000      	b.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004cca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ccc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d10a      	bne.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004cd4:	4b68      	ldr	r3, [pc, #416]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cd8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004cdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ce2:	4a65      	ldr	r2, [pc, #404]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ce4:	430b      	orrs	r3, r1
 8004ce6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ce8:	e003      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cfa:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004cfe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004d02:	2300      	movs	r3, #0
 8004d04:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004d08:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	d051      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d1c:	d035      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004d1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d22:	d82e      	bhi.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004d24:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004d28:	d031      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004d2a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004d2e:	d828      	bhi.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004d30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d34:	d01a      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004d36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d3a:	d822      	bhi.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d003      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004d40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d44:	d007      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004d46:	e01c      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d48:	4b4b      	ldr	r3, [pc, #300]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4c:	4a4a      	ldr	r2, [pc, #296]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004d54:	e01c      	b.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d5a:	3308      	adds	r3, #8
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f001 fa6e 	bl	8006240 <RCCEx_PLL2_Config>
 8004d64:	4603      	mov	r3, r0
 8004d66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004d6a:	e011      	b.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d70:	3328      	adds	r3, #40	; 0x28
 8004d72:	2100      	movs	r1, #0
 8004d74:	4618      	mov	r0, r3
 8004d76:	f001 fb15 	bl	80063a4 <RCCEx_PLL3_Config>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004d80:	e006      	b.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004d88:	e002      	b.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004d8a:	bf00      	nop
 8004d8c:	e000      	b.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004d8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d10a      	bne.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004d98:	4b37      	ldr	r3, [pc, #220]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d9c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004da6:	4a34      	ldr	r2, [pc, #208]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004da8:	430b      	orrs	r3, r1
 8004daa:	6513      	str	r3, [r2, #80]	; 0x50
 8004dac:	e003      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004db2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dbe:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004dc2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004dcc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	d056      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ddc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004de0:	d033      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004de2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004de6:	d82c      	bhi.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004de8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004dec:	d02f      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004dee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004df2:	d826      	bhi.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004df4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004df8:	d02b      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004dfa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004dfe:	d820      	bhi.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004e00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e04:	d012      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004e06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e0a:	d81a      	bhi.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d022      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e14:	d115      	bne.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e1a:	3308      	adds	r3, #8
 8004e1c:	2101      	movs	r1, #1
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f001 fa0e 	bl	8006240 <RCCEx_PLL2_Config>
 8004e24:	4603      	mov	r3, r0
 8004e26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004e2a:	e015      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e30:	3328      	adds	r3, #40	; 0x28
 8004e32:	2101      	movs	r1, #1
 8004e34:	4618      	mov	r0, r3
 8004e36:	f001 fab5 	bl	80063a4 <RCCEx_PLL3_Config>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004e40:	e00a      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004e48:	e006      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004e4a:	bf00      	nop
 8004e4c:	e004      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004e4e:	bf00      	nop
 8004e50:	e002      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004e52:	bf00      	nop
 8004e54:	e000      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004e56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d10d      	bne.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004e60:	4b05      	ldr	r3, [pc, #20]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e64:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e6e:	4a02      	ldr	r2, [pc, #8]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e70:	430b      	orrs	r3, r1
 8004e72:	6513      	str	r3, [r2, #80]	; 0x50
 8004e74:	e006      	b.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004e76:	bf00      	nop
 8004e78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e80:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004e90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004e94:	2300      	movs	r3, #0
 8004e96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004e9a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	d055      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ea8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004eac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004eb0:	d033      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004eb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004eb6:	d82c      	bhi.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ebc:	d02f      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ec2:	d826      	bhi.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004ec4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ec8:	d02b      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004eca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ece:	d820      	bhi.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004ed0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ed4:	d012      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004ed6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004eda:	d81a      	bhi.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d022      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004ee0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ee4:	d115      	bne.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004eea:	3308      	adds	r3, #8
 8004eec:	2101      	movs	r1, #1
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f001 f9a6 	bl	8006240 <RCCEx_PLL2_Config>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004efa:	e015      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f00:	3328      	adds	r3, #40	; 0x28
 8004f02:	2101      	movs	r1, #1
 8004f04:	4618      	mov	r0, r3
 8004f06:	f001 fa4d 	bl	80063a4 <RCCEx_PLL3_Config>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004f10:	e00a      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004f18:	e006      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004f1a:	bf00      	nop
 8004f1c:	e004      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004f1e:	bf00      	nop
 8004f20:	e002      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004f22:	bf00      	nop
 8004f24:	e000      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004f26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d10b      	bne.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004f30:	4ba3      	ldr	r3, [pc, #652]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f34:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f3c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f40:	4a9f      	ldr	r2, [pc, #636]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f42:	430b      	orrs	r3, r1
 8004f44:	6593      	str	r3, [r2, #88]	; 0x58
 8004f46:	e003      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f4c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f58:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004f5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004f60:	2300      	movs	r3, #0
 8004f62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004f66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004f6a:	460b      	mov	r3, r1
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	d037      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f7a:	d00e      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004f7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f80:	d816      	bhi.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d018      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004f86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f8a:	d111      	bne.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f8c:	4b8c      	ldr	r3, [pc, #560]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f90:	4a8b      	ldr	r2, [pc, #556]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004f98:	e00f      	b.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f9e:	3308      	adds	r3, #8
 8004fa0:	2101      	movs	r1, #1
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f001 f94c 	bl	8006240 <RCCEx_PLL2_Config>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004fae:	e004      	b.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004fb6:	e000      	b.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004fb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d10a      	bne.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004fc2:	4b7f      	ldr	r3, [pc, #508]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fc6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd0:	4a7b      	ldr	r2, [pc, #492]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fd2:	430b      	orrs	r3, r1
 8004fd4:	6513      	str	r3, [r2, #80]	; 0x50
 8004fd6:	e003      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fd8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004fdc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004fec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004ff6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	d039      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005000:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005004:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005006:	2b03      	cmp	r3, #3
 8005008:	d81c      	bhi.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800500a:	a201      	add	r2, pc, #4	; (adr r2, 8005010 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800500c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005010:	0800504d 	.word	0x0800504d
 8005014:	08005021 	.word	0x08005021
 8005018:	0800502f 	.word	0x0800502f
 800501c:	0800504d 	.word	0x0800504d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005020:	4b67      	ldr	r3, [pc, #412]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005024:	4a66      	ldr	r2, [pc, #408]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005026:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800502a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800502c:	e00f      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800502e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005032:	3308      	adds	r3, #8
 8005034:	2102      	movs	r1, #2
 8005036:	4618      	mov	r0, r3
 8005038:	f001 f902 	bl	8006240 <RCCEx_PLL2_Config>
 800503c:	4603      	mov	r3, r0
 800503e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005042:	e004      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800504a:	e000      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800504c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800504e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005052:	2b00      	cmp	r3, #0
 8005054:	d10a      	bne.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005056:	4b5a      	ldr	r3, [pc, #360]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800505a:	f023 0103 	bic.w	r1, r3, #3
 800505e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005062:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005064:	4a56      	ldr	r2, [pc, #344]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005066:	430b      	orrs	r3, r1
 8005068:	64d3      	str	r3, [r2, #76]	; 0x4c
 800506a:	e003      	b.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800506c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005070:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005074:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005080:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005084:	2300      	movs	r3, #0
 8005086:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800508a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800508e:	460b      	mov	r3, r1
 8005090:	4313      	orrs	r3, r2
 8005092:	f000 809f 	beq.w	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005096:	4b4b      	ldr	r3, [pc, #300]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a4a      	ldr	r2, [pc, #296]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800509c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050a2:	f7fc fceb 	bl	8001a7c <HAL_GetTick>
 80050a6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050aa:	e00b      	b.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050ac:	f7fc fce6 	bl	8001a7c <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	2b64      	cmp	r3, #100	; 0x64
 80050ba:	d903      	bls.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80050c2:	e005      	b.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050c4:	4b3f      	ldr	r3, [pc, #252]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d0ed      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80050d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d179      	bne.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80050d8:	4b39      	ldr	r3, [pc, #228]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80050dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80050e4:	4053      	eors	r3, r2
 80050e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d015      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050ee:	4b34      	ldr	r3, [pc, #208]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050f6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80050fa:	4b31      	ldr	r3, [pc, #196]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050fe:	4a30      	ldr	r2, [pc, #192]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005104:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005106:	4b2e      	ldr	r3, [pc, #184]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800510a:	4a2d      	ldr	r2, [pc, #180]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800510c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005110:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005112:	4a2b      	ldr	r2, [pc, #172]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005114:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005118:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800511a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800511e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005122:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005126:	d118      	bne.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005128:	f7fc fca8 	bl	8001a7c <HAL_GetTick>
 800512c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005130:	e00d      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005132:	f7fc fca3 	bl	8001a7c <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800513c:	1ad2      	subs	r2, r2, r3
 800513e:	f241 3388 	movw	r3, #5000	; 0x1388
 8005142:	429a      	cmp	r2, r3
 8005144:	d903      	bls.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800514c:	e005      	b.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800514e:	4b1c      	ldr	r3, [pc, #112]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005152:	f003 0302 	and.w	r3, r3, #2
 8005156:	2b00      	cmp	r3, #0
 8005158:	d0eb      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800515a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800515e:	2b00      	cmp	r3, #0
 8005160:	d129      	bne.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005162:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005166:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800516a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800516e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005172:	d10e      	bne.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005174:	4b12      	ldr	r3, [pc, #72]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800517c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005180:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005184:	091a      	lsrs	r2, r3, #4
 8005186:	4b10      	ldr	r3, [pc, #64]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005188:	4013      	ands	r3, r2
 800518a:	4a0d      	ldr	r2, [pc, #52]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800518c:	430b      	orrs	r3, r1
 800518e:	6113      	str	r3, [r2, #16]
 8005190:	e005      	b.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005192:	4b0b      	ldr	r3, [pc, #44]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	4a0a      	ldr	r2, [pc, #40]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005198:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800519c:	6113      	str	r3, [r2, #16]
 800519e:	4b08      	ldr	r3, [pc, #32]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051a0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80051a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80051aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051ae:	4a04      	ldr	r2, [pc, #16]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051b0:	430b      	orrs	r3, r1
 80051b2:	6713      	str	r3, [r2, #112]	; 0x70
 80051b4:	e00e      	b.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80051b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80051be:	e009      	b.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80051c0:	58024400 	.word	0x58024400
 80051c4:	58024800 	.word	0x58024800
 80051c8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80051d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051dc:	f002 0301 	and.w	r3, r2, #1
 80051e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80051e4:	2300      	movs	r3, #0
 80051e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80051ea:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80051ee:	460b      	mov	r3, r1
 80051f0:	4313      	orrs	r3, r2
 80051f2:	f000 8089 	beq.w	8005308 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80051f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051fc:	2b28      	cmp	r3, #40	; 0x28
 80051fe:	d86b      	bhi.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005200:	a201      	add	r2, pc, #4	; (adr r2, 8005208 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005206:	bf00      	nop
 8005208:	080052e1 	.word	0x080052e1
 800520c:	080052d9 	.word	0x080052d9
 8005210:	080052d9 	.word	0x080052d9
 8005214:	080052d9 	.word	0x080052d9
 8005218:	080052d9 	.word	0x080052d9
 800521c:	080052d9 	.word	0x080052d9
 8005220:	080052d9 	.word	0x080052d9
 8005224:	080052d9 	.word	0x080052d9
 8005228:	080052ad 	.word	0x080052ad
 800522c:	080052d9 	.word	0x080052d9
 8005230:	080052d9 	.word	0x080052d9
 8005234:	080052d9 	.word	0x080052d9
 8005238:	080052d9 	.word	0x080052d9
 800523c:	080052d9 	.word	0x080052d9
 8005240:	080052d9 	.word	0x080052d9
 8005244:	080052d9 	.word	0x080052d9
 8005248:	080052c3 	.word	0x080052c3
 800524c:	080052d9 	.word	0x080052d9
 8005250:	080052d9 	.word	0x080052d9
 8005254:	080052d9 	.word	0x080052d9
 8005258:	080052d9 	.word	0x080052d9
 800525c:	080052d9 	.word	0x080052d9
 8005260:	080052d9 	.word	0x080052d9
 8005264:	080052d9 	.word	0x080052d9
 8005268:	080052e1 	.word	0x080052e1
 800526c:	080052d9 	.word	0x080052d9
 8005270:	080052d9 	.word	0x080052d9
 8005274:	080052d9 	.word	0x080052d9
 8005278:	080052d9 	.word	0x080052d9
 800527c:	080052d9 	.word	0x080052d9
 8005280:	080052d9 	.word	0x080052d9
 8005284:	080052d9 	.word	0x080052d9
 8005288:	080052e1 	.word	0x080052e1
 800528c:	080052d9 	.word	0x080052d9
 8005290:	080052d9 	.word	0x080052d9
 8005294:	080052d9 	.word	0x080052d9
 8005298:	080052d9 	.word	0x080052d9
 800529c:	080052d9 	.word	0x080052d9
 80052a0:	080052d9 	.word	0x080052d9
 80052a4:	080052d9 	.word	0x080052d9
 80052a8:	080052e1 	.word	0x080052e1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80052ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052b0:	3308      	adds	r3, #8
 80052b2:	2101      	movs	r1, #1
 80052b4:	4618      	mov	r0, r3
 80052b6:	f000 ffc3 	bl	8006240 <RCCEx_PLL2_Config>
 80052ba:	4603      	mov	r3, r0
 80052bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80052c0:	e00f      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80052c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052c6:	3328      	adds	r3, #40	; 0x28
 80052c8:	2101      	movs	r1, #1
 80052ca:	4618      	mov	r0, r3
 80052cc:	f001 f86a 	bl	80063a4 <RCCEx_PLL3_Config>
 80052d0:	4603      	mov	r3, r0
 80052d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80052d6:	e004      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80052de:	e000      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80052e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d10a      	bne.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80052ea:	4bbf      	ldr	r3, [pc, #764]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80052ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ee:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80052f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052f8:	4abb      	ldr	r2, [pc, #748]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80052fa:	430b      	orrs	r3, r1
 80052fc:	6553      	str	r3, [r2, #84]	; 0x54
 80052fe:	e003      	b.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005300:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005304:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005308:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800530c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005310:	f002 0302 	and.w	r3, r2, #2
 8005314:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005318:	2300      	movs	r3, #0
 800531a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800531e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005322:	460b      	mov	r3, r1
 8005324:	4313      	orrs	r3, r2
 8005326:	d041      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005328:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800532c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800532e:	2b05      	cmp	r3, #5
 8005330:	d824      	bhi.n	800537c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005332:	a201      	add	r2, pc, #4	; (adr r2, 8005338 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005338:	08005385 	.word	0x08005385
 800533c:	08005351 	.word	0x08005351
 8005340:	08005367 	.word	0x08005367
 8005344:	08005385 	.word	0x08005385
 8005348:	08005385 	.word	0x08005385
 800534c:	08005385 	.word	0x08005385
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005350:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005354:	3308      	adds	r3, #8
 8005356:	2101      	movs	r1, #1
 8005358:	4618      	mov	r0, r3
 800535a:	f000 ff71 	bl	8006240 <RCCEx_PLL2_Config>
 800535e:	4603      	mov	r3, r0
 8005360:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005364:	e00f      	b.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005366:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800536a:	3328      	adds	r3, #40	; 0x28
 800536c:	2101      	movs	r1, #1
 800536e:	4618      	mov	r0, r3
 8005370:	f001 f818 	bl	80063a4 <RCCEx_PLL3_Config>
 8005374:	4603      	mov	r3, r0
 8005376:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800537a:	e004      	b.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005382:	e000      	b.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005384:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005386:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800538a:	2b00      	cmp	r3, #0
 800538c:	d10a      	bne.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800538e:	4b96      	ldr	r3, [pc, #600]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005392:	f023 0107 	bic.w	r1, r3, #7
 8005396:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800539a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800539c:	4a92      	ldr	r2, [pc, #584]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800539e:	430b      	orrs	r3, r1
 80053a0:	6553      	str	r3, [r2, #84]	; 0x54
 80053a2:	e003      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b4:	f002 0304 	and.w	r3, r2, #4
 80053b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80053bc:	2300      	movs	r3, #0
 80053be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80053c2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80053c6:	460b      	mov	r3, r1
 80053c8:	4313      	orrs	r3, r2
 80053ca:	d044      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80053cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053d4:	2b05      	cmp	r3, #5
 80053d6:	d825      	bhi.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80053d8:	a201      	add	r2, pc, #4	; (adr r2, 80053e0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80053da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053de:	bf00      	nop
 80053e0:	0800542d 	.word	0x0800542d
 80053e4:	080053f9 	.word	0x080053f9
 80053e8:	0800540f 	.word	0x0800540f
 80053ec:	0800542d 	.word	0x0800542d
 80053f0:	0800542d 	.word	0x0800542d
 80053f4:	0800542d 	.word	0x0800542d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80053f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053fc:	3308      	adds	r3, #8
 80053fe:	2101      	movs	r1, #1
 8005400:	4618      	mov	r0, r3
 8005402:	f000 ff1d 	bl	8006240 <RCCEx_PLL2_Config>
 8005406:	4603      	mov	r3, r0
 8005408:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800540c:	e00f      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800540e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005412:	3328      	adds	r3, #40	; 0x28
 8005414:	2101      	movs	r1, #1
 8005416:	4618      	mov	r0, r3
 8005418:	f000 ffc4 	bl	80063a4 <RCCEx_PLL3_Config>
 800541c:	4603      	mov	r3, r0
 800541e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005422:	e004      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800542a:	e000      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800542c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800542e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005432:	2b00      	cmp	r3, #0
 8005434:	d10b      	bne.n	800544e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005436:	4b6c      	ldr	r3, [pc, #432]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800543a:	f023 0107 	bic.w	r1, r3, #7
 800543e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005442:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005446:	4a68      	ldr	r2, [pc, #416]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005448:	430b      	orrs	r3, r1
 800544a:	6593      	str	r3, [r2, #88]	; 0x58
 800544c:	e003      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800544e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005452:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005456:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800545a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800545e:	f002 0320 	and.w	r3, r2, #32
 8005462:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005466:	2300      	movs	r3, #0
 8005468:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800546c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005470:	460b      	mov	r3, r1
 8005472:	4313      	orrs	r3, r2
 8005474:	d055      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005476:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800547a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800547e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005482:	d033      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005484:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005488:	d82c      	bhi.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800548a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800548e:	d02f      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005490:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005494:	d826      	bhi.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005496:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800549a:	d02b      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800549c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80054a0:	d820      	bhi.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80054a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054a6:	d012      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80054a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054ac:	d81a      	bhi.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d022      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80054b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054b6:	d115      	bne.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054bc:	3308      	adds	r3, #8
 80054be:	2100      	movs	r1, #0
 80054c0:	4618      	mov	r0, r3
 80054c2:	f000 febd 	bl	8006240 <RCCEx_PLL2_Config>
 80054c6:	4603      	mov	r3, r0
 80054c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80054cc:	e015      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80054ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054d2:	3328      	adds	r3, #40	; 0x28
 80054d4:	2102      	movs	r1, #2
 80054d6:	4618      	mov	r0, r3
 80054d8:	f000 ff64 	bl	80063a4 <RCCEx_PLL3_Config>
 80054dc:	4603      	mov	r3, r0
 80054de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80054e2:	e00a      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80054ea:	e006      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80054ec:	bf00      	nop
 80054ee:	e004      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80054f0:	bf00      	nop
 80054f2:	e002      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80054f4:	bf00      	nop
 80054f6:	e000      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80054f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d10b      	bne.n	800551a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005502:	4b39      	ldr	r3, [pc, #228]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005506:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800550a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800550e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005512:	4a35      	ldr	r2, [pc, #212]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005514:	430b      	orrs	r3, r1
 8005516:	6553      	str	r3, [r2, #84]	; 0x54
 8005518:	e003      	b.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800551a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800551e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005522:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800552e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005532:	2300      	movs	r3, #0
 8005534:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005538:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800553c:	460b      	mov	r3, r1
 800553e:	4313      	orrs	r3, r2
 8005540:	d058      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005542:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005546:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800554a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800554e:	d033      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005550:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005554:	d82c      	bhi.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800555a:	d02f      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800555c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005560:	d826      	bhi.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005562:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005566:	d02b      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005568:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800556c:	d820      	bhi.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800556e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005572:	d012      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005574:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005578:	d81a      	bhi.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800557a:	2b00      	cmp	r3, #0
 800557c:	d022      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800557e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005582:	d115      	bne.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005584:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005588:	3308      	adds	r3, #8
 800558a:	2100      	movs	r1, #0
 800558c:	4618      	mov	r0, r3
 800558e:	f000 fe57 	bl	8006240 <RCCEx_PLL2_Config>
 8005592:	4603      	mov	r3, r0
 8005594:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005598:	e015      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800559a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800559e:	3328      	adds	r3, #40	; 0x28
 80055a0:	2102      	movs	r1, #2
 80055a2:	4618      	mov	r0, r3
 80055a4:	f000 fefe 	bl	80063a4 <RCCEx_PLL3_Config>
 80055a8:	4603      	mov	r3, r0
 80055aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80055ae:	e00a      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80055b6:	e006      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80055b8:	bf00      	nop
 80055ba:	e004      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80055bc:	bf00      	nop
 80055be:	e002      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80055c0:	bf00      	nop
 80055c2:	e000      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80055c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d10e      	bne.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80055ce:	4b06      	ldr	r3, [pc, #24]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80055d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055d2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80055d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055de:	4a02      	ldr	r2, [pc, #8]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80055e0:	430b      	orrs	r3, r1
 80055e2:	6593      	str	r3, [r2, #88]	; 0x58
 80055e4:	e006      	b.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80055e6:	bf00      	nop
 80055e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80055f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fc:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005600:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005604:	2300      	movs	r3, #0
 8005606:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800560a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800560e:	460b      	mov	r3, r1
 8005610:	4313      	orrs	r3, r2
 8005612:	d055      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005614:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005618:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800561c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005620:	d033      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005622:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005626:	d82c      	bhi.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005628:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800562c:	d02f      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800562e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005632:	d826      	bhi.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005634:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005638:	d02b      	beq.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800563a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800563e:	d820      	bhi.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005640:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005644:	d012      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005646:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800564a:	d81a      	bhi.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800564c:	2b00      	cmp	r3, #0
 800564e:	d022      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005650:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005654:	d115      	bne.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005656:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800565a:	3308      	adds	r3, #8
 800565c:	2100      	movs	r1, #0
 800565e:	4618      	mov	r0, r3
 8005660:	f000 fdee 	bl	8006240 <RCCEx_PLL2_Config>
 8005664:	4603      	mov	r3, r0
 8005666:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800566a:	e015      	b.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800566c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005670:	3328      	adds	r3, #40	; 0x28
 8005672:	2102      	movs	r1, #2
 8005674:	4618      	mov	r0, r3
 8005676:	f000 fe95 	bl	80063a4 <RCCEx_PLL3_Config>
 800567a:	4603      	mov	r3, r0
 800567c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005680:	e00a      	b.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005688:	e006      	b.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800568a:	bf00      	nop
 800568c:	e004      	b.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800568e:	bf00      	nop
 8005690:	e002      	b.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005692:	bf00      	nop
 8005694:	e000      	b.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005696:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005698:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800569c:	2b00      	cmp	r3, #0
 800569e:	d10b      	bne.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80056a0:	4ba1      	ldr	r3, [pc, #644]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056a4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80056a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80056b0:	4a9d      	ldr	r2, [pc, #628]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056b2:	430b      	orrs	r3, r1
 80056b4:	6593      	str	r3, [r2, #88]	; 0x58
 80056b6:	e003      	b.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80056c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c8:	f002 0308 	and.w	r3, r2, #8
 80056cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80056d0:	2300      	movs	r3, #0
 80056d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80056d6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80056da:	460b      	mov	r3, r1
 80056dc:	4313      	orrs	r3, r2
 80056de:	d01e      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80056e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056ec:	d10c      	bne.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80056ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056f2:	3328      	adds	r3, #40	; 0x28
 80056f4:	2102      	movs	r1, #2
 80056f6:	4618      	mov	r0, r3
 80056f8:	f000 fe54 	bl	80063a4 <RCCEx_PLL3_Config>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d002      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005708:	4b87      	ldr	r3, [pc, #540]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800570a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800570c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005710:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005714:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005718:	4a83      	ldr	r2, [pc, #524]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800571a:	430b      	orrs	r3, r1
 800571c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800571e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005726:	f002 0310 	and.w	r3, r2, #16
 800572a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800572e:	2300      	movs	r3, #0
 8005730:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005734:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005738:	460b      	mov	r3, r1
 800573a:	4313      	orrs	r3, r2
 800573c:	d01e      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800573e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005742:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005746:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800574a:	d10c      	bne.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800574c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005750:	3328      	adds	r3, #40	; 0x28
 8005752:	2102      	movs	r1, #2
 8005754:	4618      	mov	r0, r3
 8005756:	f000 fe25 	bl	80063a4 <RCCEx_PLL3_Config>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d002      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005766:	4b70      	ldr	r3, [pc, #448]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800576a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800576e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005772:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005776:	4a6c      	ldr	r2, [pc, #432]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005778:	430b      	orrs	r3, r1
 800577a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800577c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005784:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005788:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800578c:	2300      	movs	r3, #0
 800578e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005792:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005796:	460b      	mov	r3, r1
 8005798:	4313      	orrs	r3, r2
 800579a:	d03e      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800579c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80057a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057a8:	d022      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80057aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057ae:	d81b      	bhi.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d003      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80057b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057b8:	d00b      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80057ba:	e015      	b.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057c0:	3308      	adds	r3, #8
 80057c2:	2100      	movs	r1, #0
 80057c4:	4618      	mov	r0, r3
 80057c6:	f000 fd3b 	bl	8006240 <RCCEx_PLL2_Config>
 80057ca:	4603      	mov	r3, r0
 80057cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80057d0:	e00f      	b.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80057d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057d6:	3328      	adds	r3, #40	; 0x28
 80057d8:	2102      	movs	r1, #2
 80057da:	4618      	mov	r0, r3
 80057dc:	f000 fde2 	bl	80063a4 <RCCEx_PLL3_Config>
 80057e0:	4603      	mov	r3, r0
 80057e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80057e6:	e004      	b.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80057ee:	e000      	b.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80057f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d10b      	bne.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057fa:	4b4b      	ldr	r3, [pc, #300]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057fe:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005802:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005806:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800580a:	4a47      	ldr	r2, [pc, #284]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800580c:	430b      	orrs	r3, r1
 800580e:	6593      	str	r3, [r2, #88]	; 0x58
 8005810:	e003      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005812:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005816:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800581a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800581e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005822:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005826:	67bb      	str	r3, [r7, #120]	; 0x78
 8005828:	2300      	movs	r3, #0
 800582a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800582c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005830:	460b      	mov	r3, r1
 8005832:	4313      	orrs	r3, r2
 8005834:	d03b      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005836:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800583a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800583e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005842:	d01f      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005844:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005848:	d818      	bhi.n	800587c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800584a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800584e:	d003      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005850:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005854:	d007      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005856:	e011      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005858:	4b33      	ldr	r3, [pc, #204]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800585a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585c:	4a32      	ldr	r2, [pc, #200]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800585e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005862:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005864:	e00f      	b.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005866:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800586a:	3328      	adds	r3, #40	; 0x28
 800586c:	2101      	movs	r1, #1
 800586e:	4618      	mov	r0, r3
 8005870:	f000 fd98 	bl	80063a4 <RCCEx_PLL3_Config>
 8005874:	4603      	mov	r3, r0
 8005876:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800587a:	e004      	b.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005882:	e000      	b.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005884:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005886:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800588a:	2b00      	cmp	r3, #0
 800588c:	d10b      	bne.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800588e:	4b26      	ldr	r3, [pc, #152]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005892:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005896:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800589a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800589e:	4a22      	ldr	r2, [pc, #136]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058a0:	430b      	orrs	r3, r1
 80058a2:	6553      	str	r3, [r2, #84]	; 0x54
 80058a4:	e003      	b.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80058ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80058ba:	673b      	str	r3, [r7, #112]	; 0x70
 80058bc:	2300      	movs	r3, #0
 80058be:	677b      	str	r3, [r7, #116]	; 0x74
 80058c0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80058c4:	460b      	mov	r3, r1
 80058c6:	4313      	orrs	r3, r2
 80058c8:	d034      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80058ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d003      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80058d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058d8:	d007      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80058da:	e011      	b.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058dc:	4b12      	ldr	r3, [pc, #72]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e0:	4a11      	ldr	r2, [pc, #68]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80058e8:	e00e      	b.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80058ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058ee:	3308      	adds	r3, #8
 80058f0:	2102      	movs	r1, #2
 80058f2:	4618      	mov	r0, r3
 80058f4:	f000 fca4 	bl	8006240 <RCCEx_PLL2_Config>
 80058f8:	4603      	mov	r3, r0
 80058fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80058fe:	e003      	b.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005906:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005908:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800590c:	2b00      	cmp	r3, #0
 800590e:	d10d      	bne.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005910:	4b05      	ldr	r3, [pc, #20]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005914:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005918:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800591c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800591e:	4a02      	ldr	r2, [pc, #8]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005920:	430b      	orrs	r3, r1
 8005922:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005924:	e006      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005926:	bf00      	nop
 8005928:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800592c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005930:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005934:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005940:	66bb      	str	r3, [r7, #104]	; 0x68
 8005942:	2300      	movs	r3, #0
 8005944:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005946:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800594a:	460b      	mov	r3, r1
 800594c:	4313      	orrs	r3, r2
 800594e:	d00c      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005950:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005954:	3328      	adds	r3, #40	; 0x28
 8005956:	2102      	movs	r1, #2
 8005958:	4618      	mov	r0, r3
 800595a:	f000 fd23 	bl	80063a4 <RCCEx_PLL3_Config>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d002      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800596a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800596e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005972:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8005976:	663b      	str	r3, [r7, #96]	; 0x60
 8005978:	2300      	movs	r3, #0
 800597a:	667b      	str	r3, [r7, #100]	; 0x64
 800597c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005980:	460b      	mov	r3, r1
 8005982:	4313      	orrs	r3, r2
 8005984:	d038      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005986:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800598a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800598e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005992:	d018      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005994:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005998:	d811      	bhi.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800599a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800599e:	d014      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80059a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059a4:	d80b      	bhi.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d011      	beq.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80059aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059ae:	d106      	bne.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059b0:	4bc3      	ldr	r3, [pc, #780]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b4:	4ac2      	ldr	r2, [pc, #776]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80059bc:	e008      	b.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80059c4:	e004      	b.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80059c6:	bf00      	nop
 80059c8:	e002      	b.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80059ca:	bf00      	nop
 80059cc:	e000      	b.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80059ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d10b      	bne.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80059d8:	4bb9      	ldr	r3, [pc, #740]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059dc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80059e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059e8:	4ab5      	ldr	r2, [pc, #724]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059ea:	430b      	orrs	r3, r1
 80059ec:	6553      	str	r3, [r2, #84]	; 0x54
 80059ee:	e003      	b.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80059f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a00:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005a04:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a06:	2300      	movs	r3, #0
 8005a08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a0a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005a0e:	460b      	mov	r3, r1
 8005a10:	4313      	orrs	r3, r2
 8005a12:	d009      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005a14:	4baa      	ldr	r3, [pc, #680]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a18:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a22:	4aa7      	ldr	r2, [pc, #668]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a24:	430b      	orrs	r3, r1
 8005a26:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a30:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8005a34:	653b      	str	r3, [r7, #80]	; 0x50
 8005a36:	2300      	movs	r3, #0
 8005a38:	657b      	str	r3, [r7, #84]	; 0x54
 8005a3a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005a3e:	460b      	mov	r3, r1
 8005a40:	4313      	orrs	r3, r2
 8005a42:	d00a      	beq.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005a44:	4b9e      	ldr	r3, [pc, #632]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a46:	691b      	ldr	r3, [r3, #16]
 8005a48:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8005a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a50:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005a54:	4a9a      	ldr	r2, [pc, #616]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a56:	430b      	orrs	r3, r1
 8005a58:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a62:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005a66:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a68:	2300      	movs	r3, #0
 8005a6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a6c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005a70:	460b      	mov	r3, r1
 8005a72:	4313      	orrs	r3, r2
 8005a74:	d009      	beq.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a76:	4b92      	ldr	r3, [pc, #584]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a7a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8005a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a84:	4a8e      	ldr	r2, [pc, #568]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a86:	430b      	orrs	r3, r1
 8005a88:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a92:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8005a96:	643b      	str	r3, [r7, #64]	; 0x40
 8005a98:	2300      	movs	r3, #0
 8005a9a:	647b      	str	r3, [r7, #68]	; 0x44
 8005a9c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	d00e      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005aa6:	4b86      	ldr	r3, [pc, #536]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	4a85      	ldr	r2, [pc, #532]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005aac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ab0:	6113      	str	r3, [r2, #16]
 8005ab2:	4b83      	ldr	r3, [pc, #524]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ab4:	6919      	ldr	r1, [r3, #16]
 8005ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005abe:	4a80      	ldr	r2, [pc, #512]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ac0:	430b      	orrs	r3, r1
 8005ac2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005acc:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005ad0:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ad6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005ada:	460b      	mov	r3, r1
 8005adc:	4313      	orrs	r3, r2
 8005ade:	d009      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005ae0:	4b77      	ldr	r3, [pc, #476]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ae4:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aee:	4a74      	ldr	r2, [pc, #464]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005af0:	430b      	orrs	r3, r1
 8005af2:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005afc:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005b00:	633b      	str	r3, [r7, #48]	; 0x30
 8005b02:	2300      	movs	r3, #0
 8005b04:	637b      	str	r3, [r7, #52]	; 0x34
 8005b06:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005b0a:	460b      	mov	r3, r1
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	d00a      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005b10:	4b6b      	ldr	r3, [pc, #428]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b14:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8005b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b20:	4a67      	ldr	r2, [pc, #412]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b22:	430b      	orrs	r3, r1
 8005b24:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b2e:	2100      	movs	r1, #0
 8005b30:	62b9      	str	r1, [r7, #40]	; 0x28
 8005b32:	f003 0301 	and.w	r3, r3, #1
 8005b36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b38:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005b3c:	460b      	mov	r3, r1
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	d011      	beq.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b46:	3308      	adds	r3, #8
 8005b48:	2100      	movs	r1, #0
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f000 fb78 	bl	8006240 <RCCEx_PLL2_Config>
 8005b50:	4603      	mov	r3, r0
 8005b52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005b56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d003      	beq.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b6e:	2100      	movs	r1, #0
 8005b70:	6239      	str	r1, [r7, #32]
 8005b72:	f003 0302 	and.w	r3, r3, #2
 8005b76:	627b      	str	r3, [r7, #36]	; 0x24
 8005b78:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	d011      	beq.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b86:	3308      	adds	r3, #8
 8005b88:	2101      	movs	r1, #1
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f000 fb58 	bl	8006240 <RCCEx_PLL2_Config>
 8005b90:	4603      	mov	r3, r0
 8005b92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005b96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d003      	beq.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ba2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bae:	2100      	movs	r1, #0
 8005bb0:	61b9      	str	r1, [r7, #24]
 8005bb2:	f003 0304 	and.w	r3, r3, #4
 8005bb6:	61fb      	str	r3, [r7, #28]
 8005bb8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	d011      	beq.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bc6:	3308      	adds	r3, #8
 8005bc8:	2102      	movs	r1, #2
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f000 fb38 	bl	8006240 <RCCEx_PLL2_Config>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005bd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d003      	beq.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005be2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bee:	2100      	movs	r1, #0
 8005bf0:	6139      	str	r1, [r7, #16]
 8005bf2:	f003 0308 	and.w	r3, r3, #8
 8005bf6:	617b      	str	r3, [r7, #20]
 8005bf8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	d011      	beq.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c06:	3328      	adds	r3, #40	; 0x28
 8005c08:	2100      	movs	r1, #0
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f000 fbca 	bl	80063a4 <RCCEx_PLL3_Config>
 8005c10:	4603      	mov	r3, r0
 8005c12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8005c16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d003      	beq.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c22:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c2e:	2100      	movs	r1, #0
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	f003 0310 	and.w	r3, r3, #16
 8005c36:	60fb      	str	r3, [r7, #12]
 8005c38:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	d011      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c46:	3328      	adds	r3, #40	; 0x28
 8005c48:	2101      	movs	r1, #1
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f000 fbaa 	bl	80063a4 <RCCEx_PLL3_Config>
 8005c50:	4603      	mov	r3, r0
 8005c52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005c56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d003      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6e:	2100      	movs	r1, #0
 8005c70:	6039      	str	r1, [r7, #0]
 8005c72:	f003 0320 	and.w	r3, r3, #32
 8005c76:	607b      	str	r3, [r7, #4]
 8005c78:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	d011      	beq.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c86:	3328      	adds	r3, #40	; 0x28
 8005c88:	2102      	movs	r1, #2
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f000 fb8a 	bl	80063a4 <RCCEx_PLL3_Config>
 8005c90:	4603      	mov	r3, r0
 8005c92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005c96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d003      	beq.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ca2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8005ca6:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d101      	bne.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	e000      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cc0:	58024400 	.word	0x58024400

08005cc4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005cc8:	f7fe fd54 	bl	8004774 <HAL_RCC_GetHCLKFreq>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	4b06      	ldr	r3, [pc, #24]	; (8005ce8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005cd0:	6a1b      	ldr	r3, [r3, #32]
 8005cd2:	091b      	lsrs	r3, r3, #4
 8005cd4:	f003 0307 	and.w	r3, r3, #7
 8005cd8:	4904      	ldr	r1, [pc, #16]	; (8005cec <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005cda:	5ccb      	ldrb	r3, [r1, r3]
 8005cdc:	f003 031f 	and.w	r3, r3, #31
 8005ce0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	58024400 	.word	0x58024400
 8005cec:	0800f61c 	.word	0x0800f61c

08005cf0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b089      	sub	sp, #36	; 0x24
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005cf8:	4ba1      	ldr	r3, [pc, #644]	; (8005f80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cfc:	f003 0303 	and.w	r3, r3, #3
 8005d00:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005d02:	4b9f      	ldr	r3, [pc, #636]	; (8005f80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d06:	0b1b      	lsrs	r3, r3, #12
 8005d08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d0c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005d0e:	4b9c      	ldr	r3, [pc, #624]	; (8005f80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d12:	091b      	lsrs	r3, r3, #4
 8005d14:	f003 0301 	and.w	r3, r3, #1
 8005d18:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005d1a:	4b99      	ldr	r3, [pc, #612]	; (8005f80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d1e:	08db      	lsrs	r3, r3, #3
 8005d20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	fb02 f303 	mul.w	r3, r2, r3
 8005d2a:	ee07 3a90 	vmov	s15, r3
 8005d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d32:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f000 8111 	beq.w	8005f60 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	2b02      	cmp	r3, #2
 8005d42:	f000 8083 	beq.w	8005e4c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	f200 80a1 	bhi.w	8005e90 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d003      	beq.n	8005d5c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d056      	beq.n	8005e08 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005d5a:	e099      	b.n	8005e90 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d5c:	4b88      	ldr	r3, [pc, #544]	; (8005f80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 0320 	and.w	r3, r3, #32
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d02d      	beq.n	8005dc4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d68:	4b85      	ldr	r3, [pc, #532]	; (8005f80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	08db      	lsrs	r3, r3, #3
 8005d6e:	f003 0303 	and.w	r3, r3, #3
 8005d72:	4a84      	ldr	r2, [pc, #528]	; (8005f84 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005d74:	fa22 f303 	lsr.w	r3, r2, r3
 8005d78:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	ee07 3a90 	vmov	s15, r3
 8005d80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	ee07 3a90 	vmov	s15, r3
 8005d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d92:	4b7b      	ldr	r3, [pc, #492]	; (8005f80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d9a:	ee07 3a90 	vmov	s15, r3
 8005d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005da2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005da6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005f88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005daa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005db2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005db6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dbe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005dc2:	e087      	b.n	8005ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	ee07 3a90 	vmov	s15, r3
 8005dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dce:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005f8c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005dd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dd6:	4b6a      	ldr	r3, [pc, #424]	; (8005f80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dde:	ee07 3a90 	vmov	s15, r3
 8005de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005de6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dea:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005f88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005dee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005df2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005df6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e06:	e065      	b.n	8005ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	ee07 3a90 	vmov	s15, r3
 8005e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e12:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005f90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005e16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e1a:	4b59      	ldr	r3, [pc, #356]	; (8005f80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e22:	ee07 3a90 	vmov	s15, r3
 8005e26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e2e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005f88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e4a:	e043      	b.n	8005ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	ee07 3a90 	vmov	s15, r3
 8005e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e56:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005f94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005e5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e5e:	4b48      	ldr	r3, [pc, #288]	; (8005f80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e66:	ee07 3a90 	vmov	s15, r3
 8005e6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e72:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005f88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e8e:	e021      	b.n	8005ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	ee07 3a90 	vmov	s15, r3
 8005e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e9a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005f90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005e9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ea2:	4b37      	ldr	r3, [pc, #220]	; (8005f80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eaa:	ee07 3a90 	vmov	s15, r3
 8005eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005eb6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005f88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005eba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ec2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ece:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ed2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005ed4:	4b2a      	ldr	r3, [pc, #168]	; (8005f80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed8:	0a5b      	lsrs	r3, r3, #9
 8005eda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ede:	ee07 3a90 	vmov	s15, r3
 8005ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ee6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005eea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005eee:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ef2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ef6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005efa:	ee17 2a90 	vmov	r2, s15
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005f02:	4b1f      	ldr	r3, [pc, #124]	; (8005f80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f06:	0c1b      	lsrs	r3, r3, #16
 8005f08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f0c:	ee07 3a90 	vmov	s15, r3
 8005f10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f18:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f28:	ee17 2a90 	vmov	r2, s15
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005f30:	4b13      	ldr	r3, [pc, #76]	; (8005f80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f34:	0e1b      	lsrs	r3, r3, #24
 8005f36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f3a:	ee07 3a90 	vmov	s15, r3
 8005f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f56:	ee17 2a90 	vmov	r2, s15
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005f5e:	e008      	b.n	8005f72 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	609a      	str	r2, [r3, #8]
}
 8005f72:	bf00      	nop
 8005f74:	3724      	adds	r7, #36	; 0x24
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop
 8005f80:	58024400 	.word	0x58024400
 8005f84:	03d09000 	.word	0x03d09000
 8005f88:	46000000 	.word	0x46000000
 8005f8c:	4c742400 	.word	0x4c742400
 8005f90:	4a742400 	.word	0x4a742400
 8005f94:	4af42400 	.word	0x4af42400

08005f98 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b089      	sub	sp, #36	; 0x24
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005fa0:	4ba1      	ldr	r3, [pc, #644]	; (8006228 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa4:	f003 0303 	and.w	r3, r3, #3
 8005fa8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005faa:	4b9f      	ldr	r3, [pc, #636]	; (8006228 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fae:	0d1b      	lsrs	r3, r3, #20
 8005fb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fb4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005fb6:	4b9c      	ldr	r3, [pc, #624]	; (8006228 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fba:	0a1b      	lsrs	r3, r3, #8
 8005fbc:	f003 0301 	and.w	r3, r3, #1
 8005fc0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005fc2:	4b99      	ldr	r3, [pc, #612]	; (8006228 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fc6:	08db      	lsrs	r3, r3, #3
 8005fc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005fcc:	693a      	ldr	r2, [r7, #16]
 8005fce:	fb02 f303 	mul.w	r3, r2, r3
 8005fd2:	ee07 3a90 	vmov	s15, r3
 8005fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fda:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f000 8111 	beq.w	8006208 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	f000 8083 	beq.w	80060f4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	2b02      	cmp	r3, #2
 8005ff2:	f200 80a1 	bhi.w	8006138 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d003      	beq.n	8006004 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d056      	beq.n	80060b0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006002:	e099      	b.n	8006138 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006004:	4b88      	ldr	r3, [pc, #544]	; (8006228 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0320 	and.w	r3, r3, #32
 800600c:	2b00      	cmp	r3, #0
 800600e:	d02d      	beq.n	800606c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006010:	4b85      	ldr	r3, [pc, #532]	; (8006228 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	08db      	lsrs	r3, r3, #3
 8006016:	f003 0303 	and.w	r3, r3, #3
 800601a:	4a84      	ldr	r2, [pc, #528]	; (800622c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800601c:	fa22 f303 	lsr.w	r3, r2, r3
 8006020:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	ee07 3a90 	vmov	s15, r3
 8006028:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	ee07 3a90 	vmov	s15, r3
 8006032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800603a:	4b7b      	ldr	r3, [pc, #492]	; (8006228 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800603c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800603e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006042:	ee07 3a90 	vmov	s15, r3
 8006046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800604a:	ed97 6a03 	vldr	s12, [r7, #12]
 800604e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006230 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800605a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800605e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006066:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800606a:	e087      	b.n	800617c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	ee07 3a90 	vmov	s15, r3
 8006072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006076:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006234 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800607a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800607e:	4b6a      	ldr	r3, [pc, #424]	; (8006228 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006086:	ee07 3a90 	vmov	s15, r3
 800608a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800608e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006092:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006230 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800609a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800609e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060ae:	e065      	b.n	800617c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	ee07 3a90 	vmov	s15, r3
 80060b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006238 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80060be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060c2:	4b59      	ldr	r3, [pc, #356]	; (8006228 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060ca:	ee07 3a90 	vmov	s15, r3
 80060ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80060d6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006230 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80060da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060f2:	e043      	b.n	800617c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	ee07 3a90 	vmov	s15, r3
 80060fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060fe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800623c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006106:	4b48      	ldr	r3, [pc, #288]	; (8006228 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800610e:	ee07 3a90 	vmov	s15, r3
 8006112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006116:	ed97 6a03 	vldr	s12, [r7, #12]
 800611a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006230 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800611e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006126:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800612a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800612e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006132:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006136:	e021      	b.n	800617c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	ee07 3a90 	vmov	s15, r3
 800613e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006142:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006238 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800614a:	4b37      	ldr	r3, [pc, #220]	; (8006228 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800614c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006152:	ee07 3a90 	vmov	s15, r3
 8006156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800615a:	ed97 6a03 	vldr	s12, [r7, #12]
 800615e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006230 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800616a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800616e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006176:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800617a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800617c:	4b2a      	ldr	r3, [pc, #168]	; (8006228 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800617e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006180:	0a5b      	lsrs	r3, r3, #9
 8006182:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006186:	ee07 3a90 	vmov	s15, r3
 800618a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800618e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006192:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006196:	edd7 6a07 	vldr	s13, [r7, #28]
 800619a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800619e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061a2:	ee17 2a90 	vmov	r2, s15
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80061aa:	4b1f      	ldr	r3, [pc, #124]	; (8006228 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ae:	0c1b      	lsrs	r3, r3, #16
 80061b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061b4:	ee07 3a90 	vmov	s15, r3
 80061b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80061c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061d0:	ee17 2a90 	vmov	r2, s15
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80061d8:	4b13      	ldr	r3, [pc, #76]	; (8006228 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061dc:	0e1b      	lsrs	r3, r3, #24
 80061de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061e2:	ee07 3a90 	vmov	s15, r3
 80061e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80061f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061fe:	ee17 2a90 	vmov	r2, s15
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006206:	e008      	b.n	800621a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	609a      	str	r2, [r3, #8]
}
 800621a:	bf00      	nop
 800621c:	3724      	adds	r7, #36	; 0x24
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr
 8006226:	bf00      	nop
 8006228:	58024400 	.word	0x58024400
 800622c:	03d09000 	.word	0x03d09000
 8006230:	46000000 	.word	0x46000000
 8006234:	4c742400 	.word	0x4c742400
 8006238:	4a742400 	.word	0x4a742400
 800623c:	4af42400 	.word	0x4af42400

08006240 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800624a:	2300      	movs	r3, #0
 800624c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800624e:	4b53      	ldr	r3, [pc, #332]	; (800639c <RCCEx_PLL2_Config+0x15c>)
 8006250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006252:	f003 0303 	and.w	r3, r3, #3
 8006256:	2b03      	cmp	r3, #3
 8006258:	d101      	bne.n	800625e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e099      	b.n	8006392 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800625e:	4b4f      	ldr	r3, [pc, #316]	; (800639c <RCCEx_PLL2_Config+0x15c>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a4e      	ldr	r2, [pc, #312]	; (800639c <RCCEx_PLL2_Config+0x15c>)
 8006264:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006268:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800626a:	f7fb fc07 	bl	8001a7c <HAL_GetTick>
 800626e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006270:	e008      	b.n	8006284 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006272:	f7fb fc03 	bl	8001a7c <HAL_GetTick>
 8006276:	4602      	mov	r2, r0
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	2b02      	cmp	r3, #2
 800627e:	d901      	bls.n	8006284 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006280:	2303      	movs	r3, #3
 8006282:	e086      	b.n	8006392 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006284:	4b45      	ldr	r3, [pc, #276]	; (800639c <RCCEx_PLL2_Config+0x15c>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1f0      	bne.n	8006272 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006290:	4b42      	ldr	r3, [pc, #264]	; (800639c <RCCEx_PLL2_Config+0x15c>)
 8006292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006294:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	031b      	lsls	r3, r3, #12
 800629e:	493f      	ldr	r1, [pc, #252]	; (800639c <RCCEx_PLL2_Config+0x15c>)
 80062a0:	4313      	orrs	r3, r2
 80062a2:	628b      	str	r3, [r1, #40]	; 0x28
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	3b01      	subs	r3, #1
 80062aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	3b01      	subs	r3, #1
 80062b4:	025b      	lsls	r3, r3, #9
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	431a      	orrs	r2, r3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	3b01      	subs	r3, #1
 80062c0:	041b      	lsls	r3, r3, #16
 80062c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80062c6:	431a      	orrs	r2, r3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	3b01      	subs	r3, #1
 80062ce:	061b      	lsls	r3, r3, #24
 80062d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80062d4:	4931      	ldr	r1, [pc, #196]	; (800639c <RCCEx_PLL2_Config+0x15c>)
 80062d6:	4313      	orrs	r3, r2
 80062d8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80062da:	4b30      	ldr	r3, [pc, #192]	; (800639c <RCCEx_PLL2_Config+0x15c>)
 80062dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	695b      	ldr	r3, [r3, #20]
 80062e6:	492d      	ldr	r1, [pc, #180]	; (800639c <RCCEx_PLL2_Config+0x15c>)
 80062e8:	4313      	orrs	r3, r2
 80062ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80062ec:	4b2b      	ldr	r3, [pc, #172]	; (800639c <RCCEx_PLL2_Config+0x15c>)
 80062ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f0:	f023 0220 	bic.w	r2, r3, #32
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	699b      	ldr	r3, [r3, #24]
 80062f8:	4928      	ldr	r1, [pc, #160]	; (800639c <RCCEx_PLL2_Config+0x15c>)
 80062fa:	4313      	orrs	r3, r2
 80062fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80062fe:	4b27      	ldr	r3, [pc, #156]	; (800639c <RCCEx_PLL2_Config+0x15c>)
 8006300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006302:	4a26      	ldr	r2, [pc, #152]	; (800639c <RCCEx_PLL2_Config+0x15c>)
 8006304:	f023 0310 	bic.w	r3, r3, #16
 8006308:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800630a:	4b24      	ldr	r3, [pc, #144]	; (800639c <RCCEx_PLL2_Config+0x15c>)
 800630c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800630e:	4b24      	ldr	r3, [pc, #144]	; (80063a0 <RCCEx_PLL2_Config+0x160>)
 8006310:	4013      	ands	r3, r2
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	69d2      	ldr	r2, [r2, #28]
 8006316:	00d2      	lsls	r2, r2, #3
 8006318:	4920      	ldr	r1, [pc, #128]	; (800639c <RCCEx_PLL2_Config+0x15c>)
 800631a:	4313      	orrs	r3, r2
 800631c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800631e:	4b1f      	ldr	r3, [pc, #124]	; (800639c <RCCEx_PLL2_Config+0x15c>)
 8006320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006322:	4a1e      	ldr	r2, [pc, #120]	; (800639c <RCCEx_PLL2_Config+0x15c>)
 8006324:	f043 0310 	orr.w	r3, r3, #16
 8006328:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d106      	bne.n	800633e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006330:	4b1a      	ldr	r3, [pc, #104]	; (800639c <RCCEx_PLL2_Config+0x15c>)
 8006332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006334:	4a19      	ldr	r2, [pc, #100]	; (800639c <RCCEx_PLL2_Config+0x15c>)
 8006336:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800633a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800633c:	e00f      	b.n	800635e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	2b01      	cmp	r3, #1
 8006342:	d106      	bne.n	8006352 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006344:	4b15      	ldr	r3, [pc, #84]	; (800639c <RCCEx_PLL2_Config+0x15c>)
 8006346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006348:	4a14      	ldr	r2, [pc, #80]	; (800639c <RCCEx_PLL2_Config+0x15c>)
 800634a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800634e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006350:	e005      	b.n	800635e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006352:	4b12      	ldr	r3, [pc, #72]	; (800639c <RCCEx_PLL2_Config+0x15c>)
 8006354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006356:	4a11      	ldr	r2, [pc, #68]	; (800639c <RCCEx_PLL2_Config+0x15c>)
 8006358:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800635c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800635e:	4b0f      	ldr	r3, [pc, #60]	; (800639c <RCCEx_PLL2_Config+0x15c>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a0e      	ldr	r2, [pc, #56]	; (800639c <RCCEx_PLL2_Config+0x15c>)
 8006364:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006368:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800636a:	f7fb fb87 	bl	8001a7c <HAL_GetTick>
 800636e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006370:	e008      	b.n	8006384 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006372:	f7fb fb83 	bl	8001a7c <HAL_GetTick>
 8006376:	4602      	mov	r2, r0
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	1ad3      	subs	r3, r2, r3
 800637c:	2b02      	cmp	r3, #2
 800637e:	d901      	bls.n	8006384 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e006      	b.n	8006392 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006384:	4b05      	ldr	r3, [pc, #20]	; (800639c <RCCEx_PLL2_Config+0x15c>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800638c:	2b00      	cmp	r3, #0
 800638e:	d0f0      	beq.n	8006372 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006390:	7bfb      	ldrb	r3, [r7, #15]
}
 8006392:	4618      	mov	r0, r3
 8006394:	3710      	adds	r7, #16
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	58024400 	.word	0x58024400
 80063a0:	ffff0007 	.word	0xffff0007

080063a4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80063ae:	2300      	movs	r3, #0
 80063b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80063b2:	4b53      	ldr	r3, [pc, #332]	; (8006500 <RCCEx_PLL3_Config+0x15c>)
 80063b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b6:	f003 0303 	and.w	r3, r3, #3
 80063ba:	2b03      	cmp	r3, #3
 80063bc:	d101      	bne.n	80063c2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	e099      	b.n	80064f6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80063c2:	4b4f      	ldr	r3, [pc, #316]	; (8006500 <RCCEx_PLL3_Config+0x15c>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a4e      	ldr	r2, [pc, #312]	; (8006500 <RCCEx_PLL3_Config+0x15c>)
 80063c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063ce:	f7fb fb55 	bl	8001a7c <HAL_GetTick>
 80063d2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80063d4:	e008      	b.n	80063e8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80063d6:	f7fb fb51 	bl	8001a7c <HAL_GetTick>
 80063da:	4602      	mov	r2, r0
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	1ad3      	subs	r3, r2, r3
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d901      	bls.n	80063e8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80063e4:	2303      	movs	r3, #3
 80063e6:	e086      	b.n	80064f6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80063e8:	4b45      	ldr	r3, [pc, #276]	; (8006500 <RCCEx_PLL3_Config+0x15c>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d1f0      	bne.n	80063d6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80063f4:	4b42      	ldr	r3, [pc, #264]	; (8006500 <RCCEx_PLL3_Config+0x15c>)
 80063f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	051b      	lsls	r3, r3, #20
 8006402:	493f      	ldr	r1, [pc, #252]	; (8006500 <RCCEx_PLL3_Config+0x15c>)
 8006404:	4313      	orrs	r3, r2
 8006406:	628b      	str	r3, [r1, #40]	; 0x28
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	3b01      	subs	r3, #1
 800640e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	3b01      	subs	r3, #1
 8006418:	025b      	lsls	r3, r3, #9
 800641a:	b29b      	uxth	r3, r3
 800641c:	431a      	orrs	r2, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	3b01      	subs	r3, #1
 8006424:	041b      	lsls	r3, r3, #16
 8006426:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800642a:	431a      	orrs	r2, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	691b      	ldr	r3, [r3, #16]
 8006430:	3b01      	subs	r3, #1
 8006432:	061b      	lsls	r3, r3, #24
 8006434:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006438:	4931      	ldr	r1, [pc, #196]	; (8006500 <RCCEx_PLL3_Config+0x15c>)
 800643a:	4313      	orrs	r3, r2
 800643c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800643e:	4b30      	ldr	r3, [pc, #192]	; (8006500 <RCCEx_PLL3_Config+0x15c>)
 8006440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006442:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	695b      	ldr	r3, [r3, #20]
 800644a:	492d      	ldr	r1, [pc, #180]	; (8006500 <RCCEx_PLL3_Config+0x15c>)
 800644c:	4313      	orrs	r3, r2
 800644e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006450:	4b2b      	ldr	r3, [pc, #172]	; (8006500 <RCCEx_PLL3_Config+0x15c>)
 8006452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006454:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	699b      	ldr	r3, [r3, #24]
 800645c:	4928      	ldr	r1, [pc, #160]	; (8006500 <RCCEx_PLL3_Config+0x15c>)
 800645e:	4313      	orrs	r3, r2
 8006460:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006462:	4b27      	ldr	r3, [pc, #156]	; (8006500 <RCCEx_PLL3_Config+0x15c>)
 8006464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006466:	4a26      	ldr	r2, [pc, #152]	; (8006500 <RCCEx_PLL3_Config+0x15c>)
 8006468:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800646c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800646e:	4b24      	ldr	r3, [pc, #144]	; (8006500 <RCCEx_PLL3_Config+0x15c>)
 8006470:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006472:	4b24      	ldr	r3, [pc, #144]	; (8006504 <RCCEx_PLL3_Config+0x160>)
 8006474:	4013      	ands	r3, r2
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	69d2      	ldr	r2, [r2, #28]
 800647a:	00d2      	lsls	r2, r2, #3
 800647c:	4920      	ldr	r1, [pc, #128]	; (8006500 <RCCEx_PLL3_Config+0x15c>)
 800647e:	4313      	orrs	r3, r2
 8006480:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006482:	4b1f      	ldr	r3, [pc, #124]	; (8006500 <RCCEx_PLL3_Config+0x15c>)
 8006484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006486:	4a1e      	ldr	r2, [pc, #120]	; (8006500 <RCCEx_PLL3_Config+0x15c>)
 8006488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800648c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d106      	bne.n	80064a2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006494:	4b1a      	ldr	r3, [pc, #104]	; (8006500 <RCCEx_PLL3_Config+0x15c>)
 8006496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006498:	4a19      	ldr	r2, [pc, #100]	; (8006500 <RCCEx_PLL3_Config+0x15c>)
 800649a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800649e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80064a0:	e00f      	b.n	80064c2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d106      	bne.n	80064b6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80064a8:	4b15      	ldr	r3, [pc, #84]	; (8006500 <RCCEx_PLL3_Config+0x15c>)
 80064aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ac:	4a14      	ldr	r2, [pc, #80]	; (8006500 <RCCEx_PLL3_Config+0x15c>)
 80064ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80064b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80064b4:	e005      	b.n	80064c2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80064b6:	4b12      	ldr	r3, [pc, #72]	; (8006500 <RCCEx_PLL3_Config+0x15c>)
 80064b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ba:	4a11      	ldr	r2, [pc, #68]	; (8006500 <RCCEx_PLL3_Config+0x15c>)
 80064bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80064c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80064c2:	4b0f      	ldr	r3, [pc, #60]	; (8006500 <RCCEx_PLL3_Config+0x15c>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a0e      	ldr	r2, [pc, #56]	; (8006500 <RCCEx_PLL3_Config+0x15c>)
 80064c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064ce:	f7fb fad5 	bl	8001a7c <HAL_GetTick>
 80064d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80064d4:	e008      	b.n	80064e8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80064d6:	f7fb fad1 	bl	8001a7c <HAL_GetTick>
 80064da:	4602      	mov	r2, r0
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	1ad3      	subs	r3, r2, r3
 80064e0:	2b02      	cmp	r3, #2
 80064e2:	d901      	bls.n	80064e8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80064e4:	2303      	movs	r3, #3
 80064e6:	e006      	b.n	80064f6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80064e8:	4b05      	ldr	r3, [pc, #20]	; (8006500 <RCCEx_PLL3_Config+0x15c>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d0f0      	beq.n	80064d6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80064f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3710      	adds	r7, #16
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	58024400 	.word	0x58024400
 8006504:	ffff0007 	.word	0xffff0007

08006508 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d101      	bne.n	800651a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e049      	b.n	80065ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006520:	b2db      	uxtb	r3, r3
 8006522:	2b00      	cmp	r3, #0
 8006524:	d106      	bne.n	8006534 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 f841 	bl	80065b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2202      	movs	r2, #2
 8006538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	3304      	adds	r3, #4
 8006544:	4619      	mov	r1, r3
 8006546:	4610      	mov	r0, r2
 8006548:	f000 fa00 	bl	800694c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2201      	movs	r2, #1
 8006590:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3708      	adds	r7, #8
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}

080065b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80065b6:	b480      	push	{r7}
 80065b8:	b083      	sub	sp, #12
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80065be:	bf00      	nop
 80065c0:	370c      	adds	r7, #12
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr
	...

080065cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b085      	sub	sp, #20
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d001      	beq.n	80065e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	e054      	b.n	800668e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2202      	movs	r2, #2
 80065e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	68da      	ldr	r2, [r3, #12]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f042 0201 	orr.w	r2, r2, #1
 80065fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a26      	ldr	r2, [pc, #152]	; (800669c <HAL_TIM_Base_Start_IT+0xd0>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d022      	beq.n	800664c <HAL_TIM_Base_Start_IT+0x80>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800660e:	d01d      	beq.n	800664c <HAL_TIM_Base_Start_IT+0x80>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a22      	ldr	r2, [pc, #136]	; (80066a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d018      	beq.n	800664c <HAL_TIM_Base_Start_IT+0x80>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a21      	ldr	r2, [pc, #132]	; (80066a4 <HAL_TIM_Base_Start_IT+0xd8>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d013      	beq.n	800664c <HAL_TIM_Base_Start_IT+0x80>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a1f      	ldr	r2, [pc, #124]	; (80066a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d00e      	beq.n	800664c <HAL_TIM_Base_Start_IT+0x80>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a1e      	ldr	r2, [pc, #120]	; (80066ac <HAL_TIM_Base_Start_IT+0xe0>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d009      	beq.n	800664c <HAL_TIM_Base_Start_IT+0x80>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a1c      	ldr	r2, [pc, #112]	; (80066b0 <HAL_TIM_Base_Start_IT+0xe4>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d004      	beq.n	800664c <HAL_TIM_Base_Start_IT+0x80>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a1b      	ldr	r2, [pc, #108]	; (80066b4 <HAL_TIM_Base_Start_IT+0xe8>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d115      	bne.n	8006678 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	689a      	ldr	r2, [r3, #8]
 8006652:	4b19      	ldr	r3, [pc, #100]	; (80066b8 <HAL_TIM_Base_Start_IT+0xec>)
 8006654:	4013      	ands	r3, r2
 8006656:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2b06      	cmp	r3, #6
 800665c:	d015      	beq.n	800668a <HAL_TIM_Base_Start_IT+0xbe>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006664:	d011      	beq.n	800668a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f042 0201 	orr.w	r2, r2, #1
 8006674:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006676:	e008      	b.n	800668a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f042 0201 	orr.w	r2, r2, #1
 8006686:	601a      	str	r2, [r3, #0]
 8006688:	e000      	b.n	800668c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800668a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	3714      	adds	r7, #20
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr
 800669a:	bf00      	nop
 800669c:	40010000 	.word	0x40010000
 80066a0:	40000400 	.word	0x40000400
 80066a4:	40000800 	.word	0x40000800
 80066a8:	40000c00 	.word	0x40000c00
 80066ac:	40010400 	.word	0x40010400
 80066b0:	40001800 	.word	0x40001800
 80066b4:	40014000 	.word	0x40014000
 80066b8:	00010007 	.word	0x00010007

080066bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	f003 0302 	and.w	r3, r3, #2
 80066ce:	2b02      	cmp	r3, #2
 80066d0:	d122      	bne.n	8006718 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	f003 0302 	and.w	r3, r3, #2
 80066dc:	2b02      	cmp	r3, #2
 80066de:	d11b      	bne.n	8006718 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f06f 0202 	mvn.w	r2, #2
 80066e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2201      	movs	r2, #1
 80066ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	699b      	ldr	r3, [r3, #24]
 80066f6:	f003 0303 	and.w	r3, r3, #3
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d003      	beq.n	8006706 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 f905 	bl	800690e <HAL_TIM_IC_CaptureCallback>
 8006704:	e005      	b.n	8006712 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 f8f7 	bl	80068fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 f908 	bl	8006922 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	f003 0304 	and.w	r3, r3, #4
 8006722:	2b04      	cmp	r3, #4
 8006724:	d122      	bne.n	800676c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	f003 0304 	and.w	r3, r3, #4
 8006730:	2b04      	cmp	r3, #4
 8006732:	d11b      	bne.n	800676c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f06f 0204 	mvn.w	r2, #4
 800673c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2202      	movs	r2, #2
 8006742:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	699b      	ldr	r3, [r3, #24]
 800674a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800674e:	2b00      	cmp	r3, #0
 8006750:	d003      	beq.n	800675a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 f8db 	bl	800690e <HAL_TIM_IC_CaptureCallback>
 8006758:	e005      	b.n	8006766 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 f8cd 	bl	80068fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 f8de 	bl	8006922 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	f003 0308 	and.w	r3, r3, #8
 8006776:	2b08      	cmp	r3, #8
 8006778:	d122      	bne.n	80067c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	f003 0308 	and.w	r3, r3, #8
 8006784:	2b08      	cmp	r3, #8
 8006786:	d11b      	bne.n	80067c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f06f 0208 	mvn.w	r2, #8
 8006790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2204      	movs	r2, #4
 8006796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	69db      	ldr	r3, [r3, #28]
 800679e:	f003 0303 	and.w	r3, r3, #3
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d003      	beq.n	80067ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 f8b1 	bl	800690e <HAL_TIM_IC_CaptureCallback>
 80067ac:	e005      	b.n	80067ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 f8a3 	bl	80068fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 f8b4 	bl	8006922 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	f003 0310 	and.w	r3, r3, #16
 80067ca:	2b10      	cmp	r3, #16
 80067cc:	d122      	bne.n	8006814 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	f003 0310 	and.w	r3, r3, #16
 80067d8:	2b10      	cmp	r3, #16
 80067da:	d11b      	bne.n	8006814 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f06f 0210 	mvn.w	r2, #16
 80067e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2208      	movs	r2, #8
 80067ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	69db      	ldr	r3, [r3, #28]
 80067f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d003      	beq.n	8006802 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 f887 	bl	800690e <HAL_TIM_IC_CaptureCallback>
 8006800:	e005      	b.n	800680e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 f879 	bl	80068fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 f88a 	bl	8006922 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	f003 0301 	and.w	r3, r3, #1
 800681e:	2b01      	cmp	r3, #1
 8006820:	d10e      	bne.n	8006840 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	f003 0301 	and.w	r3, r3, #1
 800682c:	2b01      	cmp	r3, #1
 800682e:	d107      	bne.n	8006840 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f06f 0201 	mvn.w	r2, #1
 8006838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f7fa fcee 	bl	800121c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800684a:	2b80      	cmp	r3, #128	; 0x80
 800684c:	d10e      	bne.n	800686c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006858:	2b80      	cmp	r3, #128	; 0x80
 800685a:	d107      	bne.n	800686c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 f914 	bl	8006a94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006876:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800687a:	d10e      	bne.n	800689a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006886:	2b80      	cmp	r3, #128	; 0x80
 8006888:	d107      	bne.n	800689a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 f907 	bl	8006aa8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	691b      	ldr	r3, [r3, #16]
 80068a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068a4:	2b40      	cmp	r3, #64	; 0x40
 80068a6:	d10e      	bne.n	80068c6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068b2:	2b40      	cmp	r3, #64	; 0x40
 80068b4:	d107      	bne.n	80068c6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80068be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 f838 	bl	8006936 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	691b      	ldr	r3, [r3, #16]
 80068cc:	f003 0320 	and.w	r3, r3, #32
 80068d0:	2b20      	cmp	r3, #32
 80068d2:	d10e      	bne.n	80068f2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	f003 0320 	and.w	r3, r3, #32
 80068de:	2b20      	cmp	r3, #32
 80068e0:	d107      	bne.n	80068f2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f06f 0220 	mvn.w	r2, #32
 80068ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 f8c7 	bl	8006a80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80068f2:	bf00      	nop
 80068f4:	3708      	adds	r7, #8
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}

080068fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068fa:	b480      	push	{r7}
 80068fc:	b083      	sub	sp, #12
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006902:	bf00      	nop
 8006904:	370c      	adds	r7, #12
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr

0800690e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800690e:	b480      	push	{r7}
 8006910:	b083      	sub	sp, #12
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006916:	bf00      	nop
 8006918:	370c      	adds	r7, #12
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr

08006922 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006922:	b480      	push	{r7}
 8006924:	b083      	sub	sp, #12
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800692a:	bf00      	nop
 800692c:	370c      	adds	r7, #12
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr

08006936 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006936:	b480      	push	{r7}
 8006938:	b083      	sub	sp, #12
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800693e:	bf00      	nop
 8006940:	370c      	adds	r7, #12
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr
	...

0800694c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800694c:	b480      	push	{r7}
 800694e:	b085      	sub	sp, #20
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	4a40      	ldr	r2, [pc, #256]	; (8006a60 <TIM_Base_SetConfig+0x114>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d013      	beq.n	800698c <TIM_Base_SetConfig+0x40>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800696a:	d00f      	beq.n	800698c <TIM_Base_SetConfig+0x40>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	4a3d      	ldr	r2, [pc, #244]	; (8006a64 <TIM_Base_SetConfig+0x118>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d00b      	beq.n	800698c <TIM_Base_SetConfig+0x40>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a3c      	ldr	r2, [pc, #240]	; (8006a68 <TIM_Base_SetConfig+0x11c>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d007      	beq.n	800698c <TIM_Base_SetConfig+0x40>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a3b      	ldr	r2, [pc, #236]	; (8006a6c <TIM_Base_SetConfig+0x120>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d003      	beq.n	800698c <TIM_Base_SetConfig+0x40>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a3a      	ldr	r2, [pc, #232]	; (8006a70 <TIM_Base_SetConfig+0x124>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d108      	bne.n	800699e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006992:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	68fa      	ldr	r2, [r7, #12]
 800699a:	4313      	orrs	r3, r2
 800699c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a2f      	ldr	r2, [pc, #188]	; (8006a60 <TIM_Base_SetConfig+0x114>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d01f      	beq.n	80069e6 <TIM_Base_SetConfig+0x9a>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069ac:	d01b      	beq.n	80069e6 <TIM_Base_SetConfig+0x9a>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4a2c      	ldr	r2, [pc, #176]	; (8006a64 <TIM_Base_SetConfig+0x118>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d017      	beq.n	80069e6 <TIM_Base_SetConfig+0x9a>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4a2b      	ldr	r2, [pc, #172]	; (8006a68 <TIM_Base_SetConfig+0x11c>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d013      	beq.n	80069e6 <TIM_Base_SetConfig+0x9a>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4a2a      	ldr	r2, [pc, #168]	; (8006a6c <TIM_Base_SetConfig+0x120>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d00f      	beq.n	80069e6 <TIM_Base_SetConfig+0x9a>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4a29      	ldr	r2, [pc, #164]	; (8006a70 <TIM_Base_SetConfig+0x124>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d00b      	beq.n	80069e6 <TIM_Base_SetConfig+0x9a>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4a28      	ldr	r2, [pc, #160]	; (8006a74 <TIM_Base_SetConfig+0x128>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d007      	beq.n	80069e6 <TIM_Base_SetConfig+0x9a>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4a27      	ldr	r2, [pc, #156]	; (8006a78 <TIM_Base_SetConfig+0x12c>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d003      	beq.n	80069e6 <TIM_Base_SetConfig+0x9a>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4a26      	ldr	r2, [pc, #152]	; (8006a7c <TIM_Base_SetConfig+0x130>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d108      	bne.n	80069f8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	68fa      	ldr	r2, [r7, #12]
 80069f4:	4313      	orrs	r3, r2
 80069f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	695b      	ldr	r3, [r3, #20]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	689a      	ldr	r2, [r3, #8]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a10      	ldr	r2, [pc, #64]	; (8006a60 <TIM_Base_SetConfig+0x114>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d00f      	beq.n	8006a44 <TIM_Base_SetConfig+0xf8>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a12      	ldr	r2, [pc, #72]	; (8006a70 <TIM_Base_SetConfig+0x124>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d00b      	beq.n	8006a44 <TIM_Base_SetConfig+0xf8>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a11      	ldr	r2, [pc, #68]	; (8006a74 <TIM_Base_SetConfig+0x128>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d007      	beq.n	8006a44 <TIM_Base_SetConfig+0xf8>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a10      	ldr	r2, [pc, #64]	; (8006a78 <TIM_Base_SetConfig+0x12c>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d003      	beq.n	8006a44 <TIM_Base_SetConfig+0xf8>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a0f      	ldr	r2, [pc, #60]	; (8006a7c <TIM_Base_SetConfig+0x130>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d103      	bne.n	8006a4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	691a      	ldr	r2, [r3, #16]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	615a      	str	r2, [r3, #20]
}
 8006a52:	bf00      	nop
 8006a54:	3714      	adds	r7, #20
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr
 8006a5e:	bf00      	nop
 8006a60:	40010000 	.word	0x40010000
 8006a64:	40000400 	.word	0x40000400
 8006a68:	40000800 	.word	0x40000800
 8006a6c:	40000c00 	.word	0x40000c00
 8006a70:	40010400 	.word	0x40010400
 8006a74:	40014000 	.word	0x40014000
 8006a78:	40014400 	.word	0x40014400
 8006a7c:	40014800 	.word	0x40014800

08006a80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a88:	bf00      	nop
 8006a8a:	370c      	adds	r7, #12
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a9c:	bf00      	nop
 8006a9e:	370c      	adds	r7, #12
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ab0:	bf00      	nop
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b082      	sub	sp, #8
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d101      	bne.n	8006ace <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	e042      	b.n	8006b54 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d106      	bne.n	8006ae6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f7fa fd09 	bl	80014f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2224      	movs	r2, #36	; 0x24
 8006aea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f022 0201 	bic.w	r2, r2, #1
 8006afc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 f8ba 	bl	8006c78 <UART_SetConfig>
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d101      	bne.n	8006b0e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e022      	b.n	8006b54 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d002      	beq.n	8006b1c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 fe16 	bl	8007748 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	685a      	ldr	r2, [r3, #4]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	689a      	ldr	r2, [r3, #8]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f042 0201 	orr.w	r2, r2, #1
 8006b4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 fe9d 	bl	800788c <UART_CheckIdleState>
 8006b52:	4603      	mov	r3, r0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3708      	adds	r7, #8
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b08a      	sub	sp, #40	; 0x28
 8006b60:	af02      	add	r7, sp, #8
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	603b      	str	r3, [r7, #0]
 8006b68:	4613      	mov	r3, r2
 8006b6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b72:	2b20      	cmp	r3, #32
 8006b74:	d17b      	bne.n	8006c6e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d002      	beq.n	8006b82 <HAL_UART_Transmit+0x26>
 8006b7c:	88fb      	ldrh	r3, [r7, #6]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d101      	bne.n	8006b86 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e074      	b.n	8006c70 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2221      	movs	r2, #33	; 0x21
 8006b92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b96:	f7fa ff71 	bl	8001a7c <HAL_GetTick>
 8006b9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	88fa      	ldrh	r2, [r7, #6]
 8006ba0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	88fa      	ldrh	r2, [r7, #6]
 8006ba8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bb4:	d108      	bne.n	8006bc8 <HAL_UART_Transmit+0x6c>
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d104      	bne.n	8006bc8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	61bb      	str	r3, [r7, #24]
 8006bc6:	e003      	b.n	8006bd0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006bd0:	e030      	b.n	8006c34 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	9300      	str	r3, [sp, #0]
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	2180      	movs	r1, #128	; 0x80
 8006bdc:	68f8      	ldr	r0, [r7, #12]
 8006bde:	f000 feff 	bl	80079e0 <UART_WaitOnFlagUntilTimeout>
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d005      	beq.n	8006bf4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2220      	movs	r2, #32
 8006bec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006bf0:	2303      	movs	r3, #3
 8006bf2:	e03d      	b.n	8006c70 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d10b      	bne.n	8006c12 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	881b      	ldrh	r3, [r3, #0]
 8006bfe:	461a      	mov	r2, r3
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c08:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006c0a:	69bb      	ldr	r3, [r7, #24]
 8006c0c:	3302      	adds	r3, #2
 8006c0e:	61bb      	str	r3, [r7, #24]
 8006c10:	e007      	b.n	8006c22 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	781a      	ldrb	r2, [r3, #0]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	3301      	adds	r3, #1
 8006c20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	b29a      	uxth	r2, r3
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d1c8      	bne.n	8006bd2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	9300      	str	r3, [sp, #0]
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	2200      	movs	r2, #0
 8006c48:	2140      	movs	r1, #64	; 0x40
 8006c4a:	68f8      	ldr	r0, [r7, #12]
 8006c4c:	f000 fec8 	bl	80079e0 <UART_WaitOnFlagUntilTimeout>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d005      	beq.n	8006c62 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2220      	movs	r2, #32
 8006c5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	e006      	b.n	8006c70 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2220      	movs	r2, #32
 8006c66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	e000      	b.n	8006c70 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006c6e:	2302      	movs	r3, #2
  }
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3720      	adds	r7, #32
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c7c:	b092      	sub	sp, #72	; 0x48
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c82:	2300      	movs	r3, #0
 8006c84:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	689a      	ldr	r2, [r3, #8]
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	691b      	ldr	r3, [r3, #16]
 8006c90:	431a      	orrs	r2, r3
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	695b      	ldr	r3, [r3, #20]
 8006c96:	431a      	orrs	r2, r3
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	69db      	ldr	r3, [r3, #28]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	4bbe      	ldr	r3, [pc, #760]	; (8006fa0 <UART_SetConfig+0x328>)
 8006ca8:	4013      	ands	r3, r2
 8006caa:	697a      	ldr	r2, [r7, #20]
 8006cac:	6812      	ldr	r2, [r2, #0]
 8006cae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006cb0:	430b      	orrs	r3, r1
 8006cb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	68da      	ldr	r2, [r3, #12]
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	430a      	orrs	r2, r1
 8006cc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	699b      	ldr	r3, [r3, #24]
 8006cce:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4ab3      	ldr	r2, [pc, #716]	; (8006fa4 <UART_SetConfig+0x32c>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d004      	beq.n	8006ce4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	6a1b      	ldr	r3, [r3, #32]
 8006cde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	689a      	ldr	r2, [r3, #8]
 8006cea:	4baf      	ldr	r3, [pc, #700]	; (8006fa8 <UART_SetConfig+0x330>)
 8006cec:	4013      	ands	r3, r2
 8006cee:	697a      	ldr	r2, [r7, #20]
 8006cf0:	6812      	ldr	r2, [r2, #0]
 8006cf2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006cf4:	430b      	orrs	r3, r1
 8006cf6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cfe:	f023 010f 	bic.w	r1, r3, #15
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	430a      	orrs	r2, r1
 8006d0c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4aa6      	ldr	r2, [pc, #664]	; (8006fac <UART_SetConfig+0x334>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d177      	bne.n	8006e08 <UART_SetConfig+0x190>
 8006d18:	4ba5      	ldr	r3, [pc, #660]	; (8006fb0 <UART_SetConfig+0x338>)
 8006d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d20:	2b28      	cmp	r3, #40	; 0x28
 8006d22:	d86d      	bhi.n	8006e00 <UART_SetConfig+0x188>
 8006d24:	a201      	add	r2, pc, #4	; (adr r2, 8006d2c <UART_SetConfig+0xb4>)
 8006d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d2a:	bf00      	nop
 8006d2c:	08006dd1 	.word	0x08006dd1
 8006d30:	08006e01 	.word	0x08006e01
 8006d34:	08006e01 	.word	0x08006e01
 8006d38:	08006e01 	.word	0x08006e01
 8006d3c:	08006e01 	.word	0x08006e01
 8006d40:	08006e01 	.word	0x08006e01
 8006d44:	08006e01 	.word	0x08006e01
 8006d48:	08006e01 	.word	0x08006e01
 8006d4c:	08006dd9 	.word	0x08006dd9
 8006d50:	08006e01 	.word	0x08006e01
 8006d54:	08006e01 	.word	0x08006e01
 8006d58:	08006e01 	.word	0x08006e01
 8006d5c:	08006e01 	.word	0x08006e01
 8006d60:	08006e01 	.word	0x08006e01
 8006d64:	08006e01 	.word	0x08006e01
 8006d68:	08006e01 	.word	0x08006e01
 8006d6c:	08006de1 	.word	0x08006de1
 8006d70:	08006e01 	.word	0x08006e01
 8006d74:	08006e01 	.word	0x08006e01
 8006d78:	08006e01 	.word	0x08006e01
 8006d7c:	08006e01 	.word	0x08006e01
 8006d80:	08006e01 	.word	0x08006e01
 8006d84:	08006e01 	.word	0x08006e01
 8006d88:	08006e01 	.word	0x08006e01
 8006d8c:	08006de9 	.word	0x08006de9
 8006d90:	08006e01 	.word	0x08006e01
 8006d94:	08006e01 	.word	0x08006e01
 8006d98:	08006e01 	.word	0x08006e01
 8006d9c:	08006e01 	.word	0x08006e01
 8006da0:	08006e01 	.word	0x08006e01
 8006da4:	08006e01 	.word	0x08006e01
 8006da8:	08006e01 	.word	0x08006e01
 8006dac:	08006df1 	.word	0x08006df1
 8006db0:	08006e01 	.word	0x08006e01
 8006db4:	08006e01 	.word	0x08006e01
 8006db8:	08006e01 	.word	0x08006e01
 8006dbc:	08006e01 	.word	0x08006e01
 8006dc0:	08006e01 	.word	0x08006e01
 8006dc4:	08006e01 	.word	0x08006e01
 8006dc8:	08006e01 	.word	0x08006e01
 8006dcc:	08006df9 	.word	0x08006df9
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dd6:	e222      	b.n	800721e <UART_SetConfig+0x5a6>
 8006dd8:	2304      	movs	r3, #4
 8006dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dde:	e21e      	b.n	800721e <UART_SetConfig+0x5a6>
 8006de0:	2308      	movs	r3, #8
 8006de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006de6:	e21a      	b.n	800721e <UART_SetConfig+0x5a6>
 8006de8:	2310      	movs	r3, #16
 8006dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dee:	e216      	b.n	800721e <UART_SetConfig+0x5a6>
 8006df0:	2320      	movs	r3, #32
 8006df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006df6:	e212      	b.n	800721e <UART_SetConfig+0x5a6>
 8006df8:	2340      	movs	r3, #64	; 0x40
 8006dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dfe:	e20e      	b.n	800721e <UART_SetConfig+0x5a6>
 8006e00:	2380      	movs	r3, #128	; 0x80
 8006e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e06:	e20a      	b.n	800721e <UART_SetConfig+0x5a6>
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a69      	ldr	r2, [pc, #420]	; (8006fb4 <UART_SetConfig+0x33c>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d130      	bne.n	8006e74 <UART_SetConfig+0x1fc>
 8006e12:	4b67      	ldr	r3, [pc, #412]	; (8006fb0 <UART_SetConfig+0x338>)
 8006e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e16:	f003 0307 	and.w	r3, r3, #7
 8006e1a:	2b05      	cmp	r3, #5
 8006e1c:	d826      	bhi.n	8006e6c <UART_SetConfig+0x1f4>
 8006e1e:	a201      	add	r2, pc, #4	; (adr r2, 8006e24 <UART_SetConfig+0x1ac>)
 8006e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e24:	08006e3d 	.word	0x08006e3d
 8006e28:	08006e45 	.word	0x08006e45
 8006e2c:	08006e4d 	.word	0x08006e4d
 8006e30:	08006e55 	.word	0x08006e55
 8006e34:	08006e5d 	.word	0x08006e5d
 8006e38:	08006e65 	.word	0x08006e65
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e42:	e1ec      	b.n	800721e <UART_SetConfig+0x5a6>
 8006e44:	2304      	movs	r3, #4
 8006e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e4a:	e1e8      	b.n	800721e <UART_SetConfig+0x5a6>
 8006e4c:	2308      	movs	r3, #8
 8006e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e52:	e1e4      	b.n	800721e <UART_SetConfig+0x5a6>
 8006e54:	2310      	movs	r3, #16
 8006e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e5a:	e1e0      	b.n	800721e <UART_SetConfig+0x5a6>
 8006e5c:	2320      	movs	r3, #32
 8006e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e62:	e1dc      	b.n	800721e <UART_SetConfig+0x5a6>
 8006e64:	2340      	movs	r3, #64	; 0x40
 8006e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e6a:	e1d8      	b.n	800721e <UART_SetConfig+0x5a6>
 8006e6c:	2380      	movs	r3, #128	; 0x80
 8006e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e72:	e1d4      	b.n	800721e <UART_SetConfig+0x5a6>
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a4f      	ldr	r2, [pc, #316]	; (8006fb8 <UART_SetConfig+0x340>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d130      	bne.n	8006ee0 <UART_SetConfig+0x268>
 8006e7e:	4b4c      	ldr	r3, [pc, #304]	; (8006fb0 <UART_SetConfig+0x338>)
 8006e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e82:	f003 0307 	and.w	r3, r3, #7
 8006e86:	2b05      	cmp	r3, #5
 8006e88:	d826      	bhi.n	8006ed8 <UART_SetConfig+0x260>
 8006e8a:	a201      	add	r2, pc, #4	; (adr r2, 8006e90 <UART_SetConfig+0x218>)
 8006e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e90:	08006ea9 	.word	0x08006ea9
 8006e94:	08006eb1 	.word	0x08006eb1
 8006e98:	08006eb9 	.word	0x08006eb9
 8006e9c:	08006ec1 	.word	0x08006ec1
 8006ea0:	08006ec9 	.word	0x08006ec9
 8006ea4:	08006ed1 	.word	0x08006ed1
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eae:	e1b6      	b.n	800721e <UART_SetConfig+0x5a6>
 8006eb0:	2304      	movs	r3, #4
 8006eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eb6:	e1b2      	b.n	800721e <UART_SetConfig+0x5a6>
 8006eb8:	2308      	movs	r3, #8
 8006eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ebe:	e1ae      	b.n	800721e <UART_SetConfig+0x5a6>
 8006ec0:	2310      	movs	r3, #16
 8006ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ec6:	e1aa      	b.n	800721e <UART_SetConfig+0x5a6>
 8006ec8:	2320      	movs	r3, #32
 8006eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ece:	e1a6      	b.n	800721e <UART_SetConfig+0x5a6>
 8006ed0:	2340      	movs	r3, #64	; 0x40
 8006ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ed6:	e1a2      	b.n	800721e <UART_SetConfig+0x5a6>
 8006ed8:	2380      	movs	r3, #128	; 0x80
 8006eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ede:	e19e      	b.n	800721e <UART_SetConfig+0x5a6>
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a35      	ldr	r2, [pc, #212]	; (8006fbc <UART_SetConfig+0x344>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d130      	bne.n	8006f4c <UART_SetConfig+0x2d4>
 8006eea:	4b31      	ldr	r3, [pc, #196]	; (8006fb0 <UART_SetConfig+0x338>)
 8006eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eee:	f003 0307 	and.w	r3, r3, #7
 8006ef2:	2b05      	cmp	r3, #5
 8006ef4:	d826      	bhi.n	8006f44 <UART_SetConfig+0x2cc>
 8006ef6:	a201      	add	r2, pc, #4	; (adr r2, 8006efc <UART_SetConfig+0x284>)
 8006ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006efc:	08006f15 	.word	0x08006f15
 8006f00:	08006f1d 	.word	0x08006f1d
 8006f04:	08006f25 	.word	0x08006f25
 8006f08:	08006f2d 	.word	0x08006f2d
 8006f0c:	08006f35 	.word	0x08006f35
 8006f10:	08006f3d 	.word	0x08006f3d
 8006f14:	2300      	movs	r3, #0
 8006f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f1a:	e180      	b.n	800721e <UART_SetConfig+0x5a6>
 8006f1c:	2304      	movs	r3, #4
 8006f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f22:	e17c      	b.n	800721e <UART_SetConfig+0x5a6>
 8006f24:	2308      	movs	r3, #8
 8006f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f2a:	e178      	b.n	800721e <UART_SetConfig+0x5a6>
 8006f2c:	2310      	movs	r3, #16
 8006f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f32:	e174      	b.n	800721e <UART_SetConfig+0x5a6>
 8006f34:	2320      	movs	r3, #32
 8006f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f3a:	e170      	b.n	800721e <UART_SetConfig+0x5a6>
 8006f3c:	2340      	movs	r3, #64	; 0x40
 8006f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f42:	e16c      	b.n	800721e <UART_SetConfig+0x5a6>
 8006f44:	2380      	movs	r3, #128	; 0x80
 8006f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f4a:	e168      	b.n	800721e <UART_SetConfig+0x5a6>
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a1b      	ldr	r2, [pc, #108]	; (8006fc0 <UART_SetConfig+0x348>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d142      	bne.n	8006fdc <UART_SetConfig+0x364>
 8006f56:	4b16      	ldr	r3, [pc, #88]	; (8006fb0 <UART_SetConfig+0x338>)
 8006f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f5a:	f003 0307 	and.w	r3, r3, #7
 8006f5e:	2b05      	cmp	r3, #5
 8006f60:	d838      	bhi.n	8006fd4 <UART_SetConfig+0x35c>
 8006f62:	a201      	add	r2, pc, #4	; (adr r2, 8006f68 <UART_SetConfig+0x2f0>)
 8006f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f68:	08006f81 	.word	0x08006f81
 8006f6c:	08006f89 	.word	0x08006f89
 8006f70:	08006f91 	.word	0x08006f91
 8006f74:	08006f99 	.word	0x08006f99
 8006f78:	08006fc5 	.word	0x08006fc5
 8006f7c:	08006fcd 	.word	0x08006fcd
 8006f80:	2300      	movs	r3, #0
 8006f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f86:	e14a      	b.n	800721e <UART_SetConfig+0x5a6>
 8006f88:	2304      	movs	r3, #4
 8006f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f8e:	e146      	b.n	800721e <UART_SetConfig+0x5a6>
 8006f90:	2308      	movs	r3, #8
 8006f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f96:	e142      	b.n	800721e <UART_SetConfig+0x5a6>
 8006f98:	2310      	movs	r3, #16
 8006f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f9e:	e13e      	b.n	800721e <UART_SetConfig+0x5a6>
 8006fa0:	cfff69f3 	.word	0xcfff69f3
 8006fa4:	58000c00 	.word	0x58000c00
 8006fa8:	11fff4ff 	.word	0x11fff4ff
 8006fac:	40011000 	.word	0x40011000
 8006fb0:	58024400 	.word	0x58024400
 8006fb4:	40004400 	.word	0x40004400
 8006fb8:	40004800 	.word	0x40004800
 8006fbc:	40004c00 	.word	0x40004c00
 8006fc0:	40005000 	.word	0x40005000
 8006fc4:	2320      	movs	r3, #32
 8006fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fca:	e128      	b.n	800721e <UART_SetConfig+0x5a6>
 8006fcc:	2340      	movs	r3, #64	; 0x40
 8006fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fd2:	e124      	b.n	800721e <UART_SetConfig+0x5a6>
 8006fd4:	2380      	movs	r3, #128	; 0x80
 8006fd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fda:	e120      	b.n	800721e <UART_SetConfig+0x5a6>
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4acb      	ldr	r2, [pc, #812]	; (8007310 <UART_SetConfig+0x698>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d176      	bne.n	80070d4 <UART_SetConfig+0x45c>
 8006fe6:	4bcb      	ldr	r3, [pc, #812]	; (8007314 <UART_SetConfig+0x69c>)
 8006fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006fee:	2b28      	cmp	r3, #40	; 0x28
 8006ff0:	d86c      	bhi.n	80070cc <UART_SetConfig+0x454>
 8006ff2:	a201      	add	r2, pc, #4	; (adr r2, 8006ff8 <UART_SetConfig+0x380>)
 8006ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff8:	0800709d 	.word	0x0800709d
 8006ffc:	080070cd 	.word	0x080070cd
 8007000:	080070cd 	.word	0x080070cd
 8007004:	080070cd 	.word	0x080070cd
 8007008:	080070cd 	.word	0x080070cd
 800700c:	080070cd 	.word	0x080070cd
 8007010:	080070cd 	.word	0x080070cd
 8007014:	080070cd 	.word	0x080070cd
 8007018:	080070a5 	.word	0x080070a5
 800701c:	080070cd 	.word	0x080070cd
 8007020:	080070cd 	.word	0x080070cd
 8007024:	080070cd 	.word	0x080070cd
 8007028:	080070cd 	.word	0x080070cd
 800702c:	080070cd 	.word	0x080070cd
 8007030:	080070cd 	.word	0x080070cd
 8007034:	080070cd 	.word	0x080070cd
 8007038:	080070ad 	.word	0x080070ad
 800703c:	080070cd 	.word	0x080070cd
 8007040:	080070cd 	.word	0x080070cd
 8007044:	080070cd 	.word	0x080070cd
 8007048:	080070cd 	.word	0x080070cd
 800704c:	080070cd 	.word	0x080070cd
 8007050:	080070cd 	.word	0x080070cd
 8007054:	080070cd 	.word	0x080070cd
 8007058:	080070b5 	.word	0x080070b5
 800705c:	080070cd 	.word	0x080070cd
 8007060:	080070cd 	.word	0x080070cd
 8007064:	080070cd 	.word	0x080070cd
 8007068:	080070cd 	.word	0x080070cd
 800706c:	080070cd 	.word	0x080070cd
 8007070:	080070cd 	.word	0x080070cd
 8007074:	080070cd 	.word	0x080070cd
 8007078:	080070bd 	.word	0x080070bd
 800707c:	080070cd 	.word	0x080070cd
 8007080:	080070cd 	.word	0x080070cd
 8007084:	080070cd 	.word	0x080070cd
 8007088:	080070cd 	.word	0x080070cd
 800708c:	080070cd 	.word	0x080070cd
 8007090:	080070cd 	.word	0x080070cd
 8007094:	080070cd 	.word	0x080070cd
 8007098:	080070c5 	.word	0x080070c5
 800709c:	2301      	movs	r3, #1
 800709e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070a2:	e0bc      	b.n	800721e <UART_SetConfig+0x5a6>
 80070a4:	2304      	movs	r3, #4
 80070a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070aa:	e0b8      	b.n	800721e <UART_SetConfig+0x5a6>
 80070ac:	2308      	movs	r3, #8
 80070ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070b2:	e0b4      	b.n	800721e <UART_SetConfig+0x5a6>
 80070b4:	2310      	movs	r3, #16
 80070b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070ba:	e0b0      	b.n	800721e <UART_SetConfig+0x5a6>
 80070bc:	2320      	movs	r3, #32
 80070be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070c2:	e0ac      	b.n	800721e <UART_SetConfig+0x5a6>
 80070c4:	2340      	movs	r3, #64	; 0x40
 80070c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070ca:	e0a8      	b.n	800721e <UART_SetConfig+0x5a6>
 80070cc:	2380      	movs	r3, #128	; 0x80
 80070ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070d2:	e0a4      	b.n	800721e <UART_SetConfig+0x5a6>
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a8f      	ldr	r2, [pc, #572]	; (8007318 <UART_SetConfig+0x6a0>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d130      	bne.n	8007140 <UART_SetConfig+0x4c8>
 80070de:	4b8d      	ldr	r3, [pc, #564]	; (8007314 <UART_SetConfig+0x69c>)
 80070e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070e2:	f003 0307 	and.w	r3, r3, #7
 80070e6:	2b05      	cmp	r3, #5
 80070e8:	d826      	bhi.n	8007138 <UART_SetConfig+0x4c0>
 80070ea:	a201      	add	r2, pc, #4	; (adr r2, 80070f0 <UART_SetConfig+0x478>)
 80070ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f0:	08007109 	.word	0x08007109
 80070f4:	08007111 	.word	0x08007111
 80070f8:	08007119 	.word	0x08007119
 80070fc:	08007121 	.word	0x08007121
 8007100:	08007129 	.word	0x08007129
 8007104:	08007131 	.word	0x08007131
 8007108:	2300      	movs	r3, #0
 800710a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800710e:	e086      	b.n	800721e <UART_SetConfig+0x5a6>
 8007110:	2304      	movs	r3, #4
 8007112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007116:	e082      	b.n	800721e <UART_SetConfig+0x5a6>
 8007118:	2308      	movs	r3, #8
 800711a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800711e:	e07e      	b.n	800721e <UART_SetConfig+0x5a6>
 8007120:	2310      	movs	r3, #16
 8007122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007126:	e07a      	b.n	800721e <UART_SetConfig+0x5a6>
 8007128:	2320      	movs	r3, #32
 800712a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800712e:	e076      	b.n	800721e <UART_SetConfig+0x5a6>
 8007130:	2340      	movs	r3, #64	; 0x40
 8007132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007136:	e072      	b.n	800721e <UART_SetConfig+0x5a6>
 8007138:	2380      	movs	r3, #128	; 0x80
 800713a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800713e:	e06e      	b.n	800721e <UART_SetConfig+0x5a6>
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a75      	ldr	r2, [pc, #468]	; (800731c <UART_SetConfig+0x6a4>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d130      	bne.n	80071ac <UART_SetConfig+0x534>
 800714a:	4b72      	ldr	r3, [pc, #456]	; (8007314 <UART_SetConfig+0x69c>)
 800714c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800714e:	f003 0307 	and.w	r3, r3, #7
 8007152:	2b05      	cmp	r3, #5
 8007154:	d826      	bhi.n	80071a4 <UART_SetConfig+0x52c>
 8007156:	a201      	add	r2, pc, #4	; (adr r2, 800715c <UART_SetConfig+0x4e4>)
 8007158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800715c:	08007175 	.word	0x08007175
 8007160:	0800717d 	.word	0x0800717d
 8007164:	08007185 	.word	0x08007185
 8007168:	0800718d 	.word	0x0800718d
 800716c:	08007195 	.word	0x08007195
 8007170:	0800719d 	.word	0x0800719d
 8007174:	2300      	movs	r3, #0
 8007176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800717a:	e050      	b.n	800721e <UART_SetConfig+0x5a6>
 800717c:	2304      	movs	r3, #4
 800717e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007182:	e04c      	b.n	800721e <UART_SetConfig+0x5a6>
 8007184:	2308      	movs	r3, #8
 8007186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800718a:	e048      	b.n	800721e <UART_SetConfig+0x5a6>
 800718c:	2310      	movs	r3, #16
 800718e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007192:	e044      	b.n	800721e <UART_SetConfig+0x5a6>
 8007194:	2320      	movs	r3, #32
 8007196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800719a:	e040      	b.n	800721e <UART_SetConfig+0x5a6>
 800719c:	2340      	movs	r3, #64	; 0x40
 800719e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071a2:	e03c      	b.n	800721e <UART_SetConfig+0x5a6>
 80071a4:	2380      	movs	r3, #128	; 0x80
 80071a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071aa:	e038      	b.n	800721e <UART_SetConfig+0x5a6>
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a5b      	ldr	r2, [pc, #364]	; (8007320 <UART_SetConfig+0x6a8>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d130      	bne.n	8007218 <UART_SetConfig+0x5a0>
 80071b6:	4b57      	ldr	r3, [pc, #348]	; (8007314 <UART_SetConfig+0x69c>)
 80071b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071ba:	f003 0307 	and.w	r3, r3, #7
 80071be:	2b05      	cmp	r3, #5
 80071c0:	d826      	bhi.n	8007210 <UART_SetConfig+0x598>
 80071c2:	a201      	add	r2, pc, #4	; (adr r2, 80071c8 <UART_SetConfig+0x550>)
 80071c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c8:	080071e1 	.word	0x080071e1
 80071cc:	080071e9 	.word	0x080071e9
 80071d0:	080071f1 	.word	0x080071f1
 80071d4:	080071f9 	.word	0x080071f9
 80071d8:	08007201 	.word	0x08007201
 80071dc:	08007209 	.word	0x08007209
 80071e0:	2302      	movs	r3, #2
 80071e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071e6:	e01a      	b.n	800721e <UART_SetConfig+0x5a6>
 80071e8:	2304      	movs	r3, #4
 80071ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071ee:	e016      	b.n	800721e <UART_SetConfig+0x5a6>
 80071f0:	2308      	movs	r3, #8
 80071f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071f6:	e012      	b.n	800721e <UART_SetConfig+0x5a6>
 80071f8:	2310      	movs	r3, #16
 80071fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071fe:	e00e      	b.n	800721e <UART_SetConfig+0x5a6>
 8007200:	2320      	movs	r3, #32
 8007202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007206:	e00a      	b.n	800721e <UART_SetConfig+0x5a6>
 8007208:	2340      	movs	r3, #64	; 0x40
 800720a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800720e:	e006      	b.n	800721e <UART_SetConfig+0x5a6>
 8007210:	2380      	movs	r3, #128	; 0x80
 8007212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007216:	e002      	b.n	800721e <UART_SetConfig+0x5a6>
 8007218:	2380      	movs	r3, #128	; 0x80
 800721a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a3f      	ldr	r2, [pc, #252]	; (8007320 <UART_SetConfig+0x6a8>)
 8007224:	4293      	cmp	r3, r2
 8007226:	f040 80f8 	bne.w	800741a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800722a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800722e:	2b20      	cmp	r3, #32
 8007230:	dc46      	bgt.n	80072c0 <UART_SetConfig+0x648>
 8007232:	2b02      	cmp	r3, #2
 8007234:	f2c0 8082 	blt.w	800733c <UART_SetConfig+0x6c4>
 8007238:	3b02      	subs	r3, #2
 800723a:	2b1e      	cmp	r3, #30
 800723c:	d87e      	bhi.n	800733c <UART_SetConfig+0x6c4>
 800723e:	a201      	add	r2, pc, #4	; (adr r2, 8007244 <UART_SetConfig+0x5cc>)
 8007240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007244:	080072c7 	.word	0x080072c7
 8007248:	0800733d 	.word	0x0800733d
 800724c:	080072cf 	.word	0x080072cf
 8007250:	0800733d 	.word	0x0800733d
 8007254:	0800733d 	.word	0x0800733d
 8007258:	0800733d 	.word	0x0800733d
 800725c:	080072df 	.word	0x080072df
 8007260:	0800733d 	.word	0x0800733d
 8007264:	0800733d 	.word	0x0800733d
 8007268:	0800733d 	.word	0x0800733d
 800726c:	0800733d 	.word	0x0800733d
 8007270:	0800733d 	.word	0x0800733d
 8007274:	0800733d 	.word	0x0800733d
 8007278:	0800733d 	.word	0x0800733d
 800727c:	080072ef 	.word	0x080072ef
 8007280:	0800733d 	.word	0x0800733d
 8007284:	0800733d 	.word	0x0800733d
 8007288:	0800733d 	.word	0x0800733d
 800728c:	0800733d 	.word	0x0800733d
 8007290:	0800733d 	.word	0x0800733d
 8007294:	0800733d 	.word	0x0800733d
 8007298:	0800733d 	.word	0x0800733d
 800729c:	0800733d 	.word	0x0800733d
 80072a0:	0800733d 	.word	0x0800733d
 80072a4:	0800733d 	.word	0x0800733d
 80072a8:	0800733d 	.word	0x0800733d
 80072ac:	0800733d 	.word	0x0800733d
 80072b0:	0800733d 	.word	0x0800733d
 80072b4:	0800733d 	.word	0x0800733d
 80072b8:	0800733d 	.word	0x0800733d
 80072bc:	0800732f 	.word	0x0800732f
 80072c0:	2b40      	cmp	r3, #64	; 0x40
 80072c2:	d037      	beq.n	8007334 <UART_SetConfig+0x6bc>
 80072c4:	e03a      	b.n	800733c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80072c6:	f7fe fcfd 	bl	8005cc4 <HAL_RCCEx_GetD3PCLK1Freq>
 80072ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80072cc:	e03c      	b.n	8007348 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072d2:	4618      	mov	r0, r3
 80072d4:	f7fe fd0c 	bl	8005cf0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80072d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072dc:	e034      	b.n	8007348 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072de:	f107 0318 	add.w	r3, r7, #24
 80072e2:	4618      	mov	r0, r3
 80072e4:	f7fe fe58 	bl	8005f98 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072ec:	e02c      	b.n	8007348 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072ee:	4b09      	ldr	r3, [pc, #36]	; (8007314 <UART_SetConfig+0x69c>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f003 0320 	and.w	r3, r3, #32
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d016      	beq.n	8007328 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80072fa:	4b06      	ldr	r3, [pc, #24]	; (8007314 <UART_SetConfig+0x69c>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	08db      	lsrs	r3, r3, #3
 8007300:	f003 0303 	and.w	r3, r3, #3
 8007304:	4a07      	ldr	r2, [pc, #28]	; (8007324 <UART_SetConfig+0x6ac>)
 8007306:	fa22 f303 	lsr.w	r3, r2, r3
 800730a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800730c:	e01c      	b.n	8007348 <UART_SetConfig+0x6d0>
 800730e:	bf00      	nop
 8007310:	40011400 	.word	0x40011400
 8007314:	58024400 	.word	0x58024400
 8007318:	40007800 	.word	0x40007800
 800731c:	40007c00 	.word	0x40007c00
 8007320:	58000c00 	.word	0x58000c00
 8007324:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007328:	4b9d      	ldr	r3, [pc, #628]	; (80075a0 <UART_SetConfig+0x928>)
 800732a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800732c:	e00c      	b.n	8007348 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800732e:	4b9d      	ldr	r3, [pc, #628]	; (80075a4 <UART_SetConfig+0x92c>)
 8007330:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007332:	e009      	b.n	8007348 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007334:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007338:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800733a:	e005      	b.n	8007348 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800733c:	2300      	movs	r3, #0
 800733e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007340:	2301      	movs	r3, #1
 8007342:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007346:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800734a:	2b00      	cmp	r3, #0
 800734c:	f000 81de 	beq.w	800770c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007354:	4a94      	ldr	r2, [pc, #592]	; (80075a8 <UART_SetConfig+0x930>)
 8007356:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800735a:	461a      	mov	r2, r3
 800735c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800735e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007362:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	685a      	ldr	r2, [r3, #4]
 8007368:	4613      	mov	r3, r2
 800736a:	005b      	lsls	r3, r3, #1
 800736c:	4413      	add	r3, r2
 800736e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007370:	429a      	cmp	r2, r3
 8007372:	d305      	bcc.n	8007380 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800737a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800737c:	429a      	cmp	r2, r3
 800737e:	d903      	bls.n	8007388 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007380:	2301      	movs	r3, #1
 8007382:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007386:	e1c1      	b.n	800770c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800738a:	2200      	movs	r2, #0
 800738c:	60bb      	str	r3, [r7, #8]
 800738e:	60fa      	str	r2, [r7, #12]
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007394:	4a84      	ldr	r2, [pc, #528]	; (80075a8 <UART_SetConfig+0x930>)
 8007396:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800739a:	b29b      	uxth	r3, r3
 800739c:	2200      	movs	r2, #0
 800739e:	603b      	str	r3, [r7, #0]
 80073a0:	607a      	str	r2, [r7, #4]
 80073a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80073aa:	f7f9 f9ad 	bl	8000708 <__aeabi_uldivmod>
 80073ae:	4602      	mov	r2, r0
 80073b0:	460b      	mov	r3, r1
 80073b2:	4610      	mov	r0, r2
 80073b4:	4619      	mov	r1, r3
 80073b6:	f04f 0200 	mov.w	r2, #0
 80073ba:	f04f 0300 	mov.w	r3, #0
 80073be:	020b      	lsls	r3, r1, #8
 80073c0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80073c4:	0202      	lsls	r2, r0, #8
 80073c6:	6979      	ldr	r1, [r7, #20]
 80073c8:	6849      	ldr	r1, [r1, #4]
 80073ca:	0849      	lsrs	r1, r1, #1
 80073cc:	2000      	movs	r0, #0
 80073ce:	460c      	mov	r4, r1
 80073d0:	4605      	mov	r5, r0
 80073d2:	eb12 0804 	adds.w	r8, r2, r4
 80073d6:	eb43 0905 	adc.w	r9, r3, r5
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	2200      	movs	r2, #0
 80073e0:	469a      	mov	sl, r3
 80073e2:	4693      	mov	fp, r2
 80073e4:	4652      	mov	r2, sl
 80073e6:	465b      	mov	r3, fp
 80073e8:	4640      	mov	r0, r8
 80073ea:	4649      	mov	r1, r9
 80073ec:	f7f9 f98c 	bl	8000708 <__aeabi_uldivmod>
 80073f0:	4602      	mov	r2, r0
 80073f2:	460b      	mov	r3, r1
 80073f4:	4613      	mov	r3, r2
 80073f6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80073f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073fe:	d308      	bcc.n	8007412 <UART_SetConfig+0x79a>
 8007400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007402:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007406:	d204      	bcs.n	8007412 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800740e:	60da      	str	r2, [r3, #12]
 8007410:	e17c      	b.n	800770c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007418:	e178      	b.n	800770c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	69db      	ldr	r3, [r3, #28]
 800741e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007422:	f040 80c5 	bne.w	80075b0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007426:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800742a:	2b20      	cmp	r3, #32
 800742c:	dc48      	bgt.n	80074c0 <UART_SetConfig+0x848>
 800742e:	2b00      	cmp	r3, #0
 8007430:	db7b      	blt.n	800752a <UART_SetConfig+0x8b2>
 8007432:	2b20      	cmp	r3, #32
 8007434:	d879      	bhi.n	800752a <UART_SetConfig+0x8b2>
 8007436:	a201      	add	r2, pc, #4	; (adr r2, 800743c <UART_SetConfig+0x7c4>)
 8007438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800743c:	080074c7 	.word	0x080074c7
 8007440:	080074cf 	.word	0x080074cf
 8007444:	0800752b 	.word	0x0800752b
 8007448:	0800752b 	.word	0x0800752b
 800744c:	080074d7 	.word	0x080074d7
 8007450:	0800752b 	.word	0x0800752b
 8007454:	0800752b 	.word	0x0800752b
 8007458:	0800752b 	.word	0x0800752b
 800745c:	080074e7 	.word	0x080074e7
 8007460:	0800752b 	.word	0x0800752b
 8007464:	0800752b 	.word	0x0800752b
 8007468:	0800752b 	.word	0x0800752b
 800746c:	0800752b 	.word	0x0800752b
 8007470:	0800752b 	.word	0x0800752b
 8007474:	0800752b 	.word	0x0800752b
 8007478:	0800752b 	.word	0x0800752b
 800747c:	080074f7 	.word	0x080074f7
 8007480:	0800752b 	.word	0x0800752b
 8007484:	0800752b 	.word	0x0800752b
 8007488:	0800752b 	.word	0x0800752b
 800748c:	0800752b 	.word	0x0800752b
 8007490:	0800752b 	.word	0x0800752b
 8007494:	0800752b 	.word	0x0800752b
 8007498:	0800752b 	.word	0x0800752b
 800749c:	0800752b 	.word	0x0800752b
 80074a0:	0800752b 	.word	0x0800752b
 80074a4:	0800752b 	.word	0x0800752b
 80074a8:	0800752b 	.word	0x0800752b
 80074ac:	0800752b 	.word	0x0800752b
 80074b0:	0800752b 	.word	0x0800752b
 80074b4:	0800752b 	.word	0x0800752b
 80074b8:	0800752b 	.word	0x0800752b
 80074bc:	0800751d 	.word	0x0800751d
 80074c0:	2b40      	cmp	r3, #64	; 0x40
 80074c2:	d02e      	beq.n	8007522 <UART_SetConfig+0x8aa>
 80074c4:	e031      	b.n	800752a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074c6:	f7fd f985 	bl	80047d4 <HAL_RCC_GetPCLK1Freq>
 80074ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80074cc:	e033      	b.n	8007536 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074ce:	f7fd f997 	bl	8004800 <HAL_RCC_GetPCLK2Freq>
 80074d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80074d4:	e02f      	b.n	8007536 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074da:	4618      	mov	r0, r3
 80074dc:	f7fe fc08 	bl	8005cf0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80074e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074e4:	e027      	b.n	8007536 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074e6:	f107 0318 	add.w	r3, r7, #24
 80074ea:	4618      	mov	r0, r3
 80074ec:	f7fe fd54 	bl	8005f98 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80074f0:	69fb      	ldr	r3, [r7, #28]
 80074f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074f4:	e01f      	b.n	8007536 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074f6:	4b2d      	ldr	r3, [pc, #180]	; (80075ac <UART_SetConfig+0x934>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f003 0320 	and.w	r3, r3, #32
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d009      	beq.n	8007516 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007502:	4b2a      	ldr	r3, [pc, #168]	; (80075ac <UART_SetConfig+0x934>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	08db      	lsrs	r3, r3, #3
 8007508:	f003 0303 	and.w	r3, r3, #3
 800750c:	4a24      	ldr	r2, [pc, #144]	; (80075a0 <UART_SetConfig+0x928>)
 800750e:	fa22 f303 	lsr.w	r3, r2, r3
 8007512:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007514:	e00f      	b.n	8007536 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007516:	4b22      	ldr	r3, [pc, #136]	; (80075a0 <UART_SetConfig+0x928>)
 8007518:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800751a:	e00c      	b.n	8007536 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800751c:	4b21      	ldr	r3, [pc, #132]	; (80075a4 <UART_SetConfig+0x92c>)
 800751e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007520:	e009      	b.n	8007536 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007522:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007526:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007528:	e005      	b.n	8007536 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800752a:	2300      	movs	r3, #0
 800752c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007534:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007538:	2b00      	cmp	r3, #0
 800753a:	f000 80e7 	beq.w	800770c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007542:	4a19      	ldr	r2, [pc, #100]	; (80075a8 <UART_SetConfig+0x930>)
 8007544:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007548:	461a      	mov	r2, r3
 800754a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800754c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007550:	005a      	lsls	r2, r3, #1
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	085b      	lsrs	r3, r3, #1
 8007558:	441a      	add	r2, r3
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007562:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007566:	2b0f      	cmp	r3, #15
 8007568:	d916      	bls.n	8007598 <UART_SetConfig+0x920>
 800756a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800756c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007570:	d212      	bcs.n	8007598 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007574:	b29b      	uxth	r3, r3
 8007576:	f023 030f 	bic.w	r3, r3, #15
 800757a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800757c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800757e:	085b      	lsrs	r3, r3, #1
 8007580:	b29b      	uxth	r3, r3
 8007582:	f003 0307 	and.w	r3, r3, #7
 8007586:	b29a      	uxth	r2, r3
 8007588:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800758a:	4313      	orrs	r3, r2
 800758c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007594:	60da      	str	r2, [r3, #12]
 8007596:	e0b9      	b.n	800770c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007598:	2301      	movs	r3, #1
 800759a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800759e:	e0b5      	b.n	800770c <UART_SetConfig+0xa94>
 80075a0:	03d09000 	.word	0x03d09000
 80075a4:	003d0900 	.word	0x003d0900
 80075a8:	0800f674 	.word	0x0800f674
 80075ac:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80075b0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80075b4:	2b20      	cmp	r3, #32
 80075b6:	dc49      	bgt.n	800764c <UART_SetConfig+0x9d4>
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	db7c      	blt.n	80076b6 <UART_SetConfig+0xa3e>
 80075bc:	2b20      	cmp	r3, #32
 80075be:	d87a      	bhi.n	80076b6 <UART_SetConfig+0xa3e>
 80075c0:	a201      	add	r2, pc, #4	; (adr r2, 80075c8 <UART_SetConfig+0x950>)
 80075c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c6:	bf00      	nop
 80075c8:	08007653 	.word	0x08007653
 80075cc:	0800765b 	.word	0x0800765b
 80075d0:	080076b7 	.word	0x080076b7
 80075d4:	080076b7 	.word	0x080076b7
 80075d8:	08007663 	.word	0x08007663
 80075dc:	080076b7 	.word	0x080076b7
 80075e0:	080076b7 	.word	0x080076b7
 80075e4:	080076b7 	.word	0x080076b7
 80075e8:	08007673 	.word	0x08007673
 80075ec:	080076b7 	.word	0x080076b7
 80075f0:	080076b7 	.word	0x080076b7
 80075f4:	080076b7 	.word	0x080076b7
 80075f8:	080076b7 	.word	0x080076b7
 80075fc:	080076b7 	.word	0x080076b7
 8007600:	080076b7 	.word	0x080076b7
 8007604:	080076b7 	.word	0x080076b7
 8007608:	08007683 	.word	0x08007683
 800760c:	080076b7 	.word	0x080076b7
 8007610:	080076b7 	.word	0x080076b7
 8007614:	080076b7 	.word	0x080076b7
 8007618:	080076b7 	.word	0x080076b7
 800761c:	080076b7 	.word	0x080076b7
 8007620:	080076b7 	.word	0x080076b7
 8007624:	080076b7 	.word	0x080076b7
 8007628:	080076b7 	.word	0x080076b7
 800762c:	080076b7 	.word	0x080076b7
 8007630:	080076b7 	.word	0x080076b7
 8007634:	080076b7 	.word	0x080076b7
 8007638:	080076b7 	.word	0x080076b7
 800763c:	080076b7 	.word	0x080076b7
 8007640:	080076b7 	.word	0x080076b7
 8007644:	080076b7 	.word	0x080076b7
 8007648:	080076a9 	.word	0x080076a9
 800764c:	2b40      	cmp	r3, #64	; 0x40
 800764e:	d02e      	beq.n	80076ae <UART_SetConfig+0xa36>
 8007650:	e031      	b.n	80076b6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007652:	f7fd f8bf 	bl	80047d4 <HAL_RCC_GetPCLK1Freq>
 8007656:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007658:	e033      	b.n	80076c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800765a:	f7fd f8d1 	bl	8004800 <HAL_RCC_GetPCLK2Freq>
 800765e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007660:	e02f      	b.n	80076c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007662:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007666:	4618      	mov	r0, r3
 8007668:	f7fe fb42 	bl	8005cf0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800766c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007670:	e027      	b.n	80076c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007672:	f107 0318 	add.w	r3, r7, #24
 8007676:	4618      	mov	r0, r3
 8007678:	f7fe fc8e 	bl	8005f98 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007680:	e01f      	b.n	80076c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007682:	4b2d      	ldr	r3, [pc, #180]	; (8007738 <UART_SetConfig+0xac0>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f003 0320 	and.w	r3, r3, #32
 800768a:	2b00      	cmp	r3, #0
 800768c:	d009      	beq.n	80076a2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800768e:	4b2a      	ldr	r3, [pc, #168]	; (8007738 <UART_SetConfig+0xac0>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	08db      	lsrs	r3, r3, #3
 8007694:	f003 0303 	and.w	r3, r3, #3
 8007698:	4a28      	ldr	r2, [pc, #160]	; (800773c <UART_SetConfig+0xac4>)
 800769a:	fa22 f303 	lsr.w	r3, r2, r3
 800769e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80076a0:	e00f      	b.n	80076c2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80076a2:	4b26      	ldr	r3, [pc, #152]	; (800773c <UART_SetConfig+0xac4>)
 80076a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076a6:	e00c      	b.n	80076c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80076a8:	4b25      	ldr	r3, [pc, #148]	; (8007740 <UART_SetConfig+0xac8>)
 80076aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076ac:	e009      	b.n	80076c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076b4:	e005      	b.n	80076c2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80076b6:	2300      	movs	r3, #0
 80076b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80076c0:	bf00      	nop
    }

    if (pclk != 0U)
 80076c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d021      	beq.n	800770c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076cc:	4a1d      	ldr	r2, [pc, #116]	; (8007744 <UART_SetConfig+0xacc>)
 80076ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076d2:	461a      	mov	r2, r3
 80076d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	085b      	lsrs	r3, r3, #1
 80076e0:	441a      	add	r2, r3
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80076ea:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ee:	2b0f      	cmp	r3, #15
 80076f0:	d909      	bls.n	8007706 <UART_SetConfig+0xa8e>
 80076f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076f8:	d205      	bcs.n	8007706 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80076fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076fc:	b29a      	uxth	r2, r3
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	60da      	str	r2, [r3, #12]
 8007704:	e002      	b.n	800770c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007706:	2301      	movs	r3, #1
 8007708:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	2201      	movs	r2, #1
 8007710:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	2201      	movs	r2, #1
 8007718:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	2200      	movs	r2, #0
 8007720:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	2200      	movs	r2, #0
 8007726:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007728:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800772c:	4618      	mov	r0, r3
 800772e:	3748      	adds	r7, #72	; 0x48
 8007730:	46bd      	mov	sp, r7
 8007732:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007736:	bf00      	nop
 8007738:	58024400 	.word	0x58024400
 800773c:	03d09000 	.word	0x03d09000
 8007740:	003d0900 	.word	0x003d0900
 8007744:	0800f674 	.word	0x0800f674

08007748 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007754:	f003 0301 	and.w	r3, r3, #1
 8007758:	2b00      	cmp	r3, #0
 800775a:	d00a      	beq.n	8007772 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	430a      	orrs	r2, r1
 8007770:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007776:	f003 0302 	and.w	r3, r3, #2
 800777a:	2b00      	cmp	r3, #0
 800777c:	d00a      	beq.n	8007794 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	430a      	orrs	r2, r1
 8007792:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007798:	f003 0304 	and.w	r3, r3, #4
 800779c:	2b00      	cmp	r3, #0
 800779e:	d00a      	beq.n	80077b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	430a      	orrs	r2, r1
 80077b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ba:	f003 0308 	and.w	r3, r3, #8
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d00a      	beq.n	80077d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	430a      	orrs	r2, r1
 80077d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077dc:	f003 0310 	and.w	r3, r3, #16
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d00a      	beq.n	80077fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	430a      	orrs	r2, r1
 80077f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077fe:	f003 0320 	and.w	r3, r3, #32
 8007802:	2b00      	cmp	r3, #0
 8007804:	d00a      	beq.n	800781c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	430a      	orrs	r2, r1
 800781a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007824:	2b00      	cmp	r3, #0
 8007826:	d01a      	beq.n	800785e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	430a      	orrs	r2, r1
 800783c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007842:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007846:	d10a      	bne.n	800785e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	430a      	orrs	r2, r1
 800785c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00a      	beq.n	8007880 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	430a      	orrs	r2, r1
 800787e:	605a      	str	r2, [r3, #4]
  }
}
 8007880:	bf00      	nop
 8007882:	370c      	adds	r7, #12
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b098      	sub	sp, #96	; 0x60
 8007890:	af02      	add	r7, sp, #8
 8007892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2200      	movs	r2, #0
 8007898:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800789c:	f7fa f8ee 	bl	8001a7c <HAL_GetTick>
 80078a0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f003 0308 	and.w	r3, r3, #8
 80078ac:	2b08      	cmp	r3, #8
 80078ae:	d12f      	bne.n	8007910 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80078b4:	9300      	str	r3, [sp, #0]
 80078b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078b8:	2200      	movs	r2, #0
 80078ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 f88e 	bl	80079e0 <UART_WaitOnFlagUntilTimeout>
 80078c4:	4603      	mov	r3, r0
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d022      	beq.n	8007910 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d2:	e853 3f00 	ldrex	r3, [r3]
 80078d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80078d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078de:	653b      	str	r3, [r7, #80]	; 0x50
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	461a      	mov	r2, r3
 80078e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078e8:	647b      	str	r3, [r7, #68]	; 0x44
 80078ea:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80078ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078f0:	e841 2300 	strex	r3, r2, [r1]
 80078f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80078f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d1e6      	bne.n	80078ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2220      	movs	r2, #32
 8007900:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800790c:	2303      	movs	r3, #3
 800790e:	e063      	b.n	80079d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f003 0304 	and.w	r3, r3, #4
 800791a:	2b04      	cmp	r3, #4
 800791c:	d149      	bne.n	80079b2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800791e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007922:	9300      	str	r3, [sp, #0]
 8007924:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007926:	2200      	movs	r2, #0
 8007928:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 f857 	bl	80079e0 <UART_WaitOnFlagUntilTimeout>
 8007932:	4603      	mov	r3, r0
 8007934:	2b00      	cmp	r3, #0
 8007936:	d03c      	beq.n	80079b2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007940:	e853 3f00 	ldrex	r3, [r3]
 8007944:	623b      	str	r3, [r7, #32]
   return(result);
 8007946:	6a3b      	ldr	r3, [r7, #32]
 8007948:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800794c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	461a      	mov	r2, r3
 8007954:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007956:	633b      	str	r3, [r7, #48]	; 0x30
 8007958:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800795a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800795c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800795e:	e841 2300 	strex	r3, r2, [r1]
 8007962:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007966:	2b00      	cmp	r3, #0
 8007968:	d1e6      	bne.n	8007938 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	3308      	adds	r3, #8
 8007970:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	e853 3f00 	ldrex	r3, [r3]
 8007978:	60fb      	str	r3, [r7, #12]
   return(result);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f023 0301 	bic.w	r3, r3, #1
 8007980:	64bb      	str	r3, [r7, #72]	; 0x48
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	3308      	adds	r3, #8
 8007988:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800798a:	61fa      	str	r2, [r7, #28]
 800798c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798e:	69b9      	ldr	r1, [r7, #24]
 8007990:	69fa      	ldr	r2, [r7, #28]
 8007992:	e841 2300 	strex	r3, r2, [r1]
 8007996:	617b      	str	r3, [r7, #20]
   return(result);
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d1e5      	bne.n	800796a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2220      	movs	r2, #32
 80079a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079ae:	2303      	movs	r3, #3
 80079b0:	e012      	b.n	80079d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2220      	movs	r2, #32
 80079b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2220      	movs	r2, #32
 80079be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3758      	adds	r7, #88	; 0x58
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	60b9      	str	r1, [r7, #8]
 80079ea:	603b      	str	r3, [r7, #0]
 80079ec:	4613      	mov	r3, r2
 80079ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079f0:	e049      	b.n	8007a86 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079f2:	69bb      	ldr	r3, [r7, #24]
 80079f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079f8:	d045      	beq.n	8007a86 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079fa:	f7fa f83f 	bl	8001a7c <HAL_GetTick>
 80079fe:	4602      	mov	r2, r0
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	1ad3      	subs	r3, r2, r3
 8007a04:	69ba      	ldr	r2, [r7, #24]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d302      	bcc.n	8007a10 <UART_WaitOnFlagUntilTimeout+0x30>
 8007a0a:	69bb      	ldr	r3, [r7, #24]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d101      	bne.n	8007a14 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007a10:	2303      	movs	r3, #3
 8007a12:	e048      	b.n	8007aa6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f003 0304 	and.w	r3, r3, #4
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d031      	beq.n	8007a86 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	69db      	ldr	r3, [r3, #28]
 8007a28:	f003 0308 	and.w	r3, r3, #8
 8007a2c:	2b08      	cmp	r3, #8
 8007a2e:	d110      	bne.n	8007a52 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	2208      	movs	r2, #8
 8007a36:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007a38:	68f8      	ldr	r0, [r7, #12]
 8007a3a:	f000 f839 	bl	8007ab0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2208      	movs	r2, #8
 8007a42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e029      	b.n	8007aa6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	69db      	ldr	r3, [r3, #28]
 8007a58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a60:	d111      	bne.n	8007a86 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a6c:	68f8      	ldr	r0, [r7, #12]
 8007a6e:	f000 f81f 	bl	8007ab0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2220      	movs	r2, #32
 8007a76:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007a82:	2303      	movs	r3, #3
 8007a84:	e00f      	b.n	8007aa6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	69da      	ldr	r2, [r3, #28]
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	4013      	ands	r3, r2
 8007a90:	68ba      	ldr	r2, [r7, #8]
 8007a92:	429a      	cmp	r2, r3
 8007a94:	bf0c      	ite	eq
 8007a96:	2301      	moveq	r3, #1
 8007a98:	2300      	movne	r3, #0
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	79fb      	ldrb	r3, [r7, #7]
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d0a6      	beq.n	80079f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007aa4:	2300      	movs	r3, #0
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3710      	adds	r7, #16
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
	...

08007ab0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b095      	sub	sp, #84	; 0x54
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ac0:	e853 3f00 	ldrex	r3, [r3]
 8007ac4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007acc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ad6:	643b      	str	r3, [r7, #64]	; 0x40
 8007ad8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ada:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007adc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ade:	e841 2300 	strex	r3, r2, [r1]
 8007ae2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d1e6      	bne.n	8007ab8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	3308      	adds	r3, #8
 8007af0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af2:	6a3b      	ldr	r3, [r7, #32]
 8007af4:	e853 3f00 	ldrex	r3, [r3]
 8007af8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007afa:	69fa      	ldr	r2, [r7, #28]
 8007afc:	4b1e      	ldr	r3, [pc, #120]	; (8007b78 <UART_EndRxTransfer+0xc8>)
 8007afe:	4013      	ands	r3, r2
 8007b00:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	3308      	adds	r3, #8
 8007b08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b0c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b12:	e841 2300 	strex	r3, r2, [r1]
 8007b16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d1e5      	bne.n	8007aea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d118      	bne.n	8007b58 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	e853 3f00 	ldrex	r3, [r3]
 8007b32:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	f023 0310 	bic.w	r3, r3, #16
 8007b3a:	647b      	str	r3, [r7, #68]	; 0x44
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	461a      	mov	r2, r3
 8007b42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b44:	61bb      	str	r3, [r7, #24]
 8007b46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b48:	6979      	ldr	r1, [r7, #20]
 8007b4a:	69ba      	ldr	r2, [r7, #24]
 8007b4c:	e841 2300 	strex	r3, r2, [r1]
 8007b50:	613b      	str	r3, [r7, #16]
   return(result);
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d1e6      	bne.n	8007b26 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2220      	movs	r2, #32
 8007b5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007b6c:	bf00      	nop
 8007b6e:	3754      	adds	r7, #84	; 0x54
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr
 8007b78:	effffffe 	.word	0xeffffffe

08007b7c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b085      	sub	sp, #20
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d101      	bne.n	8007b92 <HAL_UARTEx_DisableFifoMode+0x16>
 8007b8e:	2302      	movs	r3, #2
 8007b90:	e027      	b.n	8007be2 <HAL_UARTEx_DisableFifoMode+0x66>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2201      	movs	r2, #1
 8007b96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2224      	movs	r2, #36	; 0x24
 8007b9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f022 0201 	bic.w	r2, r2, #1
 8007bb8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007bc0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	68fa      	ldr	r2, [r7, #12]
 8007bce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2220      	movs	r2, #32
 8007bd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007be0:	2300      	movs	r3, #0
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3714      	adds	r7, #20
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr

08007bee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b084      	sub	sp, #16
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
 8007bf6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d101      	bne.n	8007c06 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007c02:	2302      	movs	r3, #2
 8007c04:	e02d      	b.n	8007c62 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2201      	movs	r2, #1
 8007c0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2224      	movs	r2, #36	; 0x24
 8007c12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f022 0201 	bic.w	r2, r2, #1
 8007c2c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	683a      	ldr	r2, [r7, #0]
 8007c3e:	430a      	orrs	r2, r1
 8007c40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 f850 	bl	8007ce8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	68fa      	ldr	r2, [r7, #12]
 8007c4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2220      	movs	r2, #32
 8007c54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007c60:	2300      	movs	r3, #0
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3710      	adds	r7, #16
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}

08007c6a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b084      	sub	sp, #16
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
 8007c72:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d101      	bne.n	8007c82 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007c7e:	2302      	movs	r3, #2
 8007c80:	e02d      	b.n	8007cde <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2201      	movs	r2, #1
 8007c86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2224      	movs	r2, #36	; 0x24
 8007c8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f022 0201 	bic.w	r2, r2, #1
 8007ca8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	683a      	ldr	r2, [r7, #0]
 8007cba:	430a      	orrs	r2, r1
 8007cbc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 f812 	bl	8007ce8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	68fa      	ldr	r2, [r7, #12]
 8007cca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2220      	movs	r2, #32
 8007cd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007cdc:	2300      	movs	r3, #0
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3710      	adds	r7, #16
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
	...

08007ce8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b085      	sub	sp, #20
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d108      	bne.n	8007d0a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2201      	movs	r2, #1
 8007d04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007d08:	e031      	b.n	8007d6e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007d0a:	2310      	movs	r3, #16
 8007d0c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007d0e:	2310      	movs	r3, #16
 8007d10:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	0e5b      	lsrs	r3, r3, #25
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	f003 0307 	and.w	r3, r3, #7
 8007d20:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	0f5b      	lsrs	r3, r3, #29
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	f003 0307 	and.w	r3, r3, #7
 8007d30:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007d32:	7bbb      	ldrb	r3, [r7, #14]
 8007d34:	7b3a      	ldrb	r2, [r7, #12]
 8007d36:	4911      	ldr	r1, [pc, #68]	; (8007d7c <UARTEx_SetNbDataToProcess+0x94>)
 8007d38:	5c8a      	ldrb	r2, [r1, r2]
 8007d3a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007d3e:	7b3a      	ldrb	r2, [r7, #12]
 8007d40:	490f      	ldr	r1, [pc, #60]	; (8007d80 <UARTEx_SetNbDataToProcess+0x98>)
 8007d42:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007d44:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d48:	b29a      	uxth	r2, r3
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d50:	7bfb      	ldrb	r3, [r7, #15]
 8007d52:	7b7a      	ldrb	r2, [r7, #13]
 8007d54:	4909      	ldr	r1, [pc, #36]	; (8007d7c <UARTEx_SetNbDataToProcess+0x94>)
 8007d56:	5c8a      	ldrb	r2, [r1, r2]
 8007d58:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007d5c:	7b7a      	ldrb	r2, [r7, #13]
 8007d5e:	4908      	ldr	r1, [pc, #32]	; (8007d80 <UARTEx_SetNbDataToProcess+0x98>)
 8007d60:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d62:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d66:	b29a      	uxth	r2, r3
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007d6e:	bf00      	nop
 8007d70:	3714      	adds	r7, #20
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr
 8007d7a:	bf00      	nop
 8007d7c:	0800f68c 	.word	0x0800f68c
 8007d80:	0800f694 	.word	0x0800f694

08007d84 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d84:	b084      	sub	sp, #16
 8007d86:	b580      	push	{r7, lr}
 8007d88:	b084      	sub	sp, #16
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	6078      	str	r0, [r7, #4]
 8007d8e:	f107 001c 	add.w	r0, r7, #28
 8007d92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d120      	bne.n	8007dde <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	68da      	ldr	r2, [r3, #12]
 8007dac:	4b2a      	ldr	r3, [pc, #168]	; (8007e58 <USB_CoreInit+0xd4>)
 8007dae:	4013      	ands	r3, r2
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	68db      	ldr	r3, [r3, #12]
 8007db8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007dc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d105      	bne.n	8007dd2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	68db      	ldr	r3, [r3, #12]
 8007dca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 faac 	bl	8008330 <USB_CoreReset>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	73fb      	strb	r3, [r7, #15]
 8007ddc:	e01a      	b.n	8007e14 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	68db      	ldr	r3, [r3, #12]
 8007de2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 faa0 	bl	8008330 <USB_CoreReset>
 8007df0:	4603      	mov	r3, r0
 8007df2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007df4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d106      	bne.n	8007e08 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dfe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	639a      	str	r2, [r3, #56]	; 0x38
 8007e06:	e005      	b.n	8007e14 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e0c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d116      	bne.n	8007e48 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e1e:	b29a      	uxth	r2, r3
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007e28:	4b0c      	ldr	r3, [pc, #48]	; (8007e5c <USB_CoreInit+0xd8>)
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	f043 0206 	orr.w	r2, r3, #6
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	f043 0220 	orr.w	r2, r3, #32
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3710      	adds	r7, #16
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e54:	b004      	add	sp, #16
 8007e56:	4770      	bx	lr
 8007e58:	ffbdffbf 	.word	0xffbdffbf
 8007e5c:	03ee0000 	.word	0x03ee0000

08007e60 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	f023 0201 	bic.w	r2, r3, #1
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007e74:	2300      	movs	r3, #0
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	370c      	adds	r7, #12
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr

08007e82 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007e82:	b580      	push	{r7, lr}
 8007e84:	b084      	sub	sp, #16
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
 8007e8a:	460b      	mov	r3, r1
 8007e8c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007e9e:	78fb      	ldrb	r3, [r7, #3]
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d115      	bne.n	8007ed0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	68db      	ldr	r3, [r3, #12]
 8007ea8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007eb0:	2001      	movs	r0, #1
 8007eb2:	f7f9 fdef 	bl	8001a94 <HAL_Delay>
      ms++;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	3301      	adds	r3, #1
 8007eba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 fa29 	bl	8008314 <USB_GetMode>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d01e      	beq.n	8007f06 <USB_SetCurrentMode+0x84>
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2b31      	cmp	r3, #49	; 0x31
 8007ecc:	d9f0      	bls.n	8007eb0 <USB_SetCurrentMode+0x2e>
 8007ece:	e01a      	b.n	8007f06 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007ed0:	78fb      	ldrb	r3, [r7, #3]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d115      	bne.n	8007f02 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	68db      	ldr	r3, [r3, #12]
 8007eda:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007ee2:	2001      	movs	r0, #1
 8007ee4:	f7f9 fdd6 	bl	8001a94 <HAL_Delay>
      ms++;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	3301      	adds	r3, #1
 8007eec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 fa10 	bl	8008314 <USB_GetMode>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d005      	beq.n	8007f06 <USB_SetCurrentMode+0x84>
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2b31      	cmp	r3, #49	; 0x31
 8007efe:	d9f0      	bls.n	8007ee2 <USB_SetCurrentMode+0x60>
 8007f00:	e001      	b.n	8007f06 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	e005      	b.n	8007f12 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2b32      	cmp	r3, #50	; 0x32
 8007f0a:	d101      	bne.n	8007f10 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e000      	b.n	8007f12 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3710      	adds	r7, #16
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
	...

08007f1c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007f1c:	b084      	sub	sp, #16
 8007f1e:	b580      	push	{r7, lr}
 8007f20:	b086      	sub	sp, #24
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
 8007f26:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007f2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007f36:	2300      	movs	r3, #0
 8007f38:	613b      	str	r3, [r7, #16]
 8007f3a:	e009      	b.n	8007f50 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	3340      	adds	r3, #64	; 0x40
 8007f42:	009b      	lsls	r3, r3, #2
 8007f44:	4413      	add	r3, r2
 8007f46:	2200      	movs	r2, #0
 8007f48:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	613b      	str	r3, [r7, #16]
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	2b0e      	cmp	r3, #14
 8007f54:	d9f2      	bls.n	8007f3c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007f56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d11c      	bne.n	8007f96 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	68fa      	ldr	r2, [r7, #12]
 8007f66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f6a:	f043 0302 	orr.w	r3, r3, #2
 8007f6e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f74:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	601a      	str	r2, [r3, #0]
 8007f94:	e005      	b.n	8007fa2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f9a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007fa8:	461a      	mov	r2, r3
 8007faa:	2300      	movs	r3, #0
 8007fac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	680b      	ldr	r3, [r1, #0]
 8007fc0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d10c      	bne.n	8007fe2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d104      	bne.n	8007fd8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007fce:	2100      	movs	r1, #0
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f000 f965 	bl	80082a0 <USB_SetDevSpeed>
 8007fd6:	e008      	b.n	8007fea <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007fd8:	2101      	movs	r1, #1
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f000 f960 	bl	80082a0 <USB_SetDevSpeed>
 8007fe0:	e003      	b.n	8007fea <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007fe2:	2103      	movs	r1, #3
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f000 f95b 	bl	80082a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007fea:	2110      	movs	r1, #16
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 f8f3 	bl	80081d8 <USB_FlushTxFifo>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d001      	beq.n	8007ffc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 f91f 	bl	8008240 <USB_FlushRxFifo>
 8008002:	4603      	mov	r3, r0
 8008004:	2b00      	cmp	r3, #0
 8008006:	d001      	beq.n	800800c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008008:	2301      	movs	r3, #1
 800800a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008012:	461a      	mov	r2, r3
 8008014:	2300      	movs	r3, #0
 8008016:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800801e:	461a      	mov	r2, r3
 8008020:	2300      	movs	r3, #0
 8008022:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800802a:	461a      	mov	r2, r3
 800802c:	2300      	movs	r3, #0
 800802e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008030:	2300      	movs	r3, #0
 8008032:	613b      	str	r3, [r7, #16]
 8008034:	e043      	b.n	80080be <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	015a      	lsls	r2, r3, #5
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	4413      	add	r3, r2
 800803e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008048:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800804c:	d118      	bne.n	8008080 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d10a      	bne.n	800806a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	015a      	lsls	r2, r3, #5
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	4413      	add	r3, r2
 800805c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008060:	461a      	mov	r2, r3
 8008062:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008066:	6013      	str	r3, [r2, #0]
 8008068:	e013      	b.n	8008092 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	015a      	lsls	r2, r3, #5
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	4413      	add	r3, r2
 8008072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008076:	461a      	mov	r2, r3
 8008078:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800807c:	6013      	str	r3, [r2, #0]
 800807e:	e008      	b.n	8008092 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	015a      	lsls	r2, r3, #5
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	4413      	add	r3, r2
 8008088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800808c:	461a      	mov	r2, r3
 800808e:	2300      	movs	r3, #0
 8008090:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	015a      	lsls	r2, r3, #5
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	4413      	add	r3, r2
 800809a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800809e:	461a      	mov	r2, r3
 80080a0:	2300      	movs	r3, #0
 80080a2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	015a      	lsls	r2, r3, #5
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	4413      	add	r3, r2
 80080ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080b0:	461a      	mov	r2, r3
 80080b2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80080b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	3301      	adds	r3, #1
 80080bc:	613b      	str	r3, [r7, #16]
 80080be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c0:	693a      	ldr	r2, [r7, #16]
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d3b7      	bcc.n	8008036 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80080c6:	2300      	movs	r3, #0
 80080c8:	613b      	str	r3, [r7, #16]
 80080ca:	e043      	b.n	8008154 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	015a      	lsls	r2, r3, #5
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	4413      	add	r3, r2
 80080d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080e2:	d118      	bne.n	8008116 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d10a      	bne.n	8008100 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	015a      	lsls	r2, r3, #5
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	4413      	add	r3, r2
 80080f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080f6:	461a      	mov	r2, r3
 80080f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80080fc:	6013      	str	r3, [r2, #0]
 80080fe:	e013      	b.n	8008128 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	015a      	lsls	r2, r3, #5
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	4413      	add	r3, r2
 8008108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800810c:	461a      	mov	r2, r3
 800810e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008112:	6013      	str	r3, [r2, #0]
 8008114:	e008      	b.n	8008128 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	015a      	lsls	r2, r3, #5
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	4413      	add	r3, r2
 800811e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008122:	461a      	mov	r2, r3
 8008124:	2300      	movs	r3, #0
 8008126:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	015a      	lsls	r2, r3, #5
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	4413      	add	r3, r2
 8008130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008134:	461a      	mov	r2, r3
 8008136:	2300      	movs	r3, #0
 8008138:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	015a      	lsls	r2, r3, #5
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	4413      	add	r3, r2
 8008142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008146:	461a      	mov	r2, r3
 8008148:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800814c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	3301      	adds	r3, #1
 8008152:	613b      	str	r3, [r7, #16]
 8008154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008156:	693a      	ldr	r2, [r7, #16]
 8008158:	429a      	cmp	r2, r3
 800815a:	d3b7      	bcc.n	80080cc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008162:	691b      	ldr	r3, [r3, #16]
 8008164:	68fa      	ldr	r2, [r7, #12]
 8008166:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800816a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800816e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800817c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800817e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008180:	2b00      	cmp	r3, #0
 8008182:	d105      	bne.n	8008190 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	699b      	ldr	r3, [r3, #24]
 8008188:	f043 0210 	orr.w	r2, r3, #16
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	699a      	ldr	r2, [r3, #24]
 8008194:	4b0e      	ldr	r3, [pc, #56]	; (80081d0 <USB_DevInit+0x2b4>)
 8008196:	4313      	orrs	r3, r2
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800819c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d005      	beq.n	80081ae <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	699b      	ldr	r3, [r3, #24]
 80081a6:	f043 0208 	orr.w	r2, r3, #8
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80081ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d105      	bne.n	80081c0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	699a      	ldr	r2, [r3, #24]
 80081b8:	4b06      	ldr	r3, [pc, #24]	; (80081d4 <USB_DevInit+0x2b8>)
 80081ba:	4313      	orrs	r3, r2
 80081bc:	687a      	ldr	r2, [r7, #4]
 80081be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80081c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3718      	adds	r7, #24
 80081c6:	46bd      	mov	sp, r7
 80081c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80081cc:	b004      	add	sp, #16
 80081ce:	4770      	bx	lr
 80081d0:	803c3800 	.word	0x803c3800
 80081d4:	40000004 	.word	0x40000004

080081d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80081d8:	b480      	push	{r7}
 80081da:	b085      	sub	sp, #20
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80081e2:	2300      	movs	r3, #0
 80081e4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	3301      	adds	r3, #1
 80081ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	4a13      	ldr	r2, [pc, #76]	; (800823c <USB_FlushTxFifo+0x64>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d901      	bls.n	80081f8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80081f4:	2303      	movs	r3, #3
 80081f6:	e01b      	b.n	8008230 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	691b      	ldr	r3, [r3, #16]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	daf2      	bge.n	80081e6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008200:	2300      	movs	r3, #0
 8008202:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	019b      	lsls	r3, r3, #6
 8008208:	f043 0220 	orr.w	r2, r3, #32
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	3301      	adds	r3, #1
 8008214:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	4a08      	ldr	r2, [pc, #32]	; (800823c <USB_FlushTxFifo+0x64>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d901      	bls.n	8008222 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800821e:	2303      	movs	r3, #3
 8008220:	e006      	b.n	8008230 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	691b      	ldr	r3, [r3, #16]
 8008226:	f003 0320 	and.w	r3, r3, #32
 800822a:	2b20      	cmp	r3, #32
 800822c:	d0f0      	beq.n	8008210 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800822e:	2300      	movs	r3, #0
}
 8008230:	4618      	mov	r0, r3
 8008232:	3714      	adds	r7, #20
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr
 800823c:	00030d40 	.word	0x00030d40

08008240 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008240:	b480      	push	{r7}
 8008242:	b085      	sub	sp, #20
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008248:	2300      	movs	r3, #0
 800824a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	3301      	adds	r3, #1
 8008250:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	4a11      	ldr	r2, [pc, #68]	; (800829c <USB_FlushRxFifo+0x5c>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d901      	bls.n	800825e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800825a:	2303      	movs	r3, #3
 800825c:	e018      	b.n	8008290 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	691b      	ldr	r3, [r3, #16]
 8008262:	2b00      	cmp	r3, #0
 8008264:	daf2      	bge.n	800824c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008266:	2300      	movs	r3, #0
 8008268:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2210      	movs	r2, #16
 800826e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	3301      	adds	r3, #1
 8008274:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	4a08      	ldr	r2, [pc, #32]	; (800829c <USB_FlushRxFifo+0x5c>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d901      	bls.n	8008282 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800827e:	2303      	movs	r3, #3
 8008280:	e006      	b.n	8008290 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	691b      	ldr	r3, [r3, #16]
 8008286:	f003 0310 	and.w	r3, r3, #16
 800828a:	2b10      	cmp	r3, #16
 800828c:	d0f0      	beq.n	8008270 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800828e:	2300      	movs	r3, #0
}
 8008290:	4618      	mov	r0, r3
 8008292:	3714      	adds	r7, #20
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr
 800829c:	00030d40 	.word	0x00030d40

080082a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b085      	sub	sp, #20
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	460b      	mov	r3, r1
 80082aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	78fb      	ldrb	r3, [r7, #3]
 80082ba:	68f9      	ldr	r1, [r7, #12]
 80082bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082c0:	4313      	orrs	r3, r2
 80082c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3714      	adds	r7, #20
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr

080082d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80082d2:	b480      	push	{r7}
 80082d4:	b085      	sub	sp, #20
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	68fa      	ldr	r2, [r7, #12]
 80082e8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80082ec:	f023 0303 	bic.w	r3, r3, #3
 80082f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	68fa      	ldr	r2, [r7, #12]
 80082fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008300:	f043 0302 	orr.w	r3, r3, #2
 8008304:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008306:	2300      	movs	r3, #0
}
 8008308:	4618      	mov	r0, r3
 800830a:	3714      	adds	r7, #20
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr

08008314 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008314:	b480      	push	{r7}
 8008316:	b083      	sub	sp, #12
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	695b      	ldr	r3, [r3, #20]
 8008320:	f003 0301 	and.w	r3, r3, #1
}
 8008324:	4618      	mov	r0, r3
 8008326:	370c      	adds	r7, #12
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008330:	b480      	push	{r7}
 8008332:	b085      	sub	sp, #20
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008338:	2300      	movs	r3, #0
 800833a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	3301      	adds	r3, #1
 8008340:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	4a13      	ldr	r2, [pc, #76]	; (8008394 <USB_CoreReset+0x64>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d901      	bls.n	800834e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800834a:	2303      	movs	r3, #3
 800834c:	e01b      	b.n	8008386 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	691b      	ldr	r3, [r3, #16]
 8008352:	2b00      	cmp	r3, #0
 8008354:	daf2      	bge.n	800833c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008356:	2300      	movs	r3, #0
 8008358:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	691b      	ldr	r3, [r3, #16]
 800835e:	f043 0201 	orr.w	r2, r3, #1
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	3301      	adds	r3, #1
 800836a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	4a09      	ldr	r2, [pc, #36]	; (8008394 <USB_CoreReset+0x64>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d901      	bls.n	8008378 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008374:	2303      	movs	r3, #3
 8008376:	e006      	b.n	8008386 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	691b      	ldr	r3, [r3, #16]
 800837c:	f003 0301 	and.w	r3, r3, #1
 8008380:	2b01      	cmp	r3, #1
 8008382:	d0f0      	beq.n	8008366 <USB_CoreReset+0x36>

  return HAL_OK;
 8008384:	2300      	movs	r3, #0
}
 8008386:	4618      	mov	r0, r3
 8008388:	3714      	adds	r7, #20
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr
 8008392:	bf00      	nop
 8008394:	00030d40 	.word	0x00030d40

08008398 <__NVIC_SetPriority>:
{
 8008398:	b480      	push	{r7}
 800839a:	b083      	sub	sp, #12
 800839c:	af00      	add	r7, sp, #0
 800839e:	4603      	mov	r3, r0
 80083a0:	6039      	str	r1, [r7, #0]
 80083a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80083a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	db0a      	blt.n	80083c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	b2da      	uxtb	r2, r3
 80083b0:	490c      	ldr	r1, [pc, #48]	; (80083e4 <__NVIC_SetPriority+0x4c>)
 80083b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80083b6:	0112      	lsls	r2, r2, #4
 80083b8:	b2d2      	uxtb	r2, r2
 80083ba:	440b      	add	r3, r1
 80083bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80083c0:	e00a      	b.n	80083d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	b2da      	uxtb	r2, r3
 80083c6:	4908      	ldr	r1, [pc, #32]	; (80083e8 <__NVIC_SetPriority+0x50>)
 80083c8:	88fb      	ldrh	r3, [r7, #6]
 80083ca:	f003 030f 	and.w	r3, r3, #15
 80083ce:	3b04      	subs	r3, #4
 80083d0:	0112      	lsls	r2, r2, #4
 80083d2:	b2d2      	uxtb	r2, r2
 80083d4:	440b      	add	r3, r1
 80083d6:	761a      	strb	r2, [r3, #24]
}
 80083d8:	bf00      	nop
 80083da:	370c      	adds	r7, #12
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr
 80083e4:	e000e100 	.word	0xe000e100
 80083e8:	e000ed00 	.word	0xe000ed00

080083ec <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80083ec:	b580      	push	{r7, lr}
 80083ee:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80083f0:	4b05      	ldr	r3, [pc, #20]	; (8008408 <SysTick_Handler+0x1c>)
 80083f2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80083f4:	f002 f964 	bl	800a6c0 <xTaskGetSchedulerState>
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	d001      	beq.n	8008402 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80083fe:	f000 fd9b 	bl	8008f38 <xPortSysTickHandler>
  }
}
 8008402:	bf00      	nop
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop
 8008408:	e000e010 	.word	0xe000e010

0800840c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800840c:	b580      	push	{r7, lr}
 800840e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008410:	2100      	movs	r1, #0
 8008412:	f06f 0004 	mvn.w	r0, #4
 8008416:	f7ff ffbf 	bl	8008398 <__NVIC_SetPriority>
#endif
}
 800841a:	bf00      	nop
 800841c:	bd80      	pop	{r7, pc}
	...

08008420 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008426:	f3ef 8305 	mrs	r3, IPSR
 800842a:	603b      	str	r3, [r7, #0]
  return(result);
 800842c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800842e:	2b00      	cmp	r3, #0
 8008430:	d003      	beq.n	800843a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008432:	f06f 0305 	mvn.w	r3, #5
 8008436:	607b      	str	r3, [r7, #4]
 8008438:	e00c      	b.n	8008454 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800843a:	4b0a      	ldr	r3, [pc, #40]	; (8008464 <osKernelInitialize+0x44>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d105      	bne.n	800844e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008442:	4b08      	ldr	r3, [pc, #32]	; (8008464 <osKernelInitialize+0x44>)
 8008444:	2201      	movs	r2, #1
 8008446:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008448:	2300      	movs	r3, #0
 800844a:	607b      	str	r3, [r7, #4]
 800844c:	e002      	b.n	8008454 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800844e:	f04f 33ff 	mov.w	r3, #4294967295
 8008452:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008454:	687b      	ldr	r3, [r7, #4]
}
 8008456:	4618      	mov	r0, r3
 8008458:	370c      	adds	r7, #12
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr
 8008462:	bf00      	nop
 8008464:	24000a10 	.word	0x24000a10

08008468 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800846e:	f3ef 8305 	mrs	r3, IPSR
 8008472:	603b      	str	r3, [r7, #0]
  return(result);
 8008474:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008476:	2b00      	cmp	r3, #0
 8008478:	d003      	beq.n	8008482 <osKernelStart+0x1a>
    stat = osErrorISR;
 800847a:	f06f 0305 	mvn.w	r3, #5
 800847e:	607b      	str	r3, [r7, #4]
 8008480:	e010      	b.n	80084a4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008482:	4b0b      	ldr	r3, [pc, #44]	; (80084b0 <osKernelStart+0x48>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	2b01      	cmp	r3, #1
 8008488:	d109      	bne.n	800849e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800848a:	f7ff ffbf 	bl	800840c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800848e:	4b08      	ldr	r3, [pc, #32]	; (80084b0 <osKernelStart+0x48>)
 8008490:	2202      	movs	r2, #2
 8008492:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008494:	f001 fcb8 	bl	8009e08 <vTaskStartScheduler>
      stat = osOK;
 8008498:	2300      	movs	r3, #0
 800849a:	607b      	str	r3, [r7, #4]
 800849c:	e002      	b.n	80084a4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800849e:	f04f 33ff 	mov.w	r3, #4294967295
 80084a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80084a4:	687b      	ldr	r3, [r7, #4]
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3708      	adds	r7, #8
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
 80084ae:	bf00      	nop
 80084b0:	24000a10 	.word	0x24000a10

080084b4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b08e      	sub	sp, #56	; 0x38
 80084b8:	af04      	add	r7, sp, #16
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80084c0:	2300      	movs	r3, #0
 80084c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084c4:	f3ef 8305 	mrs	r3, IPSR
 80084c8:	617b      	str	r3, [r7, #20]
  return(result);
 80084ca:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d17e      	bne.n	80085ce <osThreadNew+0x11a>
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d07b      	beq.n	80085ce <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80084d6:	2380      	movs	r3, #128	; 0x80
 80084d8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80084da:	2318      	movs	r3, #24
 80084dc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80084de:	2300      	movs	r3, #0
 80084e0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80084e2:	f04f 33ff 	mov.w	r3, #4294967295
 80084e6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d045      	beq.n	800857a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d002      	beq.n	80084fc <osThreadNew+0x48>
        name = attr->name;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	699b      	ldr	r3, [r3, #24]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d002      	beq.n	800850a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	699b      	ldr	r3, [r3, #24]
 8008508:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800850a:	69fb      	ldr	r3, [r7, #28]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d008      	beq.n	8008522 <osThreadNew+0x6e>
 8008510:	69fb      	ldr	r3, [r7, #28]
 8008512:	2b38      	cmp	r3, #56	; 0x38
 8008514:	d805      	bhi.n	8008522 <osThreadNew+0x6e>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	f003 0301 	and.w	r3, r3, #1
 800851e:	2b00      	cmp	r3, #0
 8008520:	d001      	beq.n	8008526 <osThreadNew+0x72>
        return (NULL);
 8008522:	2300      	movs	r3, #0
 8008524:	e054      	b.n	80085d0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	695b      	ldr	r3, [r3, #20]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d003      	beq.n	8008536 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	695b      	ldr	r3, [r3, #20]
 8008532:	089b      	lsrs	r3, r3, #2
 8008534:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	689b      	ldr	r3, [r3, #8]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d00e      	beq.n	800855c <osThreadNew+0xa8>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	68db      	ldr	r3, [r3, #12]
 8008542:	2ba7      	cmp	r3, #167	; 0xa7
 8008544:	d90a      	bls.n	800855c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800854a:	2b00      	cmp	r3, #0
 800854c:	d006      	beq.n	800855c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	695b      	ldr	r3, [r3, #20]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d002      	beq.n	800855c <osThreadNew+0xa8>
        mem = 1;
 8008556:	2301      	movs	r3, #1
 8008558:	61bb      	str	r3, [r7, #24]
 800855a:	e010      	b.n	800857e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d10c      	bne.n	800857e <osThreadNew+0xca>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	68db      	ldr	r3, [r3, #12]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d108      	bne.n	800857e <osThreadNew+0xca>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	691b      	ldr	r3, [r3, #16]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d104      	bne.n	800857e <osThreadNew+0xca>
          mem = 0;
 8008574:	2300      	movs	r3, #0
 8008576:	61bb      	str	r3, [r7, #24]
 8008578:	e001      	b.n	800857e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800857a:	2300      	movs	r3, #0
 800857c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800857e:	69bb      	ldr	r3, [r7, #24]
 8008580:	2b01      	cmp	r3, #1
 8008582:	d110      	bne.n	80085a6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800858c:	9202      	str	r2, [sp, #8]
 800858e:	9301      	str	r3, [sp, #4]
 8008590:	69fb      	ldr	r3, [r7, #28]
 8008592:	9300      	str	r3, [sp, #0]
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	6a3a      	ldr	r2, [r7, #32]
 8008598:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800859a:	68f8      	ldr	r0, [r7, #12]
 800859c:	f001 fa48 	bl	8009a30 <xTaskCreateStatic>
 80085a0:	4603      	mov	r3, r0
 80085a2:	613b      	str	r3, [r7, #16]
 80085a4:	e013      	b.n	80085ce <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80085a6:	69bb      	ldr	r3, [r7, #24]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d110      	bne.n	80085ce <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80085ac:	6a3b      	ldr	r3, [r7, #32]
 80085ae:	b29a      	uxth	r2, r3
 80085b0:	f107 0310 	add.w	r3, r7, #16
 80085b4:	9301      	str	r3, [sp, #4]
 80085b6:	69fb      	ldr	r3, [r7, #28]
 80085b8:	9300      	str	r3, [sp, #0]
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80085be:	68f8      	ldr	r0, [r7, #12]
 80085c0:	f001 fa93 	bl	8009aea <xTaskCreate>
 80085c4:	4603      	mov	r3, r0
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	d001      	beq.n	80085ce <osThreadNew+0x11a>
            hTask = NULL;
 80085ca:	2300      	movs	r3, #0
 80085cc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80085ce:	693b      	ldr	r3, [r7, #16]
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3728      	adds	r7, #40	; 0x28
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80085d8:	b580      	push	{r7, lr}
 80085da:	b084      	sub	sp, #16
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085e0:	f3ef 8305 	mrs	r3, IPSR
 80085e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80085e6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d003      	beq.n	80085f4 <osDelay+0x1c>
    stat = osErrorISR;
 80085ec:	f06f 0305 	mvn.w	r3, #5
 80085f0:	60fb      	str	r3, [r7, #12]
 80085f2:	e007      	b.n	8008604 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80085f4:	2300      	movs	r3, #0
 80085f6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d002      	beq.n	8008604 <osDelay+0x2c>
      vTaskDelay(ticks);
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f001 fbce 	bl	8009da0 <vTaskDelay>
    }
  }

  return (stat);
 8008604:	68fb      	ldr	r3, [r7, #12]
}
 8008606:	4618      	mov	r0, r3
 8008608:	3710      	adds	r7, #16
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
	...

08008610 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008610:	b480      	push	{r7}
 8008612:	b085      	sub	sp, #20
 8008614:	af00      	add	r7, sp, #0
 8008616:	60f8      	str	r0, [r7, #12]
 8008618:	60b9      	str	r1, [r7, #8]
 800861a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	4a07      	ldr	r2, [pc, #28]	; (800863c <vApplicationGetIdleTaskMemory+0x2c>)
 8008620:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	4a06      	ldr	r2, [pc, #24]	; (8008640 <vApplicationGetIdleTaskMemory+0x30>)
 8008626:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2280      	movs	r2, #128	; 0x80
 800862c:	601a      	str	r2, [r3, #0]
}
 800862e:	bf00      	nop
 8008630:	3714      	adds	r7, #20
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr
 800863a:	bf00      	nop
 800863c:	24000a14 	.word	0x24000a14
 8008640:	24000abc 	.word	0x24000abc

08008644 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008644:	b480      	push	{r7}
 8008646:	b085      	sub	sp, #20
 8008648:	af00      	add	r7, sp, #0
 800864a:	60f8      	str	r0, [r7, #12]
 800864c:	60b9      	str	r1, [r7, #8]
 800864e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	4a07      	ldr	r2, [pc, #28]	; (8008670 <vApplicationGetTimerTaskMemory+0x2c>)
 8008654:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	4a06      	ldr	r2, [pc, #24]	; (8008674 <vApplicationGetTimerTaskMemory+0x30>)
 800865a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008662:	601a      	str	r2, [r3, #0]
}
 8008664:	bf00      	nop
 8008666:	3714      	adds	r7, #20
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr
 8008670:	24000cbc 	.word	0x24000cbc
 8008674:	24000d64 	.word	0x24000d64

08008678 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b08a      	sub	sp, #40	; 0x28
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008680:	2300      	movs	r3, #0
 8008682:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008684:	f001 fc30 	bl	8009ee8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008688:	4b5b      	ldr	r3, [pc, #364]	; (80087f8 <pvPortMalloc+0x180>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d101      	bne.n	8008694 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008690:	f000 f920 	bl	80088d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008694:	4b59      	ldr	r3, [pc, #356]	; (80087fc <pvPortMalloc+0x184>)
 8008696:	681a      	ldr	r2, [r3, #0]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	4013      	ands	r3, r2
 800869c:	2b00      	cmp	r3, #0
 800869e:	f040 8093 	bne.w	80087c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d01d      	beq.n	80086e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80086a8:	2208      	movs	r2, #8
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	4413      	add	r3, r2
 80086ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f003 0307 	and.w	r3, r3, #7
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d014      	beq.n	80086e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f023 0307 	bic.w	r3, r3, #7
 80086c0:	3308      	adds	r3, #8
 80086c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f003 0307 	and.w	r3, r3, #7
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d00a      	beq.n	80086e4 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80086ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d2:	f383 8811 	msr	BASEPRI, r3
 80086d6:	f3bf 8f6f 	isb	sy
 80086da:	f3bf 8f4f 	dsb	sy
 80086de:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80086e0:	bf00      	nop
 80086e2:	e7fe      	b.n	80086e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d06e      	beq.n	80087c8 <pvPortMalloc+0x150>
 80086ea:	4b45      	ldr	r3, [pc, #276]	; (8008800 <pvPortMalloc+0x188>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d869      	bhi.n	80087c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80086f4:	4b43      	ldr	r3, [pc, #268]	; (8008804 <pvPortMalloc+0x18c>)
 80086f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80086f8:	4b42      	ldr	r3, [pc, #264]	; (8008804 <pvPortMalloc+0x18c>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80086fe:	e004      	b.n	800870a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008702:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800870a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	687a      	ldr	r2, [r7, #4]
 8008710:	429a      	cmp	r2, r3
 8008712:	d903      	bls.n	800871c <pvPortMalloc+0xa4>
 8008714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d1f1      	bne.n	8008700 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800871c:	4b36      	ldr	r3, [pc, #216]	; (80087f8 <pvPortMalloc+0x180>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008722:	429a      	cmp	r2, r3
 8008724:	d050      	beq.n	80087c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008726:	6a3b      	ldr	r3, [r7, #32]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2208      	movs	r2, #8
 800872c:	4413      	add	r3, r2
 800872e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	6a3b      	ldr	r3, [r7, #32]
 8008736:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873a:	685a      	ldr	r2, [r3, #4]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	1ad2      	subs	r2, r2, r3
 8008740:	2308      	movs	r3, #8
 8008742:	005b      	lsls	r3, r3, #1
 8008744:	429a      	cmp	r2, r3
 8008746:	d91f      	bls.n	8008788 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	4413      	add	r3, r2
 800874e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008750:	69bb      	ldr	r3, [r7, #24]
 8008752:	f003 0307 	and.w	r3, r3, #7
 8008756:	2b00      	cmp	r3, #0
 8008758:	d00a      	beq.n	8008770 <pvPortMalloc+0xf8>
	__asm volatile
 800875a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800875e:	f383 8811 	msr	BASEPRI, r3
 8008762:	f3bf 8f6f 	isb	sy
 8008766:	f3bf 8f4f 	dsb	sy
 800876a:	613b      	str	r3, [r7, #16]
}
 800876c:	bf00      	nop
 800876e:	e7fe      	b.n	800876e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008772:	685a      	ldr	r2, [r3, #4]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	1ad2      	subs	r2, r2, r3
 8008778:	69bb      	ldr	r3, [r7, #24]
 800877a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800877c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008782:	69b8      	ldr	r0, [r7, #24]
 8008784:	f000 f908 	bl	8008998 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008788:	4b1d      	ldr	r3, [pc, #116]	; (8008800 <pvPortMalloc+0x188>)
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	1ad3      	subs	r3, r2, r3
 8008792:	4a1b      	ldr	r2, [pc, #108]	; (8008800 <pvPortMalloc+0x188>)
 8008794:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008796:	4b1a      	ldr	r3, [pc, #104]	; (8008800 <pvPortMalloc+0x188>)
 8008798:	681a      	ldr	r2, [r3, #0]
 800879a:	4b1b      	ldr	r3, [pc, #108]	; (8008808 <pvPortMalloc+0x190>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	429a      	cmp	r2, r3
 80087a0:	d203      	bcs.n	80087aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80087a2:	4b17      	ldr	r3, [pc, #92]	; (8008800 <pvPortMalloc+0x188>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a18      	ldr	r2, [pc, #96]	; (8008808 <pvPortMalloc+0x190>)
 80087a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80087aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ac:	685a      	ldr	r2, [r3, #4]
 80087ae:	4b13      	ldr	r3, [pc, #76]	; (80087fc <pvPortMalloc+0x184>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	431a      	orrs	r2, r3
 80087b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80087b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ba:	2200      	movs	r2, #0
 80087bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80087be:	4b13      	ldr	r3, [pc, #76]	; (800880c <pvPortMalloc+0x194>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	3301      	adds	r3, #1
 80087c4:	4a11      	ldr	r2, [pc, #68]	; (800880c <pvPortMalloc+0x194>)
 80087c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80087c8:	f001 fb9c 	bl	8009f04 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80087cc:	69fb      	ldr	r3, [r7, #28]
 80087ce:	f003 0307 	and.w	r3, r3, #7
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d00a      	beq.n	80087ec <pvPortMalloc+0x174>
	__asm volatile
 80087d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087da:	f383 8811 	msr	BASEPRI, r3
 80087de:	f3bf 8f6f 	isb	sy
 80087e2:	f3bf 8f4f 	dsb	sy
 80087e6:	60fb      	str	r3, [r7, #12]
}
 80087e8:	bf00      	nop
 80087ea:	e7fe      	b.n	80087ea <pvPortMalloc+0x172>
	return pvReturn;
 80087ec:	69fb      	ldr	r3, [r7, #28]
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3728      	adds	r7, #40	; 0x28
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}
 80087f6:	bf00      	nop
 80087f8:	24004d6c 	.word	0x24004d6c
 80087fc:	24004d80 	.word	0x24004d80
 8008800:	24004d70 	.word	0x24004d70
 8008804:	24004d64 	.word	0x24004d64
 8008808:	24004d74 	.word	0x24004d74
 800880c:	24004d78 	.word	0x24004d78

08008810 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b086      	sub	sp, #24
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d04d      	beq.n	80088be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008822:	2308      	movs	r3, #8
 8008824:	425b      	negs	r3, r3
 8008826:	697a      	ldr	r2, [r7, #20]
 8008828:	4413      	add	r3, r2
 800882a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	685a      	ldr	r2, [r3, #4]
 8008834:	4b24      	ldr	r3, [pc, #144]	; (80088c8 <vPortFree+0xb8>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4013      	ands	r3, r2
 800883a:	2b00      	cmp	r3, #0
 800883c:	d10a      	bne.n	8008854 <vPortFree+0x44>
	__asm volatile
 800883e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008842:	f383 8811 	msr	BASEPRI, r3
 8008846:	f3bf 8f6f 	isb	sy
 800884a:	f3bf 8f4f 	dsb	sy
 800884e:	60fb      	str	r3, [r7, #12]
}
 8008850:	bf00      	nop
 8008852:	e7fe      	b.n	8008852 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d00a      	beq.n	8008872 <vPortFree+0x62>
	__asm volatile
 800885c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008860:	f383 8811 	msr	BASEPRI, r3
 8008864:	f3bf 8f6f 	isb	sy
 8008868:	f3bf 8f4f 	dsb	sy
 800886c:	60bb      	str	r3, [r7, #8]
}
 800886e:	bf00      	nop
 8008870:	e7fe      	b.n	8008870 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	685a      	ldr	r2, [r3, #4]
 8008876:	4b14      	ldr	r3, [pc, #80]	; (80088c8 <vPortFree+0xb8>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4013      	ands	r3, r2
 800887c:	2b00      	cmp	r3, #0
 800887e:	d01e      	beq.n	80088be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d11a      	bne.n	80088be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	685a      	ldr	r2, [r3, #4]
 800888c:	4b0e      	ldr	r3, [pc, #56]	; (80088c8 <vPortFree+0xb8>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	43db      	mvns	r3, r3
 8008892:	401a      	ands	r2, r3
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008898:	f001 fb26 	bl	8009ee8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	685a      	ldr	r2, [r3, #4]
 80088a0:	4b0a      	ldr	r3, [pc, #40]	; (80088cc <vPortFree+0xbc>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4413      	add	r3, r2
 80088a6:	4a09      	ldr	r2, [pc, #36]	; (80088cc <vPortFree+0xbc>)
 80088a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80088aa:	6938      	ldr	r0, [r7, #16]
 80088ac:	f000 f874 	bl	8008998 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80088b0:	4b07      	ldr	r3, [pc, #28]	; (80088d0 <vPortFree+0xc0>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	3301      	adds	r3, #1
 80088b6:	4a06      	ldr	r2, [pc, #24]	; (80088d0 <vPortFree+0xc0>)
 80088b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80088ba:	f001 fb23 	bl	8009f04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80088be:	bf00      	nop
 80088c0:	3718      	adds	r7, #24
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
 80088c6:	bf00      	nop
 80088c8:	24004d80 	.word	0x24004d80
 80088cc:	24004d70 	.word	0x24004d70
 80088d0:	24004d7c 	.word	0x24004d7c

080088d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80088d4:	b480      	push	{r7}
 80088d6:	b085      	sub	sp, #20
 80088d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80088da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80088de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80088e0:	4b27      	ldr	r3, [pc, #156]	; (8008980 <prvHeapInit+0xac>)
 80088e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f003 0307 	and.w	r3, r3, #7
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d00c      	beq.n	8008908 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	3307      	adds	r3, #7
 80088f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f023 0307 	bic.w	r3, r3, #7
 80088fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80088fc:	68ba      	ldr	r2, [r7, #8]
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	1ad3      	subs	r3, r2, r3
 8008902:	4a1f      	ldr	r2, [pc, #124]	; (8008980 <prvHeapInit+0xac>)
 8008904:	4413      	add	r3, r2
 8008906:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800890c:	4a1d      	ldr	r2, [pc, #116]	; (8008984 <prvHeapInit+0xb0>)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008912:	4b1c      	ldr	r3, [pc, #112]	; (8008984 <prvHeapInit+0xb0>)
 8008914:	2200      	movs	r2, #0
 8008916:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	68ba      	ldr	r2, [r7, #8]
 800891c:	4413      	add	r3, r2
 800891e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008920:	2208      	movs	r2, #8
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	1a9b      	subs	r3, r3, r2
 8008926:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f023 0307 	bic.w	r3, r3, #7
 800892e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	4a15      	ldr	r2, [pc, #84]	; (8008988 <prvHeapInit+0xb4>)
 8008934:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008936:	4b14      	ldr	r3, [pc, #80]	; (8008988 <prvHeapInit+0xb4>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	2200      	movs	r2, #0
 800893c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800893e:	4b12      	ldr	r3, [pc, #72]	; (8008988 <prvHeapInit+0xb4>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	2200      	movs	r2, #0
 8008944:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	68fa      	ldr	r2, [r7, #12]
 800894e:	1ad2      	subs	r2, r2, r3
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008954:	4b0c      	ldr	r3, [pc, #48]	; (8008988 <prvHeapInit+0xb4>)
 8008956:	681a      	ldr	r2, [r3, #0]
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	4a0a      	ldr	r2, [pc, #40]	; (800898c <prvHeapInit+0xb8>)
 8008962:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	4a09      	ldr	r2, [pc, #36]	; (8008990 <prvHeapInit+0xbc>)
 800896a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800896c:	4b09      	ldr	r3, [pc, #36]	; (8008994 <prvHeapInit+0xc0>)
 800896e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008972:	601a      	str	r2, [r3, #0]
}
 8008974:	bf00      	nop
 8008976:	3714      	adds	r7, #20
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr
 8008980:	24001164 	.word	0x24001164
 8008984:	24004d64 	.word	0x24004d64
 8008988:	24004d6c 	.word	0x24004d6c
 800898c:	24004d74 	.word	0x24004d74
 8008990:	24004d70 	.word	0x24004d70
 8008994:	24004d80 	.word	0x24004d80

08008998 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008998:	b480      	push	{r7}
 800899a:	b085      	sub	sp, #20
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80089a0:	4b28      	ldr	r3, [pc, #160]	; (8008a44 <prvInsertBlockIntoFreeList+0xac>)
 80089a2:	60fb      	str	r3, [r7, #12]
 80089a4:	e002      	b.n	80089ac <prvInsertBlockIntoFreeList+0x14>
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	60fb      	str	r3, [r7, #12]
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d8f7      	bhi.n	80089a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	68ba      	ldr	r2, [r7, #8]
 80089c0:	4413      	add	r3, r2
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d108      	bne.n	80089da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	685a      	ldr	r2, [r3, #4]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	441a      	add	r2, r3
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	68ba      	ldr	r2, [r7, #8]
 80089e4:	441a      	add	r2, r3
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d118      	bne.n	8008a20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681a      	ldr	r2, [r3, #0]
 80089f2:	4b15      	ldr	r3, [pc, #84]	; (8008a48 <prvInsertBlockIntoFreeList+0xb0>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	429a      	cmp	r2, r3
 80089f8:	d00d      	beq.n	8008a16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	685a      	ldr	r2, [r3, #4]
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	441a      	add	r2, r3
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	601a      	str	r2, [r3, #0]
 8008a14:	e008      	b.n	8008a28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008a16:	4b0c      	ldr	r3, [pc, #48]	; (8008a48 <prvInsertBlockIntoFreeList+0xb0>)
 8008a18:	681a      	ldr	r2, [r3, #0]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	601a      	str	r2, [r3, #0]
 8008a1e:	e003      	b.n	8008a28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681a      	ldr	r2, [r3, #0]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008a28:	68fa      	ldr	r2, [r7, #12]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d002      	beq.n	8008a36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a36:	bf00      	nop
 8008a38:	3714      	adds	r7, #20
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr
 8008a42:	bf00      	nop
 8008a44:	24004d64 	.word	0x24004d64
 8008a48:	24004d6c 	.word	0x24004d6c

08008a4c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b083      	sub	sp, #12
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f103 0208 	add.w	r2, r3, #8
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f04f 32ff 	mov.w	r2, #4294967295
 8008a64:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f103 0208 	add.w	r2, r3, #8
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f103 0208 	add.w	r2, r3, #8
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008a80:	bf00      	nop
 8008a82:	370c      	adds	r7, #12
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr

08008a8c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b083      	sub	sp, #12
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2200      	movs	r2, #0
 8008a98:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008a9a:	bf00      	nop
 8008a9c:	370c      	adds	r7, #12
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa4:	4770      	bx	lr

08008aa6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008aa6:	b480      	push	{r7}
 8008aa8:	b085      	sub	sp, #20
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	6078      	str	r0, [r7, #4]
 8008aae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	68fa      	ldr	r2, [r7, #12]
 8008aba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	689a      	ldr	r2, [r3, #8]
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	689b      	ldr	r3, [r3, #8]
 8008ac8:	683a      	ldr	r2, [r7, #0]
 8008aca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	683a      	ldr	r2, [r7, #0]
 8008ad0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	1c5a      	adds	r2, r3, #1
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	601a      	str	r2, [r3, #0]
}
 8008ae2:	bf00      	nop
 8008ae4:	3714      	adds	r7, #20
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr

08008aee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008aee:	b480      	push	{r7}
 8008af0:	b085      	sub	sp, #20
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	6078      	str	r0, [r7, #4]
 8008af6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b04:	d103      	bne.n	8008b0e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	691b      	ldr	r3, [r3, #16]
 8008b0a:	60fb      	str	r3, [r7, #12]
 8008b0c:	e00c      	b.n	8008b28 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	3308      	adds	r3, #8
 8008b12:	60fb      	str	r3, [r7, #12]
 8008b14:	e002      	b.n	8008b1c <vListInsert+0x2e>
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	60fb      	str	r3, [r7, #12]
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	68ba      	ldr	r2, [r7, #8]
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d2f6      	bcs.n	8008b16 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	685a      	ldr	r2, [r3, #4]
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	683a      	ldr	r2, [r7, #0]
 8008b36:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	68fa      	ldr	r2, [r7, #12]
 8008b3c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	683a      	ldr	r2, [r7, #0]
 8008b42:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	687a      	ldr	r2, [r7, #4]
 8008b48:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	1c5a      	adds	r2, r3, #1
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	601a      	str	r2, [r3, #0]
}
 8008b54:	bf00      	nop
 8008b56:	3714      	adds	r7, #20
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr

08008b60 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008b60:	b480      	push	{r7}
 8008b62:	b085      	sub	sp, #20
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	691b      	ldr	r3, [r3, #16]
 8008b6c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	6892      	ldr	r2, [r2, #8]
 8008b76:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	687a      	ldr	r2, [r7, #4]
 8008b7e:	6852      	ldr	r2, [r2, #4]
 8008b80:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	687a      	ldr	r2, [r7, #4]
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d103      	bne.n	8008b94 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	689a      	ldr	r2, [r3, #8]
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	1e5a      	subs	r2, r3, #1
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3714      	adds	r7, #20
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr

08008bb4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b085      	sub	sp, #20
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	60b9      	str	r1, [r7, #8]
 8008bbe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	3b04      	subs	r3, #4
 8008bc4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008bcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	3b04      	subs	r3, #4
 8008bd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	f023 0201 	bic.w	r2, r3, #1
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	3b04      	subs	r3, #4
 8008be2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008be4:	4a0c      	ldr	r2, [pc, #48]	; (8008c18 <pxPortInitialiseStack+0x64>)
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	3b14      	subs	r3, #20
 8008bee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008bf0:	687a      	ldr	r2, [r7, #4]
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	3b04      	subs	r3, #4
 8008bfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	f06f 0202 	mvn.w	r2, #2
 8008c02:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	3b20      	subs	r3, #32
 8008c08:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3714      	adds	r7, #20
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr
 8008c18:	08008c1d 	.word	0x08008c1d

08008c1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b085      	sub	sp, #20
 8008c20:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008c22:	2300      	movs	r3, #0
 8008c24:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008c26:	4b12      	ldr	r3, [pc, #72]	; (8008c70 <prvTaskExitError+0x54>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c2e:	d00a      	beq.n	8008c46 <prvTaskExitError+0x2a>
	__asm volatile
 8008c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c34:	f383 8811 	msr	BASEPRI, r3
 8008c38:	f3bf 8f6f 	isb	sy
 8008c3c:	f3bf 8f4f 	dsb	sy
 8008c40:	60fb      	str	r3, [r7, #12]
}
 8008c42:	bf00      	nop
 8008c44:	e7fe      	b.n	8008c44 <prvTaskExitError+0x28>
	__asm volatile
 8008c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c4a:	f383 8811 	msr	BASEPRI, r3
 8008c4e:	f3bf 8f6f 	isb	sy
 8008c52:	f3bf 8f4f 	dsb	sy
 8008c56:	60bb      	str	r3, [r7, #8]
}
 8008c58:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008c5a:	bf00      	nop
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d0fc      	beq.n	8008c5c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008c62:	bf00      	nop
 8008c64:	bf00      	nop
 8008c66:	3714      	adds	r7, #20
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr
 8008c70:	24000010 	.word	0x24000010
	...

08008c80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008c80:	4b07      	ldr	r3, [pc, #28]	; (8008ca0 <pxCurrentTCBConst2>)
 8008c82:	6819      	ldr	r1, [r3, #0]
 8008c84:	6808      	ldr	r0, [r1, #0]
 8008c86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c8a:	f380 8809 	msr	PSP, r0
 8008c8e:	f3bf 8f6f 	isb	sy
 8008c92:	f04f 0000 	mov.w	r0, #0
 8008c96:	f380 8811 	msr	BASEPRI, r0
 8008c9a:	4770      	bx	lr
 8008c9c:	f3af 8000 	nop.w

08008ca0 <pxCurrentTCBConst2>:
 8008ca0:	24004dcc 	.word	0x24004dcc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008ca4:	bf00      	nop
 8008ca6:	bf00      	nop

08008ca8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008ca8:	4808      	ldr	r0, [pc, #32]	; (8008ccc <prvPortStartFirstTask+0x24>)
 8008caa:	6800      	ldr	r0, [r0, #0]
 8008cac:	6800      	ldr	r0, [r0, #0]
 8008cae:	f380 8808 	msr	MSP, r0
 8008cb2:	f04f 0000 	mov.w	r0, #0
 8008cb6:	f380 8814 	msr	CONTROL, r0
 8008cba:	b662      	cpsie	i
 8008cbc:	b661      	cpsie	f
 8008cbe:	f3bf 8f4f 	dsb	sy
 8008cc2:	f3bf 8f6f 	isb	sy
 8008cc6:	df00      	svc	0
 8008cc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008cca:	bf00      	nop
 8008ccc:	e000ed08 	.word	0xe000ed08

08008cd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b086      	sub	sp, #24
 8008cd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008cd6:	4b46      	ldr	r3, [pc, #280]	; (8008df0 <xPortStartScheduler+0x120>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4a46      	ldr	r2, [pc, #280]	; (8008df4 <xPortStartScheduler+0x124>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d10a      	bne.n	8008cf6 <xPortStartScheduler+0x26>
	__asm volatile
 8008ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce4:	f383 8811 	msr	BASEPRI, r3
 8008ce8:	f3bf 8f6f 	isb	sy
 8008cec:	f3bf 8f4f 	dsb	sy
 8008cf0:	613b      	str	r3, [r7, #16]
}
 8008cf2:	bf00      	nop
 8008cf4:	e7fe      	b.n	8008cf4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008cf6:	4b3e      	ldr	r3, [pc, #248]	; (8008df0 <xPortStartScheduler+0x120>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4a3f      	ldr	r2, [pc, #252]	; (8008df8 <xPortStartScheduler+0x128>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d10a      	bne.n	8008d16 <xPortStartScheduler+0x46>
	__asm volatile
 8008d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d04:	f383 8811 	msr	BASEPRI, r3
 8008d08:	f3bf 8f6f 	isb	sy
 8008d0c:	f3bf 8f4f 	dsb	sy
 8008d10:	60fb      	str	r3, [r7, #12]
}
 8008d12:	bf00      	nop
 8008d14:	e7fe      	b.n	8008d14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008d16:	4b39      	ldr	r3, [pc, #228]	; (8008dfc <xPortStartScheduler+0x12c>)
 8008d18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	b2db      	uxtb	r3, r3
 8008d20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	22ff      	movs	r2, #255	; 0xff
 8008d26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	781b      	ldrb	r3, [r3, #0]
 8008d2c:	b2db      	uxtb	r3, r3
 8008d2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008d30:	78fb      	ldrb	r3, [r7, #3]
 8008d32:	b2db      	uxtb	r3, r3
 8008d34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008d38:	b2da      	uxtb	r2, r3
 8008d3a:	4b31      	ldr	r3, [pc, #196]	; (8008e00 <xPortStartScheduler+0x130>)
 8008d3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008d3e:	4b31      	ldr	r3, [pc, #196]	; (8008e04 <xPortStartScheduler+0x134>)
 8008d40:	2207      	movs	r2, #7
 8008d42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d44:	e009      	b.n	8008d5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008d46:	4b2f      	ldr	r3, [pc, #188]	; (8008e04 <xPortStartScheduler+0x134>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	3b01      	subs	r3, #1
 8008d4c:	4a2d      	ldr	r2, [pc, #180]	; (8008e04 <xPortStartScheduler+0x134>)
 8008d4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008d50:	78fb      	ldrb	r3, [r7, #3]
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	005b      	lsls	r3, r3, #1
 8008d56:	b2db      	uxtb	r3, r3
 8008d58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d5a:	78fb      	ldrb	r3, [r7, #3]
 8008d5c:	b2db      	uxtb	r3, r3
 8008d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d62:	2b80      	cmp	r3, #128	; 0x80
 8008d64:	d0ef      	beq.n	8008d46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008d66:	4b27      	ldr	r3, [pc, #156]	; (8008e04 <xPortStartScheduler+0x134>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f1c3 0307 	rsb	r3, r3, #7
 8008d6e:	2b04      	cmp	r3, #4
 8008d70:	d00a      	beq.n	8008d88 <xPortStartScheduler+0xb8>
	__asm volatile
 8008d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d76:	f383 8811 	msr	BASEPRI, r3
 8008d7a:	f3bf 8f6f 	isb	sy
 8008d7e:	f3bf 8f4f 	dsb	sy
 8008d82:	60bb      	str	r3, [r7, #8]
}
 8008d84:	bf00      	nop
 8008d86:	e7fe      	b.n	8008d86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008d88:	4b1e      	ldr	r3, [pc, #120]	; (8008e04 <xPortStartScheduler+0x134>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	021b      	lsls	r3, r3, #8
 8008d8e:	4a1d      	ldr	r2, [pc, #116]	; (8008e04 <xPortStartScheduler+0x134>)
 8008d90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008d92:	4b1c      	ldr	r3, [pc, #112]	; (8008e04 <xPortStartScheduler+0x134>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008d9a:	4a1a      	ldr	r2, [pc, #104]	; (8008e04 <xPortStartScheduler+0x134>)
 8008d9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	b2da      	uxtb	r2, r3
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008da6:	4b18      	ldr	r3, [pc, #96]	; (8008e08 <xPortStartScheduler+0x138>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a17      	ldr	r2, [pc, #92]	; (8008e08 <xPortStartScheduler+0x138>)
 8008dac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008db0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008db2:	4b15      	ldr	r3, [pc, #84]	; (8008e08 <xPortStartScheduler+0x138>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	4a14      	ldr	r2, [pc, #80]	; (8008e08 <xPortStartScheduler+0x138>)
 8008db8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008dbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008dbe:	f000 f8dd 	bl	8008f7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008dc2:	4b12      	ldr	r3, [pc, #72]	; (8008e0c <xPortStartScheduler+0x13c>)
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008dc8:	f000 f8fc 	bl	8008fc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008dcc:	4b10      	ldr	r3, [pc, #64]	; (8008e10 <xPortStartScheduler+0x140>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4a0f      	ldr	r2, [pc, #60]	; (8008e10 <xPortStartScheduler+0x140>)
 8008dd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008dd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008dd8:	f7ff ff66 	bl	8008ca8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008ddc:	f001 f9fa 	bl	800a1d4 <vTaskSwitchContext>
	prvTaskExitError();
 8008de0:	f7ff ff1c 	bl	8008c1c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008de4:	2300      	movs	r3, #0
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3718      	adds	r7, #24
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	bf00      	nop
 8008df0:	e000ed00 	.word	0xe000ed00
 8008df4:	410fc271 	.word	0x410fc271
 8008df8:	410fc270 	.word	0x410fc270
 8008dfc:	e000e400 	.word	0xe000e400
 8008e00:	24004d84 	.word	0x24004d84
 8008e04:	24004d88 	.word	0x24004d88
 8008e08:	e000ed20 	.word	0xe000ed20
 8008e0c:	24000010 	.word	0x24000010
 8008e10:	e000ef34 	.word	0xe000ef34

08008e14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008e14:	b480      	push	{r7}
 8008e16:	b083      	sub	sp, #12
 8008e18:	af00      	add	r7, sp, #0
	__asm volatile
 8008e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e1e:	f383 8811 	msr	BASEPRI, r3
 8008e22:	f3bf 8f6f 	isb	sy
 8008e26:	f3bf 8f4f 	dsb	sy
 8008e2a:	607b      	str	r3, [r7, #4]
}
 8008e2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008e2e:	4b0f      	ldr	r3, [pc, #60]	; (8008e6c <vPortEnterCritical+0x58>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	3301      	adds	r3, #1
 8008e34:	4a0d      	ldr	r2, [pc, #52]	; (8008e6c <vPortEnterCritical+0x58>)
 8008e36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008e38:	4b0c      	ldr	r3, [pc, #48]	; (8008e6c <vPortEnterCritical+0x58>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	2b01      	cmp	r3, #1
 8008e3e:	d10f      	bne.n	8008e60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008e40:	4b0b      	ldr	r3, [pc, #44]	; (8008e70 <vPortEnterCritical+0x5c>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	b2db      	uxtb	r3, r3
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d00a      	beq.n	8008e60 <vPortEnterCritical+0x4c>
	__asm volatile
 8008e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e4e:	f383 8811 	msr	BASEPRI, r3
 8008e52:	f3bf 8f6f 	isb	sy
 8008e56:	f3bf 8f4f 	dsb	sy
 8008e5a:	603b      	str	r3, [r7, #0]
}
 8008e5c:	bf00      	nop
 8008e5e:	e7fe      	b.n	8008e5e <vPortEnterCritical+0x4a>
	}
}
 8008e60:	bf00      	nop
 8008e62:	370c      	adds	r7, #12
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr
 8008e6c:	24000010 	.word	0x24000010
 8008e70:	e000ed04 	.word	0xe000ed04

08008e74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008e74:	b480      	push	{r7}
 8008e76:	b083      	sub	sp, #12
 8008e78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008e7a:	4b12      	ldr	r3, [pc, #72]	; (8008ec4 <vPortExitCritical+0x50>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d10a      	bne.n	8008e98 <vPortExitCritical+0x24>
	__asm volatile
 8008e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e86:	f383 8811 	msr	BASEPRI, r3
 8008e8a:	f3bf 8f6f 	isb	sy
 8008e8e:	f3bf 8f4f 	dsb	sy
 8008e92:	607b      	str	r3, [r7, #4]
}
 8008e94:	bf00      	nop
 8008e96:	e7fe      	b.n	8008e96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008e98:	4b0a      	ldr	r3, [pc, #40]	; (8008ec4 <vPortExitCritical+0x50>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	3b01      	subs	r3, #1
 8008e9e:	4a09      	ldr	r2, [pc, #36]	; (8008ec4 <vPortExitCritical+0x50>)
 8008ea0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008ea2:	4b08      	ldr	r3, [pc, #32]	; (8008ec4 <vPortExitCritical+0x50>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d105      	bne.n	8008eb6 <vPortExitCritical+0x42>
 8008eaa:	2300      	movs	r3, #0
 8008eac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008eb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008eb6:	bf00      	nop
 8008eb8:	370c      	adds	r7, #12
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec0:	4770      	bx	lr
 8008ec2:	bf00      	nop
 8008ec4:	24000010 	.word	0x24000010
	...

08008ed0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008ed0:	f3ef 8009 	mrs	r0, PSP
 8008ed4:	f3bf 8f6f 	isb	sy
 8008ed8:	4b15      	ldr	r3, [pc, #84]	; (8008f30 <pxCurrentTCBConst>)
 8008eda:	681a      	ldr	r2, [r3, #0]
 8008edc:	f01e 0f10 	tst.w	lr, #16
 8008ee0:	bf08      	it	eq
 8008ee2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008ee6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eea:	6010      	str	r0, [r2, #0]
 8008eec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008ef0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008ef4:	f380 8811 	msr	BASEPRI, r0
 8008ef8:	f3bf 8f4f 	dsb	sy
 8008efc:	f3bf 8f6f 	isb	sy
 8008f00:	f001 f968 	bl	800a1d4 <vTaskSwitchContext>
 8008f04:	f04f 0000 	mov.w	r0, #0
 8008f08:	f380 8811 	msr	BASEPRI, r0
 8008f0c:	bc09      	pop	{r0, r3}
 8008f0e:	6819      	ldr	r1, [r3, #0]
 8008f10:	6808      	ldr	r0, [r1, #0]
 8008f12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f16:	f01e 0f10 	tst.w	lr, #16
 8008f1a:	bf08      	it	eq
 8008f1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008f20:	f380 8809 	msr	PSP, r0
 8008f24:	f3bf 8f6f 	isb	sy
 8008f28:	4770      	bx	lr
 8008f2a:	bf00      	nop
 8008f2c:	f3af 8000 	nop.w

08008f30 <pxCurrentTCBConst>:
 8008f30:	24004dcc 	.word	0x24004dcc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008f34:	bf00      	nop
 8008f36:	bf00      	nop

08008f38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b082      	sub	sp, #8
 8008f3c:	af00      	add	r7, sp, #0
	__asm volatile
 8008f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f42:	f383 8811 	msr	BASEPRI, r3
 8008f46:	f3bf 8f6f 	isb	sy
 8008f4a:	f3bf 8f4f 	dsb	sy
 8008f4e:	607b      	str	r3, [r7, #4]
}
 8008f50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008f52:	f001 f885 	bl	800a060 <xTaskIncrementTick>
 8008f56:	4603      	mov	r3, r0
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d003      	beq.n	8008f64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008f5c:	4b06      	ldr	r3, [pc, #24]	; (8008f78 <xPortSysTickHandler+0x40>)
 8008f5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f62:	601a      	str	r2, [r3, #0]
 8008f64:	2300      	movs	r3, #0
 8008f66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	f383 8811 	msr	BASEPRI, r3
}
 8008f6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008f70:	bf00      	nop
 8008f72:	3708      	adds	r7, #8
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}
 8008f78:	e000ed04 	.word	0xe000ed04

08008f7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008f80:	4b0b      	ldr	r3, [pc, #44]	; (8008fb0 <vPortSetupTimerInterrupt+0x34>)
 8008f82:	2200      	movs	r2, #0
 8008f84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008f86:	4b0b      	ldr	r3, [pc, #44]	; (8008fb4 <vPortSetupTimerInterrupt+0x38>)
 8008f88:	2200      	movs	r2, #0
 8008f8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008f8c:	4b0a      	ldr	r3, [pc, #40]	; (8008fb8 <vPortSetupTimerInterrupt+0x3c>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4a0a      	ldr	r2, [pc, #40]	; (8008fbc <vPortSetupTimerInterrupt+0x40>)
 8008f92:	fba2 2303 	umull	r2, r3, r2, r3
 8008f96:	099b      	lsrs	r3, r3, #6
 8008f98:	4a09      	ldr	r2, [pc, #36]	; (8008fc0 <vPortSetupTimerInterrupt+0x44>)
 8008f9a:	3b01      	subs	r3, #1
 8008f9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008f9e:	4b04      	ldr	r3, [pc, #16]	; (8008fb0 <vPortSetupTimerInterrupt+0x34>)
 8008fa0:	2207      	movs	r2, #7
 8008fa2:	601a      	str	r2, [r3, #0]
}
 8008fa4:	bf00      	nop
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr
 8008fae:	bf00      	nop
 8008fb0:	e000e010 	.word	0xe000e010
 8008fb4:	e000e018 	.word	0xe000e018
 8008fb8:	24000000 	.word	0x24000000
 8008fbc:	10624dd3 	.word	0x10624dd3
 8008fc0:	e000e014 	.word	0xe000e014

08008fc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008fc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008fd4 <vPortEnableVFP+0x10>
 8008fc8:	6801      	ldr	r1, [r0, #0]
 8008fca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008fce:	6001      	str	r1, [r0, #0]
 8008fd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008fd2:	bf00      	nop
 8008fd4:	e000ed88 	.word	0xe000ed88

08008fd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008fd8:	b480      	push	{r7}
 8008fda:	b085      	sub	sp, #20
 8008fdc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008fde:	f3ef 8305 	mrs	r3, IPSR
 8008fe2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2b0f      	cmp	r3, #15
 8008fe8:	d914      	bls.n	8009014 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008fea:	4a17      	ldr	r2, [pc, #92]	; (8009048 <vPortValidateInterruptPriority+0x70>)
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	4413      	add	r3, r2
 8008ff0:	781b      	ldrb	r3, [r3, #0]
 8008ff2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008ff4:	4b15      	ldr	r3, [pc, #84]	; (800904c <vPortValidateInterruptPriority+0x74>)
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	7afa      	ldrb	r2, [r7, #11]
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	d20a      	bcs.n	8009014 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009002:	f383 8811 	msr	BASEPRI, r3
 8009006:	f3bf 8f6f 	isb	sy
 800900a:	f3bf 8f4f 	dsb	sy
 800900e:	607b      	str	r3, [r7, #4]
}
 8009010:	bf00      	nop
 8009012:	e7fe      	b.n	8009012 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009014:	4b0e      	ldr	r3, [pc, #56]	; (8009050 <vPortValidateInterruptPriority+0x78>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800901c:	4b0d      	ldr	r3, [pc, #52]	; (8009054 <vPortValidateInterruptPriority+0x7c>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	429a      	cmp	r2, r3
 8009022:	d90a      	bls.n	800903a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009028:	f383 8811 	msr	BASEPRI, r3
 800902c:	f3bf 8f6f 	isb	sy
 8009030:	f3bf 8f4f 	dsb	sy
 8009034:	603b      	str	r3, [r7, #0]
}
 8009036:	bf00      	nop
 8009038:	e7fe      	b.n	8009038 <vPortValidateInterruptPriority+0x60>
	}
 800903a:	bf00      	nop
 800903c:	3714      	adds	r7, #20
 800903e:	46bd      	mov	sp, r7
 8009040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009044:	4770      	bx	lr
 8009046:	bf00      	nop
 8009048:	e000e3f0 	.word	0xe000e3f0
 800904c:	24004d84 	.word	0x24004d84
 8009050:	e000ed0c 	.word	0xe000ed0c
 8009054:	24004d88 	.word	0x24004d88

08009058 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b084      	sub	sp, #16
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d10a      	bne.n	8009082 <xQueueGenericReset+0x2a>
	__asm volatile
 800906c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009070:	f383 8811 	msr	BASEPRI, r3
 8009074:	f3bf 8f6f 	isb	sy
 8009078:	f3bf 8f4f 	dsb	sy
 800907c:	60bb      	str	r3, [r7, #8]
}
 800907e:	bf00      	nop
 8009080:	e7fe      	b.n	8009080 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009082:	f7ff fec7 	bl	8008e14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800908e:	68f9      	ldr	r1, [r7, #12]
 8009090:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009092:	fb01 f303 	mul.w	r3, r1, r3
 8009096:	441a      	add	r2, r3
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	2200      	movs	r2, #0
 80090a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681a      	ldr	r2, [r3, #0]
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090b2:	3b01      	subs	r3, #1
 80090b4:	68f9      	ldr	r1, [r7, #12]
 80090b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80090b8:	fb01 f303 	mul.w	r3, r1, r3
 80090bc:	441a      	add	r2, r3
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	22ff      	movs	r2, #255	; 0xff
 80090c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	22ff      	movs	r2, #255	; 0xff
 80090ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d114      	bne.n	8009102 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	691b      	ldr	r3, [r3, #16]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d01a      	beq.n	8009116 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	3310      	adds	r3, #16
 80090e4:	4618      	mov	r0, r3
 80090e6:	f001 f929 	bl	800a33c <xTaskRemoveFromEventList>
 80090ea:	4603      	mov	r3, r0
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d012      	beq.n	8009116 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80090f0:	4b0c      	ldr	r3, [pc, #48]	; (8009124 <xQueueGenericReset+0xcc>)
 80090f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090f6:	601a      	str	r2, [r3, #0]
 80090f8:	f3bf 8f4f 	dsb	sy
 80090fc:	f3bf 8f6f 	isb	sy
 8009100:	e009      	b.n	8009116 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	3310      	adds	r3, #16
 8009106:	4618      	mov	r0, r3
 8009108:	f7ff fca0 	bl	8008a4c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	3324      	adds	r3, #36	; 0x24
 8009110:	4618      	mov	r0, r3
 8009112:	f7ff fc9b 	bl	8008a4c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009116:	f7ff fead 	bl	8008e74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800911a:	2301      	movs	r3, #1
}
 800911c:	4618      	mov	r0, r3
 800911e:	3710      	adds	r7, #16
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}
 8009124:	e000ed04 	.word	0xe000ed04

08009128 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009128:	b580      	push	{r7, lr}
 800912a:	b08e      	sub	sp, #56	; 0x38
 800912c:	af02      	add	r7, sp, #8
 800912e:	60f8      	str	r0, [r7, #12]
 8009130:	60b9      	str	r1, [r7, #8]
 8009132:	607a      	str	r2, [r7, #4]
 8009134:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d10a      	bne.n	8009152 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800913c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009140:	f383 8811 	msr	BASEPRI, r3
 8009144:	f3bf 8f6f 	isb	sy
 8009148:	f3bf 8f4f 	dsb	sy
 800914c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800914e:	bf00      	nop
 8009150:	e7fe      	b.n	8009150 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d10a      	bne.n	800916e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800915c:	f383 8811 	msr	BASEPRI, r3
 8009160:	f3bf 8f6f 	isb	sy
 8009164:	f3bf 8f4f 	dsb	sy
 8009168:	627b      	str	r3, [r7, #36]	; 0x24
}
 800916a:	bf00      	nop
 800916c:	e7fe      	b.n	800916c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d002      	beq.n	800917a <xQueueGenericCreateStatic+0x52>
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d001      	beq.n	800917e <xQueueGenericCreateStatic+0x56>
 800917a:	2301      	movs	r3, #1
 800917c:	e000      	b.n	8009180 <xQueueGenericCreateStatic+0x58>
 800917e:	2300      	movs	r3, #0
 8009180:	2b00      	cmp	r3, #0
 8009182:	d10a      	bne.n	800919a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009188:	f383 8811 	msr	BASEPRI, r3
 800918c:	f3bf 8f6f 	isb	sy
 8009190:	f3bf 8f4f 	dsb	sy
 8009194:	623b      	str	r3, [r7, #32]
}
 8009196:	bf00      	nop
 8009198:	e7fe      	b.n	8009198 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d102      	bne.n	80091a6 <xQueueGenericCreateStatic+0x7e>
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d101      	bne.n	80091aa <xQueueGenericCreateStatic+0x82>
 80091a6:	2301      	movs	r3, #1
 80091a8:	e000      	b.n	80091ac <xQueueGenericCreateStatic+0x84>
 80091aa:	2300      	movs	r3, #0
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d10a      	bne.n	80091c6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80091b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b4:	f383 8811 	msr	BASEPRI, r3
 80091b8:	f3bf 8f6f 	isb	sy
 80091bc:	f3bf 8f4f 	dsb	sy
 80091c0:	61fb      	str	r3, [r7, #28]
}
 80091c2:	bf00      	nop
 80091c4:	e7fe      	b.n	80091c4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80091c6:	2350      	movs	r3, #80	; 0x50
 80091c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	2b50      	cmp	r3, #80	; 0x50
 80091ce:	d00a      	beq.n	80091e6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80091d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d4:	f383 8811 	msr	BASEPRI, r3
 80091d8:	f3bf 8f6f 	isb	sy
 80091dc:	f3bf 8f4f 	dsb	sy
 80091e0:	61bb      	str	r3, [r7, #24]
}
 80091e2:	bf00      	nop
 80091e4:	e7fe      	b.n	80091e4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80091e6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80091ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d00d      	beq.n	800920e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80091f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f4:	2201      	movs	r2, #1
 80091f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80091fa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80091fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009200:	9300      	str	r3, [sp, #0]
 8009202:	4613      	mov	r3, r2
 8009204:	687a      	ldr	r2, [r7, #4]
 8009206:	68b9      	ldr	r1, [r7, #8]
 8009208:	68f8      	ldr	r0, [r7, #12]
 800920a:	f000 f805 	bl	8009218 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800920e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009210:	4618      	mov	r0, r3
 8009212:	3730      	adds	r7, #48	; 0x30
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}

08009218 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b084      	sub	sp, #16
 800921c:	af00      	add	r7, sp, #0
 800921e:	60f8      	str	r0, [r7, #12]
 8009220:	60b9      	str	r1, [r7, #8]
 8009222:	607a      	str	r2, [r7, #4]
 8009224:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d103      	bne.n	8009234 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800922c:	69bb      	ldr	r3, [r7, #24]
 800922e:	69ba      	ldr	r2, [r7, #24]
 8009230:	601a      	str	r2, [r3, #0]
 8009232:	e002      	b.n	800923a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009234:	69bb      	ldr	r3, [r7, #24]
 8009236:	687a      	ldr	r2, [r7, #4]
 8009238:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800923a:	69bb      	ldr	r3, [r7, #24]
 800923c:	68fa      	ldr	r2, [r7, #12]
 800923e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009240:	69bb      	ldr	r3, [r7, #24]
 8009242:	68ba      	ldr	r2, [r7, #8]
 8009244:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009246:	2101      	movs	r1, #1
 8009248:	69b8      	ldr	r0, [r7, #24]
 800924a:	f7ff ff05 	bl	8009058 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800924e:	69bb      	ldr	r3, [r7, #24]
 8009250:	78fa      	ldrb	r2, [r7, #3]
 8009252:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009256:	bf00      	nop
 8009258:	3710      	adds	r7, #16
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
	...

08009260 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b08e      	sub	sp, #56	; 0x38
 8009264:	af00      	add	r7, sp, #0
 8009266:	60f8      	str	r0, [r7, #12]
 8009268:	60b9      	str	r1, [r7, #8]
 800926a:	607a      	str	r2, [r7, #4]
 800926c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800926e:	2300      	movs	r3, #0
 8009270:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009278:	2b00      	cmp	r3, #0
 800927a:	d10a      	bne.n	8009292 <xQueueGenericSend+0x32>
	__asm volatile
 800927c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009280:	f383 8811 	msr	BASEPRI, r3
 8009284:	f3bf 8f6f 	isb	sy
 8009288:	f3bf 8f4f 	dsb	sy
 800928c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800928e:	bf00      	nop
 8009290:	e7fe      	b.n	8009290 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d103      	bne.n	80092a0 <xQueueGenericSend+0x40>
 8009298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800929a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800929c:	2b00      	cmp	r3, #0
 800929e:	d101      	bne.n	80092a4 <xQueueGenericSend+0x44>
 80092a0:	2301      	movs	r3, #1
 80092a2:	e000      	b.n	80092a6 <xQueueGenericSend+0x46>
 80092a4:	2300      	movs	r3, #0
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d10a      	bne.n	80092c0 <xQueueGenericSend+0x60>
	__asm volatile
 80092aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ae:	f383 8811 	msr	BASEPRI, r3
 80092b2:	f3bf 8f6f 	isb	sy
 80092b6:	f3bf 8f4f 	dsb	sy
 80092ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 80092bc:	bf00      	nop
 80092be:	e7fe      	b.n	80092be <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	2b02      	cmp	r3, #2
 80092c4:	d103      	bne.n	80092ce <xQueueGenericSend+0x6e>
 80092c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092ca:	2b01      	cmp	r3, #1
 80092cc:	d101      	bne.n	80092d2 <xQueueGenericSend+0x72>
 80092ce:	2301      	movs	r3, #1
 80092d0:	e000      	b.n	80092d4 <xQueueGenericSend+0x74>
 80092d2:	2300      	movs	r3, #0
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d10a      	bne.n	80092ee <xQueueGenericSend+0x8e>
	__asm volatile
 80092d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092dc:	f383 8811 	msr	BASEPRI, r3
 80092e0:	f3bf 8f6f 	isb	sy
 80092e4:	f3bf 8f4f 	dsb	sy
 80092e8:	623b      	str	r3, [r7, #32]
}
 80092ea:	bf00      	nop
 80092ec:	e7fe      	b.n	80092ec <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80092ee:	f001 f9e7 	bl	800a6c0 <xTaskGetSchedulerState>
 80092f2:	4603      	mov	r3, r0
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d102      	bne.n	80092fe <xQueueGenericSend+0x9e>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d101      	bne.n	8009302 <xQueueGenericSend+0xa2>
 80092fe:	2301      	movs	r3, #1
 8009300:	e000      	b.n	8009304 <xQueueGenericSend+0xa4>
 8009302:	2300      	movs	r3, #0
 8009304:	2b00      	cmp	r3, #0
 8009306:	d10a      	bne.n	800931e <xQueueGenericSend+0xbe>
	__asm volatile
 8009308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800930c:	f383 8811 	msr	BASEPRI, r3
 8009310:	f3bf 8f6f 	isb	sy
 8009314:	f3bf 8f4f 	dsb	sy
 8009318:	61fb      	str	r3, [r7, #28]
}
 800931a:	bf00      	nop
 800931c:	e7fe      	b.n	800931c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800931e:	f7ff fd79 	bl	8008e14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009324:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800932a:	429a      	cmp	r2, r3
 800932c:	d302      	bcc.n	8009334 <xQueueGenericSend+0xd4>
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	2b02      	cmp	r3, #2
 8009332:	d129      	bne.n	8009388 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009334:	683a      	ldr	r2, [r7, #0]
 8009336:	68b9      	ldr	r1, [r7, #8]
 8009338:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800933a:	f000 fa0b 	bl	8009754 <prvCopyDataToQueue>
 800933e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009344:	2b00      	cmp	r3, #0
 8009346:	d010      	beq.n	800936a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800934a:	3324      	adds	r3, #36	; 0x24
 800934c:	4618      	mov	r0, r3
 800934e:	f000 fff5 	bl	800a33c <xTaskRemoveFromEventList>
 8009352:	4603      	mov	r3, r0
 8009354:	2b00      	cmp	r3, #0
 8009356:	d013      	beq.n	8009380 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009358:	4b3f      	ldr	r3, [pc, #252]	; (8009458 <xQueueGenericSend+0x1f8>)
 800935a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800935e:	601a      	str	r2, [r3, #0]
 8009360:	f3bf 8f4f 	dsb	sy
 8009364:	f3bf 8f6f 	isb	sy
 8009368:	e00a      	b.n	8009380 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800936a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800936c:	2b00      	cmp	r3, #0
 800936e:	d007      	beq.n	8009380 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009370:	4b39      	ldr	r3, [pc, #228]	; (8009458 <xQueueGenericSend+0x1f8>)
 8009372:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009376:	601a      	str	r2, [r3, #0]
 8009378:	f3bf 8f4f 	dsb	sy
 800937c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009380:	f7ff fd78 	bl	8008e74 <vPortExitCritical>
				return pdPASS;
 8009384:	2301      	movs	r3, #1
 8009386:	e063      	b.n	8009450 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d103      	bne.n	8009396 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800938e:	f7ff fd71 	bl	8008e74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009392:	2300      	movs	r3, #0
 8009394:	e05c      	b.n	8009450 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009398:	2b00      	cmp	r3, #0
 800939a:	d106      	bne.n	80093aa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800939c:	f107 0314 	add.w	r3, r7, #20
 80093a0:	4618      	mov	r0, r3
 80093a2:	f001 f82f 	bl	800a404 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80093a6:	2301      	movs	r3, #1
 80093a8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80093aa:	f7ff fd63 	bl	8008e74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80093ae:	f000 fd9b 	bl	8009ee8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80093b2:	f7ff fd2f 	bl	8008e14 <vPortEnterCritical>
 80093b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80093bc:	b25b      	sxtb	r3, r3
 80093be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093c2:	d103      	bne.n	80093cc <xQueueGenericSend+0x16c>
 80093c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c6:	2200      	movs	r2, #0
 80093c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80093d2:	b25b      	sxtb	r3, r3
 80093d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093d8:	d103      	bne.n	80093e2 <xQueueGenericSend+0x182>
 80093da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093dc:	2200      	movs	r2, #0
 80093de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80093e2:	f7ff fd47 	bl	8008e74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80093e6:	1d3a      	adds	r2, r7, #4
 80093e8:	f107 0314 	add.w	r3, r7, #20
 80093ec:	4611      	mov	r1, r2
 80093ee:	4618      	mov	r0, r3
 80093f0:	f001 f81e 	bl	800a430 <xTaskCheckForTimeOut>
 80093f4:	4603      	mov	r3, r0
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d124      	bne.n	8009444 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80093fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093fc:	f000 faa2 	bl	8009944 <prvIsQueueFull>
 8009400:	4603      	mov	r3, r0
 8009402:	2b00      	cmp	r3, #0
 8009404:	d018      	beq.n	8009438 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009408:	3310      	adds	r3, #16
 800940a:	687a      	ldr	r2, [r7, #4]
 800940c:	4611      	mov	r1, r2
 800940e:	4618      	mov	r0, r3
 8009410:	f000 ff44 	bl	800a29c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009414:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009416:	f000 fa2d 	bl	8009874 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800941a:	f000 fd73 	bl	8009f04 <xTaskResumeAll>
 800941e:	4603      	mov	r3, r0
 8009420:	2b00      	cmp	r3, #0
 8009422:	f47f af7c 	bne.w	800931e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009426:	4b0c      	ldr	r3, [pc, #48]	; (8009458 <xQueueGenericSend+0x1f8>)
 8009428:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800942c:	601a      	str	r2, [r3, #0]
 800942e:	f3bf 8f4f 	dsb	sy
 8009432:	f3bf 8f6f 	isb	sy
 8009436:	e772      	b.n	800931e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009438:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800943a:	f000 fa1b 	bl	8009874 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800943e:	f000 fd61 	bl	8009f04 <xTaskResumeAll>
 8009442:	e76c      	b.n	800931e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009444:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009446:	f000 fa15 	bl	8009874 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800944a:	f000 fd5b 	bl	8009f04 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800944e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009450:	4618      	mov	r0, r3
 8009452:	3738      	adds	r7, #56	; 0x38
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}
 8009458:	e000ed04 	.word	0xe000ed04

0800945c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b090      	sub	sp, #64	; 0x40
 8009460:	af00      	add	r7, sp, #0
 8009462:	60f8      	str	r0, [r7, #12]
 8009464:	60b9      	str	r1, [r7, #8]
 8009466:	607a      	str	r2, [r7, #4]
 8009468:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800946e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009470:	2b00      	cmp	r3, #0
 8009472:	d10a      	bne.n	800948a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009478:	f383 8811 	msr	BASEPRI, r3
 800947c:	f3bf 8f6f 	isb	sy
 8009480:	f3bf 8f4f 	dsb	sy
 8009484:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009486:	bf00      	nop
 8009488:	e7fe      	b.n	8009488 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d103      	bne.n	8009498 <xQueueGenericSendFromISR+0x3c>
 8009490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009494:	2b00      	cmp	r3, #0
 8009496:	d101      	bne.n	800949c <xQueueGenericSendFromISR+0x40>
 8009498:	2301      	movs	r3, #1
 800949a:	e000      	b.n	800949e <xQueueGenericSendFromISR+0x42>
 800949c:	2300      	movs	r3, #0
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d10a      	bne.n	80094b8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80094a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a6:	f383 8811 	msr	BASEPRI, r3
 80094aa:	f3bf 8f6f 	isb	sy
 80094ae:	f3bf 8f4f 	dsb	sy
 80094b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80094b4:	bf00      	nop
 80094b6:	e7fe      	b.n	80094b6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	2b02      	cmp	r3, #2
 80094bc:	d103      	bne.n	80094c6 <xQueueGenericSendFromISR+0x6a>
 80094be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094c2:	2b01      	cmp	r3, #1
 80094c4:	d101      	bne.n	80094ca <xQueueGenericSendFromISR+0x6e>
 80094c6:	2301      	movs	r3, #1
 80094c8:	e000      	b.n	80094cc <xQueueGenericSendFromISR+0x70>
 80094ca:	2300      	movs	r3, #0
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d10a      	bne.n	80094e6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80094d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d4:	f383 8811 	msr	BASEPRI, r3
 80094d8:	f3bf 8f6f 	isb	sy
 80094dc:	f3bf 8f4f 	dsb	sy
 80094e0:	623b      	str	r3, [r7, #32]
}
 80094e2:	bf00      	nop
 80094e4:	e7fe      	b.n	80094e4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80094e6:	f7ff fd77 	bl	8008fd8 <vPortValidateInterruptPriority>
	__asm volatile
 80094ea:	f3ef 8211 	mrs	r2, BASEPRI
 80094ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f2:	f383 8811 	msr	BASEPRI, r3
 80094f6:	f3bf 8f6f 	isb	sy
 80094fa:	f3bf 8f4f 	dsb	sy
 80094fe:	61fa      	str	r2, [r7, #28]
 8009500:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8009502:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009504:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009508:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800950a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800950c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800950e:	429a      	cmp	r2, r3
 8009510:	d302      	bcc.n	8009518 <xQueueGenericSendFromISR+0xbc>
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	2b02      	cmp	r3, #2
 8009516:	d12f      	bne.n	8009578 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800951a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800951e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009526:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009528:	683a      	ldr	r2, [r7, #0]
 800952a:	68b9      	ldr	r1, [r7, #8]
 800952c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800952e:	f000 f911 	bl	8009754 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009532:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800953a:	d112      	bne.n	8009562 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800953c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800953e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009540:	2b00      	cmp	r3, #0
 8009542:	d016      	beq.n	8009572 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009546:	3324      	adds	r3, #36	; 0x24
 8009548:	4618      	mov	r0, r3
 800954a:	f000 fef7 	bl	800a33c <xTaskRemoveFromEventList>
 800954e:	4603      	mov	r3, r0
 8009550:	2b00      	cmp	r3, #0
 8009552:	d00e      	beq.n	8009572 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d00b      	beq.n	8009572 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2201      	movs	r2, #1
 800955e:	601a      	str	r2, [r3, #0]
 8009560:	e007      	b.n	8009572 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009562:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009566:	3301      	adds	r3, #1
 8009568:	b2db      	uxtb	r3, r3
 800956a:	b25a      	sxtb	r2, r3
 800956c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800956e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009572:	2301      	movs	r3, #1
 8009574:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009576:	e001      	b.n	800957c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009578:	2300      	movs	r3, #0
 800957a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800957c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800957e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	f383 8811 	msr	BASEPRI, r3
}
 8009586:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800958a:	4618      	mov	r0, r3
 800958c:	3740      	adds	r7, #64	; 0x40
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}
	...

08009594 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b08c      	sub	sp, #48	; 0x30
 8009598:	af00      	add	r7, sp, #0
 800959a:	60f8      	str	r0, [r7, #12]
 800959c:	60b9      	str	r1, [r7, #8]
 800959e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80095a0:	2300      	movs	r3, #0
 80095a2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80095a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d10a      	bne.n	80095c4 <xQueueReceive+0x30>
	__asm volatile
 80095ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b2:	f383 8811 	msr	BASEPRI, r3
 80095b6:	f3bf 8f6f 	isb	sy
 80095ba:	f3bf 8f4f 	dsb	sy
 80095be:	623b      	str	r3, [r7, #32]
}
 80095c0:	bf00      	nop
 80095c2:	e7fe      	b.n	80095c2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d103      	bne.n	80095d2 <xQueueReceive+0x3e>
 80095ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d101      	bne.n	80095d6 <xQueueReceive+0x42>
 80095d2:	2301      	movs	r3, #1
 80095d4:	e000      	b.n	80095d8 <xQueueReceive+0x44>
 80095d6:	2300      	movs	r3, #0
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d10a      	bne.n	80095f2 <xQueueReceive+0x5e>
	__asm volatile
 80095dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e0:	f383 8811 	msr	BASEPRI, r3
 80095e4:	f3bf 8f6f 	isb	sy
 80095e8:	f3bf 8f4f 	dsb	sy
 80095ec:	61fb      	str	r3, [r7, #28]
}
 80095ee:	bf00      	nop
 80095f0:	e7fe      	b.n	80095f0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80095f2:	f001 f865 	bl	800a6c0 <xTaskGetSchedulerState>
 80095f6:	4603      	mov	r3, r0
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d102      	bne.n	8009602 <xQueueReceive+0x6e>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d101      	bne.n	8009606 <xQueueReceive+0x72>
 8009602:	2301      	movs	r3, #1
 8009604:	e000      	b.n	8009608 <xQueueReceive+0x74>
 8009606:	2300      	movs	r3, #0
 8009608:	2b00      	cmp	r3, #0
 800960a:	d10a      	bne.n	8009622 <xQueueReceive+0x8e>
	__asm volatile
 800960c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009610:	f383 8811 	msr	BASEPRI, r3
 8009614:	f3bf 8f6f 	isb	sy
 8009618:	f3bf 8f4f 	dsb	sy
 800961c:	61bb      	str	r3, [r7, #24]
}
 800961e:	bf00      	nop
 8009620:	e7fe      	b.n	8009620 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009622:	f7ff fbf7 	bl	8008e14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800962a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800962c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962e:	2b00      	cmp	r3, #0
 8009630:	d01f      	beq.n	8009672 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009632:	68b9      	ldr	r1, [r7, #8]
 8009634:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009636:	f000 f8f7 	bl	8009828 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800963a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800963c:	1e5a      	subs	r2, r3, #1
 800963e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009640:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009644:	691b      	ldr	r3, [r3, #16]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d00f      	beq.n	800966a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800964a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800964c:	3310      	adds	r3, #16
 800964e:	4618      	mov	r0, r3
 8009650:	f000 fe74 	bl	800a33c <xTaskRemoveFromEventList>
 8009654:	4603      	mov	r3, r0
 8009656:	2b00      	cmp	r3, #0
 8009658:	d007      	beq.n	800966a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800965a:	4b3d      	ldr	r3, [pc, #244]	; (8009750 <xQueueReceive+0x1bc>)
 800965c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009660:	601a      	str	r2, [r3, #0]
 8009662:	f3bf 8f4f 	dsb	sy
 8009666:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800966a:	f7ff fc03 	bl	8008e74 <vPortExitCritical>
				return pdPASS;
 800966e:	2301      	movs	r3, #1
 8009670:	e069      	b.n	8009746 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d103      	bne.n	8009680 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009678:	f7ff fbfc 	bl	8008e74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800967c:	2300      	movs	r3, #0
 800967e:	e062      	b.n	8009746 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009682:	2b00      	cmp	r3, #0
 8009684:	d106      	bne.n	8009694 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009686:	f107 0310 	add.w	r3, r7, #16
 800968a:	4618      	mov	r0, r3
 800968c:	f000 feba 	bl	800a404 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009690:	2301      	movs	r3, #1
 8009692:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009694:	f7ff fbee 	bl	8008e74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009698:	f000 fc26 	bl	8009ee8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800969c:	f7ff fbba 	bl	8008e14 <vPortEnterCritical>
 80096a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80096a6:	b25b      	sxtb	r3, r3
 80096a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096ac:	d103      	bne.n	80096b6 <xQueueReceive+0x122>
 80096ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096b0:	2200      	movs	r2, #0
 80096b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80096bc:	b25b      	sxtb	r3, r3
 80096be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096c2:	d103      	bne.n	80096cc <xQueueReceive+0x138>
 80096c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c6:	2200      	movs	r2, #0
 80096c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80096cc:	f7ff fbd2 	bl	8008e74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80096d0:	1d3a      	adds	r2, r7, #4
 80096d2:	f107 0310 	add.w	r3, r7, #16
 80096d6:	4611      	mov	r1, r2
 80096d8:	4618      	mov	r0, r3
 80096da:	f000 fea9 	bl	800a430 <xTaskCheckForTimeOut>
 80096de:	4603      	mov	r3, r0
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d123      	bne.n	800972c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80096e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096e6:	f000 f917 	bl	8009918 <prvIsQueueEmpty>
 80096ea:	4603      	mov	r3, r0
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d017      	beq.n	8009720 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80096f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096f2:	3324      	adds	r3, #36	; 0x24
 80096f4:	687a      	ldr	r2, [r7, #4]
 80096f6:	4611      	mov	r1, r2
 80096f8:	4618      	mov	r0, r3
 80096fa:	f000 fdcf 	bl	800a29c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80096fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009700:	f000 f8b8 	bl	8009874 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009704:	f000 fbfe 	bl	8009f04 <xTaskResumeAll>
 8009708:	4603      	mov	r3, r0
 800970a:	2b00      	cmp	r3, #0
 800970c:	d189      	bne.n	8009622 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800970e:	4b10      	ldr	r3, [pc, #64]	; (8009750 <xQueueReceive+0x1bc>)
 8009710:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009714:	601a      	str	r2, [r3, #0]
 8009716:	f3bf 8f4f 	dsb	sy
 800971a:	f3bf 8f6f 	isb	sy
 800971e:	e780      	b.n	8009622 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009720:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009722:	f000 f8a7 	bl	8009874 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009726:	f000 fbed 	bl	8009f04 <xTaskResumeAll>
 800972a:	e77a      	b.n	8009622 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800972c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800972e:	f000 f8a1 	bl	8009874 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009732:	f000 fbe7 	bl	8009f04 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009736:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009738:	f000 f8ee 	bl	8009918 <prvIsQueueEmpty>
 800973c:	4603      	mov	r3, r0
 800973e:	2b00      	cmp	r3, #0
 8009740:	f43f af6f 	beq.w	8009622 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009744:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009746:	4618      	mov	r0, r3
 8009748:	3730      	adds	r7, #48	; 0x30
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
 800974e:	bf00      	nop
 8009750:	e000ed04 	.word	0xe000ed04

08009754 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b086      	sub	sp, #24
 8009758:	af00      	add	r7, sp, #0
 800975a:	60f8      	str	r0, [r7, #12]
 800975c:	60b9      	str	r1, [r7, #8]
 800975e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009760:	2300      	movs	r3, #0
 8009762:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009768:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800976e:	2b00      	cmp	r3, #0
 8009770:	d10d      	bne.n	800978e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d14d      	bne.n	8009816 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	689b      	ldr	r3, [r3, #8]
 800977e:	4618      	mov	r0, r3
 8009780:	f000 ffbc 	bl	800a6fc <xTaskPriorityDisinherit>
 8009784:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2200      	movs	r2, #0
 800978a:	609a      	str	r2, [r3, #8]
 800978c:	e043      	b.n	8009816 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d119      	bne.n	80097c8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	6858      	ldr	r0, [r3, #4]
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800979c:	461a      	mov	r2, r3
 800979e:	68b9      	ldr	r1, [r7, #8]
 80097a0:	f002 fc18 	bl	800bfd4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	685a      	ldr	r2, [r3, #4]
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ac:	441a      	add	r2, r3
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	685a      	ldr	r2, [r3, #4]
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	689b      	ldr	r3, [r3, #8]
 80097ba:	429a      	cmp	r2, r3
 80097bc:	d32b      	bcc.n	8009816 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681a      	ldr	r2, [r3, #0]
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	605a      	str	r2, [r3, #4]
 80097c6:	e026      	b.n	8009816 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	68d8      	ldr	r0, [r3, #12]
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097d0:	461a      	mov	r2, r3
 80097d2:	68b9      	ldr	r1, [r7, #8]
 80097d4:	f002 fbfe 	bl	800bfd4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	68da      	ldr	r2, [r3, #12]
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097e0:	425b      	negs	r3, r3
 80097e2:	441a      	add	r2, r3
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	68da      	ldr	r2, [r3, #12]
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	429a      	cmp	r2, r3
 80097f2:	d207      	bcs.n	8009804 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	689a      	ldr	r2, [r3, #8]
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097fc:	425b      	negs	r3, r3
 80097fe:	441a      	add	r2, r3
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2b02      	cmp	r3, #2
 8009808:	d105      	bne.n	8009816 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d002      	beq.n	8009816 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	3b01      	subs	r3, #1
 8009814:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	1c5a      	adds	r2, r3, #1
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800981e:	697b      	ldr	r3, [r7, #20]
}
 8009820:	4618      	mov	r0, r3
 8009822:	3718      	adds	r7, #24
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}

08009828 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b082      	sub	sp, #8
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009836:	2b00      	cmp	r3, #0
 8009838:	d018      	beq.n	800986c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	68da      	ldr	r2, [r3, #12]
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009842:	441a      	add	r2, r3
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	68da      	ldr	r2, [r3, #12]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	689b      	ldr	r3, [r3, #8]
 8009850:	429a      	cmp	r2, r3
 8009852:	d303      	bcc.n	800985c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681a      	ldr	r2, [r3, #0]
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	68d9      	ldr	r1, [r3, #12]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009864:	461a      	mov	r2, r3
 8009866:	6838      	ldr	r0, [r7, #0]
 8009868:	f002 fbb4 	bl	800bfd4 <memcpy>
	}
}
 800986c:	bf00      	nop
 800986e:	3708      	adds	r7, #8
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}

08009874 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b084      	sub	sp, #16
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800987c:	f7ff faca 	bl	8008e14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009886:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009888:	e011      	b.n	80098ae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800988e:	2b00      	cmp	r3, #0
 8009890:	d012      	beq.n	80098b8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	3324      	adds	r3, #36	; 0x24
 8009896:	4618      	mov	r0, r3
 8009898:	f000 fd50 	bl	800a33c <xTaskRemoveFromEventList>
 800989c:	4603      	mov	r3, r0
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d001      	beq.n	80098a6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80098a2:	f000 fe27 	bl	800a4f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80098a6:	7bfb      	ldrb	r3, [r7, #15]
 80098a8:	3b01      	subs	r3, #1
 80098aa:	b2db      	uxtb	r3, r3
 80098ac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80098ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	dce9      	bgt.n	800988a <prvUnlockQueue+0x16>
 80098b6:	e000      	b.n	80098ba <prvUnlockQueue+0x46>
					break;
 80098b8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	22ff      	movs	r2, #255	; 0xff
 80098be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80098c2:	f7ff fad7 	bl	8008e74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80098c6:	f7ff faa5 	bl	8008e14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80098d0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80098d2:	e011      	b.n	80098f8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	691b      	ldr	r3, [r3, #16]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d012      	beq.n	8009902 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	3310      	adds	r3, #16
 80098e0:	4618      	mov	r0, r3
 80098e2:	f000 fd2b 	bl	800a33c <xTaskRemoveFromEventList>
 80098e6:	4603      	mov	r3, r0
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d001      	beq.n	80098f0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80098ec:	f000 fe02 	bl	800a4f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80098f0:	7bbb      	ldrb	r3, [r7, #14]
 80098f2:	3b01      	subs	r3, #1
 80098f4:	b2db      	uxtb	r3, r3
 80098f6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80098f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	dce9      	bgt.n	80098d4 <prvUnlockQueue+0x60>
 8009900:	e000      	b.n	8009904 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009902:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	22ff      	movs	r2, #255	; 0xff
 8009908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800990c:	f7ff fab2 	bl	8008e74 <vPortExitCritical>
}
 8009910:	bf00      	nop
 8009912:	3710      	adds	r7, #16
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}

08009918 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b084      	sub	sp, #16
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009920:	f7ff fa78 	bl	8008e14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009928:	2b00      	cmp	r3, #0
 800992a:	d102      	bne.n	8009932 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800992c:	2301      	movs	r3, #1
 800992e:	60fb      	str	r3, [r7, #12]
 8009930:	e001      	b.n	8009936 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009932:	2300      	movs	r3, #0
 8009934:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009936:	f7ff fa9d 	bl	8008e74 <vPortExitCritical>

	return xReturn;
 800993a:	68fb      	ldr	r3, [r7, #12]
}
 800993c:	4618      	mov	r0, r3
 800993e:	3710      	adds	r7, #16
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b084      	sub	sp, #16
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800994c:	f7ff fa62 	bl	8008e14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009958:	429a      	cmp	r2, r3
 800995a:	d102      	bne.n	8009962 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800995c:	2301      	movs	r3, #1
 800995e:	60fb      	str	r3, [r7, #12]
 8009960:	e001      	b.n	8009966 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009962:	2300      	movs	r3, #0
 8009964:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009966:	f7ff fa85 	bl	8008e74 <vPortExitCritical>

	return xReturn;
 800996a:	68fb      	ldr	r3, [r7, #12]
}
 800996c:	4618      	mov	r0, r3
 800996e:	3710      	adds	r7, #16
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}

08009974 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009974:	b480      	push	{r7}
 8009976:	b085      	sub	sp, #20
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800997e:	2300      	movs	r3, #0
 8009980:	60fb      	str	r3, [r7, #12]
 8009982:	e014      	b.n	80099ae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009984:	4a0f      	ldr	r2, [pc, #60]	; (80099c4 <vQueueAddToRegistry+0x50>)
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d10b      	bne.n	80099a8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009990:	490c      	ldr	r1, [pc, #48]	; (80099c4 <vQueueAddToRegistry+0x50>)
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	683a      	ldr	r2, [r7, #0]
 8009996:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800999a:	4a0a      	ldr	r2, [pc, #40]	; (80099c4 <vQueueAddToRegistry+0x50>)
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	00db      	lsls	r3, r3, #3
 80099a0:	4413      	add	r3, r2
 80099a2:	687a      	ldr	r2, [r7, #4]
 80099a4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80099a6:	e006      	b.n	80099b6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	3301      	adds	r3, #1
 80099ac:	60fb      	str	r3, [r7, #12]
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2b07      	cmp	r3, #7
 80099b2:	d9e7      	bls.n	8009984 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80099b4:	bf00      	nop
 80099b6:	bf00      	nop
 80099b8:	3714      	adds	r7, #20
 80099ba:	46bd      	mov	sp, r7
 80099bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c0:	4770      	bx	lr
 80099c2:	bf00      	nop
 80099c4:	24004d8c 	.word	0x24004d8c

080099c8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b086      	sub	sp, #24
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	60f8      	str	r0, [r7, #12]
 80099d0:	60b9      	str	r1, [r7, #8]
 80099d2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80099d8:	f7ff fa1c 	bl	8008e14 <vPortEnterCritical>
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80099e2:	b25b      	sxtb	r3, r3
 80099e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099e8:	d103      	bne.n	80099f2 <vQueueWaitForMessageRestricted+0x2a>
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	2200      	movs	r2, #0
 80099ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099f8:	b25b      	sxtb	r3, r3
 80099fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099fe:	d103      	bne.n	8009a08 <vQueueWaitForMessageRestricted+0x40>
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	2200      	movs	r2, #0
 8009a04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009a08:	f7ff fa34 	bl	8008e74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d106      	bne.n	8009a22 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	3324      	adds	r3, #36	; 0x24
 8009a18:	687a      	ldr	r2, [r7, #4]
 8009a1a:	68b9      	ldr	r1, [r7, #8]
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f000 fc61 	bl	800a2e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009a22:	6978      	ldr	r0, [r7, #20]
 8009a24:	f7ff ff26 	bl	8009874 <prvUnlockQueue>
	}
 8009a28:	bf00      	nop
 8009a2a:	3718      	adds	r7, #24
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}

08009a30 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b08e      	sub	sp, #56	; 0x38
 8009a34:	af04      	add	r7, sp, #16
 8009a36:	60f8      	str	r0, [r7, #12]
 8009a38:	60b9      	str	r1, [r7, #8]
 8009a3a:	607a      	str	r2, [r7, #4]
 8009a3c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d10a      	bne.n	8009a5a <xTaskCreateStatic+0x2a>
	__asm volatile
 8009a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a48:	f383 8811 	msr	BASEPRI, r3
 8009a4c:	f3bf 8f6f 	isb	sy
 8009a50:	f3bf 8f4f 	dsb	sy
 8009a54:	623b      	str	r3, [r7, #32]
}
 8009a56:	bf00      	nop
 8009a58:	e7fe      	b.n	8009a58 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d10a      	bne.n	8009a76 <xTaskCreateStatic+0x46>
	__asm volatile
 8009a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a64:	f383 8811 	msr	BASEPRI, r3
 8009a68:	f3bf 8f6f 	isb	sy
 8009a6c:	f3bf 8f4f 	dsb	sy
 8009a70:	61fb      	str	r3, [r7, #28]
}
 8009a72:	bf00      	nop
 8009a74:	e7fe      	b.n	8009a74 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009a76:	23a8      	movs	r3, #168	; 0xa8
 8009a78:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	2ba8      	cmp	r3, #168	; 0xa8
 8009a7e:	d00a      	beq.n	8009a96 <xTaskCreateStatic+0x66>
	__asm volatile
 8009a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a84:	f383 8811 	msr	BASEPRI, r3
 8009a88:	f3bf 8f6f 	isb	sy
 8009a8c:	f3bf 8f4f 	dsb	sy
 8009a90:	61bb      	str	r3, [r7, #24]
}
 8009a92:	bf00      	nop
 8009a94:	e7fe      	b.n	8009a94 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009a96:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d01e      	beq.n	8009adc <xTaskCreateStatic+0xac>
 8009a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d01b      	beq.n	8009adc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aa6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009aac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab0:	2202      	movs	r2, #2
 8009ab2:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	9303      	str	r3, [sp, #12]
 8009aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009abc:	9302      	str	r3, [sp, #8]
 8009abe:	f107 0314 	add.w	r3, r7, #20
 8009ac2:	9301      	str	r3, [sp, #4]
 8009ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ac6:	9300      	str	r3, [sp, #0]
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	687a      	ldr	r2, [r7, #4]
 8009acc:	68b9      	ldr	r1, [r7, #8]
 8009ace:	68f8      	ldr	r0, [r7, #12]
 8009ad0:	f000 f850 	bl	8009b74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009ad4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009ad6:	f000 f8f3 	bl	8009cc0 <prvAddNewTaskToReadyList>
 8009ada:	e001      	b.n	8009ae0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009adc:	2300      	movs	r3, #0
 8009ade:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009ae0:	697b      	ldr	r3, [r7, #20]
	}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3728      	adds	r7, #40	; 0x28
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}

08009aea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009aea:	b580      	push	{r7, lr}
 8009aec:	b08c      	sub	sp, #48	; 0x30
 8009aee:	af04      	add	r7, sp, #16
 8009af0:	60f8      	str	r0, [r7, #12]
 8009af2:	60b9      	str	r1, [r7, #8]
 8009af4:	603b      	str	r3, [r7, #0]
 8009af6:	4613      	mov	r3, r2
 8009af8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009afa:	88fb      	ldrh	r3, [r7, #6]
 8009afc:	009b      	lsls	r3, r3, #2
 8009afe:	4618      	mov	r0, r3
 8009b00:	f7fe fdba 	bl	8008678 <pvPortMalloc>
 8009b04:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d00e      	beq.n	8009b2a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009b0c:	20a8      	movs	r0, #168	; 0xa8
 8009b0e:	f7fe fdb3 	bl	8008678 <pvPortMalloc>
 8009b12:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009b14:	69fb      	ldr	r3, [r7, #28]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d003      	beq.n	8009b22 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009b1a:	69fb      	ldr	r3, [r7, #28]
 8009b1c:	697a      	ldr	r2, [r7, #20]
 8009b1e:	631a      	str	r2, [r3, #48]	; 0x30
 8009b20:	e005      	b.n	8009b2e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009b22:	6978      	ldr	r0, [r7, #20]
 8009b24:	f7fe fe74 	bl	8008810 <vPortFree>
 8009b28:	e001      	b.n	8009b2e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009b2e:	69fb      	ldr	r3, [r7, #28]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d017      	beq.n	8009b64 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009b34:	69fb      	ldr	r3, [r7, #28]
 8009b36:	2200      	movs	r2, #0
 8009b38:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009b3c:	88fa      	ldrh	r2, [r7, #6]
 8009b3e:	2300      	movs	r3, #0
 8009b40:	9303      	str	r3, [sp, #12]
 8009b42:	69fb      	ldr	r3, [r7, #28]
 8009b44:	9302      	str	r3, [sp, #8]
 8009b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b48:	9301      	str	r3, [sp, #4]
 8009b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b4c:	9300      	str	r3, [sp, #0]
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	68b9      	ldr	r1, [r7, #8]
 8009b52:	68f8      	ldr	r0, [r7, #12]
 8009b54:	f000 f80e 	bl	8009b74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009b58:	69f8      	ldr	r0, [r7, #28]
 8009b5a:	f000 f8b1 	bl	8009cc0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009b5e:	2301      	movs	r3, #1
 8009b60:	61bb      	str	r3, [r7, #24]
 8009b62:	e002      	b.n	8009b6a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009b64:	f04f 33ff 	mov.w	r3, #4294967295
 8009b68:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009b6a:	69bb      	ldr	r3, [r7, #24]
	}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3720      	adds	r7, #32
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}

08009b74 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b088      	sub	sp, #32
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	60f8      	str	r0, [r7, #12]
 8009b7c:	60b9      	str	r1, [r7, #8]
 8009b7e:	607a      	str	r2, [r7, #4]
 8009b80:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b84:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	009b      	lsls	r3, r3, #2
 8009b8a:	461a      	mov	r2, r3
 8009b8c:	21a5      	movs	r1, #165	; 0xa5
 8009b8e:	f002 f94c 	bl	800be2a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b96:	6879      	ldr	r1, [r7, #4]
 8009b98:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8009b9c:	440b      	add	r3, r1
 8009b9e:	009b      	lsls	r3, r3, #2
 8009ba0:	4413      	add	r3, r2
 8009ba2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009ba4:	69bb      	ldr	r3, [r7, #24]
 8009ba6:	f023 0307 	bic.w	r3, r3, #7
 8009baa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009bac:	69bb      	ldr	r3, [r7, #24]
 8009bae:	f003 0307 	and.w	r3, r3, #7
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d00a      	beq.n	8009bcc <prvInitialiseNewTask+0x58>
	__asm volatile
 8009bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bba:	f383 8811 	msr	BASEPRI, r3
 8009bbe:	f3bf 8f6f 	isb	sy
 8009bc2:	f3bf 8f4f 	dsb	sy
 8009bc6:	617b      	str	r3, [r7, #20]
}
 8009bc8:	bf00      	nop
 8009bca:	e7fe      	b.n	8009bca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d01f      	beq.n	8009c12 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	61fb      	str	r3, [r7, #28]
 8009bd6:	e012      	b.n	8009bfe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009bd8:	68ba      	ldr	r2, [r7, #8]
 8009bda:	69fb      	ldr	r3, [r7, #28]
 8009bdc:	4413      	add	r3, r2
 8009bde:	7819      	ldrb	r1, [r3, #0]
 8009be0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009be2:	69fb      	ldr	r3, [r7, #28]
 8009be4:	4413      	add	r3, r2
 8009be6:	3334      	adds	r3, #52	; 0x34
 8009be8:	460a      	mov	r2, r1
 8009bea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009bec:	68ba      	ldr	r2, [r7, #8]
 8009bee:	69fb      	ldr	r3, [r7, #28]
 8009bf0:	4413      	add	r3, r2
 8009bf2:	781b      	ldrb	r3, [r3, #0]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d006      	beq.n	8009c06 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009bf8:	69fb      	ldr	r3, [r7, #28]
 8009bfa:	3301      	adds	r3, #1
 8009bfc:	61fb      	str	r3, [r7, #28]
 8009bfe:	69fb      	ldr	r3, [r7, #28]
 8009c00:	2b0f      	cmp	r3, #15
 8009c02:	d9e9      	bls.n	8009bd8 <prvInitialiseNewTask+0x64>
 8009c04:	e000      	b.n	8009c08 <prvInitialiseNewTask+0x94>
			{
				break;
 8009c06:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009c10:	e003      	b.n	8009c1a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c14:	2200      	movs	r2, #0
 8009c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c1c:	2b37      	cmp	r3, #55	; 0x37
 8009c1e:	d901      	bls.n	8009c24 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009c20:	2337      	movs	r3, #55	; 0x37
 8009c22:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c28:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c2e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c32:	2200      	movs	r2, #0
 8009c34:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c38:	3304      	adds	r3, #4
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f7fe ff26 	bl	8008a8c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c42:	3318      	adds	r3, #24
 8009c44:	4618      	mov	r0, r3
 8009c46:	f7fe ff21 	bl	8008a8c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c4e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c52:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c58:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c5e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c62:	2200      	movs	r2, #0
 8009c64:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c72:	3354      	adds	r3, #84	; 0x54
 8009c74:	224c      	movs	r2, #76	; 0x4c
 8009c76:	2100      	movs	r1, #0
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f002 f8d6 	bl	800be2a <memset>
 8009c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c80:	4a0c      	ldr	r2, [pc, #48]	; (8009cb4 <prvInitialiseNewTask+0x140>)
 8009c82:	659a      	str	r2, [r3, #88]	; 0x58
 8009c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c86:	4a0c      	ldr	r2, [pc, #48]	; (8009cb8 <prvInitialiseNewTask+0x144>)
 8009c88:	65da      	str	r2, [r3, #92]	; 0x5c
 8009c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c8c:	4a0b      	ldr	r2, [pc, #44]	; (8009cbc <prvInitialiseNewTask+0x148>)
 8009c8e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009c90:	683a      	ldr	r2, [r7, #0]
 8009c92:	68f9      	ldr	r1, [r7, #12]
 8009c94:	69b8      	ldr	r0, [r7, #24]
 8009c96:	f7fe ff8d 	bl	8008bb4 <pxPortInitialiseStack>
 8009c9a:	4602      	mov	r2, r0
 8009c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c9e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d002      	beq.n	8009cac <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ca8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009caa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009cac:	bf00      	nop
 8009cae:	3720      	adds	r7, #32
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}
 8009cb4:	240053f8 	.word	0x240053f8
 8009cb8:	24005460 	.word	0x24005460
 8009cbc:	240054c8 	.word	0x240054c8

08009cc0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b082      	sub	sp, #8
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009cc8:	f7ff f8a4 	bl	8008e14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009ccc:	4b2d      	ldr	r3, [pc, #180]	; (8009d84 <prvAddNewTaskToReadyList+0xc4>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	3301      	adds	r3, #1
 8009cd2:	4a2c      	ldr	r2, [pc, #176]	; (8009d84 <prvAddNewTaskToReadyList+0xc4>)
 8009cd4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009cd6:	4b2c      	ldr	r3, [pc, #176]	; (8009d88 <prvAddNewTaskToReadyList+0xc8>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d109      	bne.n	8009cf2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009cde:	4a2a      	ldr	r2, [pc, #168]	; (8009d88 <prvAddNewTaskToReadyList+0xc8>)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009ce4:	4b27      	ldr	r3, [pc, #156]	; (8009d84 <prvAddNewTaskToReadyList+0xc4>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	2b01      	cmp	r3, #1
 8009cea:	d110      	bne.n	8009d0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009cec:	f000 fc26 	bl	800a53c <prvInitialiseTaskLists>
 8009cf0:	e00d      	b.n	8009d0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009cf2:	4b26      	ldr	r3, [pc, #152]	; (8009d8c <prvAddNewTaskToReadyList+0xcc>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d109      	bne.n	8009d0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009cfa:	4b23      	ldr	r3, [pc, #140]	; (8009d88 <prvAddNewTaskToReadyList+0xc8>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d04:	429a      	cmp	r2, r3
 8009d06:	d802      	bhi.n	8009d0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009d08:	4a1f      	ldr	r2, [pc, #124]	; (8009d88 <prvAddNewTaskToReadyList+0xc8>)
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009d0e:	4b20      	ldr	r3, [pc, #128]	; (8009d90 <prvAddNewTaskToReadyList+0xd0>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	3301      	adds	r3, #1
 8009d14:	4a1e      	ldr	r2, [pc, #120]	; (8009d90 <prvAddNewTaskToReadyList+0xd0>)
 8009d16:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009d18:	4b1d      	ldr	r3, [pc, #116]	; (8009d90 <prvAddNewTaskToReadyList+0xd0>)
 8009d1a:	681a      	ldr	r2, [r3, #0]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d24:	4b1b      	ldr	r3, [pc, #108]	; (8009d94 <prvAddNewTaskToReadyList+0xd4>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	d903      	bls.n	8009d34 <prvAddNewTaskToReadyList+0x74>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d30:	4a18      	ldr	r2, [pc, #96]	; (8009d94 <prvAddNewTaskToReadyList+0xd4>)
 8009d32:	6013      	str	r3, [r2, #0]
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d38:	4613      	mov	r3, r2
 8009d3a:	009b      	lsls	r3, r3, #2
 8009d3c:	4413      	add	r3, r2
 8009d3e:	009b      	lsls	r3, r3, #2
 8009d40:	4a15      	ldr	r2, [pc, #84]	; (8009d98 <prvAddNewTaskToReadyList+0xd8>)
 8009d42:	441a      	add	r2, r3
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	3304      	adds	r3, #4
 8009d48:	4619      	mov	r1, r3
 8009d4a:	4610      	mov	r0, r2
 8009d4c:	f7fe feab 	bl	8008aa6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009d50:	f7ff f890 	bl	8008e74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009d54:	4b0d      	ldr	r3, [pc, #52]	; (8009d8c <prvAddNewTaskToReadyList+0xcc>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d00e      	beq.n	8009d7a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009d5c:	4b0a      	ldr	r3, [pc, #40]	; (8009d88 <prvAddNewTaskToReadyList+0xc8>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d66:	429a      	cmp	r2, r3
 8009d68:	d207      	bcs.n	8009d7a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009d6a:	4b0c      	ldr	r3, [pc, #48]	; (8009d9c <prvAddNewTaskToReadyList+0xdc>)
 8009d6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d70:	601a      	str	r2, [r3, #0]
 8009d72:	f3bf 8f4f 	dsb	sy
 8009d76:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009d7a:	bf00      	nop
 8009d7c:	3708      	adds	r7, #8
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}
 8009d82:	bf00      	nop
 8009d84:	240052a0 	.word	0x240052a0
 8009d88:	24004dcc 	.word	0x24004dcc
 8009d8c:	240052ac 	.word	0x240052ac
 8009d90:	240052bc 	.word	0x240052bc
 8009d94:	240052a8 	.word	0x240052a8
 8009d98:	24004dd0 	.word	0x24004dd0
 8009d9c:	e000ed04 	.word	0xe000ed04

08009da0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b084      	sub	sp, #16
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009da8:	2300      	movs	r3, #0
 8009daa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d017      	beq.n	8009de2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009db2:	4b13      	ldr	r3, [pc, #76]	; (8009e00 <vTaskDelay+0x60>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d00a      	beq.n	8009dd0 <vTaskDelay+0x30>
	__asm volatile
 8009dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dbe:	f383 8811 	msr	BASEPRI, r3
 8009dc2:	f3bf 8f6f 	isb	sy
 8009dc6:	f3bf 8f4f 	dsb	sy
 8009dca:	60bb      	str	r3, [r7, #8]
}
 8009dcc:	bf00      	nop
 8009dce:	e7fe      	b.n	8009dce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009dd0:	f000 f88a 	bl	8009ee8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009dd4:	2100      	movs	r1, #0
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f000 fcfe 	bl	800a7d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009ddc:	f000 f892 	bl	8009f04 <xTaskResumeAll>
 8009de0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d107      	bne.n	8009df8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009de8:	4b06      	ldr	r3, [pc, #24]	; (8009e04 <vTaskDelay+0x64>)
 8009dea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dee:	601a      	str	r2, [r3, #0]
 8009df0:	f3bf 8f4f 	dsb	sy
 8009df4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009df8:	bf00      	nop
 8009dfa:	3710      	adds	r7, #16
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}
 8009e00:	240052c8 	.word	0x240052c8
 8009e04:	e000ed04 	.word	0xe000ed04

08009e08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b08a      	sub	sp, #40	; 0x28
 8009e0c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009e12:	2300      	movs	r3, #0
 8009e14:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009e16:	463a      	mov	r2, r7
 8009e18:	1d39      	adds	r1, r7, #4
 8009e1a:	f107 0308 	add.w	r3, r7, #8
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f7fe fbf6 	bl	8008610 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009e24:	6839      	ldr	r1, [r7, #0]
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	68ba      	ldr	r2, [r7, #8]
 8009e2a:	9202      	str	r2, [sp, #8]
 8009e2c:	9301      	str	r3, [sp, #4]
 8009e2e:	2300      	movs	r3, #0
 8009e30:	9300      	str	r3, [sp, #0]
 8009e32:	2300      	movs	r3, #0
 8009e34:	460a      	mov	r2, r1
 8009e36:	4924      	ldr	r1, [pc, #144]	; (8009ec8 <vTaskStartScheduler+0xc0>)
 8009e38:	4824      	ldr	r0, [pc, #144]	; (8009ecc <vTaskStartScheduler+0xc4>)
 8009e3a:	f7ff fdf9 	bl	8009a30 <xTaskCreateStatic>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	4a23      	ldr	r2, [pc, #140]	; (8009ed0 <vTaskStartScheduler+0xc8>)
 8009e42:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009e44:	4b22      	ldr	r3, [pc, #136]	; (8009ed0 <vTaskStartScheduler+0xc8>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d002      	beq.n	8009e52 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	617b      	str	r3, [r7, #20]
 8009e50:	e001      	b.n	8009e56 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009e52:	2300      	movs	r3, #0
 8009e54:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d102      	bne.n	8009e62 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009e5c:	f000 fd10 	bl	800a880 <xTimerCreateTimerTask>
 8009e60:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	2b01      	cmp	r3, #1
 8009e66:	d11b      	bne.n	8009ea0 <vTaskStartScheduler+0x98>
	__asm volatile
 8009e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e6c:	f383 8811 	msr	BASEPRI, r3
 8009e70:	f3bf 8f6f 	isb	sy
 8009e74:	f3bf 8f4f 	dsb	sy
 8009e78:	613b      	str	r3, [r7, #16]
}
 8009e7a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009e7c:	4b15      	ldr	r3, [pc, #84]	; (8009ed4 <vTaskStartScheduler+0xcc>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	3354      	adds	r3, #84	; 0x54
 8009e82:	4a15      	ldr	r2, [pc, #84]	; (8009ed8 <vTaskStartScheduler+0xd0>)
 8009e84:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009e86:	4b15      	ldr	r3, [pc, #84]	; (8009edc <vTaskStartScheduler+0xd4>)
 8009e88:	f04f 32ff 	mov.w	r2, #4294967295
 8009e8c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009e8e:	4b14      	ldr	r3, [pc, #80]	; (8009ee0 <vTaskStartScheduler+0xd8>)
 8009e90:	2201      	movs	r2, #1
 8009e92:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009e94:	4b13      	ldr	r3, [pc, #76]	; (8009ee4 <vTaskStartScheduler+0xdc>)
 8009e96:	2200      	movs	r2, #0
 8009e98:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009e9a:	f7fe ff19 	bl	8008cd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009e9e:	e00e      	b.n	8009ebe <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ea6:	d10a      	bne.n	8009ebe <vTaskStartScheduler+0xb6>
	__asm volatile
 8009ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eac:	f383 8811 	msr	BASEPRI, r3
 8009eb0:	f3bf 8f6f 	isb	sy
 8009eb4:	f3bf 8f4f 	dsb	sy
 8009eb8:	60fb      	str	r3, [r7, #12]
}
 8009eba:	bf00      	nop
 8009ebc:	e7fe      	b.n	8009ebc <vTaskStartScheduler+0xb4>
}
 8009ebe:	bf00      	nop
 8009ec0:	3718      	adds	r7, #24
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}
 8009ec6:	bf00      	nop
 8009ec8:	0800f604 	.word	0x0800f604
 8009ecc:	0800a50d 	.word	0x0800a50d
 8009ed0:	240052c4 	.word	0x240052c4
 8009ed4:	24004dcc 	.word	0x24004dcc
 8009ed8:	2400006c 	.word	0x2400006c
 8009edc:	240052c0 	.word	0x240052c0
 8009ee0:	240052ac 	.word	0x240052ac
 8009ee4:	240052a4 	.word	0x240052a4

08009ee8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009ee8:	b480      	push	{r7}
 8009eea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009eec:	4b04      	ldr	r3, [pc, #16]	; (8009f00 <vTaskSuspendAll+0x18>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	3301      	adds	r3, #1
 8009ef2:	4a03      	ldr	r2, [pc, #12]	; (8009f00 <vTaskSuspendAll+0x18>)
 8009ef4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009ef6:	bf00      	nop
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efe:	4770      	bx	lr
 8009f00:	240052c8 	.word	0x240052c8

08009f04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b084      	sub	sp, #16
 8009f08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009f12:	4b42      	ldr	r3, [pc, #264]	; (800a01c <xTaskResumeAll+0x118>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d10a      	bne.n	8009f30 <xTaskResumeAll+0x2c>
	__asm volatile
 8009f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f1e:	f383 8811 	msr	BASEPRI, r3
 8009f22:	f3bf 8f6f 	isb	sy
 8009f26:	f3bf 8f4f 	dsb	sy
 8009f2a:	603b      	str	r3, [r7, #0]
}
 8009f2c:	bf00      	nop
 8009f2e:	e7fe      	b.n	8009f2e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009f30:	f7fe ff70 	bl	8008e14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009f34:	4b39      	ldr	r3, [pc, #228]	; (800a01c <xTaskResumeAll+0x118>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	3b01      	subs	r3, #1
 8009f3a:	4a38      	ldr	r2, [pc, #224]	; (800a01c <xTaskResumeAll+0x118>)
 8009f3c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f3e:	4b37      	ldr	r3, [pc, #220]	; (800a01c <xTaskResumeAll+0x118>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d162      	bne.n	800a00c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009f46:	4b36      	ldr	r3, [pc, #216]	; (800a020 <xTaskResumeAll+0x11c>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d05e      	beq.n	800a00c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009f4e:	e02f      	b.n	8009fb0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f50:	4b34      	ldr	r3, [pc, #208]	; (800a024 <xTaskResumeAll+0x120>)
 8009f52:	68db      	ldr	r3, [r3, #12]
 8009f54:	68db      	ldr	r3, [r3, #12]
 8009f56:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	3318      	adds	r3, #24
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f7fe fdff 	bl	8008b60 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	3304      	adds	r3, #4
 8009f66:	4618      	mov	r0, r3
 8009f68:	f7fe fdfa 	bl	8008b60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f70:	4b2d      	ldr	r3, [pc, #180]	; (800a028 <xTaskResumeAll+0x124>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	429a      	cmp	r2, r3
 8009f76:	d903      	bls.n	8009f80 <xTaskResumeAll+0x7c>
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f7c:	4a2a      	ldr	r2, [pc, #168]	; (800a028 <xTaskResumeAll+0x124>)
 8009f7e:	6013      	str	r3, [r2, #0]
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f84:	4613      	mov	r3, r2
 8009f86:	009b      	lsls	r3, r3, #2
 8009f88:	4413      	add	r3, r2
 8009f8a:	009b      	lsls	r3, r3, #2
 8009f8c:	4a27      	ldr	r2, [pc, #156]	; (800a02c <xTaskResumeAll+0x128>)
 8009f8e:	441a      	add	r2, r3
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	3304      	adds	r3, #4
 8009f94:	4619      	mov	r1, r3
 8009f96:	4610      	mov	r0, r2
 8009f98:	f7fe fd85 	bl	8008aa6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fa0:	4b23      	ldr	r3, [pc, #140]	; (800a030 <xTaskResumeAll+0x12c>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fa6:	429a      	cmp	r2, r3
 8009fa8:	d302      	bcc.n	8009fb0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009faa:	4b22      	ldr	r3, [pc, #136]	; (800a034 <xTaskResumeAll+0x130>)
 8009fac:	2201      	movs	r2, #1
 8009fae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009fb0:	4b1c      	ldr	r3, [pc, #112]	; (800a024 <xTaskResumeAll+0x120>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d1cb      	bne.n	8009f50 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d001      	beq.n	8009fc2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009fbe:	f000 fb5f 	bl	800a680 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009fc2:	4b1d      	ldr	r3, [pc, #116]	; (800a038 <xTaskResumeAll+0x134>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d010      	beq.n	8009ff0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009fce:	f000 f847 	bl	800a060 <xTaskIncrementTick>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d002      	beq.n	8009fde <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009fd8:	4b16      	ldr	r3, [pc, #88]	; (800a034 <xTaskResumeAll+0x130>)
 8009fda:	2201      	movs	r2, #1
 8009fdc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	3b01      	subs	r3, #1
 8009fe2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d1f1      	bne.n	8009fce <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009fea:	4b13      	ldr	r3, [pc, #76]	; (800a038 <xTaskResumeAll+0x134>)
 8009fec:	2200      	movs	r2, #0
 8009fee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009ff0:	4b10      	ldr	r3, [pc, #64]	; (800a034 <xTaskResumeAll+0x130>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d009      	beq.n	800a00c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009ffc:	4b0f      	ldr	r3, [pc, #60]	; (800a03c <xTaskResumeAll+0x138>)
 8009ffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a002:	601a      	str	r2, [r3, #0]
 800a004:	f3bf 8f4f 	dsb	sy
 800a008:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a00c:	f7fe ff32 	bl	8008e74 <vPortExitCritical>

	return xAlreadyYielded;
 800a010:	68bb      	ldr	r3, [r7, #8]
}
 800a012:	4618      	mov	r0, r3
 800a014:	3710      	adds	r7, #16
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}
 800a01a:	bf00      	nop
 800a01c:	240052c8 	.word	0x240052c8
 800a020:	240052a0 	.word	0x240052a0
 800a024:	24005260 	.word	0x24005260
 800a028:	240052a8 	.word	0x240052a8
 800a02c:	24004dd0 	.word	0x24004dd0
 800a030:	24004dcc 	.word	0x24004dcc
 800a034:	240052b4 	.word	0x240052b4
 800a038:	240052b0 	.word	0x240052b0
 800a03c:	e000ed04 	.word	0xe000ed04

0800a040 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a040:	b480      	push	{r7}
 800a042:	b083      	sub	sp, #12
 800a044:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a046:	4b05      	ldr	r3, [pc, #20]	; (800a05c <xTaskGetTickCount+0x1c>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a04c:	687b      	ldr	r3, [r7, #4]
}
 800a04e:	4618      	mov	r0, r3
 800a050:	370c      	adds	r7, #12
 800a052:	46bd      	mov	sp, r7
 800a054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a058:	4770      	bx	lr
 800a05a:	bf00      	nop
 800a05c:	240052a4 	.word	0x240052a4

0800a060 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b086      	sub	sp, #24
 800a064:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a066:	2300      	movs	r3, #0
 800a068:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a06a:	4b4f      	ldr	r3, [pc, #316]	; (800a1a8 <xTaskIncrementTick+0x148>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	f040 808f 	bne.w	800a192 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a074:	4b4d      	ldr	r3, [pc, #308]	; (800a1ac <xTaskIncrementTick+0x14c>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	3301      	adds	r3, #1
 800a07a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a07c:	4a4b      	ldr	r2, [pc, #300]	; (800a1ac <xTaskIncrementTick+0x14c>)
 800a07e:	693b      	ldr	r3, [r7, #16]
 800a080:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a082:	693b      	ldr	r3, [r7, #16]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d120      	bne.n	800a0ca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a088:	4b49      	ldr	r3, [pc, #292]	; (800a1b0 <xTaskIncrementTick+0x150>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d00a      	beq.n	800a0a8 <xTaskIncrementTick+0x48>
	__asm volatile
 800a092:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a096:	f383 8811 	msr	BASEPRI, r3
 800a09a:	f3bf 8f6f 	isb	sy
 800a09e:	f3bf 8f4f 	dsb	sy
 800a0a2:	603b      	str	r3, [r7, #0]
}
 800a0a4:	bf00      	nop
 800a0a6:	e7fe      	b.n	800a0a6 <xTaskIncrementTick+0x46>
 800a0a8:	4b41      	ldr	r3, [pc, #260]	; (800a1b0 <xTaskIncrementTick+0x150>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	60fb      	str	r3, [r7, #12]
 800a0ae:	4b41      	ldr	r3, [pc, #260]	; (800a1b4 <xTaskIncrementTick+0x154>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	4a3f      	ldr	r2, [pc, #252]	; (800a1b0 <xTaskIncrementTick+0x150>)
 800a0b4:	6013      	str	r3, [r2, #0]
 800a0b6:	4a3f      	ldr	r2, [pc, #252]	; (800a1b4 <xTaskIncrementTick+0x154>)
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	6013      	str	r3, [r2, #0]
 800a0bc:	4b3e      	ldr	r3, [pc, #248]	; (800a1b8 <xTaskIncrementTick+0x158>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	4a3d      	ldr	r2, [pc, #244]	; (800a1b8 <xTaskIncrementTick+0x158>)
 800a0c4:	6013      	str	r3, [r2, #0]
 800a0c6:	f000 fadb 	bl	800a680 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a0ca:	4b3c      	ldr	r3, [pc, #240]	; (800a1bc <xTaskIncrementTick+0x15c>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	693a      	ldr	r2, [r7, #16]
 800a0d0:	429a      	cmp	r2, r3
 800a0d2:	d349      	bcc.n	800a168 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a0d4:	4b36      	ldr	r3, [pc, #216]	; (800a1b0 <xTaskIncrementTick+0x150>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d104      	bne.n	800a0e8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0de:	4b37      	ldr	r3, [pc, #220]	; (800a1bc <xTaskIncrementTick+0x15c>)
 800a0e0:	f04f 32ff 	mov.w	r2, #4294967295
 800a0e4:	601a      	str	r2, [r3, #0]
					break;
 800a0e6:	e03f      	b.n	800a168 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0e8:	4b31      	ldr	r3, [pc, #196]	; (800a1b0 <xTaskIncrementTick+0x150>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	68db      	ldr	r3, [r3, #12]
 800a0ee:	68db      	ldr	r3, [r3, #12]
 800a0f0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	685b      	ldr	r3, [r3, #4]
 800a0f6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a0f8:	693a      	ldr	r2, [r7, #16]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	d203      	bcs.n	800a108 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a100:	4a2e      	ldr	r2, [pc, #184]	; (800a1bc <xTaskIncrementTick+0x15c>)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a106:	e02f      	b.n	800a168 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	3304      	adds	r3, #4
 800a10c:	4618      	mov	r0, r3
 800a10e:	f7fe fd27 	bl	8008b60 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a116:	2b00      	cmp	r3, #0
 800a118:	d004      	beq.n	800a124 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	3318      	adds	r3, #24
 800a11e:	4618      	mov	r0, r3
 800a120:	f7fe fd1e 	bl	8008b60 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a128:	4b25      	ldr	r3, [pc, #148]	; (800a1c0 <xTaskIncrementTick+0x160>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	429a      	cmp	r2, r3
 800a12e:	d903      	bls.n	800a138 <xTaskIncrementTick+0xd8>
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a134:	4a22      	ldr	r2, [pc, #136]	; (800a1c0 <xTaskIncrementTick+0x160>)
 800a136:	6013      	str	r3, [r2, #0]
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a13c:	4613      	mov	r3, r2
 800a13e:	009b      	lsls	r3, r3, #2
 800a140:	4413      	add	r3, r2
 800a142:	009b      	lsls	r3, r3, #2
 800a144:	4a1f      	ldr	r2, [pc, #124]	; (800a1c4 <xTaskIncrementTick+0x164>)
 800a146:	441a      	add	r2, r3
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	3304      	adds	r3, #4
 800a14c:	4619      	mov	r1, r3
 800a14e:	4610      	mov	r0, r2
 800a150:	f7fe fca9 	bl	8008aa6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a158:	4b1b      	ldr	r3, [pc, #108]	; (800a1c8 <xTaskIncrementTick+0x168>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a15e:	429a      	cmp	r2, r3
 800a160:	d3b8      	bcc.n	800a0d4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a162:	2301      	movs	r3, #1
 800a164:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a166:	e7b5      	b.n	800a0d4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a168:	4b17      	ldr	r3, [pc, #92]	; (800a1c8 <xTaskIncrementTick+0x168>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a16e:	4915      	ldr	r1, [pc, #84]	; (800a1c4 <xTaskIncrementTick+0x164>)
 800a170:	4613      	mov	r3, r2
 800a172:	009b      	lsls	r3, r3, #2
 800a174:	4413      	add	r3, r2
 800a176:	009b      	lsls	r3, r3, #2
 800a178:	440b      	add	r3, r1
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	2b01      	cmp	r3, #1
 800a17e:	d901      	bls.n	800a184 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a180:	2301      	movs	r3, #1
 800a182:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a184:	4b11      	ldr	r3, [pc, #68]	; (800a1cc <xTaskIncrementTick+0x16c>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d007      	beq.n	800a19c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a18c:	2301      	movs	r3, #1
 800a18e:	617b      	str	r3, [r7, #20]
 800a190:	e004      	b.n	800a19c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a192:	4b0f      	ldr	r3, [pc, #60]	; (800a1d0 <xTaskIncrementTick+0x170>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	3301      	adds	r3, #1
 800a198:	4a0d      	ldr	r2, [pc, #52]	; (800a1d0 <xTaskIncrementTick+0x170>)
 800a19a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a19c:	697b      	ldr	r3, [r7, #20]
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3718      	adds	r7, #24
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}
 800a1a6:	bf00      	nop
 800a1a8:	240052c8 	.word	0x240052c8
 800a1ac:	240052a4 	.word	0x240052a4
 800a1b0:	24005258 	.word	0x24005258
 800a1b4:	2400525c 	.word	0x2400525c
 800a1b8:	240052b8 	.word	0x240052b8
 800a1bc:	240052c0 	.word	0x240052c0
 800a1c0:	240052a8 	.word	0x240052a8
 800a1c4:	24004dd0 	.word	0x24004dd0
 800a1c8:	24004dcc 	.word	0x24004dcc
 800a1cc:	240052b4 	.word	0x240052b4
 800a1d0:	240052b0 	.word	0x240052b0

0800a1d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b085      	sub	sp, #20
 800a1d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a1da:	4b2a      	ldr	r3, [pc, #168]	; (800a284 <vTaskSwitchContext+0xb0>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d003      	beq.n	800a1ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a1e2:	4b29      	ldr	r3, [pc, #164]	; (800a288 <vTaskSwitchContext+0xb4>)
 800a1e4:	2201      	movs	r2, #1
 800a1e6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a1e8:	e046      	b.n	800a278 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a1ea:	4b27      	ldr	r3, [pc, #156]	; (800a288 <vTaskSwitchContext+0xb4>)
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1f0:	4b26      	ldr	r3, [pc, #152]	; (800a28c <vTaskSwitchContext+0xb8>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	60fb      	str	r3, [r7, #12]
 800a1f6:	e010      	b.n	800a21a <vTaskSwitchContext+0x46>
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d10a      	bne.n	800a214 <vTaskSwitchContext+0x40>
	__asm volatile
 800a1fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a202:	f383 8811 	msr	BASEPRI, r3
 800a206:	f3bf 8f6f 	isb	sy
 800a20a:	f3bf 8f4f 	dsb	sy
 800a20e:	607b      	str	r3, [r7, #4]
}
 800a210:	bf00      	nop
 800a212:	e7fe      	b.n	800a212 <vTaskSwitchContext+0x3e>
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	3b01      	subs	r3, #1
 800a218:	60fb      	str	r3, [r7, #12]
 800a21a:	491d      	ldr	r1, [pc, #116]	; (800a290 <vTaskSwitchContext+0xbc>)
 800a21c:	68fa      	ldr	r2, [r7, #12]
 800a21e:	4613      	mov	r3, r2
 800a220:	009b      	lsls	r3, r3, #2
 800a222:	4413      	add	r3, r2
 800a224:	009b      	lsls	r3, r3, #2
 800a226:	440b      	add	r3, r1
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d0e4      	beq.n	800a1f8 <vTaskSwitchContext+0x24>
 800a22e:	68fa      	ldr	r2, [r7, #12]
 800a230:	4613      	mov	r3, r2
 800a232:	009b      	lsls	r3, r3, #2
 800a234:	4413      	add	r3, r2
 800a236:	009b      	lsls	r3, r3, #2
 800a238:	4a15      	ldr	r2, [pc, #84]	; (800a290 <vTaskSwitchContext+0xbc>)
 800a23a:	4413      	add	r3, r2
 800a23c:	60bb      	str	r3, [r7, #8]
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	685b      	ldr	r3, [r3, #4]
 800a242:	685a      	ldr	r2, [r3, #4]
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	605a      	str	r2, [r3, #4]
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	685a      	ldr	r2, [r3, #4]
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	3308      	adds	r3, #8
 800a250:	429a      	cmp	r2, r3
 800a252:	d104      	bne.n	800a25e <vTaskSwitchContext+0x8a>
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	685b      	ldr	r3, [r3, #4]
 800a258:	685a      	ldr	r2, [r3, #4]
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	605a      	str	r2, [r3, #4]
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	685b      	ldr	r3, [r3, #4]
 800a262:	68db      	ldr	r3, [r3, #12]
 800a264:	4a0b      	ldr	r2, [pc, #44]	; (800a294 <vTaskSwitchContext+0xc0>)
 800a266:	6013      	str	r3, [r2, #0]
 800a268:	4a08      	ldr	r2, [pc, #32]	; (800a28c <vTaskSwitchContext+0xb8>)
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a26e:	4b09      	ldr	r3, [pc, #36]	; (800a294 <vTaskSwitchContext+0xc0>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	3354      	adds	r3, #84	; 0x54
 800a274:	4a08      	ldr	r2, [pc, #32]	; (800a298 <vTaskSwitchContext+0xc4>)
 800a276:	6013      	str	r3, [r2, #0]
}
 800a278:	bf00      	nop
 800a27a:	3714      	adds	r7, #20
 800a27c:	46bd      	mov	sp, r7
 800a27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a282:	4770      	bx	lr
 800a284:	240052c8 	.word	0x240052c8
 800a288:	240052b4 	.word	0x240052b4
 800a28c:	240052a8 	.word	0x240052a8
 800a290:	24004dd0 	.word	0x24004dd0
 800a294:	24004dcc 	.word	0x24004dcc
 800a298:	2400006c 	.word	0x2400006c

0800a29c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b084      	sub	sp, #16
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d10a      	bne.n	800a2c2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b0:	f383 8811 	msr	BASEPRI, r3
 800a2b4:	f3bf 8f6f 	isb	sy
 800a2b8:	f3bf 8f4f 	dsb	sy
 800a2bc:	60fb      	str	r3, [r7, #12]
}
 800a2be:	bf00      	nop
 800a2c0:	e7fe      	b.n	800a2c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a2c2:	4b07      	ldr	r3, [pc, #28]	; (800a2e0 <vTaskPlaceOnEventList+0x44>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	3318      	adds	r3, #24
 800a2c8:	4619      	mov	r1, r3
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f7fe fc0f 	bl	8008aee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a2d0:	2101      	movs	r1, #1
 800a2d2:	6838      	ldr	r0, [r7, #0]
 800a2d4:	f000 fa80 	bl	800a7d8 <prvAddCurrentTaskToDelayedList>
}
 800a2d8:	bf00      	nop
 800a2da:	3710      	adds	r7, #16
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}
 800a2e0:	24004dcc 	.word	0x24004dcc

0800a2e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b086      	sub	sp, #24
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	60f8      	str	r0, [r7, #12]
 800a2ec:	60b9      	str	r1, [r7, #8]
 800a2ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d10a      	bne.n	800a30c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2fa:	f383 8811 	msr	BASEPRI, r3
 800a2fe:	f3bf 8f6f 	isb	sy
 800a302:	f3bf 8f4f 	dsb	sy
 800a306:	617b      	str	r3, [r7, #20]
}
 800a308:	bf00      	nop
 800a30a:	e7fe      	b.n	800a30a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a30c:	4b0a      	ldr	r3, [pc, #40]	; (800a338 <vTaskPlaceOnEventListRestricted+0x54>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	3318      	adds	r3, #24
 800a312:	4619      	mov	r1, r3
 800a314:	68f8      	ldr	r0, [r7, #12]
 800a316:	f7fe fbc6 	bl	8008aa6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d002      	beq.n	800a326 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a320:	f04f 33ff 	mov.w	r3, #4294967295
 800a324:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a326:	6879      	ldr	r1, [r7, #4]
 800a328:	68b8      	ldr	r0, [r7, #8]
 800a32a:	f000 fa55 	bl	800a7d8 <prvAddCurrentTaskToDelayedList>
	}
 800a32e:	bf00      	nop
 800a330:	3718      	adds	r7, #24
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
 800a336:	bf00      	nop
 800a338:	24004dcc 	.word	0x24004dcc

0800a33c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b086      	sub	sp, #24
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	68db      	ldr	r3, [r3, #12]
 800a348:	68db      	ldr	r3, [r3, #12]
 800a34a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d10a      	bne.n	800a368 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a352:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a356:	f383 8811 	msr	BASEPRI, r3
 800a35a:	f3bf 8f6f 	isb	sy
 800a35e:	f3bf 8f4f 	dsb	sy
 800a362:	60fb      	str	r3, [r7, #12]
}
 800a364:	bf00      	nop
 800a366:	e7fe      	b.n	800a366 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	3318      	adds	r3, #24
 800a36c:	4618      	mov	r0, r3
 800a36e:	f7fe fbf7 	bl	8008b60 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a372:	4b1e      	ldr	r3, [pc, #120]	; (800a3ec <xTaskRemoveFromEventList+0xb0>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d11d      	bne.n	800a3b6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a37a:	693b      	ldr	r3, [r7, #16]
 800a37c:	3304      	adds	r3, #4
 800a37e:	4618      	mov	r0, r3
 800a380:	f7fe fbee 	bl	8008b60 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a388:	4b19      	ldr	r3, [pc, #100]	; (800a3f0 <xTaskRemoveFromEventList+0xb4>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	429a      	cmp	r2, r3
 800a38e:	d903      	bls.n	800a398 <xTaskRemoveFromEventList+0x5c>
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a394:	4a16      	ldr	r2, [pc, #88]	; (800a3f0 <xTaskRemoveFromEventList+0xb4>)
 800a396:	6013      	str	r3, [r2, #0]
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a39c:	4613      	mov	r3, r2
 800a39e:	009b      	lsls	r3, r3, #2
 800a3a0:	4413      	add	r3, r2
 800a3a2:	009b      	lsls	r3, r3, #2
 800a3a4:	4a13      	ldr	r2, [pc, #76]	; (800a3f4 <xTaskRemoveFromEventList+0xb8>)
 800a3a6:	441a      	add	r2, r3
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	3304      	adds	r3, #4
 800a3ac:	4619      	mov	r1, r3
 800a3ae:	4610      	mov	r0, r2
 800a3b0:	f7fe fb79 	bl	8008aa6 <vListInsertEnd>
 800a3b4:	e005      	b.n	800a3c2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a3b6:	693b      	ldr	r3, [r7, #16]
 800a3b8:	3318      	adds	r3, #24
 800a3ba:	4619      	mov	r1, r3
 800a3bc:	480e      	ldr	r0, [pc, #56]	; (800a3f8 <xTaskRemoveFromEventList+0xbc>)
 800a3be:	f7fe fb72 	bl	8008aa6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3c6:	4b0d      	ldr	r3, [pc, #52]	; (800a3fc <xTaskRemoveFromEventList+0xc0>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	d905      	bls.n	800a3dc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a3d4:	4b0a      	ldr	r3, [pc, #40]	; (800a400 <xTaskRemoveFromEventList+0xc4>)
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	601a      	str	r2, [r3, #0]
 800a3da:	e001      	b.n	800a3e0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a3e0:	697b      	ldr	r3, [r7, #20]
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3718      	adds	r7, #24
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}
 800a3ea:	bf00      	nop
 800a3ec:	240052c8 	.word	0x240052c8
 800a3f0:	240052a8 	.word	0x240052a8
 800a3f4:	24004dd0 	.word	0x24004dd0
 800a3f8:	24005260 	.word	0x24005260
 800a3fc:	24004dcc 	.word	0x24004dcc
 800a400:	240052b4 	.word	0x240052b4

0800a404 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a404:	b480      	push	{r7}
 800a406:	b083      	sub	sp, #12
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a40c:	4b06      	ldr	r3, [pc, #24]	; (800a428 <vTaskInternalSetTimeOutState+0x24>)
 800a40e:	681a      	ldr	r2, [r3, #0]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a414:	4b05      	ldr	r3, [pc, #20]	; (800a42c <vTaskInternalSetTimeOutState+0x28>)
 800a416:	681a      	ldr	r2, [r3, #0]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	605a      	str	r2, [r3, #4]
}
 800a41c:	bf00      	nop
 800a41e:	370c      	adds	r7, #12
 800a420:	46bd      	mov	sp, r7
 800a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a426:	4770      	bx	lr
 800a428:	240052b8 	.word	0x240052b8
 800a42c:	240052a4 	.word	0x240052a4

0800a430 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b088      	sub	sp, #32
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
 800a438:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d10a      	bne.n	800a456 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a440:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a444:	f383 8811 	msr	BASEPRI, r3
 800a448:	f3bf 8f6f 	isb	sy
 800a44c:	f3bf 8f4f 	dsb	sy
 800a450:	613b      	str	r3, [r7, #16]
}
 800a452:	bf00      	nop
 800a454:	e7fe      	b.n	800a454 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d10a      	bne.n	800a472 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a45c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a460:	f383 8811 	msr	BASEPRI, r3
 800a464:	f3bf 8f6f 	isb	sy
 800a468:	f3bf 8f4f 	dsb	sy
 800a46c:	60fb      	str	r3, [r7, #12]
}
 800a46e:	bf00      	nop
 800a470:	e7fe      	b.n	800a470 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a472:	f7fe fccf 	bl	8008e14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a476:	4b1d      	ldr	r3, [pc, #116]	; (800a4ec <xTaskCheckForTimeOut+0xbc>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	685b      	ldr	r3, [r3, #4]
 800a480:	69ba      	ldr	r2, [r7, #24]
 800a482:	1ad3      	subs	r3, r2, r3
 800a484:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a48e:	d102      	bne.n	800a496 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a490:	2300      	movs	r3, #0
 800a492:	61fb      	str	r3, [r7, #28]
 800a494:	e023      	b.n	800a4de <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681a      	ldr	r2, [r3, #0]
 800a49a:	4b15      	ldr	r3, [pc, #84]	; (800a4f0 <xTaskCheckForTimeOut+0xc0>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	429a      	cmp	r2, r3
 800a4a0:	d007      	beq.n	800a4b2 <xTaskCheckForTimeOut+0x82>
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	69ba      	ldr	r2, [r7, #24]
 800a4a8:	429a      	cmp	r2, r3
 800a4aa:	d302      	bcc.n	800a4b2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	61fb      	str	r3, [r7, #28]
 800a4b0:	e015      	b.n	800a4de <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	697a      	ldr	r2, [r7, #20]
 800a4b8:	429a      	cmp	r2, r3
 800a4ba:	d20b      	bcs.n	800a4d4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	681a      	ldr	r2, [r3, #0]
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	1ad2      	subs	r2, r2, r3
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f7ff ff9b 	bl	800a404 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	61fb      	str	r3, [r7, #28]
 800a4d2:	e004      	b.n	800a4de <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a4da:	2301      	movs	r3, #1
 800a4dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a4de:	f7fe fcc9 	bl	8008e74 <vPortExitCritical>

	return xReturn;
 800a4e2:	69fb      	ldr	r3, [r7, #28]
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3720      	adds	r7, #32
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}
 800a4ec:	240052a4 	.word	0x240052a4
 800a4f0:	240052b8 	.word	0x240052b8

0800a4f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a4f8:	4b03      	ldr	r3, [pc, #12]	; (800a508 <vTaskMissedYield+0x14>)
 800a4fa:	2201      	movs	r2, #1
 800a4fc:	601a      	str	r2, [r3, #0]
}
 800a4fe:	bf00      	nop
 800a500:	46bd      	mov	sp, r7
 800a502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a506:	4770      	bx	lr
 800a508:	240052b4 	.word	0x240052b4

0800a50c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b082      	sub	sp, #8
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a514:	f000 f852 	bl	800a5bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a518:	4b06      	ldr	r3, [pc, #24]	; (800a534 <prvIdleTask+0x28>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	d9f9      	bls.n	800a514 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a520:	4b05      	ldr	r3, [pc, #20]	; (800a538 <prvIdleTask+0x2c>)
 800a522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a526:	601a      	str	r2, [r3, #0]
 800a528:	f3bf 8f4f 	dsb	sy
 800a52c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a530:	e7f0      	b.n	800a514 <prvIdleTask+0x8>
 800a532:	bf00      	nop
 800a534:	24004dd0 	.word	0x24004dd0
 800a538:	e000ed04 	.word	0xe000ed04

0800a53c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b082      	sub	sp, #8
 800a540:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a542:	2300      	movs	r3, #0
 800a544:	607b      	str	r3, [r7, #4]
 800a546:	e00c      	b.n	800a562 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a548:	687a      	ldr	r2, [r7, #4]
 800a54a:	4613      	mov	r3, r2
 800a54c:	009b      	lsls	r3, r3, #2
 800a54e:	4413      	add	r3, r2
 800a550:	009b      	lsls	r3, r3, #2
 800a552:	4a12      	ldr	r2, [pc, #72]	; (800a59c <prvInitialiseTaskLists+0x60>)
 800a554:	4413      	add	r3, r2
 800a556:	4618      	mov	r0, r3
 800a558:	f7fe fa78 	bl	8008a4c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	3301      	adds	r3, #1
 800a560:	607b      	str	r3, [r7, #4]
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2b37      	cmp	r3, #55	; 0x37
 800a566:	d9ef      	bls.n	800a548 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a568:	480d      	ldr	r0, [pc, #52]	; (800a5a0 <prvInitialiseTaskLists+0x64>)
 800a56a:	f7fe fa6f 	bl	8008a4c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a56e:	480d      	ldr	r0, [pc, #52]	; (800a5a4 <prvInitialiseTaskLists+0x68>)
 800a570:	f7fe fa6c 	bl	8008a4c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a574:	480c      	ldr	r0, [pc, #48]	; (800a5a8 <prvInitialiseTaskLists+0x6c>)
 800a576:	f7fe fa69 	bl	8008a4c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a57a:	480c      	ldr	r0, [pc, #48]	; (800a5ac <prvInitialiseTaskLists+0x70>)
 800a57c:	f7fe fa66 	bl	8008a4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a580:	480b      	ldr	r0, [pc, #44]	; (800a5b0 <prvInitialiseTaskLists+0x74>)
 800a582:	f7fe fa63 	bl	8008a4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a586:	4b0b      	ldr	r3, [pc, #44]	; (800a5b4 <prvInitialiseTaskLists+0x78>)
 800a588:	4a05      	ldr	r2, [pc, #20]	; (800a5a0 <prvInitialiseTaskLists+0x64>)
 800a58a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a58c:	4b0a      	ldr	r3, [pc, #40]	; (800a5b8 <prvInitialiseTaskLists+0x7c>)
 800a58e:	4a05      	ldr	r2, [pc, #20]	; (800a5a4 <prvInitialiseTaskLists+0x68>)
 800a590:	601a      	str	r2, [r3, #0]
}
 800a592:	bf00      	nop
 800a594:	3708      	adds	r7, #8
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}
 800a59a:	bf00      	nop
 800a59c:	24004dd0 	.word	0x24004dd0
 800a5a0:	24005230 	.word	0x24005230
 800a5a4:	24005244 	.word	0x24005244
 800a5a8:	24005260 	.word	0x24005260
 800a5ac:	24005274 	.word	0x24005274
 800a5b0:	2400528c 	.word	0x2400528c
 800a5b4:	24005258 	.word	0x24005258
 800a5b8:	2400525c 	.word	0x2400525c

0800a5bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b082      	sub	sp, #8
 800a5c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a5c2:	e019      	b.n	800a5f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a5c4:	f7fe fc26 	bl	8008e14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5c8:	4b10      	ldr	r3, [pc, #64]	; (800a60c <prvCheckTasksWaitingTermination+0x50>)
 800a5ca:	68db      	ldr	r3, [r3, #12]
 800a5cc:	68db      	ldr	r3, [r3, #12]
 800a5ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	3304      	adds	r3, #4
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f7fe fac3 	bl	8008b60 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a5da:	4b0d      	ldr	r3, [pc, #52]	; (800a610 <prvCheckTasksWaitingTermination+0x54>)
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	3b01      	subs	r3, #1
 800a5e0:	4a0b      	ldr	r2, [pc, #44]	; (800a610 <prvCheckTasksWaitingTermination+0x54>)
 800a5e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a5e4:	4b0b      	ldr	r3, [pc, #44]	; (800a614 <prvCheckTasksWaitingTermination+0x58>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	3b01      	subs	r3, #1
 800a5ea:	4a0a      	ldr	r2, [pc, #40]	; (800a614 <prvCheckTasksWaitingTermination+0x58>)
 800a5ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a5ee:	f7fe fc41 	bl	8008e74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f000 f810 	bl	800a618 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a5f8:	4b06      	ldr	r3, [pc, #24]	; (800a614 <prvCheckTasksWaitingTermination+0x58>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d1e1      	bne.n	800a5c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a600:	bf00      	nop
 800a602:	bf00      	nop
 800a604:	3708      	adds	r7, #8
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
 800a60a:	bf00      	nop
 800a60c:	24005274 	.word	0x24005274
 800a610:	240052a0 	.word	0x240052a0
 800a614:	24005288 	.word	0x24005288

0800a618 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b084      	sub	sp, #16
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	3354      	adds	r3, #84	; 0x54
 800a624:	4618      	mov	r0, r3
 800a626:	f001 fc1d 	bl	800be64 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a630:	2b00      	cmp	r3, #0
 800a632:	d108      	bne.n	800a646 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a638:	4618      	mov	r0, r3
 800a63a:	f7fe f8e9 	bl	8008810 <vPortFree>
				vPortFree( pxTCB );
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f7fe f8e6 	bl	8008810 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a644:	e018      	b.n	800a678 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a64c:	2b01      	cmp	r3, #1
 800a64e:	d103      	bne.n	800a658 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f7fe f8dd 	bl	8008810 <vPortFree>
	}
 800a656:	e00f      	b.n	800a678 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a65e:	2b02      	cmp	r3, #2
 800a660:	d00a      	beq.n	800a678 <prvDeleteTCB+0x60>
	__asm volatile
 800a662:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a666:	f383 8811 	msr	BASEPRI, r3
 800a66a:	f3bf 8f6f 	isb	sy
 800a66e:	f3bf 8f4f 	dsb	sy
 800a672:	60fb      	str	r3, [r7, #12]
}
 800a674:	bf00      	nop
 800a676:	e7fe      	b.n	800a676 <prvDeleteTCB+0x5e>
	}
 800a678:	bf00      	nop
 800a67a:	3710      	adds	r7, #16
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}

0800a680 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a680:	b480      	push	{r7}
 800a682:	b083      	sub	sp, #12
 800a684:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a686:	4b0c      	ldr	r3, [pc, #48]	; (800a6b8 <prvResetNextTaskUnblockTime+0x38>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d104      	bne.n	800a69a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a690:	4b0a      	ldr	r3, [pc, #40]	; (800a6bc <prvResetNextTaskUnblockTime+0x3c>)
 800a692:	f04f 32ff 	mov.w	r2, #4294967295
 800a696:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a698:	e008      	b.n	800a6ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a69a:	4b07      	ldr	r3, [pc, #28]	; (800a6b8 <prvResetNextTaskUnblockTime+0x38>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	68db      	ldr	r3, [r3, #12]
 800a6a0:	68db      	ldr	r3, [r3, #12]
 800a6a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	685b      	ldr	r3, [r3, #4]
 800a6a8:	4a04      	ldr	r2, [pc, #16]	; (800a6bc <prvResetNextTaskUnblockTime+0x3c>)
 800a6aa:	6013      	str	r3, [r2, #0]
}
 800a6ac:	bf00      	nop
 800a6ae:	370c      	adds	r7, #12
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr
 800a6b8:	24005258 	.word	0x24005258
 800a6bc:	240052c0 	.word	0x240052c0

0800a6c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b083      	sub	sp, #12
 800a6c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a6c6:	4b0b      	ldr	r3, [pc, #44]	; (800a6f4 <xTaskGetSchedulerState+0x34>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d102      	bne.n	800a6d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	607b      	str	r3, [r7, #4]
 800a6d2:	e008      	b.n	800a6e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a6d4:	4b08      	ldr	r3, [pc, #32]	; (800a6f8 <xTaskGetSchedulerState+0x38>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d102      	bne.n	800a6e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a6dc:	2302      	movs	r3, #2
 800a6de:	607b      	str	r3, [r7, #4]
 800a6e0:	e001      	b.n	800a6e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a6e6:	687b      	ldr	r3, [r7, #4]
	}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	370c      	adds	r7, #12
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f2:	4770      	bx	lr
 800a6f4:	240052ac 	.word	0x240052ac
 800a6f8:	240052c8 	.word	0x240052c8

0800a6fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b086      	sub	sp, #24
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a708:	2300      	movs	r3, #0
 800a70a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d056      	beq.n	800a7c0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a712:	4b2e      	ldr	r3, [pc, #184]	; (800a7cc <xTaskPriorityDisinherit+0xd0>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	693a      	ldr	r2, [r7, #16]
 800a718:	429a      	cmp	r2, r3
 800a71a:	d00a      	beq.n	800a732 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a71c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a720:	f383 8811 	msr	BASEPRI, r3
 800a724:	f3bf 8f6f 	isb	sy
 800a728:	f3bf 8f4f 	dsb	sy
 800a72c:	60fb      	str	r3, [r7, #12]
}
 800a72e:	bf00      	nop
 800a730:	e7fe      	b.n	800a730 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a736:	2b00      	cmp	r3, #0
 800a738:	d10a      	bne.n	800a750 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a73e:	f383 8811 	msr	BASEPRI, r3
 800a742:	f3bf 8f6f 	isb	sy
 800a746:	f3bf 8f4f 	dsb	sy
 800a74a:	60bb      	str	r3, [r7, #8]
}
 800a74c:	bf00      	nop
 800a74e:	e7fe      	b.n	800a74e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a754:	1e5a      	subs	r2, r3, #1
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a762:	429a      	cmp	r2, r3
 800a764:	d02c      	beq.n	800a7c0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d128      	bne.n	800a7c0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	3304      	adds	r3, #4
 800a772:	4618      	mov	r0, r3
 800a774:	f7fe f9f4 	bl	8008b60 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a77c:	693b      	ldr	r3, [r7, #16]
 800a77e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a784:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a790:	4b0f      	ldr	r3, [pc, #60]	; (800a7d0 <xTaskPriorityDisinherit+0xd4>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	429a      	cmp	r2, r3
 800a796:	d903      	bls.n	800a7a0 <xTaskPriorityDisinherit+0xa4>
 800a798:	693b      	ldr	r3, [r7, #16]
 800a79a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a79c:	4a0c      	ldr	r2, [pc, #48]	; (800a7d0 <xTaskPriorityDisinherit+0xd4>)
 800a79e:	6013      	str	r3, [r2, #0]
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7a4:	4613      	mov	r3, r2
 800a7a6:	009b      	lsls	r3, r3, #2
 800a7a8:	4413      	add	r3, r2
 800a7aa:	009b      	lsls	r3, r3, #2
 800a7ac:	4a09      	ldr	r2, [pc, #36]	; (800a7d4 <xTaskPriorityDisinherit+0xd8>)
 800a7ae:	441a      	add	r2, r3
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	3304      	adds	r3, #4
 800a7b4:	4619      	mov	r1, r3
 800a7b6:	4610      	mov	r0, r2
 800a7b8:	f7fe f975 	bl	8008aa6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a7bc:	2301      	movs	r3, #1
 800a7be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a7c0:	697b      	ldr	r3, [r7, #20]
	}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	3718      	adds	r7, #24
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}
 800a7ca:	bf00      	nop
 800a7cc:	24004dcc 	.word	0x24004dcc
 800a7d0:	240052a8 	.word	0x240052a8
 800a7d4:	24004dd0 	.word	0x24004dd0

0800a7d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b084      	sub	sp, #16
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
 800a7e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a7e2:	4b21      	ldr	r3, [pc, #132]	; (800a868 <prvAddCurrentTaskToDelayedList+0x90>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a7e8:	4b20      	ldr	r3, [pc, #128]	; (800a86c <prvAddCurrentTaskToDelayedList+0x94>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	3304      	adds	r3, #4
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f7fe f9b6 	bl	8008b60 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7fa:	d10a      	bne.n	800a812 <prvAddCurrentTaskToDelayedList+0x3a>
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d007      	beq.n	800a812 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a802:	4b1a      	ldr	r3, [pc, #104]	; (800a86c <prvAddCurrentTaskToDelayedList+0x94>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	3304      	adds	r3, #4
 800a808:	4619      	mov	r1, r3
 800a80a:	4819      	ldr	r0, [pc, #100]	; (800a870 <prvAddCurrentTaskToDelayedList+0x98>)
 800a80c:	f7fe f94b 	bl	8008aa6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a810:	e026      	b.n	800a860 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a812:	68fa      	ldr	r2, [r7, #12]
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	4413      	add	r3, r2
 800a818:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a81a:	4b14      	ldr	r3, [pc, #80]	; (800a86c <prvAddCurrentTaskToDelayedList+0x94>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	68ba      	ldr	r2, [r7, #8]
 800a820:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a822:	68ba      	ldr	r2, [r7, #8]
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	429a      	cmp	r2, r3
 800a828:	d209      	bcs.n	800a83e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a82a:	4b12      	ldr	r3, [pc, #72]	; (800a874 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a82c:	681a      	ldr	r2, [r3, #0]
 800a82e:	4b0f      	ldr	r3, [pc, #60]	; (800a86c <prvAddCurrentTaskToDelayedList+0x94>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	3304      	adds	r3, #4
 800a834:	4619      	mov	r1, r3
 800a836:	4610      	mov	r0, r2
 800a838:	f7fe f959 	bl	8008aee <vListInsert>
}
 800a83c:	e010      	b.n	800a860 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a83e:	4b0e      	ldr	r3, [pc, #56]	; (800a878 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a840:	681a      	ldr	r2, [r3, #0]
 800a842:	4b0a      	ldr	r3, [pc, #40]	; (800a86c <prvAddCurrentTaskToDelayedList+0x94>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	3304      	adds	r3, #4
 800a848:	4619      	mov	r1, r3
 800a84a:	4610      	mov	r0, r2
 800a84c:	f7fe f94f 	bl	8008aee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a850:	4b0a      	ldr	r3, [pc, #40]	; (800a87c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	68ba      	ldr	r2, [r7, #8]
 800a856:	429a      	cmp	r2, r3
 800a858:	d202      	bcs.n	800a860 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a85a:	4a08      	ldr	r2, [pc, #32]	; (800a87c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	6013      	str	r3, [r2, #0]
}
 800a860:	bf00      	nop
 800a862:	3710      	adds	r7, #16
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}
 800a868:	240052a4 	.word	0x240052a4
 800a86c:	24004dcc 	.word	0x24004dcc
 800a870:	2400528c 	.word	0x2400528c
 800a874:	2400525c 	.word	0x2400525c
 800a878:	24005258 	.word	0x24005258
 800a87c:	240052c0 	.word	0x240052c0

0800a880 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b08a      	sub	sp, #40	; 0x28
 800a884:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a886:	2300      	movs	r3, #0
 800a888:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a88a:	f000 fb07 	bl	800ae9c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a88e:	4b1c      	ldr	r3, [pc, #112]	; (800a900 <xTimerCreateTimerTask+0x80>)
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d021      	beq.n	800a8da <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a896:	2300      	movs	r3, #0
 800a898:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a89a:	2300      	movs	r3, #0
 800a89c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a89e:	1d3a      	adds	r2, r7, #4
 800a8a0:	f107 0108 	add.w	r1, r7, #8
 800a8a4:	f107 030c 	add.w	r3, r7, #12
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f7fd fecb 	bl	8008644 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a8ae:	6879      	ldr	r1, [r7, #4]
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	68fa      	ldr	r2, [r7, #12]
 800a8b4:	9202      	str	r2, [sp, #8]
 800a8b6:	9301      	str	r3, [sp, #4]
 800a8b8:	2302      	movs	r3, #2
 800a8ba:	9300      	str	r3, [sp, #0]
 800a8bc:	2300      	movs	r3, #0
 800a8be:	460a      	mov	r2, r1
 800a8c0:	4910      	ldr	r1, [pc, #64]	; (800a904 <xTimerCreateTimerTask+0x84>)
 800a8c2:	4811      	ldr	r0, [pc, #68]	; (800a908 <xTimerCreateTimerTask+0x88>)
 800a8c4:	f7ff f8b4 	bl	8009a30 <xTaskCreateStatic>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	4a10      	ldr	r2, [pc, #64]	; (800a90c <xTimerCreateTimerTask+0x8c>)
 800a8cc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a8ce:	4b0f      	ldr	r3, [pc, #60]	; (800a90c <xTimerCreateTimerTask+0x8c>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d001      	beq.n	800a8da <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d10a      	bne.n	800a8f6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a8e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e4:	f383 8811 	msr	BASEPRI, r3
 800a8e8:	f3bf 8f6f 	isb	sy
 800a8ec:	f3bf 8f4f 	dsb	sy
 800a8f0:	613b      	str	r3, [r7, #16]
}
 800a8f2:	bf00      	nop
 800a8f4:	e7fe      	b.n	800a8f4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a8f6:	697b      	ldr	r3, [r7, #20]
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3718      	adds	r7, #24
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}
 800a900:	240052fc 	.word	0x240052fc
 800a904:	0800f60c 	.word	0x0800f60c
 800a908:	0800aa45 	.word	0x0800aa45
 800a90c:	24005300 	.word	0x24005300

0800a910 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b08a      	sub	sp, #40	; 0x28
 800a914:	af00      	add	r7, sp, #0
 800a916:	60f8      	str	r0, [r7, #12]
 800a918:	60b9      	str	r1, [r7, #8]
 800a91a:	607a      	str	r2, [r7, #4]
 800a91c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a91e:	2300      	movs	r3, #0
 800a920:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d10a      	bne.n	800a93e <xTimerGenericCommand+0x2e>
	__asm volatile
 800a928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a92c:	f383 8811 	msr	BASEPRI, r3
 800a930:	f3bf 8f6f 	isb	sy
 800a934:	f3bf 8f4f 	dsb	sy
 800a938:	623b      	str	r3, [r7, #32]
}
 800a93a:	bf00      	nop
 800a93c:	e7fe      	b.n	800a93c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a93e:	4b1a      	ldr	r3, [pc, #104]	; (800a9a8 <xTimerGenericCommand+0x98>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d02a      	beq.n	800a99c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	2b05      	cmp	r3, #5
 800a956:	dc18      	bgt.n	800a98a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a958:	f7ff feb2 	bl	800a6c0 <xTaskGetSchedulerState>
 800a95c:	4603      	mov	r3, r0
 800a95e:	2b02      	cmp	r3, #2
 800a960:	d109      	bne.n	800a976 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a962:	4b11      	ldr	r3, [pc, #68]	; (800a9a8 <xTimerGenericCommand+0x98>)
 800a964:	6818      	ldr	r0, [r3, #0]
 800a966:	f107 0110 	add.w	r1, r7, #16
 800a96a:	2300      	movs	r3, #0
 800a96c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a96e:	f7fe fc77 	bl	8009260 <xQueueGenericSend>
 800a972:	6278      	str	r0, [r7, #36]	; 0x24
 800a974:	e012      	b.n	800a99c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a976:	4b0c      	ldr	r3, [pc, #48]	; (800a9a8 <xTimerGenericCommand+0x98>)
 800a978:	6818      	ldr	r0, [r3, #0]
 800a97a:	f107 0110 	add.w	r1, r7, #16
 800a97e:	2300      	movs	r3, #0
 800a980:	2200      	movs	r2, #0
 800a982:	f7fe fc6d 	bl	8009260 <xQueueGenericSend>
 800a986:	6278      	str	r0, [r7, #36]	; 0x24
 800a988:	e008      	b.n	800a99c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a98a:	4b07      	ldr	r3, [pc, #28]	; (800a9a8 <xTimerGenericCommand+0x98>)
 800a98c:	6818      	ldr	r0, [r3, #0]
 800a98e:	f107 0110 	add.w	r1, r7, #16
 800a992:	2300      	movs	r3, #0
 800a994:	683a      	ldr	r2, [r7, #0]
 800a996:	f7fe fd61 	bl	800945c <xQueueGenericSendFromISR>
 800a99a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3728      	adds	r7, #40	; 0x28
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}
 800a9a6:	bf00      	nop
 800a9a8:	240052fc 	.word	0x240052fc

0800a9ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b088      	sub	sp, #32
 800a9b0:	af02      	add	r7, sp, #8
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9b6:	4b22      	ldr	r3, [pc, #136]	; (800aa40 <prvProcessExpiredTimer+0x94>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	68db      	ldr	r3, [r3, #12]
 800a9bc:	68db      	ldr	r3, [r3, #12]
 800a9be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	3304      	adds	r3, #4
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f7fe f8cb 	bl	8008b60 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a9ca:	697b      	ldr	r3, [r7, #20]
 800a9cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9d0:	f003 0304 	and.w	r3, r3, #4
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d022      	beq.n	800aa1e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	699a      	ldr	r2, [r3, #24]
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	18d1      	adds	r1, r2, r3
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	683a      	ldr	r2, [r7, #0]
 800a9e4:	6978      	ldr	r0, [r7, #20]
 800a9e6:	f000 f8d1 	bl	800ab8c <prvInsertTimerInActiveList>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d01f      	beq.n	800aa30 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	9300      	str	r3, [sp, #0]
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	687a      	ldr	r2, [r7, #4]
 800a9f8:	2100      	movs	r1, #0
 800a9fa:	6978      	ldr	r0, [r7, #20]
 800a9fc:	f7ff ff88 	bl	800a910 <xTimerGenericCommand>
 800aa00:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800aa02:	693b      	ldr	r3, [r7, #16]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d113      	bne.n	800aa30 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800aa08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa0c:	f383 8811 	msr	BASEPRI, r3
 800aa10:	f3bf 8f6f 	isb	sy
 800aa14:	f3bf 8f4f 	dsb	sy
 800aa18:	60fb      	str	r3, [r7, #12]
}
 800aa1a:	bf00      	nop
 800aa1c:	e7fe      	b.n	800aa1c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa24:	f023 0301 	bic.w	r3, r3, #1
 800aa28:	b2da      	uxtb	r2, r3
 800aa2a:	697b      	ldr	r3, [r7, #20]
 800aa2c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aa30:	697b      	ldr	r3, [r7, #20]
 800aa32:	6a1b      	ldr	r3, [r3, #32]
 800aa34:	6978      	ldr	r0, [r7, #20]
 800aa36:	4798      	blx	r3
}
 800aa38:	bf00      	nop
 800aa3a:	3718      	adds	r7, #24
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}
 800aa40:	240052f4 	.word	0x240052f4

0800aa44 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b084      	sub	sp, #16
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aa4c:	f107 0308 	add.w	r3, r7, #8
 800aa50:	4618      	mov	r0, r3
 800aa52:	f000 f857 	bl	800ab04 <prvGetNextExpireTime>
 800aa56:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	4619      	mov	r1, r3
 800aa5c:	68f8      	ldr	r0, [r7, #12]
 800aa5e:	f000 f803 	bl	800aa68 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800aa62:	f000 f8d5 	bl	800ac10 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aa66:	e7f1      	b.n	800aa4c <prvTimerTask+0x8>

0800aa68 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b084      	sub	sp, #16
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800aa72:	f7ff fa39 	bl	8009ee8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aa76:	f107 0308 	add.w	r3, r7, #8
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f000 f866 	bl	800ab4c <prvSampleTimeNow>
 800aa80:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d130      	bne.n	800aaea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d10a      	bne.n	800aaa4 <prvProcessTimerOrBlockTask+0x3c>
 800aa8e:	687a      	ldr	r2, [r7, #4]
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	429a      	cmp	r2, r3
 800aa94:	d806      	bhi.n	800aaa4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800aa96:	f7ff fa35 	bl	8009f04 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800aa9a:	68f9      	ldr	r1, [r7, #12]
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f7ff ff85 	bl	800a9ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800aaa2:	e024      	b.n	800aaee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d008      	beq.n	800aabc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800aaaa:	4b13      	ldr	r3, [pc, #76]	; (800aaf8 <prvProcessTimerOrBlockTask+0x90>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d101      	bne.n	800aab8 <prvProcessTimerOrBlockTask+0x50>
 800aab4:	2301      	movs	r3, #1
 800aab6:	e000      	b.n	800aaba <prvProcessTimerOrBlockTask+0x52>
 800aab8:	2300      	movs	r3, #0
 800aaba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800aabc:	4b0f      	ldr	r3, [pc, #60]	; (800aafc <prvProcessTimerOrBlockTask+0x94>)
 800aabe:	6818      	ldr	r0, [r3, #0]
 800aac0:	687a      	ldr	r2, [r7, #4]
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	1ad3      	subs	r3, r2, r3
 800aac6:	683a      	ldr	r2, [r7, #0]
 800aac8:	4619      	mov	r1, r3
 800aaca:	f7fe ff7d 	bl	80099c8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800aace:	f7ff fa19 	bl	8009f04 <xTaskResumeAll>
 800aad2:	4603      	mov	r3, r0
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d10a      	bne.n	800aaee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800aad8:	4b09      	ldr	r3, [pc, #36]	; (800ab00 <prvProcessTimerOrBlockTask+0x98>)
 800aada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aade:	601a      	str	r2, [r3, #0]
 800aae0:	f3bf 8f4f 	dsb	sy
 800aae4:	f3bf 8f6f 	isb	sy
}
 800aae8:	e001      	b.n	800aaee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800aaea:	f7ff fa0b 	bl	8009f04 <xTaskResumeAll>
}
 800aaee:	bf00      	nop
 800aaf0:	3710      	adds	r7, #16
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}
 800aaf6:	bf00      	nop
 800aaf8:	240052f8 	.word	0x240052f8
 800aafc:	240052fc 	.word	0x240052fc
 800ab00:	e000ed04 	.word	0xe000ed04

0800ab04 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ab04:	b480      	push	{r7}
 800ab06:	b085      	sub	sp, #20
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ab0c:	4b0e      	ldr	r3, [pc, #56]	; (800ab48 <prvGetNextExpireTime+0x44>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d101      	bne.n	800ab1a <prvGetNextExpireTime+0x16>
 800ab16:	2201      	movs	r2, #1
 800ab18:	e000      	b.n	800ab1c <prvGetNextExpireTime+0x18>
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d105      	bne.n	800ab34 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ab28:	4b07      	ldr	r3, [pc, #28]	; (800ab48 <prvGetNextExpireTime+0x44>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	68db      	ldr	r3, [r3, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	60fb      	str	r3, [r7, #12]
 800ab32:	e001      	b.n	800ab38 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ab34:	2300      	movs	r3, #0
 800ab36:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ab38:	68fb      	ldr	r3, [r7, #12]
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3714      	adds	r7, #20
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab44:	4770      	bx	lr
 800ab46:	bf00      	nop
 800ab48:	240052f4 	.word	0x240052f4

0800ab4c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b084      	sub	sp, #16
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ab54:	f7ff fa74 	bl	800a040 <xTaskGetTickCount>
 800ab58:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ab5a:	4b0b      	ldr	r3, [pc, #44]	; (800ab88 <prvSampleTimeNow+0x3c>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	68fa      	ldr	r2, [r7, #12]
 800ab60:	429a      	cmp	r2, r3
 800ab62:	d205      	bcs.n	800ab70 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ab64:	f000 f936 	bl	800add4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	601a      	str	r2, [r3, #0]
 800ab6e:	e002      	b.n	800ab76 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2200      	movs	r2, #0
 800ab74:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ab76:	4a04      	ldr	r2, [pc, #16]	; (800ab88 <prvSampleTimeNow+0x3c>)
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3710      	adds	r7, #16
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}
 800ab86:	bf00      	nop
 800ab88:	24005304 	.word	0x24005304

0800ab8c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b086      	sub	sp, #24
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	60f8      	str	r0, [r7, #12]
 800ab94:	60b9      	str	r1, [r7, #8]
 800ab96:	607a      	str	r2, [r7, #4]
 800ab98:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	68ba      	ldr	r2, [r7, #8]
 800aba2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	68fa      	ldr	r2, [r7, #12]
 800aba8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800abaa:	68ba      	ldr	r2, [r7, #8]
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	429a      	cmp	r2, r3
 800abb0:	d812      	bhi.n	800abd8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abb2:	687a      	ldr	r2, [r7, #4]
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	1ad2      	subs	r2, r2, r3
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	699b      	ldr	r3, [r3, #24]
 800abbc:	429a      	cmp	r2, r3
 800abbe:	d302      	bcc.n	800abc6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800abc0:	2301      	movs	r3, #1
 800abc2:	617b      	str	r3, [r7, #20]
 800abc4:	e01b      	b.n	800abfe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800abc6:	4b10      	ldr	r3, [pc, #64]	; (800ac08 <prvInsertTimerInActiveList+0x7c>)
 800abc8:	681a      	ldr	r2, [r3, #0]
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	3304      	adds	r3, #4
 800abce:	4619      	mov	r1, r3
 800abd0:	4610      	mov	r0, r2
 800abd2:	f7fd ff8c 	bl	8008aee <vListInsert>
 800abd6:	e012      	b.n	800abfe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800abd8:	687a      	ldr	r2, [r7, #4]
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	429a      	cmp	r2, r3
 800abde:	d206      	bcs.n	800abee <prvInsertTimerInActiveList+0x62>
 800abe0:	68ba      	ldr	r2, [r7, #8]
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	429a      	cmp	r2, r3
 800abe6:	d302      	bcc.n	800abee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800abe8:	2301      	movs	r3, #1
 800abea:	617b      	str	r3, [r7, #20]
 800abec:	e007      	b.n	800abfe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800abee:	4b07      	ldr	r3, [pc, #28]	; (800ac0c <prvInsertTimerInActiveList+0x80>)
 800abf0:	681a      	ldr	r2, [r3, #0]
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	3304      	adds	r3, #4
 800abf6:	4619      	mov	r1, r3
 800abf8:	4610      	mov	r0, r2
 800abfa:	f7fd ff78 	bl	8008aee <vListInsert>
		}
	}

	return xProcessTimerNow;
 800abfe:	697b      	ldr	r3, [r7, #20]
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	3718      	adds	r7, #24
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}
 800ac08:	240052f8 	.word	0x240052f8
 800ac0c:	240052f4 	.word	0x240052f4

0800ac10 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b08e      	sub	sp, #56	; 0x38
 800ac14:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ac16:	e0ca      	b.n	800adae <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	da18      	bge.n	800ac50 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ac1e:	1d3b      	adds	r3, r7, #4
 800ac20:	3304      	adds	r3, #4
 800ac22:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ac24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d10a      	bne.n	800ac40 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ac2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac2e:	f383 8811 	msr	BASEPRI, r3
 800ac32:	f3bf 8f6f 	isb	sy
 800ac36:	f3bf 8f4f 	dsb	sy
 800ac3a:	61fb      	str	r3, [r7, #28]
}
 800ac3c:	bf00      	nop
 800ac3e:	e7fe      	b.n	800ac3e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ac40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac46:	6850      	ldr	r0, [r2, #4]
 800ac48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac4a:	6892      	ldr	r2, [r2, #8]
 800ac4c:	4611      	mov	r1, r2
 800ac4e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	f2c0 80ab 	blt.w	800adae <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ac5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac5e:	695b      	ldr	r3, [r3, #20]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d004      	beq.n	800ac6e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ac64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac66:	3304      	adds	r3, #4
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f7fd ff79 	bl	8008b60 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ac6e:	463b      	mov	r3, r7
 800ac70:	4618      	mov	r0, r3
 800ac72:	f7ff ff6b 	bl	800ab4c <prvSampleTimeNow>
 800ac76:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2b09      	cmp	r3, #9
 800ac7c:	f200 8096 	bhi.w	800adac <prvProcessReceivedCommands+0x19c>
 800ac80:	a201      	add	r2, pc, #4	; (adr r2, 800ac88 <prvProcessReceivedCommands+0x78>)
 800ac82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac86:	bf00      	nop
 800ac88:	0800acb1 	.word	0x0800acb1
 800ac8c:	0800acb1 	.word	0x0800acb1
 800ac90:	0800acb1 	.word	0x0800acb1
 800ac94:	0800ad25 	.word	0x0800ad25
 800ac98:	0800ad39 	.word	0x0800ad39
 800ac9c:	0800ad83 	.word	0x0800ad83
 800aca0:	0800acb1 	.word	0x0800acb1
 800aca4:	0800acb1 	.word	0x0800acb1
 800aca8:	0800ad25 	.word	0x0800ad25
 800acac:	0800ad39 	.word	0x0800ad39
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800acb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800acb6:	f043 0301 	orr.w	r3, r3, #1
 800acba:	b2da      	uxtb	r2, r3
 800acbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800acc2:	68ba      	ldr	r2, [r7, #8]
 800acc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acc6:	699b      	ldr	r3, [r3, #24]
 800acc8:	18d1      	adds	r1, r2, r3
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acd0:	f7ff ff5c 	bl	800ab8c <prvInsertTimerInActiveList>
 800acd4:	4603      	mov	r3, r0
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d069      	beq.n	800adae <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800acda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acdc:	6a1b      	ldr	r3, [r3, #32]
 800acde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ace0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ace2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ace4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ace8:	f003 0304 	and.w	r3, r3, #4
 800acec:	2b00      	cmp	r3, #0
 800acee:	d05e      	beq.n	800adae <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800acf0:	68ba      	ldr	r2, [r7, #8]
 800acf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf4:	699b      	ldr	r3, [r3, #24]
 800acf6:	441a      	add	r2, r3
 800acf8:	2300      	movs	r3, #0
 800acfa:	9300      	str	r3, [sp, #0]
 800acfc:	2300      	movs	r3, #0
 800acfe:	2100      	movs	r1, #0
 800ad00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad02:	f7ff fe05 	bl	800a910 <xTimerGenericCommand>
 800ad06:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ad08:	6a3b      	ldr	r3, [r7, #32]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d14f      	bne.n	800adae <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ad0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad12:	f383 8811 	msr	BASEPRI, r3
 800ad16:	f3bf 8f6f 	isb	sy
 800ad1a:	f3bf 8f4f 	dsb	sy
 800ad1e:	61bb      	str	r3, [r7, #24]
}
 800ad20:	bf00      	nop
 800ad22:	e7fe      	b.n	800ad22 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ad24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad2a:	f023 0301 	bic.w	r3, r3, #1
 800ad2e:	b2da      	uxtb	r2, r3
 800ad30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ad36:	e03a      	b.n	800adae <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ad38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad3e:	f043 0301 	orr.w	r3, r3, #1
 800ad42:	b2da      	uxtb	r2, r3
 800ad44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ad4a:	68ba      	ldr	r2, [r7, #8]
 800ad4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad4e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ad50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad52:	699b      	ldr	r3, [r3, #24]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d10a      	bne.n	800ad6e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ad58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad5c:	f383 8811 	msr	BASEPRI, r3
 800ad60:	f3bf 8f6f 	isb	sy
 800ad64:	f3bf 8f4f 	dsb	sy
 800ad68:	617b      	str	r3, [r7, #20]
}
 800ad6a:	bf00      	nop
 800ad6c:	e7fe      	b.n	800ad6c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ad6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad70:	699a      	ldr	r2, [r3, #24]
 800ad72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad74:	18d1      	adds	r1, r2, r3
 800ad76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad7c:	f7ff ff06 	bl	800ab8c <prvInsertTimerInActiveList>
					break;
 800ad80:	e015      	b.n	800adae <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ad82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad88:	f003 0302 	and.w	r3, r3, #2
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d103      	bne.n	800ad98 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ad90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad92:	f7fd fd3d 	bl	8008810 <vPortFree>
 800ad96:	e00a      	b.n	800adae <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ad98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad9e:	f023 0301 	bic.w	r3, r3, #1
 800ada2:	b2da      	uxtb	r2, r3
 800ada4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ada6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800adaa:	e000      	b.n	800adae <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800adac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800adae:	4b08      	ldr	r3, [pc, #32]	; (800add0 <prvProcessReceivedCommands+0x1c0>)
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	1d39      	adds	r1, r7, #4
 800adb4:	2200      	movs	r2, #0
 800adb6:	4618      	mov	r0, r3
 800adb8:	f7fe fbec 	bl	8009594 <xQueueReceive>
 800adbc:	4603      	mov	r3, r0
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	f47f af2a 	bne.w	800ac18 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800adc4:	bf00      	nop
 800adc6:	bf00      	nop
 800adc8:	3730      	adds	r7, #48	; 0x30
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}
 800adce:	bf00      	nop
 800add0:	240052fc 	.word	0x240052fc

0800add4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b088      	sub	sp, #32
 800add8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800adda:	e048      	b.n	800ae6e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800addc:	4b2d      	ldr	r3, [pc, #180]	; (800ae94 <prvSwitchTimerLists+0xc0>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	68db      	ldr	r3, [r3, #12]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ade6:	4b2b      	ldr	r3, [pc, #172]	; (800ae94 <prvSwitchTimerLists+0xc0>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	68db      	ldr	r3, [r3, #12]
 800adec:	68db      	ldr	r3, [r3, #12]
 800adee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	3304      	adds	r3, #4
 800adf4:	4618      	mov	r0, r3
 800adf6:	f7fd feb3 	bl	8008b60 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	6a1b      	ldr	r3, [r3, #32]
 800adfe:	68f8      	ldr	r0, [r7, #12]
 800ae00:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae08:	f003 0304 	and.w	r3, r3, #4
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d02e      	beq.n	800ae6e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	699b      	ldr	r3, [r3, #24]
 800ae14:	693a      	ldr	r2, [r7, #16]
 800ae16:	4413      	add	r3, r2
 800ae18:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ae1a:	68ba      	ldr	r2, [r7, #8]
 800ae1c:	693b      	ldr	r3, [r7, #16]
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	d90e      	bls.n	800ae40 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	68ba      	ldr	r2, [r7, #8]
 800ae26:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	68fa      	ldr	r2, [r7, #12]
 800ae2c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ae2e:	4b19      	ldr	r3, [pc, #100]	; (800ae94 <prvSwitchTimerLists+0xc0>)
 800ae30:	681a      	ldr	r2, [r3, #0]
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	3304      	adds	r3, #4
 800ae36:	4619      	mov	r1, r3
 800ae38:	4610      	mov	r0, r2
 800ae3a:	f7fd fe58 	bl	8008aee <vListInsert>
 800ae3e:	e016      	b.n	800ae6e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ae40:	2300      	movs	r3, #0
 800ae42:	9300      	str	r3, [sp, #0]
 800ae44:	2300      	movs	r3, #0
 800ae46:	693a      	ldr	r2, [r7, #16]
 800ae48:	2100      	movs	r1, #0
 800ae4a:	68f8      	ldr	r0, [r7, #12]
 800ae4c:	f7ff fd60 	bl	800a910 <xTimerGenericCommand>
 800ae50:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d10a      	bne.n	800ae6e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ae58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae5c:	f383 8811 	msr	BASEPRI, r3
 800ae60:	f3bf 8f6f 	isb	sy
 800ae64:	f3bf 8f4f 	dsb	sy
 800ae68:	603b      	str	r3, [r7, #0]
}
 800ae6a:	bf00      	nop
 800ae6c:	e7fe      	b.n	800ae6c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ae6e:	4b09      	ldr	r3, [pc, #36]	; (800ae94 <prvSwitchTimerLists+0xc0>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d1b1      	bne.n	800addc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ae78:	4b06      	ldr	r3, [pc, #24]	; (800ae94 <prvSwitchTimerLists+0xc0>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ae7e:	4b06      	ldr	r3, [pc, #24]	; (800ae98 <prvSwitchTimerLists+0xc4>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	4a04      	ldr	r2, [pc, #16]	; (800ae94 <prvSwitchTimerLists+0xc0>)
 800ae84:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ae86:	4a04      	ldr	r2, [pc, #16]	; (800ae98 <prvSwitchTimerLists+0xc4>)
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	6013      	str	r3, [r2, #0]
}
 800ae8c:	bf00      	nop
 800ae8e:	3718      	adds	r7, #24
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}
 800ae94:	240052f4 	.word	0x240052f4
 800ae98:	240052f8 	.word	0x240052f8

0800ae9c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b082      	sub	sp, #8
 800aea0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800aea2:	f7fd ffb7 	bl	8008e14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800aea6:	4b15      	ldr	r3, [pc, #84]	; (800aefc <prvCheckForValidListAndQueue+0x60>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d120      	bne.n	800aef0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800aeae:	4814      	ldr	r0, [pc, #80]	; (800af00 <prvCheckForValidListAndQueue+0x64>)
 800aeb0:	f7fd fdcc 	bl	8008a4c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800aeb4:	4813      	ldr	r0, [pc, #76]	; (800af04 <prvCheckForValidListAndQueue+0x68>)
 800aeb6:	f7fd fdc9 	bl	8008a4c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800aeba:	4b13      	ldr	r3, [pc, #76]	; (800af08 <prvCheckForValidListAndQueue+0x6c>)
 800aebc:	4a10      	ldr	r2, [pc, #64]	; (800af00 <prvCheckForValidListAndQueue+0x64>)
 800aebe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800aec0:	4b12      	ldr	r3, [pc, #72]	; (800af0c <prvCheckForValidListAndQueue+0x70>)
 800aec2:	4a10      	ldr	r2, [pc, #64]	; (800af04 <prvCheckForValidListAndQueue+0x68>)
 800aec4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800aec6:	2300      	movs	r3, #0
 800aec8:	9300      	str	r3, [sp, #0]
 800aeca:	4b11      	ldr	r3, [pc, #68]	; (800af10 <prvCheckForValidListAndQueue+0x74>)
 800aecc:	4a11      	ldr	r2, [pc, #68]	; (800af14 <prvCheckForValidListAndQueue+0x78>)
 800aece:	2110      	movs	r1, #16
 800aed0:	200a      	movs	r0, #10
 800aed2:	f7fe f929 	bl	8009128 <xQueueGenericCreateStatic>
 800aed6:	4603      	mov	r3, r0
 800aed8:	4a08      	ldr	r2, [pc, #32]	; (800aefc <prvCheckForValidListAndQueue+0x60>)
 800aeda:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800aedc:	4b07      	ldr	r3, [pc, #28]	; (800aefc <prvCheckForValidListAndQueue+0x60>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d005      	beq.n	800aef0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800aee4:	4b05      	ldr	r3, [pc, #20]	; (800aefc <prvCheckForValidListAndQueue+0x60>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	490b      	ldr	r1, [pc, #44]	; (800af18 <prvCheckForValidListAndQueue+0x7c>)
 800aeea:	4618      	mov	r0, r3
 800aeec:	f7fe fd42 	bl	8009974 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aef0:	f7fd ffc0 	bl	8008e74 <vPortExitCritical>
}
 800aef4:	bf00      	nop
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}
 800aefa:	bf00      	nop
 800aefc:	240052fc 	.word	0x240052fc
 800af00:	240052cc 	.word	0x240052cc
 800af04:	240052e0 	.word	0x240052e0
 800af08:	240052f4 	.word	0x240052f4
 800af0c:	240052f8 	.word	0x240052f8
 800af10:	240053a8 	.word	0x240053a8
 800af14:	24005308 	.word	0x24005308
 800af18:	0800f614 	.word	0x0800f614

0800af1c <__cvt>:
 800af1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af1e:	ed2d 8b02 	vpush	{d8}
 800af22:	eeb0 8b40 	vmov.f64	d8, d0
 800af26:	b085      	sub	sp, #20
 800af28:	4617      	mov	r7, r2
 800af2a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800af2c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800af2e:	ee18 2a90 	vmov	r2, s17
 800af32:	f025 0520 	bic.w	r5, r5, #32
 800af36:	2a00      	cmp	r2, #0
 800af38:	bfb6      	itet	lt
 800af3a:	222d      	movlt	r2, #45	; 0x2d
 800af3c:	2200      	movge	r2, #0
 800af3e:	eeb1 8b40 	vneglt.f64	d8, d0
 800af42:	2d46      	cmp	r5, #70	; 0x46
 800af44:	460c      	mov	r4, r1
 800af46:	701a      	strb	r2, [r3, #0]
 800af48:	d004      	beq.n	800af54 <__cvt+0x38>
 800af4a:	2d45      	cmp	r5, #69	; 0x45
 800af4c:	d100      	bne.n	800af50 <__cvt+0x34>
 800af4e:	3401      	adds	r4, #1
 800af50:	2102      	movs	r1, #2
 800af52:	e000      	b.n	800af56 <__cvt+0x3a>
 800af54:	2103      	movs	r1, #3
 800af56:	ab03      	add	r3, sp, #12
 800af58:	9301      	str	r3, [sp, #4]
 800af5a:	ab02      	add	r3, sp, #8
 800af5c:	9300      	str	r3, [sp, #0]
 800af5e:	4622      	mov	r2, r4
 800af60:	4633      	mov	r3, r6
 800af62:	eeb0 0b48 	vmov.f64	d0, d8
 800af66:	f001 f8d3 	bl	800c110 <_dtoa_r>
 800af6a:	2d47      	cmp	r5, #71	; 0x47
 800af6c:	d101      	bne.n	800af72 <__cvt+0x56>
 800af6e:	07fb      	lsls	r3, r7, #31
 800af70:	d51a      	bpl.n	800afa8 <__cvt+0x8c>
 800af72:	2d46      	cmp	r5, #70	; 0x46
 800af74:	eb00 0204 	add.w	r2, r0, r4
 800af78:	d10c      	bne.n	800af94 <__cvt+0x78>
 800af7a:	7803      	ldrb	r3, [r0, #0]
 800af7c:	2b30      	cmp	r3, #48	; 0x30
 800af7e:	d107      	bne.n	800af90 <__cvt+0x74>
 800af80:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800af84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af88:	bf1c      	itt	ne
 800af8a:	f1c4 0401 	rsbne	r4, r4, #1
 800af8e:	6034      	strne	r4, [r6, #0]
 800af90:	6833      	ldr	r3, [r6, #0]
 800af92:	441a      	add	r2, r3
 800af94:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800af98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af9c:	bf08      	it	eq
 800af9e:	9203      	streq	r2, [sp, #12]
 800afa0:	2130      	movs	r1, #48	; 0x30
 800afa2:	9b03      	ldr	r3, [sp, #12]
 800afa4:	4293      	cmp	r3, r2
 800afa6:	d307      	bcc.n	800afb8 <__cvt+0x9c>
 800afa8:	9b03      	ldr	r3, [sp, #12]
 800afaa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800afac:	1a1b      	subs	r3, r3, r0
 800afae:	6013      	str	r3, [r2, #0]
 800afb0:	b005      	add	sp, #20
 800afb2:	ecbd 8b02 	vpop	{d8}
 800afb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afb8:	1c5c      	adds	r4, r3, #1
 800afba:	9403      	str	r4, [sp, #12]
 800afbc:	7019      	strb	r1, [r3, #0]
 800afbe:	e7f0      	b.n	800afa2 <__cvt+0x86>

0800afc0 <__exponent>:
 800afc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800afc2:	4603      	mov	r3, r0
 800afc4:	2900      	cmp	r1, #0
 800afc6:	bfb8      	it	lt
 800afc8:	4249      	neglt	r1, r1
 800afca:	f803 2b02 	strb.w	r2, [r3], #2
 800afce:	bfb4      	ite	lt
 800afd0:	222d      	movlt	r2, #45	; 0x2d
 800afd2:	222b      	movge	r2, #43	; 0x2b
 800afd4:	2909      	cmp	r1, #9
 800afd6:	7042      	strb	r2, [r0, #1]
 800afd8:	dd2a      	ble.n	800b030 <__exponent+0x70>
 800afda:	f10d 0207 	add.w	r2, sp, #7
 800afde:	4617      	mov	r7, r2
 800afe0:	260a      	movs	r6, #10
 800afe2:	4694      	mov	ip, r2
 800afe4:	fb91 f5f6 	sdiv	r5, r1, r6
 800afe8:	fb06 1415 	mls	r4, r6, r5, r1
 800afec:	3430      	adds	r4, #48	; 0x30
 800afee:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800aff2:	460c      	mov	r4, r1
 800aff4:	2c63      	cmp	r4, #99	; 0x63
 800aff6:	f102 32ff 	add.w	r2, r2, #4294967295
 800affa:	4629      	mov	r1, r5
 800affc:	dcf1      	bgt.n	800afe2 <__exponent+0x22>
 800affe:	3130      	adds	r1, #48	; 0x30
 800b000:	f1ac 0402 	sub.w	r4, ip, #2
 800b004:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b008:	1c41      	adds	r1, r0, #1
 800b00a:	4622      	mov	r2, r4
 800b00c:	42ba      	cmp	r2, r7
 800b00e:	d30a      	bcc.n	800b026 <__exponent+0x66>
 800b010:	f10d 0209 	add.w	r2, sp, #9
 800b014:	eba2 020c 	sub.w	r2, r2, ip
 800b018:	42bc      	cmp	r4, r7
 800b01a:	bf88      	it	hi
 800b01c:	2200      	movhi	r2, #0
 800b01e:	4413      	add	r3, r2
 800b020:	1a18      	subs	r0, r3, r0
 800b022:	b003      	add	sp, #12
 800b024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b026:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b02a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b02e:	e7ed      	b.n	800b00c <__exponent+0x4c>
 800b030:	2330      	movs	r3, #48	; 0x30
 800b032:	3130      	adds	r1, #48	; 0x30
 800b034:	7083      	strb	r3, [r0, #2]
 800b036:	70c1      	strb	r1, [r0, #3]
 800b038:	1d03      	adds	r3, r0, #4
 800b03a:	e7f1      	b.n	800b020 <__exponent+0x60>
 800b03c:	0000      	movs	r0, r0
	...

0800b040 <_printf_float>:
 800b040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b044:	b08b      	sub	sp, #44	; 0x2c
 800b046:	460c      	mov	r4, r1
 800b048:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800b04c:	4616      	mov	r6, r2
 800b04e:	461f      	mov	r7, r3
 800b050:	4605      	mov	r5, r0
 800b052:	f000 fef3 	bl	800be3c <_localeconv_r>
 800b056:	f8d0 b000 	ldr.w	fp, [r0]
 800b05a:	4658      	mov	r0, fp
 800b05c:	f7f5 f990 	bl	8000380 <strlen>
 800b060:	2300      	movs	r3, #0
 800b062:	9308      	str	r3, [sp, #32]
 800b064:	f8d8 3000 	ldr.w	r3, [r8]
 800b068:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b06c:	6822      	ldr	r2, [r4, #0]
 800b06e:	3307      	adds	r3, #7
 800b070:	f023 0307 	bic.w	r3, r3, #7
 800b074:	f103 0108 	add.w	r1, r3, #8
 800b078:	f8c8 1000 	str.w	r1, [r8]
 800b07c:	ed93 0b00 	vldr	d0, [r3]
 800b080:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800b2e0 <_printf_float+0x2a0>
 800b084:	eeb0 7bc0 	vabs.f64	d7, d0
 800b088:	eeb4 7b46 	vcmp.f64	d7, d6
 800b08c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b090:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800b094:	4682      	mov	sl, r0
 800b096:	dd24      	ble.n	800b0e2 <_printf_float+0xa2>
 800b098:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b09c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0a0:	d502      	bpl.n	800b0a8 <_printf_float+0x68>
 800b0a2:	232d      	movs	r3, #45	; 0x2d
 800b0a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0a8:	498f      	ldr	r1, [pc, #572]	; (800b2e8 <_printf_float+0x2a8>)
 800b0aa:	4b90      	ldr	r3, [pc, #576]	; (800b2ec <_printf_float+0x2ac>)
 800b0ac:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800b0b0:	bf94      	ite	ls
 800b0b2:	4688      	movls	r8, r1
 800b0b4:	4698      	movhi	r8, r3
 800b0b6:	2303      	movs	r3, #3
 800b0b8:	6123      	str	r3, [r4, #16]
 800b0ba:	f022 0204 	bic.w	r2, r2, #4
 800b0be:	2300      	movs	r3, #0
 800b0c0:	6022      	str	r2, [r4, #0]
 800b0c2:	9304      	str	r3, [sp, #16]
 800b0c4:	9700      	str	r7, [sp, #0]
 800b0c6:	4633      	mov	r3, r6
 800b0c8:	aa09      	add	r2, sp, #36	; 0x24
 800b0ca:	4621      	mov	r1, r4
 800b0cc:	4628      	mov	r0, r5
 800b0ce:	f000 f9d1 	bl	800b474 <_printf_common>
 800b0d2:	3001      	adds	r0, #1
 800b0d4:	f040 808a 	bne.w	800b1ec <_printf_float+0x1ac>
 800b0d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b0dc:	b00b      	add	sp, #44	; 0x2c
 800b0de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0e2:	eeb4 0b40 	vcmp.f64	d0, d0
 800b0e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0ea:	d709      	bvc.n	800b100 <_printf_float+0xc0>
 800b0ec:	ee10 3a90 	vmov	r3, s1
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	bfbc      	itt	lt
 800b0f4:	232d      	movlt	r3, #45	; 0x2d
 800b0f6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b0fa:	497d      	ldr	r1, [pc, #500]	; (800b2f0 <_printf_float+0x2b0>)
 800b0fc:	4b7d      	ldr	r3, [pc, #500]	; (800b2f4 <_printf_float+0x2b4>)
 800b0fe:	e7d5      	b.n	800b0ac <_printf_float+0x6c>
 800b100:	6863      	ldr	r3, [r4, #4]
 800b102:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800b106:	9104      	str	r1, [sp, #16]
 800b108:	1c59      	adds	r1, r3, #1
 800b10a:	d13c      	bne.n	800b186 <_printf_float+0x146>
 800b10c:	2306      	movs	r3, #6
 800b10e:	6063      	str	r3, [r4, #4]
 800b110:	2300      	movs	r3, #0
 800b112:	9303      	str	r3, [sp, #12]
 800b114:	ab08      	add	r3, sp, #32
 800b116:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800b11a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b11e:	ab07      	add	r3, sp, #28
 800b120:	6861      	ldr	r1, [r4, #4]
 800b122:	9300      	str	r3, [sp, #0]
 800b124:	6022      	str	r2, [r4, #0]
 800b126:	f10d 031b 	add.w	r3, sp, #27
 800b12a:	4628      	mov	r0, r5
 800b12c:	f7ff fef6 	bl	800af1c <__cvt>
 800b130:	9b04      	ldr	r3, [sp, #16]
 800b132:	9907      	ldr	r1, [sp, #28]
 800b134:	2b47      	cmp	r3, #71	; 0x47
 800b136:	4680      	mov	r8, r0
 800b138:	d108      	bne.n	800b14c <_printf_float+0x10c>
 800b13a:	1cc8      	adds	r0, r1, #3
 800b13c:	db02      	blt.n	800b144 <_printf_float+0x104>
 800b13e:	6863      	ldr	r3, [r4, #4]
 800b140:	4299      	cmp	r1, r3
 800b142:	dd41      	ble.n	800b1c8 <_printf_float+0x188>
 800b144:	f1a9 0902 	sub.w	r9, r9, #2
 800b148:	fa5f f989 	uxtb.w	r9, r9
 800b14c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b150:	d820      	bhi.n	800b194 <_printf_float+0x154>
 800b152:	3901      	subs	r1, #1
 800b154:	464a      	mov	r2, r9
 800b156:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b15a:	9107      	str	r1, [sp, #28]
 800b15c:	f7ff ff30 	bl	800afc0 <__exponent>
 800b160:	9a08      	ldr	r2, [sp, #32]
 800b162:	9004      	str	r0, [sp, #16]
 800b164:	1813      	adds	r3, r2, r0
 800b166:	2a01      	cmp	r2, #1
 800b168:	6123      	str	r3, [r4, #16]
 800b16a:	dc02      	bgt.n	800b172 <_printf_float+0x132>
 800b16c:	6822      	ldr	r2, [r4, #0]
 800b16e:	07d2      	lsls	r2, r2, #31
 800b170:	d501      	bpl.n	800b176 <_printf_float+0x136>
 800b172:	3301      	adds	r3, #1
 800b174:	6123      	str	r3, [r4, #16]
 800b176:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d0a2      	beq.n	800b0c4 <_printf_float+0x84>
 800b17e:	232d      	movs	r3, #45	; 0x2d
 800b180:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b184:	e79e      	b.n	800b0c4 <_printf_float+0x84>
 800b186:	9904      	ldr	r1, [sp, #16]
 800b188:	2947      	cmp	r1, #71	; 0x47
 800b18a:	d1c1      	bne.n	800b110 <_printf_float+0xd0>
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d1bf      	bne.n	800b110 <_printf_float+0xd0>
 800b190:	2301      	movs	r3, #1
 800b192:	e7bc      	b.n	800b10e <_printf_float+0xce>
 800b194:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800b198:	d118      	bne.n	800b1cc <_printf_float+0x18c>
 800b19a:	2900      	cmp	r1, #0
 800b19c:	6863      	ldr	r3, [r4, #4]
 800b19e:	dd0b      	ble.n	800b1b8 <_printf_float+0x178>
 800b1a0:	6121      	str	r1, [r4, #16]
 800b1a2:	b913      	cbnz	r3, 800b1aa <_printf_float+0x16a>
 800b1a4:	6822      	ldr	r2, [r4, #0]
 800b1a6:	07d0      	lsls	r0, r2, #31
 800b1a8:	d502      	bpl.n	800b1b0 <_printf_float+0x170>
 800b1aa:	3301      	adds	r3, #1
 800b1ac:	440b      	add	r3, r1
 800b1ae:	6123      	str	r3, [r4, #16]
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	65a1      	str	r1, [r4, #88]	; 0x58
 800b1b4:	9304      	str	r3, [sp, #16]
 800b1b6:	e7de      	b.n	800b176 <_printf_float+0x136>
 800b1b8:	b913      	cbnz	r3, 800b1c0 <_printf_float+0x180>
 800b1ba:	6822      	ldr	r2, [r4, #0]
 800b1bc:	07d2      	lsls	r2, r2, #31
 800b1be:	d501      	bpl.n	800b1c4 <_printf_float+0x184>
 800b1c0:	3302      	adds	r3, #2
 800b1c2:	e7f4      	b.n	800b1ae <_printf_float+0x16e>
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	e7f2      	b.n	800b1ae <_printf_float+0x16e>
 800b1c8:	f04f 0967 	mov.w	r9, #103	; 0x67
 800b1cc:	9b08      	ldr	r3, [sp, #32]
 800b1ce:	4299      	cmp	r1, r3
 800b1d0:	db05      	blt.n	800b1de <_printf_float+0x19e>
 800b1d2:	6823      	ldr	r3, [r4, #0]
 800b1d4:	6121      	str	r1, [r4, #16]
 800b1d6:	07d8      	lsls	r0, r3, #31
 800b1d8:	d5ea      	bpl.n	800b1b0 <_printf_float+0x170>
 800b1da:	1c4b      	adds	r3, r1, #1
 800b1dc:	e7e7      	b.n	800b1ae <_printf_float+0x16e>
 800b1de:	2900      	cmp	r1, #0
 800b1e0:	bfd4      	ite	le
 800b1e2:	f1c1 0202 	rsble	r2, r1, #2
 800b1e6:	2201      	movgt	r2, #1
 800b1e8:	4413      	add	r3, r2
 800b1ea:	e7e0      	b.n	800b1ae <_printf_float+0x16e>
 800b1ec:	6823      	ldr	r3, [r4, #0]
 800b1ee:	055a      	lsls	r2, r3, #21
 800b1f0:	d407      	bmi.n	800b202 <_printf_float+0x1c2>
 800b1f2:	6923      	ldr	r3, [r4, #16]
 800b1f4:	4642      	mov	r2, r8
 800b1f6:	4631      	mov	r1, r6
 800b1f8:	4628      	mov	r0, r5
 800b1fa:	47b8      	blx	r7
 800b1fc:	3001      	adds	r0, #1
 800b1fe:	d12a      	bne.n	800b256 <_printf_float+0x216>
 800b200:	e76a      	b.n	800b0d8 <_printf_float+0x98>
 800b202:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b206:	f240 80e0 	bls.w	800b3ca <_printf_float+0x38a>
 800b20a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800b20e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b216:	d133      	bne.n	800b280 <_printf_float+0x240>
 800b218:	4a37      	ldr	r2, [pc, #220]	; (800b2f8 <_printf_float+0x2b8>)
 800b21a:	2301      	movs	r3, #1
 800b21c:	4631      	mov	r1, r6
 800b21e:	4628      	mov	r0, r5
 800b220:	47b8      	blx	r7
 800b222:	3001      	adds	r0, #1
 800b224:	f43f af58 	beq.w	800b0d8 <_printf_float+0x98>
 800b228:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b22c:	429a      	cmp	r2, r3
 800b22e:	db02      	blt.n	800b236 <_printf_float+0x1f6>
 800b230:	6823      	ldr	r3, [r4, #0]
 800b232:	07d8      	lsls	r0, r3, #31
 800b234:	d50f      	bpl.n	800b256 <_printf_float+0x216>
 800b236:	4653      	mov	r3, sl
 800b238:	465a      	mov	r2, fp
 800b23a:	4631      	mov	r1, r6
 800b23c:	4628      	mov	r0, r5
 800b23e:	47b8      	blx	r7
 800b240:	3001      	adds	r0, #1
 800b242:	f43f af49 	beq.w	800b0d8 <_printf_float+0x98>
 800b246:	f04f 0800 	mov.w	r8, #0
 800b24a:	f104 091a 	add.w	r9, r4, #26
 800b24e:	9b08      	ldr	r3, [sp, #32]
 800b250:	3b01      	subs	r3, #1
 800b252:	4543      	cmp	r3, r8
 800b254:	dc09      	bgt.n	800b26a <_printf_float+0x22a>
 800b256:	6823      	ldr	r3, [r4, #0]
 800b258:	079b      	lsls	r3, r3, #30
 800b25a:	f100 8106 	bmi.w	800b46a <_printf_float+0x42a>
 800b25e:	68e0      	ldr	r0, [r4, #12]
 800b260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b262:	4298      	cmp	r0, r3
 800b264:	bfb8      	it	lt
 800b266:	4618      	movlt	r0, r3
 800b268:	e738      	b.n	800b0dc <_printf_float+0x9c>
 800b26a:	2301      	movs	r3, #1
 800b26c:	464a      	mov	r2, r9
 800b26e:	4631      	mov	r1, r6
 800b270:	4628      	mov	r0, r5
 800b272:	47b8      	blx	r7
 800b274:	3001      	adds	r0, #1
 800b276:	f43f af2f 	beq.w	800b0d8 <_printf_float+0x98>
 800b27a:	f108 0801 	add.w	r8, r8, #1
 800b27e:	e7e6      	b.n	800b24e <_printf_float+0x20e>
 800b280:	9b07      	ldr	r3, [sp, #28]
 800b282:	2b00      	cmp	r3, #0
 800b284:	dc3a      	bgt.n	800b2fc <_printf_float+0x2bc>
 800b286:	4a1c      	ldr	r2, [pc, #112]	; (800b2f8 <_printf_float+0x2b8>)
 800b288:	2301      	movs	r3, #1
 800b28a:	4631      	mov	r1, r6
 800b28c:	4628      	mov	r0, r5
 800b28e:	47b8      	blx	r7
 800b290:	3001      	adds	r0, #1
 800b292:	f43f af21 	beq.w	800b0d8 <_printf_float+0x98>
 800b296:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800b29a:	4313      	orrs	r3, r2
 800b29c:	d102      	bne.n	800b2a4 <_printf_float+0x264>
 800b29e:	6823      	ldr	r3, [r4, #0]
 800b2a0:	07d9      	lsls	r1, r3, #31
 800b2a2:	d5d8      	bpl.n	800b256 <_printf_float+0x216>
 800b2a4:	4653      	mov	r3, sl
 800b2a6:	465a      	mov	r2, fp
 800b2a8:	4631      	mov	r1, r6
 800b2aa:	4628      	mov	r0, r5
 800b2ac:	47b8      	blx	r7
 800b2ae:	3001      	adds	r0, #1
 800b2b0:	f43f af12 	beq.w	800b0d8 <_printf_float+0x98>
 800b2b4:	f04f 0900 	mov.w	r9, #0
 800b2b8:	f104 0a1a 	add.w	sl, r4, #26
 800b2bc:	9b07      	ldr	r3, [sp, #28]
 800b2be:	425b      	negs	r3, r3
 800b2c0:	454b      	cmp	r3, r9
 800b2c2:	dc01      	bgt.n	800b2c8 <_printf_float+0x288>
 800b2c4:	9b08      	ldr	r3, [sp, #32]
 800b2c6:	e795      	b.n	800b1f4 <_printf_float+0x1b4>
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	4652      	mov	r2, sl
 800b2cc:	4631      	mov	r1, r6
 800b2ce:	4628      	mov	r0, r5
 800b2d0:	47b8      	blx	r7
 800b2d2:	3001      	adds	r0, #1
 800b2d4:	f43f af00 	beq.w	800b0d8 <_printf_float+0x98>
 800b2d8:	f109 0901 	add.w	r9, r9, #1
 800b2dc:	e7ee      	b.n	800b2bc <_printf_float+0x27c>
 800b2de:	bf00      	nop
 800b2e0:	ffffffff 	.word	0xffffffff
 800b2e4:	7fefffff 	.word	0x7fefffff
 800b2e8:	0800f69c 	.word	0x0800f69c
 800b2ec:	0800f6a0 	.word	0x0800f6a0
 800b2f0:	0800f6a4 	.word	0x0800f6a4
 800b2f4:	0800f6a8 	.word	0x0800f6a8
 800b2f8:	0800f6ac 	.word	0x0800f6ac
 800b2fc:	9a08      	ldr	r2, [sp, #32]
 800b2fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b300:	429a      	cmp	r2, r3
 800b302:	bfa8      	it	ge
 800b304:	461a      	movge	r2, r3
 800b306:	2a00      	cmp	r2, #0
 800b308:	4691      	mov	r9, r2
 800b30a:	dc38      	bgt.n	800b37e <_printf_float+0x33e>
 800b30c:	2300      	movs	r3, #0
 800b30e:	9305      	str	r3, [sp, #20]
 800b310:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b314:	f104 021a 	add.w	r2, r4, #26
 800b318:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b31a:	9905      	ldr	r1, [sp, #20]
 800b31c:	9304      	str	r3, [sp, #16]
 800b31e:	eba3 0309 	sub.w	r3, r3, r9
 800b322:	428b      	cmp	r3, r1
 800b324:	dc33      	bgt.n	800b38e <_printf_float+0x34e>
 800b326:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b32a:	429a      	cmp	r2, r3
 800b32c:	db3c      	blt.n	800b3a8 <_printf_float+0x368>
 800b32e:	6823      	ldr	r3, [r4, #0]
 800b330:	07da      	lsls	r2, r3, #31
 800b332:	d439      	bmi.n	800b3a8 <_printf_float+0x368>
 800b334:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800b338:	eba2 0903 	sub.w	r9, r2, r3
 800b33c:	9b04      	ldr	r3, [sp, #16]
 800b33e:	1ad2      	subs	r2, r2, r3
 800b340:	4591      	cmp	r9, r2
 800b342:	bfa8      	it	ge
 800b344:	4691      	movge	r9, r2
 800b346:	f1b9 0f00 	cmp.w	r9, #0
 800b34a:	dc35      	bgt.n	800b3b8 <_printf_float+0x378>
 800b34c:	f04f 0800 	mov.w	r8, #0
 800b350:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b354:	f104 0a1a 	add.w	sl, r4, #26
 800b358:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b35c:	1a9b      	subs	r3, r3, r2
 800b35e:	eba3 0309 	sub.w	r3, r3, r9
 800b362:	4543      	cmp	r3, r8
 800b364:	f77f af77 	ble.w	800b256 <_printf_float+0x216>
 800b368:	2301      	movs	r3, #1
 800b36a:	4652      	mov	r2, sl
 800b36c:	4631      	mov	r1, r6
 800b36e:	4628      	mov	r0, r5
 800b370:	47b8      	blx	r7
 800b372:	3001      	adds	r0, #1
 800b374:	f43f aeb0 	beq.w	800b0d8 <_printf_float+0x98>
 800b378:	f108 0801 	add.w	r8, r8, #1
 800b37c:	e7ec      	b.n	800b358 <_printf_float+0x318>
 800b37e:	4613      	mov	r3, r2
 800b380:	4631      	mov	r1, r6
 800b382:	4642      	mov	r2, r8
 800b384:	4628      	mov	r0, r5
 800b386:	47b8      	blx	r7
 800b388:	3001      	adds	r0, #1
 800b38a:	d1bf      	bne.n	800b30c <_printf_float+0x2cc>
 800b38c:	e6a4      	b.n	800b0d8 <_printf_float+0x98>
 800b38e:	2301      	movs	r3, #1
 800b390:	4631      	mov	r1, r6
 800b392:	4628      	mov	r0, r5
 800b394:	9204      	str	r2, [sp, #16]
 800b396:	47b8      	blx	r7
 800b398:	3001      	adds	r0, #1
 800b39a:	f43f ae9d 	beq.w	800b0d8 <_printf_float+0x98>
 800b39e:	9b05      	ldr	r3, [sp, #20]
 800b3a0:	9a04      	ldr	r2, [sp, #16]
 800b3a2:	3301      	adds	r3, #1
 800b3a4:	9305      	str	r3, [sp, #20]
 800b3a6:	e7b7      	b.n	800b318 <_printf_float+0x2d8>
 800b3a8:	4653      	mov	r3, sl
 800b3aa:	465a      	mov	r2, fp
 800b3ac:	4631      	mov	r1, r6
 800b3ae:	4628      	mov	r0, r5
 800b3b0:	47b8      	blx	r7
 800b3b2:	3001      	adds	r0, #1
 800b3b4:	d1be      	bne.n	800b334 <_printf_float+0x2f4>
 800b3b6:	e68f      	b.n	800b0d8 <_printf_float+0x98>
 800b3b8:	9a04      	ldr	r2, [sp, #16]
 800b3ba:	464b      	mov	r3, r9
 800b3bc:	4442      	add	r2, r8
 800b3be:	4631      	mov	r1, r6
 800b3c0:	4628      	mov	r0, r5
 800b3c2:	47b8      	blx	r7
 800b3c4:	3001      	adds	r0, #1
 800b3c6:	d1c1      	bne.n	800b34c <_printf_float+0x30c>
 800b3c8:	e686      	b.n	800b0d8 <_printf_float+0x98>
 800b3ca:	9a08      	ldr	r2, [sp, #32]
 800b3cc:	2a01      	cmp	r2, #1
 800b3ce:	dc01      	bgt.n	800b3d4 <_printf_float+0x394>
 800b3d0:	07db      	lsls	r3, r3, #31
 800b3d2:	d537      	bpl.n	800b444 <_printf_float+0x404>
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	4642      	mov	r2, r8
 800b3d8:	4631      	mov	r1, r6
 800b3da:	4628      	mov	r0, r5
 800b3dc:	47b8      	blx	r7
 800b3de:	3001      	adds	r0, #1
 800b3e0:	f43f ae7a 	beq.w	800b0d8 <_printf_float+0x98>
 800b3e4:	4653      	mov	r3, sl
 800b3e6:	465a      	mov	r2, fp
 800b3e8:	4631      	mov	r1, r6
 800b3ea:	4628      	mov	r0, r5
 800b3ec:	47b8      	blx	r7
 800b3ee:	3001      	adds	r0, #1
 800b3f0:	f43f ae72 	beq.w	800b0d8 <_printf_float+0x98>
 800b3f4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800b3f8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b3fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b400:	9b08      	ldr	r3, [sp, #32]
 800b402:	d01a      	beq.n	800b43a <_printf_float+0x3fa>
 800b404:	3b01      	subs	r3, #1
 800b406:	f108 0201 	add.w	r2, r8, #1
 800b40a:	4631      	mov	r1, r6
 800b40c:	4628      	mov	r0, r5
 800b40e:	47b8      	blx	r7
 800b410:	3001      	adds	r0, #1
 800b412:	d10e      	bne.n	800b432 <_printf_float+0x3f2>
 800b414:	e660      	b.n	800b0d8 <_printf_float+0x98>
 800b416:	2301      	movs	r3, #1
 800b418:	464a      	mov	r2, r9
 800b41a:	4631      	mov	r1, r6
 800b41c:	4628      	mov	r0, r5
 800b41e:	47b8      	blx	r7
 800b420:	3001      	adds	r0, #1
 800b422:	f43f ae59 	beq.w	800b0d8 <_printf_float+0x98>
 800b426:	f108 0801 	add.w	r8, r8, #1
 800b42a:	9b08      	ldr	r3, [sp, #32]
 800b42c:	3b01      	subs	r3, #1
 800b42e:	4543      	cmp	r3, r8
 800b430:	dcf1      	bgt.n	800b416 <_printf_float+0x3d6>
 800b432:	9b04      	ldr	r3, [sp, #16]
 800b434:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b438:	e6dd      	b.n	800b1f6 <_printf_float+0x1b6>
 800b43a:	f04f 0800 	mov.w	r8, #0
 800b43e:	f104 091a 	add.w	r9, r4, #26
 800b442:	e7f2      	b.n	800b42a <_printf_float+0x3ea>
 800b444:	2301      	movs	r3, #1
 800b446:	4642      	mov	r2, r8
 800b448:	e7df      	b.n	800b40a <_printf_float+0x3ca>
 800b44a:	2301      	movs	r3, #1
 800b44c:	464a      	mov	r2, r9
 800b44e:	4631      	mov	r1, r6
 800b450:	4628      	mov	r0, r5
 800b452:	47b8      	blx	r7
 800b454:	3001      	adds	r0, #1
 800b456:	f43f ae3f 	beq.w	800b0d8 <_printf_float+0x98>
 800b45a:	f108 0801 	add.w	r8, r8, #1
 800b45e:	68e3      	ldr	r3, [r4, #12]
 800b460:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b462:	1a5b      	subs	r3, r3, r1
 800b464:	4543      	cmp	r3, r8
 800b466:	dcf0      	bgt.n	800b44a <_printf_float+0x40a>
 800b468:	e6f9      	b.n	800b25e <_printf_float+0x21e>
 800b46a:	f04f 0800 	mov.w	r8, #0
 800b46e:	f104 0919 	add.w	r9, r4, #25
 800b472:	e7f4      	b.n	800b45e <_printf_float+0x41e>

0800b474 <_printf_common>:
 800b474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b478:	4616      	mov	r6, r2
 800b47a:	4699      	mov	r9, r3
 800b47c:	688a      	ldr	r2, [r1, #8]
 800b47e:	690b      	ldr	r3, [r1, #16]
 800b480:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b484:	4293      	cmp	r3, r2
 800b486:	bfb8      	it	lt
 800b488:	4613      	movlt	r3, r2
 800b48a:	6033      	str	r3, [r6, #0]
 800b48c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b490:	4607      	mov	r7, r0
 800b492:	460c      	mov	r4, r1
 800b494:	b10a      	cbz	r2, 800b49a <_printf_common+0x26>
 800b496:	3301      	adds	r3, #1
 800b498:	6033      	str	r3, [r6, #0]
 800b49a:	6823      	ldr	r3, [r4, #0]
 800b49c:	0699      	lsls	r1, r3, #26
 800b49e:	bf42      	ittt	mi
 800b4a0:	6833      	ldrmi	r3, [r6, #0]
 800b4a2:	3302      	addmi	r3, #2
 800b4a4:	6033      	strmi	r3, [r6, #0]
 800b4a6:	6825      	ldr	r5, [r4, #0]
 800b4a8:	f015 0506 	ands.w	r5, r5, #6
 800b4ac:	d106      	bne.n	800b4bc <_printf_common+0x48>
 800b4ae:	f104 0a19 	add.w	sl, r4, #25
 800b4b2:	68e3      	ldr	r3, [r4, #12]
 800b4b4:	6832      	ldr	r2, [r6, #0]
 800b4b6:	1a9b      	subs	r3, r3, r2
 800b4b8:	42ab      	cmp	r3, r5
 800b4ba:	dc26      	bgt.n	800b50a <_printf_common+0x96>
 800b4bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b4c0:	1e13      	subs	r3, r2, #0
 800b4c2:	6822      	ldr	r2, [r4, #0]
 800b4c4:	bf18      	it	ne
 800b4c6:	2301      	movne	r3, #1
 800b4c8:	0692      	lsls	r2, r2, #26
 800b4ca:	d42b      	bmi.n	800b524 <_printf_common+0xb0>
 800b4cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b4d0:	4649      	mov	r1, r9
 800b4d2:	4638      	mov	r0, r7
 800b4d4:	47c0      	blx	r8
 800b4d6:	3001      	adds	r0, #1
 800b4d8:	d01e      	beq.n	800b518 <_printf_common+0xa4>
 800b4da:	6823      	ldr	r3, [r4, #0]
 800b4dc:	6922      	ldr	r2, [r4, #16]
 800b4de:	f003 0306 	and.w	r3, r3, #6
 800b4e2:	2b04      	cmp	r3, #4
 800b4e4:	bf02      	ittt	eq
 800b4e6:	68e5      	ldreq	r5, [r4, #12]
 800b4e8:	6833      	ldreq	r3, [r6, #0]
 800b4ea:	1aed      	subeq	r5, r5, r3
 800b4ec:	68a3      	ldr	r3, [r4, #8]
 800b4ee:	bf0c      	ite	eq
 800b4f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b4f4:	2500      	movne	r5, #0
 800b4f6:	4293      	cmp	r3, r2
 800b4f8:	bfc4      	itt	gt
 800b4fa:	1a9b      	subgt	r3, r3, r2
 800b4fc:	18ed      	addgt	r5, r5, r3
 800b4fe:	2600      	movs	r6, #0
 800b500:	341a      	adds	r4, #26
 800b502:	42b5      	cmp	r5, r6
 800b504:	d11a      	bne.n	800b53c <_printf_common+0xc8>
 800b506:	2000      	movs	r0, #0
 800b508:	e008      	b.n	800b51c <_printf_common+0xa8>
 800b50a:	2301      	movs	r3, #1
 800b50c:	4652      	mov	r2, sl
 800b50e:	4649      	mov	r1, r9
 800b510:	4638      	mov	r0, r7
 800b512:	47c0      	blx	r8
 800b514:	3001      	adds	r0, #1
 800b516:	d103      	bne.n	800b520 <_printf_common+0xac>
 800b518:	f04f 30ff 	mov.w	r0, #4294967295
 800b51c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b520:	3501      	adds	r5, #1
 800b522:	e7c6      	b.n	800b4b2 <_printf_common+0x3e>
 800b524:	18e1      	adds	r1, r4, r3
 800b526:	1c5a      	adds	r2, r3, #1
 800b528:	2030      	movs	r0, #48	; 0x30
 800b52a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b52e:	4422      	add	r2, r4
 800b530:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b534:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b538:	3302      	adds	r3, #2
 800b53a:	e7c7      	b.n	800b4cc <_printf_common+0x58>
 800b53c:	2301      	movs	r3, #1
 800b53e:	4622      	mov	r2, r4
 800b540:	4649      	mov	r1, r9
 800b542:	4638      	mov	r0, r7
 800b544:	47c0      	blx	r8
 800b546:	3001      	adds	r0, #1
 800b548:	d0e6      	beq.n	800b518 <_printf_common+0xa4>
 800b54a:	3601      	adds	r6, #1
 800b54c:	e7d9      	b.n	800b502 <_printf_common+0x8e>
	...

0800b550 <_printf_i>:
 800b550:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b554:	7e0f      	ldrb	r7, [r1, #24]
 800b556:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b558:	2f78      	cmp	r7, #120	; 0x78
 800b55a:	4691      	mov	r9, r2
 800b55c:	4680      	mov	r8, r0
 800b55e:	460c      	mov	r4, r1
 800b560:	469a      	mov	sl, r3
 800b562:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b566:	d807      	bhi.n	800b578 <_printf_i+0x28>
 800b568:	2f62      	cmp	r7, #98	; 0x62
 800b56a:	d80a      	bhi.n	800b582 <_printf_i+0x32>
 800b56c:	2f00      	cmp	r7, #0
 800b56e:	f000 80d4 	beq.w	800b71a <_printf_i+0x1ca>
 800b572:	2f58      	cmp	r7, #88	; 0x58
 800b574:	f000 80c0 	beq.w	800b6f8 <_printf_i+0x1a8>
 800b578:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b57c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b580:	e03a      	b.n	800b5f8 <_printf_i+0xa8>
 800b582:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b586:	2b15      	cmp	r3, #21
 800b588:	d8f6      	bhi.n	800b578 <_printf_i+0x28>
 800b58a:	a101      	add	r1, pc, #4	; (adr r1, 800b590 <_printf_i+0x40>)
 800b58c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b590:	0800b5e9 	.word	0x0800b5e9
 800b594:	0800b5fd 	.word	0x0800b5fd
 800b598:	0800b579 	.word	0x0800b579
 800b59c:	0800b579 	.word	0x0800b579
 800b5a0:	0800b579 	.word	0x0800b579
 800b5a4:	0800b579 	.word	0x0800b579
 800b5a8:	0800b5fd 	.word	0x0800b5fd
 800b5ac:	0800b579 	.word	0x0800b579
 800b5b0:	0800b579 	.word	0x0800b579
 800b5b4:	0800b579 	.word	0x0800b579
 800b5b8:	0800b579 	.word	0x0800b579
 800b5bc:	0800b701 	.word	0x0800b701
 800b5c0:	0800b629 	.word	0x0800b629
 800b5c4:	0800b6bb 	.word	0x0800b6bb
 800b5c8:	0800b579 	.word	0x0800b579
 800b5cc:	0800b579 	.word	0x0800b579
 800b5d0:	0800b723 	.word	0x0800b723
 800b5d4:	0800b579 	.word	0x0800b579
 800b5d8:	0800b629 	.word	0x0800b629
 800b5dc:	0800b579 	.word	0x0800b579
 800b5e0:	0800b579 	.word	0x0800b579
 800b5e4:	0800b6c3 	.word	0x0800b6c3
 800b5e8:	682b      	ldr	r3, [r5, #0]
 800b5ea:	1d1a      	adds	r2, r3, #4
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	602a      	str	r2, [r5, #0]
 800b5f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b5f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	e09f      	b.n	800b73c <_printf_i+0x1ec>
 800b5fc:	6820      	ldr	r0, [r4, #0]
 800b5fe:	682b      	ldr	r3, [r5, #0]
 800b600:	0607      	lsls	r7, r0, #24
 800b602:	f103 0104 	add.w	r1, r3, #4
 800b606:	6029      	str	r1, [r5, #0]
 800b608:	d501      	bpl.n	800b60e <_printf_i+0xbe>
 800b60a:	681e      	ldr	r6, [r3, #0]
 800b60c:	e003      	b.n	800b616 <_printf_i+0xc6>
 800b60e:	0646      	lsls	r6, r0, #25
 800b610:	d5fb      	bpl.n	800b60a <_printf_i+0xba>
 800b612:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b616:	2e00      	cmp	r6, #0
 800b618:	da03      	bge.n	800b622 <_printf_i+0xd2>
 800b61a:	232d      	movs	r3, #45	; 0x2d
 800b61c:	4276      	negs	r6, r6
 800b61e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b622:	485a      	ldr	r0, [pc, #360]	; (800b78c <_printf_i+0x23c>)
 800b624:	230a      	movs	r3, #10
 800b626:	e012      	b.n	800b64e <_printf_i+0xfe>
 800b628:	682b      	ldr	r3, [r5, #0]
 800b62a:	6820      	ldr	r0, [r4, #0]
 800b62c:	1d19      	adds	r1, r3, #4
 800b62e:	6029      	str	r1, [r5, #0]
 800b630:	0605      	lsls	r5, r0, #24
 800b632:	d501      	bpl.n	800b638 <_printf_i+0xe8>
 800b634:	681e      	ldr	r6, [r3, #0]
 800b636:	e002      	b.n	800b63e <_printf_i+0xee>
 800b638:	0641      	lsls	r1, r0, #25
 800b63a:	d5fb      	bpl.n	800b634 <_printf_i+0xe4>
 800b63c:	881e      	ldrh	r6, [r3, #0]
 800b63e:	4853      	ldr	r0, [pc, #332]	; (800b78c <_printf_i+0x23c>)
 800b640:	2f6f      	cmp	r7, #111	; 0x6f
 800b642:	bf0c      	ite	eq
 800b644:	2308      	moveq	r3, #8
 800b646:	230a      	movne	r3, #10
 800b648:	2100      	movs	r1, #0
 800b64a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b64e:	6865      	ldr	r5, [r4, #4]
 800b650:	60a5      	str	r5, [r4, #8]
 800b652:	2d00      	cmp	r5, #0
 800b654:	bfa2      	ittt	ge
 800b656:	6821      	ldrge	r1, [r4, #0]
 800b658:	f021 0104 	bicge.w	r1, r1, #4
 800b65c:	6021      	strge	r1, [r4, #0]
 800b65e:	b90e      	cbnz	r6, 800b664 <_printf_i+0x114>
 800b660:	2d00      	cmp	r5, #0
 800b662:	d04b      	beq.n	800b6fc <_printf_i+0x1ac>
 800b664:	4615      	mov	r5, r2
 800b666:	fbb6 f1f3 	udiv	r1, r6, r3
 800b66a:	fb03 6711 	mls	r7, r3, r1, r6
 800b66e:	5dc7      	ldrb	r7, [r0, r7]
 800b670:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b674:	4637      	mov	r7, r6
 800b676:	42bb      	cmp	r3, r7
 800b678:	460e      	mov	r6, r1
 800b67a:	d9f4      	bls.n	800b666 <_printf_i+0x116>
 800b67c:	2b08      	cmp	r3, #8
 800b67e:	d10b      	bne.n	800b698 <_printf_i+0x148>
 800b680:	6823      	ldr	r3, [r4, #0]
 800b682:	07de      	lsls	r6, r3, #31
 800b684:	d508      	bpl.n	800b698 <_printf_i+0x148>
 800b686:	6923      	ldr	r3, [r4, #16]
 800b688:	6861      	ldr	r1, [r4, #4]
 800b68a:	4299      	cmp	r1, r3
 800b68c:	bfde      	ittt	le
 800b68e:	2330      	movle	r3, #48	; 0x30
 800b690:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b694:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b698:	1b52      	subs	r2, r2, r5
 800b69a:	6122      	str	r2, [r4, #16]
 800b69c:	f8cd a000 	str.w	sl, [sp]
 800b6a0:	464b      	mov	r3, r9
 800b6a2:	aa03      	add	r2, sp, #12
 800b6a4:	4621      	mov	r1, r4
 800b6a6:	4640      	mov	r0, r8
 800b6a8:	f7ff fee4 	bl	800b474 <_printf_common>
 800b6ac:	3001      	adds	r0, #1
 800b6ae:	d14a      	bne.n	800b746 <_printf_i+0x1f6>
 800b6b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b6b4:	b004      	add	sp, #16
 800b6b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6ba:	6823      	ldr	r3, [r4, #0]
 800b6bc:	f043 0320 	orr.w	r3, r3, #32
 800b6c0:	6023      	str	r3, [r4, #0]
 800b6c2:	4833      	ldr	r0, [pc, #204]	; (800b790 <_printf_i+0x240>)
 800b6c4:	2778      	movs	r7, #120	; 0x78
 800b6c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b6ca:	6823      	ldr	r3, [r4, #0]
 800b6cc:	6829      	ldr	r1, [r5, #0]
 800b6ce:	061f      	lsls	r7, r3, #24
 800b6d0:	f851 6b04 	ldr.w	r6, [r1], #4
 800b6d4:	d402      	bmi.n	800b6dc <_printf_i+0x18c>
 800b6d6:	065f      	lsls	r7, r3, #25
 800b6d8:	bf48      	it	mi
 800b6da:	b2b6      	uxthmi	r6, r6
 800b6dc:	07df      	lsls	r7, r3, #31
 800b6de:	bf48      	it	mi
 800b6e0:	f043 0320 	orrmi.w	r3, r3, #32
 800b6e4:	6029      	str	r1, [r5, #0]
 800b6e6:	bf48      	it	mi
 800b6e8:	6023      	strmi	r3, [r4, #0]
 800b6ea:	b91e      	cbnz	r6, 800b6f4 <_printf_i+0x1a4>
 800b6ec:	6823      	ldr	r3, [r4, #0]
 800b6ee:	f023 0320 	bic.w	r3, r3, #32
 800b6f2:	6023      	str	r3, [r4, #0]
 800b6f4:	2310      	movs	r3, #16
 800b6f6:	e7a7      	b.n	800b648 <_printf_i+0xf8>
 800b6f8:	4824      	ldr	r0, [pc, #144]	; (800b78c <_printf_i+0x23c>)
 800b6fa:	e7e4      	b.n	800b6c6 <_printf_i+0x176>
 800b6fc:	4615      	mov	r5, r2
 800b6fe:	e7bd      	b.n	800b67c <_printf_i+0x12c>
 800b700:	682b      	ldr	r3, [r5, #0]
 800b702:	6826      	ldr	r6, [r4, #0]
 800b704:	6961      	ldr	r1, [r4, #20]
 800b706:	1d18      	adds	r0, r3, #4
 800b708:	6028      	str	r0, [r5, #0]
 800b70a:	0635      	lsls	r5, r6, #24
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	d501      	bpl.n	800b714 <_printf_i+0x1c4>
 800b710:	6019      	str	r1, [r3, #0]
 800b712:	e002      	b.n	800b71a <_printf_i+0x1ca>
 800b714:	0670      	lsls	r0, r6, #25
 800b716:	d5fb      	bpl.n	800b710 <_printf_i+0x1c0>
 800b718:	8019      	strh	r1, [r3, #0]
 800b71a:	2300      	movs	r3, #0
 800b71c:	6123      	str	r3, [r4, #16]
 800b71e:	4615      	mov	r5, r2
 800b720:	e7bc      	b.n	800b69c <_printf_i+0x14c>
 800b722:	682b      	ldr	r3, [r5, #0]
 800b724:	1d1a      	adds	r2, r3, #4
 800b726:	602a      	str	r2, [r5, #0]
 800b728:	681d      	ldr	r5, [r3, #0]
 800b72a:	6862      	ldr	r2, [r4, #4]
 800b72c:	2100      	movs	r1, #0
 800b72e:	4628      	mov	r0, r5
 800b730:	f7f4 fdd6 	bl	80002e0 <memchr>
 800b734:	b108      	cbz	r0, 800b73a <_printf_i+0x1ea>
 800b736:	1b40      	subs	r0, r0, r5
 800b738:	6060      	str	r0, [r4, #4]
 800b73a:	6863      	ldr	r3, [r4, #4]
 800b73c:	6123      	str	r3, [r4, #16]
 800b73e:	2300      	movs	r3, #0
 800b740:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b744:	e7aa      	b.n	800b69c <_printf_i+0x14c>
 800b746:	6923      	ldr	r3, [r4, #16]
 800b748:	462a      	mov	r2, r5
 800b74a:	4649      	mov	r1, r9
 800b74c:	4640      	mov	r0, r8
 800b74e:	47d0      	blx	sl
 800b750:	3001      	adds	r0, #1
 800b752:	d0ad      	beq.n	800b6b0 <_printf_i+0x160>
 800b754:	6823      	ldr	r3, [r4, #0]
 800b756:	079b      	lsls	r3, r3, #30
 800b758:	d413      	bmi.n	800b782 <_printf_i+0x232>
 800b75a:	68e0      	ldr	r0, [r4, #12]
 800b75c:	9b03      	ldr	r3, [sp, #12]
 800b75e:	4298      	cmp	r0, r3
 800b760:	bfb8      	it	lt
 800b762:	4618      	movlt	r0, r3
 800b764:	e7a6      	b.n	800b6b4 <_printf_i+0x164>
 800b766:	2301      	movs	r3, #1
 800b768:	4632      	mov	r2, r6
 800b76a:	4649      	mov	r1, r9
 800b76c:	4640      	mov	r0, r8
 800b76e:	47d0      	blx	sl
 800b770:	3001      	adds	r0, #1
 800b772:	d09d      	beq.n	800b6b0 <_printf_i+0x160>
 800b774:	3501      	adds	r5, #1
 800b776:	68e3      	ldr	r3, [r4, #12]
 800b778:	9903      	ldr	r1, [sp, #12]
 800b77a:	1a5b      	subs	r3, r3, r1
 800b77c:	42ab      	cmp	r3, r5
 800b77e:	dcf2      	bgt.n	800b766 <_printf_i+0x216>
 800b780:	e7eb      	b.n	800b75a <_printf_i+0x20a>
 800b782:	2500      	movs	r5, #0
 800b784:	f104 0619 	add.w	r6, r4, #25
 800b788:	e7f5      	b.n	800b776 <_printf_i+0x226>
 800b78a:	bf00      	nop
 800b78c:	0800f6ae 	.word	0x0800f6ae
 800b790:	0800f6bf 	.word	0x0800f6bf

0800b794 <_scanf_float>:
 800b794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b798:	b087      	sub	sp, #28
 800b79a:	4617      	mov	r7, r2
 800b79c:	9303      	str	r3, [sp, #12]
 800b79e:	688b      	ldr	r3, [r1, #8]
 800b7a0:	1e5a      	subs	r2, r3, #1
 800b7a2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b7a6:	bf83      	ittte	hi
 800b7a8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b7ac:	195b      	addhi	r3, r3, r5
 800b7ae:	9302      	strhi	r3, [sp, #8]
 800b7b0:	2300      	movls	r3, #0
 800b7b2:	bf86      	itte	hi
 800b7b4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b7b8:	608b      	strhi	r3, [r1, #8]
 800b7ba:	9302      	strls	r3, [sp, #8]
 800b7bc:	680b      	ldr	r3, [r1, #0]
 800b7be:	468b      	mov	fp, r1
 800b7c0:	2500      	movs	r5, #0
 800b7c2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b7c6:	f84b 3b1c 	str.w	r3, [fp], #28
 800b7ca:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b7ce:	4680      	mov	r8, r0
 800b7d0:	460c      	mov	r4, r1
 800b7d2:	465e      	mov	r6, fp
 800b7d4:	46aa      	mov	sl, r5
 800b7d6:	46a9      	mov	r9, r5
 800b7d8:	9501      	str	r5, [sp, #4]
 800b7da:	68a2      	ldr	r2, [r4, #8]
 800b7dc:	b152      	cbz	r2, 800b7f4 <_scanf_float+0x60>
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	781b      	ldrb	r3, [r3, #0]
 800b7e2:	2b4e      	cmp	r3, #78	; 0x4e
 800b7e4:	d864      	bhi.n	800b8b0 <_scanf_float+0x11c>
 800b7e6:	2b40      	cmp	r3, #64	; 0x40
 800b7e8:	d83c      	bhi.n	800b864 <_scanf_float+0xd0>
 800b7ea:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800b7ee:	b2c8      	uxtb	r0, r1
 800b7f0:	280e      	cmp	r0, #14
 800b7f2:	d93a      	bls.n	800b86a <_scanf_float+0xd6>
 800b7f4:	f1b9 0f00 	cmp.w	r9, #0
 800b7f8:	d003      	beq.n	800b802 <_scanf_float+0x6e>
 800b7fa:	6823      	ldr	r3, [r4, #0]
 800b7fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b800:	6023      	str	r3, [r4, #0]
 800b802:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b806:	f1ba 0f01 	cmp.w	sl, #1
 800b80a:	f200 8113 	bhi.w	800ba34 <_scanf_float+0x2a0>
 800b80e:	455e      	cmp	r6, fp
 800b810:	f200 8105 	bhi.w	800ba1e <_scanf_float+0x28a>
 800b814:	2501      	movs	r5, #1
 800b816:	4628      	mov	r0, r5
 800b818:	b007      	add	sp, #28
 800b81a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b81e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b822:	2a0d      	cmp	r2, #13
 800b824:	d8e6      	bhi.n	800b7f4 <_scanf_float+0x60>
 800b826:	a101      	add	r1, pc, #4	; (adr r1, 800b82c <_scanf_float+0x98>)
 800b828:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b82c:	0800b96b 	.word	0x0800b96b
 800b830:	0800b7f5 	.word	0x0800b7f5
 800b834:	0800b7f5 	.word	0x0800b7f5
 800b838:	0800b7f5 	.word	0x0800b7f5
 800b83c:	0800b9cb 	.word	0x0800b9cb
 800b840:	0800b9a3 	.word	0x0800b9a3
 800b844:	0800b7f5 	.word	0x0800b7f5
 800b848:	0800b7f5 	.word	0x0800b7f5
 800b84c:	0800b979 	.word	0x0800b979
 800b850:	0800b7f5 	.word	0x0800b7f5
 800b854:	0800b7f5 	.word	0x0800b7f5
 800b858:	0800b7f5 	.word	0x0800b7f5
 800b85c:	0800b7f5 	.word	0x0800b7f5
 800b860:	0800b931 	.word	0x0800b931
 800b864:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b868:	e7db      	b.n	800b822 <_scanf_float+0x8e>
 800b86a:	290e      	cmp	r1, #14
 800b86c:	d8c2      	bhi.n	800b7f4 <_scanf_float+0x60>
 800b86e:	a001      	add	r0, pc, #4	; (adr r0, 800b874 <_scanf_float+0xe0>)
 800b870:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b874:	0800b923 	.word	0x0800b923
 800b878:	0800b7f5 	.word	0x0800b7f5
 800b87c:	0800b923 	.word	0x0800b923
 800b880:	0800b9b7 	.word	0x0800b9b7
 800b884:	0800b7f5 	.word	0x0800b7f5
 800b888:	0800b8d1 	.word	0x0800b8d1
 800b88c:	0800b90d 	.word	0x0800b90d
 800b890:	0800b90d 	.word	0x0800b90d
 800b894:	0800b90d 	.word	0x0800b90d
 800b898:	0800b90d 	.word	0x0800b90d
 800b89c:	0800b90d 	.word	0x0800b90d
 800b8a0:	0800b90d 	.word	0x0800b90d
 800b8a4:	0800b90d 	.word	0x0800b90d
 800b8a8:	0800b90d 	.word	0x0800b90d
 800b8ac:	0800b90d 	.word	0x0800b90d
 800b8b0:	2b6e      	cmp	r3, #110	; 0x6e
 800b8b2:	d809      	bhi.n	800b8c8 <_scanf_float+0x134>
 800b8b4:	2b60      	cmp	r3, #96	; 0x60
 800b8b6:	d8b2      	bhi.n	800b81e <_scanf_float+0x8a>
 800b8b8:	2b54      	cmp	r3, #84	; 0x54
 800b8ba:	d077      	beq.n	800b9ac <_scanf_float+0x218>
 800b8bc:	2b59      	cmp	r3, #89	; 0x59
 800b8be:	d199      	bne.n	800b7f4 <_scanf_float+0x60>
 800b8c0:	2d07      	cmp	r5, #7
 800b8c2:	d197      	bne.n	800b7f4 <_scanf_float+0x60>
 800b8c4:	2508      	movs	r5, #8
 800b8c6:	e029      	b.n	800b91c <_scanf_float+0x188>
 800b8c8:	2b74      	cmp	r3, #116	; 0x74
 800b8ca:	d06f      	beq.n	800b9ac <_scanf_float+0x218>
 800b8cc:	2b79      	cmp	r3, #121	; 0x79
 800b8ce:	e7f6      	b.n	800b8be <_scanf_float+0x12a>
 800b8d0:	6821      	ldr	r1, [r4, #0]
 800b8d2:	05c8      	lsls	r0, r1, #23
 800b8d4:	d51a      	bpl.n	800b90c <_scanf_float+0x178>
 800b8d6:	9b02      	ldr	r3, [sp, #8]
 800b8d8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b8dc:	6021      	str	r1, [r4, #0]
 800b8de:	f109 0901 	add.w	r9, r9, #1
 800b8e2:	b11b      	cbz	r3, 800b8ec <_scanf_float+0x158>
 800b8e4:	3b01      	subs	r3, #1
 800b8e6:	3201      	adds	r2, #1
 800b8e8:	9302      	str	r3, [sp, #8]
 800b8ea:	60a2      	str	r2, [r4, #8]
 800b8ec:	68a3      	ldr	r3, [r4, #8]
 800b8ee:	3b01      	subs	r3, #1
 800b8f0:	60a3      	str	r3, [r4, #8]
 800b8f2:	6923      	ldr	r3, [r4, #16]
 800b8f4:	3301      	adds	r3, #1
 800b8f6:	6123      	str	r3, [r4, #16]
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	3b01      	subs	r3, #1
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	607b      	str	r3, [r7, #4]
 800b900:	f340 8084 	ble.w	800ba0c <_scanf_float+0x278>
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	3301      	adds	r3, #1
 800b908:	603b      	str	r3, [r7, #0]
 800b90a:	e766      	b.n	800b7da <_scanf_float+0x46>
 800b90c:	eb1a 0f05 	cmn.w	sl, r5
 800b910:	f47f af70 	bne.w	800b7f4 <_scanf_float+0x60>
 800b914:	6822      	ldr	r2, [r4, #0]
 800b916:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800b91a:	6022      	str	r2, [r4, #0]
 800b91c:	f806 3b01 	strb.w	r3, [r6], #1
 800b920:	e7e4      	b.n	800b8ec <_scanf_float+0x158>
 800b922:	6822      	ldr	r2, [r4, #0]
 800b924:	0610      	lsls	r0, r2, #24
 800b926:	f57f af65 	bpl.w	800b7f4 <_scanf_float+0x60>
 800b92a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b92e:	e7f4      	b.n	800b91a <_scanf_float+0x186>
 800b930:	f1ba 0f00 	cmp.w	sl, #0
 800b934:	d10e      	bne.n	800b954 <_scanf_float+0x1c0>
 800b936:	f1b9 0f00 	cmp.w	r9, #0
 800b93a:	d10e      	bne.n	800b95a <_scanf_float+0x1c6>
 800b93c:	6822      	ldr	r2, [r4, #0]
 800b93e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b942:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b946:	d108      	bne.n	800b95a <_scanf_float+0x1c6>
 800b948:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b94c:	6022      	str	r2, [r4, #0]
 800b94e:	f04f 0a01 	mov.w	sl, #1
 800b952:	e7e3      	b.n	800b91c <_scanf_float+0x188>
 800b954:	f1ba 0f02 	cmp.w	sl, #2
 800b958:	d055      	beq.n	800ba06 <_scanf_float+0x272>
 800b95a:	2d01      	cmp	r5, #1
 800b95c:	d002      	beq.n	800b964 <_scanf_float+0x1d0>
 800b95e:	2d04      	cmp	r5, #4
 800b960:	f47f af48 	bne.w	800b7f4 <_scanf_float+0x60>
 800b964:	3501      	adds	r5, #1
 800b966:	b2ed      	uxtb	r5, r5
 800b968:	e7d8      	b.n	800b91c <_scanf_float+0x188>
 800b96a:	f1ba 0f01 	cmp.w	sl, #1
 800b96e:	f47f af41 	bne.w	800b7f4 <_scanf_float+0x60>
 800b972:	f04f 0a02 	mov.w	sl, #2
 800b976:	e7d1      	b.n	800b91c <_scanf_float+0x188>
 800b978:	b97d      	cbnz	r5, 800b99a <_scanf_float+0x206>
 800b97a:	f1b9 0f00 	cmp.w	r9, #0
 800b97e:	f47f af3c 	bne.w	800b7fa <_scanf_float+0x66>
 800b982:	6822      	ldr	r2, [r4, #0]
 800b984:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b988:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b98c:	f47f af39 	bne.w	800b802 <_scanf_float+0x6e>
 800b990:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b994:	6022      	str	r2, [r4, #0]
 800b996:	2501      	movs	r5, #1
 800b998:	e7c0      	b.n	800b91c <_scanf_float+0x188>
 800b99a:	2d03      	cmp	r5, #3
 800b99c:	d0e2      	beq.n	800b964 <_scanf_float+0x1d0>
 800b99e:	2d05      	cmp	r5, #5
 800b9a0:	e7de      	b.n	800b960 <_scanf_float+0x1cc>
 800b9a2:	2d02      	cmp	r5, #2
 800b9a4:	f47f af26 	bne.w	800b7f4 <_scanf_float+0x60>
 800b9a8:	2503      	movs	r5, #3
 800b9aa:	e7b7      	b.n	800b91c <_scanf_float+0x188>
 800b9ac:	2d06      	cmp	r5, #6
 800b9ae:	f47f af21 	bne.w	800b7f4 <_scanf_float+0x60>
 800b9b2:	2507      	movs	r5, #7
 800b9b4:	e7b2      	b.n	800b91c <_scanf_float+0x188>
 800b9b6:	6822      	ldr	r2, [r4, #0]
 800b9b8:	0591      	lsls	r1, r2, #22
 800b9ba:	f57f af1b 	bpl.w	800b7f4 <_scanf_float+0x60>
 800b9be:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800b9c2:	6022      	str	r2, [r4, #0]
 800b9c4:	f8cd 9004 	str.w	r9, [sp, #4]
 800b9c8:	e7a8      	b.n	800b91c <_scanf_float+0x188>
 800b9ca:	6822      	ldr	r2, [r4, #0]
 800b9cc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800b9d0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b9d4:	d006      	beq.n	800b9e4 <_scanf_float+0x250>
 800b9d6:	0550      	lsls	r0, r2, #21
 800b9d8:	f57f af0c 	bpl.w	800b7f4 <_scanf_float+0x60>
 800b9dc:	f1b9 0f00 	cmp.w	r9, #0
 800b9e0:	f43f af0f 	beq.w	800b802 <_scanf_float+0x6e>
 800b9e4:	0591      	lsls	r1, r2, #22
 800b9e6:	bf58      	it	pl
 800b9e8:	9901      	ldrpl	r1, [sp, #4]
 800b9ea:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b9ee:	bf58      	it	pl
 800b9f0:	eba9 0101 	subpl.w	r1, r9, r1
 800b9f4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800b9f8:	bf58      	it	pl
 800b9fa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b9fe:	6022      	str	r2, [r4, #0]
 800ba00:	f04f 0900 	mov.w	r9, #0
 800ba04:	e78a      	b.n	800b91c <_scanf_float+0x188>
 800ba06:	f04f 0a03 	mov.w	sl, #3
 800ba0a:	e787      	b.n	800b91c <_scanf_float+0x188>
 800ba0c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ba10:	4639      	mov	r1, r7
 800ba12:	4640      	mov	r0, r8
 800ba14:	4798      	blx	r3
 800ba16:	2800      	cmp	r0, #0
 800ba18:	f43f aedf 	beq.w	800b7da <_scanf_float+0x46>
 800ba1c:	e6ea      	b.n	800b7f4 <_scanf_float+0x60>
 800ba1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ba22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ba26:	463a      	mov	r2, r7
 800ba28:	4640      	mov	r0, r8
 800ba2a:	4798      	blx	r3
 800ba2c:	6923      	ldr	r3, [r4, #16]
 800ba2e:	3b01      	subs	r3, #1
 800ba30:	6123      	str	r3, [r4, #16]
 800ba32:	e6ec      	b.n	800b80e <_scanf_float+0x7a>
 800ba34:	1e6b      	subs	r3, r5, #1
 800ba36:	2b06      	cmp	r3, #6
 800ba38:	d825      	bhi.n	800ba86 <_scanf_float+0x2f2>
 800ba3a:	2d02      	cmp	r5, #2
 800ba3c:	d836      	bhi.n	800baac <_scanf_float+0x318>
 800ba3e:	455e      	cmp	r6, fp
 800ba40:	f67f aee8 	bls.w	800b814 <_scanf_float+0x80>
 800ba44:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ba48:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ba4c:	463a      	mov	r2, r7
 800ba4e:	4640      	mov	r0, r8
 800ba50:	4798      	blx	r3
 800ba52:	6923      	ldr	r3, [r4, #16]
 800ba54:	3b01      	subs	r3, #1
 800ba56:	6123      	str	r3, [r4, #16]
 800ba58:	e7f1      	b.n	800ba3e <_scanf_float+0x2aa>
 800ba5a:	9802      	ldr	r0, [sp, #8]
 800ba5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ba60:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800ba64:	9002      	str	r0, [sp, #8]
 800ba66:	463a      	mov	r2, r7
 800ba68:	4640      	mov	r0, r8
 800ba6a:	4798      	blx	r3
 800ba6c:	6923      	ldr	r3, [r4, #16]
 800ba6e:	3b01      	subs	r3, #1
 800ba70:	6123      	str	r3, [r4, #16]
 800ba72:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ba76:	fa5f fa8a 	uxtb.w	sl, sl
 800ba7a:	f1ba 0f02 	cmp.w	sl, #2
 800ba7e:	d1ec      	bne.n	800ba5a <_scanf_float+0x2c6>
 800ba80:	3d03      	subs	r5, #3
 800ba82:	b2ed      	uxtb	r5, r5
 800ba84:	1b76      	subs	r6, r6, r5
 800ba86:	6823      	ldr	r3, [r4, #0]
 800ba88:	05da      	lsls	r2, r3, #23
 800ba8a:	d52f      	bpl.n	800baec <_scanf_float+0x358>
 800ba8c:	055b      	lsls	r3, r3, #21
 800ba8e:	d510      	bpl.n	800bab2 <_scanf_float+0x31e>
 800ba90:	455e      	cmp	r6, fp
 800ba92:	f67f aebf 	bls.w	800b814 <_scanf_float+0x80>
 800ba96:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ba9a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ba9e:	463a      	mov	r2, r7
 800baa0:	4640      	mov	r0, r8
 800baa2:	4798      	blx	r3
 800baa4:	6923      	ldr	r3, [r4, #16]
 800baa6:	3b01      	subs	r3, #1
 800baa8:	6123      	str	r3, [r4, #16]
 800baaa:	e7f1      	b.n	800ba90 <_scanf_float+0x2fc>
 800baac:	46aa      	mov	sl, r5
 800baae:	9602      	str	r6, [sp, #8]
 800bab0:	e7df      	b.n	800ba72 <_scanf_float+0x2de>
 800bab2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800bab6:	6923      	ldr	r3, [r4, #16]
 800bab8:	2965      	cmp	r1, #101	; 0x65
 800baba:	f103 33ff 	add.w	r3, r3, #4294967295
 800babe:	f106 35ff 	add.w	r5, r6, #4294967295
 800bac2:	6123      	str	r3, [r4, #16]
 800bac4:	d00c      	beq.n	800bae0 <_scanf_float+0x34c>
 800bac6:	2945      	cmp	r1, #69	; 0x45
 800bac8:	d00a      	beq.n	800bae0 <_scanf_float+0x34c>
 800baca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bace:	463a      	mov	r2, r7
 800bad0:	4640      	mov	r0, r8
 800bad2:	4798      	blx	r3
 800bad4:	6923      	ldr	r3, [r4, #16]
 800bad6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800bada:	3b01      	subs	r3, #1
 800badc:	1eb5      	subs	r5, r6, #2
 800bade:	6123      	str	r3, [r4, #16]
 800bae0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bae4:	463a      	mov	r2, r7
 800bae6:	4640      	mov	r0, r8
 800bae8:	4798      	blx	r3
 800baea:	462e      	mov	r6, r5
 800baec:	6825      	ldr	r5, [r4, #0]
 800baee:	f015 0510 	ands.w	r5, r5, #16
 800baf2:	d14d      	bne.n	800bb90 <_scanf_float+0x3fc>
 800baf4:	7035      	strb	r5, [r6, #0]
 800baf6:	6823      	ldr	r3, [r4, #0]
 800baf8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800bafc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb00:	d11a      	bne.n	800bb38 <_scanf_float+0x3a4>
 800bb02:	9b01      	ldr	r3, [sp, #4]
 800bb04:	454b      	cmp	r3, r9
 800bb06:	eba3 0209 	sub.w	r2, r3, r9
 800bb0a:	d122      	bne.n	800bb52 <_scanf_float+0x3be>
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	4659      	mov	r1, fp
 800bb10:	4640      	mov	r0, r8
 800bb12:	f002 fbdf 	bl	800e2d4 <_strtod_r>
 800bb16:	9b03      	ldr	r3, [sp, #12]
 800bb18:	6821      	ldr	r1, [r4, #0]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	f011 0f02 	tst.w	r1, #2
 800bb20:	f103 0204 	add.w	r2, r3, #4
 800bb24:	d020      	beq.n	800bb68 <_scanf_float+0x3d4>
 800bb26:	9903      	ldr	r1, [sp, #12]
 800bb28:	600a      	str	r2, [r1, #0]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	ed83 0b00 	vstr	d0, [r3]
 800bb30:	68e3      	ldr	r3, [r4, #12]
 800bb32:	3301      	adds	r3, #1
 800bb34:	60e3      	str	r3, [r4, #12]
 800bb36:	e66e      	b.n	800b816 <_scanf_float+0x82>
 800bb38:	9b04      	ldr	r3, [sp, #16]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d0e6      	beq.n	800bb0c <_scanf_float+0x378>
 800bb3e:	9905      	ldr	r1, [sp, #20]
 800bb40:	230a      	movs	r3, #10
 800bb42:	462a      	mov	r2, r5
 800bb44:	3101      	adds	r1, #1
 800bb46:	4640      	mov	r0, r8
 800bb48:	f002 fc4c 	bl	800e3e4 <_strtol_r>
 800bb4c:	9b04      	ldr	r3, [sp, #16]
 800bb4e:	9e05      	ldr	r6, [sp, #20]
 800bb50:	1ac2      	subs	r2, r0, r3
 800bb52:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800bb56:	429e      	cmp	r6, r3
 800bb58:	bf28      	it	cs
 800bb5a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800bb5e:	490d      	ldr	r1, [pc, #52]	; (800bb94 <_scanf_float+0x400>)
 800bb60:	4630      	mov	r0, r6
 800bb62:	f000 f8ff 	bl	800bd64 <siprintf>
 800bb66:	e7d1      	b.n	800bb0c <_scanf_float+0x378>
 800bb68:	f011 0f04 	tst.w	r1, #4
 800bb6c:	9903      	ldr	r1, [sp, #12]
 800bb6e:	600a      	str	r2, [r1, #0]
 800bb70:	d1db      	bne.n	800bb2a <_scanf_float+0x396>
 800bb72:	eeb4 0b40 	vcmp.f64	d0, d0
 800bb76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb7a:	681e      	ldr	r6, [r3, #0]
 800bb7c:	d705      	bvc.n	800bb8a <_scanf_float+0x3f6>
 800bb7e:	4806      	ldr	r0, [pc, #24]	; (800bb98 <_scanf_float+0x404>)
 800bb80:	f000 fa36 	bl	800bff0 <nanf>
 800bb84:	ed86 0a00 	vstr	s0, [r6]
 800bb88:	e7d2      	b.n	800bb30 <_scanf_float+0x39c>
 800bb8a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800bb8e:	e7f9      	b.n	800bb84 <_scanf_float+0x3f0>
 800bb90:	2500      	movs	r5, #0
 800bb92:	e640      	b.n	800b816 <_scanf_float+0x82>
 800bb94:	0800f6d0 	.word	0x0800f6d0
 800bb98:	0800fa65 	.word	0x0800fa65

0800bb9c <std>:
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	b510      	push	{r4, lr}
 800bba0:	4604      	mov	r4, r0
 800bba2:	e9c0 3300 	strd	r3, r3, [r0]
 800bba6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bbaa:	6083      	str	r3, [r0, #8]
 800bbac:	8181      	strh	r1, [r0, #12]
 800bbae:	6643      	str	r3, [r0, #100]	; 0x64
 800bbb0:	81c2      	strh	r2, [r0, #14]
 800bbb2:	6183      	str	r3, [r0, #24]
 800bbb4:	4619      	mov	r1, r3
 800bbb6:	2208      	movs	r2, #8
 800bbb8:	305c      	adds	r0, #92	; 0x5c
 800bbba:	f000 f936 	bl	800be2a <memset>
 800bbbe:	4b05      	ldr	r3, [pc, #20]	; (800bbd4 <std+0x38>)
 800bbc0:	6263      	str	r3, [r4, #36]	; 0x24
 800bbc2:	4b05      	ldr	r3, [pc, #20]	; (800bbd8 <std+0x3c>)
 800bbc4:	62a3      	str	r3, [r4, #40]	; 0x28
 800bbc6:	4b05      	ldr	r3, [pc, #20]	; (800bbdc <std+0x40>)
 800bbc8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bbca:	4b05      	ldr	r3, [pc, #20]	; (800bbe0 <std+0x44>)
 800bbcc:	6224      	str	r4, [r4, #32]
 800bbce:	6323      	str	r3, [r4, #48]	; 0x30
 800bbd0:	bd10      	pop	{r4, pc}
 800bbd2:	bf00      	nop
 800bbd4:	0800bda5 	.word	0x0800bda5
 800bbd8:	0800bdc7 	.word	0x0800bdc7
 800bbdc:	0800bdff 	.word	0x0800bdff
 800bbe0:	0800be23 	.word	0x0800be23

0800bbe4 <stdio_exit_handler>:
 800bbe4:	4a02      	ldr	r2, [pc, #8]	; (800bbf0 <stdio_exit_handler+0xc>)
 800bbe6:	4903      	ldr	r1, [pc, #12]	; (800bbf4 <stdio_exit_handler+0x10>)
 800bbe8:	4803      	ldr	r0, [pc, #12]	; (800bbf8 <stdio_exit_handler+0x14>)
 800bbea:	f000 b869 	b.w	800bcc0 <_fwalk_sglue>
 800bbee:	bf00      	nop
 800bbf0:	24000014 	.word	0x24000014
 800bbf4:	0800e7a5 	.word	0x0800e7a5
 800bbf8:	24000020 	.word	0x24000020

0800bbfc <cleanup_stdio>:
 800bbfc:	6841      	ldr	r1, [r0, #4]
 800bbfe:	4b0c      	ldr	r3, [pc, #48]	; (800bc30 <cleanup_stdio+0x34>)
 800bc00:	4299      	cmp	r1, r3
 800bc02:	b510      	push	{r4, lr}
 800bc04:	4604      	mov	r4, r0
 800bc06:	d001      	beq.n	800bc0c <cleanup_stdio+0x10>
 800bc08:	f002 fdcc 	bl	800e7a4 <_fflush_r>
 800bc0c:	68a1      	ldr	r1, [r4, #8]
 800bc0e:	4b09      	ldr	r3, [pc, #36]	; (800bc34 <cleanup_stdio+0x38>)
 800bc10:	4299      	cmp	r1, r3
 800bc12:	d002      	beq.n	800bc1a <cleanup_stdio+0x1e>
 800bc14:	4620      	mov	r0, r4
 800bc16:	f002 fdc5 	bl	800e7a4 <_fflush_r>
 800bc1a:	68e1      	ldr	r1, [r4, #12]
 800bc1c:	4b06      	ldr	r3, [pc, #24]	; (800bc38 <cleanup_stdio+0x3c>)
 800bc1e:	4299      	cmp	r1, r3
 800bc20:	d004      	beq.n	800bc2c <cleanup_stdio+0x30>
 800bc22:	4620      	mov	r0, r4
 800bc24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc28:	f002 bdbc 	b.w	800e7a4 <_fflush_r>
 800bc2c:	bd10      	pop	{r4, pc}
 800bc2e:	bf00      	nop
 800bc30:	240053f8 	.word	0x240053f8
 800bc34:	24005460 	.word	0x24005460
 800bc38:	240054c8 	.word	0x240054c8

0800bc3c <global_stdio_init.part.0>:
 800bc3c:	b510      	push	{r4, lr}
 800bc3e:	4b0b      	ldr	r3, [pc, #44]	; (800bc6c <global_stdio_init.part.0+0x30>)
 800bc40:	4c0b      	ldr	r4, [pc, #44]	; (800bc70 <global_stdio_init.part.0+0x34>)
 800bc42:	4a0c      	ldr	r2, [pc, #48]	; (800bc74 <global_stdio_init.part.0+0x38>)
 800bc44:	601a      	str	r2, [r3, #0]
 800bc46:	4620      	mov	r0, r4
 800bc48:	2200      	movs	r2, #0
 800bc4a:	2104      	movs	r1, #4
 800bc4c:	f7ff ffa6 	bl	800bb9c <std>
 800bc50:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800bc54:	2201      	movs	r2, #1
 800bc56:	2109      	movs	r1, #9
 800bc58:	f7ff ffa0 	bl	800bb9c <std>
 800bc5c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800bc60:	2202      	movs	r2, #2
 800bc62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc66:	2112      	movs	r1, #18
 800bc68:	f7ff bf98 	b.w	800bb9c <std>
 800bc6c:	24005530 	.word	0x24005530
 800bc70:	240053f8 	.word	0x240053f8
 800bc74:	0800bbe5 	.word	0x0800bbe5

0800bc78 <__sfp_lock_acquire>:
 800bc78:	4801      	ldr	r0, [pc, #4]	; (800bc80 <__sfp_lock_acquire+0x8>)
 800bc7a:	f000 b9a9 	b.w	800bfd0 <__retarget_lock_acquire_recursive>
 800bc7e:	bf00      	nop
 800bc80:	24005539 	.word	0x24005539

0800bc84 <__sfp_lock_release>:
 800bc84:	4801      	ldr	r0, [pc, #4]	; (800bc8c <__sfp_lock_release+0x8>)
 800bc86:	f000 b9a4 	b.w	800bfd2 <__retarget_lock_release_recursive>
 800bc8a:	bf00      	nop
 800bc8c:	24005539 	.word	0x24005539

0800bc90 <__sinit>:
 800bc90:	b510      	push	{r4, lr}
 800bc92:	4604      	mov	r4, r0
 800bc94:	f7ff fff0 	bl	800bc78 <__sfp_lock_acquire>
 800bc98:	6a23      	ldr	r3, [r4, #32]
 800bc9a:	b11b      	cbz	r3, 800bca4 <__sinit+0x14>
 800bc9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bca0:	f7ff bff0 	b.w	800bc84 <__sfp_lock_release>
 800bca4:	4b04      	ldr	r3, [pc, #16]	; (800bcb8 <__sinit+0x28>)
 800bca6:	6223      	str	r3, [r4, #32]
 800bca8:	4b04      	ldr	r3, [pc, #16]	; (800bcbc <__sinit+0x2c>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d1f5      	bne.n	800bc9c <__sinit+0xc>
 800bcb0:	f7ff ffc4 	bl	800bc3c <global_stdio_init.part.0>
 800bcb4:	e7f2      	b.n	800bc9c <__sinit+0xc>
 800bcb6:	bf00      	nop
 800bcb8:	0800bbfd 	.word	0x0800bbfd
 800bcbc:	24005530 	.word	0x24005530

0800bcc0 <_fwalk_sglue>:
 800bcc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcc4:	4607      	mov	r7, r0
 800bcc6:	4688      	mov	r8, r1
 800bcc8:	4614      	mov	r4, r2
 800bcca:	2600      	movs	r6, #0
 800bccc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bcd0:	f1b9 0901 	subs.w	r9, r9, #1
 800bcd4:	d505      	bpl.n	800bce2 <_fwalk_sglue+0x22>
 800bcd6:	6824      	ldr	r4, [r4, #0]
 800bcd8:	2c00      	cmp	r4, #0
 800bcda:	d1f7      	bne.n	800bccc <_fwalk_sglue+0xc>
 800bcdc:	4630      	mov	r0, r6
 800bcde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bce2:	89ab      	ldrh	r3, [r5, #12]
 800bce4:	2b01      	cmp	r3, #1
 800bce6:	d907      	bls.n	800bcf8 <_fwalk_sglue+0x38>
 800bce8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bcec:	3301      	adds	r3, #1
 800bcee:	d003      	beq.n	800bcf8 <_fwalk_sglue+0x38>
 800bcf0:	4629      	mov	r1, r5
 800bcf2:	4638      	mov	r0, r7
 800bcf4:	47c0      	blx	r8
 800bcf6:	4306      	orrs	r6, r0
 800bcf8:	3568      	adds	r5, #104	; 0x68
 800bcfa:	e7e9      	b.n	800bcd0 <_fwalk_sglue+0x10>

0800bcfc <sniprintf>:
 800bcfc:	b40c      	push	{r2, r3}
 800bcfe:	b530      	push	{r4, r5, lr}
 800bd00:	4b17      	ldr	r3, [pc, #92]	; (800bd60 <sniprintf+0x64>)
 800bd02:	1e0c      	subs	r4, r1, #0
 800bd04:	681d      	ldr	r5, [r3, #0]
 800bd06:	b09d      	sub	sp, #116	; 0x74
 800bd08:	da08      	bge.n	800bd1c <sniprintf+0x20>
 800bd0a:	238b      	movs	r3, #139	; 0x8b
 800bd0c:	602b      	str	r3, [r5, #0]
 800bd0e:	f04f 30ff 	mov.w	r0, #4294967295
 800bd12:	b01d      	add	sp, #116	; 0x74
 800bd14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bd18:	b002      	add	sp, #8
 800bd1a:	4770      	bx	lr
 800bd1c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bd20:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bd24:	bf14      	ite	ne
 800bd26:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bd2a:	4623      	moveq	r3, r4
 800bd2c:	9304      	str	r3, [sp, #16]
 800bd2e:	9307      	str	r3, [sp, #28]
 800bd30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bd34:	9002      	str	r0, [sp, #8]
 800bd36:	9006      	str	r0, [sp, #24]
 800bd38:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bd3c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bd3e:	ab21      	add	r3, sp, #132	; 0x84
 800bd40:	a902      	add	r1, sp, #8
 800bd42:	4628      	mov	r0, r5
 800bd44:	9301      	str	r3, [sp, #4]
 800bd46:	f002 fba9 	bl	800e49c <_svfiprintf_r>
 800bd4a:	1c43      	adds	r3, r0, #1
 800bd4c:	bfbc      	itt	lt
 800bd4e:	238b      	movlt	r3, #139	; 0x8b
 800bd50:	602b      	strlt	r3, [r5, #0]
 800bd52:	2c00      	cmp	r4, #0
 800bd54:	d0dd      	beq.n	800bd12 <sniprintf+0x16>
 800bd56:	9b02      	ldr	r3, [sp, #8]
 800bd58:	2200      	movs	r2, #0
 800bd5a:	701a      	strb	r2, [r3, #0]
 800bd5c:	e7d9      	b.n	800bd12 <sniprintf+0x16>
 800bd5e:	bf00      	nop
 800bd60:	2400006c 	.word	0x2400006c

0800bd64 <siprintf>:
 800bd64:	b40e      	push	{r1, r2, r3}
 800bd66:	b500      	push	{lr}
 800bd68:	b09c      	sub	sp, #112	; 0x70
 800bd6a:	ab1d      	add	r3, sp, #116	; 0x74
 800bd6c:	9002      	str	r0, [sp, #8]
 800bd6e:	9006      	str	r0, [sp, #24]
 800bd70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bd74:	4809      	ldr	r0, [pc, #36]	; (800bd9c <siprintf+0x38>)
 800bd76:	9107      	str	r1, [sp, #28]
 800bd78:	9104      	str	r1, [sp, #16]
 800bd7a:	4909      	ldr	r1, [pc, #36]	; (800bda0 <siprintf+0x3c>)
 800bd7c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd80:	9105      	str	r1, [sp, #20]
 800bd82:	6800      	ldr	r0, [r0, #0]
 800bd84:	9301      	str	r3, [sp, #4]
 800bd86:	a902      	add	r1, sp, #8
 800bd88:	f002 fb88 	bl	800e49c <_svfiprintf_r>
 800bd8c:	9b02      	ldr	r3, [sp, #8]
 800bd8e:	2200      	movs	r2, #0
 800bd90:	701a      	strb	r2, [r3, #0]
 800bd92:	b01c      	add	sp, #112	; 0x70
 800bd94:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd98:	b003      	add	sp, #12
 800bd9a:	4770      	bx	lr
 800bd9c:	2400006c 	.word	0x2400006c
 800bda0:	ffff0208 	.word	0xffff0208

0800bda4 <__sread>:
 800bda4:	b510      	push	{r4, lr}
 800bda6:	460c      	mov	r4, r1
 800bda8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdac:	f000 f8c2 	bl	800bf34 <_read_r>
 800bdb0:	2800      	cmp	r0, #0
 800bdb2:	bfab      	itete	ge
 800bdb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bdb6:	89a3      	ldrhlt	r3, [r4, #12]
 800bdb8:	181b      	addge	r3, r3, r0
 800bdba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bdbe:	bfac      	ite	ge
 800bdc0:	6563      	strge	r3, [r4, #84]	; 0x54
 800bdc2:	81a3      	strhlt	r3, [r4, #12]
 800bdc4:	bd10      	pop	{r4, pc}

0800bdc6 <__swrite>:
 800bdc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdca:	461f      	mov	r7, r3
 800bdcc:	898b      	ldrh	r3, [r1, #12]
 800bdce:	05db      	lsls	r3, r3, #23
 800bdd0:	4605      	mov	r5, r0
 800bdd2:	460c      	mov	r4, r1
 800bdd4:	4616      	mov	r6, r2
 800bdd6:	d505      	bpl.n	800bde4 <__swrite+0x1e>
 800bdd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bddc:	2302      	movs	r3, #2
 800bdde:	2200      	movs	r2, #0
 800bde0:	f000 f896 	bl	800bf10 <_lseek_r>
 800bde4:	89a3      	ldrh	r3, [r4, #12]
 800bde6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bdea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bdee:	81a3      	strh	r3, [r4, #12]
 800bdf0:	4632      	mov	r2, r6
 800bdf2:	463b      	mov	r3, r7
 800bdf4:	4628      	mov	r0, r5
 800bdf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bdfa:	f000 b8ad 	b.w	800bf58 <_write_r>

0800bdfe <__sseek>:
 800bdfe:	b510      	push	{r4, lr}
 800be00:	460c      	mov	r4, r1
 800be02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be06:	f000 f883 	bl	800bf10 <_lseek_r>
 800be0a:	1c43      	adds	r3, r0, #1
 800be0c:	89a3      	ldrh	r3, [r4, #12]
 800be0e:	bf15      	itete	ne
 800be10:	6560      	strne	r0, [r4, #84]	; 0x54
 800be12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800be16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800be1a:	81a3      	strheq	r3, [r4, #12]
 800be1c:	bf18      	it	ne
 800be1e:	81a3      	strhne	r3, [r4, #12]
 800be20:	bd10      	pop	{r4, pc}

0800be22 <__sclose>:
 800be22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be26:	f000 b80d 	b.w	800be44 <_close_r>

0800be2a <memset>:
 800be2a:	4402      	add	r2, r0
 800be2c:	4603      	mov	r3, r0
 800be2e:	4293      	cmp	r3, r2
 800be30:	d100      	bne.n	800be34 <memset+0xa>
 800be32:	4770      	bx	lr
 800be34:	f803 1b01 	strb.w	r1, [r3], #1
 800be38:	e7f9      	b.n	800be2e <memset+0x4>
	...

0800be3c <_localeconv_r>:
 800be3c:	4800      	ldr	r0, [pc, #0]	; (800be40 <_localeconv_r+0x4>)
 800be3e:	4770      	bx	lr
 800be40:	24000160 	.word	0x24000160

0800be44 <_close_r>:
 800be44:	b538      	push	{r3, r4, r5, lr}
 800be46:	4d06      	ldr	r5, [pc, #24]	; (800be60 <_close_r+0x1c>)
 800be48:	2300      	movs	r3, #0
 800be4a:	4604      	mov	r4, r0
 800be4c:	4608      	mov	r0, r1
 800be4e:	602b      	str	r3, [r5, #0]
 800be50:	f7f5 fd2f 	bl	80018b2 <_close>
 800be54:	1c43      	adds	r3, r0, #1
 800be56:	d102      	bne.n	800be5e <_close_r+0x1a>
 800be58:	682b      	ldr	r3, [r5, #0]
 800be5a:	b103      	cbz	r3, 800be5e <_close_r+0x1a>
 800be5c:	6023      	str	r3, [r4, #0]
 800be5e:	bd38      	pop	{r3, r4, r5, pc}
 800be60:	24005534 	.word	0x24005534

0800be64 <_reclaim_reent>:
 800be64:	4b29      	ldr	r3, [pc, #164]	; (800bf0c <_reclaim_reent+0xa8>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	4283      	cmp	r3, r0
 800be6a:	b570      	push	{r4, r5, r6, lr}
 800be6c:	4604      	mov	r4, r0
 800be6e:	d04b      	beq.n	800bf08 <_reclaim_reent+0xa4>
 800be70:	69c3      	ldr	r3, [r0, #28]
 800be72:	b143      	cbz	r3, 800be86 <_reclaim_reent+0x22>
 800be74:	68db      	ldr	r3, [r3, #12]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d144      	bne.n	800bf04 <_reclaim_reent+0xa0>
 800be7a:	69e3      	ldr	r3, [r4, #28]
 800be7c:	6819      	ldr	r1, [r3, #0]
 800be7e:	b111      	cbz	r1, 800be86 <_reclaim_reent+0x22>
 800be80:	4620      	mov	r0, r4
 800be82:	f000 feb1 	bl	800cbe8 <_free_r>
 800be86:	6961      	ldr	r1, [r4, #20]
 800be88:	b111      	cbz	r1, 800be90 <_reclaim_reent+0x2c>
 800be8a:	4620      	mov	r0, r4
 800be8c:	f000 feac 	bl	800cbe8 <_free_r>
 800be90:	69e1      	ldr	r1, [r4, #28]
 800be92:	b111      	cbz	r1, 800be9a <_reclaim_reent+0x36>
 800be94:	4620      	mov	r0, r4
 800be96:	f000 fea7 	bl	800cbe8 <_free_r>
 800be9a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800be9c:	b111      	cbz	r1, 800bea4 <_reclaim_reent+0x40>
 800be9e:	4620      	mov	r0, r4
 800bea0:	f000 fea2 	bl	800cbe8 <_free_r>
 800bea4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bea6:	b111      	cbz	r1, 800beae <_reclaim_reent+0x4a>
 800bea8:	4620      	mov	r0, r4
 800beaa:	f000 fe9d 	bl	800cbe8 <_free_r>
 800beae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800beb0:	b111      	cbz	r1, 800beb8 <_reclaim_reent+0x54>
 800beb2:	4620      	mov	r0, r4
 800beb4:	f000 fe98 	bl	800cbe8 <_free_r>
 800beb8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800beba:	b111      	cbz	r1, 800bec2 <_reclaim_reent+0x5e>
 800bebc:	4620      	mov	r0, r4
 800bebe:	f000 fe93 	bl	800cbe8 <_free_r>
 800bec2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800bec4:	b111      	cbz	r1, 800becc <_reclaim_reent+0x68>
 800bec6:	4620      	mov	r0, r4
 800bec8:	f000 fe8e 	bl	800cbe8 <_free_r>
 800becc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800bece:	b111      	cbz	r1, 800bed6 <_reclaim_reent+0x72>
 800bed0:	4620      	mov	r0, r4
 800bed2:	f000 fe89 	bl	800cbe8 <_free_r>
 800bed6:	6a23      	ldr	r3, [r4, #32]
 800bed8:	b1b3      	cbz	r3, 800bf08 <_reclaim_reent+0xa4>
 800beda:	4620      	mov	r0, r4
 800bedc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bee0:	4718      	bx	r3
 800bee2:	5949      	ldr	r1, [r1, r5]
 800bee4:	b941      	cbnz	r1, 800bef8 <_reclaim_reent+0x94>
 800bee6:	3504      	adds	r5, #4
 800bee8:	69e3      	ldr	r3, [r4, #28]
 800beea:	2d80      	cmp	r5, #128	; 0x80
 800beec:	68d9      	ldr	r1, [r3, #12]
 800beee:	d1f8      	bne.n	800bee2 <_reclaim_reent+0x7e>
 800bef0:	4620      	mov	r0, r4
 800bef2:	f000 fe79 	bl	800cbe8 <_free_r>
 800bef6:	e7c0      	b.n	800be7a <_reclaim_reent+0x16>
 800bef8:	680e      	ldr	r6, [r1, #0]
 800befa:	4620      	mov	r0, r4
 800befc:	f000 fe74 	bl	800cbe8 <_free_r>
 800bf00:	4631      	mov	r1, r6
 800bf02:	e7ef      	b.n	800bee4 <_reclaim_reent+0x80>
 800bf04:	2500      	movs	r5, #0
 800bf06:	e7ef      	b.n	800bee8 <_reclaim_reent+0x84>
 800bf08:	bd70      	pop	{r4, r5, r6, pc}
 800bf0a:	bf00      	nop
 800bf0c:	2400006c 	.word	0x2400006c

0800bf10 <_lseek_r>:
 800bf10:	b538      	push	{r3, r4, r5, lr}
 800bf12:	4d07      	ldr	r5, [pc, #28]	; (800bf30 <_lseek_r+0x20>)
 800bf14:	4604      	mov	r4, r0
 800bf16:	4608      	mov	r0, r1
 800bf18:	4611      	mov	r1, r2
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	602a      	str	r2, [r5, #0]
 800bf1e:	461a      	mov	r2, r3
 800bf20:	f7f5 fcee 	bl	8001900 <_lseek>
 800bf24:	1c43      	adds	r3, r0, #1
 800bf26:	d102      	bne.n	800bf2e <_lseek_r+0x1e>
 800bf28:	682b      	ldr	r3, [r5, #0]
 800bf2a:	b103      	cbz	r3, 800bf2e <_lseek_r+0x1e>
 800bf2c:	6023      	str	r3, [r4, #0]
 800bf2e:	bd38      	pop	{r3, r4, r5, pc}
 800bf30:	24005534 	.word	0x24005534

0800bf34 <_read_r>:
 800bf34:	b538      	push	{r3, r4, r5, lr}
 800bf36:	4d07      	ldr	r5, [pc, #28]	; (800bf54 <_read_r+0x20>)
 800bf38:	4604      	mov	r4, r0
 800bf3a:	4608      	mov	r0, r1
 800bf3c:	4611      	mov	r1, r2
 800bf3e:	2200      	movs	r2, #0
 800bf40:	602a      	str	r2, [r5, #0]
 800bf42:	461a      	mov	r2, r3
 800bf44:	f7f5 fc7c 	bl	8001840 <_read>
 800bf48:	1c43      	adds	r3, r0, #1
 800bf4a:	d102      	bne.n	800bf52 <_read_r+0x1e>
 800bf4c:	682b      	ldr	r3, [r5, #0]
 800bf4e:	b103      	cbz	r3, 800bf52 <_read_r+0x1e>
 800bf50:	6023      	str	r3, [r4, #0]
 800bf52:	bd38      	pop	{r3, r4, r5, pc}
 800bf54:	24005534 	.word	0x24005534

0800bf58 <_write_r>:
 800bf58:	b538      	push	{r3, r4, r5, lr}
 800bf5a:	4d07      	ldr	r5, [pc, #28]	; (800bf78 <_write_r+0x20>)
 800bf5c:	4604      	mov	r4, r0
 800bf5e:	4608      	mov	r0, r1
 800bf60:	4611      	mov	r1, r2
 800bf62:	2200      	movs	r2, #0
 800bf64:	602a      	str	r2, [r5, #0]
 800bf66:	461a      	mov	r2, r3
 800bf68:	f7f5 fc87 	bl	800187a <_write>
 800bf6c:	1c43      	adds	r3, r0, #1
 800bf6e:	d102      	bne.n	800bf76 <_write_r+0x1e>
 800bf70:	682b      	ldr	r3, [r5, #0]
 800bf72:	b103      	cbz	r3, 800bf76 <_write_r+0x1e>
 800bf74:	6023      	str	r3, [r4, #0]
 800bf76:	bd38      	pop	{r3, r4, r5, pc}
 800bf78:	24005534 	.word	0x24005534

0800bf7c <__errno>:
 800bf7c:	4b01      	ldr	r3, [pc, #4]	; (800bf84 <__errno+0x8>)
 800bf7e:	6818      	ldr	r0, [r3, #0]
 800bf80:	4770      	bx	lr
 800bf82:	bf00      	nop
 800bf84:	2400006c 	.word	0x2400006c

0800bf88 <__libc_init_array>:
 800bf88:	b570      	push	{r4, r5, r6, lr}
 800bf8a:	4d0d      	ldr	r5, [pc, #52]	; (800bfc0 <__libc_init_array+0x38>)
 800bf8c:	4c0d      	ldr	r4, [pc, #52]	; (800bfc4 <__libc_init_array+0x3c>)
 800bf8e:	1b64      	subs	r4, r4, r5
 800bf90:	10a4      	asrs	r4, r4, #2
 800bf92:	2600      	movs	r6, #0
 800bf94:	42a6      	cmp	r6, r4
 800bf96:	d109      	bne.n	800bfac <__libc_init_array+0x24>
 800bf98:	4d0b      	ldr	r5, [pc, #44]	; (800bfc8 <__libc_init_array+0x40>)
 800bf9a:	4c0c      	ldr	r4, [pc, #48]	; (800bfcc <__libc_init_array+0x44>)
 800bf9c:	f003 fb0c 	bl	800f5b8 <_init>
 800bfa0:	1b64      	subs	r4, r4, r5
 800bfa2:	10a4      	asrs	r4, r4, #2
 800bfa4:	2600      	movs	r6, #0
 800bfa6:	42a6      	cmp	r6, r4
 800bfa8:	d105      	bne.n	800bfb6 <__libc_init_array+0x2e>
 800bfaa:	bd70      	pop	{r4, r5, r6, pc}
 800bfac:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfb0:	4798      	blx	r3
 800bfb2:	3601      	adds	r6, #1
 800bfb4:	e7ee      	b.n	800bf94 <__libc_init_array+0xc>
 800bfb6:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfba:	4798      	blx	r3
 800bfbc:	3601      	adds	r6, #1
 800bfbe:	e7f2      	b.n	800bfa6 <__libc_init_array+0x1e>
 800bfc0:	0800fad0 	.word	0x0800fad0
 800bfc4:	0800fad0 	.word	0x0800fad0
 800bfc8:	0800fad0 	.word	0x0800fad0
 800bfcc:	0800fad4 	.word	0x0800fad4

0800bfd0 <__retarget_lock_acquire_recursive>:
 800bfd0:	4770      	bx	lr

0800bfd2 <__retarget_lock_release_recursive>:
 800bfd2:	4770      	bx	lr

0800bfd4 <memcpy>:
 800bfd4:	440a      	add	r2, r1
 800bfd6:	4291      	cmp	r1, r2
 800bfd8:	f100 33ff 	add.w	r3, r0, #4294967295
 800bfdc:	d100      	bne.n	800bfe0 <memcpy+0xc>
 800bfde:	4770      	bx	lr
 800bfe0:	b510      	push	{r4, lr}
 800bfe2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bfe6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bfea:	4291      	cmp	r1, r2
 800bfec:	d1f9      	bne.n	800bfe2 <memcpy+0xe>
 800bfee:	bd10      	pop	{r4, pc}

0800bff0 <nanf>:
 800bff0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bff8 <nanf+0x8>
 800bff4:	4770      	bx	lr
 800bff6:	bf00      	nop
 800bff8:	7fc00000 	.word	0x7fc00000

0800bffc <quorem>:
 800bffc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c000:	6903      	ldr	r3, [r0, #16]
 800c002:	690c      	ldr	r4, [r1, #16]
 800c004:	42a3      	cmp	r3, r4
 800c006:	4607      	mov	r7, r0
 800c008:	db7e      	blt.n	800c108 <quorem+0x10c>
 800c00a:	3c01      	subs	r4, #1
 800c00c:	f101 0814 	add.w	r8, r1, #20
 800c010:	f100 0514 	add.w	r5, r0, #20
 800c014:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c018:	9301      	str	r3, [sp, #4]
 800c01a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c01e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c022:	3301      	adds	r3, #1
 800c024:	429a      	cmp	r2, r3
 800c026:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c02a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c02e:	fbb2 f6f3 	udiv	r6, r2, r3
 800c032:	d331      	bcc.n	800c098 <quorem+0x9c>
 800c034:	f04f 0e00 	mov.w	lr, #0
 800c038:	4640      	mov	r0, r8
 800c03a:	46ac      	mov	ip, r5
 800c03c:	46f2      	mov	sl, lr
 800c03e:	f850 2b04 	ldr.w	r2, [r0], #4
 800c042:	b293      	uxth	r3, r2
 800c044:	fb06 e303 	mla	r3, r6, r3, lr
 800c048:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c04c:	0c1a      	lsrs	r2, r3, #16
 800c04e:	b29b      	uxth	r3, r3
 800c050:	ebaa 0303 	sub.w	r3, sl, r3
 800c054:	f8dc a000 	ldr.w	sl, [ip]
 800c058:	fa13 f38a 	uxtah	r3, r3, sl
 800c05c:	fb06 220e 	mla	r2, r6, lr, r2
 800c060:	9300      	str	r3, [sp, #0]
 800c062:	9b00      	ldr	r3, [sp, #0]
 800c064:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c068:	b292      	uxth	r2, r2
 800c06a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c06e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c072:	f8bd 3000 	ldrh.w	r3, [sp]
 800c076:	4581      	cmp	r9, r0
 800c078:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c07c:	f84c 3b04 	str.w	r3, [ip], #4
 800c080:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c084:	d2db      	bcs.n	800c03e <quorem+0x42>
 800c086:	f855 300b 	ldr.w	r3, [r5, fp]
 800c08a:	b92b      	cbnz	r3, 800c098 <quorem+0x9c>
 800c08c:	9b01      	ldr	r3, [sp, #4]
 800c08e:	3b04      	subs	r3, #4
 800c090:	429d      	cmp	r5, r3
 800c092:	461a      	mov	r2, r3
 800c094:	d32c      	bcc.n	800c0f0 <quorem+0xf4>
 800c096:	613c      	str	r4, [r7, #16]
 800c098:	4638      	mov	r0, r7
 800c09a:	f001 f96b 	bl	800d374 <__mcmp>
 800c09e:	2800      	cmp	r0, #0
 800c0a0:	db22      	blt.n	800c0e8 <quorem+0xec>
 800c0a2:	3601      	adds	r6, #1
 800c0a4:	4629      	mov	r1, r5
 800c0a6:	2000      	movs	r0, #0
 800c0a8:	f858 2b04 	ldr.w	r2, [r8], #4
 800c0ac:	f8d1 c000 	ldr.w	ip, [r1]
 800c0b0:	b293      	uxth	r3, r2
 800c0b2:	1ac3      	subs	r3, r0, r3
 800c0b4:	0c12      	lsrs	r2, r2, #16
 800c0b6:	fa13 f38c 	uxtah	r3, r3, ip
 800c0ba:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c0be:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c0c2:	b29b      	uxth	r3, r3
 800c0c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c0c8:	45c1      	cmp	r9, r8
 800c0ca:	f841 3b04 	str.w	r3, [r1], #4
 800c0ce:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c0d2:	d2e9      	bcs.n	800c0a8 <quorem+0xac>
 800c0d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c0d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c0dc:	b922      	cbnz	r2, 800c0e8 <quorem+0xec>
 800c0de:	3b04      	subs	r3, #4
 800c0e0:	429d      	cmp	r5, r3
 800c0e2:	461a      	mov	r2, r3
 800c0e4:	d30a      	bcc.n	800c0fc <quorem+0x100>
 800c0e6:	613c      	str	r4, [r7, #16]
 800c0e8:	4630      	mov	r0, r6
 800c0ea:	b003      	add	sp, #12
 800c0ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0f0:	6812      	ldr	r2, [r2, #0]
 800c0f2:	3b04      	subs	r3, #4
 800c0f4:	2a00      	cmp	r2, #0
 800c0f6:	d1ce      	bne.n	800c096 <quorem+0x9a>
 800c0f8:	3c01      	subs	r4, #1
 800c0fa:	e7c9      	b.n	800c090 <quorem+0x94>
 800c0fc:	6812      	ldr	r2, [r2, #0]
 800c0fe:	3b04      	subs	r3, #4
 800c100:	2a00      	cmp	r2, #0
 800c102:	d1f0      	bne.n	800c0e6 <quorem+0xea>
 800c104:	3c01      	subs	r4, #1
 800c106:	e7eb      	b.n	800c0e0 <quorem+0xe4>
 800c108:	2000      	movs	r0, #0
 800c10a:	e7ee      	b.n	800c0ea <quorem+0xee>
 800c10c:	0000      	movs	r0, r0
	...

0800c110 <_dtoa_r>:
 800c110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c114:	ed2d 8b02 	vpush	{d8}
 800c118:	69c5      	ldr	r5, [r0, #28]
 800c11a:	b091      	sub	sp, #68	; 0x44
 800c11c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c120:	ec59 8b10 	vmov	r8, r9, d0
 800c124:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800c126:	9106      	str	r1, [sp, #24]
 800c128:	4606      	mov	r6, r0
 800c12a:	9208      	str	r2, [sp, #32]
 800c12c:	930c      	str	r3, [sp, #48]	; 0x30
 800c12e:	b975      	cbnz	r5, 800c14e <_dtoa_r+0x3e>
 800c130:	2010      	movs	r0, #16
 800c132:	f000 fda5 	bl	800cc80 <malloc>
 800c136:	4602      	mov	r2, r0
 800c138:	61f0      	str	r0, [r6, #28]
 800c13a:	b920      	cbnz	r0, 800c146 <_dtoa_r+0x36>
 800c13c:	4ba6      	ldr	r3, [pc, #664]	; (800c3d8 <_dtoa_r+0x2c8>)
 800c13e:	21ef      	movs	r1, #239	; 0xef
 800c140:	48a6      	ldr	r0, [pc, #664]	; (800c3dc <_dtoa_r+0x2cc>)
 800c142:	f002 fb9d 	bl	800e880 <__assert_func>
 800c146:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c14a:	6005      	str	r5, [r0, #0]
 800c14c:	60c5      	str	r5, [r0, #12]
 800c14e:	69f3      	ldr	r3, [r6, #28]
 800c150:	6819      	ldr	r1, [r3, #0]
 800c152:	b151      	cbz	r1, 800c16a <_dtoa_r+0x5a>
 800c154:	685a      	ldr	r2, [r3, #4]
 800c156:	604a      	str	r2, [r1, #4]
 800c158:	2301      	movs	r3, #1
 800c15a:	4093      	lsls	r3, r2
 800c15c:	608b      	str	r3, [r1, #8]
 800c15e:	4630      	mov	r0, r6
 800c160:	f000 fe82 	bl	800ce68 <_Bfree>
 800c164:	69f3      	ldr	r3, [r6, #28]
 800c166:	2200      	movs	r2, #0
 800c168:	601a      	str	r2, [r3, #0]
 800c16a:	f1b9 0300 	subs.w	r3, r9, #0
 800c16e:	bfbb      	ittet	lt
 800c170:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c174:	9303      	strlt	r3, [sp, #12]
 800c176:	2300      	movge	r3, #0
 800c178:	2201      	movlt	r2, #1
 800c17a:	bfac      	ite	ge
 800c17c:	6023      	strge	r3, [r4, #0]
 800c17e:	6022      	strlt	r2, [r4, #0]
 800c180:	4b97      	ldr	r3, [pc, #604]	; (800c3e0 <_dtoa_r+0x2d0>)
 800c182:	9c03      	ldr	r4, [sp, #12]
 800c184:	43a3      	bics	r3, r4
 800c186:	d11c      	bne.n	800c1c2 <_dtoa_r+0xb2>
 800c188:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c18a:	f242 730f 	movw	r3, #9999	; 0x270f
 800c18e:	6013      	str	r3, [r2, #0]
 800c190:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800c194:	ea53 0308 	orrs.w	r3, r3, r8
 800c198:	f000 84fb 	beq.w	800cb92 <_dtoa_r+0xa82>
 800c19c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c19e:	b963      	cbnz	r3, 800c1ba <_dtoa_r+0xaa>
 800c1a0:	4b90      	ldr	r3, [pc, #576]	; (800c3e4 <_dtoa_r+0x2d4>)
 800c1a2:	e020      	b.n	800c1e6 <_dtoa_r+0xd6>
 800c1a4:	4b90      	ldr	r3, [pc, #576]	; (800c3e8 <_dtoa_r+0x2d8>)
 800c1a6:	9301      	str	r3, [sp, #4]
 800c1a8:	3308      	adds	r3, #8
 800c1aa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c1ac:	6013      	str	r3, [r2, #0]
 800c1ae:	9801      	ldr	r0, [sp, #4]
 800c1b0:	b011      	add	sp, #68	; 0x44
 800c1b2:	ecbd 8b02 	vpop	{d8}
 800c1b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1ba:	4b8a      	ldr	r3, [pc, #552]	; (800c3e4 <_dtoa_r+0x2d4>)
 800c1bc:	9301      	str	r3, [sp, #4]
 800c1be:	3303      	adds	r3, #3
 800c1c0:	e7f3      	b.n	800c1aa <_dtoa_r+0x9a>
 800c1c2:	ed9d 8b02 	vldr	d8, [sp, #8]
 800c1c6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c1ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1ce:	d10c      	bne.n	800c1ea <_dtoa_r+0xda>
 800c1d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	6013      	str	r3, [r2, #0]
 800c1d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	f000 84d7 	beq.w	800cb8c <_dtoa_r+0xa7c>
 800c1de:	4b83      	ldr	r3, [pc, #524]	; (800c3ec <_dtoa_r+0x2dc>)
 800c1e0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c1e2:	6013      	str	r3, [r2, #0]
 800c1e4:	3b01      	subs	r3, #1
 800c1e6:	9301      	str	r3, [sp, #4]
 800c1e8:	e7e1      	b.n	800c1ae <_dtoa_r+0x9e>
 800c1ea:	aa0e      	add	r2, sp, #56	; 0x38
 800c1ec:	a90f      	add	r1, sp, #60	; 0x3c
 800c1ee:	4630      	mov	r0, r6
 800c1f0:	eeb0 0b48 	vmov.f64	d0, d8
 800c1f4:	f001 f9d4 	bl	800d5a0 <__d2b>
 800c1f8:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800c1fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c1fe:	4605      	mov	r5, r0
 800c200:	2b00      	cmp	r3, #0
 800c202:	d046      	beq.n	800c292 <_dtoa_r+0x182>
 800c204:	eeb0 7b48 	vmov.f64	d7, d8
 800c208:	ee18 1a90 	vmov	r1, s17
 800c20c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c210:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800c214:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800c218:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c21c:	2000      	movs	r0, #0
 800c21e:	ee07 1a90 	vmov	s15, r1
 800c222:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800c226:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800c3c0 <_dtoa_r+0x2b0>
 800c22a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c22e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800c3c8 <_dtoa_r+0x2b8>
 800c232:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c236:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800c3d0 <_dtoa_r+0x2c0>
 800c23a:	ee07 3a90 	vmov	s15, r3
 800c23e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800c242:	eeb0 7b46 	vmov.f64	d7, d6
 800c246:	eea4 7b05 	vfma.f64	d7, d4, d5
 800c24a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800c24e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800c252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c256:	ee16 ba90 	vmov	fp, s13
 800c25a:	9009      	str	r0, [sp, #36]	; 0x24
 800c25c:	d508      	bpl.n	800c270 <_dtoa_r+0x160>
 800c25e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800c262:	eeb4 6b47 	vcmp.f64	d6, d7
 800c266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c26a:	bf18      	it	ne
 800c26c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800c270:	f1bb 0f16 	cmp.w	fp, #22
 800c274:	d82b      	bhi.n	800c2ce <_dtoa_r+0x1be>
 800c276:	495e      	ldr	r1, [pc, #376]	; (800c3f0 <_dtoa_r+0x2e0>)
 800c278:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800c27c:	ed91 7b00 	vldr	d7, [r1]
 800c280:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c288:	d501      	bpl.n	800c28e <_dtoa_r+0x17e>
 800c28a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c28e:	2100      	movs	r1, #0
 800c290:	e01e      	b.n	800c2d0 <_dtoa_r+0x1c0>
 800c292:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c294:	4413      	add	r3, r2
 800c296:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800c29a:	2920      	cmp	r1, #32
 800c29c:	bfc1      	itttt	gt
 800c29e:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800c2a2:	408c      	lslgt	r4, r1
 800c2a4:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800c2a8:	fa28 f101 	lsrgt.w	r1, r8, r1
 800c2ac:	bfd6      	itet	le
 800c2ae:	f1c1 0120 	rsble	r1, r1, #32
 800c2b2:	4321      	orrgt	r1, r4
 800c2b4:	fa08 f101 	lslle.w	r1, r8, r1
 800c2b8:	ee07 1a90 	vmov	s15, r1
 800c2bc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c2c0:	3b01      	subs	r3, #1
 800c2c2:	ee17 1a90 	vmov	r1, s15
 800c2c6:	2001      	movs	r0, #1
 800c2c8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800c2cc:	e7a7      	b.n	800c21e <_dtoa_r+0x10e>
 800c2ce:	2101      	movs	r1, #1
 800c2d0:	1ad2      	subs	r2, r2, r3
 800c2d2:	1e53      	subs	r3, r2, #1
 800c2d4:	9305      	str	r3, [sp, #20]
 800c2d6:	bf45      	ittet	mi
 800c2d8:	f1c2 0301 	rsbmi	r3, r2, #1
 800c2dc:	9304      	strmi	r3, [sp, #16]
 800c2de:	2300      	movpl	r3, #0
 800c2e0:	2300      	movmi	r3, #0
 800c2e2:	bf4c      	ite	mi
 800c2e4:	9305      	strmi	r3, [sp, #20]
 800c2e6:	9304      	strpl	r3, [sp, #16]
 800c2e8:	f1bb 0f00 	cmp.w	fp, #0
 800c2ec:	910b      	str	r1, [sp, #44]	; 0x2c
 800c2ee:	db18      	blt.n	800c322 <_dtoa_r+0x212>
 800c2f0:	9b05      	ldr	r3, [sp, #20]
 800c2f2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800c2f6:	445b      	add	r3, fp
 800c2f8:	9305      	str	r3, [sp, #20]
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	9a06      	ldr	r2, [sp, #24]
 800c2fe:	2a09      	cmp	r2, #9
 800c300:	d848      	bhi.n	800c394 <_dtoa_r+0x284>
 800c302:	2a05      	cmp	r2, #5
 800c304:	bfc4      	itt	gt
 800c306:	3a04      	subgt	r2, #4
 800c308:	9206      	strgt	r2, [sp, #24]
 800c30a:	9a06      	ldr	r2, [sp, #24]
 800c30c:	f1a2 0202 	sub.w	r2, r2, #2
 800c310:	bfcc      	ite	gt
 800c312:	2400      	movgt	r4, #0
 800c314:	2401      	movle	r4, #1
 800c316:	2a03      	cmp	r2, #3
 800c318:	d847      	bhi.n	800c3aa <_dtoa_r+0x29a>
 800c31a:	e8df f002 	tbb	[pc, r2]
 800c31e:	2d0b      	.short	0x2d0b
 800c320:	392b      	.short	0x392b
 800c322:	9b04      	ldr	r3, [sp, #16]
 800c324:	2200      	movs	r2, #0
 800c326:	eba3 030b 	sub.w	r3, r3, fp
 800c32a:	9304      	str	r3, [sp, #16]
 800c32c:	920a      	str	r2, [sp, #40]	; 0x28
 800c32e:	f1cb 0300 	rsb	r3, fp, #0
 800c332:	e7e3      	b.n	800c2fc <_dtoa_r+0x1ec>
 800c334:	2200      	movs	r2, #0
 800c336:	9207      	str	r2, [sp, #28]
 800c338:	9a08      	ldr	r2, [sp, #32]
 800c33a:	2a00      	cmp	r2, #0
 800c33c:	dc38      	bgt.n	800c3b0 <_dtoa_r+0x2a0>
 800c33e:	f04f 0a01 	mov.w	sl, #1
 800c342:	46d1      	mov	r9, sl
 800c344:	4652      	mov	r2, sl
 800c346:	f8cd a020 	str.w	sl, [sp, #32]
 800c34a:	69f7      	ldr	r7, [r6, #28]
 800c34c:	2100      	movs	r1, #0
 800c34e:	2004      	movs	r0, #4
 800c350:	f100 0c14 	add.w	ip, r0, #20
 800c354:	4594      	cmp	ip, r2
 800c356:	d930      	bls.n	800c3ba <_dtoa_r+0x2aa>
 800c358:	6079      	str	r1, [r7, #4]
 800c35a:	4630      	mov	r0, r6
 800c35c:	930d      	str	r3, [sp, #52]	; 0x34
 800c35e:	f000 fd43 	bl	800cde8 <_Balloc>
 800c362:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c364:	9001      	str	r0, [sp, #4]
 800c366:	4602      	mov	r2, r0
 800c368:	2800      	cmp	r0, #0
 800c36a:	d145      	bne.n	800c3f8 <_dtoa_r+0x2e8>
 800c36c:	4b21      	ldr	r3, [pc, #132]	; (800c3f4 <_dtoa_r+0x2e4>)
 800c36e:	f240 11af 	movw	r1, #431	; 0x1af
 800c372:	e6e5      	b.n	800c140 <_dtoa_r+0x30>
 800c374:	2201      	movs	r2, #1
 800c376:	e7de      	b.n	800c336 <_dtoa_r+0x226>
 800c378:	2200      	movs	r2, #0
 800c37a:	9207      	str	r2, [sp, #28]
 800c37c:	9a08      	ldr	r2, [sp, #32]
 800c37e:	eb0b 0a02 	add.w	sl, fp, r2
 800c382:	f10a 0901 	add.w	r9, sl, #1
 800c386:	464a      	mov	r2, r9
 800c388:	2a01      	cmp	r2, #1
 800c38a:	bfb8      	it	lt
 800c38c:	2201      	movlt	r2, #1
 800c38e:	e7dc      	b.n	800c34a <_dtoa_r+0x23a>
 800c390:	2201      	movs	r2, #1
 800c392:	e7f2      	b.n	800c37a <_dtoa_r+0x26a>
 800c394:	2401      	movs	r4, #1
 800c396:	2200      	movs	r2, #0
 800c398:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800c39c:	f04f 3aff 	mov.w	sl, #4294967295
 800c3a0:	2100      	movs	r1, #0
 800c3a2:	46d1      	mov	r9, sl
 800c3a4:	2212      	movs	r2, #18
 800c3a6:	9108      	str	r1, [sp, #32]
 800c3a8:	e7cf      	b.n	800c34a <_dtoa_r+0x23a>
 800c3aa:	2201      	movs	r2, #1
 800c3ac:	9207      	str	r2, [sp, #28]
 800c3ae:	e7f5      	b.n	800c39c <_dtoa_r+0x28c>
 800c3b0:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c3b4:	46d1      	mov	r9, sl
 800c3b6:	4652      	mov	r2, sl
 800c3b8:	e7c7      	b.n	800c34a <_dtoa_r+0x23a>
 800c3ba:	3101      	adds	r1, #1
 800c3bc:	0040      	lsls	r0, r0, #1
 800c3be:	e7c7      	b.n	800c350 <_dtoa_r+0x240>
 800c3c0:	636f4361 	.word	0x636f4361
 800c3c4:	3fd287a7 	.word	0x3fd287a7
 800c3c8:	8b60c8b3 	.word	0x8b60c8b3
 800c3cc:	3fc68a28 	.word	0x3fc68a28
 800c3d0:	509f79fb 	.word	0x509f79fb
 800c3d4:	3fd34413 	.word	0x3fd34413
 800c3d8:	0800f6e2 	.word	0x0800f6e2
 800c3dc:	0800f6f9 	.word	0x0800f6f9
 800c3e0:	7ff00000 	.word	0x7ff00000
 800c3e4:	0800f6de 	.word	0x0800f6de
 800c3e8:	0800f6d5 	.word	0x0800f6d5
 800c3ec:	0800f6ad 	.word	0x0800f6ad
 800c3f0:	0800f7e8 	.word	0x0800f7e8
 800c3f4:	0800f751 	.word	0x0800f751
 800c3f8:	69f2      	ldr	r2, [r6, #28]
 800c3fa:	9901      	ldr	r1, [sp, #4]
 800c3fc:	6011      	str	r1, [r2, #0]
 800c3fe:	f1b9 0f0e 	cmp.w	r9, #14
 800c402:	d86c      	bhi.n	800c4de <_dtoa_r+0x3ce>
 800c404:	2c00      	cmp	r4, #0
 800c406:	d06a      	beq.n	800c4de <_dtoa_r+0x3ce>
 800c408:	f1bb 0f00 	cmp.w	fp, #0
 800c40c:	f340 80a0 	ble.w	800c550 <_dtoa_r+0x440>
 800c410:	4ac1      	ldr	r2, [pc, #772]	; (800c718 <_dtoa_r+0x608>)
 800c412:	f00b 010f 	and.w	r1, fp, #15
 800c416:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800c41a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c41e:	ed92 7b00 	vldr	d7, [r2]
 800c422:	ea4f 122b 	mov.w	r2, fp, asr #4
 800c426:	f000 8087 	beq.w	800c538 <_dtoa_r+0x428>
 800c42a:	49bc      	ldr	r1, [pc, #752]	; (800c71c <_dtoa_r+0x60c>)
 800c42c:	ed91 6b08 	vldr	d6, [r1, #32]
 800c430:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800c434:	ed8d 6b02 	vstr	d6, [sp, #8]
 800c438:	f002 020f 	and.w	r2, r2, #15
 800c43c:	2103      	movs	r1, #3
 800c43e:	48b7      	ldr	r0, [pc, #732]	; (800c71c <_dtoa_r+0x60c>)
 800c440:	2a00      	cmp	r2, #0
 800c442:	d17b      	bne.n	800c53c <_dtoa_r+0x42c>
 800c444:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c448:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c44c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c450:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c452:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c456:	2a00      	cmp	r2, #0
 800c458:	f000 80a0 	beq.w	800c59c <_dtoa_r+0x48c>
 800c45c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800c460:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c468:	f140 8098 	bpl.w	800c59c <_dtoa_r+0x48c>
 800c46c:	f1b9 0f00 	cmp.w	r9, #0
 800c470:	f000 8094 	beq.w	800c59c <_dtoa_r+0x48c>
 800c474:	f1ba 0f00 	cmp.w	sl, #0
 800c478:	dd2f      	ble.n	800c4da <_dtoa_r+0x3ca>
 800c47a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800c47e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c482:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c486:	f10b 32ff 	add.w	r2, fp, #4294967295
 800c48a:	3101      	adds	r1, #1
 800c48c:	4654      	mov	r4, sl
 800c48e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c492:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800c496:	ee07 1a90 	vmov	s15, r1
 800c49a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c49e:	eea7 5b06 	vfma.f64	d5, d7, d6
 800c4a2:	ee15 7a90 	vmov	r7, s11
 800c4a6:	ec51 0b15 	vmov	r0, r1, d5
 800c4aa:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800c4ae:	2c00      	cmp	r4, #0
 800c4b0:	d177      	bne.n	800c5a2 <_dtoa_r+0x492>
 800c4b2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800c4b6:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c4ba:	ec41 0b17 	vmov	d7, r0, r1
 800c4be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c4c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4c6:	f300 826a 	bgt.w	800c99e <_dtoa_r+0x88e>
 800c4ca:	eeb1 7b47 	vneg.f64	d7, d7
 800c4ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c4d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4d6:	f100 8260 	bmi.w	800c99a <_dtoa_r+0x88a>
 800c4da:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c4de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c4e0:	2a00      	cmp	r2, #0
 800c4e2:	f2c0 811d 	blt.w	800c720 <_dtoa_r+0x610>
 800c4e6:	f1bb 0f0e 	cmp.w	fp, #14
 800c4ea:	f300 8119 	bgt.w	800c720 <_dtoa_r+0x610>
 800c4ee:	4b8a      	ldr	r3, [pc, #552]	; (800c718 <_dtoa_r+0x608>)
 800c4f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c4f4:	ed93 6b00 	vldr	d6, [r3]
 800c4f8:	9b08      	ldr	r3, [sp, #32]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	f280 80b7 	bge.w	800c66e <_dtoa_r+0x55e>
 800c500:	f1b9 0f00 	cmp.w	r9, #0
 800c504:	f300 80b3 	bgt.w	800c66e <_dtoa_r+0x55e>
 800c508:	f040 8246 	bne.w	800c998 <_dtoa_r+0x888>
 800c50c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800c510:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c514:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c518:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c51c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c520:	464c      	mov	r4, r9
 800c522:	464f      	mov	r7, r9
 800c524:	f280 821c 	bge.w	800c960 <_dtoa_r+0x850>
 800c528:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c52c:	2331      	movs	r3, #49	; 0x31
 800c52e:	f808 3b01 	strb.w	r3, [r8], #1
 800c532:	f10b 0b01 	add.w	fp, fp, #1
 800c536:	e218      	b.n	800c96a <_dtoa_r+0x85a>
 800c538:	2102      	movs	r1, #2
 800c53a:	e780      	b.n	800c43e <_dtoa_r+0x32e>
 800c53c:	07d4      	lsls	r4, r2, #31
 800c53e:	d504      	bpl.n	800c54a <_dtoa_r+0x43a>
 800c540:	ed90 6b00 	vldr	d6, [r0]
 800c544:	3101      	adds	r1, #1
 800c546:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c54a:	1052      	asrs	r2, r2, #1
 800c54c:	3008      	adds	r0, #8
 800c54e:	e777      	b.n	800c440 <_dtoa_r+0x330>
 800c550:	d022      	beq.n	800c598 <_dtoa_r+0x488>
 800c552:	f1cb 0200 	rsb	r2, fp, #0
 800c556:	4970      	ldr	r1, [pc, #448]	; (800c718 <_dtoa_r+0x608>)
 800c558:	f002 000f 	and.w	r0, r2, #15
 800c55c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c560:	ed91 7b00 	vldr	d7, [r1]
 800c564:	ee28 7b07 	vmul.f64	d7, d8, d7
 800c568:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c56c:	486b      	ldr	r0, [pc, #428]	; (800c71c <_dtoa_r+0x60c>)
 800c56e:	1112      	asrs	r2, r2, #4
 800c570:	2400      	movs	r4, #0
 800c572:	2102      	movs	r1, #2
 800c574:	b92a      	cbnz	r2, 800c582 <_dtoa_r+0x472>
 800c576:	2c00      	cmp	r4, #0
 800c578:	f43f af6a 	beq.w	800c450 <_dtoa_r+0x340>
 800c57c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c580:	e766      	b.n	800c450 <_dtoa_r+0x340>
 800c582:	07d7      	lsls	r7, r2, #31
 800c584:	d505      	bpl.n	800c592 <_dtoa_r+0x482>
 800c586:	ed90 6b00 	vldr	d6, [r0]
 800c58a:	3101      	adds	r1, #1
 800c58c:	2401      	movs	r4, #1
 800c58e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c592:	1052      	asrs	r2, r2, #1
 800c594:	3008      	adds	r0, #8
 800c596:	e7ed      	b.n	800c574 <_dtoa_r+0x464>
 800c598:	2102      	movs	r1, #2
 800c59a:	e759      	b.n	800c450 <_dtoa_r+0x340>
 800c59c:	465a      	mov	r2, fp
 800c59e:	464c      	mov	r4, r9
 800c5a0:	e775      	b.n	800c48e <_dtoa_r+0x37e>
 800c5a2:	ec41 0b17 	vmov	d7, r0, r1
 800c5a6:	495c      	ldr	r1, [pc, #368]	; (800c718 <_dtoa_r+0x608>)
 800c5a8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800c5ac:	ed11 4b02 	vldr	d4, [r1, #-8]
 800c5b0:	9901      	ldr	r1, [sp, #4]
 800c5b2:	440c      	add	r4, r1
 800c5b4:	9907      	ldr	r1, [sp, #28]
 800c5b6:	b351      	cbz	r1, 800c60e <_dtoa_r+0x4fe>
 800c5b8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800c5bc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800c5c0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c5c4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800c5c8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800c5cc:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c5d0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c5d4:	ee14 1a90 	vmov	r1, s9
 800c5d8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c5dc:	3130      	adds	r1, #48	; 0x30
 800c5de:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c5e2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c5e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5ea:	f808 1b01 	strb.w	r1, [r8], #1
 800c5ee:	d439      	bmi.n	800c664 <_dtoa_r+0x554>
 800c5f0:	ee32 5b46 	vsub.f64	d5, d2, d6
 800c5f4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800c5f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5fc:	d472      	bmi.n	800c6e4 <_dtoa_r+0x5d4>
 800c5fe:	45a0      	cmp	r8, r4
 800c600:	f43f af6b 	beq.w	800c4da <_dtoa_r+0x3ca>
 800c604:	ee27 7b03 	vmul.f64	d7, d7, d3
 800c608:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c60c:	e7e0      	b.n	800c5d0 <_dtoa_r+0x4c0>
 800c60e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c612:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c616:	4620      	mov	r0, r4
 800c618:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800c61c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c620:	ee14 1a90 	vmov	r1, s9
 800c624:	3130      	adds	r1, #48	; 0x30
 800c626:	f808 1b01 	strb.w	r1, [r8], #1
 800c62a:	45a0      	cmp	r8, r4
 800c62c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c630:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c634:	d118      	bne.n	800c668 <_dtoa_r+0x558>
 800c636:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800c63a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800c63e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800c642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c646:	dc4d      	bgt.n	800c6e4 <_dtoa_r+0x5d4>
 800c648:	ee35 5b47 	vsub.f64	d5, d5, d7
 800c64c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800c650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c654:	f57f af41 	bpl.w	800c4da <_dtoa_r+0x3ca>
 800c658:	4680      	mov	r8, r0
 800c65a:	3801      	subs	r0, #1
 800c65c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800c660:	2b30      	cmp	r3, #48	; 0x30
 800c662:	d0f9      	beq.n	800c658 <_dtoa_r+0x548>
 800c664:	4693      	mov	fp, r2
 800c666:	e02a      	b.n	800c6be <_dtoa_r+0x5ae>
 800c668:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c66c:	e7d6      	b.n	800c61c <_dtoa_r+0x50c>
 800c66e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c672:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800c676:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c67a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800c67e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800c682:	ee15 3a10 	vmov	r3, s10
 800c686:	3330      	adds	r3, #48	; 0x30
 800c688:	f808 3b01 	strb.w	r3, [r8], #1
 800c68c:	9b01      	ldr	r3, [sp, #4]
 800c68e:	eba8 0303 	sub.w	r3, r8, r3
 800c692:	4599      	cmp	r9, r3
 800c694:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800c698:	eea3 7b46 	vfms.f64	d7, d3, d6
 800c69c:	d133      	bne.n	800c706 <_dtoa_r+0x5f6>
 800c69e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800c6a2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c6a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6aa:	dc1a      	bgt.n	800c6e2 <_dtoa_r+0x5d2>
 800c6ac:	eeb4 7b46 	vcmp.f64	d7, d6
 800c6b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6b4:	d103      	bne.n	800c6be <_dtoa_r+0x5ae>
 800c6b6:	ee15 3a10 	vmov	r3, s10
 800c6ba:	07d9      	lsls	r1, r3, #31
 800c6bc:	d411      	bmi.n	800c6e2 <_dtoa_r+0x5d2>
 800c6be:	4629      	mov	r1, r5
 800c6c0:	4630      	mov	r0, r6
 800c6c2:	f000 fbd1 	bl	800ce68 <_Bfree>
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c6ca:	f888 3000 	strb.w	r3, [r8]
 800c6ce:	f10b 0301 	add.w	r3, fp, #1
 800c6d2:	6013      	str	r3, [r2, #0]
 800c6d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	f43f ad69 	beq.w	800c1ae <_dtoa_r+0x9e>
 800c6dc:	f8c3 8000 	str.w	r8, [r3]
 800c6e0:	e565      	b.n	800c1ae <_dtoa_r+0x9e>
 800c6e2:	465a      	mov	r2, fp
 800c6e4:	4643      	mov	r3, r8
 800c6e6:	4698      	mov	r8, r3
 800c6e8:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800c6ec:	2939      	cmp	r1, #57	; 0x39
 800c6ee:	d106      	bne.n	800c6fe <_dtoa_r+0x5ee>
 800c6f0:	9901      	ldr	r1, [sp, #4]
 800c6f2:	4299      	cmp	r1, r3
 800c6f4:	d1f7      	bne.n	800c6e6 <_dtoa_r+0x5d6>
 800c6f6:	9801      	ldr	r0, [sp, #4]
 800c6f8:	2130      	movs	r1, #48	; 0x30
 800c6fa:	3201      	adds	r2, #1
 800c6fc:	7001      	strb	r1, [r0, #0]
 800c6fe:	7819      	ldrb	r1, [r3, #0]
 800c700:	3101      	adds	r1, #1
 800c702:	7019      	strb	r1, [r3, #0]
 800c704:	e7ae      	b.n	800c664 <_dtoa_r+0x554>
 800c706:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c70a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c70e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c712:	d1b2      	bne.n	800c67a <_dtoa_r+0x56a>
 800c714:	e7d3      	b.n	800c6be <_dtoa_r+0x5ae>
 800c716:	bf00      	nop
 800c718:	0800f7e8 	.word	0x0800f7e8
 800c71c:	0800f7c0 	.word	0x0800f7c0
 800c720:	9907      	ldr	r1, [sp, #28]
 800c722:	2900      	cmp	r1, #0
 800c724:	f000 80d0 	beq.w	800c8c8 <_dtoa_r+0x7b8>
 800c728:	9906      	ldr	r1, [sp, #24]
 800c72a:	2901      	cmp	r1, #1
 800c72c:	f300 80b4 	bgt.w	800c898 <_dtoa_r+0x788>
 800c730:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c732:	2900      	cmp	r1, #0
 800c734:	f000 80ac 	beq.w	800c890 <_dtoa_r+0x780>
 800c738:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c73c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800c740:	461c      	mov	r4, r3
 800c742:	9309      	str	r3, [sp, #36]	; 0x24
 800c744:	9b04      	ldr	r3, [sp, #16]
 800c746:	4413      	add	r3, r2
 800c748:	9304      	str	r3, [sp, #16]
 800c74a:	9b05      	ldr	r3, [sp, #20]
 800c74c:	2101      	movs	r1, #1
 800c74e:	4413      	add	r3, r2
 800c750:	4630      	mov	r0, r6
 800c752:	9305      	str	r3, [sp, #20]
 800c754:	f000 fc88 	bl	800d068 <__i2b>
 800c758:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c75a:	4607      	mov	r7, r0
 800c75c:	f1b8 0f00 	cmp.w	r8, #0
 800c760:	d00d      	beq.n	800c77e <_dtoa_r+0x66e>
 800c762:	9a05      	ldr	r2, [sp, #20]
 800c764:	2a00      	cmp	r2, #0
 800c766:	dd0a      	ble.n	800c77e <_dtoa_r+0x66e>
 800c768:	4542      	cmp	r2, r8
 800c76a:	9904      	ldr	r1, [sp, #16]
 800c76c:	bfa8      	it	ge
 800c76e:	4642      	movge	r2, r8
 800c770:	1a89      	subs	r1, r1, r2
 800c772:	9104      	str	r1, [sp, #16]
 800c774:	9905      	ldr	r1, [sp, #20]
 800c776:	eba8 0802 	sub.w	r8, r8, r2
 800c77a:	1a8a      	subs	r2, r1, r2
 800c77c:	9205      	str	r2, [sp, #20]
 800c77e:	b303      	cbz	r3, 800c7c2 <_dtoa_r+0x6b2>
 800c780:	9a07      	ldr	r2, [sp, #28]
 800c782:	2a00      	cmp	r2, #0
 800c784:	f000 80a5 	beq.w	800c8d2 <_dtoa_r+0x7c2>
 800c788:	2c00      	cmp	r4, #0
 800c78a:	dd13      	ble.n	800c7b4 <_dtoa_r+0x6a4>
 800c78c:	4639      	mov	r1, r7
 800c78e:	4622      	mov	r2, r4
 800c790:	4630      	mov	r0, r6
 800c792:	930d      	str	r3, [sp, #52]	; 0x34
 800c794:	f000 fd28 	bl	800d1e8 <__pow5mult>
 800c798:	462a      	mov	r2, r5
 800c79a:	4601      	mov	r1, r0
 800c79c:	4607      	mov	r7, r0
 800c79e:	4630      	mov	r0, r6
 800c7a0:	f000 fc78 	bl	800d094 <__multiply>
 800c7a4:	4629      	mov	r1, r5
 800c7a6:	9009      	str	r0, [sp, #36]	; 0x24
 800c7a8:	4630      	mov	r0, r6
 800c7aa:	f000 fb5d 	bl	800ce68 <_Bfree>
 800c7ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c7b2:	4615      	mov	r5, r2
 800c7b4:	1b1a      	subs	r2, r3, r4
 800c7b6:	d004      	beq.n	800c7c2 <_dtoa_r+0x6b2>
 800c7b8:	4629      	mov	r1, r5
 800c7ba:	4630      	mov	r0, r6
 800c7bc:	f000 fd14 	bl	800d1e8 <__pow5mult>
 800c7c0:	4605      	mov	r5, r0
 800c7c2:	2101      	movs	r1, #1
 800c7c4:	4630      	mov	r0, r6
 800c7c6:	f000 fc4f 	bl	800d068 <__i2b>
 800c7ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	4604      	mov	r4, r0
 800c7d0:	f340 8081 	ble.w	800c8d6 <_dtoa_r+0x7c6>
 800c7d4:	461a      	mov	r2, r3
 800c7d6:	4601      	mov	r1, r0
 800c7d8:	4630      	mov	r0, r6
 800c7da:	f000 fd05 	bl	800d1e8 <__pow5mult>
 800c7de:	9b06      	ldr	r3, [sp, #24]
 800c7e0:	2b01      	cmp	r3, #1
 800c7e2:	4604      	mov	r4, r0
 800c7e4:	dd7a      	ble.n	800c8dc <_dtoa_r+0x7cc>
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	9309      	str	r3, [sp, #36]	; 0x24
 800c7ea:	6922      	ldr	r2, [r4, #16]
 800c7ec:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c7f0:	6910      	ldr	r0, [r2, #16]
 800c7f2:	f000 fbeb 	bl	800cfcc <__hi0bits>
 800c7f6:	f1c0 0020 	rsb	r0, r0, #32
 800c7fa:	9b05      	ldr	r3, [sp, #20]
 800c7fc:	4418      	add	r0, r3
 800c7fe:	f010 001f 	ands.w	r0, r0, #31
 800c802:	f000 8093 	beq.w	800c92c <_dtoa_r+0x81c>
 800c806:	f1c0 0220 	rsb	r2, r0, #32
 800c80a:	2a04      	cmp	r2, #4
 800c80c:	f340 8085 	ble.w	800c91a <_dtoa_r+0x80a>
 800c810:	9b04      	ldr	r3, [sp, #16]
 800c812:	f1c0 001c 	rsb	r0, r0, #28
 800c816:	4403      	add	r3, r0
 800c818:	9304      	str	r3, [sp, #16]
 800c81a:	9b05      	ldr	r3, [sp, #20]
 800c81c:	4480      	add	r8, r0
 800c81e:	4403      	add	r3, r0
 800c820:	9305      	str	r3, [sp, #20]
 800c822:	9b04      	ldr	r3, [sp, #16]
 800c824:	2b00      	cmp	r3, #0
 800c826:	dd05      	ble.n	800c834 <_dtoa_r+0x724>
 800c828:	4629      	mov	r1, r5
 800c82a:	461a      	mov	r2, r3
 800c82c:	4630      	mov	r0, r6
 800c82e:	f000 fd35 	bl	800d29c <__lshift>
 800c832:	4605      	mov	r5, r0
 800c834:	9b05      	ldr	r3, [sp, #20]
 800c836:	2b00      	cmp	r3, #0
 800c838:	dd05      	ble.n	800c846 <_dtoa_r+0x736>
 800c83a:	4621      	mov	r1, r4
 800c83c:	461a      	mov	r2, r3
 800c83e:	4630      	mov	r0, r6
 800c840:	f000 fd2c 	bl	800d29c <__lshift>
 800c844:	4604      	mov	r4, r0
 800c846:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d071      	beq.n	800c930 <_dtoa_r+0x820>
 800c84c:	4621      	mov	r1, r4
 800c84e:	4628      	mov	r0, r5
 800c850:	f000 fd90 	bl	800d374 <__mcmp>
 800c854:	2800      	cmp	r0, #0
 800c856:	da6b      	bge.n	800c930 <_dtoa_r+0x820>
 800c858:	2300      	movs	r3, #0
 800c85a:	4629      	mov	r1, r5
 800c85c:	220a      	movs	r2, #10
 800c85e:	4630      	mov	r0, r6
 800c860:	f000 fb24 	bl	800ceac <__multadd>
 800c864:	9b07      	ldr	r3, [sp, #28]
 800c866:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c86a:	4605      	mov	r5, r0
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	f000 8197 	beq.w	800cba0 <_dtoa_r+0xa90>
 800c872:	4639      	mov	r1, r7
 800c874:	2300      	movs	r3, #0
 800c876:	220a      	movs	r2, #10
 800c878:	4630      	mov	r0, r6
 800c87a:	f000 fb17 	bl	800ceac <__multadd>
 800c87e:	f1ba 0f00 	cmp.w	sl, #0
 800c882:	4607      	mov	r7, r0
 800c884:	f300 8093 	bgt.w	800c9ae <_dtoa_r+0x89e>
 800c888:	9b06      	ldr	r3, [sp, #24]
 800c88a:	2b02      	cmp	r3, #2
 800c88c:	dc57      	bgt.n	800c93e <_dtoa_r+0x82e>
 800c88e:	e08e      	b.n	800c9ae <_dtoa_r+0x89e>
 800c890:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c892:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c896:	e751      	b.n	800c73c <_dtoa_r+0x62c>
 800c898:	f109 34ff 	add.w	r4, r9, #4294967295
 800c89c:	42a3      	cmp	r3, r4
 800c89e:	bfbf      	itttt	lt
 800c8a0:	1ae2      	sublt	r2, r4, r3
 800c8a2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c8a4:	189b      	addlt	r3, r3, r2
 800c8a6:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c8a8:	bfae      	itee	ge
 800c8aa:	1b1c      	subge	r4, r3, r4
 800c8ac:	4623      	movlt	r3, r4
 800c8ae:	2400      	movlt	r4, #0
 800c8b0:	f1b9 0f00 	cmp.w	r9, #0
 800c8b4:	bfb5      	itete	lt
 800c8b6:	9a04      	ldrlt	r2, [sp, #16]
 800c8b8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800c8bc:	eba2 0809 	sublt.w	r8, r2, r9
 800c8c0:	464a      	movge	r2, r9
 800c8c2:	bfb8      	it	lt
 800c8c4:	2200      	movlt	r2, #0
 800c8c6:	e73c      	b.n	800c742 <_dtoa_r+0x632>
 800c8c8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800c8cc:	9f07      	ldr	r7, [sp, #28]
 800c8ce:	461c      	mov	r4, r3
 800c8d0:	e744      	b.n	800c75c <_dtoa_r+0x64c>
 800c8d2:	461a      	mov	r2, r3
 800c8d4:	e770      	b.n	800c7b8 <_dtoa_r+0x6a8>
 800c8d6:	9b06      	ldr	r3, [sp, #24]
 800c8d8:	2b01      	cmp	r3, #1
 800c8da:	dc18      	bgt.n	800c90e <_dtoa_r+0x7fe>
 800c8dc:	9b02      	ldr	r3, [sp, #8]
 800c8de:	b9b3      	cbnz	r3, 800c90e <_dtoa_r+0x7fe>
 800c8e0:	9b03      	ldr	r3, [sp, #12]
 800c8e2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800c8e6:	b9a2      	cbnz	r2, 800c912 <_dtoa_r+0x802>
 800c8e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c8ec:	0d12      	lsrs	r2, r2, #20
 800c8ee:	0512      	lsls	r2, r2, #20
 800c8f0:	b18a      	cbz	r2, 800c916 <_dtoa_r+0x806>
 800c8f2:	9b04      	ldr	r3, [sp, #16]
 800c8f4:	3301      	adds	r3, #1
 800c8f6:	9304      	str	r3, [sp, #16]
 800c8f8:	9b05      	ldr	r3, [sp, #20]
 800c8fa:	3301      	adds	r3, #1
 800c8fc:	9305      	str	r3, [sp, #20]
 800c8fe:	2301      	movs	r3, #1
 800c900:	9309      	str	r3, [sp, #36]	; 0x24
 800c902:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c904:	2b00      	cmp	r3, #0
 800c906:	f47f af70 	bne.w	800c7ea <_dtoa_r+0x6da>
 800c90a:	2001      	movs	r0, #1
 800c90c:	e775      	b.n	800c7fa <_dtoa_r+0x6ea>
 800c90e:	2300      	movs	r3, #0
 800c910:	e7f6      	b.n	800c900 <_dtoa_r+0x7f0>
 800c912:	9b02      	ldr	r3, [sp, #8]
 800c914:	e7f4      	b.n	800c900 <_dtoa_r+0x7f0>
 800c916:	9209      	str	r2, [sp, #36]	; 0x24
 800c918:	e7f3      	b.n	800c902 <_dtoa_r+0x7f2>
 800c91a:	d082      	beq.n	800c822 <_dtoa_r+0x712>
 800c91c:	9b04      	ldr	r3, [sp, #16]
 800c91e:	321c      	adds	r2, #28
 800c920:	4413      	add	r3, r2
 800c922:	9304      	str	r3, [sp, #16]
 800c924:	9b05      	ldr	r3, [sp, #20]
 800c926:	4490      	add	r8, r2
 800c928:	4413      	add	r3, r2
 800c92a:	e779      	b.n	800c820 <_dtoa_r+0x710>
 800c92c:	4602      	mov	r2, r0
 800c92e:	e7f5      	b.n	800c91c <_dtoa_r+0x80c>
 800c930:	f1b9 0f00 	cmp.w	r9, #0
 800c934:	dc36      	bgt.n	800c9a4 <_dtoa_r+0x894>
 800c936:	9b06      	ldr	r3, [sp, #24]
 800c938:	2b02      	cmp	r3, #2
 800c93a:	dd33      	ble.n	800c9a4 <_dtoa_r+0x894>
 800c93c:	46ca      	mov	sl, r9
 800c93e:	f1ba 0f00 	cmp.w	sl, #0
 800c942:	d10d      	bne.n	800c960 <_dtoa_r+0x850>
 800c944:	4621      	mov	r1, r4
 800c946:	4653      	mov	r3, sl
 800c948:	2205      	movs	r2, #5
 800c94a:	4630      	mov	r0, r6
 800c94c:	f000 faae 	bl	800ceac <__multadd>
 800c950:	4601      	mov	r1, r0
 800c952:	4604      	mov	r4, r0
 800c954:	4628      	mov	r0, r5
 800c956:	f000 fd0d 	bl	800d374 <__mcmp>
 800c95a:	2800      	cmp	r0, #0
 800c95c:	f73f ade4 	bgt.w	800c528 <_dtoa_r+0x418>
 800c960:	9b08      	ldr	r3, [sp, #32]
 800c962:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c966:	ea6f 0b03 	mvn.w	fp, r3
 800c96a:	f04f 0900 	mov.w	r9, #0
 800c96e:	4621      	mov	r1, r4
 800c970:	4630      	mov	r0, r6
 800c972:	f000 fa79 	bl	800ce68 <_Bfree>
 800c976:	2f00      	cmp	r7, #0
 800c978:	f43f aea1 	beq.w	800c6be <_dtoa_r+0x5ae>
 800c97c:	f1b9 0f00 	cmp.w	r9, #0
 800c980:	d005      	beq.n	800c98e <_dtoa_r+0x87e>
 800c982:	45b9      	cmp	r9, r7
 800c984:	d003      	beq.n	800c98e <_dtoa_r+0x87e>
 800c986:	4649      	mov	r1, r9
 800c988:	4630      	mov	r0, r6
 800c98a:	f000 fa6d 	bl	800ce68 <_Bfree>
 800c98e:	4639      	mov	r1, r7
 800c990:	4630      	mov	r0, r6
 800c992:	f000 fa69 	bl	800ce68 <_Bfree>
 800c996:	e692      	b.n	800c6be <_dtoa_r+0x5ae>
 800c998:	2400      	movs	r4, #0
 800c99a:	4627      	mov	r7, r4
 800c99c:	e7e0      	b.n	800c960 <_dtoa_r+0x850>
 800c99e:	4693      	mov	fp, r2
 800c9a0:	4627      	mov	r7, r4
 800c9a2:	e5c1      	b.n	800c528 <_dtoa_r+0x418>
 800c9a4:	9b07      	ldr	r3, [sp, #28]
 800c9a6:	46ca      	mov	sl, r9
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	f000 8100 	beq.w	800cbae <_dtoa_r+0xa9e>
 800c9ae:	f1b8 0f00 	cmp.w	r8, #0
 800c9b2:	dd05      	ble.n	800c9c0 <_dtoa_r+0x8b0>
 800c9b4:	4639      	mov	r1, r7
 800c9b6:	4642      	mov	r2, r8
 800c9b8:	4630      	mov	r0, r6
 800c9ba:	f000 fc6f 	bl	800d29c <__lshift>
 800c9be:	4607      	mov	r7, r0
 800c9c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d05d      	beq.n	800ca82 <_dtoa_r+0x972>
 800c9c6:	6879      	ldr	r1, [r7, #4]
 800c9c8:	4630      	mov	r0, r6
 800c9ca:	f000 fa0d 	bl	800cde8 <_Balloc>
 800c9ce:	4680      	mov	r8, r0
 800c9d0:	b928      	cbnz	r0, 800c9de <_dtoa_r+0x8ce>
 800c9d2:	4b82      	ldr	r3, [pc, #520]	; (800cbdc <_dtoa_r+0xacc>)
 800c9d4:	4602      	mov	r2, r0
 800c9d6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c9da:	f7ff bbb1 	b.w	800c140 <_dtoa_r+0x30>
 800c9de:	693a      	ldr	r2, [r7, #16]
 800c9e0:	3202      	adds	r2, #2
 800c9e2:	0092      	lsls	r2, r2, #2
 800c9e4:	f107 010c 	add.w	r1, r7, #12
 800c9e8:	300c      	adds	r0, #12
 800c9ea:	f7ff faf3 	bl	800bfd4 <memcpy>
 800c9ee:	2201      	movs	r2, #1
 800c9f0:	4641      	mov	r1, r8
 800c9f2:	4630      	mov	r0, r6
 800c9f4:	f000 fc52 	bl	800d29c <__lshift>
 800c9f8:	9b01      	ldr	r3, [sp, #4]
 800c9fa:	3301      	adds	r3, #1
 800c9fc:	9304      	str	r3, [sp, #16]
 800c9fe:	9b01      	ldr	r3, [sp, #4]
 800ca00:	4453      	add	r3, sl
 800ca02:	9308      	str	r3, [sp, #32]
 800ca04:	9b02      	ldr	r3, [sp, #8]
 800ca06:	f003 0301 	and.w	r3, r3, #1
 800ca0a:	46b9      	mov	r9, r7
 800ca0c:	9307      	str	r3, [sp, #28]
 800ca0e:	4607      	mov	r7, r0
 800ca10:	9b04      	ldr	r3, [sp, #16]
 800ca12:	4621      	mov	r1, r4
 800ca14:	3b01      	subs	r3, #1
 800ca16:	4628      	mov	r0, r5
 800ca18:	9302      	str	r3, [sp, #8]
 800ca1a:	f7ff faef 	bl	800bffc <quorem>
 800ca1e:	4603      	mov	r3, r0
 800ca20:	3330      	adds	r3, #48	; 0x30
 800ca22:	9005      	str	r0, [sp, #20]
 800ca24:	4649      	mov	r1, r9
 800ca26:	4628      	mov	r0, r5
 800ca28:	9309      	str	r3, [sp, #36]	; 0x24
 800ca2a:	f000 fca3 	bl	800d374 <__mcmp>
 800ca2e:	463a      	mov	r2, r7
 800ca30:	4682      	mov	sl, r0
 800ca32:	4621      	mov	r1, r4
 800ca34:	4630      	mov	r0, r6
 800ca36:	f000 fcb9 	bl	800d3ac <__mdiff>
 800ca3a:	68c2      	ldr	r2, [r0, #12]
 800ca3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca3e:	4680      	mov	r8, r0
 800ca40:	bb0a      	cbnz	r2, 800ca86 <_dtoa_r+0x976>
 800ca42:	4601      	mov	r1, r0
 800ca44:	4628      	mov	r0, r5
 800ca46:	f000 fc95 	bl	800d374 <__mcmp>
 800ca4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca4c:	4602      	mov	r2, r0
 800ca4e:	4641      	mov	r1, r8
 800ca50:	4630      	mov	r0, r6
 800ca52:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800ca56:	f000 fa07 	bl	800ce68 <_Bfree>
 800ca5a:	9b06      	ldr	r3, [sp, #24]
 800ca5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca5e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ca62:	ea43 0102 	orr.w	r1, r3, r2
 800ca66:	9b07      	ldr	r3, [sp, #28]
 800ca68:	4319      	orrs	r1, r3
 800ca6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca6c:	d10d      	bne.n	800ca8a <_dtoa_r+0x97a>
 800ca6e:	2b39      	cmp	r3, #57	; 0x39
 800ca70:	d029      	beq.n	800cac6 <_dtoa_r+0x9b6>
 800ca72:	f1ba 0f00 	cmp.w	sl, #0
 800ca76:	dd01      	ble.n	800ca7c <_dtoa_r+0x96c>
 800ca78:	9b05      	ldr	r3, [sp, #20]
 800ca7a:	3331      	adds	r3, #49	; 0x31
 800ca7c:	9a02      	ldr	r2, [sp, #8]
 800ca7e:	7013      	strb	r3, [r2, #0]
 800ca80:	e775      	b.n	800c96e <_dtoa_r+0x85e>
 800ca82:	4638      	mov	r0, r7
 800ca84:	e7b8      	b.n	800c9f8 <_dtoa_r+0x8e8>
 800ca86:	2201      	movs	r2, #1
 800ca88:	e7e1      	b.n	800ca4e <_dtoa_r+0x93e>
 800ca8a:	f1ba 0f00 	cmp.w	sl, #0
 800ca8e:	db06      	blt.n	800ca9e <_dtoa_r+0x98e>
 800ca90:	9906      	ldr	r1, [sp, #24]
 800ca92:	ea41 0a0a 	orr.w	sl, r1, sl
 800ca96:	9907      	ldr	r1, [sp, #28]
 800ca98:	ea5a 0a01 	orrs.w	sl, sl, r1
 800ca9c:	d120      	bne.n	800cae0 <_dtoa_r+0x9d0>
 800ca9e:	2a00      	cmp	r2, #0
 800caa0:	ddec      	ble.n	800ca7c <_dtoa_r+0x96c>
 800caa2:	4629      	mov	r1, r5
 800caa4:	2201      	movs	r2, #1
 800caa6:	4630      	mov	r0, r6
 800caa8:	9304      	str	r3, [sp, #16]
 800caaa:	f000 fbf7 	bl	800d29c <__lshift>
 800caae:	4621      	mov	r1, r4
 800cab0:	4605      	mov	r5, r0
 800cab2:	f000 fc5f 	bl	800d374 <__mcmp>
 800cab6:	2800      	cmp	r0, #0
 800cab8:	9b04      	ldr	r3, [sp, #16]
 800caba:	dc02      	bgt.n	800cac2 <_dtoa_r+0x9b2>
 800cabc:	d1de      	bne.n	800ca7c <_dtoa_r+0x96c>
 800cabe:	07da      	lsls	r2, r3, #31
 800cac0:	d5dc      	bpl.n	800ca7c <_dtoa_r+0x96c>
 800cac2:	2b39      	cmp	r3, #57	; 0x39
 800cac4:	d1d8      	bne.n	800ca78 <_dtoa_r+0x968>
 800cac6:	9a02      	ldr	r2, [sp, #8]
 800cac8:	2339      	movs	r3, #57	; 0x39
 800caca:	7013      	strb	r3, [r2, #0]
 800cacc:	4643      	mov	r3, r8
 800cace:	4698      	mov	r8, r3
 800cad0:	3b01      	subs	r3, #1
 800cad2:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800cad6:	2a39      	cmp	r2, #57	; 0x39
 800cad8:	d051      	beq.n	800cb7e <_dtoa_r+0xa6e>
 800cada:	3201      	adds	r2, #1
 800cadc:	701a      	strb	r2, [r3, #0]
 800cade:	e746      	b.n	800c96e <_dtoa_r+0x85e>
 800cae0:	2a00      	cmp	r2, #0
 800cae2:	dd03      	ble.n	800caec <_dtoa_r+0x9dc>
 800cae4:	2b39      	cmp	r3, #57	; 0x39
 800cae6:	d0ee      	beq.n	800cac6 <_dtoa_r+0x9b6>
 800cae8:	3301      	adds	r3, #1
 800caea:	e7c7      	b.n	800ca7c <_dtoa_r+0x96c>
 800caec:	9a04      	ldr	r2, [sp, #16]
 800caee:	9908      	ldr	r1, [sp, #32]
 800caf0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800caf4:	428a      	cmp	r2, r1
 800caf6:	d02b      	beq.n	800cb50 <_dtoa_r+0xa40>
 800caf8:	4629      	mov	r1, r5
 800cafa:	2300      	movs	r3, #0
 800cafc:	220a      	movs	r2, #10
 800cafe:	4630      	mov	r0, r6
 800cb00:	f000 f9d4 	bl	800ceac <__multadd>
 800cb04:	45b9      	cmp	r9, r7
 800cb06:	4605      	mov	r5, r0
 800cb08:	f04f 0300 	mov.w	r3, #0
 800cb0c:	f04f 020a 	mov.w	r2, #10
 800cb10:	4649      	mov	r1, r9
 800cb12:	4630      	mov	r0, r6
 800cb14:	d107      	bne.n	800cb26 <_dtoa_r+0xa16>
 800cb16:	f000 f9c9 	bl	800ceac <__multadd>
 800cb1a:	4681      	mov	r9, r0
 800cb1c:	4607      	mov	r7, r0
 800cb1e:	9b04      	ldr	r3, [sp, #16]
 800cb20:	3301      	adds	r3, #1
 800cb22:	9304      	str	r3, [sp, #16]
 800cb24:	e774      	b.n	800ca10 <_dtoa_r+0x900>
 800cb26:	f000 f9c1 	bl	800ceac <__multadd>
 800cb2a:	4639      	mov	r1, r7
 800cb2c:	4681      	mov	r9, r0
 800cb2e:	2300      	movs	r3, #0
 800cb30:	220a      	movs	r2, #10
 800cb32:	4630      	mov	r0, r6
 800cb34:	f000 f9ba 	bl	800ceac <__multadd>
 800cb38:	4607      	mov	r7, r0
 800cb3a:	e7f0      	b.n	800cb1e <_dtoa_r+0xa0e>
 800cb3c:	f1ba 0f00 	cmp.w	sl, #0
 800cb40:	9a01      	ldr	r2, [sp, #4]
 800cb42:	bfcc      	ite	gt
 800cb44:	46d0      	movgt	r8, sl
 800cb46:	f04f 0801 	movle.w	r8, #1
 800cb4a:	4490      	add	r8, r2
 800cb4c:	f04f 0900 	mov.w	r9, #0
 800cb50:	4629      	mov	r1, r5
 800cb52:	2201      	movs	r2, #1
 800cb54:	4630      	mov	r0, r6
 800cb56:	9302      	str	r3, [sp, #8]
 800cb58:	f000 fba0 	bl	800d29c <__lshift>
 800cb5c:	4621      	mov	r1, r4
 800cb5e:	4605      	mov	r5, r0
 800cb60:	f000 fc08 	bl	800d374 <__mcmp>
 800cb64:	2800      	cmp	r0, #0
 800cb66:	dcb1      	bgt.n	800cacc <_dtoa_r+0x9bc>
 800cb68:	d102      	bne.n	800cb70 <_dtoa_r+0xa60>
 800cb6a:	9b02      	ldr	r3, [sp, #8]
 800cb6c:	07db      	lsls	r3, r3, #31
 800cb6e:	d4ad      	bmi.n	800cacc <_dtoa_r+0x9bc>
 800cb70:	4643      	mov	r3, r8
 800cb72:	4698      	mov	r8, r3
 800cb74:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cb78:	2a30      	cmp	r2, #48	; 0x30
 800cb7a:	d0fa      	beq.n	800cb72 <_dtoa_r+0xa62>
 800cb7c:	e6f7      	b.n	800c96e <_dtoa_r+0x85e>
 800cb7e:	9a01      	ldr	r2, [sp, #4]
 800cb80:	429a      	cmp	r2, r3
 800cb82:	d1a4      	bne.n	800cace <_dtoa_r+0x9be>
 800cb84:	f10b 0b01 	add.w	fp, fp, #1
 800cb88:	2331      	movs	r3, #49	; 0x31
 800cb8a:	e778      	b.n	800ca7e <_dtoa_r+0x96e>
 800cb8c:	4b14      	ldr	r3, [pc, #80]	; (800cbe0 <_dtoa_r+0xad0>)
 800cb8e:	f7ff bb2a 	b.w	800c1e6 <_dtoa_r+0xd6>
 800cb92:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	f47f ab05 	bne.w	800c1a4 <_dtoa_r+0x94>
 800cb9a:	4b12      	ldr	r3, [pc, #72]	; (800cbe4 <_dtoa_r+0xad4>)
 800cb9c:	f7ff bb23 	b.w	800c1e6 <_dtoa_r+0xd6>
 800cba0:	f1ba 0f00 	cmp.w	sl, #0
 800cba4:	dc03      	bgt.n	800cbae <_dtoa_r+0xa9e>
 800cba6:	9b06      	ldr	r3, [sp, #24]
 800cba8:	2b02      	cmp	r3, #2
 800cbaa:	f73f aec8 	bgt.w	800c93e <_dtoa_r+0x82e>
 800cbae:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cbb2:	4621      	mov	r1, r4
 800cbb4:	4628      	mov	r0, r5
 800cbb6:	f7ff fa21 	bl	800bffc <quorem>
 800cbba:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800cbbe:	f808 3b01 	strb.w	r3, [r8], #1
 800cbc2:	9a01      	ldr	r2, [sp, #4]
 800cbc4:	eba8 0202 	sub.w	r2, r8, r2
 800cbc8:	4592      	cmp	sl, r2
 800cbca:	ddb7      	ble.n	800cb3c <_dtoa_r+0xa2c>
 800cbcc:	4629      	mov	r1, r5
 800cbce:	2300      	movs	r3, #0
 800cbd0:	220a      	movs	r2, #10
 800cbd2:	4630      	mov	r0, r6
 800cbd4:	f000 f96a 	bl	800ceac <__multadd>
 800cbd8:	4605      	mov	r5, r0
 800cbda:	e7ea      	b.n	800cbb2 <_dtoa_r+0xaa2>
 800cbdc:	0800f751 	.word	0x0800f751
 800cbe0:	0800f6ac 	.word	0x0800f6ac
 800cbe4:	0800f6d5 	.word	0x0800f6d5

0800cbe8 <_free_r>:
 800cbe8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cbea:	2900      	cmp	r1, #0
 800cbec:	d044      	beq.n	800cc78 <_free_r+0x90>
 800cbee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbf2:	9001      	str	r0, [sp, #4]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	f1a1 0404 	sub.w	r4, r1, #4
 800cbfa:	bfb8      	it	lt
 800cbfc:	18e4      	addlt	r4, r4, r3
 800cbfe:	f000 f8e7 	bl	800cdd0 <__malloc_lock>
 800cc02:	4a1e      	ldr	r2, [pc, #120]	; (800cc7c <_free_r+0x94>)
 800cc04:	9801      	ldr	r0, [sp, #4]
 800cc06:	6813      	ldr	r3, [r2, #0]
 800cc08:	b933      	cbnz	r3, 800cc18 <_free_r+0x30>
 800cc0a:	6063      	str	r3, [r4, #4]
 800cc0c:	6014      	str	r4, [r2, #0]
 800cc0e:	b003      	add	sp, #12
 800cc10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cc14:	f000 b8e2 	b.w	800cddc <__malloc_unlock>
 800cc18:	42a3      	cmp	r3, r4
 800cc1a:	d908      	bls.n	800cc2e <_free_r+0x46>
 800cc1c:	6825      	ldr	r5, [r4, #0]
 800cc1e:	1961      	adds	r1, r4, r5
 800cc20:	428b      	cmp	r3, r1
 800cc22:	bf01      	itttt	eq
 800cc24:	6819      	ldreq	r1, [r3, #0]
 800cc26:	685b      	ldreq	r3, [r3, #4]
 800cc28:	1949      	addeq	r1, r1, r5
 800cc2a:	6021      	streq	r1, [r4, #0]
 800cc2c:	e7ed      	b.n	800cc0a <_free_r+0x22>
 800cc2e:	461a      	mov	r2, r3
 800cc30:	685b      	ldr	r3, [r3, #4]
 800cc32:	b10b      	cbz	r3, 800cc38 <_free_r+0x50>
 800cc34:	42a3      	cmp	r3, r4
 800cc36:	d9fa      	bls.n	800cc2e <_free_r+0x46>
 800cc38:	6811      	ldr	r1, [r2, #0]
 800cc3a:	1855      	adds	r5, r2, r1
 800cc3c:	42a5      	cmp	r5, r4
 800cc3e:	d10b      	bne.n	800cc58 <_free_r+0x70>
 800cc40:	6824      	ldr	r4, [r4, #0]
 800cc42:	4421      	add	r1, r4
 800cc44:	1854      	adds	r4, r2, r1
 800cc46:	42a3      	cmp	r3, r4
 800cc48:	6011      	str	r1, [r2, #0]
 800cc4a:	d1e0      	bne.n	800cc0e <_free_r+0x26>
 800cc4c:	681c      	ldr	r4, [r3, #0]
 800cc4e:	685b      	ldr	r3, [r3, #4]
 800cc50:	6053      	str	r3, [r2, #4]
 800cc52:	440c      	add	r4, r1
 800cc54:	6014      	str	r4, [r2, #0]
 800cc56:	e7da      	b.n	800cc0e <_free_r+0x26>
 800cc58:	d902      	bls.n	800cc60 <_free_r+0x78>
 800cc5a:	230c      	movs	r3, #12
 800cc5c:	6003      	str	r3, [r0, #0]
 800cc5e:	e7d6      	b.n	800cc0e <_free_r+0x26>
 800cc60:	6825      	ldr	r5, [r4, #0]
 800cc62:	1961      	adds	r1, r4, r5
 800cc64:	428b      	cmp	r3, r1
 800cc66:	bf04      	itt	eq
 800cc68:	6819      	ldreq	r1, [r3, #0]
 800cc6a:	685b      	ldreq	r3, [r3, #4]
 800cc6c:	6063      	str	r3, [r4, #4]
 800cc6e:	bf04      	itt	eq
 800cc70:	1949      	addeq	r1, r1, r5
 800cc72:	6021      	streq	r1, [r4, #0]
 800cc74:	6054      	str	r4, [r2, #4]
 800cc76:	e7ca      	b.n	800cc0e <_free_r+0x26>
 800cc78:	b003      	add	sp, #12
 800cc7a:	bd30      	pop	{r4, r5, pc}
 800cc7c:	2400553c 	.word	0x2400553c

0800cc80 <malloc>:
 800cc80:	4b02      	ldr	r3, [pc, #8]	; (800cc8c <malloc+0xc>)
 800cc82:	4601      	mov	r1, r0
 800cc84:	6818      	ldr	r0, [r3, #0]
 800cc86:	f000 b823 	b.w	800ccd0 <_malloc_r>
 800cc8a:	bf00      	nop
 800cc8c:	2400006c 	.word	0x2400006c

0800cc90 <sbrk_aligned>:
 800cc90:	b570      	push	{r4, r5, r6, lr}
 800cc92:	4e0e      	ldr	r6, [pc, #56]	; (800cccc <sbrk_aligned+0x3c>)
 800cc94:	460c      	mov	r4, r1
 800cc96:	6831      	ldr	r1, [r6, #0]
 800cc98:	4605      	mov	r5, r0
 800cc9a:	b911      	cbnz	r1, 800cca2 <sbrk_aligned+0x12>
 800cc9c:	f001 fdd6 	bl	800e84c <_sbrk_r>
 800cca0:	6030      	str	r0, [r6, #0]
 800cca2:	4621      	mov	r1, r4
 800cca4:	4628      	mov	r0, r5
 800cca6:	f001 fdd1 	bl	800e84c <_sbrk_r>
 800ccaa:	1c43      	adds	r3, r0, #1
 800ccac:	d00a      	beq.n	800ccc4 <sbrk_aligned+0x34>
 800ccae:	1cc4      	adds	r4, r0, #3
 800ccb0:	f024 0403 	bic.w	r4, r4, #3
 800ccb4:	42a0      	cmp	r0, r4
 800ccb6:	d007      	beq.n	800ccc8 <sbrk_aligned+0x38>
 800ccb8:	1a21      	subs	r1, r4, r0
 800ccba:	4628      	mov	r0, r5
 800ccbc:	f001 fdc6 	bl	800e84c <_sbrk_r>
 800ccc0:	3001      	adds	r0, #1
 800ccc2:	d101      	bne.n	800ccc8 <sbrk_aligned+0x38>
 800ccc4:	f04f 34ff 	mov.w	r4, #4294967295
 800ccc8:	4620      	mov	r0, r4
 800ccca:	bd70      	pop	{r4, r5, r6, pc}
 800cccc:	24005540 	.word	0x24005540

0800ccd0 <_malloc_r>:
 800ccd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccd4:	1ccd      	adds	r5, r1, #3
 800ccd6:	f025 0503 	bic.w	r5, r5, #3
 800ccda:	3508      	adds	r5, #8
 800ccdc:	2d0c      	cmp	r5, #12
 800ccde:	bf38      	it	cc
 800cce0:	250c      	movcc	r5, #12
 800cce2:	2d00      	cmp	r5, #0
 800cce4:	4607      	mov	r7, r0
 800cce6:	db01      	blt.n	800ccec <_malloc_r+0x1c>
 800cce8:	42a9      	cmp	r1, r5
 800ccea:	d905      	bls.n	800ccf8 <_malloc_r+0x28>
 800ccec:	230c      	movs	r3, #12
 800ccee:	603b      	str	r3, [r7, #0]
 800ccf0:	2600      	movs	r6, #0
 800ccf2:	4630      	mov	r0, r6
 800ccf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccf8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800cdcc <_malloc_r+0xfc>
 800ccfc:	f000 f868 	bl	800cdd0 <__malloc_lock>
 800cd00:	f8d8 3000 	ldr.w	r3, [r8]
 800cd04:	461c      	mov	r4, r3
 800cd06:	bb5c      	cbnz	r4, 800cd60 <_malloc_r+0x90>
 800cd08:	4629      	mov	r1, r5
 800cd0a:	4638      	mov	r0, r7
 800cd0c:	f7ff ffc0 	bl	800cc90 <sbrk_aligned>
 800cd10:	1c43      	adds	r3, r0, #1
 800cd12:	4604      	mov	r4, r0
 800cd14:	d155      	bne.n	800cdc2 <_malloc_r+0xf2>
 800cd16:	f8d8 4000 	ldr.w	r4, [r8]
 800cd1a:	4626      	mov	r6, r4
 800cd1c:	2e00      	cmp	r6, #0
 800cd1e:	d145      	bne.n	800cdac <_malloc_r+0xdc>
 800cd20:	2c00      	cmp	r4, #0
 800cd22:	d048      	beq.n	800cdb6 <_malloc_r+0xe6>
 800cd24:	6823      	ldr	r3, [r4, #0]
 800cd26:	4631      	mov	r1, r6
 800cd28:	4638      	mov	r0, r7
 800cd2a:	eb04 0903 	add.w	r9, r4, r3
 800cd2e:	f001 fd8d 	bl	800e84c <_sbrk_r>
 800cd32:	4581      	cmp	r9, r0
 800cd34:	d13f      	bne.n	800cdb6 <_malloc_r+0xe6>
 800cd36:	6821      	ldr	r1, [r4, #0]
 800cd38:	1a6d      	subs	r5, r5, r1
 800cd3a:	4629      	mov	r1, r5
 800cd3c:	4638      	mov	r0, r7
 800cd3e:	f7ff ffa7 	bl	800cc90 <sbrk_aligned>
 800cd42:	3001      	adds	r0, #1
 800cd44:	d037      	beq.n	800cdb6 <_malloc_r+0xe6>
 800cd46:	6823      	ldr	r3, [r4, #0]
 800cd48:	442b      	add	r3, r5
 800cd4a:	6023      	str	r3, [r4, #0]
 800cd4c:	f8d8 3000 	ldr.w	r3, [r8]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d038      	beq.n	800cdc6 <_malloc_r+0xf6>
 800cd54:	685a      	ldr	r2, [r3, #4]
 800cd56:	42a2      	cmp	r2, r4
 800cd58:	d12b      	bne.n	800cdb2 <_malloc_r+0xe2>
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	605a      	str	r2, [r3, #4]
 800cd5e:	e00f      	b.n	800cd80 <_malloc_r+0xb0>
 800cd60:	6822      	ldr	r2, [r4, #0]
 800cd62:	1b52      	subs	r2, r2, r5
 800cd64:	d41f      	bmi.n	800cda6 <_malloc_r+0xd6>
 800cd66:	2a0b      	cmp	r2, #11
 800cd68:	d917      	bls.n	800cd9a <_malloc_r+0xca>
 800cd6a:	1961      	adds	r1, r4, r5
 800cd6c:	42a3      	cmp	r3, r4
 800cd6e:	6025      	str	r5, [r4, #0]
 800cd70:	bf18      	it	ne
 800cd72:	6059      	strne	r1, [r3, #4]
 800cd74:	6863      	ldr	r3, [r4, #4]
 800cd76:	bf08      	it	eq
 800cd78:	f8c8 1000 	streq.w	r1, [r8]
 800cd7c:	5162      	str	r2, [r4, r5]
 800cd7e:	604b      	str	r3, [r1, #4]
 800cd80:	4638      	mov	r0, r7
 800cd82:	f104 060b 	add.w	r6, r4, #11
 800cd86:	f000 f829 	bl	800cddc <__malloc_unlock>
 800cd8a:	f026 0607 	bic.w	r6, r6, #7
 800cd8e:	1d23      	adds	r3, r4, #4
 800cd90:	1af2      	subs	r2, r6, r3
 800cd92:	d0ae      	beq.n	800ccf2 <_malloc_r+0x22>
 800cd94:	1b9b      	subs	r3, r3, r6
 800cd96:	50a3      	str	r3, [r4, r2]
 800cd98:	e7ab      	b.n	800ccf2 <_malloc_r+0x22>
 800cd9a:	42a3      	cmp	r3, r4
 800cd9c:	6862      	ldr	r2, [r4, #4]
 800cd9e:	d1dd      	bne.n	800cd5c <_malloc_r+0x8c>
 800cda0:	f8c8 2000 	str.w	r2, [r8]
 800cda4:	e7ec      	b.n	800cd80 <_malloc_r+0xb0>
 800cda6:	4623      	mov	r3, r4
 800cda8:	6864      	ldr	r4, [r4, #4]
 800cdaa:	e7ac      	b.n	800cd06 <_malloc_r+0x36>
 800cdac:	4634      	mov	r4, r6
 800cdae:	6876      	ldr	r6, [r6, #4]
 800cdb0:	e7b4      	b.n	800cd1c <_malloc_r+0x4c>
 800cdb2:	4613      	mov	r3, r2
 800cdb4:	e7cc      	b.n	800cd50 <_malloc_r+0x80>
 800cdb6:	230c      	movs	r3, #12
 800cdb8:	603b      	str	r3, [r7, #0]
 800cdba:	4638      	mov	r0, r7
 800cdbc:	f000 f80e 	bl	800cddc <__malloc_unlock>
 800cdc0:	e797      	b.n	800ccf2 <_malloc_r+0x22>
 800cdc2:	6025      	str	r5, [r4, #0]
 800cdc4:	e7dc      	b.n	800cd80 <_malloc_r+0xb0>
 800cdc6:	605b      	str	r3, [r3, #4]
 800cdc8:	deff      	udf	#255	; 0xff
 800cdca:	bf00      	nop
 800cdcc:	2400553c 	.word	0x2400553c

0800cdd0 <__malloc_lock>:
 800cdd0:	4801      	ldr	r0, [pc, #4]	; (800cdd8 <__malloc_lock+0x8>)
 800cdd2:	f7ff b8fd 	b.w	800bfd0 <__retarget_lock_acquire_recursive>
 800cdd6:	bf00      	nop
 800cdd8:	24005538 	.word	0x24005538

0800cddc <__malloc_unlock>:
 800cddc:	4801      	ldr	r0, [pc, #4]	; (800cde4 <__malloc_unlock+0x8>)
 800cdde:	f7ff b8f8 	b.w	800bfd2 <__retarget_lock_release_recursive>
 800cde2:	bf00      	nop
 800cde4:	24005538 	.word	0x24005538

0800cde8 <_Balloc>:
 800cde8:	b570      	push	{r4, r5, r6, lr}
 800cdea:	69c6      	ldr	r6, [r0, #28]
 800cdec:	4604      	mov	r4, r0
 800cdee:	460d      	mov	r5, r1
 800cdf0:	b976      	cbnz	r6, 800ce10 <_Balloc+0x28>
 800cdf2:	2010      	movs	r0, #16
 800cdf4:	f7ff ff44 	bl	800cc80 <malloc>
 800cdf8:	4602      	mov	r2, r0
 800cdfa:	61e0      	str	r0, [r4, #28]
 800cdfc:	b920      	cbnz	r0, 800ce08 <_Balloc+0x20>
 800cdfe:	4b18      	ldr	r3, [pc, #96]	; (800ce60 <_Balloc+0x78>)
 800ce00:	4818      	ldr	r0, [pc, #96]	; (800ce64 <_Balloc+0x7c>)
 800ce02:	216b      	movs	r1, #107	; 0x6b
 800ce04:	f001 fd3c 	bl	800e880 <__assert_func>
 800ce08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ce0c:	6006      	str	r6, [r0, #0]
 800ce0e:	60c6      	str	r6, [r0, #12]
 800ce10:	69e6      	ldr	r6, [r4, #28]
 800ce12:	68f3      	ldr	r3, [r6, #12]
 800ce14:	b183      	cbz	r3, 800ce38 <_Balloc+0x50>
 800ce16:	69e3      	ldr	r3, [r4, #28]
 800ce18:	68db      	ldr	r3, [r3, #12]
 800ce1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ce1e:	b9b8      	cbnz	r0, 800ce50 <_Balloc+0x68>
 800ce20:	2101      	movs	r1, #1
 800ce22:	fa01 f605 	lsl.w	r6, r1, r5
 800ce26:	1d72      	adds	r2, r6, #5
 800ce28:	0092      	lsls	r2, r2, #2
 800ce2a:	4620      	mov	r0, r4
 800ce2c:	f001 fd46 	bl	800e8bc <_calloc_r>
 800ce30:	b160      	cbz	r0, 800ce4c <_Balloc+0x64>
 800ce32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ce36:	e00e      	b.n	800ce56 <_Balloc+0x6e>
 800ce38:	2221      	movs	r2, #33	; 0x21
 800ce3a:	2104      	movs	r1, #4
 800ce3c:	4620      	mov	r0, r4
 800ce3e:	f001 fd3d 	bl	800e8bc <_calloc_r>
 800ce42:	69e3      	ldr	r3, [r4, #28]
 800ce44:	60f0      	str	r0, [r6, #12]
 800ce46:	68db      	ldr	r3, [r3, #12]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d1e4      	bne.n	800ce16 <_Balloc+0x2e>
 800ce4c:	2000      	movs	r0, #0
 800ce4e:	bd70      	pop	{r4, r5, r6, pc}
 800ce50:	6802      	ldr	r2, [r0, #0]
 800ce52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ce56:	2300      	movs	r3, #0
 800ce58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ce5c:	e7f7      	b.n	800ce4e <_Balloc+0x66>
 800ce5e:	bf00      	nop
 800ce60:	0800f6e2 	.word	0x0800f6e2
 800ce64:	0800f762 	.word	0x0800f762

0800ce68 <_Bfree>:
 800ce68:	b570      	push	{r4, r5, r6, lr}
 800ce6a:	69c6      	ldr	r6, [r0, #28]
 800ce6c:	4605      	mov	r5, r0
 800ce6e:	460c      	mov	r4, r1
 800ce70:	b976      	cbnz	r6, 800ce90 <_Bfree+0x28>
 800ce72:	2010      	movs	r0, #16
 800ce74:	f7ff ff04 	bl	800cc80 <malloc>
 800ce78:	4602      	mov	r2, r0
 800ce7a:	61e8      	str	r0, [r5, #28]
 800ce7c:	b920      	cbnz	r0, 800ce88 <_Bfree+0x20>
 800ce7e:	4b09      	ldr	r3, [pc, #36]	; (800cea4 <_Bfree+0x3c>)
 800ce80:	4809      	ldr	r0, [pc, #36]	; (800cea8 <_Bfree+0x40>)
 800ce82:	218f      	movs	r1, #143	; 0x8f
 800ce84:	f001 fcfc 	bl	800e880 <__assert_func>
 800ce88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ce8c:	6006      	str	r6, [r0, #0]
 800ce8e:	60c6      	str	r6, [r0, #12]
 800ce90:	b13c      	cbz	r4, 800cea2 <_Bfree+0x3a>
 800ce92:	69eb      	ldr	r3, [r5, #28]
 800ce94:	6862      	ldr	r2, [r4, #4]
 800ce96:	68db      	ldr	r3, [r3, #12]
 800ce98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ce9c:	6021      	str	r1, [r4, #0]
 800ce9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cea2:	bd70      	pop	{r4, r5, r6, pc}
 800cea4:	0800f6e2 	.word	0x0800f6e2
 800cea8:	0800f762 	.word	0x0800f762

0800ceac <__multadd>:
 800ceac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ceb0:	690d      	ldr	r5, [r1, #16]
 800ceb2:	4607      	mov	r7, r0
 800ceb4:	460c      	mov	r4, r1
 800ceb6:	461e      	mov	r6, r3
 800ceb8:	f101 0c14 	add.w	ip, r1, #20
 800cebc:	2000      	movs	r0, #0
 800cebe:	f8dc 3000 	ldr.w	r3, [ip]
 800cec2:	b299      	uxth	r1, r3
 800cec4:	fb02 6101 	mla	r1, r2, r1, r6
 800cec8:	0c1e      	lsrs	r6, r3, #16
 800ceca:	0c0b      	lsrs	r3, r1, #16
 800cecc:	fb02 3306 	mla	r3, r2, r6, r3
 800ced0:	b289      	uxth	r1, r1
 800ced2:	3001      	adds	r0, #1
 800ced4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ced8:	4285      	cmp	r5, r0
 800ceda:	f84c 1b04 	str.w	r1, [ip], #4
 800cede:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cee2:	dcec      	bgt.n	800cebe <__multadd+0x12>
 800cee4:	b30e      	cbz	r6, 800cf2a <__multadd+0x7e>
 800cee6:	68a3      	ldr	r3, [r4, #8]
 800cee8:	42ab      	cmp	r3, r5
 800ceea:	dc19      	bgt.n	800cf20 <__multadd+0x74>
 800ceec:	6861      	ldr	r1, [r4, #4]
 800ceee:	4638      	mov	r0, r7
 800cef0:	3101      	adds	r1, #1
 800cef2:	f7ff ff79 	bl	800cde8 <_Balloc>
 800cef6:	4680      	mov	r8, r0
 800cef8:	b928      	cbnz	r0, 800cf06 <__multadd+0x5a>
 800cefa:	4602      	mov	r2, r0
 800cefc:	4b0c      	ldr	r3, [pc, #48]	; (800cf30 <__multadd+0x84>)
 800cefe:	480d      	ldr	r0, [pc, #52]	; (800cf34 <__multadd+0x88>)
 800cf00:	21ba      	movs	r1, #186	; 0xba
 800cf02:	f001 fcbd 	bl	800e880 <__assert_func>
 800cf06:	6922      	ldr	r2, [r4, #16]
 800cf08:	3202      	adds	r2, #2
 800cf0a:	f104 010c 	add.w	r1, r4, #12
 800cf0e:	0092      	lsls	r2, r2, #2
 800cf10:	300c      	adds	r0, #12
 800cf12:	f7ff f85f 	bl	800bfd4 <memcpy>
 800cf16:	4621      	mov	r1, r4
 800cf18:	4638      	mov	r0, r7
 800cf1a:	f7ff ffa5 	bl	800ce68 <_Bfree>
 800cf1e:	4644      	mov	r4, r8
 800cf20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cf24:	3501      	adds	r5, #1
 800cf26:	615e      	str	r6, [r3, #20]
 800cf28:	6125      	str	r5, [r4, #16]
 800cf2a:	4620      	mov	r0, r4
 800cf2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf30:	0800f751 	.word	0x0800f751
 800cf34:	0800f762 	.word	0x0800f762

0800cf38 <__s2b>:
 800cf38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf3c:	460c      	mov	r4, r1
 800cf3e:	4615      	mov	r5, r2
 800cf40:	461f      	mov	r7, r3
 800cf42:	2209      	movs	r2, #9
 800cf44:	3308      	adds	r3, #8
 800cf46:	4606      	mov	r6, r0
 800cf48:	fb93 f3f2 	sdiv	r3, r3, r2
 800cf4c:	2100      	movs	r1, #0
 800cf4e:	2201      	movs	r2, #1
 800cf50:	429a      	cmp	r2, r3
 800cf52:	db09      	blt.n	800cf68 <__s2b+0x30>
 800cf54:	4630      	mov	r0, r6
 800cf56:	f7ff ff47 	bl	800cde8 <_Balloc>
 800cf5a:	b940      	cbnz	r0, 800cf6e <__s2b+0x36>
 800cf5c:	4602      	mov	r2, r0
 800cf5e:	4b19      	ldr	r3, [pc, #100]	; (800cfc4 <__s2b+0x8c>)
 800cf60:	4819      	ldr	r0, [pc, #100]	; (800cfc8 <__s2b+0x90>)
 800cf62:	21d3      	movs	r1, #211	; 0xd3
 800cf64:	f001 fc8c 	bl	800e880 <__assert_func>
 800cf68:	0052      	lsls	r2, r2, #1
 800cf6a:	3101      	adds	r1, #1
 800cf6c:	e7f0      	b.n	800cf50 <__s2b+0x18>
 800cf6e:	9b08      	ldr	r3, [sp, #32]
 800cf70:	6143      	str	r3, [r0, #20]
 800cf72:	2d09      	cmp	r5, #9
 800cf74:	f04f 0301 	mov.w	r3, #1
 800cf78:	6103      	str	r3, [r0, #16]
 800cf7a:	dd16      	ble.n	800cfaa <__s2b+0x72>
 800cf7c:	f104 0909 	add.w	r9, r4, #9
 800cf80:	46c8      	mov	r8, r9
 800cf82:	442c      	add	r4, r5
 800cf84:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cf88:	4601      	mov	r1, r0
 800cf8a:	3b30      	subs	r3, #48	; 0x30
 800cf8c:	220a      	movs	r2, #10
 800cf8e:	4630      	mov	r0, r6
 800cf90:	f7ff ff8c 	bl	800ceac <__multadd>
 800cf94:	45a0      	cmp	r8, r4
 800cf96:	d1f5      	bne.n	800cf84 <__s2b+0x4c>
 800cf98:	f1a5 0408 	sub.w	r4, r5, #8
 800cf9c:	444c      	add	r4, r9
 800cf9e:	1b2d      	subs	r5, r5, r4
 800cfa0:	1963      	adds	r3, r4, r5
 800cfa2:	42bb      	cmp	r3, r7
 800cfa4:	db04      	blt.n	800cfb0 <__s2b+0x78>
 800cfa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfaa:	340a      	adds	r4, #10
 800cfac:	2509      	movs	r5, #9
 800cfae:	e7f6      	b.n	800cf9e <__s2b+0x66>
 800cfb0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cfb4:	4601      	mov	r1, r0
 800cfb6:	3b30      	subs	r3, #48	; 0x30
 800cfb8:	220a      	movs	r2, #10
 800cfba:	4630      	mov	r0, r6
 800cfbc:	f7ff ff76 	bl	800ceac <__multadd>
 800cfc0:	e7ee      	b.n	800cfa0 <__s2b+0x68>
 800cfc2:	bf00      	nop
 800cfc4:	0800f751 	.word	0x0800f751
 800cfc8:	0800f762 	.word	0x0800f762

0800cfcc <__hi0bits>:
 800cfcc:	0c03      	lsrs	r3, r0, #16
 800cfce:	041b      	lsls	r3, r3, #16
 800cfd0:	b9d3      	cbnz	r3, 800d008 <__hi0bits+0x3c>
 800cfd2:	0400      	lsls	r0, r0, #16
 800cfd4:	2310      	movs	r3, #16
 800cfd6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cfda:	bf04      	itt	eq
 800cfdc:	0200      	lsleq	r0, r0, #8
 800cfde:	3308      	addeq	r3, #8
 800cfe0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cfe4:	bf04      	itt	eq
 800cfe6:	0100      	lsleq	r0, r0, #4
 800cfe8:	3304      	addeq	r3, #4
 800cfea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cfee:	bf04      	itt	eq
 800cff0:	0080      	lsleq	r0, r0, #2
 800cff2:	3302      	addeq	r3, #2
 800cff4:	2800      	cmp	r0, #0
 800cff6:	db05      	blt.n	800d004 <__hi0bits+0x38>
 800cff8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cffc:	f103 0301 	add.w	r3, r3, #1
 800d000:	bf08      	it	eq
 800d002:	2320      	moveq	r3, #32
 800d004:	4618      	mov	r0, r3
 800d006:	4770      	bx	lr
 800d008:	2300      	movs	r3, #0
 800d00a:	e7e4      	b.n	800cfd6 <__hi0bits+0xa>

0800d00c <__lo0bits>:
 800d00c:	6803      	ldr	r3, [r0, #0]
 800d00e:	f013 0207 	ands.w	r2, r3, #7
 800d012:	d00c      	beq.n	800d02e <__lo0bits+0x22>
 800d014:	07d9      	lsls	r1, r3, #31
 800d016:	d422      	bmi.n	800d05e <__lo0bits+0x52>
 800d018:	079a      	lsls	r2, r3, #30
 800d01a:	bf49      	itett	mi
 800d01c:	085b      	lsrmi	r3, r3, #1
 800d01e:	089b      	lsrpl	r3, r3, #2
 800d020:	6003      	strmi	r3, [r0, #0]
 800d022:	2201      	movmi	r2, #1
 800d024:	bf5c      	itt	pl
 800d026:	6003      	strpl	r3, [r0, #0]
 800d028:	2202      	movpl	r2, #2
 800d02a:	4610      	mov	r0, r2
 800d02c:	4770      	bx	lr
 800d02e:	b299      	uxth	r1, r3
 800d030:	b909      	cbnz	r1, 800d036 <__lo0bits+0x2a>
 800d032:	0c1b      	lsrs	r3, r3, #16
 800d034:	2210      	movs	r2, #16
 800d036:	b2d9      	uxtb	r1, r3
 800d038:	b909      	cbnz	r1, 800d03e <__lo0bits+0x32>
 800d03a:	3208      	adds	r2, #8
 800d03c:	0a1b      	lsrs	r3, r3, #8
 800d03e:	0719      	lsls	r1, r3, #28
 800d040:	bf04      	itt	eq
 800d042:	091b      	lsreq	r3, r3, #4
 800d044:	3204      	addeq	r2, #4
 800d046:	0799      	lsls	r1, r3, #30
 800d048:	bf04      	itt	eq
 800d04a:	089b      	lsreq	r3, r3, #2
 800d04c:	3202      	addeq	r2, #2
 800d04e:	07d9      	lsls	r1, r3, #31
 800d050:	d403      	bmi.n	800d05a <__lo0bits+0x4e>
 800d052:	085b      	lsrs	r3, r3, #1
 800d054:	f102 0201 	add.w	r2, r2, #1
 800d058:	d003      	beq.n	800d062 <__lo0bits+0x56>
 800d05a:	6003      	str	r3, [r0, #0]
 800d05c:	e7e5      	b.n	800d02a <__lo0bits+0x1e>
 800d05e:	2200      	movs	r2, #0
 800d060:	e7e3      	b.n	800d02a <__lo0bits+0x1e>
 800d062:	2220      	movs	r2, #32
 800d064:	e7e1      	b.n	800d02a <__lo0bits+0x1e>
	...

0800d068 <__i2b>:
 800d068:	b510      	push	{r4, lr}
 800d06a:	460c      	mov	r4, r1
 800d06c:	2101      	movs	r1, #1
 800d06e:	f7ff febb 	bl	800cde8 <_Balloc>
 800d072:	4602      	mov	r2, r0
 800d074:	b928      	cbnz	r0, 800d082 <__i2b+0x1a>
 800d076:	4b05      	ldr	r3, [pc, #20]	; (800d08c <__i2b+0x24>)
 800d078:	4805      	ldr	r0, [pc, #20]	; (800d090 <__i2b+0x28>)
 800d07a:	f240 1145 	movw	r1, #325	; 0x145
 800d07e:	f001 fbff 	bl	800e880 <__assert_func>
 800d082:	2301      	movs	r3, #1
 800d084:	6144      	str	r4, [r0, #20]
 800d086:	6103      	str	r3, [r0, #16]
 800d088:	bd10      	pop	{r4, pc}
 800d08a:	bf00      	nop
 800d08c:	0800f751 	.word	0x0800f751
 800d090:	0800f762 	.word	0x0800f762

0800d094 <__multiply>:
 800d094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d098:	4691      	mov	r9, r2
 800d09a:	690a      	ldr	r2, [r1, #16]
 800d09c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d0a0:	429a      	cmp	r2, r3
 800d0a2:	bfb8      	it	lt
 800d0a4:	460b      	movlt	r3, r1
 800d0a6:	460c      	mov	r4, r1
 800d0a8:	bfbc      	itt	lt
 800d0aa:	464c      	movlt	r4, r9
 800d0ac:	4699      	movlt	r9, r3
 800d0ae:	6927      	ldr	r7, [r4, #16]
 800d0b0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d0b4:	68a3      	ldr	r3, [r4, #8]
 800d0b6:	6861      	ldr	r1, [r4, #4]
 800d0b8:	eb07 060a 	add.w	r6, r7, sl
 800d0bc:	42b3      	cmp	r3, r6
 800d0be:	b085      	sub	sp, #20
 800d0c0:	bfb8      	it	lt
 800d0c2:	3101      	addlt	r1, #1
 800d0c4:	f7ff fe90 	bl	800cde8 <_Balloc>
 800d0c8:	b930      	cbnz	r0, 800d0d8 <__multiply+0x44>
 800d0ca:	4602      	mov	r2, r0
 800d0cc:	4b44      	ldr	r3, [pc, #272]	; (800d1e0 <__multiply+0x14c>)
 800d0ce:	4845      	ldr	r0, [pc, #276]	; (800d1e4 <__multiply+0x150>)
 800d0d0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d0d4:	f001 fbd4 	bl	800e880 <__assert_func>
 800d0d8:	f100 0514 	add.w	r5, r0, #20
 800d0dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d0e0:	462b      	mov	r3, r5
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	4543      	cmp	r3, r8
 800d0e6:	d321      	bcc.n	800d12c <__multiply+0x98>
 800d0e8:	f104 0314 	add.w	r3, r4, #20
 800d0ec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d0f0:	f109 0314 	add.w	r3, r9, #20
 800d0f4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d0f8:	9202      	str	r2, [sp, #8]
 800d0fa:	1b3a      	subs	r2, r7, r4
 800d0fc:	3a15      	subs	r2, #21
 800d0fe:	f022 0203 	bic.w	r2, r2, #3
 800d102:	3204      	adds	r2, #4
 800d104:	f104 0115 	add.w	r1, r4, #21
 800d108:	428f      	cmp	r7, r1
 800d10a:	bf38      	it	cc
 800d10c:	2204      	movcc	r2, #4
 800d10e:	9201      	str	r2, [sp, #4]
 800d110:	9a02      	ldr	r2, [sp, #8]
 800d112:	9303      	str	r3, [sp, #12]
 800d114:	429a      	cmp	r2, r3
 800d116:	d80c      	bhi.n	800d132 <__multiply+0x9e>
 800d118:	2e00      	cmp	r6, #0
 800d11a:	dd03      	ble.n	800d124 <__multiply+0x90>
 800d11c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d120:	2b00      	cmp	r3, #0
 800d122:	d05b      	beq.n	800d1dc <__multiply+0x148>
 800d124:	6106      	str	r6, [r0, #16]
 800d126:	b005      	add	sp, #20
 800d128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d12c:	f843 2b04 	str.w	r2, [r3], #4
 800d130:	e7d8      	b.n	800d0e4 <__multiply+0x50>
 800d132:	f8b3 a000 	ldrh.w	sl, [r3]
 800d136:	f1ba 0f00 	cmp.w	sl, #0
 800d13a:	d024      	beq.n	800d186 <__multiply+0xf2>
 800d13c:	f104 0e14 	add.w	lr, r4, #20
 800d140:	46a9      	mov	r9, r5
 800d142:	f04f 0c00 	mov.w	ip, #0
 800d146:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d14a:	f8d9 1000 	ldr.w	r1, [r9]
 800d14e:	fa1f fb82 	uxth.w	fp, r2
 800d152:	b289      	uxth	r1, r1
 800d154:	fb0a 110b 	mla	r1, sl, fp, r1
 800d158:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d15c:	f8d9 2000 	ldr.w	r2, [r9]
 800d160:	4461      	add	r1, ip
 800d162:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d166:	fb0a c20b 	mla	r2, sl, fp, ip
 800d16a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d16e:	b289      	uxth	r1, r1
 800d170:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d174:	4577      	cmp	r7, lr
 800d176:	f849 1b04 	str.w	r1, [r9], #4
 800d17a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d17e:	d8e2      	bhi.n	800d146 <__multiply+0xb2>
 800d180:	9a01      	ldr	r2, [sp, #4]
 800d182:	f845 c002 	str.w	ip, [r5, r2]
 800d186:	9a03      	ldr	r2, [sp, #12]
 800d188:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d18c:	3304      	adds	r3, #4
 800d18e:	f1b9 0f00 	cmp.w	r9, #0
 800d192:	d021      	beq.n	800d1d8 <__multiply+0x144>
 800d194:	6829      	ldr	r1, [r5, #0]
 800d196:	f104 0c14 	add.w	ip, r4, #20
 800d19a:	46ae      	mov	lr, r5
 800d19c:	f04f 0a00 	mov.w	sl, #0
 800d1a0:	f8bc b000 	ldrh.w	fp, [ip]
 800d1a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d1a8:	fb09 220b 	mla	r2, r9, fp, r2
 800d1ac:	4452      	add	r2, sl
 800d1ae:	b289      	uxth	r1, r1
 800d1b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d1b4:	f84e 1b04 	str.w	r1, [lr], #4
 800d1b8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d1bc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d1c0:	f8be 1000 	ldrh.w	r1, [lr]
 800d1c4:	fb09 110a 	mla	r1, r9, sl, r1
 800d1c8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d1cc:	4567      	cmp	r7, ip
 800d1ce:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d1d2:	d8e5      	bhi.n	800d1a0 <__multiply+0x10c>
 800d1d4:	9a01      	ldr	r2, [sp, #4]
 800d1d6:	50a9      	str	r1, [r5, r2]
 800d1d8:	3504      	adds	r5, #4
 800d1da:	e799      	b.n	800d110 <__multiply+0x7c>
 800d1dc:	3e01      	subs	r6, #1
 800d1de:	e79b      	b.n	800d118 <__multiply+0x84>
 800d1e0:	0800f751 	.word	0x0800f751
 800d1e4:	0800f762 	.word	0x0800f762

0800d1e8 <__pow5mult>:
 800d1e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1ec:	4615      	mov	r5, r2
 800d1ee:	f012 0203 	ands.w	r2, r2, #3
 800d1f2:	4606      	mov	r6, r0
 800d1f4:	460f      	mov	r7, r1
 800d1f6:	d007      	beq.n	800d208 <__pow5mult+0x20>
 800d1f8:	4c25      	ldr	r4, [pc, #148]	; (800d290 <__pow5mult+0xa8>)
 800d1fa:	3a01      	subs	r2, #1
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d202:	f7ff fe53 	bl	800ceac <__multadd>
 800d206:	4607      	mov	r7, r0
 800d208:	10ad      	asrs	r5, r5, #2
 800d20a:	d03d      	beq.n	800d288 <__pow5mult+0xa0>
 800d20c:	69f4      	ldr	r4, [r6, #28]
 800d20e:	b97c      	cbnz	r4, 800d230 <__pow5mult+0x48>
 800d210:	2010      	movs	r0, #16
 800d212:	f7ff fd35 	bl	800cc80 <malloc>
 800d216:	4602      	mov	r2, r0
 800d218:	61f0      	str	r0, [r6, #28]
 800d21a:	b928      	cbnz	r0, 800d228 <__pow5mult+0x40>
 800d21c:	4b1d      	ldr	r3, [pc, #116]	; (800d294 <__pow5mult+0xac>)
 800d21e:	481e      	ldr	r0, [pc, #120]	; (800d298 <__pow5mult+0xb0>)
 800d220:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d224:	f001 fb2c 	bl	800e880 <__assert_func>
 800d228:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d22c:	6004      	str	r4, [r0, #0]
 800d22e:	60c4      	str	r4, [r0, #12]
 800d230:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d234:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d238:	b94c      	cbnz	r4, 800d24e <__pow5mult+0x66>
 800d23a:	f240 2171 	movw	r1, #625	; 0x271
 800d23e:	4630      	mov	r0, r6
 800d240:	f7ff ff12 	bl	800d068 <__i2b>
 800d244:	2300      	movs	r3, #0
 800d246:	f8c8 0008 	str.w	r0, [r8, #8]
 800d24a:	4604      	mov	r4, r0
 800d24c:	6003      	str	r3, [r0, #0]
 800d24e:	f04f 0900 	mov.w	r9, #0
 800d252:	07eb      	lsls	r3, r5, #31
 800d254:	d50a      	bpl.n	800d26c <__pow5mult+0x84>
 800d256:	4639      	mov	r1, r7
 800d258:	4622      	mov	r2, r4
 800d25a:	4630      	mov	r0, r6
 800d25c:	f7ff ff1a 	bl	800d094 <__multiply>
 800d260:	4639      	mov	r1, r7
 800d262:	4680      	mov	r8, r0
 800d264:	4630      	mov	r0, r6
 800d266:	f7ff fdff 	bl	800ce68 <_Bfree>
 800d26a:	4647      	mov	r7, r8
 800d26c:	106d      	asrs	r5, r5, #1
 800d26e:	d00b      	beq.n	800d288 <__pow5mult+0xa0>
 800d270:	6820      	ldr	r0, [r4, #0]
 800d272:	b938      	cbnz	r0, 800d284 <__pow5mult+0x9c>
 800d274:	4622      	mov	r2, r4
 800d276:	4621      	mov	r1, r4
 800d278:	4630      	mov	r0, r6
 800d27a:	f7ff ff0b 	bl	800d094 <__multiply>
 800d27e:	6020      	str	r0, [r4, #0]
 800d280:	f8c0 9000 	str.w	r9, [r0]
 800d284:	4604      	mov	r4, r0
 800d286:	e7e4      	b.n	800d252 <__pow5mult+0x6a>
 800d288:	4638      	mov	r0, r7
 800d28a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d28e:	bf00      	nop
 800d290:	0800f8b0 	.word	0x0800f8b0
 800d294:	0800f6e2 	.word	0x0800f6e2
 800d298:	0800f762 	.word	0x0800f762

0800d29c <__lshift>:
 800d29c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2a0:	460c      	mov	r4, r1
 800d2a2:	6849      	ldr	r1, [r1, #4]
 800d2a4:	6923      	ldr	r3, [r4, #16]
 800d2a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d2aa:	68a3      	ldr	r3, [r4, #8]
 800d2ac:	4607      	mov	r7, r0
 800d2ae:	4691      	mov	r9, r2
 800d2b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d2b4:	f108 0601 	add.w	r6, r8, #1
 800d2b8:	42b3      	cmp	r3, r6
 800d2ba:	db0b      	blt.n	800d2d4 <__lshift+0x38>
 800d2bc:	4638      	mov	r0, r7
 800d2be:	f7ff fd93 	bl	800cde8 <_Balloc>
 800d2c2:	4605      	mov	r5, r0
 800d2c4:	b948      	cbnz	r0, 800d2da <__lshift+0x3e>
 800d2c6:	4602      	mov	r2, r0
 800d2c8:	4b28      	ldr	r3, [pc, #160]	; (800d36c <__lshift+0xd0>)
 800d2ca:	4829      	ldr	r0, [pc, #164]	; (800d370 <__lshift+0xd4>)
 800d2cc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d2d0:	f001 fad6 	bl	800e880 <__assert_func>
 800d2d4:	3101      	adds	r1, #1
 800d2d6:	005b      	lsls	r3, r3, #1
 800d2d8:	e7ee      	b.n	800d2b8 <__lshift+0x1c>
 800d2da:	2300      	movs	r3, #0
 800d2dc:	f100 0114 	add.w	r1, r0, #20
 800d2e0:	f100 0210 	add.w	r2, r0, #16
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	4553      	cmp	r3, sl
 800d2e8:	db33      	blt.n	800d352 <__lshift+0xb6>
 800d2ea:	6920      	ldr	r0, [r4, #16]
 800d2ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d2f0:	f104 0314 	add.w	r3, r4, #20
 800d2f4:	f019 091f 	ands.w	r9, r9, #31
 800d2f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d2fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d300:	d02b      	beq.n	800d35a <__lshift+0xbe>
 800d302:	f1c9 0e20 	rsb	lr, r9, #32
 800d306:	468a      	mov	sl, r1
 800d308:	2200      	movs	r2, #0
 800d30a:	6818      	ldr	r0, [r3, #0]
 800d30c:	fa00 f009 	lsl.w	r0, r0, r9
 800d310:	4310      	orrs	r0, r2
 800d312:	f84a 0b04 	str.w	r0, [sl], #4
 800d316:	f853 2b04 	ldr.w	r2, [r3], #4
 800d31a:	459c      	cmp	ip, r3
 800d31c:	fa22 f20e 	lsr.w	r2, r2, lr
 800d320:	d8f3      	bhi.n	800d30a <__lshift+0x6e>
 800d322:	ebac 0304 	sub.w	r3, ip, r4
 800d326:	3b15      	subs	r3, #21
 800d328:	f023 0303 	bic.w	r3, r3, #3
 800d32c:	3304      	adds	r3, #4
 800d32e:	f104 0015 	add.w	r0, r4, #21
 800d332:	4584      	cmp	ip, r0
 800d334:	bf38      	it	cc
 800d336:	2304      	movcc	r3, #4
 800d338:	50ca      	str	r2, [r1, r3]
 800d33a:	b10a      	cbz	r2, 800d340 <__lshift+0xa4>
 800d33c:	f108 0602 	add.w	r6, r8, #2
 800d340:	3e01      	subs	r6, #1
 800d342:	4638      	mov	r0, r7
 800d344:	612e      	str	r6, [r5, #16]
 800d346:	4621      	mov	r1, r4
 800d348:	f7ff fd8e 	bl	800ce68 <_Bfree>
 800d34c:	4628      	mov	r0, r5
 800d34e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d352:	f842 0f04 	str.w	r0, [r2, #4]!
 800d356:	3301      	adds	r3, #1
 800d358:	e7c5      	b.n	800d2e6 <__lshift+0x4a>
 800d35a:	3904      	subs	r1, #4
 800d35c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d360:	f841 2f04 	str.w	r2, [r1, #4]!
 800d364:	459c      	cmp	ip, r3
 800d366:	d8f9      	bhi.n	800d35c <__lshift+0xc0>
 800d368:	e7ea      	b.n	800d340 <__lshift+0xa4>
 800d36a:	bf00      	nop
 800d36c:	0800f751 	.word	0x0800f751
 800d370:	0800f762 	.word	0x0800f762

0800d374 <__mcmp>:
 800d374:	b530      	push	{r4, r5, lr}
 800d376:	6902      	ldr	r2, [r0, #16]
 800d378:	690c      	ldr	r4, [r1, #16]
 800d37a:	1b12      	subs	r2, r2, r4
 800d37c:	d10e      	bne.n	800d39c <__mcmp+0x28>
 800d37e:	f100 0314 	add.w	r3, r0, #20
 800d382:	3114      	adds	r1, #20
 800d384:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d388:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d38c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d390:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d394:	42a5      	cmp	r5, r4
 800d396:	d003      	beq.n	800d3a0 <__mcmp+0x2c>
 800d398:	d305      	bcc.n	800d3a6 <__mcmp+0x32>
 800d39a:	2201      	movs	r2, #1
 800d39c:	4610      	mov	r0, r2
 800d39e:	bd30      	pop	{r4, r5, pc}
 800d3a0:	4283      	cmp	r3, r0
 800d3a2:	d3f3      	bcc.n	800d38c <__mcmp+0x18>
 800d3a4:	e7fa      	b.n	800d39c <__mcmp+0x28>
 800d3a6:	f04f 32ff 	mov.w	r2, #4294967295
 800d3aa:	e7f7      	b.n	800d39c <__mcmp+0x28>

0800d3ac <__mdiff>:
 800d3ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3b0:	460c      	mov	r4, r1
 800d3b2:	4606      	mov	r6, r0
 800d3b4:	4611      	mov	r1, r2
 800d3b6:	4620      	mov	r0, r4
 800d3b8:	4690      	mov	r8, r2
 800d3ba:	f7ff ffdb 	bl	800d374 <__mcmp>
 800d3be:	1e05      	subs	r5, r0, #0
 800d3c0:	d110      	bne.n	800d3e4 <__mdiff+0x38>
 800d3c2:	4629      	mov	r1, r5
 800d3c4:	4630      	mov	r0, r6
 800d3c6:	f7ff fd0f 	bl	800cde8 <_Balloc>
 800d3ca:	b930      	cbnz	r0, 800d3da <__mdiff+0x2e>
 800d3cc:	4b3a      	ldr	r3, [pc, #232]	; (800d4b8 <__mdiff+0x10c>)
 800d3ce:	4602      	mov	r2, r0
 800d3d0:	f240 2137 	movw	r1, #567	; 0x237
 800d3d4:	4839      	ldr	r0, [pc, #228]	; (800d4bc <__mdiff+0x110>)
 800d3d6:	f001 fa53 	bl	800e880 <__assert_func>
 800d3da:	2301      	movs	r3, #1
 800d3dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d3e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3e4:	bfa4      	itt	ge
 800d3e6:	4643      	movge	r3, r8
 800d3e8:	46a0      	movge	r8, r4
 800d3ea:	4630      	mov	r0, r6
 800d3ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d3f0:	bfa6      	itte	ge
 800d3f2:	461c      	movge	r4, r3
 800d3f4:	2500      	movge	r5, #0
 800d3f6:	2501      	movlt	r5, #1
 800d3f8:	f7ff fcf6 	bl	800cde8 <_Balloc>
 800d3fc:	b920      	cbnz	r0, 800d408 <__mdiff+0x5c>
 800d3fe:	4b2e      	ldr	r3, [pc, #184]	; (800d4b8 <__mdiff+0x10c>)
 800d400:	4602      	mov	r2, r0
 800d402:	f240 2145 	movw	r1, #581	; 0x245
 800d406:	e7e5      	b.n	800d3d4 <__mdiff+0x28>
 800d408:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d40c:	6926      	ldr	r6, [r4, #16]
 800d40e:	60c5      	str	r5, [r0, #12]
 800d410:	f104 0914 	add.w	r9, r4, #20
 800d414:	f108 0514 	add.w	r5, r8, #20
 800d418:	f100 0e14 	add.w	lr, r0, #20
 800d41c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d420:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d424:	f108 0210 	add.w	r2, r8, #16
 800d428:	46f2      	mov	sl, lr
 800d42a:	2100      	movs	r1, #0
 800d42c:	f859 3b04 	ldr.w	r3, [r9], #4
 800d430:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d434:	fa11 f88b 	uxtah	r8, r1, fp
 800d438:	b299      	uxth	r1, r3
 800d43a:	0c1b      	lsrs	r3, r3, #16
 800d43c:	eba8 0801 	sub.w	r8, r8, r1
 800d440:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d444:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d448:	fa1f f888 	uxth.w	r8, r8
 800d44c:	1419      	asrs	r1, r3, #16
 800d44e:	454e      	cmp	r6, r9
 800d450:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d454:	f84a 3b04 	str.w	r3, [sl], #4
 800d458:	d8e8      	bhi.n	800d42c <__mdiff+0x80>
 800d45a:	1b33      	subs	r3, r6, r4
 800d45c:	3b15      	subs	r3, #21
 800d45e:	f023 0303 	bic.w	r3, r3, #3
 800d462:	3304      	adds	r3, #4
 800d464:	3415      	adds	r4, #21
 800d466:	42a6      	cmp	r6, r4
 800d468:	bf38      	it	cc
 800d46a:	2304      	movcc	r3, #4
 800d46c:	441d      	add	r5, r3
 800d46e:	4473      	add	r3, lr
 800d470:	469e      	mov	lr, r3
 800d472:	462e      	mov	r6, r5
 800d474:	4566      	cmp	r6, ip
 800d476:	d30e      	bcc.n	800d496 <__mdiff+0xea>
 800d478:	f10c 0203 	add.w	r2, ip, #3
 800d47c:	1b52      	subs	r2, r2, r5
 800d47e:	f022 0203 	bic.w	r2, r2, #3
 800d482:	3d03      	subs	r5, #3
 800d484:	45ac      	cmp	ip, r5
 800d486:	bf38      	it	cc
 800d488:	2200      	movcc	r2, #0
 800d48a:	4413      	add	r3, r2
 800d48c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d490:	b17a      	cbz	r2, 800d4b2 <__mdiff+0x106>
 800d492:	6107      	str	r7, [r0, #16]
 800d494:	e7a4      	b.n	800d3e0 <__mdiff+0x34>
 800d496:	f856 8b04 	ldr.w	r8, [r6], #4
 800d49a:	fa11 f288 	uxtah	r2, r1, r8
 800d49e:	1414      	asrs	r4, r2, #16
 800d4a0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d4a4:	b292      	uxth	r2, r2
 800d4a6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d4aa:	f84e 2b04 	str.w	r2, [lr], #4
 800d4ae:	1421      	asrs	r1, r4, #16
 800d4b0:	e7e0      	b.n	800d474 <__mdiff+0xc8>
 800d4b2:	3f01      	subs	r7, #1
 800d4b4:	e7ea      	b.n	800d48c <__mdiff+0xe0>
 800d4b6:	bf00      	nop
 800d4b8:	0800f751 	.word	0x0800f751
 800d4bc:	0800f762 	.word	0x0800f762

0800d4c0 <__ulp>:
 800d4c0:	b082      	sub	sp, #8
 800d4c2:	ed8d 0b00 	vstr	d0, [sp]
 800d4c6:	9a01      	ldr	r2, [sp, #4]
 800d4c8:	4b0f      	ldr	r3, [pc, #60]	; (800d508 <__ulp+0x48>)
 800d4ca:	4013      	ands	r3, r2
 800d4cc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	dc08      	bgt.n	800d4e6 <__ulp+0x26>
 800d4d4:	425b      	negs	r3, r3
 800d4d6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800d4da:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d4de:	da04      	bge.n	800d4ea <__ulp+0x2a>
 800d4e0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d4e4:	4113      	asrs	r3, r2
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	e008      	b.n	800d4fc <__ulp+0x3c>
 800d4ea:	f1a2 0314 	sub.w	r3, r2, #20
 800d4ee:	2b1e      	cmp	r3, #30
 800d4f0:	bfda      	itte	le
 800d4f2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800d4f6:	40da      	lsrle	r2, r3
 800d4f8:	2201      	movgt	r2, #1
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	4619      	mov	r1, r3
 800d4fe:	4610      	mov	r0, r2
 800d500:	ec41 0b10 	vmov	d0, r0, r1
 800d504:	b002      	add	sp, #8
 800d506:	4770      	bx	lr
 800d508:	7ff00000 	.word	0x7ff00000

0800d50c <__b2d>:
 800d50c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d510:	6906      	ldr	r6, [r0, #16]
 800d512:	f100 0814 	add.w	r8, r0, #20
 800d516:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d51a:	1f37      	subs	r7, r6, #4
 800d51c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d520:	4610      	mov	r0, r2
 800d522:	f7ff fd53 	bl	800cfcc <__hi0bits>
 800d526:	f1c0 0320 	rsb	r3, r0, #32
 800d52a:	280a      	cmp	r0, #10
 800d52c:	600b      	str	r3, [r1, #0]
 800d52e:	491b      	ldr	r1, [pc, #108]	; (800d59c <__b2d+0x90>)
 800d530:	dc15      	bgt.n	800d55e <__b2d+0x52>
 800d532:	f1c0 0c0b 	rsb	ip, r0, #11
 800d536:	fa22 f30c 	lsr.w	r3, r2, ip
 800d53a:	45b8      	cmp	r8, r7
 800d53c:	ea43 0501 	orr.w	r5, r3, r1
 800d540:	bf34      	ite	cc
 800d542:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d546:	2300      	movcs	r3, #0
 800d548:	3015      	adds	r0, #21
 800d54a:	fa02 f000 	lsl.w	r0, r2, r0
 800d54e:	fa23 f30c 	lsr.w	r3, r3, ip
 800d552:	4303      	orrs	r3, r0
 800d554:	461c      	mov	r4, r3
 800d556:	ec45 4b10 	vmov	d0, r4, r5
 800d55a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d55e:	45b8      	cmp	r8, r7
 800d560:	bf3a      	itte	cc
 800d562:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d566:	f1a6 0708 	subcc.w	r7, r6, #8
 800d56a:	2300      	movcs	r3, #0
 800d56c:	380b      	subs	r0, #11
 800d56e:	d012      	beq.n	800d596 <__b2d+0x8a>
 800d570:	f1c0 0120 	rsb	r1, r0, #32
 800d574:	fa23 f401 	lsr.w	r4, r3, r1
 800d578:	4082      	lsls	r2, r0
 800d57a:	4322      	orrs	r2, r4
 800d57c:	4547      	cmp	r7, r8
 800d57e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800d582:	bf8c      	ite	hi
 800d584:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d588:	2200      	movls	r2, #0
 800d58a:	4083      	lsls	r3, r0
 800d58c:	40ca      	lsrs	r2, r1
 800d58e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d592:	4313      	orrs	r3, r2
 800d594:	e7de      	b.n	800d554 <__b2d+0x48>
 800d596:	ea42 0501 	orr.w	r5, r2, r1
 800d59a:	e7db      	b.n	800d554 <__b2d+0x48>
 800d59c:	3ff00000 	.word	0x3ff00000

0800d5a0 <__d2b>:
 800d5a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d5a4:	460f      	mov	r7, r1
 800d5a6:	2101      	movs	r1, #1
 800d5a8:	ec59 8b10 	vmov	r8, r9, d0
 800d5ac:	4616      	mov	r6, r2
 800d5ae:	f7ff fc1b 	bl	800cde8 <_Balloc>
 800d5b2:	4604      	mov	r4, r0
 800d5b4:	b930      	cbnz	r0, 800d5c4 <__d2b+0x24>
 800d5b6:	4602      	mov	r2, r0
 800d5b8:	4b24      	ldr	r3, [pc, #144]	; (800d64c <__d2b+0xac>)
 800d5ba:	4825      	ldr	r0, [pc, #148]	; (800d650 <__d2b+0xb0>)
 800d5bc:	f240 310f 	movw	r1, #783	; 0x30f
 800d5c0:	f001 f95e 	bl	800e880 <__assert_func>
 800d5c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d5c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d5cc:	bb2d      	cbnz	r5, 800d61a <__d2b+0x7a>
 800d5ce:	9301      	str	r3, [sp, #4]
 800d5d0:	f1b8 0300 	subs.w	r3, r8, #0
 800d5d4:	d026      	beq.n	800d624 <__d2b+0x84>
 800d5d6:	4668      	mov	r0, sp
 800d5d8:	9300      	str	r3, [sp, #0]
 800d5da:	f7ff fd17 	bl	800d00c <__lo0bits>
 800d5de:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d5e2:	b1e8      	cbz	r0, 800d620 <__d2b+0x80>
 800d5e4:	f1c0 0320 	rsb	r3, r0, #32
 800d5e8:	fa02 f303 	lsl.w	r3, r2, r3
 800d5ec:	430b      	orrs	r3, r1
 800d5ee:	40c2      	lsrs	r2, r0
 800d5f0:	6163      	str	r3, [r4, #20]
 800d5f2:	9201      	str	r2, [sp, #4]
 800d5f4:	9b01      	ldr	r3, [sp, #4]
 800d5f6:	61a3      	str	r3, [r4, #24]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	bf14      	ite	ne
 800d5fc:	2202      	movne	r2, #2
 800d5fe:	2201      	moveq	r2, #1
 800d600:	6122      	str	r2, [r4, #16]
 800d602:	b1bd      	cbz	r5, 800d634 <__d2b+0x94>
 800d604:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d608:	4405      	add	r5, r0
 800d60a:	603d      	str	r5, [r7, #0]
 800d60c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d610:	6030      	str	r0, [r6, #0]
 800d612:	4620      	mov	r0, r4
 800d614:	b003      	add	sp, #12
 800d616:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d61a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d61e:	e7d6      	b.n	800d5ce <__d2b+0x2e>
 800d620:	6161      	str	r1, [r4, #20]
 800d622:	e7e7      	b.n	800d5f4 <__d2b+0x54>
 800d624:	a801      	add	r0, sp, #4
 800d626:	f7ff fcf1 	bl	800d00c <__lo0bits>
 800d62a:	9b01      	ldr	r3, [sp, #4]
 800d62c:	6163      	str	r3, [r4, #20]
 800d62e:	3020      	adds	r0, #32
 800d630:	2201      	movs	r2, #1
 800d632:	e7e5      	b.n	800d600 <__d2b+0x60>
 800d634:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d638:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d63c:	6038      	str	r0, [r7, #0]
 800d63e:	6918      	ldr	r0, [r3, #16]
 800d640:	f7ff fcc4 	bl	800cfcc <__hi0bits>
 800d644:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d648:	e7e2      	b.n	800d610 <__d2b+0x70>
 800d64a:	bf00      	nop
 800d64c:	0800f751 	.word	0x0800f751
 800d650:	0800f762 	.word	0x0800f762

0800d654 <__ratio>:
 800d654:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d658:	4688      	mov	r8, r1
 800d65a:	4669      	mov	r1, sp
 800d65c:	4681      	mov	r9, r0
 800d65e:	f7ff ff55 	bl	800d50c <__b2d>
 800d662:	a901      	add	r1, sp, #4
 800d664:	4640      	mov	r0, r8
 800d666:	ec55 4b10 	vmov	r4, r5, d0
 800d66a:	ee10 aa10 	vmov	sl, s0
 800d66e:	f7ff ff4d 	bl	800d50c <__b2d>
 800d672:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800d676:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800d67a:	1ad2      	subs	r2, r2, r3
 800d67c:	e9dd 3100 	ldrd	r3, r1, [sp]
 800d680:	1a5b      	subs	r3, r3, r1
 800d682:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800d686:	ec57 6b10 	vmov	r6, r7, d0
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	bfd6      	itet	le
 800d68e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d692:	462a      	movgt	r2, r5
 800d694:	463a      	movle	r2, r7
 800d696:	46ab      	mov	fp, r5
 800d698:	bfd6      	itet	le
 800d69a:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800d69e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800d6a2:	ee00 3a90 	vmovle	s1, r3
 800d6a6:	ec4b ab17 	vmov	d7, sl, fp
 800d6aa:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800d6ae:	b003      	add	sp, #12
 800d6b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d6b4 <__copybits>:
 800d6b4:	3901      	subs	r1, #1
 800d6b6:	b570      	push	{r4, r5, r6, lr}
 800d6b8:	1149      	asrs	r1, r1, #5
 800d6ba:	6914      	ldr	r4, [r2, #16]
 800d6bc:	3101      	adds	r1, #1
 800d6be:	f102 0314 	add.w	r3, r2, #20
 800d6c2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d6c6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d6ca:	1f05      	subs	r5, r0, #4
 800d6cc:	42a3      	cmp	r3, r4
 800d6ce:	d30c      	bcc.n	800d6ea <__copybits+0x36>
 800d6d0:	1aa3      	subs	r3, r4, r2
 800d6d2:	3b11      	subs	r3, #17
 800d6d4:	f023 0303 	bic.w	r3, r3, #3
 800d6d8:	3211      	adds	r2, #17
 800d6da:	42a2      	cmp	r2, r4
 800d6dc:	bf88      	it	hi
 800d6de:	2300      	movhi	r3, #0
 800d6e0:	4418      	add	r0, r3
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	4288      	cmp	r0, r1
 800d6e6:	d305      	bcc.n	800d6f4 <__copybits+0x40>
 800d6e8:	bd70      	pop	{r4, r5, r6, pc}
 800d6ea:	f853 6b04 	ldr.w	r6, [r3], #4
 800d6ee:	f845 6f04 	str.w	r6, [r5, #4]!
 800d6f2:	e7eb      	b.n	800d6cc <__copybits+0x18>
 800d6f4:	f840 3b04 	str.w	r3, [r0], #4
 800d6f8:	e7f4      	b.n	800d6e4 <__copybits+0x30>

0800d6fa <__any_on>:
 800d6fa:	f100 0214 	add.w	r2, r0, #20
 800d6fe:	6900      	ldr	r0, [r0, #16]
 800d700:	114b      	asrs	r3, r1, #5
 800d702:	4298      	cmp	r0, r3
 800d704:	b510      	push	{r4, lr}
 800d706:	db11      	blt.n	800d72c <__any_on+0x32>
 800d708:	dd0a      	ble.n	800d720 <__any_on+0x26>
 800d70a:	f011 011f 	ands.w	r1, r1, #31
 800d70e:	d007      	beq.n	800d720 <__any_on+0x26>
 800d710:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d714:	fa24 f001 	lsr.w	r0, r4, r1
 800d718:	fa00 f101 	lsl.w	r1, r0, r1
 800d71c:	428c      	cmp	r4, r1
 800d71e:	d10b      	bne.n	800d738 <__any_on+0x3e>
 800d720:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d724:	4293      	cmp	r3, r2
 800d726:	d803      	bhi.n	800d730 <__any_on+0x36>
 800d728:	2000      	movs	r0, #0
 800d72a:	bd10      	pop	{r4, pc}
 800d72c:	4603      	mov	r3, r0
 800d72e:	e7f7      	b.n	800d720 <__any_on+0x26>
 800d730:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d734:	2900      	cmp	r1, #0
 800d736:	d0f5      	beq.n	800d724 <__any_on+0x2a>
 800d738:	2001      	movs	r0, #1
 800d73a:	e7f6      	b.n	800d72a <__any_on+0x30>

0800d73c <sulp>:
 800d73c:	b570      	push	{r4, r5, r6, lr}
 800d73e:	4604      	mov	r4, r0
 800d740:	460d      	mov	r5, r1
 800d742:	4616      	mov	r6, r2
 800d744:	ec45 4b10 	vmov	d0, r4, r5
 800d748:	f7ff feba 	bl	800d4c0 <__ulp>
 800d74c:	b17e      	cbz	r6, 800d76e <sulp+0x32>
 800d74e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d752:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d756:	2b00      	cmp	r3, #0
 800d758:	dd09      	ble.n	800d76e <sulp+0x32>
 800d75a:	051b      	lsls	r3, r3, #20
 800d75c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800d760:	2000      	movs	r0, #0
 800d762:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800d766:	ec41 0b17 	vmov	d7, r0, r1
 800d76a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d76e:	bd70      	pop	{r4, r5, r6, pc}

0800d770 <_strtod_l>:
 800d770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d774:	ed2d 8b0e 	vpush	{d8-d14}
 800d778:	b097      	sub	sp, #92	; 0x5c
 800d77a:	4604      	mov	r4, r0
 800d77c:	920d      	str	r2, [sp, #52]	; 0x34
 800d77e:	2200      	movs	r2, #0
 800d780:	9212      	str	r2, [sp, #72]	; 0x48
 800d782:	468a      	mov	sl, r1
 800d784:	f04f 0800 	mov.w	r8, #0
 800d788:	f04f 0900 	mov.w	r9, #0
 800d78c:	460a      	mov	r2, r1
 800d78e:	9211      	str	r2, [sp, #68]	; 0x44
 800d790:	7811      	ldrb	r1, [r2, #0]
 800d792:	292b      	cmp	r1, #43	; 0x2b
 800d794:	d04c      	beq.n	800d830 <_strtod_l+0xc0>
 800d796:	d839      	bhi.n	800d80c <_strtod_l+0x9c>
 800d798:	290d      	cmp	r1, #13
 800d79a:	d833      	bhi.n	800d804 <_strtod_l+0x94>
 800d79c:	2908      	cmp	r1, #8
 800d79e:	d833      	bhi.n	800d808 <_strtod_l+0x98>
 800d7a0:	2900      	cmp	r1, #0
 800d7a2:	d03c      	beq.n	800d81e <_strtod_l+0xae>
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	9208      	str	r2, [sp, #32]
 800d7a8:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800d7aa:	7832      	ldrb	r2, [r6, #0]
 800d7ac:	2a30      	cmp	r2, #48	; 0x30
 800d7ae:	f040 80b8 	bne.w	800d922 <_strtod_l+0x1b2>
 800d7b2:	7872      	ldrb	r2, [r6, #1]
 800d7b4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800d7b8:	2a58      	cmp	r2, #88	; 0x58
 800d7ba:	d170      	bne.n	800d89e <_strtod_l+0x12e>
 800d7bc:	9302      	str	r3, [sp, #8]
 800d7be:	9b08      	ldr	r3, [sp, #32]
 800d7c0:	9301      	str	r3, [sp, #4]
 800d7c2:	ab12      	add	r3, sp, #72	; 0x48
 800d7c4:	9300      	str	r3, [sp, #0]
 800d7c6:	4a91      	ldr	r2, [pc, #580]	; (800da0c <_strtod_l+0x29c>)
 800d7c8:	ab13      	add	r3, sp, #76	; 0x4c
 800d7ca:	a911      	add	r1, sp, #68	; 0x44
 800d7cc:	4620      	mov	r0, r4
 800d7ce:	f001 f8f3 	bl	800e9b8 <__gethex>
 800d7d2:	f010 070f 	ands.w	r7, r0, #15
 800d7d6:	4605      	mov	r5, r0
 800d7d8:	d005      	beq.n	800d7e6 <_strtod_l+0x76>
 800d7da:	2f06      	cmp	r7, #6
 800d7dc:	d12a      	bne.n	800d834 <_strtod_l+0xc4>
 800d7de:	3601      	adds	r6, #1
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	9611      	str	r6, [sp, #68]	; 0x44
 800d7e4:	9308      	str	r3, [sp, #32]
 800d7e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	f040 8555 	bne.w	800e298 <_strtod_l+0xb28>
 800d7ee:	9b08      	ldr	r3, [sp, #32]
 800d7f0:	ec49 8b10 	vmov	d0, r8, r9
 800d7f4:	b1cb      	cbz	r3, 800d82a <_strtod_l+0xba>
 800d7f6:	eeb1 0b40 	vneg.f64	d0, d0
 800d7fa:	b017      	add	sp, #92	; 0x5c
 800d7fc:	ecbd 8b0e 	vpop	{d8-d14}
 800d800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d804:	2920      	cmp	r1, #32
 800d806:	d1cd      	bne.n	800d7a4 <_strtod_l+0x34>
 800d808:	3201      	adds	r2, #1
 800d80a:	e7c0      	b.n	800d78e <_strtod_l+0x1e>
 800d80c:	292d      	cmp	r1, #45	; 0x2d
 800d80e:	d1c9      	bne.n	800d7a4 <_strtod_l+0x34>
 800d810:	2101      	movs	r1, #1
 800d812:	9108      	str	r1, [sp, #32]
 800d814:	1c51      	adds	r1, r2, #1
 800d816:	9111      	str	r1, [sp, #68]	; 0x44
 800d818:	7852      	ldrb	r2, [r2, #1]
 800d81a:	2a00      	cmp	r2, #0
 800d81c:	d1c4      	bne.n	800d7a8 <_strtod_l+0x38>
 800d81e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d820:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800d824:	2b00      	cmp	r3, #0
 800d826:	f040 8535 	bne.w	800e294 <_strtod_l+0xb24>
 800d82a:	ec49 8b10 	vmov	d0, r8, r9
 800d82e:	e7e4      	b.n	800d7fa <_strtod_l+0x8a>
 800d830:	2100      	movs	r1, #0
 800d832:	e7ee      	b.n	800d812 <_strtod_l+0xa2>
 800d834:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d836:	b13a      	cbz	r2, 800d848 <_strtod_l+0xd8>
 800d838:	2135      	movs	r1, #53	; 0x35
 800d83a:	a814      	add	r0, sp, #80	; 0x50
 800d83c:	f7ff ff3a 	bl	800d6b4 <__copybits>
 800d840:	9912      	ldr	r1, [sp, #72]	; 0x48
 800d842:	4620      	mov	r0, r4
 800d844:	f7ff fb10 	bl	800ce68 <_Bfree>
 800d848:	1e7b      	subs	r3, r7, #1
 800d84a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d84c:	2b04      	cmp	r3, #4
 800d84e:	d806      	bhi.n	800d85e <_strtod_l+0xee>
 800d850:	e8df f003 	tbb	[pc, r3]
 800d854:	201d0314 	.word	0x201d0314
 800d858:	14          	.byte	0x14
 800d859:	00          	.byte	0x00
 800d85a:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800d85e:	05eb      	lsls	r3, r5, #23
 800d860:	bf48      	it	mi
 800d862:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800d866:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d86a:	0d1b      	lsrs	r3, r3, #20
 800d86c:	051b      	lsls	r3, r3, #20
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d1b9      	bne.n	800d7e6 <_strtod_l+0x76>
 800d872:	f7fe fb83 	bl	800bf7c <__errno>
 800d876:	2322      	movs	r3, #34	; 0x22
 800d878:	6003      	str	r3, [r0, #0]
 800d87a:	e7b4      	b.n	800d7e6 <_strtod_l+0x76>
 800d87c:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800d880:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d884:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d888:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800d88c:	e7e7      	b.n	800d85e <_strtod_l+0xee>
 800d88e:	f8df 9184 	ldr.w	r9, [pc, #388]	; 800da14 <_strtod_l+0x2a4>
 800d892:	e7e4      	b.n	800d85e <_strtod_l+0xee>
 800d894:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800d898:	f04f 38ff 	mov.w	r8, #4294967295
 800d89c:	e7df      	b.n	800d85e <_strtod_l+0xee>
 800d89e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d8a0:	1c5a      	adds	r2, r3, #1
 800d8a2:	9211      	str	r2, [sp, #68]	; 0x44
 800d8a4:	785b      	ldrb	r3, [r3, #1]
 800d8a6:	2b30      	cmp	r3, #48	; 0x30
 800d8a8:	d0f9      	beq.n	800d89e <_strtod_l+0x12e>
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d09b      	beq.n	800d7e6 <_strtod_l+0x76>
 800d8ae:	2301      	movs	r3, #1
 800d8b0:	9306      	str	r3, [sp, #24]
 800d8b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d8b4:	9309      	str	r3, [sp, #36]	; 0x24
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	9305      	str	r3, [sp, #20]
 800d8ba:	9307      	str	r3, [sp, #28]
 800d8bc:	461e      	mov	r6, r3
 800d8be:	220a      	movs	r2, #10
 800d8c0:	9811      	ldr	r0, [sp, #68]	; 0x44
 800d8c2:	7805      	ldrb	r5, [r0, #0]
 800d8c4:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800d8c8:	b2d9      	uxtb	r1, r3
 800d8ca:	2909      	cmp	r1, #9
 800d8cc:	d92b      	bls.n	800d926 <_strtod_l+0x1b6>
 800d8ce:	4950      	ldr	r1, [pc, #320]	; (800da10 <_strtod_l+0x2a0>)
 800d8d0:	2201      	movs	r2, #1
 800d8d2:	f000 ffa9 	bl	800e828 <strncmp>
 800d8d6:	2800      	cmp	r0, #0
 800d8d8:	d035      	beq.n	800d946 <_strtod_l+0x1d6>
 800d8da:	2000      	movs	r0, #0
 800d8dc:	462a      	mov	r2, r5
 800d8de:	4633      	mov	r3, r6
 800d8e0:	4683      	mov	fp, r0
 800d8e2:	4601      	mov	r1, r0
 800d8e4:	2a65      	cmp	r2, #101	; 0x65
 800d8e6:	d001      	beq.n	800d8ec <_strtod_l+0x17c>
 800d8e8:	2a45      	cmp	r2, #69	; 0x45
 800d8ea:	d118      	bne.n	800d91e <_strtod_l+0x1ae>
 800d8ec:	b91b      	cbnz	r3, 800d8f6 <_strtod_l+0x186>
 800d8ee:	9b06      	ldr	r3, [sp, #24]
 800d8f0:	4303      	orrs	r3, r0
 800d8f2:	d094      	beq.n	800d81e <_strtod_l+0xae>
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 800d8fa:	f10a 0201 	add.w	r2, sl, #1
 800d8fe:	9211      	str	r2, [sp, #68]	; 0x44
 800d900:	f89a 2001 	ldrb.w	r2, [sl, #1]
 800d904:	2a2b      	cmp	r2, #43	; 0x2b
 800d906:	d075      	beq.n	800d9f4 <_strtod_l+0x284>
 800d908:	2a2d      	cmp	r2, #45	; 0x2d
 800d90a:	d07b      	beq.n	800da04 <_strtod_l+0x294>
 800d90c:	f04f 0e00 	mov.w	lr, #0
 800d910:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800d914:	2d09      	cmp	r5, #9
 800d916:	f240 8083 	bls.w	800da20 <_strtod_l+0x2b0>
 800d91a:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800d91e:	2500      	movs	r5, #0
 800d920:	e09e      	b.n	800da60 <_strtod_l+0x2f0>
 800d922:	2300      	movs	r3, #0
 800d924:	e7c4      	b.n	800d8b0 <_strtod_l+0x140>
 800d926:	2e08      	cmp	r6, #8
 800d928:	bfd5      	itete	le
 800d92a:	9907      	ldrle	r1, [sp, #28]
 800d92c:	9905      	ldrgt	r1, [sp, #20]
 800d92e:	fb02 3301 	mlale	r3, r2, r1, r3
 800d932:	fb02 3301 	mlagt	r3, r2, r1, r3
 800d936:	f100 0001 	add.w	r0, r0, #1
 800d93a:	bfd4      	ite	le
 800d93c:	9307      	strle	r3, [sp, #28]
 800d93e:	9305      	strgt	r3, [sp, #20]
 800d940:	3601      	adds	r6, #1
 800d942:	9011      	str	r0, [sp, #68]	; 0x44
 800d944:	e7bc      	b.n	800d8c0 <_strtod_l+0x150>
 800d946:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d948:	1c5a      	adds	r2, r3, #1
 800d94a:	9211      	str	r2, [sp, #68]	; 0x44
 800d94c:	785a      	ldrb	r2, [r3, #1]
 800d94e:	b3ae      	cbz	r6, 800d9bc <_strtod_l+0x24c>
 800d950:	4683      	mov	fp, r0
 800d952:	4633      	mov	r3, r6
 800d954:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800d958:	2909      	cmp	r1, #9
 800d95a:	d912      	bls.n	800d982 <_strtod_l+0x212>
 800d95c:	2101      	movs	r1, #1
 800d95e:	e7c1      	b.n	800d8e4 <_strtod_l+0x174>
 800d960:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d962:	1c5a      	adds	r2, r3, #1
 800d964:	9211      	str	r2, [sp, #68]	; 0x44
 800d966:	785a      	ldrb	r2, [r3, #1]
 800d968:	3001      	adds	r0, #1
 800d96a:	2a30      	cmp	r2, #48	; 0x30
 800d96c:	d0f8      	beq.n	800d960 <_strtod_l+0x1f0>
 800d96e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800d972:	2b08      	cmp	r3, #8
 800d974:	f200 8495 	bhi.w	800e2a2 <_strtod_l+0xb32>
 800d978:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d97a:	9309      	str	r3, [sp, #36]	; 0x24
 800d97c:	4683      	mov	fp, r0
 800d97e:	2000      	movs	r0, #0
 800d980:	4603      	mov	r3, r0
 800d982:	3a30      	subs	r2, #48	; 0x30
 800d984:	f100 0101 	add.w	r1, r0, #1
 800d988:	d012      	beq.n	800d9b0 <_strtod_l+0x240>
 800d98a:	448b      	add	fp, r1
 800d98c:	eb00 0c03 	add.w	ip, r0, r3
 800d990:	4619      	mov	r1, r3
 800d992:	250a      	movs	r5, #10
 800d994:	4561      	cmp	r1, ip
 800d996:	d113      	bne.n	800d9c0 <_strtod_l+0x250>
 800d998:	1819      	adds	r1, r3, r0
 800d99a:	2908      	cmp	r1, #8
 800d99c:	f103 0301 	add.w	r3, r3, #1
 800d9a0:	4403      	add	r3, r0
 800d9a2:	dc1b      	bgt.n	800d9dc <_strtod_l+0x26c>
 800d9a4:	9807      	ldr	r0, [sp, #28]
 800d9a6:	210a      	movs	r1, #10
 800d9a8:	fb01 2200 	mla	r2, r1, r0, r2
 800d9ac:	9207      	str	r2, [sp, #28]
 800d9ae:	2100      	movs	r1, #0
 800d9b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d9b2:	1c50      	adds	r0, r2, #1
 800d9b4:	9011      	str	r0, [sp, #68]	; 0x44
 800d9b6:	7852      	ldrb	r2, [r2, #1]
 800d9b8:	4608      	mov	r0, r1
 800d9ba:	e7cb      	b.n	800d954 <_strtod_l+0x1e4>
 800d9bc:	4630      	mov	r0, r6
 800d9be:	e7d4      	b.n	800d96a <_strtod_l+0x1fa>
 800d9c0:	2908      	cmp	r1, #8
 800d9c2:	f101 0101 	add.w	r1, r1, #1
 800d9c6:	dc03      	bgt.n	800d9d0 <_strtod_l+0x260>
 800d9c8:	9f07      	ldr	r7, [sp, #28]
 800d9ca:	436f      	muls	r7, r5
 800d9cc:	9707      	str	r7, [sp, #28]
 800d9ce:	e7e1      	b.n	800d994 <_strtod_l+0x224>
 800d9d0:	2910      	cmp	r1, #16
 800d9d2:	bfde      	ittt	le
 800d9d4:	9f05      	ldrle	r7, [sp, #20]
 800d9d6:	436f      	mulle	r7, r5
 800d9d8:	9705      	strle	r7, [sp, #20]
 800d9da:	e7db      	b.n	800d994 <_strtod_l+0x224>
 800d9dc:	2b10      	cmp	r3, #16
 800d9de:	bfdf      	itttt	le
 800d9e0:	9805      	ldrle	r0, [sp, #20]
 800d9e2:	210a      	movle	r1, #10
 800d9e4:	fb01 2200 	mlale	r2, r1, r0, r2
 800d9e8:	9205      	strle	r2, [sp, #20]
 800d9ea:	e7e0      	b.n	800d9ae <_strtod_l+0x23e>
 800d9ec:	f04f 0b00 	mov.w	fp, #0
 800d9f0:	2101      	movs	r1, #1
 800d9f2:	e77c      	b.n	800d8ee <_strtod_l+0x17e>
 800d9f4:	f04f 0e00 	mov.w	lr, #0
 800d9f8:	f10a 0202 	add.w	r2, sl, #2
 800d9fc:	9211      	str	r2, [sp, #68]	; 0x44
 800d9fe:	f89a 2002 	ldrb.w	r2, [sl, #2]
 800da02:	e785      	b.n	800d910 <_strtod_l+0x1a0>
 800da04:	f04f 0e01 	mov.w	lr, #1
 800da08:	e7f6      	b.n	800d9f8 <_strtod_l+0x288>
 800da0a:	bf00      	nop
 800da0c:	0800f8c0 	.word	0x0800f8c0
 800da10:	0800f8bc 	.word	0x0800f8bc
 800da14:	7ff00000 	.word	0x7ff00000
 800da18:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800da1a:	1c55      	adds	r5, r2, #1
 800da1c:	9511      	str	r5, [sp, #68]	; 0x44
 800da1e:	7852      	ldrb	r2, [r2, #1]
 800da20:	2a30      	cmp	r2, #48	; 0x30
 800da22:	d0f9      	beq.n	800da18 <_strtod_l+0x2a8>
 800da24:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800da28:	2d08      	cmp	r5, #8
 800da2a:	f63f af78 	bhi.w	800d91e <_strtod_l+0x1ae>
 800da2e:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800da32:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800da34:	920a      	str	r2, [sp, #40]	; 0x28
 800da36:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800da38:	1c55      	adds	r5, r2, #1
 800da3a:	9511      	str	r5, [sp, #68]	; 0x44
 800da3c:	7852      	ldrb	r2, [r2, #1]
 800da3e:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800da42:	2f09      	cmp	r7, #9
 800da44:	d937      	bls.n	800dab6 <_strtod_l+0x346>
 800da46:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800da48:	1bed      	subs	r5, r5, r7
 800da4a:	2d08      	cmp	r5, #8
 800da4c:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800da50:	dc02      	bgt.n	800da58 <_strtod_l+0x2e8>
 800da52:	4565      	cmp	r5, ip
 800da54:	bfa8      	it	ge
 800da56:	4665      	movge	r5, ip
 800da58:	f1be 0f00 	cmp.w	lr, #0
 800da5c:	d000      	beq.n	800da60 <_strtod_l+0x2f0>
 800da5e:	426d      	negs	r5, r5
 800da60:	2b00      	cmp	r3, #0
 800da62:	d14d      	bne.n	800db00 <_strtod_l+0x390>
 800da64:	9b06      	ldr	r3, [sp, #24]
 800da66:	4303      	orrs	r3, r0
 800da68:	f47f aebd 	bne.w	800d7e6 <_strtod_l+0x76>
 800da6c:	2900      	cmp	r1, #0
 800da6e:	f47f aed6 	bne.w	800d81e <_strtod_l+0xae>
 800da72:	2a69      	cmp	r2, #105	; 0x69
 800da74:	d027      	beq.n	800dac6 <_strtod_l+0x356>
 800da76:	dc24      	bgt.n	800dac2 <_strtod_l+0x352>
 800da78:	2a49      	cmp	r2, #73	; 0x49
 800da7a:	d024      	beq.n	800dac6 <_strtod_l+0x356>
 800da7c:	2a4e      	cmp	r2, #78	; 0x4e
 800da7e:	f47f aece 	bne.w	800d81e <_strtod_l+0xae>
 800da82:	4995      	ldr	r1, [pc, #596]	; (800dcd8 <_strtod_l+0x568>)
 800da84:	a811      	add	r0, sp, #68	; 0x44
 800da86:	f001 f9d7 	bl	800ee38 <__match>
 800da8a:	2800      	cmp	r0, #0
 800da8c:	f43f aec7 	beq.w	800d81e <_strtod_l+0xae>
 800da90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800da92:	781b      	ldrb	r3, [r3, #0]
 800da94:	2b28      	cmp	r3, #40	; 0x28
 800da96:	d12d      	bne.n	800daf4 <_strtod_l+0x384>
 800da98:	4990      	ldr	r1, [pc, #576]	; (800dcdc <_strtod_l+0x56c>)
 800da9a:	aa14      	add	r2, sp, #80	; 0x50
 800da9c:	a811      	add	r0, sp, #68	; 0x44
 800da9e:	f001 f9df 	bl	800ee60 <__hexnan>
 800daa2:	2805      	cmp	r0, #5
 800daa4:	d126      	bne.n	800daf4 <_strtod_l+0x384>
 800daa6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800daa8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800daac:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800dab0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800dab4:	e697      	b.n	800d7e6 <_strtod_l+0x76>
 800dab6:	250a      	movs	r5, #10
 800dab8:	fb05 2c0c 	mla	ip, r5, ip, r2
 800dabc:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800dac0:	e7b9      	b.n	800da36 <_strtod_l+0x2c6>
 800dac2:	2a6e      	cmp	r2, #110	; 0x6e
 800dac4:	e7db      	b.n	800da7e <_strtod_l+0x30e>
 800dac6:	4986      	ldr	r1, [pc, #536]	; (800dce0 <_strtod_l+0x570>)
 800dac8:	a811      	add	r0, sp, #68	; 0x44
 800daca:	f001 f9b5 	bl	800ee38 <__match>
 800dace:	2800      	cmp	r0, #0
 800dad0:	f43f aea5 	beq.w	800d81e <_strtod_l+0xae>
 800dad4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dad6:	4983      	ldr	r1, [pc, #524]	; (800dce4 <_strtod_l+0x574>)
 800dad8:	3b01      	subs	r3, #1
 800dada:	a811      	add	r0, sp, #68	; 0x44
 800dadc:	9311      	str	r3, [sp, #68]	; 0x44
 800dade:	f001 f9ab 	bl	800ee38 <__match>
 800dae2:	b910      	cbnz	r0, 800daea <_strtod_l+0x37a>
 800dae4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dae6:	3301      	adds	r3, #1
 800dae8:	9311      	str	r3, [sp, #68]	; 0x44
 800daea:	f8df 920c 	ldr.w	r9, [pc, #524]	; 800dcf8 <_strtod_l+0x588>
 800daee:	f04f 0800 	mov.w	r8, #0
 800daf2:	e678      	b.n	800d7e6 <_strtod_l+0x76>
 800daf4:	487c      	ldr	r0, [pc, #496]	; (800dce8 <_strtod_l+0x578>)
 800daf6:	f000 febb 	bl	800e870 <nan>
 800dafa:	ec59 8b10 	vmov	r8, r9, d0
 800dafe:	e672      	b.n	800d7e6 <_strtod_l+0x76>
 800db00:	eddd 7a07 	vldr	s15, [sp, #28]
 800db04:	eba5 020b 	sub.w	r2, r5, fp
 800db08:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800db0c:	2e00      	cmp	r6, #0
 800db0e:	bf08      	it	eq
 800db10:	461e      	moveq	r6, r3
 800db12:	2b10      	cmp	r3, #16
 800db14:	9206      	str	r2, [sp, #24]
 800db16:	461a      	mov	r2, r3
 800db18:	bfa8      	it	ge
 800db1a:	2210      	movge	r2, #16
 800db1c:	2b09      	cmp	r3, #9
 800db1e:	ec59 8b17 	vmov	r8, r9, d7
 800db22:	dd0c      	ble.n	800db3e <_strtod_l+0x3ce>
 800db24:	4971      	ldr	r1, [pc, #452]	; (800dcec <_strtod_l+0x57c>)
 800db26:	eddd 6a05 	vldr	s13, [sp, #20]
 800db2a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800db2e:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800db32:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800db36:	eea7 6b05 	vfma.f64	d6, d7, d5
 800db3a:	ec59 8b16 	vmov	r8, r9, d6
 800db3e:	2b0f      	cmp	r3, #15
 800db40:	dc37      	bgt.n	800dbb2 <_strtod_l+0x442>
 800db42:	9906      	ldr	r1, [sp, #24]
 800db44:	2900      	cmp	r1, #0
 800db46:	f43f ae4e 	beq.w	800d7e6 <_strtod_l+0x76>
 800db4a:	dd23      	ble.n	800db94 <_strtod_l+0x424>
 800db4c:	2916      	cmp	r1, #22
 800db4e:	dc0b      	bgt.n	800db68 <_strtod_l+0x3f8>
 800db50:	4b66      	ldr	r3, [pc, #408]	; (800dcec <_strtod_l+0x57c>)
 800db52:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800db56:	ed93 7b00 	vldr	d7, [r3]
 800db5a:	ec49 8b16 	vmov	d6, r8, r9
 800db5e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800db62:	ec59 8b17 	vmov	r8, r9, d7
 800db66:	e63e      	b.n	800d7e6 <_strtod_l+0x76>
 800db68:	9806      	ldr	r0, [sp, #24]
 800db6a:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800db6e:	4281      	cmp	r1, r0
 800db70:	db1f      	blt.n	800dbb2 <_strtod_l+0x442>
 800db72:	4a5e      	ldr	r2, [pc, #376]	; (800dcec <_strtod_l+0x57c>)
 800db74:	f1c3 030f 	rsb	r3, r3, #15
 800db78:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800db7c:	ed91 7b00 	vldr	d7, [r1]
 800db80:	ec49 8b16 	vmov	d6, r8, r9
 800db84:	1ac3      	subs	r3, r0, r3
 800db86:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800db8a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800db8e:	ed92 6b00 	vldr	d6, [r2]
 800db92:	e7e4      	b.n	800db5e <_strtod_l+0x3ee>
 800db94:	9906      	ldr	r1, [sp, #24]
 800db96:	3116      	adds	r1, #22
 800db98:	db0b      	blt.n	800dbb2 <_strtod_l+0x442>
 800db9a:	4b54      	ldr	r3, [pc, #336]	; (800dcec <_strtod_l+0x57c>)
 800db9c:	ebab 0505 	sub.w	r5, fp, r5
 800dba0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800dba4:	ed95 7b00 	vldr	d7, [r5]
 800dba8:	ec49 8b16 	vmov	d6, r8, r9
 800dbac:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800dbb0:	e7d7      	b.n	800db62 <_strtod_l+0x3f2>
 800dbb2:	9906      	ldr	r1, [sp, #24]
 800dbb4:	1a9a      	subs	r2, r3, r2
 800dbb6:	440a      	add	r2, r1
 800dbb8:	2a00      	cmp	r2, #0
 800dbba:	dd6e      	ble.n	800dc9a <_strtod_l+0x52a>
 800dbbc:	f012 000f 	ands.w	r0, r2, #15
 800dbc0:	d00a      	beq.n	800dbd8 <_strtod_l+0x468>
 800dbc2:	494a      	ldr	r1, [pc, #296]	; (800dcec <_strtod_l+0x57c>)
 800dbc4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800dbc8:	ed91 7b00 	vldr	d7, [r1]
 800dbcc:	ec49 8b16 	vmov	d6, r8, r9
 800dbd0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dbd4:	ec59 8b17 	vmov	r8, r9, d7
 800dbd8:	f032 020f 	bics.w	r2, r2, #15
 800dbdc:	d04e      	beq.n	800dc7c <_strtod_l+0x50c>
 800dbde:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800dbe2:	dd22      	ble.n	800dc2a <_strtod_l+0x4ba>
 800dbe4:	2500      	movs	r5, #0
 800dbe6:	462e      	mov	r6, r5
 800dbe8:	9507      	str	r5, [sp, #28]
 800dbea:	462f      	mov	r7, r5
 800dbec:	2322      	movs	r3, #34	; 0x22
 800dbee:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800dcf8 <_strtod_l+0x588>
 800dbf2:	6023      	str	r3, [r4, #0]
 800dbf4:	f04f 0800 	mov.w	r8, #0
 800dbf8:	9b07      	ldr	r3, [sp, #28]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	f43f adf3 	beq.w	800d7e6 <_strtod_l+0x76>
 800dc00:	9912      	ldr	r1, [sp, #72]	; 0x48
 800dc02:	4620      	mov	r0, r4
 800dc04:	f7ff f930 	bl	800ce68 <_Bfree>
 800dc08:	4639      	mov	r1, r7
 800dc0a:	4620      	mov	r0, r4
 800dc0c:	f7ff f92c 	bl	800ce68 <_Bfree>
 800dc10:	4631      	mov	r1, r6
 800dc12:	4620      	mov	r0, r4
 800dc14:	f7ff f928 	bl	800ce68 <_Bfree>
 800dc18:	9907      	ldr	r1, [sp, #28]
 800dc1a:	4620      	mov	r0, r4
 800dc1c:	f7ff f924 	bl	800ce68 <_Bfree>
 800dc20:	4629      	mov	r1, r5
 800dc22:	4620      	mov	r0, r4
 800dc24:	f7ff f920 	bl	800ce68 <_Bfree>
 800dc28:	e5dd      	b.n	800d7e6 <_strtod_l+0x76>
 800dc2a:	2000      	movs	r0, #0
 800dc2c:	ec49 8b17 	vmov	d7, r8, r9
 800dc30:	4f2f      	ldr	r7, [pc, #188]	; (800dcf0 <_strtod_l+0x580>)
 800dc32:	1112      	asrs	r2, r2, #4
 800dc34:	4601      	mov	r1, r0
 800dc36:	2a01      	cmp	r2, #1
 800dc38:	dc23      	bgt.n	800dc82 <_strtod_l+0x512>
 800dc3a:	b108      	cbz	r0, 800dc40 <_strtod_l+0x4d0>
 800dc3c:	ec59 8b17 	vmov	r8, r9, d7
 800dc40:	4a2b      	ldr	r2, [pc, #172]	; (800dcf0 <_strtod_l+0x580>)
 800dc42:	482c      	ldr	r0, [pc, #176]	; (800dcf4 <_strtod_l+0x584>)
 800dc44:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800dc48:	ed92 7b00 	vldr	d7, [r2]
 800dc4c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800dc50:	ec49 8b16 	vmov	d6, r8, r9
 800dc54:	4a28      	ldr	r2, [pc, #160]	; (800dcf8 <_strtod_l+0x588>)
 800dc56:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dc5a:	ee17 1a90 	vmov	r1, s15
 800dc5e:	400a      	ands	r2, r1
 800dc60:	4282      	cmp	r2, r0
 800dc62:	ec59 8b17 	vmov	r8, r9, d7
 800dc66:	d8bd      	bhi.n	800dbe4 <_strtod_l+0x474>
 800dc68:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800dc6c:	4282      	cmp	r2, r0
 800dc6e:	bf86      	itte	hi
 800dc70:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 800dcfc <_strtod_l+0x58c>
 800dc74:	f04f 38ff 	movhi.w	r8, #4294967295
 800dc78:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	9205      	str	r2, [sp, #20]
 800dc80:	e076      	b.n	800dd70 <_strtod_l+0x600>
 800dc82:	f012 0f01 	tst.w	r2, #1
 800dc86:	d004      	beq.n	800dc92 <_strtod_l+0x522>
 800dc88:	ed97 6b00 	vldr	d6, [r7]
 800dc8c:	2001      	movs	r0, #1
 800dc8e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dc92:	3101      	adds	r1, #1
 800dc94:	1052      	asrs	r2, r2, #1
 800dc96:	3708      	adds	r7, #8
 800dc98:	e7cd      	b.n	800dc36 <_strtod_l+0x4c6>
 800dc9a:	d0ef      	beq.n	800dc7c <_strtod_l+0x50c>
 800dc9c:	4252      	negs	r2, r2
 800dc9e:	f012 000f 	ands.w	r0, r2, #15
 800dca2:	d00a      	beq.n	800dcba <_strtod_l+0x54a>
 800dca4:	4911      	ldr	r1, [pc, #68]	; (800dcec <_strtod_l+0x57c>)
 800dca6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800dcaa:	ed91 7b00 	vldr	d7, [r1]
 800dcae:	ec49 8b16 	vmov	d6, r8, r9
 800dcb2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800dcb6:	ec59 8b17 	vmov	r8, r9, d7
 800dcba:	1112      	asrs	r2, r2, #4
 800dcbc:	d0de      	beq.n	800dc7c <_strtod_l+0x50c>
 800dcbe:	2a1f      	cmp	r2, #31
 800dcc0:	dd1e      	ble.n	800dd00 <_strtod_l+0x590>
 800dcc2:	2500      	movs	r5, #0
 800dcc4:	462e      	mov	r6, r5
 800dcc6:	9507      	str	r5, [sp, #28]
 800dcc8:	462f      	mov	r7, r5
 800dcca:	2322      	movs	r3, #34	; 0x22
 800dccc:	f04f 0800 	mov.w	r8, #0
 800dcd0:	f04f 0900 	mov.w	r9, #0
 800dcd4:	6023      	str	r3, [r4, #0]
 800dcd6:	e78f      	b.n	800dbf8 <_strtod_l+0x488>
 800dcd8:	0800f6a9 	.word	0x0800f6a9
 800dcdc:	0800f8d4 	.word	0x0800f8d4
 800dce0:	0800f6a1 	.word	0x0800f6a1
 800dce4:	0800f6d8 	.word	0x0800f6d8
 800dce8:	0800fa65 	.word	0x0800fa65
 800dcec:	0800f7e8 	.word	0x0800f7e8
 800dcf0:	0800f7c0 	.word	0x0800f7c0
 800dcf4:	7ca00000 	.word	0x7ca00000
 800dcf8:	7ff00000 	.word	0x7ff00000
 800dcfc:	7fefffff 	.word	0x7fefffff
 800dd00:	f012 0110 	ands.w	r1, r2, #16
 800dd04:	bf18      	it	ne
 800dd06:	216a      	movne	r1, #106	; 0x6a
 800dd08:	9105      	str	r1, [sp, #20]
 800dd0a:	ec49 8b17 	vmov	d7, r8, r9
 800dd0e:	49be      	ldr	r1, [pc, #760]	; (800e008 <_strtod_l+0x898>)
 800dd10:	2000      	movs	r0, #0
 800dd12:	07d7      	lsls	r7, r2, #31
 800dd14:	d504      	bpl.n	800dd20 <_strtod_l+0x5b0>
 800dd16:	ed91 6b00 	vldr	d6, [r1]
 800dd1a:	2001      	movs	r0, #1
 800dd1c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dd20:	1052      	asrs	r2, r2, #1
 800dd22:	f101 0108 	add.w	r1, r1, #8
 800dd26:	d1f4      	bne.n	800dd12 <_strtod_l+0x5a2>
 800dd28:	b108      	cbz	r0, 800dd2e <_strtod_l+0x5be>
 800dd2a:	ec59 8b17 	vmov	r8, r9, d7
 800dd2e:	9a05      	ldr	r2, [sp, #20]
 800dd30:	b1ba      	cbz	r2, 800dd62 <_strtod_l+0x5f2>
 800dd32:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800dd36:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800dd3a:	2a00      	cmp	r2, #0
 800dd3c:	4648      	mov	r0, r9
 800dd3e:	dd10      	ble.n	800dd62 <_strtod_l+0x5f2>
 800dd40:	2a1f      	cmp	r2, #31
 800dd42:	f340 812c 	ble.w	800df9e <_strtod_l+0x82e>
 800dd46:	2a34      	cmp	r2, #52	; 0x34
 800dd48:	bfde      	ittt	le
 800dd4a:	f04f 32ff 	movle.w	r2, #4294967295
 800dd4e:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800dd52:	408a      	lslle	r2, r1
 800dd54:	f04f 0800 	mov.w	r8, #0
 800dd58:	bfcc      	ite	gt
 800dd5a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800dd5e:	ea02 0900 	andle.w	r9, r2, r0
 800dd62:	ec49 8b17 	vmov	d7, r8, r9
 800dd66:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dd6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd6e:	d0a8      	beq.n	800dcc2 <_strtod_l+0x552>
 800dd70:	9a07      	ldr	r2, [sp, #28]
 800dd72:	9200      	str	r2, [sp, #0]
 800dd74:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dd76:	4632      	mov	r2, r6
 800dd78:	4620      	mov	r0, r4
 800dd7a:	f7ff f8dd 	bl	800cf38 <__s2b>
 800dd7e:	9007      	str	r0, [sp, #28]
 800dd80:	2800      	cmp	r0, #0
 800dd82:	f43f af2f 	beq.w	800dbe4 <_strtod_l+0x474>
 800dd86:	9a06      	ldr	r2, [sp, #24]
 800dd88:	2a00      	cmp	r2, #0
 800dd8a:	ebab 0305 	sub.w	r3, fp, r5
 800dd8e:	ed9f 9b96 	vldr	d9, [pc, #600]	; 800dfe8 <_strtod_l+0x878>
 800dd92:	bfa8      	it	ge
 800dd94:	2300      	movge	r3, #0
 800dd96:	ed9f ab96 	vldr	d10, [pc, #600]	; 800dff0 <_strtod_l+0x880>
 800dd9a:	ed9f bb97 	vldr	d11, [pc, #604]	; 800dff8 <_strtod_l+0x888>
 800dd9e:	9309      	str	r3, [sp, #36]	; 0x24
 800dda0:	2500      	movs	r5, #0
 800dda2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800dda6:	930c      	str	r3, [sp, #48]	; 0x30
 800dda8:	462e      	mov	r6, r5
 800ddaa:	9b07      	ldr	r3, [sp, #28]
 800ddac:	4620      	mov	r0, r4
 800ddae:	6859      	ldr	r1, [r3, #4]
 800ddb0:	f7ff f81a 	bl	800cde8 <_Balloc>
 800ddb4:	4607      	mov	r7, r0
 800ddb6:	2800      	cmp	r0, #0
 800ddb8:	f43f af18 	beq.w	800dbec <_strtod_l+0x47c>
 800ddbc:	9b07      	ldr	r3, [sp, #28]
 800ddbe:	691a      	ldr	r2, [r3, #16]
 800ddc0:	3202      	adds	r2, #2
 800ddc2:	f103 010c 	add.w	r1, r3, #12
 800ddc6:	0092      	lsls	r2, r2, #2
 800ddc8:	300c      	adds	r0, #12
 800ddca:	f7fe f903 	bl	800bfd4 <memcpy>
 800ddce:	ec49 8b10 	vmov	d0, r8, r9
 800ddd2:	aa14      	add	r2, sp, #80	; 0x50
 800ddd4:	a913      	add	r1, sp, #76	; 0x4c
 800ddd6:	4620      	mov	r0, r4
 800ddd8:	f7ff fbe2 	bl	800d5a0 <__d2b>
 800dddc:	ec49 8b18 	vmov	d8, r8, r9
 800dde0:	9012      	str	r0, [sp, #72]	; 0x48
 800dde2:	2800      	cmp	r0, #0
 800dde4:	f43f af02 	beq.w	800dbec <_strtod_l+0x47c>
 800dde8:	2101      	movs	r1, #1
 800ddea:	4620      	mov	r0, r4
 800ddec:	f7ff f93c 	bl	800d068 <__i2b>
 800ddf0:	4606      	mov	r6, r0
 800ddf2:	2800      	cmp	r0, #0
 800ddf4:	f43f aefa 	beq.w	800dbec <_strtod_l+0x47c>
 800ddf8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ddfa:	9914      	ldr	r1, [sp, #80]	; 0x50
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	bfab      	itete	ge
 800de00:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800de02:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800de04:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800de08:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800de0c:	bfac      	ite	ge
 800de0e:	eb03 0b02 	addge.w	fp, r3, r2
 800de12:	eba2 0a03 	sublt.w	sl, r2, r3
 800de16:	9a05      	ldr	r2, [sp, #20]
 800de18:	1a9b      	subs	r3, r3, r2
 800de1a:	440b      	add	r3, r1
 800de1c:	4a7b      	ldr	r2, [pc, #492]	; (800e00c <_strtod_l+0x89c>)
 800de1e:	3b01      	subs	r3, #1
 800de20:	4293      	cmp	r3, r2
 800de22:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800de26:	f280 80cd 	bge.w	800dfc4 <_strtod_l+0x854>
 800de2a:	1ad2      	subs	r2, r2, r3
 800de2c:	2a1f      	cmp	r2, #31
 800de2e:	eba1 0102 	sub.w	r1, r1, r2
 800de32:	f04f 0001 	mov.w	r0, #1
 800de36:	f300 80b9 	bgt.w	800dfac <_strtod_l+0x83c>
 800de3a:	fa00 f302 	lsl.w	r3, r0, r2
 800de3e:	930b      	str	r3, [sp, #44]	; 0x2c
 800de40:	2300      	movs	r3, #0
 800de42:	930a      	str	r3, [sp, #40]	; 0x28
 800de44:	eb0b 0301 	add.w	r3, fp, r1
 800de48:	9a05      	ldr	r2, [sp, #20]
 800de4a:	459b      	cmp	fp, r3
 800de4c:	448a      	add	sl, r1
 800de4e:	4492      	add	sl, r2
 800de50:	465a      	mov	r2, fp
 800de52:	bfa8      	it	ge
 800de54:	461a      	movge	r2, r3
 800de56:	4552      	cmp	r2, sl
 800de58:	bfa8      	it	ge
 800de5a:	4652      	movge	r2, sl
 800de5c:	2a00      	cmp	r2, #0
 800de5e:	bfc2      	ittt	gt
 800de60:	1a9b      	subgt	r3, r3, r2
 800de62:	ebaa 0a02 	subgt.w	sl, sl, r2
 800de66:	ebab 0b02 	subgt.w	fp, fp, r2
 800de6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de6c:	2a00      	cmp	r2, #0
 800de6e:	dd18      	ble.n	800dea2 <_strtod_l+0x732>
 800de70:	4631      	mov	r1, r6
 800de72:	4620      	mov	r0, r4
 800de74:	930f      	str	r3, [sp, #60]	; 0x3c
 800de76:	f7ff f9b7 	bl	800d1e8 <__pow5mult>
 800de7a:	4606      	mov	r6, r0
 800de7c:	2800      	cmp	r0, #0
 800de7e:	f43f aeb5 	beq.w	800dbec <_strtod_l+0x47c>
 800de82:	4601      	mov	r1, r0
 800de84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800de86:	4620      	mov	r0, r4
 800de88:	f7ff f904 	bl	800d094 <__multiply>
 800de8c:	900e      	str	r0, [sp, #56]	; 0x38
 800de8e:	2800      	cmp	r0, #0
 800de90:	f43f aeac 	beq.w	800dbec <_strtod_l+0x47c>
 800de94:	9912      	ldr	r1, [sp, #72]	; 0x48
 800de96:	4620      	mov	r0, r4
 800de98:	f7fe ffe6 	bl	800ce68 <_Bfree>
 800de9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800de9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dea0:	9212      	str	r2, [sp, #72]	; 0x48
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	f300 8093 	bgt.w	800dfce <_strtod_l+0x85e>
 800dea8:	9b06      	ldr	r3, [sp, #24]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	dd08      	ble.n	800dec0 <_strtod_l+0x750>
 800deae:	4639      	mov	r1, r7
 800deb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800deb2:	4620      	mov	r0, r4
 800deb4:	f7ff f998 	bl	800d1e8 <__pow5mult>
 800deb8:	4607      	mov	r7, r0
 800deba:	2800      	cmp	r0, #0
 800debc:	f43f ae96 	beq.w	800dbec <_strtod_l+0x47c>
 800dec0:	f1ba 0f00 	cmp.w	sl, #0
 800dec4:	dd08      	ble.n	800ded8 <_strtod_l+0x768>
 800dec6:	4639      	mov	r1, r7
 800dec8:	4652      	mov	r2, sl
 800deca:	4620      	mov	r0, r4
 800decc:	f7ff f9e6 	bl	800d29c <__lshift>
 800ded0:	4607      	mov	r7, r0
 800ded2:	2800      	cmp	r0, #0
 800ded4:	f43f ae8a 	beq.w	800dbec <_strtod_l+0x47c>
 800ded8:	f1bb 0f00 	cmp.w	fp, #0
 800dedc:	dd08      	ble.n	800def0 <_strtod_l+0x780>
 800dede:	4631      	mov	r1, r6
 800dee0:	465a      	mov	r2, fp
 800dee2:	4620      	mov	r0, r4
 800dee4:	f7ff f9da 	bl	800d29c <__lshift>
 800dee8:	4606      	mov	r6, r0
 800deea:	2800      	cmp	r0, #0
 800deec:	f43f ae7e 	beq.w	800dbec <_strtod_l+0x47c>
 800def0:	9912      	ldr	r1, [sp, #72]	; 0x48
 800def2:	463a      	mov	r2, r7
 800def4:	4620      	mov	r0, r4
 800def6:	f7ff fa59 	bl	800d3ac <__mdiff>
 800defa:	4605      	mov	r5, r0
 800defc:	2800      	cmp	r0, #0
 800defe:	f43f ae75 	beq.w	800dbec <_strtod_l+0x47c>
 800df02:	2300      	movs	r3, #0
 800df04:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800df08:	60c3      	str	r3, [r0, #12]
 800df0a:	4631      	mov	r1, r6
 800df0c:	f7ff fa32 	bl	800d374 <__mcmp>
 800df10:	2800      	cmp	r0, #0
 800df12:	da7f      	bge.n	800e014 <_strtod_l+0x8a4>
 800df14:	ea5a 0a08 	orrs.w	sl, sl, r8
 800df18:	f040 80a5 	bne.w	800e066 <_strtod_l+0x8f6>
 800df1c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800df20:	2b00      	cmp	r3, #0
 800df22:	f040 80a0 	bne.w	800e066 <_strtod_l+0x8f6>
 800df26:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800df2a:	0d1b      	lsrs	r3, r3, #20
 800df2c:	051b      	lsls	r3, r3, #20
 800df2e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800df32:	f240 8098 	bls.w	800e066 <_strtod_l+0x8f6>
 800df36:	696b      	ldr	r3, [r5, #20]
 800df38:	b91b      	cbnz	r3, 800df42 <_strtod_l+0x7d2>
 800df3a:	692b      	ldr	r3, [r5, #16]
 800df3c:	2b01      	cmp	r3, #1
 800df3e:	f340 8092 	ble.w	800e066 <_strtod_l+0x8f6>
 800df42:	4629      	mov	r1, r5
 800df44:	2201      	movs	r2, #1
 800df46:	4620      	mov	r0, r4
 800df48:	f7ff f9a8 	bl	800d29c <__lshift>
 800df4c:	4631      	mov	r1, r6
 800df4e:	4605      	mov	r5, r0
 800df50:	f7ff fa10 	bl	800d374 <__mcmp>
 800df54:	2800      	cmp	r0, #0
 800df56:	f340 8086 	ble.w	800e066 <_strtod_l+0x8f6>
 800df5a:	9905      	ldr	r1, [sp, #20]
 800df5c:	4a2c      	ldr	r2, [pc, #176]	; (800e010 <_strtod_l+0x8a0>)
 800df5e:	464b      	mov	r3, r9
 800df60:	2900      	cmp	r1, #0
 800df62:	f000 809f 	beq.w	800e0a4 <_strtod_l+0x934>
 800df66:	ea02 0109 	and.w	r1, r2, r9
 800df6a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800df6e:	f300 8099 	bgt.w	800e0a4 <_strtod_l+0x934>
 800df72:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800df76:	f77f aea8 	ble.w	800dcca <_strtod_l+0x55a>
 800df7a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800e000 <_strtod_l+0x890>
 800df7e:	ec49 8b16 	vmov	d6, r8, r9
 800df82:	4b23      	ldr	r3, [pc, #140]	; (800e010 <_strtod_l+0x8a0>)
 800df84:	ee26 7b07 	vmul.f64	d7, d6, d7
 800df88:	ee17 2a90 	vmov	r2, s15
 800df8c:	4013      	ands	r3, r2
 800df8e:	ec59 8b17 	vmov	r8, r9, d7
 800df92:	2b00      	cmp	r3, #0
 800df94:	f47f ae34 	bne.w	800dc00 <_strtod_l+0x490>
 800df98:	2322      	movs	r3, #34	; 0x22
 800df9a:	6023      	str	r3, [r4, #0]
 800df9c:	e630      	b.n	800dc00 <_strtod_l+0x490>
 800df9e:	f04f 31ff 	mov.w	r1, #4294967295
 800dfa2:	fa01 f202 	lsl.w	r2, r1, r2
 800dfa6:	ea02 0808 	and.w	r8, r2, r8
 800dfaa:	e6da      	b.n	800dd62 <_strtod_l+0x5f2>
 800dfac:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800dfb0:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800dfb4:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800dfb8:	33e2      	adds	r3, #226	; 0xe2
 800dfba:	fa00 f303 	lsl.w	r3, r0, r3
 800dfbe:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800dfc2:	e73f      	b.n	800de44 <_strtod_l+0x6d4>
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	2301      	movs	r3, #1
 800dfc8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800dfcc:	e73a      	b.n	800de44 <_strtod_l+0x6d4>
 800dfce:	9912      	ldr	r1, [sp, #72]	; 0x48
 800dfd0:	461a      	mov	r2, r3
 800dfd2:	4620      	mov	r0, r4
 800dfd4:	f7ff f962 	bl	800d29c <__lshift>
 800dfd8:	9012      	str	r0, [sp, #72]	; 0x48
 800dfda:	2800      	cmp	r0, #0
 800dfdc:	f47f af64 	bne.w	800dea8 <_strtod_l+0x738>
 800dfe0:	e604      	b.n	800dbec <_strtod_l+0x47c>
 800dfe2:	bf00      	nop
 800dfe4:	f3af 8000 	nop.w
 800dfe8:	94a03595 	.word	0x94a03595
 800dfec:	3fcfffff 	.word	0x3fcfffff
 800dff0:	94a03595 	.word	0x94a03595
 800dff4:	3fdfffff 	.word	0x3fdfffff
 800dff8:	35afe535 	.word	0x35afe535
 800dffc:	3fe00000 	.word	0x3fe00000
 800e000:	00000000 	.word	0x00000000
 800e004:	39500000 	.word	0x39500000
 800e008:	0800f8e8 	.word	0x0800f8e8
 800e00c:	fffffc02 	.word	0xfffffc02
 800e010:	7ff00000 	.word	0x7ff00000
 800e014:	46cb      	mov	fp, r9
 800e016:	d15f      	bne.n	800e0d8 <_strtod_l+0x968>
 800e018:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e01c:	f1ba 0f00 	cmp.w	sl, #0
 800e020:	d02a      	beq.n	800e078 <_strtod_l+0x908>
 800e022:	4aa7      	ldr	r2, [pc, #668]	; (800e2c0 <_strtod_l+0xb50>)
 800e024:	4293      	cmp	r3, r2
 800e026:	d12b      	bne.n	800e080 <_strtod_l+0x910>
 800e028:	9b05      	ldr	r3, [sp, #20]
 800e02a:	4642      	mov	r2, r8
 800e02c:	b1fb      	cbz	r3, 800e06e <_strtod_l+0x8fe>
 800e02e:	4ba5      	ldr	r3, [pc, #660]	; (800e2c4 <_strtod_l+0xb54>)
 800e030:	ea09 0303 	and.w	r3, r9, r3
 800e034:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e038:	f04f 31ff 	mov.w	r1, #4294967295
 800e03c:	d81a      	bhi.n	800e074 <_strtod_l+0x904>
 800e03e:	0d1b      	lsrs	r3, r3, #20
 800e040:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e044:	fa01 f303 	lsl.w	r3, r1, r3
 800e048:	429a      	cmp	r2, r3
 800e04a:	d119      	bne.n	800e080 <_strtod_l+0x910>
 800e04c:	4b9e      	ldr	r3, [pc, #632]	; (800e2c8 <_strtod_l+0xb58>)
 800e04e:	459b      	cmp	fp, r3
 800e050:	d102      	bne.n	800e058 <_strtod_l+0x8e8>
 800e052:	3201      	adds	r2, #1
 800e054:	f43f adca 	beq.w	800dbec <_strtod_l+0x47c>
 800e058:	4b9a      	ldr	r3, [pc, #616]	; (800e2c4 <_strtod_l+0xb54>)
 800e05a:	ea0b 0303 	and.w	r3, fp, r3
 800e05e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800e062:	f04f 0800 	mov.w	r8, #0
 800e066:	9b05      	ldr	r3, [sp, #20]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d186      	bne.n	800df7a <_strtod_l+0x80a>
 800e06c:	e5c8      	b.n	800dc00 <_strtod_l+0x490>
 800e06e:	f04f 33ff 	mov.w	r3, #4294967295
 800e072:	e7e9      	b.n	800e048 <_strtod_l+0x8d8>
 800e074:	460b      	mov	r3, r1
 800e076:	e7e7      	b.n	800e048 <_strtod_l+0x8d8>
 800e078:	ea53 0308 	orrs.w	r3, r3, r8
 800e07c:	f43f af6d 	beq.w	800df5a <_strtod_l+0x7ea>
 800e080:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e082:	b1cb      	cbz	r3, 800e0b8 <_strtod_l+0x948>
 800e084:	ea13 0f0b 	tst.w	r3, fp
 800e088:	d0ed      	beq.n	800e066 <_strtod_l+0x8f6>
 800e08a:	9a05      	ldr	r2, [sp, #20]
 800e08c:	4640      	mov	r0, r8
 800e08e:	4649      	mov	r1, r9
 800e090:	f1ba 0f00 	cmp.w	sl, #0
 800e094:	d014      	beq.n	800e0c0 <_strtod_l+0x950>
 800e096:	f7ff fb51 	bl	800d73c <sulp>
 800e09a:	ee38 7b00 	vadd.f64	d7, d8, d0
 800e09e:	ec59 8b17 	vmov	r8, r9, d7
 800e0a2:	e7e0      	b.n	800e066 <_strtod_l+0x8f6>
 800e0a4:	4013      	ands	r3, r2
 800e0a6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e0aa:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800e0ae:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800e0b2:	f04f 38ff 	mov.w	r8, #4294967295
 800e0b6:	e7d6      	b.n	800e066 <_strtod_l+0x8f6>
 800e0b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e0ba:	ea13 0f08 	tst.w	r3, r8
 800e0be:	e7e3      	b.n	800e088 <_strtod_l+0x918>
 800e0c0:	f7ff fb3c 	bl	800d73c <sulp>
 800e0c4:	ee38 0b40 	vsub.f64	d0, d8, d0
 800e0c8:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800e0cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0d0:	ec59 8b10 	vmov	r8, r9, d0
 800e0d4:	d1c7      	bne.n	800e066 <_strtod_l+0x8f6>
 800e0d6:	e5f8      	b.n	800dcca <_strtod_l+0x55a>
 800e0d8:	4631      	mov	r1, r6
 800e0da:	4628      	mov	r0, r5
 800e0dc:	f7ff faba 	bl	800d654 <__ratio>
 800e0e0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800e0e4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800e0e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0ec:	d85f      	bhi.n	800e1ae <_strtod_l+0xa3e>
 800e0ee:	f1ba 0f00 	cmp.w	sl, #0
 800e0f2:	d166      	bne.n	800e1c2 <_strtod_l+0xa52>
 800e0f4:	f1b8 0f00 	cmp.w	r8, #0
 800e0f8:	d14d      	bne.n	800e196 <_strtod_l+0xa26>
 800e0fa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e0fe:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800e102:	2b00      	cmp	r3, #0
 800e104:	d162      	bne.n	800e1cc <_strtod_l+0xa5c>
 800e106:	eeb4 0bcd 	vcmpe.f64	d0, d13
 800e10a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800e10e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e112:	d401      	bmi.n	800e118 <_strtod_l+0x9a8>
 800e114:	ee20 db0d 	vmul.f64	d13, d0, d13
 800e118:	eeb1 cb4d 	vneg.f64	d12, d13
 800e11c:	4869      	ldr	r0, [pc, #420]	; (800e2c4 <_strtod_l+0xb54>)
 800e11e:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 800e2d0 <_strtod_l+0xb60>
 800e122:	ea0b 0100 	and.w	r1, fp, r0
 800e126:	4561      	cmp	r1, ip
 800e128:	ec53 2b1c 	vmov	r2, r3, d12
 800e12c:	d17a      	bne.n	800e224 <_strtod_l+0xab4>
 800e12e:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800e132:	ec49 8b10 	vmov	d0, r8, r9
 800e136:	910a      	str	r1, [sp, #40]	; 0x28
 800e138:	f7ff f9c2 	bl	800d4c0 <__ulp>
 800e13c:	ec49 8b1e 	vmov	d14, r8, r9
 800e140:	4860      	ldr	r0, [pc, #384]	; (800e2c4 <_strtod_l+0xb54>)
 800e142:	eea0 eb0c 	vfma.f64	d14, d0, d12
 800e146:	ee1e 3a90 	vmov	r3, s29
 800e14a:	4a60      	ldr	r2, [pc, #384]	; (800e2cc <_strtod_l+0xb5c>)
 800e14c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e14e:	4018      	ands	r0, r3
 800e150:	4290      	cmp	r0, r2
 800e152:	ec59 8b1e 	vmov	r8, r9, d14
 800e156:	d93c      	bls.n	800e1d2 <_strtod_l+0xa62>
 800e158:	ee18 2a90 	vmov	r2, s17
 800e15c:	4b5a      	ldr	r3, [pc, #360]	; (800e2c8 <_strtod_l+0xb58>)
 800e15e:	429a      	cmp	r2, r3
 800e160:	d104      	bne.n	800e16c <_strtod_l+0x9fc>
 800e162:	ee18 3a10 	vmov	r3, s16
 800e166:	3301      	adds	r3, #1
 800e168:	f43f ad40 	beq.w	800dbec <_strtod_l+0x47c>
 800e16c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 800e2c8 <_strtod_l+0xb58>
 800e170:	f04f 38ff 	mov.w	r8, #4294967295
 800e174:	9912      	ldr	r1, [sp, #72]	; 0x48
 800e176:	4620      	mov	r0, r4
 800e178:	f7fe fe76 	bl	800ce68 <_Bfree>
 800e17c:	4639      	mov	r1, r7
 800e17e:	4620      	mov	r0, r4
 800e180:	f7fe fe72 	bl	800ce68 <_Bfree>
 800e184:	4631      	mov	r1, r6
 800e186:	4620      	mov	r0, r4
 800e188:	f7fe fe6e 	bl	800ce68 <_Bfree>
 800e18c:	4629      	mov	r1, r5
 800e18e:	4620      	mov	r0, r4
 800e190:	f7fe fe6a 	bl	800ce68 <_Bfree>
 800e194:	e609      	b.n	800ddaa <_strtod_l+0x63a>
 800e196:	f1b8 0f01 	cmp.w	r8, #1
 800e19a:	d103      	bne.n	800e1a4 <_strtod_l+0xa34>
 800e19c:	f1b9 0f00 	cmp.w	r9, #0
 800e1a0:	f43f ad93 	beq.w	800dcca <_strtod_l+0x55a>
 800e1a4:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 800e1a8:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800e1ac:	e7b6      	b.n	800e11c <_strtod_l+0x9ac>
 800e1ae:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800e1b2:	ee20 db0d 	vmul.f64	d13, d0, d13
 800e1b6:	f1ba 0f00 	cmp.w	sl, #0
 800e1ba:	d0ad      	beq.n	800e118 <_strtod_l+0x9a8>
 800e1bc:	eeb0 cb4d 	vmov.f64	d12, d13
 800e1c0:	e7ac      	b.n	800e11c <_strtod_l+0x9ac>
 800e1c2:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 800e1c6:	eeb0 db4c 	vmov.f64	d13, d12
 800e1ca:	e7a7      	b.n	800e11c <_strtod_l+0x9ac>
 800e1cc:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 800e1d0:	e7a4      	b.n	800e11c <_strtod_l+0x9ac>
 800e1d2:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800e1d6:	9b05      	ldr	r3, [sp, #20]
 800e1d8:	46cb      	mov	fp, r9
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d1ca      	bne.n	800e174 <_strtod_l+0xa04>
 800e1de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e1e2:	0d1b      	lsrs	r3, r3, #20
 800e1e4:	051b      	lsls	r3, r3, #20
 800e1e6:	4299      	cmp	r1, r3
 800e1e8:	d1c4      	bne.n	800e174 <_strtod_l+0xa04>
 800e1ea:	ec51 0b1d 	vmov	r0, r1, d13
 800e1ee:	f7f2 faa3 	bl	8000738 <__aeabi_d2lz>
 800e1f2:	f7f2 fa5b 	bl	80006ac <__aeabi_l2d>
 800e1f6:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 800e1fa:	ec41 0b17 	vmov	d7, r0, r1
 800e1fe:	ea4b 0b08 	orr.w	fp, fp, r8
 800e202:	ea5b 0b0a 	orrs.w	fp, fp, sl
 800e206:	ee3d db47 	vsub.f64	d13, d13, d7
 800e20a:	d03c      	beq.n	800e286 <_strtod_l+0xb16>
 800e20c:	eeb4 dbca 	vcmpe.f64	d13, d10
 800e210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e214:	f53f acf4 	bmi.w	800dc00 <_strtod_l+0x490>
 800e218:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800e21c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e220:	dda8      	ble.n	800e174 <_strtod_l+0xa04>
 800e222:	e4ed      	b.n	800dc00 <_strtod_l+0x490>
 800e224:	9805      	ldr	r0, [sp, #20]
 800e226:	b1f0      	cbz	r0, 800e266 <_strtod_l+0xaf6>
 800e228:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800e22c:	d81b      	bhi.n	800e266 <_strtod_l+0xaf6>
 800e22e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 800e2b8 <_strtod_l+0xb48>
 800e232:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800e236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e23a:	d811      	bhi.n	800e260 <_strtod_l+0xaf0>
 800e23c:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800e240:	ee1d 3a10 	vmov	r3, s26
 800e244:	2b01      	cmp	r3, #1
 800e246:	bf38      	it	cc
 800e248:	2301      	movcc	r3, #1
 800e24a:	ee0d 3a10 	vmov	s26, r3
 800e24e:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800e252:	f1ba 0f00 	cmp.w	sl, #0
 800e256:	d113      	bne.n	800e280 <_strtod_l+0xb10>
 800e258:	eeb1 7b4d 	vneg.f64	d7, d13
 800e25c:	ec53 2b17 	vmov	r2, r3, d7
 800e260:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800e264:	1a43      	subs	r3, r0, r1
 800e266:	eeb0 0b48 	vmov.f64	d0, d8
 800e26a:	ec43 2b1c 	vmov	d12, r2, r3
 800e26e:	910a      	str	r1, [sp, #40]	; 0x28
 800e270:	f7ff f926 	bl	800d4c0 <__ulp>
 800e274:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e276:	eeac 8b00 	vfma.f64	d8, d12, d0
 800e27a:	ec59 8b18 	vmov	r8, r9, d8
 800e27e:	e7aa      	b.n	800e1d6 <_strtod_l+0xa66>
 800e280:	eeb0 7b4d 	vmov.f64	d7, d13
 800e284:	e7ea      	b.n	800e25c <_strtod_l+0xaec>
 800e286:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800e28a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e28e:	f57f af71 	bpl.w	800e174 <_strtod_l+0xa04>
 800e292:	e4b5      	b.n	800dc00 <_strtod_l+0x490>
 800e294:	2300      	movs	r3, #0
 800e296:	9308      	str	r3, [sp, #32]
 800e298:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e29a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e29c:	6013      	str	r3, [r2, #0]
 800e29e:	f7ff baa6 	b.w	800d7ee <_strtod_l+0x7e>
 800e2a2:	2a65      	cmp	r2, #101	; 0x65
 800e2a4:	f43f aba2 	beq.w	800d9ec <_strtod_l+0x27c>
 800e2a8:	2a45      	cmp	r2, #69	; 0x45
 800e2aa:	f43f ab9f 	beq.w	800d9ec <_strtod_l+0x27c>
 800e2ae:	2101      	movs	r1, #1
 800e2b0:	f7ff bbd8 	b.w	800da64 <_strtod_l+0x2f4>
 800e2b4:	f3af 8000 	nop.w
 800e2b8:	ffc00000 	.word	0xffc00000
 800e2bc:	41dfffff 	.word	0x41dfffff
 800e2c0:	000fffff 	.word	0x000fffff
 800e2c4:	7ff00000 	.word	0x7ff00000
 800e2c8:	7fefffff 	.word	0x7fefffff
 800e2cc:	7c9fffff 	.word	0x7c9fffff
 800e2d0:	7fe00000 	.word	0x7fe00000

0800e2d4 <_strtod_r>:
 800e2d4:	4b01      	ldr	r3, [pc, #4]	; (800e2dc <_strtod_r+0x8>)
 800e2d6:	f7ff ba4b 	b.w	800d770 <_strtod_l>
 800e2da:	bf00      	nop
 800e2dc:	24000070 	.word	0x24000070

0800e2e0 <_strtol_l.constprop.0>:
 800e2e0:	2b01      	cmp	r3, #1
 800e2e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2e6:	d001      	beq.n	800e2ec <_strtol_l.constprop.0+0xc>
 800e2e8:	2b24      	cmp	r3, #36	; 0x24
 800e2ea:	d906      	bls.n	800e2fa <_strtol_l.constprop.0+0x1a>
 800e2ec:	f7fd fe46 	bl	800bf7c <__errno>
 800e2f0:	2316      	movs	r3, #22
 800e2f2:	6003      	str	r3, [r0, #0]
 800e2f4:	2000      	movs	r0, #0
 800e2f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2fa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e3e0 <_strtol_l.constprop.0+0x100>
 800e2fe:	460d      	mov	r5, r1
 800e300:	462e      	mov	r6, r5
 800e302:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e306:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800e30a:	f017 0708 	ands.w	r7, r7, #8
 800e30e:	d1f7      	bne.n	800e300 <_strtol_l.constprop.0+0x20>
 800e310:	2c2d      	cmp	r4, #45	; 0x2d
 800e312:	d132      	bne.n	800e37a <_strtol_l.constprop.0+0x9a>
 800e314:	782c      	ldrb	r4, [r5, #0]
 800e316:	2701      	movs	r7, #1
 800e318:	1cb5      	adds	r5, r6, #2
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d05b      	beq.n	800e3d6 <_strtol_l.constprop.0+0xf6>
 800e31e:	2b10      	cmp	r3, #16
 800e320:	d109      	bne.n	800e336 <_strtol_l.constprop.0+0x56>
 800e322:	2c30      	cmp	r4, #48	; 0x30
 800e324:	d107      	bne.n	800e336 <_strtol_l.constprop.0+0x56>
 800e326:	782c      	ldrb	r4, [r5, #0]
 800e328:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e32c:	2c58      	cmp	r4, #88	; 0x58
 800e32e:	d14d      	bne.n	800e3cc <_strtol_l.constprop.0+0xec>
 800e330:	786c      	ldrb	r4, [r5, #1]
 800e332:	2310      	movs	r3, #16
 800e334:	3502      	adds	r5, #2
 800e336:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e33a:	f108 38ff 	add.w	r8, r8, #4294967295
 800e33e:	f04f 0e00 	mov.w	lr, #0
 800e342:	fbb8 f9f3 	udiv	r9, r8, r3
 800e346:	4676      	mov	r6, lr
 800e348:	fb03 8a19 	mls	sl, r3, r9, r8
 800e34c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e350:	f1bc 0f09 	cmp.w	ip, #9
 800e354:	d816      	bhi.n	800e384 <_strtol_l.constprop.0+0xa4>
 800e356:	4664      	mov	r4, ip
 800e358:	42a3      	cmp	r3, r4
 800e35a:	dd24      	ble.n	800e3a6 <_strtol_l.constprop.0+0xc6>
 800e35c:	f1be 3fff 	cmp.w	lr, #4294967295
 800e360:	d008      	beq.n	800e374 <_strtol_l.constprop.0+0x94>
 800e362:	45b1      	cmp	r9, r6
 800e364:	d31c      	bcc.n	800e3a0 <_strtol_l.constprop.0+0xc0>
 800e366:	d101      	bne.n	800e36c <_strtol_l.constprop.0+0x8c>
 800e368:	45a2      	cmp	sl, r4
 800e36a:	db19      	blt.n	800e3a0 <_strtol_l.constprop.0+0xc0>
 800e36c:	fb06 4603 	mla	r6, r6, r3, r4
 800e370:	f04f 0e01 	mov.w	lr, #1
 800e374:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e378:	e7e8      	b.n	800e34c <_strtol_l.constprop.0+0x6c>
 800e37a:	2c2b      	cmp	r4, #43	; 0x2b
 800e37c:	bf04      	itt	eq
 800e37e:	782c      	ldrbeq	r4, [r5, #0]
 800e380:	1cb5      	addeq	r5, r6, #2
 800e382:	e7ca      	b.n	800e31a <_strtol_l.constprop.0+0x3a>
 800e384:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e388:	f1bc 0f19 	cmp.w	ip, #25
 800e38c:	d801      	bhi.n	800e392 <_strtol_l.constprop.0+0xb2>
 800e38e:	3c37      	subs	r4, #55	; 0x37
 800e390:	e7e2      	b.n	800e358 <_strtol_l.constprop.0+0x78>
 800e392:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e396:	f1bc 0f19 	cmp.w	ip, #25
 800e39a:	d804      	bhi.n	800e3a6 <_strtol_l.constprop.0+0xc6>
 800e39c:	3c57      	subs	r4, #87	; 0x57
 800e39e:	e7db      	b.n	800e358 <_strtol_l.constprop.0+0x78>
 800e3a0:	f04f 3eff 	mov.w	lr, #4294967295
 800e3a4:	e7e6      	b.n	800e374 <_strtol_l.constprop.0+0x94>
 800e3a6:	f1be 3fff 	cmp.w	lr, #4294967295
 800e3aa:	d105      	bne.n	800e3b8 <_strtol_l.constprop.0+0xd8>
 800e3ac:	2322      	movs	r3, #34	; 0x22
 800e3ae:	6003      	str	r3, [r0, #0]
 800e3b0:	4646      	mov	r6, r8
 800e3b2:	b942      	cbnz	r2, 800e3c6 <_strtol_l.constprop.0+0xe6>
 800e3b4:	4630      	mov	r0, r6
 800e3b6:	e79e      	b.n	800e2f6 <_strtol_l.constprop.0+0x16>
 800e3b8:	b107      	cbz	r7, 800e3bc <_strtol_l.constprop.0+0xdc>
 800e3ba:	4276      	negs	r6, r6
 800e3bc:	2a00      	cmp	r2, #0
 800e3be:	d0f9      	beq.n	800e3b4 <_strtol_l.constprop.0+0xd4>
 800e3c0:	f1be 0f00 	cmp.w	lr, #0
 800e3c4:	d000      	beq.n	800e3c8 <_strtol_l.constprop.0+0xe8>
 800e3c6:	1e69      	subs	r1, r5, #1
 800e3c8:	6011      	str	r1, [r2, #0]
 800e3ca:	e7f3      	b.n	800e3b4 <_strtol_l.constprop.0+0xd4>
 800e3cc:	2430      	movs	r4, #48	; 0x30
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d1b1      	bne.n	800e336 <_strtol_l.constprop.0+0x56>
 800e3d2:	2308      	movs	r3, #8
 800e3d4:	e7af      	b.n	800e336 <_strtol_l.constprop.0+0x56>
 800e3d6:	2c30      	cmp	r4, #48	; 0x30
 800e3d8:	d0a5      	beq.n	800e326 <_strtol_l.constprop.0+0x46>
 800e3da:	230a      	movs	r3, #10
 800e3dc:	e7ab      	b.n	800e336 <_strtol_l.constprop.0+0x56>
 800e3de:	bf00      	nop
 800e3e0:	0800f911 	.word	0x0800f911

0800e3e4 <_strtol_r>:
 800e3e4:	f7ff bf7c 	b.w	800e2e0 <_strtol_l.constprop.0>

0800e3e8 <__ssputs_r>:
 800e3e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3ec:	688e      	ldr	r6, [r1, #8]
 800e3ee:	461f      	mov	r7, r3
 800e3f0:	42be      	cmp	r6, r7
 800e3f2:	680b      	ldr	r3, [r1, #0]
 800e3f4:	4682      	mov	sl, r0
 800e3f6:	460c      	mov	r4, r1
 800e3f8:	4690      	mov	r8, r2
 800e3fa:	d82c      	bhi.n	800e456 <__ssputs_r+0x6e>
 800e3fc:	898a      	ldrh	r2, [r1, #12]
 800e3fe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e402:	d026      	beq.n	800e452 <__ssputs_r+0x6a>
 800e404:	6965      	ldr	r5, [r4, #20]
 800e406:	6909      	ldr	r1, [r1, #16]
 800e408:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e40c:	eba3 0901 	sub.w	r9, r3, r1
 800e410:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e414:	1c7b      	adds	r3, r7, #1
 800e416:	444b      	add	r3, r9
 800e418:	106d      	asrs	r5, r5, #1
 800e41a:	429d      	cmp	r5, r3
 800e41c:	bf38      	it	cc
 800e41e:	461d      	movcc	r5, r3
 800e420:	0553      	lsls	r3, r2, #21
 800e422:	d527      	bpl.n	800e474 <__ssputs_r+0x8c>
 800e424:	4629      	mov	r1, r5
 800e426:	f7fe fc53 	bl	800ccd0 <_malloc_r>
 800e42a:	4606      	mov	r6, r0
 800e42c:	b360      	cbz	r0, 800e488 <__ssputs_r+0xa0>
 800e42e:	6921      	ldr	r1, [r4, #16]
 800e430:	464a      	mov	r2, r9
 800e432:	f7fd fdcf 	bl	800bfd4 <memcpy>
 800e436:	89a3      	ldrh	r3, [r4, #12]
 800e438:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e43c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e440:	81a3      	strh	r3, [r4, #12]
 800e442:	6126      	str	r6, [r4, #16]
 800e444:	6165      	str	r5, [r4, #20]
 800e446:	444e      	add	r6, r9
 800e448:	eba5 0509 	sub.w	r5, r5, r9
 800e44c:	6026      	str	r6, [r4, #0]
 800e44e:	60a5      	str	r5, [r4, #8]
 800e450:	463e      	mov	r6, r7
 800e452:	42be      	cmp	r6, r7
 800e454:	d900      	bls.n	800e458 <__ssputs_r+0x70>
 800e456:	463e      	mov	r6, r7
 800e458:	6820      	ldr	r0, [r4, #0]
 800e45a:	4632      	mov	r2, r6
 800e45c:	4641      	mov	r1, r8
 800e45e:	f000 f9c9 	bl	800e7f4 <memmove>
 800e462:	68a3      	ldr	r3, [r4, #8]
 800e464:	1b9b      	subs	r3, r3, r6
 800e466:	60a3      	str	r3, [r4, #8]
 800e468:	6823      	ldr	r3, [r4, #0]
 800e46a:	4433      	add	r3, r6
 800e46c:	6023      	str	r3, [r4, #0]
 800e46e:	2000      	movs	r0, #0
 800e470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e474:	462a      	mov	r2, r5
 800e476:	f000 fda0 	bl	800efba <_realloc_r>
 800e47a:	4606      	mov	r6, r0
 800e47c:	2800      	cmp	r0, #0
 800e47e:	d1e0      	bne.n	800e442 <__ssputs_r+0x5a>
 800e480:	6921      	ldr	r1, [r4, #16]
 800e482:	4650      	mov	r0, sl
 800e484:	f7fe fbb0 	bl	800cbe8 <_free_r>
 800e488:	230c      	movs	r3, #12
 800e48a:	f8ca 3000 	str.w	r3, [sl]
 800e48e:	89a3      	ldrh	r3, [r4, #12]
 800e490:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e494:	81a3      	strh	r3, [r4, #12]
 800e496:	f04f 30ff 	mov.w	r0, #4294967295
 800e49a:	e7e9      	b.n	800e470 <__ssputs_r+0x88>

0800e49c <_svfiprintf_r>:
 800e49c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4a0:	4698      	mov	r8, r3
 800e4a2:	898b      	ldrh	r3, [r1, #12]
 800e4a4:	061b      	lsls	r3, r3, #24
 800e4a6:	b09d      	sub	sp, #116	; 0x74
 800e4a8:	4607      	mov	r7, r0
 800e4aa:	460d      	mov	r5, r1
 800e4ac:	4614      	mov	r4, r2
 800e4ae:	d50e      	bpl.n	800e4ce <_svfiprintf_r+0x32>
 800e4b0:	690b      	ldr	r3, [r1, #16]
 800e4b2:	b963      	cbnz	r3, 800e4ce <_svfiprintf_r+0x32>
 800e4b4:	2140      	movs	r1, #64	; 0x40
 800e4b6:	f7fe fc0b 	bl	800ccd0 <_malloc_r>
 800e4ba:	6028      	str	r0, [r5, #0]
 800e4bc:	6128      	str	r0, [r5, #16]
 800e4be:	b920      	cbnz	r0, 800e4ca <_svfiprintf_r+0x2e>
 800e4c0:	230c      	movs	r3, #12
 800e4c2:	603b      	str	r3, [r7, #0]
 800e4c4:	f04f 30ff 	mov.w	r0, #4294967295
 800e4c8:	e0d0      	b.n	800e66c <_svfiprintf_r+0x1d0>
 800e4ca:	2340      	movs	r3, #64	; 0x40
 800e4cc:	616b      	str	r3, [r5, #20]
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	9309      	str	r3, [sp, #36]	; 0x24
 800e4d2:	2320      	movs	r3, #32
 800e4d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e4d8:	f8cd 800c 	str.w	r8, [sp, #12]
 800e4dc:	2330      	movs	r3, #48	; 0x30
 800e4de:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e684 <_svfiprintf_r+0x1e8>
 800e4e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e4e6:	f04f 0901 	mov.w	r9, #1
 800e4ea:	4623      	mov	r3, r4
 800e4ec:	469a      	mov	sl, r3
 800e4ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e4f2:	b10a      	cbz	r2, 800e4f8 <_svfiprintf_r+0x5c>
 800e4f4:	2a25      	cmp	r2, #37	; 0x25
 800e4f6:	d1f9      	bne.n	800e4ec <_svfiprintf_r+0x50>
 800e4f8:	ebba 0b04 	subs.w	fp, sl, r4
 800e4fc:	d00b      	beq.n	800e516 <_svfiprintf_r+0x7a>
 800e4fe:	465b      	mov	r3, fp
 800e500:	4622      	mov	r2, r4
 800e502:	4629      	mov	r1, r5
 800e504:	4638      	mov	r0, r7
 800e506:	f7ff ff6f 	bl	800e3e8 <__ssputs_r>
 800e50a:	3001      	adds	r0, #1
 800e50c:	f000 80a9 	beq.w	800e662 <_svfiprintf_r+0x1c6>
 800e510:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e512:	445a      	add	r2, fp
 800e514:	9209      	str	r2, [sp, #36]	; 0x24
 800e516:	f89a 3000 	ldrb.w	r3, [sl]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	f000 80a1 	beq.w	800e662 <_svfiprintf_r+0x1c6>
 800e520:	2300      	movs	r3, #0
 800e522:	f04f 32ff 	mov.w	r2, #4294967295
 800e526:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e52a:	f10a 0a01 	add.w	sl, sl, #1
 800e52e:	9304      	str	r3, [sp, #16]
 800e530:	9307      	str	r3, [sp, #28]
 800e532:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e536:	931a      	str	r3, [sp, #104]	; 0x68
 800e538:	4654      	mov	r4, sl
 800e53a:	2205      	movs	r2, #5
 800e53c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e540:	4850      	ldr	r0, [pc, #320]	; (800e684 <_svfiprintf_r+0x1e8>)
 800e542:	f7f1 fecd 	bl	80002e0 <memchr>
 800e546:	9a04      	ldr	r2, [sp, #16]
 800e548:	b9d8      	cbnz	r0, 800e582 <_svfiprintf_r+0xe6>
 800e54a:	06d0      	lsls	r0, r2, #27
 800e54c:	bf44      	itt	mi
 800e54e:	2320      	movmi	r3, #32
 800e550:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e554:	0711      	lsls	r1, r2, #28
 800e556:	bf44      	itt	mi
 800e558:	232b      	movmi	r3, #43	; 0x2b
 800e55a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e55e:	f89a 3000 	ldrb.w	r3, [sl]
 800e562:	2b2a      	cmp	r3, #42	; 0x2a
 800e564:	d015      	beq.n	800e592 <_svfiprintf_r+0xf6>
 800e566:	9a07      	ldr	r2, [sp, #28]
 800e568:	4654      	mov	r4, sl
 800e56a:	2000      	movs	r0, #0
 800e56c:	f04f 0c0a 	mov.w	ip, #10
 800e570:	4621      	mov	r1, r4
 800e572:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e576:	3b30      	subs	r3, #48	; 0x30
 800e578:	2b09      	cmp	r3, #9
 800e57a:	d94d      	bls.n	800e618 <_svfiprintf_r+0x17c>
 800e57c:	b1b0      	cbz	r0, 800e5ac <_svfiprintf_r+0x110>
 800e57e:	9207      	str	r2, [sp, #28]
 800e580:	e014      	b.n	800e5ac <_svfiprintf_r+0x110>
 800e582:	eba0 0308 	sub.w	r3, r0, r8
 800e586:	fa09 f303 	lsl.w	r3, r9, r3
 800e58a:	4313      	orrs	r3, r2
 800e58c:	9304      	str	r3, [sp, #16]
 800e58e:	46a2      	mov	sl, r4
 800e590:	e7d2      	b.n	800e538 <_svfiprintf_r+0x9c>
 800e592:	9b03      	ldr	r3, [sp, #12]
 800e594:	1d19      	adds	r1, r3, #4
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	9103      	str	r1, [sp, #12]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	bfbb      	ittet	lt
 800e59e:	425b      	neglt	r3, r3
 800e5a0:	f042 0202 	orrlt.w	r2, r2, #2
 800e5a4:	9307      	strge	r3, [sp, #28]
 800e5a6:	9307      	strlt	r3, [sp, #28]
 800e5a8:	bfb8      	it	lt
 800e5aa:	9204      	strlt	r2, [sp, #16]
 800e5ac:	7823      	ldrb	r3, [r4, #0]
 800e5ae:	2b2e      	cmp	r3, #46	; 0x2e
 800e5b0:	d10c      	bne.n	800e5cc <_svfiprintf_r+0x130>
 800e5b2:	7863      	ldrb	r3, [r4, #1]
 800e5b4:	2b2a      	cmp	r3, #42	; 0x2a
 800e5b6:	d134      	bne.n	800e622 <_svfiprintf_r+0x186>
 800e5b8:	9b03      	ldr	r3, [sp, #12]
 800e5ba:	1d1a      	adds	r2, r3, #4
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	9203      	str	r2, [sp, #12]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	bfb8      	it	lt
 800e5c4:	f04f 33ff 	movlt.w	r3, #4294967295
 800e5c8:	3402      	adds	r4, #2
 800e5ca:	9305      	str	r3, [sp, #20]
 800e5cc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800e694 <_svfiprintf_r+0x1f8>
 800e5d0:	7821      	ldrb	r1, [r4, #0]
 800e5d2:	2203      	movs	r2, #3
 800e5d4:	4650      	mov	r0, sl
 800e5d6:	f7f1 fe83 	bl	80002e0 <memchr>
 800e5da:	b138      	cbz	r0, 800e5ec <_svfiprintf_r+0x150>
 800e5dc:	9b04      	ldr	r3, [sp, #16]
 800e5de:	eba0 000a 	sub.w	r0, r0, sl
 800e5e2:	2240      	movs	r2, #64	; 0x40
 800e5e4:	4082      	lsls	r2, r0
 800e5e6:	4313      	orrs	r3, r2
 800e5e8:	3401      	adds	r4, #1
 800e5ea:	9304      	str	r3, [sp, #16]
 800e5ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5f0:	4825      	ldr	r0, [pc, #148]	; (800e688 <_svfiprintf_r+0x1ec>)
 800e5f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e5f6:	2206      	movs	r2, #6
 800e5f8:	f7f1 fe72 	bl	80002e0 <memchr>
 800e5fc:	2800      	cmp	r0, #0
 800e5fe:	d038      	beq.n	800e672 <_svfiprintf_r+0x1d6>
 800e600:	4b22      	ldr	r3, [pc, #136]	; (800e68c <_svfiprintf_r+0x1f0>)
 800e602:	bb1b      	cbnz	r3, 800e64c <_svfiprintf_r+0x1b0>
 800e604:	9b03      	ldr	r3, [sp, #12]
 800e606:	3307      	adds	r3, #7
 800e608:	f023 0307 	bic.w	r3, r3, #7
 800e60c:	3308      	adds	r3, #8
 800e60e:	9303      	str	r3, [sp, #12]
 800e610:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e612:	4433      	add	r3, r6
 800e614:	9309      	str	r3, [sp, #36]	; 0x24
 800e616:	e768      	b.n	800e4ea <_svfiprintf_r+0x4e>
 800e618:	fb0c 3202 	mla	r2, ip, r2, r3
 800e61c:	460c      	mov	r4, r1
 800e61e:	2001      	movs	r0, #1
 800e620:	e7a6      	b.n	800e570 <_svfiprintf_r+0xd4>
 800e622:	2300      	movs	r3, #0
 800e624:	3401      	adds	r4, #1
 800e626:	9305      	str	r3, [sp, #20]
 800e628:	4619      	mov	r1, r3
 800e62a:	f04f 0c0a 	mov.w	ip, #10
 800e62e:	4620      	mov	r0, r4
 800e630:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e634:	3a30      	subs	r2, #48	; 0x30
 800e636:	2a09      	cmp	r2, #9
 800e638:	d903      	bls.n	800e642 <_svfiprintf_r+0x1a6>
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d0c6      	beq.n	800e5cc <_svfiprintf_r+0x130>
 800e63e:	9105      	str	r1, [sp, #20]
 800e640:	e7c4      	b.n	800e5cc <_svfiprintf_r+0x130>
 800e642:	fb0c 2101 	mla	r1, ip, r1, r2
 800e646:	4604      	mov	r4, r0
 800e648:	2301      	movs	r3, #1
 800e64a:	e7f0      	b.n	800e62e <_svfiprintf_r+0x192>
 800e64c:	ab03      	add	r3, sp, #12
 800e64e:	9300      	str	r3, [sp, #0]
 800e650:	462a      	mov	r2, r5
 800e652:	4b0f      	ldr	r3, [pc, #60]	; (800e690 <_svfiprintf_r+0x1f4>)
 800e654:	a904      	add	r1, sp, #16
 800e656:	4638      	mov	r0, r7
 800e658:	f7fc fcf2 	bl	800b040 <_printf_float>
 800e65c:	1c42      	adds	r2, r0, #1
 800e65e:	4606      	mov	r6, r0
 800e660:	d1d6      	bne.n	800e610 <_svfiprintf_r+0x174>
 800e662:	89ab      	ldrh	r3, [r5, #12]
 800e664:	065b      	lsls	r3, r3, #25
 800e666:	f53f af2d 	bmi.w	800e4c4 <_svfiprintf_r+0x28>
 800e66a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e66c:	b01d      	add	sp, #116	; 0x74
 800e66e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e672:	ab03      	add	r3, sp, #12
 800e674:	9300      	str	r3, [sp, #0]
 800e676:	462a      	mov	r2, r5
 800e678:	4b05      	ldr	r3, [pc, #20]	; (800e690 <_svfiprintf_r+0x1f4>)
 800e67a:	a904      	add	r1, sp, #16
 800e67c:	4638      	mov	r0, r7
 800e67e:	f7fc ff67 	bl	800b550 <_printf_i>
 800e682:	e7eb      	b.n	800e65c <_svfiprintf_r+0x1c0>
 800e684:	0800fa11 	.word	0x0800fa11
 800e688:	0800fa1b 	.word	0x0800fa1b
 800e68c:	0800b041 	.word	0x0800b041
 800e690:	0800e3e9 	.word	0x0800e3e9
 800e694:	0800fa17 	.word	0x0800fa17

0800e698 <__sflush_r>:
 800e698:	898a      	ldrh	r2, [r1, #12]
 800e69a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e69e:	4605      	mov	r5, r0
 800e6a0:	0710      	lsls	r0, r2, #28
 800e6a2:	460c      	mov	r4, r1
 800e6a4:	d458      	bmi.n	800e758 <__sflush_r+0xc0>
 800e6a6:	684b      	ldr	r3, [r1, #4]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	dc05      	bgt.n	800e6b8 <__sflush_r+0x20>
 800e6ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	dc02      	bgt.n	800e6b8 <__sflush_r+0x20>
 800e6b2:	2000      	movs	r0, #0
 800e6b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e6ba:	2e00      	cmp	r6, #0
 800e6bc:	d0f9      	beq.n	800e6b2 <__sflush_r+0x1a>
 800e6be:	2300      	movs	r3, #0
 800e6c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e6c4:	682f      	ldr	r7, [r5, #0]
 800e6c6:	6a21      	ldr	r1, [r4, #32]
 800e6c8:	602b      	str	r3, [r5, #0]
 800e6ca:	d032      	beq.n	800e732 <__sflush_r+0x9a>
 800e6cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e6ce:	89a3      	ldrh	r3, [r4, #12]
 800e6d0:	075a      	lsls	r2, r3, #29
 800e6d2:	d505      	bpl.n	800e6e0 <__sflush_r+0x48>
 800e6d4:	6863      	ldr	r3, [r4, #4]
 800e6d6:	1ac0      	subs	r0, r0, r3
 800e6d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e6da:	b10b      	cbz	r3, 800e6e0 <__sflush_r+0x48>
 800e6dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e6de:	1ac0      	subs	r0, r0, r3
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	4602      	mov	r2, r0
 800e6e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e6e6:	6a21      	ldr	r1, [r4, #32]
 800e6e8:	4628      	mov	r0, r5
 800e6ea:	47b0      	blx	r6
 800e6ec:	1c43      	adds	r3, r0, #1
 800e6ee:	89a3      	ldrh	r3, [r4, #12]
 800e6f0:	d106      	bne.n	800e700 <__sflush_r+0x68>
 800e6f2:	6829      	ldr	r1, [r5, #0]
 800e6f4:	291d      	cmp	r1, #29
 800e6f6:	d82b      	bhi.n	800e750 <__sflush_r+0xb8>
 800e6f8:	4a29      	ldr	r2, [pc, #164]	; (800e7a0 <__sflush_r+0x108>)
 800e6fa:	410a      	asrs	r2, r1
 800e6fc:	07d6      	lsls	r6, r2, #31
 800e6fe:	d427      	bmi.n	800e750 <__sflush_r+0xb8>
 800e700:	2200      	movs	r2, #0
 800e702:	6062      	str	r2, [r4, #4]
 800e704:	04d9      	lsls	r1, r3, #19
 800e706:	6922      	ldr	r2, [r4, #16]
 800e708:	6022      	str	r2, [r4, #0]
 800e70a:	d504      	bpl.n	800e716 <__sflush_r+0x7e>
 800e70c:	1c42      	adds	r2, r0, #1
 800e70e:	d101      	bne.n	800e714 <__sflush_r+0x7c>
 800e710:	682b      	ldr	r3, [r5, #0]
 800e712:	b903      	cbnz	r3, 800e716 <__sflush_r+0x7e>
 800e714:	6560      	str	r0, [r4, #84]	; 0x54
 800e716:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e718:	602f      	str	r7, [r5, #0]
 800e71a:	2900      	cmp	r1, #0
 800e71c:	d0c9      	beq.n	800e6b2 <__sflush_r+0x1a>
 800e71e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e722:	4299      	cmp	r1, r3
 800e724:	d002      	beq.n	800e72c <__sflush_r+0x94>
 800e726:	4628      	mov	r0, r5
 800e728:	f7fe fa5e 	bl	800cbe8 <_free_r>
 800e72c:	2000      	movs	r0, #0
 800e72e:	6360      	str	r0, [r4, #52]	; 0x34
 800e730:	e7c0      	b.n	800e6b4 <__sflush_r+0x1c>
 800e732:	2301      	movs	r3, #1
 800e734:	4628      	mov	r0, r5
 800e736:	47b0      	blx	r6
 800e738:	1c41      	adds	r1, r0, #1
 800e73a:	d1c8      	bne.n	800e6ce <__sflush_r+0x36>
 800e73c:	682b      	ldr	r3, [r5, #0]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d0c5      	beq.n	800e6ce <__sflush_r+0x36>
 800e742:	2b1d      	cmp	r3, #29
 800e744:	d001      	beq.n	800e74a <__sflush_r+0xb2>
 800e746:	2b16      	cmp	r3, #22
 800e748:	d101      	bne.n	800e74e <__sflush_r+0xb6>
 800e74a:	602f      	str	r7, [r5, #0]
 800e74c:	e7b1      	b.n	800e6b2 <__sflush_r+0x1a>
 800e74e:	89a3      	ldrh	r3, [r4, #12]
 800e750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e754:	81a3      	strh	r3, [r4, #12]
 800e756:	e7ad      	b.n	800e6b4 <__sflush_r+0x1c>
 800e758:	690f      	ldr	r7, [r1, #16]
 800e75a:	2f00      	cmp	r7, #0
 800e75c:	d0a9      	beq.n	800e6b2 <__sflush_r+0x1a>
 800e75e:	0793      	lsls	r3, r2, #30
 800e760:	680e      	ldr	r6, [r1, #0]
 800e762:	bf08      	it	eq
 800e764:	694b      	ldreq	r3, [r1, #20]
 800e766:	600f      	str	r7, [r1, #0]
 800e768:	bf18      	it	ne
 800e76a:	2300      	movne	r3, #0
 800e76c:	eba6 0807 	sub.w	r8, r6, r7
 800e770:	608b      	str	r3, [r1, #8]
 800e772:	f1b8 0f00 	cmp.w	r8, #0
 800e776:	dd9c      	ble.n	800e6b2 <__sflush_r+0x1a>
 800e778:	6a21      	ldr	r1, [r4, #32]
 800e77a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e77c:	4643      	mov	r3, r8
 800e77e:	463a      	mov	r2, r7
 800e780:	4628      	mov	r0, r5
 800e782:	47b0      	blx	r6
 800e784:	2800      	cmp	r0, #0
 800e786:	dc06      	bgt.n	800e796 <__sflush_r+0xfe>
 800e788:	89a3      	ldrh	r3, [r4, #12]
 800e78a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e78e:	81a3      	strh	r3, [r4, #12]
 800e790:	f04f 30ff 	mov.w	r0, #4294967295
 800e794:	e78e      	b.n	800e6b4 <__sflush_r+0x1c>
 800e796:	4407      	add	r7, r0
 800e798:	eba8 0800 	sub.w	r8, r8, r0
 800e79c:	e7e9      	b.n	800e772 <__sflush_r+0xda>
 800e79e:	bf00      	nop
 800e7a0:	dfbffffe 	.word	0xdfbffffe

0800e7a4 <_fflush_r>:
 800e7a4:	b538      	push	{r3, r4, r5, lr}
 800e7a6:	690b      	ldr	r3, [r1, #16]
 800e7a8:	4605      	mov	r5, r0
 800e7aa:	460c      	mov	r4, r1
 800e7ac:	b913      	cbnz	r3, 800e7b4 <_fflush_r+0x10>
 800e7ae:	2500      	movs	r5, #0
 800e7b0:	4628      	mov	r0, r5
 800e7b2:	bd38      	pop	{r3, r4, r5, pc}
 800e7b4:	b118      	cbz	r0, 800e7be <_fflush_r+0x1a>
 800e7b6:	6a03      	ldr	r3, [r0, #32]
 800e7b8:	b90b      	cbnz	r3, 800e7be <_fflush_r+0x1a>
 800e7ba:	f7fd fa69 	bl	800bc90 <__sinit>
 800e7be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d0f3      	beq.n	800e7ae <_fflush_r+0xa>
 800e7c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e7c8:	07d0      	lsls	r0, r2, #31
 800e7ca:	d404      	bmi.n	800e7d6 <_fflush_r+0x32>
 800e7cc:	0599      	lsls	r1, r3, #22
 800e7ce:	d402      	bmi.n	800e7d6 <_fflush_r+0x32>
 800e7d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e7d2:	f7fd fbfd 	bl	800bfd0 <__retarget_lock_acquire_recursive>
 800e7d6:	4628      	mov	r0, r5
 800e7d8:	4621      	mov	r1, r4
 800e7da:	f7ff ff5d 	bl	800e698 <__sflush_r>
 800e7de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e7e0:	07da      	lsls	r2, r3, #31
 800e7e2:	4605      	mov	r5, r0
 800e7e4:	d4e4      	bmi.n	800e7b0 <_fflush_r+0xc>
 800e7e6:	89a3      	ldrh	r3, [r4, #12]
 800e7e8:	059b      	lsls	r3, r3, #22
 800e7ea:	d4e1      	bmi.n	800e7b0 <_fflush_r+0xc>
 800e7ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e7ee:	f7fd fbf0 	bl	800bfd2 <__retarget_lock_release_recursive>
 800e7f2:	e7dd      	b.n	800e7b0 <_fflush_r+0xc>

0800e7f4 <memmove>:
 800e7f4:	4288      	cmp	r0, r1
 800e7f6:	b510      	push	{r4, lr}
 800e7f8:	eb01 0402 	add.w	r4, r1, r2
 800e7fc:	d902      	bls.n	800e804 <memmove+0x10>
 800e7fe:	4284      	cmp	r4, r0
 800e800:	4623      	mov	r3, r4
 800e802:	d807      	bhi.n	800e814 <memmove+0x20>
 800e804:	1e43      	subs	r3, r0, #1
 800e806:	42a1      	cmp	r1, r4
 800e808:	d008      	beq.n	800e81c <memmove+0x28>
 800e80a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e80e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e812:	e7f8      	b.n	800e806 <memmove+0x12>
 800e814:	4402      	add	r2, r0
 800e816:	4601      	mov	r1, r0
 800e818:	428a      	cmp	r2, r1
 800e81a:	d100      	bne.n	800e81e <memmove+0x2a>
 800e81c:	bd10      	pop	{r4, pc}
 800e81e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e822:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e826:	e7f7      	b.n	800e818 <memmove+0x24>

0800e828 <strncmp>:
 800e828:	b510      	push	{r4, lr}
 800e82a:	b16a      	cbz	r2, 800e848 <strncmp+0x20>
 800e82c:	3901      	subs	r1, #1
 800e82e:	1884      	adds	r4, r0, r2
 800e830:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e834:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e838:	429a      	cmp	r2, r3
 800e83a:	d103      	bne.n	800e844 <strncmp+0x1c>
 800e83c:	42a0      	cmp	r0, r4
 800e83e:	d001      	beq.n	800e844 <strncmp+0x1c>
 800e840:	2a00      	cmp	r2, #0
 800e842:	d1f5      	bne.n	800e830 <strncmp+0x8>
 800e844:	1ad0      	subs	r0, r2, r3
 800e846:	bd10      	pop	{r4, pc}
 800e848:	4610      	mov	r0, r2
 800e84a:	e7fc      	b.n	800e846 <strncmp+0x1e>

0800e84c <_sbrk_r>:
 800e84c:	b538      	push	{r3, r4, r5, lr}
 800e84e:	4d06      	ldr	r5, [pc, #24]	; (800e868 <_sbrk_r+0x1c>)
 800e850:	2300      	movs	r3, #0
 800e852:	4604      	mov	r4, r0
 800e854:	4608      	mov	r0, r1
 800e856:	602b      	str	r3, [r5, #0]
 800e858:	f7f3 f860 	bl	800191c <_sbrk>
 800e85c:	1c43      	adds	r3, r0, #1
 800e85e:	d102      	bne.n	800e866 <_sbrk_r+0x1a>
 800e860:	682b      	ldr	r3, [r5, #0]
 800e862:	b103      	cbz	r3, 800e866 <_sbrk_r+0x1a>
 800e864:	6023      	str	r3, [r4, #0]
 800e866:	bd38      	pop	{r3, r4, r5, pc}
 800e868:	24005534 	.word	0x24005534
 800e86c:	00000000 	.word	0x00000000

0800e870 <nan>:
 800e870:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e878 <nan+0x8>
 800e874:	4770      	bx	lr
 800e876:	bf00      	nop
 800e878:	00000000 	.word	0x00000000
 800e87c:	7ff80000 	.word	0x7ff80000

0800e880 <__assert_func>:
 800e880:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e882:	4614      	mov	r4, r2
 800e884:	461a      	mov	r2, r3
 800e886:	4b09      	ldr	r3, [pc, #36]	; (800e8ac <__assert_func+0x2c>)
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	4605      	mov	r5, r0
 800e88c:	68d8      	ldr	r0, [r3, #12]
 800e88e:	b14c      	cbz	r4, 800e8a4 <__assert_func+0x24>
 800e890:	4b07      	ldr	r3, [pc, #28]	; (800e8b0 <__assert_func+0x30>)
 800e892:	9100      	str	r1, [sp, #0]
 800e894:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e898:	4906      	ldr	r1, [pc, #24]	; (800e8b4 <__assert_func+0x34>)
 800e89a:	462b      	mov	r3, r5
 800e89c:	f000 fbca 	bl	800f034 <fiprintf>
 800e8a0:	f000 fbda 	bl	800f058 <abort>
 800e8a4:	4b04      	ldr	r3, [pc, #16]	; (800e8b8 <__assert_func+0x38>)
 800e8a6:	461c      	mov	r4, r3
 800e8a8:	e7f3      	b.n	800e892 <__assert_func+0x12>
 800e8aa:	bf00      	nop
 800e8ac:	2400006c 	.word	0x2400006c
 800e8b0:	0800fa2a 	.word	0x0800fa2a
 800e8b4:	0800fa37 	.word	0x0800fa37
 800e8b8:	0800fa65 	.word	0x0800fa65

0800e8bc <_calloc_r>:
 800e8bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e8be:	fba1 2402 	umull	r2, r4, r1, r2
 800e8c2:	b94c      	cbnz	r4, 800e8d8 <_calloc_r+0x1c>
 800e8c4:	4611      	mov	r1, r2
 800e8c6:	9201      	str	r2, [sp, #4]
 800e8c8:	f7fe fa02 	bl	800ccd0 <_malloc_r>
 800e8cc:	9a01      	ldr	r2, [sp, #4]
 800e8ce:	4605      	mov	r5, r0
 800e8d0:	b930      	cbnz	r0, 800e8e0 <_calloc_r+0x24>
 800e8d2:	4628      	mov	r0, r5
 800e8d4:	b003      	add	sp, #12
 800e8d6:	bd30      	pop	{r4, r5, pc}
 800e8d8:	220c      	movs	r2, #12
 800e8da:	6002      	str	r2, [r0, #0]
 800e8dc:	2500      	movs	r5, #0
 800e8de:	e7f8      	b.n	800e8d2 <_calloc_r+0x16>
 800e8e0:	4621      	mov	r1, r4
 800e8e2:	f7fd faa2 	bl	800be2a <memset>
 800e8e6:	e7f4      	b.n	800e8d2 <_calloc_r+0x16>

0800e8e8 <rshift>:
 800e8e8:	6903      	ldr	r3, [r0, #16]
 800e8ea:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e8ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e8f2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e8f6:	f100 0414 	add.w	r4, r0, #20
 800e8fa:	dd45      	ble.n	800e988 <rshift+0xa0>
 800e8fc:	f011 011f 	ands.w	r1, r1, #31
 800e900:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e904:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e908:	d10c      	bne.n	800e924 <rshift+0x3c>
 800e90a:	f100 0710 	add.w	r7, r0, #16
 800e90e:	4629      	mov	r1, r5
 800e910:	42b1      	cmp	r1, r6
 800e912:	d334      	bcc.n	800e97e <rshift+0x96>
 800e914:	1a9b      	subs	r3, r3, r2
 800e916:	009b      	lsls	r3, r3, #2
 800e918:	1eea      	subs	r2, r5, #3
 800e91a:	4296      	cmp	r6, r2
 800e91c:	bf38      	it	cc
 800e91e:	2300      	movcc	r3, #0
 800e920:	4423      	add	r3, r4
 800e922:	e015      	b.n	800e950 <rshift+0x68>
 800e924:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e928:	f1c1 0820 	rsb	r8, r1, #32
 800e92c:	40cf      	lsrs	r7, r1
 800e92e:	f105 0e04 	add.w	lr, r5, #4
 800e932:	46a1      	mov	r9, r4
 800e934:	4576      	cmp	r6, lr
 800e936:	46f4      	mov	ip, lr
 800e938:	d815      	bhi.n	800e966 <rshift+0x7e>
 800e93a:	1a9a      	subs	r2, r3, r2
 800e93c:	0092      	lsls	r2, r2, #2
 800e93e:	3a04      	subs	r2, #4
 800e940:	3501      	adds	r5, #1
 800e942:	42ae      	cmp	r6, r5
 800e944:	bf38      	it	cc
 800e946:	2200      	movcc	r2, #0
 800e948:	18a3      	adds	r3, r4, r2
 800e94a:	50a7      	str	r7, [r4, r2]
 800e94c:	b107      	cbz	r7, 800e950 <rshift+0x68>
 800e94e:	3304      	adds	r3, #4
 800e950:	1b1a      	subs	r2, r3, r4
 800e952:	42a3      	cmp	r3, r4
 800e954:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e958:	bf08      	it	eq
 800e95a:	2300      	moveq	r3, #0
 800e95c:	6102      	str	r2, [r0, #16]
 800e95e:	bf08      	it	eq
 800e960:	6143      	streq	r3, [r0, #20]
 800e962:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e966:	f8dc c000 	ldr.w	ip, [ip]
 800e96a:	fa0c fc08 	lsl.w	ip, ip, r8
 800e96e:	ea4c 0707 	orr.w	r7, ip, r7
 800e972:	f849 7b04 	str.w	r7, [r9], #4
 800e976:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e97a:	40cf      	lsrs	r7, r1
 800e97c:	e7da      	b.n	800e934 <rshift+0x4c>
 800e97e:	f851 cb04 	ldr.w	ip, [r1], #4
 800e982:	f847 cf04 	str.w	ip, [r7, #4]!
 800e986:	e7c3      	b.n	800e910 <rshift+0x28>
 800e988:	4623      	mov	r3, r4
 800e98a:	e7e1      	b.n	800e950 <rshift+0x68>

0800e98c <__hexdig_fun>:
 800e98c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e990:	2b09      	cmp	r3, #9
 800e992:	d802      	bhi.n	800e99a <__hexdig_fun+0xe>
 800e994:	3820      	subs	r0, #32
 800e996:	b2c0      	uxtb	r0, r0
 800e998:	4770      	bx	lr
 800e99a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e99e:	2b05      	cmp	r3, #5
 800e9a0:	d801      	bhi.n	800e9a6 <__hexdig_fun+0x1a>
 800e9a2:	3847      	subs	r0, #71	; 0x47
 800e9a4:	e7f7      	b.n	800e996 <__hexdig_fun+0xa>
 800e9a6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e9aa:	2b05      	cmp	r3, #5
 800e9ac:	d801      	bhi.n	800e9b2 <__hexdig_fun+0x26>
 800e9ae:	3827      	subs	r0, #39	; 0x27
 800e9b0:	e7f1      	b.n	800e996 <__hexdig_fun+0xa>
 800e9b2:	2000      	movs	r0, #0
 800e9b4:	4770      	bx	lr
	...

0800e9b8 <__gethex>:
 800e9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9bc:	4617      	mov	r7, r2
 800e9be:	680a      	ldr	r2, [r1, #0]
 800e9c0:	b085      	sub	sp, #20
 800e9c2:	f102 0b02 	add.w	fp, r2, #2
 800e9c6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e9ca:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e9ce:	4681      	mov	r9, r0
 800e9d0:	468a      	mov	sl, r1
 800e9d2:	9302      	str	r3, [sp, #8]
 800e9d4:	32fe      	adds	r2, #254	; 0xfe
 800e9d6:	eb02 030b 	add.w	r3, r2, fp
 800e9da:	46d8      	mov	r8, fp
 800e9dc:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800e9e0:	9301      	str	r3, [sp, #4]
 800e9e2:	2830      	cmp	r0, #48	; 0x30
 800e9e4:	d0f7      	beq.n	800e9d6 <__gethex+0x1e>
 800e9e6:	f7ff ffd1 	bl	800e98c <__hexdig_fun>
 800e9ea:	4604      	mov	r4, r0
 800e9ec:	2800      	cmp	r0, #0
 800e9ee:	d138      	bne.n	800ea62 <__gethex+0xaa>
 800e9f0:	49a7      	ldr	r1, [pc, #668]	; (800ec90 <__gethex+0x2d8>)
 800e9f2:	2201      	movs	r2, #1
 800e9f4:	4640      	mov	r0, r8
 800e9f6:	f7ff ff17 	bl	800e828 <strncmp>
 800e9fa:	4606      	mov	r6, r0
 800e9fc:	2800      	cmp	r0, #0
 800e9fe:	d169      	bne.n	800ead4 <__gethex+0x11c>
 800ea00:	f898 0001 	ldrb.w	r0, [r8, #1]
 800ea04:	465d      	mov	r5, fp
 800ea06:	f7ff ffc1 	bl	800e98c <__hexdig_fun>
 800ea0a:	2800      	cmp	r0, #0
 800ea0c:	d064      	beq.n	800ead8 <__gethex+0x120>
 800ea0e:	465a      	mov	r2, fp
 800ea10:	7810      	ldrb	r0, [r2, #0]
 800ea12:	2830      	cmp	r0, #48	; 0x30
 800ea14:	4690      	mov	r8, r2
 800ea16:	f102 0201 	add.w	r2, r2, #1
 800ea1a:	d0f9      	beq.n	800ea10 <__gethex+0x58>
 800ea1c:	f7ff ffb6 	bl	800e98c <__hexdig_fun>
 800ea20:	2301      	movs	r3, #1
 800ea22:	fab0 f480 	clz	r4, r0
 800ea26:	0964      	lsrs	r4, r4, #5
 800ea28:	465e      	mov	r6, fp
 800ea2a:	9301      	str	r3, [sp, #4]
 800ea2c:	4642      	mov	r2, r8
 800ea2e:	4615      	mov	r5, r2
 800ea30:	3201      	adds	r2, #1
 800ea32:	7828      	ldrb	r0, [r5, #0]
 800ea34:	f7ff ffaa 	bl	800e98c <__hexdig_fun>
 800ea38:	2800      	cmp	r0, #0
 800ea3a:	d1f8      	bne.n	800ea2e <__gethex+0x76>
 800ea3c:	4994      	ldr	r1, [pc, #592]	; (800ec90 <__gethex+0x2d8>)
 800ea3e:	2201      	movs	r2, #1
 800ea40:	4628      	mov	r0, r5
 800ea42:	f7ff fef1 	bl	800e828 <strncmp>
 800ea46:	b978      	cbnz	r0, 800ea68 <__gethex+0xb0>
 800ea48:	b946      	cbnz	r6, 800ea5c <__gethex+0xa4>
 800ea4a:	1c6e      	adds	r6, r5, #1
 800ea4c:	4632      	mov	r2, r6
 800ea4e:	4615      	mov	r5, r2
 800ea50:	3201      	adds	r2, #1
 800ea52:	7828      	ldrb	r0, [r5, #0]
 800ea54:	f7ff ff9a 	bl	800e98c <__hexdig_fun>
 800ea58:	2800      	cmp	r0, #0
 800ea5a:	d1f8      	bne.n	800ea4e <__gethex+0x96>
 800ea5c:	1b73      	subs	r3, r6, r5
 800ea5e:	009e      	lsls	r6, r3, #2
 800ea60:	e004      	b.n	800ea6c <__gethex+0xb4>
 800ea62:	2400      	movs	r4, #0
 800ea64:	4626      	mov	r6, r4
 800ea66:	e7e1      	b.n	800ea2c <__gethex+0x74>
 800ea68:	2e00      	cmp	r6, #0
 800ea6a:	d1f7      	bne.n	800ea5c <__gethex+0xa4>
 800ea6c:	782b      	ldrb	r3, [r5, #0]
 800ea6e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ea72:	2b50      	cmp	r3, #80	; 0x50
 800ea74:	d13d      	bne.n	800eaf2 <__gethex+0x13a>
 800ea76:	786b      	ldrb	r3, [r5, #1]
 800ea78:	2b2b      	cmp	r3, #43	; 0x2b
 800ea7a:	d02f      	beq.n	800eadc <__gethex+0x124>
 800ea7c:	2b2d      	cmp	r3, #45	; 0x2d
 800ea7e:	d031      	beq.n	800eae4 <__gethex+0x12c>
 800ea80:	1c69      	adds	r1, r5, #1
 800ea82:	f04f 0b00 	mov.w	fp, #0
 800ea86:	7808      	ldrb	r0, [r1, #0]
 800ea88:	f7ff ff80 	bl	800e98c <__hexdig_fun>
 800ea8c:	1e42      	subs	r2, r0, #1
 800ea8e:	b2d2      	uxtb	r2, r2
 800ea90:	2a18      	cmp	r2, #24
 800ea92:	d82e      	bhi.n	800eaf2 <__gethex+0x13a>
 800ea94:	f1a0 0210 	sub.w	r2, r0, #16
 800ea98:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ea9c:	f7ff ff76 	bl	800e98c <__hexdig_fun>
 800eaa0:	f100 3cff 	add.w	ip, r0, #4294967295
 800eaa4:	fa5f fc8c 	uxtb.w	ip, ip
 800eaa8:	f1bc 0f18 	cmp.w	ip, #24
 800eaac:	d91d      	bls.n	800eaea <__gethex+0x132>
 800eaae:	f1bb 0f00 	cmp.w	fp, #0
 800eab2:	d000      	beq.n	800eab6 <__gethex+0xfe>
 800eab4:	4252      	negs	r2, r2
 800eab6:	4416      	add	r6, r2
 800eab8:	f8ca 1000 	str.w	r1, [sl]
 800eabc:	b1dc      	cbz	r4, 800eaf6 <__gethex+0x13e>
 800eabe:	9b01      	ldr	r3, [sp, #4]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	bf14      	ite	ne
 800eac4:	f04f 0800 	movne.w	r8, #0
 800eac8:	f04f 0806 	moveq.w	r8, #6
 800eacc:	4640      	mov	r0, r8
 800eace:	b005      	add	sp, #20
 800ead0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ead4:	4645      	mov	r5, r8
 800ead6:	4626      	mov	r6, r4
 800ead8:	2401      	movs	r4, #1
 800eada:	e7c7      	b.n	800ea6c <__gethex+0xb4>
 800eadc:	f04f 0b00 	mov.w	fp, #0
 800eae0:	1ca9      	adds	r1, r5, #2
 800eae2:	e7d0      	b.n	800ea86 <__gethex+0xce>
 800eae4:	f04f 0b01 	mov.w	fp, #1
 800eae8:	e7fa      	b.n	800eae0 <__gethex+0x128>
 800eaea:	230a      	movs	r3, #10
 800eaec:	fb03 0002 	mla	r0, r3, r2, r0
 800eaf0:	e7d0      	b.n	800ea94 <__gethex+0xdc>
 800eaf2:	4629      	mov	r1, r5
 800eaf4:	e7e0      	b.n	800eab8 <__gethex+0x100>
 800eaf6:	eba5 0308 	sub.w	r3, r5, r8
 800eafa:	3b01      	subs	r3, #1
 800eafc:	4621      	mov	r1, r4
 800eafe:	2b07      	cmp	r3, #7
 800eb00:	dc0a      	bgt.n	800eb18 <__gethex+0x160>
 800eb02:	4648      	mov	r0, r9
 800eb04:	f7fe f970 	bl	800cde8 <_Balloc>
 800eb08:	4604      	mov	r4, r0
 800eb0a:	b940      	cbnz	r0, 800eb1e <__gethex+0x166>
 800eb0c:	4b61      	ldr	r3, [pc, #388]	; (800ec94 <__gethex+0x2dc>)
 800eb0e:	4602      	mov	r2, r0
 800eb10:	21e4      	movs	r1, #228	; 0xe4
 800eb12:	4861      	ldr	r0, [pc, #388]	; (800ec98 <__gethex+0x2e0>)
 800eb14:	f7ff feb4 	bl	800e880 <__assert_func>
 800eb18:	3101      	adds	r1, #1
 800eb1a:	105b      	asrs	r3, r3, #1
 800eb1c:	e7ef      	b.n	800eafe <__gethex+0x146>
 800eb1e:	f100 0a14 	add.w	sl, r0, #20
 800eb22:	2300      	movs	r3, #0
 800eb24:	495a      	ldr	r1, [pc, #360]	; (800ec90 <__gethex+0x2d8>)
 800eb26:	f8cd a004 	str.w	sl, [sp, #4]
 800eb2a:	469b      	mov	fp, r3
 800eb2c:	45a8      	cmp	r8, r5
 800eb2e:	d342      	bcc.n	800ebb6 <__gethex+0x1fe>
 800eb30:	9801      	ldr	r0, [sp, #4]
 800eb32:	f840 bb04 	str.w	fp, [r0], #4
 800eb36:	eba0 000a 	sub.w	r0, r0, sl
 800eb3a:	1080      	asrs	r0, r0, #2
 800eb3c:	6120      	str	r0, [r4, #16]
 800eb3e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800eb42:	4658      	mov	r0, fp
 800eb44:	f7fe fa42 	bl	800cfcc <__hi0bits>
 800eb48:	683d      	ldr	r5, [r7, #0]
 800eb4a:	eba8 0000 	sub.w	r0, r8, r0
 800eb4e:	42a8      	cmp	r0, r5
 800eb50:	dd59      	ble.n	800ec06 <__gethex+0x24e>
 800eb52:	eba0 0805 	sub.w	r8, r0, r5
 800eb56:	4641      	mov	r1, r8
 800eb58:	4620      	mov	r0, r4
 800eb5a:	f7fe fdce 	bl	800d6fa <__any_on>
 800eb5e:	4683      	mov	fp, r0
 800eb60:	b1b8      	cbz	r0, 800eb92 <__gethex+0x1da>
 800eb62:	f108 33ff 	add.w	r3, r8, #4294967295
 800eb66:	1159      	asrs	r1, r3, #5
 800eb68:	f003 021f 	and.w	r2, r3, #31
 800eb6c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800eb70:	f04f 0b01 	mov.w	fp, #1
 800eb74:	fa0b f202 	lsl.w	r2, fp, r2
 800eb78:	420a      	tst	r2, r1
 800eb7a:	d00a      	beq.n	800eb92 <__gethex+0x1da>
 800eb7c:	455b      	cmp	r3, fp
 800eb7e:	dd06      	ble.n	800eb8e <__gethex+0x1d6>
 800eb80:	f1a8 0102 	sub.w	r1, r8, #2
 800eb84:	4620      	mov	r0, r4
 800eb86:	f7fe fdb8 	bl	800d6fa <__any_on>
 800eb8a:	2800      	cmp	r0, #0
 800eb8c:	d138      	bne.n	800ec00 <__gethex+0x248>
 800eb8e:	f04f 0b02 	mov.w	fp, #2
 800eb92:	4641      	mov	r1, r8
 800eb94:	4620      	mov	r0, r4
 800eb96:	f7ff fea7 	bl	800e8e8 <rshift>
 800eb9a:	4446      	add	r6, r8
 800eb9c:	68bb      	ldr	r3, [r7, #8]
 800eb9e:	42b3      	cmp	r3, r6
 800eba0:	da41      	bge.n	800ec26 <__gethex+0x26e>
 800eba2:	4621      	mov	r1, r4
 800eba4:	4648      	mov	r0, r9
 800eba6:	f7fe f95f 	bl	800ce68 <_Bfree>
 800ebaa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ebac:	2300      	movs	r3, #0
 800ebae:	6013      	str	r3, [r2, #0]
 800ebb0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800ebb4:	e78a      	b.n	800eacc <__gethex+0x114>
 800ebb6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800ebba:	2a2e      	cmp	r2, #46	; 0x2e
 800ebbc:	d014      	beq.n	800ebe8 <__gethex+0x230>
 800ebbe:	2b20      	cmp	r3, #32
 800ebc0:	d106      	bne.n	800ebd0 <__gethex+0x218>
 800ebc2:	9b01      	ldr	r3, [sp, #4]
 800ebc4:	f843 bb04 	str.w	fp, [r3], #4
 800ebc8:	f04f 0b00 	mov.w	fp, #0
 800ebcc:	9301      	str	r3, [sp, #4]
 800ebce:	465b      	mov	r3, fp
 800ebd0:	7828      	ldrb	r0, [r5, #0]
 800ebd2:	9303      	str	r3, [sp, #12]
 800ebd4:	f7ff feda 	bl	800e98c <__hexdig_fun>
 800ebd8:	9b03      	ldr	r3, [sp, #12]
 800ebda:	f000 000f 	and.w	r0, r0, #15
 800ebde:	4098      	lsls	r0, r3
 800ebe0:	ea4b 0b00 	orr.w	fp, fp, r0
 800ebe4:	3304      	adds	r3, #4
 800ebe6:	e7a1      	b.n	800eb2c <__gethex+0x174>
 800ebe8:	45a8      	cmp	r8, r5
 800ebea:	d8e8      	bhi.n	800ebbe <__gethex+0x206>
 800ebec:	2201      	movs	r2, #1
 800ebee:	4628      	mov	r0, r5
 800ebf0:	9303      	str	r3, [sp, #12]
 800ebf2:	f7ff fe19 	bl	800e828 <strncmp>
 800ebf6:	4926      	ldr	r1, [pc, #152]	; (800ec90 <__gethex+0x2d8>)
 800ebf8:	9b03      	ldr	r3, [sp, #12]
 800ebfa:	2800      	cmp	r0, #0
 800ebfc:	d1df      	bne.n	800ebbe <__gethex+0x206>
 800ebfe:	e795      	b.n	800eb2c <__gethex+0x174>
 800ec00:	f04f 0b03 	mov.w	fp, #3
 800ec04:	e7c5      	b.n	800eb92 <__gethex+0x1da>
 800ec06:	da0b      	bge.n	800ec20 <__gethex+0x268>
 800ec08:	eba5 0800 	sub.w	r8, r5, r0
 800ec0c:	4621      	mov	r1, r4
 800ec0e:	4642      	mov	r2, r8
 800ec10:	4648      	mov	r0, r9
 800ec12:	f7fe fb43 	bl	800d29c <__lshift>
 800ec16:	eba6 0608 	sub.w	r6, r6, r8
 800ec1a:	4604      	mov	r4, r0
 800ec1c:	f100 0a14 	add.w	sl, r0, #20
 800ec20:	f04f 0b00 	mov.w	fp, #0
 800ec24:	e7ba      	b.n	800eb9c <__gethex+0x1e4>
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	42b3      	cmp	r3, r6
 800ec2a:	dd73      	ble.n	800ed14 <__gethex+0x35c>
 800ec2c:	1b9e      	subs	r6, r3, r6
 800ec2e:	42b5      	cmp	r5, r6
 800ec30:	dc34      	bgt.n	800ec9c <__gethex+0x2e4>
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	2b02      	cmp	r3, #2
 800ec36:	d023      	beq.n	800ec80 <__gethex+0x2c8>
 800ec38:	2b03      	cmp	r3, #3
 800ec3a:	d025      	beq.n	800ec88 <__gethex+0x2d0>
 800ec3c:	2b01      	cmp	r3, #1
 800ec3e:	d115      	bne.n	800ec6c <__gethex+0x2b4>
 800ec40:	42b5      	cmp	r5, r6
 800ec42:	d113      	bne.n	800ec6c <__gethex+0x2b4>
 800ec44:	2d01      	cmp	r5, #1
 800ec46:	d10b      	bne.n	800ec60 <__gethex+0x2a8>
 800ec48:	9a02      	ldr	r2, [sp, #8]
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	6013      	str	r3, [r2, #0]
 800ec4e:	2301      	movs	r3, #1
 800ec50:	6123      	str	r3, [r4, #16]
 800ec52:	f8ca 3000 	str.w	r3, [sl]
 800ec56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ec58:	f04f 0862 	mov.w	r8, #98	; 0x62
 800ec5c:	601c      	str	r4, [r3, #0]
 800ec5e:	e735      	b.n	800eacc <__gethex+0x114>
 800ec60:	1e69      	subs	r1, r5, #1
 800ec62:	4620      	mov	r0, r4
 800ec64:	f7fe fd49 	bl	800d6fa <__any_on>
 800ec68:	2800      	cmp	r0, #0
 800ec6a:	d1ed      	bne.n	800ec48 <__gethex+0x290>
 800ec6c:	4621      	mov	r1, r4
 800ec6e:	4648      	mov	r0, r9
 800ec70:	f7fe f8fa 	bl	800ce68 <_Bfree>
 800ec74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ec76:	2300      	movs	r3, #0
 800ec78:	6013      	str	r3, [r2, #0]
 800ec7a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800ec7e:	e725      	b.n	800eacc <__gethex+0x114>
 800ec80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d1f2      	bne.n	800ec6c <__gethex+0x2b4>
 800ec86:	e7df      	b.n	800ec48 <__gethex+0x290>
 800ec88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d1dc      	bne.n	800ec48 <__gethex+0x290>
 800ec8e:	e7ed      	b.n	800ec6c <__gethex+0x2b4>
 800ec90:	0800f8bc 	.word	0x0800f8bc
 800ec94:	0800f751 	.word	0x0800f751
 800ec98:	0800fa66 	.word	0x0800fa66
 800ec9c:	f106 38ff 	add.w	r8, r6, #4294967295
 800eca0:	f1bb 0f00 	cmp.w	fp, #0
 800eca4:	d133      	bne.n	800ed0e <__gethex+0x356>
 800eca6:	f1b8 0f00 	cmp.w	r8, #0
 800ecaa:	d004      	beq.n	800ecb6 <__gethex+0x2fe>
 800ecac:	4641      	mov	r1, r8
 800ecae:	4620      	mov	r0, r4
 800ecb0:	f7fe fd23 	bl	800d6fa <__any_on>
 800ecb4:	4683      	mov	fp, r0
 800ecb6:	ea4f 1268 	mov.w	r2, r8, asr #5
 800ecba:	2301      	movs	r3, #1
 800ecbc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ecc0:	f008 081f 	and.w	r8, r8, #31
 800ecc4:	fa03 f308 	lsl.w	r3, r3, r8
 800ecc8:	4213      	tst	r3, r2
 800ecca:	4631      	mov	r1, r6
 800eccc:	4620      	mov	r0, r4
 800ecce:	bf18      	it	ne
 800ecd0:	f04b 0b02 	orrne.w	fp, fp, #2
 800ecd4:	1bad      	subs	r5, r5, r6
 800ecd6:	f7ff fe07 	bl	800e8e8 <rshift>
 800ecda:	687e      	ldr	r6, [r7, #4]
 800ecdc:	f04f 0802 	mov.w	r8, #2
 800ece0:	f1bb 0f00 	cmp.w	fp, #0
 800ece4:	d04a      	beq.n	800ed7c <__gethex+0x3c4>
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	2b02      	cmp	r3, #2
 800ecea:	d016      	beq.n	800ed1a <__gethex+0x362>
 800ecec:	2b03      	cmp	r3, #3
 800ecee:	d018      	beq.n	800ed22 <__gethex+0x36a>
 800ecf0:	2b01      	cmp	r3, #1
 800ecf2:	d109      	bne.n	800ed08 <__gethex+0x350>
 800ecf4:	f01b 0f02 	tst.w	fp, #2
 800ecf8:	d006      	beq.n	800ed08 <__gethex+0x350>
 800ecfa:	f8da 3000 	ldr.w	r3, [sl]
 800ecfe:	ea4b 0b03 	orr.w	fp, fp, r3
 800ed02:	f01b 0f01 	tst.w	fp, #1
 800ed06:	d10f      	bne.n	800ed28 <__gethex+0x370>
 800ed08:	f048 0810 	orr.w	r8, r8, #16
 800ed0c:	e036      	b.n	800ed7c <__gethex+0x3c4>
 800ed0e:	f04f 0b01 	mov.w	fp, #1
 800ed12:	e7d0      	b.n	800ecb6 <__gethex+0x2fe>
 800ed14:	f04f 0801 	mov.w	r8, #1
 800ed18:	e7e2      	b.n	800ece0 <__gethex+0x328>
 800ed1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ed1c:	f1c3 0301 	rsb	r3, r3, #1
 800ed20:	930f      	str	r3, [sp, #60]	; 0x3c
 800ed22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d0ef      	beq.n	800ed08 <__gethex+0x350>
 800ed28:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ed2c:	f104 0214 	add.w	r2, r4, #20
 800ed30:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800ed34:	9301      	str	r3, [sp, #4]
 800ed36:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	4694      	mov	ip, r2
 800ed3e:	f852 1b04 	ldr.w	r1, [r2], #4
 800ed42:	f1b1 3fff 	cmp.w	r1, #4294967295
 800ed46:	d01e      	beq.n	800ed86 <__gethex+0x3ce>
 800ed48:	3101      	adds	r1, #1
 800ed4a:	f8cc 1000 	str.w	r1, [ip]
 800ed4e:	f1b8 0f02 	cmp.w	r8, #2
 800ed52:	f104 0214 	add.w	r2, r4, #20
 800ed56:	d13d      	bne.n	800edd4 <__gethex+0x41c>
 800ed58:	683b      	ldr	r3, [r7, #0]
 800ed5a:	3b01      	subs	r3, #1
 800ed5c:	42ab      	cmp	r3, r5
 800ed5e:	d10b      	bne.n	800ed78 <__gethex+0x3c0>
 800ed60:	1169      	asrs	r1, r5, #5
 800ed62:	2301      	movs	r3, #1
 800ed64:	f005 051f 	and.w	r5, r5, #31
 800ed68:	fa03 f505 	lsl.w	r5, r3, r5
 800ed6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ed70:	421d      	tst	r5, r3
 800ed72:	bf18      	it	ne
 800ed74:	f04f 0801 	movne.w	r8, #1
 800ed78:	f048 0820 	orr.w	r8, r8, #32
 800ed7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ed7e:	601c      	str	r4, [r3, #0]
 800ed80:	9b02      	ldr	r3, [sp, #8]
 800ed82:	601e      	str	r6, [r3, #0]
 800ed84:	e6a2      	b.n	800eacc <__gethex+0x114>
 800ed86:	4290      	cmp	r0, r2
 800ed88:	f842 3c04 	str.w	r3, [r2, #-4]
 800ed8c:	d8d6      	bhi.n	800ed3c <__gethex+0x384>
 800ed8e:	68a2      	ldr	r2, [r4, #8]
 800ed90:	4593      	cmp	fp, r2
 800ed92:	db17      	blt.n	800edc4 <__gethex+0x40c>
 800ed94:	6861      	ldr	r1, [r4, #4]
 800ed96:	4648      	mov	r0, r9
 800ed98:	3101      	adds	r1, #1
 800ed9a:	f7fe f825 	bl	800cde8 <_Balloc>
 800ed9e:	4682      	mov	sl, r0
 800eda0:	b918      	cbnz	r0, 800edaa <__gethex+0x3f2>
 800eda2:	4b1b      	ldr	r3, [pc, #108]	; (800ee10 <__gethex+0x458>)
 800eda4:	4602      	mov	r2, r0
 800eda6:	2184      	movs	r1, #132	; 0x84
 800eda8:	e6b3      	b.n	800eb12 <__gethex+0x15a>
 800edaa:	6922      	ldr	r2, [r4, #16]
 800edac:	3202      	adds	r2, #2
 800edae:	f104 010c 	add.w	r1, r4, #12
 800edb2:	0092      	lsls	r2, r2, #2
 800edb4:	300c      	adds	r0, #12
 800edb6:	f7fd f90d 	bl	800bfd4 <memcpy>
 800edba:	4621      	mov	r1, r4
 800edbc:	4648      	mov	r0, r9
 800edbe:	f7fe f853 	bl	800ce68 <_Bfree>
 800edc2:	4654      	mov	r4, sl
 800edc4:	6922      	ldr	r2, [r4, #16]
 800edc6:	1c51      	adds	r1, r2, #1
 800edc8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800edcc:	6121      	str	r1, [r4, #16]
 800edce:	2101      	movs	r1, #1
 800edd0:	6151      	str	r1, [r2, #20]
 800edd2:	e7bc      	b.n	800ed4e <__gethex+0x396>
 800edd4:	6921      	ldr	r1, [r4, #16]
 800edd6:	4559      	cmp	r1, fp
 800edd8:	dd0b      	ble.n	800edf2 <__gethex+0x43a>
 800edda:	2101      	movs	r1, #1
 800eddc:	4620      	mov	r0, r4
 800edde:	f7ff fd83 	bl	800e8e8 <rshift>
 800ede2:	68bb      	ldr	r3, [r7, #8]
 800ede4:	3601      	adds	r6, #1
 800ede6:	42b3      	cmp	r3, r6
 800ede8:	f6ff aedb 	blt.w	800eba2 <__gethex+0x1ea>
 800edec:	f04f 0801 	mov.w	r8, #1
 800edf0:	e7c2      	b.n	800ed78 <__gethex+0x3c0>
 800edf2:	f015 051f 	ands.w	r5, r5, #31
 800edf6:	d0f9      	beq.n	800edec <__gethex+0x434>
 800edf8:	9b01      	ldr	r3, [sp, #4]
 800edfa:	441a      	add	r2, r3
 800edfc:	f1c5 0520 	rsb	r5, r5, #32
 800ee00:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800ee04:	f7fe f8e2 	bl	800cfcc <__hi0bits>
 800ee08:	42a8      	cmp	r0, r5
 800ee0a:	dbe6      	blt.n	800edda <__gethex+0x422>
 800ee0c:	e7ee      	b.n	800edec <__gethex+0x434>
 800ee0e:	bf00      	nop
 800ee10:	0800f751 	.word	0x0800f751

0800ee14 <L_shift>:
 800ee14:	f1c2 0208 	rsb	r2, r2, #8
 800ee18:	0092      	lsls	r2, r2, #2
 800ee1a:	b570      	push	{r4, r5, r6, lr}
 800ee1c:	f1c2 0620 	rsb	r6, r2, #32
 800ee20:	6843      	ldr	r3, [r0, #4]
 800ee22:	6804      	ldr	r4, [r0, #0]
 800ee24:	fa03 f506 	lsl.w	r5, r3, r6
 800ee28:	432c      	orrs	r4, r5
 800ee2a:	40d3      	lsrs	r3, r2
 800ee2c:	6004      	str	r4, [r0, #0]
 800ee2e:	f840 3f04 	str.w	r3, [r0, #4]!
 800ee32:	4288      	cmp	r0, r1
 800ee34:	d3f4      	bcc.n	800ee20 <L_shift+0xc>
 800ee36:	bd70      	pop	{r4, r5, r6, pc}

0800ee38 <__match>:
 800ee38:	b530      	push	{r4, r5, lr}
 800ee3a:	6803      	ldr	r3, [r0, #0]
 800ee3c:	3301      	adds	r3, #1
 800ee3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee42:	b914      	cbnz	r4, 800ee4a <__match+0x12>
 800ee44:	6003      	str	r3, [r0, #0]
 800ee46:	2001      	movs	r0, #1
 800ee48:	bd30      	pop	{r4, r5, pc}
 800ee4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee4e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ee52:	2d19      	cmp	r5, #25
 800ee54:	bf98      	it	ls
 800ee56:	3220      	addls	r2, #32
 800ee58:	42a2      	cmp	r2, r4
 800ee5a:	d0f0      	beq.n	800ee3e <__match+0x6>
 800ee5c:	2000      	movs	r0, #0
 800ee5e:	e7f3      	b.n	800ee48 <__match+0x10>

0800ee60 <__hexnan>:
 800ee60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee64:	680b      	ldr	r3, [r1, #0]
 800ee66:	6801      	ldr	r1, [r0, #0]
 800ee68:	115e      	asrs	r6, r3, #5
 800ee6a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ee6e:	f013 031f 	ands.w	r3, r3, #31
 800ee72:	b087      	sub	sp, #28
 800ee74:	bf18      	it	ne
 800ee76:	3604      	addne	r6, #4
 800ee78:	2500      	movs	r5, #0
 800ee7a:	1f37      	subs	r7, r6, #4
 800ee7c:	4682      	mov	sl, r0
 800ee7e:	4690      	mov	r8, r2
 800ee80:	9301      	str	r3, [sp, #4]
 800ee82:	f846 5c04 	str.w	r5, [r6, #-4]
 800ee86:	46b9      	mov	r9, r7
 800ee88:	463c      	mov	r4, r7
 800ee8a:	9502      	str	r5, [sp, #8]
 800ee8c:	46ab      	mov	fp, r5
 800ee8e:	784a      	ldrb	r2, [r1, #1]
 800ee90:	1c4b      	adds	r3, r1, #1
 800ee92:	9303      	str	r3, [sp, #12]
 800ee94:	b342      	cbz	r2, 800eee8 <__hexnan+0x88>
 800ee96:	4610      	mov	r0, r2
 800ee98:	9105      	str	r1, [sp, #20]
 800ee9a:	9204      	str	r2, [sp, #16]
 800ee9c:	f7ff fd76 	bl	800e98c <__hexdig_fun>
 800eea0:	2800      	cmp	r0, #0
 800eea2:	d14f      	bne.n	800ef44 <__hexnan+0xe4>
 800eea4:	9a04      	ldr	r2, [sp, #16]
 800eea6:	9905      	ldr	r1, [sp, #20]
 800eea8:	2a20      	cmp	r2, #32
 800eeaa:	d818      	bhi.n	800eede <__hexnan+0x7e>
 800eeac:	9b02      	ldr	r3, [sp, #8]
 800eeae:	459b      	cmp	fp, r3
 800eeb0:	dd13      	ble.n	800eeda <__hexnan+0x7a>
 800eeb2:	454c      	cmp	r4, r9
 800eeb4:	d206      	bcs.n	800eec4 <__hexnan+0x64>
 800eeb6:	2d07      	cmp	r5, #7
 800eeb8:	dc04      	bgt.n	800eec4 <__hexnan+0x64>
 800eeba:	462a      	mov	r2, r5
 800eebc:	4649      	mov	r1, r9
 800eebe:	4620      	mov	r0, r4
 800eec0:	f7ff ffa8 	bl	800ee14 <L_shift>
 800eec4:	4544      	cmp	r4, r8
 800eec6:	d950      	bls.n	800ef6a <__hexnan+0x10a>
 800eec8:	2300      	movs	r3, #0
 800eeca:	f1a4 0904 	sub.w	r9, r4, #4
 800eece:	f844 3c04 	str.w	r3, [r4, #-4]
 800eed2:	f8cd b008 	str.w	fp, [sp, #8]
 800eed6:	464c      	mov	r4, r9
 800eed8:	461d      	mov	r5, r3
 800eeda:	9903      	ldr	r1, [sp, #12]
 800eedc:	e7d7      	b.n	800ee8e <__hexnan+0x2e>
 800eede:	2a29      	cmp	r2, #41	; 0x29
 800eee0:	d155      	bne.n	800ef8e <__hexnan+0x12e>
 800eee2:	3102      	adds	r1, #2
 800eee4:	f8ca 1000 	str.w	r1, [sl]
 800eee8:	f1bb 0f00 	cmp.w	fp, #0
 800eeec:	d04f      	beq.n	800ef8e <__hexnan+0x12e>
 800eeee:	454c      	cmp	r4, r9
 800eef0:	d206      	bcs.n	800ef00 <__hexnan+0xa0>
 800eef2:	2d07      	cmp	r5, #7
 800eef4:	dc04      	bgt.n	800ef00 <__hexnan+0xa0>
 800eef6:	462a      	mov	r2, r5
 800eef8:	4649      	mov	r1, r9
 800eefa:	4620      	mov	r0, r4
 800eefc:	f7ff ff8a 	bl	800ee14 <L_shift>
 800ef00:	4544      	cmp	r4, r8
 800ef02:	d934      	bls.n	800ef6e <__hexnan+0x10e>
 800ef04:	f1a8 0204 	sub.w	r2, r8, #4
 800ef08:	4623      	mov	r3, r4
 800ef0a:	f853 1b04 	ldr.w	r1, [r3], #4
 800ef0e:	f842 1f04 	str.w	r1, [r2, #4]!
 800ef12:	429f      	cmp	r7, r3
 800ef14:	d2f9      	bcs.n	800ef0a <__hexnan+0xaa>
 800ef16:	1b3b      	subs	r3, r7, r4
 800ef18:	f023 0303 	bic.w	r3, r3, #3
 800ef1c:	3304      	adds	r3, #4
 800ef1e:	3e03      	subs	r6, #3
 800ef20:	3401      	adds	r4, #1
 800ef22:	42a6      	cmp	r6, r4
 800ef24:	bf38      	it	cc
 800ef26:	2304      	movcc	r3, #4
 800ef28:	4443      	add	r3, r8
 800ef2a:	2200      	movs	r2, #0
 800ef2c:	f843 2b04 	str.w	r2, [r3], #4
 800ef30:	429f      	cmp	r7, r3
 800ef32:	d2fb      	bcs.n	800ef2c <__hexnan+0xcc>
 800ef34:	683b      	ldr	r3, [r7, #0]
 800ef36:	b91b      	cbnz	r3, 800ef40 <__hexnan+0xe0>
 800ef38:	4547      	cmp	r7, r8
 800ef3a:	d126      	bne.n	800ef8a <__hexnan+0x12a>
 800ef3c:	2301      	movs	r3, #1
 800ef3e:	603b      	str	r3, [r7, #0]
 800ef40:	2005      	movs	r0, #5
 800ef42:	e025      	b.n	800ef90 <__hexnan+0x130>
 800ef44:	3501      	adds	r5, #1
 800ef46:	2d08      	cmp	r5, #8
 800ef48:	f10b 0b01 	add.w	fp, fp, #1
 800ef4c:	dd06      	ble.n	800ef5c <__hexnan+0xfc>
 800ef4e:	4544      	cmp	r4, r8
 800ef50:	d9c3      	bls.n	800eeda <__hexnan+0x7a>
 800ef52:	2300      	movs	r3, #0
 800ef54:	f844 3c04 	str.w	r3, [r4, #-4]
 800ef58:	2501      	movs	r5, #1
 800ef5a:	3c04      	subs	r4, #4
 800ef5c:	6822      	ldr	r2, [r4, #0]
 800ef5e:	f000 000f 	and.w	r0, r0, #15
 800ef62:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ef66:	6020      	str	r0, [r4, #0]
 800ef68:	e7b7      	b.n	800eeda <__hexnan+0x7a>
 800ef6a:	2508      	movs	r5, #8
 800ef6c:	e7b5      	b.n	800eeda <__hexnan+0x7a>
 800ef6e:	9b01      	ldr	r3, [sp, #4]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d0df      	beq.n	800ef34 <__hexnan+0xd4>
 800ef74:	f1c3 0320 	rsb	r3, r3, #32
 800ef78:	f04f 32ff 	mov.w	r2, #4294967295
 800ef7c:	40da      	lsrs	r2, r3
 800ef7e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ef82:	4013      	ands	r3, r2
 800ef84:	f846 3c04 	str.w	r3, [r6, #-4]
 800ef88:	e7d4      	b.n	800ef34 <__hexnan+0xd4>
 800ef8a:	3f04      	subs	r7, #4
 800ef8c:	e7d2      	b.n	800ef34 <__hexnan+0xd4>
 800ef8e:	2004      	movs	r0, #4
 800ef90:	b007      	add	sp, #28
 800ef92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ef96 <__ascii_mbtowc>:
 800ef96:	b082      	sub	sp, #8
 800ef98:	b901      	cbnz	r1, 800ef9c <__ascii_mbtowc+0x6>
 800ef9a:	a901      	add	r1, sp, #4
 800ef9c:	b142      	cbz	r2, 800efb0 <__ascii_mbtowc+0x1a>
 800ef9e:	b14b      	cbz	r3, 800efb4 <__ascii_mbtowc+0x1e>
 800efa0:	7813      	ldrb	r3, [r2, #0]
 800efa2:	600b      	str	r3, [r1, #0]
 800efa4:	7812      	ldrb	r2, [r2, #0]
 800efa6:	1e10      	subs	r0, r2, #0
 800efa8:	bf18      	it	ne
 800efaa:	2001      	movne	r0, #1
 800efac:	b002      	add	sp, #8
 800efae:	4770      	bx	lr
 800efb0:	4610      	mov	r0, r2
 800efb2:	e7fb      	b.n	800efac <__ascii_mbtowc+0x16>
 800efb4:	f06f 0001 	mvn.w	r0, #1
 800efb8:	e7f8      	b.n	800efac <__ascii_mbtowc+0x16>

0800efba <_realloc_r>:
 800efba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efbe:	4680      	mov	r8, r0
 800efc0:	4614      	mov	r4, r2
 800efc2:	460e      	mov	r6, r1
 800efc4:	b921      	cbnz	r1, 800efd0 <_realloc_r+0x16>
 800efc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800efca:	4611      	mov	r1, r2
 800efcc:	f7fd be80 	b.w	800ccd0 <_malloc_r>
 800efd0:	b92a      	cbnz	r2, 800efde <_realloc_r+0x24>
 800efd2:	f7fd fe09 	bl	800cbe8 <_free_r>
 800efd6:	4625      	mov	r5, r4
 800efd8:	4628      	mov	r0, r5
 800efda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efde:	f000 f842 	bl	800f066 <_malloc_usable_size_r>
 800efe2:	4284      	cmp	r4, r0
 800efe4:	4607      	mov	r7, r0
 800efe6:	d802      	bhi.n	800efee <_realloc_r+0x34>
 800efe8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800efec:	d812      	bhi.n	800f014 <_realloc_r+0x5a>
 800efee:	4621      	mov	r1, r4
 800eff0:	4640      	mov	r0, r8
 800eff2:	f7fd fe6d 	bl	800ccd0 <_malloc_r>
 800eff6:	4605      	mov	r5, r0
 800eff8:	2800      	cmp	r0, #0
 800effa:	d0ed      	beq.n	800efd8 <_realloc_r+0x1e>
 800effc:	42bc      	cmp	r4, r7
 800effe:	4622      	mov	r2, r4
 800f000:	4631      	mov	r1, r6
 800f002:	bf28      	it	cs
 800f004:	463a      	movcs	r2, r7
 800f006:	f7fc ffe5 	bl	800bfd4 <memcpy>
 800f00a:	4631      	mov	r1, r6
 800f00c:	4640      	mov	r0, r8
 800f00e:	f7fd fdeb 	bl	800cbe8 <_free_r>
 800f012:	e7e1      	b.n	800efd8 <_realloc_r+0x1e>
 800f014:	4635      	mov	r5, r6
 800f016:	e7df      	b.n	800efd8 <_realloc_r+0x1e>

0800f018 <__ascii_wctomb>:
 800f018:	b149      	cbz	r1, 800f02e <__ascii_wctomb+0x16>
 800f01a:	2aff      	cmp	r2, #255	; 0xff
 800f01c:	bf85      	ittet	hi
 800f01e:	238a      	movhi	r3, #138	; 0x8a
 800f020:	6003      	strhi	r3, [r0, #0]
 800f022:	700a      	strbls	r2, [r1, #0]
 800f024:	f04f 30ff 	movhi.w	r0, #4294967295
 800f028:	bf98      	it	ls
 800f02a:	2001      	movls	r0, #1
 800f02c:	4770      	bx	lr
 800f02e:	4608      	mov	r0, r1
 800f030:	4770      	bx	lr
	...

0800f034 <fiprintf>:
 800f034:	b40e      	push	{r1, r2, r3}
 800f036:	b503      	push	{r0, r1, lr}
 800f038:	4601      	mov	r1, r0
 800f03a:	ab03      	add	r3, sp, #12
 800f03c:	4805      	ldr	r0, [pc, #20]	; (800f054 <fiprintf+0x20>)
 800f03e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f042:	6800      	ldr	r0, [r0, #0]
 800f044:	9301      	str	r3, [sp, #4]
 800f046:	f000 f83f 	bl	800f0c8 <_vfiprintf_r>
 800f04a:	b002      	add	sp, #8
 800f04c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f050:	b003      	add	sp, #12
 800f052:	4770      	bx	lr
 800f054:	2400006c 	.word	0x2400006c

0800f058 <abort>:
 800f058:	b508      	push	{r3, lr}
 800f05a:	2006      	movs	r0, #6
 800f05c:	f000 fa0c 	bl	800f478 <raise>
 800f060:	2001      	movs	r0, #1
 800f062:	f7f2 fbe3 	bl	800182c <_exit>

0800f066 <_malloc_usable_size_r>:
 800f066:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f06a:	1f18      	subs	r0, r3, #4
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	bfbc      	itt	lt
 800f070:	580b      	ldrlt	r3, [r1, r0]
 800f072:	18c0      	addlt	r0, r0, r3
 800f074:	4770      	bx	lr

0800f076 <__sfputc_r>:
 800f076:	6893      	ldr	r3, [r2, #8]
 800f078:	3b01      	subs	r3, #1
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	b410      	push	{r4}
 800f07e:	6093      	str	r3, [r2, #8]
 800f080:	da08      	bge.n	800f094 <__sfputc_r+0x1e>
 800f082:	6994      	ldr	r4, [r2, #24]
 800f084:	42a3      	cmp	r3, r4
 800f086:	db01      	blt.n	800f08c <__sfputc_r+0x16>
 800f088:	290a      	cmp	r1, #10
 800f08a:	d103      	bne.n	800f094 <__sfputc_r+0x1e>
 800f08c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f090:	f000 b934 	b.w	800f2fc <__swbuf_r>
 800f094:	6813      	ldr	r3, [r2, #0]
 800f096:	1c58      	adds	r0, r3, #1
 800f098:	6010      	str	r0, [r2, #0]
 800f09a:	7019      	strb	r1, [r3, #0]
 800f09c:	4608      	mov	r0, r1
 800f09e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f0a2:	4770      	bx	lr

0800f0a4 <__sfputs_r>:
 800f0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0a6:	4606      	mov	r6, r0
 800f0a8:	460f      	mov	r7, r1
 800f0aa:	4614      	mov	r4, r2
 800f0ac:	18d5      	adds	r5, r2, r3
 800f0ae:	42ac      	cmp	r4, r5
 800f0b0:	d101      	bne.n	800f0b6 <__sfputs_r+0x12>
 800f0b2:	2000      	movs	r0, #0
 800f0b4:	e007      	b.n	800f0c6 <__sfputs_r+0x22>
 800f0b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0ba:	463a      	mov	r2, r7
 800f0bc:	4630      	mov	r0, r6
 800f0be:	f7ff ffda 	bl	800f076 <__sfputc_r>
 800f0c2:	1c43      	adds	r3, r0, #1
 800f0c4:	d1f3      	bne.n	800f0ae <__sfputs_r+0xa>
 800f0c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f0c8 <_vfiprintf_r>:
 800f0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0cc:	460d      	mov	r5, r1
 800f0ce:	b09d      	sub	sp, #116	; 0x74
 800f0d0:	4614      	mov	r4, r2
 800f0d2:	4698      	mov	r8, r3
 800f0d4:	4606      	mov	r6, r0
 800f0d6:	b118      	cbz	r0, 800f0e0 <_vfiprintf_r+0x18>
 800f0d8:	6a03      	ldr	r3, [r0, #32]
 800f0da:	b90b      	cbnz	r3, 800f0e0 <_vfiprintf_r+0x18>
 800f0dc:	f7fc fdd8 	bl	800bc90 <__sinit>
 800f0e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f0e2:	07d9      	lsls	r1, r3, #31
 800f0e4:	d405      	bmi.n	800f0f2 <_vfiprintf_r+0x2a>
 800f0e6:	89ab      	ldrh	r3, [r5, #12]
 800f0e8:	059a      	lsls	r2, r3, #22
 800f0ea:	d402      	bmi.n	800f0f2 <_vfiprintf_r+0x2a>
 800f0ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f0ee:	f7fc ff6f 	bl	800bfd0 <__retarget_lock_acquire_recursive>
 800f0f2:	89ab      	ldrh	r3, [r5, #12]
 800f0f4:	071b      	lsls	r3, r3, #28
 800f0f6:	d501      	bpl.n	800f0fc <_vfiprintf_r+0x34>
 800f0f8:	692b      	ldr	r3, [r5, #16]
 800f0fa:	b99b      	cbnz	r3, 800f124 <_vfiprintf_r+0x5c>
 800f0fc:	4629      	mov	r1, r5
 800f0fe:	4630      	mov	r0, r6
 800f100:	f000 f93a 	bl	800f378 <__swsetup_r>
 800f104:	b170      	cbz	r0, 800f124 <_vfiprintf_r+0x5c>
 800f106:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f108:	07dc      	lsls	r4, r3, #31
 800f10a:	d504      	bpl.n	800f116 <_vfiprintf_r+0x4e>
 800f10c:	f04f 30ff 	mov.w	r0, #4294967295
 800f110:	b01d      	add	sp, #116	; 0x74
 800f112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f116:	89ab      	ldrh	r3, [r5, #12]
 800f118:	0598      	lsls	r0, r3, #22
 800f11a:	d4f7      	bmi.n	800f10c <_vfiprintf_r+0x44>
 800f11c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f11e:	f7fc ff58 	bl	800bfd2 <__retarget_lock_release_recursive>
 800f122:	e7f3      	b.n	800f10c <_vfiprintf_r+0x44>
 800f124:	2300      	movs	r3, #0
 800f126:	9309      	str	r3, [sp, #36]	; 0x24
 800f128:	2320      	movs	r3, #32
 800f12a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f12e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f132:	2330      	movs	r3, #48	; 0x30
 800f134:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f2e8 <_vfiprintf_r+0x220>
 800f138:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f13c:	f04f 0901 	mov.w	r9, #1
 800f140:	4623      	mov	r3, r4
 800f142:	469a      	mov	sl, r3
 800f144:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f148:	b10a      	cbz	r2, 800f14e <_vfiprintf_r+0x86>
 800f14a:	2a25      	cmp	r2, #37	; 0x25
 800f14c:	d1f9      	bne.n	800f142 <_vfiprintf_r+0x7a>
 800f14e:	ebba 0b04 	subs.w	fp, sl, r4
 800f152:	d00b      	beq.n	800f16c <_vfiprintf_r+0xa4>
 800f154:	465b      	mov	r3, fp
 800f156:	4622      	mov	r2, r4
 800f158:	4629      	mov	r1, r5
 800f15a:	4630      	mov	r0, r6
 800f15c:	f7ff ffa2 	bl	800f0a4 <__sfputs_r>
 800f160:	3001      	adds	r0, #1
 800f162:	f000 80a9 	beq.w	800f2b8 <_vfiprintf_r+0x1f0>
 800f166:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f168:	445a      	add	r2, fp
 800f16a:	9209      	str	r2, [sp, #36]	; 0x24
 800f16c:	f89a 3000 	ldrb.w	r3, [sl]
 800f170:	2b00      	cmp	r3, #0
 800f172:	f000 80a1 	beq.w	800f2b8 <_vfiprintf_r+0x1f0>
 800f176:	2300      	movs	r3, #0
 800f178:	f04f 32ff 	mov.w	r2, #4294967295
 800f17c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f180:	f10a 0a01 	add.w	sl, sl, #1
 800f184:	9304      	str	r3, [sp, #16]
 800f186:	9307      	str	r3, [sp, #28]
 800f188:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f18c:	931a      	str	r3, [sp, #104]	; 0x68
 800f18e:	4654      	mov	r4, sl
 800f190:	2205      	movs	r2, #5
 800f192:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f196:	4854      	ldr	r0, [pc, #336]	; (800f2e8 <_vfiprintf_r+0x220>)
 800f198:	f7f1 f8a2 	bl	80002e0 <memchr>
 800f19c:	9a04      	ldr	r2, [sp, #16]
 800f19e:	b9d8      	cbnz	r0, 800f1d8 <_vfiprintf_r+0x110>
 800f1a0:	06d1      	lsls	r1, r2, #27
 800f1a2:	bf44      	itt	mi
 800f1a4:	2320      	movmi	r3, #32
 800f1a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f1aa:	0713      	lsls	r3, r2, #28
 800f1ac:	bf44      	itt	mi
 800f1ae:	232b      	movmi	r3, #43	; 0x2b
 800f1b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f1b4:	f89a 3000 	ldrb.w	r3, [sl]
 800f1b8:	2b2a      	cmp	r3, #42	; 0x2a
 800f1ba:	d015      	beq.n	800f1e8 <_vfiprintf_r+0x120>
 800f1bc:	9a07      	ldr	r2, [sp, #28]
 800f1be:	4654      	mov	r4, sl
 800f1c0:	2000      	movs	r0, #0
 800f1c2:	f04f 0c0a 	mov.w	ip, #10
 800f1c6:	4621      	mov	r1, r4
 800f1c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f1cc:	3b30      	subs	r3, #48	; 0x30
 800f1ce:	2b09      	cmp	r3, #9
 800f1d0:	d94d      	bls.n	800f26e <_vfiprintf_r+0x1a6>
 800f1d2:	b1b0      	cbz	r0, 800f202 <_vfiprintf_r+0x13a>
 800f1d4:	9207      	str	r2, [sp, #28]
 800f1d6:	e014      	b.n	800f202 <_vfiprintf_r+0x13a>
 800f1d8:	eba0 0308 	sub.w	r3, r0, r8
 800f1dc:	fa09 f303 	lsl.w	r3, r9, r3
 800f1e0:	4313      	orrs	r3, r2
 800f1e2:	9304      	str	r3, [sp, #16]
 800f1e4:	46a2      	mov	sl, r4
 800f1e6:	e7d2      	b.n	800f18e <_vfiprintf_r+0xc6>
 800f1e8:	9b03      	ldr	r3, [sp, #12]
 800f1ea:	1d19      	adds	r1, r3, #4
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	9103      	str	r1, [sp, #12]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	bfbb      	ittet	lt
 800f1f4:	425b      	neglt	r3, r3
 800f1f6:	f042 0202 	orrlt.w	r2, r2, #2
 800f1fa:	9307      	strge	r3, [sp, #28]
 800f1fc:	9307      	strlt	r3, [sp, #28]
 800f1fe:	bfb8      	it	lt
 800f200:	9204      	strlt	r2, [sp, #16]
 800f202:	7823      	ldrb	r3, [r4, #0]
 800f204:	2b2e      	cmp	r3, #46	; 0x2e
 800f206:	d10c      	bne.n	800f222 <_vfiprintf_r+0x15a>
 800f208:	7863      	ldrb	r3, [r4, #1]
 800f20a:	2b2a      	cmp	r3, #42	; 0x2a
 800f20c:	d134      	bne.n	800f278 <_vfiprintf_r+0x1b0>
 800f20e:	9b03      	ldr	r3, [sp, #12]
 800f210:	1d1a      	adds	r2, r3, #4
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	9203      	str	r2, [sp, #12]
 800f216:	2b00      	cmp	r3, #0
 800f218:	bfb8      	it	lt
 800f21a:	f04f 33ff 	movlt.w	r3, #4294967295
 800f21e:	3402      	adds	r4, #2
 800f220:	9305      	str	r3, [sp, #20]
 800f222:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f2f8 <_vfiprintf_r+0x230>
 800f226:	7821      	ldrb	r1, [r4, #0]
 800f228:	2203      	movs	r2, #3
 800f22a:	4650      	mov	r0, sl
 800f22c:	f7f1 f858 	bl	80002e0 <memchr>
 800f230:	b138      	cbz	r0, 800f242 <_vfiprintf_r+0x17a>
 800f232:	9b04      	ldr	r3, [sp, #16]
 800f234:	eba0 000a 	sub.w	r0, r0, sl
 800f238:	2240      	movs	r2, #64	; 0x40
 800f23a:	4082      	lsls	r2, r0
 800f23c:	4313      	orrs	r3, r2
 800f23e:	3401      	adds	r4, #1
 800f240:	9304      	str	r3, [sp, #16]
 800f242:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f246:	4829      	ldr	r0, [pc, #164]	; (800f2ec <_vfiprintf_r+0x224>)
 800f248:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f24c:	2206      	movs	r2, #6
 800f24e:	f7f1 f847 	bl	80002e0 <memchr>
 800f252:	2800      	cmp	r0, #0
 800f254:	d03f      	beq.n	800f2d6 <_vfiprintf_r+0x20e>
 800f256:	4b26      	ldr	r3, [pc, #152]	; (800f2f0 <_vfiprintf_r+0x228>)
 800f258:	bb1b      	cbnz	r3, 800f2a2 <_vfiprintf_r+0x1da>
 800f25a:	9b03      	ldr	r3, [sp, #12]
 800f25c:	3307      	adds	r3, #7
 800f25e:	f023 0307 	bic.w	r3, r3, #7
 800f262:	3308      	adds	r3, #8
 800f264:	9303      	str	r3, [sp, #12]
 800f266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f268:	443b      	add	r3, r7
 800f26a:	9309      	str	r3, [sp, #36]	; 0x24
 800f26c:	e768      	b.n	800f140 <_vfiprintf_r+0x78>
 800f26e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f272:	460c      	mov	r4, r1
 800f274:	2001      	movs	r0, #1
 800f276:	e7a6      	b.n	800f1c6 <_vfiprintf_r+0xfe>
 800f278:	2300      	movs	r3, #0
 800f27a:	3401      	adds	r4, #1
 800f27c:	9305      	str	r3, [sp, #20]
 800f27e:	4619      	mov	r1, r3
 800f280:	f04f 0c0a 	mov.w	ip, #10
 800f284:	4620      	mov	r0, r4
 800f286:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f28a:	3a30      	subs	r2, #48	; 0x30
 800f28c:	2a09      	cmp	r2, #9
 800f28e:	d903      	bls.n	800f298 <_vfiprintf_r+0x1d0>
 800f290:	2b00      	cmp	r3, #0
 800f292:	d0c6      	beq.n	800f222 <_vfiprintf_r+0x15a>
 800f294:	9105      	str	r1, [sp, #20]
 800f296:	e7c4      	b.n	800f222 <_vfiprintf_r+0x15a>
 800f298:	fb0c 2101 	mla	r1, ip, r1, r2
 800f29c:	4604      	mov	r4, r0
 800f29e:	2301      	movs	r3, #1
 800f2a0:	e7f0      	b.n	800f284 <_vfiprintf_r+0x1bc>
 800f2a2:	ab03      	add	r3, sp, #12
 800f2a4:	9300      	str	r3, [sp, #0]
 800f2a6:	462a      	mov	r2, r5
 800f2a8:	4b12      	ldr	r3, [pc, #72]	; (800f2f4 <_vfiprintf_r+0x22c>)
 800f2aa:	a904      	add	r1, sp, #16
 800f2ac:	4630      	mov	r0, r6
 800f2ae:	f7fb fec7 	bl	800b040 <_printf_float>
 800f2b2:	4607      	mov	r7, r0
 800f2b4:	1c78      	adds	r0, r7, #1
 800f2b6:	d1d6      	bne.n	800f266 <_vfiprintf_r+0x19e>
 800f2b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f2ba:	07d9      	lsls	r1, r3, #31
 800f2bc:	d405      	bmi.n	800f2ca <_vfiprintf_r+0x202>
 800f2be:	89ab      	ldrh	r3, [r5, #12]
 800f2c0:	059a      	lsls	r2, r3, #22
 800f2c2:	d402      	bmi.n	800f2ca <_vfiprintf_r+0x202>
 800f2c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f2c6:	f7fc fe84 	bl	800bfd2 <__retarget_lock_release_recursive>
 800f2ca:	89ab      	ldrh	r3, [r5, #12]
 800f2cc:	065b      	lsls	r3, r3, #25
 800f2ce:	f53f af1d 	bmi.w	800f10c <_vfiprintf_r+0x44>
 800f2d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f2d4:	e71c      	b.n	800f110 <_vfiprintf_r+0x48>
 800f2d6:	ab03      	add	r3, sp, #12
 800f2d8:	9300      	str	r3, [sp, #0]
 800f2da:	462a      	mov	r2, r5
 800f2dc:	4b05      	ldr	r3, [pc, #20]	; (800f2f4 <_vfiprintf_r+0x22c>)
 800f2de:	a904      	add	r1, sp, #16
 800f2e0:	4630      	mov	r0, r6
 800f2e2:	f7fc f935 	bl	800b550 <_printf_i>
 800f2e6:	e7e4      	b.n	800f2b2 <_vfiprintf_r+0x1ea>
 800f2e8:	0800fa11 	.word	0x0800fa11
 800f2ec:	0800fa1b 	.word	0x0800fa1b
 800f2f0:	0800b041 	.word	0x0800b041
 800f2f4:	0800f0a5 	.word	0x0800f0a5
 800f2f8:	0800fa17 	.word	0x0800fa17

0800f2fc <__swbuf_r>:
 800f2fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2fe:	460e      	mov	r6, r1
 800f300:	4614      	mov	r4, r2
 800f302:	4605      	mov	r5, r0
 800f304:	b118      	cbz	r0, 800f30e <__swbuf_r+0x12>
 800f306:	6a03      	ldr	r3, [r0, #32]
 800f308:	b90b      	cbnz	r3, 800f30e <__swbuf_r+0x12>
 800f30a:	f7fc fcc1 	bl	800bc90 <__sinit>
 800f30e:	69a3      	ldr	r3, [r4, #24]
 800f310:	60a3      	str	r3, [r4, #8]
 800f312:	89a3      	ldrh	r3, [r4, #12]
 800f314:	071a      	lsls	r2, r3, #28
 800f316:	d525      	bpl.n	800f364 <__swbuf_r+0x68>
 800f318:	6923      	ldr	r3, [r4, #16]
 800f31a:	b31b      	cbz	r3, 800f364 <__swbuf_r+0x68>
 800f31c:	6823      	ldr	r3, [r4, #0]
 800f31e:	6922      	ldr	r2, [r4, #16]
 800f320:	1a98      	subs	r0, r3, r2
 800f322:	6963      	ldr	r3, [r4, #20]
 800f324:	b2f6      	uxtb	r6, r6
 800f326:	4283      	cmp	r3, r0
 800f328:	4637      	mov	r7, r6
 800f32a:	dc04      	bgt.n	800f336 <__swbuf_r+0x3a>
 800f32c:	4621      	mov	r1, r4
 800f32e:	4628      	mov	r0, r5
 800f330:	f7ff fa38 	bl	800e7a4 <_fflush_r>
 800f334:	b9e0      	cbnz	r0, 800f370 <__swbuf_r+0x74>
 800f336:	68a3      	ldr	r3, [r4, #8]
 800f338:	3b01      	subs	r3, #1
 800f33a:	60a3      	str	r3, [r4, #8]
 800f33c:	6823      	ldr	r3, [r4, #0]
 800f33e:	1c5a      	adds	r2, r3, #1
 800f340:	6022      	str	r2, [r4, #0]
 800f342:	701e      	strb	r6, [r3, #0]
 800f344:	6962      	ldr	r2, [r4, #20]
 800f346:	1c43      	adds	r3, r0, #1
 800f348:	429a      	cmp	r2, r3
 800f34a:	d004      	beq.n	800f356 <__swbuf_r+0x5a>
 800f34c:	89a3      	ldrh	r3, [r4, #12]
 800f34e:	07db      	lsls	r3, r3, #31
 800f350:	d506      	bpl.n	800f360 <__swbuf_r+0x64>
 800f352:	2e0a      	cmp	r6, #10
 800f354:	d104      	bne.n	800f360 <__swbuf_r+0x64>
 800f356:	4621      	mov	r1, r4
 800f358:	4628      	mov	r0, r5
 800f35a:	f7ff fa23 	bl	800e7a4 <_fflush_r>
 800f35e:	b938      	cbnz	r0, 800f370 <__swbuf_r+0x74>
 800f360:	4638      	mov	r0, r7
 800f362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f364:	4621      	mov	r1, r4
 800f366:	4628      	mov	r0, r5
 800f368:	f000 f806 	bl	800f378 <__swsetup_r>
 800f36c:	2800      	cmp	r0, #0
 800f36e:	d0d5      	beq.n	800f31c <__swbuf_r+0x20>
 800f370:	f04f 37ff 	mov.w	r7, #4294967295
 800f374:	e7f4      	b.n	800f360 <__swbuf_r+0x64>
	...

0800f378 <__swsetup_r>:
 800f378:	b538      	push	{r3, r4, r5, lr}
 800f37a:	4b2a      	ldr	r3, [pc, #168]	; (800f424 <__swsetup_r+0xac>)
 800f37c:	4605      	mov	r5, r0
 800f37e:	6818      	ldr	r0, [r3, #0]
 800f380:	460c      	mov	r4, r1
 800f382:	b118      	cbz	r0, 800f38c <__swsetup_r+0x14>
 800f384:	6a03      	ldr	r3, [r0, #32]
 800f386:	b90b      	cbnz	r3, 800f38c <__swsetup_r+0x14>
 800f388:	f7fc fc82 	bl	800bc90 <__sinit>
 800f38c:	89a3      	ldrh	r3, [r4, #12]
 800f38e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f392:	0718      	lsls	r0, r3, #28
 800f394:	d422      	bmi.n	800f3dc <__swsetup_r+0x64>
 800f396:	06d9      	lsls	r1, r3, #27
 800f398:	d407      	bmi.n	800f3aa <__swsetup_r+0x32>
 800f39a:	2309      	movs	r3, #9
 800f39c:	602b      	str	r3, [r5, #0]
 800f39e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f3a2:	81a3      	strh	r3, [r4, #12]
 800f3a4:	f04f 30ff 	mov.w	r0, #4294967295
 800f3a8:	e034      	b.n	800f414 <__swsetup_r+0x9c>
 800f3aa:	0758      	lsls	r0, r3, #29
 800f3ac:	d512      	bpl.n	800f3d4 <__swsetup_r+0x5c>
 800f3ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f3b0:	b141      	cbz	r1, 800f3c4 <__swsetup_r+0x4c>
 800f3b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f3b6:	4299      	cmp	r1, r3
 800f3b8:	d002      	beq.n	800f3c0 <__swsetup_r+0x48>
 800f3ba:	4628      	mov	r0, r5
 800f3bc:	f7fd fc14 	bl	800cbe8 <_free_r>
 800f3c0:	2300      	movs	r3, #0
 800f3c2:	6363      	str	r3, [r4, #52]	; 0x34
 800f3c4:	89a3      	ldrh	r3, [r4, #12]
 800f3c6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f3ca:	81a3      	strh	r3, [r4, #12]
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	6063      	str	r3, [r4, #4]
 800f3d0:	6923      	ldr	r3, [r4, #16]
 800f3d2:	6023      	str	r3, [r4, #0]
 800f3d4:	89a3      	ldrh	r3, [r4, #12]
 800f3d6:	f043 0308 	orr.w	r3, r3, #8
 800f3da:	81a3      	strh	r3, [r4, #12]
 800f3dc:	6923      	ldr	r3, [r4, #16]
 800f3de:	b94b      	cbnz	r3, 800f3f4 <__swsetup_r+0x7c>
 800f3e0:	89a3      	ldrh	r3, [r4, #12]
 800f3e2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f3e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f3ea:	d003      	beq.n	800f3f4 <__swsetup_r+0x7c>
 800f3ec:	4621      	mov	r1, r4
 800f3ee:	4628      	mov	r0, r5
 800f3f0:	f000 f884 	bl	800f4fc <__smakebuf_r>
 800f3f4:	89a0      	ldrh	r0, [r4, #12]
 800f3f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f3fa:	f010 0301 	ands.w	r3, r0, #1
 800f3fe:	d00a      	beq.n	800f416 <__swsetup_r+0x9e>
 800f400:	2300      	movs	r3, #0
 800f402:	60a3      	str	r3, [r4, #8]
 800f404:	6963      	ldr	r3, [r4, #20]
 800f406:	425b      	negs	r3, r3
 800f408:	61a3      	str	r3, [r4, #24]
 800f40a:	6923      	ldr	r3, [r4, #16]
 800f40c:	b943      	cbnz	r3, 800f420 <__swsetup_r+0xa8>
 800f40e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f412:	d1c4      	bne.n	800f39e <__swsetup_r+0x26>
 800f414:	bd38      	pop	{r3, r4, r5, pc}
 800f416:	0781      	lsls	r1, r0, #30
 800f418:	bf58      	it	pl
 800f41a:	6963      	ldrpl	r3, [r4, #20]
 800f41c:	60a3      	str	r3, [r4, #8]
 800f41e:	e7f4      	b.n	800f40a <__swsetup_r+0x92>
 800f420:	2000      	movs	r0, #0
 800f422:	e7f7      	b.n	800f414 <__swsetup_r+0x9c>
 800f424:	2400006c 	.word	0x2400006c

0800f428 <_raise_r>:
 800f428:	291f      	cmp	r1, #31
 800f42a:	b538      	push	{r3, r4, r5, lr}
 800f42c:	4604      	mov	r4, r0
 800f42e:	460d      	mov	r5, r1
 800f430:	d904      	bls.n	800f43c <_raise_r+0x14>
 800f432:	2316      	movs	r3, #22
 800f434:	6003      	str	r3, [r0, #0]
 800f436:	f04f 30ff 	mov.w	r0, #4294967295
 800f43a:	bd38      	pop	{r3, r4, r5, pc}
 800f43c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f43e:	b112      	cbz	r2, 800f446 <_raise_r+0x1e>
 800f440:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f444:	b94b      	cbnz	r3, 800f45a <_raise_r+0x32>
 800f446:	4620      	mov	r0, r4
 800f448:	f000 f830 	bl	800f4ac <_getpid_r>
 800f44c:	462a      	mov	r2, r5
 800f44e:	4601      	mov	r1, r0
 800f450:	4620      	mov	r0, r4
 800f452:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f456:	f000 b817 	b.w	800f488 <_kill_r>
 800f45a:	2b01      	cmp	r3, #1
 800f45c:	d00a      	beq.n	800f474 <_raise_r+0x4c>
 800f45e:	1c59      	adds	r1, r3, #1
 800f460:	d103      	bne.n	800f46a <_raise_r+0x42>
 800f462:	2316      	movs	r3, #22
 800f464:	6003      	str	r3, [r0, #0]
 800f466:	2001      	movs	r0, #1
 800f468:	e7e7      	b.n	800f43a <_raise_r+0x12>
 800f46a:	2400      	movs	r4, #0
 800f46c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f470:	4628      	mov	r0, r5
 800f472:	4798      	blx	r3
 800f474:	2000      	movs	r0, #0
 800f476:	e7e0      	b.n	800f43a <_raise_r+0x12>

0800f478 <raise>:
 800f478:	4b02      	ldr	r3, [pc, #8]	; (800f484 <raise+0xc>)
 800f47a:	4601      	mov	r1, r0
 800f47c:	6818      	ldr	r0, [r3, #0]
 800f47e:	f7ff bfd3 	b.w	800f428 <_raise_r>
 800f482:	bf00      	nop
 800f484:	2400006c 	.word	0x2400006c

0800f488 <_kill_r>:
 800f488:	b538      	push	{r3, r4, r5, lr}
 800f48a:	4d07      	ldr	r5, [pc, #28]	; (800f4a8 <_kill_r+0x20>)
 800f48c:	2300      	movs	r3, #0
 800f48e:	4604      	mov	r4, r0
 800f490:	4608      	mov	r0, r1
 800f492:	4611      	mov	r1, r2
 800f494:	602b      	str	r3, [r5, #0]
 800f496:	f7f2 f9b9 	bl	800180c <_kill>
 800f49a:	1c43      	adds	r3, r0, #1
 800f49c:	d102      	bne.n	800f4a4 <_kill_r+0x1c>
 800f49e:	682b      	ldr	r3, [r5, #0]
 800f4a0:	b103      	cbz	r3, 800f4a4 <_kill_r+0x1c>
 800f4a2:	6023      	str	r3, [r4, #0]
 800f4a4:	bd38      	pop	{r3, r4, r5, pc}
 800f4a6:	bf00      	nop
 800f4a8:	24005534 	.word	0x24005534

0800f4ac <_getpid_r>:
 800f4ac:	f7f2 b9a6 	b.w	80017fc <_getpid>

0800f4b0 <__swhatbuf_r>:
 800f4b0:	b570      	push	{r4, r5, r6, lr}
 800f4b2:	460c      	mov	r4, r1
 800f4b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4b8:	2900      	cmp	r1, #0
 800f4ba:	b096      	sub	sp, #88	; 0x58
 800f4bc:	4615      	mov	r5, r2
 800f4be:	461e      	mov	r6, r3
 800f4c0:	da0d      	bge.n	800f4de <__swhatbuf_r+0x2e>
 800f4c2:	89a3      	ldrh	r3, [r4, #12]
 800f4c4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f4c8:	f04f 0100 	mov.w	r1, #0
 800f4cc:	bf0c      	ite	eq
 800f4ce:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f4d2:	2340      	movne	r3, #64	; 0x40
 800f4d4:	2000      	movs	r0, #0
 800f4d6:	6031      	str	r1, [r6, #0]
 800f4d8:	602b      	str	r3, [r5, #0]
 800f4da:	b016      	add	sp, #88	; 0x58
 800f4dc:	bd70      	pop	{r4, r5, r6, pc}
 800f4de:	466a      	mov	r2, sp
 800f4e0:	f000 f848 	bl	800f574 <_fstat_r>
 800f4e4:	2800      	cmp	r0, #0
 800f4e6:	dbec      	blt.n	800f4c2 <__swhatbuf_r+0x12>
 800f4e8:	9901      	ldr	r1, [sp, #4]
 800f4ea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f4ee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f4f2:	4259      	negs	r1, r3
 800f4f4:	4159      	adcs	r1, r3
 800f4f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f4fa:	e7eb      	b.n	800f4d4 <__swhatbuf_r+0x24>

0800f4fc <__smakebuf_r>:
 800f4fc:	898b      	ldrh	r3, [r1, #12]
 800f4fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f500:	079d      	lsls	r5, r3, #30
 800f502:	4606      	mov	r6, r0
 800f504:	460c      	mov	r4, r1
 800f506:	d507      	bpl.n	800f518 <__smakebuf_r+0x1c>
 800f508:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f50c:	6023      	str	r3, [r4, #0]
 800f50e:	6123      	str	r3, [r4, #16]
 800f510:	2301      	movs	r3, #1
 800f512:	6163      	str	r3, [r4, #20]
 800f514:	b002      	add	sp, #8
 800f516:	bd70      	pop	{r4, r5, r6, pc}
 800f518:	ab01      	add	r3, sp, #4
 800f51a:	466a      	mov	r2, sp
 800f51c:	f7ff ffc8 	bl	800f4b0 <__swhatbuf_r>
 800f520:	9900      	ldr	r1, [sp, #0]
 800f522:	4605      	mov	r5, r0
 800f524:	4630      	mov	r0, r6
 800f526:	f7fd fbd3 	bl	800ccd0 <_malloc_r>
 800f52a:	b948      	cbnz	r0, 800f540 <__smakebuf_r+0x44>
 800f52c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f530:	059a      	lsls	r2, r3, #22
 800f532:	d4ef      	bmi.n	800f514 <__smakebuf_r+0x18>
 800f534:	f023 0303 	bic.w	r3, r3, #3
 800f538:	f043 0302 	orr.w	r3, r3, #2
 800f53c:	81a3      	strh	r3, [r4, #12]
 800f53e:	e7e3      	b.n	800f508 <__smakebuf_r+0xc>
 800f540:	89a3      	ldrh	r3, [r4, #12]
 800f542:	6020      	str	r0, [r4, #0]
 800f544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f548:	81a3      	strh	r3, [r4, #12]
 800f54a:	9b00      	ldr	r3, [sp, #0]
 800f54c:	6163      	str	r3, [r4, #20]
 800f54e:	9b01      	ldr	r3, [sp, #4]
 800f550:	6120      	str	r0, [r4, #16]
 800f552:	b15b      	cbz	r3, 800f56c <__smakebuf_r+0x70>
 800f554:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f558:	4630      	mov	r0, r6
 800f55a:	f000 f81d 	bl	800f598 <_isatty_r>
 800f55e:	b128      	cbz	r0, 800f56c <__smakebuf_r+0x70>
 800f560:	89a3      	ldrh	r3, [r4, #12]
 800f562:	f023 0303 	bic.w	r3, r3, #3
 800f566:	f043 0301 	orr.w	r3, r3, #1
 800f56a:	81a3      	strh	r3, [r4, #12]
 800f56c:	89a3      	ldrh	r3, [r4, #12]
 800f56e:	431d      	orrs	r5, r3
 800f570:	81a5      	strh	r5, [r4, #12]
 800f572:	e7cf      	b.n	800f514 <__smakebuf_r+0x18>

0800f574 <_fstat_r>:
 800f574:	b538      	push	{r3, r4, r5, lr}
 800f576:	4d07      	ldr	r5, [pc, #28]	; (800f594 <_fstat_r+0x20>)
 800f578:	2300      	movs	r3, #0
 800f57a:	4604      	mov	r4, r0
 800f57c:	4608      	mov	r0, r1
 800f57e:	4611      	mov	r1, r2
 800f580:	602b      	str	r3, [r5, #0]
 800f582:	f7f2 f9a2 	bl	80018ca <_fstat>
 800f586:	1c43      	adds	r3, r0, #1
 800f588:	d102      	bne.n	800f590 <_fstat_r+0x1c>
 800f58a:	682b      	ldr	r3, [r5, #0]
 800f58c:	b103      	cbz	r3, 800f590 <_fstat_r+0x1c>
 800f58e:	6023      	str	r3, [r4, #0]
 800f590:	bd38      	pop	{r3, r4, r5, pc}
 800f592:	bf00      	nop
 800f594:	24005534 	.word	0x24005534

0800f598 <_isatty_r>:
 800f598:	b538      	push	{r3, r4, r5, lr}
 800f59a:	4d06      	ldr	r5, [pc, #24]	; (800f5b4 <_isatty_r+0x1c>)
 800f59c:	2300      	movs	r3, #0
 800f59e:	4604      	mov	r4, r0
 800f5a0:	4608      	mov	r0, r1
 800f5a2:	602b      	str	r3, [r5, #0]
 800f5a4:	f7f2 f9a1 	bl	80018ea <_isatty>
 800f5a8:	1c43      	adds	r3, r0, #1
 800f5aa:	d102      	bne.n	800f5b2 <_isatty_r+0x1a>
 800f5ac:	682b      	ldr	r3, [r5, #0]
 800f5ae:	b103      	cbz	r3, 800f5b2 <_isatty_r+0x1a>
 800f5b0:	6023      	str	r3, [r4, #0]
 800f5b2:	bd38      	pop	{r3, r4, r5, pc}
 800f5b4:	24005534 	.word	0x24005534

0800f5b8 <_init>:
 800f5b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5ba:	bf00      	nop
 800f5bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5be:	bc08      	pop	{r3}
 800f5c0:	469e      	mov	lr, r3
 800f5c2:	4770      	bx	lr

0800f5c4 <_fini>:
 800f5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5c6:	bf00      	nop
 800f5c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5ca:	bc08      	pop	{r3}
 800f5cc:	469e      	mov	lr, r3
 800f5ce:	4770      	bx	lr
