
imu_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067ac  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006a44  08006a44  00016a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a7c  08006a7c  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  08006a7c  08006a7c  00016a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a84  08006a84  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a84  08006a84  00016a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a88  08006a88  00016a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08006a8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  08006a9c  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  08006afc  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000704  240000d0  08006b5c  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  240007d4  08006b5c  000207d4  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY
 15 .debug_info   0001b9fe  00000000  00000000  00020141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002e32  00000000  00000000  0003bb3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001338  00000000  00000000  0003e978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000ef7  00000000  00000000  0003fcb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003aa56  00000000  00000000  00040ba7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00019ac2  00000000  00000000  0007b5fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001806c1  00000000  00000000  000950bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000528c  00000000  00000000  00215780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000063  00000000  00000000  0021aa0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006a2c 	.word	0x08006a2c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08006a2c 	.word	0x08006a2c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d8:	4b3d      	ldr	r3, [pc, #244]	; (80006d0 <SystemInit+0xfc>)
 80005da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005de:	4a3c      	ldr	r2, [pc, #240]	; (80006d0 <SystemInit+0xfc>)
 80005e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e8:	4b39      	ldr	r3, [pc, #228]	; (80006d0 <SystemInit+0xfc>)
 80005ea:	691b      	ldr	r3, [r3, #16]
 80005ec:	4a38      	ldr	r2, [pc, #224]	; (80006d0 <SystemInit+0xfc>)
 80005ee:	f043 0310 	orr.w	r3, r3, #16
 80005f2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f4:	4b37      	ldr	r3, [pc, #220]	; (80006d4 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f003 030f 	and.w	r3, r3, #15
 80005fc:	2b06      	cmp	r3, #6
 80005fe:	d807      	bhi.n	8000610 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000600:	4b34      	ldr	r3, [pc, #208]	; (80006d4 <SystemInit+0x100>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f023 030f 	bic.w	r3, r3, #15
 8000608:	4a32      	ldr	r2, [pc, #200]	; (80006d4 <SystemInit+0x100>)
 800060a:	f043 0307 	orr.w	r3, r3, #7
 800060e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000610:	4b31      	ldr	r3, [pc, #196]	; (80006d8 <SystemInit+0x104>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a30      	ldr	r2, [pc, #192]	; (80006d8 <SystemInit+0x104>)
 8000616:	f043 0301 	orr.w	r3, r3, #1
 800061a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800061c:	4b2e      	ldr	r3, [pc, #184]	; (80006d8 <SystemInit+0x104>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000622:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <SystemInit+0x104>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	492c      	ldr	r1, [pc, #176]	; (80006d8 <SystemInit+0x104>)
 8000628:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <SystemInit+0x108>)
 800062a:	4013      	ands	r3, r2
 800062c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062e:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f003 0308 	and.w	r3, r3, #8
 8000636:	2b00      	cmp	r3, #0
 8000638:	d007      	beq.n	800064a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800063a:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <SystemInit+0x100>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f023 030f 	bic.w	r3, r3, #15
 8000642:	4a24      	ldr	r2, [pc, #144]	; (80006d4 <SystemInit+0x100>)
 8000644:	f043 0307 	orr.w	r3, r3, #7
 8000648:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800064a:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000650:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <SystemInit+0x104>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000656:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <SystemInit+0x104>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <SystemInit+0x104>)
 800065e:	4a20      	ldr	r2, [pc, #128]	; (80006e0 <SystemInit+0x10c>)
 8000660:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000662:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <SystemInit+0x104>)
 8000664:	4a1f      	ldr	r2, [pc, #124]	; (80006e4 <SystemInit+0x110>)
 8000666:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <SystemInit+0x104>)
 800066a:	4a1f      	ldr	r2, [pc, #124]	; (80006e8 <SystemInit+0x114>)
 800066c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <SystemInit+0x104>)
 8000676:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <SystemInit+0x114>)
 8000678:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <SystemInit+0x104>)
 8000682:	4a19      	ldr	r2, [pc, #100]	; (80006e8 <SystemInit+0x114>)
 8000684:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <SystemInit+0x104>)
 8000688:	2200      	movs	r2, #0
 800068a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <SystemInit+0x104>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a11      	ldr	r2, [pc, #68]	; (80006d8 <SystemInit+0x104>)
 8000692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000696:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <SystemInit+0x104>)
 800069a:	2200      	movs	r2, #0
 800069c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <SystemInit+0x118>)
 80006a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <SystemInit+0x118>)
 80006a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a8:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <SystemInit+0x11c>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <SystemInit+0x120>)
 80006b0:	4013      	ands	r3, r2
 80006b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b6:	d202      	bcs.n	80006be <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <SystemInit+0x124>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <SystemInit+0x128>)
 80006c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c4:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00
 80006d4:	52002000 	.word	0x52002000
 80006d8:	58024400 	.word	0x58024400
 80006dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e0:	02020200 	.word	0x02020200
 80006e4:	01ff0000 	.word	0x01ff0000
 80006e8:	01010280 	.word	0x01010280
 80006ec:	580000c0 	.word	0x580000c0
 80006f0:	5c001000 	.word	0x5c001000
 80006f4:	ffff0000 	.word	0xffff0000
 80006f8:	51008108 	.word	0x51008108
 80006fc:	52004000 	.word	0x52004000

08000700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000706:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800070a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800070c:	bf00      	nop
 800070e:	4b24      	ldr	r3, [pc, #144]	; (80007a0 <main+0xa0>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000716:	2b00      	cmp	r3, #0
 8000718:	d004      	beq.n	8000724 <main+0x24>
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	1e5a      	subs	r2, r3, #1
 800071e:	607a      	str	r2, [r7, #4]
 8000720:	2b00      	cmp	r3, #0
 8000722:	dcf4      	bgt.n	800070e <main+0xe>
  if ( timeout < 0 )
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2b00      	cmp	r3, #0
 8000728:	da01      	bge.n	800072e <main+0x2e>
  {
  Error_Handler();
 800072a:	f000 fa29 	bl	8000b80 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800072e:	f000 fcc9 	bl	80010c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000732:	f000 f837 	bl	80007a4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000736:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <main+0xa0>)
 8000738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800073c:	4a18      	ldr	r2, [pc, #96]	; (80007a0 <main+0xa0>)
 800073e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000742:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000746:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <main+0xa0>)
 8000748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000754:	2000      	movs	r0, #0
 8000756:	f001 fc43 	bl	8001fe0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800075a:	2100      	movs	r1, #0
 800075c:	2000      	movs	r0, #0
 800075e:	f001 fc59 	bl	8002014 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000762:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000766:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000768:	bf00      	nop
 800076a:	4b0d      	ldr	r3, [pc, #52]	; (80007a0 <main+0xa0>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000772:	2b00      	cmp	r3, #0
 8000774:	d104      	bne.n	8000780 <main+0x80>
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	1e5a      	subs	r2, r3, #1
 800077a:	607a      	str	r2, [r7, #4]
 800077c:	2b00      	cmp	r3, #0
 800077e:	dcf4      	bgt.n	800076a <main+0x6a>
if ( timeout < 0 )
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2b00      	cmp	r3, #0
 8000784:	da01      	bge.n	800078a <main+0x8a>
{
Error_Handler();
 8000786:	f000 f9fb 	bl	8000b80 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078a:	f000 f993 	bl	8000ab4 <MX_GPIO_Init>
  MX_ETH_Init();
 800078e:	f000 f887 	bl	80008a0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000792:	f000 f911 	bl	80009b8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000796:	f000 f95b 	bl	8000a50 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 800079a:	f000 f8cd 	bl	8000938 <MX_I2C2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800079e:	e7fe      	b.n	800079e <main+0x9e>
 80007a0:	58024400 	.word	0x58024400

080007a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b09c      	sub	sp, #112	; 0x70
 80007a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ae:	224c      	movs	r2, #76	; 0x4c
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f006 f90e 	bl	80069d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	2220      	movs	r2, #32
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f006 f908 	bl	80069d4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007c4:	2004      	movs	r0, #4
 80007c6:	f001 fea9 	bl	800251c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007ca:	2300      	movs	r3, #0
 80007cc:	603b      	str	r3, [r7, #0]
 80007ce:	4b32      	ldr	r3, [pc, #200]	; (8000898 <SystemClock_Config+0xf4>)
 80007d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007d2:	4a31      	ldr	r2, [pc, #196]	; (8000898 <SystemClock_Config+0xf4>)
 80007d4:	f023 0301 	bic.w	r3, r3, #1
 80007d8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007da:	4b2f      	ldr	r3, [pc, #188]	; (8000898 <SystemClock_Config+0xf4>)
 80007dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	603b      	str	r3, [r7, #0]
 80007e4:	4b2d      	ldr	r3, [pc, #180]	; (800089c <SystemClock_Config+0xf8>)
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007ec:	4a2b      	ldr	r2, [pc, #172]	; (800089c <SystemClock_Config+0xf8>)
 80007ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f2:	6193      	str	r3, [r2, #24]
 80007f4:	4b29      	ldr	r3, [pc, #164]	; (800089c <SystemClock_Config+0xf8>)
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007fc:	603b      	str	r3, [r7, #0]
 80007fe:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000800:	bf00      	nop
 8000802:	4b26      	ldr	r3, [pc, #152]	; (800089c <SystemClock_Config+0xf8>)
 8000804:	699b      	ldr	r3, [r3, #24]
 8000806:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800080a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800080e:	d1f8      	bne.n	8000802 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000810:	2301      	movs	r3, #1
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000814:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000818:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081a:	2302      	movs	r3, #2
 800081c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800081e:	2302      	movs	r3, #2
 8000820:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000822:	2301      	movs	r3, #1
 8000824:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000826:	2312      	movs	r3, #18
 8000828:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800082a:	2302      	movs	r3, #2
 800082c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800082e:	2302      	movs	r3, #2
 8000830:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000832:	2302      	movs	r3, #2
 8000834:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000836:	230c      	movs	r3, #12
 8000838:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800083a:	2302      	movs	r3, #2
 800083c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 800083e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000842:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000848:	4618      	mov	r0, r3
 800084a:	f001 fed1 	bl	80025f0 <HAL_RCC_OscConfig>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000854:	f000 f994 	bl	8000b80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000858:	233f      	movs	r3, #63	; 0x3f
 800085a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800085c:	2303      	movs	r3, #3
 800085e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000860:	2300      	movs	r3, #0
 8000862:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000868:	2340      	movs	r3, #64	; 0x40
 800086a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800086c:	2340      	movs	r3, #64	; 0x40
 800086e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000870:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000874:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000876:	2340      	movs	r3, #64	; 0x40
 8000878:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	2101      	movs	r1, #1
 800087e:	4618      	mov	r0, r3
 8000880:	f002 fb10 	bl	8002ea4 <HAL_RCC_ClockConfig>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <SystemClock_Config+0xea>
  {
    Error_Handler();
 800088a:	f000 f979 	bl	8000b80 <Error_Handler>
  }
}
 800088e:	bf00      	nop
 8000890:	3770      	adds	r7, #112	; 0x70
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	58000400 	.word	0x58000400
 800089c:	58024800 	.word	0x58024800

080008a0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008a4:	4b1e      	ldr	r3, [pc, #120]	; (8000920 <MX_ETH_Init+0x80>)
 80008a6:	4a1f      	ldr	r2, [pc, #124]	; (8000924 <MX_ETH_Init+0x84>)
 80008a8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008aa:	4b1f      	ldr	r3, [pc, #124]	; (8000928 <MX_ETH_Init+0x88>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008b0:	4b1d      	ldr	r3, [pc, #116]	; (8000928 <MX_ETH_Init+0x88>)
 80008b2:	2280      	movs	r2, #128	; 0x80
 80008b4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008b6:	4b1c      	ldr	r3, [pc, #112]	; (8000928 <MX_ETH_Init+0x88>)
 80008b8:	22e1      	movs	r2, #225	; 0xe1
 80008ba:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008bc:	4b1a      	ldr	r3, [pc, #104]	; (8000928 <MX_ETH_Init+0x88>)
 80008be:	2200      	movs	r2, #0
 80008c0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008c2:	4b19      	ldr	r3, [pc, #100]	; (8000928 <MX_ETH_Init+0x88>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008c8:	4b17      	ldr	r3, [pc, #92]	; (8000928 <MX_ETH_Init+0x88>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008ce:	4b14      	ldr	r3, [pc, #80]	; (8000920 <MX_ETH_Init+0x80>)
 80008d0:	4a15      	ldr	r2, [pc, #84]	; (8000928 <MX_ETH_Init+0x88>)
 80008d2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008d4:	4b12      	ldr	r3, [pc, #72]	; (8000920 <MX_ETH_Init+0x80>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_ETH_Init+0x80>)
 80008dc:	4a13      	ldr	r2, [pc, #76]	; (800092c <MX_ETH_Init+0x8c>)
 80008de:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <MX_ETH_Init+0x80>)
 80008e2:	4a13      	ldr	r2, [pc, #76]	; (8000930 <MX_ETH_Init+0x90>)
 80008e4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <MX_ETH_Init+0x80>)
 80008e8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80008ec:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008ee:	480c      	ldr	r0, [pc, #48]	; (8000920 <MX_ETH_Init+0x80>)
 80008f0:	f000 fda2 	bl	8001438 <HAL_ETH_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80008fa:	f000 f941 	bl	8000b80 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80008fe:	2238      	movs	r2, #56	; 0x38
 8000900:	2100      	movs	r1, #0
 8000902:	480c      	ldr	r0, [pc, #48]	; (8000934 <MX_ETH_Init+0x94>)
 8000904:	f006 f866 	bl	80069d4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000908:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <MX_ETH_Init+0x94>)
 800090a:	2221      	movs	r2, #33	; 0x21
 800090c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <MX_ETH_Init+0x94>)
 8000910:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000914:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000916:	4b07      	ldr	r3, [pc, #28]	; (8000934 <MX_ETH_Init+0x94>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	24000124 	.word	0x24000124
 8000924:	40028000 	.word	0x40028000
 8000928:	240007c8 	.word	0x240007c8
 800092c:	24000070 	.word	0x24000070
 8000930:	24000010 	.word	0x24000010
 8000934:	240000ec 	.word	0x240000ec

08000938 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800093c:	4b1b      	ldr	r3, [pc, #108]	; (80009ac <MX_I2C2_Init+0x74>)
 800093e:	4a1c      	ldr	r2, [pc, #112]	; (80009b0 <MX_I2C2_Init+0x78>)
 8000940:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00909FCE;
 8000942:	4b1a      	ldr	r3, [pc, #104]	; (80009ac <MX_I2C2_Init+0x74>)
 8000944:	4a1b      	ldr	r2, [pc, #108]	; (80009b4 <MX_I2C2_Init+0x7c>)
 8000946:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000948:	4b18      	ldr	r3, [pc, #96]	; (80009ac <MX_I2C2_Init+0x74>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800094e:	4b17      	ldr	r3, [pc, #92]	; (80009ac <MX_I2C2_Init+0x74>)
 8000950:	2201      	movs	r2, #1
 8000952:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000954:	4b15      	ldr	r3, [pc, #84]	; (80009ac <MX_I2C2_Init+0x74>)
 8000956:	2200      	movs	r2, #0
 8000958:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800095a:	4b14      	ldr	r3, [pc, #80]	; (80009ac <MX_I2C2_Init+0x74>)
 800095c:	2200      	movs	r2, #0
 800095e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000960:	4b12      	ldr	r3, [pc, #72]	; (80009ac <MX_I2C2_Init+0x74>)
 8000962:	2200      	movs	r2, #0
 8000964:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000966:	4b11      	ldr	r3, [pc, #68]	; (80009ac <MX_I2C2_Init+0x74>)
 8000968:	2200      	movs	r2, #0
 800096a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800096c:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <MX_I2C2_Init+0x74>)
 800096e:	2200      	movs	r2, #0
 8000970:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000972:	480e      	ldr	r0, [pc, #56]	; (80009ac <MX_I2C2_Init+0x74>)
 8000974:	f001 fb62 	bl	800203c <HAL_I2C_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800097e:	f000 f8ff 	bl	8000b80 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000982:	2100      	movs	r1, #0
 8000984:	4809      	ldr	r0, [pc, #36]	; (80009ac <MX_I2C2_Init+0x74>)
 8000986:	f001 fbe9 	bl	800215c <HAL_I2CEx_ConfigAnalogFilter>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000990:	f000 f8f6 	bl	8000b80 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000994:	2100      	movs	r1, #0
 8000996:	4805      	ldr	r0, [pc, #20]	; (80009ac <MX_I2C2_Init+0x74>)
 8000998:	f001 fc2b 	bl	80021f2 <HAL_I2CEx_ConfigDigitalFilter>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80009a2:	f000 f8ed 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	240001d4 	.word	0x240001d4
 80009b0:	40005800 	.word	0x40005800
 80009b4:	00909fce 	.word	0x00909fce

080009b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009bc:	4b22      	ldr	r3, [pc, #136]	; (8000a48 <MX_USART3_UART_Init+0x90>)
 80009be:	4a23      	ldr	r2, [pc, #140]	; (8000a4c <MX_USART3_UART_Init+0x94>)
 80009c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009c2:	4b21      	ldr	r3, [pc, #132]	; (8000a48 <MX_USART3_UART_Init+0x90>)
 80009c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009ca:	4b1f      	ldr	r3, [pc, #124]	; (8000a48 <MX_USART3_UART_Init+0x90>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009d0:	4b1d      	ldr	r3, [pc, #116]	; (8000a48 <MX_USART3_UART_Init+0x90>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009d6:	4b1c      	ldr	r3, [pc, #112]	; (8000a48 <MX_USART3_UART_Init+0x90>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009dc:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <MX_USART3_UART_Init+0x90>)
 80009de:	220c      	movs	r2, #12
 80009e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e2:	4b19      	ldr	r3, [pc, #100]	; (8000a48 <MX_USART3_UART_Init+0x90>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e8:	4b17      	ldr	r3, [pc, #92]	; (8000a48 <MX_USART3_UART_Init+0x90>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ee:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <MX_USART3_UART_Init+0x90>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009f4:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <MX_USART3_UART_Init+0x90>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009fa:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <MX_USART3_UART_Init+0x90>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a00:	4811      	ldr	r0, [pc, #68]	; (8000a48 <MX_USART3_UART_Init+0x90>)
 8000a02:	f004 fc07 	bl	8005214 <HAL_UART_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a0c:	f000 f8b8 	bl	8000b80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a10:	2100      	movs	r1, #0
 8000a12:	480d      	ldr	r0, [pc, #52]	; (8000a48 <MX_USART3_UART_Init+0x90>)
 8000a14:	f005 fc09 	bl	800622a <HAL_UARTEx_SetTxFifoThreshold>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a1e:	f000 f8af 	bl	8000b80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a22:	2100      	movs	r1, #0
 8000a24:	4808      	ldr	r0, [pc, #32]	; (8000a48 <MX_USART3_UART_Init+0x90>)
 8000a26:	f005 fc3e 	bl	80062a6 <HAL_UARTEx_SetRxFifoThreshold>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a30:	f000 f8a6 	bl	8000b80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a34:	4804      	ldr	r0, [pc, #16]	; (8000a48 <MX_USART3_UART_Init+0x90>)
 8000a36:	f005 fbbf 	bl	80061b8 <HAL_UARTEx_DisableFifoMode>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a40:	f000 f89e 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	24000228 	.word	0x24000228
 8000a4c:	40004800 	.word	0x40004800

08000a50 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a54:	4b15      	ldr	r3, [pc, #84]	; (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a56:	4a16      	ldr	r2, [pc, #88]	; (8000ab0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000a58:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000a5a:	4b14      	ldr	r3, [pc, #80]	; (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a5c:	2209      	movs	r2, #9
 8000a5e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a60:	4b12      	ldr	r3, [pc, #72]	; (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a62:	2202      	movs	r2, #2
 8000a64:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a66:	4b11      	ldr	r3, [pc, #68]	; (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a6e:	2202      	movs	r2, #2
 8000a70:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000a72:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a78:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000a84:	4b09      	ldr	r3, [pc, #36]	; (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a86:	2201      	movs	r2, #1
 8000a88:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a8a:	4b08      	ldr	r3, [pc, #32]	; (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a96:	4805      	ldr	r0, [pc, #20]	; (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a98:	f001 fbf7 	bl	800228a <HAL_PCD_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000aa2:	f000 f86d 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	240002bc 	.word	0x240002bc
 8000ab0:	40080000 	.word	0x40080000

08000ab4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b087      	sub	sp, #28
 8000ab8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b30      	ldr	r3, [pc, #192]	; (8000b7c <MX_GPIO_Init+0xc8>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	4a2e      	ldr	r2, [pc, #184]	; (8000b7c <MX_GPIO_Init+0xc8>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aca:	4b2c      	ldr	r3, [pc, #176]	; (8000b7c <MX_GPIO_Init+0xc8>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	617b      	str	r3, [r7, #20]
 8000ad6:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ad8:	4b28      	ldr	r3, [pc, #160]	; (8000b7c <MX_GPIO_Init+0xc8>)
 8000ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ade:	4a27      	ldr	r2, [pc, #156]	; (8000b7c <MX_GPIO_Init+0xc8>)
 8000ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ae4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ae8:	4b24      	ldr	r3, [pc, #144]	; (8000b7c <MX_GPIO_Init+0xc8>)
 8000aea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af6:	4b21      	ldr	r3, [pc, #132]	; (8000b7c <MX_GPIO_Init+0xc8>)
 8000af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afc:	4a1f      	ldr	r2, [pc, #124]	; (8000b7c <MX_GPIO_Init+0xc8>)
 8000afe:	f043 0301 	orr.w	r3, r3, #1
 8000b02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b06:	4b1d      	ldr	r3, [pc, #116]	; (8000b7c <MX_GPIO_Init+0xc8>)
 8000b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b0c:	f003 0301 	and.w	r3, r3, #1
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b14:	4b19      	ldr	r3, [pc, #100]	; (8000b7c <MX_GPIO_Init+0xc8>)
 8000b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b1a:	4a18      	ldr	r2, [pc, #96]	; (8000b7c <MX_GPIO_Init+0xc8>)
 8000b1c:	f043 0302 	orr.w	r3, r3, #2
 8000b20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b24:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <MX_GPIO_Init+0xc8>)
 8000b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2a:	f003 0302 	and.w	r3, r3, #2
 8000b2e:	60bb      	str	r3, [r7, #8]
 8000b30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b32:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <MX_GPIO_Init+0xc8>)
 8000b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b38:	4a10      	ldr	r2, [pc, #64]	; (8000b7c <MX_GPIO_Init+0xc8>)
 8000b3a:	f043 0308 	orr.w	r3, r3, #8
 8000b3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <MX_GPIO_Init+0xc8>)
 8000b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b48:	f003 0308 	and.w	r3, r3, #8
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b50:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <MX_GPIO_Init+0xc8>)
 8000b52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b56:	4a09      	ldr	r2, [pc, #36]	; (8000b7c <MX_GPIO_Init+0xc8>)
 8000b58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <MX_GPIO_Init+0xc8>)
 8000b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b6a:	603b      	str	r3, [r7, #0]
 8000b6c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b6e:	bf00      	nop
 8000b70:	371c      	adds	r7, #28
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	58024400 	.word	0x58024400

08000b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b84:	b672      	cpsid	i
}
 8000b86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <Error_Handler+0x8>
	...

08000b8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b92:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <HAL_MspInit+0x30>)
 8000b94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b98:	4a08      	ldr	r2, [pc, #32]	; (8000bbc <HAL_MspInit+0x30>)
 8000b9a:	f043 0302 	orr.w	r3, r3, #2
 8000b9e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ba2:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <HAL_MspInit+0x30>)
 8000ba4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ba8:	f003 0302 	and.w	r3, r3, #2
 8000bac:	607b      	str	r3, [r7, #4]
 8000bae:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	58024400 	.word	0x58024400

08000bc0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08e      	sub	sp, #56	; 0x38
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a59      	ldr	r2, [pc, #356]	; (8000d44 <HAL_ETH_MspInit+0x184>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	f040 80ab 	bne.w	8000d3a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000be4:	4b58      	ldr	r3, [pc, #352]	; (8000d48 <HAL_ETH_MspInit+0x188>)
 8000be6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bea:	4a57      	ldr	r2, [pc, #348]	; (8000d48 <HAL_ETH_MspInit+0x188>)
 8000bec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bf0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bf4:	4b54      	ldr	r3, [pc, #336]	; (8000d48 <HAL_ETH_MspInit+0x188>)
 8000bf6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bfe:	623b      	str	r3, [r7, #32]
 8000c00:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000c02:	4b51      	ldr	r3, [pc, #324]	; (8000d48 <HAL_ETH_MspInit+0x188>)
 8000c04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c08:	4a4f      	ldr	r2, [pc, #316]	; (8000d48 <HAL_ETH_MspInit+0x188>)
 8000c0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c0e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c12:	4b4d      	ldr	r3, [pc, #308]	; (8000d48 <HAL_ETH_MspInit+0x188>)
 8000c14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c1c:	61fb      	str	r3, [r7, #28]
 8000c1e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000c20:	4b49      	ldr	r3, [pc, #292]	; (8000d48 <HAL_ETH_MspInit+0x188>)
 8000c22:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c26:	4a48      	ldr	r2, [pc, #288]	; (8000d48 <HAL_ETH_MspInit+0x188>)
 8000c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c2c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c30:	4b45      	ldr	r3, [pc, #276]	; (8000d48 <HAL_ETH_MspInit+0x188>)
 8000c32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c3a:	61bb      	str	r3, [r7, #24]
 8000c3c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c3e:	4b42      	ldr	r3, [pc, #264]	; (8000d48 <HAL_ETH_MspInit+0x188>)
 8000c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c44:	4a40      	ldr	r2, [pc, #256]	; (8000d48 <HAL_ETH_MspInit+0x188>)
 8000c46:	f043 0304 	orr.w	r3, r3, #4
 8000c4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c4e:	4b3e      	ldr	r3, [pc, #248]	; (8000d48 <HAL_ETH_MspInit+0x188>)
 8000c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c54:	f003 0304 	and.w	r3, r3, #4
 8000c58:	617b      	str	r3, [r7, #20]
 8000c5a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5c:	4b3a      	ldr	r3, [pc, #232]	; (8000d48 <HAL_ETH_MspInit+0x188>)
 8000c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c62:	4a39      	ldr	r2, [pc, #228]	; (8000d48 <HAL_ETH_MspInit+0x188>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c6c:	4b36      	ldr	r3, [pc, #216]	; (8000d48 <HAL_ETH_MspInit+0x188>)
 8000c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	613b      	str	r3, [r7, #16]
 8000c78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7a:	4b33      	ldr	r3, [pc, #204]	; (8000d48 <HAL_ETH_MspInit+0x188>)
 8000c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c80:	4a31      	ldr	r2, [pc, #196]	; (8000d48 <HAL_ETH_MspInit+0x188>)
 8000c82:	f043 0302 	orr.w	r3, r3, #2
 8000c86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c8a:	4b2f      	ldr	r3, [pc, #188]	; (8000d48 <HAL_ETH_MspInit+0x188>)
 8000c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c90:	f003 0302 	and.w	r3, r3, #2
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c98:	4b2b      	ldr	r3, [pc, #172]	; (8000d48 <HAL_ETH_MspInit+0x188>)
 8000c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9e:	4a2a      	ldr	r2, [pc, #168]	; (8000d48 <HAL_ETH_MspInit+0x188>)
 8000ca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ca4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ca8:	4b27      	ldr	r3, [pc, #156]	; (8000d48 <HAL_ETH_MspInit+0x188>)
 8000caa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cb2:	60bb      	str	r3, [r7, #8]
 8000cb4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000cb6:	2332      	movs	r3, #50	; 0x32
 8000cb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cc6:	230b      	movs	r3, #11
 8000cc8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cce:	4619      	mov	r1, r3
 8000cd0:	481e      	ldr	r0, [pc, #120]	; (8000d4c <HAL_ETH_MspInit+0x18c>)
 8000cd2:	f000 ffd5 	bl	8001c80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000cd6:	2386      	movs	r3, #134	; 0x86
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ce6:	230b      	movs	r3, #11
 8000ce8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4817      	ldr	r0, [pc, #92]	; (8000d50 <HAL_ETH_MspInit+0x190>)
 8000cf2:	f000 ffc5 	bl	8001c80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000cf6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d04:	2300      	movs	r3, #0
 8000d06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d08:	230b      	movs	r3, #11
 8000d0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d10:	4619      	mov	r1, r3
 8000d12:	4810      	ldr	r0, [pc, #64]	; (8000d54 <HAL_ETH_MspInit+0x194>)
 8000d14:	f000 ffb4 	bl	8001c80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000d18:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2300      	movs	r3, #0
 8000d28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d2a:	230b      	movs	r3, #11
 8000d2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d32:	4619      	mov	r1, r3
 8000d34:	4808      	ldr	r0, [pc, #32]	; (8000d58 <HAL_ETH_MspInit+0x198>)
 8000d36:	f000 ffa3 	bl	8001c80 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000d3a:	bf00      	nop
 8000d3c:	3738      	adds	r7, #56	; 0x38
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40028000 	.word	0x40028000
 8000d48:	58024400 	.word	0x58024400
 8000d4c:	58020800 	.word	0x58020800
 8000d50:	58020000 	.word	0x58020000
 8000d54:	58020400 	.word	0x58020400
 8000d58:	58021800 	.word	0x58021800

08000d5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b0ba      	sub	sp, #232	; 0xe8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d74:	f107 0310 	add.w	r3, r7, #16
 8000d78:	22c0      	movs	r2, #192	; 0xc0
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f005 fe29 	bl	80069d4 <memset>
  if(hi2c->Instance==I2C2)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a27      	ldr	r2, [pc, #156]	; (8000e24 <HAL_I2C_MspInit+0xc8>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d146      	bne.n	8000e1a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000d8c:	f04f 0208 	mov.w	r2, #8
 8000d90:	f04f 0300 	mov.w	r3, #0
 8000d94:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d9e:	f107 0310 	add.w	r3, r7, #16
 8000da2:	4618      	mov	r0, r3
 8000da4:	f002 fc0a 	bl	80035bc <HAL_RCCEx_PeriphCLKConfig>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000dae:	f7ff fee7 	bl	8000b80 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db2:	4b1d      	ldr	r3, [pc, #116]	; (8000e28 <HAL_I2C_MspInit+0xcc>)
 8000db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db8:	4a1b      	ldr	r2, [pc, #108]	; (8000e28 <HAL_I2C_MspInit+0xcc>)
 8000dba:	f043 0302 	orr.w	r3, r3, #2
 8000dbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dc2:	4b19      	ldr	r3, [pc, #100]	; (8000e28 <HAL_I2C_MspInit+0xcc>)
 8000dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc8:	f003 0302 	and.w	r3, r3, #2
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000dd0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000dd4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dd8:	2312      	movs	r3, #18
 8000dda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de4:	2300      	movs	r3, #0
 8000de6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000dea:	2304      	movs	r3, #4
 8000dec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000df4:	4619      	mov	r1, r3
 8000df6:	480d      	ldr	r0, [pc, #52]	; (8000e2c <HAL_I2C_MspInit+0xd0>)
 8000df8:	f000 ff42 	bl	8001c80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000dfc:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <HAL_I2C_MspInit+0xcc>)
 8000dfe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e02:	4a09      	ldr	r2, [pc, #36]	; (8000e28 <HAL_I2C_MspInit+0xcc>)
 8000e04:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e08:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <HAL_I2C_MspInit+0xcc>)
 8000e0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e16:	60bb      	str	r3, [r7, #8]
 8000e18:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000e1a:	bf00      	nop
 8000e1c:	37e8      	adds	r7, #232	; 0xe8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40005800 	.word	0x40005800
 8000e28:	58024400 	.word	0x58024400
 8000e2c:	58020400 	.word	0x58020400

08000e30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b0ba      	sub	sp, #232	; 0xe8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e48:	f107 0310 	add.w	r3, r7, #16
 8000e4c:	22c0      	movs	r2, #192	; 0xc0
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4618      	mov	r0, r3
 8000e52:	f005 fdbf 	bl	80069d4 <memset>
  if(huart->Instance==USART3)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a27      	ldr	r2, [pc, #156]	; (8000ef8 <HAL_UART_MspInit+0xc8>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d146      	bne.n	8000eee <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e60:	f04f 0202 	mov.w	r2, #2
 8000e64:	f04f 0300 	mov.w	r3, #0
 8000e68:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e72:	f107 0310 	add.w	r3, r7, #16
 8000e76:	4618      	mov	r0, r3
 8000e78:	f002 fba0 	bl	80035bc <HAL_RCCEx_PeriphCLKConfig>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000e82:	f7ff fe7d 	bl	8000b80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e86:	4b1d      	ldr	r3, [pc, #116]	; (8000efc <HAL_UART_MspInit+0xcc>)
 8000e88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e8c:	4a1b      	ldr	r2, [pc, #108]	; (8000efc <HAL_UART_MspInit+0xcc>)
 8000e8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e92:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e96:	4b19      	ldr	r3, [pc, #100]	; (8000efc <HAL_UART_MspInit+0xcc>)
 8000e98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ea4:	4b15      	ldr	r3, [pc, #84]	; (8000efc <HAL_UART_MspInit+0xcc>)
 8000ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eaa:	4a14      	ldr	r2, [pc, #80]	; (8000efc <HAL_UART_MspInit+0xcc>)
 8000eac:	f043 0308 	orr.w	r3, r3, #8
 8000eb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eb4:	4b11      	ldr	r3, [pc, #68]	; (8000efc <HAL_UART_MspInit+0xcc>)
 8000eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eba:	f003 0308 	and.w	r3, r3, #8
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000ec2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ec6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000edc:	2307      	movs	r3, #7
 8000ede:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ee2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4805      	ldr	r0, [pc, #20]	; (8000f00 <HAL_UART_MspInit+0xd0>)
 8000eea:	f000 fec9 	bl	8001c80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000eee:	bf00      	nop
 8000ef0:	37e8      	adds	r7, #232	; 0xe8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40004800 	.word	0x40004800
 8000efc:	58024400 	.word	0x58024400
 8000f00:	58020c00 	.word	0x58020c00

08000f04 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b0ba      	sub	sp, #232	; 0xe8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f1c:	f107 0310 	add.w	r3, r7, #16
 8000f20:	22c0      	movs	r2, #192	; 0xc0
 8000f22:	2100      	movs	r1, #0
 8000f24:	4618      	mov	r0, r3
 8000f26:	f005 fd55 	bl	80069d4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a38      	ldr	r2, [pc, #224]	; (8001010 <HAL_PCD_MspInit+0x10c>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d169      	bne.n	8001008 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f34:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000f38:	f04f 0300 	mov.w	r3, #0
 8000f3c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000f40:	2301      	movs	r3, #1
 8000f42:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8000f44:	2312      	movs	r3, #18
 8000f46:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000f50:	2302      	movs	r3, #2
 8000f52:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000f54:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f58:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8000f5a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f5e:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000f60:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f68:	f107 0310 	add.w	r3, r7, #16
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f002 fb25 	bl	80035bc <HAL_RCCEx_PeriphCLKConfig>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 8000f78:	f7ff fe02 	bl	8000b80 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000f7c:	f001 fb28 	bl	80025d0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f80:	4b24      	ldr	r3, [pc, #144]	; (8001014 <HAL_PCD_MspInit+0x110>)
 8000f82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f86:	4a23      	ldr	r2, [pc, #140]	; (8001014 <HAL_PCD_MspInit+0x110>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f90:	4b20      	ldr	r3, [pc, #128]	; (8001014 <HAL_PCD_MspInit+0x110>)
 8000f92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000f9e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000fa2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000fb8:	230a      	movs	r3, #10
 8000fba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbe:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4814      	ldr	r0, [pc, #80]	; (8001018 <HAL_PCD_MspInit+0x114>)
 8000fc6:	f000 fe5b 	bl	8001c80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fde:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	480c      	ldr	r0, [pc, #48]	; (8001018 <HAL_PCD_MspInit+0x114>)
 8000fe6:	f000 fe4b 	bl	8001c80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000fea:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <HAL_PCD_MspInit+0x110>)
 8000fec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ff0:	4a08      	ldr	r2, [pc, #32]	; (8001014 <HAL_PCD_MspInit+0x110>)
 8000ff2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000ff6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ffa:	4b06      	ldr	r3, [pc, #24]	; (8001014 <HAL_PCD_MspInit+0x110>)
 8000ffc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001000:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001008:	bf00      	nop
 800100a:	37e8      	adds	r7, #232	; 0xe8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40080000 	.word	0x40080000
 8001014:	58024400 	.word	0x58024400
 8001018:	58020000 	.word	0x58020000

0800101c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001020:	e7fe      	b.n	8001020 <NMI_Handler+0x4>

08001022 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001026:	e7fe      	b.n	8001026 <HardFault_Handler+0x4>

08001028 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800102c:	e7fe      	b.n	800102c <MemManage_Handler+0x4>

0800102e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001032:	e7fe      	b.n	8001032 <BusFault_Handler+0x4>

08001034 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001038:	e7fe      	b.n	8001038 <UsageFault_Handler+0x4>

0800103a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr

08001056 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001068:	f000 f89e 	bl	80011a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}

08001070 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001070:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001074:	f7ff faae 	bl	80005d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001078:	480c      	ldr	r0, [pc, #48]	; (80010ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800107a:	490d      	ldr	r1, [pc, #52]	; (80010b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800107c:	4a0d      	ldr	r2, [pc, #52]	; (80010b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800107e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001080:	e002      	b.n	8001088 <LoopCopyDataInit>

08001082 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001082:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001084:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001086:	3304      	adds	r3, #4

08001088 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001088:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800108a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800108c:	d3f9      	bcc.n	8001082 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800108e:	4a0a      	ldr	r2, [pc, #40]	; (80010b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001090:	4c0a      	ldr	r4, [pc, #40]	; (80010bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001092:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001094:	e001      	b.n	800109a <LoopFillZerobss>

08001096 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001096:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001098:	3204      	adds	r2, #4

0800109a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800109a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800109c:	d3fb      	bcc.n	8001096 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800109e:	f005 fca1 	bl	80069e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010a2:	f7ff fb2d 	bl	8000700 <main>
  bx  lr
 80010a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010a8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80010ac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80010b0:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80010b4:	08006a8c 	.word	0x08006a8c
  ldr r2, =_sbss
 80010b8:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 80010bc:	240007d4 	.word	0x240007d4

080010c0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010c0:	e7fe      	b.n	80010c0 <ADC3_IRQHandler>
	...

080010c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ca:	2003      	movs	r0, #3
 80010cc:	f000 f982 	bl	80013d4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80010d0:	f002 f89e 	bl	8003210 <HAL_RCC_GetSysClockFreq>
 80010d4:	4602      	mov	r2, r0
 80010d6:	4b15      	ldr	r3, [pc, #84]	; (800112c <HAL_Init+0x68>)
 80010d8:	699b      	ldr	r3, [r3, #24]
 80010da:	0a1b      	lsrs	r3, r3, #8
 80010dc:	f003 030f 	and.w	r3, r3, #15
 80010e0:	4913      	ldr	r1, [pc, #76]	; (8001130 <HAL_Init+0x6c>)
 80010e2:	5ccb      	ldrb	r3, [r1, r3]
 80010e4:	f003 031f 	and.w	r3, r3, #31
 80010e8:	fa22 f303 	lsr.w	r3, r2, r3
 80010ec:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80010ee:	4b0f      	ldr	r3, [pc, #60]	; (800112c <HAL_Init+0x68>)
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	f003 030f 	and.w	r3, r3, #15
 80010f6:	4a0e      	ldr	r2, [pc, #56]	; (8001130 <HAL_Init+0x6c>)
 80010f8:	5cd3      	ldrb	r3, [r2, r3]
 80010fa:	f003 031f 	and.w	r3, r3, #31
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	fa22 f303 	lsr.w	r3, r2, r3
 8001104:	4a0b      	ldr	r2, [pc, #44]	; (8001134 <HAL_Init+0x70>)
 8001106:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001108:	4a0b      	ldr	r2, [pc, #44]	; (8001138 <HAL_Init+0x74>)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800110e:	2000      	movs	r0, #0
 8001110:	f000 f814 	bl	800113c <HAL_InitTick>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e002      	b.n	8001124 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800111e:	f7ff fd35 	bl	8000b8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001122:	2300      	movs	r3, #0
}
 8001124:	4618      	mov	r0, r3
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	58024400 	.word	0x58024400
 8001130:	08006a44 	.word	0x08006a44
 8001134:	24000004 	.word	0x24000004
 8001138:	24000000 	.word	0x24000000

0800113c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001144:	4b15      	ldr	r3, [pc, #84]	; (800119c <HAL_InitTick+0x60>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d101      	bne.n	8001150 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	e021      	b.n	8001194 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001150:	4b13      	ldr	r3, [pc, #76]	; (80011a0 <HAL_InitTick+0x64>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <HAL_InitTick+0x60>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	4619      	mov	r1, r3
 800115a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800115e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001162:	fbb2 f3f3 	udiv	r3, r2, r3
 8001166:	4618      	mov	r0, r3
 8001168:	f000 f959 	bl	800141e <HAL_SYSTICK_Config>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e00e      	b.n	8001194 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2b0f      	cmp	r3, #15
 800117a:	d80a      	bhi.n	8001192 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800117c:	2200      	movs	r2, #0
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	f04f 30ff 	mov.w	r0, #4294967295
 8001184:	f000 f931 	bl	80013ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001188:	4a06      	ldr	r2, [pc, #24]	; (80011a4 <HAL_InitTick+0x68>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800118e:	2300      	movs	r3, #0
 8001190:	e000      	b.n	8001194 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
}
 8001194:	4618      	mov	r0, r3
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	2400000c 	.word	0x2400000c
 80011a0:	24000000 	.word	0x24000000
 80011a4:	24000008 	.word	0x24000008

080011a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <HAL_IncTick+0x20>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	461a      	mov	r2, r3
 80011b2:	4b06      	ldr	r3, [pc, #24]	; (80011cc <HAL_IncTick+0x24>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4413      	add	r3, r2
 80011b8:	4a04      	ldr	r2, [pc, #16]	; (80011cc <HAL_IncTick+0x24>)
 80011ba:	6013      	str	r3, [r2, #0]
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	2400000c 	.word	0x2400000c
 80011cc:	240007d0 	.word	0x240007d0

080011d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  return uwTick;
 80011d4:	4b03      	ldr	r3, [pc, #12]	; (80011e4 <HAL_GetTick+0x14>)
 80011d6:	681b      	ldr	r3, [r3, #0]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	240007d0 	.word	0x240007d0

080011e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011f0:	f7ff ffee 	bl	80011d0 <HAL_GetTick>
 80011f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001200:	d005      	beq.n	800120e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001202:	4b0a      	ldr	r3, [pc, #40]	; (800122c <HAL_Delay+0x44>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	461a      	mov	r2, r3
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	4413      	add	r3, r2
 800120c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800120e:	bf00      	nop
 8001210:	f7ff ffde 	bl	80011d0 <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	68fa      	ldr	r2, [r7, #12]
 800121c:	429a      	cmp	r2, r3
 800121e:	d8f7      	bhi.n	8001210 <HAL_Delay+0x28>
  {
  }
}
 8001220:	bf00      	nop
 8001222:	bf00      	nop
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	2400000c 	.word	0x2400000c

08001230 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001234:	4b03      	ldr	r3, [pc, #12]	; (8001244 <HAL_GetREVID+0x14>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	0c1b      	lsrs	r3, r3, #16
}
 800123a:	4618      	mov	r0, r3
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	5c001000 	.word	0x5c001000

08001248 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001250:	4b06      	ldr	r3, [pc, #24]	; (800126c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001258:	4904      	ldr	r1, [pc, #16]	; (800126c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4313      	orrs	r3, r2
 800125e:	604b      	str	r3, [r1, #4]
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	58000400 	.word	0x58000400

08001270 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001280:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <__NVIC_SetPriorityGrouping+0x40>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001286:	68ba      	ldr	r2, [r7, #8]
 8001288:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800128c:	4013      	ands	r3, r2
 800128e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <__NVIC_SetPriorityGrouping+0x44>)
 800129a:	4313      	orrs	r3, r2
 800129c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800129e:	4a04      	ldr	r2, [pc, #16]	; (80012b0 <__NVIC_SetPriorityGrouping+0x40>)
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	60d3      	str	r3, [r2, #12]
}
 80012a4:	bf00      	nop
 80012a6:	3714      	adds	r7, #20
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	e000ed00 	.word	0xe000ed00
 80012b4:	05fa0000 	.word	0x05fa0000

080012b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012bc:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <__NVIC_GetPriorityGrouping+0x18>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	0a1b      	lsrs	r3, r3, #8
 80012c2:	f003 0307 	and.w	r3, r3, #7
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	6039      	str	r1, [r7, #0]
 80012de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	db0a      	blt.n	80012fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	b2da      	uxtb	r2, r3
 80012ec:	490c      	ldr	r1, [pc, #48]	; (8001320 <__NVIC_SetPriority+0x4c>)
 80012ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012f2:	0112      	lsls	r2, r2, #4
 80012f4:	b2d2      	uxtb	r2, r2
 80012f6:	440b      	add	r3, r1
 80012f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012fc:	e00a      	b.n	8001314 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	b2da      	uxtb	r2, r3
 8001302:	4908      	ldr	r1, [pc, #32]	; (8001324 <__NVIC_SetPriority+0x50>)
 8001304:	88fb      	ldrh	r3, [r7, #6]
 8001306:	f003 030f 	and.w	r3, r3, #15
 800130a:	3b04      	subs	r3, #4
 800130c:	0112      	lsls	r2, r2, #4
 800130e:	b2d2      	uxtb	r2, r2
 8001310:	440b      	add	r3, r1
 8001312:	761a      	strb	r2, [r3, #24]
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	e000e100 	.word	0xe000e100
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001328:	b480      	push	{r7}
 800132a:	b089      	sub	sp, #36	; 0x24
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	f1c3 0307 	rsb	r3, r3, #7
 8001342:	2b04      	cmp	r3, #4
 8001344:	bf28      	it	cs
 8001346:	2304      	movcs	r3, #4
 8001348:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	3304      	adds	r3, #4
 800134e:	2b06      	cmp	r3, #6
 8001350:	d902      	bls.n	8001358 <NVIC_EncodePriority+0x30>
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3b03      	subs	r3, #3
 8001356:	e000      	b.n	800135a <NVIC_EncodePriority+0x32>
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800135c:	f04f 32ff 	mov.w	r2, #4294967295
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	43da      	mvns	r2, r3
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	401a      	ands	r2, r3
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001370:	f04f 31ff 	mov.w	r1, #4294967295
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	fa01 f303 	lsl.w	r3, r1, r3
 800137a:	43d9      	mvns	r1, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001380:	4313      	orrs	r3, r2
         );
}
 8001382:	4618      	mov	r0, r3
 8001384:	3724      	adds	r7, #36	; 0x24
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
	...

08001390 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3b01      	subs	r3, #1
 800139c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013a0:	d301      	bcc.n	80013a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013a2:	2301      	movs	r3, #1
 80013a4:	e00f      	b.n	80013c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013a6:	4a0a      	ldr	r2, [pc, #40]	; (80013d0 <SysTick_Config+0x40>)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3b01      	subs	r3, #1
 80013ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ae:	210f      	movs	r1, #15
 80013b0:	f04f 30ff 	mov.w	r0, #4294967295
 80013b4:	f7ff ff8e 	bl	80012d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013b8:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <SysTick_Config+0x40>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013be:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <SysTick_Config+0x40>)
 80013c0:	2207      	movs	r2, #7
 80013c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	e000e010 	.word	0xe000e010

080013d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7ff ff47 	bl	8001270 <__NVIC_SetPriorityGrouping>
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b086      	sub	sp, #24
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	4603      	mov	r3, r0
 80013f2:	60b9      	str	r1, [r7, #8]
 80013f4:	607a      	str	r2, [r7, #4]
 80013f6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013f8:	f7ff ff5e 	bl	80012b8 <__NVIC_GetPriorityGrouping>
 80013fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	68b9      	ldr	r1, [r7, #8]
 8001402:	6978      	ldr	r0, [r7, #20]
 8001404:	f7ff ff90 	bl	8001328 <NVIC_EncodePriority>
 8001408:	4602      	mov	r2, r0
 800140a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800140e:	4611      	mov	r1, r2
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff ff5f 	bl	80012d4 <__NVIC_SetPriority>
}
 8001416:	bf00      	nop
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b082      	sub	sp, #8
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f7ff ffb2 	bl	8001390 <SysTick_Config>
 800142c:	4603      	mov	r3, r0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
	...

08001438 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e0cf      	b.n	80015ea <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001450:	2b00      	cmp	r3, #0
 8001452:	d106      	bne.n	8001462 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2223      	movs	r2, #35	; 0x23
 8001458:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f7ff fbaf 	bl	8000bc0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001462:	4b64      	ldr	r3, [pc, #400]	; (80015f4 <HAL_ETH_Init+0x1bc>)
 8001464:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001468:	4a62      	ldr	r2, [pc, #392]	; (80015f4 <HAL_ETH_Init+0x1bc>)
 800146a:	f043 0302 	orr.w	r3, r3, #2
 800146e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001472:	4b60      	ldr	r3, [pc, #384]	; (80015f4 <HAL_ETH_Init+0x1bc>)
 8001474:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001478:	f003 0302 	and.w	r3, r3, #2
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	7a1b      	ldrb	r3, [r3, #8]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d103      	bne.n	8001490 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001488:	2000      	movs	r0, #0
 800148a:	f7ff fedd 	bl	8001248 <HAL_SYSCFG_ETHInterfaceSelect>
 800148e:	e003      	b.n	8001498 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001490:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001494:	f7ff fed8 	bl	8001248 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001498:	4b57      	ldr	r3, [pc, #348]	; (80015f8 <HAL_ETH_Init+0x1c0>)
 800149a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	6812      	ldr	r2, [r2, #0]
 80014aa:	f043 0301 	orr.w	r3, r3, #1
 80014ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014b2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014b4:	f7ff fe8c 	bl	80011d0 <HAL_GetTick>
 80014b8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80014ba:	e011      	b.n	80014e0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80014bc:	f7ff fe88 	bl	80011d0 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014ca:	d909      	bls.n	80014e0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2204      	movs	r2, #4
 80014d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	22e0      	movs	r2, #224	; 0xe0
 80014d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e084      	b.n	80015ea <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1e4      	bne.n	80014bc <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f000 f886 	bl	8001604 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80014f8:	f002 f804 	bl	8003504 <HAL_RCC_GetHCLKFreq>
 80014fc:	4603      	mov	r3, r0
 80014fe:	4a3f      	ldr	r2, [pc, #252]	; (80015fc <HAL_ETH_Init+0x1c4>)
 8001500:	fba2 2303 	umull	r2, r3, r2, r3
 8001504:	0c9a      	lsrs	r2, r3, #18
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	3a01      	subs	r2, #1
 800150c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f000 fa71 	bl	80019f8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800151e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001522:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	6812      	ldr	r2, [r2, #0]
 800152a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800152e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001532:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	695b      	ldr	r3, [r3, #20]
 800153a:	f003 0303 	and.w	r3, r3, #3
 800153e:	2b00      	cmp	r3, #0
 8001540:	d009      	beq.n	8001556 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2201      	movs	r2, #1
 8001546:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	22e0      	movs	r2, #224	; 0xe0
 800154e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e049      	b.n	80015ea <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800155e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001562:	4b27      	ldr	r3, [pc, #156]	; (8001600 <HAL_ETH_Init+0x1c8>)
 8001564:	4013      	ands	r3, r2
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	6952      	ldr	r2, [r2, #20]
 800156a:	0051      	lsls	r1, r2, #1
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	6812      	ldr	r2, [r2, #0]
 8001570:	430b      	orrs	r3, r1
 8001572:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001576:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f000 fad9 	bl	8001b32 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f000 fb1f 	bl	8001bc4 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	3305      	adds	r3, #5
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	021a      	lsls	r2, r3, #8
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	3304      	adds	r3, #4
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	4619      	mov	r1, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	430a      	orrs	r2, r1
 80015a0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	3303      	adds	r3, #3
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	061a      	lsls	r2, r3, #24
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	3302      	adds	r3, #2
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	041b      	lsls	r3, r3, #16
 80015b8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	3301      	adds	r3, #1
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80015c4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80015d2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80015d4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2200      	movs	r2, #0
 80015dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2210      	movs	r2, #16
 80015e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	58024400 	.word	0x58024400
 80015f8:	58000400 	.word	0x58000400
 80015fc:	431bde83 	.word	0x431bde83
 8001600:	ffff8001 	.word	0xffff8001

08001604 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001614:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800161c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800161e:	f001 ff71 	bl	8003504 <HAL_RCC_GetHCLKFreq>
 8001622:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	4a1e      	ldr	r2, [pc, #120]	; (80016a0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d908      	bls.n	800163e <HAL_ETH_SetMDIOClockRange+0x3a>
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	4a1d      	ldr	r2, [pc, #116]	; (80016a4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d804      	bhi.n	800163e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	e027      	b.n	800168e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	4a18      	ldr	r2, [pc, #96]	; (80016a4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d908      	bls.n	8001658 <HAL_ETH_SetMDIOClockRange+0x54>
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	4a17      	ldr	r2, [pc, #92]	; (80016a8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d204      	bcs.n	8001658 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	e01a      	b.n	800168e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	4a13      	ldr	r2, [pc, #76]	; (80016a8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d303      	bcc.n	8001668 <HAL_ETH_SetMDIOClockRange+0x64>
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	4a12      	ldr	r2, [pc, #72]	; (80016ac <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d911      	bls.n	800168c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	4a10      	ldr	r2, [pc, #64]	; (80016ac <HAL_ETH_SetMDIOClockRange+0xa8>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d908      	bls.n	8001682 <HAL_ETH_SetMDIOClockRange+0x7e>
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	4a0f      	ldr	r2, [pc, #60]	; (80016b0 <HAL_ETH_SetMDIOClockRange+0xac>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d804      	bhi.n	8001682 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	e005      	b.n	800168e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	e000      	b.n	800168e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800168c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001698:	bf00      	nop
 800169a:	3710      	adds	r7, #16
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	01312cff 	.word	0x01312cff
 80016a4:	02160ebf 	.word	0x02160ebf
 80016a8:	03938700 	.word	0x03938700
 80016ac:	05f5e0ff 	.word	0x05f5e0ff
 80016b0:	08f0d17f 	.word	0x08f0d17f

080016b4 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80016c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	791b      	ldrb	r3, [r3, #4]
 80016cc:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80016ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	7b1b      	ldrb	r3, [r3, #12]
 80016d4:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80016d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	7b5b      	ldrb	r3, [r3, #13]
 80016dc:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80016de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	7b9b      	ldrb	r3, [r3, #14]
 80016e4:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80016e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	7bdb      	ldrb	r3, [r3, #15]
 80016ec:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80016ee:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80016f0:	683a      	ldr	r2, [r7, #0]
 80016f2:	7c12      	ldrb	r2, [r2, #16]
 80016f4:	2a00      	cmp	r2, #0
 80016f6:	d102      	bne.n	80016fe <ETH_SetMACConfig+0x4a>
 80016f8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80016fc:	e000      	b.n	8001700 <ETH_SetMACConfig+0x4c>
 80016fe:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001700:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001702:	683a      	ldr	r2, [r7, #0]
 8001704:	7c52      	ldrb	r2, [r2, #17]
 8001706:	2a00      	cmp	r2, #0
 8001708:	d102      	bne.n	8001710 <ETH_SetMACConfig+0x5c>
 800170a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800170e:	e000      	b.n	8001712 <ETH_SetMACConfig+0x5e>
 8001710:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001712:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	7c9b      	ldrb	r3, [r3, #18]
 8001718:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800171a:	431a      	orrs	r2, r3
               macconf->Speed |
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001720:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001726:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	7f1b      	ldrb	r3, [r3, #28]
 800172c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800172e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	7f5b      	ldrb	r3, [r3, #29]
 8001734:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001736:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	7f92      	ldrb	r2, [r2, #30]
 800173c:	2a00      	cmp	r2, #0
 800173e:	d102      	bne.n	8001746 <ETH_SetMACConfig+0x92>
 8001740:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001744:	e000      	b.n	8001748 <ETH_SetMACConfig+0x94>
 8001746:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001748:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	7fdb      	ldrb	r3, [r3, #31]
 800174e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001750:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001752:	683a      	ldr	r2, [r7, #0]
 8001754:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001758:	2a00      	cmp	r2, #0
 800175a:	d102      	bne.n	8001762 <ETH_SetMACConfig+0xae>
 800175c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001760:	e000      	b.n	8001764 <ETH_SetMACConfig+0xb0>
 8001762:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001764:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800176a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001772:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001774:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800177a:	4313      	orrs	r3, r2
 800177c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	4b56      	ldr	r3, [pc, #344]	; (80018e0 <ETH_SetMACConfig+0x22c>)
 8001786:	4013      	ands	r3, r2
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	6812      	ldr	r2, [r2, #0]
 800178c:	68f9      	ldr	r1, [r7, #12]
 800178e:	430b      	orrs	r3, r1
 8001790:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001796:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800179e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80017a0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017a8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80017aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80017b2:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80017b4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80017bc:	2a00      	cmp	r2, #0
 80017be:	d102      	bne.n	80017c6 <ETH_SetMACConfig+0x112>
 80017c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017c4:	e000      	b.n	80017c8 <ETH_SetMACConfig+0x114>
 80017c6:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80017c8:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80017ce:	4313      	orrs	r3, r2
 80017d0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	685a      	ldr	r2, [r3, #4]
 80017d8:	4b42      	ldr	r3, [pc, #264]	; (80018e4 <ETH_SetMACConfig+0x230>)
 80017da:	4013      	ands	r3, r2
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	6812      	ldr	r2, [r2, #0]
 80017e0:	68f9      	ldr	r1, [r7, #12]
 80017e2:	430b      	orrs	r3, r1
 80017e4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017ec:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80017f2:	4313      	orrs	r3, r2
 80017f4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	68da      	ldr	r2, [r3, #12]
 80017fc:	4b3a      	ldr	r3, [pc, #232]	; (80018e8 <ETH_SetMACConfig+0x234>)
 80017fe:	4013      	ands	r3, r2
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	6812      	ldr	r2, [r2, #0]
 8001804:	68f9      	ldr	r1, [r7, #12]
 8001806:	430b      	orrs	r3, r1
 8001808:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001810:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001816:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800181e:	2a00      	cmp	r2, #0
 8001820:	d101      	bne.n	8001826 <ETH_SetMACConfig+0x172>
 8001822:	2280      	movs	r2, #128	; 0x80
 8001824:	e000      	b.n	8001828 <ETH_SetMACConfig+0x174>
 8001826:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001828:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800182e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001830:	4313      	orrs	r3, r2
 8001832:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800183a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800183e:	4013      	ands	r3, r2
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	6812      	ldr	r2, [r2, #0]
 8001844:	68f9      	ldr	r1, [r7, #12]
 8001846:	430b      	orrs	r3, r1
 8001848:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001850:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001858:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800185a:	4313      	orrs	r3, r2
 800185c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001866:	f023 0103 	bic.w	r1, r3, #3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	430a      	orrs	r2, r1
 8001872:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800187e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	430a      	orrs	r2, r1
 800188c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800189a:	2a00      	cmp	r2, #0
 800189c:	d101      	bne.n	80018a2 <ETH_SetMACConfig+0x1ee>
 800189e:	2240      	movs	r2, #64	; 0x40
 80018a0:	e000      	b.n	80018a4 <ETH_SetMACConfig+0x1f0>
 80018a2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80018a4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80018ac:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80018ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80018b6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80018b8:	4313      	orrs	r3, r2
 80018ba:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80018c4:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	68fa      	ldr	r2, [r7, #12]
 80018ce:	430a      	orrs	r2, r1
 80018d0:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80018d4:	bf00      	nop
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	00048083 	.word	0x00048083
 80018e4:	c0f88000 	.word	0xc0f88000
 80018e8:	fffffef0 	.word	0xfffffef0

080018ec <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	4b38      	ldr	r3, [pc, #224]	; (80019e4 <ETH_SetDMAConfig+0xf8>)
 8001902:	4013      	ands	r3, r2
 8001904:	683a      	ldr	r2, [r7, #0]
 8001906:	6811      	ldr	r1, [r2, #0]
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	6812      	ldr	r2, [r2, #0]
 800190c:	430b      	orrs	r3, r1
 800190e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001912:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	791b      	ldrb	r3, [r3, #4]
 8001918:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800191e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	7b1b      	ldrb	r3, [r3, #12]
 8001924:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001926:	4313      	orrs	r3, r2
 8001928:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	4b2c      	ldr	r3, [pc, #176]	; (80019e8 <ETH_SetDMAConfig+0xfc>)
 8001936:	4013      	ands	r3, r2
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	6812      	ldr	r2, [r2, #0]
 800193c:	68f9      	ldr	r1, [r7, #12]
 800193e:	430b      	orrs	r3, r1
 8001940:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001944:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	7b5b      	ldrb	r3, [r3, #13]
 800194a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001950:	4313      	orrs	r3, r2
 8001952:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800195c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8001960:	4b22      	ldr	r3, [pc, #136]	; (80019ec <ETH_SetDMAConfig+0x100>)
 8001962:	4013      	ands	r3, r2
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	6812      	ldr	r2, [r2, #0]
 8001968:	68f9      	ldr	r1, [r7, #12]
 800196a:	430b      	orrs	r3, r1
 800196c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001970:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	7d1b      	ldrb	r3, [r3, #20]
 800197c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800197e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	7f5b      	ldrb	r3, [r3, #29]
 8001984:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001986:	4313      	orrs	r3, r2
 8001988:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001992:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001996:	4b16      	ldr	r3, [pc, #88]	; (80019f0 <ETH_SetDMAConfig+0x104>)
 8001998:	4013      	ands	r3, r2
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	6812      	ldr	r2, [r2, #0]
 800199e:	68f9      	ldr	r1, [r7, #12]
 80019a0:	430b      	orrs	r3, r1
 80019a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019a6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	7f1b      	ldrb	r3, [r3, #28]
 80019ae:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80019b4:	4313      	orrs	r3, r2
 80019b6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019c0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80019c4:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <ETH_SetDMAConfig+0x108>)
 80019c6:	4013      	ands	r3, r2
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	6812      	ldr	r2, [r2, #0]
 80019cc:	68f9      	ldr	r1, [r7, #12]
 80019ce:	430b      	orrs	r3, r1
 80019d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019d4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80019d8:	bf00      	nop
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	ffff87fd 	.word	0xffff87fd
 80019e8:	ffff2ffe 	.word	0xffff2ffe
 80019ec:	fffec000 	.word	0xfffec000
 80019f0:	ffc0efef 	.word	0xffc0efef
 80019f4:	7fc0ffff 	.word	0x7fc0ffff

080019f8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b0a4      	sub	sp, #144	; 0x90
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001a00:	2301      	movs	r3, #1
 8001a02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001a06:	2300      	movs	r3, #0
 8001a08:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001a10:	2300      	movs	r3, #0
 8001a12:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001a16:	2301      	movs	r3, #1
 8001a18:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001a22:	2301      	movs	r3, #1
 8001a24:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001a34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a38:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001a44:	2300      	movs	r3, #0
 8001a46:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001a50:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001a54:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001a56:	2300      	movs	r3, #0
 8001a58:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001a60:	2301      	movs	r3, #1
 8001a62:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001a66:	2300      	movs	r3, #0
 8001a68:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001a72:	2300      	movs	r3, #0
 8001a74:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001a84:	2300      	movs	r3, #0
 8001a86:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001a90:	2320      	movs	r3, #32
 8001a92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001a96:	2301      	movs	r3, #1
 8001a98:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001aa2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001aa8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001aac:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001aba:	2300      	movs	r3, #0
 8001abc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001acc:	2301      	movs	r3, #1
 8001ace:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001adc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f7ff fde6 	bl	80016b4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001aec:	2301      	movs	r3, #1
 8001aee:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001af0:	2300      	movs	r3, #0
 8001af2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001af4:	2300      	movs	r3, #0
 8001af6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001afa:	2300      	movs	r3, #0
 8001afc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001afe:	2300      	movs	r3, #0
 8001b00:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001b02:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b06:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001b0c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b10:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001b12:	2300      	movs	r3, #0
 8001b14:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001b18:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001b1c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001b1e:	f107 0308 	add.w	r3, r7, #8
 8001b22:	4619      	mov	r1, r3
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff fee1 	bl	80018ec <ETH_SetDMAConfig>
}
 8001b2a:	bf00      	nop
 8001b2c:	3790      	adds	r7, #144	; 0x90
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b085      	sub	sp, #20
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	e01d      	b.n	8001b7c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	68d9      	ldr	r1, [r3, #12]
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	4613      	mov	r3, r2
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	4413      	add	r3, r2
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	440b      	add	r3, r1
 8001b50:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	2200      	movs	r2, #0
 8001b62:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	2200      	movs	r2, #0
 8001b68:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001b6a:	68b9      	ldr	r1, [r7, #8]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	3206      	adds	r2, #6
 8001b72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2b03      	cmp	r3, #3
 8001b80:	d9de      	bls.n	8001b40 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b90:	461a      	mov	r2, r3
 8001b92:	2303      	movs	r3, #3
 8001b94:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	68da      	ldr	r2, [r3, #12]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ba4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	68da      	ldr	r2, [r3, #12]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bb4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8001bb8:	bf00      	nop
 8001bba:	3714      	adds	r7, #20
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	e023      	b.n	8001c1a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6919      	ldr	r1, [r3, #16]
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	4413      	add	r3, r2
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	440b      	add	r3, r1
 8001be2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	2200      	movs	r2, #0
 8001bee:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	2200      	movs	r2, #0
 8001c06:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001c08:	68b9      	ldr	r1, [r7, #8]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	68fa      	ldr	r2, [r7, #12]
 8001c0e:	3212      	adds	r2, #18
 8001c10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	3301      	adds	r3, #1
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2b03      	cmp	r3, #3
 8001c1e:	d9d8      	bls.n	8001bd2 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c46:	461a      	mov	r2, r3
 8001c48:	2303      	movs	r3, #3
 8001c4a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	691a      	ldr	r2, [r3, #16]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c5a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c6e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8001c72:	bf00      	nop
 8001c74:	3714      	adds	r7, #20
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
	...

08001c80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b089      	sub	sp, #36	; 0x24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001c8e:	4b89      	ldr	r3, [pc, #548]	; (8001eb4 <HAL_GPIO_Init+0x234>)
 8001c90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c92:	e194      	b.n	8001fbe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	2101      	movs	r1, #1
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f000 8186 	beq.w	8001fb8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 0303 	and.w	r3, r3, #3
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d005      	beq.n	8001cc4 <HAL_GPIO_Init+0x44>
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 0303 	and.w	r3, r3, #3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d130      	bne.n	8001d26 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	2203      	movs	r2, #3
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	68da      	ldr	r2, [r3, #12]
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43db      	mvns	r3, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4013      	ands	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	091b      	lsrs	r3, r3, #4
 8001d10:	f003 0201 	and.w	r2, r3, #1
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f003 0303 	and.w	r3, r3, #3
 8001d2e:	2b03      	cmp	r3, #3
 8001d30:	d017      	beq.n	8001d62 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	2203      	movs	r2, #3
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43db      	mvns	r3, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4013      	ands	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	689a      	ldr	r2, [r3, #8]
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f003 0303 	and.w	r3, r3, #3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d123      	bne.n	8001db6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	08da      	lsrs	r2, r3, #3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	3208      	adds	r2, #8
 8001d76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	220f      	movs	r2, #15
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	691a      	ldr	r2, [r3, #16]
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	08da      	lsrs	r2, r3, #3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3208      	adds	r2, #8
 8001db0:	69b9      	ldr	r1, [r7, #24]
 8001db2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	2203      	movs	r2, #3
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f003 0203 	and.w	r2, r3, #3
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f000 80e0 	beq.w	8001fb8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df8:	4b2f      	ldr	r3, [pc, #188]	; (8001eb8 <HAL_GPIO_Init+0x238>)
 8001dfa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001dfe:	4a2e      	ldr	r2, [pc, #184]	; (8001eb8 <HAL_GPIO_Init+0x238>)
 8001e00:	f043 0302 	orr.w	r3, r3, #2
 8001e04:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001e08:	4b2b      	ldr	r3, [pc, #172]	; (8001eb8 <HAL_GPIO_Init+0x238>)
 8001e0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e16:	4a29      	ldr	r2, [pc, #164]	; (8001ebc <HAL_GPIO_Init+0x23c>)
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	089b      	lsrs	r3, r3, #2
 8001e1c:	3302      	adds	r3, #2
 8001e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	220f      	movs	r2, #15
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43db      	mvns	r3, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4013      	ands	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a20      	ldr	r2, [pc, #128]	; (8001ec0 <HAL_GPIO_Init+0x240>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d052      	beq.n	8001ee8 <HAL_GPIO_Init+0x268>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a1f      	ldr	r2, [pc, #124]	; (8001ec4 <HAL_GPIO_Init+0x244>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d031      	beq.n	8001eae <HAL_GPIO_Init+0x22e>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a1e      	ldr	r2, [pc, #120]	; (8001ec8 <HAL_GPIO_Init+0x248>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d02b      	beq.n	8001eaa <HAL_GPIO_Init+0x22a>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a1d      	ldr	r2, [pc, #116]	; (8001ecc <HAL_GPIO_Init+0x24c>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d025      	beq.n	8001ea6 <HAL_GPIO_Init+0x226>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a1c      	ldr	r2, [pc, #112]	; (8001ed0 <HAL_GPIO_Init+0x250>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d01f      	beq.n	8001ea2 <HAL_GPIO_Init+0x222>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a1b      	ldr	r2, [pc, #108]	; (8001ed4 <HAL_GPIO_Init+0x254>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d019      	beq.n	8001e9e <HAL_GPIO_Init+0x21e>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a1a      	ldr	r2, [pc, #104]	; (8001ed8 <HAL_GPIO_Init+0x258>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d013      	beq.n	8001e9a <HAL_GPIO_Init+0x21a>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a19      	ldr	r2, [pc, #100]	; (8001edc <HAL_GPIO_Init+0x25c>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d00d      	beq.n	8001e96 <HAL_GPIO_Init+0x216>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a18      	ldr	r2, [pc, #96]	; (8001ee0 <HAL_GPIO_Init+0x260>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d007      	beq.n	8001e92 <HAL_GPIO_Init+0x212>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a17      	ldr	r2, [pc, #92]	; (8001ee4 <HAL_GPIO_Init+0x264>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d101      	bne.n	8001e8e <HAL_GPIO_Init+0x20e>
 8001e8a:	2309      	movs	r3, #9
 8001e8c:	e02d      	b.n	8001eea <HAL_GPIO_Init+0x26a>
 8001e8e:	230a      	movs	r3, #10
 8001e90:	e02b      	b.n	8001eea <HAL_GPIO_Init+0x26a>
 8001e92:	2308      	movs	r3, #8
 8001e94:	e029      	b.n	8001eea <HAL_GPIO_Init+0x26a>
 8001e96:	2307      	movs	r3, #7
 8001e98:	e027      	b.n	8001eea <HAL_GPIO_Init+0x26a>
 8001e9a:	2306      	movs	r3, #6
 8001e9c:	e025      	b.n	8001eea <HAL_GPIO_Init+0x26a>
 8001e9e:	2305      	movs	r3, #5
 8001ea0:	e023      	b.n	8001eea <HAL_GPIO_Init+0x26a>
 8001ea2:	2304      	movs	r3, #4
 8001ea4:	e021      	b.n	8001eea <HAL_GPIO_Init+0x26a>
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e01f      	b.n	8001eea <HAL_GPIO_Init+0x26a>
 8001eaa:	2302      	movs	r3, #2
 8001eac:	e01d      	b.n	8001eea <HAL_GPIO_Init+0x26a>
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e01b      	b.n	8001eea <HAL_GPIO_Init+0x26a>
 8001eb2:	bf00      	nop
 8001eb4:	58000080 	.word	0x58000080
 8001eb8:	58024400 	.word	0x58024400
 8001ebc:	58000400 	.word	0x58000400
 8001ec0:	58020000 	.word	0x58020000
 8001ec4:	58020400 	.word	0x58020400
 8001ec8:	58020800 	.word	0x58020800
 8001ecc:	58020c00 	.word	0x58020c00
 8001ed0:	58021000 	.word	0x58021000
 8001ed4:	58021400 	.word	0x58021400
 8001ed8:	58021800 	.word	0x58021800
 8001edc:	58021c00 	.word	0x58021c00
 8001ee0:	58022000 	.word	0x58022000
 8001ee4:	58022400 	.word	0x58022400
 8001ee8:	2300      	movs	r3, #0
 8001eea:	69fa      	ldr	r2, [r7, #28]
 8001eec:	f002 0203 	and.w	r2, r2, #3
 8001ef0:	0092      	lsls	r2, r2, #2
 8001ef2:	4093      	lsls	r3, r2
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001efa:	4938      	ldr	r1, [pc, #224]	; (8001fdc <HAL_GPIO_Init+0x35c>)
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	089b      	lsrs	r3, r3, #2
 8001f00:	3302      	adds	r3, #2
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	43db      	mvns	r3, r3
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4013      	ands	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001f2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001f36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	43db      	mvns	r3, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4013      	ands	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d003      	beq.n	8001f5c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001f5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4013      	ands	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d003      	beq.n	8001f88 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	43db      	mvns	r3, r3
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d003      	beq.n	8001fb2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	f47f ae63 	bne.w	8001c94 <HAL_GPIO_Init+0x14>
  }
}
 8001fce:	bf00      	nop
 8001fd0:	bf00      	nop
 8001fd2:	3724      	adds	r7, #36	; 0x24
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	58000400 	.word	0x58000400

08001fe0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001fe8:	4a08      	ldr	r2, [pc, #32]	; (800200c <HAL_HSEM_FastTake+0x2c>)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	3320      	adds	r3, #32
 8001fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff2:	4a07      	ldr	r2, [pc, #28]	; (8002010 <HAL_HSEM_FastTake+0x30>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d101      	bne.n	8001ffc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	e000      	b.n	8001ffe <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	58026400 	.word	0x58026400
 8002010:	80000300 	.word	0x80000300

08002014 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800201e:	4906      	ldr	r1, [pc, #24]	; (8002038 <HAL_HSEM_Release+0x24>)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	58026400 	.word	0x58026400

0800203c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e07f      	b.n	800214e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d106      	bne.n	8002068 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7fe fe7a 	bl	8000d5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2224      	movs	r2, #36	; 0x24
 800206c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f022 0201 	bic.w	r2, r2, #1
 800207e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800208c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800209c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d107      	bne.n	80020b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689a      	ldr	r2, [r3, #8]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020b2:	609a      	str	r2, [r3, #8]
 80020b4:	e006      	b.n	80020c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689a      	ldr	r2, [r3, #8]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80020c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d104      	bne.n	80020d6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6859      	ldr	r1, [r3, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	4b1d      	ldr	r3, [pc, #116]	; (8002158 <HAL_I2C_Init+0x11c>)
 80020e2:	430b      	orrs	r3, r1
 80020e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68da      	ldr	r2, [r3, #12]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	691a      	ldr	r2, [r3, #16]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	430a      	orrs	r2, r1
 800210e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	69d9      	ldr	r1, [r3, #28]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a1a      	ldr	r2, [r3, #32]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	430a      	orrs	r2, r1
 800211e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f042 0201 	orr.w	r2, r2, #1
 800212e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2220      	movs	r2, #32
 800213a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	02008000 	.word	0x02008000

0800215c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b20      	cmp	r3, #32
 8002170:	d138      	bne.n	80021e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002178:	2b01      	cmp	r3, #1
 800217a:	d101      	bne.n	8002180 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800217c:	2302      	movs	r3, #2
 800217e:	e032      	b.n	80021e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2224      	movs	r2, #36	; 0x24
 800218c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f022 0201 	bic.w	r2, r2, #1
 800219e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80021ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6819      	ldr	r1, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	430a      	orrs	r2, r1
 80021be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f042 0201 	orr.w	r2, r2, #1
 80021ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2220      	movs	r2, #32
 80021d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021e0:	2300      	movs	r3, #0
 80021e2:	e000      	b.n	80021e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80021e4:	2302      	movs	r3, #2
  }
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80021f2:	b480      	push	{r7}
 80021f4:	b085      	sub	sp, #20
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
 80021fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b20      	cmp	r3, #32
 8002206:	d139      	bne.n	800227c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800220e:	2b01      	cmp	r3, #1
 8002210:	d101      	bne.n	8002216 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002212:	2302      	movs	r3, #2
 8002214:	e033      	b.n	800227e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2201      	movs	r2, #1
 800221a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2224      	movs	r2, #36	; 0x24
 8002222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f022 0201 	bic.w	r2, r2, #1
 8002234:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002244:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	021b      	lsls	r3, r3, #8
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	4313      	orrs	r3, r2
 800224e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f042 0201 	orr.w	r2, r2, #1
 8002266:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2220      	movs	r2, #32
 800226c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002278:	2300      	movs	r3, #0
 800227a:	e000      	b.n	800227e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800227c:	2302      	movs	r3, #2
  }
}
 800227e:	4618      	mov	r0, r3
 8002280:	3714      	adds	r7, #20
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800228a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800228c:	b08f      	sub	sp, #60	; 0x3c
 800228e:	af0a      	add	r7, sp, #40	; 0x28
 8002290:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d101      	bne.n	800229c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e116      	b.n	80024ca <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d106      	bne.n	80022bc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7fe fe24 	bl	8000f04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2203      	movs	r2, #3
 80022c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d102      	bne.n	80022d6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f004 f8de 	bl	800649c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	603b      	str	r3, [r7, #0]
 80022e6:	687e      	ldr	r6, [r7, #4]
 80022e8:	466d      	mov	r5, sp
 80022ea:	f106 0410 	add.w	r4, r6, #16
 80022ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80022fe:	1d33      	adds	r3, r6, #4
 8002300:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002302:	6838      	ldr	r0, [r7, #0]
 8002304:	f004 f85c 	bl	80063c0 <USB_CoreInit>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d005      	beq.n	800231a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2202      	movs	r2, #2
 8002312:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e0d7      	b.n	80024ca <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2100      	movs	r1, #0
 8002320:	4618      	mov	r0, r3
 8002322:	f004 f8cc 	bl	80064be <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002326:	2300      	movs	r3, #0
 8002328:	73fb      	strb	r3, [r7, #15]
 800232a:	e04a      	b.n	80023c2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800232c:	7bfa      	ldrb	r2, [r7, #15]
 800232e:	6879      	ldr	r1, [r7, #4]
 8002330:	4613      	mov	r3, r2
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	4413      	add	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	440b      	add	r3, r1
 800233a:	333d      	adds	r3, #61	; 0x3d
 800233c:	2201      	movs	r2, #1
 800233e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002340:	7bfa      	ldrb	r2, [r7, #15]
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	4613      	mov	r3, r2
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	4413      	add	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	440b      	add	r3, r1
 800234e:	333c      	adds	r3, #60	; 0x3c
 8002350:	7bfa      	ldrb	r2, [r7, #15]
 8002352:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002354:	7bfa      	ldrb	r2, [r7, #15]
 8002356:	7bfb      	ldrb	r3, [r7, #15]
 8002358:	b298      	uxth	r0, r3
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	4613      	mov	r3, r2
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	4413      	add	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	440b      	add	r3, r1
 8002366:	3356      	adds	r3, #86	; 0x56
 8002368:	4602      	mov	r2, r0
 800236a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800236c:	7bfa      	ldrb	r2, [r7, #15]
 800236e:	6879      	ldr	r1, [r7, #4]
 8002370:	4613      	mov	r3, r2
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	4413      	add	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	440b      	add	r3, r1
 800237a:	3340      	adds	r3, #64	; 0x40
 800237c:	2200      	movs	r2, #0
 800237e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002380:	7bfa      	ldrb	r2, [r7, #15]
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	4613      	mov	r3, r2
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	4413      	add	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	440b      	add	r3, r1
 800238e:	3344      	adds	r3, #68	; 0x44
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002394:	7bfa      	ldrb	r2, [r7, #15]
 8002396:	6879      	ldr	r1, [r7, #4]
 8002398:	4613      	mov	r3, r2
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	4413      	add	r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	440b      	add	r3, r1
 80023a2:	3348      	adds	r3, #72	; 0x48
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80023a8:	7bfa      	ldrb	r2, [r7, #15]
 80023aa:	6879      	ldr	r1, [r7, #4]
 80023ac:	4613      	mov	r3, r2
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	4413      	add	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	440b      	add	r3, r1
 80023b6:	334c      	adds	r3, #76	; 0x4c
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023bc:	7bfb      	ldrb	r3, [r7, #15]
 80023be:	3301      	adds	r3, #1
 80023c0:	73fb      	strb	r3, [r7, #15]
 80023c2:	7bfa      	ldrb	r2, [r7, #15]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d3af      	bcc.n	800232c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023cc:	2300      	movs	r3, #0
 80023ce:	73fb      	strb	r3, [r7, #15]
 80023d0:	e044      	b.n	800245c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80023d2:	7bfa      	ldrb	r2, [r7, #15]
 80023d4:	6879      	ldr	r1, [r7, #4]
 80023d6:	4613      	mov	r3, r2
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	4413      	add	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	440b      	add	r3, r1
 80023e0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80023e4:	2200      	movs	r2, #0
 80023e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023e8:	7bfa      	ldrb	r2, [r7, #15]
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	4613      	mov	r3, r2
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	4413      	add	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	440b      	add	r3, r1
 80023f6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80023fa:	7bfa      	ldrb	r2, [r7, #15]
 80023fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023fe:	7bfa      	ldrb	r2, [r7, #15]
 8002400:	6879      	ldr	r1, [r7, #4]
 8002402:	4613      	mov	r3, r2
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	4413      	add	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	440b      	add	r3, r1
 800240c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002410:	2200      	movs	r2, #0
 8002412:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002414:	7bfa      	ldrb	r2, [r7, #15]
 8002416:	6879      	ldr	r1, [r7, #4]
 8002418:	4613      	mov	r3, r2
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	4413      	add	r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	440b      	add	r3, r1
 8002422:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002426:	2200      	movs	r2, #0
 8002428:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800242a:	7bfa      	ldrb	r2, [r7, #15]
 800242c:	6879      	ldr	r1, [r7, #4]
 800242e:	4613      	mov	r3, r2
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	4413      	add	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	440b      	add	r3, r1
 8002438:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002440:	7bfa      	ldrb	r2, [r7, #15]
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	4613      	mov	r3, r2
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	4413      	add	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	440b      	add	r3, r1
 800244e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002452:	2200      	movs	r2, #0
 8002454:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002456:	7bfb      	ldrb	r3, [r7, #15]
 8002458:	3301      	adds	r3, #1
 800245a:	73fb      	strb	r3, [r7, #15]
 800245c:	7bfa      	ldrb	r2, [r7, #15]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	429a      	cmp	r2, r3
 8002464:	d3b5      	bcc.n	80023d2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	603b      	str	r3, [r7, #0]
 800246c:	687e      	ldr	r6, [r7, #4]
 800246e:	466d      	mov	r5, sp
 8002470:	f106 0410 	add.w	r4, r6, #16
 8002474:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002476:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002478:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800247a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800247c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002480:	e885 0003 	stmia.w	r5, {r0, r1}
 8002484:	1d33      	adds	r3, r6, #4
 8002486:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002488:	6838      	ldr	r0, [r7, #0]
 800248a:	f004 f865 	bl	8006558 <USB_DevInit>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d005      	beq.n	80024a0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2202      	movs	r2, #2
 8002498:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e014      	b.n	80024ca <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d102      	bne.n	80024be <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f000 f80b 	bl	80024d4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f004 fa23 	bl	800690e <USB_DevDisconnect>

  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3714      	adds	r7, #20
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080024d4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2201      	movs	r2, #1
 80024e6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002502:	4b05      	ldr	r3, [pc, #20]	; (8002518 <HAL_PCDEx_ActivateLPM+0x44>)
 8002504:	4313      	orrs	r3, r2
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	10000003 	.word	0x10000003

0800251c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002524:	4b29      	ldr	r3, [pc, #164]	; (80025cc <HAL_PWREx_ConfigSupply+0xb0>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	2b06      	cmp	r3, #6
 800252e:	d00a      	beq.n	8002546 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002530:	4b26      	ldr	r3, [pc, #152]	; (80025cc <HAL_PWREx_ConfigSupply+0xb0>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	429a      	cmp	r2, r3
 800253c:	d001      	beq.n	8002542 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e040      	b.n	80025c4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002542:	2300      	movs	r3, #0
 8002544:	e03e      	b.n	80025c4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002546:	4b21      	ldr	r3, [pc, #132]	; (80025cc <HAL_PWREx_ConfigSupply+0xb0>)
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800254e:	491f      	ldr	r1, [pc, #124]	; (80025cc <HAL_PWREx_ConfigSupply+0xb0>)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4313      	orrs	r3, r2
 8002554:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002556:	f7fe fe3b 	bl	80011d0 <HAL_GetTick>
 800255a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800255c:	e009      	b.n	8002572 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800255e:	f7fe fe37 	bl	80011d0 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800256c:	d901      	bls.n	8002572 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e028      	b.n	80025c4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002572:	4b16      	ldr	r3, [pc, #88]	; (80025cc <HAL_PWREx_ConfigSupply+0xb0>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800257a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800257e:	d1ee      	bne.n	800255e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b1e      	cmp	r3, #30
 8002584:	d008      	beq.n	8002598 <HAL_PWREx_ConfigSupply+0x7c>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2b2e      	cmp	r3, #46	; 0x2e
 800258a:	d005      	beq.n	8002598 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b1d      	cmp	r3, #29
 8002590:	d002      	beq.n	8002598 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2b2d      	cmp	r3, #45	; 0x2d
 8002596:	d114      	bne.n	80025c2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002598:	f7fe fe1a 	bl	80011d0 <HAL_GetTick>
 800259c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800259e:	e009      	b.n	80025b4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80025a0:	f7fe fe16 	bl	80011d0 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025ae:	d901      	bls.n	80025b4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e007      	b.n	80025c4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80025b4:	4b05      	ldr	r3, [pc, #20]	; (80025cc <HAL_PWREx_ConfigSupply+0xb0>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025c0:	d1ee      	bne.n	80025a0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3710      	adds	r7, #16
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	58024800 	.word	0x58024800

080025d0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80025d4:	4b05      	ldr	r3, [pc, #20]	; (80025ec <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	4a04      	ldr	r2, [pc, #16]	; (80025ec <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80025da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025de:	60d3      	str	r3, [r2, #12]
}
 80025e0:	bf00      	nop
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	58024800 	.word	0x58024800

080025f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b08c      	sub	sp, #48	; 0x30
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d102      	bne.n	8002604 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	f000 bc48 	b.w	8002e94 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0301 	and.w	r3, r3, #1
 800260c:	2b00      	cmp	r3, #0
 800260e:	f000 8088 	beq.w	8002722 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002612:	4b99      	ldr	r3, [pc, #612]	; (8002878 <HAL_RCC_OscConfig+0x288>)
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800261a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800261c:	4b96      	ldr	r3, [pc, #600]	; (8002878 <HAL_RCC_OscConfig+0x288>)
 800261e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002620:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002624:	2b10      	cmp	r3, #16
 8002626:	d007      	beq.n	8002638 <HAL_RCC_OscConfig+0x48>
 8002628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800262a:	2b18      	cmp	r3, #24
 800262c:	d111      	bne.n	8002652 <HAL_RCC_OscConfig+0x62>
 800262e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002630:	f003 0303 	and.w	r3, r3, #3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d10c      	bne.n	8002652 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002638:	4b8f      	ldr	r3, [pc, #572]	; (8002878 <HAL_RCC_OscConfig+0x288>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d06d      	beq.n	8002720 <HAL_RCC_OscConfig+0x130>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d169      	bne.n	8002720 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	f000 bc21 	b.w	8002e94 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800265a:	d106      	bne.n	800266a <HAL_RCC_OscConfig+0x7a>
 800265c:	4b86      	ldr	r3, [pc, #536]	; (8002878 <HAL_RCC_OscConfig+0x288>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a85      	ldr	r2, [pc, #532]	; (8002878 <HAL_RCC_OscConfig+0x288>)
 8002662:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002666:	6013      	str	r3, [r2, #0]
 8002668:	e02e      	b.n	80026c8 <HAL_RCC_OscConfig+0xd8>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10c      	bne.n	800268c <HAL_RCC_OscConfig+0x9c>
 8002672:	4b81      	ldr	r3, [pc, #516]	; (8002878 <HAL_RCC_OscConfig+0x288>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a80      	ldr	r2, [pc, #512]	; (8002878 <HAL_RCC_OscConfig+0x288>)
 8002678:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800267c:	6013      	str	r3, [r2, #0]
 800267e:	4b7e      	ldr	r3, [pc, #504]	; (8002878 <HAL_RCC_OscConfig+0x288>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a7d      	ldr	r2, [pc, #500]	; (8002878 <HAL_RCC_OscConfig+0x288>)
 8002684:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002688:	6013      	str	r3, [r2, #0]
 800268a:	e01d      	b.n	80026c8 <HAL_RCC_OscConfig+0xd8>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002694:	d10c      	bne.n	80026b0 <HAL_RCC_OscConfig+0xc0>
 8002696:	4b78      	ldr	r3, [pc, #480]	; (8002878 <HAL_RCC_OscConfig+0x288>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a77      	ldr	r2, [pc, #476]	; (8002878 <HAL_RCC_OscConfig+0x288>)
 800269c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	4b75      	ldr	r3, [pc, #468]	; (8002878 <HAL_RCC_OscConfig+0x288>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a74      	ldr	r2, [pc, #464]	; (8002878 <HAL_RCC_OscConfig+0x288>)
 80026a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	e00b      	b.n	80026c8 <HAL_RCC_OscConfig+0xd8>
 80026b0:	4b71      	ldr	r3, [pc, #452]	; (8002878 <HAL_RCC_OscConfig+0x288>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a70      	ldr	r2, [pc, #448]	; (8002878 <HAL_RCC_OscConfig+0x288>)
 80026b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ba:	6013      	str	r3, [r2, #0]
 80026bc:	4b6e      	ldr	r3, [pc, #440]	; (8002878 <HAL_RCC_OscConfig+0x288>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a6d      	ldr	r2, [pc, #436]	; (8002878 <HAL_RCC_OscConfig+0x288>)
 80026c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d013      	beq.n	80026f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d0:	f7fe fd7e 	bl	80011d0 <HAL_GetTick>
 80026d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026d8:	f7fe fd7a 	bl	80011d0 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b64      	cmp	r3, #100	; 0x64
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e3d4      	b.n	8002e94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026ea:	4b63      	ldr	r3, [pc, #396]	; (8002878 <HAL_RCC_OscConfig+0x288>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d0f0      	beq.n	80026d8 <HAL_RCC_OscConfig+0xe8>
 80026f6:	e014      	b.n	8002722 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f8:	f7fe fd6a 	bl	80011d0 <HAL_GetTick>
 80026fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002700:	f7fe fd66 	bl	80011d0 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b64      	cmp	r3, #100	; 0x64
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e3c0      	b.n	8002e94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002712:	4b59      	ldr	r3, [pc, #356]	; (8002878 <HAL_RCC_OscConfig+0x288>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1f0      	bne.n	8002700 <HAL_RCC_OscConfig+0x110>
 800271e:	e000      	b.n	8002722 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002720:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	f000 80ca 	beq.w	80028c4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002730:	4b51      	ldr	r3, [pc, #324]	; (8002878 <HAL_RCC_OscConfig+0x288>)
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002738:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800273a:	4b4f      	ldr	r3, [pc, #316]	; (8002878 <HAL_RCC_OscConfig+0x288>)
 800273c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002740:	6a3b      	ldr	r3, [r7, #32]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d007      	beq.n	8002756 <HAL_RCC_OscConfig+0x166>
 8002746:	6a3b      	ldr	r3, [r7, #32]
 8002748:	2b18      	cmp	r3, #24
 800274a:	d156      	bne.n	80027fa <HAL_RCC_OscConfig+0x20a>
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	f003 0303 	and.w	r3, r3, #3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d151      	bne.n	80027fa <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002756:	4b48      	ldr	r3, [pc, #288]	; (8002878 <HAL_RCC_OscConfig+0x288>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0304 	and.w	r3, r3, #4
 800275e:	2b00      	cmp	r3, #0
 8002760:	d005      	beq.n	800276e <HAL_RCC_OscConfig+0x17e>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e392      	b.n	8002e94 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800276e:	4b42      	ldr	r3, [pc, #264]	; (8002878 <HAL_RCC_OscConfig+0x288>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f023 0219 	bic.w	r2, r3, #25
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	493f      	ldr	r1, [pc, #252]	; (8002878 <HAL_RCC_OscConfig+0x288>)
 800277c:	4313      	orrs	r3, r2
 800277e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002780:	f7fe fd26 	bl	80011d0 <HAL_GetTick>
 8002784:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002788:	f7fe fd22 	bl	80011d0 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e37c      	b.n	8002e94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800279a:	4b37      	ldr	r3, [pc, #220]	; (8002878 <HAL_RCC_OscConfig+0x288>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0304 	and.w	r3, r3, #4
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0f0      	beq.n	8002788 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a6:	f7fe fd43 	bl	8001230 <HAL_GetREVID>
 80027aa:	4603      	mov	r3, r0
 80027ac:	f241 0203 	movw	r2, #4099	; 0x1003
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d817      	bhi.n	80027e4 <HAL_RCC_OscConfig+0x1f4>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	2b40      	cmp	r3, #64	; 0x40
 80027ba:	d108      	bne.n	80027ce <HAL_RCC_OscConfig+0x1de>
 80027bc:	4b2e      	ldr	r3, [pc, #184]	; (8002878 <HAL_RCC_OscConfig+0x288>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80027c4:	4a2c      	ldr	r2, [pc, #176]	; (8002878 <HAL_RCC_OscConfig+0x288>)
 80027c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027ca:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027cc:	e07a      	b.n	80028c4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ce:	4b2a      	ldr	r3, [pc, #168]	; (8002878 <HAL_RCC_OscConfig+0x288>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	031b      	lsls	r3, r3, #12
 80027dc:	4926      	ldr	r1, [pc, #152]	; (8002878 <HAL_RCC_OscConfig+0x288>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027e2:	e06f      	b.n	80028c4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e4:	4b24      	ldr	r3, [pc, #144]	; (8002878 <HAL_RCC_OscConfig+0x288>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	061b      	lsls	r3, r3, #24
 80027f2:	4921      	ldr	r1, [pc, #132]	; (8002878 <HAL_RCC_OscConfig+0x288>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027f8:	e064      	b.n	80028c4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d047      	beq.n	8002892 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002802:	4b1d      	ldr	r3, [pc, #116]	; (8002878 <HAL_RCC_OscConfig+0x288>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f023 0219 	bic.w	r2, r3, #25
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	491a      	ldr	r1, [pc, #104]	; (8002878 <HAL_RCC_OscConfig+0x288>)
 8002810:	4313      	orrs	r3, r2
 8002812:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002814:	f7fe fcdc 	bl	80011d0 <HAL_GetTick>
 8002818:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800281c:	f7fe fcd8 	bl	80011d0 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e332      	b.n	8002e94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800282e:	4b12      	ldr	r3, [pc, #72]	; (8002878 <HAL_RCC_OscConfig+0x288>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0304 	and.w	r3, r3, #4
 8002836:	2b00      	cmp	r3, #0
 8002838:	d0f0      	beq.n	800281c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800283a:	f7fe fcf9 	bl	8001230 <HAL_GetREVID>
 800283e:	4603      	mov	r3, r0
 8002840:	f241 0203 	movw	r2, #4099	; 0x1003
 8002844:	4293      	cmp	r3, r2
 8002846:	d819      	bhi.n	800287c <HAL_RCC_OscConfig+0x28c>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	2b40      	cmp	r3, #64	; 0x40
 800284e:	d108      	bne.n	8002862 <HAL_RCC_OscConfig+0x272>
 8002850:	4b09      	ldr	r3, [pc, #36]	; (8002878 <HAL_RCC_OscConfig+0x288>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002858:	4a07      	ldr	r2, [pc, #28]	; (8002878 <HAL_RCC_OscConfig+0x288>)
 800285a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800285e:	6053      	str	r3, [r2, #4]
 8002860:	e030      	b.n	80028c4 <HAL_RCC_OscConfig+0x2d4>
 8002862:	4b05      	ldr	r3, [pc, #20]	; (8002878 <HAL_RCC_OscConfig+0x288>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	031b      	lsls	r3, r3, #12
 8002870:	4901      	ldr	r1, [pc, #4]	; (8002878 <HAL_RCC_OscConfig+0x288>)
 8002872:	4313      	orrs	r3, r2
 8002874:	604b      	str	r3, [r1, #4]
 8002876:	e025      	b.n	80028c4 <HAL_RCC_OscConfig+0x2d4>
 8002878:	58024400 	.word	0x58024400
 800287c:	4b9a      	ldr	r3, [pc, #616]	; (8002ae8 <HAL_RCC_OscConfig+0x4f8>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	061b      	lsls	r3, r3, #24
 800288a:	4997      	ldr	r1, [pc, #604]	; (8002ae8 <HAL_RCC_OscConfig+0x4f8>)
 800288c:	4313      	orrs	r3, r2
 800288e:	604b      	str	r3, [r1, #4]
 8002890:	e018      	b.n	80028c4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002892:	4b95      	ldr	r3, [pc, #596]	; (8002ae8 <HAL_RCC_OscConfig+0x4f8>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a94      	ldr	r2, [pc, #592]	; (8002ae8 <HAL_RCC_OscConfig+0x4f8>)
 8002898:	f023 0301 	bic.w	r3, r3, #1
 800289c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289e:	f7fe fc97 	bl	80011d0 <HAL_GetTick>
 80028a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028a4:	e008      	b.n	80028b8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028a6:	f7fe fc93 	bl	80011d0 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e2ed      	b.n	8002e94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028b8:	4b8b      	ldr	r3, [pc, #556]	; (8002ae8 <HAL_RCC_OscConfig+0x4f8>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0304 	and.w	r3, r3, #4
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1f0      	bne.n	80028a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0310 	and.w	r3, r3, #16
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f000 80a9 	beq.w	8002a24 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028d2:	4b85      	ldr	r3, [pc, #532]	; (8002ae8 <HAL_RCC_OscConfig+0x4f8>)
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028da:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80028dc:	4b82      	ldr	r3, [pc, #520]	; (8002ae8 <HAL_RCC_OscConfig+0x4f8>)
 80028de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	2b08      	cmp	r3, #8
 80028e6:	d007      	beq.n	80028f8 <HAL_RCC_OscConfig+0x308>
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	2b18      	cmp	r3, #24
 80028ec:	d13a      	bne.n	8002964 <HAL_RCC_OscConfig+0x374>
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	f003 0303 	and.w	r3, r3, #3
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d135      	bne.n	8002964 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028f8:	4b7b      	ldr	r3, [pc, #492]	; (8002ae8 <HAL_RCC_OscConfig+0x4f8>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002900:	2b00      	cmp	r3, #0
 8002902:	d005      	beq.n	8002910 <HAL_RCC_OscConfig+0x320>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	69db      	ldr	r3, [r3, #28]
 8002908:	2b80      	cmp	r3, #128	; 0x80
 800290a:	d001      	beq.n	8002910 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e2c1      	b.n	8002e94 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002910:	f7fe fc8e 	bl	8001230 <HAL_GetREVID>
 8002914:	4603      	mov	r3, r0
 8002916:	f241 0203 	movw	r2, #4099	; 0x1003
 800291a:	4293      	cmp	r3, r2
 800291c:	d817      	bhi.n	800294e <HAL_RCC_OscConfig+0x35e>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	2b20      	cmp	r3, #32
 8002924:	d108      	bne.n	8002938 <HAL_RCC_OscConfig+0x348>
 8002926:	4b70      	ldr	r3, [pc, #448]	; (8002ae8 <HAL_RCC_OscConfig+0x4f8>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800292e:	4a6e      	ldr	r2, [pc, #440]	; (8002ae8 <HAL_RCC_OscConfig+0x4f8>)
 8002930:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002934:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002936:	e075      	b.n	8002a24 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002938:	4b6b      	ldr	r3, [pc, #428]	; (8002ae8 <HAL_RCC_OscConfig+0x4f8>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	069b      	lsls	r3, r3, #26
 8002946:	4968      	ldr	r1, [pc, #416]	; (8002ae8 <HAL_RCC_OscConfig+0x4f8>)
 8002948:	4313      	orrs	r3, r2
 800294a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800294c:	e06a      	b.n	8002a24 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800294e:	4b66      	ldr	r3, [pc, #408]	; (8002ae8 <HAL_RCC_OscConfig+0x4f8>)
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	061b      	lsls	r3, r3, #24
 800295c:	4962      	ldr	r1, [pc, #392]	; (8002ae8 <HAL_RCC_OscConfig+0x4f8>)
 800295e:	4313      	orrs	r3, r2
 8002960:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002962:	e05f      	b.n	8002a24 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	69db      	ldr	r3, [r3, #28]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d042      	beq.n	80029f2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800296c:	4b5e      	ldr	r3, [pc, #376]	; (8002ae8 <HAL_RCC_OscConfig+0x4f8>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a5d      	ldr	r2, [pc, #372]	; (8002ae8 <HAL_RCC_OscConfig+0x4f8>)
 8002972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002976:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002978:	f7fe fc2a 	bl	80011d0 <HAL_GetTick>
 800297c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002980:	f7fe fc26 	bl	80011d0 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e280      	b.n	8002e94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002992:	4b55      	ldr	r3, [pc, #340]	; (8002ae8 <HAL_RCC_OscConfig+0x4f8>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800299a:	2b00      	cmp	r3, #0
 800299c:	d0f0      	beq.n	8002980 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800299e:	f7fe fc47 	bl	8001230 <HAL_GetREVID>
 80029a2:	4603      	mov	r3, r0
 80029a4:	f241 0203 	movw	r2, #4099	; 0x1003
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d817      	bhi.n	80029dc <HAL_RCC_OscConfig+0x3ec>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	2b20      	cmp	r3, #32
 80029b2:	d108      	bne.n	80029c6 <HAL_RCC_OscConfig+0x3d6>
 80029b4:	4b4c      	ldr	r3, [pc, #304]	; (8002ae8 <HAL_RCC_OscConfig+0x4f8>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80029bc:	4a4a      	ldr	r2, [pc, #296]	; (8002ae8 <HAL_RCC_OscConfig+0x4f8>)
 80029be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80029c2:	6053      	str	r3, [r2, #4]
 80029c4:	e02e      	b.n	8002a24 <HAL_RCC_OscConfig+0x434>
 80029c6:	4b48      	ldr	r3, [pc, #288]	; (8002ae8 <HAL_RCC_OscConfig+0x4f8>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	069b      	lsls	r3, r3, #26
 80029d4:	4944      	ldr	r1, [pc, #272]	; (8002ae8 <HAL_RCC_OscConfig+0x4f8>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	604b      	str	r3, [r1, #4]
 80029da:	e023      	b.n	8002a24 <HAL_RCC_OscConfig+0x434>
 80029dc:	4b42      	ldr	r3, [pc, #264]	; (8002ae8 <HAL_RCC_OscConfig+0x4f8>)
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	061b      	lsls	r3, r3, #24
 80029ea:	493f      	ldr	r1, [pc, #252]	; (8002ae8 <HAL_RCC_OscConfig+0x4f8>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	60cb      	str	r3, [r1, #12]
 80029f0:	e018      	b.n	8002a24 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80029f2:	4b3d      	ldr	r3, [pc, #244]	; (8002ae8 <HAL_RCC_OscConfig+0x4f8>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a3c      	ldr	r2, [pc, #240]	; (8002ae8 <HAL_RCC_OscConfig+0x4f8>)
 80029f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fe:	f7fe fbe7 	bl	80011d0 <HAL_GetTick>
 8002a02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a04:	e008      	b.n	8002a18 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002a06:	f7fe fbe3 	bl	80011d0 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e23d      	b.n	8002e94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a18:	4b33      	ldr	r3, [pc, #204]	; (8002ae8 <HAL_RCC_OscConfig+0x4f8>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1f0      	bne.n	8002a06 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0308 	and.w	r3, r3, #8
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d036      	beq.n	8002a9e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	695b      	ldr	r3, [r3, #20]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d019      	beq.n	8002a6c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a38:	4b2b      	ldr	r3, [pc, #172]	; (8002ae8 <HAL_RCC_OscConfig+0x4f8>)
 8002a3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a3c:	4a2a      	ldr	r2, [pc, #168]	; (8002ae8 <HAL_RCC_OscConfig+0x4f8>)
 8002a3e:	f043 0301 	orr.w	r3, r3, #1
 8002a42:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a44:	f7fe fbc4 	bl	80011d0 <HAL_GetTick>
 8002a48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a4c:	f7fe fbc0 	bl	80011d0 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e21a      	b.n	8002e94 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a5e:	4b22      	ldr	r3, [pc, #136]	; (8002ae8 <HAL_RCC_OscConfig+0x4f8>)
 8002a60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0f0      	beq.n	8002a4c <HAL_RCC_OscConfig+0x45c>
 8002a6a:	e018      	b.n	8002a9e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a6c:	4b1e      	ldr	r3, [pc, #120]	; (8002ae8 <HAL_RCC_OscConfig+0x4f8>)
 8002a6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a70:	4a1d      	ldr	r2, [pc, #116]	; (8002ae8 <HAL_RCC_OscConfig+0x4f8>)
 8002a72:	f023 0301 	bic.w	r3, r3, #1
 8002a76:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a78:	f7fe fbaa 	bl	80011d0 <HAL_GetTick>
 8002a7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a80:	f7fe fba6 	bl	80011d0 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e200      	b.n	8002e94 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a92:	4b15      	ldr	r3, [pc, #84]	; (8002ae8 <HAL_RCC_OscConfig+0x4f8>)
 8002a94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1f0      	bne.n	8002a80 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0320 	and.w	r3, r3, #32
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d039      	beq.n	8002b1e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d01c      	beq.n	8002aec <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ab2:	4b0d      	ldr	r3, [pc, #52]	; (8002ae8 <HAL_RCC_OscConfig+0x4f8>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a0c      	ldr	r2, [pc, #48]	; (8002ae8 <HAL_RCC_OscConfig+0x4f8>)
 8002ab8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002abc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002abe:	f7fe fb87 	bl	80011d0 <HAL_GetTick>
 8002ac2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ac6:	f7fe fb83 	bl	80011d0 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e1dd      	b.n	8002e94 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ad8:	4b03      	ldr	r3, [pc, #12]	; (8002ae8 <HAL_RCC_OscConfig+0x4f8>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0f0      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x4d6>
 8002ae4:	e01b      	b.n	8002b1e <HAL_RCC_OscConfig+0x52e>
 8002ae6:	bf00      	nop
 8002ae8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002aec:	4b9b      	ldr	r3, [pc, #620]	; (8002d5c <HAL_RCC_OscConfig+0x76c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a9a      	ldr	r2, [pc, #616]	; (8002d5c <HAL_RCC_OscConfig+0x76c>)
 8002af2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002af6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002af8:	f7fe fb6a 	bl	80011d0 <HAL_GetTick>
 8002afc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b00:	f7fe fb66 	bl	80011d0 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e1c0      	b.n	8002e94 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b12:	4b92      	ldr	r3, [pc, #584]	; (8002d5c <HAL_RCC_OscConfig+0x76c>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1f0      	bne.n	8002b00 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0304 	and.w	r3, r3, #4
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f000 8081 	beq.w	8002c2e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b2c:	4b8c      	ldr	r3, [pc, #560]	; (8002d60 <HAL_RCC_OscConfig+0x770>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a8b      	ldr	r2, [pc, #556]	; (8002d60 <HAL_RCC_OscConfig+0x770>)
 8002b32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b36:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b38:	f7fe fb4a 	bl	80011d0 <HAL_GetTick>
 8002b3c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b40:	f7fe fb46 	bl	80011d0 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b64      	cmp	r3, #100	; 0x64
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e1a0      	b.n	8002e94 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b52:	4b83      	ldr	r3, [pc, #524]	; (8002d60 <HAL_RCC_OscConfig+0x770>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0f0      	beq.n	8002b40 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d106      	bne.n	8002b74 <HAL_RCC_OscConfig+0x584>
 8002b66:	4b7d      	ldr	r3, [pc, #500]	; (8002d5c <HAL_RCC_OscConfig+0x76c>)
 8002b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6a:	4a7c      	ldr	r2, [pc, #496]	; (8002d5c <HAL_RCC_OscConfig+0x76c>)
 8002b6c:	f043 0301 	orr.w	r3, r3, #1
 8002b70:	6713      	str	r3, [r2, #112]	; 0x70
 8002b72:	e02d      	b.n	8002bd0 <HAL_RCC_OscConfig+0x5e0>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d10c      	bne.n	8002b96 <HAL_RCC_OscConfig+0x5a6>
 8002b7c:	4b77      	ldr	r3, [pc, #476]	; (8002d5c <HAL_RCC_OscConfig+0x76c>)
 8002b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b80:	4a76      	ldr	r2, [pc, #472]	; (8002d5c <HAL_RCC_OscConfig+0x76c>)
 8002b82:	f023 0301 	bic.w	r3, r3, #1
 8002b86:	6713      	str	r3, [r2, #112]	; 0x70
 8002b88:	4b74      	ldr	r3, [pc, #464]	; (8002d5c <HAL_RCC_OscConfig+0x76c>)
 8002b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8c:	4a73      	ldr	r2, [pc, #460]	; (8002d5c <HAL_RCC_OscConfig+0x76c>)
 8002b8e:	f023 0304 	bic.w	r3, r3, #4
 8002b92:	6713      	str	r3, [r2, #112]	; 0x70
 8002b94:	e01c      	b.n	8002bd0 <HAL_RCC_OscConfig+0x5e0>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	2b05      	cmp	r3, #5
 8002b9c:	d10c      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x5c8>
 8002b9e:	4b6f      	ldr	r3, [pc, #444]	; (8002d5c <HAL_RCC_OscConfig+0x76c>)
 8002ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba2:	4a6e      	ldr	r2, [pc, #440]	; (8002d5c <HAL_RCC_OscConfig+0x76c>)
 8002ba4:	f043 0304 	orr.w	r3, r3, #4
 8002ba8:	6713      	str	r3, [r2, #112]	; 0x70
 8002baa:	4b6c      	ldr	r3, [pc, #432]	; (8002d5c <HAL_RCC_OscConfig+0x76c>)
 8002bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bae:	4a6b      	ldr	r2, [pc, #428]	; (8002d5c <HAL_RCC_OscConfig+0x76c>)
 8002bb0:	f043 0301 	orr.w	r3, r3, #1
 8002bb4:	6713      	str	r3, [r2, #112]	; 0x70
 8002bb6:	e00b      	b.n	8002bd0 <HAL_RCC_OscConfig+0x5e0>
 8002bb8:	4b68      	ldr	r3, [pc, #416]	; (8002d5c <HAL_RCC_OscConfig+0x76c>)
 8002bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bbc:	4a67      	ldr	r2, [pc, #412]	; (8002d5c <HAL_RCC_OscConfig+0x76c>)
 8002bbe:	f023 0301 	bic.w	r3, r3, #1
 8002bc2:	6713      	str	r3, [r2, #112]	; 0x70
 8002bc4:	4b65      	ldr	r3, [pc, #404]	; (8002d5c <HAL_RCC_OscConfig+0x76c>)
 8002bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc8:	4a64      	ldr	r2, [pc, #400]	; (8002d5c <HAL_RCC_OscConfig+0x76c>)
 8002bca:	f023 0304 	bic.w	r3, r3, #4
 8002bce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d015      	beq.n	8002c04 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd8:	f7fe fafa 	bl	80011d0 <HAL_GetTick>
 8002bdc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bde:	e00a      	b.n	8002bf6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002be0:	f7fe faf6 	bl	80011d0 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e14e      	b.n	8002e94 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bf6:	4b59      	ldr	r3, [pc, #356]	; (8002d5c <HAL_RCC_OscConfig+0x76c>)
 8002bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d0ee      	beq.n	8002be0 <HAL_RCC_OscConfig+0x5f0>
 8002c02:	e014      	b.n	8002c2e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c04:	f7fe fae4 	bl	80011d0 <HAL_GetTick>
 8002c08:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c0a:	e00a      	b.n	8002c22 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c0c:	f7fe fae0 	bl	80011d0 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e138      	b.n	8002e94 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c22:	4b4e      	ldr	r3, [pc, #312]	; (8002d5c <HAL_RCC_OscConfig+0x76c>)
 8002c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1ee      	bne.n	8002c0c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 812d 	beq.w	8002e92 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002c38:	4b48      	ldr	r3, [pc, #288]	; (8002d5c <HAL_RCC_OscConfig+0x76c>)
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c40:	2b18      	cmp	r3, #24
 8002c42:	f000 80bd 	beq.w	8002dc0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	f040 809e 	bne.w	8002d8c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c50:	4b42      	ldr	r3, [pc, #264]	; (8002d5c <HAL_RCC_OscConfig+0x76c>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a41      	ldr	r2, [pc, #260]	; (8002d5c <HAL_RCC_OscConfig+0x76c>)
 8002c56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c5c:	f7fe fab8 	bl	80011d0 <HAL_GetTick>
 8002c60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c62:	e008      	b.n	8002c76 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c64:	f7fe fab4 	bl	80011d0 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e10e      	b.n	8002e94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c76:	4b39      	ldr	r3, [pc, #228]	; (8002d5c <HAL_RCC_OscConfig+0x76c>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1f0      	bne.n	8002c64 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c82:	4b36      	ldr	r3, [pc, #216]	; (8002d5c <HAL_RCC_OscConfig+0x76c>)
 8002c84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c86:	4b37      	ldr	r3, [pc, #220]	; (8002d64 <HAL_RCC_OscConfig+0x774>)
 8002c88:	4013      	ands	r3, r2
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c92:	0112      	lsls	r2, r2, #4
 8002c94:	430a      	orrs	r2, r1
 8002c96:	4931      	ldr	r1, [pc, #196]	; (8002d5c <HAL_RCC_OscConfig+0x76c>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	628b      	str	r3, [r1, #40]	; 0x28
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002caa:	3b01      	subs	r3, #1
 8002cac:	025b      	lsls	r3, r3, #9
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	431a      	orrs	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	041b      	lsls	r3, r3, #16
 8002cba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	061b      	lsls	r3, r3, #24
 8002cc8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002ccc:	4923      	ldr	r1, [pc, #140]	; (8002d5c <HAL_RCC_OscConfig+0x76c>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002cd2:	4b22      	ldr	r3, [pc, #136]	; (8002d5c <HAL_RCC_OscConfig+0x76c>)
 8002cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd6:	4a21      	ldr	r2, [pc, #132]	; (8002d5c <HAL_RCC_OscConfig+0x76c>)
 8002cd8:	f023 0301 	bic.w	r3, r3, #1
 8002cdc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002cde:	4b1f      	ldr	r3, [pc, #124]	; (8002d5c <HAL_RCC_OscConfig+0x76c>)
 8002ce0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ce2:	4b21      	ldr	r3, [pc, #132]	; (8002d68 <HAL_RCC_OscConfig+0x778>)
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002cea:	00d2      	lsls	r2, r2, #3
 8002cec:	491b      	ldr	r1, [pc, #108]	; (8002d5c <HAL_RCC_OscConfig+0x76c>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002cf2:	4b1a      	ldr	r3, [pc, #104]	; (8002d5c <HAL_RCC_OscConfig+0x76c>)
 8002cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf6:	f023 020c 	bic.w	r2, r3, #12
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	4917      	ldr	r1, [pc, #92]	; (8002d5c <HAL_RCC_OscConfig+0x76c>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002d04:	4b15      	ldr	r3, [pc, #84]	; (8002d5c <HAL_RCC_OscConfig+0x76c>)
 8002d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d08:	f023 0202 	bic.w	r2, r3, #2
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d10:	4912      	ldr	r1, [pc, #72]	; (8002d5c <HAL_RCC_OscConfig+0x76c>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002d16:	4b11      	ldr	r3, [pc, #68]	; (8002d5c <HAL_RCC_OscConfig+0x76c>)
 8002d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1a:	4a10      	ldr	r2, [pc, #64]	; (8002d5c <HAL_RCC_OscConfig+0x76c>)
 8002d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d22:	4b0e      	ldr	r3, [pc, #56]	; (8002d5c <HAL_RCC_OscConfig+0x76c>)
 8002d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d26:	4a0d      	ldr	r2, [pc, #52]	; (8002d5c <HAL_RCC_OscConfig+0x76c>)
 8002d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d2c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002d2e:	4b0b      	ldr	r3, [pc, #44]	; (8002d5c <HAL_RCC_OscConfig+0x76c>)
 8002d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d32:	4a0a      	ldr	r2, [pc, #40]	; (8002d5c <HAL_RCC_OscConfig+0x76c>)
 8002d34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d38:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002d3a:	4b08      	ldr	r3, [pc, #32]	; (8002d5c <HAL_RCC_OscConfig+0x76c>)
 8002d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3e:	4a07      	ldr	r2, [pc, #28]	; (8002d5c <HAL_RCC_OscConfig+0x76c>)
 8002d40:	f043 0301 	orr.w	r3, r3, #1
 8002d44:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d46:	4b05      	ldr	r3, [pc, #20]	; (8002d5c <HAL_RCC_OscConfig+0x76c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a04      	ldr	r2, [pc, #16]	; (8002d5c <HAL_RCC_OscConfig+0x76c>)
 8002d4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d52:	f7fe fa3d 	bl	80011d0 <HAL_GetTick>
 8002d56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d58:	e011      	b.n	8002d7e <HAL_RCC_OscConfig+0x78e>
 8002d5a:	bf00      	nop
 8002d5c:	58024400 	.word	0x58024400
 8002d60:	58024800 	.word	0x58024800
 8002d64:	fffffc0c 	.word	0xfffffc0c
 8002d68:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d6c:	f7fe fa30 	bl	80011d0 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e08a      	b.n	8002e94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d7e:	4b47      	ldr	r3, [pc, #284]	; (8002e9c <HAL_RCC_OscConfig+0x8ac>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d0f0      	beq.n	8002d6c <HAL_RCC_OscConfig+0x77c>
 8002d8a:	e082      	b.n	8002e92 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d8c:	4b43      	ldr	r3, [pc, #268]	; (8002e9c <HAL_RCC_OscConfig+0x8ac>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a42      	ldr	r2, [pc, #264]	; (8002e9c <HAL_RCC_OscConfig+0x8ac>)
 8002d92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d98:	f7fe fa1a 	bl	80011d0 <HAL_GetTick>
 8002d9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002da0:	f7fe fa16 	bl	80011d0 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e070      	b.n	8002e94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002db2:	4b3a      	ldr	r3, [pc, #232]	; (8002e9c <HAL_RCC_OscConfig+0x8ac>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d1f0      	bne.n	8002da0 <HAL_RCC_OscConfig+0x7b0>
 8002dbe:	e068      	b.n	8002e92 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002dc0:	4b36      	ldr	r3, [pc, #216]	; (8002e9c <HAL_RCC_OscConfig+0x8ac>)
 8002dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002dc6:	4b35      	ldr	r3, [pc, #212]	; (8002e9c <HAL_RCC_OscConfig+0x8ac>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dca:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d031      	beq.n	8002e38 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	f003 0203 	and.w	r2, r3, #3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d12a      	bne.n	8002e38 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	091b      	lsrs	r3, r3, #4
 8002de6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d122      	bne.n	8002e38 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d11a      	bne.n	8002e38 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	0a5b      	lsrs	r3, r3, #9
 8002e06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e0e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d111      	bne.n	8002e38 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	0c1b      	lsrs	r3, r3, #16
 8002e18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e20:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d108      	bne.n	8002e38 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	0e1b      	lsrs	r3, r3, #24
 8002e2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e32:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d001      	beq.n	8002e3c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e02b      	b.n	8002e94 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002e3c:	4b17      	ldr	r3, [pc, #92]	; (8002e9c <HAL_RCC_OscConfig+0x8ac>)
 8002e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e40:	08db      	lsrs	r3, r3, #3
 8002e42:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002e46:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d01f      	beq.n	8002e92 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002e52:	4b12      	ldr	r3, [pc, #72]	; (8002e9c <HAL_RCC_OscConfig+0x8ac>)
 8002e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e56:	4a11      	ldr	r2, [pc, #68]	; (8002e9c <HAL_RCC_OscConfig+0x8ac>)
 8002e58:	f023 0301 	bic.w	r3, r3, #1
 8002e5c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e5e:	f7fe f9b7 	bl	80011d0 <HAL_GetTick>
 8002e62:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002e64:	bf00      	nop
 8002e66:	f7fe f9b3 	bl	80011d0 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d0f9      	beq.n	8002e66 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002e72:	4b0a      	ldr	r3, [pc, #40]	; (8002e9c <HAL_RCC_OscConfig+0x8ac>)
 8002e74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e76:	4b0a      	ldr	r3, [pc, #40]	; (8002ea0 <HAL_RCC_OscConfig+0x8b0>)
 8002e78:	4013      	ands	r3, r2
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e7e:	00d2      	lsls	r2, r2, #3
 8002e80:	4906      	ldr	r1, [pc, #24]	; (8002e9c <HAL_RCC_OscConfig+0x8ac>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002e86:	4b05      	ldr	r3, [pc, #20]	; (8002e9c <HAL_RCC_OscConfig+0x8ac>)
 8002e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8a:	4a04      	ldr	r2, [pc, #16]	; (8002e9c <HAL_RCC_OscConfig+0x8ac>)
 8002e8c:	f043 0301 	orr.w	r3, r3, #1
 8002e90:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3730      	adds	r7, #48	; 0x30
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	58024400 	.word	0x58024400
 8002ea0:	ffff0007 	.word	0xffff0007

08002ea4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d101      	bne.n	8002eb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e19c      	b.n	80031f2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002eb8:	4b8a      	ldr	r3, [pc, #552]	; (80030e4 <HAL_RCC_ClockConfig+0x240>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 030f 	and.w	r3, r3, #15
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d910      	bls.n	8002ee8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ec6:	4b87      	ldr	r3, [pc, #540]	; (80030e4 <HAL_RCC_ClockConfig+0x240>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f023 020f 	bic.w	r2, r3, #15
 8002ece:	4985      	ldr	r1, [pc, #532]	; (80030e4 <HAL_RCC_ClockConfig+0x240>)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ed6:	4b83      	ldr	r3, [pc, #524]	; (80030e4 <HAL_RCC_ClockConfig+0x240>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 030f 	and.w	r3, r3, #15
 8002ede:	683a      	ldr	r2, [r7, #0]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d001      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e184      	b.n	80031f2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0304 	and.w	r3, r3, #4
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d010      	beq.n	8002f16 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	691a      	ldr	r2, [r3, #16]
 8002ef8:	4b7b      	ldr	r3, [pc, #492]	; (80030e8 <HAL_RCC_ClockConfig+0x244>)
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d908      	bls.n	8002f16 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f04:	4b78      	ldr	r3, [pc, #480]	; (80030e8 <HAL_RCC_ClockConfig+0x244>)
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	4975      	ldr	r1, [pc, #468]	; (80030e8 <HAL_RCC_ClockConfig+0x244>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0308 	and.w	r3, r3, #8
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d010      	beq.n	8002f44 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	695a      	ldr	r2, [r3, #20]
 8002f26:	4b70      	ldr	r3, [pc, #448]	; (80030e8 <HAL_RCC_ClockConfig+0x244>)
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d908      	bls.n	8002f44 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f32:	4b6d      	ldr	r3, [pc, #436]	; (80030e8 <HAL_RCC_ClockConfig+0x244>)
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	496a      	ldr	r1, [pc, #424]	; (80030e8 <HAL_RCC_ClockConfig+0x244>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0310 	and.w	r3, r3, #16
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d010      	beq.n	8002f72 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	699a      	ldr	r2, [r3, #24]
 8002f54:	4b64      	ldr	r3, [pc, #400]	; (80030e8 <HAL_RCC_ClockConfig+0x244>)
 8002f56:	69db      	ldr	r3, [r3, #28]
 8002f58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d908      	bls.n	8002f72 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f60:	4b61      	ldr	r3, [pc, #388]	; (80030e8 <HAL_RCC_ClockConfig+0x244>)
 8002f62:	69db      	ldr	r3, [r3, #28]
 8002f64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	495e      	ldr	r1, [pc, #376]	; (80030e8 <HAL_RCC_ClockConfig+0x244>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0320 	and.w	r3, r3, #32
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d010      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	69da      	ldr	r2, [r3, #28]
 8002f82:	4b59      	ldr	r3, [pc, #356]	; (80030e8 <HAL_RCC_ClockConfig+0x244>)
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d908      	bls.n	8002fa0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002f8e:	4b56      	ldr	r3, [pc, #344]	; (80030e8 <HAL_RCC_ClockConfig+0x244>)
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	4953      	ldr	r1, [pc, #332]	; (80030e8 <HAL_RCC_ClockConfig+0x244>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d010      	beq.n	8002fce <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68da      	ldr	r2, [r3, #12]
 8002fb0:	4b4d      	ldr	r3, [pc, #308]	; (80030e8 <HAL_RCC_ClockConfig+0x244>)
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	f003 030f 	and.w	r3, r3, #15
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d908      	bls.n	8002fce <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fbc:	4b4a      	ldr	r3, [pc, #296]	; (80030e8 <HAL_RCC_ClockConfig+0x244>)
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	f023 020f 	bic.w	r2, r3, #15
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	4947      	ldr	r1, [pc, #284]	; (80030e8 <HAL_RCC_ClockConfig+0x244>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d055      	beq.n	8003086 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002fda:	4b43      	ldr	r3, [pc, #268]	; (80030e8 <HAL_RCC_ClockConfig+0x244>)
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	4940      	ldr	r1, [pc, #256]	; (80030e8 <HAL_RCC_ClockConfig+0x244>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d107      	bne.n	8003004 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ff4:	4b3c      	ldr	r3, [pc, #240]	; (80030e8 <HAL_RCC_ClockConfig+0x244>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d121      	bne.n	8003044 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e0f6      	b.n	80031f2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	2b03      	cmp	r3, #3
 800300a:	d107      	bne.n	800301c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800300c:	4b36      	ldr	r3, [pc, #216]	; (80030e8 <HAL_RCC_ClockConfig+0x244>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d115      	bne.n	8003044 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e0ea      	b.n	80031f2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d107      	bne.n	8003034 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003024:	4b30      	ldr	r3, [pc, #192]	; (80030e8 <HAL_RCC_ClockConfig+0x244>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302c:	2b00      	cmp	r3, #0
 800302e:	d109      	bne.n	8003044 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e0de      	b.n	80031f2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003034:	4b2c      	ldr	r3, [pc, #176]	; (80030e8 <HAL_RCC_ClockConfig+0x244>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0304 	and.w	r3, r3, #4
 800303c:	2b00      	cmp	r3, #0
 800303e:	d101      	bne.n	8003044 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e0d6      	b.n	80031f2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003044:	4b28      	ldr	r3, [pc, #160]	; (80030e8 <HAL_RCC_ClockConfig+0x244>)
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	f023 0207 	bic.w	r2, r3, #7
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	4925      	ldr	r1, [pc, #148]	; (80030e8 <HAL_RCC_ClockConfig+0x244>)
 8003052:	4313      	orrs	r3, r2
 8003054:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003056:	f7fe f8bb 	bl	80011d0 <HAL_GetTick>
 800305a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800305c:	e00a      	b.n	8003074 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800305e:	f7fe f8b7 	bl	80011d0 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	f241 3288 	movw	r2, #5000	; 0x1388
 800306c:	4293      	cmp	r3, r2
 800306e:	d901      	bls.n	8003074 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e0be      	b.n	80031f2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003074:	4b1c      	ldr	r3, [pc, #112]	; (80030e8 <HAL_RCC_ClockConfig+0x244>)
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	429a      	cmp	r2, r3
 8003084:	d1eb      	bne.n	800305e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d010      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	68da      	ldr	r2, [r3, #12]
 8003096:	4b14      	ldr	r3, [pc, #80]	; (80030e8 <HAL_RCC_ClockConfig+0x244>)
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	f003 030f 	and.w	r3, r3, #15
 800309e:	429a      	cmp	r2, r3
 80030a0:	d208      	bcs.n	80030b4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030a2:	4b11      	ldr	r3, [pc, #68]	; (80030e8 <HAL_RCC_ClockConfig+0x244>)
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	f023 020f 	bic.w	r2, r3, #15
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	490e      	ldr	r1, [pc, #56]	; (80030e8 <HAL_RCC_ClockConfig+0x244>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030b4:	4b0b      	ldr	r3, [pc, #44]	; (80030e4 <HAL_RCC_ClockConfig+0x240>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 030f 	and.w	r3, r3, #15
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d214      	bcs.n	80030ec <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030c2:	4b08      	ldr	r3, [pc, #32]	; (80030e4 <HAL_RCC_ClockConfig+0x240>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f023 020f 	bic.w	r2, r3, #15
 80030ca:	4906      	ldr	r1, [pc, #24]	; (80030e4 <HAL_RCC_ClockConfig+0x240>)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d2:	4b04      	ldr	r3, [pc, #16]	; (80030e4 <HAL_RCC_ClockConfig+0x240>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 030f 	and.w	r3, r3, #15
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d005      	beq.n	80030ec <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e086      	b.n	80031f2 <HAL_RCC_ClockConfig+0x34e>
 80030e4:	52002000 	.word	0x52002000
 80030e8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0304 	and.w	r3, r3, #4
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d010      	beq.n	800311a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	691a      	ldr	r2, [r3, #16]
 80030fc:	4b3f      	ldr	r3, [pc, #252]	; (80031fc <HAL_RCC_ClockConfig+0x358>)
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003104:	429a      	cmp	r2, r3
 8003106:	d208      	bcs.n	800311a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003108:	4b3c      	ldr	r3, [pc, #240]	; (80031fc <HAL_RCC_ClockConfig+0x358>)
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	4939      	ldr	r1, [pc, #228]	; (80031fc <HAL_RCC_ClockConfig+0x358>)
 8003116:	4313      	orrs	r3, r2
 8003118:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0308 	and.w	r3, r3, #8
 8003122:	2b00      	cmp	r3, #0
 8003124:	d010      	beq.n	8003148 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	695a      	ldr	r2, [r3, #20]
 800312a:	4b34      	ldr	r3, [pc, #208]	; (80031fc <HAL_RCC_ClockConfig+0x358>)
 800312c:	69db      	ldr	r3, [r3, #28]
 800312e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003132:	429a      	cmp	r2, r3
 8003134:	d208      	bcs.n	8003148 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003136:	4b31      	ldr	r3, [pc, #196]	; (80031fc <HAL_RCC_ClockConfig+0x358>)
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	492e      	ldr	r1, [pc, #184]	; (80031fc <HAL_RCC_ClockConfig+0x358>)
 8003144:	4313      	orrs	r3, r2
 8003146:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0310 	and.w	r3, r3, #16
 8003150:	2b00      	cmp	r3, #0
 8003152:	d010      	beq.n	8003176 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	699a      	ldr	r2, [r3, #24]
 8003158:	4b28      	ldr	r3, [pc, #160]	; (80031fc <HAL_RCC_ClockConfig+0x358>)
 800315a:	69db      	ldr	r3, [r3, #28]
 800315c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003160:	429a      	cmp	r2, r3
 8003162:	d208      	bcs.n	8003176 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003164:	4b25      	ldr	r3, [pc, #148]	; (80031fc <HAL_RCC_ClockConfig+0x358>)
 8003166:	69db      	ldr	r3, [r3, #28]
 8003168:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	4922      	ldr	r1, [pc, #136]	; (80031fc <HAL_RCC_ClockConfig+0x358>)
 8003172:	4313      	orrs	r3, r2
 8003174:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0320 	and.w	r3, r3, #32
 800317e:	2b00      	cmp	r3, #0
 8003180:	d010      	beq.n	80031a4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	69da      	ldr	r2, [r3, #28]
 8003186:	4b1d      	ldr	r3, [pc, #116]	; (80031fc <HAL_RCC_ClockConfig+0x358>)
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800318e:	429a      	cmp	r2, r3
 8003190:	d208      	bcs.n	80031a4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003192:	4b1a      	ldr	r3, [pc, #104]	; (80031fc <HAL_RCC_ClockConfig+0x358>)
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	4917      	ldr	r1, [pc, #92]	; (80031fc <HAL_RCC_ClockConfig+0x358>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80031a4:	f000 f834 	bl	8003210 <HAL_RCC_GetSysClockFreq>
 80031a8:	4602      	mov	r2, r0
 80031aa:	4b14      	ldr	r3, [pc, #80]	; (80031fc <HAL_RCC_ClockConfig+0x358>)
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	0a1b      	lsrs	r3, r3, #8
 80031b0:	f003 030f 	and.w	r3, r3, #15
 80031b4:	4912      	ldr	r1, [pc, #72]	; (8003200 <HAL_RCC_ClockConfig+0x35c>)
 80031b6:	5ccb      	ldrb	r3, [r1, r3]
 80031b8:	f003 031f 	and.w	r3, r3, #31
 80031bc:	fa22 f303 	lsr.w	r3, r2, r3
 80031c0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031c2:	4b0e      	ldr	r3, [pc, #56]	; (80031fc <HAL_RCC_ClockConfig+0x358>)
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	f003 030f 	and.w	r3, r3, #15
 80031ca:	4a0d      	ldr	r2, [pc, #52]	; (8003200 <HAL_RCC_ClockConfig+0x35c>)
 80031cc:	5cd3      	ldrb	r3, [r2, r3]
 80031ce:	f003 031f 	and.w	r3, r3, #31
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	fa22 f303 	lsr.w	r3, r2, r3
 80031d8:	4a0a      	ldr	r2, [pc, #40]	; (8003204 <HAL_RCC_ClockConfig+0x360>)
 80031da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80031dc:	4a0a      	ldr	r2, [pc, #40]	; (8003208 <HAL_RCC_ClockConfig+0x364>)
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80031e2:	4b0a      	ldr	r3, [pc, #40]	; (800320c <HAL_RCC_ClockConfig+0x368>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7fd ffa8 	bl	800113c <HAL_InitTick>
 80031ec:	4603      	mov	r3, r0
 80031ee:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80031f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3718      	adds	r7, #24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	58024400 	.word	0x58024400
 8003200:	08006a44 	.word	0x08006a44
 8003204:	24000004 	.word	0x24000004
 8003208:	24000000 	.word	0x24000000
 800320c:	24000008 	.word	0x24000008

08003210 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003210:	b480      	push	{r7}
 8003212:	b089      	sub	sp, #36	; 0x24
 8003214:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003216:	4bb3      	ldr	r3, [pc, #716]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800321e:	2b18      	cmp	r3, #24
 8003220:	f200 8155 	bhi.w	80034ce <HAL_RCC_GetSysClockFreq+0x2be>
 8003224:	a201      	add	r2, pc, #4	; (adr r2, 800322c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800322a:	bf00      	nop
 800322c:	08003291 	.word	0x08003291
 8003230:	080034cf 	.word	0x080034cf
 8003234:	080034cf 	.word	0x080034cf
 8003238:	080034cf 	.word	0x080034cf
 800323c:	080034cf 	.word	0x080034cf
 8003240:	080034cf 	.word	0x080034cf
 8003244:	080034cf 	.word	0x080034cf
 8003248:	080034cf 	.word	0x080034cf
 800324c:	080032b7 	.word	0x080032b7
 8003250:	080034cf 	.word	0x080034cf
 8003254:	080034cf 	.word	0x080034cf
 8003258:	080034cf 	.word	0x080034cf
 800325c:	080034cf 	.word	0x080034cf
 8003260:	080034cf 	.word	0x080034cf
 8003264:	080034cf 	.word	0x080034cf
 8003268:	080034cf 	.word	0x080034cf
 800326c:	080032bd 	.word	0x080032bd
 8003270:	080034cf 	.word	0x080034cf
 8003274:	080034cf 	.word	0x080034cf
 8003278:	080034cf 	.word	0x080034cf
 800327c:	080034cf 	.word	0x080034cf
 8003280:	080034cf 	.word	0x080034cf
 8003284:	080034cf 	.word	0x080034cf
 8003288:	080034cf 	.word	0x080034cf
 800328c:	080032c3 	.word	0x080032c3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003290:	4b94      	ldr	r3, [pc, #592]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0320 	and.w	r3, r3, #32
 8003298:	2b00      	cmp	r3, #0
 800329a:	d009      	beq.n	80032b0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800329c:	4b91      	ldr	r3, [pc, #580]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	08db      	lsrs	r3, r3, #3
 80032a2:	f003 0303 	and.w	r3, r3, #3
 80032a6:	4a90      	ldr	r2, [pc, #576]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80032a8:	fa22 f303 	lsr.w	r3, r2, r3
 80032ac:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80032ae:	e111      	b.n	80034d4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80032b0:	4b8d      	ldr	r3, [pc, #564]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80032b2:	61bb      	str	r3, [r7, #24]
      break;
 80032b4:	e10e      	b.n	80034d4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80032b6:	4b8d      	ldr	r3, [pc, #564]	; (80034ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 80032b8:	61bb      	str	r3, [r7, #24]
      break;
 80032ba:	e10b      	b.n	80034d4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80032bc:	4b8c      	ldr	r3, [pc, #560]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80032be:	61bb      	str	r3, [r7, #24]
      break;
 80032c0:	e108      	b.n	80034d4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80032c2:	4b88      	ldr	r3, [pc, #544]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c6:	f003 0303 	and.w	r3, r3, #3
 80032ca:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80032cc:	4b85      	ldr	r3, [pc, #532]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d0:	091b      	lsrs	r3, r3, #4
 80032d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032d6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80032d8:	4b82      	ldr	r3, [pc, #520]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80032e2:	4b80      	ldr	r3, [pc, #512]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e6:	08db      	lsrs	r3, r3, #3
 80032e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	fb02 f303 	mul.w	r3, r2, r3
 80032f2:	ee07 3a90 	vmov	s15, r3
 80032f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032fa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	2b00      	cmp	r3, #0
 8003302:	f000 80e1 	beq.w	80034c8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	2b02      	cmp	r3, #2
 800330a:	f000 8083 	beq.w	8003414 <HAL_RCC_GetSysClockFreq+0x204>
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	2b02      	cmp	r3, #2
 8003312:	f200 80a1 	bhi.w	8003458 <HAL_RCC_GetSysClockFreq+0x248>
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d003      	beq.n	8003324 <HAL_RCC_GetSysClockFreq+0x114>
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d056      	beq.n	80033d0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003322:	e099      	b.n	8003458 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003324:	4b6f      	ldr	r3, [pc, #444]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0320 	and.w	r3, r3, #32
 800332c:	2b00      	cmp	r3, #0
 800332e:	d02d      	beq.n	800338c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003330:	4b6c      	ldr	r3, [pc, #432]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	08db      	lsrs	r3, r3, #3
 8003336:	f003 0303 	and.w	r3, r3, #3
 800333a:	4a6b      	ldr	r2, [pc, #428]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800333c:	fa22 f303 	lsr.w	r3, r2, r3
 8003340:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	ee07 3a90 	vmov	s15, r3
 8003348:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	ee07 3a90 	vmov	s15, r3
 8003352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003356:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800335a:	4b62      	ldr	r3, [pc, #392]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800335c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003362:	ee07 3a90 	vmov	s15, r3
 8003366:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800336a:	ed97 6a02 	vldr	s12, [r7, #8]
 800336e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80034f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003372:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003376:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800337a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800337e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003386:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800338a:	e087      	b.n	800349c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	ee07 3a90 	vmov	s15, r3
 8003392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003396:	eddf 6a58 	vldr	s13, [pc, #352]	; 80034f8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800339a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800339e:	4b51      	ldr	r3, [pc, #324]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033a6:	ee07 3a90 	vmov	s15, r3
 80033aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80033b2:	eddf 5a50 	vldr	s11, [pc, #320]	; 80034f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80033ce:	e065      	b.n	800349c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	ee07 3a90 	vmov	s15, r3
 80033d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033da:	eddf 6a48 	vldr	s13, [pc, #288]	; 80034fc <HAL_RCC_GetSysClockFreq+0x2ec>
 80033de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033e2:	4b40      	ldr	r3, [pc, #256]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033ea:	ee07 3a90 	vmov	s15, r3
 80033ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80033f6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80034f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003402:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800340a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800340e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003412:	e043      	b.n	800349c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	ee07 3a90 	vmov	s15, r3
 800341a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800341e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003500 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003422:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003426:	4b2f      	ldr	r3, [pc, #188]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800342e:	ee07 3a90 	vmov	s15, r3
 8003432:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003436:	ed97 6a02 	vldr	s12, [r7, #8]
 800343a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80034f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800343e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003442:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003446:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800344a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800344e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003452:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003456:	e021      	b.n	800349c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	ee07 3a90 	vmov	s15, r3
 800345e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003462:	eddf 6a26 	vldr	s13, [pc, #152]	; 80034fc <HAL_RCC_GetSysClockFreq+0x2ec>
 8003466:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800346a:	4b1e      	ldr	r3, [pc, #120]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800346c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003472:	ee07 3a90 	vmov	s15, r3
 8003476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800347a:	ed97 6a02 	vldr	s12, [r7, #8]
 800347e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80034f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003482:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003486:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800348a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800348e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003496:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800349a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800349c:	4b11      	ldr	r3, [pc, #68]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800349e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a0:	0a5b      	lsrs	r3, r3, #9
 80034a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034a6:	3301      	adds	r3, #1
 80034a8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	ee07 3a90 	vmov	s15, r3
 80034b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80034b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80034b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034c0:	ee17 3a90 	vmov	r3, s15
 80034c4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80034c6:	e005      	b.n	80034d4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80034c8:	2300      	movs	r3, #0
 80034ca:	61bb      	str	r3, [r7, #24]
      break;
 80034cc:	e002      	b.n	80034d4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80034ce:	4b07      	ldr	r3, [pc, #28]	; (80034ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 80034d0:	61bb      	str	r3, [r7, #24]
      break;
 80034d2:	bf00      	nop
  }

  return sysclockfreq;
 80034d4:	69bb      	ldr	r3, [r7, #24]
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3724      	adds	r7, #36	; 0x24
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	58024400 	.word	0x58024400
 80034e8:	03d09000 	.word	0x03d09000
 80034ec:	003d0900 	.word	0x003d0900
 80034f0:	007a1200 	.word	0x007a1200
 80034f4:	46000000 	.word	0x46000000
 80034f8:	4c742400 	.word	0x4c742400
 80034fc:	4a742400 	.word	0x4a742400
 8003500:	4af42400 	.word	0x4af42400

08003504 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800350a:	f7ff fe81 	bl	8003210 <HAL_RCC_GetSysClockFreq>
 800350e:	4602      	mov	r2, r0
 8003510:	4b10      	ldr	r3, [pc, #64]	; (8003554 <HAL_RCC_GetHCLKFreq+0x50>)
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	0a1b      	lsrs	r3, r3, #8
 8003516:	f003 030f 	and.w	r3, r3, #15
 800351a:	490f      	ldr	r1, [pc, #60]	; (8003558 <HAL_RCC_GetHCLKFreq+0x54>)
 800351c:	5ccb      	ldrb	r3, [r1, r3]
 800351e:	f003 031f 	and.w	r3, r3, #31
 8003522:	fa22 f303 	lsr.w	r3, r2, r3
 8003526:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003528:	4b0a      	ldr	r3, [pc, #40]	; (8003554 <HAL_RCC_GetHCLKFreq+0x50>)
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	f003 030f 	and.w	r3, r3, #15
 8003530:	4a09      	ldr	r2, [pc, #36]	; (8003558 <HAL_RCC_GetHCLKFreq+0x54>)
 8003532:	5cd3      	ldrb	r3, [r2, r3]
 8003534:	f003 031f 	and.w	r3, r3, #31
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	fa22 f303 	lsr.w	r3, r2, r3
 800353e:	4a07      	ldr	r2, [pc, #28]	; (800355c <HAL_RCC_GetHCLKFreq+0x58>)
 8003540:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003542:	4a07      	ldr	r2, [pc, #28]	; (8003560 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003548:	4b04      	ldr	r3, [pc, #16]	; (800355c <HAL_RCC_GetHCLKFreq+0x58>)
 800354a:	681b      	ldr	r3, [r3, #0]
}
 800354c:	4618      	mov	r0, r3
 800354e:	3708      	adds	r7, #8
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	58024400 	.word	0x58024400
 8003558:	08006a44 	.word	0x08006a44
 800355c:	24000004 	.word	0x24000004
 8003560:	24000000 	.word	0x24000000

08003564 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003568:	f7ff ffcc 	bl	8003504 <HAL_RCC_GetHCLKFreq>
 800356c:	4602      	mov	r2, r0
 800356e:	4b06      	ldr	r3, [pc, #24]	; (8003588 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	091b      	lsrs	r3, r3, #4
 8003574:	f003 0307 	and.w	r3, r3, #7
 8003578:	4904      	ldr	r1, [pc, #16]	; (800358c <HAL_RCC_GetPCLK1Freq+0x28>)
 800357a:	5ccb      	ldrb	r3, [r1, r3]
 800357c:	f003 031f 	and.w	r3, r3, #31
 8003580:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003584:	4618      	mov	r0, r3
 8003586:	bd80      	pop	{r7, pc}
 8003588:	58024400 	.word	0x58024400
 800358c:	08006a44 	.word	0x08006a44

08003590 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003594:	f7ff ffb6 	bl	8003504 <HAL_RCC_GetHCLKFreq>
 8003598:	4602      	mov	r2, r0
 800359a:	4b06      	ldr	r3, [pc, #24]	; (80035b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	0a1b      	lsrs	r3, r3, #8
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	4904      	ldr	r1, [pc, #16]	; (80035b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80035a6:	5ccb      	ldrb	r3, [r1, r3]
 80035a8:	f003 031f 	and.w	r3, r3, #31
 80035ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	58024400 	.word	0x58024400
 80035b8:	08006a44 	.word	0x08006a44

080035bc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035c0:	b0ca      	sub	sp, #296	; 0x128
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035c8:	2300      	movs	r3, #0
 80035ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035ce:	2300      	movs	r3, #0
 80035d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035dc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80035e0:	2500      	movs	r5, #0
 80035e2:	ea54 0305 	orrs.w	r3, r4, r5
 80035e6:	d049      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80035e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80035f2:	d02f      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80035f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80035f8:	d828      	bhi.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80035fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035fe:	d01a      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003600:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003604:	d822      	bhi.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800360a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800360e:	d007      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003610:	e01c      	b.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003612:	4bb8      	ldr	r3, [pc, #736]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003616:	4ab7      	ldr	r2, [pc, #732]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800361c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800361e:	e01a      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003620:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003624:	3308      	adds	r3, #8
 8003626:	2102      	movs	r1, #2
 8003628:	4618      	mov	r0, r3
 800362a:	f001 fc8f 	bl	8004f4c <RCCEx_PLL2_Config>
 800362e:	4603      	mov	r3, r0
 8003630:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003634:	e00f      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003636:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800363a:	3328      	adds	r3, #40	; 0x28
 800363c:	2102      	movs	r1, #2
 800363e:	4618      	mov	r0, r3
 8003640:	f001 fd36 	bl	80050b0 <RCCEx_PLL3_Config>
 8003644:	4603      	mov	r3, r0
 8003646:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800364a:	e004      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003652:	e000      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003654:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003656:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10a      	bne.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800365e:	4ba5      	ldr	r3, [pc, #660]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003662:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003666:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800366a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800366c:	4aa1      	ldr	r2, [pc, #644]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800366e:	430b      	orrs	r3, r1
 8003670:	6513      	str	r3, [r2, #80]	; 0x50
 8003672:	e003      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003674:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003678:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800367c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003684:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003688:	f04f 0900 	mov.w	r9, #0
 800368c:	ea58 0309 	orrs.w	r3, r8, r9
 8003690:	d047      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003692:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003698:	2b04      	cmp	r3, #4
 800369a:	d82a      	bhi.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800369c:	a201      	add	r2, pc, #4	; (adr r2, 80036a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800369e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a2:	bf00      	nop
 80036a4:	080036b9 	.word	0x080036b9
 80036a8:	080036c7 	.word	0x080036c7
 80036ac:	080036dd 	.word	0x080036dd
 80036b0:	080036fb 	.word	0x080036fb
 80036b4:	080036fb 	.word	0x080036fb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036b8:	4b8e      	ldr	r3, [pc, #568]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036bc:	4a8d      	ldr	r2, [pc, #564]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036c4:	e01a      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036ca:	3308      	adds	r3, #8
 80036cc:	2100      	movs	r1, #0
 80036ce:	4618      	mov	r0, r3
 80036d0:	f001 fc3c 	bl	8004f4c <RCCEx_PLL2_Config>
 80036d4:	4603      	mov	r3, r0
 80036d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036da:	e00f      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036e0:	3328      	adds	r3, #40	; 0x28
 80036e2:	2100      	movs	r1, #0
 80036e4:	4618      	mov	r0, r3
 80036e6:	f001 fce3 	bl	80050b0 <RCCEx_PLL3_Config>
 80036ea:	4603      	mov	r3, r0
 80036ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036f0:	e004      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80036f8:	e000      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80036fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003700:	2b00      	cmp	r3, #0
 8003702:	d10a      	bne.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003704:	4b7b      	ldr	r3, [pc, #492]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003708:	f023 0107 	bic.w	r1, r3, #7
 800370c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003712:	4a78      	ldr	r2, [pc, #480]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003714:	430b      	orrs	r3, r1
 8003716:	6513      	str	r3, [r2, #80]	; 0x50
 8003718:	e003      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800371a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800371e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800372a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800372e:	f04f 0b00 	mov.w	fp, #0
 8003732:	ea5a 030b 	orrs.w	r3, sl, fp
 8003736:	d04c      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003738:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800373c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800373e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003742:	d030      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003744:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003748:	d829      	bhi.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800374a:	2bc0      	cmp	r3, #192	; 0xc0
 800374c:	d02d      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800374e:	2bc0      	cmp	r3, #192	; 0xc0
 8003750:	d825      	bhi.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003752:	2b80      	cmp	r3, #128	; 0x80
 8003754:	d018      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003756:	2b80      	cmp	r3, #128	; 0x80
 8003758:	d821      	bhi.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800375a:	2b00      	cmp	r3, #0
 800375c:	d002      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800375e:	2b40      	cmp	r3, #64	; 0x40
 8003760:	d007      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003762:	e01c      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003764:	4b63      	ldr	r3, [pc, #396]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003768:	4a62      	ldr	r2, [pc, #392]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800376a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800376e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003770:	e01c      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003772:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003776:	3308      	adds	r3, #8
 8003778:	2100      	movs	r1, #0
 800377a:	4618      	mov	r0, r3
 800377c:	f001 fbe6 	bl	8004f4c <RCCEx_PLL2_Config>
 8003780:	4603      	mov	r3, r0
 8003782:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003786:	e011      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003788:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800378c:	3328      	adds	r3, #40	; 0x28
 800378e:	2100      	movs	r1, #0
 8003790:	4618      	mov	r0, r3
 8003792:	f001 fc8d 	bl	80050b0 <RCCEx_PLL3_Config>
 8003796:	4603      	mov	r3, r0
 8003798:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800379c:	e006      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80037a4:	e002      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80037a6:	bf00      	nop
 80037a8:	e000      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80037aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10a      	bne.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80037b4:	4b4f      	ldr	r3, [pc, #316]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037b8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80037bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c2:	4a4c      	ldr	r2, [pc, #304]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037c4:	430b      	orrs	r3, r1
 80037c6:	6513      	str	r3, [r2, #80]	; 0x50
 80037c8:	e003      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80037d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037da:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80037de:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80037e2:	2300      	movs	r3, #0
 80037e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80037e8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80037ec:	460b      	mov	r3, r1
 80037ee:	4313      	orrs	r3, r2
 80037f0:	d053      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80037f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80037fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037fe:	d035      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003800:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003804:	d82e      	bhi.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003806:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800380a:	d031      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800380c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003810:	d828      	bhi.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003812:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003816:	d01a      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003818:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800381c:	d822      	bhi.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800381e:	2b00      	cmp	r3, #0
 8003820:	d003      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003822:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003826:	d007      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003828:	e01c      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800382a:	4b32      	ldr	r3, [pc, #200]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800382c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382e:	4a31      	ldr	r2, [pc, #196]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003834:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003836:	e01c      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003838:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800383c:	3308      	adds	r3, #8
 800383e:	2100      	movs	r1, #0
 8003840:	4618      	mov	r0, r3
 8003842:	f001 fb83 	bl	8004f4c <RCCEx_PLL2_Config>
 8003846:	4603      	mov	r3, r0
 8003848:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800384c:	e011      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800384e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003852:	3328      	adds	r3, #40	; 0x28
 8003854:	2100      	movs	r1, #0
 8003856:	4618      	mov	r0, r3
 8003858:	f001 fc2a 	bl	80050b0 <RCCEx_PLL3_Config>
 800385c:	4603      	mov	r3, r0
 800385e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003862:	e006      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800386a:	e002      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800386c:	bf00      	nop
 800386e:	e000      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003870:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003872:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10b      	bne.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800387a:	4b1e      	ldr	r3, [pc, #120]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800387c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003882:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003886:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800388a:	4a1a      	ldr	r2, [pc, #104]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800388c:	430b      	orrs	r3, r1
 800388e:	6593      	str	r3, [r2, #88]	; 0x58
 8003890:	e003      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003892:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003896:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800389a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800389e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80038a6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80038aa:	2300      	movs	r3, #0
 80038ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80038b0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80038b4:	460b      	mov	r3, r1
 80038b6:	4313      	orrs	r3, r2
 80038b8:	d056      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80038ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80038c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038c6:	d038      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80038c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038cc:	d831      	bhi.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80038ce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80038d2:	d034      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80038d4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80038d8:	d82b      	bhi.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80038da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038de:	d01d      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x360>
 80038e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038e4:	d825      	bhi.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d006      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80038ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038ee:	d00a      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80038f0:	e01f      	b.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80038f2:	bf00      	nop
 80038f4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038f8:	4ba2      	ldr	r3, [pc, #648]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fc:	4aa1      	ldr	r2, [pc, #644]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003902:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003904:	e01c      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003906:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800390a:	3308      	adds	r3, #8
 800390c:	2100      	movs	r1, #0
 800390e:	4618      	mov	r0, r3
 8003910:	f001 fb1c 	bl	8004f4c <RCCEx_PLL2_Config>
 8003914:	4603      	mov	r3, r0
 8003916:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800391a:	e011      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800391c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003920:	3328      	adds	r3, #40	; 0x28
 8003922:	2100      	movs	r1, #0
 8003924:	4618      	mov	r0, r3
 8003926:	f001 fbc3 	bl	80050b0 <RCCEx_PLL3_Config>
 800392a:	4603      	mov	r3, r0
 800392c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003930:	e006      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003938:	e002      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800393a:	bf00      	nop
 800393c:	e000      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800393e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003940:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003944:	2b00      	cmp	r3, #0
 8003946:	d10b      	bne.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003948:	4b8e      	ldr	r3, [pc, #568]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800394a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800394c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003950:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003954:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003958:	4a8a      	ldr	r2, [pc, #552]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800395a:	430b      	orrs	r3, r1
 800395c:	6593      	str	r3, [r2, #88]	; 0x58
 800395e:	e003      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003960:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003964:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003968:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800396c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003970:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003974:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003978:	2300      	movs	r3, #0
 800397a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800397e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003982:	460b      	mov	r3, r1
 8003984:	4313      	orrs	r3, r2
 8003986:	d03a      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003988:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800398c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800398e:	2b30      	cmp	r3, #48	; 0x30
 8003990:	d01f      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003992:	2b30      	cmp	r3, #48	; 0x30
 8003994:	d819      	bhi.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003996:	2b20      	cmp	r3, #32
 8003998:	d00c      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800399a:	2b20      	cmp	r3, #32
 800399c:	d815      	bhi.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d019      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80039a2:	2b10      	cmp	r3, #16
 80039a4:	d111      	bne.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039a6:	4b77      	ldr	r3, [pc, #476]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039aa:	4a76      	ldr	r2, [pc, #472]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80039b2:	e011      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80039b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039b8:	3308      	adds	r3, #8
 80039ba:	2102      	movs	r1, #2
 80039bc:	4618      	mov	r0, r3
 80039be:	f001 fac5 	bl	8004f4c <RCCEx_PLL2_Config>
 80039c2:	4603      	mov	r3, r0
 80039c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80039c8:	e006      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80039d0:	e002      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80039d2:	bf00      	nop
 80039d4:	e000      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80039d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10a      	bne.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80039e0:	4b68      	ldr	r3, [pc, #416]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039e4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80039e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ee:	4a65      	ldr	r2, [pc, #404]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039f0:	430b      	orrs	r3, r1
 80039f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039f4:	e003      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80039fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a06:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003a0a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003a0e:	2300      	movs	r3, #0
 8003a10:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003a14:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003a18:	460b      	mov	r3, r1
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	d051      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a28:	d035      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003a2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a2e:	d82e      	bhi.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003a30:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a34:	d031      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003a36:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a3a:	d828      	bhi.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003a3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a40:	d01a      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003a42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a46:	d822      	bhi.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d003      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003a4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a50:	d007      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003a52:	e01c      	b.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a54:	4b4b      	ldr	r3, [pc, #300]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a58:	4a4a      	ldr	r2, [pc, #296]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a60:	e01c      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a66:	3308      	adds	r3, #8
 8003a68:	2100      	movs	r1, #0
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f001 fa6e 	bl	8004f4c <RCCEx_PLL2_Config>
 8003a70:	4603      	mov	r3, r0
 8003a72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a76:	e011      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a7c:	3328      	adds	r3, #40	; 0x28
 8003a7e:	2100      	movs	r1, #0
 8003a80:	4618      	mov	r0, r3
 8003a82:	f001 fb15 	bl	80050b0 <RCCEx_PLL3_Config>
 8003a86:	4603      	mov	r3, r0
 8003a88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a8c:	e006      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a94:	e002      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003a96:	bf00      	nop
 8003a98:	e000      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003a9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10a      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003aa4:	4b37      	ldr	r3, [pc, #220]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aa8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ab0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ab2:	4a34      	ldr	r2, [pc, #208]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ab4:	430b      	orrs	r3, r1
 8003ab6:	6513      	str	r3, [r2, #80]	; 0x50
 8003ab8:	e003      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003abe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aca:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003ace:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003ad8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003adc:	460b      	mov	r3, r1
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	d056      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ae6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ae8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003aec:	d033      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003aee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003af2:	d82c      	bhi.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003af4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003af8:	d02f      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003afa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003afe:	d826      	bhi.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b00:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b04:	d02b      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003b06:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b0a:	d820      	bhi.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b10:	d012      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003b12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b16:	d81a      	bhi.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d022      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b20:	d115      	bne.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b26:	3308      	adds	r3, #8
 8003b28:	2101      	movs	r1, #1
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f001 fa0e 	bl	8004f4c <RCCEx_PLL2_Config>
 8003b30:	4603      	mov	r3, r0
 8003b32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003b36:	e015      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b3c:	3328      	adds	r3, #40	; 0x28
 8003b3e:	2101      	movs	r1, #1
 8003b40:	4618      	mov	r0, r3
 8003b42:	f001 fab5 	bl	80050b0 <RCCEx_PLL3_Config>
 8003b46:	4603      	mov	r3, r0
 8003b48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003b4c:	e00a      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b54:	e006      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b56:	bf00      	nop
 8003b58:	e004      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b5a:	bf00      	nop
 8003b5c:	e002      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b5e:	bf00      	nop
 8003b60:	e000      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d10d      	bne.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003b6c:	4b05      	ldr	r3, [pc, #20]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b70:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b7a:	4a02      	ldr	r2, [pc, #8]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b7c:	430b      	orrs	r3, r1
 8003b7e:	6513      	str	r3, [r2, #80]	; 0x50
 8003b80:	e006      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003b82:	bf00      	nop
 8003b84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b8c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b98:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003b9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003ba6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003baa:	460b      	mov	r3, r1
 8003bac:	4313      	orrs	r3, r2
 8003bae:	d055      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bb4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003bb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bbc:	d033      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003bbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bc2:	d82c      	bhi.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc8:	d02f      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003bca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bce:	d826      	bhi.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003bd0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003bd4:	d02b      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003bd6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003bda:	d820      	bhi.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003bdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003be0:	d012      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003be2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003be6:	d81a      	bhi.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d022      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003bec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bf0:	d115      	bne.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bf6:	3308      	adds	r3, #8
 8003bf8:	2101      	movs	r1, #1
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f001 f9a6 	bl	8004f4c <RCCEx_PLL2_Config>
 8003c00:	4603      	mov	r3, r0
 8003c02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003c06:	e015      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c0c:	3328      	adds	r3, #40	; 0x28
 8003c0e:	2101      	movs	r1, #1
 8003c10:	4618      	mov	r0, r3
 8003c12:	f001 fa4d 	bl	80050b0 <RCCEx_PLL3_Config>
 8003c16:	4603      	mov	r3, r0
 8003c18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003c1c:	e00a      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c24:	e006      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c26:	bf00      	nop
 8003c28:	e004      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c2a:	bf00      	nop
 8003c2c:	e002      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c2e:	bf00      	nop
 8003c30:	e000      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d10b      	bne.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003c3c:	4ba3      	ldr	r3, [pc, #652]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c40:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c48:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c4c:	4a9f      	ldr	r2, [pc, #636]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c4e:	430b      	orrs	r3, r1
 8003c50:	6593      	str	r3, [r2, #88]	; 0x58
 8003c52:	e003      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c64:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003c68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003c72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003c76:	460b      	mov	r3, r1
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	d037      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c86:	d00e      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003c88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c8c:	d816      	bhi.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d018      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003c92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c96:	d111      	bne.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c98:	4b8c      	ldr	r3, [pc, #560]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9c:	4a8b      	ldr	r2, [pc, #556]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ca2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003ca4:	e00f      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003caa:	3308      	adds	r3, #8
 8003cac:	2101      	movs	r1, #1
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f001 f94c 	bl	8004f4c <RCCEx_PLL2_Config>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003cba:	e004      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003cc2:	e000      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003cc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10a      	bne.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003cce:	4b7f      	ldr	r3, [pc, #508]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cd2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cdc:	4a7b      	ldr	r2, [pc, #492]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cde:	430b      	orrs	r3, r1
 8003ce0:	6513      	str	r3, [r2, #80]	; 0x50
 8003ce2:	e003      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ce8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003cf8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003d02:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003d06:	460b      	mov	r3, r1
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	d039      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d12:	2b03      	cmp	r3, #3
 8003d14:	d81c      	bhi.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003d16:	a201      	add	r2, pc, #4	; (adr r2, 8003d1c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d1c:	08003d59 	.word	0x08003d59
 8003d20:	08003d2d 	.word	0x08003d2d
 8003d24:	08003d3b 	.word	0x08003d3b
 8003d28:	08003d59 	.word	0x08003d59
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d2c:	4b67      	ldr	r3, [pc, #412]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d30:	4a66      	ldr	r2, [pc, #408]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003d38:	e00f      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d3e:	3308      	adds	r3, #8
 8003d40:	2102      	movs	r1, #2
 8003d42:	4618      	mov	r0, r3
 8003d44:	f001 f902 	bl	8004f4c <RCCEx_PLL2_Config>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003d4e:	e004      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d56:	e000      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003d58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10a      	bne.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003d62:	4b5a      	ldr	r3, [pc, #360]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d66:	f023 0103 	bic.w	r1, r3, #3
 8003d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d70:	4a56      	ldr	r2, [pc, #344]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d72:	430b      	orrs	r3, r1
 8003d74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d76:	e003      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d7c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d88:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003d8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d90:	2300      	movs	r3, #0
 8003d92:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003d96:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	f000 809f 	beq.w	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003da2:	4b4b      	ldr	r3, [pc, #300]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a4a      	ldr	r2, [pc, #296]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dae:	f7fd fa0f 	bl	80011d0 <HAL_GetTick>
 8003db2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003db6:	e00b      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003db8:	f7fd fa0a 	bl	80011d0 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b64      	cmp	r3, #100	; 0x64
 8003dc6:	d903      	bls.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003dce:	e005      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dd0:	4b3f      	ldr	r3, [pc, #252]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d0ed      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003ddc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d179      	bne.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003de4:	4b39      	ldr	r3, [pc, #228]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003de6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003df0:	4053      	eors	r3, r2
 8003df2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d015      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dfa:	4b34      	ldr	r3, [pc, #208]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e02:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e06:	4b31      	ldr	r3, [pc, #196]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0a:	4a30      	ldr	r2, [pc, #192]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e10:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e12:	4b2e      	ldr	r3, [pc, #184]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e16:	4a2d      	ldr	r2, [pc, #180]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e1c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003e1e:	4a2b      	ldr	r2, [pc, #172]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e20:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003e24:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e2a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003e2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e32:	d118      	bne.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e34:	f7fd f9cc 	bl	80011d0 <HAL_GetTick>
 8003e38:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e3c:	e00d      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e3e:	f7fd f9c7 	bl	80011d0 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003e48:	1ad2      	subs	r2, r2, r3
 8003e4a:	f241 3388 	movw	r3, #5000	; 0x1388
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d903      	bls.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003e58:	e005      	b.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e5a:	4b1c      	ldr	r3, [pc, #112]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d0eb      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003e66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d129      	bne.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e72:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003e76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e7e:	d10e      	bne.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003e80:	4b12      	ldr	r3, [pc, #72]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e8c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003e90:	091a      	lsrs	r2, r3, #4
 8003e92:	4b10      	ldr	r3, [pc, #64]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003e94:	4013      	ands	r3, r2
 8003e96:	4a0d      	ldr	r2, [pc, #52]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e98:	430b      	orrs	r3, r1
 8003e9a:	6113      	str	r3, [r2, #16]
 8003e9c:	e005      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003e9e:	4b0b      	ldr	r3, [pc, #44]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	4a0a      	ldr	r2, [pc, #40]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ea4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003ea8:	6113      	str	r3, [r2, #16]
 8003eaa:	4b08      	ldr	r3, [pc, #32]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003eac:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eb2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003eb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eba:	4a04      	ldr	r2, [pc, #16]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ebc:	430b      	orrs	r3, r1
 8003ebe:	6713      	str	r3, [r2, #112]	; 0x70
 8003ec0:	e00e      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ec2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ec6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8003eca:	e009      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003ecc:	58024400 	.word	0x58024400
 8003ed0:	58024800 	.word	0x58024800
 8003ed4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003edc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee8:	f002 0301 	and.w	r3, r2, #1
 8003eec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ef6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003efa:	460b      	mov	r3, r1
 8003efc:	4313      	orrs	r3, r2
 8003efe:	f000 8089 	beq.w	8004014 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f08:	2b28      	cmp	r3, #40	; 0x28
 8003f0a:	d86b      	bhi.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003f0c:	a201      	add	r2, pc, #4	; (adr r2, 8003f14 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f12:	bf00      	nop
 8003f14:	08003fed 	.word	0x08003fed
 8003f18:	08003fe5 	.word	0x08003fe5
 8003f1c:	08003fe5 	.word	0x08003fe5
 8003f20:	08003fe5 	.word	0x08003fe5
 8003f24:	08003fe5 	.word	0x08003fe5
 8003f28:	08003fe5 	.word	0x08003fe5
 8003f2c:	08003fe5 	.word	0x08003fe5
 8003f30:	08003fe5 	.word	0x08003fe5
 8003f34:	08003fb9 	.word	0x08003fb9
 8003f38:	08003fe5 	.word	0x08003fe5
 8003f3c:	08003fe5 	.word	0x08003fe5
 8003f40:	08003fe5 	.word	0x08003fe5
 8003f44:	08003fe5 	.word	0x08003fe5
 8003f48:	08003fe5 	.word	0x08003fe5
 8003f4c:	08003fe5 	.word	0x08003fe5
 8003f50:	08003fe5 	.word	0x08003fe5
 8003f54:	08003fcf 	.word	0x08003fcf
 8003f58:	08003fe5 	.word	0x08003fe5
 8003f5c:	08003fe5 	.word	0x08003fe5
 8003f60:	08003fe5 	.word	0x08003fe5
 8003f64:	08003fe5 	.word	0x08003fe5
 8003f68:	08003fe5 	.word	0x08003fe5
 8003f6c:	08003fe5 	.word	0x08003fe5
 8003f70:	08003fe5 	.word	0x08003fe5
 8003f74:	08003fed 	.word	0x08003fed
 8003f78:	08003fe5 	.word	0x08003fe5
 8003f7c:	08003fe5 	.word	0x08003fe5
 8003f80:	08003fe5 	.word	0x08003fe5
 8003f84:	08003fe5 	.word	0x08003fe5
 8003f88:	08003fe5 	.word	0x08003fe5
 8003f8c:	08003fe5 	.word	0x08003fe5
 8003f90:	08003fe5 	.word	0x08003fe5
 8003f94:	08003fed 	.word	0x08003fed
 8003f98:	08003fe5 	.word	0x08003fe5
 8003f9c:	08003fe5 	.word	0x08003fe5
 8003fa0:	08003fe5 	.word	0x08003fe5
 8003fa4:	08003fe5 	.word	0x08003fe5
 8003fa8:	08003fe5 	.word	0x08003fe5
 8003fac:	08003fe5 	.word	0x08003fe5
 8003fb0:	08003fe5 	.word	0x08003fe5
 8003fb4:	08003fed 	.word	0x08003fed
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fbc:	3308      	adds	r3, #8
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f000 ffc3 	bl	8004f4c <RCCEx_PLL2_Config>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003fcc:	e00f      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fd2:	3328      	adds	r3, #40	; 0x28
 8003fd4:	2101      	movs	r1, #1
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f001 f86a 	bl	80050b0 <RCCEx_PLL3_Config>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003fe2:	e004      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003fea:	e000      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003fec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10a      	bne.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003ff6:	4bbf      	ldr	r3, [pc, #764]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ffa:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004002:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004004:	4abb      	ldr	r2, [pc, #748]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004006:	430b      	orrs	r3, r1
 8004008:	6553      	str	r3, [r2, #84]	; 0x54
 800400a:	e003      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800400c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004010:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004014:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800401c:	f002 0302 	and.w	r3, r2, #2
 8004020:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004024:	2300      	movs	r3, #0
 8004026:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800402a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800402e:	460b      	mov	r3, r1
 8004030:	4313      	orrs	r3, r2
 8004032:	d041      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004034:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004038:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800403a:	2b05      	cmp	r3, #5
 800403c:	d824      	bhi.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800403e:	a201      	add	r2, pc, #4	; (adr r2, 8004044 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004044:	08004091 	.word	0x08004091
 8004048:	0800405d 	.word	0x0800405d
 800404c:	08004073 	.word	0x08004073
 8004050:	08004091 	.word	0x08004091
 8004054:	08004091 	.word	0x08004091
 8004058:	08004091 	.word	0x08004091
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800405c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004060:	3308      	adds	r3, #8
 8004062:	2101      	movs	r1, #1
 8004064:	4618      	mov	r0, r3
 8004066:	f000 ff71 	bl	8004f4c <RCCEx_PLL2_Config>
 800406a:	4603      	mov	r3, r0
 800406c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004070:	e00f      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004072:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004076:	3328      	adds	r3, #40	; 0x28
 8004078:	2101      	movs	r1, #1
 800407a:	4618      	mov	r0, r3
 800407c:	f001 f818 	bl	80050b0 <RCCEx_PLL3_Config>
 8004080:	4603      	mov	r3, r0
 8004082:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004086:	e004      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800408e:	e000      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004090:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004092:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10a      	bne.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800409a:	4b96      	ldr	r3, [pc, #600]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800409c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409e:	f023 0107 	bic.w	r1, r3, #7
 80040a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040a8:	4a92      	ldr	r2, [pc, #584]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040aa:	430b      	orrs	r3, r1
 80040ac:	6553      	str	r3, [r2, #84]	; 0x54
 80040ae:	e003      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c0:	f002 0304 	and.w	r3, r2, #4
 80040c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040c8:	2300      	movs	r3, #0
 80040ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040ce:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80040d2:	460b      	mov	r3, r1
 80040d4:	4313      	orrs	r3, r2
 80040d6:	d044      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80040d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040e0:	2b05      	cmp	r3, #5
 80040e2:	d825      	bhi.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80040e4:	a201      	add	r2, pc, #4	; (adr r2, 80040ec <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80040e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ea:	bf00      	nop
 80040ec:	08004139 	.word	0x08004139
 80040f0:	08004105 	.word	0x08004105
 80040f4:	0800411b 	.word	0x0800411b
 80040f8:	08004139 	.word	0x08004139
 80040fc:	08004139 	.word	0x08004139
 8004100:	08004139 	.word	0x08004139
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004104:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004108:	3308      	adds	r3, #8
 800410a:	2101      	movs	r1, #1
 800410c:	4618      	mov	r0, r3
 800410e:	f000 ff1d 	bl	8004f4c <RCCEx_PLL2_Config>
 8004112:	4603      	mov	r3, r0
 8004114:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004118:	e00f      	b.n	800413a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800411a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800411e:	3328      	adds	r3, #40	; 0x28
 8004120:	2101      	movs	r1, #1
 8004122:	4618      	mov	r0, r3
 8004124:	f000 ffc4 	bl	80050b0 <RCCEx_PLL3_Config>
 8004128:	4603      	mov	r3, r0
 800412a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800412e:	e004      	b.n	800413a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004136:	e000      	b.n	800413a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004138:	bf00      	nop
    }

    if (ret == HAL_OK)
 800413a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800413e:	2b00      	cmp	r3, #0
 8004140:	d10b      	bne.n	800415a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004142:	4b6c      	ldr	r3, [pc, #432]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004146:	f023 0107 	bic.w	r1, r3, #7
 800414a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800414e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004152:	4a68      	ldr	r2, [pc, #416]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004154:	430b      	orrs	r3, r1
 8004156:	6593      	str	r3, [r2, #88]	; 0x58
 8004158:	e003      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800415a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800415e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004162:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416a:	f002 0320 	and.w	r3, r2, #32
 800416e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004172:	2300      	movs	r3, #0
 8004174:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004178:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800417c:	460b      	mov	r3, r1
 800417e:	4313      	orrs	r3, r2
 8004180:	d055      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004182:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800418a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800418e:	d033      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004190:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004194:	d82c      	bhi.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004196:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800419a:	d02f      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800419c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041a0:	d826      	bhi.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80041a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80041a6:	d02b      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80041a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80041ac:	d820      	bhi.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80041ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041b2:	d012      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80041b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041b8:	d81a      	bhi.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d022      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80041be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041c2:	d115      	bne.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041c8:	3308      	adds	r3, #8
 80041ca:	2100      	movs	r1, #0
 80041cc:	4618      	mov	r0, r3
 80041ce:	f000 febd 	bl	8004f4c <RCCEx_PLL2_Config>
 80041d2:	4603      	mov	r3, r0
 80041d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80041d8:	e015      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041de:	3328      	adds	r3, #40	; 0x28
 80041e0:	2102      	movs	r1, #2
 80041e2:	4618      	mov	r0, r3
 80041e4:	f000 ff64 	bl	80050b0 <RCCEx_PLL3_Config>
 80041e8:	4603      	mov	r3, r0
 80041ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80041ee:	e00a      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80041f6:	e006      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80041f8:	bf00      	nop
 80041fa:	e004      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80041fc:	bf00      	nop
 80041fe:	e002      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004200:	bf00      	nop
 8004202:	e000      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004204:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004206:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10b      	bne.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800420e:	4b39      	ldr	r3, [pc, #228]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004212:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004216:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800421a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800421e:	4a35      	ldr	r2, [pc, #212]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004220:	430b      	orrs	r3, r1
 8004222:	6553      	str	r3, [r2, #84]	; 0x54
 8004224:	e003      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004226:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800422a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800422e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004236:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800423a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800423e:	2300      	movs	r3, #0
 8004240:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004244:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004248:	460b      	mov	r3, r1
 800424a:	4313      	orrs	r3, r2
 800424c:	d058      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800424e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004252:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004256:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800425a:	d033      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800425c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004260:	d82c      	bhi.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004266:	d02f      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004268:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800426c:	d826      	bhi.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800426e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004272:	d02b      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004274:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004278:	d820      	bhi.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800427a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800427e:	d012      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004280:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004284:	d81a      	bhi.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004286:	2b00      	cmp	r3, #0
 8004288:	d022      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800428a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800428e:	d115      	bne.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004290:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004294:	3308      	adds	r3, #8
 8004296:	2100      	movs	r1, #0
 8004298:	4618      	mov	r0, r3
 800429a:	f000 fe57 	bl	8004f4c <RCCEx_PLL2_Config>
 800429e:	4603      	mov	r3, r0
 80042a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80042a4:	e015      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042aa:	3328      	adds	r3, #40	; 0x28
 80042ac:	2102      	movs	r1, #2
 80042ae:	4618      	mov	r0, r3
 80042b0:	f000 fefe 	bl	80050b0 <RCCEx_PLL3_Config>
 80042b4:	4603      	mov	r3, r0
 80042b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80042ba:	e00a      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80042c2:	e006      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80042c4:	bf00      	nop
 80042c6:	e004      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80042c8:	bf00      	nop
 80042ca:	e002      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80042cc:	bf00      	nop
 80042ce:	e000      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80042d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10e      	bne.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042da:	4b06      	ldr	r3, [pc, #24]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042de:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80042e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042ea:	4a02      	ldr	r2, [pc, #8]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042ec:	430b      	orrs	r3, r1
 80042ee:	6593      	str	r3, [r2, #88]	; 0x58
 80042f0:	e006      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80042f2:	bf00      	nop
 80042f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004300:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004308:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800430c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004310:	2300      	movs	r3, #0
 8004312:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004316:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800431a:	460b      	mov	r3, r1
 800431c:	4313      	orrs	r3, r2
 800431e:	d055      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004320:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004324:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004328:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800432c:	d033      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800432e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004332:	d82c      	bhi.n	800438e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004334:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004338:	d02f      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800433a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800433e:	d826      	bhi.n	800438e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004340:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004344:	d02b      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004346:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800434a:	d820      	bhi.n	800438e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800434c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004350:	d012      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004352:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004356:	d81a      	bhi.n	800438e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004358:	2b00      	cmp	r3, #0
 800435a:	d022      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800435c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004360:	d115      	bne.n	800438e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004362:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004366:	3308      	adds	r3, #8
 8004368:	2100      	movs	r1, #0
 800436a:	4618      	mov	r0, r3
 800436c:	f000 fdee 	bl	8004f4c <RCCEx_PLL2_Config>
 8004370:	4603      	mov	r3, r0
 8004372:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004376:	e015      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004378:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800437c:	3328      	adds	r3, #40	; 0x28
 800437e:	2102      	movs	r1, #2
 8004380:	4618      	mov	r0, r3
 8004382:	f000 fe95 	bl	80050b0 <RCCEx_PLL3_Config>
 8004386:	4603      	mov	r3, r0
 8004388:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800438c:	e00a      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004394:	e006      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004396:	bf00      	nop
 8004398:	e004      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800439a:	bf00      	nop
 800439c:	e002      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800439e:	bf00      	nop
 80043a0:	e000      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80043a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d10b      	bne.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80043ac:	4ba1      	ldr	r3, [pc, #644]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80043b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80043bc:	4a9d      	ldr	r2, [pc, #628]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043be:	430b      	orrs	r3, r1
 80043c0:	6593      	str	r3, [r2, #88]	; 0x58
 80043c2:	e003      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80043cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d4:	f002 0308 	and.w	r3, r2, #8
 80043d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80043dc:	2300      	movs	r3, #0
 80043de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80043e2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80043e6:	460b      	mov	r3, r1
 80043e8:	4313      	orrs	r3, r2
 80043ea:	d01e      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80043ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043f8:	d10c      	bne.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80043fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043fe:	3328      	adds	r3, #40	; 0x28
 8004400:	2102      	movs	r1, #2
 8004402:	4618      	mov	r0, r3
 8004404:	f000 fe54 	bl	80050b0 <RCCEx_PLL3_Config>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d002      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004414:	4b87      	ldr	r3, [pc, #540]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004418:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800441c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004420:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004424:	4a83      	ldr	r2, [pc, #524]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004426:	430b      	orrs	r3, r1
 8004428:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800442a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800442e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004432:	f002 0310 	and.w	r3, r2, #16
 8004436:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800443a:	2300      	movs	r3, #0
 800443c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004440:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004444:	460b      	mov	r3, r1
 8004446:	4313      	orrs	r3, r2
 8004448:	d01e      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800444a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800444e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004452:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004456:	d10c      	bne.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004458:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800445c:	3328      	adds	r3, #40	; 0x28
 800445e:	2102      	movs	r1, #2
 8004460:	4618      	mov	r0, r3
 8004462:	f000 fe25 	bl	80050b0 <RCCEx_PLL3_Config>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d002      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004472:	4b70      	ldr	r3, [pc, #448]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004476:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800447a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800447e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004482:	4a6c      	ldr	r2, [pc, #432]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004484:	430b      	orrs	r3, r1
 8004486:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004488:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800448c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004490:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004494:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004498:	2300      	movs	r3, #0
 800449a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800449e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80044a2:	460b      	mov	r3, r1
 80044a4:	4313      	orrs	r3, r2
 80044a6:	d03e      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80044a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80044b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044b4:	d022      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80044b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044ba:	d81b      	bhi.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d003      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80044c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044c4:	d00b      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80044c6:	e015      	b.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044cc:	3308      	adds	r3, #8
 80044ce:	2100      	movs	r1, #0
 80044d0:	4618      	mov	r0, r3
 80044d2:	f000 fd3b 	bl	8004f4c <RCCEx_PLL2_Config>
 80044d6:	4603      	mov	r3, r0
 80044d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80044dc:	e00f      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80044de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044e2:	3328      	adds	r3, #40	; 0x28
 80044e4:	2102      	movs	r1, #2
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 fde2 	bl	80050b0 <RCCEx_PLL3_Config>
 80044ec:	4603      	mov	r3, r0
 80044ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80044f2:	e004      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80044fa:	e000      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80044fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10b      	bne.n	800451e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004506:	4b4b      	ldr	r3, [pc, #300]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800450a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800450e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004512:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004516:	4a47      	ldr	r2, [pc, #284]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004518:	430b      	orrs	r3, r1
 800451a:	6593      	str	r3, [r2, #88]	; 0x58
 800451c:	e003      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800451e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004522:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004526:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800452a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004532:	67bb      	str	r3, [r7, #120]	; 0x78
 8004534:	2300      	movs	r3, #0
 8004536:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004538:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800453c:	460b      	mov	r3, r1
 800453e:	4313      	orrs	r3, r2
 8004540:	d03b      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004542:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800454a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800454e:	d01f      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004550:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004554:	d818      	bhi.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004556:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800455a:	d003      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800455c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004560:	d007      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004562:	e011      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004564:	4b33      	ldr	r3, [pc, #204]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004568:	4a32      	ldr	r2, [pc, #200]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800456a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800456e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004570:	e00f      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004572:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004576:	3328      	adds	r3, #40	; 0x28
 8004578:	2101      	movs	r1, #1
 800457a:	4618      	mov	r0, r3
 800457c:	f000 fd98 	bl	80050b0 <RCCEx_PLL3_Config>
 8004580:	4603      	mov	r3, r0
 8004582:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004586:	e004      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800458e:	e000      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004590:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004592:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10b      	bne.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800459a:	4b26      	ldr	r3, [pc, #152]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800459c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800459e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80045a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045aa:	4a22      	ldr	r2, [pc, #136]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045ac:	430b      	orrs	r3, r1
 80045ae:	6553      	str	r3, [r2, #84]	; 0x54
 80045b0:	e003      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80045ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80045c6:	673b      	str	r3, [r7, #112]	; 0x70
 80045c8:	2300      	movs	r3, #0
 80045ca:	677b      	str	r3, [r7, #116]	; 0x74
 80045cc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80045d0:	460b      	mov	r3, r1
 80045d2:	4313      	orrs	r3, r2
 80045d4:	d034      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80045d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d003      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80045e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045e4:	d007      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80045e6:	e011      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045e8:	4b12      	ldr	r3, [pc, #72]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ec:	4a11      	ldr	r2, [pc, #68]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80045f4:	e00e      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80045f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045fa:	3308      	adds	r3, #8
 80045fc:	2102      	movs	r1, #2
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 fca4 	bl	8004f4c <RCCEx_PLL2_Config>
 8004604:	4603      	mov	r3, r0
 8004606:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800460a:	e003      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004612:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004614:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10d      	bne.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800461c:	4b05      	ldr	r3, [pc, #20]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800461e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004620:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004624:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004628:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800462a:	4a02      	ldr	r2, [pc, #8]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800462c:	430b      	orrs	r3, r1
 800462e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004630:	e006      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004632:	bf00      	nop
 8004634:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004638:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800463c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004640:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004648:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800464c:	66bb      	str	r3, [r7, #104]	; 0x68
 800464e:	2300      	movs	r3, #0
 8004650:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004652:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004656:	460b      	mov	r3, r1
 8004658:	4313      	orrs	r3, r2
 800465a:	d00c      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800465c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004660:	3328      	adds	r3, #40	; 0x28
 8004662:	2102      	movs	r1, #2
 8004664:	4618      	mov	r0, r3
 8004666:	f000 fd23 	bl	80050b0 <RCCEx_PLL3_Config>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d002      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004676:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800467a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800467e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004682:	663b      	str	r3, [r7, #96]	; 0x60
 8004684:	2300      	movs	r3, #0
 8004686:	667b      	str	r3, [r7, #100]	; 0x64
 8004688:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800468c:	460b      	mov	r3, r1
 800468e:	4313      	orrs	r3, r2
 8004690:	d038      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004692:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004696:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800469a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800469e:	d018      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80046a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046a4:	d811      	bhi.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80046a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046aa:	d014      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80046ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046b0:	d80b      	bhi.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d011      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80046b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046ba:	d106      	bne.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046bc:	4bc3      	ldr	r3, [pc, #780]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c0:	4ac2      	ldr	r2, [pc, #776]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80046c8:	e008      	b.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80046d0:	e004      	b.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80046d2:	bf00      	nop
 80046d4:	e002      	b.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80046d6:	bf00      	nop
 80046d8:	e000      	b.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80046da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d10b      	bne.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046e4:	4bb9      	ldr	r3, [pc, #740]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80046ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046f4:	4ab5      	ldr	r2, [pc, #724]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046f6:	430b      	orrs	r3, r1
 80046f8:	6553      	str	r3, [r2, #84]	; 0x54
 80046fa:	e003      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004700:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004704:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800470c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004710:	65bb      	str	r3, [r7, #88]	; 0x58
 8004712:	2300      	movs	r3, #0
 8004714:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004716:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800471a:	460b      	mov	r3, r1
 800471c:	4313      	orrs	r3, r2
 800471e:	d009      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004720:	4baa      	ldr	r3, [pc, #680]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004724:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004728:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800472c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800472e:	4aa7      	ldr	r2, [pc, #668]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004730:	430b      	orrs	r3, r1
 8004732:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004734:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004740:	653b      	str	r3, [r7, #80]	; 0x50
 8004742:	2300      	movs	r3, #0
 8004744:	657b      	str	r3, [r7, #84]	; 0x54
 8004746:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800474a:	460b      	mov	r3, r1
 800474c:	4313      	orrs	r3, r2
 800474e:	d00a      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004750:	4b9e      	ldr	r3, [pc, #632]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004758:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800475c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004760:	4a9a      	ldr	r2, [pc, #616]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004762:	430b      	orrs	r3, r1
 8004764:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004766:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800476a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800476e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004772:	64bb      	str	r3, [r7, #72]	; 0x48
 8004774:	2300      	movs	r3, #0
 8004776:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004778:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800477c:	460b      	mov	r3, r1
 800477e:	4313      	orrs	r3, r2
 8004780:	d009      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004782:	4b92      	ldr	r3, [pc, #584]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004786:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800478a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800478e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004790:	4a8e      	ldr	r2, [pc, #568]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004792:	430b      	orrs	r3, r1
 8004794:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004796:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800479a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80047a2:	643b      	str	r3, [r7, #64]	; 0x40
 80047a4:	2300      	movs	r3, #0
 80047a6:	647b      	str	r3, [r7, #68]	; 0x44
 80047a8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80047ac:	460b      	mov	r3, r1
 80047ae:	4313      	orrs	r3, r2
 80047b0:	d00e      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80047b2:	4b86      	ldr	r3, [pc, #536]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	4a85      	ldr	r2, [pc, #532]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80047bc:	6113      	str	r3, [r2, #16]
 80047be:	4b83      	ldr	r3, [pc, #524]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047c0:	6919      	ldr	r1, [r3, #16]
 80047c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047c6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80047ca:	4a80      	ldr	r2, [pc, #512]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047cc:	430b      	orrs	r3, r1
 80047ce:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80047d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d8:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80047dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80047de:	2300      	movs	r3, #0
 80047e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047e2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80047e6:	460b      	mov	r3, r1
 80047e8:	4313      	orrs	r3, r2
 80047ea:	d009      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80047ec:	4b77      	ldr	r3, [pc, #476]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047f0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80047f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047fa:	4a74      	ldr	r2, [pc, #464]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047fc:	430b      	orrs	r3, r1
 80047fe:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004800:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004808:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800480c:	633b      	str	r3, [r7, #48]	; 0x30
 800480e:	2300      	movs	r3, #0
 8004810:	637b      	str	r3, [r7, #52]	; 0x34
 8004812:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004816:	460b      	mov	r3, r1
 8004818:	4313      	orrs	r3, r2
 800481a:	d00a      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800481c:	4b6b      	ldr	r3, [pc, #428]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800481e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004820:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004824:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004828:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800482c:	4a67      	ldr	r2, [pc, #412]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800482e:	430b      	orrs	r3, r1
 8004830:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004832:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483a:	2100      	movs	r1, #0
 800483c:	62b9      	str	r1, [r7, #40]	; 0x28
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004844:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004848:	460b      	mov	r3, r1
 800484a:	4313      	orrs	r3, r2
 800484c:	d011      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800484e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004852:	3308      	adds	r3, #8
 8004854:	2100      	movs	r1, #0
 8004856:	4618      	mov	r0, r3
 8004858:	f000 fb78 	bl	8004f4c <RCCEx_PLL2_Config>
 800485c:	4603      	mov	r3, r0
 800485e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004862:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004866:	2b00      	cmp	r3, #0
 8004868:	d003      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800486a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800486e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004872:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487a:	2100      	movs	r1, #0
 800487c:	6239      	str	r1, [r7, #32]
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	627b      	str	r3, [r7, #36]	; 0x24
 8004884:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004888:	460b      	mov	r3, r1
 800488a:	4313      	orrs	r3, r2
 800488c:	d011      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800488e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004892:	3308      	adds	r3, #8
 8004894:	2101      	movs	r1, #1
 8004896:	4618      	mov	r0, r3
 8004898:	f000 fb58 	bl	8004f4c <RCCEx_PLL2_Config>
 800489c:	4603      	mov	r3, r0
 800489e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80048a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d003      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80048b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ba:	2100      	movs	r1, #0
 80048bc:	61b9      	str	r1, [r7, #24]
 80048be:	f003 0304 	and.w	r3, r3, #4
 80048c2:	61fb      	str	r3, [r7, #28]
 80048c4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80048c8:	460b      	mov	r3, r1
 80048ca:	4313      	orrs	r3, r2
 80048cc:	d011      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80048ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048d2:	3308      	adds	r3, #8
 80048d4:	2102      	movs	r1, #2
 80048d6:	4618      	mov	r0, r3
 80048d8:	f000 fb38 	bl	8004f4c <RCCEx_PLL2_Config>
 80048dc:	4603      	mov	r3, r0
 80048de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80048e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d003      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80048f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fa:	2100      	movs	r1, #0
 80048fc:	6139      	str	r1, [r7, #16]
 80048fe:	f003 0308 	and.w	r3, r3, #8
 8004902:	617b      	str	r3, [r7, #20]
 8004904:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004908:	460b      	mov	r3, r1
 800490a:	4313      	orrs	r3, r2
 800490c:	d011      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800490e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004912:	3328      	adds	r3, #40	; 0x28
 8004914:	2100      	movs	r1, #0
 8004916:	4618      	mov	r0, r3
 8004918:	f000 fbca 	bl	80050b0 <RCCEx_PLL3_Config>
 800491c:	4603      	mov	r3, r0
 800491e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8004922:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004926:	2b00      	cmp	r3, #0
 8004928:	d003      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800492a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800492e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004932:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800493a:	2100      	movs	r1, #0
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	f003 0310 	and.w	r3, r3, #16
 8004942:	60fb      	str	r3, [r7, #12]
 8004944:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004948:	460b      	mov	r3, r1
 800494a:	4313      	orrs	r3, r2
 800494c:	d011      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800494e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004952:	3328      	adds	r3, #40	; 0x28
 8004954:	2101      	movs	r1, #1
 8004956:	4618      	mov	r0, r3
 8004958:	f000 fbaa 	bl	80050b0 <RCCEx_PLL3_Config>
 800495c:	4603      	mov	r3, r0
 800495e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004962:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004966:	2b00      	cmp	r3, #0
 8004968:	d003      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800496a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800496e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004972:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497a:	2100      	movs	r1, #0
 800497c:	6039      	str	r1, [r7, #0]
 800497e:	f003 0320 	and.w	r3, r3, #32
 8004982:	607b      	str	r3, [r7, #4]
 8004984:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004988:	460b      	mov	r3, r1
 800498a:	4313      	orrs	r3, r2
 800498c:	d011      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800498e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004992:	3328      	adds	r3, #40	; 0x28
 8004994:	2102      	movs	r1, #2
 8004996:	4618      	mov	r0, r3
 8004998:	f000 fb8a 	bl	80050b0 <RCCEx_PLL3_Config>
 800499c:	4603      	mov	r3, r0
 800499e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80049a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d003      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80049b2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d101      	bne.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80049ba:	2300      	movs	r3, #0
 80049bc:	e000      	b.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80049c6:	46bd      	mov	sp, r7
 80049c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049cc:	58024400 	.word	0x58024400

080049d0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80049d4:	f7fe fd96 	bl	8003504 <HAL_RCC_GetHCLKFreq>
 80049d8:	4602      	mov	r2, r0
 80049da:	4b06      	ldr	r3, [pc, #24]	; (80049f4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	091b      	lsrs	r3, r3, #4
 80049e0:	f003 0307 	and.w	r3, r3, #7
 80049e4:	4904      	ldr	r1, [pc, #16]	; (80049f8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80049e6:	5ccb      	ldrb	r3, [r1, r3]
 80049e8:	f003 031f 	and.w	r3, r3, #31
 80049ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	58024400 	.word	0x58024400
 80049f8:	08006a44 	.word	0x08006a44

080049fc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b089      	sub	sp, #36	; 0x24
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a04:	4ba1      	ldr	r3, [pc, #644]	; (8004c8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a08:	f003 0303 	and.w	r3, r3, #3
 8004a0c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004a0e:	4b9f      	ldr	r3, [pc, #636]	; (8004c8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a12:	0b1b      	lsrs	r3, r3, #12
 8004a14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a18:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004a1a:	4b9c      	ldr	r3, [pc, #624]	; (8004c8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1e:	091b      	lsrs	r3, r3, #4
 8004a20:	f003 0301 	and.w	r3, r3, #1
 8004a24:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004a26:	4b99      	ldr	r3, [pc, #612]	; (8004c8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a2a:	08db      	lsrs	r3, r3, #3
 8004a2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	fb02 f303 	mul.w	r3, r2, r3
 8004a36:	ee07 3a90 	vmov	s15, r3
 8004a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a3e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f000 8111 	beq.w	8004c6c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	f000 8083 	beq.w	8004b58 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	f200 80a1 	bhi.w	8004b9c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d003      	beq.n	8004a68 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d056      	beq.n	8004b14 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004a66:	e099      	b.n	8004b9c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a68:	4b88      	ldr	r3, [pc, #544]	; (8004c8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0320 	and.w	r3, r3, #32
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d02d      	beq.n	8004ad0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a74:	4b85      	ldr	r3, [pc, #532]	; (8004c8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	08db      	lsrs	r3, r3, #3
 8004a7a:	f003 0303 	and.w	r3, r3, #3
 8004a7e:	4a84      	ldr	r2, [pc, #528]	; (8004c90 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004a80:	fa22 f303 	lsr.w	r3, r2, r3
 8004a84:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	ee07 3a90 	vmov	s15, r3
 8004a8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	ee07 3a90 	vmov	s15, r3
 8004a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a9e:	4b7b      	ldr	r3, [pc, #492]	; (8004c8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aa6:	ee07 3a90 	vmov	s15, r3
 8004aaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aae:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ab2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004c94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ab6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004abe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ac2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004ace:	e087      	b.n	8004be0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	ee07 3a90 	vmov	s15, r3
 8004ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ada:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004c98 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004ade:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ae2:	4b6a      	ldr	r3, [pc, #424]	; (8004c8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aea:	ee07 3a90 	vmov	s15, r3
 8004aee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004af2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004af6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004c94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004afa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004afe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b12:	e065      	b.n	8004be0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	ee07 3a90 	vmov	s15, r3
 8004b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b1e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004c9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004b22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b26:	4b59      	ldr	r3, [pc, #356]	; (8004c8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b2e:	ee07 3a90 	vmov	s15, r3
 8004b32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b36:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b3a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004c94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b56:	e043      	b.n	8004be0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	ee07 3a90 	vmov	s15, r3
 8004b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b62:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004b66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b6a:	4b48      	ldr	r3, [pc, #288]	; (8004c8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b72:	ee07 3a90 	vmov	s15, r3
 8004b76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b7e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004c94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b9a:	e021      	b.n	8004be0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	ee07 3a90 	vmov	s15, r3
 8004ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ba6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004c9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bae:	4b37      	ldr	r3, [pc, #220]	; (8004c8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bb6:	ee07 3a90 	vmov	s15, r3
 8004bba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bc2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004c94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004bc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bde:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004be0:	4b2a      	ldr	r3, [pc, #168]	; (8004c8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be4:	0a5b      	lsrs	r3, r3, #9
 8004be6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bea:	ee07 3a90 	vmov	s15, r3
 8004bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bf2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004bf6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bfa:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c06:	ee17 2a90 	vmov	r2, s15
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004c0e:	4b1f      	ldr	r3, [pc, #124]	; (8004c8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c12:	0c1b      	lsrs	r3, r3, #16
 8004c14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c18:	ee07 3a90 	vmov	s15, r3
 8004c1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c24:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c28:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c34:	ee17 2a90 	vmov	r2, s15
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004c3c:	4b13      	ldr	r3, [pc, #76]	; (8004c8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c40:	0e1b      	lsrs	r3, r3, #24
 8004c42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c46:	ee07 3a90 	vmov	s15, r3
 8004c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c56:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c62:	ee17 2a90 	vmov	r2, s15
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004c6a:	e008      	b.n	8004c7e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	609a      	str	r2, [r3, #8]
}
 8004c7e:	bf00      	nop
 8004c80:	3724      	adds	r7, #36	; 0x24
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	58024400 	.word	0x58024400
 8004c90:	03d09000 	.word	0x03d09000
 8004c94:	46000000 	.word	0x46000000
 8004c98:	4c742400 	.word	0x4c742400
 8004c9c:	4a742400 	.word	0x4a742400
 8004ca0:	4af42400 	.word	0x4af42400

08004ca4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b089      	sub	sp, #36	; 0x24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004cac:	4ba1      	ldr	r3, [pc, #644]	; (8004f34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb0:	f003 0303 	and.w	r3, r3, #3
 8004cb4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004cb6:	4b9f      	ldr	r3, [pc, #636]	; (8004f34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cba:	0d1b      	lsrs	r3, r3, #20
 8004cbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cc0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004cc2:	4b9c      	ldr	r3, [pc, #624]	; (8004f34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc6:	0a1b      	lsrs	r3, r3, #8
 8004cc8:	f003 0301 	and.w	r3, r3, #1
 8004ccc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004cce:	4b99      	ldr	r3, [pc, #612]	; (8004f34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd2:	08db      	lsrs	r3, r3, #3
 8004cd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	fb02 f303 	mul.w	r3, r2, r3
 8004cde:	ee07 3a90 	vmov	s15, r3
 8004ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ce6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f000 8111 	beq.w	8004f14 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	f000 8083 	beq.w	8004e00 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	f200 80a1 	bhi.w	8004e44 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d003      	beq.n	8004d10 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d056      	beq.n	8004dbc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004d0e:	e099      	b.n	8004e44 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d10:	4b88      	ldr	r3, [pc, #544]	; (8004f34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0320 	and.w	r3, r3, #32
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d02d      	beq.n	8004d78 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d1c:	4b85      	ldr	r3, [pc, #532]	; (8004f34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	08db      	lsrs	r3, r3, #3
 8004d22:	f003 0303 	and.w	r3, r3, #3
 8004d26:	4a84      	ldr	r2, [pc, #528]	; (8004f38 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004d28:	fa22 f303 	lsr.w	r3, r2, r3
 8004d2c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	ee07 3a90 	vmov	s15, r3
 8004d34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	ee07 3a90 	vmov	s15, r3
 8004d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d46:	4b7b      	ldr	r3, [pc, #492]	; (8004f34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d4e:	ee07 3a90 	vmov	s15, r3
 8004d52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d56:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d5a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004f3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d72:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004d76:	e087      	b.n	8004e88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	ee07 3a90 	vmov	s15, r3
 8004d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d82:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004f40 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004d86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d8a:	4b6a      	ldr	r3, [pc, #424]	; (8004f34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d92:	ee07 3a90 	vmov	s15, r3
 8004d96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d9e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004f3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004da2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004da6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004daa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004db6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004dba:	e065      	b.n	8004e88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	ee07 3a90 	vmov	s15, r3
 8004dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dc6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004f44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004dca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dce:	4b59      	ldr	r3, [pc, #356]	; (8004f34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dd6:	ee07 3a90 	vmov	s15, r3
 8004dda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dde:	ed97 6a03 	vldr	s12, [r7, #12]
 8004de2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004f3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004de6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004df2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004dfe:	e043      	b.n	8004e88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	ee07 3a90 	vmov	s15, r3
 8004e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e0a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004f48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004e0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e12:	4b48      	ldr	r3, [pc, #288]	; (8004f34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e1a:	ee07 3a90 	vmov	s15, r3
 8004e1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e22:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e26:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004f3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e42:	e021      	b.n	8004e88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	ee07 3a90 	vmov	s15, r3
 8004e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e4e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004f44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004e52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e56:	4b37      	ldr	r3, [pc, #220]	; (8004f34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e5e:	ee07 3a90 	vmov	s15, r3
 8004e62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e66:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e6a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004f3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e86:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004e88:	4b2a      	ldr	r3, [pc, #168]	; (8004f34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8c:	0a5b      	lsrs	r3, r3, #9
 8004e8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e92:	ee07 3a90 	vmov	s15, r3
 8004e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ea2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ea6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004eaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004eae:	ee17 2a90 	vmov	r2, s15
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004eb6:	4b1f      	ldr	r3, [pc, #124]	; (8004f34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eba:	0c1b      	lsrs	r3, r3, #16
 8004ebc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ec0:	ee07 3a90 	vmov	s15, r3
 8004ec4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ec8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ecc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ed0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ed4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ed8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004edc:	ee17 2a90 	vmov	r2, s15
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004ee4:	4b13      	ldr	r3, [pc, #76]	; (8004f34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee8:	0e1b      	lsrs	r3, r3, #24
 8004eea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004eee:	ee07 3a90 	vmov	s15, r3
 8004ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ef6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004efa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004efe:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f0a:	ee17 2a90 	vmov	r2, s15
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004f12:	e008      	b.n	8004f26 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	609a      	str	r2, [r3, #8]
}
 8004f26:	bf00      	nop
 8004f28:	3724      	adds	r7, #36	; 0x24
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	58024400 	.word	0x58024400
 8004f38:	03d09000 	.word	0x03d09000
 8004f3c:	46000000 	.word	0x46000000
 8004f40:	4c742400 	.word	0x4c742400
 8004f44:	4a742400 	.word	0x4a742400
 8004f48:	4af42400 	.word	0x4af42400

08004f4c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f56:	2300      	movs	r3, #0
 8004f58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f5a:	4b53      	ldr	r3, [pc, #332]	; (80050a8 <RCCEx_PLL2_Config+0x15c>)
 8004f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f5e:	f003 0303 	and.w	r3, r3, #3
 8004f62:	2b03      	cmp	r3, #3
 8004f64:	d101      	bne.n	8004f6a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e099      	b.n	800509e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004f6a:	4b4f      	ldr	r3, [pc, #316]	; (80050a8 <RCCEx_PLL2_Config+0x15c>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a4e      	ldr	r2, [pc, #312]	; (80050a8 <RCCEx_PLL2_Config+0x15c>)
 8004f70:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f76:	f7fc f92b 	bl	80011d0 <HAL_GetTick>
 8004f7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004f7c:	e008      	b.n	8004f90 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004f7e:	f7fc f927 	bl	80011d0 <HAL_GetTick>
 8004f82:	4602      	mov	r2, r0
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d901      	bls.n	8004f90 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e086      	b.n	800509e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004f90:	4b45      	ldr	r3, [pc, #276]	; (80050a8 <RCCEx_PLL2_Config+0x15c>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1f0      	bne.n	8004f7e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004f9c:	4b42      	ldr	r3, [pc, #264]	; (80050a8 <RCCEx_PLL2_Config+0x15c>)
 8004f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	031b      	lsls	r3, r3, #12
 8004faa:	493f      	ldr	r1, [pc, #252]	; (80050a8 <RCCEx_PLL2_Config+0x15c>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	628b      	str	r3, [r1, #40]	; 0x28
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	025b      	lsls	r3, r3, #9
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	431a      	orrs	r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	041b      	lsls	r3, r3, #16
 8004fce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004fd2:	431a      	orrs	r2, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	3b01      	subs	r3, #1
 8004fda:	061b      	lsls	r3, r3, #24
 8004fdc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004fe0:	4931      	ldr	r1, [pc, #196]	; (80050a8 <RCCEx_PLL2_Config+0x15c>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004fe6:	4b30      	ldr	r3, [pc, #192]	; (80050a8 <RCCEx_PLL2_Config+0x15c>)
 8004fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	492d      	ldr	r1, [pc, #180]	; (80050a8 <RCCEx_PLL2_Config+0x15c>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004ff8:	4b2b      	ldr	r3, [pc, #172]	; (80050a8 <RCCEx_PLL2_Config+0x15c>)
 8004ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffc:	f023 0220 	bic.w	r2, r3, #32
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	4928      	ldr	r1, [pc, #160]	; (80050a8 <RCCEx_PLL2_Config+0x15c>)
 8005006:	4313      	orrs	r3, r2
 8005008:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800500a:	4b27      	ldr	r3, [pc, #156]	; (80050a8 <RCCEx_PLL2_Config+0x15c>)
 800500c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500e:	4a26      	ldr	r2, [pc, #152]	; (80050a8 <RCCEx_PLL2_Config+0x15c>)
 8005010:	f023 0310 	bic.w	r3, r3, #16
 8005014:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005016:	4b24      	ldr	r3, [pc, #144]	; (80050a8 <RCCEx_PLL2_Config+0x15c>)
 8005018:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800501a:	4b24      	ldr	r3, [pc, #144]	; (80050ac <RCCEx_PLL2_Config+0x160>)
 800501c:	4013      	ands	r3, r2
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	69d2      	ldr	r2, [r2, #28]
 8005022:	00d2      	lsls	r2, r2, #3
 8005024:	4920      	ldr	r1, [pc, #128]	; (80050a8 <RCCEx_PLL2_Config+0x15c>)
 8005026:	4313      	orrs	r3, r2
 8005028:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800502a:	4b1f      	ldr	r3, [pc, #124]	; (80050a8 <RCCEx_PLL2_Config+0x15c>)
 800502c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502e:	4a1e      	ldr	r2, [pc, #120]	; (80050a8 <RCCEx_PLL2_Config+0x15c>)
 8005030:	f043 0310 	orr.w	r3, r3, #16
 8005034:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d106      	bne.n	800504a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800503c:	4b1a      	ldr	r3, [pc, #104]	; (80050a8 <RCCEx_PLL2_Config+0x15c>)
 800503e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005040:	4a19      	ldr	r2, [pc, #100]	; (80050a8 <RCCEx_PLL2_Config+0x15c>)
 8005042:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005046:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005048:	e00f      	b.n	800506a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d106      	bne.n	800505e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005050:	4b15      	ldr	r3, [pc, #84]	; (80050a8 <RCCEx_PLL2_Config+0x15c>)
 8005052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005054:	4a14      	ldr	r2, [pc, #80]	; (80050a8 <RCCEx_PLL2_Config+0x15c>)
 8005056:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800505a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800505c:	e005      	b.n	800506a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800505e:	4b12      	ldr	r3, [pc, #72]	; (80050a8 <RCCEx_PLL2_Config+0x15c>)
 8005060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005062:	4a11      	ldr	r2, [pc, #68]	; (80050a8 <RCCEx_PLL2_Config+0x15c>)
 8005064:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005068:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800506a:	4b0f      	ldr	r3, [pc, #60]	; (80050a8 <RCCEx_PLL2_Config+0x15c>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a0e      	ldr	r2, [pc, #56]	; (80050a8 <RCCEx_PLL2_Config+0x15c>)
 8005070:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005074:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005076:	f7fc f8ab 	bl	80011d0 <HAL_GetTick>
 800507a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800507c:	e008      	b.n	8005090 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800507e:	f7fc f8a7 	bl	80011d0 <HAL_GetTick>
 8005082:	4602      	mov	r2, r0
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	2b02      	cmp	r3, #2
 800508a:	d901      	bls.n	8005090 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	e006      	b.n	800509e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005090:	4b05      	ldr	r3, [pc, #20]	; (80050a8 <RCCEx_PLL2_Config+0x15c>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005098:	2b00      	cmp	r3, #0
 800509a:	d0f0      	beq.n	800507e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800509c:	7bfb      	ldrb	r3, [r7, #15]
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	58024400 	.word	0x58024400
 80050ac:	ffff0007 	.word	0xffff0007

080050b0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050ba:	2300      	movs	r3, #0
 80050bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80050be:	4b53      	ldr	r3, [pc, #332]	; (800520c <RCCEx_PLL3_Config+0x15c>)
 80050c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c2:	f003 0303 	and.w	r3, r3, #3
 80050c6:	2b03      	cmp	r3, #3
 80050c8:	d101      	bne.n	80050ce <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e099      	b.n	8005202 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80050ce:	4b4f      	ldr	r3, [pc, #316]	; (800520c <RCCEx_PLL3_Config+0x15c>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a4e      	ldr	r2, [pc, #312]	; (800520c <RCCEx_PLL3_Config+0x15c>)
 80050d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050da:	f7fc f879 	bl	80011d0 <HAL_GetTick>
 80050de:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80050e0:	e008      	b.n	80050f4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80050e2:	f7fc f875 	bl	80011d0 <HAL_GetTick>
 80050e6:	4602      	mov	r2, r0
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d901      	bls.n	80050f4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e086      	b.n	8005202 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80050f4:	4b45      	ldr	r3, [pc, #276]	; (800520c <RCCEx_PLL3_Config+0x15c>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1f0      	bne.n	80050e2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005100:	4b42      	ldr	r3, [pc, #264]	; (800520c <RCCEx_PLL3_Config+0x15c>)
 8005102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005104:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	051b      	lsls	r3, r3, #20
 800510e:	493f      	ldr	r1, [pc, #252]	; (800520c <RCCEx_PLL3_Config+0x15c>)
 8005110:	4313      	orrs	r3, r2
 8005112:	628b      	str	r3, [r1, #40]	; 0x28
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	3b01      	subs	r3, #1
 800511a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	3b01      	subs	r3, #1
 8005124:	025b      	lsls	r3, r3, #9
 8005126:	b29b      	uxth	r3, r3
 8005128:	431a      	orrs	r2, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	3b01      	subs	r3, #1
 8005130:	041b      	lsls	r3, r3, #16
 8005132:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005136:	431a      	orrs	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	3b01      	subs	r3, #1
 800513e:	061b      	lsls	r3, r3, #24
 8005140:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005144:	4931      	ldr	r1, [pc, #196]	; (800520c <RCCEx_PLL3_Config+0x15c>)
 8005146:	4313      	orrs	r3, r2
 8005148:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800514a:	4b30      	ldr	r3, [pc, #192]	; (800520c <RCCEx_PLL3_Config+0x15c>)
 800514c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	492d      	ldr	r1, [pc, #180]	; (800520c <RCCEx_PLL3_Config+0x15c>)
 8005158:	4313      	orrs	r3, r2
 800515a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800515c:	4b2b      	ldr	r3, [pc, #172]	; (800520c <RCCEx_PLL3_Config+0x15c>)
 800515e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005160:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	699b      	ldr	r3, [r3, #24]
 8005168:	4928      	ldr	r1, [pc, #160]	; (800520c <RCCEx_PLL3_Config+0x15c>)
 800516a:	4313      	orrs	r3, r2
 800516c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800516e:	4b27      	ldr	r3, [pc, #156]	; (800520c <RCCEx_PLL3_Config+0x15c>)
 8005170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005172:	4a26      	ldr	r2, [pc, #152]	; (800520c <RCCEx_PLL3_Config+0x15c>)
 8005174:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005178:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800517a:	4b24      	ldr	r3, [pc, #144]	; (800520c <RCCEx_PLL3_Config+0x15c>)
 800517c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800517e:	4b24      	ldr	r3, [pc, #144]	; (8005210 <RCCEx_PLL3_Config+0x160>)
 8005180:	4013      	ands	r3, r2
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	69d2      	ldr	r2, [r2, #28]
 8005186:	00d2      	lsls	r2, r2, #3
 8005188:	4920      	ldr	r1, [pc, #128]	; (800520c <RCCEx_PLL3_Config+0x15c>)
 800518a:	4313      	orrs	r3, r2
 800518c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800518e:	4b1f      	ldr	r3, [pc, #124]	; (800520c <RCCEx_PLL3_Config+0x15c>)
 8005190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005192:	4a1e      	ldr	r2, [pc, #120]	; (800520c <RCCEx_PLL3_Config+0x15c>)
 8005194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005198:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d106      	bne.n	80051ae <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80051a0:	4b1a      	ldr	r3, [pc, #104]	; (800520c <RCCEx_PLL3_Config+0x15c>)
 80051a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a4:	4a19      	ldr	r2, [pc, #100]	; (800520c <RCCEx_PLL3_Config+0x15c>)
 80051a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80051aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80051ac:	e00f      	b.n	80051ce <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d106      	bne.n	80051c2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80051b4:	4b15      	ldr	r3, [pc, #84]	; (800520c <RCCEx_PLL3_Config+0x15c>)
 80051b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b8:	4a14      	ldr	r2, [pc, #80]	; (800520c <RCCEx_PLL3_Config+0x15c>)
 80051ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80051be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80051c0:	e005      	b.n	80051ce <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80051c2:	4b12      	ldr	r3, [pc, #72]	; (800520c <RCCEx_PLL3_Config+0x15c>)
 80051c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c6:	4a11      	ldr	r2, [pc, #68]	; (800520c <RCCEx_PLL3_Config+0x15c>)
 80051c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80051ce:	4b0f      	ldr	r3, [pc, #60]	; (800520c <RCCEx_PLL3_Config+0x15c>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a0e      	ldr	r2, [pc, #56]	; (800520c <RCCEx_PLL3_Config+0x15c>)
 80051d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051da:	f7fb fff9 	bl	80011d0 <HAL_GetTick>
 80051de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80051e0:	e008      	b.n	80051f4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80051e2:	f7fb fff5 	bl	80011d0 <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d901      	bls.n	80051f4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e006      	b.n	8005202 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80051f4:	4b05      	ldr	r3, [pc, #20]	; (800520c <RCCEx_PLL3_Config+0x15c>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d0f0      	beq.n	80051e2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005200:	7bfb      	ldrb	r3, [r7, #15]
}
 8005202:	4618      	mov	r0, r3
 8005204:	3710      	adds	r7, #16
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	58024400 	.word	0x58024400
 8005210:	ffff0007 	.word	0xffff0007

08005214 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d101      	bne.n	8005226 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e042      	b.n	80052ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800522c:	2b00      	cmp	r3, #0
 800522e:	d106      	bne.n	800523e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f7fb fdf9 	bl	8000e30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2224      	movs	r2, #36	; 0x24
 8005242:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f022 0201 	bic.w	r2, r2, #1
 8005254:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 f82c 	bl	80052b4 <UART_SetConfig>
 800525c:	4603      	mov	r3, r0
 800525e:	2b01      	cmp	r3, #1
 8005260:	d101      	bne.n	8005266 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e022      	b.n	80052ac <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800526a:	2b00      	cmp	r3, #0
 800526c:	d002      	beq.n	8005274 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 fd88 	bl	8005d84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	685a      	ldr	r2, [r3, #4]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005282:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689a      	ldr	r2, [r3, #8]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005292:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f042 0201 	orr.w	r2, r2, #1
 80052a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 fe0f 	bl	8005ec8 <UART_CheckIdleState>
 80052aa:	4603      	mov	r3, r0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3708      	adds	r7, #8
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052b8:	b092      	sub	sp, #72	; 0x48
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052be:	2300      	movs	r3, #0
 80052c0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	689a      	ldr	r2, [r3, #8]
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	431a      	orrs	r2, r3
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	431a      	orrs	r2, r3
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	69db      	ldr	r3, [r3, #28]
 80052d8:	4313      	orrs	r3, r2
 80052da:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	4bbe      	ldr	r3, [pc, #760]	; (80055dc <UART_SetConfig+0x328>)
 80052e4:	4013      	ands	r3, r2
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	6812      	ldr	r2, [r2, #0]
 80052ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80052ec:	430b      	orrs	r3, r1
 80052ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	68da      	ldr	r2, [r3, #12]
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	430a      	orrs	r2, r1
 8005304:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4ab3      	ldr	r2, [pc, #716]	; (80055e0 <UART_SetConfig+0x32c>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d004      	beq.n	8005320 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	6a1b      	ldr	r3, [r3, #32]
 800531a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800531c:	4313      	orrs	r3, r2
 800531e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	689a      	ldr	r2, [r3, #8]
 8005326:	4baf      	ldr	r3, [pc, #700]	; (80055e4 <UART_SetConfig+0x330>)
 8005328:	4013      	ands	r3, r2
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	6812      	ldr	r2, [r2, #0]
 800532e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005330:	430b      	orrs	r3, r1
 8005332:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533a:	f023 010f 	bic.w	r1, r3, #15
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	430a      	orrs	r2, r1
 8005348:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4aa6      	ldr	r2, [pc, #664]	; (80055e8 <UART_SetConfig+0x334>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d177      	bne.n	8005444 <UART_SetConfig+0x190>
 8005354:	4ba5      	ldr	r3, [pc, #660]	; (80055ec <UART_SetConfig+0x338>)
 8005356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005358:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800535c:	2b28      	cmp	r3, #40	; 0x28
 800535e:	d86d      	bhi.n	800543c <UART_SetConfig+0x188>
 8005360:	a201      	add	r2, pc, #4	; (adr r2, 8005368 <UART_SetConfig+0xb4>)
 8005362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005366:	bf00      	nop
 8005368:	0800540d 	.word	0x0800540d
 800536c:	0800543d 	.word	0x0800543d
 8005370:	0800543d 	.word	0x0800543d
 8005374:	0800543d 	.word	0x0800543d
 8005378:	0800543d 	.word	0x0800543d
 800537c:	0800543d 	.word	0x0800543d
 8005380:	0800543d 	.word	0x0800543d
 8005384:	0800543d 	.word	0x0800543d
 8005388:	08005415 	.word	0x08005415
 800538c:	0800543d 	.word	0x0800543d
 8005390:	0800543d 	.word	0x0800543d
 8005394:	0800543d 	.word	0x0800543d
 8005398:	0800543d 	.word	0x0800543d
 800539c:	0800543d 	.word	0x0800543d
 80053a0:	0800543d 	.word	0x0800543d
 80053a4:	0800543d 	.word	0x0800543d
 80053a8:	0800541d 	.word	0x0800541d
 80053ac:	0800543d 	.word	0x0800543d
 80053b0:	0800543d 	.word	0x0800543d
 80053b4:	0800543d 	.word	0x0800543d
 80053b8:	0800543d 	.word	0x0800543d
 80053bc:	0800543d 	.word	0x0800543d
 80053c0:	0800543d 	.word	0x0800543d
 80053c4:	0800543d 	.word	0x0800543d
 80053c8:	08005425 	.word	0x08005425
 80053cc:	0800543d 	.word	0x0800543d
 80053d0:	0800543d 	.word	0x0800543d
 80053d4:	0800543d 	.word	0x0800543d
 80053d8:	0800543d 	.word	0x0800543d
 80053dc:	0800543d 	.word	0x0800543d
 80053e0:	0800543d 	.word	0x0800543d
 80053e4:	0800543d 	.word	0x0800543d
 80053e8:	0800542d 	.word	0x0800542d
 80053ec:	0800543d 	.word	0x0800543d
 80053f0:	0800543d 	.word	0x0800543d
 80053f4:	0800543d 	.word	0x0800543d
 80053f8:	0800543d 	.word	0x0800543d
 80053fc:	0800543d 	.word	0x0800543d
 8005400:	0800543d 	.word	0x0800543d
 8005404:	0800543d 	.word	0x0800543d
 8005408:	08005435 	.word	0x08005435
 800540c:	2301      	movs	r3, #1
 800540e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005412:	e222      	b.n	800585a <UART_SetConfig+0x5a6>
 8005414:	2304      	movs	r3, #4
 8005416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800541a:	e21e      	b.n	800585a <UART_SetConfig+0x5a6>
 800541c:	2308      	movs	r3, #8
 800541e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005422:	e21a      	b.n	800585a <UART_SetConfig+0x5a6>
 8005424:	2310      	movs	r3, #16
 8005426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800542a:	e216      	b.n	800585a <UART_SetConfig+0x5a6>
 800542c:	2320      	movs	r3, #32
 800542e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005432:	e212      	b.n	800585a <UART_SetConfig+0x5a6>
 8005434:	2340      	movs	r3, #64	; 0x40
 8005436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800543a:	e20e      	b.n	800585a <UART_SetConfig+0x5a6>
 800543c:	2380      	movs	r3, #128	; 0x80
 800543e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005442:	e20a      	b.n	800585a <UART_SetConfig+0x5a6>
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a69      	ldr	r2, [pc, #420]	; (80055f0 <UART_SetConfig+0x33c>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d130      	bne.n	80054b0 <UART_SetConfig+0x1fc>
 800544e:	4b67      	ldr	r3, [pc, #412]	; (80055ec <UART_SetConfig+0x338>)
 8005450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005452:	f003 0307 	and.w	r3, r3, #7
 8005456:	2b05      	cmp	r3, #5
 8005458:	d826      	bhi.n	80054a8 <UART_SetConfig+0x1f4>
 800545a:	a201      	add	r2, pc, #4	; (adr r2, 8005460 <UART_SetConfig+0x1ac>)
 800545c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005460:	08005479 	.word	0x08005479
 8005464:	08005481 	.word	0x08005481
 8005468:	08005489 	.word	0x08005489
 800546c:	08005491 	.word	0x08005491
 8005470:	08005499 	.word	0x08005499
 8005474:	080054a1 	.word	0x080054a1
 8005478:	2300      	movs	r3, #0
 800547a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800547e:	e1ec      	b.n	800585a <UART_SetConfig+0x5a6>
 8005480:	2304      	movs	r3, #4
 8005482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005486:	e1e8      	b.n	800585a <UART_SetConfig+0x5a6>
 8005488:	2308      	movs	r3, #8
 800548a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800548e:	e1e4      	b.n	800585a <UART_SetConfig+0x5a6>
 8005490:	2310      	movs	r3, #16
 8005492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005496:	e1e0      	b.n	800585a <UART_SetConfig+0x5a6>
 8005498:	2320      	movs	r3, #32
 800549a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800549e:	e1dc      	b.n	800585a <UART_SetConfig+0x5a6>
 80054a0:	2340      	movs	r3, #64	; 0x40
 80054a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054a6:	e1d8      	b.n	800585a <UART_SetConfig+0x5a6>
 80054a8:	2380      	movs	r3, #128	; 0x80
 80054aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054ae:	e1d4      	b.n	800585a <UART_SetConfig+0x5a6>
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a4f      	ldr	r2, [pc, #316]	; (80055f4 <UART_SetConfig+0x340>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d130      	bne.n	800551c <UART_SetConfig+0x268>
 80054ba:	4b4c      	ldr	r3, [pc, #304]	; (80055ec <UART_SetConfig+0x338>)
 80054bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054be:	f003 0307 	and.w	r3, r3, #7
 80054c2:	2b05      	cmp	r3, #5
 80054c4:	d826      	bhi.n	8005514 <UART_SetConfig+0x260>
 80054c6:	a201      	add	r2, pc, #4	; (adr r2, 80054cc <UART_SetConfig+0x218>)
 80054c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054cc:	080054e5 	.word	0x080054e5
 80054d0:	080054ed 	.word	0x080054ed
 80054d4:	080054f5 	.word	0x080054f5
 80054d8:	080054fd 	.word	0x080054fd
 80054dc:	08005505 	.word	0x08005505
 80054e0:	0800550d 	.word	0x0800550d
 80054e4:	2300      	movs	r3, #0
 80054e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054ea:	e1b6      	b.n	800585a <UART_SetConfig+0x5a6>
 80054ec:	2304      	movs	r3, #4
 80054ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054f2:	e1b2      	b.n	800585a <UART_SetConfig+0x5a6>
 80054f4:	2308      	movs	r3, #8
 80054f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054fa:	e1ae      	b.n	800585a <UART_SetConfig+0x5a6>
 80054fc:	2310      	movs	r3, #16
 80054fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005502:	e1aa      	b.n	800585a <UART_SetConfig+0x5a6>
 8005504:	2320      	movs	r3, #32
 8005506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800550a:	e1a6      	b.n	800585a <UART_SetConfig+0x5a6>
 800550c:	2340      	movs	r3, #64	; 0x40
 800550e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005512:	e1a2      	b.n	800585a <UART_SetConfig+0x5a6>
 8005514:	2380      	movs	r3, #128	; 0x80
 8005516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800551a:	e19e      	b.n	800585a <UART_SetConfig+0x5a6>
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a35      	ldr	r2, [pc, #212]	; (80055f8 <UART_SetConfig+0x344>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d130      	bne.n	8005588 <UART_SetConfig+0x2d4>
 8005526:	4b31      	ldr	r3, [pc, #196]	; (80055ec <UART_SetConfig+0x338>)
 8005528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800552a:	f003 0307 	and.w	r3, r3, #7
 800552e:	2b05      	cmp	r3, #5
 8005530:	d826      	bhi.n	8005580 <UART_SetConfig+0x2cc>
 8005532:	a201      	add	r2, pc, #4	; (adr r2, 8005538 <UART_SetConfig+0x284>)
 8005534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005538:	08005551 	.word	0x08005551
 800553c:	08005559 	.word	0x08005559
 8005540:	08005561 	.word	0x08005561
 8005544:	08005569 	.word	0x08005569
 8005548:	08005571 	.word	0x08005571
 800554c:	08005579 	.word	0x08005579
 8005550:	2300      	movs	r3, #0
 8005552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005556:	e180      	b.n	800585a <UART_SetConfig+0x5a6>
 8005558:	2304      	movs	r3, #4
 800555a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800555e:	e17c      	b.n	800585a <UART_SetConfig+0x5a6>
 8005560:	2308      	movs	r3, #8
 8005562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005566:	e178      	b.n	800585a <UART_SetConfig+0x5a6>
 8005568:	2310      	movs	r3, #16
 800556a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800556e:	e174      	b.n	800585a <UART_SetConfig+0x5a6>
 8005570:	2320      	movs	r3, #32
 8005572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005576:	e170      	b.n	800585a <UART_SetConfig+0x5a6>
 8005578:	2340      	movs	r3, #64	; 0x40
 800557a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800557e:	e16c      	b.n	800585a <UART_SetConfig+0x5a6>
 8005580:	2380      	movs	r3, #128	; 0x80
 8005582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005586:	e168      	b.n	800585a <UART_SetConfig+0x5a6>
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a1b      	ldr	r2, [pc, #108]	; (80055fc <UART_SetConfig+0x348>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d142      	bne.n	8005618 <UART_SetConfig+0x364>
 8005592:	4b16      	ldr	r3, [pc, #88]	; (80055ec <UART_SetConfig+0x338>)
 8005594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005596:	f003 0307 	and.w	r3, r3, #7
 800559a:	2b05      	cmp	r3, #5
 800559c:	d838      	bhi.n	8005610 <UART_SetConfig+0x35c>
 800559e:	a201      	add	r2, pc, #4	; (adr r2, 80055a4 <UART_SetConfig+0x2f0>)
 80055a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a4:	080055bd 	.word	0x080055bd
 80055a8:	080055c5 	.word	0x080055c5
 80055ac:	080055cd 	.word	0x080055cd
 80055b0:	080055d5 	.word	0x080055d5
 80055b4:	08005601 	.word	0x08005601
 80055b8:	08005609 	.word	0x08005609
 80055bc:	2300      	movs	r3, #0
 80055be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055c2:	e14a      	b.n	800585a <UART_SetConfig+0x5a6>
 80055c4:	2304      	movs	r3, #4
 80055c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055ca:	e146      	b.n	800585a <UART_SetConfig+0x5a6>
 80055cc:	2308      	movs	r3, #8
 80055ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055d2:	e142      	b.n	800585a <UART_SetConfig+0x5a6>
 80055d4:	2310      	movs	r3, #16
 80055d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055da:	e13e      	b.n	800585a <UART_SetConfig+0x5a6>
 80055dc:	cfff69f3 	.word	0xcfff69f3
 80055e0:	58000c00 	.word	0x58000c00
 80055e4:	11fff4ff 	.word	0x11fff4ff
 80055e8:	40011000 	.word	0x40011000
 80055ec:	58024400 	.word	0x58024400
 80055f0:	40004400 	.word	0x40004400
 80055f4:	40004800 	.word	0x40004800
 80055f8:	40004c00 	.word	0x40004c00
 80055fc:	40005000 	.word	0x40005000
 8005600:	2320      	movs	r3, #32
 8005602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005606:	e128      	b.n	800585a <UART_SetConfig+0x5a6>
 8005608:	2340      	movs	r3, #64	; 0x40
 800560a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800560e:	e124      	b.n	800585a <UART_SetConfig+0x5a6>
 8005610:	2380      	movs	r3, #128	; 0x80
 8005612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005616:	e120      	b.n	800585a <UART_SetConfig+0x5a6>
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4acb      	ldr	r2, [pc, #812]	; (800594c <UART_SetConfig+0x698>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d176      	bne.n	8005710 <UART_SetConfig+0x45c>
 8005622:	4bcb      	ldr	r3, [pc, #812]	; (8005950 <UART_SetConfig+0x69c>)
 8005624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005626:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800562a:	2b28      	cmp	r3, #40	; 0x28
 800562c:	d86c      	bhi.n	8005708 <UART_SetConfig+0x454>
 800562e:	a201      	add	r2, pc, #4	; (adr r2, 8005634 <UART_SetConfig+0x380>)
 8005630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005634:	080056d9 	.word	0x080056d9
 8005638:	08005709 	.word	0x08005709
 800563c:	08005709 	.word	0x08005709
 8005640:	08005709 	.word	0x08005709
 8005644:	08005709 	.word	0x08005709
 8005648:	08005709 	.word	0x08005709
 800564c:	08005709 	.word	0x08005709
 8005650:	08005709 	.word	0x08005709
 8005654:	080056e1 	.word	0x080056e1
 8005658:	08005709 	.word	0x08005709
 800565c:	08005709 	.word	0x08005709
 8005660:	08005709 	.word	0x08005709
 8005664:	08005709 	.word	0x08005709
 8005668:	08005709 	.word	0x08005709
 800566c:	08005709 	.word	0x08005709
 8005670:	08005709 	.word	0x08005709
 8005674:	080056e9 	.word	0x080056e9
 8005678:	08005709 	.word	0x08005709
 800567c:	08005709 	.word	0x08005709
 8005680:	08005709 	.word	0x08005709
 8005684:	08005709 	.word	0x08005709
 8005688:	08005709 	.word	0x08005709
 800568c:	08005709 	.word	0x08005709
 8005690:	08005709 	.word	0x08005709
 8005694:	080056f1 	.word	0x080056f1
 8005698:	08005709 	.word	0x08005709
 800569c:	08005709 	.word	0x08005709
 80056a0:	08005709 	.word	0x08005709
 80056a4:	08005709 	.word	0x08005709
 80056a8:	08005709 	.word	0x08005709
 80056ac:	08005709 	.word	0x08005709
 80056b0:	08005709 	.word	0x08005709
 80056b4:	080056f9 	.word	0x080056f9
 80056b8:	08005709 	.word	0x08005709
 80056bc:	08005709 	.word	0x08005709
 80056c0:	08005709 	.word	0x08005709
 80056c4:	08005709 	.word	0x08005709
 80056c8:	08005709 	.word	0x08005709
 80056cc:	08005709 	.word	0x08005709
 80056d0:	08005709 	.word	0x08005709
 80056d4:	08005701 	.word	0x08005701
 80056d8:	2301      	movs	r3, #1
 80056da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056de:	e0bc      	b.n	800585a <UART_SetConfig+0x5a6>
 80056e0:	2304      	movs	r3, #4
 80056e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056e6:	e0b8      	b.n	800585a <UART_SetConfig+0x5a6>
 80056e8:	2308      	movs	r3, #8
 80056ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ee:	e0b4      	b.n	800585a <UART_SetConfig+0x5a6>
 80056f0:	2310      	movs	r3, #16
 80056f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056f6:	e0b0      	b.n	800585a <UART_SetConfig+0x5a6>
 80056f8:	2320      	movs	r3, #32
 80056fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056fe:	e0ac      	b.n	800585a <UART_SetConfig+0x5a6>
 8005700:	2340      	movs	r3, #64	; 0x40
 8005702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005706:	e0a8      	b.n	800585a <UART_SetConfig+0x5a6>
 8005708:	2380      	movs	r3, #128	; 0x80
 800570a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800570e:	e0a4      	b.n	800585a <UART_SetConfig+0x5a6>
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a8f      	ldr	r2, [pc, #572]	; (8005954 <UART_SetConfig+0x6a0>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d130      	bne.n	800577c <UART_SetConfig+0x4c8>
 800571a:	4b8d      	ldr	r3, [pc, #564]	; (8005950 <UART_SetConfig+0x69c>)
 800571c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800571e:	f003 0307 	and.w	r3, r3, #7
 8005722:	2b05      	cmp	r3, #5
 8005724:	d826      	bhi.n	8005774 <UART_SetConfig+0x4c0>
 8005726:	a201      	add	r2, pc, #4	; (adr r2, 800572c <UART_SetConfig+0x478>)
 8005728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800572c:	08005745 	.word	0x08005745
 8005730:	0800574d 	.word	0x0800574d
 8005734:	08005755 	.word	0x08005755
 8005738:	0800575d 	.word	0x0800575d
 800573c:	08005765 	.word	0x08005765
 8005740:	0800576d 	.word	0x0800576d
 8005744:	2300      	movs	r3, #0
 8005746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800574a:	e086      	b.n	800585a <UART_SetConfig+0x5a6>
 800574c:	2304      	movs	r3, #4
 800574e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005752:	e082      	b.n	800585a <UART_SetConfig+0x5a6>
 8005754:	2308      	movs	r3, #8
 8005756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800575a:	e07e      	b.n	800585a <UART_SetConfig+0x5a6>
 800575c:	2310      	movs	r3, #16
 800575e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005762:	e07a      	b.n	800585a <UART_SetConfig+0x5a6>
 8005764:	2320      	movs	r3, #32
 8005766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800576a:	e076      	b.n	800585a <UART_SetConfig+0x5a6>
 800576c:	2340      	movs	r3, #64	; 0x40
 800576e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005772:	e072      	b.n	800585a <UART_SetConfig+0x5a6>
 8005774:	2380      	movs	r3, #128	; 0x80
 8005776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800577a:	e06e      	b.n	800585a <UART_SetConfig+0x5a6>
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a75      	ldr	r2, [pc, #468]	; (8005958 <UART_SetConfig+0x6a4>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d130      	bne.n	80057e8 <UART_SetConfig+0x534>
 8005786:	4b72      	ldr	r3, [pc, #456]	; (8005950 <UART_SetConfig+0x69c>)
 8005788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800578a:	f003 0307 	and.w	r3, r3, #7
 800578e:	2b05      	cmp	r3, #5
 8005790:	d826      	bhi.n	80057e0 <UART_SetConfig+0x52c>
 8005792:	a201      	add	r2, pc, #4	; (adr r2, 8005798 <UART_SetConfig+0x4e4>)
 8005794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005798:	080057b1 	.word	0x080057b1
 800579c:	080057b9 	.word	0x080057b9
 80057a0:	080057c1 	.word	0x080057c1
 80057a4:	080057c9 	.word	0x080057c9
 80057a8:	080057d1 	.word	0x080057d1
 80057ac:	080057d9 	.word	0x080057d9
 80057b0:	2300      	movs	r3, #0
 80057b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057b6:	e050      	b.n	800585a <UART_SetConfig+0x5a6>
 80057b8:	2304      	movs	r3, #4
 80057ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057be:	e04c      	b.n	800585a <UART_SetConfig+0x5a6>
 80057c0:	2308      	movs	r3, #8
 80057c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057c6:	e048      	b.n	800585a <UART_SetConfig+0x5a6>
 80057c8:	2310      	movs	r3, #16
 80057ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057ce:	e044      	b.n	800585a <UART_SetConfig+0x5a6>
 80057d0:	2320      	movs	r3, #32
 80057d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057d6:	e040      	b.n	800585a <UART_SetConfig+0x5a6>
 80057d8:	2340      	movs	r3, #64	; 0x40
 80057da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057de:	e03c      	b.n	800585a <UART_SetConfig+0x5a6>
 80057e0:	2380      	movs	r3, #128	; 0x80
 80057e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057e6:	e038      	b.n	800585a <UART_SetConfig+0x5a6>
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a5b      	ldr	r2, [pc, #364]	; (800595c <UART_SetConfig+0x6a8>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d130      	bne.n	8005854 <UART_SetConfig+0x5a0>
 80057f2:	4b57      	ldr	r3, [pc, #348]	; (8005950 <UART_SetConfig+0x69c>)
 80057f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057f6:	f003 0307 	and.w	r3, r3, #7
 80057fa:	2b05      	cmp	r3, #5
 80057fc:	d826      	bhi.n	800584c <UART_SetConfig+0x598>
 80057fe:	a201      	add	r2, pc, #4	; (adr r2, 8005804 <UART_SetConfig+0x550>)
 8005800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005804:	0800581d 	.word	0x0800581d
 8005808:	08005825 	.word	0x08005825
 800580c:	0800582d 	.word	0x0800582d
 8005810:	08005835 	.word	0x08005835
 8005814:	0800583d 	.word	0x0800583d
 8005818:	08005845 	.word	0x08005845
 800581c:	2302      	movs	r3, #2
 800581e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005822:	e01a      	b.n	800585a <UART_SetConfig+0x5a6>
 8005824:	2304      	movs	r3, #4
 8005826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800582a:	e016      	b.n	800585a <UART_SetConfig+0x5a6>
 800582c:	2308      	movs	r3, #8
 800582e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005832:	e012      	b.n	800585a <UART_SetConfig+0x5a6>
 8005834:	2310      	movs	r3, #16
 8005836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800583a:	e00e      	b.n	800585a <UART_SetConfig+0x5a6>
 800583c:	2320      	movs	r3, #32
 800583e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005842:	e00a      	b.n	800585a <UART_SetConfig+0x5a6>
 8005844:	2340      	movs	r3, #64	; 0x40
 8005846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800584a:	e006      	b.n	800585a <UART_SetConfig+0x5a6>
 800584c:	2380      	movs	r3, #128	; 0x80
 800584e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005852:	e002      	b.n	800585a <UART_SetConfig+0x5a6>
 8005854:	2380      	movs	r3, #128	; 0x80
 8005856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a3f      	ldr	r2, [pc, #252]	; (800595c <UART_SetConfig+0x6a8>)
 8005860:	4293      	cmp	r3, r2
 8005862:	f040 80f8 	bne.w	8005a56 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005866:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800586a:	2b20      	cmp	r3, #32
 800586c:	dc46      	bgt.n	80058fc <UART_SetConfig+0x648>
 800586e:	2b02      	cmp	r3, #2
 8005870:	f2c0 8082 	blt.w	8005978 <UART_SetConfig+0x6c4>
 8005874:	3b02      	subs	r3, #2
 8005876:	2b1e      	cmp	r3, #30
 8005878:	d87e      	bhi.n	8005978 <UART_SetConfig+0x6c4>
 800587a:	a201      	add	r2, pc, #4	; (adr r2, 8005880 <UART_SetConfig+0x5cc>)
 800587c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005880:	08005903 	.word	0x08005903
 8005884:	08005979 	.word	0x08005979
 8005888:	0800590b 	.word	0x0800590b
 800588c:	08005979 	.word	0x08005979
 8005890:	08005979 	.word	0x08005979
 8005894:	08005979 	.word	0x08005979
 8005898:	0800591b 	.word	0x0800591b
 800589c:	08005979 	.word	0x08005979
 80058a0:	08005979 	.word	0x08005979
 80058a4:	08005979 	.word	0x08005979
 80058a8:	08005979 	.word	0x08005979
 80058ac:	08005979 	.word	0x08005979
 80058b0:	08005979 	.word	0x08005979
 80058b4:	08005979 	.word	0x08005979
 80058b8:	0800592b 	.word	0x0800592b
 80058bc:	08005979 	.word	0x08005979
 80058c0:	08005979 	.word	0x08005979
 80058c4:	08005979 	.word	0x08005979
 80058c8:	08005979 	.word	0x08005979
 80058cc:	08005979 	.word	0x08005979
 80058d0:	08005979 	.word	0x08005979
 80058d4:	08005979 	.word	0x08005979
 80058d8:	08005979 	.word	0x08005979
 80058dc:	08005979 	.word	0x08005979
 80058e0:	08005979 	.word	0x08005979
 80058e4:	08005979 	.word	0x08005979
 80058e8:	08005979 	.word	0x08005979
 80058ec:	08005979 	.word	0x08005979
 80058f0:	08005979 	.word	0x08005979
 80058f4:	08005979 	.word	0x08005979
 80058f8:	0800596b 	.word	0x0800596b
 80058fc:	2b40      	cmp	r3, #64	; 0x40
 80058fe:	d037      	beq.n	8005970 <UART_SetConfig+0x6bc>
 8005900:	e03a      	b.n	8005978 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005902:	f7ff f865 	bl	80049d0 <HAL_RCCEx_GetD3PCLK1Freq>
 8005906:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005908:	e03c      	b.n	8005984 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800590a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800590e:	4618      	mov	r0, r3
 8005910:	f7ff f874 	bl	80049fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005916:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005918:	e034      	b.n	8005984 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800591a:	f107 0318 	add.w	r3, r7, #24
 800591e:	4618      	mov	r0, r3
 8005920:	f7ff f9c0 	bl	8004ca4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005928:	e02c      	b.n	8005984 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800592a:	4b09      	ldr	r3, [pc, #36]	; (8005950 <UART_SetConfig+0x69c>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0320 	and.w	r3, r3, #32
 8005932:	2b00      	cmp	r3, #0
 8005934:	d016      	beq.n	8005964 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005936:	4b06      	ldr	r3, [pc, #24]	; (8005950 <UART_SetConfig+0x69c>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	08db      	lsrs	r3, r3, #3
 800593c:	f003 0303 	and.w	r3, r3, #3
 8005940:	4a07      	ldr	r2, [pc, #28]	; (8005960 <UART_SetConfig+0x6ac>)
 8005942:	fa22 f303 	lsr.w	r3, r2, r3
 8005946:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005948:	e01c      	b.n	8005984 <UART_SetConfig+0x6d0>
 800594a:	bf00      	nop
 800594c:	40011400 	.word	0x40011400
 8005950:	58024400 	.word	0x58024400
 8005954:	40007800 	.word	0x40007800
 8005958:	40007c00 	.word	0x40007c00
 800595c:	58000c00 	.word	0x58000c00
 8005960:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005964:	4b9d      	ldr	r3, [pc, #628]	; (8005bdc <UART_SetConfig+0x928>)
 8005966:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005968:	e00c      	b.n	8005984 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800596a:	4b9d      	ldr	r3, [pc, #628]	; (8005be0 <UART_SetConfig+0x92c>)
 800596c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800596e:	e009      	b.n	8005984 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005970:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005974:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005976:	e005      	b.n	8005984 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005978:	2300      	movs	r3, #0
 800597a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005982:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005986:	2b00      	cmp	r3, #0
 8005988:	f000 81de 	beq.w	8005d48 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005990:	4a94      	ldr	r2, [pc, #592]	; (8005be4 <UART_SetConfig+0x930>)
 8005992:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005996:	461a      	mov	r2, r3
 8005998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800599a:	fbb3 f3f2 	udiv	r3, r3, r2
 800599e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	685a      	ldr	r2, [r3, #4]
 80059a4:	4613      	mov	r3, r2
 80059a6:	005b      	lsls	r3, r3, #1
 80059a8:	4413      	add	r3, r2
 80059aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d305      	bcc.n	80059bc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d903      	bls.n	80059c4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80059c2:	e1c1      	b.n	8005d48 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059c6:	2200      	movs	r2, #0
 80059c8:	60bb      	str	r3, [r7, #8]
 80059ca:	60fa      	str	r2, [r7, #12]
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d0:	4a84      	ldr	r2, [pc, #528]	; (8005be4 <UART_SetConfig+0x930>)
 80059d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	2200      	movs	r2, #0
 80059da:	603b      	str	r3, [r7, #0]
 80059dc:	607a      	str	r2, [r7, #4]
 80059de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80059e6:	f7fa fc77 	bl	80002d8 <__aeabi_uldivmod>
 80059ea:	4602      	mov	r2, r0
 80059ec:	460b      	mov	r3, r1
 80059ee:	4610      	mov	r0, r2
 80059f0:	4619      	mov	r1, r3
 80059f2:	f04f 0200 	mov.w	r2, #0
 80059f6:	f04f 0300 	mov.w	r3, #0
 80059fa:	020b      	lsls	r3, r1, #8
 80059fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005a00:	0202      	lsls	r2, r0, #8
 8005a02:	6979      	ldr	r1, [r7, #20]
 8005a04:	6849      	ldr	r1, [r1, #4]
 8005a06:	0849      	lsrs	r1, r1, #1
 8005a08:	2000      	movs	r0, #0
 8005a0a:	460c      	mov	r4, r1
 8005a0c:	4605      	mov	r5, r0
 8005a0e:	eb12 0804 	adds.w	r8, r2, r4
 8005a12:	eb43 0905 	adc.w	r9, r3, r5
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	469a      	mov	sl, r3
 8005a1e:	4693      	mov	fp, r2
 8005a20:	4652      	mov	r2, sl
 8005a22:	465b      	mov	r3, fp
 8005a24:	4640      	mov	r0, r8
 8005a26:	4649      	mov	r1, r9
 8005a28:	f7fa fc56 	bl	80002d8 <__aeabi_uldivmod>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	460b      	mov	r3, r1
 8005a30:	4613      	mov	r3, r2
 8005a32:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a3a:	d308      	bcc.n	8005a4e <UART_SetConfig+0x79a>
 8005a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a42:	d204      	bcs.n	8005a4e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a4a:	60da      	str	r2, [r3, #12]
 8005a4c:	e17c      	b.n	8005d48 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005a54:	e178      	b.n	8005d48 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	69db      	ldr	r3, [r3, #28]
 8005a5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a5e:	f040 80c5 	bne.w	8005bec <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005a62:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005a66:	2b20      	cmp	r3, #32
 8005a68:	dc48      	bgt.n	8005afc <UART_SetConfig+0x848>
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	db7b      	blt.n	8005b66 <UART_SetConfig+0x8b2>
 8005a6e:	2b20      	cmp	r3, #32
 8005a70:	d879      	bhi.n	8005b66 <UART_SetConfig+0x8b2>
 8005a72:	a201      	add	r2, pc, #4	; (adr r2, 8005a78 <UART_SetConfig+0x7c4>)
 8005a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a78:	08005b03 	.word	0x08005b03
 8005a7c:	08005b0b 	.word	0x08005b0b
 8005a80:	08005b67 	.word	0x08005b67
 8005a84:	08005b67 	.word	0x08005b67
 8005a88:	08005b13 	.word	0x08005b13
 8005a8c:	08005b67 	.word	0x08005b67
 8005a90:	08005b67 	.word	0x08005b67
 8005a94:	08005b67 	.word	0x08005b67
 8005a98:	08005b23 	.word	0x08005b23
 8005a9c:	08005b67 	.word	0x08005b67
 8005aa0:	08005b67 	.word	0x08005b67
 8005aa4:	08005b67 	.word	0x08005b67
 8005aa8:	08005b67 	.word	0x08005b67
 8005aac:	08005b67 	.word	0x08005b67
 8005ab0:	08005b67 	.word	0x08005b67
 8005ab4:	08005b67 	.word	0x08005b67
 8005ab8:	08005b33 	.word	0x08005b33
 8005abc:	08005b67 	.word	0x08005b67
 8005ac0:	08005b67 	.word	0x08005b67
 8005ac4:	08005b67 	.word	0x08005b67
 8005ac8:	08005b67 	.word	0x08005b67
 8005acc:	08005b67 	.word	0x08005b67
 8005ad0:	08005b67 	.word	0x08005b67
 8005ad4:	08005b67 	.word	0x08005b67
 8005ad8:	08005b67 	.word	0x08005b67
 8005adc:	08005b67 	.word	0x08005b67
 8005ae0:	08005b67 	.word	0x08005b67
 8005ae4:	08005b67 	.word	0x08005b67
 8005ae8:	08005b67 	.word	0x08005b67
 8005aec:	08005b67 	.word	0x08005b67
 8005af0:	08005b67 	.word	0x08005b67
 8005af4:	08005b67 	.word	0x08005b67
 8005af8:	08005b59 	.word	0x08005b59
 8005afc:	2b40      	cmp	r3, #64	; 0x40
 8005afe:	d02e      	beq.n	8005b5e <UART_SetConfig+0x8aa>
 8005b00:	e031      	b.n	8005b66 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b02:	f7fd fd2f 	bl	8003564 <HAL_RCC_GetPCLK1Freq>
 8005b06:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005b08:	e033      	b.n	8005b72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b0a:	f7fd fd41 	bl	8003590 <HAL_RCC_GetPCLK2Freq>
 8005b0e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005b10:	e02f      	b.n	8005b72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b16:	4618      	mov	r0, r3
 8005b18:	f7fe ff70 	bl	80049fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b20:	e027      	b.n	8005b72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b22:	f107 0318 	add.w	r3, r7, #24
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7ff f8bc 	bl	8004ca4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b30:	e01f      	b.n	8005b72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b32:	4b2d      	ldr	r3, [pc, #180]	; (8005be8 <UART_SetConfig+0x934>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 0320 	and.w	r3, r3, #32
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d009      	beq.n	8005b52 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005b3e:	4b2a      	ldr	r3, [pc, #168]	; (8005be8 <UART_SetConfig+0x934>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	08db      	lsrs	r3, r3, #3
 8005b44:	f003 0303 	and.w	r3, r3, #3
 8005b48:	4a24      	ldr	r2, [pc, #144]	; (8005bdc <UART_SetConfig+0x928>)
 8005b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005b50:	e00f      	b.n	8005b72 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005b52:	4b22      	ldr	r3, [pc, #136]	; (8005bdc <UART_SetConfig+0x928>)
 8005b54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b56:	e00c      	b.n	8005b72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005b58:	4b21      	ldr	r3, [pc, #132]	; (8005be0 <UART_SetConfig+0x92c>)
 8005b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b5c:	e009      	b.n	8005b72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b64:	e005      	b.n	8005b72 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005b66:	2300      	movs	r3, #0
 8005b68:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005b70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f000 80e7 	beq.w	8005d48 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7e:	4a19      	ldr	r2, [pc, #100]	; (8005be4 <UART_SetConfig+0x930>)
 8005b80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b84:	461a      	mov	r2, r3
 8005b86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b88:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b8c:	005a      	lsls	r2, r3, #1
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	085b      	lsrs	r3, r3, #1
 8005b94:	441a      	add	r2, r3
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b9e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba2:	2b0f      	cmp	r3, #15
 8005ba4:	d916      	bls.n	8005bd4 <UART_SetConfig+0x920>
 8005ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bac:	d212      	bcs.n	8005bd4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	f023 030f 	bic.w	r3, r3, #15
 8005bb6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bba:	085b      	lsrs	r3, r3, #1
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	f003 0307 	and.w	r3, r3, #7
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005bd0:	60da      	str	r2, [r3, #12]
 8005bd2:	e0b9      	b.n	8005d48 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005bda:	e0b5      	b.n	8005d48 <UART_SetConfig+0xa94>
 8005bdc:	03d09000 	.word	0x03d09000
 8005be0:	003d0900 	.word	0x003d0900
 8005be4:	08006a54 	.word	0x08006a54
 8005be8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005bec:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005bf0:	2b20      	cmp	r3, #32
 8005bf2:	dc49      	bgt.n	8005c88 <UART_SetConfig+0x9d4>
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	db7c      	blt.n	8005cf2 <UART_SetConfig+0xa3e>
 8005bf8:	2b20      	cmp	r3, #32
 8005bfa:	d87a      	bhi.n	8005cf2 <UART_SetConfig+0xa3e>
 8005bfc:	a201      	add	r2, pc, #4	; (adr r2, 8005c04 <UART_SetConfig+0x950>)
 8005bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c02:	bf00      	nop
 8005c04:	08005c8f 	.word	0x08005c8f
 8005c08:	08005c97 	.word	0x08005c97
 8005c0c:	08005cf3 	.word	0x08005cf3
 8005c10:	08005cf3 	.word	0x08005cf3
 8005c14:	08005c9f 	.word	0x08005c9f
 8005c18:	08005cf3 	.word	0x08005cf3
 8005c1c:	08005cf3 	.word	0x08005cf3
 8005c20:	08005cf3 	.word	0x08005cf3
 8005c24:	08005caf 	.word	0x08005caf
 8005c28:	08005cf3 	.word	0x08005cf3
 8005c2c:	08005cf3 	.word	0x08005cf3
 8005c30:	08005cf3 	.word	0x08005cf3
 8005c34:	08005cf3 	.word	0x08005cf3
 8005c38:	08005cf3 	.word	0x08005cf3
 8005c3c:	08005cf3 	.word	0x08005cf3
 8005c40:	08005cf3 	.word	0x08005cf3
 8005c44:	08005cbf 	.word	0x08005cbf
 8005c48:	08005cf3 	.word	0x08005cf3
 8005c4c:	08005cf3 	.word	0x08005cf3
 8005c50:	08005cf3 	.word	0x08005cf3
 8005c54:	08005cf3 	.word	0x08005cf3
 8005c58:	08005cf3 	.word	0x08005cf3
 8005c5c:	08005cf3 	.word	0x08005cf3
 8005c60:	08005cf3 	.word	0x08005cf3
 8005c64:	08005cf3 	.word	0x08005cf3
 8005c68:	08005cf3 	.word	0x08005cf3
 8005c6c:	08005cf3 	.word	0x08005cf3
 8005c70:	08005cf3 	.word	0x08005cf3
 8005c74:	08005cf3 	.word	0x08005cf3
 8005c78:	08005cf3 	.word	0x08005cf3
 8005c7c:	08005cf3 	.word	0x08005cf3
 8005c80:	08005cf3 	.word	0x08005cf3
 8005c84:	08005ce5 	.word	0x08005ce5
 8005c88:	2b40      	cmp	r3, #64	; 0x40
 8005c8a:	d02e      	beq.n	8005cea <UART_SetConfig+0xa36>
 8005c8c:	e031      	b.n	8005cf2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c8e:	f7fd fc69 	bl	8003564 <HAL_RCC_GetPCLK1Freq>
 8005c92:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005c94:	e033      	b.n	8005cfe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c96:	f7fd fc7b 	bl	8003590 <HAL_RCC_GetPCLK2Freq>
 8005c9a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005c9c:	e02f      	b.n	8005cfe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7fe feaa 	bl	80049fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005caa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cac:	e027      	b.n	8005cfe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005cae:	f107 0318 	add.w	r3, r7, #24
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f7fe fff6 	bl	8004ca4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cbc:	e01f      	b.n	8005cfe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cbe:	4b2d      	ldr	r3, [pc, #180]	; (8005d74 <UART_SetConfig+0xac0>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 0320 	and.w	r3, r3, #32
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d009      	beq.n	8005cde <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005cca:	4b2a      	ldr	r3, [pc, #168]	; (8005d74 <UART_SetConfig+0xac0>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	08db      	lsrs	r3, r3, #3
 8005cd0:	f003 0303 	and.w	r3, r3, #3
 8005cd4:	4a28      	ldr	r2, [pc, #160]	; (8005d78 <UART_SetConfig+0xac4>)
 8005cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8005cda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005cdc:	e00f      	b.n	8005cfe <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005cde:	4b26      	ldr	r3, [pc, #152]	; (8005d78 <UART_SetConfig+0xac4>)
 8005ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ce2:	e00c      	b.n	8005cfe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005ce4:	4b25      	ldr	r3, [pc, #148]	; (8005d7c <UART_SetConfig+0xac8>)
 8005ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ce8:	e009      	b.n	8005cfe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cf0:	e005      	b.n	8005cfe <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005cfc:	bf00      	nop
    }

    if (pclk != 0U)
 8005cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d021      	beq.n	8005d48 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d08:	4a1d      	ldr	r2, [pc, #116]	; (8005d80 <UART_SetConfig+0xacc>)
 8005d0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d0e:	461a      	mov	r2, r3
 8005d10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d12:	fbb3 f2f2 	udiv	r2, r3, r2
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	085b      	lsrs	r3, r3, #1
 8005d1c:	441a      	add	r2, r3
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d26:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d2a:	2b0f      	cmp	r3, #15
 8005d2c:	d909      	bls.n	8005d42 <UART_SetConfig+0xa8e>
 8005d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d34:	d205      	bcs.n	8005d42 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d38:	b29a      	uxth	r2, r3
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	60da      	str	r2, [r3, #12]
 8005d40:	e002      	b.n	8005d48 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	2200      	movs	r2, #0
 8005d62:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005d64:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3748      	adds	r7, #72	; 0x48
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d72:	bf00      	nop
 8005d74:	58024400 	.word	0x58024400
 8005d78:	03d09000 	.word	0x03d09000
 8005d7c:	003d0900 	.word	0x003d0900
 8005d80:	08006a54 	.word	0x08006a54

08005d84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d90:	f003 0301 	and.w	r3, r3, #1
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d00a      	beq.n	8005dae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	430a      	orrs	r2, r1
 8005dac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db2:	f003 0302 	and.w	r3, r3, #2
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00a      	beq.n	8005dd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	430a      	orrs	r2, r1
 8005dce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd4:	f003 0304 	and.w	r3, r3, #4
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00a      	beq.n	8005df2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	430a      	orrs	r2, r1
 8005df0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df6:	f003 0308 	and.w	r3, r3, #8
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00a      	beq.n	8005e14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	430a      	orrs	r2, r1
 8005e12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e18:	f003 0310 	and.w	r3, r3, #16
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00a      	beq.n	8005e36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	430a      	orrs	r2, r1
 8005e34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e3a:	f003 0320 	and.w	r3, r3, #32
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00a      	beq.n	8005e58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	430a      	orrs	r2, r1
 8005e56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d01a      	beq.n	8005e9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	430a      	orrs	r2, r1
 8005e78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e82:	d10a      	bne.n	8005e9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	430a      	orrs	r2, r1
 8005e98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00a      	beq.n	8005ebc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	430a      	orrs	r2, r1
 8005eba:	605a      	str	r2, [r3, #4]
  }
}
 8005ebc:	bf00      	nop
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b098      	sub	sp, #96	; 0x60
 8005ecc:	af02      	add	r7, sp, #8
 8005ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ed8:	f7fb f97a 	bl	80011d0 <HAL_GetTick>
 8005edc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 0308 	and.w	r3, r3, #8
 8005ee8:	2b08      	cmp	r3, #8
 8005eea:	d12f      	bne.n	8005f4c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005eec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ef0:	9300      	str	r3, [sp, #0]
 8005ef2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 f88e 	bl	800601c <UART_WaitOnFlagUntilTimeout>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d022      	beq.n	8005f4c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f0e:	e853 3f00 	ldrex	r3, [r3]
 8005f12:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f1a:	653b      	str	r3, [r7, #80]	; 0x50
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	461a      	mov	r2, r3
 8005f22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f24:	647b      	str	r3, [r7, #68]	; 0x44
 8005f26:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f28:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f2c:	e841 2300 	strex	r3, r2, [r1]
 8005f30:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d1e6      	bne.n	8005f06 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2220      	movs	r2, #32
 8005f3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f48:	2303      	movs	r3, #3
 8005f4a:	e063      	b.n	8006014 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 0304 	and.w	r3, r3, #4
 8005f56:	2b04      	cmp	r3, #4
 8005f58:	d149      	bne.n	8005fee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f5a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f5e:	9300      	str	r3, [sp, #0]
 8005f60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f62:	2200      	movs	r2, #0
 8005f64:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 f857 	bl	800601c <UART_WaitOnFlagUntilTimeout>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d03c      	beq.n	8005fee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7c:	e853 3f00 	ldrex	r3, [r3]
 8005f80:	623b      	str	r3, [r7, #32]
   return(result);
 8005f82:	6a3b      	ldr	r3, [r7, #32]
 8005f84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	461a      	mov	r2, r3
 8005f90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f92:	633b      	str	r3, [r7, #48]	; 0x30
 8005f94:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f9a:	e841 2300 	strex	r3, r2, [r1]
 8005f9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1e6      	bne.n	8005f74 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	3308      	adds	r3, #8
 8005fac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	e853 3f00 	ldrex	r3, [r3]
 8005fb4:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f023 0301 	bic.w	r3, r3, #1
 8005fbc:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	3308      	adds	r3, #8
 8005fc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fc6:	61fa      	str	r2, [r7, #28]
 8005fc8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fca:	69b9      	ldr	r1, [r7, #24]
 8005fcc:	69fa      	ldr	r2, [r7, #28]
 8005fce:	e841 2300 	strex	r3, r2, [r1]
 8005fd2:	617b      	str	r3, [r7, #20]
   return(result);
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d1e5      	bne.n	8005fa6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2220      	movs	r2, #32
 8005fde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fea:	2303      	movs	r3, #3
 8005fec:	e012      	b.n	8006014 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2220      	movs	r2, #32
 8005ff2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2220      	movs	r2, #32
 8005ffa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3758      	adds	r7, #88	; 0x58
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	603b      	str	r3, [r7, #0]
 8006028:	4613      	mov	r3, r2
 800602a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800602c:	e049      	b.n	80060c2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006034:	d045      	beq.n	80060c2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006036:	f7fb f8cb 	bl	80011d0 <HAL_GetTick>
 800603a:	4602      	mov	r2, r0
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	69ba      	ldr	r2, [r7, #24]
 8006042:	429a      	cmp	r2, r3
 8006044:	d302      	bcc.n	800604c <UART_WaitOnFlagUntilTimeout+0x30>
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d101      	bne.n	8006050 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800604c:	2303      	movs	r3, #3
 800604e:	e048      	b.n	80060e2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 0304 	and.w	r3, r3, #4
 800605a:	2b00      	cmp	r3, #0
 800605c:	d031      	beq.n	80060c2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	69db      	ldr	r3, [r3, #28]
 8006064:	f003 0308 	and.w	r3, r3, #8
 8006068:	2b08      	cmp	r3, #8
 800606a:	d110      	bne.n	800608e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2208      	movs	r2, #8
 8006072:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006074:	68f8      	ldr	r0, [r7, #12]
 8006076:	f000 f839 	bl	80060ec <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2208      	movs	r2, #8
 800607e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2200      	movs	r2, #0
 8006086:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e029      	b.n	80060e2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	69db      	ldr	r3, [r3, #28]
 8006094:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006098:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800609c:	d111      	bne.n	80060c2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80060a8:	68f8      	ldr	r0, [r7, #12]
 80060aa:	f000 f81f 	bl	80060ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2220      	movs	r2, #32
 80060b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e00f      	b.n	80060e2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	69da      	ldr	r2, [r3, #28]
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	4013      	ands	r3, r2
 80060cc:	68ba      	ldr	r2, [r7, #8]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	bf0c      	ite	eq
 80060d2:	2301      	moveq	r3, #1
 80060d4:	2300      	movne	r3, #0
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	461a      	mov	r2, r3
 80060da:	79fb      	ldrb	r3, [r7, #7]
 80060dc:	429a      	cmp	r2, r3
 80060de:	d0a6      	beq.n	800602e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3710      	adds	r7, #16
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
	...

080060ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b095      	sub	sp, #84	; 0x54
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060fc:	e853 3f00 	ldrex	r3, [r3]
 8006100:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006104:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006108:	64fb      	str	r3, [r7, #76]	; 0x4c
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	461a      	mov	r2, r3
 8006110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006112:	643b      	str	r3, [r7, #64]	; 0x40
 8006114:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006116:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006118:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800611a:	e841 2300 	strex	r3, r2, [r1]
 800611e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006122:	2b00      	cmp	r3, #0
 8006124:	d1e6      	bne.n	80060f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	3308      	adds	r3, #8
 800612c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800612e:	6a3b      	ldr	r3, [r7, #32]
 8006130:	e853 3f00 	ldrex	r3, [r3]
 8006134:	61fb      	str	r3, [r7, #28]
   return(result);
 8006136:	69fa      	ldr	r2, [r7, #28]
 8006138:	4b1e      	ldr	r3, [pc, #120]	; (80061b4 <UART_EndRxTransfer+0xc8>)
 800613a:	4013      	ands	r3, r2
 800613c:	64bb      	str	r3, [r7, #72]	; 0x48
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	3308      	adds	r3, #8
 8006144:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006146:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006148:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800614c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800614e:	e841 2300 	strex	r3, r2, [r1]
 8006152:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006156:	2b00      	cmp	r3, #0
 8006158:	d1e5      	bne.n	8006126 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800615e:	2b01      	cmp	r3, #1
 8006160:	d118      	bne.n	8006194 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	e853 3f00 	ldrex	r3, [r3]
 800616e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	f023 0310 	bic.w	r3, r3, #16
 8006176:	647b      	str	r3, [r7, #68]	; 0x44
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	461a      	mov	r2, r3
 800617e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006180:	61bb      	str	r3, [r7, #24]
 8006182:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006184:	6979      	ldr	r1, [r7, #20]
 8006186:	69ba      	ldr	r2, [r7, #24]
 8006188:	e841 2300 	strex	r3, r2, [r1]
 800618c:	613b      	str	r3, [r7, #16]
   return(result);
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d1e6      	bne.n	8006162 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2220      	movs	r2, #32
 8006198:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	675a      	str	r2, [r3, #116]	; 0x74
}
 80061a8:	bf00      	nop
 80061aa:	3754      	adds	r7, #84	; 0x54
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr
 80061b4:	effffffe 	.word	0xeffffffe

080061b8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b085      	sub	sp, #20
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d101      	bne.n	80061ce <HAL_UARTEx_DisableFifoMode+0x16>
 80061ca:	2302      	movs	r3, #2
 80061cc:	e027      	b.n	800621e <HAL_UARTEx_DisableFifoMode+0x66>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2201      	movs	r2, #1
 80061d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2224      	movs	r2, #36	; 0x24
 80061da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f022 0201 	bic.w	r2, r2, #1
 80061f4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80061fc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2220      	movs	r2, #32
 8006210:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3714      	adds	r7, #20
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr

0800622a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b084      	sub	sp, #16
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
 8006232:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800623a:	2b01      	cmp	r3, #1
 800623c:	d101      	bne.n	8006242 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800623e:	2302      	movs	r3, #2
 8006240:	e02d      	b.n	800629e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2201      	movs	r2, #1
 8006246:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2224      	movs	r2, #36	; 0x24
 800624e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f022 0201 	bic.w	r2, r2, #1
 8006268:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	683a      	ldr	r2, [r7, #0]
 800627a:	430a      	orrs	r2, r1
 800627c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 f850 	bl	8006324 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2220      	movs	r2, #32
 8006290:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3710      	adds	r7, #16
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80062a6:	b580      	push	{r7, lr}
 80062a8:	b084      	sub	sp, #16
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
 80062ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d101      	bne.n	80062be <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80062ba:	2302      	movs	r3, #2
 80062bc:	e02d      	b.n	800631a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2201      	movs	r2, #1
 80062c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2224      	movs	r2, #36	; 0x24
 80062ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f022 0201 	bic.w	r2, r2, #1
 80062e4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	683a      	ldr	r2, [r7, #0]
 80062f6:	430a      	orrs	r2, r1
 80062f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 f812 	bl	8006324 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2220      	movs	r2, #32
 800630c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	3710      	adds	r7, #16
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
	...

08006324 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006324:	b480      	push	{r7}
 8006326:	b085      	sub	sp, #20
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006330:	2b00      	cmp	r3, #0
 8006332:	d108      	bne.n	8006346 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006344:	e031      	b.n	80063aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006346:	2310      	movs	r3, #16
 8006348:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800634a:	2310      	movs	r3, #16
 800634c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	0e5b      	lsrs	r3, r3, #25
 8006356:	b2db      	uxtb	r3, r3
 8006358:	f003 0307 	and.w	r3, r3, #7
 800635c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	0f5b      	lsrs	r3, r3, #29
 8006366:	b2db      	uxtb	r3, r3
 8006368:	f003 0307 	and.w	r3, r3, #7
 800636c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800636e:	7bbb      	ldrb	r3, [r7, #14]
 8006370:	7b3a      	ldrb	r2, [r7, #12]
 8006372:	4911      	ldr	r1, [pc, #68]	; (80063b8 <UARTEx_SetNbDataToProcess+0x94>)
 8006374:	5c8a      	ldrb	r2, [r1, r2]
 8006376:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800637a:	7b3a      	ldrb	r2, [r7, #12]
 800637c:	490f      	ldr	r1, [pc, #60]	; (80063bc <UARTEx_SetNbDataToProcess+0x98>)
 800637e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006380:	fb93 f3f2 	sdiv	r3, r3, r2
 8006384:	b29a      	uxth	r2, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800638c:	7bfb      	ldrb	r3, [r7, #15]
 800638e:	7b7a      	ldrb	r2, [r7, #13]
 8006390:	4909      	ldr	r1, [pc, #36]	; (80063b8 <UARTEx_SetNbDataToProcess+0x94>)
 8006392:	5c8a      	ldrb	r2, [r1, r2]
 8006394:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006398:	7b7a      	ldrb	r2, [r7, #13]
 800639a:	4908      	ldr	r1, [pc, #32]	; (80063bc <UARTEx_SetNbDataToProcess+0x98>)
 800639c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800639e:	fb93 f3f2 	sdiv	r3, r3, r2
 80063a2:	b29a      	uxth	r2, r3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80063aa:	bf00      	nop
 80063ac:	3714      	adds	r7, #20
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr
 80063b6:	bf00      	nop
 80063b8:	08006a6c 	.word	0x08006a6c
 80063bc:	08006a74 	.word	0x08006a74

080063c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80063c0:	b084      	sub	sp, #16
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b084      	sub	sp, #16
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
 80063ca:	f107 001c 	add.w	r0, r7, #28
 80063ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80063d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d120      	bne.n	800641a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	68da      	ldr	r2, [r3, #12]
 80063e8:	4b2a      	ldr	r3, [pc, #168]	; (8006494 <USB_CoreInit+0xd4>)
 80063ea:	4013      	ands	r3, r2
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80063fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d105      	bne.n	800640e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 faac 	bl	800696c <USB_CoreReset>
 8006414:	4603      	mov	r3, r0
 8006416:	73fb      	strb	r3, [r7, #15]
 8006418:	e01a      	b.n	8006450 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 faa0 	bl	800696c <USB_CoreReset>
 800642c:	4603      	mov	r3, r0
 800642e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006430:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006432:	2b00      	cmp	r3, #0
 8006434:	d106      	bne.n	8006444 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800643a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	639a      	str	r2, [r3, #56]	; 0x38
 8006442:	e005      	b.n	8006450 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006448:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006452:	2b01      	cmp	r3, #1
 8006454:	d116      	bne.n	8006484 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800645a:	b29a      	uxth	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006464:	4b0c      	ldr	r3, [pc, #48]	; (8006498 <USB_CoreInit+0xd8>)
 8006466:	4313      	orrs	r3, r2
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	f043 0206 	orr.w	r2, r3, #6
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	f043 0220 	orr.w	r2, r3, #32
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006484:	7bfb      	ldrb	r3, [r7, #15]
}
 8006486:	4618      	mov	r0, r3
 8006488:	3710      	adds	r7, #16
 800648a:	46bd      	mov	sp, r7
 800648c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006490:	b004      	add	sp, #16
 8006492:	4770      	bx	lr
 8006494:	ffbdffbf 	.word	0xffbdffbf
 8006498:	03ee0000 	.word	0x03ee0000

0800649c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	f023 0201 	bic.w	r2, r3, #1
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	370c      	adds	r7, #12
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr

080064be <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80064be:	b580      	push	{r7, lr}
 80064c0:	b084      	sub	sp, #16
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
 80064c6:	460b      	mov	r3, r1
 80064c8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80064ca:	2300      	movs	r3, #0
 80064cc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80064da:	78fb      	ldrb	r3, [r7, #3]
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d115      	bne.n	800650c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80064ec:	2001      	movs	r0, #1
 80064ee:	f7fa fe7b 	bl	80011e8 <HAL_Delay>
      ms++;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	3301      	adds	r3, #1
 80064f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f000 fa29 	bl	8006950 <USB_GetMode>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b01      	cmp	r3, #1
 8006502:	d01e      	beq.n	8006542 <USB_SetCurrentMode+0x84>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2b31      	cmp	r3, #49	; 0x31
 8006508:	d9f0      	bls.n	80064ec <USB_SetCurrentMode+0x2e>
 800650a:	e01a      	b.n	8006542 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800650c:	78fb      	ldrb	r3, [r7, #3]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d115      	bne.n	800653e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800651e:	2001      	movs	r0, #1
 8006520:	f7fa fe62 	bl	80011e8 <HAL_Delay>
      ms++;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	3301      	adds	r3, #1
 8006528:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 fa10 	bl	8006950 <USB_GetMode>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d005      	beq.n	8006542 <USB_SetCurrentMode+0x84>
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2b31      	cmp	r3, #49	; 0x31
 800653a:	d9f0      	bls.n	800651e <USB_SetCurrentMode+0x60>
 800653c:	e001      	b.n	8006542 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	e005      	b.n	800654e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2b32      	cmp	r3, #50	; 0x32
 8006546:	d101      	bne.n	800654c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e000      	b.n	800654e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800654c:	2300      	movs	r3, #0
}
 800654e:	4618      	mov	r0, r3
 8006550:	3710      	adds	r7, #16
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
	...

08006558 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006558:	b084      	sub	sp, #16
 800655a:	b580      	push	{r7, lr}
 800655c:	b086      	sub	sp, #24
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
 8006562:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006566:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800656a:	2300      	movs	r3, #0
 800656c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006572:	2300      	movs	r3, #0
 8006574:	613b      	str	r3, [r7, #16]
 8006576:	e009      	b.n	800658c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	3340      	adds	r3, #64	; 0x40
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	4413      	add	r3, r2
 8006582:	2200      	movs	r2, #0
 8006584:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	3301      	adds	r3, #1
 800658a:	613b      	str	r3, [r7, #16]
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	2b0e      	cmp	r3, #14
 8006590:	d9f2      	bls.n	8006578 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006592:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006594:	2b00      	cmp	r3, #0
 8006596:	d11c      	bne.n	80065d2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065a6:	f043 0302 	orr.w	r3, r3, #2
 80065aa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	601a      	str	r2, [r3, #0]
 80065d0:	e005      	b.n	80065de <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80065e4:	461a      	mov	r2, r3
 80065e6:	2300      	movs	r3, #0
 80065e8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065f0:	4619      	mov	r1, r3
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065f8:	461a      	mov	r2, r3
 80065fa:	680b      	ldr	r3, [r1, #0]
 80065fc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80065fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006600:	2b01      	cmp	r3, #1
 8006602:	d10c      	bne.n	800661e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006606:	2b00      	cmp	r3, #0
 8006608:	d104      	bne.n	8006614 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800660a:	2100      	movs	r1, #0
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 f965 	bl	80068dc <USB_SetDevSpeed>
 8006612:	e008      	b.n	8006626 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006614:	2101      	movs	r1, #1
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 f960 	bl	80068dc <USB_SetDevSpeed>
 800661c:	e003      	b.n	8006626 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800661e:	2103      	movs	r1, #3
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 f95b 	bl	80068dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006626:	2110      	movs	r1, #16
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 f8f3 	bl	8006814 <USB_FlushTxFifo>
 800662e:	4603      	mov	r3, r0
 8006630:	2b00      	cmp	r3, #0
 8006632:	d001      	beq.n	8006638 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 f91f 	bl	800687c <USB_FlushRxFifo>
 800663e:	4603      	mov	r3, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d001      	beq.n	8006648 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800664e:	461a      	mov	r2, r3
 8006650:	2300      	movs	r3, #0
 8006652:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800665a:	461a      	mov	r2, r3
 800665c:	2300      	movs	r3, #0
 800665e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006666:	461a      	mov	r2, r3
 8006668:	2300      	movs	r3, #0
 800666a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800666c:	2300      	movs	r3, #0
 800666e:	613b      	str	r3, [r7, #16]
 8006670:	e043      	b.n	80066fa <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	015a      	lsls	r2, r3, #5
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	4413      	add	r3, r2
 800667a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006684:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006688:	d118      	bne.n	80066bc <USB_DevInit+0x164>
    {
      if (i == 0U)
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d10a      	bne.n	80066a6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	015a      	lsls	r2, r3, #5
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	4413      	add	r3, r2
 8006698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800669c:	461a      	mov	r2, r3
 800669e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80066a2:	6013      	str	r3, [r2, #0]
 80066a4:	e013      	b.n	80066ce <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	015a      	lsls	r2, r3, #5
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	4413      	add	r3, r2
 80066ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066b2:	461a      	mov	r2, r3
 80066b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80066b8:	6013      	str	r3, [r2, #0]
 80066ba:	e008      	b.n	80066ce <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	015a      	lsls	r2, r3, #5
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	4413      	add	r3, r2
 80066c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066c8:	461a      	mov	r2, r3
 80066ca:	2300      	movs	r3, #0
 80066cc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	015a      	lsls	r2, r3, #5
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	4413      	add	r3, r2
 80066d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066da:	461a      	mov	r2, r3
 80066dc:	2300      	movs	r3, #0
 80066de:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	015a      	lsls	r2, r3, #5
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	4413      	add	r3, r2
 80066e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ec:	461a      	mov	r2, r3
 80066ee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80066f2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	3301      	adds	r3, #1
 80066f8:	613b      	str	r3, [r7, #16]
 80066fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fc:	693a      	ldr	r2, [r7, #16]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d3b7      	bcc.n	8006672 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006702:	2300      	movs	r3, #0
 8006704:	613b      	str	r3, [r7, #16]
 8006706:	e043      	b.n	8006790 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	015a      	lsls	r2, r3, #5
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	4413      	add	r3, r2
 8006710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800671a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800671e:	d118      	bne.n	8006752 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d10a      	bne.n	800673c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	015a      	lsls	r2, r3, #5
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	4413      	add	r3, r2
 800672e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006732:	461a      	mov	r2, r3
 8006734:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006738:	6013      	str	r3, [r2, #0]
 800673a:	e013      	b.n	8006764 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	015a      	lsls	r2, r3, #5
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	4413      	add	r3, r2
 8006744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006748:	461a      	mov	r2, r3
 800674a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800674e:	6013      	str	r3, [r2, #0]
 8006750:	e008      	b.n	8006764 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	015a      	lsls	r2, r3, #5
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	4413      	add	r3, r2
 800675a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800675e:	461a      	mov	r2, r3
 8006760:	2300      	movs	r3, #0
 8006762:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	015a      	lsls	r2, r3, #5
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	4413      	add	r3, r2
 800676c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006770:	461a      	mov	r2, r3
 8006772:	2300      	movs	r3, #0
 8006774:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	015a      	lsls	r2, r3, #5
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	4413      	add	r3, r2
 800677e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006782:	461a      	mov	r2, r3
 8006784:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006788:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	3301      	adds	r3, #1
 800678e:	613b      	str	r3, [r7, #16]
 8006790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006792:	693a      	ldr	r2, [r7, #16]
 8006794:	429a      	cmp	r2, r3
 8006796:	d3b7      	bcc.n	8006708 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800679e:	691b      	ldr	r3, [r3, #16]
 80067a0:	68fa      	ldr	r2, [r7, #12]
 80067a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067aa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80067b8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80067ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d105      	bne.n	80067cc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	699b      	ldr	r3, [r3, #24]
 80067c4:	f043 0210 	orr.w	r2, r3, #16
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	699a      	ldr	r2, [r3, #24]
 80067d0:	4b0e      	ldr	r3, [pc, #56]	; (800680c <USB_DevInit+0x2b4>)
 80067d2:	4313      	orrs	r3, r2
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80067d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d005      	beq.n	80067ea <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	699b      	ldr	r3, [r3, #24]
 80067e2:	f043 0208 	orr.w	r2, r3, #8
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80067ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d105      	bne.n	80067fc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	699a      	ldr	r2, [r3, #24]
 80067f4:	4b06      	ldr	r3, [pc, #24]	; (8006810 <USB_DevInit+0x2b8>)
 80067f6:	4313      	orrs	r3, r2
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80067fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3718      	adds	r7, #24
 8006802:	46bd      	mov	sp, r7
 8006804:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006808:	b004      	add	sp, #16
 800680a:	4770      	bx	lr
 800680c:	803c3800 	.word	0x803c3800
 8006810:	40000004 	.word	0x40000004

08006814 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006814:	b480      	push	{r7}
 8006816:	b085      	sub	sp, #20
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800681e:	2300      	movs	r3, #0
 8006820:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	3301      	adds	r3, #1
 8006826:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	4a13      	ldr	r2, [pc, #76]	; (8006878 <USB_FlushTxFifo+0x64>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d901      	bls.n	8006834 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006830:	2303      	movs	r3, #3
 8006832:	e01b      	b.n	800686c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	691b      	ldr	r3, [r3, #16]
 8006838:	2b00      	cmp	r3, #0
 800683a:	daf2      	bge.n	8006822 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800683c:	2300      	movs	r3, #0
 800683e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	019b      	lsls	r3, r3, #6
 8006844:	f043 0220 	orr.w	r2, r3, #32
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	3301      	adds	r3, #1
 8006850:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	4a08      	ldr	r2, [pc, #32]	; (8006878 <USB_FlushTxFifo+0x64>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d901      	bls.n	800685e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800685a:	2303      	movs	r3, #3
 800685c:	e006      	b.n	800686c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	f003 0320 	and.w	r3, r3, #32
 8006866:	2b20      	cmp	r3, #32
 8006868:	d0f0      	beq.n	800684c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800686a:	2300      	movs	r3, #0
}
 800686c:	4618      	mov	r0, r3
 800686e:	3714      	adds	r7, #20
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr
 8006878:	00030d40 	.word	0x00030d40

0800687c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800687c:	b480      	push	{r7}
 800687e:	b085      	sub	sp, #20
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006884:	2300      	movs	r3, #0
 8006886:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	3301      	adds	r3, #1
 800688c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	4a11      	ldr	r2, [pc, #68]	; (80068d8 <USB_FlushRxFifo+0x5c>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d901      	bls.n	800689a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006896:	2303      	movs	r3, #3
 8006898:	e018      	b.n	80068cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	daf2      	bge.n	8006888 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80068a2:	2300      	movs	r3, #0
 80068a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2210      	movs	r2, #16
 80068aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	3301      	adds	r3, #1
 80068b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	4a08      	ldr	r2, [pc, #32]	; (80068d8 <USB_FlushRxFifo+0x5c>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d901      	bls.n	80068be <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80068ba:	2303      	movs	r3, #3
 80068bc:	e006      	b.n	80068cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	f003 0310 	and.w	r3, r3, #16
 80068c6:	2b10      	cmp	r3, #16
 80068c8:	d0f0      	beq.n	80068ac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3714      	adds	r7, #20
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr
 80068d8:	00030d40 	.word	0x00030d40

080068dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	460b      	mov	r3, r1
 80068e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	78fb      	ldrb	r3, [r7, #3]
 80068f6:	68f9      	ldr	r1, [r7, #12]
 80068f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068fc:	4313      	orrs	r3, r2
 80068fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	3714      	adds	r7, #20
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr

0800690e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800690e:	b480      	push	{r7}
 8006910:	b085      	sub	sp, #20
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006928:	f023 0303 	bic.w	r3, r3, #3
 800692c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800693c:	f043 0302 	orr.w	r3, r3, #2
 8006940:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	3714      	adds	r7, #20
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	695b      	ldr	r3, [r3, #20]
 800695c:	f003 0301 	and.w	r3, r3, #1
}
 8006960:	4618      	mov	r0, r3
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800696c:	b480      	push	{r7}
 800696e:	b085      	sub	sp, #20
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006974:	2300      	movs	r3, #0
 8006976:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	3301      	adds	r3, #1
 800697c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	4a13      	ldr	r2, [pc, #76]	; (80069d0 <USB_CoreReset+0x64>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d901      	bls.n	800698a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006986:	2303      	movs	r3, #3
 8006988:	e01b      	b.n	80069c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	2b00      	cmp	r3, #0
 8006990:	daf2      	bge.n	8006978 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006992:	2300      	movs	r3, #0
 8006994:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	f043 0201 	orr.w	r2, r3, #1
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	3301      	adds	r3, #1
 80069a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	4a09      	ldr	r2, [pc, #36]	; (80069d0 <USB_CoreReset+0x64>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d901      	bls.n	80069b4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80069b0:	2303      	movs	r3, #3
 80069b2:	e006      	b.n	80069c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	f003 0301 	and.w	r3, r3, #1
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d0f0      	beq.n	80069a2 <USB_CoreReset+0x36>

  return HAL_OK;
 80069c0:	2300      	movs	r3, #0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3714      	adds	r7, #20
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
 80069ce:	bf00      	nop
 80069d0:	00030d40 	.word	0x00030d40

080069d4 <memset>:
 80069d4:	4402      	add	r2, r0
 80069d6:	4603      	mov	r3, r0
 80069d8:	4293      	cmp	r3, r2
 80069da:	d100      	bne.n	80069de <memset+0xa>
 80069dc:	4770      	bx	lr
 80069de:	f803 1b01 	strb.w	r1, [r3], #1
 80069e2:	e7f9      	b.n	80069d8 <memset+0x4>

080069e4 <__libc_init_array>:
 80069e4:	b570      	push	{r4, r5, r6, lr}
 80069e6:	4d0d      	ldr	r5, [pc, #52]	; (8006a1c <__libc_init_array+0x38>)
 80069e8:	4c0d      	ldr	r4, [pc, #52]	; (8006a20 <__libc_init_array+0x3c>)
 80069ea:	1b64      	subs	r4, r4, r5
 80069ec:	10a4      	asrs	r4, r4, #2
 80069ee:	2600      	movs	r6, #0
 80069f0:	42a6      	cmp	r6, r4
 80069f2:	d109      	bne.n	8006a08 <__libc_init_array+0x24>
 80069f4:	4d0b      	ldr	r5, [pc, #44]	; (8006a24 <__libc_init_array+0x40>)
 80069f6:	4c0c      	ldr	r4, [pc, #48]	; (8006a28 <__libc_init_array+0x44>)
 80069f8:	f000 f818 	bl	8006a2c <_init>
 80069fc:	1b64      	subs	r4, r4, r5
 80069fe:	10a4      	asrs	r4, r4, #2
 8006a00:	2600      	movs	r6, #0
 8006a02:	42a6      	cmp	r6, r4
 8006a04:	d105      	bne.n	8006a12 <__libc_init_array+0x2e>
 8006a06:	bd70      	pop	{r4, r5, r6, pc}
 8006a08:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a0c:	4798      	blx	r3
 8006a0e:	3601      	adds	r6, #1
 8006a10:	e7ee      	b.n	80069f0 <__libc_init_array+0xc>
 8006a12:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a16:	4798      	blx	r3
 8006a18:	3601      	adds	r6, #1
 8006a1a:	e7f2      	b.n	8006a02 <__libc_init_array+0x1e>
 8006a1c:	08006a84 	.word	0x08006a84
 8006a20:	08006a84 	.word	0x08006a84
 8006a24:	08006a84 	.word	0x08006a84
 8006a28:	08006a88 	.word	0x08006a88

08006a2c <_init>:
 8006a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a2e:	bf00      	nop
 8006a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a32:	bc08      	pop	{r3}
 8006a34:	469e      	mov	lr, r3
 8006a36:	4770      	bx	lr

08006a38 <_fini>:
 8006a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a3a:	bf00      	nop
 8006a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a3e:	bc08      	pop	{r3}
 8006a40:	469e      	mov	lr, r3
 8006a42:	4770      	bx	lr
