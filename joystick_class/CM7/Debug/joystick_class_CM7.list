
joystick_class_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db58  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  0800ddf8  0800ddf8  0001ddf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e278  0800e278  00020298  2**0
                  CONTENTS
  4 .ARM          00000008  0800e278  0800e278  0001e278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e280  0800e280  00020298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e280  0800e280  0001e280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e284  0800e284  0001e284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  24000000  0800e288  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  240001d8  0800e460  000201d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000238  0800e4c0  00020238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000900  24000298  0800e520  00020298  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24000b98  0800e520  00020b98  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020298  2**0
                  CONTENTS, READONLY
 14 .comment      00000086  00000000  00000000  000202c6  2**0
                  CONTENTS, READONLY
 15 .debug_info   00021421  00000000  00000000  0002034c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00003714  00000000  00000000  0004176d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001570  00000000  00000000  00044e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000107c  00000000  00000000  000463f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00040e2e  00000000  00000000  00047474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001c0d3  00000000  00000000  000882a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00199691  00000000  00000000  000a4375  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000701c  00000000  00000000  0023da08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006f  00000000  00000000  00244a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000298 	.word	0x24000298
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800dde0 	.word	0x0800dde0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400029c 	.word	0x2400029c
 80002dc:	0800dde0 	.word	0x0800dde0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a8 	b.w	8000a70 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9e08      	ldr	r6, [sp, #32]
 80007ae:	460d      	mov	r5, r1
 80007b0:	4604      	mov	r4, r0
 80007b2:	460f      	mov	r7, r1
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d14a      	bne.n	800084e <__udivmoddi4+0xa6>
 80007b8:	428a      	cmp	r2, r1
 80007ba:	4694      	mov	ip, r2
 80007bc:	d965      	bls.n	800088a <__udivmoddi4+0xe2>
 80007be:	fab2 f382 	clz	r3, r2
 80007c2:	b143      	cbz	r3, 80007d6 <__udivmoddi4+0x2e>
 80007c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80007c8:	f1c3 0220 	rsb	r2, r3, #32
 80007cc:	409f      	lsls	r7, r3
 80007ce:	fa20 f202 	lsr.w	r2, r0, r2
 80007d2:	4317      	orrs	r7, r2
 80007d4:	409c      	lsls	r4, r3
 80007d6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80007da:	fa1f f58c 	uxth.w	r5, ip
 80007de:	fbb7 f1fe 	udiv	r1, r7, lr
 80007e2:	0c22      	lsrs	r2, r4, #16
 80007e4:	fb0e 7711 	mls	r7, lr, r1, r7
 80007e8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80007ec:	fb01 f005 	mul.w	r0, r1, r5
 80007f0:	4290      	cmp	r0, r2
 80007f2:	d90a      	bls.n	800080a <__udivmoddi4+0x62>
 80007f4:	eb1c 0202 	adds.w	r2, ip, r2
 80007f8:	f101 37ff 	add.w	r7, r1, #4294967295
 80007fc:	f080 811c 	bcs.w	8000a38 <__udivmoddi4+0x290>
 8000800:	4290      	cmp	r0, r2
 8000802:	f240 8119 	bls.w	8000a38 <__udivmoddi4+0x290>
 8000806:	3902      	subs	r1, #2
 8000808:	4462      	add	r2, ip
 800080a:	1a12      	subs	r2, r2, r0
 800080c:	b2a4      	uxth	r4, r4
 800080e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000812:	fb0e 2210 	mls	r2, lr, r0, r2
 8000816:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800081a:	fb00 f505 	mul.w	r5, r0, r5
 800081e:	42a5      	cmp	r5, r4
 8000820:	d90a      	bls.n	8000838 <__udivmoddi4+0x90>
 8000822:	eb1c 0404 	adds.w	r4, ip, r4
 8000826:	f100 32ff 	add.w	r2, r0, #4294967295
 800082a:	f080 8107 	bcs.w	8000a3c <__udivmoddi4+0x294>
 800082e:	42a5      	cmp	r5, r4
 8000830:	f240 8104 	bls.w	8000a3c <__udivmoddi4+0x294>
 8000834:	4464      	add	r4, ip
 8000836:	3802      	subs	r0, #2
 8000838:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800083c:	1b64      	subs	r4, r4, r5
 800083e:	2100      	movs	r1, #0
 8000840:	b11e      	cbz	r6, 800084a <__udivmoddi4+0xa2>
 8000842:	40dc      	lsrs	r4, r3
 8000844:	2300      	movs	r3, #0
 8000846:	e9c6 4300 	strd	r4, r3, [r6]
 800084a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084e:	428b      	cmp	r3, r1
 8000850:	d908      	bls.n	8000864 <__udivmoddi4+0xbc>
 8000852:	2e00      	cmp	r6, #0
 8000854:	f000 80ed 	beq.w	8000a32 <__udivmoddi4+0x28a>
 8000858:	2100      	movs	r1, #0
 800085a:	e9c6 0500 	strd	r0, r5, [r6]
 800085e:	4608      	mov	r0, r1
 8000860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000864:	fab3 f183 	clz	r1, r3
 8000868:	2900      	cmp	r1, #0
 800086a:	d149      	bne.n	8000900 <__udivmoddi4+0x158>
 800086c:	42ab      	cmp	r3, r5
 800086e:	d302      	bcc.n	8000876 <__udivmoddi4+0xce>
 8000870:	4282      	cmp	r2, r0
 8000872:	f200 80f8 	bhi.w	8000a66 <__udivmoddi4+0x2be>
 8000876:	1a84      	subs	r4, r0, r2
 8000878:	eb65 0203 	sbc.w	r2, r5, r3
 800087c:	2001      	movs	r0, #1
 800087e:	4617      	mov	r7, r2
 8000880:	2e00      	cmp	r6, #0
 8000882:	d0e2      	beq.n	800084a <__udivmoddi4+0xa2>
 8000884:	e9c6 4700 	strd	r4, r7, [r6]
 8000888:	e7df      	b.n	800084a <__udivmoddi4+0xa2>
 800088a:	b902      	cbnz	r2, 800088e <__udivmoddi4+0xe6>
 800088c:	deff      	udf	#255	; 0xff
 800088e:	fab2 f382 	clz	r3, r2
 8000892:	2b00      	cmp	r3, #0
 8000894:	f040 8090 	bne.w	80009b8 <__udivmoddi4+0x210>
 8000898:	1a8a      	subs	r2, r1, r2
 800089a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800089e:	fa1f fe8c 	uxth.w	lr, ip
 80008a2:	2101      	movs	r1, #1
 80008a4:	fbb2 f5f7 	udiv	r5, r2, r7
 80008a8:	fb07 2015 	mls	r0, r7, r5, r2
 80008ac:	0c22      	lsrs	r2, r4, #16
 80008ae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80008b2:	fb0e f005 	mul.w	r0, lr, r5
 80008b6:	4290      	cmp	r0, r2
 80008b8:	d908      	bls.n	80008cc <__udivmoddi4+0x124>
 80008ba:	eb1c 0202 	adds.w	r2, ip, r2
 80008be:	f105 38ff 	add.w	r8, r5, #4294967295
 80008c2:	d202      	bcs.n	80008ca <__udivmoddi4+0x122>
 80008c4:	4290      	cmp	r0, r2
 80008c6:	f200 80cb 	bhi.w	8000a60 <__udivmoddi4+0x2b8>
 80008ca:	4645      	mov	r5, r8
 80008cc:	1a12      	subs	r2, r2, r0
 80008ce:	b2a4      	uxth	r4, r4
 80008d0:	fbb2 f0f7 	udiv	r0, r2, r7
 80008d4:	fb07 2210 	mls	r2, r7, r0, r2
 80008d8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008dc:	fb0e fe00 	mul.w	lr, lr, r0
 80008e0:	45a6      	cmp	lr, r4
 80008e2:	d908      	bls.n	80008f6 <__udivmoddi4+0x14e>
 80008e4:	eb1c 0404 	adds.w	r4, ip, r4
 80008e8:	f100 32ff 	add.w	r2, r0, #4294967295
 80008ec:	d202      	bcs.n	80008f4 <__udivmoddi4+0x14c>
 80008ee:	45a6      	cmp	lr, r4
 80008f0:	f200 80bb 	bhi.w	8000a6a <__udivmoddi4+0x2c2>
 80008f4:	4610      	mov	r0, r2
 80008f6:	eba4 040e 	sub.w	r4, r4, lr
 80008fa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80008fe:	e79f      	b.n	8000840 <__udivmoddi4+0x98>
 8000900:	f1c1 0720 	rsb	r7, r1, #32
 8000904:	408b      	lsls	r3, r1
 8000906:	fa22 fc07 	lsr.w	ip, r2, r7
 800090a:	ea4c 0c03 	orr.w	ip, ip, r3
 800090e:	fa05 f401 	lsl.w	r4, r5, r1
 8000912:	fa20 f307 	lsr.w	r3, r0, r7
 8000916:	40fd      	lsrs	r5, r7
 8000918:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800091c:	4323      	orrs	r3, r4
 800091e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000922:	fa1f fe8c 	uxth.w	lr, ip
 8000926:	fb09 5518 	mls	r5, r9, r8, r5
 800092a:	0c1c      	lsrs	r4, r3, #16
 800092c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000930:	fb08 f50e 	mul.w	r5, r8, lr
 8000934:	42a5      	cmp	r5, r4
 8000936:	fa02 f201 	lsl.w	r2, r2, r1
 800093a:	fa00 f001 	lsl.w	r0, r0, r1
 800093e:	d90b      	bls.n	8000958 <__udivmoddi4+0x1b0>
 8000940:	eb1c 0404 	adds.w	r4, ip, r4
 8000944:	f108 3aff 	add.w	sl, r8, #4294967295
 8000948:	f080 8088 	bcs.w	8000a5c <__udivmoddi4+0x2b4>
 800094c:	42a5      	cmp	r5, r4
 800094e:	f240 8085 	bls.w	8000a5c <__udivmoddi4+0x2b4>
 8000952:	f1a8 0802 	sub.w	r8, r8, #2
 8000956:	4464      	add	r4, ip
 8000958:	1b64      	subs	r4, r4, r5
 800095a:	b29d      	uxth	r5, r3
 800095c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000960:	fb09 4413 	mls	r4, r9, r3, r4
 8000964:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000968:	fb03 fe0e 	mul.w	lr, r3, lr
 800096c:	45a6      	cmp	lr, r4
 800096e:	d908      	bls.n	8000982 <__udivmoddi4+0x1da>
 8000970:	eb1c 0404 	adds.w	r4, ip, r4
 8000974:	f103 35ff 	add.w	r5, r3, #4294967295
 8000978:	d26c      	bcs.n	8000a54 <__udivmoddi4+0x2ac>
 800097a:	45a6      	cmp	lr, r4
 800097c:	d96a      	bls.n	8000a54 <__udivmoddi4+0x2ac>
 800097e:	3b02      	subs	r3, #2
 8000980:	4464      	add	r4, ip
 8000982:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000986:	fba3 9502 	umull	r9, r5, r3, r2
 800098a:	eba4 040e 	sub.w	r4, r4, lr
 800098e:	42ac      	cmp	r4, r5
 8000990:	46c8      	mov	r8, r9
 8000992:	46ae      	mov	lr, r5
 8000994:	d356      	bcc.n	8000a44 <__udivmoddi4+0x29c>
 8000996:	d053      	beq.n	8000a40 <__udivmoddi4+0x298>
 8000998:	b156      	cbz	r6, 80009b0 <__udivmoddi4+0x208>
 800099a:	ebb0 0208 	subs.w	r2, r0, r8
 800099e:	eb64 040e 	sbc.w	r4, r4, lr
 80009a2:	fa04 f707 	lsl.w	r7, r4, r7
 80009a6:	40ca      	lsrs	r2, r1
 80009a8:	40cc      	lsrs	r4, r1
 80009aa:	4317      	orrs	r7, r2
 80009ac:	e9c6 7400 	strd	r7, r4, [r6]
 80009b0:	4618      	mov	r0, r3
 80009b2:	2100      	movs	r1, #0
 80009b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b8:	f1c3 0120 	rsb	r1, r3, #32
 80009bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80009c0:	fa20 f201 	lsr.w	r2, r0, r1
 80009c4:	fa25 f101 	lsr.w	r1, r5, r1
 80009c8:	409d      	lsls	r5, r3
 80009ca:	432a      	orrs	r2, r5
 80009cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009d0:	fa1f fe8c 	uxth.w	lr, ip
 80009d4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009d8:	fb07 1510 	mls	r5, r7, r0, r1
 80009dc:	0c11      	lsrs	r1, r2, #16
 80009de:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80009e2:	fb00 f50e 	mul.w	r5, r0, lr
 80009e6:	428d      	cmp	r5, r1
 80009e8:	fa04 f403 	lsl.w	r4, r4, r3
 80009ec:	d908      	bls.n	8000a00 <__udivmoddi4+0x258>
 80009ee:	eb1c 0101 	adds.w	r1, ip, r1
 80009f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80009f6:	d22f      	bcs.n	8000a58 <__udivmoddi4+0x2b0>
 80009f8:	428d      	cmp	r5, r1
 80009fa:	d92d      	bls.n	8000a58 <__udivmoddi4+0x2b0>
 80009fc:	3802      	subs	r0, #2
 80009fe:	4461      	add	r1, ip
 8000a00:	1b49      	subs	r1, r1, r5
 8000a02:	b292      	uxth	r2, r2
 8000a04:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a08:	fb07 1115 	mls	r1, r7, r5, r1
 8000a0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a10:	fb05 f10e 	mul.w	r1, r5, lr
 8000a14:	4291      	cmp	r1, r2
 8000a16:	d908      	bls.n	8000a2a <__udivmoddi4+0x282>
 8000a18:	eb1c 0202 	adds.w	r2, ip, r2
 8000a1c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a20:	d216      	bcs.n	8000a50 <__udivmoddi4+0x2a8>
 8000a22:	4291      	cmp	r1, r2
 8000a24:	d914      	bls.n	8000a50 <__udivmoddi4+0x2a8>
 8000a26:	3d02      	subs	r5, #2
 8000a28:	4462      	add	r2, ip
 8000a2a:	1a52      	subs	r2, r2, r1
 8000a2c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a30:	e738      	b.n	80008a4 <__udivmoddi4+0xfc>
 8000a32:	4631      	mov	r1, r6
 8000a34:	4630      	mov	r0, r6
 8000a36:	e708      	b.n	800084a <__udivmoddi4+0xa2>
 8000a38:	4639      	mov	r1, r7
 8000a3a:	e6e6      	b.n	800080a <__udivmoddi4+0x62>
 8000a3c:	4610      	mov	r0, r2
 8000a3e:	e6fb      	b.n	8000838 <__udivmoddi4+0x90>
 8000a40:	4548      	cmp	r0, r9
 8000a42:	d2a9      	bcs.n	8000998 <__udivmoddi4+0x1f0>
 8000a44:	ebb9 0802 	subs.w	r8, r9, r2
 8000a48:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a4c:	3b01      	subs	r3, #1
 8000a4e:	e7a3      	b.n	8000998 <__udivmoddi4+0x1f0>
 8000a50:	4645      	mov	r5, r8
 8000a52:	e7ea      	b.n	8000a2a <__udivmoddi4+0x282>
 8000a54:	462b      	mov	r3, r5
 8000a56:	e794      	b.n	8000982 <__udivmoddi4+0x1da>
 8000a58:	4640      	mov	r0, r8
 8000a5a:	e7d1      	b.n	8000a00 <__udivmoddi4+0x258>
 8000a5c:	46d0      	mov	r8, sl
 8000a5e:	e77b      	b.n	8000958 <__udivmoddi4+0x1b0>
 8000a60:	3d02      	subs	r5, #2
 8000a62:	4462      	add	r2, ip
 8000a64:	e732      	b.n	80008cc <__udivmoddi4+0x124>
 8000a66:	4608      	mov	r0, r1
 8000a68:	e70a      	b.n	8000880 <__udivmoddi4+0xd8>
 8000a6a:	4464      	add	r4, ip
 8000a6c:	3802      	subs	r0, #2
 8000a6e:	e742      	b.n	80008f6 <__udivmoddi4+0x14e>

08000a70 <__aeabi_idiv0>:
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a78:	4b3d      	ldr	r3, [pc, #244]	; (8000b70 <SystemInit+0xfc>)
 8000a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a7e:	4a3c      	ldr	r2, [pc, #240]	; (8000b70 <SystemInit+0xfc>)
 8000a80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000a88:	4b39      	ldr	r3, [pc, #228]	; (8000b70 <SystemInit+0xfc>)
 8000a8a:	691b      	ldr	r3, [r3, #16]
 8000a8c:	4a38      	ldr	r2, [pc, #224]	; (8000b70 <SystemInit+0xfc>)
 8000a8e:	f043 0310 	orr.w	r3, r3, #16
 8000a92:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a94:	4b37      	ldr	r3, [pc, #220]	; (8000b74 <SystemInit+0x100>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f003 030f 	and.w	r3, r3, #15
 8000a9c:	2b06      	cmp	r3, #6
 8000a9e:	d807      	bhi.n	8000ab0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000aa0:	4b34      	ldr	r3, [pc, #208]	; (8000b74 <SystemInit+0x100>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f023 030f 	bic.w	r3, r3, #15
 8000aa8:	4a32      	ldr	r2, [pc, #200]	; (8000b74 <SystemInit+0x100>)
 8000aaa:	f043 0307 	orr.w	r3, r3, #7
 8000aae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ab0:	4b31      	ldr	r3, [pc, #196]	; (8000b78 <SystemInit+0x104>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a30      	ldr	r2, [pc, #192]	; (8000b78 <SystemInit+0x104>)
 8000ab6:	f043 0301 	orr.w	r3, r3, #1
 8000aba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000abc:	4b2e      	ldr	r3, [pc, #184]	; (8000b78 <SystemInit+0x104>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ac2:	4b2d      	ldr	r3, [pc, #180]	; (8000b78 <SystemInit+0x104>)
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	492c      	ldr	r1, [pc, #176]	; (8000b78 <SystemInit+0x104>)
 8000ac8:	4b2c      	ldr	r3, [pc, #176]	; (8000b7c <SystemInit+0x108>)
 8000aca:	4013      	ands	r3, r2
 8000acc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ace:	4b29      	ldr	r3, [pc, #164]	; (8000b74 <SystemInit+0x100>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f003 0308 	and.w	r3, r3, #8
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d007      	beq.n	8000aea <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ada:	4b26      	ldr	r3, [pc, #152]	; (8000b74 <SystemInit+0x100>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f023 030f 	bic.w	r3, r3, #15
 8000ae2:	4a24      	ldr	r2, [pc, #144]	; (8000b74 <SystemInit+0x100>)
 8000ae4:	f043 0307 	orr.w	r3, r3, #7
 8000ae8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000aea:	4b23      	ldr	r3, [pc, #140]	; (8000b78 <SystemInit+0x104>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <SystemInit+0x104>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <SystemInit+0x104>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <SystemInit+0x104>)
 8000afe:	4a20      	ldr	r2, [pc, #128]	; (8000b80 <SystemInit+0x10c>)
 8000b00:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <SystemInit+0x104>)
 8000b04:	4a1f      	ldr	r2, [pc, #124]	; (8000b84 <SystemInit+0x110>)
 8000b06:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <SystemInit+0x104>)
 8000b0a:	4a1f      	ldr	r2, [pc, #124]	; (8000b88 <SystemInit+0x114>)
 8000b0c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b0e:	4b1a      	ldr	r3, [pc, #104]	; (8000b78 <SystemInit+0x104>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b14:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <SystemInit+0x104>)
 8000b16:	4a1c      	ldr	r2, [pc, #112]	; (8000b88 <SystemInit+0x114>)
 8000b18:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b1a:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <SystemInit+0x104>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <SystemInit+0x104>)
 8000b22:	4a19      	ldr	r2, [pc, #100]	; (8000b88 <SystemInit+0x114>)
 8000b24:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b26:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <SystemInit+0x104>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <SystemInit+0x104>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a11      	ldr	r2, [pc, #68]	; (8000b78 <SystemInit+0x104>)
 8000b32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b36:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <SystemInit+0x104>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b3e:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <SystemInit+0x118>)
 8000b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b42:	4a12      	ldr	r2, [pc, #72]	; (8000b8c <SystemInit+0x118>)
 8000b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b48:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b4a:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <SystemInit+0x11c>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <SystemInit+0x120>)
 8000b50:	4013      	ands	r3, r2
 8000b52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b56:	d202      	bcs.n	8000b5e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b58:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <SystemInit+0x124>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b5e:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <SystemInit+0x128>)
 8000b60:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b64:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000ed00 	.word	0xe000ed00
 8000b74:	52002000 	.word	0x52002000
 8000b78:	58024400 	.word	0x58024400
 8000b7c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b80:	02020200 	.word	0x02020200
 8000b84:	01ff0000 	.word	0x01ff0000
 8000b88:	01010280 	.word	0x01010280
 8000b8c:	580000c0 	.word	0x580000c0
 8000b90:	5c001000 	.word	0x5c001000
 8000b94:	ffff0000 	.word	0xffff0000
 8000b98:	51008108 	.word	0x51008108
 8000b9c:	52004000 	.word	0x52004000

08000ba0 <_ZN8JoystickC1EP17ADC_HandleTypeDefS1_>:
 *      Author: serfa
 */

#include "Joystick.hpp"

Joystick::Joystick(ADC_HandleTypeDef *_hadc1, ADC_HandleTypeDef *_hadc2) {
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]
	//HAL_ADC_Start(_hadc1);
	//HAL_ADC_Start(_hadc2);
	hadc1 = _hadc1;
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	68ba      	ldr	r2, [r7, #8]
 8000bb0:	605a      	str	r2, [r3, #4]
	hadc2 = _hadc2;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	687a      	ldr	r2, [r7, #4]
 8000bb6:	609a      	str	r2, [r3, #8]

    in_min  =  1;
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	2201      	movs	r2, #1
 8000bbc:	621a      	str	r2, [r3, #32]
    in_max  =  65;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	2241      	movs	r2, #65	; 0x41
 8000bc2:	625a      	str	r2, [r3, #36]	; 0x24
    out_min = -1;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8000bca:	629a      	str	r2, [r3, #40]	; 0x28
    out_max =  1;
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	2201      	movs	r2, #1
 8000bd0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3714      	adds	r7, #20
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <_ZN8Joystick4readEv>:
void Joystick::read(){
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(hadc1);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f001 fc4f 	bl	8002490 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc1, 100);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	2164      	movs	r1, #100	; 0x64
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f001 fd13 	bl	8002624 <HAL_ADC_PollForConversion>
    HAL_Delay(1);
 8000bfe:	2001      	movs	r0, #1
 8000c00:	f001 f87e 	bl	8001d00 <HAL_Delay>
	x_adc = HAL_ADC_GetValue(hadc1);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f001 fdff 	bl	800280c <HAL_ADC_GetValue>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	b29a      	uxth	r2, r3
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	819a      	strh	r2, [r3, #12]
    x_axis = x_adc / 1000;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	899b      	ldrh	r3, [r3, #12]
 8000c1a:	4a1a      	ldr	r2, [pc, #104]	; (8000c84 <_ZN8Joystick4readEv+0xa4>)
 8000c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c20:	099b      	lsrs	r3, r3, #6
 8000c22:	b29b      	uxth	r3, r3
 8000c24:	ee07 3a90 	vmov	s15, r3
 8000c28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	edc3 7a04 	vstr	s15, [r3, #16]

    HAL_ADC_Start(hadc2);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	4618      	mov	r0, r3
 8000c38:	f001 fc2a 	bl	8002490 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc2, 100);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	689b      	ldr	r3, [r3, #8]
 8000c40:	2164      	movs	r1, #100	; 0x64
 8000c42:	4618      	mov	r0, r3
 8000c44:	f001 fcee 	bl	8002624 <HAL_ADC_PollForConversion>
	HAL_Delay(1);
 8000c48:	2001      	movs	r0, #1
 8000c4a:	f001 f859 	bl	8001d00 <HAL_Delay>
	y_adc = HAL_ADC_GetValue(hadc2);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	4618      	mov	r0, r3
 8000c54:	f001 fdda 	bl	800280c <HAL_ADC_GetValue>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	b29a      	uxth	r2, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	81da      	strh	r2, [r3, #14]
    y_axis = y_adc / 1000;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	89db      	ldrh	r3, [r3, #14]
 8000c64:	4a07      	ldr	r2, [pc, #28]	; (8000c84 <_ZN8Joystick4readEv+0xa4>)
 8000c66:	fba2 2303 	umull	r2, r3, r2, r3
 8000c6a:	099b      	lsrs	r3, r3, #6
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	ee07 3a90 	vmov	s15, r3
 8000c72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	10624dd3 	.word	0x10624dd3

08000c88 <_ZN8Joystick3mapEf>:
float Joystick::map(float x){
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	ed87 0a00 	vstr	s0, [r7]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6a1b      	ldr	r3, [r3, #32]
 8000c98:	ee07 3a90 	vmov	s15, r3
 8000c9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ca0:	ed97 7a00 	vldr	s14, [r7]
 8000ca4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	ee07 3a90 	vmov	s15, r3
 8000cb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cba:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6a1b      	ldr	r3, [r3, #32]
 8000cc6:	1ad3      	subs	r3, r2, r3
 8000cc8:	ee07 3a90 	vmov	s15, r3
 8000ccc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cd8:	ee07 3a90 	vmov	s15, r3
 8000cdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ce0:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000ce4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <_ZN8Joystick7set_posEv>:
void Joystick::set_pos(){
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
	x_pos = map(x_axis);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	edd3 7a04 	vldr	s15, [r3, #16]
 8000d00:	eeb0 0a67 	vmov.f32	s0, s15
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f7ff ffbf 	bl	8000c88 <_ZN8Joystick3mapEf>
 8000d0a:	eef0 7a40 	vmov.f32	s15, s0
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	edc3 7a06 	vstr	s15, [r3, #24]
	y_pos = map(y_axis);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	edd3 7a05 	vldr	s15, [r3, #20]
 8000d1a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f7ff ffb2 	bl	8000c88 <_ZN8Joystick3mapEf>
 8000d24:	eef0 7a40 	vmov.f32	s15, s0
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <_ZN8Joystick8get_xPosEv>:
float Joystick::get_xPos(){
 8000d36:	b480      	push	{r7}
 8000d38:	b083      	sub	sp, #12
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
	return x_pos;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	699b      	ldr	r3, [r3, #24]
 8000d42:	ee07 3a90 	vmov	s15, r3
}
 8000d46:	eeb0 0a67 	vmov.f32	s0, s15
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <_ZN8Joystick8get_yPosEv>:
float Joystick::get_yPos(){
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
	return y_pos;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	69db      	ldr	r3, [r3, #28]
 8000d60:	ee07 3a90 	vmov	s15, r3
}
 8000d64:	eeb0 0a67 	vmov.f32	s0, s15
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
	...

08000d74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	ed2d 8b02 	vpush	{d8}
 8000d7a:	b0a0      	sub	sp, #128	; 0x80
 8000d7c:	af04      	add	r7, sp, #16
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000d7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d82:	66fb      	str	r3, [r7, #108]	; 0x6c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000d84:	bf00      	nop
 8000d86:	4b46      	ldr	r3, [pc, #280]	; (8000ea0 <main+0x12c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d006      	beq.n	8000da0 <main+0x2c>
 8000d92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000d94:	1e5a      	subs	r2, r3, #1
 8000d96:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	dd01      	ble.n	8000da0 <main+0x2c>
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	e000      	b.n	8000da2 <main+0x2e>
 8000da0:	2300      	movs	r3, #0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d1ef      	bne.n	8000d86 <main+0x12>
  if ( timeout < 0 )
 8000da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	da01      	bge.n	8000db0 <main+0x3c>
  {
  Error_Handler();
 8000dac:	f000 fb8c 	bl	80014c8 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000db0:	f000 ff14 	bl	8001bdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000db4:	f000 f880 	bl	8000eb8 <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000db8:	f000 f90a 	bl	8000fd0 <_Z24PeriphCommonClock_Configv>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000dbc:	4b38      	ldr	r3, [pc, #224]	; (8000ea0 <main+0x12c>)
 8000dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc2:	4a37      	ldr	r2, [pc, #220]	; (8000ea0 <main+0x12c>)
 8000dc4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dcc:	4b34      	ldr	r3, [pc, #208]	; (8000ea0 <main+0x12c>)
 8000dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f003 f9c6 	bl	800416c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000de0:	2100      	movs	r1, #0
 8000de2:	2000      	movs	r0, #0
 8000de4:	f003 f9dc 	bl	80041a0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000de8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dec:	66fb      	str	r3, [r7, #108]	; 0x6c
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000dee:	bf00      	nop
 8000df0:	4b2b      	ldr	r3, [pc, #172]	; (8000ea0 <main+0x12c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d106      	bne.n	8000e0a <main+0x96>
 8000dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000dfe:	1e5a      	subs	r2, r3, #1
 8000e00:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	dd01      	ble.n	8000e0a <main+0x96>
 8000e06:	2301      	movs	r3, #1
 8000e08:	e000      	b.n	8000e0c <main+0x98>
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d1ef      	bne.n	8000df0 <main+0x7c>
if ( timeout < 0 )
 8000e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	da01      	bge.n	8000e1a <main+0xa6>
{
Error_Handler();
 8000e16:	f000 fb57 	bl	80014c8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e1a:	f000 faef 	bl	80013fc <_ZL12MX_GPIO_Initv>
  MX_ETH_Init();
 8000e1e:	f000 fa05 	bl	800122c <_ZL11MX_ETH_Initv>
  MX_USART3_UART_Init();
 8000e22:	f000 fa55 	bl	80012d0 <_ZL19MX_USART3_UART_Initv>
  MX_USB_OTG_FS_PCD_Init();
 8000e26:	f000 fab3 	bl	8001390 <_ZL22MX_USB_OTG_FS_PCD_Initv>
  MX_ADC1_Init();
 8000e2a:	f000 f907 	bl	800103c <_ZL12MX_ADC1_Initv>
  MX_ADC2_Init();
 8000e2e:	f000 f98d 	bl	800114c <_ZL12MX_ADC2_Initv>
  /* USER CODE BEGIN 2 */
  Joystick j1(&hadc1, &hadc2);
 8000e32:	f107 0308 	add.w	r3, r7, #8
 8000e36:	4a1b      	ldr	r2, [pc, #108]	; (8000ea4 <main+0x130>)
 8000e38:	491b      	ldr	r1, [pc, #108]	; (8000ea8 <main+0x134>)
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff feb0 	bl	8000ba0 <_ZN8JoystickC1EP17ADC_HandleTypeDefS1_>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  j1.read();
 8000e40:	f107 0308 	add.w	r3, r7, #8
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff fecb 	bl	8000be0 <_ZN8Joystick4readEv>
	  j1.set_pos();
 8000e4a:	f107 0308 	add.w	r3, r7, #8
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff ff4f 	bl	8000cf2 <_ZN8Joystick7set_posEv>
	  snprintf(msg, 50, "CH_1: %.2f, CH_2: %.2f \r\n", j1.get_xPos(), j1.get_yPos());
 8000e54:	f107 0308 	add.w	r3, r7, #8
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff ff6c 	bl	8000d36 <_ZN8Joystick8get_xPosEv>
 8000e5e:	eef0 7a40 	vmov.f32	s15, s0
 8000e62:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8000e66:	f107 0308 	add.w	r3, r7, #8
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff ff72 	bl	8000d54 <_ZN8Joystick8get_yPosEv>
 8000e70:	eef0 7a40 	vmov.f32	s15, s0
 8000e74:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e78:	ed8d 7b02 	vstr	d7, [sp, #8]
 8000e7c:	ed8d 8b00 	vstr	d8, [sp]
 8000e80:	4a0a      	ldr	r2, [pc, #40]	; (8000eac <main+0x138>)
 8000e82:	2132      	movs	r1, #50	; 0x32
 8000e84:	480a      	ldr	r0, [pc, #40]	; (8000eb0 <main+0x13c>)
 8000e86:	f009 fba3 	bl	800a5d0 <sniprintf>
	  //snprintf(msg, 50, "CH_1: %.2f, CH_2: %.2f \r\n", 0.0, 0.0);
	  HAL_UART_Transmit(&huart3,(uint8_t*) msg,sizeof(msg),10);
 8000e8a:	230a      	movs	r3, #10
 8000e8c:	2232      	movs	r2, #50	; 0x32
 8000e8e:	4908      	ldr	r1, [pc, #32]	; (8000eb0 <main+0x13c>)
 8000e90:	4808      	ldr	r0, [pc, #32]	; (8000eb4 <main+0x140>)
 8000e92:	f007 f87f 	bl	8007f94 <HAL_UART_Transmit>
	  HAL_Delay(100);
 8000e96:	2064      	movs	r0, #100	; 0x64
 8000e98:	f000 ff32 	bl	8001d00 <HAL_Delay>
	  j1.read();
 8000e9c:	e7d0      	b.n	8000e40 <main+0xcc>
 8000e9e:	bf00      	nop
 8000ea0:	58024400 	.word	0x58024400
 8000ea4:	24000350 	.word	0x24000350
 8000ea8:	240002ec 	.word	0x240002ec
 8000eac:	0800ddf8 	.word	0x0800ddf8
 8000eb0:	24000a04 	.word	0x24000a04
 8000eb4:	24000464 	.word	0x24000464

08000eb8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b09c      	sub	sp, #112	; 0x70
 8000ebc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ebe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec2:	224c      	movs	r2, #76	; 0x4c
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f009 fc19 	bl	800a6fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	2220      	movs	r2, #32
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f009 fc13 	bl	800a6fe <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000ed8:	2004      	movs	r0, #4
 8000eda:	f003 fabd 	bl	8004458 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ede:	2300      	movs	r3, #0
 8000ee0:	603b      	str	r3, [r7, #0]
 8000ee2:	4b39      	ldr	r3, [pc, #228]	; (8000fc8 <_Z18SystemClock_Configv+0x110>)
 8000ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee6:	4a38      	ldr	r2, [pc, #224]	; (8000fc8 <_Z18SystemClock_Configv+0x110>)
 8000ee8:	f023 0301 	bic.w	r3, r3, #1
 8000eec:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000eee:	4b36      	ldr	r3, [pc, #216]	; (8000fc8 <_Z18SystemClock_Configv+0x110>)
 8000ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	603b      	str	r3, [r7, #0]
 8000ef8:	4b34      	ldr	r3, [pc, #208]	; (8000fcc <_Z18SystemClock_Configv+0x114>)
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f00:	4a32      	ldr	r2, [pc, #200]	; (8000fcc <_Z18SystemClock_Configv+0x114>)
 8000f02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f06:	6193      	str	r3, [r2, #24]
 8000f08:	4b30      	ldr	r3, [pc, #192]	; (8000fcc <_Z18SystemClock_Configv+0x114>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f10:	603b      	str	r3, [r7, #0]
 8000f12:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f14:	bf00      	nop
 8000f16:	4b2d      	ldr	r3, [pc, #180]	; (8000fcc <_Z18SystemClock_Configv+0x114>)
 8000f18:	699b      	ldr	r3, [r3, #24]
 8000f1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f22:	bf14      	ite	ne
 8000f24:	2301      	movne	r3, #1
 8000f26:	2300      	moveq	r3, #0
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d1f3      	bne.n	8000f16 <_Z18SystemClock_Configv+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f32:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000f36:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f40:	2301      	movs	r3, #1
 8000f42:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000f44:	2312      	movs	r3, #18
 8000f46:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f50:	2302      	movs	r3, #2
 8000f52:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000f54:	230c      	movs	r3, #12
 8000f56:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000f5c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f60:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f66:	4618      	mov	r0, r3
 8000f68:	f003 fae0 	bl	800452c <HAL_RCC_OscConfig>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	bf14      	ite	ne
 8000f72:	2301      	movne	r3, #1
 8000f74:	2300      	moveq	r3, #0
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <_Z18SystemClock_Configv+0xc8>
  {
    Error_Handler();
 8000f7c:	f000 faa4 	bl	80014c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f80:	233f      	movs	r3, #63	; 0x3f
 8000f82:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f84:	2303      	movs	r3, #3
 8000f86:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f90:	2340      	movs	r3, #64	; 0x40
 8000f92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f94:	2340      	movs	r3, #64	; 0x40
 8000f96:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f9c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f9e:	2340      	movs	r3, #64	; 0x40
 8000fa0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f003 ff1a 	bl	8004de0 <HAL_RCC_ClockConfig>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	bf14      	ite	ne
 8000fb2:	2301      	movne	r3, #1
 8000fb4:	2300      	moveq	r3, #0
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <_Z18SystemClock_Configv+0x108>
  {
    Error_Handler();
 8000fbc:	f000 fa84 	bl	80014c8 <Error_Handler>
  }
}
 8000fc0:	bf00      	nop
 8000fc2:	3770      	adds	r7, #112	; 0x70
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	58000400 	.word	0x58000400
 8000fcc:	58024800 	.word	0x58024800

08000fd0 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b0b0      	sub	sp, #192	; 0xc0
 8000fd4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fd6:	463b      	mov	r3, r7
 8000fd8:	22c0      	movs	r2, #192	; 0xc0
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f009 fb8e 	bl	800a6fe <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000fe2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000fe6:	f04f 0300 	mov.w	r3, #0
 8000fea:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 18;
 8000ff2:	2312      	movs	r3, #18
 8000ff4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000ff6:	2304      	movs	r3, #4
 8000ff8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000ffe:	2302      	movs	r3, #2
 8001000:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001002:	23c0      	movs	r3, #192	; 0xc0
 8001004:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001006:	2320      	movs	r3, #32
 8001008:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 800100a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001010:	2300      	movs	r3, #0
 8001012:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001016:	463b      	mov	r3, r7
 8001018:	4618      	mov	r0, r3
 800101a:	f004 fa6d 	bl	80054f8 <HAL_RCCEx_PeriphCLKConfig>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	bf14      	ite	ne
 8001024:	2301      	movne	r3, #1
 8001026:	2300      	moveq	r3, #0
 8001028:	b2db      	uxtb	r3, r3
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <_Z24PeriphCommonClock_Configv+0x62>
  {
    Error_Handler();
 800102e:	f000 fa4b 	bl	80014c8 <Error_Handler>
  }
}
 8001032:	bf00      	nop
 8001034:	37c0      	adds	r7, #192	; 0xc0
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08a      	sub	sp, #40	; 0x28
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001042:	f107 031c 	add.w	r3, r7, #28
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800104e:	463b      	mov	r3, r7
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
 800105c:	615a      	str	r2, [r3, #20]
 800105e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001060:	4b37      	ldr	r3, [pc, #220]	; (8001140 <_ZL12MX_ADC1_Initv+0x104>)
 8001062:	4a38      	ldr	r2, [pc, #224]	; (8001144 <_ZL12MX_ADC1_Initv+0x108>)
 8001064:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001066:	4b36      	ldr	r3, [pc, #216]	; (8001140 <_ZL12MX_ADC1_Initv+0x104>)
 8001068:	2200      	movs	r2, #0
 800106a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800106c:	4b34      	ldr	r3, [pc, #208]	; (8001140 <_ZL12MX_ADC1_Initv+0x104>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001072:	4b33      	ldr	r3, [pc, #204]	; (8001140 <_ZL12MX_ADC1_Initv+0x104>)
 8001074:	2200      	movs	r2, #0
 8001076:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001078:	4b31      	ldr	r3, [pc, #196]	; (8001140 <_ZL12MX_ADC1_Initv+0x104>)
 800107a:	2204      	movs	r2, #4
 800107c:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800107e:	4b30      	ldr	r3, [pc, #192]	; (8001140 <_ZL12MX_ADC1_Initv+0x104>)
 8001080:	2200      	movs	r2, #0
 8001082:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001084:	4b2e      	ldr	r3, [pc, #184]	; (8001140 <_ZL12MX_ADC1_Initv+0x104>)
 8001086:	2200      	movs	r2, #0
 8001088:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 800108a:	4b2d      	ldr	r3, [pc, #180]	; (8001140 <_ZL12MX_ADC1_Initv+0x104>)
 800108c:	2201      	movs	r2, #1
 800108e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001090:	4b2b      	ldr	r3, [pc, #172]	; (8001140 <_ZL12MX_ADC1_Initv+0x104>)
 8001092:	2200      	movs	r2, #0
 8001094:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001096:	4b2a      	ldr	r3, [pc, #168]	; (8001140 <_ZL12MX_ADC1_Initv+0x104>)
 8001098:	2200      	movs	r2, #0
 800109a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800109c:	4b28      	ldr	r3, [pc, #160]	; (8001140 <_ZL12MX_ADC1_Initv+0x104>)
 800109e:	2200      	movs	r2, #0
 80010a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80010a2:	4b27      	ldr	r3, [pc, #156]	; (8001140 <_ZL12MX_ADC1_Initv+0x104>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010a8:	4b25      	ldr	r3, [pc, #148]	; (8001140 <_ZL12MX_ADC1_Initv+0x104>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80010ae:	4b24      	ldr	r3, [pc, #144]	; (8001140 <_ZL12MX_ADC1_Initv+0x104>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80010b4:	4b22      	ldr	r3, [pc, #136]	; (8001140 <_ZL12MX_ADC1_Initv+0x104>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010bc:	4820      	ldr	r0, [pc, #128]	; (8001140 <_ZL12MX_ADC1_Initv+0x104>)
 80010be:	f001 f845 	bl	800214c <HAL_ADC_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	bf14      	ite	ne
 80010c8:	2301      	movne	r3, #1
 80010ca:	2300      	moveq	r3, #0
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <_ZL12MX_ADC1_Initv+0x9a>
  {
    Error_Handler();
 80010d2:	f000 f9f9 	bl	80014c8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010da:	f107 031c 	add.w	r3, r7, #28
 80010de:	4619      	mov	r1, r3
 80010e0:	4817      	ldr	r0, [pc, #92]	; (8001140 <_ZL12MX_ADC1_Initv+0x104>)
 80010e2:	f002 f8ad 	bl	8003240 <HAL_ADCEx_MultiModeConfigChannel>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	bf14      	ite	ne
 80010ec:	2301      	movne	r3, #1
 80010ee:	2300      	moveq	r3, #0
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <_ZL12MX_ADC1_Initv+0xbe>
  {
    Error_Handler();
 80010f6:	f000 f9e7 	bl	80014c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 80010fa:	4b13      	ldr	r3, [pc, #76]	; (8001148 <_ZL12MX_ADC1_Initv+0x10c>)
 80010fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010fe:	2306      	movs	r3, #6
 8001100:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001102:	2300      	movs	r3, #0
 8001104:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001106:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800110a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800110c:	2304      	movs	r3, #4
 800110e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001114:	2300      	movs	r3, #0
 8001116:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001118:	463b      	mov	r3, r7
 800111a:	4619      	mov	r1, r3
 800111c:	4808      	ldr	r0, [pc, #32]	; (8001140 <_ZL12MX_ADC1_Initv+0x104>)
 800111e:	f001 fb83 	bl	8002828 <HAL_ADC_ConfigChannel>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	bf14      	ite	ne
 8001128:	2301      	movne	r3, #1
 800112a:	2300      	moveq	r3, #0
 800112c:	b2db      	uxtb	r3, r3
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <_ZL12MX_ADC1_Initv+0xfa>
  {
    Error_Handler();
 8001132:	f000 f9c9 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001136:	bf00      	nop
 8001138:	3728      	adds	r7, #40	; 0x28
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	240002ec 	.word	0x240002ec
 8001144:	40022000 	.word	0x40022000
 8001148:	4b840000 	.word	0x4b840000

0800114c <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b088      	sub	sp, #32
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
 8001160:	615a      	str	r2, [r3, #20]
 8001162:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001164:	4b2e      	ldr	r3, [pc, #184]	; (8001220 <_ZL12MX_ADC2_Initv+0xd4>)
 8001166:	4a2f      	ldr	r2, [pc, #188]	; (8001224 <_ZL12MX_ADC2_Initv+0xd8>)
 8001168:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800116a:	4b2d      	ldr	r3, [pc, #180]	; (8001220 <_ZL12MX_ADC2_Initv+0xd4>)
 800116c:	2200      	movs	r2, #0
 800116e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8001170:	4b2b      	ldr	r3, [pc, #172]	; (8001220 <_ZL12MX_ADC2_Initv+0xd4>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001176:	4b2a      	ldr	r3, [pc, #168]	; (8001220 <_ZL12MX_ADC2_Initv+0xd4>)
 8001178:	2200      	movs	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800117c:	4b28      	ldr	r3, [pc, #160]	; (8001220 <_ZL12MX_ADC2_Initv+0xd4>)
 800117e:	2204      	movs	r2, #4
 8001180:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001182:	4b27      	ldr	r3, [pc, #156]	; (8001220 <_ZL12MX_ADC2_Initv+0xd4>)
 8001184:	2200      	movs	r2, #0
 8001186:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001188:	4b25      	ldr	r3, [pc, #148]	; (8001220 <_ZL12MX_ADC2_Initv+0xd4>)
 800118a:	2200      	movs	r2, #0
 800118c:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 800118e:	4b24      	ldr	r3, [pc, #144]	; (8001220 <_ZL12MX_ADC2_Initv+0xd4>)
 8001190:	2201      	movs	r2, #1
 8001192:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001194:	4b22      	ldr	r3, [pc, #136]	; (8001220 <_ZL12MX_ADC2_Initv+0xd4>)
 8001196:	2200      	movs	r2, #0
 8001198:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800119a:	4b21      	ldr	r3, [pc, #132]	; (8001220 <_ZL12MX_ADC2_Initv+0xd4>)
 800119c:	2200      	movs	r2, #0
 800119e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011a0:	4b1f      	ldr	r3, [pc, #124]	; (8001220 <_ZL12MX_ADC2_Initv+0xd4>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80011a6:	4b1e      	ldr	r3, [pc, #120]	; (8001220 <_ZL12MX_ADC2_Initv+0xd4>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011ac:	4b1c      	ldr	r3, [pc, #112]	; (8001220 <_ZL12MX_ADC2_Initv+0xd4>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80011b2:	4b1b      	ldr	r3, [pc, #108]	; (8001220 <_ZL12MX_ADC2_Initv+0xd4>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80011b8:	4b19      	ldr	r3, [pc, #100]	; (8001220 <_ZL12MX_ADC2_Initv+0xd4>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80011c0:	4817      	ldr	r0, [pc, #92]	; (8001220 <_ZL12MX_ADC2_Initv+0xd4>)
 80011c2:	f000 ffc3 	bl	800214c <HAL_ADC_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	bf14      	ite	ne
 80011cc:	2301      	movne	r3, #1
 80011ce:	2300      	moveq	r3, #0
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <_ZL12MX_ADC2_Initv+0x8e>
  {
    Error_Handler();
 80011d6:	f000 f977 	bl	80014c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 80011da:	4b13      	ldr	r3, [pc, #76]	; (8001228 <_ZL12MX_ADC2_Initv+0xdc>)
 80011dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011de:	2306      	movs	r3, #6
 80011e0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011e6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80011ea:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011ec:	2304      	movs	r3, #4
 80011ee:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80011f4:	2300      	movs	r3, #0
 80011f6:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011f8:	1d3b      	adds	r3, r7, #4
 80011fa:	4619      	mov	r1, r3
 80011fc:	4808      	ldr	r0, [pc, #32]	; (8001220 <_ZL12MX_ADC2_Initv+0xd4>)
 80011fe:	f001 fb13 	bl	8002828 <HAL_ADC_ConfigChannel>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	bf14      	ite	ne
 8001208:	2301      	movne	r3, #1
 800120a:	2300      	moveq	r3, #0
 800120c:	b2db      	uxtb	r3, r3
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <_ZL12MX_ADC2_Initv+0xca>
  {
    Error_Handler();
 8001212:	f000 f959 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001216:	bf00      	nop
 8001218:	3720      	adds	r7, #32
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	24000350 	.word	0x24000350
 8001224:	40022100 	.word	0x40022100
 8001228:	4fb80000 	.word	0x4fb80000

0800122c <_ZL11MX_ETH_Initv>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001230:	4b21      	ldr	r3, [pc, #132]	; (80012b8 <_ZL11MX_ETH_Initv+0x8c>)
 8001232:	4a22      	ldr	r2, [pc, #136]	; (80012bc <_ZL11MX_ETH_Initv+0x90>)
 8001234:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001236:	4b22      	ldr	r3, [pc, #136]	; (80012c0 <_ZL11MX_ETH_Initv+0x94>)
 8001238:	2200      	movs	r2, #0
 800123a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800123c:	4b20      	ldr	r3, [pc, #128]	; (80012c0 <_ZL11MX_ETH_Initv+0x94>)
 800123e:	2280      	movs	r2, #128	; 0x80
 8001240:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001242:	4b1f      	ldr	r3, [pc, #124]	; (80012c0 <_ZL11MX_ETH_Initv+0x94>)
 8001244:	22e1      	movs	r2, #225	; 0xe1
 8001246:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001248:	4b1d      	ldr	r3, [pc, #116]	; (80012c0 <_ZL11MX_ETH_Initv+0x94>)
 800124a:	2200      	movs	r2, #0
 800124c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800124e:	4b1c      	ldr	r3, [pc, #112]	; (80012c0 <_ZL11MX_ETH_Initv+0x94>)
 8001250:	2200      	movs	r2, #0
 8001252:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001254:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <_ZL11MX_ETH_Initv+0x94>)
 8001256:	2200      	movs	r2, #0
 8001258:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800125a:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <_ZL11MX_ETH_Initv+0x8c>)
 800125c:	4a18      	ldr	r2, [pc, #96]	; (80012c0 <_ZL11MX_ETH_Initv+0x94>)
 800125e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001260:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <_ZL11MX_ETH_Initv+0x8c>)
 8001262:	2201      	movs	r2, #1
 8001264:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001266:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <_ZL11MX_ETH_Initv+0x8c>)
 8001268:	4a16      	ldr	r2, [pc, #88]	; (80012c4 <_ZL11MX_ETH_Initv+0x98>)
 800126a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <_ZL11MX_ETH_Initv+0x8c>)
 800126e:	4a16      	ldr	r2, [pc, #88]	; (80012c8 <_ZL11MX_ETH_Initv+0x9c>)
 8001270:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001272:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <_ZL11MX_ETH_Initv+0x8c>)
 8001274:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001278:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800127a:	480f      	ldr	r0, [pc, #60]	; (80012b8 <_ZL11MX_ETH_Initv+0x8c>)
 800127c:	f002 f9a2 	bl	80035c4 <HAL_ETH_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	bf14      	ite	ne
 8001286:	2301      	movne	r3, #1
 8001288:	2300      	moveq	r3, #0
 800128a:	b2db      	uxtb	r3, r3
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <_ZL11MX_ETH_Initv+0x68>
  {
    Error_Handler();
 8001290:	f000 f91a 	bl	80014c8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001294:	2238      	movs	r2, #56	; 0x38
 8001296:	2100      	movs	r1, #0
 8001298:	480c      	ldr	r0, [pc, #48]	; (80012cc <_ZL11MX_ETH_Initv+0xa0>)
 800129a:	f009 fa30 	bl	800a6fe <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800129e:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <_ZL11MX_ETH_Initv+0xa0>)
 80012a0:	2221      	movs	r2, #33	; 0x21
 80012a2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80012a4:	4b09      	ldr	r3, [pc, #36]	; (80012cc <_ZL11MX_ETH_Initv+0xa0>)
 80012a6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80012aa:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80012ac:	4b07      	ldr	r3, [pc, #28]	; (80012cc <_ZL11MX_ETH_Initv+0xa0>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	240003b4 	.word	0x240003b4
 80012bc:	40028000 	.word	0x40028000
 80012c0:	24000a38 	.word	0x24000a38
 80012c4:	24000238 	.word	0x24000238
 80012c8:	240001d8 	.word	0x240001d8
 80012cc:	240002b4 	.word	0x240002b4

080012d0 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012d4:	4b2c      	ldr	r3, [pc, #176]	; (8001388 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80012d6:	4a2d      	ldr	r2, [pc, #180]	; (800138c <_ZL19MX_USART3_UART_Initv+0xbc>)
 80012d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80012da:	4b2b      	ldr	r3, [pc, #172]	; (8001388 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80012dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012e2:	4b29      	ldr	r3, [pc, #164]	; (8001388 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012e8:	4b27      	ldr	r3, [pc, #156]	; (8001388 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012ee:	4b26      	ldr	r3, [pc, #152]	; (8001388 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012f4:	4b24      	ldr	r3, [pc, #144]	; (8001388 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80012f6:	220c      	movs	r2, #12
 80012f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012fa:	4b23      	ldr	r3, [pc, #140]	; (8001388 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001300:	4b21      	ldr	r3, [pc, #132]	; (8001388 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001302:	2200      	movs	r2, #0
 8001304:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001306:	4b20      	ldr	r3, [pc, #128]	; (8001388 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001308:	2200      	movs	r2, #0
 800130a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800130c:	4b1e      	ldr	r3, [pc, #120]	; (8001388 <_ZL19MX_USART3_UART_Initv+0xb8>)
 800130e:	2200      	movs	r2, #0
 8001310:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001312:	4b1d      	ldr	r3, [pc, #116]	; (8001388 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001314:	2200      	movs	r2, #0
 8001316:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001318:	481b      	ldr	r0, [pc, #108]	; (8001388 <_ZL19MX_USART3_UART_Initv+0xb8>)
 800131a:	f006 fdeb 	bl	8007ef4 <HAL_UART_Init>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	bf14      	ite	ne
 8001324:	2301      	movne	r3, #1
 8001326:	2300      	moveq	r3, #0
 8001328:	b2db      	uxtb	r3, r3
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <_ZL19MX_USART3_UART_Initv+0x62>
  {
    Error_Handler();
 800132e:	f000 f8cb 	bl	80014c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001332:	2100      	movs	r1, #0
 8001334:	4814      	ldr	r0, [pc, #80]	; (8001388 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001336:	f007 fe76 	bl	8009026 <HAL_UARTEx_SetTxFifoThreshold>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	bf14      	ite	ne
 8001340:	2301      	movne	r3, #1
 8001342:	2300      	moveq	r3, #0
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <_ZL19MX_USART3_UART_Initv+0x7e>
  {
    Error_Handler();
 800134a:	f000 f8bd 	bl	80014c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800134e:	2100      	movs	r1, #0
 8001350:	480d      	ldr	r0, [pc, #52]	; (8001388 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001352:	f007 fea6 	bl	80090a2 <HAL_UARTEx_SetRxFifoThreshold>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	bf14      	ite	ne
 800135c:	2301      	movne	r3, #1
 800135e:	2300      	moveq	r3, #0
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <_ZL19MX_USART3_UART_Initv+0x9a>
  {
    Error_Handler();
 8001366:	f000 f8af 	bl	80014c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800136a:	4807      	ldr	r0, [pc, #28]	; (8001388 <_ZL19MX_USART3_UART_Initv+0xb8>)
 800136c:	f007 fe22 	bl	8008fb4 <HAL_UARTEx_DisableFifoMode>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	bf14      	ite	ne
 8001376:	2301      	movne	r3, #1
 8001378:	2300      	moveq	r3, #0
 800137a:	b2db      	uxtb	r3, r3
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <_ZL19MX_USART3_UART_Initv+0xb4>
  {
    Error_Handler();
 8001380:	f000 f8a2 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001384:	bf00      	nop
 8001386:	bd80      	pop	{r7, pc}
 8001388:	24000464 	.word	0x24000464
 800138c:	40004800 	.word	0x40004800

08001390 <_ZL22MX_USB_OTG_FS_PCD_Initv>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001394:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001396:	4a18      	ldr	r2, [pc, #96]	; (80013f8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x68>)
 8001398:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800139a:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 800139c:	2209      	movs	r2, #9
 800139e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80013a0:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 80013a2:	2202      	movs	r2, #2
 80013a4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80013a6:	4b13      	ldr	r3, [pc, #76]	; (80013f4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80013ac:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 80013ae:	2202      	movs	r2, #2
 80013b0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80013b2:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80013b8:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80013be:	4b0d      	ldr	r3, [pc, #52]	; (80013f4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80013c4:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80013ca:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80013d0:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80013d6:	4807      	ldr	r0, [pc, #28]	; (80013f4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 80013d8:	f002 fef6 	bl	80041c8 <HAL_PCD_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	bf14      	ite	ne
 80013e2:	2301      	movne	r3, #1
 80013e4:	2300      	moveq	r3, #0
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>
  {
    Error_Handler();
 80013ec:	f000 f86c 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80013f0:	bf00      	nop
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	240004f8 	.word	0x240004f8
 80013f8:	40080000 	.word	0x40080000

080013fc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b087      	sub	sp, #28
 8001400:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001402:	4b30      	ldr	r3, [pc, #192]	; (80014c4 <_ZL12MX_GPIO_Initv+0xc8>)
 8001404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001408:	4a2e      	ldr	r2, [pc, #184]	; (80014c4 <_ZL12MX_GPIO_Initv+0xc8>)
 800140a:	f043 0304 	orr.w	r3, r3, #4
 800140e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001412:	4b2c      	ldr	r3, [pc, #176]	; (80014c4 <_ZL12MX_GPIO_Initv+0xc8>)
 8001414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001418:	f003 0304 	and.w	r3, r3, #4
 800141c:	617b      	str	r3, [r7, #20]
 800141e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001420:	4b28      	ldr	r3, [pc, #160]	; (80014c4 <_ZL12MX_GPIO_Initv+0xc8>)
 8001422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001426:	4a27      	ldr	r2, [pc, #156]	; (80014c4 <_ZL12MX_GPIO_Initv+0xc8>)
 8001428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800142c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001430:	4b24      	ldr	r3, [pc, #144]	; (80014c4 <_ZL12MX_GPIO_Initv+0xc8>)
 8001432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800143a:	613b      	str	r3, [r7, #16]
 800143c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800143e:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <_ZL12MX_GPIO_Initv+0xc8>)
 8001440:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001444:	4a1f      	ldr	r2, [pc, #124]	; (80014c4 <_ZL12MX_GPIO_Initv+0xc8>)
 8001446:	f043 0301 	orr.w	r3, r3, #1
 800144a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800144e:	4b1d      	ldr	r3, [pc, #116]	; (80014c4 <_ZL12MX_GPIO_Initv+0xc8>)
 8001450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001454:	f003 0301 	and.w	r3, r3, #1
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800145c:	4b19      	ldr	r3, [pc, #100]	; (80014c4 <_ZL12MX_GPIO_Initv+0xc8>)
 800145e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001462:	4a18      	ldr	r2, [pc, #96]	; (80014c4 <_ZL12MX_GPIO_Initv+0xc8>)
 8001464:	f043 0302 	orr.w	r3, r3, #2
 8001468:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800146c:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <_ZL12MX_GPIO_Initv+0xc8>)
 800146e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800147a:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <_ZL12MX_GPIO_Initv+0xc8>)
 800147c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001480:	4a10      	ldr	r2, [pc, #64]	; (80014c4 <_ZL12MX_GPIO_Initv+0xc8>)
 8001482:	f043 0308 	orr.w	r3, r3, #8
 8001486:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800148a:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <_ZL12MX_GPIO_Initv+0xc8>)
 800148c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001490:	f003 0308 	and.w	r3, r3, #8
 8001494:	607b      	str	r3, [r7, #4]
 8001496:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001498:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <_ZL12MX_GPIO_Initv+0xc8>)
 800149a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800149e:	4a09      	ldr	r2, [pc, #36]	; (80014c4 <_ZL12MX_GPIO_Initv+0xc8>)
 80014a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <_ZL12MX_GPIO_Initv+0xc8>)
 80014aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014b2:	603b      	str	r3, [r7, #0]
 80014b4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014b6:	bf00      	nop
 80014b8:	371c      	adds	r7, #28
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	58024400 	.word	0x58024400

080014c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014cc:	b672      	cpsid	i
}
 80014ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <Error_Handler+0x8>
	...

080014d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014da:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <HAL_MspInit+0x30>)
 80014dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014e0:	4a08      	ldr	r2, [pc, #32]	; (8001504 <HAL_MspInit+0x30>)
 80014e2:	f043 0302 	orr.w	r3, r3, #2
 80014e6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <HAL_MspInit+0x30>)
 80014ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	607b      	str	r3, [r7, #4]
 80014f6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	58024400 	.word	0x58024400

08001508 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08c      	sub	sp, #48	; 0x30
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001510:	f107 031c 	add.w	r3, r7, #28
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a39      	ldr	r2, [pc, #228]	; (800160c <HAL_ADC_MspInit+0x104>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d133      	bne.n	8001592 <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800152a:	4b39      	ldr	r3, [pc, #228]	; (8001610 <HAL_ADC_MspInit+0x108>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	3301      	adds	r3, #1
 8001530:	4a37      	ldr	r2, [pc, #220]	; (8001610 <HAL_ADC_MspInit+0x108>)
 8001532:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001534:	4b36      	ldr	r3, [pc, #216]	; (8001610 <HAL_ADC_MspInit+0x108>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d10e      	bne.n	800155a <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800153c:	4b35      	ldr	r3, [pc, #212]	; (8001614 <HAL_ADC_MspInit+0x10c>)
 800153e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001542:	4a34      	ldr	r2, [pc, #208]	; (8001614 <HAL_ADC_MspInit+0x10c>)
 8001544:	f043 0320 	orr.w	r3, r3, #32
 8001548:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800154c:	4b31      	ldr	r3, [pc, #196]	; (8001614 <HAL_ADC_MspInit+0x10c>)
 800154e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001552:	f003 0320 	and.w	r3, r3, #32
 8001556:	61bb      	str	r3, [r7, #24]
 8001558:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800155a:	4b2e      	ldr	r3, [pc, #184]	; (8001614 <HAL_ADC_MspInit+0x10c>)
 800155c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001560:	4a2c      	ldr	r2, [pc, #176]	; (8001614 <HAL_ADC_MspInit+0x10c>)
 8001562:	f043 0301 	orr.w	r3, r3, #1
 8001566:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800156a:	4b2a      	ldr	r3, [pc, #168]	; (8001614 <HAL_ADC_MspInit+0x10c>)
 800156c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	617b      	str	r3, [r7, #20]
 8001576:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_INP18
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001578:	2310      	movs	r3, #16
 800157a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800157c:	2303      	movs	r3, #3
 800157e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001584:	f107 031c 	add.w	r3, r7, #28
 8001588:	4619      	mov	r1, r3
 800158a:	4823      	ldr	r0, [pc, #140]	; (8001618 <HAL_ADC_MspInit+0x110>)
 800158c:	f002 fc3e 	bl	8003e0c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001590:	e037      	b.n	8001602 <HAL_ADC_MspInit+0xfa>
  else if(hadc->Instance==ADC2)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a21      	ldr	r2, [pc, #132]	; (800161c <HAL_ADC_MspInit+0x114>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d132      	bne.n	8001602 <HAL_ADC_MspInit+0xfa>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800159c:	4b1c      	ldr	r3, [pc, #112]	; (8001610 <HAL_ADC_MspInit+0x108>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	3301      	adds	r3, #1
 80015a2:	4a1b      	ldr	r2, [pc, #108]	; (8001610 <HAL_ADC_MspInit+0x108>)
 80015a4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80015a6:	4b1a      	ldr	r3, [pc, #104]	; (8001610 <HAL_ADC_MspInit+0x108>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d10e      	bne.n	80015cc <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80015ae:	4b19      	ldr	r3, [pc, #100]	; (8001614 <HAL_ADC_MspInit+0x10c>)
 80015b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015b4:	4a17      	ldr	r2, [pc, #92]	; (8001614 <HAL_ADC_MspInit+0x10c>)
 80015b6:	f043 0320 	orr.w	r3, r3, #32
 80015ba:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80015be:	4b15      	ldr	r3, [pc, #84]	; (8001614 <HAL_ADC_MspInit+0x10c>)
 80015c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015c4:	f003 0320 	and.w	r3, r3, #32
 80015c8:	613b      	str	r3, [r7, #16]
 80015ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015cc:	4b11      	ldr	r3, [pc, #68]	; (8001614 <HAL_ADC_MspInit+0x10c>)
 80015ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015d2:	4a10      	ldr	r2, [pc, #64]	; (8001614 <HAL_ADC_MspInit+0x10c>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015dc:	4b0d      	ldr	r3, [pc, #52]	; (8001614 <HAL_ADC_MspInit+0x10c>)
 80015de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80015ea:	2320      	movs	r3, #32
 80015ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015ee:	2303      	movs	r3, #3
 80015f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f6:	f107 031c 	add.w	r3, r7, #28
 80015fa:	4619      	mov	r1, r3
 80015fc:	4806      	ldr	r0, [pc, #24]	; (8001618 <HAL_ADC_MspInit+0x110>)
 80015fe:	f002 fc05 	bl	8003e0c <HAL_GPIO_Init>
}
 8001602:	bf00      	nop
 8001604:	3730      	adds	r7, #48	; 0x30
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40022000 	.word	0x40022000
 8001610:	24000a40 	.word	0x24000a40
 8001614:	58024400 	.word	0x58024400
 8001618:	58020000 	.word	0x58020000
 800161c:	40022100 	.word	0x40022100

08001620 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08e      	sub	sp, #56	; 0x38
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001628:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
 8001636:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a59      	ldr	r2, [pc, #356]	; (80017a4 <HAL_ETH_MspInit+0x184>)
 800163e:	4293      	cmp	r3, r2
 8001640:	f040 80ab 	bne.w	800179a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001644:	4b58      	ldr	r3, [pc, #352]	; (80017a8 <HAL_ETH_MspInit+0x188>)
 8001646:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800164a:	4a57      	ldr	r2, [pc, #348]	; (80017a8 <HAL_ETH_MspInit+0x188>)
 800164c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001650:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001654:	4b54      	ldr	r3, [pc, #336]	; (80017a8 <HAL_ETH_MspInit+0x188>)
 8001656:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800165a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800165e:	623b      	str	r3, [r7, #32]
 8001660:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001662:	4b51      	ldr	r3, [pc, #324]	; (80017a8 <HAL_ETH_MspInit+0x188>)
 8001664:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001668:	4a4f      	ldr	r2, [pc, #316]	; (80017a8 <HAL_ETH_MspInit+0x188>)
 800166a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800166e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001672:	4b4d      	ldr	r3, [pc, #308]	; (80017a8 <HAL_ETH_MspInit+0x188>)
 8001674:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001678:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800167c:	61fb      	str	r3, [r7, #28]
 800167e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001680:	4b49      	ldr	r3, [pc, #292]	; (80017a8 <HAL_ETH_MspInit+0x188>)
 8001682:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001686:	4a48      	ldr	r2, [pc, #288]	; (80017a8 <HAL_ETH_MspInit+0x188>)
 8001688:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800168c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001690:	4b45      	ldr	r3, [pc, #276]	; (80017a8 <HAL_ETH_MspInit+0x188>)
 8001692:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169a:	61bb      	str	r3, [r7, #24]
 800169c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800169e:	4b42      	ldr	r3, [pc, #264]	; (80017a8 <HAL_ETH_MspInit+0x188>)
 80016a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016a4:	4a40      	ldr	r2, [pc, #256]	; (80017a8 <HAL_ETH_MspInit+0x188>)
 80016a6:	f043 0304 	orr.w	r3, r3, #4
 80016aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016ae:	4b3e      	ldr	r3, [pc, #248]	; (80017a8 <HAL_ETH_MspInit+0x188>)
 80016b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016b4:	f003 0304 	and.w	r3, r3, #4
 80016b8:	617b      	str	r3, [r7, #20]
 80016ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016bc:	4b3a      	ldr	r3, [pc, #232]	; (80017a8 <HAL_ETH_MspInit+0x188>)
 80016be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016c2:	4a39      	ldr	r2, [pc, #228]	; (80017a8 <HAL_ETH_MspInit+0x188>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016cc:	4b36      	ldr	r3, [pc, #216]	; (80017a8 <HAL_ETH_MspInit+0x188>)
 80016ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	613b      	str	r3, [r7, #16]
 80016d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016da:	4b33      	ldr	r3, [pc, #204]	; (80017a8 <HAL_ETH_MspInit+0x188>)
 80016dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e0:	4a31      	ldr	r2, [pc, #196]	; (80017a8 <HAL_ETH_MspInit+0x188>)
 80016e2:	f043 0302 	orr.w	r3, r3, #2
 80016e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016ea:	4b2f      	ldr	r3, [pc, #188]	; (80017a8 <HAL_ETH_MspInit+0x188>)
 80016ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80016f8:	4b2b      	ldr	r3, [pc, #172]	; (80017a8 <HAL_ETH_MspInit+0x188>)
 80016fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016fe:	4a2a      	ldr	r2, [pc, #168]	; (80017a8 <HAL_ETH_MspInit+0x188>)
 8001700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001704:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001708:	4b27      	ldr	r3, [pc, #156]	; (80017a8 <HAL_ETH_MspInit+0x188>)
 800170a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800170e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001712:	60bb      	str	r3, [r7, #8]
 8001714:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001716:	2332      	movs	r3, #50	; 0x32
 8001718:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171a:	2302      	movs	r3, #2
 800171c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001722:	2300      	movs	r3, #0
 8001724:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001726:	230b      	movs	r3, #11
 8001728:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800172a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800172e:	4619      	mov	r1, r3
 8001730:	481e      	ldr	r0, [pc, #120]	; (80017ac <HAL_ETH_MspInit+0x18c>)
 8001732:	f002 fb6b 	bl	8003e0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001736:	2386      	movs	r3, #134	; 0x86
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173a:	2302      	movs	r3, #2
 800173c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001742:	2300      	movs	r3, #0
 8001744:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001746:	230b      	movs	r3, #11
 8001748:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800174e:	4619      	mov	r1, r3
 8001750:	4817      	ldr	r0, [pc, #92]	; (80017b0 <HAL_ETH_MspInit+0x190>)
 8001752:	f002 fb5b 	bl	8003e0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001756:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800175a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175c:	2302      	movs	r3, #2
 800175e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001764:	2300      	movs	r3, #0
 8001766:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001768:	230b      	movs	r3, #11
 800176a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800176c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001770:	4619      	mov	r1, r3
 8001772:	4810      	ldr	r0, [pc, #64]	; (80017b4 <HAL_ETH_MspInit+0x194>)
 8001774:	f002 fb4a 	bl	8003e0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001778:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800177c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177e:	2302      	movs	r3, #2
 8001780:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001786:	2300      	movs	r3, #0
 8001788:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800178a:	230b      	movs	r3, #11
 800178c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800178e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001792:	4619      	mov	r1, r3
 8001794:	4808      	ldr	r0, [pc, #32]	; (80017b8 <HAL_ETH_MspInit+0x198>)
 8001796:	f002 fb39 	bl	8003e0c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800179a:	bf00      	nop
 800179c:	3738      	adds	r7, #56	; 0x38
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40028000 	.word	0x40028000
 80017a8:	58024400 	.word	0x58024400
 80017ac:	58020800 	.word	0x58020800
 80017b0:	58020000 	.word	0x58020000
 80017b4:	58020400 	.word	0x58020400
 80017b8:	58021800 	.word	0x58021800

080017bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b0ba      	sub	sp, #232	; 0xe8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017d4:	f107 0310 	add.w	r3, r7, #16
 80017d8:	22c0      	movs	r2, #192	; 0xc0
 80017da:	2100      	movs	r1, #0
 80017dc:	4618      	mov	r0, r3
 80017de:	f008 ff8e 	bl	800a6fe <memset>
  if(huart->Instance==USART3)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a27      	ldr	r2, [pc, #156]	; (8001884 <HAL_UART_MspInit+0xc8>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d146      	bne.n	800187a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80017ec:	f04f 0202 	mov.w	r2, #2
 80017f0:	f04f 0300 	mov.w	r3, #0
 80017f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80017f8:	2300      	movs	r3, #0
 80017fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017fe:	f107 0310 	add.w	r3, r7, #16
 8001802:	4618      	mov	r0, r3
 8001804:	f003 fe78 	bl	80054f8 <HAL_RCCEx_PeriphCLKConfig>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800180e:	f7ff fe5b 	bl	80014c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001812:	4b1d      	ldr	r3, [pc, #116]	; (8001888 <HAL_UART_MspInit+0xcc>)
 8001814:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001818:	4a1b      	ldr	r2, [pc, #108]	; (8001888 <HAL_UART_MspInit+0xcc>)
 800181a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800181e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001822:	4b19      	ldr	r3, [pc, #100]	; (8001888 <HAL_UART_MspInit+0xcc>)
 8001824:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001828:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001830:	4b15      	ldr	r3, [pc, #84]	; (8001888 <HAL_UART_MspInit+0xcc>)
 8001832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001836:	4a14      	ldr	r2, [pc, #80]	; (8001888 <HAL_UART_MspInit+0xcc>)
 8001838:	f043 0308 	orr.w	r3, r3, #8
 800183c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001840:	4b11      	ldr	r3, [pc, #68]	; (8001888 <HAL_UART_MspInit+0xcc>)
 8001842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001846:	f003 0308 	and.w	r3, r3, #8
 800184a:	60bb      	str	r3, [r7, #8]
 800184c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800184e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001852:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001856:	2302      	movs	r3, #2
 8001858:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001862:	2300      	movs	r3, #0
 8001864:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001868:	2307      	movs	r3, #7
 800186a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800186e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001872:	4619      	mov	r1, r3
 8001874:	4805      	ldr	r0, [pc, #20]	; (800188c <HAL_UART_MspInit+0xd0>)
 8001876:	f002 fac9 	bl	8003e0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800187a:	bf00      	nop
 800187c:	37e8      	adds	r7, #232	; 0xe8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40004800 	.word	0x40004800
 8001888:	58024400 	.word	0x58024400
 800188c:	58020c00 	.word	0x58020c00

08001890 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b0ba      	sub	sp, #232	; 0xe8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001898:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018a8:	f107 0310 	add.w	r3, r7, #16
 80018ac:	22c0      	movs	r2, #192	; 0xc0
 80018ae:	2100      	movs	r1, #0
 80018b0:	4618      	mov	r0, r3
 80018b2:	f008 ff24 	bl	800a6fe <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a38      	ldr	r2, [pc, #224]	; (800199c <HAL_PCD_MspInit+0x10c>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d169      	bne.n	8001994 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80018c0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80018c4:	f04f 0300 	mov.w	r3, #0
 80018c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 80018cc:	2301      	movs	r3, #1
 80018ce:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 80018d0:	2312      	movs	r3, #18
 80018d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80018d4:	2302      	movs	r3, #2
 80018d6:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 80018d8:	2303      	movs	r3, #3
 80018da:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80018dc:	2302      	movs	r3, #2
 80018de:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80018e0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80018e4:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 80018e6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80018ea:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80018ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80018f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018f4:	f107 0310 	add.w	r3, r7, #16
 80018f8:	4618      	mov	r0, r3
 80018fa:	f003 fdfd 	bl	80054f8 <HAL_RCCEx_PeriphCLKConfig>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 8001904:	f7ff fde0 	bl	80014c8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001908:	f002 fe00 	bl	800450c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800190c:	4b24      	ldr	r3, [pc, #144]	; (80019a0 <HAL_PCD_MspInit+0x110>)
 800190e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001912:	4a23      	ldr	r2, [pc, #140]	; (80019a0 <HAL_PCD_MspInit+0x110>)
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800191c:	4b20      	ldr	r3, [pc, #128]	; (80019a0 <HAL_PCD_MspInit+0x110>)
 800191e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800192a:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800192e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001932:	2302      	movs	r3, #2
 8001934:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193e:	2300      	movs	r3, #0
 8001940:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001944:	230a      	movs	r3, #10
 8001946:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800194e:	4619      	mov	r1, r3
 8001950:	4814      	ldr	r0, [pc, #80]	; (80019a4 <HAL_PCD_MspInit+0x114>)
 8001952:	f002 fa5b 	bl	8003e0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001956:	f44f 7300 	mov.w	r3, #512	; 0x200
 800195a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800195e:	2300      	movs	r3, #0
 8001960:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800196e:	4619      	mov	r1, r3
 8001970:	480c      	ldr	r0, [pc, #48]	; (80019a4 <HAL_PCD_MspInit+0x114>)
 8001972:	f002 fa4b 	bl	8003e0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001976:	4b0a      	ldr	r3, [pc, #40]	; (80019a0 <HAL_PCD_MspInit+0x110>)
 8001978:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800197c:	4a08      	ldr	r2, [pc, #32]	; (80019a0 <HAL_PCD_MspInit+0x110>)
 800197e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001982:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001986:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <HAL_PCD_MspInit+0x110>)
 8001988:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800198c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001990:	60bb      	str	r3, [r7, #8]
 8001992:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001994:	bf00      	nop
 8001996:	37e8      	adds	r7, #232	; 0xe8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40080000 	.word	0x40080000
 80019a0:	58024400 	.word	0x58024400
 80019a4:	58020000 	.word	0x58020000

080019a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019ac:	e7fe      	b.n	80019ac <NMI_Handler+0x4>

080019ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ae:	b480      	push	{r7}
 80019b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019b2:	e7fe      	b.n	80019b2 <HardFault_Handler+0x4>

080019b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b8:	e7fe      	b.n	80019b8 <MemManage_Handler+0x4>

080019ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ba:	b480      	push	{r7}
 80019bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019be:	e7fe      	b.n	80019be <BusFault_Handler+0x4>

080019c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c4:	e7fe      	b.n	80019c4 <UsageFault_Handler+0x4>

080019c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019c6:	b480      	push	{r7}
 80019c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019e2:	b480      	push	{r7}
 80019e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019f4:	f000 f964 	bl	8001cc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019f8:	bf00      	nop
 80019fa:	bd80      	pop	{r7, pc}

080019fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  return 1;
 8001a00:	2301      	movs	r3, #1
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <_kill>:

int _kill(int pid, int sig)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a16:	f008 fec5 	bl	800a7a4 <__errno>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2216      	movs	r2, #22
 8001a1e:	601a      	str	r2, [r3, #0]
  return -1;
 8001a20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <_exit>:

void _exit (int status)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a34:	f04f 31ff 	mov.w	r1, #4294967295
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7ff ffe7 	bl	8001a0c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a3e:	e7fe      	b.n	8001a3e <_exit+0x12>

08001a40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]
 8001a50:	e00a      	b.n	8001a68 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a52:	f3af 8000 	nop.w
 8001a56:	4601      	mov	r1, r0
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	1c5a      	adds	r2, r3, #1
 8001a5c:	60ba      	str	r2, [r7, #8]
 8001a5e:	b2ca      	uxtb	r2, r1
 8001a60:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	3301      	adds	r3, #1
 8001a66:	617b      	str	r3, [r7, #20]
 8001a68:	697a      	ldr	r2, [r7, #20]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	dbf0      	blt.n	8001a52 <_read+0x12>
  }

  return len;
 8001a70:	687b      	ldr	r3, [r7, #4]
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3718      	adds	r7, #24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b086      	sub	sp, #24
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	60f8      	str	r0, [r7, #12]
 8001a82:	60b9      	str	r1, [r7, #8]
 8001a84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
 8001a8a:	e009      	b.n	8001aa0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	1c5a      	adds	r2, r3, #1
 8001a90:	60ba      	str	r2, [r7, #8]
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	617b      	str	r3, [r7, #20]
 8001aa0:	697a      	ldr	r2, [r7, #20]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	dbf1      	blt.n	8001a8c <_write+0x12>
  }
  return len;
 8001aa8:	687b      	ldr	r3, [r7, #4]
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3718      	adds	r7, #24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <_close>:

int _close(int file)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b083      	sub	sp, #12
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001aba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b083      	sub	sp, #12
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
 8001ad2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ada:	605a      	str	r2, [r3, #4]
  return 0;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <_isatty>:

int _isatty(int file)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b083      	sub	sp, #12
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001af2:	2301      	movs	r3, #1
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3714      	adds	r7, #20
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
	...

08001b1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b24:	4a14      	ldr	r2, [pc, #80]	; (8001b78 <_sbrk+0x5c>)
 8001b26:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <_sbrk+0x60>)
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b30:	4b13      	ldr	r3, [pc, #76]	; (8001b80 <_sbrk+0x64>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d102      	bne.n	8001b3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b38:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <_sbrk+0x64>)
 8001b3a:	4a12      	ldr	r2, [pc, #72]	; (8001b84 <_sbrk+0x68>)
 8001b3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b3e:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <_sbrk+0x64>)
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4413      	add	r3, r2
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d207      	bcs.n	8001b5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b4c:	f008 fe2a 	bl	800a7a4 <__errno>
 8001b50:	4603      	mov	r3, r0
 8001b52:	220c      	movs	r2, #12
 8001b54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b56:	f04f 33ff 	mov.w	r3, #4294967295
 8001b5a:	e009      	b.n	8001b70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b5c:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <_sbrk+0x64>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b62:	4b07      	ldr	r3, [pc, #28]	; (8001b80 <_sbrk+0x64>)
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4413      	add	r3, r2
 8001b6a:	4a05      	ldr	r2, [pc, #20]	; (8001b80 <_sbrk+0x64>)
 8001b6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	24080000 	.word	0x24080000
 8001b7c:	00000400 	.word	0x00000400
 8001b80:	24000a44 	.word	0x24000a44
 8001b84:	24000b98 	.word	0x24000b98

08001b88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001b88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bc0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b8c:	f7fe ff72 	bl	8000a74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b90:	480c      	ldr	r0, [pc, #48]	; (8001bc4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b92:	490d      	ldr	r1, [pc, #52]	; (8001bc8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b94:	4a0d      	ldr	r2, [pc, #52]	; (8001bcc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b98:	e002      	b.n	8001ba0 <LoopCopyDataInit>

08001b9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b9e:	3304      	adds	r3, #4

08001ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ba4:	d3f9      	bcc.n	8001b9a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ba6:	4a0a      	ldr	r2, [pc, #40]	; (8001bd0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ba8:	4c0a      	ldr	r4, [pc, #40]	; (8001bd4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001baa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bac:	e001      	b.n	8001bb2 <LoopFillZerobss>

08001bae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bb0:	3204      	adds	r2, #4

08001bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bb4:	d3fb      	bcc.n	8001bae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bb6:	f008 fdfb 	bl	800a7b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bba:	f7ff f8db 	bl	8000d74 <main>
  bx  lr
 8001bbe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bc0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001bc4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001bc8:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8001bcc:	0800e288 	.word	0x0800e288
  ldr r2, =_sbss
 8001bd0:	24000298 	.word	0x24000298
  ldr r4, =_ebss
 8001bd4:	24000b98 	.word	0x24000b98

08001bd8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bd8:	e7fe      	b.n	8001bd8 <ADC3_IRQHandler>
	...

08001bdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001be2:	2003      	movs	r0, #3
 8001be4:	f001 fcbc 	bl	8003560 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001be8:	f003 fab0 	bl	800514c <HAL_RCC_GetSysClockFreq>
 8001bec:	4602      	mov	r2, r0
 8001bee:	4b15      	ldr	r3, [pc, #84]	; (8001c44 <HAL_Init+0x68>)
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	0a1b      	lsrs	r3, r3, #8
 8001bf4:	f003 030f 	and.w	r3, r3, #15
 8001bf8:	4913      	ldr	r1, [pc, #76]	; (8001c48 <HAL_Init+0x6c>)
 8001bfa:	5ccb      	ldrb	r3, [r1, r3]
 8001bfc:	f003 031f 	and.w	r3, r3, #31
 8001c00:	fa22 f303 	lsr.w	r3, r2, r3
 8001c04:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c06:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <HAL_Init+0x68>)
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	f003 030f 	and.w	r3, r3, #15
 8001c0e:	4a0e      	ldr	r2, [pc, #56]	; (8001c48 <HAL_Init+0x6c>)
 8001c10:	5cd3      	ldrb	r3, [r2, r3]
 8001c12:	f003 031f 	and.w	r3, r3, #31
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	fa22 f303 	lsr.w	r3, r2, r3
 8001c1c:	4a0b      	ldr	r2, [pc, #44]	; (8001c4c <HAL_Init+0x70>)
 8001c1e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c20:	4a0b      	ldr	r2, [pc, #44]	; (8001c50 <HAL_Init+0x74>)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c26:	2000      	movs	r0, #0
 8001c28:	f000 f814 	bl	8001c54 <HAL_InitTick>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e002      	b.n	8001c3c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c36:	f7ff fc4d 	bl	80014d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	58024400 	.word	0x58024400
 8001c48:	0800de14 	.word	0x0800de14
 8001c4c:	24000004 	.word	0x24000004
 8001c50:	24000000 	.word	0x24000000

08001c54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001c5c:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <HAL_InitTick+0x60>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d101      	bne.n	8001c68 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e021      	b.n	8001cac <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001c68:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <HAL_InitTick+0x64>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <HAL_InitTick+0x60>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	4619      	mov	r1, r3
 8001c72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f001 fc93 	bl	80035aa <HAL_SYSTICK_Config>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e00e      	b.n	8001cac <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2b0f      	cmp	r3, #15
 8001c92:	d80a      	bhi.n	8001caa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c94:	2200      	movs	r2, #0
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	f04f 30ff 	mov.w	r0, #4294967295
 8001c9c:	f001 fc6b 	bl	8003576 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ca0:	4a06      	ldr	r2, [pc, #24]	; (8001cbc <HAL_InitTick+0x68>)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	e000      	b.n	8001cac <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	2400000c 	.word	0x2400000c
 8001cb8:	24000000 	.word	0x24000000
 8001cbc:	24000008 	.word	0x24000008

08001cc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cc4:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <HAL_IncTick+0x20>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <HAL_IncTick+0x24>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4413      	add	r3, r2
 8001cd0:	4a04      	ldr	r2, [pc, #16]	; (8001ce4 <HAL_IncTick+0x24>)
 8001cd2:	6013      	str	r3, [r2, #0]
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	2400000c 	.word	0x2400000c
 8001ce4:	24000a48 	.word	0x24000a48

08001ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  return uwTick;
 8001cec:	4b03      	ldr	r3, [pc, #12]	; (8001cfc <HAL_GetTick+0x14>)
 8001cee:	681b      	ldr	r3, [r3, #0]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	24000a48 	.word	0x24000a48

08001d00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d08:	f7ff ffee 	bl	8001ce8 <HAL_GetTick>
 8001d0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d18:	d005      	beq.n	8001d26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d1a:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <HAL_Delay+0x44>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	4413      	add	r3, r2
 8001d24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d26:	bf00      	nop
 8001d28:	f7ff ffde 	bl	8001ce8 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d8f7      	bhi.n	8001d28 <HAL_Delay+0x28>
  {
  }
}
 8001d38:	bf00      	nop
 8001d3a:	bf00      	nop
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	2400000c 	.word	0x2400000c

08001d48 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001d4c:	4b03      	ldr	r3, [pc, #12]	; (8001d5c <HAL_GetREVID+0x14>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	0c1b      	lsrs	r3, r3, #16
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	5c001000 	.word	0x5c001000

08001d60 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001d68:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001d70:	4904      	ldr	r1, [pc, #16]	; (8001d84 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	604b      	str	r3, [r1, #4]
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	58000400 	.word	0x58000400

08001d88 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	431a      	orrs	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	609a      	str	r2, [r3, #8]
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b083      	sub	sp, #12
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
 8001db6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	431a      	orrs	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b087      	sub	sp, #28
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
 8001dfc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	3360      	adds	r3, #96	; 0x60
 8001e02:	461a      	mov	r2, r3
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	4413      	add	r3, r2
 8001e0a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	430b      	orrs	r3, r1
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001e24:	bf00      	nop
 8001e26:	371c      	adds	r7, #28
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	f003 031f 	and.w	r3, r3, #31
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e50:	431a      	orrs	r2, r3
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	611a      	str	r2, [r3, #16]
}
 8001e56:	bf00      	nop
 8001e58:	3714      	adds	r7, #20
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001e62:	b480      	push	{r7}
 8001e64:	b087      	sub	sp, #28
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	60f8      	str	r0, [r7, #12]
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	3360      	adds	r3, #96	; 0x60
 8001e72:	461a      	mov	r2, r3
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4413      	add	r3, r2
 8001e7a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	431a      	orrs	r2, r3
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	601a      	str	r2, [r3, #0]
  }
}
 8001e8c:	bf00      	nop
 8001e8e:	371c      	adds	r7, #28
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d101      	bne.n	8001eb0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001eac:	2301      	movs	r3, #1
 8001eae:	e000      	b.n	8001eb2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr

08001ebe <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b087      	sub	sp, #28
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	60f8      	str	r0, [r7, #12]
 8001ec6:	60b9      	str	r1, [r7, #8]
 8001ec8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	3330      	adds	r3, #48	; 0x30
 8001ece:	461a      	mov	r2, r3
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	0a1b      	lsrs	r3, r3, #8
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	f003 030c 	and.w	r3, r3, #12
 8001eda:	4413      	add	r3, r2
 8001edc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	f003 031f 	and.w	r3, r3, #31
 8001ee8:	211f      	movs	r1, #31
 8001eea:	fa01 f303 	lsl.w	r3, r1, r3
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	401a      	ands	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	0e9b      	lsrs	r3, r3, #26
 8001ef6:	f003 011f 	and.w	r1, r3, #31
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	f003 031f 	and.w	r3, r3, #31
 8001f00:	fa01 f303 	lsl.w	r3, r1, r3
 8001f04:	431a      	orrs	r2, r3
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f0a:	bf00      	nop
 8001f0c:	371c      	adds	r7, #28
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr

08001f16 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f16:	b480      	push	{r7}
 8001f18:	b087      	sub	sp, #28
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	60f8      	str	r0, [r7, #12]
 8001f1e:	60b9      	str	r1, [r7, #8]
 8001f20:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	3314      	adds	r3, #20
 8001f26:	461a      	mov	r2, r3
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	0e5b      	lsrs	r3, r3, #25
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	f003 0304 	and.w	r3, r3, #4
 8001f32:	4413      	add	r3, r2
 8001f34:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	0d1b      	lsrs	r3, r3, #20
 8001f3e:	f003 031f 	and.w	r3, r3, #31
 8001f42:	2107      	movs	r1, #7
 8001f44:	fa01 f303 	lsl.w	r3, r1, r3
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	401a      	ands	r2, r3
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	0d1b      	lsrs	r3, r3, #20
 8001f50:	f003 031f 	and.w	r3, r3, #31
 8001f54:	6879      	ldr	r1, [r7, #4]
 8001f56:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5a:	431a      	orrs	r2, r3
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f60:	bf00      	nop
 8001f62:	371c      	adds	r7, #28
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f84:	43db      	mvns	r3, r3
 8001f86:	401a      	ands	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f003 0318 	and.w	r3, r3, #24
 8001f8e:	4908      	ldr	r1, [pc, #32]	; (8001fb0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f90:	40d9      	lsrs	r1, r3
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	400b      	ands	r3, r1
 8001f96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001fa2:	bf00      	nop
 8001fa4:	3714      	adds	r7, #20
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	000fffff 	.word	0x000fffff

08001fb4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f003 031f 	and.w	r3, r3, #31
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	4b04      	ldr	r3, [pc, #16]	; (800200c <LL_ADC_DisableDeepPowerDown+0x20>)
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	6093      	str	r3, [r2, #8]
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	5fffffc0 	.word	0x5fffffc0

08002010 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002020:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002024:	d101      	bne.n	800202a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002026:	2301      	movs	r3, #1
 8002028:	e000      	b.n	800202c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689a      	ldr	r2, [r3, #8]
 8002044:	4b05      	ldr	r3, [pc, #20]	; (800205c <LL_ADC_EnableInternalRegulator+0x24>)
 8002046:	4013      	ands	r3, r2
 8002048:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	6fffffc0 	.word	0x6fffffc0

08002060 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002070:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002074:	d101      	bne.n	800207a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002076:	2301      	movs	r3, #1
 8002078:	e000      	b.n	800207c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	4b05      	ldr	r3, [pc, #20]	; (80020ac <LL_ADC_Enable+0x24>)
 8002096:	4013      	ands	r3, r2
 8002098:	f043 0201 	orr.w	r2, r3, #1
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	7fffffc0 	.word	0x7fffffc0

080020b0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d101      	bne.n	80020c8 <LL_ADC_IsEnabled+0x18>
 80020c4:	2301      	movs	r3, #1
 80020c6:	e000      	b.n	80020ca <LL_ADC_IsEnabled+0x1a>
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
	...

080020d8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689a      	ldr	r2, [r3, #8]
 80020e4:	4b05      	ldr	r3, [pc, #20]	; (80020fc <LL_ADC_REG_StartConversion+0x24>)
 80020e6:	4013      	ands	r3, r2
 80020e8:	f043 0204 	orr.w	r2, r3, #4
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	7fffffc0 	.word	0x7fffffc0

08002100 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	2b04      	cmp	r3, #4
 8002112:	d101      	bne.n	8002118 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002114:	2301      	movs	r3, #1
 8002116:	e000      	b.n	800211a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002126:	b480      	push	{r7}
 8002128:	b083      	sub	sp, #12
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f003 0308 	and.w	r3, r3, #8
 8002136:	2b08      	cmp	r3, #8
 8002138:	d101      	bne.n	800213e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800213a:	2301      	movs	r3, #1
 800213c:	e000      	b.n	8002140 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800214c:	b590      	push	{r4, r7, lr}
 800214e:	b089      	sub	sp, #36	; 0x24
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002154:	2300      	movs	r3, #0
 8002156:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002158:	2300      	movs	r3, #0
 800215a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e18f      	b.n	8002486 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002170:	2b00      	cmp	r3, #0
 8002172:	d109      	bne.n	8002188 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f7ff f9c7 	bl	8001508 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff ff3f 	bl	8002010 <LL_ADC_IsDeepPowerDownEnabled>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d004      	beq.n	80021a2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff ff25 	bl	8001fec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff ff5a 	bl	8002060 <LL_ADC_IsInternalRegulatorEnabled>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d114      	bne.n	80021dc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff ff3e 	bl	8002038 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021bc:	4b87      	ldr	r3, [pc, #540]	; (80023dc <HAL_ADC_Init+0x290>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	099b      	lsrs	r3, r3, #6
 80021c2:	4a87      	ldr	r2, [pc, #540]	; (80023e0 <HAL_ADC_Init+0x294>)
 80021c4:	fba2 2303 	umull	r2, r3, r2, r3
 80021c8:	099b      	lsrs	r3, r3, #6
 80021ca:	3301      	adds	r3, #1
 80021cc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021ce:	e002      	b.n	80021d6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1f9      	bne.n	80021d0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff ff3d 	bl	8002060 <LL_ADC_IsInternalRegulatorEnabled>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d10d      	bne.n	8002208 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f0:	f043 0210 	orr.w	r2, r3, #16
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fc:	f043 0201 	orr.w	r2, r3, #1
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff ff77 	bl	8002100 <LL_ADC_REG_IsConversionOngoing>
 8002212:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002218:	f003 0310 	and.w	r3, r3, #16
 800221c:	2b00      	cmp	r3, #0
 800221e:	f040 8129 	bne.w	8002474 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	2b00      	cmp	r3, #0
 8002226:	f040 8125 	bne.w	8002474 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800222e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002232:	f043 0202 	orr.w	r2, r3, #2
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff ff36 	bl	80020b0 <LL_ADC_IsEnabled>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d136      	bne.n	80022b8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a65      	ldr	r2, [pc, #404]	; (80023e4 <HAL_ADC_Init+0x298>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d004      	beq.n	800225e <HAL_ADC_Init+0x112>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a63      	ldr	r2, [pc, #396]	; (80023e8 <HAL_ADC_Init+0x29c>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d10e      	bne.n	800227c <HAL_ADC_Init+0x130>
 800225e:	4861      	ldr	r0, [pc, #388]	; (80023e4 <HAL_ADC_Init+0x298>)
 8002260:	f7ff ff26 	bl	80020b0 <LL_ADC_IsEnabled>
 8002264:	4604      	mov	r4, r0
 8002266:	4860      	ldr	r0, [pc, #384]	; (80023e8 <HAL_ADC_Init+0x29c>)
 8002268:	f7ff ff22 	bl	80020b0 <LL_ADC_IsEnabled>
 800226c:	4603      	mov	r3, r0
 800226e:	4323      	orrs	r3, r4
 8002270:	2b00      	cmp	r3, #0
 8002272:	bf0c      	ite	eq
 8002274:	2301      	moveq	r3, #1
 8002276:	2300      	movne	r3, #0
 8002278:	b2db      	uxtb	r3, r3
 800227a:	e008      	b.n	800228e <HAL_ADC_Init+0x142>
 800227c:	485b      	ldr	r0, [pc, #364]	; (80023ec <HAL_ADC_Init+0x2a0>)
 800227e:	f7ff ff17 	bl	80020b0 <LL_ADC_IsEnabled>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	bf0c      	ite	eq
 8002288:	2301      	moveq	r3, #1
 800228a:	2300      	movne	r3, #0
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d012      	beq.n	80022b8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a53      	ldr	r2, [pc, #332]	; (80023e4 <HAL_ADC_Init+0x298>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d004      	beq.n	80022a6 <HAL_ADC_Init+0x15a>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a51      	ldr	r2, [pc, #324]	; (80023e8 <HAL_ADC_Init+0x29c>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d101      	bne.n	80022aa <HAL_ADC_Init+0x15e>
 80022a6:	4a52      	ldr	r2, [pc, #328]	; (80023f0 <HAL_ADC_Init+0x2a4>)
 80022a8:	e000      	b.n	80022ac <HAL_ADC_Init+0x160>
 80022aa:	4a52      	ldr	r2, [pc, #328]	; (80023f4 <HAL_ADC_Init+0x2a8>)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	4619      	mov	r1, r3
 80022b2:	4610      	mov	r0, r2
 80022b4:	f7ff fd68 	bl	8001d88 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80022b8:	f7ff fd46 	bl	8001d48 <HAL_GetREVID>
 80022bc:	4603      	mov	r3, r0
 80022be:	f241 0203 	movw	r2, #4099	; 0x1003
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d914      	bls.n	80022f0 <HAL_ADC_Init+0x1a4>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	2b10      	cmp	r3, #16
 80022cc:	d110      	bne.n	80022f0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	7d5b      	ldrb	r3, [r3, #21]
 80022d2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80022d8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80022de:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	7f1b      	ldrb	r3, [r3, #28]
 80022e4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80022e6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80022e8:	f043 030c 	orr.w	r3, r3, #12
 80022ec:	61bb      	str	r3, [r7, #24]
 80022ee:	e00d      	b.n	800230c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	7d5b      	ldrb	r3, [r3, #21]
 80022f4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80022fa:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002300:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	7f1b      	ldrb	r3, [r3, #28]
 8002306:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002308:	4313      	orrs	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	7f1b      	ldrb	r3, [r3, #28]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d106      	bne.n	8002322 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	3b01      	subs	r3, #1
 800231a:	045b      	lsls	r3, r3, #17
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4313      	orrs	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002326:	2b00      	cmp	r3, #0
 8002328:	d009      	beq.n	800233e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002336:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	4313      	orrs	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68da      	ldr	r2, [r3, #12]
 8002344:	4b2c      	ldr	r3, [pc, #176]	; (80023f8 <HAL_ADC_Init+0x2ac>)
 8002346:	4013      	ands	r3, r2
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	6812      	ldr	r2, [r2, #0]
 800234c:	69b9      	ldr	r1, [r7, #24]
 800234e:	430b      	orrs	r3, r1
 8002350:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff fed2 	bl	8002100 <LL_ADC_REG_IsConversionOngoing>
 800235c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff fedf 	bl	8002126 <LL_ADC_INJ_IsConversionOngoing>
 8002368:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d15f      	bne.n	8002430 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d15c      	bne.n	8002430 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	7d1b      	ldrb	r3, [r3, #20]
 800237a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002380:	4313      	orrs	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68da      	ldr	r2, [r3, #12]
 800238a:	4b1c      	ldr	r3, [pc, #112]	; (80023fc <HAL_ADC_Init+0x2b0>)
 800238c:	4013      	ands	r3, r2
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	6812      	ldr	r2, [r2, #0]
 8002392:	69b9      	ldr	r1, [r7, #24]
 8002394:	430b      	orrs	r3, r1
 8002396:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d130      	bne.n	8002404 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	691a      	ldr	r2, [r3, #16]
 80023ae:	4b14      	ldr	r3, [pc, #80]	; (8002400 <HAL_ADC_Init+0x2b4>)
 80023b0:	4013      	ands	r3, r2
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80023b6:	3a01      	subs	r2, #1
 80023b8:	0411      	lsls	r1, r2, #16
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80023be:	4311      	orrs	r1, r2
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80023c4:	4311      	orrs	r1, r2
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80023ca:	430a      	orrs	r2, r1
 80023cc:	431a      	orrs	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f042 0201 	orr.w	r2, r2, #1
 80023d6:	611a      	str	r2, [r3, #16]
 80023d8:	e01c      	b.n	8002414 <HAL_ADC_Init+0x2c8>
 80023da:	bf00      	nop
 80023dc:	24000000 	.word	0x24000000
 80023e0:	053e2d63 	.word	0x053e2d63
 80023e4:	40022000 	.word	0x40022000
 80023e8:	40022100 	.word	0x40022100
 80023ec:	58026000 	.word	0x58026000
 80023f0:	40022300 	.word	0x40022300
 80023f4:	58026300 	.word	0x58026300
 80023f8:	fff0c003 	.word	0xfff0c003
 80023fc:	ffffbffc 	.word	0xffffbffc
 8002400:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	691a      	ldr	r2, [r3, #16]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f022 0201 	bic.w	r2, r2, #1
 8002412:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	430a      	orrs	r2, r1
 8002428:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 fdd6 	bl	8002fdc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d10c      	bne.n	8002452 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	f023 010f 	bic.w	r1, r3, #15
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	1e5a      	subs	r2, r3, #1
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	430a      	orrs	r2, r1
 800244e:	631a      	str	r2, [r3, #48]	; 0x30
 8002450:	e007      	b.n	8002462 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 020f 	bic.w	r2, r2, #15
 8002460:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002466:	f023 0303 	bic.w	r3, r3, #3
 800246a:	f043 0201 	orr.w	r2, r3, #1
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	655a      	str	r2, [r3, #84]	; 0x54
 8002472:	e007      	b.n	8002484 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002478:	f043 0210 	orr.w	r2, r3, #16
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002484:	7ffb      	ldrb	r3, [r7, #31]
}
 8002486:	4618      	mov	r0, r3
 8002488:	3724      	adds	r7, #36	; 0x24
 800248a:	46bd      	mov	sp, r7
 800248c:	bd90      	pop	{r4, r7, pc}
 800248e:	bf00      	nop

08002490 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a5c      	ldr	r2, [pc, #368]	; (8002610 <HAL_ADC_Start+0x180>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d004      	beq.n	80024ac <HAL_ADC_Start+0x1c>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a5b      	ldr	r2, [pc, #364]	; (8002614 <HAL_ADC_Start+0x184>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d101      	bne.n	80024b0 <HAL_ADC_Start+0x20>
 80024ac:	4b5a      	ldr	r3, [pc, #360]	; (8002618 <HAL_ADC_Start+0x188>)
 80024ae:	e000      	b.n	80024b2 <HAL_ADC_Start+0x22>
 80024b0:	4b5a      	ldr	r3, [pc, #360]	; (800261c <HAL_ADC_Start+0x18c>)
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7ff fd7e 	bl	8001fb4 <LL_ADC_GetMultimode>
 80024b8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff fe1e 	bl	8002100 <LL_ADC_REG_IsConversionOngoing>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f040 809a 	bne.w	8002600 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d101      	bne.n	80024da <HAL_ADC_Start+0x4a>
 80024d6:	2302      	movs	r3, #2
 80024d8:	e095      	b.n	8002606 <HAL_ADC_Start+0x176>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 fcf0 	bl	8002ec8 <ADC_Enable>
 80024e8:	4603      	mov	r3, r0
 80024ea:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80024ec:	7dfb      	ldrb	r3, [r7, #23]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f040 8081 	bne.w	80025f6 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80024f8:	4b49      	ldr	r3, [pc, #292]	; (8002620 <HAL_ADC_Start+0x190>)
 80024fa:	4013      	ands	r3, r2
 80024fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a42      	ldr	r2, [pc, #264]	; (8002614 <HAL_ADC_Start+0x184>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d002      	beq.n	8002514 <HAL_ADC_Start+0x84>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	e000      	b.n	8002516 <HAL_ADC_Start+0x86>
 8002514:	4b3e      	ldr	r3, [pc, #248]	; (8002610 <HAL_ADC_Start+0x180>)
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6812      	ldr	r2, [r2, #0]
 800251a:	4293      	cmp	r3, r2
 800251c:	d002      	beq.n	8002524 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d105      	bne.n	8002530 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002528:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002534:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002538:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800253c:	d106      	bne.n	800254c <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002542:	f023 0206 	bic.w	r2, r3, #6
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	659a      	str	r2, [r3, #88]	; 0x58
 800254a:	e002      	b.n	8002552 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	221c      	movs	r2, #28
 8002558:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a2b      	ldr	r2, [pc, #172]	; (8002614 <HAL_ADC_Start+0x184>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d002      	beq.n	8002572 <HAL_ADC_Start+0xe2>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	e000      	b.n	8002574 <HAL_ADC_Start+0xe4>
 8002572:	4b27      	ldr	r3, [pc, #156]	; (8002610 <HAL_ADC_Start+0x180>)
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	6812      	ldr	r2, [r2, #0]
 8002578:	4293      	cmp	r3, r2
 800257a:	d008      	beq.n	800258e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d005      	beq.n	800258e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	2b05      	cmp	r3, #5
 8002586:	d002      	beq.n	800258e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	2b09      	cmp	r3, #9
 800258c:	d114      	bne.n	80025b8 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d007      	beq.n	80025ac <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025a4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff fd91 	bl	80020d8 <LL_ADC_REG_StartConversion>
 80025b6:	e025      	b.n	8002604 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025bc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a12      	ldr	r2, [pc, #72]	; (8002614 <HAL_ADC_Start+0x184>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d002      	beq.n	80025d4 <HAL_ADC_Start+0x144>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	e000      	b.n	80025d6 <HAL_ADC_Start+0x146>
 80025d4:	4b0e      	ldr	r3, [pc, #56]	; (8002610 <HAL_ADC_Start+0x180>)
 80025d6:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00f      	beq.n	8002604 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025ec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	655a      	str	r2, [r3, #84]	; 0x54
 80025f4:	e006      	b.n	8002604 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80025fe:	e001      	b.n	8002604 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002600:	2302      	movs	r3, #2
 8002602:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002604:	7dfb      	ldrb	r3, [r7, #23]
}
 8002606:	4618      	mov	r0, r3
 8002608:	3718      	adds	r7, #24
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	40022000 	.word	0x40022000
 8002614:	40022100 	.word	0x40022100
 8002618:	40022300 	.word	0x40022300
 800261c:	58026300 	.word	0x58026300
 8002620:	fffff0fe 	.word	0xfffff0fe

08002624 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b088      	sub	sp, #32
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a72      	ldr	r2, [pc, #456]	; (80027fc <HAL_ADC_PollForConversion+0x1d8>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d004      	beq.n	8002642 <HAL_ADC_PollForConversion+0x1e>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a70      	ldr	r2, [pc, #448]	; (8002800 <HAL_ADC_PollForConversion+0x1dc>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d101      	bne.n	8002646 <HAL_ADC_PollForConversion+0x22>
 8002642:	4b70      	ldr	r3, [pc, #448]	; (8002804 <HAL_ADC_PollForConversion+0x1e0>)
 8002644:	e000      	b.n	8002648 <HAL_ADC_PollForConversion+0x24>
 8002646:	4b70      	ldr	r3, [pc, #448]	; (8002808 <HAL_ADC_PollForConversion+0x1e4>)
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff fcb3 	bl	8001fb4 <LL_ADC_GetMultimode>
 800264e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	2b08      	cmp	r3, #8
 8002656:	d102      	bne.n	800265e <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002658:	2308      	movs	r3, #8
 800265a:	61fb      	str	r3, [r7, #28]
 800265c:	e037      	b.n	80026ce <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d005      	beq.n	8002670 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	2b05      	cmp	r3, #5
 8002668:	d002      	beq.n	8002670 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	2b09      	cmp	r3, #9
 800266e:	d111      	bne.n	8002694 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b00      	cmp	r3, #0
 800267c:	d007      	beq.n	800268e <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002682:	f043 0220 	orr.w	r2, r3, #32
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e0b1      	b.n	80027f2 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800268e:	2304      	movs	r3, #4
 8002690:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8002692:	e01c      	b.n	80026ce <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a58      	ldr	r2, [pc, #352]	; (80027fc <HAL_ADC_PollForConversion+0x1d8>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d004      	beq.n	80026a8 <HAL_ADC_PollForConversion+0x84>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a57      	ldr	r2, [pc, #348]	; (8002800 <HAL_ADC_PollForConversion+0x1dc>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d101      	bne.n	80026ac <HAL_ADC_PollForConversion+0x88>
 80026a8:	4b56      	ldr	r3, [pc, #344]	; (8002804 <HAL_ADC_PollForConversion+0x1e0>)
 80026aa:	e000      	b.n	80026ae <HAL_ADC_PollForConversion+0x8a>
 80026ac:	4b56      	ldr	r3, [pc, #344]	; (8002808 <HAL_ADC_PollForConversion+0x1e4>)
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff fc8e 	bl	8001fd0 <LL_ADC_GetMultiDMATransfer>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d007      	beq.n	80026ca <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026be:	f043 0220 	orr.w	r2, r3, #32
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e093      	b.n	80027f2 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80026ca:	2304      	movs	r3, #4
 80026cc:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80026ce:	f7ff fb0b 	bl	8001ce8 <HAL_GetTick>
 80026d2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80026d4:	e021      	b.n	800271a <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026dc:	d01d      	beq.n	800271a <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80026de:	f7ff fb03 	bl	8001ce8 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d302      	bcc.n	80026f4 <HAL_ADC_PollForConversion+0xd0>
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d112      	bne.n	800271a <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	4013      	ands	r3, r2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10b      	bne.n	800271a <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002706:	f043 0204 	orr.w	r2, r3, #4
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e06b      	b.n	80027f2 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	4013      	ands	r3, r2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d0d6      	beq.n	80026d6 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800272c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff fbad 	bl	8001e98 <LL_ADC_REG_IsTriggerSourceSWStart>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d01c      	beq.n	800277e <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	7d5b      	ldrb	r3, [r3, #21]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d118      	bne.n	800277e <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0308 	and.w	r3, r3, #8
 8002756:	2b08      	cmp	r3, #8
 8002758:	d111      	bne.n	800277e <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800275e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800276a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d105      	bne.n	800277e <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002776:	f043 0201 	orr.w	r2, r3, #1
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a1f      	ldr	r2, [pc, #124]	; (8002800 <HAL_ADC_PollForConversion+0x1dc>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d002      	beq.n	800278e <HAL_ADC_PollForConversion+0x16a>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	e000      	b.n	8002790 <HAL_ADC_PollForConversion+0x16c>
 800278e:	4b1b      	ldr	r3, [pc, #108]	; (80027fc <HAL_ADC_PollForConversion+0x1d8>)
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	6812      	ldr	r2, [r2, #0]
 8002794:	4293      	cmp	r3, r2
 8002796:	d008      	beq.n	80027aa <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d005      	beq.n	80027aa <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	2b05      	cmp	r3, #5
 80027a2:	d002      	beq.n	80027aa <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	2b09      	cmp	r3, #9
 80027a8:	d104      	bne.n	80027b4 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	61bb      	str	r3, [r7, #24]
 80027b2:	e00c      	b.n	80027ce <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a11      	ldr	r2, [pc, #68]	; (8002800 <HAL_ADC_PollForConversion+0x1dc>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d002      	beq.n	80027c4 <HAL_ADC_PollForConversion+0x1a0>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	e000      	b.n	80027c6 <HAL_ADC_PollForConversion+0x1a2>
 80027c4:	4b0d      	ldr	r3, [pc, #52]	; (80027fc <HAL_ADC_PollForConversion+0x1d8>)
 80027c6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	2b08      	cmp	r3, #8
 80027d2:	d104      	bne.n	80027de <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2208      	movs	r2, #8
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	e008      	b.n	80027f0 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d103      	bne.n	80027f0 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	220c      	movs	r2, #12
 80027ee:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3720      	adds	r7, #32
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	40022000 	.word	0x40022000
 8002800:	40022100 	.word	0x40022100
 8002804:	40022300 	.word	0x40022300
 8002808:	58026300 	.word	0x58026300

0800280c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800281a:	4618      	mov	r0, r3
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
	...

08002828 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002828:	b590      	push	{r4, r7, lr}
 800282a:	b0a1      	sub	sp, #132	; 0x84
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002832:	2300      	movs	r3, #0
 8002834:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002838:	2300      	movs	r3, #0
 800283a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	4a9d      	ldr	r2, [pc, #628]	; (8002ab8 <HAL_ADC_ConfigChannel+0x290>)
 8002842:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800284a:	2b01      	cmp	r3, #1
 800284c:	d101      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x2a>
 800284e:	2302      	movs	r3, #2
 8002850:	e321      	b.n	8002e96 <HAL_ADC_ConfigChannel+0x66e>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2201      	movs	r2, #1
 8002856:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff fc4e 	bl	8002100 <LL_ADC_REG_IsConversionOngoing>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	f040 8306 	bne.w	8002e78 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002874:	2b00      	cmp	r3, #0
 8002876:	d108      	bne.n	800288a <HAL_ADC_ConfigChannel+0x62>
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	0e9b      	lsrs	r3, r3, #26
 800287e:	f003 031f 	and.w	r3, r3, #31
 8002882:	2201      	movs	r2, #1
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	e016      	b.n	80028b8 <HAL_ADC_ConfigChannel+0x90>
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002890:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002892:	fa93 f3a3 	rbit	r3, r3
 8002896:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002898:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800289a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800289c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80028a2:	2320      	movs	r3, #32
 80028a4:	e003      	b.n	80028ae <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80028a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028a8:	fab3 f383 	clz	r3, r3
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	f003 031f 	and.w	r3, r3, #31
 80028b2:	2201      	movs	r2, #1
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6812      	ldr	r2, [r2, #0]
 80028bc:	69d1      	ldr	r1, [r2, #28]
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	6812      	ldr	r2, [r2, #0]
 80028c2:	430b      	orrs	r3, r1
 80028c4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6818      	ldr	r0, [r3, #0]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	6859      	ldr	r1, [r3, #4]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	461a      	mov	r2, r3
 80028d4:	f7ff faf3 	bl	8001ebe <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff fc0f 	bl	8002100 <LL_ADC_REG_IsConversionOngoing>
 80028e2:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff fc1c 	bl	8002126 <LL_ADC_INJ_IsConversionOngoing>
 80028ee:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f040 80b3 	bne.w	8002a5e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f040 80af 	bne.w	8002a5e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6818      	ldr	r0, [r3, #0]
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	6819      	ldr	r1, [r3, #0]
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	461a      	mov	r2, r3
 800290e:	f7ff fb02 	bl	8001f16 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002912:	4b6a      	ldr	r3, [pc, #424]	; (8002abc <HAL_ADC_ConfigChannel+0x294>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800291a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800291e:	d10b      	bne.n	8002938 <HAL_ADC_ConfigChannel+0x110>
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	695a      	ldr	r2, [r3, #20]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	089b      	lsrs	r3, r3, #2
 800292c:	f003 0307 	and.w	r3, r3, #7
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	e01d      	b.n	8002974 <HAL_ADC_ConfigChannel+0x14c>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	f003 0310 	and.w	r3, r3, #16
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10b      	bne.n	800295e <HAL_ADC_ConfigChannel+0x136>
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	695a      	ldr	r2, [r3, #20]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	089b      	lsrs	r3, r3, #2
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	e00a      	b.n	8002974 <HAL_ADC_ConfigChannel+0x14c>
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	695a      	ldr	r2, [r3, #20]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	089b      	lsrs	r3, r3, #2
 800296a:	f003 0304 	and.w	r3, r3, #4
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	2b04      	cmp	r3, #4
 800297c:	d027      	beq.n	80029ce <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6818      	ldr	r0, [r3, #0]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	6919      	ldr	r1, [r3, #16]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800298c:	f7ff fa30 	bl	8001df0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6818      	ldr	r0, [r3, #0]
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	6919      	ldr	r1, [r3, #16]
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	7e5b      	ldrb	r3, [r3, #25]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d102      	bne.n	80029a6 <HAL_ADC_ConfigChannel+0x17e>
 80029a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80029a4:	e000      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x180>
 80029a6:	2300      	movs	r3, #0
 80029a8:	461a      	mov	r2, r3
 80029aa:	f7ff fa5a 	bl	8001e62 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6818      	ldr	r0, [r3, #0]
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	6919      	ldr	r1, [r3, #16]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	7e1b      	ldrb	r3, [r3, #24]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d102      	bne.n	80029c4 <HAL_ADC_ConfigChannel+0x19c>
 80029be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80029c2:	e000      	b.n	80029c6 <HAL_ADC_ConfigChannel+0x19e>
 80029c4:	2300      	movs	r3, #0
 80029c6:	461a      	mov	r2, r3
 80029c8:	f7ff fa32 	bl	8001e30 <LL_ADC_SetDataRightShift>
 80029cc:	e047      	b.n	8002a5e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	069b      	lsls	r3, r3, #26
 80029de:	429a      	cmp	r2, r3
 80029e0:	d107      	bne.n	80029f2 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80029f0:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	069b      	lsls	r3, r3, #26
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d107      	bne.n	8002a16 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a14:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a1c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	069b      	lsls	r3, r3, #26
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d107      	bne.n	8002a3a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a38:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a40:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	069b      	lsls	r3, r3, #26
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d107      	bne.n	8002a5e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a5c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff fb24 	bl	80020b0 <LL_ADC_IsEnabled>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f040 820d 	bne.w	8002e8a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6818      	ldr	r0, [r3, #0]
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	6819      	ldr	r1, [r3, #0]
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	f7ff fa75 	bl	8001f6c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	4a0c      	ldr	r2, [pc, #48]	; (8002ab8 <HAL_ADC_ConfigChannel+0x290>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	f040 8133 	bne.w	8002cf4 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d110      	bne.n	8002ac0 <HAL_ADC_ConfigChannel+0x298>
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	0e9b      	lsrs	r3, r3, #26
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	f003 031f 	and.w	r3, r3, #31
 8002aaa:	2b09      	cmp	r3, #9
 8002aac:	bf94      	ite	ls
 8002aae:	2301      	movls	r3, #1
 8002ab0:	2300      	movhi	r3, #0
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	e01e      	b.n	8002af4 <HAL_ADC_ConfigChannel+0x2cc>
 8002ab6:	bf00      	nop
 8002ab8:	47ff0000 	.word	0x47ff0000
 8002abc:	5c001000 	.word	0x5c001000
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ac8:	fa93 f3a3 	rbit	r3, r3
 8002acc:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002ace:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ad0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002ad2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d101      	bne.n	8002adc <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002ad8:	2320      	movs	r3, #32
 8002ada:	e003      	b.n	8002ae4 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002adc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ade:	fab3 f383 	clz	r3, r3
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	f003 031f 	and.w	r3, r3, #31
 8002aea:	2b09      	cmp	r3, #9
 8002aec:	bf94      	ite	ls
 8002aee:	2301      	movls	r3, #1
 8002af0:	2300      	movhi	r3, #0
 8002af2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d079      	beq.n	8002bec <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d107      	bne.n	8002b14 <HAL_ADC_ConfigChannel+0x2ec>
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	0e9b      	lsrs	r3, r3, #26
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	069b      	lsls	r3, r3, #26
 8002b0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b12:	e015      	b.n	8002b40 <HAL_ADC_ConfigChannel+0x318>
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b1c:	fa93 f3a3 	rbit	r3, r3
 8002b20:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002b22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b24:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002b26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002b2c:	2320      	movs	r3, #32
 8002b2e:	e003      	b.n	8002b38 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002b30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b32:	fab3 f383 	clz	r3, r3
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	3301      	adds	r3, #1
 8002b3a:	069b      	lsls	r3, r3, #26
 8002b3c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d109      	bne.n	8002b60 <HAL_ADC_ConfigChannel+0x338>
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	0e9b      	lsrs	r3, r3, #26
 8002b52:	3301      	adds	r3, #1
 8002b54:	f003 031f 	and.w	r3, r3, #31
 8002b58:	2101      	movs	r1, #1
 8002b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5e:	e017      	b.n	8002b90 <HAL_ADC_ConfigChannel+0x368>
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b68:	fa93 f3a3 	rbit	r3, r3
 8002b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b70:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002b72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d101      	bne.n	8002b7c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002b78:	2320      	movs	r3, #32
 8002b7a:	e003      	b.n	8002b84 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002b7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b7e:	fab3 f383 	clz	r3, r3
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	3301      	adds	r3, #1
 8002b86:	f003 031f 	and.w	r3, r3, #31
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b90:	ea42 0103 	orr.w	r1, r2, r3
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d10a      	bne.n	8002bb6 <HAL_ADC_ConfigChannel+0x38e>
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	0e9b      	lsrs	r3, r3, #26
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	f003 021f 	and.w	r2, r3, #31
 8002bac:	4613      	mov	r3, r2
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	4413      	add	r3, r2
 8002bb2:	051b      	lsls	r3, r3, #20
 8002bb4:	e018      	b.n	8002be8 <HAL_ADC_ConfigChannel+0x3c0>
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bbe:	fa93 f3a3 	rbit	r3, r3
 8002bc2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002bce:	2320      	movs	r3, #32
 8002bd0:	e003      	b.n	8002bda <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8002bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd4:	fab3 f383 	clz	r3, r3
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	3301      	adds	r3, #1
 8002bdc:	f003 021f 	and.w	r2, r3, #31
 8002be0:	4613      	mov	r3, r2
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	4413      	add	r3, r2
 8002be6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002be8:	430b      	orrs	r3, r1
 8002bea:	e07e      	b.n	8002cea <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d107      	bne.n	8002c08 <HAL_ADC_ConfigChannel+0x3e0>
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	0e9b      	lsrs	r3, r3, #26
 8002bfe:	3301      	adds	r3, #1
 8002c00:	069b      	lsls	r3, r3, #26
 8002c02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c06:	e015      	b.n	8002c34 <HAL_ADC_ConfigChannel+0x40c>
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c10:	fa93 f3a3 	rbit	r3, r3
 8002c14:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c18:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d101      	bne.n	8002c24 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002c20:	2320      	movs	r3, #32
 8002c22:	e003      	b.n	8002c2c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c26:	fab3 f383 	clz	r3, r3
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	069b      	lsls	r3, r3, #26
 8002c30:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d109      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x42c>
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	0e9b      	lsrs	r3, r3, #26
 8002c46:	3301      	adds	r3, #1
 8002c48:	f003 031f 	and.w	r3, r3, #31
 8002c4c:	2101      	movs	r1, #1
 8002c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c52:	e017      	b.n	8002c84 <HAL_ADC_ConfigChannel+0x45c>
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	fa93 f3a3 	rbit	r3, r3
 8002c60:	61bb      	str	r3, [r7, #24]
  return result;
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002c66:	6a3b      	ldr	r3, [r7, #32]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d101      	bne.n	8002c70 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002c6c:	2320      	movs	r3, #32
 8002c6e:	e003      	b.n	8002c78 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8002c70:	6a3b      	ldr	r3, [r7, #32]
 8002c72:	fab3 f383 	clz	r3, r3
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	3301      	adds	r3, #1
 8002c7a:	f003 031f 	and.w	r3, r3, #31
 8002c7e:	2101      	movs	r1, #1
 8002c80:	fa01 f303 	lsl.w	r3, r1, r3
 8002c84:	ea42 0103 	orr.w	r1, r2, r3
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d10d      	bne.n	8002cb0 <HAL_ADC_ConfigChannel+0x488>
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	0e9b      	lsrs	r3, r3, #26
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	f003 021f 	and.w	r2, r3, #31
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	4413      	add	r3, r2
 8002ca6:	3b1e      	subs	r3, #30
 8002ca8:	051b      	lsls	r3, r3, #20
 8002caa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002cae:	e01b      	b.n	8002ce8 <HAL_ADC_ConfigChannel+0x4c0>
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	fa93 f3a3 	rbit	r3, r3
 8002cbc:	60fb      	str	r3, [r7, #12]
  return result;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d101      	bne.n	8002ccc <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002cc8:	2320      	movs	r3, #32
 8002cca:	e003      	b.n	8002cd4 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	fab3 f383 	clz	r3, r3
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	f003 021f 	and.w	r2, r3, #31
 8002cda:	4613      	mov	r3, r2
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	4413      	add	r3, r2
 8002ce0:	3b1e      	subs	r3, #30
 8002ce2:	051b      	lsls	r3, r3, #20
 8002ce4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ce8:	430b      	orrs	r3, r1
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	6892      	ldr	r2, [r2, #8]
 8002cee:	4619      	mov	r1, r3
 8002cf0:	f7ff f911 	bl	8001f16 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f280 80c6 	bge.w	8002e8a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a67      	ldr	r2, [pc, #412]	; (8002ea0 <HAL_ADC_ConfigChannel+0x678>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d004      	beq.n	8002d12 <HAL_ADC_ConfigChannel+0x4ea>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a65      	ldr	r2, [pc, #404]	; (8002ea4 <HAL_ADC_ConfigChannel+0x67c>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d101      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x4ee>
 8002d12:	4b65      	ldr	r3, [pc, #404]	; (8002ea8 <HAL_ADC_ConfigChannel+0x680>)
 8002d14:	e000      	b.n	8002d18 <HAL_ADC_ConfigChannel+0x4f0>
 8002d16:	4b65      	ldr	r3, [pc, #404]	; (8002eac <HAL_ADC_ConfigChannel+0x684>)
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff f85b 	bl	8001dd4 <LL_ADC_GetCommonPathInternalCh>
 8002d1e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a5e      	ldr	r2, [pc, #376]	; (8002ea0 <HAL_ADC_ConfigChannel+0x678>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d004      	beq.n	8002d34 <HAL_ADC_ConfigChannel+0x50c>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a5d      	ldr	r2, [pc, #372]	; (8002ea4 <HAL_ADC_ConfigChannel+0x67c>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d10e      	bne.n	8002d52 <HAL_ADC_ConfigChannel+0x52a>
 8002d34:	485a      	ldr	r0, [pc, #360]	; (8002ea0 <HAL_ADC_ConfigChannel+0x678>)
 8002d36:	f7ff f9bb 	bl	80020b0 <LL_ADC_IsEnabled>
 8002d3a:	4604      	mov	r4, r0
 8002d3c:	4859      	ldr	r0, [pc, #356]	; (8002ea4 <HAL_ADC_ConfigChannel+0x67c>)
 8002d3e:	f7ff f9b7 	bl	80020b0 <LL_ADC_IsEnabled>
 8002d42:	4603      	mov	r3, r0
 8002d44:	4323      	orrs	r3, r4
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	bf0c      	ite	eq
 8002d4a:	2301      	moveq	r3, #1
 8002d4c:	2300      	movne	r3, #0
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	e008      	b.n	8002d64 <HAL_ADC_ConfigChannel+0x53c>
 8002d52:	4857      	ldr	r0, [pc, #348]	; (8002eb0 <HAL_ADC_ConfigChannel+0x688>)
 8002d54:	f7ff f9ac 	bl	80020b0 <LL_ADC_IsEnabled>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	bf0c      	ite	eq
 8002d5e:	2301      	moveq	r3, #1
 8002d60:	2300      	movne	r3, #0
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d07d      	beq.n	8002e64 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a51      	ldr	r2, [pc, #324]	; (8002eb4 <HAL_ADC_ConfigChannel+0x68c>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d130      	bne.n	8002dd4 <HAL_ADC_ConfigChannel+0x5ac>
 8002d72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d12b      	bne.n	8002dd4 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a4b      	ldr	r2, [pc, #300]	; (8002eb0 <HAL_ADC_ConfigChannel+0x688>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	f040 8081 	bne.w	8002e8a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a44      	ldr	r2, [pc, #272]	; (8002ea0 <HAL_ADC_ConfigChannel+0x678>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d004      	beq.n	8002d9c <HAL_ADC_ConfigChannel+0x574>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a43      	ldr	r2, [pc, #268]	; (8002ea4 <HAL_ADC_ConfigChannel+0x67c>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d101      	bne.n	8002da0 <HAL_ADC_ConfigChannel+0x578>
 8002d9c:	4a42      	ldr	r2, [pc, #264]	; (8002ea8 <HAL_ADC_ConfigChannel+0x680>)
 8002d9e:	e000      	b.n	8002da2 <HAL_ADC_ConfigChannel+0x57a>
 8002da0:	4a42      	ldr	r2, [pc, #264]	; (8002eac <HAL_ADC_ConfigChannel+0x684>)
 8002da2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002da4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002da8:	4619      	mov	r1, r3
 8002daa:	4610      	mov	r0, r2
 8002dac:	f7fe ffff 	bl	8001dae <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002db0:	4b41      	ldr	r3, [pc, #260]	; (8002eb8 <HAL_ADC_ConfigChannel+0x690>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	099b      	lsrs	r3, r3, #6
 8002db6:	4a41      	ldr	r2, [pc, #260]	; (8002ebc <HAL_ADC_ConfigChannel+0x694>)
 8002db8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dbc:	099b      	lsrs	r3, r3, #6
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002dc4:	e002      	b.n	8002dcc <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1f9      	bne.n	8002dc6 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002dd2:	e05a      	b.n	8002e8a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a39      	ldr	r2, [pc, #228]	; (8002ec0 <HAL_ADC_ConfigChannel+0x698>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d11e      	bne.n	8002e1c <HAL_ADC_ConfigChannel+0x5f4>
 8002dde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002de0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d119      	bne.n	8002e1c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a30      	ldr	r2, [pc, #192]	; (8002eb0 <HAL_ADC_ConfigChannel+0x688>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d14b      	bne.n	8002e8a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a2a      	ldr	r2, [pc, #168]	; (8002ea0 <HAL_ADC_ConfigChannel+0x678>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d004      	beq.n	8002e06 <HAL_ADC_ConfigChannel+0x5de>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a28      	ldr	r2, [pc, #160]	; (8002ea4 <HAL_ADC_ConfigChannel+0x67c>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d101      	bne.n	8002e0a <HAL_ADC_ConfigChannel+0x5e2>
 8002e06:	4a28      	ldr	r2, [pc, #160]	; (8002ea8 <HAL_ADC_ConfigChannel+0x680>)
 8002e08:	e000      	b.n	8002e0c <HAL_ADC_ConfigChannel+0x5e4>
 8002e0a:	4a28      	ldr	r2, [pc, #160]	; (8002eac <HAL_ADC_ConfigChannel+0x684>)
 8002e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e12:	4619      	mov	r1, r3
 8002e14:	4610      	mov	r0, r2
 8002e16:	f7fe ffca 	bl	8001dae <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e1a:	e036      	b.n	8002e8a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a28      	ldr	r2, [pc, #160]	; (8002ec4 <HAL_ADC_ConfigChannel+0x69c>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d131      	bne.n	8002e8a <HAL_ADC_ConfigChannel+0x662>
 8002e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d12c      	bne.n	8002e8a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a1e      	ldr	r2, [pc, #120]	; (8002eb0 <HAL_ADC_ConfigChannel+0x688>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d127      	bne.n	8002e8a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a18      	ldr	r2, [pc, #96]	; (8002ea0 <HAL_ADC_ConfigChannel+0x678>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d004      	beq.n	8002e4e <HAL_ADC_ConfigChannel+0x626>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a16      	ldr	r2, [pc, #88]	; (8002ea4 <HAL_ADC_ConfigChannel+0x67c>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d101      	bne.n	8002e52 <HAL_ADC_ConfigChannel+0x62a>
 8002e4e:	4a16      	ldr	r2, [pc, #88]	; (8002ea8 <HAL_ADC_ConfigChannel+0x680>)
 8002e50:	e000      	b.n	8002e54 <HAL_ADC_ConfigChannel+0x62c>
 8002e52:	4a16      	ldr	r2, [pc, #88]	; (8002eac <HAL_ADC_ConfigChannel+0x684>)
 8002e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e56:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4610      	mov	r0, r2
 8002e5e:	f7fe ffa6 	bl	8001dae <LL_ADC_SetCommonPathInternalCh>
 8002e62:	e012      	b.n	8002e8a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e68:	f043 0220 	orr.w	r2, r3, #32
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002e76:	e008      	b.n	8002e8a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e7c:	f043 0220 	orr.w	r2, r3, #32
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002e92:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3784      	adds	r7, #132	; 0x84
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd90      	pop	{r4, r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	40022000 	.word	0x40022000
 8002ea4:	40022100 	.word	0x40022100
 8002ea8:	40022300 	.word	0x40022300
 8002eac:	58026300 	.word	0x58026300
 8002eb0:	58026000 	.word	0x58026000
 8002eb4:	cb840000 	.word	0xcb840000
 8002eb8:	24000000 	.word	0x24000000
 8002ebc:	053e2d63 	.word	0x053e2d63
 8002ec0:	c7520000 	.word	0xc7520000
 8002ec4:	cfb80000 	.word	0xcfb80000

08002ec8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff f8eb 	bl	80020b0 <LL_ADC_IsEnabled>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d16e      	bne.n	8002fbe <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	689a      	ldr	r2, [r3, #8]
 8002ee6:	4b38      	ldr	r3, [pc, #224]	; (8002fc8 <ADC_Enable+0x100>)
 8002ee8:	4013      	ands	r3, r2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00d      	beq.n	8002f0a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef2:	f043 0210 	orr.w	r2, r3, #16
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002efe:	f043 0201 	orr.w	r2, r3, #1
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e05a      	b.n	8002fc0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7ff f8ba 	bl	8002088 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002f14:	f7fe fee8 	bl	8001ce8 <HAL_GetTick>
 8002f18:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a2b      	ldr	r2, [pc, #172]	; (8002fcc <ADC_Enable+0x104>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d004      	beq.n	8002f2e <ADC_Enable+0x66>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a29      	ldr	r2, [pc, #164]	; (8002fd0 <ADC_Enable+0x108>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d101      	bne.n	8002f32 <ADC_Enable+0x6a>
 8002f2e:	4b29      	ldr	r3, [pc, #164]	; (8002fd4 <ADC_Enable+0x10c>)
 8002f30:	e000      	b.n	8002f34 <ADC_Enable+0x6c>
 8002f32:	4b29      	ldr	r3, [pc, #164]	; (8002fd8 <ADC_Enable+0x110>)
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff f83d 	bl	8001fb4 <LL_ADC_GetMultimode>
 8002f3a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a23      	ldr	r2, [pc, #140]	; (8002fd0 <ADC_Enable+0x108>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d002      	beq.n	8002f4c <ADC_Enable+0x84>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	e000      	b.n	8002f4e <ADC_Enable+0x86>
 8002f4c:	4b1f      	ldr	r3, [pc, #124]	; (8002fcc <ADC_Enable+0x104>)
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6812      	ldr	r2, [r2, #0]
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d02c      	beq.n	8002fb0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d130      	bne.n	8002fbe <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f5c:	e028      	b.n	8002fb0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7ff f8a4 	bl	80020b0 <LL_ADC_IsEnabled>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d104      	bne.n	8002f78 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff f888 	bl	8002088 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f78:	f7fe feb6 	bl	8001ce8 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d914      	bls.n	8002fb0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d00d      	beq.n	8002fb0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f98:	f043 0210 	orr.w	r2, r3, #16
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa4:	f043 0201 	orr.w	r2, r3, #1
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e007      	b.n	8002fc0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d1cf      	bne.n	8002f5e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	8000003f 	.word	0x8000003f
 8002fcc:	40022000 	.word	0x40022000
 8002fd0:	40022100 	.word	0x40022100
 8002fd4:	40022300 	.word	0x40022300
 8002fd8:	58026300 	.word	0x58026300

08002fdc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a7a      	ldr	r2, [pc, #488]	; (80031d4 <ADC_ConfigureBoostMode+0x1f8>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d004      	beq.n	8002ff8 <ADC_ConfigureBoostMode+0x1c>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a79      	ldr	r2, [pc, #484]	; (80031d8 <ADC_ConfigureBoostMode+0x1fc>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d109      	bne.n	800300c <ADC_ConfigureBoostMode+0x30>
 8002ff8:	4b78      	ldr	r3, [pc, #480]	; (80031dc <ADC_ConfigureBoostMode+0x200>)
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003000:	2b00      	cmp	r3, #0
 8003002:	bf14      	ite	ne
 8003004:	2301      	movne	r3, #1
 8003006:	2300      	moveq	r3, #0
 8003008:	b2db      	uxtb	r3, r3
 800300a:	e008      	b.n	800301e <ADC_ConfigureBoostMode+0x42>
 800300c:	4b74      	ldr	r3, [pc, #464]	; (80031e0 <ADC_ConfigureBoostMode+0x204>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003014:	2b00      	cmp	r3, #0
 8003016:	bf14      	ite	ne
 8003018:	2301      	movne	r3, #1
 800301a:	2300      	moveq	r3, #0
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d01c      	beq.n	800305c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003022:	f002 fa0d 	bl	8005440 <HAL_RCC_GetHCLKFreq>
 8003026:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003030:	d010      	beq.n	8003054 <ADC_ConfigureBoostMode+0x78>
 8003032:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003036:	d873      	bhi.n	8003120 <ADC_ConfigureBoostMode+0x144>
 8003038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800303c:	d002      	beq.n	8003044 <ADC_ConfigureBoostMode+0x68>
 800303e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003042:	d16d      	bne.n	8003120 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	0c1b      	lsrs	r3, r3, #16
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003050:	60fb      	str	r3, [r7, #12]
        break;
 8003052:	e068      	b.n	8003126 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	089b      	lsrs	r3, r3, #2
 8003058:	60fb      	str	r3, [r7, #12]
        break;
 800305a:	e064      	b.n	8003126 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800305c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003060:	f04f 0100 	mov.w	r1, #0
 8003064:	f003 fc52 	bl	800690c <HAL_RCCEx_GetPeriphCLKFreq>
 8003068:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003072:	d051      	beq.n	8003118 <ADC_ConfigureBoostMode+0x13c>
 8003074:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003078:	d854      	bhi.n	8003124 <ADC_ConfigureBoostMode+0x148>
 800307a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800307e:	d047      	beq.n	8003110 <ADC_ConfigureBoostMode+0x134>
 8003080:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003084:	d84e      	bhi.n	8003124 <ADC_ConfigureBoostMode+0x148>
 8003086:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800308a:	d03d      	beq.n	8003108 <ADC_ConfigureBoostMode+0x12c>
 800308c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003090:	d848      	bhi.n	8003124 <ADC_ConfigureBoostMode+0x148>
 8003092:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003096:	d033      	beq.n	8003100 <ADC_ConfigureBoostMode+0x124>
 8003098:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800309c:	d842      	bhi.n	8003124 <ADC_ConfigureBoostMode+0x148>
 800309e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80030a2:	d029      	beq.n	80030f8 <ADC_ConfigureBoostMode+0x11c>
 80030a4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80030a8:	d83c      	bhi.n	8003124 <ADC_ConfigureBoostMode+0x148>
 80030aa:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80030ae:	d01a      	beq.n	80030e6 <ADC_ConfigureBoostMode+0x10a>
 80030b0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80030b4:	d836      	bhi.n	8003124 <ADC_ConfigureBoostMode+0x148>
 80030b6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80030ba:	d014      	beq.n	80030e6 <ADC_ConfigureBoostMode+0x10a>
 80030bc:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80030c0:	d830      	bhi.n	8003124 <ADC_ConfigureBoostMode+0x148>
 80030c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030c6:	d00e      	beq.n	80030e6 <ADC_ConfigureBoostMode+0x10a>
 80030c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030cc:	d82a      	bhi.n	8003124 <ADC_ConfigureBoostMode+0x148>
 80030ce:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80030d2:	d008      	beq.n	80030e6 <ADC_ConfigureBoostMode+0x10a>
 80030d4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80030d8:	d824      	bhi.n	8003124 <ADC_ConfigureBoostMode+0x148>
 80030da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030de:	d002      	beq.n	80030e6 <ADC_ConfigureBoostMode+0x10a>
 80030e0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80030e4:	d11e      	bne.n	8003124 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	0c9b      	lsrs	r3, r3, #18
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f4:	60fb      	str	r3, [r7, #12]
        break;
 80030f6:	e016      	b.n	8003126 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	091b      	lsrs	r3, r3, #4
 80030fc:	60fb      	str	r3, [r7, #12]
        break;
 80030fe:	e012      	b.n	8003126 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	095b      	lsrs	r3, r3, #5
 8003104:	60fb      	str	r3, [r7, #12]
        break;
 8003106:	e00e      	b.n	8003126 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	099b      	lsrs	r3, r3, #6
 800310c:	60fb      	str	r3, [r7, #12]
        break;
 800310e:	e00a      	b.n	8003126 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	09db      	lsrs	r3, r3, #7
 8003114:	60fb      	str	r3, [r7, #12]
        break;
 8003116:	e006      	b.n	8003126 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	0a1b      	lsrs	r3, r3, #8
 800311c:	60fb      	str	r3, [r7, #12]
        break;
 800311e:	e002      	b.n	8003126 <ADC_ConfigureBoostMode+0x14a>
        break;
 8003120:	bf00      	nop
 8003122:	e000      	b.n	8003126 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003124:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003126:	f7fe fe0f 	bl	8001d48 <HAL_GetREVID>
 800312a:	4603      	mov	r3, r0
 800312c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003130:	4293      	cmp	r3, r2
 8003132:	d815      	bhi.n	8003160 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	4a2b      	ldr	r2, [pc, #172]	; (80031e4 <ADC_ConfigureBoostMode+0x208>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d908      	bls.n	800314e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	689a      	ldr	r2, [r3, #8]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800314a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800314c:	e03e      	b.n	80031cc <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800315c:	609a      	str	r2, [r3, #8]
}
 800315e:	e035      	b.n	80031cc <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	085b      	lsrs	r3, r3, #1
 8003164:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	4a1f      	ldr	r2, [pc, #124]	; (80031e8 <ADC_ConfigureBoostMode+0x20c>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d808      	bhi.n	8003180 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800317c:	609a      	str	r2, [r3, #8]
}
 800317e:	e025      	b.n	80031cc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	4a1a      	ldr	r2, [pc, #104]	; (80031ec <ADC_ConfigureBoostMode+0x210>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d80a      	bhi.n	800319e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800319a:	609a      	str	r2, [r3, #8]
}
 800319c:	e016      	b.n	80031cc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	4a13      	ldr	r2, [pc, #76]	; (80031f0 <ADC_ConfigureBoostMode+0x214>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d80a      	bhi.n	80031bc <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031b8:	609a      	str	r2, [r3, #8]
}
 80031ba:	e007      	b.n	80031cc <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	689a      	ldr	r2, [r3, #8]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80031ca:	609a      	str	r2, [r3, #8]
}
 80031cc:	bf00      	nop
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40022000 	.word	0x40022000
 80031d8:	40022100 	.word	0x40022100
 80031dc:	40022300 	.word	0x40022300
 80031e0:	58026300 	.word	0x58026300
 80031e4:	01312d00 	.word	0x01312d00
 80031e8:	005f5e10 	.word	0x005f5e10
 80031ec:	00bebc20 	.word	0x00bebc20
 80031f0:	017d7840 	.word	0x017d7840

080031f4 <LL_ADC_IsEnabled>:
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f003 0301 	and.w	r3, r3, #1
 8003204:	2b01      	cmp	r3, #1
 8003206:	d101      	bne.n	800320c <LL_ADC_IsEnabled+0x18>
 8003208:	2301      	movs	r3, #1
 800320a:	e000      	b.n	800320e <LL_ADC_IsEnabled+0x1a>
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr

0800321a <LL_ADC_REG_IsConversionOngoing>:
{
 800321a:	b480      	push	{r7}
 800321c:	b083      	sub	sp, #12
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f003 0304 	and.w	r3, r3, #4
 800322a:	2b04      	cmp	r3, #4
 800322c:	d101      	bne.n	8003232 <LL_ADC_REG_IsConversionOngoing+0x18>
 800322e:	2301      	movs	r3, #1
 8003230:	e000      	b.n	8003234 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003240:	b590      	push	{r4, r7, lr}
 8003242:	b09f      	sub	sp, #124	; 0x7c
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800324a:	2300      	movs	r3, #0
 800324c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003256:	2b01      	cmp	r3, #1
 8003258:	d101      	bne.n	800325e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800325a:	2302      	movs	r3, #2
 800325c:	e0be      	b.n	80033dc <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003266:	2300      	movs	r3, #0
 8003268:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800326a:	2300      	movs	r3, #0
 800326c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a5c      	ldr	r2, [pc, #368]	; (80033e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d102      	bne.n	800327e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003278:	4b5b      	ldr	r3, [pc, #364]	; (80033e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800327a:	60bb      	str	r3, [r7, #8]
 800327c:	e001      	b.n	8003282 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800327e:	2300      	movs	r3, #0
 8003280:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d10b      	bne.n	80032a0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800328c:	f043 0220 	orr.w	r2, r3, #32
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e09d      	b.n	80033dc <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7ff ffb9 	bl	800321a <LL_ADC_REG_IsConversionOngoing>
 80032a8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7ff ffb3 	bl	800321a <LL_ADC_REG_IsConversionOngoing>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d17f      	bne.n	80033ba <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80032ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d17c      	bne.n	80033ba <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a47      	ldr	r2, [pc, #284]	; (80033e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d004      	beq.n	80032d4 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a46      	ldr	r2, [pc, #280]	; (80033e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d101      	bne.n	80032d8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80032d4:	4b45      	ldr	r3, [pc, #276]	; (80033ec <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80032d6:	e000      	b.n	80032da <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80032d8:	4b45      	ldr	r3, [pc, #276]	; (80033f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80032da:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d039      	beq.n	8003358 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80032e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	431a      	orrs	r2, r3
 80032f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032f4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a3a      	ldr	r2, [pc, #232]	; (80033e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d004      	beq.n	800330a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a38      	ldr	r2, [pc, #224]	; (80033e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d10e      	bne.n	8003328 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800330a:	4836      	ldr	r0, [pc, #216]	; (80033e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800330c:	f7ff ff72 	bl	80031f4 <LL_ADC_IsEnabled>
 8003310:	4604      	mov	r4, r0
 8003312:	4835      	ldr	r0, [pc, #212]	; (80033e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003314:	f7ff ff6e 	bl	80031f4 <LL_ADC_IsEnabled>
 8003318:	4603      	mov	r3, r0
 800331a:	4323      	orrs	r3, r4
 800331c:	2b00      	cmp	r3, #0
 800331e:	bf0c      	ite	eq
 8003320:	2301      	moveq	r3, #1
 8003322:	2300      	movne	r3, #0
 8003324:	b2db      	uxtb	r3, r3
 8003326:	e008      	b.n	800333a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003328:	4832      	ldr	r0, [pc, #200]	; (80033f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800332a:	f7ff ff63 	bl	80031f4 <LL_ADC_IsEnabled>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	bf0c      	ite	eq
 8003334:	2301      	moveq	r3, #1
 8003336:	2300      	movne	r3, #0
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d047      	beq.n	80033ce <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800333e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003340:	689a      	ldr	r2, [r3, #8]
 8003342:	4b2d      	ldr	r3, [pc, #180]	; (80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003344:	4013      	ands	r3, r2
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	6811      	ldr	r1, [r2, #0]
 800334a:	683a      	ldr	r2, [r7, #0]
 800334c:	6892      	ldr	r2, [r2, #8]
 800334e:	430a      	orrs	r2, r1
 8003350:	431a      	orrs	r2, r3
 8003352:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003354:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003356:	e03a      	b.n	80033ce <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003362:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a1e      	ldr	r2, [pc, #120]	; (80033e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d004      	beq.n	8003378 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a1d      	ldr	r2, [pc, #116]	; (80033e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d10e      	bne.n	8003396 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003378:	481a      	ldr	r0, [pc, #104]	; (80033e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800337a:	f7ff ff3b 	bl	80031f4 <LL_ADC_IsEnabled>
 800337e:	4604      	mov	r4, r0
 8003380:	4819      	ldr	r0, [pc, #100]	; (80033e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003382:	f7ff ff37 	bl	80031f4 <LL_ADC_IsEnabled>
 8003386:	4603      	mov	r3, r0
 8003388:	4323      	orrs	r3, r4
 800338a:	2b00      	cmp	r3, #0
 800338c:	bf0c      	ite	eq
 800338e:	2301      	moveq	r3, #1
 8003390:	2300      	movne	r3, #0
 8003392:	b2db      	uxtb	r3, r3
 8003394:	e008      	b.n	80033a8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003396:	4817      	ldr	r0, [pc, #92]	; (80033f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003398:	f7ff ff2c 	bl	80031f4 <LL_ADC_IsEnabled>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	bf0c      	ite	eq
 80033a2:	2301      	moveq	r3, #1
 80033a4:	2300      	movne	r3, #0
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d010      	beq.n	80033ce <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80033ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	4b11      	ldr	r3, [pc, #68]	; (80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80033b2:	4013      	ands	r3, r2
 80033b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80033b6:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033b8:	e009      	b.n	80033ce <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033be:	f043 0220 	orr.w	r2, r3, #32
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80033cc:	e000      	b.n	80033d0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033ce:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80033d8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80033dc:	4618      	mov	r0, r3
 80033de:	377c      	adds	r7, #124	; 0x7c
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd90      	pop	{r4, r7, pc}
 80033e4:	40022000 	.word	0x40022000
 80033e8:	40022100 	.word	0x40022100
 80033ec:	40022300 	.word	0x40022300
 80033f0:	58026300 	.word	0x58026300
 80033f4:	58026000 	.word	0x58026000
 80033f8:	fffff0e0 	.word	0xfffff0e0

080033fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f003 0307 	and.w	r3, r3, #7
 800340a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800340c:	4b0b      	ldr	r3, [pc, #44]	; (800343c <__NVIC_SetPriorityGrouping+0x40>)
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003412:	68ba      	ldr	r2, [r7, #8]
 8003414:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003418:	4013      	ands	r3, r2
 800341a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003424:	4b06      	ldr	r3, [pc, #24]	; (8003440 <__NVIC_SetPriorityGrouping+0x44>)
 8003426:	4313      	orrs	r3, r2
 8003428:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800342a:	4a04      	ldr	r2, [pc, #16]	; (800343c <__NVIC_SetPriorityGrouping+0x40>)
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	60d3      	str	r3, [r2, #12]
}
 8003430:	bf00      	nop
 8003432:	3714      	adds	r7, #20
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	e000ed00 	.word	0xe000ed00
 8003440:	05fa0000 	.word	0x05fa0000

08003444 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003444:	b480      	push	{r7}
 8003446:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003448:	4b04      	ldr	r3, [pc, #16]	; (800345c <__NVIC_GetPriorityGrouping+0x18>)
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	0a1b      	lsrs	r3, r3, #8
 800344e:	f003 0307 	and.w	r3, r3, #7
}
 8003452:	4618      	mov	r0, r3
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr
 800345c:	e000ed00 	.word	0xe000ed00

08003460 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	4603      	mov	r3, r0
 8003468:	6039      	str	r1, [r7, #0]
 800346a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800346c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003470:	2b00      	cmp	r3, #0
 8003472:	db0a      	blt.n	800348a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	b2da      	uxtb	r2, r3
 8003478:	490c      	ldr	r1, [pc, #48]	; (80034ac <__NVIC_SetPriority+0x4c>)
 800347a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800347e:	0112      	lsls	r2, r2, #4
 8003480:	b2d2      	uxtb	r2, r2
 8003482:	440b      	add	r3, r1
 8003484:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003488:	e00a      	b.n	80034a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	b2da      	uxtb	r2, r3
 800348e:	4908      	ldr	r1, [pc, #32]	; (80034b0 <__NVIC_SetPriority+0x50>)
 8003490:	88fb      	ldrh	r3, [r7, #6]
 8003492:	f003 030f 	and.w	r3, r3, #15
 8003496:	3b04      	subs	r3, #4
 8003498:	0112      	lsls	r2, r2, #4
 800349a:	b2d2      	uxtb	r2, r2
 800349c:	440b      	add	r3, r1
 800349e:	761a      	strb	r2, [r3, #24]
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr
 80034ac:	e000e100 	.word	0xe000e100
 80034b0:	e000ed00 	.word	0xe000ed00

080034b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b089      	sub	sp, #36	; 0x24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	f1c3 0307 	rsb	r3, r3, #7
 80034ce:	2b04      	cmp	r3, #4
 80034d0:	bf28      	it	cs
 80034d2:	2304      	movcs	r3, #4
 80034d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	3304      	adds	r3, #4
 80034da:	2b06      	cmp	r3, #6
 80034dc:	d902      	bls.n	80034e4 <NVIC_EncodePriority+0x30>
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	3b03      	subs	r3, #3
 80034e2:	e000      	b.n	80034e6 <NVIC_EncodePriority+0x32>
 80034e4:	2300      	movs	r3, #0
 80034e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034e8:	f04f 32ff 	mov.w	r2, #4294967295
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	fa02 f303 	lsl.w	r3, r2, r3
 80034f2:	43da      	mvns	r2, r3
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	401a      	ands	r2, r3
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	fa01 f303 	lsl.w	r3, r1, r3
 8003506:	43d9      	mvns	r1, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800350c:	4313      	orrs	r3, r2
         );
}
 800350e:	4618      	mov	r0, r3
 8003510:	3724      	adds	r7, #36	; 0x24
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
	...

0800351c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	3b01      	subs	r3, #1
 8003528:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800352c:	d301      	bcc.n	8003532 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800352e:	2301      	movs	r3, #1
 8003530:	e00f      	b.n	8003552 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003532:	4a0a      	ldr	r2, [pc, #40]	; (800355c <SysTick_Config+0x40>)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3b01      	subs	r3, #1
 8003538:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800353a:	210f      	movs	r1, #15
 800353c:	f04f 30ff 	mov.w	r0, #4294967295
 8003540:	f7ff ff8e 	bl	8003460 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003544:	4b05      	ldr	r3, [pc, #20]	; (800355c <SysTick_Config+0x40>)
 8003546:	2200      	movs	r2, #0
 8003548:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800354a:	4b04      	ldr	r3, [pc, #16]	; (800355c <SysTick_Config+0x40>)
 800354c:	2207      	movs	r2, #7
 800354e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	e000e010 	.word	0xe000e010

08003560 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f7ff ff47 	bl	80033fc <__NVIC_SetPriorityGrouping>
}
 800356e:	bf00      	nop
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b086      	sub	sp, #24
 800357a:	af00      	add	r7, sp, #0
 800357c:	4603      	mov	r3, r0
 800357e:	60b9      	str	r1, [r7, #8]
 8003580:	607a      	str	r2, [r7, #4]
 8003582:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003584:	f7ff ff5e 	bl	8003444 <__NVIC_GetPriorityGrouping>
 8003588:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	68b9      	ldr	r1, [r7, #8]
 800358e:	6978      	ldr	r0, [r7, #20]
 8003590:	f7ff ff90 	bl	80034b4 <NVIC_EncodePriority>
 8003594:	4602      	mov	r2, r0
 8003596:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800359a:	4611      	mov	r1, r2
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff ff5f 	bl	8003460 <__NVIC_SetPriority>
}
 80035a2:	bf00      	nop
 80035a4:	3718      	adds	r7, #24
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b082      	sub	sp, #8
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f7ff ffb2 	bl	800351c <SysTick_Config>
 80035b8:	4603      	mov	r3, r0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3708      	adds	r7, #8
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
	...

080035c4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e0cf      	b.n	8003776 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d106      	bne.n	80035ee <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2223      	movs	r2, #35	; 0x23
 80035e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f7fe f819 	bl	8001620 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035ee:	4b64      	ldr	r3, [pc, #400]	; (8003780 <HAL_ETH_Init+0x1bc>)
 80035f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80035f4:	4a62      	ldr	r2, [pc, #392]	; (8003780 <HAL_ETH_Init+0x1bc>)
 80035f6:	f043 0302 	orr.w	r3, r3, #2
 80035fa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80035fe:	4b60      	ldr	r3, [pc, #384]	; (8003780 <HAL_ETH_Init+0x1bc>)
 8003600:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	60bb      	str	r3, [r7, #8]
 800360a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	7a1b      	ldrb	r3, [r3, #8]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d103      	bne.n	800361c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003614:	2000      	movs	r0, #0
 8003616:	f7fe fba3 	bl	8001d60 <HAL_SYSCFG_ETHInterfaceSelect>
 800361a:	e003      	b.n	8003624 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800361c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003620:	f7fe fb9e 	bl	8001d60 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8003624:	4b57      	ldr	r3, [pc, #348]	; (8003784 <HAL_ETH_Init+0x1c0>)
 8003626:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6812      	ldr	r2, [r2, #0]
 8003636:	f043 0301 	orr.w	r3, r3, #1
 800363a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800363e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003640:	f7fe fb52 	bl	8001ce8 <HAL_GetTick>
 8003644:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003646:	e011      	b.n	800366c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003648:	f7fe fb4e 	bl	8001ce8 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003656:	d909      	bls.n	800366c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2204      	movs	r2, #4
 800365c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	22e0      	movs	r2, #224	; 0xe0
 8003664:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e084      	b.n	8003776 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1e4      	bne.n	8003648 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f886 	bl	8003790 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003684:	f001 fedc 	bl	8005440 <HAL_RCC_GetHCLKFreq>
 8003688:	4603      	mov	r3, r0
 800368a:	4a3f      	ldr	r2, [pc, #252]	; (8003788 <HAL_ETH_Init+0x1c4>)
 800368c:	fba2 2303 	umull	r2, r3, r2, r3
 8003690:	0c9a      	lsrs	r2, r3, #18
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	3a01      	subs	r2, #1
 8003698:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 fa71 	bl	8003b84 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036aa:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80036ae:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	6812      	ldr	r2, [r2, #0]
 80036b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80036ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80036be:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	f003 0303 	and.w	r3, r3, #3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d009      	beq.n	80036e2 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	22e0      	movs	r2, #224	; 0xe0
 80036da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e049      	b.n	8003776 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036ea:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80036ee:	4b27      	ldr	r3, [pc, #156]	; (800378c <HAL_ETH_Init+0x1c8>)
 80036f0:	4013      	ands	r3, r2
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	6952      	ldr	r2, [r2, #20]
 80036f6:	0051      	lsls	r1, r2, #1
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	6812      	ldr	r2, [r2, #0]
 80036fc:	430b      	orrs	r3, r1
 80036fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003702:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 fad9 	bl	8003cbe <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 fb1f 	bl	8003d50 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	3305      	adds	r3, #5
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	021a      	lsls	r2, r3, #8
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	3304      	adds	r3, #4
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	4619      	mov	r1, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	430a      	orrs	r2, r1
 800372c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	3303      	adds	r3, #3
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	061a      	lsls	r2, r3, #24
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	3302      	adds	r3, #2
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	041b      	lsls	r3, r3, #16
 8003744:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	3301      	adds	r3, #1
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003750:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800375e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003760:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2210      	movs	r2, #16
 8003770:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	58024400 	.word	0x58024400
 8003784:	58000400 	.word	0x58000400
 8003788:	431bde83 	.word	0x431bde83
 800378c:	ffff8001 	.word	0xffff8001

08003790 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80037a0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80037a8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80037aa:	f001 fe49 	bl	8005440 <HAL_RCC_GetHCLKFreq>
 80037ae:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	4a1e      	ldr	r2, [pc, #120]	; (800382c <HAL_ETH_SetMDIOClockRange+0x9c>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d908      	bls.n	80037ca <HAL_ETH_SetMDIOClockRange+0x3a>
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	4a1d      	ldr	r2, [pc, #116]	; (8003830 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d804      	bhi.n	80037ca <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037c6:	60fb      	str	r3, [r7, #12]
 80037c8:	e027      	b.n	800381a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	4a18      	ldr	r2, [pc, #96]	; (8003830 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d908      	bls.n	80037e4 <HAL_ETH_SetMDIOClockRange+0x54>
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	4a17      	ldr	r2, [pc, #92]	; (8003834 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d204      	bcs.n	80037e4 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80037e0:	60fb      	str	r3, [r7, #12]
 80037e2:	e01a      	b.n	800381a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	4a13      	ldr	r2, [pc, #76]	; (8003834 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d303      	bcc.n	80037f4 <HAL_ETH_SetMDIOClockRange+0x64>
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	4a12      	ldr	r2, [pc, #72]	; (8003838 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d911      	bls.n	8003818 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	4a10      	ldr	r2, [pc, #64]	; (8003838 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d908      	bls.n	800380e <HAL_ETH_SetMDIOClockRange+0x7e>
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	4a0f      	ldr	r2, [pc, #60]	; (800383c <HAL_ETH_SetMDIOClockRange+0xac>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d804      	bhi.n	800380e <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800380a:	60fb      	str	r3, [r7, #12]
 800380c:	e005      	b.n	800381a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003814:	60fb      	str	r3, [r7, #12]
 8003816:	e000      	b.n	800381a <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8003818:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8003824:	bf00      	nop
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	01312cff 	.word	0x01312cff
 8003830:	02160ebf 	.word	0x02160ebf
 8003834:	03938700 	.word	0x03938700
 8003838:	05f5e0ff 	.word	0x05f5e0ff
 800383c:	08f0d17f 	.word	0x08f0d17f

08003840 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8003852:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	791b      	ldrb	r3, [r3, #4]
 8003858:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800385a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	7b1b      	ldrb	r3, [r3, #12]
 8003860:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003862:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	7b5b      	ldrb	r3, [r3, #13]
 8003868:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800386a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	7b9b      	ldrb	r3, [r3, #14]
 8003870:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003872:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	7bdb      	ldrb	r3, [r3, #15]
 8003878:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800387a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	7c12      	ldrb	r2, [r2, #16]
 8003880:	2a00      	cmp	r2, #0
 8003882:	d102      	bne.n	800388a <ETH_SetMACConfig+0x4a>
 8003884:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003888:	e000      	b.n	800388c <ETH_SetMACConfig+0x4c>
 800388a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800388c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	7c52      	ldrb	r2, [r2, #17]
 8003892:	2a00      	cmp	r2, #0
 8003894:	d102      	bne.n	800389c <ETH_SetMACConfig+0x5c>
 8003896:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800389a:	e000      	b.n	800389e <ETH_SetMACConfig+0x5e>
 800389c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800389e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	7c9b      	ldrb	r3, [r3, #18]
 80038a4:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80038a6:	431a      	orrs	r2, r3
               macconf->Speed |
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80038ac:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80038b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	7f1b      	ldrb	r3, [r3, #28]
 80038b8:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80038ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	7f5b      	ldrb	r3, [r3, #29]
 80038c0:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80038c2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80038c4:	683a      	ldr	r2, [r7, #0]
 80038c6:	7f92      	ldrb	r2, [r2, #30]
 80038c8:	2a00      	cmp	r2, #0
 80038ca:	d102      	bne.n	80038d2 <ETH_SetMACConfig+0x92>
 80038cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038d0:	e000      	b.n	80038d4 <ETH_SetMACConfig+0x94>
 80038d2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80038d4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	7fdb      	ldrb	r3, [r3, #31]
 80038da:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80038dc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80038de:	683a      	ldr	r2, [r7, #0]
 80038e0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80038e4:	2a00      	cmp	r2, #0
 80038e6:	d102      	bne.n	80038ee <ETH_SetMACConfig+0xae>
 80038e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038ec:	e000      	b.n	80038f0 <ETH_SetMACConfig+0xb0>
 80038ee:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80038f0:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80038f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038fe:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8003900:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8003906:	4313      	orrs	r3, r2
 8003908:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	4b56      	ldr	r3, [pc, #344]	; (8003a6c <ETH_SetMACConfig+0x22c>)
 8003912:	4013      	ands	r3, r2
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6812      	ldr	r2, [r2, #0]
 8003918:	68f9      	ldr	r1, [r7, #12]
 800391a:	430b      	orrs	r3, r1
 800391c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003922:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800392a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800392c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003934:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003936:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800393e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003940:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8003942:	683a      	ldr	r2, [r7, #0]
 8003944:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8003948:	2a00      	cmp	r2, #0
 800394a:	d102      	bne.n	8003952 <ETH_SetMACConfig+0x112>
 800394c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003950:	e000      	b.n	8003954 <ETH_SetMACConfig+0x114>
 8003952:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003954:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800395a:	4313      	orrs	r3, r2
 800395c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	4b42      	ldr	r3, [pc, #264]	; (8003a70 <ETH_SetMACConfig+0x230>)
 8003966:	4013      	ands	r3, r2
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	6812      	ldr	r2, [r2, #0]
 800396c:	68f9      	ldr	r1, [r7, #12]
 800396e:	430b      	orrs	r3, r1
 8003970:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003978:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800397e:	4313      	orrs	r3, r2
 8003980:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68da      	ldr	r2, [r3, #12]
 8003988:	4b3a      	ldr	r3, [pc, #232]	; (8003a74 <ETH_SetMACConfig+0x234>)
 800398a:	4013      	ands	r3, r2
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6812      	ldr	r2, [r2, #0]
 8003990:	68f9      	ldr	r1, [r7, #12]
 8003992:	430b      	orrs	r3, r1
 8003994:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800399c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80039a2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80039aa:	2a00      	cmp	r2, #0
 80039ac:	d101      	bne.n	80039b2 <ETH_SetMACConfig+0x172>
 80039ae:	2280      	movs	r2, #128	; 0x80
 80039b0:	e000      	b.n	80039b4 <ETH_SetMACConfig+0x174>
 80039b2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80039b4:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ba:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80039bc:	4313      	orrs	r3, r2
 80039be:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80039c6:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80039ca:	4013      	ands	r3, r2
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	6812      	ldr	r2, [r2, #0]
 80039d0:	68f9      	ldr	r1, [r7, #12]
 80039d2:	430b      	orrs	r3, r1
 80039d4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80039dc:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80039e4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80039e6:	4313      	orrs	r3, r2
 80039e8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f2:	f023 0103 	bic.w	r1, r3, #3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	430a      	orrs	r2, r1
 80039fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8003a0a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003a20:	683a      	ldr	r2, [r7, #0]
 8003a22:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8003a26:	2a00      	cmp	r2, #0
 8003a28:	d101      	bne.n	8003a2e <ETH_SetMACConfig+0x1ee>
 8003a2a:	2240      	movs	r2, #64	; 0x40
 8003a2c:	e000      	b.n	8003a30 <ETH_SetMACConfig+0x1f0>
 8003a2e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003a30:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003a38:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003a3a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8003a42:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003a44:	4313      	orrs	r3, r2
 8003a46:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003a50:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8003a60:	bf00      	nop
 8003a62:	3714      	adds	r7, #20
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr
 8003a6c:	00048083 	.word	0x00048083
 8003a70:	c0f88000 	.word	0xc0f88000
 8003a74:	fffffef0 	.word	0xfffffef0

08003a78 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	4b38      	ldr	r3, [pc, #224]	; (8003b70 <ETH_SetDMAConfig+0xf8>)
 8003a8e:	4013      	ands	r3, r2
 8003a90:	683a      	ldr	r2, [r7, #0]
 8003a92:	6811      	ldr	r1, [r2, #0]
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	6812      	ldr	r2, [r2, #0]
 8003a98:	430b      	orrs	r3, r1
 8003a9a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a9e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	791b      	ldrb	r3, [r3, #4]
 8003aa4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003aaa:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	7b1b      	ldrb	r3, [r3, #12]
 8003ab0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	4b2c      	ldr	r3, [pc, #176]	; (8003b74 <ETH_SetDMAConfig+0xfc>)
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	6812      	ldr	r2, [r2, #0]
 8003ac8:	68f9      	ldr	r1, [r7, #12]
 8003aca:	430b      	orrs	r3, r1
 8003acc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003ad0:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	7b5b      	ldrb	r3, [r3, #13]
 8003ad6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003adc:	4313      	orrs	r3, r2
 8003ade:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ae8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8003aec:	4b22      	ldr	r3, [pc, #136]	; (8003b78 <ETH_SetDMAConfig+0x100>)
 8003aee:	4013      	ands	r3, r2
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	6812      	ldr	r2, [r2, #0]
 8003af4:	68f9      	ldr	r1, [r7, #12]
 8003af6:	430b      	orrs	r3, r1
 8003af8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003afc:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	7d1b      	ldrb	r3, [r3, #20]
 8003b08:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8003b0a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	7f5b      	ldrb	r3, [r3, #29]
 8003b10:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8003b12:	4313      	orrs	r3, r2
 8003b14:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b1e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8003b22:	4b16      	ldr	r3, [pc, #88]	; (8003b7c <ETH_SetDMAConfig+0x104>)
 8003b24:	4013      	ands	r3, r2
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	6812      	ldr	r2, [r2, #0]
 8003b2a:	68f9      	ldr	r1, [r7, #12]
 8003b2c:	430b      	orrs	r3, r1
 8003b2e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003b32:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	7f1b      	ldrb	r3, [r3, #28]
 8003b3a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003b40:	4313      	orrs	r3, r2
 8003b42:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b4c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003b50:	4b0b      	ldr	r3, [pc, #44]	; (8003b80 <ETH_SetDMAConfig+0x108>)
 8003b52:	4013      	ands	r3, r2
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	6812      	ldr	r2, [r2, #0]
 8003b58:	68f9      	ldr	r1, [r7, #12]
 8003b5a:	430b      	orrs	r3, r1
 8003b5c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003b60:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8003b64:	bf00      	nop
 8003b66:	3714      	adds	r7, #20
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr
 8003b70:	ffff87fd 	.word	0xffff87fd
 8003b74:	ffff2ffe 	.word	0xffff2ffe
 8003b78:	fffec000 	.word	0xfffec000
 8003b7c:	ffc0efef 	.word	0xffc0efef
 8003b80:	7fc0ffff 	.word	0x7fc0ffff

08003b84 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b0a4      	sub	sp, #144	; 0x90
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003b92:	2300      	movs	r3, #0
 8003b94:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003b96:	2300      	movs	r3, #0
 8003b98:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003bc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bc4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8003bdc:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8003be0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003be2:	2300      	movs	r3, #0
 8003be4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003be8:	2300      	movs	r3, #0
 8003bea:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8003bec:	2301      	movs	r3, #1
 8003bee:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8003c02:	2300      	movs	r3, #0
 8003c04:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003c06:	2300      	movs	r3, #0
 8003c08:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003c10:	2300      	movs	r3, #0
 8003c12:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003c16:	2301      	movs	r3, #1
 8003c18:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003c1c:	2320      	movs	r3, #32
 8003c1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8003c22:	2301      	movs	r3, #1
 8003c24:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8003c2e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8003c32:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003c34:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c38:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003c40:	2302      	movs	r3, #2
 8003c42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003c46:	2300      	movs	r3, #0
 8003c48:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8003c52:	2300      	movs	r3, #0
 8003c54:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8003c62:	2301      	movs	r3, #1
 8003c64:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003c68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7ff fde6 	bl	8003840 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003c74:	2301      	movs	r3, #1
 8003c76:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003c80:	2300      	movs	r3, #0
 8003c82:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003c86:	2300      	movs	r3, #0
 8003c88:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003c8e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003c92:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003c94:	2300      	movs	r3, #0
 8003c96:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003c98:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003c9c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8003ca4:	f44f 7306 	mov.w	r3, #536	; 0x218
 8003ca8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003caa:	f107 0308 	add.w	r3, r7, #8
 8003cae:	4619      	mov	r1, r3
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f7ff fee1 	bl	8003a78 <ETH_SetDMAConfig>
}
 8003cb6:	bf00      	nop
 8003cb8:	3790      	adds	r7, #144	; 0x90
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b085      	sub	sp, #20
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	60fb      	str	r3, [r7, #12]
 8003cca:	e01d      	b.n	8003d08 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68d9      	ldr	r1, [r3, #12]
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	4413      	add	r3, r2
 8003cd8:	00db      	lsls	r3, r3, #3
 8003cda:	440b      	add	r3, r1
 8003cdc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	2200      	movs	r2, #0
 8003cee:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003cf6:	68b9      	ldr	r1, [r7, #8]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	3206      	adds	r2, #6
 8003cfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	3301      	adds	r3, #1
 8003d06:	60fb      	str	r3, [r7, #12]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2b03      	cmp	r3, #3
 8003d0c:	d9de      	bls.n	8003ccc <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	2303      	movs	r3, #3
 8003d20:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	68da      	ldr	r2, [r3, #12]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d30:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68da      	ldr	r2, [r3, #12]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d40:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8003d44:	bf00      	nop
 8003d46:	3714      	adds	r7, #20
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003d58:	2300      	movs	r3, #0
 8003d5a:	60fb      	str	r3, [r7, #12]
 8003d5c:	e023      	b.n	8003da6 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6919      	ldr	r1, [r3, #16]
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	4613      	mov	r3, r2
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	4413      	add	r3, r2
 8003d6a:	00db      	lsls	r3, r3, #3
 8003d6c:	440b      	add	r3, r1
 8003d6e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	2200      	movs	r2, #0
 8003d74:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	2200      	movs	r2, #0
 8003d86:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	2200      	movs	r2, #0
 8003d92:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003d94:	68b9      	ldr	r1, [r7, #8]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	3212      	adds	r2, #18
 8003d9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	3301      	adds	r3, #1
 8003da4:	60fb      	str	r3, [r7, #12]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2b03      	cmp	r3, #3
 8003daa:	d9d8      	bls.n	8003d5e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	691a      	ldr	r2, [r3, #16]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003de6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dfa:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8003dfe:	bf00      	nop
 8003e00:	3714      	adds	r7, #20
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
	...

08003e0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b089      	sub	sp, #36	; 0x24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003e16:	2300      	movs	r3, #0
 8003e18:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003e1a:	4b89      	ldr	r3, [pc, #548]	; (8004040 <HAL_GPIO_Init+0x234>)
 8003e1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003e1e:	e194      	b.n	800414a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	2101      	movs	r1, #1
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	fa01 f303 	lsl.w	r3, r1, r3
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f000 8186 	beq.w	8004144 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f003 0303 	and.w	r3, r3, #3
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d005      	beq.n	8003e50 <HAL_GPIO_Init+0x44>
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f003 0303 	and.w	r3, r3, #3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d130      	bne.n	8003eb2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	2203      	movs	r2, #3
 8003e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e60:	43db      	mvns	r3, r3
 8003e62:	69ba      	ldr	r2, [r7, #24]
 8003e64:	4013      	ands	r3, r2
 8003e66:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	68da      	ldr	r2, [r3, #12]
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	fa02 f303 	lsl.w	r3, r2, r3
 8003e74:	69ba      	ldr	r2, [r7, #24]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e86:	2201      	movs	r2, #1
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8e:	43db      	mvns	r3, r3
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	4013      	ands	r3, r2
 8003e94:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	091b      	lsrs	r3, r3, #4
 8003e9c:	f003 0201 	and.w	r2, r3, #1
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea6:	69ba      	ldr	r2, [r7, #24]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f003 0303 	and.w	r3, r3, #3
 8003eba:	2b03      	cmp	r3, #3
 8003ebc:	d017      	beq.n	8003eee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	005b      	lsls	r3, r3, #1
 8003ec8:	2203      	movs	r2, #3
 8003eca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ece:	43db      	mvns	r3, r3
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	689a      	ldr	r2, [r3, #8]
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee2:	69ba      	ldr	r2, [r7, #24]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f003 0303 	and.w	r3, r3, #3
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d123      	bne.n	8003f42 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	08da      	lsrs	r2, r3, #3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	3208      	adds	r2, #8
 8003f02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	f003 0307 	and.w	r3, r3, #7
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	220f      	movs	r2, #15
 8003f12:	fa02 f303 	lsl.w	r3, r2, r3
 8003f16:	43db      	mvns	r3, r3
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	691a      	ldr	r2, [r3, #16]
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	f003 0307 	and.w	r3, r3, #7
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2e:	69ba      	ldr	r2, [r7, #24]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	08da      	lsrs	r2, r3, #3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	3208      	adds	r2, #8
 8003f3c:	69b9      	ldr	r1, [r7, #24]
 8003f3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	2203      	movs	r2, #3
 8003f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f52:	43db      	mvns	r3, r3
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	4013      	ands	r3, r2
 8003f58:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f003 0203 	and.w	r2, r3, #3
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6a:	69ba      	ldr	r2, [r7, #24]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	69ba      	ldr	r2, [r7, #24]
 8003f74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f000 80e0 	beq.w	8004144 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f84:	4b2f      	ldr	r3, [pc, #188]	; (8004044 <HAL_GPIO_Init+0x238>)
 8003f86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f8a:	4a2e      	ldr	r2, [pc, #184]	; (8004044 <HAL_GPIO_Init+0x238>)
 8003f8c:	f043 0302 	orr.w	r3, r3, #2
 8003f90:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003f94:	4b2b      	ldr	r3, [pc, #172]	; (8004044 <HAL_GPIO_Init+0x238>)
 8003f96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fa2:	4a29      	ldr	r2, [pc, #164]	; (8004048 <HAL_GPIO_Init+0x23c>)
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	089b      	lsrs	r3, r3, #2
 8003fa8:	3302      	adds	r3, #2
 8003faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	f003 0303 	and.w	r3, r3, #3
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	220f      	movs	r2, #15
 8003fba:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbe:	43db      	mvns	r3, r3
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a20      	ldr	r2, [pc, #128]	; (800404c <HAL_GPIO_Init+0x240>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d052      	beq.n	8004074 <HAL_GPIO_Init+0x268>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a1f      	ldr	r2, [pc, #124]	; (8004050 <HAL_GPIO_Init+0x244>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d031      	beq.n	800403a <HAL_GPIO_Init+0x22e>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a1e      	ldr	r2, [pc, #120]	; (8004054 <HAL_GPIO_Init+0x248>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d02b      	beq.n	8004036 <HAL_GPIO_Init+0x22a>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a1d      	ldr	r2, [pc, #116]	; (8004058 <HAL_GPIO_Init+0x24c>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d025      	beq.n	8004032 <HAL_GPIO_Init+0x226>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a1c      	ldr	r2, [pc, #112]	; (800405c <HAL_GPIO_Init+0x250>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d01f      	beq.n	800402e <HAL_GPIO_Init+0x222>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a1b      	ldr	r2, [pc, #108]	; (8004060 <HAL_GPIO_Init+0x254>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d019      	beq.n	800402a <HAL_GPIO_Init+0x21e>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a1a      	ldr	r2, [pc, #104]	; (8004064 <HAL_GPIO_Init+0x258>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d013      	beq.n	8004026 <HAL_GPIO_Init+0x21a>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a19      	ldr	r2, [pc, #100]	; (8004068 <HAL_GPIO_Init+0x25c>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d00d      	beq.n	8004022 <HAL_GPIO_Init+0x216>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a18      	ldr	r2, [pc, #96]	; (800406c <HAL_GPIO_Init+0x260>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d007      	beq.n	800401e <HAL_GPIO_Init+0x212>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a17      	ldr	r2, [pc, #92]	; (8004070 <HAL_GPIO_Init+0x264>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d101      	bne.n	800401a <HAL_GPIO_Init+0x20e>
 8004016:	2309      	movs	r3, #9
 8004018:	e02d      	b.n	8004076 <HAL_GPIO_Init+0x26a>
 800401a:	230a      	movs	r3, #10
 800401c:	e02b      	b.n	8004076 <HAL_GPIO_Init+0x26a>
 800401e:	2308      	movs	r3, #8
 8004020:	e029      	b.n	8004076 <HAL_GPIO_Init+0x26a>
 8004022:	2307      	movs	r3, #7
 8004024:	e027      	b.n	8004076 <HAL_GPIO_Init+0x26a>
 8004026:	2306      	movs	r3, #6
 8004028:	e025      	b.n	8004076 <HAL_GPIO_Init+0x26a>
 800402a:	2305      	movs	r3, #5
 800402c:	e023      	b.n	8004076 <HAL_GPIO_Init+0x26a>
 800402e:	2304      	movs	r3, #4
 8004030:	e021      	b.n	8004076 <HAL_GPIO_Init+0x26a>
 8004032:	2303      	movs	r3, #3
 8004034:	e01f      	b.n	8004076 <HAL_GPIO_Init+0x26a>
 8004036:	2302      	movs	r3, #2
 8004038:	e01d      	b.n	8004076 <HAL_GPIO_Init+0x26a>
 800403a:	2301      	movs	r3, #1
 800403c:	e01b      	b.n	8004076 <HAL_GPIO_Init+0x26a>
 800403e:	bf00      	nop
 8004040:	58000080 	.word	0x58000080
 8004044:	58024400 	.word	0x58024400
 8004048:	58000400 	.word	0x58000400
 800404c:	58020000 	.word	0x58020000
 8004050:	58020400 	.word	0x58020400
 8004054:	58020800 	.word	0x58020800
 8004058:	58020c00 	.word	0x58020c00
 800405c:	58021000 	.word	0x58021000
 8004060:	58021400 	.word	0x58021400
 8004064:	58021800 	.word	0x58021800
 8004068:	58021c00 	.word	0x58021c00
 800406c:	58022000 	.word	0x58022000
 8004070:	58022400 	.word	0x58022400
 8004074:	2300      	movs	r3, #0
 8004076:	69fa      	ldr	r2, [r7, #28]
 8004078:	f002 0203 	and.w	r2, r2, #3
 800407c:	0092      	lsls	r2, r2, #2
 800407e:	4093      	lsls	r3, r2
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	4313      	orrs	r3, r2
 8004084:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004086:	4938      	ldr	r1, [pc, #224]	; (8004168 <HAL_GPIO_Init+0x35c>)
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	089b      	lsrs	r3, r3, #2
 800408c:	3302      	adds	r3, #2
 800408e:	69ba      	ldr	r2, [r7, #24]
 8004090:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004094:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	43db      	mvns	r3, r3
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	4013      	ands	r3, r2
 80040a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d003      	beq.n	80040ba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80040b2:	69ba      	ldr	r2, [r7, #24]
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80040ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80040c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	43db      	mvns	r3, r3
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	4013      	ands	r3, r2
 80040d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d003      	beq.n	80040e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80040e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	43db      	mvns	r3, r3
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	4013      	ands	r3, r2
 80040fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d003      	beq.n	8004114 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800410c:	69ba      	ldr	r2, [r7, #24]
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	4313      	orrs	r3, r2
 8004112:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	69ba      	ldr	r2, [r7, #24]
 8004118:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	43db      	mvns	r3, r3
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	4013      	ands	r3, r2
 8004128:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d003      	beq.n	800413e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004136:	69ba      	ldr	r2, [r7, #24]
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	4313      	orrs	r3, r2
 800413c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	3301      	adds	r3, #1
 8004148:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	fa22 f303 	lsr.w	r3, r2, r3
 8004154:	2b00      	cmp	r3, #0
 8004156:	f47f ae63 	bne.w	8003e20 <HAL_GPIO_Init+0x14>
  }
}
 800415a:	bf00      	nop
 800415c:	bf00      	nop
 800415e:	3724      	adds	r7, #36	; 0x24
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr
 8004168:	58000400 	.word	0x58000400

0800416c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004174:	4a08      	ldr	r2, [pc, #32]	; (8004198 <HAL_HSEM_FastTake+0x2c>)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	3320      	adds	r3, #32
 800417a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800417e:	4a07      	ldr	r2, [pc, #28]	; (800419c <HAL_HSEM_FastTake+0x30>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d101      	bne.n	8004188 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8004184:	2300      	movs	r3, #0
 8004186:	e000      	b.n	800418a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
}
 800418a:	4618      	mov	r0, r3
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	58026400 	.word	0x58026400
 800419c:	80000300 	.word	0x80000300

080041a0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80041aa:	4906      	ldr	r1, [pc, #24]	; (80041c4 <HAL_HSEM_Release+0x24>)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr
 80041c4:	58026400 	.word	0x58026400

080041c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80041c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041ca:	b08f      	sub	sp, #60	; 0x3c
 80041cc:	af0a      	add	r7, sp, #40	; 0x28
 80041ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e116      	b.n	8004408 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d106      	bne.n	80041fa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f7fd fb4b 	bl	8001890 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2203      	movs	r2, #3
 80041fe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800420a:	2b00      	cmp	r3, #0
 800420c:	d102      	bne.n	8004214 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4618      	mov	r0, r3
 800421a:	f005 f83d 	bl	8009298 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	603b      	str	r3, [r7, #0]
 8004224:	687e      	ldr	r6, [r7, #4]
 8004226:	466d      	mov	r5, sp
 8004228:	f106 0410 	add.w	r4, r6, #16
 800422c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800422e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004230:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004232:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004234:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004238:	e885 0003 	stmia.w	r5, {r0, r1}
 800423c:	1d33      	adds	r3, r6, #4
 800423e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004240:	6838      	ldr	r0, [r7, #0]
 8004242:	f004 ffbb 	bl	80091bc <USB_CoreInit>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d005      	beq.n	8004258 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2202      	movs	r2, #2
 8004250:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e0d7      	b.n	8004408 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2100      	movs	r1, #0
 800425e:	4618      	mov	r0, r3
 8004260:	f005 f82b 	bl	80092ba <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004264:	2300      	movs	r3, #0
 8004266:	73fb      	strb	r3, [r7, #15]
 8004268:	e04a      	b.n	8004300 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800426a:	7bfa      	ldrb	r2, [r7, #15]
 800426c:	6879      	ldr	r1, [r7, #4]
 800426e:	4613      	mov	r3, r2
 8004270:	00db      	lsls	r3, r3, #3
 8004272:	4413      	add	r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	440b      	add	r3, r1
 8004278:	333d      	adds	r3, #61	; 0x3d
 800427a:	2201      	movs	r2, #1
 800427c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800427e:	7bfa      	ldrb	r2, [r7, #15]
 8004280:	6879      	ldr	r1, [r7, #4]
 8004282:	4613      	mov	r3, r2
 8004284:	00db      	lsls	r3, r3, #3
 8004286:	4413      	add	r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	440b      	add	r3, r1
 800428c:	333c      	adds	r3, #60	; 0x3c
 800428e:	7bfa      	ldrb	r2, [r7, #15]
 8004290:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004292:	7bfa      	ldrb	r2, [r7, #15]
 8004294:	7bfb      	ldrb	r3, [r7, #15]
 8004296:	b298      	uxth	r0, r3
 8004298:	6879      	ldr	r1, [r7, #4]
 800429a:	4613      	mov	r3, r2
 800429c:	00db      	lsls	r3, r3, #3
 800429e:	4413      	add	r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	440b      	add	r3, r1
 80042a4:	3356      	adds	r3, #86	; 0x56
 80042a6:	4602      	mov	r2, r0
 80042a8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80042aa:	7bfa      	ldrb	r2, [r7, #15]
 80042ac:	6879      	ldr	r1, [r7, #4]
 80042ae:	4613      	mov	r3, r2
 80042b0:	00db      	lsls	r3, r3, #3
 80042b2:	4413      	add	r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	440b      	add	r3, r1
 80042b8:	3340      	adds	r3, #64	; 0x40
 80042ba:	2200      	movs	r2, #0
 80042bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80042be:	7bfa      	ldrb	r2, [r7, #15]
 80042c0:	6879      	ldr	r1, [r7, #4]
 80042c2:	4613      	mov	r3, r2
 80042c4:	00db      	lsls	r3, r3, #3
 80042c6:	4413      	add	r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	440b      	add	r3, r1
 80042cc:	3344      	adds	r3, #68	; 0x44
 80042ce:	2200      	movs	r2, #0
 80042d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80042d2:	7bfa      	ldrb	r2, [r7, #15]
 80042d4:	6879      	ldr	r1, [r7, #4]
 80042d6:	4613      	mov	r3, r2
 80042d8:	00db      	lsls	r3, r3, #3
 80042da:	4413      	add	r3, r2
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	440b      	add	r3, r1
 80042e0:	3348      	adds	r3, #72	; 0x48
 80042e2:	2200      	movs	r2, #0
 80042e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80042e6:	7bfa      	ldrb	r2, [r7, #15]
 80042e8:	6879      	ldr	r1, [r7, #4]
 80042ea:	4613      	mov	r3, r2
 80042ec:	00db      	lsls	r3, r3, #3
 80042ee:	4413      	add	r3, r2
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	440b      	add	r3, r1
 80042f4:	334c      	adds	r3, #76	; 0x4c
 80042f6:	2200      	movs	r2, #0
 80042f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042fa:	7bfb      	ldrb	r3, [r7, #15]
 80042fc:	3301      	adds	r3, #1
 80042fe:	73fb      	strb	r3, [r7, #15]
 8004300:	7bfa      	ldrb	r2, [r7, #15]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	429a      	cmp	r2, r3
 8004308:	d3af      	bcc.n	800426a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800430a:	2300      	movs	r3, #0
 800430c:	73fb      	strb	r3, [r7, #15]
 800430e:	e044      	b.n	800439a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004310:	7bfa      	ldrb	r2, [r7, #15]
 8004312:	6879      	ldr	r1, [r7, #4]
 8004314:	4613      	mov	r3, r2
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	4413      	add	r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	440b      	add	r3, r1
 800431e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004322:	2200      	movs	r2, #0
 8004324:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004326:	7bfa      	ldrb	r2, [r7, #15]
 8004328:	6879      	ldr	r1, [r7, #4]
 800432a:	4613      	mov	r3, r2
 800432c:	00db      	lsls	r3, r3, #3
 800432e:	4413      	add	r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	440b      	add	r3, r1
 8004334:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004338:	7bfa      	ldrb	r2, [r7, #15]
 800433a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800433c:	7bfa      	ldrb	r2, [r7, #15]
 800433e:	6879      	ldr	r1, [r7, #4]
 8004340:	4613      	mov	r3, r2
 8004342:	00db      	lsls	r3, r3, #3
 8004344:	4413      	add	r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	440b      	add	r3, r1
 800434a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800434e:	2200      	movs	r2, #0
 8004350:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004352:	7bfa      	ldrb	r2, [r7, #15]
 8004354:	6879      	ldr	r1, [r7, #4]
 8004356:	4613      	mov	r3, r2
 8004358:	00db      	lsls	r3, r3, #3
 800435a:	4413      	add	r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	440b      	add	r3, r1
 8004360:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004364:	2200      	movs	r2, #0
 8004366:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004368:	7bfa      	ldrb	r2, [r7, #15]
 800436a:	6879      	ldr	r1, [r7, #4]
 800436c:	4613      	mov	r3, r2
 800436e:	00db      	lsls	r3, r3, #3
 8004370:	4413      	add	r3, r2
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	440b      	add	r3, r1
 8004376:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800437a:	2200      	movs	r2, #0
 800437c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800437e:	7bfa      	ldrb	r2, [r7, #15]
 8004380:	6879      	ldr	r1, [r7, #4]
 8004382:	4613      	mov	r3, r2
 8004384:	00db      	lsls	r3, r3, #3
 8004386:	4413      	add	r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	440b      	add	r3, r1
 800438c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004390:	2200      	movs	r2, #0
 8004392:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004394:	7bfb      	ldrb	r3, [r7, #15]
 8004396:	3301      	adds	r3, #1
 8004398:	73fb      	strb	r3, [r7, #15]
 800439a:	7bfa      	ldrb	r2, [r7, #15]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d3b5      	bcc.n	8004310 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	603b      	str	r3, [r7, #0]
 80043aa:	687e      	ldr	r6, [r7, #4]
 80043ac:	466d      	mov	r5, sp
 80043ae:	f106 0410 	add.w	r4, r6, #16
 80043b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80043be:	e885 0003 	stmia.w	r5, {r0, r1}
 80043c2:	1d33      	adds	r3, r6, #4
 80043c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043c6:	6838      	ldr	r0, [r7, #0]
 80043c8:	f004 ffc4 	bl	8009354 <USB_DevInit>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d005      	beq.n	80043de <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2202      	movs	r2, #2
 80043d6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e014      	b.n	8004408 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d102      	bne.n	80043fc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f80a 	bl	8004410 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4618      	mov	r0, r3
 8004402:	f005 f982 	bl	800970a <USB_DevDisconnect>

  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	3714      	adds	r7, #20
 800440c:	46bd      	mov	sp, r7
 800440e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004410 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2201      	movs	r2, #1
 8004422:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800443e:	4b05      	ldr	r3, [pc, #20]	; (8004454 <HAL_PCDEx_ActivateLPM+0x44>)
 8004440:	4313      	orrs	r3, r2
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	3714      	adds	r7, #20
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr
 8004454:	10000003 	.word	0x10000003

08004458 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004460:	4b29      	ldr	r3, [pc, #164]	; (8004508 <HAL_PWREx_ConfigSupply+0xb0>)
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	f003 0307 	and.w	r3, r3, #7
 8004468:	2b06      	cmp	r3, #6
 800446a:	d00a      	beq.n	8004482 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800446c:	4b26      	ldr	r3, [pc, #152]	; (8004508 <HAL_PWREx_ConfigSupply+0xb0>)
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	429a      	cmp	r2, r3
 8004478:	d001      	beq.n	800447e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e040      	b.n	8004500 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800447e:	2300      	movs	r3, #0
 8004480:	e03e      	b.n	8004500 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004482:	4b21      	ldr	r3, [pc, #132]	; (8004508 <HAL_PWREx_ConfigSupply+0xb0>)
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800448a:	491f      	ldr	r1, [pc, #124]	; (8004508 <HAL_PWREx_ConfigSupply+0xb0>)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4313      	orrs	r3, r2
 8004490:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004492:	f7fd fc29 	bl	8001ce8 <HAL_GetTick>
 8004496:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004498:	e009      	b.n	80044ae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800449a:	f7fd fc25 	bl	8001ce8 <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044a8:	d901      	bls.n	80044ae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e028      	b.n	8004500 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80044ae:	4b16      	ldr	r3, [pc, #88]	; (8004508 <HAL_PWREx_ConfigSupply+0xb0>)
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044ba:	d1ee      	bne.n	800449a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b1e      	cmp	r3, #30
 80044c0:	d008      	beq.n	80044d4 <HAL_PWREx_ConfigSupply+0x7c>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2b2e      	cmp	r3, #46	; 0x2e
 80044c6:	d005      	beq.n	80044d4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2b1d      	cmp	r3, #29
 80044cc:	d002      	beq.n	80044d4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2b2d      	cmp	r3, #45	; 0x2d
 80044d2:	d114      	bne.n	80044fe <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80044d4:	f7fd fc08 	bl	8001ce8 <HAL_GetTick>
 80044d8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80044da:	e009      	b.n	80044f0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80044dc:	f7fd fc04 	bl	8001ce8 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044ea:	d901      	bls.n	80044f0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e007      	b.n	8004500 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80044f0:	4b05      	ldr	r3, [pc, #20]	; (8004508 <HAL_PWREx_ConfigSupply+0xb0>)
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044fc:	d1ee      	bne.n	80044dc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3710      	adds	r7, #16
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	58024800 	.word	0x58024800

0800450c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800450c:	b480      	push	{r7}
 800450e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004510:	4b05      	ldr	r3, [pc, #20]	; (8004528 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	4a04      	ldr	r2, [pc, #16]	; (8004528 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004516:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800451a:	60d3      	str	r3, [r2, #12]
}
 800451c:	bf00      	nop
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	58024800 	.word	0x58024800

0800452c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b08c      	sub	sp, #48	; 0x30
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d102      	bne.n	8004540 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	f000 bc48 	b.w	8004dd0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0301 	and.w	r3, r3, #1
 8004548:	2b00      	cmp	r3, #0
 800454a:	f000 8088 	beq.w	800465e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800454e:	4b99      	ldr	r3, [pc, #612]	; (80047b4 <HAL_RCC_OscConfig+0x288>)
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004556:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004558:	4b96      	ldr	r3, [pc, #600]	; (80047b4 <HAL_RCC_OscConfig+0x288>)
 800455a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800455c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800455e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004560:	2b10      	cmp	r3, #16
 8004562:	d007      	beq.n	8004574 <HAL_RCC_OscConfig+0x48>
 8004564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004566:	2b18      	cmp	r3, #24
 8004568:	d111      	bne.n	800458e <HAL_RCC_OscConfig+0x62>
 800456a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456c:	f003 0303 	and.w	r3, r3, #3
 8004570:	2b02      	cmp	r3, #2
 8004572:	d10c      	bne.n	800458e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004574:	4b8f      	ldr	r3, [pc, #572]	; (80047b4 <HAL_RCC_OscConfig+0x288>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d06d      	beq.n	800465c <HAL_RCC_OscConfig+0x130>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d169      	bne.n	800465c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	f000 bc21 	b.w	8004dd0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004596:	d106      	bne.n	80045a6 <HAL_RCC_OscConfig+0x7a>
 8004598:	4b86      	ldr	r3, [pc, #536]	; (80047b4 <HAL_RCC_OscConfig+0x288>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a85      	ldr	r2, [pc, #532]	; (80047b4 <HAL_RCC_OscConfig+0x288>)
 800459e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045a2:	6013      	str	r3, [r2, #0]
 80045a4:	e02e      	b.n	8004604 <HAL_RCC_OscConfig+0xd8>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d10c      	bne.n	80045c8 <HAL_RCC_OscConfig+0x9c>
 80045ae:	4b81      	ldr	r3, [pc, #516]	; (80047b4 <HAL_RCC_OscConfig+0x288>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a80      	ldr	r2, [pc, #512]	; (80047b4 <HAL_RCC_OscConfig+0x288>)
 80045b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045b8:	6013      	str	r3, [r2, #0]
 80045ba:	4b7e      	ldr	r3, [pc, #504]	; (80047b4 <HAL_RCC_OscConfig+0x288>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a7d      	ldr	r2, [pc, #500]	; (80047b4 <HAL_RCC_OscConfig+0x288>)
 80045c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045c4:	6013      	str	r3, [r2, #0]
 80045c6:	e01d      	b.n	8004604 <HAL_RCC_OscConfig+0xd8>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045d0:	d10c      	bne.n	80045ec <HAL_RCC_OscConfig+0xc0>
 80045d2:	4b78      	ldr	r3, [pc, #480]	; (80047b4 <HAL_RCC_OscConfig+0x288>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a77      	ldr	r2, [pc, #476]	; (80047b4 <HAL_RCC_OscConfig+0x288>)
 80045d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045dc:	6013      	str	r3, [r2, #0]
 80045de:	4b75      	ldr	r3, [pc, #468]	; (80047b4 <HAL_RCC_OscConfig+0x288>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a74      	ldr	r2, [pc, #464]	; (80047b4 <HAL_RCC_OscConfig+0x288>)
 80045e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045e8:	6013      	str	r3, [r2, #0]
 80045ea:	e00b      	b.n	8004604 <HAL_RCC_OscConfig+0xd8>
 80045ec:	4b71      	ldr	r3, [pc, #452]	; (80047b4 <HAL_RCC_OscConfig+0x288>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a70      	ldr	r2, [pc, #448]	; (80047b4 <HAL_RCC_OscConfig+0x288>)
 80045f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045f6:	6013      	str	r3, [r2, #0]
 80045f8:	4b6e      	ldr	r3, [pc, #440]	; (80047b4 <HAL_RCC_OscConfig+0x288>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a6d      	ldr	r2, [pc, #436]	; (80047b4 <HAL_RCC_OscConfig+0x288>)
 80045fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004602:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d013      	beq.n	8004634 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800460c:	f7fd fb6c 	bl	8001ce8 <HAL_GetTick>
 8004610:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004612:	e008      	b.n	8004626 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004614:	f7fd fb68 	bl	8001ce8 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b64      	cmp	r3, #100	; 0x64
 8004620:	d901      	bls.n	8004626 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e3d4      	b.n	8004dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004626:	4b63      	ldr	r3, [pc, #396]	; (80047b4 <HAL_RCC_OscConfig+0x288>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d0f0      	beq.n	8004614 <HAL_RCC_OscConfig+0xe8>
 8004632:	e014      	b.n	800465e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004634:	f7fd fb58 	bl	8001ce8 <HAL_GetTick>
 8004638:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800463a:	e008      	b.n	800464e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800463c:	f7fd fb54 	bl	8001ce8 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b64      	cmp	r3, #100	; 0x64
 8004648:	d901      	bls.n	800464e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e3c0      	b.n	8004dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800464e:	4b59      	ldr	r3, [pc, #356]	; (80047b4 <HAL_RCC_OscConfig+0x288>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1f0      	bne.n	800463c <HAL_RCC_OscConfig+0x110>
 800465a:	e000      	b.n	800465e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800465c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	f000 80ca 	beq.w	8004800 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800466c:	4b51      	ldr	r3, [pc, #324]	; (80047b4 <HAL_RCC_OscConfig+0x288>)
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004674:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004676:	4b4f      	ldr	r3, [pc, #316]	; (80047b4 <HAL_RCC_OscConfig+0x288>)
 8004678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800467c:	6a3b      	ldr	r3, [r7, #32]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d007      	beq.n	8004692 <HAL_RCC_OscConfig+0x166>
 8004682:	6a3b      	ldr	r3, [r7, #32]
 8004684:	2b18      	cmp	r3, #24
 8004686:	d156      	bne.n	8004736 <HAL_RCC_OscConfig+0x20a>
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	f003 0303 	and.w	r3, r3, #3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d151      	bne.n	8004736 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004692:	4b48      	ldr	r3, [pc, #288]	; (80047b4 <HAL_RCC_OscConfig+0x288>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0304 	and.w	r3, r3, #4
 800469a:	2b00      	cmp	r3, #0
 800469c:	d005      	beq.n	80046aa <HAL_RCC_OscConfig+0x17e>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d101      	bne.n	80046aa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e392      	b.n	8004dd0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80046aa:	4b42      	ldr	r3, [pc, #264]	; (80047b4 <HAL_RCC_OscConfig+0x288>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f023 0219 	bic.w	r2, r3, #25
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	493f      	ldr	r1, [pc, #252]	; (80047b4 <HAL_RCC_OscConfig+0x288>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046bc:	f7fd fb14 	bl	8001ce8 <HAL_GetTick>
 80046c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046c2:	e008      	b.n	80046d6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046c4:	f7fd fb10 	bl	8001ce8 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e37c      	b.n	8004dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046d6:	4b37      	ldr	r3, [pc, #220]	; (80047b4 <HAL_RCC_OscConfig+0x288>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0304 	and.w	r3, r3, #4
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d0f0      	beq.n	80046c4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046e2:	f7fd fb31 	bl	8001d48 <HAL_GetREVID>
 80046e6:	4603      	mov	r3, r0
 80046e8:	f241 0203 	movw	r2, #4099	; 0x1003
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d817      	bhi.n	8004720 <HAL_RCC_OscConfig+0x1f4>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	2b40      	cmp	r3, #64	; 0x40
 80046f6:	d108      	bne.n	800470a <HAL_RCC_OscConfig+0x1de>
 80046f8:	4b2e      	ldr	r3, [pc, #184]	; (80047b4 <HAL_RCC_OscConfig+0x288>)
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004700:	4a2c      	ldr	r2, [pc, #176]	; (80047b4 <HAL_RCC_OscConfig+0x288>)
 8004702:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004706:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004708:	e07a      	b.n	8004800 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800470a:	4b2a      	ldr	r3, [pc, #168]	; (80047b4 <HAL_RCC_OscConfig+0x288>)
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	031b      	lsls	r3, r3, #12
 8004718:	4926      	ldr	r1, [pc, #152]	; (80047b4 <HAL_RCC_OscConfig+0x288>)
 800471a:	4313      	orrs	r3, r2
 800471c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800471e:	e06f      	b.n	8004800 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004720:	4b24      	ldr	r3, [pc, #144]	; (80047b4 <HAL_RCC_OscConfig+0x288>)
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	061b      	lsls	r3, r3, #24
 800472e:	4921      	ldr	r1, [pc, #132]	; (80047b4 <HAL_RCC_OscConfig+0x288>)
 8004730:	4313      	orrs	r3, r2
 8004732:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004734:	e064      	b.n	8004800 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d047      	beq.n	80047ce <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800473e:	4b1d      	ldr	r3, [pc, #116]	; (80047b4 <HAL_RCC_OscConfig+0x288>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f023 0219 	bic.w	r2, r3, #25
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	491a      	ldr	r1, [pc, #104]	; (80047b4 <HAL_RCC_OscConfig+0x288>)
 800474c:	4313      	orrs	r3, r2
 800474e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004750:	f7fd faca 	bl	8001ce8 <HAL_GetTick>
 8004754:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004758:	f7fd fac6 	bl	8001ce8 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e332      	b.n	8004dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800476a:	4b12      	ldr	r3, [pc, #72]	; (80047b4 <HAL_RCC_OscConfig+0x288>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0304 	and.w	r3, r3, #4
 8004772:	2b00      	cmp	r3, #0
 8004774:	d0f0      	beq.n	8004758 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004776:	f7fd fae7 	bl	8001d48 <HAL_GetREVID>
 800477a:	4603      	mov	r3, r0
 800477c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004780:	4293      	cmp	r3, r2
 8004782:	d819      	bhi.n	80047b8 <HAL_RCC_OscConfig+0x28c>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	2b40      	cmp	r3, #64	; 0x40
 800478a:	d108      	bne.n	800479e <HAL_RCC_OscConfig+0x272>
 800478c:	4b09      	ldr	r3, [pc, #36]	; (80047b4 <HAL_RCC_OscConfig+0x288>)
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004794:	4a07      	ldr	r2, [pc, #28]	; (80047b4 <HAL_RCC_OscConfig+0x288>)
 8004796:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800479a:	6053      	str	r3, [r2, #4]
 800479c:	e030      	b.n	8004800 <HAL_RCC_OscConfig+0x2d4>
 800479e:	4b05      	ldr	r3, [pc, #20]	; (80047b4 <HAL_RCC_OscConfig+0x288>)
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	031b      	lsls	r3, r3, #12
 80047ac:	4901      	ldr	r1, [pc, #4]	; (80047b4 <HAL_RCC_OscConfig+0x288>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	604b      	str	r3, [r1, #4]
 80047b2:	e025      	b.n	8004800 <HAL_RCC_OscConfig+0x2d4>
 80047b4:	58024400 	.word	0x58024400
 80047b8:	4b9a      	ldr	r3, [pc, #616]	; (8004a24 <HAL_RCC_OscConfig+0x4f8>)
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	061b      	lsls	r3, r3, #24
 80047c6:	4997      	ldr	r1, [pc, #604]	; (8004a24 <HAL_RCC_OscConfig+0x4f8>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	604b      	str	r3, [r1, #4]
 80047cc:	e018      	b.n	8004800 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047ce:	4b95      	ldr	r3, [pc, #596]	; (8004a24 <HAL_RCC_OscConfig+0x4f8>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a94      	ldr	r2, [pc, #592]	; (8004a24 <HAL_RCC_OscConfig+0x4f8>)
 80047d4:	f023 0301 	bic.w	r3, r3, #1
 80047d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047da:	f7fd fa85 	bl	8001ce8 <HAL_GetTick>
 80047de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80047e0:	e008      	b.n	80047f4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047e2:	f7fd fa81 	bl	8001ce8 <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d901      	bls.n	80047f4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e2ed      	b.n	8004dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80047f4:	4b8b      	ldr	r3, [pc, #556]	; (8004a24 <HAL_RCC_OscConfig+0x4f8>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0304 	and.w	r3, r3, #4
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1f0      	bne.n	80047e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0310 	and.w	r3, r3, #16
 8004808:	2b00      	cmp	r3, #0
 800480a:	f000 80a9 	beq.w	8004960 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800480e:	4b85      	ldr	r3, [pc, #532]	; (8004a24 <HAL_RCC_OscConfig+0x4f8>)
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004816:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004818:	4b82      	ldr	r3, [pc, #520]	; (8004a24 <HAL_RCC_OscConfig+0x4f8>)
 800481a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	2b08      	cmp	r3, #8
 8004822:	d007      	beq.n	8004834 <HAL_RCC_OscConfig+0x308>
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	2b18      	cmp	r3, #24
 8004828:	d13a      	bne.n	80048a0 <HAL_RCC_OscConfig+0x374>
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	f003 0303 	and.w	r3, r3, #3
 8004830:	2b01      	cmp	r3, #1
 8004832:	d135      	bne.n	80048a0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004834:	4b7b      	ldr	r3, [pc, #492]	; (8004a24 <HAL_RCC_OscConfig+0x4f8>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800483c:	2b00      	cmp	r3, #0
 800483e:	d005      	beq.n	800484c <HAL_RCC_OscConfig+0x320>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	69db      	ldr	r3, [r3, #28]
 8004844:	2b80      	cmp	r3, #128	; 0x80
 8004846:	d001      	beq.n	800484c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e2c1      	b.n	8004dd0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800484c:	f7fd fa7c 	bl	8001d48 <HAL_GetREVID>
 8004850:	4603      	mov	r3, r0
 8004852:	f241 0203 	movw	r2, #4099	; 0x1003
 8004856:	4293      	cmp	r3, r2
 8004858:	d817      	bhi.n	800488a <HAL_RCC_OscConfig+0x35e>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	2b20      	cmp	r3, #32
 8004860:	d108      	bne.n	8004874 <HAL_RCC_OscConfig+0x348>
 8004862:	4b70      	ldr	r3, [pc, #448]	; (8004a24 <HAL_RCC_OscConfig+0x4f8>)
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800486a:	4a6e      	ldr	r2, [pc, #440]	; (8004a24 <HAL_RCC_OscConfig+0x4f8>)
 800486c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004870:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004872:	e075      	b.n	8004960 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004874:	4b6b      	ldr	r3, [pc, #428]	; (8004a24 <HAL_RCC_OscConfig+0x4f8>)
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a1b      	ldr	r3, [r3, #32]
 8004880:	069b      	lsls	r3, r3, #26
 8004882:	4968      	ldr	r1, [pc, #416]	; (8004a24 <HAL_RCC_OscConfig+0x4f8>)
 8004884:	4313      	orrs	r3, r2
 8004886:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004888:	e06a      	b.n	8004960 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800488a:	4b66      	ldr	r3, [pc, #408]	; (8004a24 <HAL_RCC_OscConfig+0x4f8>)
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	061b      	lsls	r3, r3, #24
 8004898:	4962      	ldr	r1, [pc, #392]	; (8004a24 <HAL_RCC_OscConfig+0x4f8>)
 800489a:	4313      	orrs	r3, r2
 800489c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800489e:	e05f      	b.n	8004960 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	69db      	ldr	r3, [r3, #28]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d042      	beq.n	800492e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80048a8:	4b5e      	ldr	r3, [pc, #376]	; (8004a24 <HAL_RCC_OscConfig+0x4f8>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a5d      	ldr	r2, [pc, #372]	; (8004a24 <HAL_RCC_OscConfig+0x4f8>)
 80048ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b4:	f7fd fa18 	bl	8001ce8 <HAL_GetTick>
 80048b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80048ba:	e008      	b.n	80048ce <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80048bc:	f7fd fa14 	bl	8001ce8 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e280      	b.n	8004dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80048ce:	4b55      	ldr	r3, [pc, #340]	; (8004a24 <HAL_RCC_OscConfig+0x4f8>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d0f0      	beq.n	80048bc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80048da:	f7fd fa35 	bl	8001d48 <HAL_GetREVID>
 80048de:	4603      	mov	r3, r0
 80048e0:	f241 0203 	movw	r2, #4099	; 0x1003
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d817      	bhi.n	8004918 <HAL_RCC_OscConfig+0x3ec>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a1b      	ldr	r3, [r3, #32]
 80048ec:	2b20      	cmp	r3, #32
 80048ee:	d108      	bne.n	8004902 <HAL_RCC_OscConfig+0x3d6>
 80048f0:	4b4c      	ldr	r3, [pc, #304]	; (8004a24 <HAL_RCC_OscConfig+0x4f8>)
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80048f8:	4a4a      	ldr	r2, [pc, #296]	; (8004a24 <HAL_RCC_OscConfig+0x4f8>)
 80048fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048fe:	6053      	str	r3, [r2, #4]
 8004900:	e02e      	b.n	8004960 <HAL_RCC_OscConfig+0x434>
 8004902:	4b48      	ldr	r3, [pc, #288]	; (8004a24 <HAL_RCC_OscConfig+0x4f8>)
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a1b      	ldr	r3, [r3, #32]
 800490e:	069b      	lsls	r3, r3, #26
 8004910:	4944      	ldr	r1, [pc, #272]	; (8004a24 <HAL_RCC_OscConfig+0x4f8>)
 8004912:	4313      	orrs	r3, r2
 8004914:	604b      	str	r3, [r1, #4]
 8004916:	e023      	b.n	8004960 <HAL_RCC_OscConfig+0x434>
 8004918:	4b42      	ldr	r3, [pc, #264]	; (8004a24 <HAL_RCC_OscConfig+0x4f8>)
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	061b      	lsls	r3, r3, #24
 8004926:	493f      	ldr	r1, [pc, #252]	; (8004a24 <HAL_RCC_OscConfig+0x4f8>)
 8004928:	4313      	orrs	r3, r2
 800492a:	60cb      	str	r3, [r1, #12]
 800492c:	e018      	b.n	8004960 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800492e:	4b3d      	ldr	r3, [pc, #244]	; (8004a24 <HAL_RCC_OscConfig+0x4f8>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a3c      	ldr	r2, [pc, #240]	; (8004a24 <HAL_RCC_OscConfig+0x4f8>)
 8004934:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004938:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800493a:	f7fd f9d5 	bl	8001ce8 <HAL_GetTick>
 800493e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004940:	e008      	b.n	8004954 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004942:	f7fd f9d1 	bl	8001ce8 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	2b02      	cmp	r3, #2
 800494e:	d901      	bls.n	8004954 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e23d      	b.n	8004dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004954:	4b33      	ldr	r3, [pc, #204]	; (8004a24 <HAL_RCC_OscConfig+0x4f8>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1f0      	bne.n	8004942 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0308 	and.w	r3, r3, #8
 8004968:	2b00      	cmp	r3, #0
 800496a:	d036      	beq.n	80049da <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d019      	beq.n	80049a8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004974:	4b2b      	ldr	r3, [pc, #172]	; (8004a24 <HAL_RCC_OscConfig+0x4f8>)
 8004976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004978:	4a2a      	ldr	r2, [pc, #168]	; (8004a24 <HAL_RCC_OscConfig+0x4f8>)
 800497a:	f043 0301 	orr.w	r3, r3, #1
 800497e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004980:	f7fd f9b2 	bl	8001ce8 <HAL_GetTick>
 8004984:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004986:	e008      	b.n	800499a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004988:	f7fd f9ae 	bl	8001ce8 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b02      	cmp	r3, #2
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e21a      	b.n	8004dd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800499a:	4b22      	ldr	r3, [pc, #136]	; (8004a24 <HAL_RCC_OscConfig+0x4f8>)
 800499c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d0f0      	beq.n	8004988 <HAL_RCC_OscConfig+0x45c>
 80049a6:	e018      	b.n	80049da <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049a8:	4b1e      	ldr	r3, [pc, #120]	; (8004a24 <HAL_RCC_OscConfig+0x4f8>)
 80049aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049ac:	4a1d      	ldr	r2, [pc, #116]	; (8004a24 <HAL_RCC_OscConfig+0x4f8>)
 80049ae:	f023 0301 	bic.w	r3, r3, #1
 80049b2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049b4:	f7fd f998 	bl	8001ce8 <HAL_GetTick>
 80049b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80049ba:	e008      	b.n	80049ce <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049bc:	f7fd f994 	bl	8001ce8 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e200      	b.n	8004dd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80049ce:	4b15      	ldr	r3, [pc, #84]	; (8004a24 <HAL_RCC_OscConfig+0x4f8>)
 80049d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049d2:	f003 0302 	and.w	r3, r3, #2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1f0      	bne.n	80049bc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0320 	and.w	r3, r3, #32
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d039      	beq.n	8004a5a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d01c      	beq.n	8004a28 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80049ee:	4b0d      	ldr	r3, [pc, #52]	; (8004a24 <HAL_RCC_OscConfig+0x4f8>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a0c      	ldr	r2, [pc, #48]	; (8004a24 <HAL_RCC_OscConfig+0x4f8>)
 80049f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80049f8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80049fa:	f7fd f975 	bl	8001ce8 <HAL_GetTick>
 80049fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004a00:	e008      	b.n	8004a14 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a02:	f7fd f971 	bl	8001ce8 <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d901      	bls.n	8004a14 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e1dd      	b.n	8004dd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004a14:	4b03      	ldr	r3, [pc, #12]	; (8004a24 <HAL_RCC_OscConfig+0x4f8>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d0f0      	beq.n	8004a02 <HAL_RCC_OscConfig+0x4d6>
 8004a20:	e01b      	b.n	8004a5a <HAL_RCC_OscConfig+0x52e>
 8004a22:	bf00      	nop
 8004a24:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a28:	4b9b      	ldr	r3, [pc, #620]	; (8004c98 <HAL_RCC_OscConfig+0x76c>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a9a      	ldr	r2, [pc, #616]	; (8004c98 <HAL_RCC_OscConfig+0x76c>)
 8004a2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a32:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004a34:	f7fd f958 	bl	8001ce8 <HAL_GetTick>
 8004a38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004a3a:	e008      	b.n	8004a4e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a3c:	f7fd f954 	bl	8001ce8 <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d901      	bls.n	8004a4e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e1c0      	b.n	8004dd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004a4e:	4b92      	ldr	r3, [pc, #584]	; (8004c98 <HAL_RCC_OscConfig+0x76c>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1f0      	bne.n	8004a3c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0304 	and.w	r3, r3, #4
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	f000 8081 	beq.w	8004b6a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004a68:	4b8c      	ldr	r3, [pc, #560]	; (8004c9c <HAL_RCC_OscConfig+0x770>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a8b      	ldr	r2, [pc, #556]	; (8004c9c <HAL_RCC_OscConfig+0x770>)
 8004a6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a74:	f7fd f938 	bl	8001ce8 <HAL_GetTick>
 8004a78:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a7a:	e008      	b.n	8004a8e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a7c:	f7fd f934 	bl	8001ce8 <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	2b64      	cmp	r3, #100	; 0x64
 8004a88:	d901      	bls.n	8004a8e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e1a0      	b.n	8004dd0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a8e:	4b83      	ldr	r3, [pc, #524]	; (8004c9c <HAL_RCC_OscConfig+0x770>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d0f0      	beq.n	8004a7c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d106      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x584>
 8004aa2:	4b7d      	ldr	r3, [pc, #500]	; (8004c98 <HAL_RCC_OscConfig+0x76c>)
 8004aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa6:	4a7c      	ldr	r2, [pc, #496]	; (8004c98 <HAL_RCC_OscConfig+0x76c>)
 8004aa8:	f043 0301 	orr.w	r3, r3, #1
 8004aac:	6713      	str	r3, [r2, #112]	; 0x70
 8004aae:	e02d      	b.n	8004b0c <HAL_RCC_OscConfig+0x5e0>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d10c      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x5a6>
 8004ab8:	4b77      	ldr	r3, [pc, #476]	; (8004c98 <HAL_RCC_OscConfig+0x76c>)
 8004aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004abc:	4a76      	ldr	r2, [pc, #472]	; (8004c98 <HAL_RCC_OscConfig+0x76c>)
 8004abe:	f023 0301 	bic.w	r3, r3, #1
 8004ac2:	6713      	str	r3, [r2, #112]	; 0x70
 8004ac4:	4b74      	ldr	r3, [pc, #464]	; (8004c98 <HAL_RCC_OscConfig+0x76c>)
 8004ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac8:	4a73      	ldr	r2, [pc, #460]	; (8004c98 <HAL_RCC_OscConfig+0x76c>)
 8004aca:	f023 0304 	bic.w	r3, r3, #4
 8004ace:	6713      	str	r3, [r2, #112]	; 0x70
 8004ad0:	e01c      	b.n	8004b0c <HAL_RCC_OscConfig+0x5e0>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	2b05      	cmp	r3, #5
 8004ad8:	d10c      	bne.n	8004af4 <HAL_RCC_OscConfig+0x5c8>
 8004ada:	4b6f      	ldr	r3, [pc, #444]	; (8004c98 <HAL_RCC_OscConfig+0x76c>)
 8004adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ade:	4a6e      	ldr	r2, [pc, #440]	; (8004c98 <HAL_RCC_OscConfig+0x76c>)
 8004ae0:	f043 0304 	orr.w	r3, r3, #4
 8004ae4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ae6:	4b6c      	ldr	r3, [pc, #432]	; (8004c98 <HAL_RCC_OscConfig+0x76c>)
 8004ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aea:	4a6b      	ldr	r2, [pc, #428]	; (8004c98 <HAL_RCC_OscConfig+0x76c>)
 8004aec:	f043 0301 	orr.w	r3, r3, #1
 8004af0:	6713      	str	r3, [r2, #112]	; 0x70
 8004af2:	e00b      	b.n	8004b0c <HAL_RCC_OscConfig+0x5e0>
 8004af4:	4b68      	ldr	r3, [pc, #416]	; (8004c98 <HAL_RCC_OscConfig+0x76c>)
 8004af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af8:	4a67      	ldr	r2, [pc, #412]	; (8004c98 <HAL_RCC_OscConfig+0x76c>)
 8004afa:	f023 0301 	bic.w	r3, r3, #1
 8004afe:	6713      	str	r3, [r2, #112]	; 0x70
 8004b00:	4b65      	ldr	r3, [pc, #404]	; (8004c98 <HAL_RCC_OscConfig+0x76c>)
 8004b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b04:	4a64      	ldr	r2, [pc, #400]	; (8004c98 <HAL_RCC_OscConfig+0x76c>)
 8004b06:	f023 0304 	bic.w	r3, r3, #4
 8004b0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d015      	beq.n	8004b40 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b14:	f7fd f8e8 	bl	8001ce8 <HAL_GetTick>
 8004b18:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b1a:	e00a      	b.n	8004b32 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b1c:	f7fd f8e4 	bl	8001ce8 <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d901      	bls.n	8004b32 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e14e      	b.n	8004dd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b32:	4b59      	ldr	r3, [pc, #356]	; (8004c98 <HAL_RCC_OscConfig+0x76c>)
 8004b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b36:	f003 0302 	and.w	r3, r3, #2
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d0ee      	beq.n	8004b1c <HAL_RCC_OscConfig+0x5f0>
 8004b3e:	e014      	b.n	8004b6a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b40:	f7fd f8d2 	bl	8001ce8 <HAL_GetTick>
 8004b44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004b46:	e00a      	b.n	8004b5e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b48:	f7fd f8ce 	bl	8001ce8 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d901      	bls.n	8004b5e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e138      	b.n	8004dd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004b5e:	4b4e      	ldr	r3, [pc, #312]	; (8004c98 <HAL_RCC_OscConfig+0x76c>)
 8004b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1ee      	bne.n	8004b48 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	f000 812d 	beq.w	8004dce <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004b74:	4b48      	ldr	r3, [pc, #288]	; (8004c98 <HAL_RCC_OscConfig+0x76c>)
 8004b76:	691b      	ldr	r3, [r3, #16]
 8004b78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b7c:	2b18      	cmp	r3, #24
 8004b7e:	f000 80bd 	beq.w	8004cfc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	f040 809e 	bne.w	8004cc8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b8c:	4b42      	ldr	r3, [pc, #264]	; (8004c98 <HAL_RCC_OscConfig+0x76c>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a41      	ldr	r2, [pc, #260]	; (8004c98 <HAL_RCC_OscConfig+0x76c>)
 8004b92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b98:	f7fd f8a6 	bl	8001ce8 <HAL_GetTick>
 8004b9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b9e:	e008      	b.n	8004bb2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ba0:	f7fd f8a2 	bl	8001ce8 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e10e      	b.n	8004dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004bb2:	4b39      	ldr	r3, [pc, #228]	; (8004c98 <HAL_RCC_OscConfig+0x76c>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d1f0      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bbe:	4b36      	ldr	r3, [pc, #216]	; (8004c98 <HAL_RCC_OscConfig+0x76c>)
 8004bc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bc2:	4b37      	ldr	r3, [pc, #220]	; (8004ca0 <HAL_RCC_OscConfig+0x774>)
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004bce:	0112      	lsls	r2, r2, #4
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	4931      	ldr	r1, [pc, #196]	; (8004c98 <HAL_RCC_OscConfig+0x76c>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	628b      	str	r3, [r1, #40]	; 0x28
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004be6:	3b01      	subs	r3, #1
 8004be8:	025b      	lsls	r3, r3, #9
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	431a      	orrs	r2, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	041b      	lsls	r3, r3, #16
 8004bf6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004bfa:	431a      	orrs	r2, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c00:	3b01      	subs	r3, #1
 8004c02:	061b      	lsls	r3, r3, #24
 8004c04:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004c08:	4923      	ldr	r1, [pc, #140]	; (8004c98 <HAL_RCC_OscConfig+0x76c>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004c0e:	4b22      	ldr	r3, [pc, #136]	; (8004c98 <HAL_RCC_OscConfig+0x76c>)
 8004c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c12:	4a21      	ldr	r2, [pc, #132]	; (8004c98 <HAL_RCC_OscConfig+0x76c>)
 8004c14:	f023 0301 	bic.w	r3, r3, #1
 8004c18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004c1a:	4b1f      	ldr	r3, [pc, #124]	; (8004c98 <HAL_RCC_OscConfig+0x76c>)
 8004c1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c1e:	4b21      	ldr	r3, [pc, #132]	; (8004ca4 <HAL_RCC_OscConfig+0x778>)
 8004c20:	4013      	ands	r3, r2
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004c26:	00d2      	lsls	r2, r2, #3
 8004c28:	491b      	ldr	r1, [pc, #108]	; (8004c98 <HAL_RCC_OscConfig+0x76c>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004c2e:	4b1a      	ldr	r3, [pc, #104]	; (8004c98 <HAL_RCC_OscConfig+0x76c>)
 8004c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c32:	f023 020c 	bic.w	r2, r3, #12
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3a:	4917      	ldr	r1, [pc, #92]	; (8004c98 <HAL_RCC_OscConfig+0x76c>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004c40:	4b15      	ldr	r3, [pc, #84]	; (8004c98 <HAL_RCC_OscConfig+0x76c>)
 8004c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c44:	f023 0202 	bic.w	r2, r3, #2
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c4c:	4912      	ldr	r1, [pc, #72]	; (8004c98 <HAL_RCC_OscConfig+0x76c>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004c52:	4b11      	ldr	r3, [pc, #68]	; (8004c98 <HAL_RCC_OscConfig+0x76c>)
 8004c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c56:	4a10      	ldr	r2, [pc, #64]	; (8004c98 <HAL_RCC_OscConfig+0x76c>)
 8004c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c5e:	4b0e      	ldr	r3, [pc, #56]	; (8004c98 <HAL_RCC_OscConfig+0x76c>)
 8004c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c62:	4a0d      	ldr	r2, [pc, #52]	; (8004c98 <HAL_RCC_OscConfig+0x76c>)
 8004c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c68:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004c6a:	4b0b      	ldr	r3, [pc, #44]	; (8004c98 <HAL_RCC_OscConfig+0x76c>)
 8004c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6e:	4a0a      	ldr	r2, [pc, #40]	; (8004c98 <HAL_RCC_OscConfig+0x76c>)
 8004c70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c74:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004c76:	4b08      	ldr	r3, [pc, #32]	; (8004c98 <HAL_RCC_OscConfig+0x76c>)
 8004c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7a:	4a07      	ldr	r2, [pc, #28]	; (8004c98 <HAL_RCC_OscConfig+0x76c>)
 8004c7c:	f043 0301 	orr.w	r3, r3, #1
 8004c80:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c82:	4b05      	ldr	r3, [pc, #20]	; (8004c98 <HAL_RCC_OscConfig+0x76c>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a04      	ldr	r2, [pc, #16]	; (8004c98 <HAL_RCC_OscConfig+0x76c>)
 8004c88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c8e:	f7fd f82b 	bl	8001ce8 <HAL_GetTick>
 8004c92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c94:	e011      	b.n	8004cba <HAL_RCC_OscConfig+0x78e>
 8004c96:	bf00      	nop
 8004c98:	58024400 	.word	0x58024400
 8004c9c:	58024800 	.word	0x58024800
 8004ca0:	fffffc0c 	.word	0xfffffc0c
 8004ca4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ca8:	f7fd f81e 	bl	8001ce8 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d901      	bls.n	8004cba <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e08a      	b.n	8004dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004cba:	4b47      	ldr	r3, [pc, #284]	; (8004dd8 <HAL_RCC_OscConfig+0x8ac>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d0f0      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x77c>
 8004cc6:	e082      	b.n	8004dce <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cc8:	4b43      	ldr	r3, [pc, #268]	; (8004dd8 <HAL_RCC_OscConfig+0x8ac>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a42      	ldr	r2, [pc, #264]	; (8004dd8 <HAL_RCC_OscConfig+0x8ac>)
 8004cce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd4:	f7fd f808 	bl	8001ce8 <HAL_GetTick>
 8004cd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004cda:	e008      	b.n	8004cee <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cdc:	f7fd f804 	bl	8001ce8 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d901      	bls.n	8004cee <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e070      	b.n	8004dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004cee:	4b3a      	ldr	r3, [pc, #232]	; (8004dd8 <HAL_RCC_OscConfig+0x8ac>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1f0      	bne.n	8004cdc <HAL_RCC_OscConfig+0x7b0>
 8004cfa:	e068      	b.n	8004dce <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004cfc:	4b36      	ldr	r3, [pc, #216]	; (8004dd8 <HAL_RCC_OscConfig+0x8ac>)
 8004cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d00:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004d02:	4b35      	ldr	r3, [pc, #212]	; (8004dd8 <HAL_RCC_OscConfig+0x8ac>)
 8004d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d06:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d031      	beq.n	8004d74 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	f003 0203 	and.w	r2, r3, #3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d12a      	bne.n	8004d74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	091b      	lsrs	r3, r3, #4
 8004d22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d122      	bne.n	8004d74 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d38:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d11a      	bne.n	8004d74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	0a5b      	lsrs	r3, r3, #9
 8004d42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d4a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d111      	bne.n	8004d74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	0c1b      	lsrs	r3, r3, #16
 8004d54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d108      	bne.n	8004d74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	0e1b      	lsrs	r3, r3, #24
 8004d66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d6e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d001      	beq.n	8004d78 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e02b      	b.n	8004dd0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004d78:	4b17      	ldr	r3, [pc, #92]	; (8004dd8 <HAL_RCC_OscConfig+0x8ac>)
 8004d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d7c:	08db      	lsrs	r3, r3, #3
 8004d7e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d82:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d01f      	beq.n	8004dce <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004d8e:	4b12      	ldr	r3, [pc, #72]	; (8004dd8 <HAL_RCC_OscConfig+0x8ac>)
 8004d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d92:	4a11      	ldr	r2, [pc, #68]	; (8004dd8 <HAL_RCC_OscConfig+0x8ac>)
 8004d94:	f023 0301 	bic.w	r3, r3, #1
 8004d98:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d9a:	f7fc ffa5 	bl	8001ce8 <HAL_GetTick>
 8004d9e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004da0:	bf00      	nop
 8004da2:	f7fc ffa1 	bl	8001ce8 <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d0f9      	beq.n	8004da2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004dae:	4b0a      	ldr	r3, [pc, #40]	; (8004dd8 <HAL_RCC_OscConfig+0x8ac>)
 8004db0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004db2:	4b0a      	ldr	r3, [pc, #40]	; (8004ddc <HAL_RCC_OscConfig+0x8b0>)
 8004db4:	4013      	ands	r3, r2
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004dba:	00d2      	lsls	r2, r2, #3
 8004dbc:	4906      	ldr	r1, [pc, #24]	; (8004dd8 <HAL_RCC_OscConfig+0x8ac>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004dc2:	4b05      	ldr	r3, [pc, #20]	; (8004dd8 <HAL_RCC_OscConfig+0x8ac>)
 8004dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc6:	4a04      	ldr	r2, [pc, #16]	; (8004dd8 <HAL_RCC_OscConfig+0x8ac>)
 8004dc8:	f043 0301 	orr.w	r3, r3, #1
 8004dcc:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3730      	adds	r7, #48	; 0x30
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	58024400 	.word	0x58024400
 8004ddc:	ffff0007 	.word	0xffff0007

08004de0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d101      	bne.n	8004df4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e19c      	b.n	800512e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004df4:	4b8a      	ldr	r3, [pc, #552]	; (8005020 <HAL_RCC_ClockConfig+0x240>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 030f 	and.w	r3, r3, #15
 8004dfc:	683a      	ldr	r2, [r7, #0]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d910      	bls.n	8004e24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e02:	4b87      	ldr	r3, [pc, #540]	; (8005020 <HAL_RCC_ClockConfig+0x240>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f023 020f 	bic.w	r2, r3, #15
 8004e0a:	4985      	ldr	r1, [pc, #532]	; (8005020 <HAL_RCC_ClockConfig+0x240>)
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e12:	4b83      	ldr	r3, [pc, #524]	; (8005020 <HAL_RCC_ClockConfig+0x240>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 030f 	and.w	r3, r3, #15
 8004e1a:	683a      	ldr	r2, [r7, #0]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d001      	beq.n	8004e24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e184      	b.n	800512e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0304 	and.w	r3, r3, #4
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d010      	beq.n	8004e52 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	691a      	ldr	r2, [r3, #16]
 8004e34:	4b7b      	ldr	r3, [pc, #492]	; (8005024 <HAL_RCC_ClockConfig+0x244>)
 8004e36:	699b      	ldr	r3, [r3, #24]
 8004e38:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d908      	bls.n	8004e52 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004e40:	4b78      	ldr	r3, [pc, #480]	; (8005024 <HAL_RCC_ClockConfig+0x244>)
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	4975      	ldr	r1, [pc, #468]	; (8005024 <HAL_RCC_ClockConfig+0x244>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0308 	and.w	r3, r3, #8
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d010      	beq.n	8004e80 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	695a      	ldr	r2, [r3, #20]
 8004e62:	4b70      	ldr	r3, [pc, #448]	; (8005024 <HAL_RCC_ClockConfig+0x244>)
 8004e64:	69db      	ldr	r3, [r3, #28]
 8004e66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d908      	bls.n	8004e80 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004e6e:	4b6d      	ldr	r3, [pc, #436]	; (8005024 <HAL_RCC_ClockConfig+0x244>)
 8004e70:	69db      	ldr	r3, [r3, #28]
 8004e72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	496a      	ldr	r1, [pc, #424]	; (8005024 <HAL_RCC_ClockConfig+0x244>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0310 	and.w	r3, r3, #16
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d010      	beq.n	8004eae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	699a      	ldr	r2, [r3, #24]
 8004e90:	4b64      	ldr	r3, [pc, #400]	; (8005024 <HAL_RCC_ClockConfig+0x244>)
 8004e92:	69db      	ldr	r3, [r3, #28]
 8004e94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d908      	bls.n	8004eae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004e9c:	4b61      	ldr	r3, [pc, #388]	; (8005024 <HAL_RCC_ClockConfig+0x244>)
 8004e9e:	69db      	ldr	r3, [r3, #28]
 8004ea0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	495e      	ldr	r1, [pc, #376]	; (8005024 <HAL_RCC_ClockConfig+0x244>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0320 	and.w	r3, r3, #32
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d010      	beq.n	8004edc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	69da      	ldr	r2, [r3, #28]
 8004ebe:	4b59      	ldr	r3, [pc, #356]	; (8005024 <HAL_RCC_ClockConfig+0x244>)
 8004ec0:	6a1b      	ldr	r3, [r3, #32]
 8004ec2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d908      	bls.n	8004edc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004eca:	4b56      	ldr	r3, [pc, #344]	; (8005024 <HAL_RCC_ClockConfig+0x244>)
 8004ecc:	6a1b      	ldr	r3, [r3, #32]
 8004ece:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	4953      	ldr	r1, [pc, #332]	; (8005024 <HAL_RCC_ClockConfig+0x244>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0302 	and.w	r3, r3, #2
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d010      	beq.n	8004f0a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68da      	ldr	r2, [r3, #12]
 8004eec:	4b4d      	ldr	r3, [pc, #308]	; (8005024 <HAL_RCC_ClockConfig+0x244>)
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	f003 030f 	and.w	r3, r3, #15
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d908      	bls.n	8004f0a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ef8:	4b4a      	ldr	r3, [pc, #296]	; (8005024 <HAL_RCC_ClockConfig+0x244>)
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	f023 020f 	bic.w	r2, r3, #15
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	4947      	ldr	r1, [pc, #284]	; (8005024 <HAL_RCC_ClockConfig+0x244>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d055      	beq.n	8004fc2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004f16:	4b43      	ldr	r3, [pc, #268]	; (8005024 <HAL_RCC_ClockConfig+0x244>)
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	4940      	ldr	r1, [pc, #256]	; (8005024 <HAL_RCC_ClockConfig+0x244>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d107      	bne.n	8004f40 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f30:	4b3c      	ldr	r3, [pc, #240]	; (8005024 <HAL_RCC_ClockConfig+0x244>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d121      	bne.n	8004f80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e0f6      	b.n	800512e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	2b03      	cmp	r3, #3
 8004f46:	d107      	bne.n	8004f58 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f48:	4b36      	ldr	r3, [pc, #216]	; (8005024 <HAL_RCC_ClockConfig+0x244>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d115      	bne.n	8004f80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e0ea      	b.n	800512e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d107      	bne.n	8004f70 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f60:	4b30      	ldr	r3, [pc, #192]	; (8005024 <HAL_RCC_ClockConfig+0x244>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d109      	bne.n	8004f80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e0de      	b.n	800512e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f70:	4b2c      	ldr	r3, [pc, #176]	; (8005024 <HAL_RCC_ClockConfig+0x244>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0304 	and.w	r3, r3, #4
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d101      	bne.n	8004f80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e0d6      	b.n	800512e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f80:	4b28      	ldr	r3, [pc, #160]	; (8005024 <HAL_RCC_ClockConfig+0x244>)
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	f023 0207 	bic.w	r2, r3, #7
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	4925      	ldr	r1, [pc, #148]	; (8005024 <HAL_RCC_ClockConfig+0x244>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f92:	f7fc fea9 	bl	8001ce8 <HAL_GetTick>
 8004f96:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f98:	e00a      	b.n	8004fb0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f9a:	f7fc fea5 	bl	8001ce8 <HAL_GetTick>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d901      	bls.n	8004fb0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e0be      	b.n	800512e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fb0:	4b1c      	ldr	r3, [pc, #112]	; (8005024 <HAL_RCC_ClockConfig+0x244>)
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	00db      	lsls	r3, r3, #3
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d1eb      	bne.n	8004f9a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0302 	and.w	r3, r3, #2
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d010      	beq.n	8004ff0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	68da      	ldr	r2, [r3, #12]
 8004fd2:	4b14      	ldr	r3, [pc, #80]	; (8005024 <HAL_RCC_ClockConfig+0x244>)
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	f003 030f 	and.w	r3, r3, #15
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d208      	bcs.n	8004ff0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fde:	4b11      	ldr	r3, [pc, #68]	; (8005024 <HAL_RCC_ClockConfig+0x244>)
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	f023 020f 	bic.w	r2, r3, #15
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	490e      	ldr	r1, [pc, #56]	; (8005024 <HAL_RCC_ClockConfig+0x244>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ff0:	4b0b      	ldr	r3, [pc, #44]	; (8005020 <HAL_RCC_ClockConfig+0x240>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 030f 	and.w	r3, r3, #15
 8004ff8:	683a      	ldr	r2, [r7, #0]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d214      	bcs.n	8005028 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ffe:	4b08      	ldr	r3, [pc, #32]	; (8005020 <HAL_RCC_ClockConfig+0x240>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f023 020f 	bic.w	r2, r3, #15
 8005006:	4906      	ldr	r1, [pc, #24]	; (8005020 <HAL_RCC_ClockConfig+0x240>)
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	4313      	orrs	r3, r2
 800500c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800500e:	4b04      	ldr	r3, [pc, #16]	; (8005020 <HAL_RCC_ClockConfig+0x240>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 030f 	and.w	r3, r3, #15
 8005016:	683a      	ldr	r2, [r7, #0]
 8005018:	429a      	cmp	r2, r3
 800501a:	d005      	beq.n	8005028 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e086      	b.n	800512e <HAL_RCC_ClockConfig+0x34e>
 8005020:	52002000 	.word	0x52002000
 8005024:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0304 	and.w	r3, r3, #4
 8005030:	2b00      	cmp	r3, #0
 8005032:	d010      	beq.n	8005056 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	691a      	ldr	r2, [r3, #16]
 8005038:	4b3f      	ldr	r3, [pc, #252]	; (8005138 <HAL_RCC_ClockConfig+0x358>)
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005040:	429a      	cmp	r2, r3
 8005042:	d208      	bcs.n	8005056 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005044:	4b3c      	ldr	r3, [pc, #240]	; (8005138 <HAL_RCC_ClockConfig+0x358>)
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	4939      	ldr	r1, [pc, #228]	; (8005138 <HAL_RCC_ClockConfig+0x358>)
 8005052:	4313      	orrs	r3, r2
 8005054:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0308 	and.w	r3, r3, #8
 800505e:	2b00      	cmp	r3, #0
 8005060:	d010      	beq.n	8005084 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	695a      	ldr	r2, [r3, #20]
 8005066:	4b34      	ldr	r3, [pc, #208]	; (8005138 <HAL_RCC_ClockConfig+0x358>)
 8005068:	69db      	ldr	r3, [r3, #28]
 800506a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800506e:	429a      	cmp	r2, r3
 8005070:	d208      	bcs.n	8005084 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005072:	4b31      	ldr	r3, [pc, #196]	; (8005138 <HAL_RCC_ClockConfig+0x358>)
 8005074:	69db      	ldr	r3, [r3, #28]
 8005076:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	492e      	ldr	r1, [pc, #184]	; (8005138 <HAL_RCC_ClockConfig+0x358>)
 8005080:	4313      	orrs	r3, r2
 8005082:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0310 	and.w	r3, r3, #16
 800508c:	2b00      	cmp	r3, #0
 800508e:	d010      	beq.n	80050b2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	699a      	ldr	r2, [r3, #24]
 8005094:	4b28      	ldr	r3, [pc, #160]	; (8005138 <HAL_RCC_ClockConfig+0x358>)
 8005096:	69db      	ldr	r3, [r3, #28]
 8005098:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800509c:	429a      	cmp	r2, r3
 800509e:	d208      	bcs.n	80050b2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80050a0:	4b25      	ldr	r3, [pc, #148]	; (8005138 <HAL_RCC_ClockConfig+0x358>)
 80050a2:	69db      	ldr	r3, [r3, #28]
 80050a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	4922      	ldr	r1, [pc, #136]	; (8005138 <HAL_RCC_ClockConfig+0x358>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0320 	and.w	r3, r3, #32
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d010      	beq.n	80050e0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	69da      	ldr	r2, [r3, #28]
 80050c2:	4b1d      	ldr	r3, [pc, #116]	; (8005138 <HAL_RCC_ClockConfig+0x358>)
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d208      	bcs.n	80050e0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80050ce:	4b1a      	ldr	r3, [pc, #104]	; (8005138 <HAL_RCC_ClockConfig+0x358>)
 80050d0:	6a1b      	ldr	r3, [r3, #32]
 80050d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	4917      	ldr	r1, [pc, #92]	; (8005138 <HAL_RCC_ClockConfig+0x358>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80050e0:	f000 f834 	bl	800514c <HAL_RCC_GetSysClockFreq>
 80050e4:	4602      	mov	r2, r0
 80050e6:	4b14      	ldr	r3, [pc, #80]	; (8005138 <HAL_RCC_ClockConfig+0x358>)
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	0a1b      	lsrs	r3, r3, #8
 80050ec:	f003 030f 	and.w	r3, r3, #15
 80050f0:	4912      	ldr	r1, [pc, #72]	; (800513c <HAL_RCC_ClockConfig+0x35c>)
 80050f2:	5ccb      	ldrb	r3, [r1, r3]
 80050f4:	f003 031f 	and.w	r3, r3, #31
 80050f8:	fa22 f303 	lsr.w	r3, r2, r3
 80050fc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80050fe:	4b0e      	ldr	r3, [pc, #56]	; (8005138 <HAL_RCC_ClockConfig+0x358>)
 8005100:	699b      	ldr	r3, [r3, #24]
 8005102:	f003 030f 	and.w	r3, r3, #15
 8005106:	4a0d      	ldr	r2, [pc, #52]	; (800513c <HAL_RCC_ClockConfig+0x35c>)
 8005108:	5cd3      	ldrb	r3, [r2, r3]
 800510a:	f003 031f 	and.w	r3, r3, #31
 800510e:	693a      	ldr	r2, [r7, #16]
 8005110:	fa22 f303 	lsr.w	r3, r2, r3
 8005114:	4a0a      	ldr	r2, [pc, #40]	; (8005140 <HAL_RCC_ClockConfig+0x360>)
 8005116:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005118:	4a0a      	ldr	r2, [pc, #40]	; (8005144 <HAL_RCC_ClockConfig+0x364>)
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800511e:	4b0a      	ldr	r3, [pc, #40]	; (8005148 <HAL_RCC_ClockConfig+0x368>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4618      	mov	r0, r3
 8005124:	f7fc fd96 	bl	8001c54 <HAL_InitTick>
 8005128:	4603      	mov	r3, r0
 800512a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800512c:	7bfb      	ldrb	r3, [r7, #15]
}
 800512e:	4618      	mov	r0, r3
 8005130:	3718      	adds	r7, #24
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	58024400 	.word	0x58024400
 800513c:	0800de14 	.word	0x0800de14
 8005140:	24000004 	.word	0x24000004
 8005144:	24000000 	.word	0x24000000
 8005148:	24000008 	.word	0x24000008

0800514c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800514c:	b480      	push	{r7}
 800514e:	b089      	sub	sp, #36	; 0x24
 8005150:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005152:	4bb3      	ldr	r3, [pc, #716]	; (8005420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800515a:	2b18      	cmp	r3, #24
 800515c:	f200 8155 	bhi.w	800540a <HAL_RCC_GetSysClockFreq+0x2be>
 8005160:	a201      	add	r2, pc, #4	; (adr r2, 8005168 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005166:	bf00      	nop
 8005168:	080051cd 	.word	0x080051cd
 800516c:	0800540b 	.word	0x0800540b
 8005170:	0800540b 	.word	0x0800540b
 8005174:	0800540b 	.word	0x0800540b
 8005178:	0800540b 	.word	0x0800540b
 800517c:	0800540b 	.word	0x0800540b
 8005180:	0800540b 	.word	0x0800540b
 8005184:	0800540b 	.word	0x0800540b
 8005188:	080051f3 	.word	0x080051f3
 800518c:	0800540b 	.word	0x0800540b
 8005190:	0800540b 	.word	0x0800540b
 8005194:	0800540b 	.word	0x0800540b
 8005198:	0800540b 	.word	0x0800540b
 800519c:	0800540b 	.word	0x0800540b
 80051a0:	0800540b 	.word	0x0800540b
 80051a4:	0800540b 	.word	0x0800540b
 80051a8:	080051f9 	.word	0x080051f9
 80051ac:	0800540b 	.word	0x0800540b
 80051b0:	0800540b 	.word	0x0800540b
 80051b4:	0800540b 	.word	0x0800540b
 80051b8:	0800540b 	.word	0x0800540b
 80051bc:	0800540b 	.word	0x0800540b
 80051c0:	0800540b 	.word	0x0800540b
 80051c4:	0800540b 	.word	0x0800540b
 80051c8:	080051ff 	.word	0x080051ff
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051cc:	4b94      	ldr	r3, [pc, #592]	; (8005420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0320 	and.w	r3, r3, #32
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d009      	beq.n	80051ec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80051d8:	4b91      	ldr	r3, [pc, #580]	; (8005420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	08db      	lsrs	r3, r3, #3
 80051de:	f003 0303 	and.w	r3, r3, #3
 80051e2:	4a90      	ldr	r2, [pc, #576]	; (8005424 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80051e4:	fa22 f303 	lsr.w	r3, r2, r3
 80051e8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80051ea:	e111      	b.n	8005410 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80051ec:	4b8d      	ldr	r3, [pc, #564]	; (8005424 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80051ee:	61bb      	str	r3, [r7, #24]
      break;
 80051f0:	e10e      	b.n	8005410 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80051f2:	4b8d      	ldr	r3, [pc, #564]	; (8005428 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80051f4:	61bb      	str	r3, [r7, #24]
      break;
 80051f6:	e10b      	b.n	8005410 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80051f8:	4b8c      	ldr	r3, [pc, #560]	; (800542c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80051fa:	61bb      	str	r3, [r7, #24]
      break;
 80051fc:	e108      	b.n	8005410 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80051fe:	4b88      	ldr	r3, [pc, #544]	; (8005420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005202:	f003 0303 	and.w	r3, r3, #3
 8005206:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005208:	4b85      	ldr	r3, [pc, #532]	; (8005420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800520a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520c:	091b      	lsrs	r3, r3, #4
 800520e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005212:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005214:	4b82      	ldr	r3, [pc, #520]	; (8005420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005218:	f003 0301 	and.w	r3, r3, #1
 800521c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800521e:	4b80      	ldr	r3, [pc, #512]	; (8005420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005222:	08db      	lsrs	r3, r3, #3
 8005224:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	fb02 f303 	mul.w	r3, r2, r3
 800522e:	ee07 3a90 	vmov	s15, r3
 8005232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005236:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	2b00      	cmp	r3, #0
 800523e:	f000 80e1 	beq.w	8005404 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	2b02      	cmp	r3, #2
 8005246:	f000 8083 	beq.w	8005350 <HAL_RCC_GetSysClockFreq+0x204>
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	2b02      	cmp	r3, #2
 800524e:	f200 80a1 	bhi.w	8005394 <HAL_RCC_GetSysClockFreq+0x248>
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d003      	beq.n	8005260 <HAL_RCC_GetSysClockFreq+0x114>
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	2b01      	cmp	r3, #1
 800525c:	d056      	beq.n	800530c <HAL_RCC_GetSysClockFreq+0x1c0>
 800525e:	e099      	b.n	8005394 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005260:	4b6f      	ldr	r3, [pc, #444]	; (8005420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0320 	and.w	r3, r3, #32
 8005268:	2b00      	cmp	r3, #0
 800526a:	d02d      	beq.n	80052c8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800526c:	4b6c      	ldr	r3, [pc, #432]	; (8005420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	08db      	lsrs	r3, r3, #3
 8005272:	f003 0303 	and.w	r3, r3, #3
 8005276:	4a6b      	ldr	r2, [pc, #428]	; (8005424 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005278:	fa22 f303 	lsr.w	r3, r2, r3
 800527c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	ee07 3a90 	vmov	s15, r3
 8005284:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	ee07 3a90 	vmov	s15, r3
 800528e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005296:	4b62      	ldr	r3, [pc, #392]	; (8005420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800529e:	ee07 3a90 	vmov	s15, r3
 80052a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80052aa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005430 <HAL_RCC_GetSysClockFreq+0x2e4>
 80052ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052c2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80052c6:	e087      	b.n	80053d8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	ee07 3a90 	vmov	s15, r3
 80052ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052d2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005434 <HAL_RCC_GetSysClockFreq+0x2e8>
 80052d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052da:	4b51      	ldr	r3, [pc, #324]	; (8005420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052e2:	ee07 3a90 	vmov	s15, r3
 80052e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80052ee:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005430 <HAL_RCC_GetSysClockFreq+0x2e4>
 80052f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005306:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800530a:	e065      	b.n	80053d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	ee07 3a90 	vmov	s15, r3
 8005312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005316:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005438 <HAL_RCC_GetSysClockFreq+0x2ec>
 800531a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800531e:	4b40      	ldr	r3, [pc, #256]	; (8005420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005326:	ee07 3a90 	vmov	s15, r3
 800532a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800532e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005332:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005430 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800533a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800533e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800534a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800534e:	e043      	b.n	80053d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	ee07 3a90 	vmov	s15, r3
 8005356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800535a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800543c <HAL_RCC_GetSysClockFreq+0x2f0>
 800535e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005362:	4b2f      	ldr	r3, [pc, #188]	; (8005420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800536a:	ee07 3a90 	vmov	s15, r3
 800536e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005372:	ed97 6a02 	vldr	s12, [r7, #8]
 8005376:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005430 <HAL_RCC_GetSysClockFreq+0x2e4>
 800537a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800537e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005382:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800538a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800538e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005392:	e021      	b.n	80053d8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	ee07 3a90 	vmov	s15, r3
 800539a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800539e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005438 <HAL_RCC_GetSysClockFreq+0x2ec>
 80053a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053a6:	4b1e      	ldr	r3, [pc, #120]	; (8005420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ae:	ee07 3a90 	vmov	s15, r3
 80053b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80053ba:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005430 <HAL_RCC_GetSysClockFreq+0x2e4>
 80053be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80053d6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80053d8:	4b11      	ldr	r3, [pc, #68]	; (8005420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053dc:	0a5b      	lsrs	r3, r3, #9
 80053de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053e2:	3301      	adds	r3, #1
 80053e4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	ee07 3a90 	vmov	s15, r3
 80053ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80053f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80053f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053fc:	ee17 3a90 	vmov	r3, s15
 8005400:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005402:	e005      	b.n	8005410 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005404:	2300      	movs	r3, #0
 8005406:	61bb      	str	r3, [r7, #24]
      break;
 8005408:	e002      	b.n	8005410 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800540a:	4b07      	ldr	r3, [pc, #28]	; (8005428 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800540c:	61bb      	str	r3, [r7, #24]
      break;
 800540e:	bf00      	nop
  }

  return sysclockfreq;
 8005410:	69bb      	ldr	r3, [r7, #24]
}
 8005412:	4618      	mov	r0, r3
 8005414:	3724      	adds	r7, #36	; 0x24
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	58024400 	.word	0x58024400
 8005424:	03d09000 	.word	0x03d09000
 8005428:	003d0900 	.word	0x003d0900
 800542c:	007a1200 	.word	0x007a1200
 8005430:	46000000 	.word	0x46000000
 8005434:	4c742400 	.word	0x4c742400
 8005438:	4a742400 	.word	0x4a742400
 800543c:	4af42400 	.word	0x4af42400

08005440 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005446:	f7ff fe81 	bl	800514c <HAL_RCC_GetSysClockFreq>
 800544a:	4602      	mov	r2, r0
 800544c:	4b10      	ldr	r3, [pc, #64]	; (8005490 <HAL_RCC_GetHCLKFreq+0x50>)
 800544e:	699b      	ldr	r3, [r3, #24]
 8005450:	0a1b      	lsrs	r3, r3, #8
 8005452:	f003 030f 	and.w	r3, r3, #15
 8005456:	490f      	ldr	r1, [pc, #60]	; (8005494 <HAL_RCC_GetHCLKFreq+0x54>)
 8005458:	5ccb      	ldrb	r3, [r1, r3]
 800545a:	f003 031f 	and.w	r3, r3, #31
 800545e:	fa22 f303 	lsr.w	r3, r2, r3
 8005462:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005464:	4b0a      	ldr	r3, [pc, #40]	; (8005490 <HAL_RCC_GetHCLKFreq+0x50>)
 8005466:	699b      	ldr	r3, [r3, #24]
 8005468:	f003 030f 	and.w	r3, r3, #15
 800546c:	4a09      	ldr	r2, [pc, #36]	; (8005494 <HAL_RCC_GetHCLKFreq+0x54>)
 800546e:	5cd3      	ldrb	r3, [r2, r3]
 8005470:	f003 031f 	and.w	r3, r3, #31
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	fa22 f303 	lsr.w	r3, r2, r3
 800547a:	4a07      	ldr	r2, [pc, #28]	; (8005498 <HAL_RCC_GetHCLKFreq+0x58>)
 800547c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800547e:	4a07      	ldr	r2, [pc, #28]	; (800549c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005484:	4b04      	ldr	r3, [pc, #16]	; (8005498 <HAL_RCC_GetHCLKFreq+0x58>)
 8005486:	681b      	ldr	r3, [r3, #0]
}
 8005488:	4618      	mov	r0, r3
 800548a:	3708      	adds	r7, #8
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}
 8005490:	58024400 	.word	0x58024400
 8005494:	0800de14 	.word	0x0800de14
 8005498:	24000004 	.word	0x24000004
 800549c:	24000000 	.word	0x24000000

080054a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80054a4:	f7ff ffcc 	bl	8005440 <HAL_RCC_GetHCLKFreq>
 80054a8:	4602      	mov	r2, r0
 80054aa:	4b06      	ldr	r3, [pc, #24]	; (80054c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054ac:	69db      	ldr	r3, [r3, #28]
 80054ae:	091b      	lsrs	r3, r3, #4
 80054b0:	f003 0307 	and.w	r3, r3, #7
 80054b4:	4904      	ldr	r1, [pc, #16]	; (80054c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80054b6:	5ccb      	ldrb	r3, [r1, r3]
 80054b8:	f003 031f 	and.w	r3, r3, #31
 80054bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	58024400 	.word	0x58024400
 80054c8:	0800de14 	.word	0x0800de14

080054cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80054d0:	f7ff ffb6 	bl	8005440 <HAL_RCC_GetHCLKFreq>
 80054d4:	4602      	mov	r2, r0
 80054d6:	4b06      	ldr	r3, [pc, #24]	; (80054f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054d8:	69db      	ldr	r3, [r3, #28]
 80054da:	0a1b      	lsrs	r3, r3, #8
 80054dc:	f003 0307 	and.w	r3, r3, #7
 80054e0:	4904      	ldr	r1, [pc, #16]	; (80054f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80054e2:	5ccb      	ldrb	r3, [r1, r3]
 80054e4:	f003 031f 	and.w	r3, r3, #31
 80054e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	58024400 	.word	0x58024400
 80054f4:	0800de14 	.word	0x0800de14

080054f8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054fc:	b0ca      	sub	sp, #296	; 0x128
 80054fe:	af00      	add	r7, sp, #0
 8005500:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005504:	2300      	movs	r3, #0
 8005506:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800550a:	2300      	movs	r3, #0
 800550c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005510:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005518:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800551c:	2500      	movs	r5, #0
 800551e:	ea54 0305 	orrs.w	r3, r4, r5
 8005522:	d049      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005524:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005528:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800552a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800552e:	d02f      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005530:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005534:	d828      	bhi.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005536:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800553a:	d01a      	beq.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800553c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005540:	d822      	bhi.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005542:	2b00      	cmp	r3, #0
 8005544:	d003      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005546:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800554a:	d007      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800554c:	e01c      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800554e:	4bb8      	ldr	r3, [pc, #736]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005552:	4ab7      	ldr	r2, [pc, #732]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005558:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800555a:	e01a      	b.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800555c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005560:	3308      	adds	r3, #8
 8005562:	2102      	movs	r1, #2
 8005564:	4618      	mov	r0, r3
 8005566:	f002 fb61 	bl	8007c2c <RCCEx_PLL2_Config>
 800556a:	4603      	mov	r3, r0
 800556c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005570:	e00f      	b.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005572:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005576:	3328      	adds	r3, #40	; 0x28
 8005578:	2102      	movs	r1, #2
 800557a:	4618      	mov	r0, r3
 800557c:	f002 fc08 	bl	8007d90 <RCCEx_PLL3_Config>
 8005580:	4603      	mov	r3, r0
 8005582:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005586:	e004      	b.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800558e:	e000      	b.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005590:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005592:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005596:	2b00      	cmp	r3, #0
 8005598:	d10a      	bne.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800559a:	4ba5      	ldr	r3, [pc, #660]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800559c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800559e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80055a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055a8:	4aa1      	ldr	r2, [pc, #644]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055aa:	430b      	orrs	r3, r1
 80055ac:	6513      	str	r3, [r2, #80]	; 0x50
 80055ae:	e003      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80055b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80055c4:	f04f 0900 	mov.w	r9, #0
 80055c8:	ea58 0309 	orrs.w	r3, r8, r9
 80055cc:	d047      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80055ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055d4:	2b04      	cmp	r3, #4
 80055d6:	d82a      	bhi.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80055d8:	a201      	add	r2, pc, #4	; (adr r2, 80055e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80055da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055de:	bf00      	nop
 80055e0:	080055f5 	.word	0x080055f5
 80055e4:	08005603 	.word	0x08005603
 80055e8:	08005619 	.word	0x08005619
 80055ec:	08005637 	.word	0x08005637
 80055f0:	08005637 	.word	0x08005637
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055f4:	4b8e      	ldr	r3, [pc, #568]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f8:	4a8d      	ldr	r2, [pc, #564]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005600:	e01a      	b.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005602:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005606:	3308      	adds	r3, #8
 8005608:	2100      	movs	r1, #0
 800560a:	4618      	mov	r0, r3
 800560c:	f002 fb0e 	bl	8007c2c <RCCEx_PLL2_Config>
 8005610:	4603      	mov	r3, r0
 8005612:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005616:	e00f      	b.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005618:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800561c:	3328      	adds	r3, #40	; 0x28
 800561e:	2100      	movs	r1, #0
 8005620:	4618      	mov	r0, r3
 8005622:	f002 fbb5 	bl	8007d90 <RCCEx_PLL3_Config>
 8005626:	4603      	mov	r3, r0
 8005628:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800562c:	e004      	b.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005634:	e000      	b.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005636:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005638:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800563c:	2b00      	cmp	r3, #0
 800563e:	d10a      	bne.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005640:	4b7b      	ldr	r3, [pc, #492]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005644:	f023 0107 	bic.w	r1, r3, #7
 8005648:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800564c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800564e:	4a78      	ldr	r2, [pc, #480]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005650:	430b      	orrs	r3, r1
 8005652:	6513      	str	r3, [r2, #80]	; 0x50
 8005654:	e003      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005656:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800565a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800565e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005666:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800566a:	f04f 0b00 	mov.w	fp, #0
 800566e:	ea5a 030b 	orrs.w	r3, sl, fp
 8005672:	d04c      	beq.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005674:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800567a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800567e:	d030      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005680:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005684:	d829      	bhi.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005686:	2bc0      	cmp	r3, #192	; 0xc0
 8005688:	d02d      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800568a:	2bc0      	cmp	r3, #192	; 0xc0
 800568c:	d825      	bhi.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800568e:	2b80      	cmp	r3, #128	; 0x80
 8005690:	d018      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005692:	2b80      	cmp	r3, #128	; 0x80
 8005694:	d821      	bhi.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005696:	2b00      	cmp	r3, #0
 8005698:	d002      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800569a:	2b40      	cmp	r3, #64	; 0x40
 800569c:	d007      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800569e:	e01c      	b.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056a0:	4b63      	ldr	r3, [pc, #396]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a4:	4a62      	ldr	r2, [pc, #392]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80056ac:	e01c      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056b2:	3308      	adds	r3, #8
 80056b4:	2100      	movs	r1, #0
 80056b6:	4618      	mov	r0, r3
 80056b8:	f002 fab8 	bl	8007c2c <RCCEx_PLL2_Config>
 80056bc:	4603      	mov	r3, r0
 80056be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80056c2:	e011      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80056c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056c8:	3328      	adds	r3, #40	; 0x28
 80056ca:	2100      	movs	r1, #0
 80056cc:	4618      	mov	r0, r3
 80056ce:	f002 fb5f 	bl	8007d90 <RCCEx_PLL3_Config>
 80056d2:	4603      	mov	r3, r0
 80056d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80056d8:	e006      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80056e0:	e002      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80056e2:	bf00      	nop
 80056e4:	e000      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80056e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d10a      	bne.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80056f0:	4b4f      	ldr	r3, [pc, #316]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056f4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80056f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056fe:	4a4c      	ldr	r2, [pc, #304]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005700:	430b      	orrs	r3, r1
 8005702:	6513      	str	r3, [r2, #80]	; 0x50
 8005704:	e003      	b.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005706:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800570a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800570e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005716:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800571a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800571e:	2300      	movs	r3, #0
 8005720:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005724:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8005728:	460b      	mov	r3, r1
 800572a:	4313      	orrs	r3, r2
 800572c:	d053      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800572e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005732:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005736:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800573a:	d035      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800573c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005740:	d82e      	bhi.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005742:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005746:	d031      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005748:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800574c:	d828      	bhi.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800574e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005752:	d01a      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005754:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005758:	d822      	bhi.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800575a:	2b00      	cmp	r3, #0
 800575c:	d003      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800575e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005762:	d007      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005764:	e01c      	b.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005766:	4b32      	ldr	r3, [pc, #200]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576a:	4a31      	ldr	r2, [pc, #196]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800576c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005770:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005772:	e01c      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005774:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005778:	3308      	adds	r3, #8
 800577a:	2100      	movs	r1, #0
 800577c:	4618      	mov	r0, r3
 800577e:	f002 fa55 	bl	8007c2c <RCCEx_PLL2_Config>
 8005782:	4603      	mov	r3, r0
 8005784:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005788:	e011      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800578a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800578e:	3328      	adds	r3, #40	; 0x28
 8005790:	2100      	movs	r1, #0
 8005792:	4618      	mov	r0, r3
 8005794:	f002 fafc 	bl	8007d90 <RCCEx_PLL3_Config>
 8005798:	4603      	mov	r3, r0
 800579a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800579e:	e006      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80057a6:	e002      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80057a8:	bf00      	nop
 80057aa:	e000      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80057ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10b      	bne.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80057b6:	4b1e      	ldr	r3, [pc, #120]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ba:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80057be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80057c6:	4a1a      	ldr	r2, [pc, #104]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057c8:	430b      	orrs	r3, r1
 80057ca:	6593      	str	r3, [r2, #88]	; 0x58
 80057cc:	e003      	b.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80057d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057de:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80057e2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80057e6:	2300      	movs	r3, #0
 80057e8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80057ec:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80057f0:	460b      	mov	r3, r1
 80057f2:	4313      	orrs	r3, r2
 80057f4:	d056      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80057f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80057fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005802:	d038      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005804:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005808:	d831      	bhi.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800580a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800580e:	d034      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005810:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005814:	d82b      	bhi.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005816:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800581a:	d01d      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800581c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005820:	d825      	bhi.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005822:	2b00      	cmp	r3, #0
 8005824:	d006      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005826:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800582a:	d00a      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800582c:	e01f      	b.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800582e:	bf00      	nop
 8005830:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005834:	4ba2      	ldr	r3, [pc, #648]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005838:	4aa1      	ldr	r2, [pc, #644]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800583a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800583e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005840:	e01c      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005842:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005846:	3308      	adds	r3, #8
 8005848:	2100      	movs	r1, #0
 800584a:	4618      	mov	r0, r3
 800584c:	f002 f9ee 	bl	8007c2c <RCCEx_PLL2_Config>
 8005850:	4603      	mov	r3, r0
 8005852:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005856:	e011      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005858:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800585c:	3328      	adds	r3, #40	; 0x28
 800585e:	2100      	movs	r1, #0
 8005860:	4618      	mov	r0, r3
 8005862:	f002 fa95 	bl	8007d90 <RCCEx_PLL3_Config>
 8005866:	4603      	mov	r3, r0
 8005868:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800586c:	e006      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005874:	e002      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005876:	bf00      	nop
 8005878:	e000      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800587a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800587c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005880:	2b00      	cmp	r3, #0
 8005882:	d10b      	bne.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005884:	4b8e      	ldr	r3, [pc, #568]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005888:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800588c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005890:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005894:	4a8a      	ldr	r2, [pc, #552]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005896:	430b      	orrs	r3, r1
 8005898:	6593      	str	r3, [r2, #88]	; 0x58
 800589a:	e003      	b.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800589c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80058a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ac:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80058b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80058b4:	2300      	movs	r3, #0
 80058b6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80058ba:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80058be:	460b      	mov	r3, r1
 80058c0:	4313      	orrs	r3, r2
 80058c2:	d03a      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80058c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058ca:	2b30      	cmp	r3, #48	; 0x30
 80058cc:	d01f      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x416>
 80058ce:	2b30      	cmp	r3, #48	; 0x30
 80058d0:	d819      	bhi.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80058d2:	2b20      	cmp	r3, #32
 80058d4:	d00c      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80058d6:	2b20      	cmp	r3, #32
 80058d8:	d815      	bhi.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d019      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80058de:	2b10      	cmp	r3, #16
 80058e0:	d111      	bne.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058e2:	4b77      	ldr	r3, [pc, #476]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e6:	4a76      	ldr	r2, [pc, #472]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80058ee:	e011      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80058f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058f4:	3308      	adds	r3, #8
 80058f6:	2102      	movs	r1, #2
 80058f8:	4618      	mov	r0, r3
 80058fa:	f002 f997 	bl	8007c2c <RCCEx_PLL2_Config>
 80058fe:	4603      	mov	r3, r0
 8005900:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005904:	e006      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800590c:	e002      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800590e:	bf00      	nop
 8005910:	e000      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005912:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005914:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005918:	2b00      	cmp	r3, #0
 800591a:	d10a      	bne.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800591c:	4b68      	ldr	r3, [pc, #416]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800591e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005920:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005924:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800592a:	4a65      	ldr	r2, [pc, #404]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800592c:	430b      	orrs	r3, r1
 800592e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005930:	e003      	b.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005932:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005936:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800593a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800593e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005942:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005946:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800594a:	2300      	movs	r3, #0
 800594c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005950:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005954:	460b      	mov	r3, r1
 8005956:	4313      	orrs	r3, r2
 8005958:	d051      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800595a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800595e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005960:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005964:	d035      	beq.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005966:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800596a:	d82e      	bhi.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800596c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005970:	d031      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005972:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005976:	d828      	bhi.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005978:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800597c:	d01a      	beq.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800597e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005982:	d822      	bhi.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005984:	2b00      	cmp	r3, #0
 8005986:	d003      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005988:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800598c:	d007      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800598e:	e01c      	b.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005990:	4b4b      	ldr	r3, [pc, #300]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005994:	4a4a      	ldr	r2, [pc, #296]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005996:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800599a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800599c:	e01c      	b.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800599e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059a2:	3308      	adds	r3, #8
 80059a4:	2100      	movs	r1, #0
 80059a6:	4618      	mov	r0, r3
 80059a8:	f002 f940 	bl	8007c2c <RCCEx_PLL2_Config>
 80059ac:	4603      	mov	r3, r0
 80059ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80059b2:	e011      	b.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80059b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059b8:	3328      	adds	r3, #40	; 0x28
 80059ba:	2100      	movs	r1, #0
 80059bc:	4618      	mov	r0, r3
 80059be:	f002 f9e7 	bl	8007d90 <RCCEx_PLL3_Config>
 80059c2:	4603      	mov	r3, r0
 80059c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80059c8:	e006      	b.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80059d0:	e002      	b.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80059d2:	bf00      	nop
 80059d4:	e000      	b.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80059d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d10a      	bne.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80059e0:	4b37      	ldr	r3, [pc, #220]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059e4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80059e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059ee:	4a34      	ldr	r2, [pc, #208]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059f0:	430b      	orrs	r3, r1
 80059f2:	6513      	str	r3, [r2, #80]	; 0x50
 80059f4:	e003      	b.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80059fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a06:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005a0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a0e:	2300      	movs	r3, #0
 8005a10:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005a14:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005a18:	460b      	mov	r3, r1
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	d056      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a28:	d033      	beq.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005a2a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a2e:	d82c      	bhi.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005a30:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a34:	d02f      	beq.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005a36:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a3a:	d826      	bhi.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005a3c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005a40:	d02b      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005a42:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005a46:	d820      	bhi.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005a48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a4c:	d012      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005a4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a52:	d81a      	bhi.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d022      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a5c:	d115      	bne.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a62:	3308      	adds	r3, #8
 8005a64:	2101      	movs	r1, #1
 8005a66:	4618      	mov	r0, r3
 8005a68:	f002 f8e0 	bl	8007c2c <RCCEx_PLL2_Config>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005a72:	e015      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a78:	3328      	adds	r3, #40	; 0x28
 8005a7a:	2101      	movs	r1, #1
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f002 f987 	bl	8007d90 <RCCEx_PLL3_Config>
 8005a82:	4603      	mov	r3, r0
 8005a84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005a88:	e00a      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005a90:	e006      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005a92:	bf00      	nop
 8005a94:	e004      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005a96:	bf00      	nop
 8005a98:	e002      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005a9a:	bf00      	nop
 8005a9c:	e000      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005a9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005aa0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d10d      	bne.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005aa8:	4b05      	ldr	r3, [pc, #20]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aac:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ab4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ab6:	4a02      	ldr	r2, [pc, #8]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ab8:	430b      	orrs	r3, r1
 8005aba:	6513      	str	r3, [r2, #80]	; 0x50
 8005abc:	e006      	b.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005abe:	bf00      	nop
 8005ac0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ac4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ac8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad4:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005ad8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005adc:	2300      	movs	r3, #0
 8005ade:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ae2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005ae6:	460b      	mov	r3, r1
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	d055      	beq.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005af0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005af4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005af8:	d033      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005afa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005afe:	d82c      	bhi.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b04:	d02f      	beq.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b0a:	d826      	bhi.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005b0c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b10:	d02b      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005b12:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b16:	d820      	bhi.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005b18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b1c:	d012      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005b1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b22:	d81a      	bhi.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d022      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005b28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b2c:	d115      	bne.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b32:	3308      	adds	r3, #8
 8005b34:	2101      	movs	r1, #1
 8005b36:	4618      	mov	r0, r3
 8005b38:	f002 f878 	bl	8007c2c <RCCEx_PLL2_Config>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005b42:	e015      	b.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b48:	3328      	adds	r3, #40	; 0x28
 8005b4a:	2101      	movs	r1, #1
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f002 f91f 	bl	8007d90 <RCCEx_PLL3_Config>
 8005b52:	4603      	mov	r3, r0
 8005b54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005b58:	e00a      	b.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b60:	e006      	b.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005b62:	bf00      	nop
 8005b64:	e004      	b.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005b66:	bf00      	nop
 8005b68:	e002      	b.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005b6a:	bf00      	nop
 8005b6c:	e000      	b.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005b6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d10b      	bne.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005b78:	4ba3      	ldr	r3, [pc, #652]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b7c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b88:	4a9f      	ldr	r2, [pc, #636]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b8a:	430b      	orrs	r3, r1
 8005b8c:	6593      	str	r3, [r2, #88]	; 0x58
 8005b8e:	e003      	b.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b94:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005ba4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005ba8:	2300      	movs	r3, #0
 8005baa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005bae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	d037      	beq.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bc2:	d00e      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005bc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bc8:	d816      	bhi.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d018      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005bce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bd2:	d111      	bne.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bd4:	4b8c      	ldr	r3, [pc, #560]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd8:	4a8b      	ldr	r2, [pc, #556]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bde:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005be0:	e00f      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005be6:	3308      	adds	r3, #8
 8005be8:	2101      	movs	r1, #1
 8005bea:	4618      	mov	r0, r3
 8005bec:	f002 f81e 	bl	8007c2c <RCCEx_PLL2_Config>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005bf6:	e004      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005bfe:	e000      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005c00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d10a      	bne.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005c0a:	4b7f      	ldr	r3, [pc, #508]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c0e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c18:	4a7b      	ldr	r2, [pc, #492]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c1a:	430b      	orrs	r3, r1
 8005c1c:	6513      	str	r3, [r2, #80]	; 0x50
 8005c1e:	e003      	b.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c24:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c30:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005c34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c38:	2300      	movs	r3, #0
 8005c3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005c3e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005c42:	460b      	mov	r3, r1
 8005c44:	4313      	orrs	r3, r2
 8005c46:	d039      	beq.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c4e:	2b03      	cmp	r3, #3
 8005c50:	d81c      	bhi.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005c52:	a201      	add	r2, pc, #4	; (adr r2, 8005c58 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c58:	08005c95 	.word	0x08005c95
 8005c5c:	08005c69 	.word	0x08005c69
 8005c60:	08005c77 	.word	0x08005c77
 8005c64:	08005c95 	.word	0x08005c95
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c68:	4b67      	ldr	r3, [pc, #412]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c6c:	4a66      	ldr	r2, [pc, #408]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005c74:	e00f      	b.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c7a:	3308      	adds	r3, #8
 8005c7c:	2102      	movs	r1, #2
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f001 ffd4 	bl	8007c2c <RCCEx_PLL2_Config>
 8005c84:	4603      	mov	r3, r0
 8005c86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005c8a:	e004      	b.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005c92:	e000      	b.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005c94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d10a      	bne.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005c9e:	4b5a      	ldr	r3, [pc, #360]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ca2:	f023 0103 	bic.w	r1, r3, #3
 8005ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005caa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cac:	4a56      	ldr	r2, [pc, #344]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cae:	430b      	orrs	r3, r1
 8005cb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005cb2:	e003      	b.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cb4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cb8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005cc8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ccc:	2300      	movs	r3, #0
 8005cce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005cd2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	f000 809f 	beq.w	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005cde:	4b4b      	ldr	r3, [pc, #300]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a4a      	ldr	r2, [pc, #296]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005ce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ce8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005cea:	f7fb fffd 	bl	8001ce8 <HAL_GetTick>
 8005cee:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005cf2:	e00b      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cf4:	f7fb fff8 	bl	8001ce8 <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005cfe:	1ad3      	subs	r3, r2, r3
 8005d00:	2b64      	cmp	r3, #100	; 0x64
 8005d02:	d903      	bls.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005d04:	2303      	movs	r3, #3
 8005d06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005d0a:	e005      	b.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d0c:	4b3f      	ldr	r3, [pc, #252]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d0ed      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005d18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d179      	bne.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005d20:	4b39      	ldr	r3, [pc, #228]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d28:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005d2c:	4053      	eors	r3, r2
 8005d2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d015      	beq.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d36:	4b34      	ldr	r3, [pc, #208]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d3e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d42:	4b31      	ldr	r3, [pc, #196]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d46:	4a30      	ldr	r2, [pc, #192]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d4c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d4e:	4b2e      	ldr	r3, [pc, #184]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d52:	4a2d      	ldr	r2, [pc, #180]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d58:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005d5a:	4a2b      	ldr	r2, [pc, #172]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d60:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d66:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005d6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d6e:	d118      	bne.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d70:	f7fb ffba 	bl	8001ce8 <HAL_GetTick>
 8005d74:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d78:	e00d      	b.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d7a:	f7fb ffb5 	bl	8001ce8 <HAL_GetTick>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005d84:	1ad2      	subs	r2, r2, r3
 8005d86:	f241 3388 	movw	r3, #5000	; 0x1388
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d903      	bls.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005d8e:	2303      	movs	r3, #3
 8005d90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8005d94:	e005      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d96:	4b1c      	ldr	r3, [pc, #112]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d9a:	f003 0302 	and.w	r3, r3, #2
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d0eb      	beq.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005da2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d129      	bne.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005db2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005db6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dba:	d10e      	bne.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005dbc:	4b12      	ldr	r3, [pc, #72]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dc8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005dcc:	091a      	lsrs	r2, r3, #4
 8005dce:	4b10      	ldr	r3, [pc, #64]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	4a0d      	ldr	r2, [pc, #52]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dd4:	430b      	orrs	r3, r1
 8005dd6:	6113      	str	r3, [r2, #16]
 8005dd8:	e005      	b.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005dda:	4b0b      	ldr	r3, [pc, #44]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	4a0a      	ldr	r2, [pc, #40]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005de0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005de4:	6113      	str	r3, [r2, #16]
 8005de6:	4b08      	ldr	r3, [pc, #32]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005de8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005df2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005df6:	4a04      	ldr	r2, [pc, #16]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005df8:	430b      	orrs	r3, r1
 8005dfa:	6713      	str	r3, [r2, #112]	; 0x70
 8005dfc:	e00e      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005dfe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e02:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8005e06:	e009      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005e08:	58024400 	.word	0x58024400
 8005e0c:	58024800 	.word	0x58024800
 8005e10:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e18:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e24:	f002 0301 	and.w	r3, r2, #1
 8005e28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e32:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005e36:	460b      	mov	r3, r1
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	f000 8089 	beq.w	8005f50 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e44:	2b28      	cmp	r3, #40	; 0x28
 8005e46:	d86b      	bhi.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005e48:	a201      	add	r2, pc, #4	; (adr r2, 8005e50 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e4e:	bf00      	nop
 8005e50:	08005f29 	.word	0x08005f29
 8005e54:	08005f21 	.word	0x08005f21
 8005e58:	08005f21 	.word	0x08005f21
 8005e5c:	08005f21 	.word	0x08005f21
 8005e60:	08005f21 	.word	0x08005f21
 8005e64:	08005f21 	.word	0x08005f21
 8005e68:	08005f21 	.word	0x08005f21
 8005e6c:	08005f21 	.word	0x08005f21
 8005e70:	08005ef5 	.word	0x08005ef5
 8005e74:	08005f21 	.word	0x08005f21
 8005e78:	08005f21 	.word	0x08005f21
 8005e7c:	08005f21 	.word	0x08005f21
 8005e80:	08005f21 	.word	0x08005f21
 8005e84:	08005f21 	.word	0x08005f21
 8005e88:	08005f21 	.word	0x08005f21
 8005e8c:	08005f21 	.word	0x08005f21
 8005e90:	08005f0b 	.word	0x08005f0b
 8005e94:	08005f21 	.word	0x08005f21
 8005e98:	08005f21 	.word	0x08005f21
 8005e9c:	08005f21 	.word	0x08005f21
 8005ea0:	08005f21 	.word	0x08005f21
 8005ea4:	08005f21 	.word	0x08005f21
 8005ea8:	08005f21 	.word	0x08005f21
 8005eac:	08005f21 	.word	0x08005f21
 8005eb0:	08005f29 	.word	0x08005f29
 8005eb4:	08005f21 	.word	0x08005f21
 8005eb8:	08005f21 	.word	0x08005f21
 8005ebc:	08005f21 	.word	0x08005f21
 8005ec0:	08005f21 	.word	0x08005f21
 8005ec4:	08005f21 	.word	0x08005f21
 8005ec8:	08005f21 	.word	0x08005f21
 8005ecc:	08005f21 	.word	0x08005f21
 8005ed0:	08005f29 	.word	0x08005f29
 8005ed4:	08005f21 	.word	0x08005f21
 8005ed8:	08005f21 	.word	0x08005f21
 8005edc:	08005f21 	.word	0x08005f21
 8005ee0:	08005f21 	.word	0x08005f21
 8005ee4:	08005f21 	.word	0x08005f21
 8005ee8:	08005f21 	.word	0x08005f21
 8005eec:	08005f21 	.word	0x08005f21
 8005ef0:	08005f29 	.word	0x08005f29
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ef8:	3308      	adds	r3, #8
 8005efa:	2101      	movs	r1, #1
 8005efc:	4618      	mov	r0, r3
 8005efe:	f001 fe95 	bl	8007c2c <RCCEx_PLL2_Config>
 8005f02:	4603      	mov	r3, r0
 8005f04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005f08:	e00f      	b.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f0e:	3328      	adds	r3, #40	; 0x28
 8005f10:	2101      	movs	r1, #1
 8005f12:	4618      	mov	r0, r3
 8005f14:	f001 ff3c 	bl	8007d90 <RCCEx_PLL3_Config>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005f1e:	e004      	b.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005f26:	e000      	b.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005f28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d10a      	bne.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005f32:	4bbf      	ldr	r3, [pc, #764]	; (8006230 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f36:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f40:	4abb      	ldr	r2, [pc, #748]	; (8006230 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f42:	430b      	orrs	r3, r1
 8005f44:	6553      	str	r3, [r2, #84]	; 0x54
 8005f46:	e003      	b.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f4c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f58:	f002 0302 	and.w	r3, r2, #2
 8005f5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f60:	2300      	movs	r3, #0
 8005f62:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005f66:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005f6a:	460b      	mov	r3, r1
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	d041      	beq.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f76:	2b05      	cmp	r3, #5
 8005f78:	d824      	bhi.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005f7a:	a201      	add	r2, pc, #4	; (adr r2, 8005f80 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f80:	08005fcd 	.word	0x08005fcd
 8005f84:	08005f99 	.word	0x08005f99
 8005f88:	08005faf 	.word	0x08005faf
 8005f8c:	08005fcd 	.word	0x08005fcd
 8005f90:	08005fcd 	.word	0x08005fcd
 8005f94:	08005fcd 	.word	0x08005fcd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f9c:	3308      	adds	r3, #8
 8005f9e:	2101      	movs	r1, #1
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f001 fe43 	bl	8007c2c <RCCEx_PLL2_Config>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005fac:	e00f      	b.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fb2:	3328      	adds	r3, #40	; 0x28
 8005fb4:	2101      	movs	r1, #1
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f001 feea 	bl	8007d90 <RCCEx_PLL3_Config>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005fc2:	e004      	b.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005fca:	e000      	b.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005fcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d10a      	bne.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005fd6:	4b96      	ldr	r3, [pc, #600]	; (8006230 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fda:	f023 0107 	bic.w	r1, r3, #7
 8005fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fe2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fe4:	4a92      	ldr	r2, [pc, #584]	; (8006230 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005fe6:	430b      	orrs	r3, r1
 8005fe8:	6553      	str	r3, [r2, #84]	; 0x54
 8005fea:	e003      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ff0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ffc:	f002 0304 	and.w	r3, r2, #4
 8006000:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006004:	2300      	movs	r3, #0
 8006006:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800600a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800600e:	460b      	mov	r3, r1
 8006010:	4313      	orrs	r3, r2
 8006012:	d044      	beq.n	800609e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006014:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006018:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800601c:	2b05      	cmp	r3, #5
 800601e:	d825      	bhi.n	800606c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006020:	a201      	add	r2, pc, #4	; (adr r2, 8006028 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006026:	bf00      	nop
 8006028:	08006075 	.word	0x08006075
 800602c:	08006041 	.word	0x08006041
 8006030:	08006057 	.word	0x08006057
 8006034:	08006075 	.word	0x08006075
 8006038:	08006075 	.word	0x08006075
 800603c:	08006075 	.word	0x08006075
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006040:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006044:	3308      	adds	r3, #8
 8006046:	2101      	movs	r1, #1
 8006048:	4618      	mov	r0, r3
 800604a:	f001 fdef 	bl	8007c2c <RCCEx_PLL2_Config>
 800604e:	4603      	mov	r3, r0
 8006050:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006054:	e00f      	b.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006056:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800605a:	3328      	adds	r3, #40	; 0x28
 800605c:	2101      	movs	r1, #1
 800605e:	4618      	mov	r0, r3
 8006060:	f001 fe96 	bl	8007d90 <RCCEx_PLL3_Config>
 8006064:	4603      	mov	r3, r0
 8006066:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800606a:	e004      	b.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006072:	e000      	b.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006074:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006076:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800607a:	2b00      	cmp	r3, #0
 800607c:	d10b      	bne.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800607e:	4b6c      	ldr	r3, [pc, #432]	; (8006230 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006082:	f023 0107 	bic.w	r1, r3, #7
 8006086:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800608a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800608e:	4a68      	ldr	r2, [pc, #416]	; (8006230 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006090:	430b      	orrs	r3, r1
 8006092:	6593      	str	r3, [r2, #88]	; 0x58
 8006094:	e003      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006096:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800609a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800609e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a6:	f002 0320 	and.w	r3, r2, #32
 80060aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80060ae:	2300      	movs	r3, #0
 80060b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80060b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80060b8:	460b      	mov	r3, r1
 80060ba:	4313      	orrs	r3, r2
 80060bc:	d055      	beq.n	800616a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80060be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80060ca:	d033      	beq.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80060cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80060d0:	d82c      	bhi.n	800612c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80060d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060d6:	d02f      	beq.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80060d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060dc:	d826      	bhi.n	800612c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80060de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80060e2:	d02b      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80060e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80060e8:	d820      	bhi.n	800612c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80060ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060ee:	d012      	beq.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80060f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060f4:	d81a      	bhi.n	800612c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d022      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80060fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060fe:	d115      	bne.n	800612c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006100:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006104:	3308      	adds	r3, #8
 8006106:	2100      	movs	r1, #0
 8006108:	4618      	mov	r0, r3
 800610a:	f001 fd8f 	bl	8007c2c <RCCEx_PLL2_Config>
 800610e:	4603      	mov	r3, r0
 8006110:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006114:	e015      	b.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006116:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800611a:	3328      	adds	r3, #40	; 0x28
 800611c:	2102      	movs	r1, #2
 800611e:	4618      	mov	r0, r3
 8006120:	f001 fe36 	bl	8007d90 <RCCEx_PLL3_Config>
 8006124:	4603      	mov	r3, r0
 8006126:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800612a:	e00a      	b.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006132:	e006      	b.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006134:	bf00      	nop
 8006136:	e004      	b.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006138:	bf00      	nop
 800613a:	e002      	b.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800613c:	bf00      	nop
 800613e:	e000      	b.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006140:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006142:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006146:	2b00      	cmp	r3, #0
 8006148:	d10b      	bne.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800614a:	4b39      	ldr	r3, [pc, #228]	; (8006230 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800614c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800614e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006152:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800615a:	4a35      	ldr	r2, [pc, #212]	; (8006230 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800615c:	430b      	orrs	r3, r1
 800615e:	6553      	str	r3, [r2, #84]	; 0x54
 8006160:	e003      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006162:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006166:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800616a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800616e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006172:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006176:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800617a:	2300      	movs	r3, #0
 800617c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006180:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006184:	460b      	mov	r3, r1
 8006186:	4313      	orrs	r3, r2
 8006188:	d058      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800618a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800618e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006192:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006196:	d033      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006198:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800619c:	d82c      	bhi.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800619e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061a2:	d02f      	beq.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80061a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061a8:	d826      	bhi.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80061aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061ae:	d02b      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80061b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061b4:	d820      	bhi.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80061b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061ba:	d012      	beq.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80061bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061c0:	d81a      	bhi.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d022      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80061c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061ca:	d115      	bne.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061d0:	3308      	adds	r3, #8
 80061d2:	2100      	movs	r1, #0
 80061d4:	4618      	mov	r0, r3
 80061d6:	f001 fd29 	bl	8007c2c <RCCEx_PLL2_Config>
 80061da:	4603      	mov	r3, r0
 80061dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80061e0:	e015      	b.n	800620e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80061e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061e6:	3328      	adds	r3, #40	; 0x28
 80061e8:	2102      	movs	r1, #2
 80061ea:	4618      	mov	r0, r3
 80061ec:	f001 fdd0 	bl	8007d90 <RCCEx_PLL3_Config>
 80061f0:	4603      	mov	r3, r0
 80061f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80061f6:	e00a      	b.n	800620e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80061fe:	e006      	b.n	800620e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006200:	bf00      	nop
 8006202:	e004      	b.n	800620e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006204:	bf00      	nop
 8006206:	e002      	b.n	800620e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006208:	bf00      	nop
 800620a:	e000      	b.n	800620e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800620c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800620e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006212:	2b00      	cmp	r3, #0
 8006214:	d10e      	bne.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006216:	4b06      	ldr	r3, [pc, #24]	; (8006230 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800621a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800621e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006222:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006226:	4a02      	ldr	r2, [pc, #8]	; (8006230 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006228:	430b      	orrs	r3, r1
 800622a:	6593      	str	r3, [r2, #88]	; 0x58
 800622c:	e006      	b.n	800623c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800622e:	bf00      	nop
 8006230:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006234:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006238:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800623c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006244:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006248:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800624c:	2300      	movs	r3, #0
 800624e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006252:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006256:	460b      	mov	r3, r1
 8006258:	4313      	orrs	r3, r2
 800625a:	d055      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800625c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006260:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006264:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006268:	d033      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800626a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800626e:	d82c      	bhi.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006270:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006274:	d02f      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006276:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800627a:	d826      	bhi.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800627c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006280:	d02b      	beq.n	80062da <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006282:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006286:	d820      	bhi.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006288:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800628c:	d012      	beq.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800628e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006292:	d81a      	bhi.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006294:	2b00      	cmp	r3, #0
 8006296:	d022      	beq.n	80062de <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006298:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800629c:	d115      	bne.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800629e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062a2:	3308      	adds	r3, #8
 80062a4:	2100      	movs	r1, #0
 80062a6:	4618      	mov	r0, r3
 80062a8:	f001 fcc0 	bl	8007c2c <RCCEx_PLL2_Config>
 80062ac:	4603      	mov	r3, r0
 80062ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80062b2:	e015      	b.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80062b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062b8:	3328      	adds	r3, #40	; 0x28
 80062ba:	2102      	movs	r1, #2
 80062bc:	4618      	mov	r0, r3
 80062be:	f001 fd67 	bl	8007d90 <RCCEx_PLL3_Config>
 80062c2:	4603      	mov	r3, r0
 80062c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80062c8:	e00a      	b.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80062d0:	e006      	b.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80062d2:	bf00      	nop
 80062d4:	e004      	b.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80062d6:	bf00      	nop
 80062d8:	e002      	b.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80062da:	bf00      	nop
 80062dc:	e000      	b.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80062de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d10b      	bne.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80062e8:	4ba1      	ldr	r3, [pc, #644]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062ec:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80062f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80062f8:	4a9d      	ldr	r2, [pc, #628]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062fa:	430b      	orrs	r3, r1
 80062fc:	6593      	str	r3, [r2, #88]	; 0x58
 80062fe:	e003      	b.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006300:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006304:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006308:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800630c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006310:	f002 0308 	and.w	r3, r2, #8
 8006314:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006318:	2300      	movs	r3, #0
 800631a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800631e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006322:	460b      	mov	r3, r1
 8006324:	4313      	orrs	r3, r2
 8006326:	d01e      	beq.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006328:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800632c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006330:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006334:	d10c      	bne.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800633a:	3328      	adds	r3, #40	; 0x28
 800633c:	2102      	movs	r1, #2
 800633e:	4618      	mov	r0, r3
 8006340:	f001 fd26 	bl	8007d90 <RCCEx_PLL3_Config>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d002      	beq.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006350:	4b87      	ldr	r3, [pc, #540]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006354:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006358:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800635c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006360:	4a83      	ldr	r2, [pc, #524]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006362:	430b      	orrs	r3, r1
 8006364:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006366:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800636a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636e:	f002 0310 	and.w	r3, r2, #16
 8006372:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006376:	2300      	movs	r3, #0
 8006378:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800637c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006380:	460b      	mov	r3, r1
 8006382:	4313      	orrs	r3, r2
 8006384:	d01e      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006386:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800638a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800638e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006392:	d10c      	bne.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006394:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006398:	3328      	adds	r3, #40	; 0x28
 800639a:	2102      	movs	r1, #2
 800639c:	4618      	mov	r0, r3
 800639e:	f001 fcf7 	bl	8007d90 <RCCEx_PLL3_Config>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d002      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80063ae:	4b70      	ldr	r3, [pc, #448]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80063b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80063be:	4a6c      	ldr	r2, [pc, #432]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063c0:	430b      	orrs	r3, r1
 80063c2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80063c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063cc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80063d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80063d4:	2300      	movs	r3, #0
 80063d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80063da:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80063de:	460b      	mov	r3, r1
 80063e0:	4313      	orrs	r3, r2
 80063e2:	d03e      	beq.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80063e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80063ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063f0:	d022      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80063f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063f6:	d81b      	bhi.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d003      	beq.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80063fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006400:	d00b      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006402:	e015      	b.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006404:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006408:	3308      	adds	r3, #8
 800640a:	2100      	movs	r1, #0
 800640c:	4618      	mov	r0, r3
 800640e:	f001 fc0d 	bl	8007c2c <RCCEx_PLL2_Config>
 8006412:	4603      	mov	r3, r0
 8006414:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006418:	e00f      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800641a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800641e:	3328      	adds	r3, #40	; 0x28
 8006420:	2102      	movs	r1, #2
 8006422:	4618      	mov	r0, r3
 8006424:	f001 fcb4 	bl	8007d90 <RCCEx_PLL3_Config>
 8006428:	4603      	mov	r3, r0
 800642a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800642e:	e004      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006436:	e000      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006438:	bf00      	nop
    }

    if (ret == HAL_OK)
 800643a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800643e:	2b00      	cmp	r3, #0
 8006440:	d10b      	bne.n	800645a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006442:	4b4b      	ldr	r3, [pc, #300]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006446:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800644a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800644e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006452:	4a47      	ldr	r2, [pc, #284]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006454:	430b      	orrs	r3, r1
 8006456:	6593      	str	r3, [r2, #88]	; 0x58
 8006458:	e003      	b.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800645a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800645e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006462:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800646e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006470:	2300      	movs	r3, #0
 8006472:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006474:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006478:	460b      	mov	r3, r1
 800647a:	4313      	orrs	r3, r2
 800647c:	d03b      	beq.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800647e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006486:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800648a:	d01f      	beq.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800648c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006490:	d818      	bhi.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006492:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006496:	d003      	beq.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006498:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800649c:	d007      	beq.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800649e:	e011      	b.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064a0:	4b33      	ldr	r3, [pc, #204]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a4:	4a32      	ldr	r2, [pc, #200]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80064ac:	e00f      	b.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064b2:	3328      	adds	r3, #40	; 0x28
 80064b4:	2101      	movs	r1, #1
 80064b6:	4618      	mov	r0, r3
 80064b8:	f001 fc6a 	bl	8007d90 <RCCEx_PLL3_Config>
 80064bc:	4603      	mov	r3, r0
 80064be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80064c2:	e004      	b.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80064ca:	e000      	b.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80064cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d10b      	bne.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80064d6:	4b26      	ldr	r3, [pc, #152]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064da:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80064de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064e6:	4a22      	ldr	r2, [pc, #136]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064e8:	430b      	orrs	r3, r1
 80064ea:	6553      	str	r3, [r2, #84]	; 0x54
 80064ec:	e003      	b.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80064f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fe:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006502:	673b      	str	r3, [r7, #112]	; 0x70
 8006504:	2300      	movs	r3, #0
 8006506:	677b      	str	r3, [r7, #116]	; 0x74
 8006508:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800650c:	460b      	mov	r3, r1
 800650e:	4313      	orrs	r3, r2
 8006510:	d034      	beq.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006512:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006518:	2b00      	cmp	r3, #0
 800651a:	d003      	beq.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800651c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006520:	d007      	beq.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006522:	e011      	b.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006524:	4b12      	ldr	r3, [pc, #72]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006528:	4a11      	ldr	r2, [pc, #68]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800652a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800652e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006530:	e00e      	b.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006532:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006536:	3308      	adds	r3, #8
 8006538:	2102      	movs	r1, #2
 800653a:	4618      	mov	r0, r3
 800653c:	f001 fb76 	bl	8007c2c <RCCEx_PLL2_Config>
 8006540:	4603      	mov	r3, r0
 8006542:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006546:	e003      	b.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800654e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006550:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006554:	2b00      	cmp	r3, #0
 8006556:	d10d      	bne.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006558:	4b05      	ldr	r3, [pc, #20]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800655a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800655c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006560:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006566:	4a02      	ldr	r2, [pc, #8]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006568:	430b      	orrs	r3, r1
 800656a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800656c:	e006      	b.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800656e:	bf00      	nop
 8006570:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006574:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006578:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800657c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006584:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006588:	66bb      	str	r3, [r7, #104]	; 0x68
 800658a:	2300      	movs	r3, #0
 800658c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800658e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006592:	460b      	mov	r3, r1
 8006594:	4313      	orrs	r3, r2
 8006596:	d00c      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006598:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800659c:	3328      	adds	r3, #40	; 0x28
 800659e:	2102      	movs	r1, #2
 80065a0:	4618      	mov	r0, r3
 80065a2:	f001 fbf5 	bl	8007d90 <RCCEx_PLL3_Config>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d002      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80065b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ba:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80065be:	663b      	str	r3, [r7, #96]	; 0x60
 80065c0:	2300      	movs	r3, #0
 80065c2:	667b      	str	r3, [r7, #100]	; 0x64
 80065c4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80065c8:	460b      	mov	r3, r1
 80065ca:	4313      	orrs	r3, r2
 80065cc:	d038      	beq.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80065ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065da:	d018      	beq.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80065dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065e0:	d811      	bhi.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80065e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065e6:	d014      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80065e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065ec:	d80b      	bhi.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d011      	beq.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80065f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065f6:	d106      	bne.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065f8:	4bc3      	ldr	r3, [pc, #780]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fc:	4ac2      	ldr	r2, [pc, #776]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006602:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006604:	e008      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800660c:	e004      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800660e:	bf00      	nop
 8006610:	e002      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006612:	bf00      	nop
 8006614:	e000      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006616:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006618:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800661c:	2b00      	cmp	r3, #0
 800661e:	d10b      	bne.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006620:	4bb9      	ldr	r3, [pc, #740]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006624:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006628:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800662c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006630:	4ab5      	ldr	r2, [pc, #724]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006632:	430b      	orrs	r3, r1
 8006634:	6553      	str	r3, [r2, #84]	; 0x54
 8006636:	e003      	b.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006638:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800663c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006640:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006648:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800664c:	65bb      	str	r3, [r7, #88]	; 0x58
 800664e:	2300      	movs	r3, #0
 8006650:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006652:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006656:	460b      	mov	r3, r1
 8006658:	4313      	orrs	r3, r2
 800665a:	d009      	beq.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800665c:	4baa      	ldr	r3, [pc, #680]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800665e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006660:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006664:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800666a:	4aa7      	ldr	r2, [pc, #668]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800666c:	430b      	orrs	r3, r1
 800666e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006670:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006678:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800667c:	653b      	str	r3, [r7, #80]	; 0x50
 800667e:	2300      	movs	r3, #0
 8006680:	657b      	str	r3, [r7, #84]	; 0x54
 8006682:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006686:	460b      	mov	r3, r1
 8006688:	4313      	orrs	r3, r2
 800668a:	d00a      	beq.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800668c:	4b9e      	ldr	r3, [pc, #632]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8006694:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006698:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800669c:	4a9a      	ldr	r2, [pc, #616]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800669e:	430b      	orrs	r3, r1
 80066a0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80066a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066aa:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80066ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80066b0:	2300      	movs	r3, #0
 80066b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066b4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80066b8:	460b      	mov	r3, r1
 80066ba:	4313      	orrs	r3, r2
 80066bc:	d009      	beq.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80066be:	4b92      	ldr	r3, [pc, #584]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066c2:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80066c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066cc:	4a8e      	ldr	r2, [pc, #568]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066ce:	430b      	orrs	r3, r1
 80066d0:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80066d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066da:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80066de:	643b      	str	r3, [r7, #64]	; 0x40
 80066e0:	2300      	movs	r3, #0
 80066e2:	647b      	str	r3, [r7, #68]	; 0x44
 80066e4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80066e8:	460b      	mov	r3, r1
 80066ea:	4313      	orrs	r3, r2
 80066ec:	d00e      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80066ee:	4b86      	ldr	r3, [pc, #536]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	4a85      	ldr	r2, [pc, #532]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80066f8:	6113      	str	r3, [r2, #16]
 80066fa:	4b83      	ldr	r3, [pc, #524]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066fc:	6919      	ldr	r1, [r3, #16]
 80066fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006702:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006706:	4a80      	ldr	r2, [pc, #512]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006708:	430b      	orrs	r3, r1
 800670a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800670c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006714:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006718:	63bb      	str	r3, [r7, #56]	; 0x38
 800671a:	2300      	movs	r3, #0
 800671c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800671e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006722:	460b      	mov	r3, r1
 8006724:	4313      	orrs	r3, r2
 8006726:	d009      	beq.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006728:	4b77      	ldr	r3, [pc, #476]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800672a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800672c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006730:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006736:	4a74      	ldr	r2, [pc, #464]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006738:	430b      	orrs	r3, r1
 800673a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800673c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006744:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006748:	633b      	str	r3, [r7, #48]	; 0x30
 800674a:	2300      	movs	r3, #0
 800674c:	637b      	str	r3, [r7, #52]	; 0x34
 800674e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006752:	460b      	mov	r3, r1
 8006754:	4313      	orrs	r3, r2
 8006756:	d00a      	beq.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006758:	4b6b      	ldr	r3, [pc, #428]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800675a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800675c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006760:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006764:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006768:	4a67      	ldr	r2, [pc, #412]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800676a:	430b      	orrs	r3, r1
 800676c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800676e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006776:	2100      	movs	r1, #0
 8006778:	62b9      	str	r1, [r7, #40]	; 0x28
 800677a:	f003 0301 	and.w	r3, r3, #1
 800677e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006780:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006784:	460b      	mov	r3, r1
 8006786:	4313      	orrs	r3, r2
 8006788:	d011      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800678a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800678e:	3308      	adds	r3, #8
 8006790:	2100      	movs	r1, #0
 8006792:	4618      	mov	r0, r3
 8006794:	f001 fa4a 	bl	8007c2c <RCCEx_PLL2_Config>
 8006798:	4603      	mov	r3, r0
 800679a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800679e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d003      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80067ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b6:	2100      	movs	r1, #0
 80067b8:	6239      	str	r1, [r7, #32]
 80067ba:	f003 0302 	and.w	r3, r3, #2
 80067be:	627b      	str	r3, [r7, #36]	; 0x24
 80067c0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80067c4:	460b      	mov	r3, r1
 80067c6:	4313      	orrs	r3, r2
 80067c8:	d011      	beq.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80067ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067ce:	3308      	adds	r3, #8
 80067d0:	2101      	movs	r1, #1
 80067d2:	4618      	mov	r0, r3
 80067d4:	f001 fa2a 	bl	8007c2c <RCCEx_PLL2_Config>
 80067d8:	4603      	mov	r3, r0
 80067da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80067de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d003      	beq.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80067ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f6:	2100      	movs	r1, #0
 80067f8:	61b9      	str	r1, [r7, #24]
 80067fa:	f003 0304 	and.w	r3, r3, #4
 80067fe:	61fb      	str	r3, [r7, #28]
 8006800:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006804:	460b      	mov	r3, r1
 8006806:	4313      	orrs	r3, r2
 8006808:	d011      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800680a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800680e:	3308      	adds	r3, #8
 8006810:	2102      	movs	r1, #2
 8006812:	4618      	mov	r0, r3
 8006814:	f001 fa0a 	bl	8007c2c <RCCEx_PLL2_Config>
 8006818:	4603      	mov	r3, r0
 800681a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800681e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006822:	2b00      	cmp	r3, #0
 8006824:	d003      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006826:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800682a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800682e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006836:	2100      	movs	r1, #0
 8006838:	6139      	str	r1, [r7, #16]
 800683a:	f003 0308 	and.w	r3, r3, #8
 800683e:	617b      	str	r3, [r7, #20]
 8006840:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006844:	460b      	mov	r3, r1
 8006846:	4313      	orrs	r3, r2
 8006848:	d011      	beq.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800684a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800684e:	3328      	adds	r3, #40	; 0x28
 8006850:	2100      	movs	r1, #0
 8006852:	4618      	mov	r0, r3
 8006854:	f001 fa9c 	bl	8007d90 <RCCEx_PLL3_Config>
 8006858:	4603      	mov	r3, r0
 800685a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800685e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006862:	2b00      	cmp	r3, #0
 8006864:	d003      	beq.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006866:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800686a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800686e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006876:	2100      	movs	r1, #0
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	f003 0310 	and.w	r3, r3, #16
 800687e:	60fb      	str	r3, [r7, #12]
 8006880:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006884:	460b      	mov	r3, r1
 8006886:	4313      	orrs	r3, r2
 8006888:	d011      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800688a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800688e:	3328      	adds	r3, #40	; 0x28
 8006890:	2101      	movs	r1, #1
 8006892:	4618      	mov	r0, r3
 8006894:	f001 fa7c 	bl	8007d90 <RCCEx_PLL3_Config>
 8006898:	4603      	mov	r3, r0
 800689a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800689e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d003      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80068ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b6:	2100      	movs	r1, #0
 80068b8:	6039      	str	r1, [r7, #0]
 80068ba:	f003 0320 	and.w	r3, r3, #32
 80068be:	607b      	str	r3, [r7, #4]
 80068c0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80068c4:	460b      	mov	r3, r1
 80068c6:	4313      	orrs	r3, r2
 80068c8:	d011      	beq.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80068ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068ce:	3328      	adds	r3, #40	; 0x28
 80068d0:	2102      	movs	r1, #2
 80068d2:	4618      	mov	r0, r3
 80068d4:	f001 fa5c 	bl	8007d90 <RCCEx_PLL3_Config>
 80068d8:	4603      	mov	r3, r0
 80068da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80068de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d003      	beq.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80068ee:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d101      	bne.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80068f6:	2300      	movs	r3, #0
 80068f8:	e000      	b.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8006902:	46bd      	mov	sp, r7
 8006904:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006908:	58024400 	.word	0x58024400

0800690c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b090      	sub	sp, #64	; 0x40
 8006910:	af00      	add	r7, sp, #0
 8006912:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006916:	e9d7 2300 	ldrd	r2, r3, [r7]
 800691a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800691e:	430b      	orrs	r3, r1
 8006920:	f040 8094 	bne.w	8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006924:	4b9e      	ldr	r3, [pc, #632]	; (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006928:	f003 0307 	and.w	r3, r3, #7
 800692c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800692e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006930:	2b04      	cmp	r3, #4
 8006932:	f200 8087 	bhi.w	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006936:	a201      	add	r2, pc, #4	; (adr r2, 800693c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800693c:	08006951 	.word	0x08006951
 8006940:	08006979 	.word	0x08006979
 8006944:	080069a1 	.word	0x080069a1
 8006948:	08006a3d 	.word	0x08006a3d
 800694c:	080069c9 	.word	0x080069c9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006950:	4b93      	ldr	r3, [pc, #588]	; (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006958:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800695c:	d108      	bne.n	8006970 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800695e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006962:	4618      	mov	r0, r3
 8006964:	f001 f810 	bl	8007988 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800696a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800696c:	f000 bd45 	b.w	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006970:	2300      	movs	r3, #0
 8006972:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006974:	f000 bd41 	b.w	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006978:	4b89      	ldr	r3, [pc, #548]	; (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006980:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006984:	d108      	bne.n	8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006986:	f107 0318 	add.w	r3, r7, #24
 800698a:	4618      	mov	r0, r3
 800698c:	f000 fd54 	bl	8007438 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006994:	f000 bd31 	b.w	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006998:	2300      	movs	r3, #0
 800699a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800699c:	f000 bd2d 	b.w	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80069a0:	4b7f      	ldr	r3, [pc, #508]	; (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069ac:	d108      	bne.n	80069c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069ae:	f107 030c 	add.w	r3, r7, #12
 80069b2:	4618      	mov	r0, r3
 80069b4:	f000 fe94 	bl	80076e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069bc:	f000 bd1d 	b.w	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069c0:	2300      	movs	r3, #0
 80069c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069c4:	f000 bd19 	b.w	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80069c8:	4b75      	ldr	r3, [pc, #468]	; (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80069ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80069d0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80069d2:	4b73      	ldr	r3, [pc, #460]	; (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 0304 	and.w	r3, r3, #4
 80069da:	2b04      	cmp	r3, #4
 80069dc:	d10c      	bne.n	80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80069de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d109      	bne.n	80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80069e4:	4b6e      	ldr	r3, [pc, #440]	; (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	08db      	lsrs	r3, r3, #3
 80069ea:	f003 0303 	and.w	r3, r3, #3
 80069ee:	4a6d      	ldr	r2, [pc, #436]	; (8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80069f0:	fa22 f303 	lsr.w	r3, r2, r3
 80069f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069f6:	e01f      	b.n	8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80069f8:	4b69      	ldr	r3, [pc, #420]	; (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a04:	d106      	bne.n	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a0c:	d102      	bne.n	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006a0e:	4b66      	ldr	r3, [pc, #408]	; (8006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006a10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a12:	e011      	b.n	8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006a14:	4b62      	ldr	r3, [pc, #392]	; (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a20:	d106      	bne.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a28:	d102      	bne.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006a2a:	4b60      	ldr	r3, [pc, #384]	; (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a2e:	e003      	b.n	8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006a30:	2300      	movs	r3, #0
 8006a32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006a34:	f000 bce1 	b.w	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006a38:	f000 bcdf 	b.w	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006a3c:	4b5c      	ldr	r3, [pc, #368]	; (8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a40:	f000 bcdb 	b.w	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006a44:	2300      	movs	r3, #0
 8006a46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a48:	f000 bcd7 	b.w	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006a4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a50:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8006a54:	430b      	orrs	r3, r1
 8006a56:	f040 80ad 	bne.w	8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006a5a:	4b51      	ldr	r3, [pc, #324]	; (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a5e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006a62:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a6a:	d056      	beq.n	8006b1a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a72:	f200 8090 	bhi.w	8006b96 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a78:	2bc0      	cmp	r3, #192	; 0xc0
 8006a7a:	f000 8088 	beq.w	8006b8e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8006a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a80:	2bc0      	cmp	r3, #192	; 0xc0
 8006a82:	f200 8088 	bhi.w	8006b96 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a88:	2b80      	cmp	r3, #128	; 0x80
 8006a8a:	d032      	beq.n	8006af2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8e:	2b80      	cmp	r3, #128	; 0x80
 8006a90:	f200 8081 	bhi.w	8006b96 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d003      	beq.n	8006aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8006a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9c:	2b40      	cmp	r3, #64	; 0x40
 8006a9e:	d014      	beq.n	8006aca <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006aa0:	e079      	b.n	8006b96 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006aa2:	4b3f      	ldr	r3, [pc, #252]	; (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aaa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006aae:	d108      	bne.n	8006ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ab0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f000 ff67 	bl	8007988 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006abc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006abe:	f000 bc9c 	b.w	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ac6:	f000 bc98 	b.w	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006aca:	4b35      	ldr	r3, [pc, #212]	; (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ad2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ad6:	d108      	bne.n	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ad8:	f107 0318 	add.w	r3, r7, #24
 8006adc:	4618      	mov	r0, r3
 8006ade:	f000 fcab 	bl	8007438 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006ae2:	69bb      	ldr	r3, [r7, #24]
 8006ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ae6:	f000 bc88 	b.w	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006aea:	2300      	movs	r3, #0
 8006aec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006aee:	f000 bc84 	b.w	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006af2:	4b2b      	ldr	r3, [pc, #172]	; (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006afa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006afe:	d108      	bne.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b00:	f107 030c 	add.w	r3, r7, #12
 8006b04:	4618      	mov	r0, r3
 8006b06:	f000 fdeb 	bl	80076e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b0e:	f000 bc74 	b.w	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b12:	2300      	movs	r3, #0
 8006b14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b16:	f000 bc70 	b.w	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006b1a:	4b21      	ldr	r3, [pc, #132]	; (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b1e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006b22:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006b24:	4b1e      	ldr	r3, [pc, #120]	; (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f003 0304 	and.w	r3, r3, #4
 8006b2c:	2b04      	cmp	r3, #4
 8006b2e:	d10c      	bne.n	8006b4a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d109      	bne.n	8006b4a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b36:	4b1a      	ldr	r3, [pc, #104]	; (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	08db      	lsrs	r3, r3, #3
 8006b3c:	f003 0303 	and.w	r3, r3, #3
 8006b40:	4a18      	ldr	r2, [pc, #96]	; (8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006b42:	fa22 f303 	lsr.w	r3, r2, r3
 8006b46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b48:	e01f      	b.n	8006b8a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006b4a:	4b15      	ldr	r3, [pc, #84]	; (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b56:	d106      	bne.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b5e:	d102      	bne.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006b60:	4b11      	ldr	r3, [pc, #68]	; (8006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006b62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b64:	e011      	b.n	8006b8a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006b66:	4b0e      	ldr	r3, [pc, #56]	; (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b72:	d106      	bne.n	8006b82 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8006b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b7a:	d102      	bne.n	8006b82 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006b7c:	4b0b      	ldr	r3, [pc, #44]	; (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b80:	e003      	b.n	8006b8a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006b82:	2300      	movs	r3, #0
 8006b84:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006b86:	f000 bc38 	b.w	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006b8a:	f000 bc36 	b.w	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006b8e:	4b08      	ldr	r3, [pc, #32]	; (8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006b90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b92:	f000 bc32 	b.w	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006b96:	2300      	movs	r3, #0
 8006b98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b9a:	f000 bc2e 	b.w	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006b9e:	bf00      	nop
 8006ba0:	58024400 	.word	0x58024400
 8006ba4:	03d09000 	.word	0x03d09000
 8006ba8:	003d0900 	.word	0x003d0900
 8006bac:	007a1200 	.word	0x007a1200
 8006bb0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006bb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bb8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8006bbc:	430b      	orrs	r3, r1
 8006bbe:	f040 809c 	bne.w	8006cfa <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006bc2:	4b9e      	ldr	r3, [pc, #632]	; (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bc6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006bca:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006bd2:	d054      	beq.n	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006bda:	f200 808b 	bhi.w	8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006be4:	f000 8083 	beq.w	8006cee <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bea:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006bee:	f200 8081 	bhi.w	8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bf8:	d02f      	beq.n	8006c5a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8006bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c00:	d878      	bhi.n	8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d004      	beq.n	8006c12 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c0e:	d012      	beq.n	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006c10:	e070      	b.n	8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c12:	4b8a      	ldr	r3, [pc, #552]	; (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c1e:	d107      	bne.n	8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c24:	4618      	mov	r0, r3
 8006c26:	f000 feaf 	bl	8007988 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c2e:	e3e4      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c30:	2300      	movs	r3, #0
 8006c32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c34:	e3e1      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c36:	4b81      	ldr	r3, [pc, #516]	; (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c42:	d107      	bne.n	8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c44:	f107 0318 	add.w	r3, r7, #24
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f000 fbf5 	bl	8007438 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c52:	e3d2      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c54:	2300      	movs	r3, #0
 8006c56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c58:	e3cf      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006c5a:	4b78      	ldr	r3, [pc, #480]	; (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c66:	d107      	bne.n	8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c68:	f107 030c 	add.w	r3, r7, #12
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f000 fd37 	bl	80076e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c76:	e3c0      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c7c:	e3bd      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006c7e:	4b6f      	ldr	r3, [pc, #444]	; (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006c86:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006c88:	4b6c      	ldr	r3, [pc, #432]	; (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 0304 	and.w	r3, r3, #4
 8006c90:	2b04      	cmp	r3, #4
 8006c92:	d10c      	bne.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d109      	bne.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c9a:	4b68      	ldr	r3, [pc, #416]	; (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	08db      	lsrs	r3, r3, #3
 8006ca0:	f003 0303 	and.w	r3, r3, #3
 8006ca4:	4a66      	ldr	r2, [pc, #408]	; (8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8006caa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cac:	e01e      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006cae:	4b63      	ldr	r3, [pc, #396]	; (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cba:	d106      	bne.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cc2:	d102      	bne.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006cc4:	4b5f      	ldr	r3, [pc, #380]	; (8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cc8:	e010      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006cca:	4b5c      	ldr	r3, [pc, #368]	; (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cd6:	d106      	bne.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cde:	d102      	bne.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006ce0:	4b59      	ldr	r3, [pc, #356]	; (8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ce4:	e002      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006cea:	e386      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006cec:	e385      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006cee:	4b57      	ldr	r3, [pc, #348]	; (8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cf2:	e382      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cf8:	e37f      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006cfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cfe:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8006d02:	430b      	orrs	r3, r1
 8006d04:	f040 80a7 	bne.w	8006e56 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006d08:	4b4c      	ldr	r3, [pc, #304]	; (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d0c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006d10:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006d18:	d055      	beq.n	8006dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8006d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006d20:	f200 8096 	bhi.w	8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d26:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006d2a:	f000 8084 	beq.w	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d30:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006d34:	f200 808c 	bhi.w	8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d3e:	d030      	beq.n	8006da2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8006d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d46:	f200 8083 	bhi.w	8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d004      	beq.n	8006d5a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d52:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d56:	d012      	beq.n	8006d7e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8006d58:	e07a      	b.n	8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006d5a:	4b38      	ldr	r3, [pc, #224]	; (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d66:	d107      	bne.n	8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f000 fe0b 	bl	8007988 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d74:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d76:	e340      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d7c:	e33d      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006d7e:	4b2f      	ldr	r3, [pc, #188]	; (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d8a:	d107      	bne.n	8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d8c:	f107 0318 	add.w	r3, r7, #24
 8006d90:	4618      	mov	r0, r3
 8006d92:	f000 fb51 	bl	8007438 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d9a:	e32e      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006da0:	e32b      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006da2:	4b26      	ldr	r3, [pc, #152]	; (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006daa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006dae:	d107      	bne.n	8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006db0:	f107 030c 	add.w	r3, r7, #12
 8006db4:	4618      	mov	r0, r3
 8006db6:	f000 fc93 	bl	80076e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006dbe:	e31c      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006dc4:	e319      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006dc6:	4b1d      	ldr	r3, [pc, #116]	; (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006dce:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006dd0:	4b1a      	ldr	r3, [pc, #104]	; (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 0304 	and.w	r3, r3, #4
 8006dd8:	2b04      	cmp	r3, #4
 8006dda:	d10c      	bne.n	8006df6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d109      	bne.n	8006df6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006de2:	4b16      	ldr	r3, [pc, #88]	; (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	08db      	lsrs	r3, r3, #3
 8006de8:	f003 0303 	and.w	r3, r3, #3
 8006dec:	4a14      	ldr	r2, [pc, #80]	; (8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006dee:	fa22 f303 	lsr.w	r3, r2, r3
 8006df2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006df4:	e01e      	b.n	8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006df6:	4b11      	ldr	r3, [pc, #68]	; (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e02:	d106      	bne.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e0a:	d102      	bne.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006e0c:	4b0d      	ldr	r3, [pc, #52]	; (8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e10:	e010      	b.n	8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e12:	4b0a      	ldr	r3, [pc, #40]	; (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e1e:	d106      	bne.n	8006e2e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8006e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e26:	d102      	bne.n	8006e2e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006e28:	4b07      	ldr	r3, [pc, #28]	; (8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e2c:	e002      	b.n	8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006e32:	e2e2      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006e34:	e2e1      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006e36:	4b05      	ldr	r3, [pc, #20]	; (8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006e38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e3a:	e2de      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006e3c:	58024400 	.word	0x58024400
 8006e40:	03d09000 	.word	0x03d09000
 8006e44:	003d0900 	.word	0x003d0900
 8006e48:	007a1200 	.word	0x007a1200
 8006e4c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8006e50:	2300      	movs	r3, #0
 8006e52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e54:	e2d1      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006e56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e5a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8006e5e:	430b      	orrs	r3, r1
 8006e60:	f040 809c 	bne.w	8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006e64:	4b93      	ldr	r3, [pc, #588]	; (80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e68:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006e6c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e74:	d054      	beq.n	8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e7c:	f200 808b 	bhi.w	8006f96 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e82:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e86:	f000 8083 	beq.w	8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e8c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e90:	f200 8081 	bhi.w	8006f96 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e9a:	d02f      	beq.n	8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ea2:	d878      	bhi.n	8006f96 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d004      	beq.n	8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eb0:	d012      	beq.n	8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006eb2:	e070      	b.n	8006f96 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006eb4:	4b7f      	ldr	r3, [pc, #508]	; (80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ebc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ec0:	d107      	bne.n	8006ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ec2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f000 fd5e 	bl	8007988 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ece:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ed0:	e293      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ed6:	e290      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ed8:	4b76      	ldr	r3, [pc, #472]	; (80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ee0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ee4:	d107      	bne.n	8006ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ee6:	f107 0318 	add.w	r3, r7, #24
 8006eea:	4618      	mov	r0, r3
 8006eec:	f000 faa4 	bl	8007438 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006ef0:	69bb      	ldr	r3, [r7, #24]
 8006ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ef4:	e281      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006efa:	e27e      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006efc:	4b6d      	ldr	r3, [pc, #436]	; (80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f08:	d107      	bne.n	8006f1a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f0a:	f107 030c 	add.w	r3, r7, #12
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f000 fbe6 	bl	80076e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f18:	e26f      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f1e:	e26c      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006f20:	4b64      	ldr	r3, [pc, #400]	; (80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006f28:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006f2a:	4b62      	ldr	r3, [pc, #392]	; (80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f003 0304 	and.w	r3, r3, #4
 8006f32:	2b04      	cmp	r3, #4
 8006f34:	d10c      	bne.n	8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d109      	bne.n	8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f3c:	4b5d      	ldr	r3, [pc, #372]	; (80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	08db      	lsrs	r3, r3, #3
 8006f42:	f003 0303 	and.w	r3, r3, #3
 8006f46:	4a5c      	ldr	r2, [pc, #368]	; (80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006f48:	fa22 f303 	lsr.w	r3, r2, r3
 8006f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f4e:	e01e      	b.n	8006f8e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006f50:	4b58      	ldr	r3, [pc, #352]	; (80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f5c:	d106      	bne.n	8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f64:	d102      	bne.n	8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006f66:	4b55      	ldr	r3, [pc, #340]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006f68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f6a:	e010      	b.n	8006f8e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006f6c:	4b51      	ldr	r3, [pc, #324]	; (80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f78:	d106      	bne.n	8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f80:	d102      	bne.n	8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006f82:	4b4f      	ldr	r3, [pc, #316]	; (80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006f84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f86:	e002      	b.n	8006f8e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006f8c:	e235      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006f8e:	e234      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006f90:	4b4c      	ldr	r3, [pc, #304]	; (80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006f92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f94:	e231      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006f96:	2300      	movs	r3, #0
 8006f98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f9a:	e22e      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006f9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fa0:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8006fa4:	430b      	orrs	r3, r1
 8006fa6:	f040 808f 	bne.w	80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006faa:	4b42      	ldr	r3, [pc, #264]	; (80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006fac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fae:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006fb2:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8006fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006fba:	d06b      	beq.n	8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fbe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006fc2:	d874      	bhi.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006fca:	d056      	beq.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006fd2:	d86c      	bhi.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006fda:	d03b      	beq.n	8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fde:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006fe2:	d864      	bhi.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fea:	d021      	beq.n	8007030 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ff2:	d85c      	bhi.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d004      	beq.n	8007004 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007000:	d004      	beq.n	800700c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8007002:	e054      	b.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007004:	f7fe fa4c 	bl	80054a0 <HAL_RCC_GetPCLK1Freq>
 8007008:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800700a:	e1f6      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800700c:	4b29      	ldr	r3, [pc, #164]	; (80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007014:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007018:	d107      	bne.n	800702a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800701a:	f107 0318 	add.w	r3, r7, #24
 800701e:	4618      	mov	r0, r3
 8007020:	f000 fa0a 	bl	8007438 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007024:	69fb      	ldr	r3, [r7, #28]
 8007026:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007028:	e1e7      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800702a:	2300      	movs	r3, #0
 800702c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800702e:	e1e4      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007030:	4b20      	ldr	r3, [pc, #128]	; (80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007038:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800703c:	d107      	bne.n	800704e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800703e:	f107 030c 	add.w	r3, r7, #12
 8007042:	4618      	mov	r0, r3
 8007044:	f000 fb4c 	bl	80076e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800704c:	e1d5      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800704e:	2300      	movs	r3, #0
 8007050:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007052:	e1d2      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007054:	4b17      	ldr	r3, [pc, #92]	; (80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 0304 	and.w	r3, r3, #4
 800705c:	2b04      	cmp	r3, #4
 800705e:	d109      	bne.n	8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007060:	4b14      	ldr	r3, [pc, #80]	; (80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	08db      	lsrs	r3, r3, #3
 8007066:	f003 0303 	and.w	r3, r3, #3
 800706a:	4a13      	ldr	r2, [pc, #76]	; (80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800706c:	fa22 f303 	lsr.w	r3, r2, r3
 8007070:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007072:	e1c2      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007074:	2300      	movs	r3, #0
 8007076:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007078:	e1bf      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800707a:	4b0e      	ldr	r3, [pc, #56]	; (80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007082:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007086:	d102      	bne.n	800708e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007088:	4b0c      	ldr	r3, [pc, #48]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800708a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800708c:	e1b5      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800708e:	2300      	movs	r3, #0
 8007090:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007092:	e1b2      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007094:	4b07      	ldr	r3, [pc, #28]	; (80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800709c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070a0:	d102      	bne.n	80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80070a2:	4b07      	ldr	r3, [pc, #28]	; (80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80070a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070a6:	e1a8      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070a8:	2300      	movs	r3, #0
 80070aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070ac:	e1a5      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80070ae:	2300      	movs	r3, #0
 80070b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070b2:	e1a2      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80070b4:	58024400 	.word	0x58024400
 80070b8:	03d09000 	.word	0x03d09000
 80070bc:	003d0900 	.word	0x003d0900
 80070c0:	007a1200 	.word	0x007a1200
 80070c4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80070c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070cc:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80070d0:	430b      	orrs	r3, r1
 80070d2:	d173      	bne.n	80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80070d4:	4b9c      	ldr	r3, [pc, #624]	; (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80070dc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80070de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070e4:	d02f      	beq.n	8007146 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80070e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070ec:	d863      	bhi.n	80071b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80070ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d004      	beq.n	80070fe <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80070f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070fa:	d012      	beq.n	8007122 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80070fc:	e05b      	b.n	80071b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070fe:	4b92      	ldr	r3, [pc, #584]	; (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007106:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800710a:	d107      	bne.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800710c:	f107 0318 	add.w	r3, r7, #24
 8007110:	4618      	mov	r0, r3
 8007112:	f000 f991 	bl	8007438 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800711a:	e16e      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800711c:	2300      	movs	r3, #0
 800711e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007120:	e16b      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007122:	4b89      	ldr	r3, [pc, #548]	; (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800712a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800712e:	d107      	bne.n	8007140 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007130:	f107 030c 	add.w	r3, r7, #12
 8007134:	4618      	mov	r0, r3
 8007136:	f000 fad3 	bl	80076e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800713e:	e15c      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007140:	2300      	movs	r3, #0
 8007142:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007144:	e159      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007146:	4b80      	ldr	r3, [pc, #512]	; (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800714a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800714e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007150:	4b7d      	ldr	r3, [pc, #500]	; (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f003 0304 	and.w	r3, r3, #4
 8007158:	2b04      	cmp	r3, #4
 800715a:	d10c      	bne.n	8007176 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800715c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800715e:	2b00      	cmp	r3, #0
 8007160:	d109      	bne.n	8007176 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007162:	4b79      	ldr	r3, [pc, #484]	; (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	08db      	lsrs	r3, r3, #3
 8007168:	f003 0303 	and.w	r3, r3, #3
 800716c:	4a77      	ldr	r2, [pc, #476]	; (800734c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800716e:	fa22 f303 	lsr.w	r3, r2, r3
 8007172:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007174:	e01e      	b.n	80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007176:	4b74      	ldr	r3, [pc, #464]	; (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800717e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007182:	d106      	bne.n	8007192 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8007184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007186:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800718a:	d102      	bne.n	8007192 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800718c:	4b70      	ldr	r3, [pc, #448]	; (8007350 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800718e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007190:	e010      	b.n	80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007192:	4b6d      	ldr	r3, [pc, #436]	; (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800719a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800719e:	d106      	bne.n	80071ae <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80071a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071a6:	d102      	bne.n	80071ae <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80071a8:	4b6a      	ldr	r3, [pc, #424]	; (8007354 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80071aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071ac:	e002      	b.n	80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80071ae:	2300      	movs	r3, #0
 80071b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80071b2:	e122      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80071b4:	e121      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80071b6:	2300      	movs	r3, #0
 80071b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071ba:	e11e      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80071bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071c0:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80071c4:	430b      	orrs	r3, r1
 80071c6:	d133      	bne.n	8007230 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80071c8:	4b5f      	ldr	r3, [pc, #380]	; (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80071ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071d0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80071d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d004      	beq.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80071d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071de:	d012      	beq.n	8007206 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80071e0:	e023      	b.n	800722a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80071e2:	4b59      	ldr	r3, [pc, #356]	; (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071ee:	d107      	bne.n	8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80071f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071f4:	4618      	mov	r0, r3
 80071f6:	f000 fbc7 	bl	8007988 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80071fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071fe:	e0fc      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007200:	2300      	movs	r3, #0
 8007202:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007204:	e0f9      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007206:	4b50      	ldr	r3, [pc, #320]	; (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800720e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007212:	d107      	bne.n	8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007214:	f107 0318 	add.w	r3, r7, #24
 8007218:	4618      	mov	r0, r3
 800721a:	f000 f90d 	bl	8007438 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800721e:	6a3b      	ldr	r3, [r7, #32]
 8007220:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007222:	e0ea      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007224:	2300      	movs	r3, #0
 8007226:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007228:	e0e7      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800722a:	2300      	movs	r3, #0
 800722c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800722e:	e0e4      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007230:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007234:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8007238:	430b      	orrs	r3, r1
 800723a:	f040 808d 	bne.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800723e:	4b42      	ldr	r3, [pc, #264]	; (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007242:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007246:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800724a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800724e:	d06b      	beq.n	8007328 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007252:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007256:	d874      	bhi.n	8007342 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800725a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800725e:	d056      	beq.n	800730e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007266:	d86c      	bhi.n	8007342 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800726a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800726e:	d03b      	beq.n	80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007272:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007276:	d864      	bhi.n	8007342 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800727a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800727e:	d021      	beq.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007282:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007286:	d85c      	bhi.n	8007342 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800728a:	2b00      	cmp	r3, #0
 800728c:	d004      	beq.n	8007298 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800728e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007290:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007294:	d004      	beq.n	80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8007296:	e054      	b.n	8007342 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007298:	f000 f8b8 	bl	800740c <HAL_RCCEx_GetD3PCLK1Freq>
 800729c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800729e:	e0ac      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80072a0:	4b29      	ldr	r3, [pc, #164]	; (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80072ac:	d107      	bne.n	80072be <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072ae:	f107 0318 	add.w	r3, r7, #24
 80072b2:	4618      	mov	r0, r3
 80072b4:	f000 f8c0 	bl	8007438 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80072b8:	69fb      	ldr	r3, [r7, #28]
 80072ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072bc:	e09d      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072be:	2300      	movs	r3, #0
 80072c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072c2:	e09a      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80072c4:	4b20      	ldr	r3, [pc, #128]	; (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072d0:	d107      	bne.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072d2:	f107 030c 	add.w	r3, r7, #12
 80072d6:	4618      	mov	r0, r3
 80072d8:	f000 fa02 	bl	80076e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072e0:	e08b      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072e2:	2300      	movs	r3, #0
 80072e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072e6:	e088      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80072e8:	4b17      	ldr	r3, [pc, #92]	; (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f003 0304 	and.w	r3, r3, #4
 80072f0:	2b04      	cmp	r3, #4
 80072f2:	d109      	bne.n	8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80072f4:	4b14      	ldr	r3, [pc, #80]	; (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	08db      	lsrs	r3, r3, #3
 80072fa:	f003 0303 	and.w	r3, r3, #3
 80072fe:	4a13      	ldr	r2, [pc, #76]	; (800734c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007300:	fa22 f303 	lsr.w	r3, r2, r3
 8007304:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007306:	e078      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007308:	2300      	movs	r3, #0
 800730a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800730c:	e075      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800730e:	4b0e      	ldr	r3, [pc, #56]	; (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007316:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800731a:	d102      	bne.n	8007322 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800731c:	4b0c      	ldr	r3, [pc, #48]	; (8007350 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800731e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007320:	e06b      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007322:	2300      	movs	r3, #0
 8007324:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007326:	e068      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007328:	4b07      	ldr	r3, [pc, #28]	; (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007330:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007334:	d102      	bne.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8007336:	4b07      	ldr	r3, [pc, #28]	; (8007354 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007338:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800733a:	e05e      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800733c:	2300      	movs	r3, #0
 800733e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007340:	e05b      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007342:	2300      	movs	r3, #0
 8007344:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007346:	e058      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007348:	58024400 	.word	0x58024400
 800734c:	03d09000 	.word	0x03d09000
 8007350:	003d0900 	.word	0x003d0900
 8007354:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007358:	e9d7 2300 	ldrd	r2, r3, [r7]
 800735c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8007360:	430b      	orrs	r3, r1
 8007362:	d148      	bne.n	80073f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007364:	4b27      	ldr	r3, [pc, #156]	; (8007404 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007366:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007368:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800736c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800736e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007370:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007374:	d02a      	beq.n	80073cc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8007376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007378:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800737c:	d838      	bhi.n	80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800737e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007380:	2b00      	cmp	r3, #0
 8007382:	d004      	beq.n	800738e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007386:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800738a:	d00d      	beq.n	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800738c:	e030      	b.n	80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800738e:	4b1d      	ldr	r3, [pc, #116]	; (8007404 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007396:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800739a:	d102      	bne.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800739c:	4b1a      	ldr	r3, [pc, #104]	; (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800739e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073a0:	e02b      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80073a2:	2300      	movs	r3, #0
 80073a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073a6:	e028      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80073a8:	4b16      	ldr	r3, [pc, #88]	; (8007404 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073b4:	d107      	bne.n	80073c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80073b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073ba:	4618      	mov	r0, r3
 80073bc:	f000 fae4 	bl	8007988 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80073c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073c4:	e019      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80073c6:	2300      	movs	r3, #0
 80073c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073ca:	e016      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80073cc:	4b0d      	ldr	r3, [pc, #52]	; (8007404 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073d8:	d107      	bne.n	80073ea <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073da:	f107 0318 	add.w	r3, r7, #24
 80073de:	4618      	mov	r0, r3
 80073e0:	f000 f82a 	bl	8007438 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073e8:	e007      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80073ea:	2300      	movs	r3, #0
 80073ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073ee:	e004      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80073f0:	2300      	movs	r3, #0
 80073f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073f4:	e001      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80073f6:	2300      	movs	r3, #0
 80073f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 80073fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3740      	adds	r7, #64	; 0x40
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}
 8007404:	58024400 	.word	0x58024400
 8007408:	007a1200 	.word	0x007a1200

0800740c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007410:	f7fe f816 	bl	8005440 <HAL_RCC_GetHCLKFreq>
 8007414:	4602      	mov	r2, r0
 8007416:	4b06      	ldr	r3, [pc, #24]	; (8007430 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007418:	6a1b      	ldr	r3, [r3, #32]
 800741a:	091b      	lsrs	r3, r3, #4
 800741c:	f003 0307 	and.w	r3, r3, #7
 8007420:	4904      	ldr	r1, [pc, #16]	; (8007434 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007422:	5ccb      	ldrb	r3, [r1, r3]
 8007424:	f003 031f 	and.w	r3, r3, #31
 8007428:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800742c:	4618      	mov	r0, r3
 800742e:	bd80      	pop	{r7, pc}
 8007430:	58024400 	.word	0x58024400
 8007434:	0800de14 	.word	0x0800de14

08007438 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007438:	b480      	push	{r7}
 800743a:	b089      	sub	sp, #36	; 0x24
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007440:	4ba1      	ldr	r3, [pc, #644]	; (80076c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007444:	f003 0303 	and.w	r3, r3, #3
 8007448:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800744a:	4b9f      	ldr	r3, [pc, #636]	; (80076c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800744c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800744e:	0b1b      	lsrs	r3, r3, #12
 8007450:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007454:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007456:	4b9c      	ldr	r3, [pc, #624]	; (80076c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800745a:	091b      	lsrs	r3, r3, #4
 800745c:	f003 0301 	and.w	r3, r3, #1
 8007460:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007462:	4b99      	ldr	r3, [pc, #612]	; (80076c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007466:	08db      	lsrs	r3, r3, #3
 8007468:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800746c:	693a      	ldr	r2, [r7, #16]
 800746e:	fb02 f303 	mul.w	r3, r2, r3
 8007472:	ee07 3a90 	vmov	s15, r3
 8007476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800747a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	2b00      	cmp	r3, #0
 8007482:	f000 8111 	beq.w	80076a8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	2b02      	cmp	r3, #2
 800748a:	f000 8083 	beq.w	8007594 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	2b02      	cmp	r3, #2
 8007492:	f200 80a1 	bhi.w	80075d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007496:	69bb      	ldr	r3, [r7, #24]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d003      	beq.n	80074a4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800749c:	69bb      	ldr	r3, [r7, #24]
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d056      	beq.n	8007550 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80074a2:	e099      	b.n	80075d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074a4:	4b88      	ldr	r3, [pc, #544]	; (80076c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f003 0320 	and.w	r3, r3, #32
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d02d      	beq.n	800750c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074b0:	4b85      	ldr	r3, [pc, #532]	; (80076c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	08db      	lsrs	r3, r3, #3
 80074b6:	f003 0303 	and.w	r3, r3, #3
 80074ba:	4a84      	ldr	r2, [pc, #528]	; (80076cc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80074bc:	fa22 f303 	lsr.w	r3, r2, r3
 80074c0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	ee07 3a90 	vmov	s15, r3
 80074c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	ee07 3a90 	vmov	s15, r3
 80074d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074da:	4b7b      	ldr	r3, [pc, #492]	; (80076c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074e2:	ee07 3a90 	vmov	s15, r3
 80074e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80074ee:	eddf 5a78 	vldr	s11, [pc, #480]	; 80076d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80074f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007506:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800750a:	e087      	b.n	800761c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	ee07 3a90 	vmov	s15, r3
 8007512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007516:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80076d4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800751a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800751e:	4b6a      	ldr	r3, [pc, #424]	; (80076c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007526:	ee07 3a90 	vmov	s15, r3
 800752a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800752e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007532:	eddf 5a67 	vldr	s11, [pc, #412]	; 80076d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800753a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800753e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800754a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800754e:	e065      	b.n	800761c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	ee07 3a90 	vmov	s15, r3
 8007556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800755a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80076d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800755e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007562:	4b59      	ldr	r3, [pc, #356]	; (80076c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800756a:	ee07 3a90 	vmov	s15, r3
 800756e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007572:	ed97 6a03 	vldr	s12, [r7, #12]
 8007576:	eddf 5a56 	vldr	s11, [pc, #344]	; 80076d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800757a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800757e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007582:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800758a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800758e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007592:	e043      	b.n	800761c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	ee07 3a90 	vmov	s15, r3
 800759a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800759e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80076dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80075a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075a6:	4b48      	ldr	r3, [pc, #288]	; (80076c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ae:	ee07 3a90 	vmov	s15, r3
 80075b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80075ba:	eddf 5a45 	vldr	s11, [pc, #276]	; 80076d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80075be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075d6:	e021      	b.n	800761c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	ee07 3a90 	vmov	s15, r3
 80075de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075e2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80076d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80075e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075ea:	4b37      	ldr	r3, [pc, #220]	; (80076c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075f2:	ee07 3a90 	vmov	s15, r3
 80075f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80075fe:	eddf 5a34 	vldr	s11, [pc, #208]	; 80076d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800760a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800760e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007616:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800761a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800761c:	4b2a      	ldr	r3, [pc, #168]	; (80076c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800761e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007620:	0a5b      	lsrs	r3, r3, #9
 8007622:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007626:	ee07 3a90 	vmov	s15, r3
 800762a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800762e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007632:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007636:	edd7 6a07 	vldr	s13, [r7, #28]
 800763a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800763e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007642:	ee17 2a90 	vmov	r2, s15
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800764a:	4b1f      	ldr	r3, [pc, #124]	; (80076c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800764c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800764e:	0c1b      	lsrs	r3, r3, #16
 8007650:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007654:	ee07 3a90 	vmov	s15, r3
 8007658:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800765c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007660:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007664:	edd7 6a07 	vldr	s13, [r7, #28]
 8007668:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800766c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007670:	ee17 2a90 	vmov	r2, s15
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007678:	4b13      	ldr	r3, [pc, #76]	; (80076c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800767a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800767c:	0e1b      	lsrs	r3, r3, #24
 800767e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007682:	ee07 3a90 	vmov	s15, r3
 8007686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800768a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800768e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007692:	edd7 6a07 	vldr	s13, [r7, #28]
 8007696:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800769a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800769e:	ee17 2a90 	vmov	r2, s15
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80076a6:	e008      	b.n	80076ba <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	609a      	str	r2, [r3, #8]
}
 80076ba:	bf00      	nop
 80076bc:	3724      	adds	r7, #36	; 0x24
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr
 80076c6:	bf00      	nop
 80076c8:	58024400 	.word	0x58024400
 80076cc:	03d09000 	.word	0x03d09000
 80076d0:	46000000 	.word	0x46000000
 80076d4:	4c742400 	.word	0x4c742400
 80076d8:	4a742400 	.word	0x4a742400
 80076dc:	4af42400 	.word	0x4af42400

080076e0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b089      	sub	sp, #36	; 0x24
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80076e8:	4ba1      	ldr	r3, [pc, #644]	; (8007970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ec:	f003 0303 	and.w	r3, r3, #3
 80076f0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80076f2:	4b9f      	ldr	r3, [pc, #636]	; (8007970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076f6:	0d1b      	lsrs	r3, r3, #20
 80076f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076fc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80076fe:	4b9c      	ldr	r3, [pc, #624]	; (8007970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007702:	0a1b      	lsrs	r3, r3, #8
 8007704:	f003 0301 	and.w	r3, r3, #1
 8007708:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800770a:	4b99      	ldr	r3, [pc, #612]	; (8007970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800770c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800770e:	08db      	lsrs	r3, r3, #3
 8007710:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007714:	693a      	ldr	r2, [r7, #16]
 8007716:	fb02 f303 	mul.w	r3, r2, r3
 800771a:	ee07 3a90 	vmov	s15, r3
 800771e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007722:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	2b00      	cmp	r3, #0
 800772a:	f000 8111 	beq.w	8007950 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	2b02      	cmp	r3, #2
 8007732:	f000 8083 	beq.w	800783c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007736:	69bb      	ldr	r3, [r7, #24]
 8007738:	2b02      	cmp	r3, #2
 800773a:	f200 80a1 	bhi.w	8007880 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d003      	beq.n	800774c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	2b01      	cmp	r3, #1
 8007748:	d056      	beq.n	80077f8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800774a:	e099      	b.n	8007880 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800774c:	4b88      	ldr	r3, [pc, #544]	; (8007970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 0320 	and.w	r3, r3, #32
 8007754:	2b00      	cmp	r3, #0
 8007756:	d02d      	beq.n	80077b4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007758:	4b85      	ldr	r3, [pc, #532]	; (8007970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	08db      	lsrs	r3, r3, #3
 800775e:	f003 0303 	and.w	r3, r3, #3
 8007762:	4a84      	ldr	r2, [pc, #528]	; (8007974 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007764:	fa22 f303 	lsr.w	r3, r2, r3
 8007768:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	ee07 3a90 	vmov	s15, r3
 8007770:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	ee07 3a90 	vmov	s15, r3
 800777a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800777e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007782:	4b7b      	ldr	r3, [pc, #492]	; (8007970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800778a:	ee07 3a90 	vmov	s15, r3
 800778e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007792:	ed97 6a03 	vldr	s12, [r7, #12]
 8007796:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007978 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800779a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800779e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077ae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80077b2:	e087      	b.n	80078c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	ee07 3a90 	vmov	s15, r3
 80077ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077be:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800797c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80077c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077c6:	4b6a      	ldr	r3, [pc, #424]	; (8007970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ce:	ee07 3a90 	vmov	s15, r3
 80077d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80077da:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007978 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80077de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077f6:	e065      	b.n	80078c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	ee07 3a90 	vmov	s15, r3
 80077fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007802:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007980 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800780a:	4b59      	ldr	r3, [pc, #356]	; (8007970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800780c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800780e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007812:	ee07 3a90 	vmov	s15, r3
 8007816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800781a:	ed97 6a03 	vldr	s12, [r7, #12]
 800781e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007978 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800782a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800782e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007836:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800783a:	e043      	b.n	80078c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	ee07 3a90 	vmov	s15, r3
 8007842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007846:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007984 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800784a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800784e:	4b48      	ldr	r3, [pc, #288]	; (8007970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007856:	ee07 3a90 	vmov	s15, r3
 800785a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800785e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007862:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007978 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800786a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800786e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800787a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800787e:	e021      	b.n	80078c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	ee07 3a90 	vmov	s15, r3
 8007886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800788a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007980 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800788e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007892:	4b37      	ldr	r3, [pc, #220]	; (8007970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800789a:	ee07 3a90 	vmov	s15, r3
 800789e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80078a6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007978 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80078aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078c2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80078c4:	4b2a      	ldr	r3, [pc, #168]	; (8007970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c8:	0a5b      	lsrs	r3, r3, #9
 80078ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078ce:	ee07 3a90 	vmov	s15, r3
 80078d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80078da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078de:	edd7 6a07 	vldr	s13, [r7, #28]
 80078e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078ea:	ee17 2a90 	vmov	r2, s15
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80078f2:	4b1f      	ldr	r3, [pc, #124]	; (8007970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f6:	0c1b      	lsrs	r3, r3, #16
 80078f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078fc:	ee07 3a90 	vmov	s15, r3
 8007900:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007904:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007908:	ee37 7a87 	vadd.f32	s14, s15, s14
 800790c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007910:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007914:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007918:	ee17 2a90 	vmov	r2, s15
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007920:	4b13      	ldr	r3, [pc, #76]	; (8007970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007924:	0e1b      	lsrs	r3, r3, #24
 8007926:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800792a:	ee07 3a90 	vmov	s15, r3
 800792e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007932:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007936:	ee37 7a87 	vadd.f32	s14, s15, s14
 800793a:	edd7 6a07 	vldr	s13, [r7, #28]
 800793e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007942:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007946:	ee17 2a90 	vmov	r2, s15
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800794e:	e008      	b.n	8007962 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2200      	movs	r2, #0
 8007954:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	609a      	str	r2, [r3, #8]
}
 8007962:	bf00      	nop
 8007964:	3724      	adds	r7, #36	; 0x24
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr
 800796e:	bf00      	nop
 8007970:	58024400 	.word	0x58024400
 8007974:	03d09000 	.word	0x03d09000
 8007978:	46000000 	.word	0x46000000
 800797c:	4c742400 	.word	0x4c742400
 8007980:	4a742400 	.word	0x4a742400
 8007984:	4af42400 	.word	0x4af42400

08007988 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007988:	b480      	push	{r7}
 800798a:	b089      	sub	sp, #36	; 0x24
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007990:	4ba0      	ldr	r3, [pc, #640]	; (8007c14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007994:	f003 0303 	and.w	r3, r3, #3
 8007998:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800799a:	4b9e      	ldr	r3, [pc, #632]	; (8007c14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800799c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800799e:	091b      	lsrs	r3, r3, #4
 80079a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079a4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80079a6:	4b9b      	ldr	r3, [pc, #620]	; (8007c14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079aa:	f003 0301 	and.w	r3, r3, #1
 80079ae:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80079b0:	4b98      	ldr	r3, [pc, #608]	; (8007c14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079b4:	08db      	lsrs	r3, r3, #3
 80079b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80079ba:	693a      	ldr	r2, [r7, #16]
 80079bc:	fb02 f303 	mul.w	r3, r2, r3
 80079c0:	ee07 3a90 	vmov	s15, r3
 80079c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079c8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	f000 8111 	beq.w	8007bf6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	2b02      	cmp	r3, #2
 80079d8:	f000 8083 	beq.w	8007ae2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80079dc:	69bb      	ldr	r3, [r7, #24]
 80079de:	2b02      	cmp	r3, #2
 80079e0:	f200 80a1 	bhi.w	8007b26 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80079e4:	69bb      	ldr	r3, [r7, #24]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d003      	beq.n	80079f2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80079ea:	69bb      	ldr	r3, [r7, #24]
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d056      	beq.n	8007a9e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80079f0:	e099      	b.n	8007b26 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079f2:	4b88      	ldr	r3, [pc, #544]	; (8007c14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f003 0320 	and.w	r3, r3, #32
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d02d      	beq.n	8007a5a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80079fe:	4b85      	ldr	r3, [pc, #532]	; (8007c14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	08db      	lsrs	r3, r3, #3
 8007a04:	f003 0303 	and.w	r3, r3, #3
 8007a08:	4a83      	ldr	r2, [pc, #524]	; (8007c18 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8007a0e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	ee07 3a90 	vmov	s15, r3
 8007a16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	ee07 3a90 	vmov	s15, r3
 8007a20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a28:	4b7a      	ldr	r3, [pc, #488]	; (8007c14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a30:	ee07 3a90 	vmov	s15, r3
 8007a34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a38:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a3c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007c1c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007a40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a54:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007a58:	e087      	b.n	8007b6a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	ee07 3a90 	vmov	s15, r3
 8007a60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a64:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007c20 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007a68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a6c:	4b69      	ldr	r3, [pc, #420]	; (8007c14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a74:	ee07 3a90 	vmov	s15, r3
 8007a78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a7c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a80:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007c1c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007a84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a98:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a9c:	e065      	b.n	8007b6a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	ee07 3a90 	vmov	s15, r3
 8007aa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aa8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007c24 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007aac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ab0:	4b58      	ldr	r3, [pc, #352]	; (8007c14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ab8:	ee07 3a90 	vmov	s15, r3
 8007abc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ac0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ac4:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007c1c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007ac8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007acc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ad0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ad4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ad8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007adc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ae0:	e043      	b.n	8007b6a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	ee07 3a90 	vmov	s15, r3
 8007ae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aec:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007c28 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007af0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007af4:	4b47      	ldr	r3, [pc, #284]	; (8007c14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007af8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007afc:	ee07 3a90 	vmov	s15, r3
 8007b00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b04:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b08:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007c1c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007b0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b20:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b24:	e021      	b.n	8007b6a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	ee07 3a90 	vmov	s15, r3
 8007b2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b30:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007c20 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007b34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b38:	4b36      	ldr	r3, [pc, #216]	; (8007c14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b40:	ee07 3a90 	vmov	s15, r3
 8007b44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b48:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b4c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007c1c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007b50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b64:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b68:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007b6a:	4b2a      	ldr	r3, [pc, #168]	; (8007c14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b6e:	0a5b      	lsrs	r3, r3, #9
 8007b70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b74:	ee07 3a90 	vmov	s15, r3
 8007b78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b84:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b90:	ee17 2a90 	vmov	r2, s15
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007b98:	4b1e      	ldr	r3, [pc, #120]	; (8007c14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b9c:	0c1b      	lsrs	r3, r3, #16
 8007b9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ba2:	ee07 3a90 	vmov	s15, r3
 8007ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007baa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007bae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007bb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007bb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bbe:	ee17 2a90 	vmov	r2, s15
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007bc6:	4b13      	ldr	r3, [pc, #76]	; (8007c14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bca:	0e1b      	lsrs	r3, r3, #24
 8007bcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bd0:	ee07 3a90 	vmov	s15, r3
 8007bd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007bdc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007be0:	edd7 6a07 	vldr	s13, [r7, #28]
 8007be4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007be8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bec:	ee17 2a90 	vmov	r2, s15
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007bf4:	e008      	b.n	8007c08 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	609a      	str	r2, [r3, #8]
}
 8007c08:	bf00      	nop
 8007c0a:	3724      	adds	r7, #36	; 0x24
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr
 8007c14:	58024400 	.word	0x58024400
 8007c18:	03d09000 	.word	0x03d09000
 8007c1c:	46000000 	.word	0x46000000
 8007c20:	4c742400 	.word	0x4c742400
 8007c24:	4a742400 	.word	0x4a742400
 8007c28:	4af42400 	.word	0x4af42400

08007c2c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007c36:	2300      	movs	r3, #0
 8007c38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007c3a:	4b53      	ldr	r3, [pc, #332]	; (8007d88 <RCCEx_PLL2_Config+0x15c>)
 8007c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c3e:	f003 0303 	and.w	r3, r3, #3
 8007c42:	2b03      	cmp	r3, #3
 8007c44:	d101      	bne.n	8007c4a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	e099      	b.n	8007d7e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007c4a:	4b4f      	ldr	r3, [pc, #316]	; (8007d88 <RCCEx_PLL2_Config+0x15c>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a4e      	ldr	r2, [pc, #312]	; (8007d88 <RCCEx_PLL2_Config+0x15c>)
 8007c50:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007c54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c56:	f7fa f847 	bl	8001ce8 <HAL_GetTick>
 8007c5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007c5c:	e008      	b.n	8007c70 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007c5e:	f7fa f843 	bl	8001ce8 <HAL_GetTick>
 8007c62:	4602      	mov	r2, r0
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	1ad3      	subs	r3, r2, r3
 8007c68:	2b02      	cmp	r3, #2
 8007c6a:	d901      	bls.n	8007c70 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007c6c:	2303      	movs	r3, #3
 8007c6e:	e086      	b.n	8007d7e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007c70:	4b45      	ldr	r3, [pc, #276]	; (8007d88 <RCCEx_PLL2_Config+0x15c>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d1f0      	bne.n	8007c5e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007c7c:	4b42      	ldr	r3, [pc, #264]	; (8007d88 <RCCEx_PLL2_Config+0x15c>)
 8007c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c80:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	031b      	lsls	r3, r3, #12
 8007c8a:	493f      	ldr	r1, [pc, #252]	; (8007d88 <RCCEx_PLL2_Config+0x15c>)
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	628b      	str	r3, [r1, #40]	; 0x28
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	3b01      	subs	r3, #1
 8007c96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	3b01      	subs	r3, #1
 8007ca0:	025b      	lsls	r3, r3, #9
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	431a      	orrs	r2, r3
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	68db      	ldr	r3, [r3, #12]
 8007caa:	3b01      	subs	r3, #1
 8007cac:	041b      	lsls	r3, r3, #16
 8007cae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007cb2:	431a      	orrs	r2, r3
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	691b      	ldr	r3, [r3, #16]
 8007cb8:	3b01      	subs	r3, #1
 8007cba:	061b      	lsls	r3, r3, #24
 8007cbc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007cc0:	4931      	ldr	r1, [pc, #196]	; (8007d88 <RCCEx_PLL2_Config+0x15c>)
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007cc6:	4b30      	ldr	r3, [pc, #192]	; (8007d88 <RCCEx_PLL2_Config+0x15c>)
 8007cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	695b      	ldr	r3, [r3, #20]
 8007cd2:	492d      	ldr	r1, [pc, #180]	; (8007d88 <RCCEx_PLL2_Config+0x15c>)
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007cd8:	4b2b      	ldr	r3, [pc, #172]	; (8007d88 <RCCEx_PLL2_Config+0x15c>)
 8007cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cdc:	f023 0220 	bic.w	r2, r3, #32
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	699b      	ldr	r3, [r3, #24]
 8007ce4:	4928      	ldr	r1, [pc, #160]	; (8007d88 <RCCEx_PLL2_Config+0x15c>)
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007cea:	4b27      	ldr	r3, [pc, #156]	; (8007d88 <RCCEx_PLL2_Config+0x15c>)
 8007cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cee:	4a26      	ldr	r2, [pc, #152]	; (8007d88 <RCCEx_PLL2_Config+0x15c>)
 8007cf0:	f023 0310 	bic.w	r3, r3, #16
 8007cf4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007cf6:	4b24      	ldr	r3, [pc, #144]	; (8007d88 <RCCEx_PLL2_Config+0x15c>)
 8007cf8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007cfa:	4b24      	ldr	r3, [pc, #144]	; (8007d8c <RCCEx_PLL2_Config+0x160>)
 8007cfc:	4013      	ands	r3, r2
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	69d2      	ldr	r2, [r2, #28]
 8007d02:	00d2      	lsls	r2, r2, #3
 8007d04:	4920      	ldr	r1, [pc, #128]	; (8007d88 <RCCEx_PLL2_Config+0x15c>)
 8007d06:	4313      	orrs	r3, r2
 8007d08:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007d0a:	4b1f      	ldr	r3, [pc, #124]	; (8007d88 <RCCEx_PLL2_Config+0x15c>)
 8007d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d0e:	4a1e      	ldr	r2, [pc, #120]	; (8007d88 <RCCEx_PLL2_Config+0x15c>)
 8007d10:	f043 0310 	orr.w	r3, r3, #16
 8007d14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d106      	bne.n	8007d2a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007d1c:	4b1a      	ldr	r3, [pc, #104]	; (8007d88 <RCCEx_PLL2_Config+0x15c>)
 8007d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d20:	4a19      	ldr	r2, [pc, #100]	; (8007d88 <RCCEx_PLL2_Config+0x15c>)
 8007d22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007d28:	e00f      	b.n	8007d4a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d106      	bne.n	8007d3e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007d30:	4b15      	ldr	r3, [pc, #84]	; (8007d88 <RCCEx_PLL2_Config+0x15c>)
 8007d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d34:	4a14      	ldr	r2, [pc, #80]	; (8007d88 <RCCEx_PLL2_Config+0x15c>)
 8007d36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007d3c:	e005      	b.n	8007d4a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007d3e:	4b12      	ldr	r3, [pc, #72]	; (8007d88 <RCCEx_PLL2_Config+0x15c>)
 8007d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d42:	4a11      	ldr	r2, [pc, #68]	; (8007d88 <RCCEx_PLL2_Config+0x15c>)
 8007d44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007d48:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007d4a:	4b0f      	ldr	r3, [pc, #60]	; (8007d88 <RCCEx_PLL2_Config+0x15c>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a0e      	ldr	r2, [pc, #56]	; (8007d88 <RCCEx_PLL2_Config+0x15c>)
 8007d50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007d54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d56:	f7f9 ffc7 	bl	8001ce8 <HAL_GetTick>
 8007d5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007d5c:	e008      	b.n	8007d70 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007d5e:	f7f9 ffc3 	bl	8001ce8 <HAL_GetTick>
 8007d62:	4602      	mov	r2, r0
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	1ad3      	subs	r3, r2, r3
 8007d68:	2b02      	cmp	r3, #2
 8007d6a:	d901      	bls.n	8007d70 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007d6c:	2303      	movs	r3, #3
 8007d6e:	e006      	b.n	8007d7e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007d70:	4b05      	ldr	r3, [pc, #20]	; (8007d88 <RCCEx_PLL2_Config+0x15c>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d0f0      	beq.n	8007d5e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3710      	adds	r7, #16
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	bf00      	nop
 8007d88:	58024400 	.word	0x58024400
 8007d8c:	ffff0007 	.word	0xffff0007

08007d90 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b084      	sub	sp, #16
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007d9e:	4b53      	ldr	r3, [pc, #332]	; (8007eec <RCCEx_PLL3_Config+0x15c>)
 8007da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da2:	f003 0303 	and.w	r3, r3, #3
 8007da6:	2b03      	cmp	r3, #3
 8007da8:	d101      	bne.n	8007dae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	e099      	b.n	8007ee2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007dae:	4b4f      	ldr	r3, [pc, #316]	; (8007eec <RCCEx_PLL3_Config+0x15c>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a4e      	ldr	r2, [pc, #312]	; (8007eec <RCCEx_PLL3_Config+0x15c>)
 8007db4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007db8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007dba:	f7f9 ff95 	bl	8001ce8 <HAL_GetTick>
 8007dbe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007dc0:	e008      	b.n	8007dd4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007dc2:	f7f9 ff91 	bl	8001ce8 <HAL_GetTick>
 8007dc6:	4602      	mov	r2, r0
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	1ad3      	subs	r3, r2, r3
 8007dcc:	2b02      	cmp	r3, #2
 8007dce:	d901      	bls.n	8007dd4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007dd0:	2303      	movs	r3, #3
 8007dd2:	e086      	b.n	8007ee2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007dd4:	4b45      	ldr	r3, [pc, #276]	; (8007eec <RCCEx_PLL3_Config+0x15c>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d1f0      	bne.n	8007dc2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007de0:	4b42      	ldr	r3, [pc, #264]	; (8007eec <RCCEx_PLL3_Config+0x15c>)
 8007de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	051b      	lsls	r3, r3, #20
 8007dee:	493f      	ldr	r1, [pc, #252]	; (8007eec <RCCEx_PLL3_Config+0x15c>)
 8007df0:	4313      	orrs	r3, r2
 8007df2:	628b      	str	r3, [r1, #40]	; 0x28
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	3b01      	subs	r3, #1
 8007dfa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	3b01      	subs	r3, #1
 8007e04:	025b      	lsls	r3, r3, #9
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	431a      	orrs	r2, r3
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	68db      	ldr	r3, [r3, #12]
 8007e0e:	3b01      	subs	r3, #1
 8007e10:	041b      	lsls	r3, r3, #16
 8007e12:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007e16:	431a      	orrs	r2, r3
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	691b      	ldr	r3, [r3, #16]
 8007e1c:	3b01      	subs	r3, #1
 8007e1e:	061b      	lsls	r3, r3, #24
 8007e20:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007e24:	4931      	ldr	r1, [pc, #196]	; (8007eec <RCCEx_PLL3_Config+0x15c>)
 8007e26:	4313      	orrs	r3, r2
 8007e28:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007e2a:	4b30      	ldr	r3, [pc, #192]	; (8007eec <RCCEx_PLL3_Config+0x15c>)
 8007e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e2e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	695b      	ldr	r3, [r3, #20]
 8007e36:	492d      	ldr	r1, [pc, #180]	; (8007eec <RCCEx_PLL3_Config+0x15c>)
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007e3c:	4b2b      	ldr	r3, [pc, #172]	; (8007eec <RCCEx_PLL3_Config+0x15c>)
 8007e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e40:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	699b      	ldr	r3, [r3, #24]
 8007e48:	4928      	ldr	r1, [pc, #160]	; (8007eec <RCCEx_PLL3_Config+0x15c>)
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007e4e:	4b27      	ldr	r3, [pc, #156]	; (8007eec <RCCEx_PLL3_Config+0x15c>)
 8007e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e52:	4a26      	ldr	r2, [pc, #152]	; (8007eec <RCCEx_PLL3_Config+0x15c>)
 8007e54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007e5a:	4b24      	ldr	r3, [pc, #144]	; (8007eec <RCCEx_PLL3_Config+0x15c>)
 8007e5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e5e:	4b24      	ldr	r3, [pc, #144]	; (8007ef0 <RCCEx_PLL3_Config+0x160>)
 8007e60:	4013      	ands	r3, r2
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	69d2      	ldr	r2, [r2, #28]
 8007e66:	00d2      	lsls	r2, r2, #3
 8007e68:	4920      	ldr	r1, [pc, #128]	; (8007eec <RCCEx_PLL3_Config+0x15c>)
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007e6e:	4b1f      	ldr	r3, [pc, #124]	; (8007eec <RCCEx_PLL3_Config+0x15c>)
 8007e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e72:	4a1e      	ldr	r2, [pc, #120]	; (8007eec <RCCEx_PLL3_Config+0x15c>)
 8007e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d106      	bne.n	8007e8e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007e80:	4b1a      	ldr	r3, [pc, #104]	; (8007eec <RCCEx_PLL3_Config+0x15c>)
 8007e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e84:	4a19      	ldr	r2, [pc, #100]	; (8007eec <RCCEx_PLL3_Config+0x15c>)
 8007e86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007e8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007e8c:	e00f      	b.n	8007eae <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d106      	bne.n	8007ea2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007e94:	4b15      	ldr	r3, [pc, #84]	; (8007eec <RCCEx_PLL3_Config+0x15c>)
 8007e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e98:	4a14      	ldr	r2, [pc, #80]	; (8007eec <RCCEx_PLL3_Config+0x15c>)
 8007e9a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007e9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007ea0:	e005      	b.n	8007eae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007ea2:	4b12      	ldr	r3, [pc, #72]	; (8007eec <RCCEx_PLL3_Config+0x15c>)
 8007ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea6:	4a11      	ldr	r2, [pc, #68]	; (8007eec <RCCEx_PLL3_Config+0x15c>)
 8007ea8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007eac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007eae:	4b0f      	ldr	r3, [pc, #60]	; (8007eec <RCCEx_PLL3_Config+0x15c>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a0e      	ldr	r2, [pc, #56]	; (8007eec <RCCEx_PLL3_Config+0x15c>)
 8007eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007eb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007eba:	f7f9 ff15 	bl	8001ce8 <HAL_GetTick>
 8007ebe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007ec0:	e008      	b.n	8007ed4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007ec2:	f7f9 ff11 	bl	8001ce8 <HAL_GetTick>
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	1ad3      	subs	r3, r2, r3
 8007ecc:	2b02      	cmp	r3, #2
 8007ece:	d901      	bls.n	8007ed4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007ed0:	2303      	movs	r3, #3
 8007ed2:	e006      	b.n	8007ee2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007ed4:	4b05      	ldr	r3, [pc, #20]	; (8007eec <RCCEx_PLL3_Config+0x15c>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d0f0      	beq.n	8007ec2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3710      	adds	r7, #16
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop
 8007eec:	58024400 	.word	0x58024400
 8007ef0:	ffff0007 	.word	0xffff0007

08007ef4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d101      	bne.n	8007f06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	e042      	b.n	8007f8c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d106      	bne.n	8007f1e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f7f9 fc4f 	bl	80017bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2224      	movs	r2, #36	; 0x24
 8007f22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f022 0201 	bic.w	r2, r2, #1
 8007f34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 f8ba 	bl	80080b0 <UART_SetConfig>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d101      	bne.n	8007f46 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007f42:	2301      	movs	r3, #1
 8007f44:	e022      	b.n	8007f8c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d002      	beq.n	8007f54 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 fe16 	bl	8008b80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	685a      	ldr	r2, [r3, #4]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	689a      	ldr	r2, [r3, #8]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f042 0201 	orr.w	r2, r2, #1
 8007f82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f000 fe9d 	bl	8008cc4 <UART_CheckIdleState>
 8007f8a:	4603      	mov	r3, r0
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3708      	adds	r7, #8
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b08a      	sub	sp, #40	; 0x28
 8007f98:	af02      	add	r7, sp, #8
 8007f9a:	60f8      	str	r0, [r7, #12]
 8007f9c:	60b9      	str	r1, [r7, #8]
 8007f9e:	603b      	str	r3, [r7, #0]
 8007fa0:	4613      	mov	r3, r2
 8007fa2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007faa:	2b20      	cmp	r3, #32
 8007fac:	d17b      	bne.n	80080a6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d002      	beq.n	8007fba <HAL_UART_Transmit+0x26>
 8007fb4:	88fb      	ldrh	r3, [r7, #6]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d101      	bne.n	8007fbe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	e074      	b.n	80080a8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2221      	movs	r2, #33	; 0x21
 8007fca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007fce:	f7f9 fe8b 	bl	8001ce8 <HAL_GetTick>
 8007fd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	88fa      	ldrh	r2, [r7, #6]
 8007fd8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	88fa      	ldrh	r2, [r7, #6]
 8007fe0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fec:	d108      	bne.n	8008000 <HAL_UART_Transmit+0x6c>
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	691b      	ldr	r3, [r3, #16]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d104      	bne.n	8008000 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	61bb      	str	r3, [r7, #24]
 8007ffe:	e003      	b.n	8008008 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008004:	2300      	movs	r3, #0
 8008006:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008008:	e030      	b.n	800806c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	9300      	str	r3, [sp, #0]
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	2200      	movs	r2, #0
 8008012:	2180      	movs	r1, #128	; 0x80
 8008014:	68f8      	ldr	r0, [r7, #12]
 8008016:	f000 feff 	bl	8008e18 <UART_WaitOnFlagUntilTimeout>
 800801a:	4603      	mov	r3, r0
 800801c:	2b00      	cmp	r3, #0
 800801e:	d005      	beq.n	800802c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2220      	movs	r2, #32
 8008024:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8008028:	2303      	movs	r3, #3
 800802a:	e03d      	b.n	80080a8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800802c:	69fb      	ldr	r3, [r7, #28]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d10b      	bne.n	800804a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008032:	69bb      	ldr	r3, [r7, #24]
 8008034:	881b      	ldrh	r3, [r3, #0]
 8008036:	461a      	mov	r2, r3
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008040:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	3302      	adds	r3, #2
 8008046:	61bb      	str	r3, [r7, #24]
 8008048:	e007      	b.n	800805a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800804a:	69fb      	ldr	r3, [r7, #28]
 800804c:	781a      	ldrb	r2, [r3, #0]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008054:	69fb      	ldr	r3, [r7, #28]
 8008056:	3301      	adds	r3, #1
 8008058:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008060:	b29b      	uxth	r3, r3
 8008062:	3b01      	subs	r3, #1
 8008064:	b29a      	uxth	r2, r3
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008072:	b29b      	uxth	r3, r3
 8008074:	2b00      	cmp	r3, #0
 8008076:	d1c8      	bne.n	800800a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	9300      	str	r3, [sp, #0]
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	2200      	movs	r2, #0
 8008080:	2140      	movs	r1, #64	; 0x40
 8008082:	68f8      	ldr	r0, [r7, #12]
 8008084:	f000 fec8 	bl	8008e18 <UART_WaitOnFlagUntilTimeout>
 8008088:	4603      	mov	r3, r0
 800808a:	2b00      	cmp	r3, #0
 800808c:	d005      	beq.n	800809a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2220      	movs	r2, #32
 8008092:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8008096:	2303      	movs	r3, #3
 8008098:	e006      	b.n	80080a8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2220      	movs	r2, #32
 800809e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80080a2:	2300      	movs	r3, #0
 80080a4:	e000      	b.n	80080a8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80080a6:	2302      	movs	r3, #2
  }
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3720      	adds	r7, #32
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080b4:	b092      	sub	sp, #72	; 0x48
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80080ba:	2300      	movs	r3, #0
 80080bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	689a      	ldr	r2, [r3, #8]
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	691b      	ldr	r3, [r3, #16]
 80080c8:	431a      	orrs	r2, r3
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	695b      	ldr	r3, [r3, #20]
 80080ce:	431a      	orrs	r2, r3
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	69db      	ldr	r3, [r3, #28]
 80080d4:	4313      	orrs	r3, r2
 80080d6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	4bbe      	ldr	r3, [pc, #760]	; (80083d8 <UART_SetConfig+0x328>)
 80080e0:	4013      	ands	r3, r2
 80080e2:	697a      	ldr	r2, [r7, #20]
 80080e4:	6812      	ldr	r2, [r2, #0]
 80080e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80080e8:	430b      	orrs	r3, r1
 80080ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	68da      	ldr	r2, [r3, #12]
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	430a      	orrs	r2, r1
 8008100:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	699b      	ldr	r3, [r3, #24]
 8008106:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4ab3      	ldr	r2, [pc, #716]	; (80083dc <UART_SetConfig+0x32c>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d004      	beq.n	800811c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	6a1b      	ldr	r3, [r3, #32]
 8008116:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008118:	4313      	orrs	r3, r2
 800811a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	689a      	ldr	r2, [r3, #8]
 8008122:	4baf      	ldr	r3, [pc, #700]	; (80083e0 <UART_SetConfig+0x330>)
 8008124:	4013      	ands	r3, r2
 8008126:	697a      	ldr	r2, [r7, #20]
 8008128:	6812      	ldr	r2, [r2, #0]
 800812a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800812c:	430b      	orrs	r3, r1
 800812e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008136:	f023 010f 	bic.w	r1, r3, #15
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	430a      	orrs	r2, r1
 8008144:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4aa6      	ldr	r2, [pc, #664]	; (80083e4 <UART_SetConfig+0x334>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d177      	bne.n	8008240 <UART_SetConfig+0x190>
 8008150:	4ba5      	ldr	r3, [pc, #660]	; (80083e8 <UART_SetConfig+0x338>)
 8008152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008154:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008158:	2b28      	cmp	r3, #40	; 0x28
 800815a:	d86d      	bhi.n	8008238 <UART_SetConfig+0x188>
 800815c:	a201      	add	r2, pc, #4	; (adr r2, 8008164 <UART_SetConfig+0xb4>)
 800815e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008162:	bf00      	nop
 8008164:	08008209 	.word	0x08008209
 8008168:	08008239 	.word	0x08008239
 800816c:	08008239 	.word	0x08008239
 8008170:	08008239 	.word	0x08008239
 8008174:	08008239 	.word	0x08008239
 8008178:	08008239 	.word	0x08008239
 800817c:	08008239 	.word	0x08008239
 8008180:	08008239 	.word	0x08008239
 8008184:	08008211 	.word	0x08008211
 8008188:	08008239 	.word	0x08008239
 800818c:	08008239 	.word	0x08008239
 8008190:	08008239 	.word	0x08008239
 8008194:	08008239 	.word	0x08008239
 8008198:	08008239 	.word	0x08008239
 800819c:	08008239 	.word	0x08008239
 80081a0:	08008239 	.word	0x08008239
 80081a4:	08008219 	.word	0x08008219
 80081a8:	08008239 	.word	0x08008239
 80081ac:	08008239 	.word	0x08008239
 80081b0:	08008239 	.word	0x08008239
 80081b4:	08008239 	.word	0x08008239
 80081b8:	08008239 	.word	0x08008239
 80081bc:	08008239 	.word	0x08008239
 80081c0:	08008239 	.word	0x08008239
 80081c4:	08008221 	.word	0x08008221
 80081c8:	08008239 	.word	0x08008239
 80081cc:	08008239 	.word	0x08008239
 80081d0:	08008239 	.word	0x08008239
 80081d4:	08008239 	.word	0x08008239
 80081d8:	08008239 	.word	0x08008239
 80081dc:	08008239 	.word	0x08008239
 80081e0:	08008239 	.word	0x08008239
 80081e4:	08008229 	.word	0x08008229
 80081e8:	08008239 	.word	0x08008239
 80081ec:	08008239 	.word	0x08008239
 80081f0:	08008239 	.word	0x08008239
 80081f4:	08008239 	.word	0x08008239
 80081f8:	08008239 	.word	0x08008239
 80081fc:	08008239 	.word	0x08008239
 8008200:	08008239 	.word	0x08008239
 8008204:	08008231 	.word	0x08008231
 8008208:	2301      	movs	r3, #1
 800820a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800820e:	e222      	b.n	8008656 <UART_SetConfig+0x5a6>
 8008210:	2304      	movs	r3, #4
 8008212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008216:	e21e      	b.n	8008656 <UART_SetConfig+0x5a6>
 8008218:	2308      	movs	r3, #8
 800821a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800821e:	e21a      	b.n	8008656 <UART_SetConfig+0x5a6>
 8008220:	2310      	movs	r3, #16
 8008222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008226:	e216      	b.n	8008656 <UART_SetConfig+0x5a6>
 8008228:	2320      	movs	r3, #32
 800822a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800822e:	e212      	b.n	8008656 <UART_SetConfig+0x5a6>
 8008230:	2340      	movs	r3, #64	; 0x40
 8008232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008236:	e20e      	b.n	8008656 <UART_SetConfig+0x5a6>
 8008238:	2380      	movs	r3, #128	; 0x80
 800823a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800823e:	e20a      	b.n	8008656 <UART_SetConfig+0x5a6>
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a69      	ldr	r2, [pc, #420]	; (80083ec <UART_SetConfig+0x33c>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d130      	bne.n	80082ac <UART_SetConfig+0x1fc>
 800824a:	4b67      	ldr	r3, [pc, #412]	; (80083e8 <UART_SetConfig+0x338>)
 800824c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800824e:	f003 0307 	and.w	r3, r3, #7
 8008252:	2b05      	cmp	r3, #5
 8008254:	d826      	bhi.n	80082a4 <UART_SetConfig+0x1f4>
 8008256:	a201      	add	r2, pc, #4	; (adr r2, 800825c <UART_SetConfig+0x1ac>)
 8008258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800825c:	08008275 	.word	0x08008275
 8008260:	0800827d 	.word	0x0800827d
 8008264:	08008285 	.word	0x08008285
 8008268:	0800828d 	.word	0x0800828d
 800826c:	08008295 	.word	0x08008295
 8008270:	0800829d 	.word	0x0800829d
 8008274:	2300      	movs	r3, #0
 8008276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800827a:	e1ec      	b.n	8008656 <UART_SetConfig+0x5a6>
 800827c:	2304      	movs	r3, #4
 800827e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008282:	e1e8      	b.n	8008656 <UART_SetConfig+0x5a6>
 8008284:	2308      	movs	r3, #8
 8008286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800828a:	e1e4      	b.n	8008656 <UART_SetConfig+0x5a6>
 800828c:	2310      	movs	r3, #16
 800828e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008292:	e1e0      	b.n	8008656 <UART_SetConfig+0x5a6>
 8008294:	2320      	movs	r3, #32
 8008296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800829a:	e1dc      	b.n	8008656 <UART_SetConfig+0x5a6>
 800829c:	2340      	movs	r3, #64	; 0x40
 800829e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082a2:	e1d8      	b.n	8008656 <UART_SetConfig+0x5a6>
 80082a4:	2380      	movs	r3, #128	; 0x80
 80082a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082aa:	e1d4      	b.n	8008656 <UART_SetConfig+0x5a6>
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a4f      	ldr	r2, [pc, #316]	; (80083f0 <UART_SetConfig+0x340>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d130      	bne.n	8008318 <UART_SetConfig+0x268>
 80082b6:	4b4c      	ldr	r3, [pc, #304]	; (80083e8 <UART_SetConfig+0x338>)
 80082b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082ba:	f003 0307 	and.w	r3, r3, #7
 80082be:	2b05      	cmp	r3, #5
 80082c0:	d826      	bhi.n	8008310 <UART_SetConfig+0x260>
 80082c2:	a201      	add	r2, pc, #4	; (adr r2, 80082c8 <UART_SetConfig+0x218>)
 80082c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c8:	080082e1 	.word	0x080082e1
 80082cc:	080082e9 	.word	0x080082e9
 80082d0:	080082f1 	.word	0x080082f1
 80082d4:	080082f9 	.word	0x080082f9
 80082d8:	08008301 	.word	0x08008301
 80082dc:	08008309 	.word	0x08008309
 80082e0:	2300      	movs	r3, #0
 80082e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082e6:	e1b6      	b.n	8008656 <UART_SetConfig+0x5a6>
 80082e8:	2304      	movs	r3, #4
 80082ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082ee:	e1b2      	b.n	8008656 <UART_SetConfig+0x5a6>
 80082f0:	2308      	movs	r3, #8
 80082f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082f6:	e1ae      	b.n	8008656 <UART_SetConfig+0x5a6>
 80082f8:	2310      	movs	r3, #16
 80082fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082fe:	e1aa      	b.n	8008656 <UART_SetConfig+0x5a6>
 8008300:	2320      	movs	r3, #32
 8008302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008306:	e1a6      	b.n	8008656 <UART_SetConfig+0x5a6>
 8008308:	2340      	movs	r3, #64	; 0x40
 800830a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800830e:	e1a2      	b.n	8008656 <UART_SetConfig+0x5a6>
 8008310:	2380      	movs	r3, #128	; 0x80
 8008312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008316:	e19e      	b.n	8008656 <UART_SetConfig+0x5a6>
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a35      	ldr	r2, [pc, #212]	; (80083f4 <UART_SetConfig+0x344>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d130      	bne.n	8008384 <UART_SetConfig+0x2d4>
 8008322:	4b31      	ldr	r3, [pc, #196]	; (80083e8 <UART_SetConfig+0x338>)
 8008324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008326:	f003 0307 	and.w	r3, r3, #7
 800832a:	2b05      	cmp	r3, #5
 800832c:	d826      	bhi.n	800837c <UART_SetConfig+0x2cc>
 800832e:	a201      	add	r2, pc, #4	; (adr r2, 8008334 <UART_SetConfig+0x284>)
 8008330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008334:	0800834d 	.word	0x0800834d
 8008338:	08008355 	.word	0x08008355
 800833c:	0800835d 	.word	0x0800835d
 8008340:	08008365 	.word	0x08008365
 8008344:	0800836d 	.word	0x0800836d
 8008348:	08008375 	.word	0x08008375
 800834c:	2300      	movs	r3, #0
 800834e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008352:	e180      	b.n	8008656 <UART_SetConfig+0x5a6>
 8008354:	2304      	movs	r3, #4
 8008356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800835a:	e17c      	b.n	8008656 <UART_SetConfig+0x5a6>
 800835c:	2308      	movs	r3, #8
 800835e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008362:	e178      	b.n	8008656 <UART_SetConfig+0x5a6>
 8008364:	2310      	movs	r3, #16
 8008366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800836a:	e174      	b.n	8008656 <UART_SetConfig+0x5a6>
 800836c:	2320      	movs	r3, #32
 800836e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008372:	e170      	b.n	8008656 <UART_SetConfig+0x5a6>
 8008374:	2340      	movs	r3, #64	; 0x40
 8008376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800837a:	e16c      	b.n	8008656 <UART_SetConfig+0x5a6>
 800837c:	2380      	movs	r3, #128	; 0x80
 800837e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008382:	e168      	b.n	8008656 <UART_SetConfig+0x5a6>
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a1b      	ldr	r2, [pc, #108]	; (80083f8 <UART_SetConfig+0x348>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d142      	bne.n	8008414 <UART_SetConfig+0x364>
 800838e:	4b16      	ldr	r3, [pc, #88]	; (80083e8 <UART_SetConfig+0x338>)
 8008390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008392:	f003 0307 	and.w	r3, r3, #7
 8008396:	2b05      	cmp	r3, #5
 8008398:	d838      	bhi.n	800840c <UART_SetConfig+0x35c>
 800839a:	a201      	add	r2, pc, #4	; (adr r2, 80083a0 <UART_SetConfig+0x2f0>)
 800839c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a0:	080083b9 	.word	0x080083b9
 80083a4:	080083c1 	.word	0x080083c1
 80083a8:	080083c9 	.word	0x080083c9
 80083ac:	080083d1 	.word	0x080083d1
 80083b0:	080083fd 	.word	0x080083fd
 80083b4:	08008405 	.word	0x08008405
 80083b8:	2300      	movs	r3, #0
 80083ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083be:	e14a      	b.n	8008656 <UART_SetConfig+0x5a6>
 80083c0:	2304      	movs	r3, #4
 80083c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083c6:	e146      	b.n	8008656 <UART_SetConfig+0x5a6>
 80083c8:	2308      	movs	r3, #8
 80083ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083ce:	e142      	b.n	8008656 <UART_SetConfig+0x5a6>
 80083d0:	2310      	movs	r3, #16
 80083d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083d6:	e13e      	b.n	8008656 <UART_SetConfig+0x5a6>
 80083d8:	cfff69f3 	.word	0xcfff69f3
 80083dc:	58000c00 	.word	0x58000c00
 80083e0:	11fff4ff 	.word	0x11fff4ff
 80083e4:	40011000 	.word	0x40011000
 80083e8:	58024400 	.word	0x58024400
 80083ec:	40004400 	.word	0x40004400
 80083f0:	40004800 	.word	0x40004800
 80083f4:	40004c00 	.word	0x40004c00
 80083f8:	40005000 	.word	0x40005000
 80083fc:	2320      	movs	r3, #32
 80083fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008402:	e128      	b.n	8008656 <UART_SetConfig+0x5a6>
 8008404:	2340      	movs	r3, #64	; 0x40
 8008406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800840a:	e124      	b.n	8008656 <UART_SetConfig+0x5a6>
 800840c:	2380      	movs	r3, #128	; 0x80
 800840e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008412:	e120      	b.n	8008656 <UART_SetConfig+0x5a6>
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4acb      	ldr	r2, [pc, #812]	; (8008748 <UART_SetConfig+0x698>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d176      	bne.n	800850c <UART_SetConfig+0x45c>
 800841e:	4bcb      	ldr	r3, [pc, #812]	; (800874c <UART_SetConfig+0x69c>)
 8008420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008422:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008426:	2b28      	cmp	r3, #40	; 0x28
 8008428:	d86c      	bhi.n	8008504 <UART_SetConfig+0x454>
 800842a:	a201      	add	r2, pc, #4	; (adr r2, 8008430 <UART_SetConfig+0x380>)
 800842c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008430:	080084d5 	.word	0x080084d5
 8008434:	08008505 	.word	0x08008505
 8008438:	08008505 	.word	0x08008505
 800843c:	08008505 	.word	0x08008505
 8008440:	08008505 	.word	0x08008505
 8008444:	08008505 	.word	0x08008505
 8008448:	08008505 	.word	0x08008505
 800844c:	08008505 	.word	0x08008505
 8008450:	080084dd 	.word	0x080084dd
 8008454:	08008505 	.word	0x08008505
 8008458:	08008505 	.word	0x08008505
 800845c:	08008505 	.word	0x08008505
 8008460:	08008505 	.word	0x08008505
 8008464:	08008505 	.word	0x08008505
 8008468:	08008505 	.word	0x08008505
 800846c:	08008505 	.word	0x08008505
 8008470:	080084e5 	.word	0x080084e5
 8008474:	08008505 	.word	0x08008505
 8008478:	08008505 	.word	0x08008505
 800847c:	08008505 	.word	0x08008505
 8008480:	08008505 	.word	0x08008505
 8008484:	08008505 	.word	0x08008505
 8008488:	08008505 	.word	0x08008505
 800848c:	08008505 	.word	0x08008505
 8008490:	080084ed 	.word	0x080084ed
 8008494:	08008505 	.word	0x08008505
 8008498:	08008505 	.word	0x08008505
 800849c:	08008505 	.word	0x08008505
 80084a0:	08008505 	.word	0x08008505
 80084a4:	08008505 	.word	0x08008505
 80084a8:	08008505 	.word	0x08008505
 80084ac:	08008505 	.word	0x08008505
 80084b0:	080084f5 	.word	0x080084f5
 80084b4:	08008505 	.word	0x08008505
 80084b8:	08008505 	.word	0x08008505
 80084bc:	08008505 	.word	0x08008505
 80084c0:	08008505 	.word	0x08008505
 80084c4:	08008505 	.word	0x08008505
 80084c8:	08008505 	.word	0x08008505
 80084cc:	08008505 	.word	0x08008505
 80084d0:	080084fd 	.word	0x080084fd
 80084d4:	2301      	movs	r3, #1
 80084d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084da:	e0bc      	b.n	8008656 <UART_SetConfig+0x5a6>
 80084dc:	2304      	movs	r3, #4
 80084de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084e2:	e0b8      	b.n	8008656 <UART_SetConfig+0x5a6>
 80084e4:	2308      	movs	r3, #8
 80084e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084ea:	e0b4      	b.n	8008656 <UART_SetConfig+0x5a6>
 80084ec:	2310      	movs	r3, #16
 80084ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084f2:	e0b0      	b.n	8008656 <UART_SetConfig+0x5a6>
 80084f4:	2320      	movs	r3, #32
 80084f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084fa:	e0ac      	b.n	8008656 <UART_SetConfig+0x5a6>
 80084fc:	2340      	movs	r3, #64	; 0x40
 80084fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008502:	e0a8      	b.n	8008656 <UART_SetConfig+0x5a6>
 8008504:	2380      	movs	r3, #128	; 0x80
 8008506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800850a:	e0a4      	b.n	8008656 <UART_SetConfig+0x5a6>
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a8f      	ldr	r2, [pc, #572]	; (8008750 <UART_SetConfig+0x6a0>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d130      	bne.n	8008578 <UART_SetConfig+0x4c8>
 8008516:	4b8d      	ldr	r3, [pc, #564]	; (800874c <UART_SetConfig+0x69c>)
 8008518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800851a:	f003 0307 	and.w	r3, r3, #7
 800851e:	2b05      	cmp	r3, #5
 8008520:	d826      	bhi.n	8008570 <UART_SetConfig+0x4c0>
 8008522:	a201      	add	r2, pc, #4	; (adr r2, 8008528 <UART_SetConfig+0x478>)
 8008524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008528:	08008541 	.word	0x08008541
 800852c:	08008549 	.word	0x08008549
 8008530:	08008551 	.word	0x08008551
 8008534:	08008559 	.word	0x08008559
 8008538:	08008561 	.word	0x08008561
 800853c:	08008569 	.word	0x08008569
 8008540:	2300      	movs	r3, #0
 8008542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008546:	e086      	b.n	8008656 <UART_SetConfig+0x5a6>
 8008548:	2304      	movs	r3, #4
 800854a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800854e:	e082      	b.n	8008656 <UART_SetConfig+0x5a6>
 8008550:	2308      	movs	r3, #8
 8008552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008556:	e07e      	b.n	8008656 <UART_SetConfig+0x5a6>
 8008558:	2310      	movs	r3, #16
 800855a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800855e:	e07a      	b.n	8008656 <UART_SetConfig+0x5a6>
 8008560:	2320      	movs	r3, #32
 8008562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008566:	e076      	b.n	8008656 <UART_SetConfig+0x5a6>
 8008568:	2340      	movs	r3, #64	; 0x40
 800856a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800856e:	e072      	b.n	8008656 <UART_SetConfig+0x5a6>
 8008570:	2380      	movs	r3, #128	; 0x80
 8008572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008576:	e06e      	b.n	8008656 <UART_SetConfig+0x5a6>
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a75      	ldr	r2, [pc, #468]	; (8008754 <UART_SetConfig+0x6a4>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d130      	bne.n	80085e4 <UART_SetConfig+0x534>
 8008582:	4b72      	ldr	r3, [pc, #456]	; (800874c <UART_SetConfig+0x69c>)
 8008584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008586:	f003 0307 	and.w	r3, r3, #7
 800858a:	2b05      	cmp	r3, #5
 800858c:	d826      	bhi.n	80085dc <UART_SetConfig+0x52c>
 800858e:	a201      	add	r2, pc, #4	; (adr r2, 8008594 <UART_SetConfig+0x4e4>)
 8008590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008594:	080085ad 	.word	0x080085ad
 8008598:	080085b5 	.word	0x080085b5
 800859c:	080085bd 	.word	0x080085bd
 80085a0:	080085c5 	.word	0x080085c5
 80085a4:	080085cd 	.word	0x080085cd
 80085a8:	080085d5 	.word	0x080085d5
 80085ac:	2300      	movs	r3, #0
 80085ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085b2:	e050      	b.n	8008656 <UART_SetConfig+0x5a6>
 80085b4:	2304      	movs	r3, #4
 80085b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085ba:	e04c      	b.n	8008656 <UART_SetConfig+0x5a6>
 80085bc:	2308      	movs	r3, #8
 80085be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085c2:	e048      	b.n	8008656 <UART_SetConfig+0x5a6>
 80085c4:	2310      	movs	r3, #16
 80085c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085ca:	e044      	b.n	8008656 <UART_SetConfig+0x5a6>
 80085cc:	2320      	movs	r3, #32
 80085ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085d2:	e040      	b.n	8008656 <UART_SetConfig+0x5a6>
 80085d4:	2340      	movs	r3, #64	; 0x40
 80085d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085da:	e03c      	b.n	8008656 <UART_SetConfig+0x5a6>
 80085dc:	2380      	movs	r3, #128	; 0x80
 80085de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085e2:	e038      	b.n	8008656 <UART_SetConfig+0x5a6>
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a5b      	ldr	r2, [pc, #364]	; (8008758 <UART_SetConfig+0x6a8>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d130      	bne.n	8008650 <UART_SetConfig+0x5a0>
 80085ee:	4b57      	ldr	r3, [pc, #348]	; (800874c <UART_SetConfig+0x69c>)
 80085f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085f2:	f003 0307 	and.w	r3, r3, #7
 80085f6:	2b05      	cmp	r3, #5
 80085f8:	d826      	bhi.n	8008648 <UART_SetConfig+0x598>
 80085fa:	a201      	add	r2, pc, #4	; (adr r2, 8008600 <UART_SetConfig+0x550>)
 80085fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008600:	08008619 	.word	0x08008619
 8008604:	08008621 	.word	0x08008621
 8008608:	08008629 	.word	0x08008629
 800860c:	08008631 	.word	0x08008631
 8008610:	08008639 	.word	0x08008639
 8008614:	08008641 	.word	0x08008641
 8008618:	2302      	movs	r3, #2
 800861a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800861e:	e01a      	b.n	8008656 <UART_SetConfig+0x5a6>
 8008620:	2304      	movs	r3, #4
 8008622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008626:	e016      	b.n	8008656 <UART_SetConfig+0x5a6>
 8008628:	2308      	movs	r3, #8
 800862a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800862e:	e012      	b.n	8008656 <UART_SetConfig+0x5a6>
 8008630:	2310      	movs	r3, #16
 8008632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008636:	e00e      	b.n	8008656 <UART_SetConfig+0x5a6>
 8008638:	2320      	movs	r3, #32
 800863a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800863e:	e00a      	b.n	8008656 <UART_SetConfig+0x5a6>
 8008640:	2340      	movs	r3, #64	; 0x40
 8008642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008646:	e006      	b.n	8008656 <UART_SetConfig+0x5a6>
 8008648:	2380      	movs	r3, #128	; 0x80
 800864a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800864e:	e002      	b.n	8008656 <UART_SetConfig+0x5a6>
 8008650:	2380      	movs	r3, #128	; 0x80
 8008652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a3f      	ldr	r2, [pc, #252]	; (8008758 <UART_SetConfig+0x6a8>)
 800865c:	4293      	cmp	r3, r2
 800865e:	f040 80f8 	bne.w	8008852 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008662:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008666:	2b20      	cmp	r3, #32
 8008668:	dc46      	bgt.n	80086f8 <UART_SetConfig+0x648>
 800866a:	2b02      	cmp	r3, #2
 800866c:	f2c0 8082 	blt.w	8008774 <UART_SetConfig+0x6c4>
 8008670:	3b02      	subs	r3, #2
 8008672:	2b1e      	cmp	r3, #30
 8008674:	d87e      	bhi.n	8008774 <UART_SetConfig+0x6c4>
 8008676:	a201      	add	r2, pc, #4	; (adr r2, 800867c <UART_SetConfig+0x5cc>)
 8008678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800867c:	080086ff 	.word	0x080086ff
 8008680:	08008775 	.word	0x08008775
 8008684:	08008707 	.word	0x08008707
 8008688:	08008775 	.word	0x08008775
 800868c:	08008775 	.word	0x08008775
 8008690:	08008775 	.word	0x08008775
 8008694:	08008717 	.word	0x08008717
 8008698:	08008775 	.word	0x08008775
 800869c:	08008775 	.word	0x08008775
 80086a0:	08008775 	.word	0x08008775
 80086a4:	08008775 	.word	0x08008775
 80086a8:	08008775 	.word	0x08008775
 80086ac:	08008775 	.word	0x08008775
 80086b0:	08008775 	.word	0x08008775
 80086b4:	08008727 	.word	0x08008727
 80086b8:	08008775 	.word	0x08008775
 80086bc:	08008775 	.word	0x08008775
 80086c0:	08008775 	.word	0x08008775
 80086c4:	08008775 	.word	0x08008775
 80086c8:	08008775 	.word	0x08008775
 80086cc:	08008775 	.word	0x08008775
 80086d0:	08008775 	.word	0x08008775
 80086d4:	08008775 	.word	0x08008775
 80086d8:	08008775 	.word	0x08008775
 80086dc:	08008775 	.word	0x08008775
 80086e0:	08008775 	.word	0x08008775
 80086e4:	08008775 	.word	0x08008775
 80086e8:	08008775 	.word	0x08008775
 80086ec:	08008775 	.word	0x08008775
 80086f0:	08008775 	.word	0x08008775
 80086f4:	08008767 	.word	0x08008767
 80086f8:	2b40      	cmp	r3, #64	; 0x40
 80086fa:	d037      	beq.n	800876c <UART_SetConfig+0x6bc>
 80086fc:	e03a      	b.n	8008774 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80086fe:	f7fe fe85 	bl	800740c <HAL_RCCEx_GetD3PCLK1Freq>
 8008702:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008704:	e03c      	b.n	8008780 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008706:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800870a:	4618      	mov	r0, r3
 800870c:	f7fe fe94 	bl	8007438 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008712:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008714:	e034      	b.n	8008780 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008716:	f107 0318 	add.w	r3, r7, #24
 800871a:	4618      	mov	r0, r3
 800871c:	f7fe ffe0 	bl	80076e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008720:	69fb      	ldr	r3, [r7, #28]
 8008722:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008724:	e02c      	b.n	8008780 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008726:	4b09      	ldr	r3, [pc, #36]	; (800874c <UART_SetConfig+0x69c>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f003 0320 	and.w	r3, r3, #32
 800872e:	2b00      	cmp	r3, #0
 8008730:	d016      	beq.n	8008760 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008732:	4b06      	ldr	r3, [pc, #24]	; (800874c <UART_SetConfig+0x69c>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	08db      	lsrs	r3, r3, #3
 8008738:	f003 0303 	and.w	r3, r3, #3
 800873c:	4a07      	ldr	r2, [pc, #28]	; (800875c <UART_SetConfig+0x6ac>)
 800873e:	fa22 f303 	lsr.w	r3, r2, r3
 8008742:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008744:	e01c      	b.n	8008780 <UART_SetConfig+0x6d0>
 8008746:	bf00      	nop
 8008748:	40011400 	.word	0x40011400
 800874c:	58024400 	.word	0x58024400
 8008750:	40007800 	.word	0x40007800
 8008754:	40007c00 	.word	0x40007c00
 8008758:	58000c00 	.word	0x58000c00
 800875c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008760:	4b9d      	ldr	r3, [pc, #628]	; (80089d8 <UART_SetConfig+0x928>)
 8008762:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008764:	e00c      	b.n	8008780 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008766:	4b9d      	ldr	r3, [pc, #628]	; (80089dc <UART_SetConfig+0x92c>)
 8008768:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800876a:	e009      	b.n	8008780 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800876c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008770:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008772:	e005      	b.n	8008780 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008774:	2300      	movs	r3, #0
 8008776:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008778:	2301      	movs	r3, #1
 800877a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800877e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008782:	2b00      	cmp	r3, #0
 8008784:	f000 81de 	beq.w	8008b44 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800878c:	4a94      	ldr	r2, [pc, #592]	; (80089e0 <UART_SetConfig+0x930>)
 800878e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008792:	461a      	mov	r2, r3
 8008794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008796:	fbb3 f3f2 	udiv	r3, r3, r2
 800879a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	685a      	ldr	r2, [r3, #4]
 80087a0:	4613      	mov	r3, r2
 80087a2:	005b      	lsls	r3, r3, #1
 80087a4:	4413      	add	r3, r2
 80087a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d305      	bcc.n	80087b8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80087b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d903      	bls.n	80087c0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80087b8:	2301      	movs	r3, #1
 80087ba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80087be:	e1c1      	b.n	8008b44 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087c2:	2200      	movs	r2, #0
 80087c4:	60bb      	str	r3, [r7, #8]
 80087c6:	60fa      	str	r2, [r7, #12]
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087cc:	4a84      	ldr	r2, [pc, #528]	; (80089e0 <UART_SetConfig+0x930>)
 80087ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	2200      	movs	r2, #0
 80087d6:	603b      	str	r3, [r7, #0]
 80087d8:	607a      	str	r2, [r7, #4]
 80087da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80087e2:	f7f7 ff91 	bl	8000708 <__aeabi_uldivmod>
 80087e6:	4602      	mov	r2, r0
 80087e8:	460b      	mov	r3, r1
 80087ea:	4610      	mov	r0, r2
 80087ec:	4619      	mov	r1, r3
 80087ee:	f04f 0200 	mov.w	r2, #0
 80087f2:	f04f 0300 	mov.w	r3, #0
 80087f6:	020b      	lsls	r3, r1, #8
 80087f8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80087fc:	0202      	lsls	r2, r0, #8
 80087fe:	6979      	ldr	r1, [r7, #20]
 8008800:	6849      	ldr	r1, [r1, #4]
 8008802:	0849      	lsrs	r1, r1, #1
 8008804:	2000      	movs	r0, #0
 8008806:	460c      	mov	r4, r1
 8008808:	4605      	mov	r5, r0
 800880a:	eb12 0804 	adds.w	r8, r2, r4
 800880e:	eb43 0905 	adc.w	r9, r3, r5
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	2200      	movs	r2, #0
 8008818:	469a      	mov	sl, r3
 800881a:	4693      	mov	fp, r2
 800881c:	4652      	mov	r2, sl
 800881e:	465b      	mov	r3, fp
 8008820:	4640      	mov	r0, r8
 8008822:	4649      	mov	r1, r9
 8008824:	f7f7 ff70 	bl	8000708 <__aeabi_uldivmod>
 8008828:	4602      	mov	r2, r0
 800882a:	460b      	mov	r3, r1
 800882c:	4613      	mov	r3, r2
 800882e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008832:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008836:	d308      	bcc.n	800884a <UART_SetConfig+0x79a>
 8008838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800883a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800883e:	d204      	bcs.n	800884a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008846:	60da      	str	r2, [r3, #12]
 8008848:	e17c      	b.n	8008b44 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800884a:	2301      	movs	r3, #1
 800884c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008850:	e178      	b.n	8008b44 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	69db      	ldr	r3, [r3, #28]
 8008856:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800885a:	f040 80c5 	bne.w	80089e8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800885e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008862:	2b20      	cmp	r3, #32
 8008864:	dc48      	bgt.n	80088f8 <UART_SetConfig+0x848>
 8008866:	2b00      	cmp	r3, #0
 8008868:	db7b      	blt.n	8008962 <UART_SetConfig+0x8b2>
 800886a:	2b20      	cmp	r3, #32
 800886c:	d879      	bhi.n	8008962 <UART_SetConfig+0x8b2>
 800886e:	a201      	add	r2, pc, #4	; (adr r2, 8008874 <UART_SetConfig+0x7c4>)
 8008870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008874:	080088ff 	.word	0x080088ff
 8008878:	08008907 	.word	0x08008907
 800887c:	08008963 	.word	0x08008963
 8008880:	08008963 	.word	0x08008963
 8008884:	0800890f 	.word	0x0800890f
 8008888:	08008963 	.word	0x08008963
 800888c:	08008963 	.word	0x08008963
 8008890:	08008963 	.word	0x08008963
 8008894:	0800891f 	.word	0x0800891f
 8008898:	08008963 	.word	0x08008963
 800889c:	08008963 	.word	0x08008963
 80088a0:	08008963 	.word	0x08008963
 80088a4:	08008963 	.word	0x08008963
 80088a8:	08008963 	.word	0x08008963
 80088ac:	08008963 	.word	0x08008963
 80088b0:	08008963 	.word	0x08008963
 80088b4:	0800892f 	.word	0x0800892f
 80088b8:	08008963 	.word	0x08008963
 80088bc:	08008963 	.word	0x08008963
 80088c0:	08008963 	.word	0x08008963
 80088c4:	08008963 	.word	0x08008963
 80088c8:	08008963 	.word	0x08008963
 80088cc:	08008963 	.word	0x08008963
 80088d0:	08008963 	.word	0x08008963
 80088d4:	08008963 	.word	0x08008963
 80088d8:	08008963 	.word	0x08008963
 80088dc:	08008963 	.word	0x08008963
 80088e0:	08008963 	.word	0x08008963
 80088e4:	08008963 	.word	0x08008963
 80088e8:	08008963 	.word	0x08008963
 80088ec:	08008963 	.word	0x08008963
 80088f0:	08008963 	.word	0x08008963
 80088f4:	08008955 	.word	0x08008955
 80088f8:	2b40      	cmp	r3, #64	; 0x40
 80088fa:	d02e      	beq.n	800895a <UART_SetConfig+0x8aa>
 80088fc:	e031      	b.n	8008962 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088fe:	f7fc fdcf 	bl	80054a0 <HAL_RCC_GetPCLK1Freq>
 8008902:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008904:	e033      	b.n	800896e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008906:	f7fc fde1 	bl	80054cc <HAL_RCC_GetPCLK2Freq>
 800890a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800890c:	e02f      	b.n	800896e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800890e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008912:	4618      	mov	r0, r3
 8008914:	f7fe fd90 	bl	8007438 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800891a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800891c:	e027      	b.n	800896e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800891e:	f107 0318 	add.w	r3, r7, #24
 8008922:	4618      	mov	r0, r3
 8008924:	f7fe fedc 	bl	80076e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008928:	69fb      	ldr	r3, [r7, #28]
 800892a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800892c:	e01f      	b.n	800896e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800892e:	4b2d      	ldr	r3, [pc, #180]	; (80089e4 <UART_SetConfig+0x934>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f003 0320 	and.w	r3, r3, #32
 8008936:	2b00      	cmp	r3, #0
 8008938:	d009      	beq.n	800894e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800893a:	4b2a      	ldr	r3, [pc, #168]	; (80089e4 <UART_SetConfig+0x934>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	08db      	lsrs	r3, r3, #3
 8008940:	f003 0303 	and.w	r3, r3, #3
 8008944:	4a24      	ldr	r2, [pc, #144]	; (80089d8 <UART_SetConfig+0x928>)
 8008946:	fa22 f303 	lsr.w	r3, r2, r3
 800894a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800894c:	e00f      	b.n	800896e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800894e:	4b22      	ldr	r3, [pc, #136]	; (80089d8 <UART_SetConfig+0x928>)
 8008950:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008952:	e00c      	b.n	800896e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008954:	4b21      	ldr	r3, [pc, #132]	; (80089dc <UART_SetConfig+0x92c>)
 8008956:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008958:	e009      	b.n	800896e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800895a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800895e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008960:	e005      	b.n	800896e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008962:	2300      	movs	r3, #0
 8008964:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008966:	2301      	movs	r3, #1
 8008968:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800896c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800896e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008970:	2b00      	cmp	r3, #0
 8008972:	f000 80e7 	beq.w	8008b44 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800897a:	4a19      	ldr	r2, [pc, #100]	; (80089e0 <UART_SetConfig+0x930>)
 800897c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008980:	461a      	mov	r2, r3
 8008982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008984:	fbb3 f3f2 	udiv	r3, r3, r2
 8008988:	005a      	lsls	r2, r3, #1
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	085b      	lsrs	r3, r3, #1
 8008990:	441a      	add	r2, r3
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	fbb2 f3f3 	udiv	r3, r2, r3
 800899a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800899c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800899e:	2b0f      	cmp	r3, #15
 80089a0:	d916      	bls.n	80089d0 <UART_SetConfig+0x920>
 80089a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089a8:	d212      	bcs.n	80089d0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80089aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	f023 030f 	bic.w	r3, r3, #15
 80089b2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80089b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089b6:	085b      	lsrs	r3, r3, #1
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	f003 0307 	and.w	r3, r3, #7
 80089be:	b29a      	uxth	r2, r3
 80089c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80089c2:	4313      	orrs	r3, r2
 80089c4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80089cc:	60da      	str	r2, [r3, #12]
 80089ce:	e0b9      	b.n	8008b44 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80089d0:	2301      	movs	r3, #1
 80089d2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80089d6:	e0b5      	b.n	8008b44 <UART_SetConfig+0xa94>
 80089d8:	03d09000 	.word	0x03d09000
 80089dc:	003d0900 	.word	0x003d0900
 80089e0:	0800de24 	.word	0x0800de24
 80089e4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80089e8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80089ec:	2b20      	cmp	r3, #32
 80089ee:	dc49      	bgt.n	8008a84 <UART_SetConfig+0x9d4>
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	db7c      	blt.n	8008aee <UART_SetConfig+0xa3e>
 80089f4:	2b20      	cmp	r3, #32
 80089f6:	d87a      	bhi.n	8008aee <UART_SetConfig+0xa3e>
 80089f8:	a201      	add	r2, pc, #4	; (adr r2, 8008a00 <UART_SetConfig+0x950>)
 80089fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089fe:	bf00      	nop
 8008a00:	08008a8b 	.word	0x08008a8b
 8008a04:	08008a93 	.word	0x08008a93
 8008a08:	08008aef 	.word	0x08008aef
 8008a0c:	08008aef 	.word	0x08008aef
 8008a10:	08008a9b 	.word	0x08008a9b
 8008a14:	08008aef 	.word	0x08008aef
 8008a18:	08008aef 	.word	0x08008aef
 8008a1c:	08008aef 	.word	0x08008aef
 8008a20:	08008aab 	.word	0x08008aab
 8008a24:	08008aef 	.word	0x08008aef
 8008a28:	08008aef 	.word	0x08008aef
 8008a2c:	08008aef 	.word	0x08008aef
 8008a30:	08008aef 	.word	0x08008aef
 8008a34:	08008aef 	.word	0x08008aef
 8008a38:	08008aef 	.word	0x08008aef
 8008a3c:	08008aef 	.word	0x08008aef
 8008a40:	08008abb 	.word	0x08008abb
 8008a44:	08008aef 	.word	0x08008aef
 8008a48:	08008aef 	.word	0x08008aef
 8008a4c:	08008aef 	.word	0x08008aef
 8008a50:	08008aef 	.word	0x08008aef
 8008a54:	08008aef 	.word	0x08008aef
 8008a58:	08008aef 	.word	0x08008aef
 8008a5c:	08008aef 	.word	0x08008aef
 8008a60:	08008aef 	.word	0x08008aef
 8008a64:	08008aef 	.word	0x08008aef
 8008a68:	08008aef 	.word	0x08008aef
 8008a6c:	08008aef 	.word	0x08008aef
 8008a70:	08008aef 	.word	0x08008aef
 8008a74:	08008aef 	.word	0x08008aef
 8008a78:	08008aef 	.word	0x08008aef
 8008a7c:	08008aef 	.word	0x08008aef
 8008a80:	08008ae1 	.word	0x08008ae1
 8008a84:	2b40      	cmp	r3, #64	; 0x40
 8008a86:	d02e      	beq.n	8008ae6 <UART_SetConfig+0xa36>
 8008a88:	e031      	b.n	8008aee <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a8a:	f7fc fd09 	bl	80054a0 <HAL_RCC_GetPCLK1Freq>
 8008a8e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008a90:	e033      	b.n	8008afa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a92:	f7fc fd1b 	bl	80054cc <HAL_RCC_GetPCLK2Freq>
 8008a96:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008a98:	e02f      	b.n	8008afa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f7fe fcca 	bl	8007438 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008aa8:	e027      	b.n	8008afa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008aaa:	f107 0318 	add.w	r3, r7, #24
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f7fe fe16 	bl	80076e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008ab4:	69fb      	ldr	r3, [r7, #28]
 8008ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ab8:	e01f      	b.n	8008afa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008aba:	4b2d      	ldr	r3, [pc, #180]	; (8008b70 <UART_SetConfig+0xac0>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f003 0320 	and.w	r3, r3, #32
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d009      	beq.n	8008ada <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008ac6:	4b2a      	ldr	r3, [pc, #168]	; (8008b70 <UART_SetConfig+0xac0>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	08db      	lsrs	r3, r3, #3
 8008acc:	f003 0303 	and.w	r3, r3, #3
 8008ad0:	4a28      	ldr	r2, [pc, #160]	; (8008b74 <UART_SetConfig+0xac4>)
 8008ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8008ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008ad8:	e00f      	b.n	8008afa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008ada:	4b26      	ldr	r3, [pc, #152]	; (8008b74 <UART_SetConfig+0xac4>)
 8008adc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ade:	e00c      	b.n	8008afa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008ae0:	4b25      	ldr	r3, [pc, #148]	; (8008b78 <UART_SetConfig+0xac8>)
 8008ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ae4:	e009      	b.n	8008afa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ae6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008aea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008aec:	e005      	b.n	8008afa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008aee:	2300      	movs	r3, #0
 8008af0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008af2:	2301      	movs	r3, #1
 8008af4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008af8:	bf00      	nop
    }

    if (pclk != 0U)
 8008afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d021      	beq.n	8008b44 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b04:	4a1d      	ldr	r2, [pc, #116]	; (8008b7c <UART_SetConfig+0xacc>)
 8008b06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b0e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	685b      	ldr	r3, [r3, #4]
 8008b16:	085b      	lsrs	r3, r3, #1
 8008b18:	441a      	add	r2, r3
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b22:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b26:	2b0f      	cmp	r3, #15
 8008b28:	d909      	bls.n	8008b3e <UART_SetConfig+0xa8e>
 8008b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b30:	d205      	bcs.n	8008b3e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b34:	b29a      	uxth	r2, r3
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	60da      	str	r2, [r3, #12]
 8008b3c:	e002      	b.n	8008b44 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008b3e:	2301      	movs	r3, #1
 8008b40:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	2201      	movs	r2, #1
 8008b48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	2201      	movs	r2, #1
 8008b50:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	2200      	movs	r2, #0
 8008b58:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008b60:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3748      	adds	r7, #72	; 0x48
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b6e:	bf00      	nop
 8008b70:	58024400 	.word	0x58024400
 8008b74:	03d09000 	.word	0x03d09000
 8008b78:	003d0900 	.word	0x003d0900
 8008b7c:	0800de24 	.word	0x0800de24

08008b80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b083      	sub	sp, #12
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b8c:	f003 0301 	and.w	r3, r3, #1
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d00a      	beq.n	8008baa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	430a      	orrs	r2, r1
 8008ba8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bae:	f003 0302 	and.w	r3, r3, #2
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d00a      	beq.n	8008bcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	430a      	orrs	r2, r1
 8008bca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bd0:	f003 0304 	and.w	r3, r3, #4
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d00a      	beq.n	8008bee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	430a      	orrs	r2, r1
 8008bec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bf2:	f003 0308 	and.w	r3, r3, #8
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d00a      	beq.n	8008c10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	430a      	orrs	r2, r1
 8008c0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c14:	f003 0310 	and.w	r3, r3, #16
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d00a      	beq.n	8008c32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	689b      	ldr	r3, [r3, #8]
 8008c22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	430a      	orrs	r2, r1
 8008c30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c36:	f003 0320 	and.w	r3, r3, #32
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d00a      	beq.n	8008c54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	689b      	ldr	r3, [r3, #8]
 8008c44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	430a      	orrs	r2, r1
 8008c52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d01a      	beq.n	8008c96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	430a      	orrs	r2, r1
 8008c74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c7e:	d10a      	bne.n	8008c96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	430a      	orrs	r2, r1
 8008c94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d00a      	beq.n	8008cb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	430a      	orrs	r2, r1
 8008cb6:	605a      	str	r2, [r3, #4]
  }
}
 8008cb8:	bf00      	nop
 8008cba:	370c      	adds	r7, #12
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr

08008cc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b098      	sub	sp, #96	; 0x60
 8008cc8:	af02      	add	r7, sp, #8
 8008cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008cd4:	f7f9 f808 	bl	8001ce8 <HAL_GetTick>
 8008cd8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f003 0308 	and.w	r3, r3, #8
 8008ce4:	2b08      	cmp	r3, #8
 8008ce6:	d12f      	bne.n	8008d48 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ce8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008cec:	9300      	str	r3, [sp, #0]
 8008cee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 f88e 	bl	8008e18 <UART_WaitOnFlagUntilTimeout>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d022      	beq.n	8008d48 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d0a:	e853 3f00 	ldrex	r3, [r3]
 8008d0e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d16:	653b      	str	r3, [r7, #80]	; 0x50
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d20:	647b      	str	r3, [r7, #68]	; 0x44
 8008d22:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d24:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008d26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d28:	e841 2300 	strex	r3, r2, [r1]
 8008d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d1e6      	bne.n	8008d02 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2220      	movs	r2, #32
 8008d38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d44:	2303      	movs	r3, #3
 8008d46:	e063      	b.n	8008e10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f003 0304 	and.w	r3, r3, #4
 8008d52:	2b04      	cmp	r3, #4
 8008d54:	d149      	bne.n	8008dea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d56:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d5a:	9300      	str	r3, [sp, #0]
 8008d5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d5e:	2200      	movs	r2, #0
 8008d60:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f000 f857 	bl	8008e18 <UART_WaitOnFlagUntilTimeout>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d03c      	beq.n	8008dea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d78:	e853 3f00 	ldrex	r3, [r3]
 8008d7c:	623b      	str	r3, [r7, #32]
   return(result);
 8008d7e:	6a3b      	ldr	r3, [r7, #32]
 8008d80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d8e:	633b      	str	r3, [r7, #48]	; 0x30
 8008d90:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d96:	e841 2300 	strex	r3, r2, [r1]
 8008d9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d1e6      	bne.n	8008d70 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	3308      	adds	r3, #8
 8008da8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	e853 3f00 	ldrex	r3, [r3]
 8008db0:	60fb      	str	r3, [r7, #12]
   return(result);
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	f023 0301 	bic.w	r3, r3, #1
 8008db8:	64bb      	str	r3, [r7, #72]	; 0x48
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	3308      	adds	r3, #8
 8008dc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008dc2:	61fa      	str	r2, [r7, #28]
 8008dc4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc6:	69b9      	ldr	r1, [r7, #24]
 8008dc8:	69fa      	ldr	r2, [r7, #28]
 8008dca:	e841 2300 	strex	r3, r2, [r1]
 8008dce:	617b      	str	r3, [r7, #20]
   return(result);
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d1e5      	bne.n	8008da2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2220      	movs	r2, #32
 8008dda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2200      	movs	r2, #0
 8008de2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008de6:	2303      	movs	r3, #3
 8008de8:	e012      	b.n	8008e10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2220      	movs	r2, #32
 8008dee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2220      	movs	r2, #32
 8008df6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2200      	movs	r2, #0
 8008e04:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008e0e:	2300      	movs	r3, #0
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3758      	adds	r7, #88	; 0x58
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b084      	sub	sp, #16
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	60f8      	str	r0, [r7, #12]
 8008e20:	60b9      	str	r1, [r7, #8]
 8008e22:	603b      	str	r3, [r7, #0]
 8008e24:	4613      	mov	r3, r2
 8008e26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e28:	e049      	b.n	8008ebe <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e2a:	69bb      	ldr	r3, [r7, #24]
 8008e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e30:	d045      	beq.n	8008ebe <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e32:	f7f8 ff59 	bl	8001ce8 <HAL_GetTick>
 8008e36:	4602      	mov	r2, r0
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	1ad3      	subs	r3, r2, r3
 8008e3c:	69ba      	ldr	r2, [r7, #24]
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d302      	bcc.n	8008e48 <UART_WaitOnFlagUntilTimeout+0x30>
 8008e42:	69bb      	ldr	r3, [r7, #24]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d101      	bne.n	8008e4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008e48:	2303      	movs	r3, #3
 8008e4a:	e048      	b.n	8008ede <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f003 0304 	and.w	r3, r3, #4
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d031      	beq.n	8008ebe <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	69db      	ldr	r3, [r3, #28]
 8008e60:	f003 0308 	and.w	r3, r3, #8
 8008e64:	2b08      	cmp	r3, #8
 8008e66:	d110      	bne.n	8008e8a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	2208      	movs	r2, #8
 8008e6e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008e70:	68f8      	ldr	r0, [r7, #12]
 8008e72:	f000 f839 	bl	8008ee8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2208      	movs	r2, #8
 8008e7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2200      	movs	r2, #0
 8008e82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8008e86:	2301      	movs	r3, #1
 8008e88:	e029      	b.n	8008ede <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	69db      	ldr	r3, [r3, #28]
 8008e90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e98:	d111      	bne.n	8008ebe <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ea2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ea4:	68f8      	ldr	r0, [r7, #12]
 8008ea6:	f000 f81f 	bl	8008ee8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2220      	movs	r2, #32
 8008eae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008eba:	2303      	movs	r3, #3
 8008ebc:	e00f      	b.n	8008ede <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	69da      	ldr	r2, [r3, #28]
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	4013      	ands	r3, r2
 8008ec8:	68ba      	ldr	r2, [r7, #8]
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	bf0c      	ite	eq
 8008ece:	2301      	moveq	r3, #1
 8008ed0:	2300      	movne	r3, #0
 8008ed2:	b2db      	uxtb	r3, r3
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	79fb      	ldrb	r3, [r7, #7]
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d0a6      	beq.n	8008e2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008edc:	2300      	movs	r3, #0
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3710      	adds	r7, #16
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
	...

08008ee8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b095      	sub	sp, #84	; 0x54
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ef8:	e853 3f00 	ldrex	r3, [r3]
 8008efc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f0e:	643b      	str	r3, [r7, #64]	; 0x40
 8008f10:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f12:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008f14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008f16:	e841 2300 	strex	r3, r2, [r1]
 8008f1a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d1e6      	bne.n	8008ef0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	3308      	adds	r3, #8
 8008f28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f2a:	6a3b      	ldr	r3, [r7, #32]
 8008f2c:	e853 3f00 	ldrex	r3, [r3]
 8008f30:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f32:	69fa      	ldr	r2, [r7, #28]
 8008f34:	4b1e      	ldr	r3, [pc, #120]	; (8008fb0 <UART_EndRxTransfer+0xc8>)
 8008f36:	4013      	ands	r3, r2
 8008f38:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	3308      	adds	r3, #8
 8008f40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008f44:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f4a:	e841 2300 	strex	r3, r2, [r1]
 8008f4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d1e5      	bne.n	8008f22 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f5a:	2b01      	cmp	r3, #1
 8008f5c:	d118      	bne.n	8008f90 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	e853 3f00 	ldrex	r3, [r3]
 8008f6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	f023 0310 	bic.w	r3, r3, #16
 8008f72:	647b      	str	r3, [r7, #68]	; 0x44
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	461a      	mov	r2, r3
 8008f7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f7c:	61bb      	str	r3, [r7, #24]
 8008f7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f80:	6979      	ldr	r1, [r7, #20]
 8008f82:	69ba      	ldr	r2, [r7, #24]
 8008f84:	e841 2300 	strex	r3, r2, [r1]
 8008f88:	613b      	str	r3, [r7, #16]
   return(result);
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d1e6      	bne.n	8008f5e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2220      	movs	r2, #32
 8008f94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008fa4:	bf00      	nop
 8008fa6:	3754      	adds	r7, #84	; 0x54
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr
 8008fb0:	effffffe 	.word	0xeffffffe

08008fb4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b085      	sub	sp, #20
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	d101      	bne.n	8008fca <HAL_UARTEx_DisableFifoMode+0x16>
 8008fc6:	2302      	movs	r3, #2
 8008fc8:	e027      	b.n	800901a <HAL_UARTEx_DisableFifoMode+0x66>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2201      	movs	r2, #1
 8008fce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2224      	movs	r2, #36	; 0x24
 8008fd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	681a      	ldr	r2, [r3, #0]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f022 0201 	bic.w	r2, r2, #1
 8008ff0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008ff8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	68fa      	ldr	r2, [r7, #12]
 8009006:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2220      	movs	r2, #32
 800900c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2200      	movs	r2, #0
 8009014:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009018:	2300      	movs	r3, #0
}
 800901a:	4618      	mov	r0, r3
 800901c:	3714      	adds	r7, #20
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr

08009026 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009026:	b580      	push	{r7, lr}
 8009028:	b084      	sub	sp, #16
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
 800902e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009036:	2b01      	cmp	r3, #1
 8009038:	d101      	bne.n	800903e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800903a:	2302      	movs	r3, #2
 800903c:	e02d      	b.n	800909a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2201      	movs	r2, #1
 8009042:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2224      	movs	r2, #36	; 0x24
 800904a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	681a      	ldr	r2, [r3, #0]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f022 0201 	bic.w	r2, r2, #1
 8009064:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	689b      	ldr	r3, [r3, #8]
 800906c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	683a      	ldr	r2, [r7, #0]
 8009076:	430a      	orrs	r2, r1
 8009078:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 f850 	bl	8009120 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	68fa      	ldr	r2, [r7, #12]
 8009086:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2220      	movs	r2, #32
 800908c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2200      	movs	r2, #0
 8009094:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009098:	2300      	movs	r3, #0
}
 800909a:	4618      	mov	r0, r3
 800909c:	3710      	adds	r7, #16
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}

080090a2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80090a2:	b580      	push	{r7, lr}
 80090a4:	b084      	sub	sp, #16
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
 80090aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80090b2:	2b01      	cmp	r3, #1
 80090b4:	d101      	bne.n	80090ba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80090b6:	2302      	movs	r3, #2
 80090b8:	e02d      	b.n	8009116 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2201      	movs	r2, #1
 80090be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2224      	movs	r2, #36	; 0x24
 80090c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	681a      	ldr	r2, [r3, #0]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f022 0201 	bic.w	r2, r2, #1
 80090e0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	689b      	ldr	r3, [r3, #8]
 80090e8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	683a      	ldr	r2, [r7, #0]
 80090f2:	430a      	orrs	r2, r1
 80090f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f000 f812 	bl	8009120 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	68fa      	ldr	r2, [r7, #12]
 8009102:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2220      	movs	r2, #32
 8009108:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2200      	movs	r2, #0
 8009110:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009114:	2300      	movs	r3, #0
}
 8009116:	4618      	mov	r0, r3
 8009118:	3710      	adds	r7, #16
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}
	...

08009120 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009120:	b480      	push	{r7}
 8009122:	b085      	sub	sp, #20
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800912c:	2b00      	cmp	r3, #0
 800912e:	d108      	bne.n	8009142 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2201      	movs	r2, #1
 8009134:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2201      	movs	r2, #1
 800913c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009140:	e031      	b.n	80091a6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009142:	2310      	movs	r3, #16
 8009144:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009146:	2310      	movs	r3, #16
 8009148:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	689b      	ldr	r3, [r3, #8]
 8009150:	0e5b      	lsrs	r3, r3, #25
 8009152:	b2db      	uxtb	r3, r3
 8009154:	f003 0307 	and.w	r3, r3, #7
 8009158:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	689b      	ldr	r3, [r3, #8]
 8009160:	0f5b      	lsrs	r3, r3, #29
 8009162:	b2db      	uxtb	r3, r3
 8009164:	f003 0307 	and.w	r3, r3, #7
 8009168:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800916a:	7bbb      	ldrb	r3, [r7, #14]
 800916c:	7b3a      	ldrb	r2, [r7, #12]
 800916e:	4911      	ldr	r1, [pc, #68]	; (80091b4 <UARTEx_SetNbDataToProcess+0x94>)
 8009170:	5c8a      	ldrb	r2, [r1, r2]
 8009172:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009176:	7b3a      	ldrb	r2, [r7, #12]
 8009178:	490f      	ldr	r1, [pc, #60]	; (80091b8 <UARTEx_SetNbDataToProcess+0x98>)
 800917a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800917c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009180:	b29a      	uxth	r2, r3
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009188:	7bfb      	ldrb	r3, [r7, #15]
 800918a:	7b7a      	ldrb	r2, [r7, #13]
 800918c:	4909      	ldr	r1, [pc, #36]	; (80091b4 <UARTEx_SetNbDataToProcess+0x94>)
 800918e:	5c8a      	ldrb	r2, [r1, r2]
 8009190:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009194:	7b7a      	ldrb	r2, [r7, #13]
 8009196:	4908      	ldr	r1, [pc, #32]	; (80091b8 <UARTEx_SetNbDataToProcess+0x98>)
 8009198:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800919a:	fb93 f3f2 	sdiv	r3, r3, r2
 800919e:	b29a      	uxth	r2, r3
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80091a6:	bf00      	nop
 80091a8:	3714      	adds	r7, #20
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr
 80091b2:	bf00      	nop
 80091b4:	0800de3c 	.word	0x0800de3c
 80091b8:	0800de44 	.word	0x0800de44

080091bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80091bc:	b084      	sub	sp, #16
 80091be:	b580      	push	{r7, lr}
 80091c0:	b084      	sub	sp, #16
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	6078      	str	r0, [r7, #4]
 80091c6:	f107 001c 	add.w	r0, r7, #28
 80091ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80091ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d120      	bne.n	8009216 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	68da      	ldr	r2, [r3, #12]
 80091e4:	4b2a      	ldr	r3, [pc, #168]	; (8009290 <USB_CoreInit+0xd4>)
 80091e6:	4013      	ands	r3, r2
 80091e8:	687a      	ldr	r2, [r7, #4]
 80091ea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	68db      	ldr	r3, [r3, #12]
 80091f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80091f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091fa:	2b01      	cmp	r3, #1
 80091fc:	d105      	bne.n	800920a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	68db      	ldr	r3, [r3, #12]
 8009202:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 faac 	bl	8009768 <USB_CoreReset>
 8009210:	4603      	mov	r3, r0
 8009212:	73fb      	strb	r3, [r7, #15]
 8009214:	e01a      	b.n	800924c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	68db      	ldr	r3, [r3, #12]
 800921a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f000 faa0 	bl	8009768 <USB_CoreReset>
 8009228:	4603      	mov	r3, r0
 800922a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800922c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800922e:	2b00      	cmp	r3, #0
 8009230:	d106      	bne.n	8009240 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009236:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	639a      	str	r2, [r3, #56]	; 0x38
 800923e:	e005      	b.n	800924c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009244:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800924c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800924e:	2b01      	cmp	r3, #1
 8009250:	d116      	bne.n	8009280 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009256:	b29a      	uxth	r2, r3
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009260:	4b0c      	ldr	r3, [pc, #48]	; (8009294 <USB_CoreInit+0xd8>)
 8009262:	4313      	orrs	r3, r2
 8009264:	687a      	ldr	r2, [r7, #4]
 8009266:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	689b      	ldr	r3, [r3, #8]
 800926c:	f043 0206 	orr.w	r2, r3, #6
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	689b      	ldr	r3, [r3, #8]
 8009278:	f043 0220 	orr.w	r2, r3, #32
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009280:	7bfb      	ldrb	r3, [r7, #15]
}
 8009282:	4618      	mov	r0, r3
 8009284:	3710      	adds	r7, #16
 8009286:	46bd      	mov	sp, r7
 8009288:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800928c:	b004      	add	sp, #16
 800928e:	4770      	bx	lr
 8009290:	ffbdffbf 	.word	0xffbdffbf
 8009294:	03ee0000 	.word	0x03ee0000

08009298 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009298:	b480      	push	{r7}
 800929a:	b083      	sub	sp, #12
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	689b      	ldr	r3, [r3, #8]
 80092a4:	f023 0201 	bic.w	r2, r3, #1
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80092ac:	2300      	movs	r3, #0
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	370c      	adds	r7, #12
 80092b2:	46bd      	mov	sp, r7
 80092b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b8:	4770      	bx	lr

080092ba <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80092ba:	b580      	push	{r7, lr}
 80092bc:	b084      	sub	sp, #16
 80092be:	af00      	add	r7, sp, #0
 80092c0:	6078      	str	r0, [r7, #4]
 80092c2:	460b      	mov	r3, r1
 80092c4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80092c6:	2300      	movs	r3, #0
 80092c8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	68db      	ldr	r3, [r3, #12]
 80092ce:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80092d6:	78fb      	ldrb	r3, [r7, #3]
 80092d8:	2b01      	cmp	r3, #1
 80092da:	d115      	bne.n	8009308 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	68db      	ldr	r3, [r3, #12]
 80092e0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80092e8:	2001      	movs	r0, #1
 80092ea:	f7f8 fd09 	bl	8001d00 <HAL_Delay>
      ms++;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	3301      	adds	r3, #1
 80092f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f000 fa29 	bl	800974c <USB_GetMode>
 80092fa:	4603      	mov	r3, r0
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d01e      	beq.n	800933e <USB_SetCurrentMode+0x84>
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	2b31      	cmp	r3, #49	; 0x31
 8009304:	d9f0      	bls.n	80092e8 <USB_SetCurrentMode+0x2e>
 8009306:	e01a      	b.n	800933e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009308:	78fb      	ldrb	r3, [r7, #3]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d115      	bne.n	800933a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	68db      	ldr	r3, [r3, #12]
 8009312:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800931a:	2001      	movs	r0, #1
 800931c:	f7f8 fcf0 	bl	8001d00 <HAL_Delay>
      ms++;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	3301      	adds	r3, #1
 8009324:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 fa10 	bl	800974c <USB_GetMode>
 800932c:	4603      	mov	r3, r0
 800932e:	2b00      	cmp	r3, #0
 8009330:	d005      	beq.n	800933e <USB_SetCurrentMode+0x84>
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2b31      	cmp	r3, #49	; 0x31
 8009336:	d9f0      	bls.n	800931a <USB_SetCurrentMode+0x60>
 8009338:	e001      	b.n	800933e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800933a:	2301      	movs	r3, #1
 800933c:	e005      	b.n	800934a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2b32      	cmp	r3, #50	; 0x32
 8009342:	d101      	bne.n	8009348 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009344:	2301      	movs	r3, #1
 8009346:	e000      	b.n	800934a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009348:	2300      	movs	r3, #0
}
 800934a:	4618      	mov	r0, r3
 800934c:	3710      	adds	r7, #16
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}
	...

08009354 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009354:	b084      	sub	sp, #16
 8009356:	b580      	push	{r7, lr}
 8009358:	b086      	sub	sp, #24
 800935a:	af00      	add	r7, sp, #0
 800935c:	6078      	str	r0, [r7, #4]
 800935e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009362:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009366:	2300      	movs	r3, #0
 8009368:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800936e:	2300      	movs	r3, #0
 8009370:	613b      	str	r3, [r7, #16]
 8009372:	e009      	b.n	8009388 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009374:	687a      	ldr	r2, [r7, #4]
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	3340      	adds	r3, #64	; 0x40
 800937a:	009b      	lsls	r3, r3, #2
 800937c:	4413      	add	r3, r2
 800937e:	2200      	movs	r2, #0
 8009380:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	3301      	adds	r3, #1
 8009386:	613b      	str	r3, [r7, #16]
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	2b0e      	cmp	r3, #14
 800938c:	d9f2      	bls.n	8009374 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800938e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009390:	2b00      	cmp	r3, #0
 8009392:	d11c      	bne.n	80093ce <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800939a:	685b      	ldr	r3, [r3, #4]
 800939c:	68fa      	ldr	r2, [r7, #12]
 800939e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80093a2:	f043 0302 	orr.w	r3, r3, #2
 80093a6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ac:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	601a      	str	r2, [r3, #0]
 80093cc:	e005      	b.n	80093da <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093d2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80093e0:	461a      	mov	r2, r3
 80093e2:	2300      	movs	r3, #0
 80093e4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093ec:	4619      	mov	r1, r3
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093f4:	461a      	mov	r2, r3
 80093f6:	680b      	ldr	r3, [r1, #0]
 80093f8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80093fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	d10c      	bne.n	800941a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009402:	2b00      	cmp	r3, #0
 8009404:	d104      	bne.n	8009410 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009406:	2100      	movs	r1, #0
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f000 f965 	bl	80096d8 <USB_SetDevSpeed>
 800940e:	e008      	b.n	8009422 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009410:	2101      	movs	r1, #1
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f000 f960 	bl	80096d8 <USB_SetDevSpeed>
 8009418:	e003      	b.n	8009422 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800941a:	2103      	movs	r1, #3
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 f95b 	bl	80096d8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009422:	2110      	movs	r1, #16
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f000 f8f3 	bl	8009610 <USB_FlushTxFifo>
 800942a:	4603      	mov	r3, r0
 800942c:	2b00      	cmp	r3, #0
 800942e:	d001      	beq.n	8009434 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8009430:	2301      	movs	r3, #1
 8009432:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f000 f91f 	bl	8009678 <USB_FlushRxFifo>
 800943a:	4603      	mov	r3, r0
 800943c:	2b00      	cmp	r3, #0
 800943e:	d001      	beq.n	8009444 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8009440:	2301      	movs	r3, #1
 8009442:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800944a:	461a      	mov	r2, r3
 800944c:	2300      	movs	r3, #0
 800944e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009456:	461a      	mov	r2, r3
 8009458:	2300      	movs	r3, #0
 800945a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009462:	461a      	mov	r2, r3
 8009464:	2300      	movs	r3, #0
 8009466:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009468:	2300      	movs	r3, #0
 800946a:	613b      	str	r3, [r7, #16]
 800946c:	e043      	b.n	80094f6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	015a      	lsls	r2, r3, #5
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	4413      	add	r3, r2
 8009476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009480:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009484:	d118      	bne.n	80094b8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d10a      	bne.n	80094a2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	015a      	lsls	r2, r3, #5
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	4413      	add	r3, r2
 8009494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009498:	461a      	mov	r2, r3
 800949a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800949e:	6013      	str	r3, [r2, #0]
 80094a0:	e013      	b.n	80094ca <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	015a      	lsls	r2, r3, #5
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	4413      	add	r3, r2
 80094aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094ae:	461a      	mov	r2, r3
 80094b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80094b4:	6013      	str	r3, [r2, #0]
 80094b6:	e008      	b.n	80094ca <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	015a      	lsls	r2, r3, #5
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	4413      	add	r3, r2
 80094c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094c4:	461a      	mov	r2, r3
 80094c6:	2300      	movs	r3, #0
 80094c8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	015a      	lsls	r2, r3, #5
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	4413      	add	r3, r2
 80094d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094d6:	461a      	mov	r2, r3
 80094d8:	2300      	movs	r3, #0
 80094da:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	015a      	lsls	r2, r3, #5
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	4413      	add	r3, r2
 80094e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094e8:	461a      	mov	r2, r3
 80094ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80094ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	3301      	adds	r3, #1
 80094f4:	613b      	str	r3, [r7, #16]
 80094f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f8:	693a      	ldr	r2, [r7, #16]
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d3b7      	bcc.n	800946e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80094fe:	2300      	movs	r3, #0
 8009500:	613b      	str	r3, [r7, #16]
 8009502:	e043      	b.n	800958c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	015a      	lsls	r2, r3, #5
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	4413      	add	r3, r2
 800950c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009516:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800951a:	d118      	bne.n	800954e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d10a      	bne.n	8009538 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	015a      	lsls	r2, r3, #5
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	4413      	add	r3, r2
 800952a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800952e:	461a      	mov	r2, r3
 8009530:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009534:	6013      	str	r3, [r2, #0]
 8009536:	e013      	b.n	8009560 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	015a      	lsls	r2, r3, #5
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	4413      	add	r3, r2
 8009540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009544:	461a      	mov	r2, r3
 8009546:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800954a:	6013      	str	r3, [r2, #0]
 800954c:	e008      	b.n	8009560 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	015a      	lsls	r2, r3, #5
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	4413      	add	r3, r2
 8009556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800955a:	461a      	mov	r2, r3
 800955c:	2300      	movs	r3, #0
 800955e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	015a      	lsls	r2, r3, #5
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	4413      	add	r3, r2
 8009568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800956c:	461a      	mov	r2, r3
 800956e:	2300      	movs	r3, #0
 8009570:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	015a      	lsls	r2, r3, #5
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	4413      	add	r3, r2
 800957a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800957e:	461a      	mov	r2, r3
 8009580:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009584:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	3301      	adds	r3, #1
 800958a:	613b      	str	r3, [r7, #16]
 800958c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800958e:	693a      	ldr	r2, [r7, #16]
 8009590:	429a      	cmp	r2, r3
 8009592:	d3b7      	bcc.n	8009504 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800959a:	691b      	ldr	r3, [r3, #16]
 800959c:	68fa      	ldr	r2, [r7, #12]
 800959e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80095a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095a6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2200      	movs	r2, #0
 80095ac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80095b4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80095b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d105      	bne.n	80095c8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	699b      	ldr	r3, [r3, #24]
 80095c0:	f043 0210 	orr.w	r2, r3, #16
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	699a      	ldr	r2, [r3, #24]
 80095cc:	4b0e      	ldr	r3, [pc, #56]	; (8009608 <USB_DevInit+0x2b4>)
 80095ce:	4313      	orrs	r3, r2
 80095d0:	687a      	ldr	r2, [r7, #4]
 80095d2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80095d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d005      	beq.n	80095e6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	699b      	ldr	r3, [r3, #24]
 80095de:	f043 0208 	orr.w	r2, r3, #8
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80095e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	d105      	bne.n	80095f8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	699a      	ldr	r2, [r3, #24]
 80095f0:	4b06      	ldr	r3, [pc, #24]	; (800960c <USB_DevInit+0x2b8>)
 80095f2:	4313      	orrs	r3, r2
 80095f4:	687a      	ldr	r2, [r7, #4]
 80095f6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80095f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3718      	adds	r7, #24
 80095fe:	46bd      	mov	sp, r7
 8009600:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009604:	b004      	add	sp, #16
 8009606:	4770      	bx	lr
 8009608:	803c3800 	.word	0x803c3800
 800960c:	40000004 	.word	0x40000004

08009610 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009610:	b480      	push	{r7}
 8009612:	b085      	sub	sp, #20
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800961a:	2300      	movs	r3, #0
 800961c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	3301      	adds	r3, #1
 8009622:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	4a13      	ldr	r2, [pc, #76]	; (8009674 <USB_FlushTxFifo+0x64>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d901      	bls.n	8009630 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800962c:	2303      	movs	r3, #3
 800962e:	e01b      	b.n	8009668 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	691b      	ldr	r3, [r3, #16]
 8009634:	2b00      	cmp	r3, #0
 8009636:	daf2      	bge.n	800961e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009638:	2300      	movs	r3, #0
 800963a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	019b      	lsls	r3, r3, #6
 8009640:	f043 0220 	orr.w	r2, r3, #32
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	3301      	adds	r3, #1
 800964c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	4a08      	ldr	r2, [pc, #32]	; (8009674 <USB_FlushTxFifo+0x64>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d901      	bls.n	800965a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009656:	2303      	movs	r3, #3
 8009658:	e006      	b.n	8009668 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	691b      	ldr	r3, [r3, #16]
 800965e:	f003 0320 	and.w	r3, r3, #32
 8009662:	2b20      	cmp	r3, #32
 8009664:	d0f0      	beq.n	8009648 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009666:	2300      	movs	r3, #0
}
 8009668:	4618      	mov	r0, r3
 800966a:	3714      	adds	r7, #20
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr
 8009674:	00030d40 	.word	0x00030d40

08009678 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009678:	b480      	push	{r7}
 800967a:	b085      	sub	sp, #20
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009680:	2300      	movs	r3, #0
 8009682:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	3301      	adds	r3, #1
 8009688:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	4a11      	ldr	r2, [pc, #68]	; (80096d4 <USB_FlushRxFifo+0x5c>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d901      	bls.n	8009696 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009692:	2303      	movs	r3, #3
 8009694:	e018      	b.n	80096c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	691b      	ldr	r3, [r3, #16]
 800969a:	2b00      	cmp	r3, #0
 800969c:	daf2      	bge.n	8009684 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800969e:	2300      	movs	r3, #0
 80096a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2210      	movs	r2, #16
 80096a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	3301      	adds	r3, #1
 80096ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	4a08      	ldr	r2, [pc, #32]	; (80096d4 <USB_FlushRxFifo+0x5c>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d901      	bls.n	80096ba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80096b6:	2303      	movs	r3, #3
 80096b8:	e006      	b.n	80096c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	691b      	ldr	r3, [r3, #16]
 80096be:	f003 0310 	and.w	r3, r3, #16
 80096c2:	2b10      	cmp	r3, #16
 80096c4:	d0f0      	beq.n	80096a8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80096c6:	2300      	movs	r3, #0
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3714      	adds	r7, #20
 80096cc:	46bd      	mov	sp, r7
 80096ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d2:	4770      	bx	lr
 80096d4:	00030d40 	.word	0x00030d40

080096d8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80096d8:	b480      	push	{r7}
 80096da:	b085      	sub	sp, #20
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	460b      	mov	r3, r1
 80096e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096ee:	681a      	ldr	r2, [r3, #0]
 80096f0:	78fb      	ldrb	r3, [r7, #3]
 80096f2:	68f9      	ldr	r1, [r7, #12]
 80096f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80096f8:	4313      	orrs	r3, r2
 80096fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80096fc:	2300      	movs	r3, #0
}
 80096fe:	4618      	mov	r0, r3
 8009700:	3714      	adds	r7, #20
 8009702:	46bd      	mov	sp, r7
 8009704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009708:	4770      	bx	lr

0800970a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800970a:	b480      	push	{r7}
 800970c:	b085      	sub	sp, #20
 800970e:	af00      	add	r7, sp, #0
 8009710:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	68fa      	ldr	r2, [r7, #12]
 8009720:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009724:	f023 0303 	bic.w	r3, r3, #3
 8009728:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	68fa      	ldr	r2, [r7, #12]
 8009734:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009738:	f043 0302 	orr.w	r3, r3, #2
 800973c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800973e:	2300      	movs	r3, #0
}
 8009740:	4618      	mov	r0, r3
 8009742:	3714      	adds	r7, #20
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr

0800974c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800974c:	b480      	push	{r7}
 800974e:	b083      	sub	sp, #12
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	695b      	ldr	r3, [r3, #20]
 8009758:	f003 0301 	and.w	r3, r3, #1
}
 800975c:	4618      	mov	r0, r3
 800975e:	370c      	adds	r7, #12
 8009760:	46bd      	mov	sp, r7
 8009762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009766:	4770      	bx	lr

08009768 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009768:	b480      	push	{r7}
 800976a:	b085      	sub	sp, #20
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009770:	2300      	movs	r3, #0
 8009772:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	3301      	adds	r3, #1
 8009778:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	4a13      	ldr	r2, [pc, #76]	; (80097cc <USB_CoreReset+0x64>)
 800977e:	4293      	cmp	r3, r2
 8009780:	d901      	bls.n	8009786 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009782:	2303      	movs	r3, #3
 8009784:	e01b      	b.n	80097be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	691b      	ldr	r3, [r3, #16]
 800978a:	2b00      	cmp	r3, #0
 800978c:	daf2      	bge.n	8009774 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800978e:	2300      	movs	r3, #0
 8009790:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	691b      	ldr	r3, [r3, #16]
 8009796:	f043 0201 	orr.w	r2, r3, #1
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	3301      	adds	r3, #1
 80097a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	4a09      	ldr	r2, [pc, #36]	; (80097cc <USB_CoreReset+0x64>)
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d901      	bls.n	80097b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80097ac:	2303      	movs	r3, #3
 80097ae:	e006      	b.n	80097be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	691b      	ldr	r3, [r3, #16]
 80097b4:	f003 0301 	and.w	r3, r3, #1
 80097b8:	2b01      	cmp	r3, #1
 80097ba:	d0f0      	beq.n	800979e <USB_CoreReset+0x36>

  return HAL_OK;
 80097bc:	2300      	movs	r3, #0
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3714      	adds	r7, #20
 80097c2:	46bd      	mov	sp, r7
 80097c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c8:	4770      	bx	lr
 80097ca:	bf00      	nop
 80097cc:	00030d40 	.word	0x00030d40

080097d0 <__cvt>:
 80097d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097d2:	ed2d 8b02 	vpush	{d8}
 80097d6:	eeb0 8b40 	vmov.f64	d8, d0
 80097da:	b085      	sub	sp, #20
 80097dc:	4617      	mov	r7, r2
 80097de:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80097e0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80097e2:	ee18 2a90 	vmov	r2, s17
 80097e6:	f025 0520 	bic.w	r5, r5, #32
 80097ea:	2a00      	cmp	r2, #0
 80097ec:	bfb6      	itet	lt
 80097ee:	222d      	movlt	r2, #45	; 0x2d
 80097f0:	2200      	movge	r2, #0
 80097f2:	eeb1 8b40 	vneglt.f64	d8, d0
 80097f6:	2d46      	cmp	r5, #70	; 0x46
 80097f8:	460c      	mov	r4, r1
 80097fa:	701a      	strb	r2, [r3, #0]
 80097fc:	d004      	beq.n	8009808 <__cvt+0x38>
 80097fe:	2d45      	cmp	r5, #69	; 0x45
 8009800:	d100      	bne.n	8009804 <__cvt+0x34>
 8009802:	3401      	adds	r4, #1
 8009804:	2102      	movs	r1, #2
 8009806:	e000      	b.n	800980a <__cvt+0x3a>
 8009808:	2103      	movs	r1, #3
 800980a:	ab03      	add	r3, sp, #12
 800980c:	9301      	str	r3, [sp, #4]
 800980e:	ab02      	add	r3, sp, #8
 8009810:	9300      	str	r3, [sp, #0]
 8009812:	4622      	mov	r2, r4
 8009814:	4633      	mov	r3, r6
 8009816:	eeb0 0b48 	vmov.f64	d0, d8
 800981a:	f001 f881 	bl	800a920 <_dtoa_r>
 800981e:	2d47      	cmp	r5, #71	; 0x47
 8009820:	d101      	bne.n	8009826 <__cvt+0x56>
 8009822:	07fb      	lsls	r3, r7, #31
 8009824:	d51a      	bpl.n	800985c <__cvt+0x8c>
 8009826:	2d46      	cmp	r5, #70	; 0x46
 8009828:	eb00 0204 	add.w	r2, r0, r4
 800982c:	d10c      	bne.n	8009848 <__cvt+0x78>
 800982e:	7803      	ldrb	r3, [r0, #0]
 8009830:	2b30      	cmp	r3, #48	; 0x30
 8009832:	d107      	bne.n	8009844 <__cvt+0x74>
 8009834:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800983c:	bf1c      	itt	ne
 800983e:	f1c4 0401 	rsbne	r4, r4, #1
 8009842:	6034      	strne	r4, [r6, #0]
 8009844:	6833      	ldr	r3, [r6, #0]
 8009846:	441a      	add	r2, r3
 8009848:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800984c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009850:	bf08      	it	eq
 8009852:	9203      	streq	r2, [sp, #12]
 8009854:	2130      	movs	r1, #48	; 0x30
 8009856:	9b03      	ldr	r3, [sp, #12]
 8009858:	4293      	cmp	r3, r2
 800985a:	d307      	bcc.n	800986c <__cvt+0x9c>
 800985c:	9b03      	ldr	r3, [sp, #12]
 800985e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009860:	1a1b      	subs	r3, r3, r0
 8009862:	6013      	str	r3, [r2, #0]
 8009864:	b005      	add	sp, #20
 8009866:	ecbd 8b02 	vpop	{d8}
 800986a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800986c:	1c5c      	adds	r4, r3, #1
 800986e:	9403      	str	r4, [sp, #12]
 8009870:	7019      	strb	r1, [r3, #0]
 8009872:	e7f0      	b.n	8009856 <__cvt+0x86>

08009874 <__exponent>:
 8009874:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009876:	4603      	mov	r3, r0
 8009878:	2900      	cmp	r1, #0
 800987a:	bfb8      	it	lt
 800987c:	4249      	neglt	r1, r1
 800987e:	f803 2b02 	strb.w	r2, [r3], #2
 8009882:	bfb4      	ite	lt
 8009884:	222d      	movlt	r2, #45	; 0x2d
 8009886:	222b      	movge	r2, #43	; 0x2b
 8009888:	2909      	cmp	r1, #9
 800988a:	7042      	strb	r2, [r0, #1]
 800988c:	dd2a      	ble.n	80098e4 <__exponent+0x70>
 800988e:	f10d 0207 	add.w	r2, sp, #7
 8009892:	4617      	mov	r7, r2
 8009894:	260a      	movs	r6, #10
 8009896:	4694      	mov	ip, r2
 8009898:	fb91 f5f6 	sdiv	r5, r1, r6
 800989c:	fb06 1415 	mls	r4, r6, r5, r1
 80098a0:	3430      	adds	r4, #48	; 0x30
 80098a2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80098a6:	460c      	mov	r4, r1
 80098a8:	2c63      	cmp	r4, #99	; 0x63
 80098aa:	f102 32ff 	add.w	r2, r2, #4294967295
 80098ae:	4629      	mov	r1, r5
 80098b0:	dcf1      	bgt.n	8009896 <__exponent+0x22>
 80098b2:	3130      	adds	r1, #48	; 0x30
 80098b4:	f1ac 0402 	sub.w	r4, ip, #2
 80098b8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80098bc:	1c41      	adds	r1, r0, #1
 80098be:	4622      	mov	r2, r4
 80098c0:	42ba      	cmp	r2, r7
 80098c2:	d30a      	bcc.n	80098da <__exponent+0x66>
 80098c4:	f10d 0209 	add.w	r2, sp, #9
 80098c8:	eba2 020c 	sub.w	r2, r2, ip
 80098cc:	42bc      	cmp	r4, r7
 80098ce:	bf88      	it	hi
 80098d0:	2200      	movhi	r2, #0
 80098d2:	4413      	add	r3, r2
 80098d4:	1a18      	subs	r0, r3, r0
 80098d6:	b003      	add	sp, #12
 80098d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098da:	f812 5b01 	ldrb.w	r5, [r2], #1
 80098de:	f801 5f01 	strb.w	r5, [r1, #1]!
 80098e2:	e7ed      	b.n	80098c0 <__exponent+0x4c>
 80098e4:	2330      	movs	r3, #48	; 0x30
 80098e6:	3130      	adds	r1, #48	; 0x30
 80098e8:	7083      	strb	r3, [r0, #2]
 80098ea:	70c1      	strb	r1, [r0, #3]
 80098ec:	1d03      	adds	r3, r0, #4
 80098ee:	e7f1      	b.n	80098d4 <__exponent+0x60>

080098f0 <_printf_float>:
 80098f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098f4:	b08b      	sub	sp, #44	; 0x2c
 80098f6:	460c      	mov	r4, r1
 80098f8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80098fc:	4616      	mov	r6, r2
 80098fe:	461f      	mov	r7, r3
 8009900:	4605      	mov	r5, r0
 8009902:	f000 ff05 	bl	800a710 <_localeconv_r>
 8009906:	f8d0 b000 	ldr.w	fp, [r0]
 800990a:	4658      	mov	r0, fp
 800990c:	f7f6 fd38 	bl	8000380 <strlen>
 8009910:	2300      	movs	r3, #0
 8009912:	9308      	str	r3, [sp, #32]
 8009914:	f8d8 3000 	ldr.w	r3, [r8]
 8009918:	f894 9018 	ldrb.w	r9, [r4, #24]
 800991c:	6822      	ldr	r2, [r4, #0]
 800991e:	3307      	adds	r3, #7
 8009920:	f023 0307 	bic.w	r3, r3, #7
 8009924:	f103 0108 	add.w	r1, r3, #8
 8009928:	f8c8 1000 	str.w	r1, [r8]
 800992c:	ed93 0b00 	vldr	d0, [r3]
 8009930:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8009b90 <_printf_float+0x2a0>
 8009934:	eeb0 7bc0 	vabs.f64	d7, d0
 8009938:	eeb4 7b46 	vcmp.f64	d7, d6
 800993c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009940:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8009944:	4682      	mov	sl, r0
 8009946:	dd24      	ble.n	8009992 <_printf_float+0xa2>
 8009948:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800994c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009950:	d502      	bpl.n	8009958 <_printf_float+0x68>
 8009952:	232d      	movs	r3, #45	; 0x2d
 8009954:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009958:	498f      	ldr	r1, [pc, #572]	; (8009b98 <_printf_float+0x2a8>)
 800995a:	4b90      	ldr	r3, [pc, #576]	; (8009b9c <_printf_float+0x2ac>)
 800995c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009960:	bf94      	ite	ls
 8009962:	4688      	movls	r8, r1
 8009964:	4698      	movhi	r8, r3
 8009966:	2303      	movs	r3, #3
 8009968:	6123      	str	r3, [r4, #16]
 800996a:	f022 0204 	bic.w	r2, r2, #4
 800996e:	2300      	movs	r3, #0
 8009970:	6022      	str	r2, [r4, #0]
 8009972:	9304      	str	r3, [sp, #16]
 8009974:	9700      	str	r7, [sp, #0]
 8009976:	4633      	mov	r3, r6
 8009978:	aa09      	add	r2, sp, #36	; 0x24
 800997a:	4621      	mov	r1, r4
 800997c:	4628      	mov	r0, r5
 800997e:	f000 f9d1 	bl	8009d24 <_printf_common>
 8009982:	3001      	adds	r0, #1
 8009984:	f040 808a 	bne.w	8009a9c <_printf_float+0x1ac>
 8009988:	f04f 30ff 	mov.w	r0, #4294967295
 800998c:	b00b      	add	sp, #44	; 0x2c
 800998e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009992:	eeb4 0b40 	vcmp.f64	d0, d0
 8009996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800999a:	d709      	bvc.n	80099b0 <_printf_float+0xc0>
 800999c:	ee10 3a90 	vmov	r3, s1
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	bfbc      	itt	lt
 80099a4:	232d      	movlt	r3, #45	; 0x2d
 80099a6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80099aa:	497d      	ldr	r1, [pc, #500]	; (8009ba0 <_printf_float+0x2b0>)
 80099ac:	4b7d      	ldr	r3, [pc, #500]	; (8009ba4 <_printf_float+0x2b4>)
 80099ae:	e7d5      	b.n	800995c <_printf_float+0x6c>
 80099b0:	6863      	ldr	r3, [r4, #4]
 80099b2:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80099b6:	9104      	str	r1, [sp, #16]
 80099b8:	1c59      	adds	r1, r3, #1
 80099ba:	d13c      	bne.n	8009a36 <_printf_float+0x146>
 80099bc:	2306      	movs	r3, #6
 80099be:	6063      	str	r3, [r4, #4]
 80099c0:	2300      	movs	r3, #0
 80099c2:	9303      	str	r3, [sp, #12]
 80099c4:	ab08      	add	r3, sp, #32
 80099c6:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80099ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80099ce:	ab07      	add	r3, sp, #28
 80099d0:	6861      	ldr	r1, [r4, #4]
 80099d2:	9300      	str	r3, [sp, #0]
 80099d4:	6022      	str	r2, [r4, #0]
 80099d6:	f10d 031b 	add.w	r3, sp, #27
 80099da:	4628      	mov	r0, r5
 80099dc:	f7ff fef8 	bl	80097d0 <__cvt>
 80099e0:	9b04      	ldr	r3, [sp, #16]
 80099e2:	9907      	ldr	r1, [sp, #28]
 80099e4:	2b47      	cmp	r3, #71	; 0x47
 80099e6:	4680      	mov	r8, r0
 80099e8:	d108      	bne.n	80099fc <_printf_float+0x10c>
 80099ea:	1cc8      	adds	r0, r1, #3
 80099ec:	db02      	blt.n	80099f4 <_printf_float+0x104>
 80099ee:	6863      	ldr	r3, [r4, #4]
 80099f0:	4299      	cmp	r1, r3
 80099f2:	dd41      	ble.n	8009a78 <_printf_float+0x188>
 80099f4:	f1a9 0902 	sub.w	r9, r9, #2
 80099f8:	fa5f f989 	uxtb.w	r9, r9
 80099fc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009a00:	d820      	bhi.n	8009a44 <_printf_float+0x154>
 8009a02:	3901      	subs	r1, #1
 8009a04:	464a      	mov	r2, r9
 8009a06:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009a0a:	9107      	str	r1, [sp, #28]
 8009a0c:	f7ff ff32 	bl	8009874 <__exponent>
 8009a10:	9a08      	ldr	r2, [sp, #32]
 8009a12:	9004      	str	r0, [sp, #16]
 8009a14:	1813      	adds	r3, r2, r0
 8009a16:	2a01      	cmp	r2, #1
 8009a18:	6123      	str	r3, [r4, #16]
 8009a1a:	dc02      	bgt.n	8009a22 <_printf_float+0x132>
 8009a1c:	6822      	ldr	r2, [r4, #0]
 8009a1e:	07d2      	lsls	r2, r2, #31
 8009a20:	d501      	bpl.n	8009a26 <_printf_float+0x136>
 8009a22:	3301      	adds	r3, #1
 8009a24:	6123      	str	r3, [r4, #16]
 8009a26:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d0a2      	beq.n	8009974 <_printf_float+0x84>
 8009a2e:	232d      	movs	r3, #45	; 0x2d
 8009a30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a34:	e79e      	b.n	8009974 <_printf_float+0x84>
 8009a36:	9904      	ldr	r1, [sp, #16]
 8009a38:	2947      	cmp	r1, #71	; 0x47
 8009a3a:	d1c1      	bne.n	80099c0 <_printf_float+0xd0>
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d1bf      	bne.n	80099c0 <_printf_float+0xd0>
 8009a40:	2301      	movs	r3, #1
 8009a42:	e7bc      	b.n	80099be <_printf_float+0xce>
 8009a44:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009a48:	d118      	bne.n	8009a7c <_printf_float+0x18c>
 8009a4a:	2900      	cmp	r1, #0
 8009a4c:	6863      	ldr	r3, [r4, #4]
 8009a4e:	dd0b      	ble.n	8009a68 <_printf_float+0x178>
 8009a50:	6121      	str	r1, [r4, #16]
 8009a52:	b913      	cbnz	r3, 8009a5a <_printf_float+0x16a>
 8009a54:	6822      	ldr	r2, [r4, #0]
 8009a56:	07d0      	lsls	r0, r2, #31
 8009a58:	d502      	bpl.n	8009a60 <_printf_float+0x170>
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	440b      	add	r3, r1
 8009a5e:	6123      	str	r3, [r4, #16]
 8009a60:	2300      	movs	r3, #0
 8009a62:	65a1      	str	r1, [r4, #88]	; 0x58
 8009a64:	9304      	str	r3, [sp, #16]
 8009a66:	e7de      	b.n	8009a26 <_printf_float+0x136>
 8009a68:	b913      	cbnz	r3, 8009a70 <_printf_float+0x180>
 8009a6a:	6822      	ldr	r2, [r4, #0]
 8009a6c:	07d2      	lsls	r2, r2, #31
 8009a6e:	d501      	bpl.n	8009a74 <_printf_float+0x184>
 8009a70:	3302      	adds	r3, #2
 8009a72:	e7f4      	b.n	8009a5e <_printf_float+0x16e>
 8009a74:	2301      	movs	r3, #1
 8009a76:	e7f2      	b.n	8009a5e <_printf_float+0x16e>
 8009a78:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009a7c:	9b08      	ldr	r3, [sp, #32]
 8009a7e:	4299      	cmp	r1, r3
 8009a80:	db05      	blt.n	8009a8e <_printf_float+0x19e>
 8009a82:	6823      	ldr	r3, [r4, #0]
 8009a84:	6121      	str	r1, [r4, #16]
 8009a86:	07d8      	lsls	r0, r3, #31
 8009a88:	d5ea      	bpl.n	8009a60 <_printf_float+0x170>
 8009a8a:	1c4b      	adds	r3, r1, #1
 8009a8c:	e7e7      	b.n	8009a5e <_printf_float+0x16e>
 8009a8e:	2900      	cmp	r1, #0
 8009a90:	bfd4      	ite	le
 8009a92:	f1c1 0202 	rsble	r2, r1, #2
 8009a96:	2201      	movgt	r2, #1
 8009a98:	4413      	add	r3, r2
 8009a9a:	e7e0      	b.n	8009a5e <_printf_float+0x16e>
 8009a9c:	6823      	ldr	r3, [r4, #0]
 8009a9e:	055a      	lsls	r2, r3, #21
 8009aa0:	d407      	bmi.n	8009ab2 <_printf_float+0x1c2>
 8009aa2:	6923      	ldr	r3, [r4, #16]
 8009aa4:	4642      	mov	r2, r8
 8009aa6:	4631      	mov	r1, r6
 8009aa8:	4628      	mov	r0, r5
 8009aaa:	47b8      	blx	r7
 8009aac:	3001      	adds	r0, #1
 8009aae:	d12a      	bne.n	8009b06 <_printf_float+0x216>
 8009ab0:	e76a      	b.n	8009988 <_printf_float+0x98>
 8009ab2:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009ab6:	f240 80e0 	bls.w	8009c7a <_printf_float+0x38a>
 8009aba:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009abe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ac6:	d133      	bne.n	8009b30 <_printf_float+0x240>
 8009ac8:	4a37      	ldr	r2, [pc, #220]	; (8009ba8 <_printf_float+0x2b8>)
 8009aca:	2301      	movs	r3, #1
 8009acc:	4631      	mov	r1, r6
 8009ace:	4628      	mov	r0, r5
 8009ad0:	47b8      	blx	r7
 8009ad2:	3001      	adds	r0, #1
 8009ad4:	f43f af58 	beq.w	8009988 <_printf_float+0x98>
 8009ad8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009adc:	429a      	cmp	r2, r3
 8009ade:	db02      	blt.n	8009ae6 <_printf_float+0x1f6>
 8009ae0:	6823      	ldr	r3, [r4, #0]
 8009ae2:	07d8      	lsls	r0, r3, #31
 8009ae4:	d50f      	bpl.n	8009b06 <_printf_float+0x216>
 8009ae6:	4653      	mov	r3, sl
 8009ae8:	465a      	mov	r2, fp
 8009aea:	4631      	mov	r1, r6
 8009aec:	4628      	mov	r0, r5
 8009aee:	47b8      	blx	r7
 8009af0:	3001      	adds	r0, #1
 8009af2:	f43f af49 	beq.w	8009988 <_printf_float+0x98>
 8009af6:	f04f 0800 	mov.w	r8, #0
 8009afa:	f104 091a 	add.w	r9, r4, #26
 8009afe:	9b08      	ldr	r3, [sp, #32]
 8009b00:	3b01      	subs	r3, #1
 8009b02:	4543      	cmp	r3, r8
 8009b04:	dc09      	bgt.n	8009b1a <_printf_float+0x22a>
 8009b06:	6823      	ldr	r3, [r4, #0]
 8009b08:	079b      	lsls	r3, r3, #30
 8009b0a:	f100 8106 	bmi.w	8009d1a <_printf_float+0x42a>
 8009b0e:	68e0      	ldr	r0, [r4, #12]
 8009b10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b12:	4298      	cmp	r0, r3
 8009b14:	bfb8      	it	lt
 8009b16:	4618      	movlt	r0, r3
 8009b18:	e738      	b.n	800998c <_printf_float+0x9c>
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	464a      	mov	r2, r9
 8009b1e:	4631      	mov	r1, r6
 8009b20:	4628      	mov	r0, r5
 8009b22:	47b8      	blx	r7
 8009b24:	3001      	adds	r0, #1
 8009b26:	f43f af2f 	beq.w	8009988 <_printf_float+0x98>
 8009b2a:	f108 0801 	add.w	r8, r8, #1
 8009b2e:	e7e6      	b.n	8009afe <_printf_float+0x20e>
 8009b30:	9b07      	ldr	r3, [sp, #28]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	dc3a      	bgt.n	8009bac <_printf_float+0x2bc>
 8009b36:	4a1c      	ldr	r2, [pc, #112]	; (8009ba8 <_printf_float+0x2b8>)
 8009b38:	2301      	movs	r3, #1
 8009b3a:	4631      	mov	r1, r6
 8009b3c:	4628      	mov	r0, r5
 8009b3e:	47b8      	blx	r7
 8009b40:	3001      	adds	r0, #1
 8009b42:	f43f af21 	beq.w	8009988 <_printf_float+0x98>
 8009b46:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8009b4a:	4313      	orrs	r3, r2
 8009b4c:	d102      	bne.n	8009b54 <_printf_float+0x264>
 8009b4e:	6823      	ldr	r3, [r4, #0]
 8009b50:	07d9      	lsls	r1, r3, #31
 8009b52:	d5d8      	bpl.n	8009b06 <_printf_float+0x216>
 8009b54:	4653      	mov	r3, sl
 8009b56:	465a      	mov	r2, fp
 8009b58:	4631      	mov	r1, r6
 8009b5a:	4628      	mov	r0, r5
 8009b5c:	47b8      	blx	r7
 8009b5e:	3001      	adds	r0, #1
 8009b60:	f43f af12 	beq.w	8009988 <_printf_float+0x98>
 8009b64:	f04f 0900 	mov.w	r9, #0
 8009b68:	f104 0a1a 	add.w	sl, r4, #26
 8009b6c:	9b07      	ldr	r3, [sp, #28]
 8009b6e:	425b      	negs	r3, r3
 8009b70:	454b      	cmp	r3, r9
 8009b72:	dc01      	bgt.n	8009b78 <_printf_float+0x288>
 8009b74:	9b08      	ldr	r3, [sp, #32]
 8009b76:	e795      	b.n	8009aa4 <_printf_float+0x1b4>
 8009b78:	2301      	movs	r3, #1
 8009b7a:	4652      	mov	r2, sl
 8009b7c:	4631      	mov	r1, r6
 8009b7e:	4628      	mov	r0, r5
 8009b80:	47b8      	blx	r7
 8009b82:	3001      	adds	r0, #1
 8009b84:	f43f af00 	beq.w	8009988 <_printf_float+0x98>
 8009b88:	f109 0901 	add.w	r9, r9, #1
 8009b8c:	e7ee      	b.n	8009b6c <_printf_float+0x27c>
 8009b8e:	bf00      	nop
 8009b90:	ffffffff 	.word	0xffffffff
 8009b94:	7fefffff 	.word	0x7fefffff
 8009b98:	0800de4c 	.word	0x0800de4c
 8009b9c:	0800de50 	.word	0x0800de50
 8009ba0:	0800de54 	.word	0x0800de54
 8009ba4:	0800de58 	.word	0x0800de58
 8009ba8:	0800de5c 	.word	0x0800de5c
 8009bac:	9a08      	ldr	r2, [sp, #32]
 8009bae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	bfa8      	it	ge
 8009bb4:	461a      	movge	r2, r3
 8009bb6:	2a00      	cmp	r2, #0
 8009bb8:	4691      	mov	r9, r2
 8009bba:	dc38      	bgt.n	8009c2e <_printf_float+0x33e>
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	9305      	str	r3, [sp, #20]
 8009bc0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009bc4:	f104 021a 	add.w	r2, r4, #26
 8009bc8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009bca:	9905      	ldr	r1, [sp, #20]
 8009bcc:	9304      	str	r3, [sp, #16]
 8009bce:	eba3 0309 	sub.w	r3, r3, r9
 8009bd2:	428b      	cmp	r3, r1
 8009bd4:	dc33      	bgt.n	8009c3e <_printf_float+0x34e>
 8009bd6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009bda:	429a      	cmp	r2, r3
 8009bdc:	db3c      	blt.n	8009c58 <_printf_float+0x368>
 8009bde:	6823      	ldr	r3, [r4, #0]
 8009be0:	07da      	lsls	r2, r3, #31
 8009be2:	d439      	bmi.n	8009c58 <_printf_float+0x368>
 8009be4:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8009be8:	eba2 0903 	sub.w	r9, r2, r3
 8009bec:	9b04      	ldr	r3, [sp, #16]
 8009bee:	1ad2      	subs	r2, r2, r3
 8009bf0:	4591      	cmp	r9, r2
 8009bf2:	bfa8      	it	ge
 8009bf4:	4691      	movge	r9, r2
 8009bf6:	f1b9 0f00 	cmp.w	r9, #0
 8009bfa:	dc35      	bgt.n	8009c68 <_printf_float+0x378>
 8009bfc:	f04f 0800 	mov.w	r8, #0
 8009c00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c04:	f104 0a1a 	add.w	sl, r4, #26
 8009c08:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009c0c:	1a9b      	subs	r3, r3, r2
 8009c0e:	eba3 0309 	sub.w	r3, r3, r9
 8009c12:	4543      	cmp	r3, r8
 8009c14:	f77f af77 	ble.w	8009b06 <_printf_float+0x216>
 8009c18:	2301      	movs	r3, #1
 8009c1a:	4652      	mov	r2, sl
 8009c1c:	4631      	mov	r1, r6
 8009c1e:	4628      	mov	r0, r5
 8009c20:	47b8      	blx	r7
 8009c22:	3001      	adds	r0, #1
 8009c24:	f43f aeb0 	beq.w	8009988 <_printf_float+0x98>
 8009c28:	f108 0801 	add.w	r8, r8, #1
 8009c2c:	e7ec      	b.n	8009c08 <_printf_float+0x318>
 8009c2e:	4613      	mov	r3, r2
 8009c30:	4631      	mov	r1, r6
 8009c32:	4642      	mov	r2, r8
 8009c34:	4628      	mov	r0, r5
 8009c36:	47b8      	blx	r7
 8009c38:	3001      	adds	r0, #1
 8009c3a:	d1bf      	bne.n	8009bbc <_printf_float+0x2cc>
 8009c3c:	e6a4      	b.n	8009988 <_printf_float+0x98>
 8009c3e:	2301      	movs	r3, #1
 8009c40:	4631      	mov	r1, r6
 8009c42:	4628      	mov	r0, r5
 8009c44:	9204      	str	r2, [sp, #16]
 8009c46:	47b8      	blx	r7
 8009c48:	3001      	adds	r0, #1
 8009c4a:	f43f ae9d 	beq.w	8009988 <_printf_float+0x98>
 8009c4e:	9b05      	ldr	r3, [sp, #20]
 8009c50:	9a04      	ldr	r2, [sp, #16]
 8009c52:	3301      	adds	r3, #1
 8009c54:	9305      	str	r3, [sp, #20]
 8009c56:	e7b7      	b.n	8009bc8 <_printf_float+0x2d8>
 8009c58:	4653      	mov	r3, sl
 8009c5a:	465a      	mov	r2, fp
 8009c5c:	4631      	mov	r1, r6
 8009c5e:	4628      	mov	r0, r5
 8009c60:	47b8      	blx	r7
 8009c62:	3001      	adds	r0, #1
 8009c64:	d1be      	bne.n	8009be4 <_printf_float+0x2f4>
 8009c66:	e68f      	b.n	8009988 <_printf_float+0x98>
 8009c68:	9a04      	ldr	r2, [sp, #16]
 8009c6a:	464b      	mov	r3, r9
 8009c6c:	4442      	add	r2, r8
 8009c6e:	4631      	mov	r1, r6
 8009c70:	4628      	mov	r0, r5
 8009c72:	47b8      	blx	r7
 8009c74:	3001      	adds	r0, #1
 8009c76:	d1c1      	bne.n	8009bfc <_printf_float+0x30c>
 8009c78:	e686      	b.n	8009988 <_printf_float+0x98>
 8009c7a:	9a08      	ldr	r2, [sp, #32]
 8009c7c:	2a01      	cmp	r2, #1
 8009c7e:	dc01      	bgt.n	8009c84 <_printf_float+0x394>
 8009c80:	07db      	lsls	r3, r3, #31
 8009c82:	d537      	bpl.n	8009cf4 <_printf_float+0x404>
 8009c84:	2301      	movs	r3, #1
 8009c86:	4642      	mov	r2, r8
 8009c88:	4631      	mov	r1, r6
 8009c8a:	4628      	mov	r0, r5
 8009c8c:	47b8      	blx	r7
 8009c8e:	3001      	adds	r0, #1
 8009c90:	f43f ae7a 	beq.w	8009988 <_printf_float+0x98>
 8009c94:	4653      	mov	r3, sl
 8009c96:	465a      	mov	r2, fp
 8009c98:	4631      	mov	r1, r6
 8009c9a:	4628      	mov	r0, r5
 8009c9c:	47b8      	blx	r7
 8009c9e:	3001      	adds	r0, #1
 8009ca0:	f43f ae72 	beq.w	8009988 <_printf_float+0x98>
 8009ca4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009ca8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cb0:	9b08      	ldr	r3, [sp, #32]
 8009cb2:	d01a      	beq.n	8009cea <_printf_float+0x3fa>
 8009cb4:	3b01      	subs	r3, #1
 8009cb6:	f108 0201 	add.w	r2, r8, #1
 8009cba:	4631      	mov	r1, r6
 8009cbc:	4628      	mov	r0, r5
 8009cbe:	47b8      	blx	r7
 8009cc0:	3001      	adds	r0, #1
 8009cc2:	d10e      	bne.n	8009ce2 <_printf_float+0x3f2>
 8009cc4:	e660      	b.n	8009988 <_printf_float+0x98>
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	464a      	mov	r2, r9
 8009cca:	4631      	mov	r1, r6
 8009ccc:	4628      	mov	r0, r5
 8009cce:	47b8      	blx	r7
 8009cd0:	3001      	adds	r0, #1
 8009cd2:	f43f ae59 	beq.w	8009988 <_printf_float+0x98>
 8009cd6:	f108 0801 	add.w	r8, r8, #1
 8009cda:	9b08      	ldr	r3, [sp, #32]
 8009cdc:	3b01      	subs	r3, #1
 8009cde:	4543      	cmp	r3, r8
 8009ce0:	dcf1      	bgt.n	8009cc6 <_printf_float+0x3d6>
 8009ce2:	9b04      	ldr	r3, [sp, #16]
 8009ce4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009ce8:	e6dd      	b.n	8009aa6 <_printf_float+0x1b6>
 8009cea:	f04f 0800 	mov.w	r8, #0
 8009cee:	f104 091a 	add.w	r9, r4, #26
 8009cf2:	e7f2      	b.n	8009cda <_printf_float+0x3ea>
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	4642      	mov	r2, r8
 8009cf8:	e7df      	b.n	8009cba <_printf_float+0x3ca>
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	464a      	mov	r2, r9
 8009cfe:	4631      	mov	r1, r6
 8009d00:	4628      	mov	r0, r5
 8009d02:	47b8      	blx	r7
 8009d04:	3001      	adds	r0, #1
 8009d06:	f43f ae3f 	beq.w	8009988 <_printf_float+0x98>
 8009d0a:	f108 0801 	add.w	r8, r8, #1
 8009d0e:	68e3      	ldr	r3, [r4, #12]
 8009d10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d12:	1a5b      	subs	r3, r3, r1
 8009d14:	4543      	cmp	r3, r8
 8009d16:	dcf0      	bgt.n	8009cfa <_printf_float+0x40a>
 8009d18:	e6f9      	b.n	8009b0e <_printf_float+0x21e>
 8009d1a:	f04f 0800 	mov.w	r8, #0
 8009d1e:	f104 0919 	add.w	r9, r4, #25
 8009d22:	e7f4      	b.n	8009d0e <_printf_float+0x41e>

08009d24 <_printf_common>:
 8009d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d28:	4616      	mov	r6, r2
 8009d2a:	4699      	mov	r9, r3
 8009d2c:	688a      	ldr	r2, [r1, #8]
 8009d2e:	690b      	ldr	r3, [r1, #16]
 8009d30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009d34:	4293      	cmp	r3, r2
 8009d36:	bfb8      	it	lt
 8009d38:	4613      	movlt	r3, r2
 8009d3a:	6033      	str	r3, [r6, #0]
 8009d3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009d40:	4607      	mov	r7, r0
 8009d42:	460c      	mov	r4, r1
 8009d44:	b10a      	cbz	r2, 8009d4a <_printf_common+0x26>
 8009d46:	3301      	adds	r3, #1
 8009d48:	6033      	str	r3, [r6, #0]
 8009d4a:	6823      	ldr	r3, [r4, #0]
 8009d4c:	0699      	lsls	r1, r3, #26
 8009d4e:	bf42      	ittt	mi
 8009d50:	6833      	ldrmi	r3, [r6, #0]
 8009d52:	3302      	addmi	r3, #2
 8009d54:	6033      	strmi	r3, [r6, #0]
 8009d56:	6825      	ldr	r5, [r4, #0]
 8009d58:	f015 0506 	ands.w	r5, r5, #6
 8009d5c:	d106      	bne.n	8009d6c <_printf_common+0x48>
 8009d5e:	f104 0a19 	add.w	sl, r4, #25
 8009d62:	68e3      	ldr	r3, [r4, #12]
 8009d64:	6832      	ldr	r2, [r6, #0]
 8009d66:	1a9b      	subs	r3, r3, r2
 8009d68:	42ab      	cmp	r3, r5
 8009d6a:	dc26      	bgt.n	8009dba <_printf_common+0x96>
 8009d6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009d70:	1e13      	subs	r3, r2, #0
 8009d72:	6822      	ldr	r2, [r4, #0]
 8009d74:	bf18      	it	ne
 8009d76:	2301      	movne	r3, #1
 8009d78:	0692      	lsls	r2, r2, #26
 8009d7a:	d42b      	bmi.n	8009dd4 <_printf_common+0xb0>
 8009d7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009d80:	4649      	mov	r1, r9
 8009d82:	4638      	mov	r0, r7
 8009d84:	47c0      	blx	r8
 8009d86:	3001      	adds	r0, #1
 8009d88:	d01e      	beq.n	8009dc8 <_printf_common+0xa4>
 8009d8a:	6823      	ldr	r3, [r4, #0]
 8009d8c:	6922      	ldr	r2, [r4, #16]
 8009d8e:	f003 0306 	and.w	r3, r3, #6
 8009d92:	2b04      	cmp	r3, #4
 8009d94:	bf02      	ittt	eq
 8009d96:	68e5      	ldreq	r5, [r4, #12]
 8009d98:	6833      	ldreq	r3, [r6, #0]
 8009d9a:	1aed      	subeq	r5, r5, r3
 8009d9c:	68a3      	ldr	r3, [r4, #8]
 8009d9e:	bf0c      	ite	eq
 8009da0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009da4:	2500      	movne	r5, #0
 8009da6:	4293      	cmp	r3, r2
 8009da8:	bfc4      	itt	gt
 8009daa:	1a9b      	subgt	r3, r3, r2
 8009dac:	18ed      	addgt	r5, r5, r3
 8009dae:	2600      	movs	r6, #0
 8009db0:	341a      	adds	r4, #26
 8009db2:	42b5      	cmp	r5, r6
 8009db4:	d11a      	bne.n	8009dec <_printf_common+0xc8>
 8009db6:	2000      	movs	r0, #0
 8009db8:	e008      	b.n	8009dcc <_printf_common+0xa8>
 8009dba:	2301      	movs	r3, #1
 8009dbc:	4652      	mov	r2, sl
 8009dbe:	4649      	mov	r1, r9
 8009dc0:	4638      	mov	r0, r7
 8009dc2:	47c0      	blx	r8
 8009dc4:	3001      	adds	r0, #1
 8009dc6:	d103      	bne.n	8009dd0 <_printf_common+0xac>
 8009dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8009dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dd0:	3501      	adds	r5, #1
 8009dd2:	e7c6      	b.n	8009d62 <_printf_common+0x3e>
 8009dd4:	18e1      	adds	r1, r4, r3
 8009dd6:	1c5a      	adds	r2, r3, #1
 8009dd8:	2030      	movs	r0, #48	; 0x30
 8009dda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009dde:	4422      	add	r2, r4
 8009de0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009de4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009de8:	3302      	adds	r3, #2
 8009dea:	e7c7      	b.n	8009d7c <_printf_common+0x58>
 8009dec:	2301      	movs	r3, #1
 8009dee:	4622      	mov	r2, r4
 8009df0:	4649      	mov	r1, r9
 8009df2:	4638      	mov	r0, r7
 8009df4:	47c0      	blx	r8
 8009df6:	3001      	adds	r0, #1
 8009df8:	d0e6      	beq.n	8009dc8 <_printf_common+0xa4>
 8009dfa:	3601      	adds	r6, #1
 8009dfc:	e7d9      	b.n	8009db2 <_printf_common+0x8e>
	...

08009e00 <_printf_i>:
 8009e00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e04:	7e0f      	ldrb	r7, [r1, #24]
 8009e06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009e08:	2f78      	cmp	r7, #120	; 0x78
 8009e0a:	4691      	mov	r9, r2
 8009e0c:	4680      	mov	r8, r0
 8009e0e:	460c      	mov	r4, r1
 8009e10:	469a      	mov	sl, r3
 8009e12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009e16:	d807      	bhi.n	8009e28 <_printf_i+0x28>
 8009e18:	2f62      	cmp	r7, #98	; 0x62
 8009e1a:	d80a      	bhi.n	8009e32 <_printf_i+0x32>
 8009e1c:	2f00      	cmp	r7, #0
 8009e1e:	f000 80d4 	beq.w	8009fca <_printf_i+0x1ca>
 8009e22:	2f58      	cmp	r7, #88	; 0x58
 8009e24:	f000 80c0 	beq.w	8009fa8 <_printf_i+0x1a8>
 8009e28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009e30:	e03a      	b.n	8009ea8 <_printf_i+0xa8>
 8009e32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009e36:	2b15      	cmp	r3, #21
 8009e38:	d8f6      	bhi.n	8009e28 <_printf_i+0x28>
 8009e3a:	a101      	add	r1, pc, #4	; (adr r1, 8009e40 <_printf_i+0x40>)
 8009e3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e40:	08009e99 	.word	0x08009e99
 8009e44:	08009ead 	.word	0x08009ead
 8009e48:	08009e29 	.word	0x08009e29
 8009e4c:	08009e29 	.word	0x08009e29
 8009e50:	08009e29 	.word	0x08009e29
 8009e54:	08009e29 	.word	0x08009e29
 8009e58:	08009ead 	.word	0x08009ead
 8009e5c:	08009e29 	.word	0x08009e29
 8009e60:	08009e29 	.word	0x08009e29
 8009e64:	08009e29 	.word	0x08009e29
 8009e68:	08009e29 	.word	0x08009e29
 8009e6c:	08009fb1 	.word	0x08009fb1
 8009e70:	08009ed9 	.word	0x08009ed9
 8009e74:	08009f6b 	.word	0x08009f6b
 8009e78:	08009e29 	.word	0x08009e29
 8009e7c:	08009e29 	.word	0x08009e29
 8009e80:	08009fd3 	.word	0x08009fd3
 8009e84:	08009e29 	.word	0x08009e29
 8009e88:	08009ed9 	.word	0x08009ed9
 8009e8c:	08009e29 	.word	0x08009e29
 8009e90:	08009e29 	.word	0x08009e29
 8009e94:	08009f73 	.word	0x08009f73
 8009e98:	682b      	ldr	r3, [r5, #0]
 8009e9a:	1d1a      	adds	r2, r3, #4
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	602a      	str	r2, [r5, #0]
 8009ea0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ea4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	e09f      	b.n	8009fec <_printf_i+0x1ec>
 8009eac:	6820      	ldr	r0, [r4, #0]
 8009eae:	682b      	ldr	r3, [r5, #0]
 8009eb0:	0607      	lsls	r7, r0, #24
 8009eb2:	f103 0104 	add.w	r1, r3, #4
 8009eb6:	6029      	str	r1, [r5, #0]
 8009eb8:	d501      	bpl.n	8009ebe <_printf_i+0xbe>
 8009eba:	681e      	ldr	r6, [r3, #0]
 8009ebc:	e003      	b.n	8009ec6 <_printf_i+0xc6>
 8009ebe:	0646      	lsls	r6, r0, #25
 8009ec0:	d5fb      	bpl.n	8009eba <_printf_i+0xba>
 8009ec2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009ec6:	2e00      	cmp	r6, #0
 8009ec8:	da03      	bge.n	8009ed2 <_printf_i+0xd2>
 8009eca:	232d      	movs	r3, #45	; 0x2d
 8009ecc:	4276      	negs	r6, r6
 8009ece:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ed2:	485a      	ldr	r0, [pc, #360]	; (800a03c <_printf_i+0x23c>)
 8009ed4:	230a      	movs	r3, #10
 8009ed6:	e012      	b.n	8009efe <_printf_i+0xfe>
 8009ed8:	682b      	ldr	r3, [r5, #0]
 8009eda:	6820      	ldr	r0, [r4, #0]
 8009edc:	1d19      	adds	r1, r3, #4
 8009ede:	6029      	str	r1, [r5, #0]
 8009ee0:	0605      	lsls	r5, r0, #24
 8009ee2:	d501      	bpl.n	8009ee8 <_printf_i+0xe8>
 8009ee4:	681e      	ldr	r6, [r3, #0]
 8009ee6:	e002      	b.n	8009eee <_printf_i+0xee>
 8009ee8:	0641      	lsls	r1, r0, #25
 8009eea:	d5fb      	bpl.n	8009ee4 <_printf_i+0xe4>
 8009eec:	881e      	ldrh	r6, [r3, #0]
 8009eee:	4853      	ldr	r0, [pc, #332]	; (800a03c <_printf_i+0x23c>)
 8009ef0:	2f6f      	cmp	r7, #111	; 0x6f
 8009ef2:	bf0c      	ite	eq
 8009ef4:	2308      	moveq	r3, #8
 8009ef6:	230a      	movne	r3, #10
 8009ef8:	2100      	movs	r1, #0
 8009efa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009efe:	6865      	ldr	r5, [r4, #4]
 8009f00:	60a5      	str	r5, [r4, #8]
 8009f02:	2d00      	cmp	r5, #0
 8009f04:	bfa2      	ittt	ge
 8009f06:	6821      	ldrge	r1, [r4, #0]
 8009f08:	f021 0104 	bicge.w	r1, r1, #4
 8009f0c:	6021      	strge	r1, [r4, #0]
 8009f0e:	b90e      	cbnz	r6, 8009f14 <_printf_i+0x114>
 8009f10:	2d00      	cmp	r5, #0
 8009f12:	d04b      	beq.n	8009fac <_printf_i+0x1ac>
 8009f14:	4615      	mov	r5, r2
 8009f16:	fbb6 f1f3 	udiv	r1, r6, r3
 8009f1a:	fb03 6711 	mls	r7, r3, r1, r6
 8009f1e:	5dc7      	ldrb	r7, [r0, r7]
 8009f20:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009f24:	4637      	mov	r7, r6
 8009f26:	42bb      	cmp	r3, r7
 8009f28:	460e      	mov	r6, r1
 8009f2a:	d9f4      	bls.n	8009f16 <_printf_i+0x116>
 8009f2c:	2b08      	cmp	r3, #8
 8009f2e:	d10b      	bne.n	8009f48 <_printf_i+0x148>
 8009f30:	6823      	ldr	r3, [r4, #0]
 8009f32:	07de      	lsls	r6, r3, #31
 8009f34:	d508      	bpl.n	8009f48 <_printf_i+0x148>
 8009f36:	6923      	ldr	r3, [r4, #16]
 8009f38:	6861      	ldr	r1, [r4, #4]
 8009f3a:	4299      	cmp	r1, r3
 8009f3c:	bfde      	ittt	le
 8009f3e:	2330      	movle	r3, #48	; 0x30
 8009f40:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009f44:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009f48:	1b52      	subs	r2, r2, r5
 8009f4a:	6122      	str	r2, [r4, #16]
 8009f4c:	f8cd a000 	str.w	sl, [sp]
 8009f50:	464b      	mov	r3, r9
 8009f52:	aa03      	add	r2, sp, #12
 8009f54:	4621      	mov	r1, r4
 8009f56:	4640      	mov	r0, r8
 8009f58:	f7ff fee4 	bl	8009d24 <_printf_common>
 8009f5c:	3001      	adds	r0, #1
 8009f5e:	d14a      	bne.n	8009ff6 <_printf_i+0x1f6>
 8009f60:	f04f 30ff 	mov.w	r0, #4294967295
 8009f64:	b004      	add	sp, #16
 8009f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f6a:	6823      	ldr	r3, [r4, #0]
 8009f6c:	f043 0320 	orr.w	r3, r3, #32
 8009f70:	6023      	str	r3, [r4, #0]
 8009f72:	4833      	ldr	r0, [pc, #204]	; (800a040 <_printf_i+0x240>)
 8009f74:	2778      	movs	r7, #120	; 0x78
 8009f76:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009f7a:	6823      	ldr	r3, [r4, #0]
 8009f7c:	6829      	ldr	r1, [r5, #0]
 8009f7e:	061f      	lsls	r7, r3, #24
 8009f80:	f851 6b04 	ldr.w	r6, [r1], #4
 8009f84:	d402      	bmi.n	8009f8c <_printf_i+0x18c>
 8009f86:	065f      	lsls	r7, r3, #25
 8009f88:	bf48      	it	mi
 8009f8a:	b2b6      	uxthmi	r6, r6
 8009f8c:	07df      	lsls	r7, r3, #31
 8009f8e:	bf48      	it	mi
 8009f90:	f043 0320 	orrmi.w	r3, r3, #32
 8009f94:	6029      	str	r1, [r5, #0]
 8009f96:	bf48      	it	mi
 8009f98:	6023      	strmi	r3, [r4, #0]
 8009f9a:	b91e      	cbnz	r6, 8009fa4 <_printf_i+0x1a4>
 8009f9c:	6823      	ldr	r3, [r4, #0]
 8009f9e:	f023 0320 	bic.w	r3, r3, #32
 8009fa2:	6023      	str	r3, [r4, #0]
 8009fa4:	2310      	movs	r3, #16
 8009fa6:	e7a7      	b.n	8009ef8 <_printf_i+0xf8>
 8009fa8:	4824      	ldr	r0, [pc, #144]	; (800a03c <_printf_i+0x23c>)
 8009faa:	e7e4      	b.n	8009f76 <_printf_i+0x176>
 8009fac:	4615      	mov	r5, r2
 8009fae:	e7bd      	b.n	8009f2c <_printf_i+0x12c>
 8009fb0:	682b      	ldr	r3, [r5, #0]
 8009fb2:	6826      	ldr	r6, [r4, #0]
 8009fb4:	6961      	ldr	r1, [r4, #20]
 8009fb6:	1d18      	adds	r0, r3, #4
 8009fb8:	6028      	str	r0, [r5, #0]
 8009fba:	0635      	lsls	r5, r6, #24
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	d501      	bpl.n	8009fc4 <_printf_i+0x1c4>
 8009fc0:	6019      	str	r1, [r3, #0]
 8009fc2:	e002      	b.n	8009fca <_printf_i+0x1ca>
 8009fc4:	0670      	lsls	r0, r6, #25
 8009fc6:	d5fb      	bpl.n	8009fc0 <_printf_i+0x1c0>
 8009fc8:	8019      	strh	r1, [r3, #0]
 8009fca:	2300      	movs	r3, #0
 8009fcc:	6123      	str	r3, [r4, #16]
 8009fce:	4615      	mov	r5, r2
 8009fd0:	e7bc      	b.n	8009f4c <_printf_i+0x14c>
 8009fd2:	682b      	ldr	r3, [r5, #0]
 8009fd4:	1d1a      	adds	r2, r3, #4
 8009fd6:	602a      	str	r2, [r5, #0]
 8009fd8:	681d      	ldr	r5, [r3, #0]
 8009fda:	6862      	ldr	r2, [r4, #4]
 8009fdc:	2100      	movs	r1, #0
 8009fde:	4628      	mov	r0, r5
 8009fe0:	f7f6 f97e 	bl	80002e0 <memchr>
 8009fe4:	b108      	cbz	r0, 8009fea <_printf_i+0x1ea>
 8009fe6:	1b40      	subs	r0, r0, r5
 8009fe8:	6060      	str	r0, [r4, #4]
 8009fea:	6863      	ldr	r3, [r4, #4]
 8009fec:	6123      	str	r3, [r4, #16]
 8009fee:	2300      	movs	r3, #0
 8009ff0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ff4:	e7aa      	b.n	8009f4c <_printf_i+0x14c>
 8009ff6:	6923      	ldr	r3, [r4, #16]
 8009ff8:	462a      	mov	r2, r5
 8009ffa:	4649      	mov	r1, r9
 8009ffc:	4640      	mov	r0, r8
 8009ffe:	47d0      	blx	sl
 800a000:	3001      	adds	r0, #1
 800a002:	d0ad      	beq.n	8009f60 <_printf_i+0x160>
 800a004:	6823      	ldr	r3, [r4, #0]
 800a006:	079b      	lsls	r3, r3, #30
 800a008:	d413      	bmi.n	800a032 <_printf_i+0x232>
 800a00a:	68e0      	ldr	r0, [r4, #12]
 800a00c:	9b03      	ldr	r3, [sp, #12]
 800a00e:	4298      	cmp	r0, r3
 800a010:	bfb8      	it	lt
 800a012:	4618      	movlt	r0, r3
 800a014:	e7a6      	b.n	8009f64 <_printf_i+0x164>
 800a016:	2301      	movs	r3, #1
 800a018:	4632      	mov	r2, r6
 800a01a:	4649      	mov	r1, r9
 800a01c:	4640      	mov	r0, r8
 800a01e:	47d0      	blx	sl
 800a020:	3001      	adds	r0, #1
 800a022:	d09d      	beq.n	8009f60 <_printf_i+0x160>
 800a024:	3501      	adds	r5, #1
 800a026:	68e3      	ldr	r3, [r4, #12]
 800a028:	9903      	ldr	r1, [sp, #12]
 800a02a:	1a5b      	subs	r3, r3, r1
 800a02c:	42ab      	cmp	r3, r5
 800a02e:	dcf2      	bgt.n	800a016 <_printf_i+0x216>
 800a030:	e7eb      	b.n	800a00a <_printf_i+0x20a>
 800a032:	2500      	movs	r5, #0
 800a034:	f104 0619 	add.w	r6, r4, #25
 800a038:	e7f5      	b.n	800a026 <_printf_i+0x226>
 800a03a:	bf00      	nop
 800a03c:	0800de5e 	.word	0x0800de5e
 800a040:	0800de6f 	.word	0x0800de6f

0800a044 <_scanf_float>:
 800a044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a048:	b087      	sub	sp, #28
 800a04a:	4617      	mov	r7, r2
 800a04c:	9303      	str	r3, [sp, #12]
 800a04e:	688b      	ldr	r3, [r1, #8]
 800a050:	1e5a      	subs	r2, r3, #1
 800a052:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a056:	bf83      	ittte	hi
 800a058:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a05c:	195b      	addhi	r3, r3, r5
 800a05e:	9302      	strhi	r3, [sp, #8]
 800a060:	2300      	movls	r3, #0
 800a062:	bf86      	itte	hi
 800a064:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a068:	608b      	strhi	r3, [r1, #8]
 800a06a:	9302      	strls	r3, [sp, #8]
 800a06c:	680b      	ldr	r3, [r1, #0]
 800a06e:	468b      	mov	fp, r1
 800a070:	2500      	movs	r5, #0
 800a072:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a076:	f84b 3b1c 	str.w	r3, [fp], #28
 800a07a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a07e:	4680      	mov	r8, r0
 800a080:	460c      	mov	r4, r1
 800a082:	465e      	mov	r6, fp
 800a084:	46aa      	mov	sl, r5
 800a086:	46a9      	mov	r9, r5
 800a088:	9501      	str	r5, [sp, #4]
 800a08a:	68a2      	ldr	r2, [r4, #8]
 800a08c:	b152      	cbz	r2, 800a0a4 <_scanf_float+0x60>
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	2b4e      	cmp	r3, #78	; 0x4e
 800a094:	d864      	bhi.n	800a160 <_scanf_float+0x11c>
 800a096:	2b40      	cmp	r3, #64	; 0x40
 800a098:	d83c      	bhi.n	800a114 <_scanf_float+0xd0>
 800a09a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a09e:	b2c8      	uxtb	r0, r1
 800a0a0:	280e      	cmp	r0, #14
 800a0a2:	d93a      	bls.n	800a11a <_scanf_float+0xd6>
 800a0a4:	f1b9 0f00 	cmp.w	r9, #0
 800a0a8:	d003      	beq.n	800a0b2 <_scanf_float+0x6e>
 800a0aa:	6823      	ldr	r3, [r4, #0]
 800a0ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0b0:	6023      	str	r3, [r4, #0]
 800a0b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a0b6:	f1ba 0f01 	cmp.w	sl, #1
 800a0ba:	f200 8113 	bhi.w	800a2e4 <_scanf_float+0x2a0>
 800a0be:	455e      	cmp	r6, fp
 800a0c0:	f200 8105 	bhi.w	800a2ce <_scanf_float+0x28a>
 800a0c4:	2501      	movs	r5, #1
 800a0c6:	4628      	mov	r0, r5
 800a0c8:	b007      	add	sp, #28
 800a0ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0ce:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a0d2:	2a0d      	cmp	r2, #13
 800a0d4:	d8e6      	bhi.n	800a0a4 <_scanf_float+0x60>
 800a0d6:	a101      	add	r1, pc, #4	; (adr r1, 800a0dc <_scanf_float+0x98>)
 800a0d8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a0dc:	0800a21b 	.word	0x0800a21b
 800a0e0:	0800a0a5 	.word	0x0800a0a5
 800a0e4:	0800a0a5 	.word	0x0800a0a5
 800a0e8:	0800a0a5 	.word	0x0800a0a5
 800a0ec:	0800a27b 	.word	0x0800a27b
 800a0f0:	0800a253 	.word	0x0800a253
 800a0f4:	0800a0a5 	.word	0x0800a0a5
 800a0f8:	0800a0a5 	.word	0x0800a0a5
 800a0fc:	0800a229 	.word	0x0800a229
 800a100:	0800a0a5 	.word	0x0800a0a5
 800a104:	0800a0a5 	.word	0x0800a0a5
 800a108:	0800a0a5 	.word	0x0800a0a5
 800a10c:	0800a0a5 	.word	0x0800a0a5
 800a110:	0800a1e1 	.word	0x0800a1e1
 800a114:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a118:	e7db      	b.n	800a0d2 <_scanf_float+0x8e>
 800a11a:	290e      	cmp	r1, #14
 800a11c:	d8c2      	bhi.n	800a0a4 <_scanf_float+0x60>
 800a11e:	a001      	add	r0, pc, #4	; (adr r0, 800a124 <_scanf_float+0xe0>)
 800a120:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a124:	0800a1d3 	.word	0x0800a1d3
 800a128:	0800a0a5 	.word	0x0800a0a5
 800a12c:	0800a1d3 	.word	0x0800a1d3
 800a130:	0800a267 	.word	0x0800a267
 800a134:	0800a0a5 	.word	0x0800a0a5
 800a138:	0800a181 	.word	0x0800a181
 800a13c:	0800a1bd 	.word	0x0800a1bd
 800a140:	0800a1bd 	.word	0x0800a1bd
 800a144:	0800a1bd 	.word	0x0800a1bd
 800a148:	0800a1bd 	.word	0x0800a1bd
 800a14c:	0800a1bd 	.word	0x0800a1bd
 800a150:	0800a1bd 	.word	0x0800a1bd
 800a154:	0800a1bd 	.word	0x0800a1bd
 800a158:	0800a1bd 	.word	0x0800a1bd
 800a15c:	0800a1bd 	.word	0x0800a1bd
 800a160:	2b6e      	cmp	r3, #110	; 0x6e
 800a162:	d809      	bhi.n	800a178 <_scanf_float+0x134>
 800a164:	2b60      	cmp	r3, #96	; 0x60
 800a166:	d8b2      	bhi.n	800a0ce <_scanf_float+0x8a>
 800a168:	2b54      	cmp	r3, #84	; 0x54
 800a16a:	d077      	beq.n	800a25c <_scanf_float+0x218>
 800a16c:	2b59      	cmp	r3, #89	; 0x59
 800a16e:	d199      	bne.n	800a0a4 <_scanf_float+0x60>
 800a170:	2d07      	cmp	r5, #7
 800a172:	d197      	bne.n	800a0a4 <_scanf_float+0x60>
 800a174:	2508      	movs	r5, #8
 800a176:	e029      	b.n	800a1cc <_scanf_float+0x188>
 800a178:	2b74      	cmp	r3, #116	; 0x74
 800a17a:	d06f      	beq.n	800a25c <_scanf_float+0x218>
 800a17c:	2b79      	cmp	r3, #121	; 0x79
 800a17e:	e7f6      	b.n	800a16e <_scanf_float+0x12a>
 800a180:	6821      	ldr	r1, [r4, #0]
 800a182:	05c8      	lsls	r0, r1, #23
 800a184:	d51a      	bpl.n	800a1bc <_scanf_float+0x178>
 800a186:	9b02      	ldr	r3, [sp, #8]
 800a188:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a18c:	6021      	str	r1, [r4, #0]
 800a18e:	f109 0901 	add.w	r9, r9, #1
 800a192:	b11b      	cbz	r3, 800a19c <_scanf_float+0x158>
 800a194:	3b01      	subs	r3, #1
 800a196:	3201      	adds	r2, #1
 800a198:	9302      	str	r3, [sp, #8]
 800a19a:	60a2      	str	r2, [r4, #8]
 800a19c:	68a3      	ldr	r3, [r4, #8]
 800a19e:	3b01      	subs	r3, #1
 800a1a0:	60a3      	str	r3, [r4, #8]
 800a1a2:	6923      	ldr	r3, [r4, #16]
 800a1a4:	3301      	adds	r3, #1
 800a1a6:	6123      	str	r3, [r4, #16]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	3b01      	subs	r3, #1
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	607b      	str	r3, [r7, #4]
 800a1b0:	f340 8084 	ble.w	800a2bc <_scanf_float+0x278>
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	3301      	adds	r3, #1
 800a1b8:	603b      	str	r3, [r7, #0]
 800a1ba:	e766      	b.n	800a08a <_scanf_float+0x46>
 800a1bc:	eb1a 0f05 	cmn.w	sl, r5
 800a1c0:	f47f af70 	bne.w	800a0a4 <_scanf_float+0x60>
 800a1c4:	6822      	ldr	r2, [r4, #0]
 800a1c6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a1ca:	6022      	str	r2, [r4, #0]
 800a1cc:	f806 3b01 	strb.w	r3, [r6], #1
 800a1d0:	e7e4      	b.n	800a19c <_scanf_float+0x158>
 800a1d2:	6822      	ldr	r2, [r4, #0]
 800a1d4:	0610      	lsls	r0, r2, #24
 800a1d6:	f57f af65 	bpl.w	800a0a4 <_scanf_float+0x60>
 800a1da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a1de:	e7f4      	b.n	800a1ca <_scanf_float+0x186>
 800a1e0:	f1ba 0f00 	cmp.w	sl, #0
 800a1e4:	d10e      	bne.n	800a204 <_scanf_float+0x1c0>
 800a1e6:	f1b9 0f00 	cmp.w	r9, #0
 800a1ea:	d10e      	bne.n	800a20a <_scanf_float+0x1c6>
 800a1ec:	6822      	ldr	r2, [r4, #0]
 800a1ee:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a1f2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a1f6:	d108      	bne.n	800a20a <_scanf_float+0x1c6>
 800a1f8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a1fc:	6022      	str	r2, [r4, #0]
 800a1fe:	f04f 0a01 	mov.w	sl, #1
 800a202:	e7e3      	b.n	800a1cc <_scanf_float+0x188>
 800a204:	f1ba 0f02 	cmp.w	sl, #2
 800a208:	d055      	beq.n	800a2b6 <_scanf_float+0x272>
 800a20a:	2d01      	cmp	r5, #1
 800a20c:	d002      	beq.n	800a214 <_scanf_float+0x1d0>
 800a20e:	2d04      	cmp	r5, #4
 800a210:	f47f af48 	bne.w	800a0a4 <_scanf_float+0x60>
 800a214:	3501      	adds	r5, #1
 800a216:	b2ed      	uxtb	r5, r5
 800a218:	e7d8      	b.n	800a1cc <_scanf_float+0x188>
 800a21a:	f1ba 0f01 	cmp.w	sl, #1
 800a21e:	f47f af41 	bne.w	800a0a4 <_scanf_float+0x60>
 800a222:	f04f 0a02 	mov.w	sl, #2
 800a226:	e7d1      	b.n	800a1cc <_scanf_float+0x188>
 800a228:	b97d      	cbnz	r5, 800a24a <_scanf_float+0x206>
 800a22a:	f1b9 0f00 	cmp.w	r9, #0
 800a22e:	f47f af3c 	bne.w	800a0aa <_scanf_float+0x66>
 800a232:	6822      	ldr	r2, [r4, #0]
 800a234:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a238:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a23c:	f47f af39 	bne.w	800a0b2 <_scanf_float+0x6e>
 800a240:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a244:	6022      	str	r2, [r4, #0]
 800a246:	2501      	movs	r5, #1
 800a248:	e7c0      	b.n	800a1cc <_scanf_float+0x188>
 800a24a:	2d03      	cmp	r5, #3
 800a24c:	d0e2      	beq.n	800a214 <_scanf_float+0x1d0>
 800a24e:	2d05      	cmp	r5, #5
 800a250:	e7de      	b.n	800a210 <_scanf_float+0x1cc>
 800a252:	2d02      	cmp	r5, #2
 800a254:	f47f af26 	bne.w	800a0a4 <_scanf_float+0x60>
 800a258:	2503      	movs	r5, #3
 800a25a:	e7b7      	b.n	800a1cc <_scanf_float+0x188>
 800a25c:	2d06      	cmp	r5, #6
 800a25e:	f47f af21 	bne.w	800a0a4 <_scanf_float+0x60>
 800a262:	2507      	movs	r5, #7
 800a264:	e7b2      	b.n	800a1cc <_scanf_float+0x188>
 800a266:	6822      	ldr	r2, [r4, #0]
 800a268:	0591      	lsls	r1, r2, #22
 800a26a:	f57f af1b 	bpl.w	800a0a4 <_scanf_float+0x60>
 800a26e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a272:	6022      	str	r2, [r4, #0]
 800a274:	f8cd 9004 	str.w	r9, [sp, #4]
 800a278:	e7a8      	b.n	800a1cc <_scanf_float+0x188>
 800a27a:	6822      	ldr	r2, [r4, #0]
 800a27c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a280:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a284:	d006      	beq.n	800a294 <_scanf_float+0x250>
 800a286:	0550      	lsls	r0, r2, #21
 800a288:	f57f af0c 	bpl.w	800a0a4 <_scanf_float+0x60>
 800a28c:	f1b9 0f00 	cmp.w	r9, #0
 800a290:	f43f af0f 	beq.w	800a0b2 <_scanf_float+0x6e>
 800a294:	0591      	lsls	r1, r2, #22
 800a296:	bf58      	it	pl
 800a298:	9901      	ldrpl	r1, [sp, #4]
 800a29a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a29e:	bf58      	it	pl
 800a2a0:	eba9 0101 	subpl.w	r1, r9, r1
 800a2a4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a2a8:	bf58      	it	pl
 800a2aa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a2ae:	6022      	str	r2, [r4, #0]
 800a2b0:	f04f 0900 	mov.w	r9, #0
 800a2b4:	e78a      	b.n	800a1cc <_scanf_float+0x188>
 800a2b6:	f04f 0a03 	mov.w	sl, #3
 800a2ba:	e787      	b.n	800a1cc <_scanf_float+0x188>
 800a2bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a2c0:	4639      	mov	r1, r7
 800a2c2:	4640      	mov	r0, r8
 800a2c4:	4798      	blx	r3
 800a2c6:	2800      	cmp	r0, #0
 800a2c8:	f43f aedf 	beq.w	800a08a <_scanf_float+0x46>
 800a2cc:	e6ea      	b.n	800a0a4 <_scanf_float+0x60>
 800a2ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a2d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a2d6:	463a      	mov	r2, r7
 800a2d8:	4640      	mov	r0, r8
 800a2da:	4798      	blx	r3
 800a2dc:	6923      	ldr	r3, [r4, #16]
 800a2de:	3b01      	subs	r3, #1
 800a2e0:	6123      	str	r3, [r4, #16]
 800a2e2:	e6ec      	b.n	800a0be <_scanf_float+0x7a>
 800a2e4:	1e6b      	subs	r3, r5, #1
 800a2e6:	2b06      	cmp	r3, #6
 800a2e8:	d825      	bhi.n	800a336 <_scanf_float+0x2f2>
 800a2ea:	2d02      	cmp	r5, #2
 800a2ec:	d836      	bhi.n	800a35c <_scanf_float+0x318>
 800a2ee:	455e      	cmp	r6, fp
 800a2f0:	f67f aee8 	bls.w	800a0c4 <_scanf_float+0x80>
 800a2f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a2f8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a2fc:	463a      	mov	r2, r7
 800a2fe:	4640      	mov	r0, r8
 800a300:	4798      	blx	r3
 800a302:	6923      	ldr	r3, [r4, #16]
 800a304:	3b01      	subs	r3, #1
 800a306:	6123      	str	r3, [r4, #16]
 800a308:	e7f1      	b.n	800a2ee <_scanf_float+0x2aa>
 800a30a:	9802      	ldr	r0, [sp, #8]
 800a30c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a310:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a314:	9002      	str	r0, [sp, #8]
 800a316:	463a      	mov	r2, r7
 800a318:	4640      	mov	r0, r8
 800a31a:	4798      	blx	r3
 800a31c:	6923      	ldr	r3, [r4, #16]
 800a31e:	3b01      	subs	r3, #1
 800a320:	6123      	str	r3, [r4, #16]
 800a322:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a326:	fa5f fa8a 	uxtb.w	sl, sl
 800a32a:	f1ba 0f02 	cmp.w	sl, #2
 800a32e:	d1ec      	bne.n	800a30a <_scanf_float+0x2c6>
 800a330:	3d03      	subs	r5, #3
 800a332:	b2ed      	uxtb	r5, r5
 800a334:	1b76      	subs	r6, r6, r5
 800a336:	6823      	ldr	r3, [r4, #0]
 800a338:	05da      	lsls	r2, r3, #23
 800a33a:	d52f      	bpl.n	800a39c <_scanf_float+0x358>
 800a33c:	055b      	lsls	r3, r3, #21
 800a33e:	d510      	bpl.n	800a362 <_scanf_float+0x31e>
 800a340:	455e      	cmp	r6, fp
 800a342:	f67f aebf 	bls.w	800a0c4 <_scanf_float+0x80>
 800a346:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a34a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a34e:	463a      	mov	r2, r7
 800a350:	4640      	mov	r0, r8
 800a352:	4798      	blx	r3
 800a354:	6923      	ldr	r3, [r4, #16]
 800a356:	3b01      	subs	r3, #1
 800a358:	6123      	str	r3, [r4, #16]
 800a35a:	e7f1      	b.n	800a340 <_scanf_float+0x2fc>
 800a35c:	46aa      	mov	sl, r5
 800a35e:	9602      	str	r6, [sp, #8]
 800a360:	e7df      	b.n	800a322 <_scanf_float+0x2de>
 800a362:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a366:	6923      	ldr	r3, [r4, #16]
 800a368:	2965      	cmp	r1, #101	; 0x65
 800a36a:	f103 33ff 	add.w	r3, r3, #4294967295
 800a36e:	f106 35ff 	add.w	r5, r6, #4294967295
 800a372:	6123      	str	r3, [r4, #16]
 800a374:	d00c      	beq.n	800a390 <_scanf_float+0x34c>
 800a376:	2945      	cmp	r1, #69	; 0x45
 800a378:	d00a      	beq.n	800a390 <_scanf_float+0x34c>
 800a37a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a37e:	463a      	mov	r2, r7
 800a380:	4640      	mov	r0, r8
 800a382:	4798      	blx	r3
 800a384:	6923      	ldr	r3, [r4, #16]
 800a386:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a38a:	3b01      	subs	r3, #1
 800a38c:	1eb5      	subs	r5, r6, #2
 800a38e:	6123      	str	r3, [r4, #16]
 800a390:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a394:	463a      	mov	r2, r7
 800a396:	4640      	mov	r0, r8
 800a398:	4798      	blx	r3
 800a39a:	462e      	mov	r6, r5
 800a39c:	6825      	ldr	r5, [r4, #0]
 800a39e:	f015 0510 	ands.w	r5, r5, #16
 800a3a2:	d14d      	bne.n	800a440 <_scanf_float+0x3fc>
 800a3a4:	7035      	strb	r5, [r6, #0]
 800a3a6:	6823      	ldr	r3, [r4, #0]
 800a3a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a3ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3b0:	d11a      	bne.n	800a3e8 <_scanf_float+0x3a4>
 800a3b2:	9b01      	ldr	r3, [sp, #4]
 800a3b4:	454b      	cmp	r3, r9
 800a3b6:	eba3 0209 	sub.w	r2, r3, r9
 800a3ba:	d122      	bne.n	800a402 <_scanf_float+0x3be>
 800a3bc:	2200      	movs	r2, #0
 800a3be:	4659      	mov	r1, fp
 800a3c0:	4640      	mov	r0, r8
 800a3c2:	f002 fb8f 	bl	800cae4 <_strtod_r>
 800a3c6:	9b03      	ldr	r3, [sp, #12]
 800a3c8:	6821      	ldr	r1, [r4, #0]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f011 0f02 	tst.w	r1, #2
 800a3d0:	f103 0204 	add.w	r2, r3, #4
 800a3d4:	d020      	beq.n	800a418 <_scanf_float+0x3d4>
 800a3d6:	9903      	ldr	r1, [sp, #12]
 800a3d8:	600a      	str	r2, [r1, #0]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	ed83 0b00 	vstr	d0, [r3]
 800a3e0:	68e3      	ldr	r3, [r4, #12]
 800a3e2:	3301      	adds	r3, #1
 800a3e4:	60e3      	str	r3, [r4, #12]
 800a3e6:	e66e      	b.n	800a0c6 <_scanf_float+0x82>
 800a3e8:	9b04      	ldr	r3, [sp, #16]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d0e6      	beq.n	800a3bc <_scanf_float+0x378>
 800a3ee:	9905      	ldr	r1, [sp, #20]
 800a3f0:	230a      	movs	r3, #10
 800a3f2:	462a      	mov	r2, r5
 800a3f4:	3101      	adds	r1, #1
 800a3f6:	4640      	mov	r0, r8
 800a3f8:	f002 fbfc 	bl	800cbf4 <_strtol_r>
 800a3fc:	9b04      	ldr	r3, [sp, #16]
 800a3fe:	9e05      	ldr	r6, [sp, #20]
 800a400:	1ac2      	subs	r2, r0, r3
 800a402:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a406:	429e      	cmp	r6, r3
 800a408:	bf28      	it	cs
 800a40a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a40e:	490d      	ldr	r1, [pc, #52]	; (800a444 <_scanf_float+0x400>)
 800a410:	4630      	mov	r0, r6
 800a412:	f000 f911 	bl	800a638 <siprintf>
 800a416:	e7d1      	b.n	800a3bc <_scanf_float+0x378>
 800a418:	f011 0f04 	tst.w	r1, #4
 800a41c:	9903      	ldr	r1, [sp, #12]
 800a41e:	600a      	str	r2, [r1, #0]
 800a420:	d1db      	bne.n	800a3da <_scanf_float+0x396>
 800a422:	eeb4 0b40 	vcmp.f64	d0, d0
 800a426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a42a:	681e      	ldr	r6, [r3, #0]
 800a42c:	d705      	bvc.n	800a43a <_scanf_float+0x3f6>
 800a42e:	4806      	ldr	r0, [pc, #24]	; (800a448 <_scanf_float+0x404>)
 800a430:	f000 f9e6 	bl	800a800 <nanf>
 800a434:	ed86 0a00 	vstr	s0, [r6]
 800a438:	e7d2      	b.n	800a3e0 <_scanf_float+0x39c>
 800a43a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800a43e:	e7f9      	b.n	800a434 <_scanf_float+0x3f0>
 800a440:	2500      	movs	r5, #0
 800a442:	e640      	b.n	800a0c6 <_scanf_float+0x82>
 800a444:	0800de80 	.word	0x0800de80
 800a448:	0800e215 	.word	0x0800e215

0800a44c <std>:
 800a44c:	2300      	movs	r3, #0
 800a44e:	b510      	push	{r4, lr}
 800a450:	4604      	mov	r4, r0
 800a452:	e9c0 3300 	strd	r3, r3, [r0]
 800a456:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a45a:	6083      	str	r3, [r0, #8]
 800a45c:	8181      	strh	r1, [r0, #12]
 800a45e:	6643      	str	r3, [r0, #100]	; 0x64
 800a460:	81c2      	strh	r2, [r0, #14]
 800a462:	6183      	str	r3, [r0, #24]
 800a464:	4619      	mov	r1, r3
 800a466:	2208      	movs	r2, #8
 800a468:	305c      	adds	r0, #92	; 0x5c
 800a46a:	f000 f948 	bl	800a6fe <memset>
 800a46e:	4b0d      	ldr	r3, [pc, #52]	; (800a4a4 <std+0x58>)
 800a470:	6263      	str	r3, [r4, #36]	; 0x24
 800a472:	4b0d      	ldr	r3, [pc, #52]	; (800a4a8 <std+0x5c>)
 800a474:	62a3      	str	r3, [r4, #40]	; 0x28
 800a476:	4b0d      	ldr	r3, [pc, #52]	; (800a4ac <std+0x60>)
 800a478:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a47a:	4b0d      	ldr	r3, [pc, #52]	; (800a4b0 <std+0x64>)
 800a47c:	6323      	str	r3, [r4, #48]	; 0x30
 800a47e:	4b0d      	ldr	r3, [pc, #52]	; (800a4b4 <std+0x68>)
 800a480:	6224      	str	r4, [r4, #32]
 800a482:	429c      	cmp	r4, r3
 800a484:	d006      	beq.n	800a494 <std+0x48>
 800a486:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a48a:	4294      	cmp	r4, r2
 800a48c:	d002      	beq.n	800a494 <std+0x48>
 800a48e:	33d0      	adds	r3, #208	; 0xd0
 800a490:	429c      	cmp	r4, r3
 800a492:	d105      	bne.n	800a4a0 <std+0x54>
 800a494:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a49c:	f000 b9ac 	b.w	800a7f8 <__retarget_lock_init_recursive>
 800a4a0:	bd10      	pop	{r4, pc}
 800a4a2:	bf00      	nop
 800a4a4:	0800a679 	.word	0x0800a679
 800a4a8:	0800a69b 	.word	0x0800a69b
 800a4ac:	0800a6d3 	.word	0x0800a6d3
 800a4b0:	0800a6f7 	.word	0x0800a6f7
 800a4b4:	24000a4c 	.word	0x24000a4c

0800a4b8 <stdio_exit_handler>:
 800a4b8:	4a02      	ldr	r2, [pc, #8]	; (800a4c4 <stdio_exit_handler+0xc>)
 800a4ba:	4903      	ldr	r1, [pc, #12]	; (800a4c8 <stdio_exit_handler+0x10>)
 800a4bc:	4803      	ldr	r0, [pc, #12]	; (800a4cc <stdio_exit_handler+0x14>)
 800a4be:	f000 b869 	b.w	800a594 <_fwalk_sglue>
 800a4c2:	bf00      	nop
 800a4c4:	24000010 	.word	0x24000010
 800a4c8:	0800cfb5 	.word	0x0800cfb5
 800a4cc:	2400001c 	.word	0x2400001c

0800a4d0 <cleanup_stdio>:
 800a4d0:	6841      	ldr	r1, [r0, #4]
 800a4d2:	4b0c      	ldr	r3, [pc, #48]	; (800a504 <cleanup_stdio+0x34>)
 800a4d4:	4299      	cmp	r1, r3
 800a4d6:	b510      	push	{r4, lr}
 800a4d8:	4604      	mov	r4, r0
 800a4da:	d001      	beq.n	800a4e0 <cleanup_stdio+0x10>
 800a4dc:	f002 fd6a 	bl	800cfb4 <_fflush_r>
 800a4e0:	68a1      	ldr	r1, [r4, #8]
 800a4e2:	4b09      	ldr	r3, [pc, #36]	; (800a508 <cleanup_stdio+0x38>)
 800a4e4:	4299      	cmp	r1, r3
 800a4e6:	d002      	beq.n	800a4ee <cleanup_stdio+0x1e>
 800a4e8:	4620      	mov	r0, r4
 800a4ea:	f002 fd63 	bl	800cfb4 <_fflush_r>
 800a4ee:	68e1      	ldr	r1, [r4, #12]
 800a4f0:	4b06      	ldr	r3, [pc, #24]	; (800a50c <cleanup_stdio+0x3c>)
 800a4f2:	4299      	cmp	r1, r3
 800a4f4:	d004      	beq.n	800a500 <cleanup_stdio+0x30>
 800a4f6:	4620      	mov	r0, r4
 800a4f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4fc:	f002 bd5a 	b.w	800cfb4 <_fflush_r>
 800a500:	bd10      	pop	{r4, pc}
 800a502:	bf00      	nop
 800a504:	24000a4c 	.word	0x24000a4c
 800a508:	24000ab4 	.word	0x24000ab4
 800a50c:	24000b1c 	.word	0x24000b1c

0800a510 <global_stdio_init.part.0>:
 800a510:	b510      	push	{r4, lr}
 800a512:	4b0b      	ldr	r3, [pc, #44]	; (800a540 <global_stdio_init.part.0+0x30>)
 800a514:	4c0b      	ldr	r4, [pc, #44]	; (800a544 <global_stdio_init.part.0+0x34>)
 800a516:	4a0c      	ldr	r2, [pc, #48]	; (800a548 <global_stdio_init.part.0+0x38>)
 800a518:	601a      	str	r2, [r3, #0]
 800a51a:	4620      	mov	r0, r4
 800a51c:	2200      	movs	r2, #0
 800a51e:	2104      	movs	r1, #4
 800a520:	f7ff ff94 	bl	800a44c <std>
 800a524:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a528:	2201      	movs	r2, #1
 800a52a:	2109      	movs	r1, #9
 800a52c:	f7ff ff8e 	bl	800a44c <std>
 800a530:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a534:	2202      	movs	r2, #2
 800a536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a53a:	2112      	movs	r1, #18
 800a53c:	f7ff bf86 	b.w	800a44c <std>
 800a540:	24000b84 	.word	0x24000b84
 800a544:	24000a4c 	.word	0x24000a4c
 800a548:	0800a4b9 	.word	0x0800a4b9

0800a54c <__sfp_lock_acquire>:
 800a54c:	4801      	ldr	r0, [pc, #4]	; (800a554 <__sfp_lock_acquire+0x8>)
 800a54e:	f000 b954 	b.w	800a7fa <__retarget_lock_acquire_recursive>
 800a552:	bf00      	nop
 800a554:	24000b8d 	.word	0x24000b8d

0800a558 <__sfp_lock_release>:
 800a558:	4801      	ldr	r0, [pc, #4]	; (800a560 <__sfp_lock_release+0x8>)
 800a55a:	f000 b94f 	b.w	800a7fc <__retarget_lock_release_recursive>
 800a55e:	bf00      	nop
 800a560:	24000b8d 	.word	0x24000b8d

0800a564 <__sinit>:
 800a564:	b510      	push	{r4, lr}
 800a566:	4604      	mov	r4, r0
 800a568:	f7ff fff0 	bl	800a54c <__sfp_lock_acquire>
 800a56c:	6a23      	ldr	r3, [r4, #32]
 800a56e:	b11b      	cbz	r3, 800a578 <__sinit+0x14>
 800a570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a574:	f7ff bff0 	b.w	800a558 <__sfp_lock_release>
 800a578:	4b04      	ldr	r3, [pc, #16]	; (800a58c <__sinit+0x28>)
 800a57a:	6223      	str	r3, [r4, #32]
 800a57c:	4b04      	ldr	r3, [pc, #16]	; (800a590 <__sinit+0x2c>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d1f5      	bne.n	800a570 <__sinit+0xc>
 800a584:	f7ff ffc4 	bl	800a510 <global_stdio_init.part.0>
 800a588:	e7f2      	b.n	800a570 <__sinit+0xc>
 800a58a:	bf00      	nop
 800a58c:	0800a4d1 	.word	0x0800a4d1
 800a590:	24000b84 	.word	0x24000b84

0800a594 <_fwalk_sglue>:
 800a594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a598:	4607      	mov	r7, r0
 800a59a:	4688      	mov	r8, r1
 800a59c:	4614      	mov	r4, r2
 800a59e:	2600      	movs	r6, #0
 800a5a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a5a4:	f1b9 0901 	subs.w	r9, r9, #1
 800a5a8:	d505      	bpl.n	800a5b6 <_fwalk_sglue+0x22>
 800a5aa:	6824      	ldr	r4, [r4, #0]
 800a5ac:	2c00      	cmp	r4, #0
 800a5ae:	d1f7      	bne.n	800a5a0 <_fwalk_sglue+0xc>
 800a5b0:	4630      	mov	r0, r6
 800a5b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5b6:	89ab      	ldrh	r3, [r5, #12]
 800a5b8:	2b01      	cmp	r3, #1
 800a5ba:	d907      	bls.n	800a5cc <_fwalk_sglue+0x38>
 800a5bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a5c0:	3301      	adds	r3, #1
 800a5c2:	d003      	beq.n	800a5cc <_fwalk_sglue+0x38>
 800a5c4:	4629      	mov	r1, r5
 800a5c6:	4638      	mov	r0, r7
 800a5c8:	47c0      	blx	r8
 800a5ca:	4306      	orrs	r6, r0
 800a5cc:	3568      	adds	r5, #104	; 0x68
 800a5ce:	e7e9      	b.n	800a5a4 <_fwalk_sglue+0x10>

0800a5d0 <sniprintf>:
 800a5d0:	b40c      	push	{r2, r3}
 800a5d2:	b530      	push	{r4, r5, lr}
 800a5d4:	4b17      	ldr	r3, [pc, #92]	; (800a634 <sniprintf+0x64>)
 800a5d6:	1e0c      	subs	r4, r1, #0
 800a5d8:	681d      	ldr	r5, [r3, #0]
 800a5da:	b09d      	sub	sp, #116	; 0x74
 800a5dc:	da08      	bge.n	800a5f0 <sniprintf+0x20>
 800a5de:	238b      	movs	r3, #139	; 0x8b
 800a5e0:	602b      	str	r3, [r5, #0]
 800a5e2:	f04f 30ff 	mov.w	r0, #4294967295
 800a5e6:	b01d      	add	sp, #116	; 0x74
 800a5e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a5ec:	b002      	add	sp, #8
 800a5ee:	4770      	bx	lr
 800a5f0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a5f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a5f8:	bf14      	ite	ne
 800a5fa:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a5fe:	4623      	moveq	r3, r4
 800a600:	9304      	str	r3, [sp, #16]
 800a602:	9307      	str	r3, [sp, #28]
 800a604:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a608:	9002      	str	r0, [sp, #8]
 800a60a:	9006      	str	r0, [sp, #24]
 800a60c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a610:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a612:	ab21      	add	r3, sp, #132	; 0x84
 800a614:	a902      	add	r1, sp, #8
 800a616:	4628      	mov	r0, r5
 800a618:	9301      	str	r3, [sp, #4]
 800a61a:	f002 fb47 	bl	800ccac <_svfiprintf_r>
 800a61e:	1c43      	adds	r3, r0, #1
 800a620:	bfbc      	itt	lt
 800a622:	238b      	movlt	r3, #139	; 0x8b
 800a624:	602b      	strlt	r3, [r5, #0]
 800a626:	2c00      	cmp	r4, #0
 800a628:	d0dd      	beq.n	800a5e6 <sniprintf+0x16>
 800a62a:	9b02      	ldr	r3, [sp, #8]
 800a62c:	2200      	movs	r2, #0
 800a62e:	701a      	strb	r2, [r3, #0]
 800a630:	e7d9      	b.n	800a5e6 <sniprintf+0x16>
 800a632:	bf00      	nop
 800a634:	24000068 	.word	0x24000068

0800a638 <siprintf>:
 800a638:	b40e      	push	{r1, r2, r3}
 800a63a:	b500      	push	{lr}
 800a63c:	b09c      	sub	sp, #112	; 0x70
 800a63e:	ab1d      	add	r3, sp, #116	; 0x74
 800a640:	9002      	str	r0, [sp, #8]
 800a642:	9006      	str	r0, [sp, #24]
 800a644:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a648:	4809      	ldr	r0, [pc, #36]	; (800a670 <siprintf+0x38>)
 800a64a:	9107      	str	r1, [sp, #28]
 800a64c:	9104      	str	r1, [sp, #16]
 800a64e:	4909      	ldr	r1, [pc, #36]	; (800a674 <siprintf+0x3c>)
 800a650:	f853 2b04 	ldr.w	r2, [r3], #4
 800a654:	9105      	str	r1, [sp, #20]
 800a656:	6800      	ldr	r0, [r0, #0]
 800a658:	9301      	str	r3, [sp, #4]
 800a65a:	a902      	add	r1, sp, #8
 800a65c:	f002 fb26 	bl	800ccac <_svfiprintf_r>
 800a660:	9b02      	ldr	r3, [sp, #8]
 800a662:	2200      	movs	r2, #0
 800a664:	701a      	strb	r2, [r3, #0]
 800a666:	b01c      	add	sp, #112	; 0x70
 800a668:	f85d eb04 	ldr.w	lr, [sp], #4
 800a66c:	b003      	add	sp, #12
 800a66e:	4770      	bx	lr
 800a670:	24000068 	.word	0x24000068
 800a674:	ffff0208 	.word	0xffff0208

0800a678 <__sread>:
 800a678:	b510      	push	{r4, lr}
 800a67a:	460c      	mov	r4, r1
 800a67c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a680:	f000 f86c 	bl	800a75c <_read_r>
 800a684:	2800      	cmp	r0, #0
 800a686:	bfab      	itete	ge
 800a688:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a68a:	89a3      	ldrhlt	r3, [r4, #12]
 800a68c:	181b      	addge	r3, r3, r0
 800a68e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a692:	bfac      	ite	ge
 800a694:	6563      	strge	r3, [r4, #84]	; 0x54
 800a696:	81a3      	strhlt	r3, [r4, #12]
 800a698:	bd10      	pop	{r4, pc}

0800a69a <__swrite>:
 800a69a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a69e:	461f      	mov	r7, r3
 800a6a0:	898b      	ldrh	r3, [r1, #12]
 800a6a2:	05db      	lsls	r3, r3, #23
 800a6a4:	4605      	mov	r5, r0
 800a6a6:	460c      	mov	r4, r1
 800a6a8:	4616      	mov	r6, r2
 800a6aa:	d505      	bpl.n	800a6b8 <__swrite+0x1e>
 800a6ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6b0:	2302      	movs	r3, #2
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	f000 f840 	bl	800a738 <_lseek_r>
 800a6b8:	89a3      	ldrh	r3, [r4, #12]
 800a6ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a6c2:	81a3      	strh	r3, [r4, #12]
 800a6c4:	4632      	mov	r2, r6
 800a6c6:	463b      	mov	r3, r7
 800a6c8:	4628      	mov	r0, r5
 800a6ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6ce:	f000 b857 	b.w	800a780 <_write_r>

0800a6d2 <__sseek>:
 800a6d2:	b510      	push	{r4, lr}
 800a6d4:	460c      	mov	r4, r1
 800a6d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6da:	f000 f82d 	bl	800a738 <_lseek_r>
 800a6de:	1c43      	adds	r3, r0, #1
 800a6e0:	89a3      	ldrh	r3, [r4, #12]
 800a6e2:	bf15      	itete	ne
 800a6e4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a6e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a6ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a6ee:	81a3      	strheq	r3, [r4, #12]
 800a6f0:	bf18      	it	ne
 800a6f2:	81a3      	strhne	r3, [r4, #12]
 800a6f4:	bd10      	pop	{r4, pc}

0800a6f6 <__sclose>:
 800a6f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6fa:	f000 b80d 	b.w	800a718 <_close_r>

0800a6fe <memset>:
 800a6fe:	4402      	add	r2, r0
 800a700:	4603      	mov	r3, r0
 800a702:	4293      	cmp	r3, r2
 800a704:	d100      	bne.n	800a708 <memset+0xa>
 800a706:	4770      	bx	lr
 800a708:	f803 1b01 	strb.w	r1, [r3], #1
 800a70c:	e7f9      	b.n	800a702 <memset+0x4>
	...

0800a710 <_localeconv_r>:
 800a710:	4800      	ldr	r0, [pc, #0]	; (800a714 <_localeconv_r+0x4>)
 800a712:	4770      	bx	lr
 800a714:	2400015c 	.word	0x2400015c

0800a718 <_close_r>:
 800a718:	b538      	push	{r3, r4, r5, lr}
 800a71a:	4d06      	ldr	r5, [pc, #24]	; (800a734 <_close_r+0x1c>)
 800a71c:	2300      	movs	r3, #0
 800a71e:	4604      	mov	r4, r0
 800a720:	4608      	mov	r0, r1
 800a722:	602b      	str	r3, [r5, #0]
 800a724:	f7f7 f9c5 	bl	8001ab2 <_close>
 800a728:	1c43      	adds	r3, r0, #1
 800a72a:	d102      	bne.n	800a732 <_close_r+0x1a>
 800a72c:	682b      	ldr	r3, [r5, #0]
 800a72e:	b103      	cbz	r3, 800a732 <_close_r+0x1a>
 800a730:	6023      	str	r3, [r4, #0]
 800a732:	bd38      	pop	{r3, r4, r5, pc}
 800a734:	24000b88 	.word	0x24000b88

0800a738 <_lseek_r>:
 800a738:	b538      	push	{r3, r4, r5, lr}
 800a73a:	4d07      	ldr	r5, [pc, #28]	; (800a758 <_lseek_r+0x20>)
 800a73c:	4604      	mov	r4, r0
 800a73e:	4608      	mov	r0, r1
 800a740:	4611      	mov	r1, r2
 800a742:	2200      	movs	r2, #0
 800a744:	602a      	str	r2, [r5, #0]
 800a746:	461a      	mov	r2, r3
 800a748:	f7f7 f9da 	bl	8001b00 <_lseek>
 800a74c:	1c43      	adds	r3, r0, #1
 800a74e:	d102      	bne.n	800a756 <_lseek_r+0x1e>
 800a750:	682b      	ldr	r3, [r5, #0]
 800a752:	b103      	cbz	r3, 800a756 <_lseek_r+0x1e>
 800a754:	6023      	str	r3, [r4, #0]
 800a756:	bd38      	pop	{r3, r4, r5, pc}
 800a758:	24000b88 	.word	0x24000b88

0800a75c <_read_r>:
 800a75c:	b538      	push	{r3, r4, r5, lr}
 800a75e:	4d07      	ldr	r5, [pc, #28]	; (800a77c <_read_r+0x20>)
 800a760:	4604      	mov	r4, r0
 800a762:	4608      	mov	r0, r1
 800a764:	4611      	mov	r1, r2
 800a766:	2200      	movs	r2, #0
 800a768:	602a      	str	r2, [r5, #0]
 800a76a:	461a      	mov	r2, r3
 800a76c:	f7f7 f968 	bl	8001a40 <_read>
 800a770:	1c43      	adds	r3, r0, #1
 800a772:	d102      	bne.n	800a77a <_read_r+0x1e>
 800a774:	682b      	ldr	r3, [r5, #0]
 800a776:	b103      	cbz	r3, 800a77a <_read_r+0x1e>
 800a778:	6023      	str	r3, [r4, #0]
 800a77a:	bd38      	pop	{r3, r4, r5, pc}
 800a77c:	24000b88 	.word	0x24000b88

0800a780 <_write_r>:
 800a780:	b538      	push	{r3, r4, r5, lr}
 800a782:	4d07      	ldr	r5, [pc, #28]	; (800a7a0 <_write_r+0x20>)
 800a784:	4604      	mov	r4, r0
 800a786:	4608      	mov	r0, r1
 800a788:	4611      	mov	r1, r2
 800a78a:	2200      	movs	r2, #0
 800a78c:	602a      	str	r2, [r5, #0]
 800a78e:	461a      	mov	r2, r3
 800a790:	f7f7 f973 	bl	8001a7a <_write>
 800a794:	1c43      	adds	r3, r0, #1
 800a796:	d102      	bne.n	800a79e <_write_r+0x1e>
 800a798:	682b      	ldr	r3, [r5, #0]
 800a79a:	b103      	cbz	r3, 800a79e <_write_r+0x1e>
 800a79c:	6023      	str	r3, [r4, #0]
 800a79e:	bd38      	pop	{r3, r4, r5, pc}
 800a7a0:	24000b88 	.word	0x24000b88

0800a7a4 <__errno>:
 800a7a4:	4b01      	ldr	r3, [pc, #4]	; (800a7ac <__errno+0x8>)
 800a7a6:	6818      	ldr	r0, [r3, #0]
 800a7a8:	4770      	bx	lr
 800a7aa:	bf00      	nop
 800a7ac:	24000068 	.word	0x24000068

0800a7b0 <__libc_init_array>:
 800a7b0:	b570      	push	{r4, r5, r6, lr}
 800a7b2:	4d0d      	ldr	r5, [pc, #52]	; (800a7e8 <__libc_init_array+0x38>)
 800a7b4:	4c0d      	ldr	r4, [pc, #52]	; (800a7ec <__libc_init_array+0x3c>)
 800a7b6:	1b64      	subs	r4, r4, r5
 800a7b8:	10a4      	asrs	r4, r4, #2
 800a7ba:	2600      	movs	r6, #0
 800a7bc:	42a6      	cmp	r6, r4
 800a7be:	d109      	bne.n	800a7d4 <__libc_init_array+0x24>
 800a7c0:	4d0b      	ldr	r5, [pc, #44]	; (800a7f0 <__libc_init_array+0x40>)
 800a7c2:	4c0c      	ldr	r4, [pc, #48]	; (800a7f4 <__libc_init_array+0x44>)
 800a7c4:	f003 fb0c 	bl	800dde0 <_init>
 800a7c8:	1b64      	subs	r4, r4, r5
 800a7ca:	10a4      	asrs	r4, r4, #2
 800a7cc:	2600      	movs	r6, #0
 800a7ce:	42a6      	cmp	r6, r4
 800a7d0:	d105      	bne.n	800a7de <__libc_init_array+0x2e>
 800a7d2:	bd70      	pop	{r4, r5, r6, pc}
 800a7d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7d8:	4798      	blx	r3
 800a7da:	3601      	adds	r6, #1
 800a7dc:	e7ee      	b.n	800a7bc <__libc_init_array+0xc>
 800a7de:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7e2:	4798      	blx	r3
 800a7e4:	3601      	adds	r6, #1
 800a7e6:	e7f2      	b.n	800a7ce <__libc_init_array+0x1e>
 800a7e8:	0800e280 	.word	0x0800e280
 800a7ec:	0800e280 	.word	0x0800e280
 800a7f0:	0800e280 	.word	0x0800e280
 800a7f4:	0800e284 	.word	0x0800e284

0800a7f8 <__retarget_lock_init_recursive>:
 800a7f8:	4770      	bx	lr

0800a7fa <__retarget_lock_acquire_recursive>:
 800a7fa:	4770      	bx	lr

0800a7fc <__retarget_lock_release_recursive>:
 800a7fc:	4770      	bx	lr
	...

0800a800 <nanf>:
 800a800:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a808 <nanf+0x8>
 800a804:	4770      	bx	lr
 800a806:	bf00      	nop
 800a808:	7fc00000 	.word	0x7fc00000

0800a80c <quorem>:
 800a80c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a810:	6903      	ldr	r3, [r0, #16]
 800a812:	690c      	ldr	r4, [r1, #16]
 800a814:	42a3      	cmp	r3, r4
 800a816:	4607      	mov	r7, r0
 800a818:	db7e      	blt.n	800a918 <quorem+0x10c>
 800a81a:	3c01      	subs	r4, #1
 800a81c:	f101 0814 	add.w	r8, r1, #20
 800a820:	f100 0514 	add.w	r5, r0, #20
 800a824:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a828:	9301      	str	r3, [sp, #4]
 800a82a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a82e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a832:	3301      	adds	r3, #1
 800a834:	429a      	cmp	r2, r3
 800a836:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a83a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a83e:	fbb2 f6f3 	udiv	r6, r2, r3
 800a842:	d331      	bcc.n	800a8a8 <quorem+0x9c>
 800a844:	f04f 0e00 	mov.w	lr, #0
 800a848:	4640      	mov	r0, r8
 800a84a:	46ac      	mov	ip, r5
 800a84c:	46f2      	mov	sl, lr
 800a84e:	f850 2b04 	ldr.w	r2, [r0], #4
 800a852:	b293      	uxth	r3, r2
 800a854:	fb06 e303 	mla	r3, r6, r3, lr
 800a858:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a85c:	0c1a      	lsrs	r2, r3, #16
 800a85e:	b29b      	uxth	r3, r3
 800a860:	ebaa 0303 	sub.w	r3, sl, r3
 800a864:	f8dc a000 	ldr.w	sl, [ip]
 800a868:	fa13 f38a 	uxtah	r3, r3, sl
 800a86c:	fb06 220e 	mla	r2, r6, lr, r2
 800a870:	9300      	str	r3, [sp, #0]
 800a872:	9b00      	ldr	r3, [sp, #0]
 800a874:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a878:	b292      	uxth	r2, r2
 800a87a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a87e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a882:	f8bd 3000 	ldrh.w	r3, [sp]
 800a886:	4581      	cmp	r9, r0
 800a888:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a88c:	f84c 3b04 	str.w	r3, [ip], #4
 800a890:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a894:	d2db      	bcs.n	800a84e <quorem+0x42>
 800a896:	f855 300b 	ldr.w	r3, [r5, fp]
 800a89a:	b92b      	cbnz	r3, 800a8a8 <quorem+0x9c>
 800a89c:	9b01      	ldr	r3, [sp, #4]
 800a89e:	3b04      	subs	r3, #4
 800a8a0:	429d      	cmp	r5, r3
 800a8a2:	461a      	mov	r2, r3
 800a8a4:	d32c      	bcc.n	800a900 <quorem+0xf4>
 800a8a6:	613c      	str	r4, [r7, #16]
 800a8a8:	4638      	mov	r0, r7
 800a8aa:	f001 f96b 	bl	800bb84 <__mcmp>
 800a8ae:	2800      	cmp	r0, #0
 800a8b0:	db22      	blt.n	800a8f8 <quorem+0xec>
 800a8b2:	3601      	adds	r6, #1
 800a8b4:	4629      	mov	r1, r5
 800a8b6:	2000      	movs	r0, #0
 800a8b8:	f858 2b04 	ldr.w	r2, [r8], #4
 800a8bc:	f8d1 c000 	ldr.w	ip, [r1]
 800a8c0:	b293      	uxth	r3, r2
 800a8c2:	1ac3      	subs	r3, r0, r3
 800a8c4:	0c12      	lsrs	r2, r2, #16
 800a8c6:	fa13 f38c 	uxtah	r3, r3, ip
 800a8ca:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a8ce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a8d2:	b29b      	uxth	r3, r3
 800a8d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a8d8:	45c1      	cmp	r9, r8
 800a8da:	f841 3b04 	str.w	r3, [r1], #4
 800a8de:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a8e2:	d2e9      	bcs.n	800a8b8 <quorem+0xac>
 800a8e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a8e8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a8ec:	b922      	cbnz	r2, 800a8f8 <quorem+0xec>
 800a8ee:	3b04      	subs	r3, #4
 800a8f0:	429d      	cmp	r5, r3
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	d30a      	bcc.n	800a90c <quorem+0x100>
 800a8f6:	613c      	str	r4, [r7, #16]
 800a8f8:	4630      	mov	r0, r6
 800a8fa:	b003      	add	sp, #12
 800a8fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a900:	6812      	ldr	r2, [r2, #0]
 800a902:	3b04      	subs	r3, #4
 800a904:	2a00      	cmp	r2, #0
 800a906:	d1ce      	bne.n	800a8a6 <quorem+0x9a>
 800a908:	3c01      	subs	r4, #1
 800a90a:	e7c9      	b.n	800a8a0 <quorem+0x94>
 800a90c:	6812      	ldr	r2, [r2, #0]
 800a90e:	3b04      	subs	r3, #4
 800a910:	2a00      	cmp	r2, #0
 800a912:	d1f0      	bne.n	800a8f6 <quorem+0xea>
 800a914:	3c01      	subs	r4, #1
 800a916:	e7eb      	b.n	800a8f0 <quorem+0xe4>
 800a918:	2000      	movs	r0, #0
 800a91a:	e7ee      	b.n	800a8fa <quorem+0xee>
 800a91c:	0000      	movs	r0, r0
	...

0800a920 <_dtoa_r>:
 800a920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a924:	ed2d 8b02 	vpush	{d8}
 800a928:	69c5      	ldr	r5, [r0, #28]
 800a92a:	b091      	sub	sp, #68	; 0x44
 800a92c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a930:	ec59 8b10 	vmov	r8, r9, d0
 800a934:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800a936:	9106      	str	r1, [sp, #24]
 800a938:	4606      	mov	r6, r0
 800a93a:	9208      	str	r2, [sp, #32]
 800a93c:	930c      	str	r3, [sp, #48]	; 0x30
 800a93e:	b975      	cbnz	r5, 800a95e <_dtoa_r+0x3e>
 800a940:	2010      	movs	r0, #16
 800a942:	f000 fda5 	bl	800b490 <malloc>
 800a946:	4602      	mov	r2, r0
 800a948:	61f0      	str	r0, [r6, #28]
 800a94a:	b920      	cbnz	r0, 800a956 <_dtoa_r+0x36>
 800a94c:	4ba6      	ldr	r3, [pc, #664]	; (800abe8 <_dtoa_r+0x2c8>)
 800a94e:	21ef      	movs	r1, #239	; 0xef
 800a950:	48a6      	ldr	r0, [pc, #664]	; (800abec <_dtoa_r+0x2cc>)
 800a952:	f002 fba9 	bl	800d0a8 <__assert_func>
 800a956:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a95a:	6005      	str	r5, [r0, #0]
 800a95c:	60c5      	str	r5, [r0, #12]
 800a95e:	69f3      	ldr	r3, [r6, #28]
 800a960:	6819      	ldr	r1, [r3, #0]
 800a962:	b151      	cbz	r1, 800a97a <_dtoa_r+0x5a>
 800a964:	685a      	ldr	r2, [r3, #4]
 800a966:	604a      	str	r2, [r1, #4]
 800a968:	2301      	movs	r3, #1
 800a96a:	4093      	lsls	r3, r2
 800a96c:	608b      	str	r3, [r1, #8]
 800a96e:	4630      	mov	r0, r6
 800a970:	f000 fe82 	bl	800b678 <_Bfree>
 800a974:	69f3      	ldr	r3, [r6, #28]
 800a976:	2200      	movs	r2, #0
 800a978:	601a      	str	r2, [r3, #0]
 800a97a:	f1b9 0300 	subs.w	r3, r9, #0
 800a97e:	bfbb      	ittet	lt
 800a980:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a984:	9303      	strlt	r3, [sp, #12]
 800a986:	2300      	movge	r3, #0
 800a988:	2201      	movlt	r2, #1
 800a98a:	bfac      	ite	ge
 800a98c:	6023      	strge	r3, [r4, #0]
 800a98e:	6022      	strlt	r2, [r4, #0]
 800a990:	4b97      	ldr	r3, [pc, #604]	; (800abf0 <_dtoa_r+0x2d0>)
 800a992:	9c03      	ldr	r4, [sp, #12]
 800a994:	43a3      	bics	r3, r4
 800a996:	d11c      	bne.n	800a9d2 <_dtoa_r+0xb2>
 800a998:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a99a:	f242 730f 	movw	r3, #9999	; 0x270f
 800a99e:	6013      	str	r3, [r2, #0]
 800a9a0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a9a4:	ea53 0308 	orrs.w	r3, r3, r8
 800a9a8:	f000 84fb 	beq.w	800b3a2 <_dtoa_r+0xa82>
 800a9ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a9ae:	b963      	cbnz	r3, 800a9ca <_dtoa_r+0xaa>
 800a9b0:	4b90      	ldr	r3, [pc, #576]	; (800abf4 <_dtoa_r+0x2d4>)
 800a9b2:	e020      	b.n	800a9f6 <_dtoa_r+0xd6>
 800a9b4:	4b90      	ldr	r3, [pc, #576]	; (800abf8 <_dtoa_r+0x2d8>)
 800a9b6:	9301      	str	r3, [sp, #4]
 800a9b8:	3308      	adds	r3, #8
 800a9ba:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a9bc:	6013      	str	r3, [r2, #0]
 800a9be:	9801      	ldr	r0, [sp, #4]
 800a9c0:	b011      	add	sp, #68	; 0x44
 800a9c2:	ecbd 8b02 	vpop	{d8}
 800a9c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9ca:	4b8a      	ldr	r3, [pc, #552]	; (800abf4 <_dtoa_r+0x2d4>)
 800a9cc:	9301      	str	r3, [sp, #4]
 800a9ce:	3303      	adds	r3, #3
 800a9d0:	e7f3      	b.n	800a9ba <_dtoa_r+0x9a>
 800a9d2:	ed9d 8b02 	vldr	d8, [sp, #8]
 800a9d6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a9da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9de:	d10c      	bne.n	800a9fa <_dtoa_r+0xda>
 800a9e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	6013      	str	r3, [r2, #0]
 800a9e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	f000 84d7 	beq.w	800b39c <_dtoa_r+0xa7c>
 800a9ee:	4b83      	ldr	r3, [pc, #524]	; (800abfc <_dtoa_r+0x2dc>)
 800a9f0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a9f2:	6013      	str	r3, [r2, #0]
 800a9f4:	3b01      	subs	r3, #1
 800a9f6:	9301      	str	r3, [sp, #4]
 800a9f8:	e7e1      	b.n	800a9be <_dtoa_r+0x9e>
 800a9fa:	aa0e      	add	r2, sp, #56	; 0x38
 800a9fc:	a90f      	add	r1, sp, #60	; 0x3c
 800a9fe:	4630      	mov	r0, r6
 800aa00:	eeb0 0b48 	vmov.f64	d0, d8
 800aa04:	f001 f9d4 	bl	800bdb0 <__d2b>
 800aa08:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800aa0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa0e:	4605      	mov	r5, r0
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d046      	beq.n	800aaa2 <_dtoa_r+0x182>
 800aa14:	eeb0 7b48 	vmov.f64	d7, d8
 800aa18:	ee18 1a90 	vmov	r1, s17
 800aa1c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800aa20:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800aa24:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800aa28:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800aa2c:	2000      	movs	r0, #0
 800aa2e:	ee07 1a90 	vmov	s15, r1
 800aa32:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800aa36:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800abd0 <_dtoa_r+0x2b0>
 800aa3a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800aa3e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800abd8 <_dtoa_r+0x2b8>
 800aa42:	eea7 6b05 	vfma.f64	d6, d7, d5
 800aa46:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800abe0 <_dtoa_r+0x2c0>
 800aa4a:	ee07 3a90 	vmov	s15, r3
 800aa4e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800aa52:	eeb0 7b46 	vmov.f64	d7, d6
 800aa56:	eea4 7b05 	vfma.f64	d7, d4, d5
 800aa5a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800aa5e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800aa62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa66:	ee16 ba90 	vmov	fp, s13
 800aa6a:	9009      	str	r0, [sp, #36]	; 0x24
 800aa6c:	d508      	bpl.n	800aa80 <_dtoa_r+0x160>
 800aa6e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800aa72:	eeb4 6b47 	vcmp.f64	d6, d7
 800aa76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa7a:	bf18      	it	ne
 800aa7c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800aa80:	f1bb 0f16 	cmp.w	fp, #22
 800aa84:	d82b      	bhi.n	800aade <_dtoa_r+0x1be>
 800aa86:	495e      	ldr	r1, [pc, #376]	; (800ac00 <_dtoa_r+0x2e0>)
 800aa88:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800aa8c:	ed91 7b00 	vldr	d7, [r1]
 800aa90:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800aa94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa98:	d501      	bpl.n	800aa9e <_dtoa_r+0x17e>
 800aa9a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aa9e:	2100      	movs	r1, #0
 800aaa0:	e01e      	b.n	800aae0 <_dtoa_r+0x1c0>
 800aaa2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aaa4:	4413      	add	r3, r2
 800aaa6:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800aaaa:	2920      	cmp	r1, #32
 800aaac:	bfc1      	itttt	gt
 800aaae:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800aab2:	408c      	lslgt	r4, r1
 800aab4:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800aab8:	fa28 f101 	lsrgt.w	r1, r8, r1
 800aabc:	bfd6      	itet	le
 800aabe:	f1c1 0120 	rsble	r1, r1, #32
 800aac2:	4321      	orrgt	r1, r4
 800aac4:	fa08 f101 	lslle.w	r1, r8, r1
 800aac8:	ee07 1a90 	vmov	s15, r1
 800aacc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800aad0:	3b01      	subs	r3, #1
 800aad2:	ee17 1a90 	vmov	r1, s15
 800aad6:	2001      	movs	r0, #1
 800aad8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800aadc:	e7a7      	b.n	800aa2e <_dtoa_r+0x10e>
 800aade:	2101      	movs	r1, #1
 800aae0:	1ad2      	subs	r2, r2, r3
 800aae2:	1e53      	subs	r3, r2, #1
 800aae4:	9305      	str	r3, [sp, #20]
 800aae6:	bf45      	ittet	mi
 800aae8:	f1c2 0301 	rsbmi	r3, r2, #1
 800aaec:	9304      	strmi	r3, [sp, #16]
 800aaee:	2300      	movpl	r3, #0
 800aaf0:	2300      	movmi	r3, #0
 800aaf2:	bf4c      	ite	mi
 800aaf4:	9305      	strmi	r3, [sp, #20]
 800aaf6:	9304      	strpl	r3, [sp, #16]
 800aaf8:	f1bb 0f00 	cmp.w	fp, #0
 800aafc:	910b      	str	r1, [sp, #44]	; 0x2c
 800aafe:	db18      	blt.n	800ab32 <_dtoa_r+0x212>
 800ab00:	9b05      	ldr	r3, [sp, #20]
 800ab02:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800ab06:	445b      	add	r3, fp
 800ab08:	9305      	str	r3, [sp, #20]
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	9a06      	ldr	r2, [sp, #24]
 800ab0e:	2a09      	cmp	r2, #9
 800ab10:	d848      	bhi.n	800aba4 <_dtoa_r+0x284>
 800ab12:	2a05      	cmp	r2, #5
 800ab14:	bfc4      	itt	gt
 800ab16:	3a04      	subgt	r2, #4
 800ab18:	9206      	strgt	r2, [sp, #24]
 800ab1a:	9a06      	ldr	r2, [sp, #24]
 800ab1c:	f1a2 0202 	sub.w	r2, r2, #2
 800ab20:	bfcc      	ite	gt
 800ab22:	2400      	movgt	r4, #0
 800ab24:	2401      	movle	r4, #1
 800ab26:	2a03      	cmp	r2, #3
 800ab28:	d847      	bhi.n	800abba <_dtoa_r+0x29a>
 800ab2a:	e8df f002 	tbb	[pc, r2]
 800ab2e:	2d0b      	.short	0x2d0b
 800ab30:	392b      	.short	0x392b
 800ab32:	9b04      	ldr	r3, [sp, #16]
 800ab34:	2200      	movs	r2, #0
 800ab36:	eba3 030b 	sub.w	r3, r3, fp
 800ab3a:	9304      	str	r3, [sp, #16]
 800ab3c:	920a      	str	r2, [sp, #40]	; 0x28
 800ab3e:	f1cb 0300 	rsb	r3, fp, #0
 800ab42:	e7e3      	b.n	800ab0c <_dtoa_r+0x1ec>
 800ab44:	2200      	movs	r2, #0
 800ab46:	9207      	str	r2, [sp, #28]
 800ab48:	9a08      	ldr	r2, [sp, #32]
 800ab4a:	2a00      	cmp	r2, #0
 800ab4c:	dc38      	bgt.n	800abc0 <_dtoa_r+0x2a0>
 800ab4e:	f04f 0a01 	mov.w	sl, #1
 800ab52:	46d1      	mov	r9, sl
 800ab54:	4652      	mov	r2, sl
 800ab56:	f8cd a020 	str.w	sl, [sp, #32]
 800ab5a:	69f7      	ldr	r7, [r6, #28]
 800ab5c:	2100      	movs	r1, #0
 800ab5e:	2004      	movs	r0, #4
 800ab60:	f100 0c14 	add.w	ip, r0, #20
 800ab64:	4594      	cmp	ip, r2
 800ab66:	d930      	bls.n	800abca <_dtoa_r+0x2aa>
 800ab68:	6079      	str	r1, [r7, #4]
 800ab6a:	4630      	mov	r0, r6
 800ab6c:	930d      	str	r3, [sp, #52]	; 0x34
 800ab6e:	f000 fd43 	bl	800b5f8 <_Balloc>
 800ab72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab74:	9001      	str	r0, [sp, #4]
 800ab76:	4602      	mov	r2, r0
 800ab78:	2800      	cmp	r0, #0
 800ab7a:	d145      	bne.n	800ac08 <_dtoa_r+0x2e8>
 800ab7c:	4b21      	ldr	r3, [pc, #132]	; (800ac04 <_dtoa_r+0x2e4>)
 800ab7e:	f240 11af 	movw	r1, #431	; 0x1af
 800ab82:	e6e5      	b.n	800a950 <_dtoa_r+0x30>
 800ab84:	2201      	movs	r2, #1
 800ab86:	e7de      	b.n	800ab46 <_dtoa_r+0x226>
 800ab88:	2200      	movs	r2, #0
 800ab8a:	9207      	str	r2, [sp, #28]
 800ab8c:	9a08      	ldr	r2, [sp, #32]
 800ab8e:	eb0b 0a02 	add.w	sl, fp, r2
 800ab92:	f10a 0901 	add.w	r9, sl, #1
 800ab96:	464a      	mov	r2, r9
 800ab98:	2a01      	cmp	r2, #1
 800ab9a:	bfb8      	it	lt
 800ab9c:	2201      	movlt	r2, #1
 800ab9e:	e7dc      	b.n	800ab5a <_dtoa_r+0x23a>
 800aba0:	2201      	movs	r2, #1
 800aba2:	e7f2      	b.n	800ab8a <_dtoa_r+0x26a>
 800aba4:	2401      	movs	r4, #1
 800aba6:	2200      	movs	r2, #0
 800aba8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800abac:	f04f 3aff 	mov.w	sl, #4294967295
 800abb0:	2100      	movs	r1, #0
 800abb2:	46d1      	mov	r9, sl
 800abb4:	2212      	movs	r2, #18
 800abb6:	9108      	str	r1, [sp, #32]
 800abb8:	e7cf      	b.n	800ab5a <_dtoa_r+0x23a>
 800abba:	2201      	movs	r2, #1
 800abbc:	9207      	str	r2, [sp, #28]
 800abbe:	e7f5      	b.n	800abac <_dtoa_r+0x28c>
 800abc0:	f8dd a020 	ldr.w	sl, [sp, #32]
 800abc4:	46d1      	mov	r9, sl
 800abc6:	4652      	mov	r2, sl
 800abc8:	e7c7      	b.n	800ab5a <_dtoa_r+0x23a>
 800abca:	3101      	adds	r1, #1
 800abcc:	0040      	lsls	r0, r0, #1
 800abce:	e7c7      	b.n	800ab60 <_dtoa_r+0x240>
 800abd0:	636f4361 	.word	0x636f4361
 800abd4:	3fd287a7 	.word	0x3fd287a7
 800abd8:	8b60c8b3 	.word	0x8b60c8b3
 800abdc:	3fc68a28 	.word	0x3fc68a28
 800abe0:	509f79fb 	.word	0x509f79fb
 800abe4:	3fd34413 	.word	0x3fd34413
 800abe8:	0800de92 	.word	0x0800de92
 800abec:	0800dea9 	.word	0x0800dea9
 800abf0:	7ff00000 	.word	0x7ff00000
 800abf4:	0800de8e 	.word	0x0800de8e
 800abf8:	0800de85 	.word	0x0800de85
 800abfc:	0800de5d 	.word	0x0800de5d
 800ac00:	0800df98 	.word	0x0800df98
 800ac04:	0800df01 	.word	0x0800df01
 800ac08:	69f2      	ldr	r2, [r6, #28]
 800ac0a:	9901      	ldr	r1, [sp, #4]
 800ac0c:	6011      	str	r1, [r2, #0]
 800ac0e:	f1b9 0f0e 	cmp.w	r9, #14
 800ac12:	d86c      	bhi.n	800acee <_dtoa_r+0x3ce>
 800ac14:	2c00      	cmp	r4, #0
 800ac16:	d06a      	beq.n	800acee <_dtoa_r+0x3ce>
 800ac18:	f1bb 0f00 	cmp.w	fp, #0
 800ac1c:	f340 80a0 	ble.w	800ad60 <_dtoa_r+0x440>
 800ac20:	4ac1      	ldr	r2, [pc, #772]	; (800af28 <_dtoa_r+0x608>)
 800ac22:	f00b 010f 	and.w	r1, fp, #15
 800ac26:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800ac2a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ac2e:	ed92 7b00 	vldr	d7, [r2]
 800ac32:	ea4f 122b 	mov.w	r2, fp, asr #4
 800ac36:	f000 8087 	beq.w	800ad48 <_dtoa_r+0x428>
 800ac3a:	49bc      	ldr	r1, [pc, #752]	; (800af2c <_dtoa_r+0x60c>)
 800ac3c:	ed91 6b08 	vldr	d6, [r1, #32]
 800ac40:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800ac44:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ac48:	f002 020f 	and.w	r2, r2, #15
 800ac4c:	2103      	movs	r1, #3
 800ac4e:	48b7      	ldr	r0, [pc, #732]	; (800af2c <_dtoa_r+0x60c>)
 800ac50:	2a00      	cmp	r2, #0
 800ac52:	d17b      	bne.n	800ad4c <_dtoa_r+0x42c>
 800ac54:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ac58:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ac5c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ac60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ac62:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ac66:	2a00      	cmp	r2, #0
 800ac68:	f000 80a0 	beq.w	800adac <_dtoa_r+0x48c>
 800ac6c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800ac70:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ac74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac78:	f140 8098 	bpl.w	800adac <_dtoa_r+0x48c>
 800ac7c:	f1b9 0f00 	cmp.w	r9, #0
 800ac80:	f000 8094 	beq.w	800adac <_dtoa_r+0x48c>
 800ac84:	f1ba 0f00 	cmp.w	sl, #0
 800ac88:	dd2f      	ble.n	800acea <_dtoa_r+0x3ca>
 800ac8a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800ac8e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ac92:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ac96:	f10b 32ff 	add.w	r2, fp, #4294967295
 800ac9a:	3101      	adds	r1, #1
 800ac9c:	4654      	mov	r4, sl
 800ac9e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800aca2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800aca6:	ee07 1a90 	vmov	s15, r1
 800acaa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800acae:	eea7 5b06 	vfma.f64	d5, d7, d6
 800acb2:	ee15 7a90 	vmov	r7, s11
 800acb6:	ec51 0b15 	vmov	r0, r1, d5
 800acba:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800acbe:	2c00      	cmp	r4, #0
 800acc0:	d177      	bne.n	800adb2 <_dtoa_r+0x492>
 800acc2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800acc6:	ee36 6b47 	vsub.f64	d6, d6, d7
 800acca:	ec41 0b17 	vmov	d7, r0, r1
 800acce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800acd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acd6:	f300 826a 	bgt.w	800b1ae <_dtoa_r+0x88e>
 800acda:	eeb1 7b47 	vneg.f64	d7, d7
 800acde:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ace2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ace6:	f100 8260 	bmi.w	800b1aa <_dtoa_r+0x88a>
 800acea:	ed8d 8b02 	vstr	d8, [sp, #8]
 800acee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800acf0:	2a00      	cmp	r2, #0
 800acf2:	f2c0 811d 	blt.w	800af30 <_dtoa_r+0x610>
 800acf6:	f1bb 0f0e 	cmp.w	fp, #14
 800acfa:	f300 8119 	bgt.w	800af30 <_dtoa_r+0x610>
 800acfe:	4b8a      	ldr	r3, [pc, #552]	; (800af28 <_dtoa_r+0x608>)
 800ad00:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ad04:	ed93 6b00 	vldr	d6, [r3]
 800ad08:	9b08      	ldr	r3, [sp, #32]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	f280 80b7 	bge.w	800ae7e <_dtoa_r+0x55e>
 800ad10:	f1b9 0f00 	cmp.w	r9, #0
 800ad14:	f300 80b3 	bgt.w	800ae7e <_dtoa_r+0x55e>
 800ad18:	f040 8246 	bne.w	800b1a8 <_dtoa_r+0x888>
 800ad1c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800ad20:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ad24:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ad28:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ad2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad30:	464c      	mov	r4, r9
 800ad32:	464f      	mov	r7, r9
 800ad34:	f280 821c 	bge.w	800b170 <_dtoa_r+0x850>
 800ad38:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ad3c:	2331      	movs	r3, #49	; 0x31
 800ad3e:	f808 3b01 	strb.w	r3, [r8], #1
 800ad42:	f10b 0b01 	add.w	fp, fp, #1
 800ad46:	e218      	b.n	800b17a <_dtoa_r+0x85a>
 800ad48:	2102      	movs	r1, #2
 800ad4a:	e780      	b.n	800ac4e <_dtoa_r+0x32e>
 800ad4c:	07d4      	lsls	r4, r2, #31
 800ad4e:	d504      	bpl.n	800ad5a <_dtoa_r+0x43a>
 800ad50:	ed90 6b00 	vldr	d6, [r0]
 800ad54:	3101      	adds	r1, #1
 800ad56:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ad5a:	1052      	asrs	r2, r2, #1
 800ad5c:	3008      	adds	r0, #8
 800ad5e:	e777      	b.n	800ac50 <_dtoa_r+0x330>
 800ad60:	d022      	beq.n	800ada8 <_dtoa_r+0x488>
 800ad62:	f1cb 0200 	rsb	r2, fp, #0
 800ad66:	4970      	ldr	r1, [pc, #448]	; (800af28 <_dtoa_r+0x608>)
 800ad68:	f002 000f 	and.w	r0, r2, #15
 800ad6c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800ad70:	ed91 7b00 	vldr	d7, [r1]
 800ad74:	ee28 7b07 	vmul.f64	d7, d8, d7
 800ad78:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ad7c:	486b      	ldr	r0, [pc, #428]	; (800af2c <_dtoa_r+0x60c>)
 800ad7e:	1112      	asrs	r2, r2, #4
 800ad80:	2400      	movs	r4, #0
 800ad82:	2102      	movs	r1, #2
 800ad84:	b92a      	cbnz	r2, 800ad92 <_dtoa_r+0x472>
 800ad86:	2c00      	cmp	r4, #0
 800ad88:	f43f af6a 	beq.w	800ac60 <_dtoa_r+0x340>
 800ad8c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ad90:	e766      	b.n	800ac60 <_dtoa_r+0x340>
 800ad92:	07d7      	lsls	r7, r2, #31
 800ad94:	d505      	bpl.n	800ada2 <_dtoa_r+0x482>
 800ad96:	ed90 6b00 	vldr	d6, [r0]
 800ad9a:	3101      	adds	r1, #1
 800ad9c:	2401      	movs	r4, #1
 800ad9e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ada2:	1052      	asrs	r2, r2, #1
 800ada4:	3008      	adds	r0, #8
 800ada6:	e7ed      	b.n	800ad84 <_dtoa_r+0x464>
 800ada8:	2102      	movs	r1, #2
 800adaa:	e759      	b.n	800ac60 <_dtoa_r+0x340>
 800adac:	465a      	mov	r2, fp
 800adae:	464c      	mov	r4, r9
 800adb0:	e775      	b.n	800ac9e <_dtoa_r+0x37e>
 800adb2:	ec41 0b17 	vmov	d7, r0, r1
 800adb6:	495c      	ldr	r1, [pc, #368]	; (800af28 <_dtoa_r+0x608>)
 800adb8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800adbc:	ed11 4b02 	vldr	d4, [r1, #-8]
 800adc0:	9901      	ldr	r1, [sp, #4]
 800adc2:	440c      	add	r4, r1
 800adc4:	9907      	ldr	r1, [sp, #28]
 800adc6:	b351      	cbz	r1, 800ae1e <_dtoa_r+0x4fe>
 800adc8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800adcc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800add0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800add4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800add8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800addc:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ade0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ade4:	ee14 1a90 	vmov	r1, s9
 800ade8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800adec:	3130      	adds	r1, #48	; 0x30
 800adee:	ee36 6b45 	vsub.f64	d6, d6, d5
 800adf2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800adf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adfa:	f808 1b01 	strb.w	r1, [r8], #1
 800adfe:	d439      	bmi.n	800ae74 <_dtoa_r+0x554>
 800ae00:	ee32 5b46 	vsub.f64	d5, d2, d6
 800ae04:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800ae08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae0c:	d472      	bmi.n	800aef4 <_dtoa_r+0x5d4>
 800ae0e:	45a0      	cmp	r8, r4
 800ae10:	f43f af6b 	beq.w	800acea <_dtoa_r+0x3ca>
 800ae14:	ee27 7b03 	vmul.f64	d7, d7, d3
 800ae18:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ae1c:	e7e0      	b.n	800ade0 <_dtoa_r+0x4c0>
 800ae1e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ae22:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ae26:	4620      	mov	r0, r4
 800ae28:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800ae2c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ae30:	ee14 1a90 	vmov	r1, s9
 800ae34:	3130      	adds	r1, #48	; 0x30
 800ae36:	f808 1b01 	strb.w	r1, [r8], #1
 800ae3a:	45a0      	cmp	r8, r4
 800ae3c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ae40:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ae44:	d118      	bne.n	800ae78 <_dtoa_r+0x558>
 800ae46:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ae4a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800ae4e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800ae52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae56:	dc4d      	bgt.n	800aef4 <_dtoa_r+0x5d4>
 800ae58:	ee35 5b47 	vsub.f64	d5, d5, d7
 800ae5c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800ae60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae64:	f57f af41 	bpl.w	800acea <_dtoa_r+0x3ca>
 800ae68:	4680      	mov	r8, r0
 800ae6a:	3801      	subs	r0, #1
 800ae6c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800ae70:	2b30      	cmp	r3, #48	; 0x30
 800ae72:	d0f9      	beq.n	800ae68 <_dtoa_r+0x548>
 800ae74:	4693      	mov	fp, r2
 800ae76:	e02a      	b.n	800aece <_dtoa_r+0x5ae>
 800ae78:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ae7c:	e7d6      	b.n	800ae2c <_dtoa_r+0x50c>
 800ae7e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ae82:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800ae86:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ae8a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800ae8e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800ae92:	ee15 3a10 	vmov	r3, s10
 800ae96:	3330      	adds	r3, #48	; 0x30
 800ae98:	f808 3b01 	strb.w	r3, [r8], #1
 800ae9c:	9b01      	ldr	r3, [sp, #4]
 800ae9e:	eba8 0303 	sub.w	r3, r8, r3
 800aea2:	4599      	cmp	r9, r3
 800aea4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800aea8:	eea3 7b46 	vfms.f64	d7, d3, d6
 800aeac:	d133      	bne.n	800af16 <_dtoa_r+0x5f6>
 800aeae:	ee37 7b07 	vadd.f64	d7, d7, d7
 800aeb2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800aeb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aeba:	dc1a      	bgt.n	800aef2 <_dtoa_r+0x5d2>
 800aebc:	eeb4 7b46 	vcmp.f64	d7, d6
 800aec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aec4:	d103      	bne.n	800aece <_dtoa_r+0x5ae>
 800aec6:	ee15 3a10 	vmov	r3, s10
 800aeca:	07d9      	lsls	r1, r3, #31
 800aecc:	d411      	bmi.n	800aef2 <_dtoa_r+0x5d2>
 800aece:	4629      	mov	r1, r5
 800aed0:	4630      	mov	r0, r6
 800aed2:	f000 fbd1 	bl	800b678 <_Bfree>
 800aed6:	2300      	movs	r3, #0
 800aed8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aeda:	f888 3000 	strb.w	r3, [r8]
 800aede:	f10b 0301 	add.w	r3, fp, #1
 800aee2:	6013      	str	r3, [r2, #0]
 800aee4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	f43f ad69 	beq.w	800a9be <_dtoa_r+0x9e>
 800aeec:	f8c3 8000 	str.w	r8, [r3]
 800aef0:	e565      	b.n	800a9be <_dtoa_r+0x9e>
 800aef2:	465a      	mov	r2, fp
 800aef4:	4643      	mov	r3, r8
 800aef6:	4698      	mov	r8, r3
 800aef8:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800aefc:	2939      	cmp	r1, #57	; 0x39
 800aefe:	d106      	bne.n	800af0e <_dtoa_r+0x5ee>
 800af00:	9901      	ldr	r1, [sp, #4]
 800af02:	4299      	cmp	r1, r3
 800af04:	d1f7      	bne.n	800aef6 <_dtoa_r+0x5d6>
 800af06:	9801      	ldr	r0, [sp, #4]
 800af08:	2130      	movs	r1, #48	; 0x30
 800af0a:	3201      	adds	r2, #1
 800af0c:	7001      	strb	r1, [r0, #0]
 800af0e:	7819      	ldrb	r1, [r3, #0]
 800af10:	3101      	adds	r1, #1
 800af12:	7019      	strb	r1, [r3, #0]
 800af14:	e7ae      	b.n	800ae74 <_dtoa_r+0x554>
 800af16:	ee27 7b04 	vmul.f64	d7, d7, d4
 800af1a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800af1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af22:	d1b2      	bne.n	800ae8a <_dtoa_r+0x56a>
 800af24:	e7d3      	b.n	800aece <_dtoa_r+0x5ae>
 800af26:	bf00      	nop
 800af28:	0800df98 	.word	0x0800df98
 800af2c:	0800df70 	.word	0x0800df70
 800af30:	9907      	ldr	r1, [sp, #28]
 800af32:	2900      	cmp	r1, #0
 800af34:	f000 80d0 	beq.w	800b0d8 <_dtoa_r+0x7b8>
 800af38:	9906      	ldr	r1, [sp, #24]
 800af3a:	2901      	cmp	r1, #1
 800af3c:	f300 80b4 	bgt.w	800b0a8 <_dtoa_r+0x788>
 800af40:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af42:	2900      	cmp	r1, #0
 800af44:	f000 80ac 	beq.w	800b0a0 <_dtoa_r+0x780>
 800af48:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800af4c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800af50:	461c      	mov	r4, r3
 800af52:	9309      	str	r3, [sp, #36]	; 0x24
 800af54:	9b04      	ldr	r3, [sp, #16]
 800af56:	4413      	add	r3, r2
 800af58:	9304      	str	r3, [sp, #16]
 800af5a:	9b05      	ldr	r3, [sp, #20]
 800af5c:	2101      	movs	r1, #1
 800af5e:	4413      	add	r3, r2
 800af60:	4630      	mov	r0, r6
 800af62:	9305      	str	r3, [sp, #20]
 800af64:	f000 fc88 	bl	800b878 <__i2b>
 800af68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af6a:	4607      	mov	r7, r0
 800af6c:	f1b8 0f00 	cmp.w	r8, #0
 800af70:	d00d      	beq.n	800af8e <_dtoa_r+0x66e>
 800af72:	9a05      	ldr	r2, [sp, #20]
 800af74:	2a00      	cmp	r2, #0
 800af76:	dd0a      	ble.n	800af8e <_dtoa_r+0x66e>
 800af78:	4542      	cmp	r2, r8
 800af7a:	9904      	ldr	r1, [sp, #16]
 800af7c:	bfa8      	it	ge
 800af7e:	4642      	movge	r2, r8
 800af80:	1a89      	subs	r1, r1, r2
 800af82:	9104      	str	r1, [sp, #16]
 800af84:	9905      	ldr	r1, [sp, #20]
 800af86:	eba8 0802 	sub.w	r8, r8, r2
 800af8a:	1a8a      	subs	r2, r1, r2
 800af8c:	9205      	str	r2, [sp, #20]
 800af8e:	b303      	cbz	r3, 800afd2 <_dtoa_r+0x6b2>
 800af90:	9a07      	ldr	r2, [sp, #28]
 800af92:	2a00      	cmp	r2, #0
 800af94:	f000 80a5 	beq.w	800b0e2 <_dtoa_r+0x7c2>
 800af98:	2c00      	cmp	r4, #0
 800af9a:	dd13      	ble.n	800afc4 <_dtoa_r+0x6a4>
 800af9c:	4639      	mov	r1, r7
 800af9e:	4622      	mov	r2, r4
 800afa0:	4630      	mov	r0, r6
 800afa2:	930d      	str	r3, [sp, #52]	; 0x34
 800afa4:	f000 fd28 	bl	800b9f8 <__pow5mult>
 800afa8:	462a      	mov	r2, r5
 800afaa:	4601      	mov	r1, r0
 800afac:	4607      	mov	r7, r0
 800afae:	4630      	mov	r0, r6
 800afb0:	f000 fc78 	bl	800b8a4 <__multiply>
 800afb4:	4629      	mov	r1, r5
 800afb6:	9009      	str	r0, [sp, #36]	; 0x24
 800afb8:	4630      	mov	r0, r6
 800afba:	f000 fb5d 	bl	800b678 <_Bfree>
 800afbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800afc2:	4615      	mov	r5, r2
 800afc4:	1b1a      	subs	r2, r3, r4
 800afc6:	d004      	beq.n	800afd2 <_dtoa_r+0x6b2>
 800afc8:	4629      	mov	r1, r5
 800afca:	4630      	mov	r0, r6
 800afcc:	f000 fd14 	bl	800b9f8 <__pow5mult>
 800afd0:	4605      	mov	r5, r0
 800afd2:	2101      	movs	r1, #1
 800afd4:	4630      	mov	r0, r6
 800afd6:	f000 fc4f 	bl	800b878 <__i2b>
 800afda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afdc:	2b00      	cmp	r3, #0
 800afde:	4604      	mov	r4, r0
 800afe0:	f340 8081 	ble.w	800b0e6 <_dtoa_r+0x7c6>
 800afe4:	461a      	mov	r2, r3
 800afe6:	4601      	mov	r1, r0
 800afe8:	4630      	mov	r0, r6
 800afea:	f000 fd05 	bl	800b9f8 <__pow5mult>
 800afee:	9b06      	ldr	r3, [sp, #24]
 800aff0:	2b01      	cmp	r3, #1
 800aff2:	4604      	mov	r4, r0
 800aff4:	dd7a      	ble.n	800b0ec <_dtoa_r+0x7cc>
 800aff6:	2300      	movs	r3, #0
 800aff8:	9309      	str	r3, [sp, #36]	; 0x24
 800affa:	6922      	ldr	r2, [r4, #16]
 800affc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b000:	6910      	ldr	r0, [r2, #16]
 800b002:	f000 fbeb 	bl	800b7dc <__hi0bits>
 800b006:	f1c0 0020 	rsb	r0, r0, #32
 800b00a:	9b05      	ldr	r3, [sp, #20]
 800b00c:	4418      	add	r0, r3
 800b00e:	f010 001f 	ands.w	r0, r0, #31
 800b012:	f000 8093 	beq.w	800b13c <_dtoa_r+0x81c>
 800b016:	f1c0 0220 	rsb	r2, r0, #32
 800b01a:	2a04      	cmp	r2, #4
 800b01c:	f340 8085 	ble.w	800b12a <_dtoa_r+0x80a>
 800b020:	9b04      	ldr	r3, [sp, #16]
 800b022:	f1c0 001c 	rsb	r0, r0, #28
 800b026:	4403      	add	r3, r0
 800b028:	9304      	str	r3, [sp, #16]
 800b02a:	9b05      	ldr	r3, [sp, #20]
 800b02c:	4480      	add	r8, r0
 800b02e:	4403      	add	r3, r0
 800b030:	9305      	str	r3, [sp, #20]
 800b032:	9b04      	ldr	r3, [sp, #16]
 800b034:	2b00      	cmp	r3, #0
 800b036:	dd05      	ble.n	800b044 <_dtoa_r+0x724>
 800b038:	4629      	mov	r1, r5
 800b03a:	461a      	mov	r2, r3
 800b03c:	4630      	mov	r0, r6
 800b03e:	f000 fd35 	bl	800baac <__lshift>
 800b042:	4605      	mov	r5, r0
 800b044:	9b05      	ldr	r3, [sp, #20]
 800b046:	2b00      	cmp	r3, #0
 800b048:	dd05      	ble.n	800b056 <_dtoa_r+0x736>
 800b04a:	4621      	mov	r1, r4
 800b04c:	461a      	mov	r2, r3
 800b04e:	4630      	mov	r0, r6
 800b050:	f000 fd2c 	bl	800baac <__lshift>
 800b054:	4604      	mov	r4, r0
 800b056:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d071      	beq.n	800b140 <_dtoa_r+0x820>
 800b05c:	4621      	mov	r1, r4
 800b05e:	4628      	mov	r0, r5
 800b060:	f000 fd90 	bl	800bb84 <__mcmp>
 800b064:	2800      	cmp	r0, #0
 800b066:	da6b      	bge.n	800b140 <_dtoa_r+0x820>
 800b068:	2300      	movs	r3, #0
 800b06a:	4629      	mov	r1, r5
 800b06c:	220a      	movs	r2, #10
 800b06e:	4630      	mov	r0, r6
 800b070:	f000 fb24 	bl	800b6bc <__multadd>
 800b074:	9b07      	ldr	r3, [sp, #28]
 800b076:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b07a:	4605      	mov	r5, r0
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	f000 8197 	beq.w	800b3b0 <_dtoa_r+0xa90>
 800b082:	4639      	mov	r1, r7
 800b084:	2300      	movs	r3, #0
 800b086:	220a      	movs	r2, #10
 800b088:	4630      	mov	r0, r6
 800b08a:	f000 fb17 	bl	800b6bc <__multadd>
 800b08e:	f1ba 0f00 	cmp.w	sl, #0
 800b092:	4607      	mov	r7, r0
 800b094:	f300 8093 	bgt.w	800b1be <_dtoa_r+0x89e>
 800b098:	9b06      	ldr	r3, [sp, #24]
 800b09a:	2b02      	cmp	r3, #2
 800b09c:	dc57      	bgt.n	800b14e <_dtoa_r+0x82e>
 800b09e:	e08e      	b.n	800b1be <_dtoa_r+0x89e>
 800b0a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b0a2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b0a6:	e751      	b.n	800af4c <_dtoa_r+0x62c>
 800b0a8:	f109 34ff 	add.w	r4, r9, #4294967295
 800b0ac:	42a3      	cmp	r3, r4
 800b0ae:	bfbf      	itttt	lt
 800b0b0:	1ae2      	sublt	r2, r4, r3
 800b0b2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b0b4:	189b      	addlt	r3, r3, r2
 800b0b6:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b0b8:	bfae      	itee	ge
 800b0ba:	1b1c      	subge	r4, r3, r4
 800b0bc:	4623      	movlt	r3, r4
 800b0be:	2400      	movlt	r4, #0
 800b0c0:	f1b9 0f00 	cmp.w	r9, #0
 800b0c4:	bfb5      	itete	lt
 800b0c6:	9a04      	ldrlt	r2, [sp, #16]
 800b0c8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800b0cc:	eba2 0809 	sublt.w	r8, r2, r9
 800b0d0:	464a      	movge	r2, r9
 800b0d2:	bfb8      	it	lt
 800b0d4:	2200      	movlt	r2, #0
 800b0d6:	e73c      	b.n	800af52 <_dtoa_r+0x632>
 800b0d8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b0dc:	9f07      	ldr	r7, [sp, #28]
 800b0de:	461c      	mov	r4, r3
 800b0e0:	e744      	b.n	800af6c <_dtoa_r+0x64c>
 800b0e2:	461a      	mov	r2, r3
 800b0e4:	e770      	b.n	800afc8 <_dtoa_r+0x6a8>
 800b0e6:	9b06      	ldr	r3, [sp, #24]
 800b0e8:	2b01      	cmp	r3, #1
 800b0ea:	dc18      	bgt.n	800b11e <_dtoa_r+0x7fe>
 800b0ec:	9b02      	ldr	r3, [sp, #8]
 800b0ee:	b9b3      	cbnz	r3, 800b11e <_dtoa_r+0x7fe>
 800b0f0:	9b03      	ldr	r3, [sp, #12]
 800b0f2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800b0f6:	b9a2      	cbnz	r2, 800b122 <_dtoa_r+0x802>
 800b0f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b0fc:	0d12      	lsrs	r2, r2, #20
 800b0fe:	0512      	lsls	r2, r2, #20
 800b100:	b18a      	cbz	r2, 800b126 <_dtoa_r+0x806>
 800b102:	9b04      	ldr	r3, [sp, #16]
 800b104:	3301      	adds	r3, #1
 800b106:	9304      	str	r3, [sp, #16]
 800b108:	9b05      	ldr	r3, [sp, #20]
 800b10a:	3301      	adds	r3, #1
 800b10c:	9305      	str	r3, [sp, #20]
 800b10e:	2301      	movs	r3, #1
 800b110:	9309      	str	r3, [sp, #36]	; 0x24
 800b112:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b114:	2b00      	cmp	r3, #0
 800b116:	f47f af70 	bne.w	800affa <_dtoa_r+0x6da>
 800b11a:	2001      	movs	r0, #1
 800b11c:	e775      	b.n	800b00a <_dtoa_r+0x6ea>
 800b11e:	2300      	movs	r3, #0
 800b120:	e7f6      	b.n	800b110 <_dtoa_r+0x7f0>
 800b122:	9b02      	ldr	r3, [sp, #8]
 800b124:	e7f4      	b.n	800b110 <_dtoa_r+0x7f0>
 800b126:	9209      	str	r2, [sp, #36]	; 0x24
 800b128:	e7f3      	b.n	800b112 <_dtoa_r+0x7f2>
 800b12a:	d082      	beq.n	800b032 <_dtoa_r+0x712>
 800b12c:	9b04      	ldr	r3, [sp, #16]
 800b12e:	321c      	adds	r2, #28
 800b130:	4413      	add	r3, r2
 800b132:	9304      	str	r3, [sp, #16]
 800b134:	9b05      	ldr	r3, [sp, #20]
 800b136:	4490      	add	r8, r2
 800b138:	4413      	add	r3, r2
 800b13a:	e779      	b.n	800b030 <_dtoa_r+0x710>
 800b13c:	4602      	mov	r2, r0
 800b13e:	e7f5      	b.n	800b12c <_dtoa_r+0x80c>
 800b140:	f1b9 0f00 	cmp.w	r9, #0
 800b144:	dc36      	bgt.n	800b1b4 <_dtoa_r+0x894>
 800b146:	9b06      	ldr	r3, [sp, #24]
 800b148:	2b02      	cmp	r3, #2
 800b14a:	dd33      	ble.n	800b1b4 <_dtoa_r+0x894>
 800b14c:	46ca      	mov	sl, r9
 800b14e:	f1ba 0f00 	cmp.w	sl, #0
 800b152:	d10d      	bne.n	800b170 <_dtoa_r+0x850>
 800b154:	4621      	mov	r1, r4
 800b156:	4653      	mov	r3, sl
 800b158:	2205      	movs	r2, #5
 800b15a:	4630      	mov	r0, r6
 800b15c:	f000 faae 	bl	800b6bc <__multadd>
 800b160:	4601      	mov	r1, r0
 800b162:	4604      	mov	r4, r0
 800b164:	4628      	mov	r0, r5
 800b166:	f000 fd0d 	bl	800bb84 <__mcmp>
 800b16a:	2800      	cmp	r0, #0
 800b16c:	f73f ade4 	bgt.w	800ad38 <_dtoa_r+0x418>
 800b170:	9b08      	ldr	r3, [sp, #32]
 800b172:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b176:	ea6f 0b03 	mvn.w	fp, r3
 800b17a:	f04f 0900 	mov.w	r9, #0
 800b17e:	4621      	mov	r1, r4
 800b180:	4630      	mov	r0, r6
 800b182:	f000 fa79 	bl	800b678 <_Bfree>
 800b186:	2f00      	cmp	r7, #0
 800b188:	f43f aea1 	beq.w	800aece <_dtoa_r+0x5ae>
 800b18c:	f1b9 0f00 	cmp.w	r9, #0
 800b190:	d005      	beq.n	800b19e <_dtoa_r+0x87e>
 800b192:	45b9      	cmp	r9, r7
 800b194:	d003      	beq.n	800b19e <_dtoa_r+0x87e>
 800b196:	4649      	mov	r1, r9
 800b198:	4630      	mov	r0, r6
 800b19a:	f000 fa6d 	bl	800b678 <_Bfree>
 800b19e:	4639      	mov	r1, r7
 800b1a0:	4630      	mov	r0, r6
 800b1a2:	f000 fa69 	bl	800b678 <_Bfree>
 800b1a6:	e692      	b.n	800aece <_dtoa_r+0x5ae>
 800b1a8:	2400      	movs	r4, #0
 800b1aa:	4627      	mov	r7, r4
 800b1ac:	e7e0      	b.n	800b170 <_dtoa_r+0x850>
 800b1ae:	4693      	mov	fp, r2
 800b1b0:	4627      	mov	r7, r4
 800b1b2:	e5c1      	b.n	800ad38 <_dtoa_r+0x418>
 800b1b4:	9b07      	ldr	r3, [sp, #28]
 800b1b6:	46ca      	mov	sl, r9
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	f000 8100 	beq.w	800b3be <_dtoa_r+0xa9e>
 800b1be:	f1b8 0f00 	cmp.w	r8, #0
 800b1c2:	dd05      	ble.n	800b1d0 <_dtoa_r+0x8b0>
 800b1c4:	4639      	mov	r1, r7
 800b1c6:	4642      	mov	r2, r8
 800b1c8:	4630      	mov	r0, r6
 800b1ca:	f000 fc6f 	bl	800baac <__lshift>
 800b1ce:	4607      	mov	r7, r0
 800b1d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d05d      	beq.n	800b292 <_dtoa_r+0x972>
 800b1d6:	6879      	ldr	r1, [r7, #4]
 800b1d8:	4630      	mov	r0, r6
 800b1da:	f000 fa0d 	bl	800b5f8 <_Balloc>
 800b1de:	4680      	mov	r8, r0
 800b1e0:	b928      	cbnz	r0, 800b1ee <_dtoa_r+0x8ce>
 800b1e2:	4b82      	ldr	r3, [pc, #520]	; (800b3ec <_dtoa_r+0xacc>)
 800b1e4:	4602      	mov	r2, r0
 800b1e6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b1ea:	f7ff bbb1 	b.w	800a950 <_dtoa_r+0x30>
 800b1ee:	693a      	ldr	r2, [r7, #16]
 800b1f0:	3202      	adds	r2, #2
 800b1f2:	0092      	lsls	r2, r2, #2
 800b1f4:	f107 010c 	add.w	r1, r7, #12
 800b1f8:	300c      	adds	r0, #12
 800b1fa:	f001 ff3f 	bl	800d07c <memcpy>
 800b1fe:	2201      	movs	r2, #1
 800b200:	4641      	mov	r1, r8
 800b202:	4630      	mov	r0, r6
 800b204:	f000 fc52 	bl	800baac <__lshift>
 800b208:	9b01      	ldr	r3, [sp, #4]
 800b20a:	3301      	adds	r3, #1
 800b20c:	9304      	str	r3, [sp, #16]
 800b20e:	9b01      	ldr	r3, [sp, #4]
 800b210:	4453      	add	r3, sl
 800b212:	9308      	str	r3, [sp, #32]
 800b214:	9b02      	ldr	r3, [sp, #8]
 800b216:	f003 0301 	and.w	r3, r3, #1
 800b21a:	46b9      	mov	r9, r7
 800b21c:	9307      	str	r3, [sp, #28]
 800b21e:	4607      	mov	r7, r0
 800b220:	9b04      	ldr	r3, [sp, #16]
 800b222:	4621      	mov	r1, r4
 800b224:	3b01      	subs	r3, #1
 800b226:	4628      	mov	r0, r5
 800b228:	9302      	str	r3, [sp, #8]
 800b22a:	f7ff faef 	bl	800a80c <quorem>
 800b22e:	4603      	mov	r3, r0
 800b230:	3330      	adds	r3, #48	; 0x30
 800b232:	9005      	str	r0, [sp, #20]
 800b234:	4649      	mov	r1, r9
 800b236:	4628      	mov	r0, r5
 800b238:	9309      	str	r3, [sp, #36]	; 0x24
 800b23a:	f000 fca3 	bl	800bb84 <__mcmp>
 800b23e:	463a      	mov	r2, r7
 800b240:	4682      	mov	sl, r0
 800b242:	4621      	mov	r1, r4
 800b244:	4630      	mov	r0, r6
 800b246:	f000 fcb9 	bl	800bbbc <__mdiff>
 800b24a:	68c2      	ldr	r2, [r0, #12]
 800b24c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b24e:	4680      	mov	r8, r0
 800b250:	bb0a      	cbnz	r2, 800b296 <_dtoa_r+0x976>
 800b252:	4601      	mov	r1, r0
 800b254:	4628      	mov	r0, r5
 800b256:	f000 fc95 	bl	800bb84 <__mcmp>
 800b25a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b25c:	4602      	mov	r2, r0
 800b25e:	4641      	mov	r1, r8
 800b260:	4630      	mov	r0, r6
 800b262:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800b266:	f000 fa07 	bl	800b678 <_Bfree>
 800b26a:	9b06      	ldr	r3, [sp, #24]
 800b26c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b26e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b272:	ea43 0102 	orr.w	r1, r3, r2
 800b276:	9b07      	ldr	r3, [sp, #28]
 800b278:	4319      	orrs	r1, r3
 800b27a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b27c:	d10d      	bne.n	800b29a <_dtoa_r+0x97a>
 800b27e:	2b39      	cmp	r3, #57	; 0x39
 800b280:	d029      	beq.n	800b2d6 <_dtoa_r+0x9b6>
 800b282:	f1ba 0f00 	cmp.w	sl, #0
 800b286:	dd01      	ble.n	800b28c <_dtoa_r+0x96c>
 800b288:	9b05      	ldr	r3, [sp, #20]
 800b28a:	3331      	adds	r3, #49	; 0x31
 800b28c:	9a02      	ldr	r2, [sp, #8]
 800b28e:	7013      	strb	r3, [r2, #0]
 800b290:	e775      	b.n	800b17e <_dtoa_r+0x85e>
 800b292:	4638      	mov	r0, r7
 800b294:	e7b8      	b.n	800b208 <_dtoa_r+0x8e8>
 800b296:	2201      	movs	r2, #1
 800b298:	e7e1      	b.n	800b25e <_dtoa_r+0x93e>
 800b29a:	f1ba 0f00 	cmp.w	sl, #0
 800b29e:	db06      	blt.n	800b2ae <_dtoa_r+0x98e>
 800b2a0:	9906      	ldr	r1, [sp, #24]
 800b2a2:	ea41 0a0a 	orr.w	sl, r1, sl
 800b2a6:	9907      	ldr	r1, [sp, #28]
 800b2a8:	ea5a 0a01 	orrs.w	sl, sl, r1
 800b2ac:	d120      	bne.n	800b2f0 <_dtoa_r+0x9d0>
 800b2ae:	2a00      	cmp	r2, #0
 800b2b0:	ddec      	ble.n	800b28c <_dtoa_r+0x96c>
 800b2b2:	4629      	mov	r1, r5
 800b2b4:	2201      	movs	r2, #1
 800b2b6:	4630      	mov	r0, r6
 800b2b8:	9304      	str	r3, [sp, #16]
 800b2ba:	f000 fbf7 	bl	800baac <__lshift>
 800b2be:	4621      	mov	r1, r4
 800b2c0:	4605      	mov	r5, r0
 800b2c2:	f000 fc5f 	bl	800bb84 <__mcmp>
 800b2c6:	2800      	cmp	r0, #0
 800b2c8:	9b04      	ldr	r3, [sp, #16]
 800b2ca:	dc02      	bgt.n	800b2d2 <_dtoa_r+0x9b2>
 800b2cc:	d1de      	bne.n	800b28c <_dtoa_r+0x96c>
 800b2ce:	07da      	lsls	r2, r3, #31
 800b2d0:	d5dc      	bpl.n	800b28c <_dtoa_r+0x96c>
 800b2d2:	2b39      	cmp	r3, #57	; 0x39
 800b2d4:	d1d8      	bne.n	800b288 <_dtoa_r+0x968>
 800b2d6:	9a02      	ldr	r2, [sp, #8]
 800b2d8:	2339      	movs	r3, #57	; 0x39
 800b2da:	7013      	strb	r3, [r2, #0]
 800b2dc:	4643      	mov	r3, r8
 800b2de:	4698      	mov	r8, r3
 800b2e0:	3b01      	subs	r3, #1
 800b2e2:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800b2e6:	2a39      	cmp	r2, #57	; 0x39
 800b2e8:	d051      	beq.n	800b38e <_dtoa_r+0xa6e>
 800b2ea:	3201      	adds	r2, #1
 800b2ec:	701a      	strb	r2, [r3, #0]
 800b2ee:	e746      	b.n	800b17e <_dtoa_r+0x85e>
 800b2f0:	2a00      	cmp	r2, #0
 800b2f2:	dd03      	ble.n	800b2fc <_dtoa_r+0x9dc>
 800b2f4:	2b39      	cmp	r3, #57	; 0x39
 800b2f6:	d0ee      	beq.n	800b2d6 <_dtoa_r+0x9b6>
 800b2f8:	3301      	adds	r3, #1
 800b2fa:	e7c7      	b.n	800b28c <_dtoa_r+0x96c>
 800b2fc:	9a04      	ldr	r2, [sp, #16]
 800b2fe:	9908      	ldr	r1, [sp, #32]
 800b300:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b304:	428a      	cmp	r2, r1
 800b306:	d02b      	beq.n	800b360 <_dtoa_r+0xa40>
 800b308:	4629      	mov	r1, r5
 800b30a:	2300      	movs	r3, #0
 800b30c:	220a      	movs	r2, #10
 800b30e:	4630      	mov	r0, r6
 800b310:	f000 f9d4 	bl	800b6bc <__multadd>
 800b314:	45b9      	cmp	r9, r7
 800b316:	4605      	mov	r5, r0
 800b318:	f04f 0300 	mov.w	r3, #0
 800b31c:	f04f 020a 	mov.w	r2, #10
 800b320:	4649      	mov	r1, r9
 800b322:	4630      	mov	r0, r6
 800b324:	d107      	bne.n	800b336 <_dtoa_r+0xa16>
 800b326:	f000 f9c9 	bl	800b6bc <__multadd>
 800b32a:	4681      	mov	r9, r0
 800b32c:	4607      	mov	r7, r0
 800b32e:	9b04      	ldr	r3, [sp, #16]
 800b330:	3301      	adds	r3, #1
 800b332:	9304      	str	r3, [sp, #16]
 800b334:	e774      	b.n	800b220 <_dtoa_r+0x900>
 800b336:	f000 f9c1 	bl	800b6bc <__multadd>
 800b33a:	4639      	mov	r1, r7
 800b33c:	4681      	mov	r9, r0
 800b33e:	2300      	movs	r3, #0
 800b340:	220a      	movs	r2, #10
 800b342:	4630      	mov	r0, r6
 800b344:	f000 f9ba 	bl	800b6bc <__multadd>
 800b348:	4607      	mov	r7, r0
 800b34a:	e7f0      	b.n	800b32e <_dtoa_r+0xa0e>
 800b34c:	f1ba 0f00 	cmp.w	sl, #0
 800b350:	9a01      	ldr	r2, [sp, #4]
 800b352:	bfcc      	ite	gt
 800b354:	46d0      	movgt	r8, sl
 800b356:	f04f 0801 	movle.w	r8, #1
 800b35a:	4490      	add	r8, r2
 800b35c:	f04f 0900 	mov.w	r9, #0
 800b360:	4629      	mov	r1, r5
 800b362:	2201      	movs	r2, #1
 800b364:	4630      	mov	r0, r6
 800b366:	9302      	str	r3, [sp, #8]
 800b368:	f000 fba0 	bl	800baac <__lshift>
 800b36c:	4621      	mov	r1, r4
 800b36e:	4605      	mov	r5, r0
 800b370:	f000 fc08 	bl	800bb84 <__mcmp>
 800b374:	2800      	cmp	r0, #0
 800b376:	dcb1      	bgt.n	800b2dc <_dtoa_r+0x9bc>
 800b378:	d102      	bne.n	800b380 <_dtoa_r+0xa60>
 800b37a:	9b02      	ldr	r3, [sp, #8]
 800b37c:	07db      	lsls	r3, r3, #31
 800b37e:	d4ad      	bmi.n	800b2dc <_dtoa_r+0x9bc>
 800b380:	4643      	mov	r3, r8
 800b382:	4698      	mov	r8, r3
 800b384:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b388:	2a30      	cmp	r2, #48	; 0x30
 800b38a:	d0fa      	beq.n	800b382 <_dtoa_r+0xa62>
 800b38c:	e6f7      	b.n	800b17e <_dtoa_r+0x85e>
 800b38e:	9a01      	ldr	r2, [sp, #4]
 800b390:	429a      	cmp	r2, r3
 800b392:	d1a4      	bne.n	800b2de <_dtoa_r+0x9be>
 800b394:	f10b 0b01 	add.w	fp, fp, #1
 800b398:	2331      	movs	r3, #49	; 0x31
 800b39a:	e778      	b.n	800b28e <_dtoa_r+0x96e>
 800b39c:	4b14      	ldr	r3, [pc, #80]	; (800b3f0 <_dtoa_r+0xad0>)
 800b39e:	f7ff bb2a 	b.w	800a9f6 <_dtoa_r+0xd6>
 800b3a2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	f47f ab05 	bne.w	800a9b4 <_dtoa_r+0x94>
 800b3aa:	4b12      	ldr	r3, [pc, #72]	; (800b3f4 <_dtoa_r+0xad4>)
 800b3ac:	f7ff bb23 	b.w	800a9f6 <_dtoa_r+0xd6>
 800b3b0:	f1ba 0f00 	cmp.w	sl, #0
 800b3b4:	dc03      	bgt.n	800b3be <_dtoa_r+0xa9e>
 800b3b6:	9b06      	ldr	r3, [sp, #24]
 800b3b8:	2b02      	cmp	r3, #2
 800b3ba:	f73f aec8 	bgt.w	800b14e <_dtoa_r+0x82e>
 800b3be:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b3c2:	4621      	mov	r1, r4
 800b3c4:	4628      	mov	r0, r5
 800b3c6:	f7ff fa21 	bl	800a80c <quorem>
 800b3ca:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b3ce:	f808 3b01 	strb.w	r3, [r8], #1
 800b3d2:	9a01      	ldr	r2, [sp, #4]
 800b3d4:	eba8 0202 	sub.w	r2, r8, r2
 800b3d8:	4592      	cmp	sl, r2
 800b3da:	ddb7      	ble.n	800b34c <_dtoa_r+0xa2c>
 800b3dc:	4629      	mov	r1, r5
 800b3de:	2300      	movs	r3, #0
 800b3e0:	220a      	movs	r2, #10
 800b3e2:	4630      	mov	r0, r6
 800b3e4:	f000 f96a 	bl	800b6bc <__multadd>
 800b3e8:	4605      	mov	r5, r0
 800b3ea:	e7ea      	b.n	800b3c2 <_dtoa_r+0xaa2>
 800b3ec:	0800df01 	.word	0x0800df01
 800b3f0:	0800de5c 	.word	0x0800de5c
 800b3f4:	0800de85 	.word	0x0800de85

0800b3f8 <_free_r>:
 800b3f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b3fa:	2900      	cmp	r1, #0
 800b3fc:	d044      	beq.n	800b488 <_free_r+0x90>
 800b3fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b402:	9001      	str	r0, [sp, #4]
 800b404:	2b00      	cmp	r3, #0
 800b406:	f1a1 0404 	sub.w	r4, r1, #4
 800b40a:	bfb8      	it	lt
 800b40c:	18e4      	addlt	r4, r4, r3
 800b40e:	f000 f8e7 	bl	800b5e0 <__malloc_lock>
 800b412:	4a1e      	ldr	r2, [pc, #120]	; (800b48c <_free_r+0x94>)
 800b414:	9801      	ldr	r0, [sp, #4]
 800b416:	6813      	ldr	r3, [r2, #0]
 800b418:	b933      	cbnz	r3, 800b428 <_free_r+0x30>
 800b41a:	6063      	str	r3, [r4, #4]
 800b41c:	6014      	str	r4, [r2, #0]
 800b41e:	b003      	add	sp, #12
 800b420:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b424:	f000 b8e2 	b.w	800b5ec <__malloc_unlock>
 800b428:	42a3      	cmp	r3, r4
 800b42a:	d908      	bls.n	800b43e <_free_r+0x46>
 800b42c:	6825      	ldr	r5, [r4, #0]
 800b42e:	1961      	adds	r1, r4, r5
 800b430:	428b      	cmp	r3, r1
 800b432:	bf01      	itttt	eq
 800b434:	6819      	ldreq	r1, [r3, #0]
 800b436:	685b      	ldreq	r3, [r3, #4]
 800b438:	1949      	addeq	r1, r1, r5
 800b43a:	6021      	streq	r1, [r4, #0]
 800b43c:	e7ed      	b.n	800b41a <_free_r+0x22>
 800b43e:	461a      	mov	r2, r3
 800b440:	685b      	ldr	r3, [r3, #4]
 800b442:	b10b      	cbz	r3, 800b448 <_free_r+0x50>
 800b444:	42a3      	cmp	r3, r4
 800b446:	d9fa      	bls.n	800b43e <_free_r+0x46>
 800b448:	6811      	ldr	r1, [r2, #0]
 800b44a:	1855      	adds	r5, r2, r1
 800b44c:	42a5      	cmp	r5, r4
 800b44e:	d10b      	bne.n	800b468 <_free_r+0x70>
 800b450:	6824      	ldr	r4, [r4, #0]
 800b452:	4421      	add	r1, r4
 800b454:	1854      	adds	r4, r2, r1
 800b456:	42a3      	cmp	r3, r4
 800b458:	6011      	str	r1, [r2, #0]
 800b45a:	d1e0      	bne.n	800b41e <_free_r+0x26>
 800b45c:	681c      	ldr	r4, [r3, #0]
 800b45e:	685b      	ldr	r3, [r3, #4]
 800b460:	6053      	str	r3, [r2, #4]
 800b462:	440c      	add	r4, r1
 800b464:	6014      	str	r4, [r2, #0]
 800b466:	e7da      	b.n	800b41e <_free_r+0x26>
 800b468:	d902      	bls.n	800b470 <_free_r+0x78>
 800b46a:	230c      	movs	r3, #12
 800b46c:	6003      	str	r3, [r0, #0]
 800b46e:	e7d6      	b.n	800b41e <_free_r+0x26>
 800b470:	6825      	ldr	r5, [r4, #0]
 800b472:	1961      	adds	r1, r4, r5
 800b474:	428b      	cmp	r3, r1
 800b476:	bf04      	itt	eq
 800b478:	6819      	ldreq	r1, [r3, #0]
 800b47a:	685b      	ldreq	r3, [r3, #4]
 800b47c:	6063      	str	r3, [r4, #4]
 800b47e:	bf04      	itt	eq
 800b480:	1949      	addeq	r1, r1, r5
 800b482:	6021      	streq	r1, [r4, #0]
 800b484:	6054      	str	r4, [r2, #4]
 800b486:	e7ca      	b.n	800b41e <_free_r+0x26>
 800b488:	b003      	add	sp, #12
 800b48a:	bd30      	pop	{r4, r5, pc}
 800b48c:	24000b90 	.word	0x24000b90

0800b490 <malloc>:
 800b490:	4b02      	ldr	r3, [pc, #8]	; (800b49c <malloc+0xc>)
 800b492:	4601      	mov	r1, r0
 800b494:	6818      	ldr	r0, [r3, #0]
 800b496:	f000 b823 	b.w	800b4e0 <_malloc_r>
 800b49a:	bf00      	nop
 800b49c:	24000068 	.word	0x24000068

0800b4a0 <sbrk_aligned>:
 800b4a0:	b570      	push	{r4, r5, r6, lr}
 800b4a2:	4e0e      	ldr	r6, [pc, #56]	; (800b4dc <sbrk_aligned+0x3c>)
 800b4a4:	460c      	mov	r4, r1
 800b4a6:	6831      	ldr	r1, [r6, #0]
 800b4a8:	4605      	mov	r5, r0
 800b4aa:	b911      	cbnz	r1, 800b4b2 <sbrk_aligned+0x12>
 800b4ac:	f001 fdd6 	bl	800d05c <_sbrk_r>
 800b4b0:	6030      	str	r0, [r6, #0]
 800b4b2:	4621      	mov	r1, r4
 800b4b4:	4628      	mov	r0, r5
 800b4b6:	f001 fdd1 	bl	800d05c <_sbrk_r>
 800b4ba:	1c43      	adds	r3, r0, #1
 800b4bc:	d00a      	beq.n	800b4d4 <sbrk_aligned+0x34>
 800b4be:	1cc4      	adds	r4, r0, #3
 800b4c0:	f024 0403 	bic.w	r4, r4, #3
 800b4c4:	42a0      	cmp	r0, r4
 800b4c6:	d007      	beq.n	800b4d8 <sbrk_aligned+0x38>
 800b4c8:	1a21      	subs	r1, r4, r0
 800b4ca:	4628      	mov	r0, r5
 800b4cc:	f001 fdc6 	bl	800d05c <_sbrk_r>
 800b4d0:	3001      	adds	r0, #1
 800b4d2:	d101      	bne.n	800b4d8 <sbrk_aligned+0x38>
 800b4d4:	f04f 34ff 	mov.w	r4, #4294967295
 800b4d8:	4620      	mov	r0, r4
 800b4da:	bd70      	pop	{r4, r5, r6, pc}
 800b4dc:	24000b94 	.word	0x24000b94

0800b4e0 <_malloc_r>:
 800b4e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4e4:	1ccd      	adds	r5, r1, #3
 800b4e6:	f025 0503 	bic.w	r5, r5, #3
 800b4ea:	3508      	adds	r5, #8
 800b4ec:	2d0c      	cmp	r5, #12
 800b4ee:	bf38      	it	cc
 800b4f0:	250c      	movcc	r5, #12
 800b4f2:	2d00      	cmp	r5, #0
 800b4f4:	4607      	mov	r7, r0
 800b4f6:	db01      	blt.n	800b4fc <_malloc_r+0x1c>
 800b4f8:	42a9      	cmp	r1, r5
 800b4fa:	d905      	bls.n	800b508 <_malloc_r+0x28>
 800b4fc:	230c      	movs	r3, #12
 800b4fe:	603b      	str	r3, [r7, #0]
 800b500:	2600      	movs	r6, #0
 800b502:	4630      	mov	r0, r6
 800b504:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b508:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b5dc <_malloc_r+0xfc>
 800b50c:	f000 f868 	bl	800b5e0 <__malloc_lock>
 800b510:	f8d8 3000 	ldr.w	r3, [r8]
 800b514:	461c      	mov	r4, r3
 800b516:	bb5c      	cbnz	r4, 800b570 <_malloc_r+0x90>
 800b518:	4629      	mov	r1, r5
 800b51a:	4638      	mov	r0, r7
 800b51c:	f7ff ffc0 	bl	800b4a0 <sbrk_aligned>
 800b520:	1c43      	adds	r3, r0, #1
 800b522:	4604      	mov	r4, r0
 800b524:	d155      	bne.n	800b5d2 <_malloc_r+0xf2>
 800b526:	f8d8 4000 	ldr.w	r4, [r8]
 800b52a:	4626      	mov	r6, r4
 800b52c:	2e00      	cmp	r6, #0
 800b52e:	d145      	bne.n	800b5bc <_malloc_r+0xdc>
 800b530:	2c00      	cmp	r4, #0
 800b532:	d048      	beq.n	800b5c6 <_malloc_r+0xe6>
 800b534:	6823      	ldr	r3, [r4, #0]
 800b536:	4631      	mov	r1, r6
 800b538:	4638      	mov	r0, r7
 800b53a:	eb04 0903 	add.w	r9, r4, r3
 800b53e:	f001 fd8d 	bl	800d05c <_sbrk_r>
 800b542:	4581      	cmp	r9, r0
 800b544:	d13f      	bne.n	800b5c6 <_malloc_r+0xe6>
 800b546:	6821      	ldr	r1, [r4, #0]
 800b548:	1a6d      	subs	r5, r5, r1
 800b54a:	4629      	mov	r1, r5
 800b54c:	4638      	mov	r0, r7
 800b54e:	f7ff ffa7 	bl	800b4a0 <sbrk_aligned>
 800b552:	3001      	adds	r0, #1
 800b554:	d037      	beq.n	800b5c6 <_malloc_r+0xe6>
 800b556:	6823      	ldr	r3, [r4, #0]
 800b558:	442b      	add	r3, r5
 800b55a:	6023      	str	r3, [r4, #0]
 800b55c:	f8d8 3000 	ldr.w	r3, [r8]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d038      	beq.n	800b5d6 <_malloc_r+0xf6>
 800b564:	685a      	ldr	r2, [r3, #4]
 800b566:	42a2      	cmp	r2, r4
 800b568:	d12b      	bne.n	800b5c2 <_malloc_r+0xe2>
 800b56a:	2200      	movs	r2, #0
 800b56c:	605a      	str	r2, [r3, #4]
 800b56e:	e00f      	b.n	800b590 <_malloc_r+0xb0>
 800b570:	6822      	ldr	r2, [r4, #0]
 800b572:	1b52      	subs	r2, r2, r5
 800b574:	d41f      	bmi.n	800b5b6 <_malloc_r+0xd6>
 800b576:	2a0b      	cmp	r2, #11
 800b578:	d917      	bls.n	800b5aa <_malloc_r+0xca>
 800b57a:	1961      	adds	r1, r4, r5
 800b57c:	42a3      	cmp	r3, r4
 800b57e:	6025      	str	r5, [r4, #0]
 800b580:	bf18      	it	ne
 800b582:	6059      	strne	r1, [r3, #4]
 800b584:	6863      	ldr	r3, [r4, #4]
 800b586:	bf08      	it	eq
 800b588:	f8c8 1000 	streq.w	r1, [r8]
 800b58c:	5162      	str	r2, [r4, r5]
 800b58e:	604b      	str	r3, [r1, #4]
 800b590:	4638      	mov	r0, r7
 800b592:	f104 060b 	add.w	r6, r4, #11
 800b596:	f000 f829 	bl	800b5ec <__malloc_unlock>
 800b59a:	f026 0607 	bic.w	r6, r6, #7
 800b59e:	1d23      	adds	r3, r4, #4
 800b5a0:	1af2      	subs	r2, r6, r3
 800b5a2:	d0ae      	beq.n	800b502 <_malloc_r+0x22>
 800b5a4:	1b9b      	subs	r3, r3, r6
 800b5a6:	50a3      	str	r3, [r4, r2]
 800b5a8:	e7ab      	b.n	800b502 <_malloc_r+0x22>
 800b5aa:	42a3      	cmp	r3, r4
 800b5ac:	6862      	ldr	r2, [r4, #4]
 800b5ae:	d1dd      	bne.n	800b56c <_malloc_r+0x8c>
 800b5b0:	f8c8 2000 	str.w	r2, [r8]
 800b5b4:	e7ec      	b.n	800b590 <_malloc_r+0xb0>
 800b5b6:	4623      	mov	r3, r4
 800b5b8:	6864      	ldr	r4, [r4, #4]
 800b5ba:	e7ac      	b.n	800b516 <_malloc_r+0x36>
 800b5bc:	4634      	mov	r4, r6
 800b5be:	6876      	ldr	r6, [r6, #4]
 800b5c0:	e7b4      	b.n	800b52c <_malloc_r+0x4c>
 800b5c2:	4613      	mov	r3, r2
 800b5c4:	e7cc      	b.n	800b560 <_malloc_r+0x80>
 800b5c6:	230c      	movs	r3, #12
 800b5c8:	603b      	str	r3, [r7, #0]
 800b5ca:	4638      	mov	r0, r7
 800b5cc:	f000 f80e 	bl	800b5ec <__malloc_unlock>
 800b5d0:	e797      	b.n	800b502 <_malloc_r+0x22>
 800b5d2:	6025      	str	r5, [r4, #0]
 800b5d4:	e7dc      	b.n	800b590 <_malloc_r+0xb0>
 800b5d6:	605b      	str	r3, [r3, #4]
 800b5d8:	deff      	udf	#255	; 0xff
 800b5da:	bf00      	nop
 800b5dc:	24000b90 	.word	0x24000b90

0800b5e0 <__malloc_lock>:
 800b5e0:	4801      	ldr	r0, [pc, #4]	; (800b5e8 <__malloc_lock+0x8>)
 800b5e2:	f7ff b90a 	b.w	800a7fa <__retarget_lock_acquire_recursive>
 800b5e6:	bf00      	nop
 800b5e8:	24000b8c 	.word	0x24000b8c

0800b5ec <__malloc_unlock>:
 800b5ec:	4801      	ldr	r0, [pc, #4]	; (800b5f4 <__malloc_unlock+0x8>)
 800b5ee:	f7ff b905 	b.w	800a7fc <__retarget_lock_release_recursive>
 800b5f2:	bf00      	nop
 800b5f4:	24000b8c 	.word	0x24000b8c

0800b5f8 <_Balloc>:
 800b5f8:	b570      	push	{r4, r5, r6, lr}
 800b5fa:	69c6      	ldr	r6, [r0, #28]
 800b5fc:	4604      	mov	r4, r0
 800b5fe:	460d      	mov	r5, r1
 800b600:	b976      	cbnz	r6, 800b620 <_Balloc+0x28>
 800b602:	2010      	movs	r0, #16
 800b604:	f7ff ff44 	bl	800b490 <malloc>
 800b608:	4602      	mov	r2, r0
 800b60a:	61e0      	str	r0, [r4, #28]
 800b60c:	b920      	cbnz	r0, 800b618 <_Balloc+0x20>
 800b60e:	4b18      	ldr	r3, [pc, #96]	; (800b670 <_Balloc+0x78>)
 800b610:	4818      	ldr	r0, [pc, #96]	; (800b674 <_Balloc+0x7c>)
 800b612:	216b      	movs	r1, #107	; 0x6b
 800b614:	f001 fd48 	bl	800d0a8 <__assert_func>
 800b618:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b61c:	6006      	str	r6, [r0, #0]
 800b61e:	60c6      	str	r6, [r0, #12]
 800b620:	69e6      	ldr	r6, [r4, #28]
 800b622:	68f3      	ldr	r3, [r6, #12]
 800b624:	b183      	cbz	r3, 800b648 <_Balloc+0x50>
 800b626:	69e3      	ldr	r3, [r4, #28]
 800b628:	68db      	ldr	r3, [r3, #12]
 800b62a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b62e:	b9b8      	cbnz	r0, 800b660 <_Balloc+0x68>
 800b630:	2101      	movs	r1, #1
 800b632:	fa01 f605 	lsl.w	r6, r1, r5
 800b636:	1d72      	adds	r2, r6, #5
 800b638:	0092      	lsls	r2, r2, #2
 800b63a:	4620      	mov	r0, r4
 800b63c:	f001 fd52 	bl	800d0e4 <_calloc_r>
 800b640:	b160      	cbz	r0, 800b65c <_Balloc+0x64>
 800b642:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b646:	e00e      	b.n	800b666 <_Balloc+0x6e>
 800b648:	2221      	movs	r2, #33	; 0x21
 800b64a:	2104      	movs	r1, #4
 800b64c:	4620      	mov	r0, r4
 800b64e:	f001 fd49 	bl	800d0e4 <_calloc_r>
 800b652:	69e3      	ldr	r3, [r4, #28]
 800b654:	60f0      	str	r0, [r6, #12]
 800b656:	68db      	ldr	r3, [r3, #12]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d1e4      	bne.n	800b626 <_Balloc+0x2e>
 800b65c:	2000      	movs	r0, #0
 800b65e:	bd70      	pop	{r4, r5, r6, pc}
 800b660:	6802      	ldr	r2, [r0, #0]
 800b662:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b666:	2300      	movs	r3, #0
 800b668:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b66c:	e7f7      	b.n	800b65e <_Balloc+0x66>
 800b66e:	bf00      	nop
 800b670:	0800de92 	.word	0x0800de92
 800b674:	0800df12 	.word	0x0800df12

0800b678 <_Bfree>:
 800b678:	b570      	push	{r4, r5, r6, lr}
 800b67a:	69c6      	ldr	r6, [r0, #28]
 800b67c:	4605      	mov	r5, r0
 800b67e:	460c      	mov	r4, r1
 800b680:	b976      	cbnz	r6, 800b6a0 <_Bfree+0x28>
 800b682:	2010      	movs	r0, #16
 800b684:	f7ff ff04 	bl	800b490 <malloc>
 800b688:	4602      	mov	r2, r0
 800b68a:	61e8      	str	r0, [r5, #28]
 800b68c:	b920      	cbnz	r0, 800b698 <_Bfree+0x20>
 800b68e:	4b09      	ldr	r3, [pc, #36]	; (800b6b4 <_Bfree+0x3c>)
 800b690:	4809      	ldr	r0, [pc, #36]	; (800b6b8 <_Bfree+0x40>)
 800b692:	218f      	movs	r1, #143	; 0x8f
 800b694:	f001 fd08 	bl	800d0a8 <__assert_func>
 800b698:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b69c:	6006      	str	r6, [r0, #0]
 800b69e:	60c6      	str	r6, [r0, #12]
 800b6a0:	b13c      	cbz	r4, 800b6b2 <_Bfree+0x3a>
 800b6a2:	69eb      	ldr	r3, [r5, #28]
 800b6a4:	6862      	ldr	r2, [r4, #4]
 800b6a6:	68db      	ldr	r3, [r3, #12]
 800b6a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b6ac:	6021      	str	r1, [r4, #0]
 800b6ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b6b2:	bd70      	pop	{r4, r5, r6, pc}
 800b6b4:	0800de92 	.word	0x0800de92
 800b6b8:	0800df12 	.word	0x0800df12

0800b6bc <__multadd>:
 800b6bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6c0:	690d      	ldr	r5, [r1, #16]
 800b6c2:	4607      	mov	r7, r0
 800b6c4:	460c      	mov	r4, r1
 800b6c6:	461e      	mov	r6, r3
 800b6c8:	f101 0c14 	add.w	ip, r1, #20
 800b6cc:	2000      	movs	r0, #0
 800b6ce:	f8dc 3000 	ldr.w	r3, [ip]
 800b6d2:	b299      	uxth	r1, r3
 800b6d4:	fb02 6101 	mla	r1, r2, r1, r6
 800b6d8:	0c1e      	lsrs	r6, r3, #16
 800b6da:	0c0b      	lsrs	r3, r1, #16
 800b6dc:	fb02 3306 	mla	r3, r2, r6, r3
 800b6e0:	b289      	uxth	r1, r1
 800b6e2:	3001      	adds	r0, #1
 800b6e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b6e8:	4285      	cmp	r5, r0
 800b6ea:	f84c 1b04 	str.w	r1, [ip], #4
 800b6ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b6f2:	dcec      	bgt.n	800b6ce <__multadd+0x12>
 800b6f4:	b30e      	cbz	r6, 800b73a <__multadd+0x7e>
 800b6f6:	68a3      	ldr	r3, [r4, #8]
 800b6f8:	42ab      	cmp	r3, r5
 800b6fa:	dc19      	bgt.n	800b730 <__multadd+0x74>
 800b6fc:	6861      	ldr	r1, [r4, #4]
 800b6fe:	4638      	mov	r0, r7
 800b700:	3101      	adds	r1, #1
 800b702:	f7ff ff79 	bl	800b5f8 <_Balloc>
 800b706:	4680      	mov	r8, r0
 800b708:	b928      	cbnz	r0, 800b716 <__multadd+0x5a>
 800b70a:	4602      	mov	r2, r0
 800b70c:	4b0c      	ldr	r3, [pc, #48]	; (800b740 <__multadd+0x84>)
 800b70e:	480d      	ldr	r0, [pc, #52]	; (800b744 <__multadd+0x88>)
 800b710:	21ba      	movs	r1, #186	; 0xba
 800b712:	f001 fcc9 	bl	800d0a8 <__assert_func>
 800b716:	6922      	ldr	r2, [r4, #16]
 800b718:	3202      	adds	r2, #2
 800b71a:	f104 010c 	add.w	r1, r4, #12
 800b71e:	0092      	lsls	r2, r2, #2
 800b720:	300c      	adds	r0, #12
 800b722:	f001 fcab 	bl	800d07c <memcpy>
 800b726:	4621      	mov	r1, r4
 800b728:	4638      	mov	r0, r7
 800b72a:	f7ff ffa5 	bl	800b678 <_Bfree>
 800b72e:	4644      	mov	r4, r8
 800b730:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b734:	3501      	adds	r5, #1
 800b736:	615e      	str	r6, [r3, #20]
 800b738:	6125      	str	r5, [r4, #16]
 800b73a:	4620      	mov	r0, r4
 800b73c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b740:	0800df01 	.word	0x0800df01
 800b744:	0800df12 	.word	0x0800df12

0800b748 <__s2b>:
 800b748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b74c:	460c      	mov	r4, r1
 800b74e:	4615      	mov	r5, r2
 800b750:	461f      	mov	r7, r3
 800b752:	2209      	movs	r2, #9
 800b754:	3308      	adds	r3, #8
 800b756:	4606      	mov	r6, r0
 800b758:	fb93 f3f2 	sdiv	r3, r3, r2
 800b75c:	2100      	movs	r1, #0
 800b75e:	2201      	movs	r2, #1
 800b760:	429a      	cmp	r2, r3
 800b762:	db09      	blt.n	800b778 <__s2b+0x30>
 800b764:	4630      	mov	r0, r6
 800b766:	f7ff ff47 	bl	800b5f8 <_Balloc>
 800b76a:	b940      	cbnz	r0, 800b77e <__s2b+0x36>
 800b76c:	4602      	mov	r2, r0
 800b76e:	4b19      	ldr	r3, [pc, #100]	; (800b7d4 <__s2b+0x8c>)
 800b770:	4819      	ldr	r0, [pc, #100]	; (800b7d8 <__s2b+0x90>)
 800b772:	21d3      	movs	r1, #211	; 0xd3
 800b774:	f001 fc98 	bl	800d0a8 <__assert_func>
 800b778:	0052      	lsls	r2, r2, #1
 800b77a:	3101      	adds	r1, #1
 800b77c:	e7f0      	b.n	800b760 <__s2b+0x18>
 800b77e:	9b08      	ldr	r3, [sp, #32]
 800b780:	6143      	str	r3, [r0, #20]
 800b782:	2d09      	cmp	r5, #9
 800b784:	f04f 0301 	mov.w	r3, #1
 800b788:	6103      	str	r3, [r0, #16]
 800b78a:	dd16      	ble.n	800b7ba <__s2b+0x72>
 800b78c:	f104 0909 	add.w	r9, r4, #9
 800b790:	46c8      	mov	r8, r9
 800b792:	442c      	add	r4, r5
 800b794:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b798:	4601      	mov	r1, r0
 800b79a:	3b30      	subs	r3, #48	; 0x30
 800b79c:	220a      	movs	r2, #10
 800b79e:	4630      	mov	r0, r6
 800b7a0:	f7ff ff8c 	bl	800b6bc <__multadd>
 800b7a4:	45a0      	cmp	r8, r4
 800b7a6:	d1f5      	bne.n	800b794 <__s2b+0x4c>
 800b7a8:	f1a5 0408 	sub.w	r4, r5, #8
 800b7ac:	444c      	add	r4, r9
 800b7ae:	1b2d      	subs	r5, r5, r4
 800b7b0:	1963      	adds	r3, r4, r5
 800b7b2:	42bb      	cmp	r3, r7
 800b7b4:	db04      	blt.n	800b7c0 <__s2b+0x78>
 800b7b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7ba:	340a      	adds	r4, #10
 800b7bc:	2509      	movs	r5, #9
 800b7be:	e7f6      	b.n	800b7ae <__s2b+0x66>
 800b7c0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b7c4:	4601      	mov	r1, r0
 800b7c6:	3b30      	subs	r3, #48	; 0x30
 800b7c8:	220a      	movs	r2, #10
 800b7ca:	4630      	mov	r0, r6
 800b7cc:	f7ff ff76 	bl	800b6bc <__multadd>
 800b7d0:	e7ee      	b.n	800b7b0 <__s2b+0x68>
 800b7d2:	bf00      	nop
 800b7d4:	0800df01 	.word	0x0800df01
 800b7d8:	0800df12 	.word	0x0800df12

0800b7dc <__hi0bits>:
 800b7dc:	0c03      	lsrs	r3, r0, #16
 800b7de:	041b      	lsls	r3, r3, #16
 800b7e0:	b9d3      	cbnz	r3, 800b818 <__hi0bits+0x3c>
 800b7e2:	0400      	lsls	r0, r0, #16
 800b7e4:	2310      	movs	r3, #16
 800b7e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b7ea:	bf04      	itt	eq
 800b7ec:	0200      	lsleq	r0, r0, #8
 800b7ee:	3308      	addeq	r3, #8
 800b7f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b7f4:	bf04      	itt	eq
 800b7f6:	0100      	lsleq	r0, r0, #4
 800b7f8:	3304      	addeq	r3, #4
 800b7fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b7fe:	bf04      	itt	eq
 800b800:	0080      	lsleq	r0, r0, #2
 800b802:	3302      	addeq	r3, #2
 800b804:	2800      	cmp	r0, #0
 800b806:	db05      	blt.n	800b814 <__hi0bits+0x38>
 800b808:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b80c:	f103 0301 	add.w	r3, r3, #1
 800b810:	bf08      	it	eq
 800b812:	2320      	moveq	r3, #32
 800b814:	4618      	mov	r0, r3
 800b816:	4770      	bx	lr
 800b818:	2300      	movs	r3, #0
 800b81a:	e7e4      	b.n	800b7e6 <__hi0bits+0xa>

0800b81c <__lo0bits>:
 800b81c:	6803      	ldr	r3, [r0, #0]
 800b81e:	f013 0207 	ands.w	r2, r3, #7
 800b822:	d00c      	beq.n	800b83e <__lo0bits+0x22>
 800b824:	07d9      	lsls	r1, r3, #31
 800b826:	d422      	bmi.n	800b86e <__lo0bits+0x52>
 800b828:	079a      	lsls	r2, r3, #30
 800b82a:	bf49      	itett	mi
 800b82c:	085b      	lsrmi	r3, r3, #1
 800b82e:	089b      	lsrpl	r3, r3, #2
 800b830:	6003      	strmi	r3, [r0, #0]
 800b832:	2201      	movmi	r2, #1
 800b834:	bf5c      	itt	pl
 800b836:	6003      	strpl	r3, [r0, #0]
 800b838:	2202      	movpl	r2, #2
 800b83a:	4610      	mov	r0, r2
 800b83c:	4770      	bx	lr
 800b83e:	b299      	uxth	r1, r3
 800b840:	b909      	cbnz	r1, 800b846 <__lo0bits+0x2a>
 800b842:	0c1b      	lsrs	r3, r3, #16
 800b844:	2210      	movs	r2, #16
 800b846:	b2d9      	uxtb	r1, r3
 800b848:	b909      	cbnz	r1, 800b84e <__lo0bits+0x32>
 800b84a:	3208      	adds	r2, #8
 800b84c:	0a1b      	lsrs	r3, r3, #8
 800b84e:	0719      	lsls	r1, r3, #28
 800b850:	bf04      	itt	eq
 800b852:	091b      	lsreq	r3, r3, #4
 800b854:	3204      	addeq	r2, #4
 800b856:	0799      	lsls	r1, r3, #30
 800b858:	bf04      	itt	eq
 800b85a:	089b      	lsreq	r3, r3, #2
 800b85c:	3202      	addeq	r2, #2
 800b85e:	07d9      	lsls	r1, r3, #31
 800b860:	d403      	bmi.n	800b86a <__lo0bits+0x4e>
 800b862:	085b      	lsrs	r3, r3, #1
 800b864:	f102 0201 	add.w	r2, r2, #1
 800b868:	d003      	beq.n	800b872 <__lo0bits+0x56>
 800b86a:	6003      	str	r3, [r0, #0]
 800b86c:	e7e5      	b.n	800b83a <__lo0bits+0x1e>
 800b86e:	2200      	movs	r2, #0
 800b870:	e7e3      	b.n	800b83a <__lo0bits+0x1e>
 800b872:	2220      	movs	r2, #32
 800b874:	e7e1      	b.n	800b83a <__lo0bits+0x1e>
	...

0800b878 <__i2b>:
 800b878:	b510      	push	{r4, lr}
 800b87a:	460c      	mov	r4, r1
 800b87c:	2101      	movs	r1, #1
 800b87e:	f7ff febb 	bl	800b5f8 <_Balloc>
 800b882:	4602      	mov	r2, r0
 800b884:	b928      	cbnz	r0, 800b892 <__i2b+0x1a>
 800b886:	4b05      	ldr	r3, [pc, #20]	; (800b89c <__i2b+0x24>)
 800b888:	4805      	ldr	r0, [pc, #20]	; (800b8a0 <__i2b+0x28>)
 800b88a:	f240 1145 	movw	r1, #325	; 0x145
 800b88e:	f001 fc0b 	bl	800d0a8 <__assert_func>
 800b892:	2301      	movs	r3, #1
 800b894:	6144      	str	r4, [r0, #20]
 800b896:	6103      	str	r3, [r0, #16]
 800b898:	bd10      	pop	{r4, pc}
 800b89a:	bf00      	nop
 800b89c:	0800df01 	.word	0x0800df01
 800b8a0:	0800df12 	.word	0x0800df12

0800b8a4 <__multiply>:
 800b8a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8a8:	4691      	mov	r9, r2
 800b8aa:	690a      	ldr	r2, [r1, #16]
 800b8ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b8b0:	429a      	cmp	r2, r3
 800b8b2:	bfb8      	it	lt
 800b8b4:	460b      	movlt	r3, r1
 800b8b6:	460c      	mov	r4, r1
 800b8b8:	bfbc      	itt	lt
 800b8ba:	464c      	movlt	r4, r9
 800b8bc:	4699      	movlt	r9, r3
 800b8be:	6927      	ldr	r7, [r4, #16]
 800b8c0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b8c4:	68a3      	ldr	r3, [r4, #8]
 800b8c6:	6861      	ldr	r1, [r4, #4]
 800b8c8:	eb07 060a 	add.w	r6, r7, sl
 800b8cc:	42b3      	cmp	r3, r6
 800b8ce:	b085      	sub	sp, #20
 800b8d0:	bfb8      	it	lt
 800b8d2:	3101      	addlt	r1, #1
 800b8d4:	f7ff fe90 	bl	800b5f8 <_Balloc>
 800b8d8:	b930      	cbnz	r0, 800b8e8 <__multiply+0x44>
 800b8da:	4602      	mov	r2, r0
 800b8dc:	4b44      	ldr	r3, [pc, #272]	; (800b9f0 <__multiply+0x14c>)
 800b8de:	4845      	ldr	r0, [pc, #276]	; (800b9f4 <__multiply+0x150>)
 800b8e0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b8e4:	f001 fbe0 	bl	800d0a8 <__assert_func>
 800b8e8:	f100 0514 	add.w	r5, r0, #20
 800b8ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b8f0:	462b      	mov	r3, r5
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	4543      	cmp	r3, r8
 800b8f6:	d321      	bcc.n	800b93c <__multiply+0x98>
 800b8f8:	f104 0314 	add.w	r3, r4, #20
 800b8fc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b900:	f109 0314 	add.w	r3, r9, #20
 800b904:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b908:	9202      	str	r2, [sp, #8]
 800b90a:	1b3a      	subs	r2, r7, r4
 800b90c:	3a15      	subs	r2, #21
 800b90e:	f022 0203 	bic.w	r2, r2, #3
 800b912:	3204      	adds	r2, #4
 800b914:	f104 0115 	add.w	r1, r4, #21
 800b918:	428f      	cmp	r7, r1
 800b91a:	bf38      	it	cc
 800b91c:	2204      	movcc	r2, #4
 800b91e:	9201      	str	r2, [sp, #4]
 800b920:	9a02      	ldr	r2, [sp, #8]
 800b922:	9303      	str	r3, [sp, #12]
 800b924:	429a      	cmp	r2, r3
 800b926:	d80c      	bhi.n	800b942 <__multiply+0x9e>
 800b928:	2e00      	cmp	r6, #0
 800b92a:	dd03      	ble.n	800b934 <__multiply+0x90>
 800b92c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b930:	2b00      	cmp	r3, #0
 800b932:	d05b      	beq.n	800b9ec <__multiply+0x148>
 800b934:	6106      	str	r6, [r0, #16]
 800b936:	b005      	add	sp, #20
 800b938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b93c:	f843 2b04 	str.w	r2, [r3], #4
 800b940:	e7d8      	b.n	800b8f4 <__multiply+0x50>
 800b942:	f8b3 a000 	ldrh.w	sl, [r3]
 800b946:	f1ba 0f00 	cmp.w	sl, #0
 800b94a:	d024      	beq.n	800b996 <__multiply+0xf2>
 800b94c:	f104 0e14 	add.w	lr, r4, #20
 800b950:	46a9      	mov	r9, r5
 800b952:	f04f 0c00 	mov.w	ip, #0
 800b956:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b95a:	f8d9 1000 	ldr.w	r1, [r9]
 800b95e:	fa1f fb82 	uxth.w	fp, r2
 800b962:	b289      	uxth	r1, r1
 800b964:	fb0a 110b 	mla	r1, sl, fp, r1
 800b968:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b96c:	f8d9 2000 	ldr.w	r2, [r9]
 800b970:	4461      	add	r1, ip
 800b972:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b976:	fb0a c20b 	mla	r2, sl, fp, ip
 800b97a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b97e:	b289      	uxth	r1, r1
 800b980:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b984:	4577      	cmp	r7, lr
 800b986:	f849 1b04 	str.w	r1, [r9], #4
 800b98a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b98e:	d8e2      	bhi.n	800b956 <__multiply+0xb2>
 800b990:	9a01      	ldr	r2, [sp, #4]
 800b992:	f845 c002 	str.w	ip, [r5, r2]
 800b996:	9a03      	ldr	r2, [sp, #12]
 800b998:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b99c:	3304      	adds	r3, #4
 800b99e:	f1b9 0f00 	cmp.w	r9, #0
 800b9a2:	d021      	beq.n	800b9e8 <__multiply+0x144>
 800b9a4:	6829      	ldr	r1, [r5, #0]
 800b9a6:	f104 0c14 	add.w	ip, r4, #20
 800b9aa:	46ae      	mov	lr, r5
 800b9ac:	f04f 0a00 	mov.w	sl, #0
 800b9b0:	f8bc b000 	ldrh.w	fp, [ip]
 800b9b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b9b8:	fb09 220b 	mla	r2, r9, fp, r2
 800b9bc:	4452      	add	r2, sl
 800b9be:	b289      	uxth	r1, r1
 800b9c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b9c4:	f84e 1b04 	str.w	r1, [lr], #4
 800b9c8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b9cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b9d0:	f8be 1000 	ldrh.w	r1, [lr]
 800b9d4:	fb09 110a 	mla	r1, r9, sl, r1
 800b9d8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b9dc:	4567      	cmp	r7, ip
 800b9de:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b9e2:	d8e5      	bhi.n	800b9b0 <__multiply+0x10c>
 800b9e4:	9a01      	ldr	r2, [sp, #4]
 800b9e6:	50a9      	str	r1, [r5, r2]
 800b9e8:	3504      	adds	r5, #4
 800b9ea:	e799      	b.n	800b920 <__multiply+0x7c>
 800b9ec:	3e01      	subs	r6, #1
 800b9ee:	e79b      	b.n	800b928 <__multiply+0x84>
 800b9f0:	0800df01 	.word	0x0800df01
 800b9f4:	0800df12 	.word	0x0800df12

0800b9f8 <__pow5mult>:
 800b9f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9fc:	4615      	mov	r5, r2
 800b9fe:	f012 0203 	ands.w	r2, r2, #3
 800ba02:	4606      	mov	r6, r0
 800ba04:	460f      	mov	r7, r1
 800ba06:	d007      	beq.n	800ba18 <__pow5mult+0x20>
 800ba08:	4c25      	ldr	r4, [pc, #148]	; (800baa0 <__pow5mult+0xa8>)
 800ba0a:	3a01      	subs	r2, #1
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ba12:	f7ff fe53 	bl	800b6bc <__multadd>
 800ba16:	4607      	mov	r7, r0
 800ba18:	10ad      	asrs	r5, r5, #2
 800ba1a:	d03d      	beq.n	800ba98 <__pow5mult+0xa0>
 800ba1c:	69f4      	ldr	r4, [r6, #28]
 800ba1e:	b97c      	cbnz	r4, 800ba40 <__pow5mult+0x48>
 800ba20:	2010      	movs	r0, #16
 800ba22:	f7ff fd35 	bl	800b490 <malloc>
 800ba26:	4602      	mov	r2, r0
 800ba28:	61f0      	str	r0, [r6, #28]
 800ba2a:	b928      	cbnz	r0, 800ba38 <__pow5mult+0x40>
 800ba2c:	4b1d      	ldr	r3, [pc, #116]	; (800baa4 <__pow5mult+0xac>)
 800ba2e:	481e      	ldr	r0, [pc, #120]	; (800baa8 <__pow5mult+0xb0>)
 800ba30:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ba34:	f001 fb38 	bl	800d0a8 <__assert_func>
 800ba38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ba3c:	6004      	str	r4, [r0, #0]
 800ba3e:	60c4      	str	r4, [r0, #12]
 800ba40:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ba44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ba48:	b94c      	cbnz	r4, 800ba5e <__pow5mult+0x66>
 800ba4a:	f240 2171 	movw	r1, #625	; 0x271
 800ba4e:	4630      	mov	r0, r6
 800ba50:	f7ff ff12 	bl	800b878 <__i2b>
 800ba54:	2300      	movs	r3, #0
 800ba56:	f8c8 0008 	str.w	r0, [r8, #8]
 800ba5a:	4604      	mov	r4, r0
 800ba5c:	6003      	str	r3, [r0, #0]
 800ba5e:	f04f 0900 	mov.w	r9, #0
 800ba62:	07eb      	lsls	r3, r5, #31
 800ba64:	d50a      	bpl.n	800ba7c <__pow5mult+0x84>
 800ba66:	4639      	mov	r1, r7
 800ba68:	4622      	mov	r2, r4
 800ba6a:	4630      	mov	r0, r6
 800ba6c:	f7ff ff1a 	bl	800b8a4 <__multiply>
 800ba70:	4639      	mov	r1, r7
 800ba72:	4680      	mov	r8, r0
 800ba74:	4630      	mov	r0, r6
 800ba76:	f7ff fdff 	bl	800b678 <_Bfree>
 800ba7a:	4647      	mov	r7, r8
 800ba7c:	106d      	asrs	r5, r5, #1
 800ba7e:	d00b      	beq.n	800ba98 <__pow5mult+0xa0>
 800ba80:	6820      	ldr	r0, [r4, #0]
 800ba82:	b938      	cbnz	r0, 800ba94 <__pow5mult+0x9c>
 800ba84:	4622      	mov	r2, r4
 800ba86:	4621      	mov	r1, r4
 800ba88:	4630      	mov	r0, r6
 800ba8a:	f7ff ff0b 	bl	800b8a4 <__multiply>
 800ba8e:	6020      	str	r0, [r4, #0]
 800ba90:	f8c0 9000 	str.w	r9, [r0]
 800ba94:	4604      	mov	r4, r0
 800ba96:	e7e4      	b.n	800ba62 <__pow5mult+0x6a>
 800ba98:	4638      	mov	r0, r7
 800ba9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba9e:	bf00      	nop
 800baa0:	0800e060 	.word	0x0800e060
 800baa4:	0800de92 	.word	0x0800de92
 800baa8:	0800df12 	.word	0x0800df12

0800baac <__lshift>:
 800baac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bab0:	460c      	mov	r4, r1
 800bab2:	6849      	ldr	r1, [r1, #4]
 800bab4:	6923      	ldr	r3, [r4, #16]
 800bab6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800baba:	68a3      	ldr	r3, [r4, #8]
 800babc:	4607      	mov	r7, r0
 800babe:	4691      	mov	r9, r2
 800bac0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bac4:	f108 0601 	add.w	r6, r8, #1
 800bac8:	42b3      	cmp	r3, r6
 800baca:	db0b      	blt.n	800bae4 <__lshift+0x38>
 800bacc:	4638      	mov	r0, r7
 800bace:	f7ff fd93 	bl	800b5f8 <_Balloc>
 800bad2:	4605      	mov	r5, r0
 800bad4:	b948      	cbnz	r0, 800baea <__lshift+0x3e>
 800bad6:	4602      	mov	r2, r0
 800bad8:	4b28      	ldr	r3, [pc, #160]	; (800bb7c <__lshift+0xd0>)
 800bada:	4829      	ldr	r0, [pc, #164]	; (800bb80 <__lshift+0xd4>)
 800badc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800bae0:	f001 fae2 	bl	800d0a8 <__assert_func>
 800bae4:	3101      	adds	r1, #1
 800bae6:	005b      	lsls	r3, r3, #1
 800bae8:	e7ee      	b.n	800bac8 <__lshift+0x1c>
 800baea:	2300      	movs	r3, #0
 800baec:	f100 0114 	add.w	r1, r0, #20
 800baf0:	f100 0210 	add.w	r2, r0, #16
 800baf4:	4618      	mov	r0, r3
 800baf6:	4553      	cmp	r3, sl
 800baf8:	db33      	blt.n	800bb62 <__lshift+0xb6>
 800bafa:	6920      	ldr	r0, [r4, #16]
 800bafc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bb00:	f104 0314 	add.w	r3, r4, #20
 800bb04:	f019 091f 	ands.w	r9, r9, #31
 800bb08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bb0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bb10:	d02b      	beq.n	800bb6a <__lshift+0xbe>
 800bb12:	f1c9 0e20 	rsb	lr, r9, #32
 800bb16:	468a      	mov	sl, r1
 800bb18:	2200      	movs	r2, #0
 800bb1a:	6818      	ldr	r0, [r3, #0]
 800bb1c:	fa00 f009 	lsl.w	r0, r0, r9
 800bb20:	4310      	orrs	r0, r2
 800bb22:	f84a 0b04 	str.w	r0, [sl], #4
 800bb26:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb2a:	459c      	cmp	ip, r3
 800bb2c:	fa22 f20e 	lsr.w	r2, r2, lr
 800bb30:	d8f3      	bhi.n	800bb1a <__lshift+0x6e>
 800bb32:	ebac 0304 	sub.w	r3, ip, r4
 800bb36:	3b15      	subs	r3, #21
 800bb38:	f023 0303 	bic.w	r3, r3, #3
 800bb3c:	3304      	adds	r3, #4
 800bb3e:	f104 0015 	add.w	r0, r4, #21
 800bb42:	4584      	cmp	ip, r0
 800bb44:	bf38      	it	cc
 800bb46:	2304      	movcc	r3, #4
 800bb48:	50ca      	str	r2, [r1, r3]
 800bb4a:	b10a      	cbz	r2, 800bb50 <__lshift+0xa4>
 800bb4c:	f108 0602 	add.w	r6, r8, #2
 800bb50:	3e01      	subs	r6, #1
 800bb52:	4638      	mov	r0, r7
 800bb54:	612e      	str	r6, [r5, #16]
 800bb56:	4621      	mov	r1, r4
 800bb58:	f7ff fd8e 	bl	800b678 <_Bfree>
 800bb5c:	4628      	mov	r0, r5
 800bb5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb62:	f842 0f04 	str.w	r0, [r2, #4]!
 800bb66:	3301      	adds	r3, #1
 800bb68:	e7c5      	b.n	800baf6 <__lshift+0x4a>
 800bb6a:	3904      	subs	r1, #4
 800bb6c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb70:	f841 2f04 	str.w	r2, [r1, #4]!
 800bb74:	459c      	cmp	ip, r3
 800bb76:	d8f9      	bhi.n	800bb6c <__lshift+0xc0>
 800bb78:	e7ea      	b.n	800bb50 <__lshift+0xa4>
 800bb7a:	bf00      	nop
 800bb7c:	0800df01 	.word	0x0800df01
 800bb80:	0800df12 	.word	0x0800df12

0800bb84 <__mcmp>:
 800bb84:	b530      	push	{r4, r5, lr}
 800bb86:	6902      	ldr	r2, [r0, #16]
 800bb88:	690c      	ldr	r4, [r1, #16]
 800bb8a:	1b12      	subs	r2, r2, r4
 800bb8c:	d10e      	bne.n	800bbac <__mcmp+0x28>
 800bb8e:	f100 0314 	add.w	r3, r0, #20
 800bb92:	3114      	adds	r1, #20
 800bb94:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bb98:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bb9c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bba0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bba4:	42a5      	cmp	r5, r4
 800bba6:	d003      	beq.n	800bbb0 <__mcmp+0x2c>
 800bba8:	d305      	bcc.n	800bbb6 <__mcmp+0x32>
 800bbaa:	2201      	movs	r2, #1
 800bbac:	4610      	mov	r0, r2
 800bbae:	bd30      	pop	{r4, r5, pc}
 800bbb0:	4283      	cmp	r3, r0
 800bbb2:	d3f3      	bcc.n	800bb9c <__mcmp+0x18>
 800bbb4:	e7fa      	b.n	800bbac <__mcmp+0x28>
 800bbb6:	f04f 32ff 	mov.w	r2, #4294967295
 800bbba:	e7f7      	b.n	800bbac <__mcmp+0x28>

0800bbbc <__mdiff>:
 800bbbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbc0:	460c      	mov	r4, r1
 800bbc2:	4606      	mov	r6, r0
 800bbc4:	4611      	mov	r1, r2
 800bbc6:	4620      	mov	r0, r4
 800bbc8:	4690      	mov	r8, r2
 800bbca:	f7ff ffdb 	bl	800bb84 <__mcmp>
 800bbce:	1e05      	subs	r5, r0, #0
 800bbd0:	d110      	bne.n	800bbf4 <__mdiff+0x38>
 800bbd2:	4629      	mov	r1, r5
 800bbd4:	4630      	mov	r0, r6
 800bbd6:	f7ff fd0f 	bl	800b5f8 <_Balloc>
 800bbda:	b930      	cbnz	r0, 800bbea <__mdiff+0x2e>
 800bbdc:	4b3a      	ldr	r3, [pc, #232]	; (800bcc8 <__mdiff+0x10c>)
 800bbde:	4602      	mov	r2, r0
 800bbe0:	f240 2137 	movw	r1, #567	; 0x237
 800bbe4:	4839      	ldr	r0, [pc, #228]	; (800bccc <__mdiff+0x110>)
 800bbe6:	f001 fa5f 	bl	800d0a8 <__assert_func>
 800bbea:	2301      	movs	r3, #1
 800bbec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bbf0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbf4:	bfa4      	itt	ge
 800bbf6:	4643      	movge	r3, r8
 800bbf8:	46a0      	movge	r8, r4
 800bbfa:	4630      	mov	r0, r6
 800bbfc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bc00:	bfa6      	itte	ge
 800bc02:	461c      	movge	r4, r3
 800bc04:	2500      	movge	r5, #0
 800bc06:	2501      	movlt	r5, #1
 800bc08:	f7ff fcf6 	bl	800b5f8 <_Balloc>
 800bc0c:	b920      	cbnz	r0, 800bc18 <__mdiff+0x5c>
 800bc0e:	4b2e      	ldr	r3, [pc, #184]	; (800bcc8 <__mdiff+0x10c>)
 800bc10:	4602      	mov	r2, r0
 800bc12:	f240 2145 	movw	r1, #581	; 0x245
 800bc16:	e7e5      	b.n	800bbe4 <__mdiff+0x28>
 800bc18:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bc1c:	6926      	ldr	r6, [r4, #16]
 800bc1e:	60c5      	str	r5, [r0, #12]
 800bc20:	f104 0914 	add.w	r9, r4, #20
 800bc24:	f108 0514 	add.w	r5, r8, #20
 800bc28:	f100 0e14 	add.w	lr, r0, #20
 800bc2c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bc30:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bc34:	f108 0210 	add.w	r2, r8, #16
 800bc38:	46f2      	mov	sl, lr
 800bc3a:	2100      	movs	r1, #0
 800bc3c:	f859 3b04 	ldr.w	r3, [r9], #4
 800bc40:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bc44:	fa11 f88b 	uxtah	r8, r1, fp
 800bc48:	b299      	uxth	r1, r3
 800bc4a:	0c1b      	lsrs	r3, r3, #16
 800bc4c:	eba8 0801 	sub.w	r8, r8, r1
 800bc50:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bc54:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bc58:	fa1f f888 	uxth.w	r8, r8
 800bc5c:	1419      	asrs	r1, r3, #16
 800bc5e:	454e      	cmp	r6, r9
 800bc60:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bc64:	f84a 3b04 	str.w	r3, [sl], #4
 800bc68:	d8e8      	bhi.n	800bc3c <__mdiff+0x80>
 800bc6a:	1b33      	subs	r3, r6, r4
 800bc6c:	3b15      	subs	r3, #21
 800bc6e:	f023 0303 	bic.w	r3, r3, #3
 800bc72:	3304      	adds	r3, #4
 800bc74:	3415      	adds	r4, #21
 800bc76:	42a6      	cmp	r6, r4
 800bc78:	bf38      	it	cc
 800bc7a:	2304      	movcc	r3, #4
 800bc7c:	441d      	add	r5, r3
 800bc7e:	4473      	add	r3, lr
 800bc80:	469e      	mov	lr, r3
 800bc82:	462e      	mov	r6, r5
 800bc84:	4566      	cmp	r6, ip
 800bc86:	d30e      	bcc.n	800bca6 <__mdiff+0xea>
 800bc88:	f10c 0203 	add.w	r2, ip, #3
 800bc8c:	1b52      	subs	r2, r2, r5
 800bc8e:	f022 0203 	bic.w	r2, r2, #3
 800bc92:	3d03      	subs	r5, #3
 800bc94:	45ac      	cmp	ip, r5
 800bc96:	bf38      	it	cc
 800bc98:	2200      	movcc	r2, #0
 800bc9a:	4413      	add	r3, r2
 800bc9c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bca0:	b17a      	cbz	r2, 800bcc2 <__mdiff+0x106>
 800bca2:	6107      	str	r7, [r0, #16]
 800bca4:	e7a4      	b.n	800bbf0 <__mdiff+0x34>
 800bca6:	f856 8b04 	ldr.w	r8, [r6], #4
 800bcaa:	fa11 f288 	uxtah	r2, r1, r8
 800bcae:	1414      	asrs	r4, r2, #16
 800bcb0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bcb4:	b292      	uxth	r2, r2
 800bcb6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bcba:	f84e 2b04 	str.w	r2, [lr], #4
 800bcbe:	1421      	asrs	r1, r4, #16
 800bcc0:	e7e0      	b.n	800bc84 <__mdiff+0xc8>
 800bcc2:	3f01      	subs	r7, #1
 800bcc4:	e7ea      	b.n	800bc9c <__mdiff+0xe0>
 800bcc6:	bf00      	nop
 800bcc8:	0800df01 	.word	0x0800df01
 800bccc:	0800df12 	.word	0x0800df12

0800bcd0 <__ulp>:
 800bcd0:	b082      	sub	sp, #8
 800bcd2:	ed8d 0b00 	vstr	d0, [sp]
 800bcd6:	9a01      	ldr	r2, [sp, #4]
 800bcd8:	4b0f      	ldr	r3, [pc, #60]	; (800bd18 <__ulp+0x48>)
 800bcda:	4013      	ands	r3, r2
 800bcdc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	dc08      	bgt.n	800bcf6 <__ulp+0x26>
 800bce4:	425b      	negs	r3, r3
 800bce6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800bcea:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bcee:	da04      	bge.n	800bcfa <__ulp+0x2a>
 800bcf0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bcf4:	4113      	asrs	r3, r2
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	e008      	b.n	800bd0c <__ulp+0x3c>
 800bcfa:	f1a2 0314 	sub.w	r3, r2, #20
 800bcfe:	2b1e      	cmp	r3, #30
 800bd00:	bfda      	itte	le
 800bd02:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800bd06:	40da      	lsrle	r2, r3
 800bd08:	2201      	movgt	r2, #1
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	4619      	mov	r1, r3
 800bd0e:	4610      	mov	r0, r2
 800bd10:	ec41 0b10 	vmov	d0, r0, r1
 800bd14:	b002      	add	sp, #8
 800bd16:	4770      	bx	lr
 800bd18:	7ff00000 	.word	0x7ff00000

0800bd1c <__b2d>:
 800bd1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd20:	6906      	ldr	r6, [r0, #16]
 800bd22:	f100 0814 	add.w	r8, r0, #20
 800bd26:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800bd2a:	1f37      	subs	r7, r6, #4
 800bd2c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bd30:	4610      	mov	r0, r2
 800bd32:	f7ff fd53 	bl	800b7dc <__hi0bits>
 800bd36:	f1c0 0320 	rsb	r3, r0, #32
 800bd3a:	280a      	cmp	r0, #10
 800bd3c:	600b      	str	r3, [r1, #0]
 800bd3e:	491b      	ldr	r1, [pc, #108]	; (800bdac <__b2d+0x90>)
 800bd40:	dc15      	bgt.n	800bd6e <__b2d+0x52>
 800bd42:	f1c0 0c0b 	rsb	ip, r0, #11
 800bd46:	fa22 f30c 	lsr.w	r3, r2, ip
 800bd4a:	45b8      	cmp	r8, r7
 800bd4c:	ea43 0501 	orr.w	r5, r3, r1
 800bd50:	bf34      	ite	cc
 800bd52:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bd56:	2300      	movcs	r3, #0
 800bd58:	3015      	adds	r0, #21
 800bd5a:	fa02 f000 	lsl.w	r0, r2, r0
 800bd5e:	fa23 f30c 	lsr.w	r3, r3, ip
 800bd62:	4303      	orrs	r3, r0
 800bd64:	461c      	mov	r4, r3
 800bd66:	ec45 4b10 	vmov	d0, r4, r5
 800bd6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd6e:	45b8      	cmp	r8, r7
 800bd70:	bf3a      	itte	cc
 800bd72:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bd76:	f1a6 0708 	subcc.w	r7, r6, #8
 800bd7a:	2300      	movcs	r3, #0
 800bd7c:	380b      	subs	r0, #11
 800bd7e:	d012      	beq.n	800bda6 <__b2d+0x8a>
 800bd80:	f1c0 0120 	rsb	r1, r0, #32
 800bd84:	fa23 f401 	lsr.w	r4, r3, r1
 800bd88:	4082      	lsls	r2, r0
 800bd8a:	4322      	orrs	r2, r4
 800bd8c:	4547      	cmp	r7, r8
 800bd8e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800bd92:	bf8c      	ite	hi
 800bd94:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800bd98:	2200      	movls	r2, #0
 800bd9a:	4083      	lsls	r3, r0
 800bd9c:	40ca      	lsrs	r2, r1
 800bd9e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bda2:	4313      	orrs	r3, r2
 800bda4:	e7de      	b.n	800bd64 <__b2d+0x48>
 800bda6:	ea42 0501 	orr.w	r5, r2, r1
 800bdaa:	e7db      	b.n	800bd64 <__b2d+0x48>
 800bdac:	3ff00000 	.word	0x3ff00000

0800bdb0 <__d2b>:
 800bdb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bdb4:	460f      	mov	r7, r1
 800bdb6:	2101      	movs	r1, #1
 800bdb8:	ec59 8b10 	vmov	r8, r9, d0
 800bdbc:	4616      	mov	r6, r2
 800bdbe:	f7ff fc1b 	bl	800b5f8 <_Balloc>
 800bdc2:	4604      	mov	r4, r0
 800bdc4:	b930      	cbnz	r0, 800bdd4 <__d2b+0x24>
 800bdc6:	4602      	mov	r2, r0
 800bdc8:	4b24      	ldr	r3, [pc, #144]	; (800be5c <__d2b+0xac>)
 800bdca:	4825      	ldr	r0, [pc, #148]	; (800be60 <__d2b+0xb0>)
 800bdcc:	f240 310f 	movw	r1, #783	; 0x30f
 800bdd0:	f001 f96a 	bl	800d0a8 <__assert_func>
 800bdd4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bdd8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bddc:	bb2d      	cbnz	r5, 800be2a <__d2b+0x7a>
 800bdde:	9301      	str	r3, [sp, #4]
 800bde0:	f1b8 0300 	subs.w	r3, r8, #0
 800bde4:	d026      	beq.n	800be34 <__d2b+0x84>
 800bde6:	4668      	mov	r0, sp
 800bde8:	9300      	str	r3, [sp, #0]
 800bdea:	f7ff fd17 	bl	800b81c <__lo0bits>
 800bdee:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bdf2:	b1e8      	cbz	r0, 800be30 <__d2b+0x80>
 800bdf4:	f1c0 0320 	rsb	r3, r0, #32
 800bdf8:	fa02 f303 	lsl.w	r3, r2, r3
 800bdfc:	430b      	orrs	r3, r1
 800bdfe:	40c2      	lsrs	r2, r0
 800be00:	6163      	str	r3, [r4, #20]
 800be02:	9201      	str	r2, [sp, #4]
 800be04:	9b01      	ldr	r3, [sp, #4]
 800be06:	61a3      	str	r3, [r4, #24]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	bf14      	ite	ne
 800be0c:	2202      	movne	r2, #2
 800be0e:	2201      	moveq	r2, #1
 800be10:	6122      	str	r2, [r4, #16]
 800be12:	b1bd      	cbz	r5, 800be44 <__d2b+0x94>
 800be14:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800be18:	4405      	add	r5, r0
 800be1a:	603d      	str	r5, [r7, #0]
 800be1c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800be20:	6030      	str	r0, [r6, #0]
 800be22:	4620      	mov	r0, r4
 800be24:	b003      	add	sp, #12
 800be26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800be2e:	e7d6      	b.n	800bdde <__d2b+0x2e>
 800be30:	6161      	str	r1, [r4, #20]
 800be32:	e7e7      	b.n	800be04 <__d2b+0x54>
 800be34:	a801      	add	r0, sp, #4
 800be36:	f7ff fcf1 	bl	800b81c <__lo0bits>
 800be3a:	9b01      	ldr	r3, [sp, #4]
 800be3c:	6163      	str	r3, [r4, #20]
 800be3e:	3020      	adds	r0, #32
 800be40:	2201      	movs	r2, #1
 800be42:	e7e5      	b.n	800be10 <__d2b+0x60>
 800be44:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800be48:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800be4c:	6038      	str	r0, [r7, #0]
 800be4e:	6918      	ldr	r0, [r3, #16]
 800be50:	f7ff fcc4 	bl	800b7dc <__hi0bits>
 800be54:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800be58:	e7e2      	b.n	800be20 <__d2b+0x70>
 800be5a:	bf00      	nop
 800be5c:	0800df01 	.word	0x0800df01
 800be60:	0800df12 	.word	0x0800df12

0800be64 <__ratio>:
 800be64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be68:	4688      	mov	r8, r1
 800be6a:	4669      	mov	r1, sp
 800be6c:	4681      	mov	r9, r0
 800be6e:	f7ff ff55 	bl	800bd1c <__b2d>
 800be72:	a901      	add	r1, sp, #4
 800be74:	4640      	mov	r0, r8
 800be76:	ec55 4b10 	vmov	r4, r5, d0
 800be7a:	ee10 aa10 	vmov	sl, s0
 800be7e:	f7ff ff4d 	bl	800bd1c <__b2d>
 800be82:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800be86:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800be8a:	1ad2      	subs	r2, r2, r3
 800be8c:	e9dd 3100 	ldrd	r3, r1, [sp]
 800be90:	1a5b      	subs	r3, r3, r1
 800be92:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800be96:	ec57 6b10 	vmov	r6, r7, d0
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	bfd6      	itet	le
 800be9e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bea2:	462a      	movgt	r2, r5
 800bea4:	463a      	movle	r2, r7
 800bea6:	46ab      	mov	fp, r5
 800bea8:	bfd6      	itet	le
 800beaa:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800beae:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800beb2:	ee00 3a90 	vmovle	s1, r3
 800beb6:	ec4b ab17 	vmov	d7, sl, fp
 800beba:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800bebe:	b003      	add	sp, #12
 800bec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bec4 <__copybits>:
 800bec4:	3901      	subs	r1, #1
 800bec6:	b570      	push	{r4, r5, r6, lr}
 800bec8:	1149      	asrs	r1, r1, #5
 800beca:	6914      	ldr	r4, [r2, #16]
 800becc:	3101      	adds	r1, #1
 800bece:	f102 0314 	add.w	r3, r2, #20
 800bed2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bed6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800beda:	1f05      	subs	r5, r0, #4
 800bedc:	42a3      	cmp	r3, r4
 800bede:	d30c      	bcc.n	800befa <__copybits+0x36>
 800bee0:	1aa3      	subs	r3, r4, r2
 800bee2:	3b11      	subs	r3, #17
 800bee4:	f023 0303 	bic.w	r3, r3, #3
 800bee8:	3211      	adds	r2, #17
 800beea:	42a2      	cmp	r2, r4
 800beec:	bf88      	it	hi
 800beee:	2300      	movhi	r3, #0
 800bef0:	4418      	add	r0, r3
 800bef2:	2300      	movs	r3, #0
 800bef4:	4288      	cmp	r0, r1
 800bef6:	d305      	bcc.n	800bf04 <__copybits+0x40>
 800bef8:	bd70      	pop	{r4, r5, r6, pc}
 800befa:	f853 6b04 	ldr.w	r6, [r3], #4
 800befe:	f845 6f04 	str.w	r6, [r5, #4]!
 800bf02:	e7eb      	b.n	800bedc <__copybits+0x18>
 800bf04:	f840 3b04 	str.w	r3, [r0], #4
 800bf08:	e7f4      	b.n	800bef4 <__copybits+0x30>

0800bf0a <__any_on>:
 800bf0a:	f100 0214 	add.w	r2, r0, #20
 800bf0e:	6900      	ldr	r0, [r0, #16]
 800bf10:	114b      	asrs	r3, r1, #5
 800bf12:	4298      	cmp	r0, r3
 800bf14:	b510      	push	{r4, lr}
 800bf16:	db11      	blt.n	800bf3c <__any_on+0x32>
 800bf18:	dd0a      	ble.n	800bf30 <__any_on+0x26>
 800bf1a:	f011 011f 	ands.w	r1, r1, #31
 800bf1e:	d007      	beq.n	800bf30 <__any_on+0x26>
 800bf20:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bf24:	fa24 f001 	lsr.w	r0, r4, r1
 800bf28:	fa00 f101 	lsl.w	r1, r0, r1
 800bf2c:	428c      	cmp	r4, r1
 800bf2e:	d10b      	bne.n	800bf48 <__any_on+0x3e>
 800bf30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bf34:	4293      	cmp	r3, r2
 800bf36:	d803      	bhi.n	800bf40 <__any_on+0x36>
 800bf38:	2000      	movs	r0, #0
 800bf3a:	bd10      	pop	{r4, pc}
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	e7f7      	b.n	800bf30 <__any_on+0x26>
 800bf40:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bf44:	2900      	cmp	r1, #0
 800bf46:	d0f5      	beq.n	800bf34 <__any_on+0x2a>
 800bf48:	2001      	movs	r0, #1
 800bf4a:	e7f6      	b.n	800bf3a <__any_on+0x30>

0800bf4c <sulp>:
 800bf4c:	b570      	push	{r4, r5, r6, lr}
 800bf4e:	4604      	mov	r4, r0
 800bf50:	460d      	mov	r5, r1
 800bf52:	4616      	mov	r6, r2
 800bf54:	ec45 4b10 	vmov	d0, r4, r5
 800bf58:	f7ff feba 	bl	800bcd0 <__ulp>
 800bf5c:	b17e      	cbz	r6, 800bf7e <sulp+0x32>
 800bf5e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bf62:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	dd09      	ble.n	800bf7e <sulp+0x32>
 800bf6a:	051b      	lsls	r3, r3, #20
 800bf6c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800bf70:	2000      	movs	r0, #0
 800bf72:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800bf76:	ec41 0b17 	vmov	d7, r0, r1
 800bf7a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800bf7e:	bd70      	pop	{r4, r5, r6, pc}

0800bf80 <_strtod_l>:
 800bf80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf84:	ed2d 8b0e 	vpush	{d8-d14}
 800bf88:	b097      	sub	sp, #92	; 0x5c
 800bf8a:	4604      	mov	r4, r0
 800bf8c:	920d      	str	r2, [sp, #52]	; 0x34
 800bf8e:	2200      	movs	r2, #0
 800bf90:	9212      	str	r2, [sp, #72]	; 0x48
 800bf92:	468a      	mov	sl, r1
 800bf94:	f04f 0800 	mov.w	r8, #0
 800bf98:	f04f 0900 	mov.w	r9, #0
 800bf9c:	460a      	mov	r2, r1
 800bf9e:	9211      	str	r2, [sp, #68]	; 0x44
 800bfa0:	7811      	ldrb	r1, [r2, #0]
 800bfa2:	292b      	cmp	r1, #43	; 0x2b
 800bfa4:	d04c      	beq.n	800c040 <_strtod_l+0xc0>
 800bfa6:	d839      	bhi.n	800c01c <_strtod_l+0x9c>
 800bfa8:	290d      	cmp	r1, #13
 800bfaa:	d833      	bhi.n	800c014 <_strtod_l+0x94>
 800bfac:	2908      	cmp	r1, #8
 800bfae:	d833      	bhi.n	800c018 <_strtod_l+0x98>
 800bfb0:	2900      	cmp	r1, #0
 800bfb2:	d03c      	beq.n	800c02e <_strtod_l+0xae>
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	9208      	str	r2, [sp, #32]
 800bfb8:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800bfba:	7832      	ldrb	r2, [r6, #0]
 800bfbc:	2a30      	cmp	r2, #48	; 0x30
 800bfbe:	f040 80b8 	bne.w	800c132 <_strtod_l+0x1b2>
 800bfc2:	7872      	ldrb	r2, [r6, #1]
 800bfc4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800bfc8:	2a58      	cmp	r2, #88	; 0x58
 800bfca:	d170      	bne.n	800c0ae <_strtod_l+0x12e>
 800bfcc:	9302      	str	r3, [sp, #8]
 800bfce:	9b08      	ldr	r3, [sp, #32]
 800bfd0:	9301      	str	r3, [sp, #4]
 800bfd2:	ab12      	add	r3, sp, #72	; 0x48
 800bfd4:	9300      	str	r3, [sp, #0]
 800bfd6:	4a91      	ldr	r2, [pc, #580]	; (800c21c <_strtod_l+0x29c>)
 800bfd8:	ab13      	add	r3, sp, #76	; 0x4c
 800bfda:	a911      	add	r1, sp, #68	; 0x44
 800bfdc:	4620      	mov	r0, r4
 800bfde:	f001 f8ff 	bl	800d1e0 <__gethex>
 800bfe2:	f010 070f 	ands.w	r7, r0, #15
 800bfe6:	4605      	mov	r5, r0
 800bfe8:	d005      	beq.n	800bff6 <_strtod_l+0x76>
 800bfea:	2f06      	cmp	r7, #6
 800bfec:	d12a      	bne.n	800c044 <_strtod_l+0xc4>
 800bfee:	3601      	adds	r6, #1
 800bff0:	2300      	movs	r3, #0
 800bff2:	9611      	str	r6, [sp, #68]	; 0x44
 800bff4:	9308      	str	r3, [sp, #32]
 800bff6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	f040 8555 	bne.w	800caa8 <_strtod_l+0xb28>
 800bffe:	9b08      	ldr	r3, [sp, #32]
 800c000:	ec49 8b10 	vmov	d0, r8, r9
 800c004:	b1cb      	cbz	r3, 800c03a <_strtod_l+0xba>
 800c006:	eeb1 0b40 	vneg.f64	d0, d0
 800c00a:	b017      	add	sp, #92	; 0x5c
 800c00c:	ecbd 8b0e 	vpop	{d8-d14}
 800c010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c014:	2920      	cmp	r1, #32
 800c016:	d1cd      	bne.n	800bfb4 <_strtod_l+0x34>
 800c018:	3201      	adds	r2, #1
 800c01a:	e7c0      	b.n	800bf9e <_strtod_l+0x1e>
 800c01c:	292d      	cmp	r1, #45	; 0x2d
 800c01e:	d1c9      	bne.n	800bfb4 <_strtod_l+0x34>
 800c020:	2101      	movs	r1, #1
 800c022:	9108      	str	r1, [sp, #32]
 800c024:	1c51      	adds	r1, r2, #1
 800c026:	9111      	str	r1, [sp, #68]	; 0x44
 800c028:	7852      	ldrb	r2, [r2, #1]
 800c02a:	2a00      	cmp	r2, #0
 800c02c:	d1c4      	bne.n	800bfb8 <_strtod_l+0x38>
 800c02e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c030:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800c034:	2b00      	cmp	r3, #0
 800c036:	f040 8535 	bne.w	800caa4 <_strtod_l+0xb24>
 800c03a:	ec49 8b10 	vmov	d0, r8, r9
 800c03e:	e7e4      	b.n	800c00a <_strtod_l+0x8a>
 800c040:	2100      	movs	r1, #0
 800c042:	e7ee      	b.n	800c022 <_strtod_l+0xa2>
 800c044:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c046:	b13a      	cbz	r2, 800c058 <_strtod_l+0xd8>
 800c048:	2135      	movs	r1, #53	; 0x35
 800c04a:	a814      	add	r0, sp, #80	; 0x50
 800c04c:	f7ff ff3a 	bl	800bec4 <__copybits>
 800c050:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c052:	4620      	mov	r0, r4
 800c054:	f7ff fb10 	bl	800b678 <_Bfree>
 800c058:	1e7b      	subs	r3, r7, #1
 800c05a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c05c:	2b04      	cmp	r3, #4
 800c05e:	d806      	bhi.n	800c06e <_strtod_l+0xee>
 800c060:	e8df f003 	tbb	[pc, r3]
 800c064:	201d0314 	.word	0x201d0314
 800c068:	14          	.byte	0x14
 800c069:	00          	.byte	0x00
 800c06a:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800c06e:	05eb      	lsls	r3, r5, #23
 800c070:	bf48      	it	mi
 800c072:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800c076:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c07a:	0d1b      	lsrs	r3, r3, #20
 800c07c:	051b      	lsls	r3, r3, #20
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d1b9      	bne.n	800bff6 <_strtod_l+0x76>
 800c082:	f7fe fb8f 	bl	800a7a4 <__errno>
 800c086:	2322      	movs	r3, #34	; 0x22
 800c088:	6003      	str	r3, [r0, #0]
 800c08a:	e7b4      	b.n	800bff6 <_strtod_l+0x76>
 800c08c:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800c090:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c094:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c098:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800c09c:	e7e7      	b.n	800c06e <_strtod_l+0xee>
 800c09e:	f8df 9184 	ldr.w	r9, [pc, #388]	; 800c224 <_strtod_l+0x2a4>
 800c0a2:	e7e4      	b.n	800c06e <_strtod_l+0xee>
 800c0a4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800c0a8:	f04f 38ff 	mov.w	r8, #4294967295
 800c0ac:	e7df      	b.n	800c06e <_strtod_l+0xee>
 800c0ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c0b0:	1c5a      	adds	r2, r3, #1
 800c0b2:	9211      	str	r2, [sp, #68]	; 0x44
 800c0b4:	785b      	ldrb	r3, [r3, #1]
 800c0b6:	2b30      	cmp	r3, #48	; 0x30
 800c0b8:	d0f9      	beq.n	800c0ae <_strtod_l+0x12e>
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d09b      	beq.n	800bff6 <_strtod_l+0x76>
 800c0be:	2301      	movs	r3, #1
 800c0c0:	9306      	str	r3, [sp, #24]
 800c0c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c0c4:	9309      	str	r3, [sp, #36]	; 0x24
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	9305      	str	r3, [sp, #20]
 800c0ca:	9307      	str	r3, [sp, #28]
 800c0cc:	461e      	mov	r6, r3
 800c0ce:	220a      	movs	r2, #10
 800c0d0:	9811      	ldr	r0, [sp, #68]	; 0x44
 800c0d2:	7805      	ldrb	r5, [r0, #0]
 800c0d4:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800c0d8:	b2d9      	uxtb	r1, r3
 800c0da:	2909      	cmp	r1, #9
 800c0dc:	d92b      	bls.n	800c136 <_strtod_l+0x1b6>
 800c0de:	4950      	ldr	r1, [pc, #320]	; (800c220 <_strtod_l+0x2a0>)
 800c0e0:	2201      	movs	r2, #1
 800c0e2:	f000 ffa9 	bl	800d038 <strncmp>
 800c0e6:	2800      	cmp	r0, #0
 800c0e8:	d035      	beq.n	800c156 <_strtod_l+0x1d6>
 800c0ea:	2000      	movs	r0, #0
 800c0ec:	462a      	mov	r2, r5
 800c0ee:	4633      	mov	r3, r6
 800c0f0:	4683      	mov	fp, r0
 800c0f2:	4601      	mov	r1, r0
 800c0f4:	2a65      	cmp	r2, #101	; 0x65
 800c0f6:	d001      	beq.n	800c0fc <_strtod_l+0x17c>
 800c0f8:	2a45      	cmp	r2, #69	; 0x45
 800c0fa:	d118      	bne.n	800c12e <_strtod_l+0x1ae>
 800c0fc:	b91b      	cbnz	r3, 800c106 <_strtod_l+0x186>
 800c0fe:	9b06      	ldr	r3, [sp, #24]
 800c100:	4303      	orrs	r3, r0
 800c102:	d094      	beq.n	800c02e <_strtod_l+0xae>
 800c104:	2300      	movs	r3, #0
 800c106:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 800c10a:	f10a 0201 	add.w	r2, sl, #1
 800c10e:	9211      	str	r2, [sp, #68]	; 0x44
 800c110:	f89a 2001 	ldrb.w	r2, [sl, #1]
 800c114:	2a2b      	cmp	r2, #43	; 0x2b
 800c116:	d075      	beq.n	800c204 <_strtod_l+0x284>
 800c118:	2a2d      	cmp	r2, #45	; 0x2d
 800c11a:	d07b      	beq.n	800c214 <_strtod_l+0x294>
 800c11c:	f04f 0e00 	mov.w	lr, #0
 800c120:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800c124:	2d09      	cmp	r5, #9
 800c126:	f240 8083 	bls.w	800c230 <_strtod_l+0x2b0>
 800c12a:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800c12e:	2500      	movs	r5, #0
 800c130:	e09e      	b.n	800c270 <_strtod_l+0x2f0>
 800c132:	2300      	movs	r3, #0
 800c134:	e7c4      	b.n	800c0c0 <_strtod_l+0x140>
 800c136:	2e08      	cmp	r6, #8
 800c138:	bfd5      	itete	le
 800c13a:	9907      	ldrle	r1, [sp, #28]
 800c13c:	9905      	ldrgt	r1, [sp, #20]
 800c13e:	fb02 3301 	mlale	r3, r2, r1, r3
 800c142:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c146:	f100 0001 	add.w	r0, r0, #1
 800c14a:	bfd4      	ite	le
 800c14c:	9307      	strle	r3, [sp, #28]
 800c14e:	9305      	strgt	r3, [sp, #20]
 800c150:	3601      	adds	r6, #1
 800c152:	9011      	str	r0, [sp, #68]	; 0x44
 800c154:	e7bc      	b.n	800c0d0 <_strtod_l+0x150>
 800c156:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c158:	1c5a      	adds	r2, r3, #1
 800c15a:	9211      	str	r2, [sp, #68]	; 0x44
 800c15c:	785a      	ldrb	r2, [r3, #1]
 800c15e:	b3ae      	cbz	r6, 800c1cc <_strtod_l+0x24c>
 800c160:	4683      	mov	fp, r0
 800c162:	4633      	mov	r3, r6
 800c164:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c168:	2909      	cmp	r1, #9
 800c16a:	d912      	bls.n	800c192 <_strtod_l+0x212>
 800c16c:	2101      	movs	r1, #1
 800c16e:	e7c1      	b.n	800c0f4 <_strtod_l+0x174>
 800c170:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c172:	1c5a      	adds	r2, r3, #1
 800c174:	9211      	str	r2, [sp, #68]	; 0x44
 800c176:	785a      	ldrb	r2, [r3, #1]
 800c178:	3001      	adds	r0, #1
 800c17a:	2a30      	cmp	r2, #48	; 0x30
 800c17c:	d0f8      	beq.n	800c170 <_strtod_l+0x1f0>
 800c17e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c182:	2b08      	cmp	r3, #8
 800c184:	f200 8495 	bhi.w	800cab2 <_strtod_l+0xb32>
 800c188:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c18a:	9309      	str	r3, [sp, #36]	; 0x24
 800c18c:	4683      	mov	fp, r0
 800c18e:	2000      	movs	r0, #0
 800c190:	4603      	mov	r3, r0
 800c192:	3a30      	subs	r2, #48	; 0x30
 800c194:	f100 0101 	add.w	r1, r0, #1
 800c198:	d012      	beq.n	800c1c0 <_strtod_l+0x240>
 800c19a:	448b      	add	fp, r1
 800c19c:	eb00 0c03 	add.w	ip, r0, r3
 800c1a0:	4619      	mov	r1, r3
 800c1a2:	250a      	movs	r5, #10
 800c1a4:	4561      	cmp	r1, ip
 800c1a6:	d113      	bne.n	800c1d0 <_strtod_l+0x250>
 800c1a8:	1819      	adds	r1, r3, r0
 800c1aa:	2908      	cmp	r1, #8
 800c1ac:	f103 0301 	add.w	r3, r3, #1
 800c1b0:	4403      	add	r3, r0
 800c1b2:	dc1b      	bgt.n	800c1ec <_strtod_l+0x26c>
 800c1b4:	9807      	ldr	r0, [sp, #28]
 800c1b6:	210a      	movs	r1, #10
 800c1b8:	fb01 2200 	mla	r2, r1, r0, r2
 800c1bc:	9207      	str	r2, [sp, #28]
 800c1be:	2100      	movs	r1, #0
 800c1c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c1c2:	1c50      	adds	r0, r2, #1
 800c1c4:	9011      	str	r0, [sp, #68]	; 0x44
 800c1c6:	7852      	ldrb	r2, [r2, #1]
 800c1c8:	4608      	mov	r0, r1
 800c1ca:	e7cb      	b.n	800c164 <_strtod_l+0x1e4>
 800c1cc:	4630      	mov	r0, r6
 800c1ce:	e7d4      	b.n	800c17a <_strtod_l+0x1fa>
 800c1d0:	2908      	cmp	r1, #8
 800c1d2:	f101 0101 	add.w	r1, r1, #1
 800c1d6:	dc03      	bgt.n	800c1e0 <_strtod_l+0x260>
 800c1d8:	9f07      	ldr	r7, [sp, #28]
 800c1da:	436f      	muls	r7, r5
 800c1dc:	9707      	str	r7, [sp, #28]
 800c1de:	e7e1      	b.n	800c1a4 <_strtod_l+0x224>
 800c1e0:	2910      	cmp	r1, #16
 800c1e2:	bfde      	ittt	le
 800c1e4:	9f05      	ldrle	r7, [sp, #20]
 800c1e6:	436f      	mulle	r7, r5
 800c1e8:	9705      	strle	r7, [sp, #20]
 800c1ea:	e7db      	b.n	800c1a4 <_strtod_l+0x224>
 800c1ec:	2b10      	cmp	r3, #16
 800c1ee:	bfdf      	itttt	le
 800c1f0:	9805      	ldrle	r0, [sp, #20]
 800c1f2:	210a      	movle	r1, #10
 800c1f4:	fb01 2200 	mlale	r2, r1, r0, r2
 800c1f8:	9205      	strle	r2, [sp, #20]
 800c1fa:	e7e0      	b.n	800c1be <_strtod_l+0x23e>
 800c1fc:	f04f 0b00 	mov.w	fp, #0
 800c200:	2101      	movs	r1, #1
 800c202:	e77c      	b.n	800c0fe <_strtod_l+0x17e>
 800c204:	f04f 0e00 	mov.w	lr, #0
 800c208:	f10a 0202 	add.w	r2, sl, #2
 800c20c:	9211      	str	r2, [sp, #68]	; 0x44
 800c20e:	f89a 2002 	ldrb.w	r2, [sl, #2]
 800c212:	e785      	b.n	800c120 <_strtod_l+0x1a0>
 800c214:	f04f 0e01 	mov.w	lr, #1
 800c218:	e7f6      	b.n	800c208 <_strtod_l+0x288>
 800c21a:	bf00      	nop
 800c21c:	0800e070 	.word	0x0800e070
 800c220:	0800e06c 	.word	0x0800e06c
 800c224:	7ff00000 	.word	0x7ff00000
 800c228:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c22a:	1c55      	adds	r5, r2, #1
 800c22c:	9511      	str	r5, [sp, #68]	; 0x44
 800c22e:	7852      	ldrb	r2, [r2, #1]
 800c230:	2a30      	cmp	r2, #48	; 0x30
 800c232:	d0f9      	beq.n	800c228 <_strtod_l+0x2a8>
 800c234:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800c238:	2d08      	cmp	r5, #8
 800c23a:	f63f af78 	bhi.w	800c12e <_strtod_l+0x1ae>
 800c23e:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800c242:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c244:	920a      	str	r2, [sp, #40]	; 0x28
 800c246:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c248:	1c55      	adds	r5, r2, #1
 800c24a:	9511      	str	r5, [sp, #68]	; 0x44
 800c24c:	7852      	ldrb	r2, [r2, #1]
 800c24e:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800c252:	2f09      	cmp	r7, #9
 800c254:	d937      	bls.n	800c2c6 <_strtod_l+0x346>
 800c256:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800c258:	1bed      	subs	r5, r5, r7
 800c25a:	2d08      	cmp	r5, #8
 800c25c:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800c260:	dc02      	bgt.n	800c268 <_strtod_l+0x2e8>
 800c262:	4565      	cmp	r5, ip
 800c264:	bfa8      	it	ge
 800c266:	4665      	movge	r5, ip
 800c268:	f1be 0f00 	cmp.w	lr, #0
 800c26c:	d000      	beq.n	800c270 <_strtod_l+0x2f0>
 800c26e:	426d      	negs	r5, r5
 800c270:	2b00      	cmp	r3, #0
 800c272:	d14d      	bne.n	800c310 <_strtod_l+0x390>
 800c274:	9b06      	ldr	r3, [sp, #24]
 800c276:	4303      	orrs	r3, r0
 800c278:	f47f aebd 	bne.w	800bff6 <_strtod_l+0x76>
 800c27c:	2900      	cmp	r1, #0
 800c27e:	f47f aed6 	bne.w	800c02e <_strtod_l+0xae>
 800c282:	2a69      	cmp	r2, #105	; 0x69
 800c284:	d027      	beq.n	800c2d6 <_strtod_l+0x356>
 800c286:	dc24      	bgt.n	800c2d2 <_strtod_l+0x352>
 800c288:	2a49      	cmp	r2, #73	; 0x49
 800c28a:	d024      	beq.n	800c2d6 <_strtod_l+0x356>
 800c28c:	2a4e      	cmp	r2, #78	; 0x4e
 800c28e:	f47f aece 	bne.w	800c02e <_strtod_l+0xae>
 800c292:	4995      	ldr	r1, [pc, #596]	; (800c4e8 <_strtod_l+0x568>)
 800c294:	a811      	add	r0, sp, #68	; 0x44
 800c296:	f001 f9e3 	bl	800d660 <__match>
 800c29a:	2800      	cmp	r0, #0
 800c29c:	f43f aec7 	beq.w	800c02e <_strtod_l+0xae>
 800c2a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c2a2:	781b      	ldrb	r3, [r3, #0]
 800c2a4:	2b28      	cmp	r3, #40	; 0x28
 800c2a6:	d12d      	bne.n	800c304 <_strtod_l+0x384>
 800c2a8:	4990      	ldr	r1, [pc, #576]	; (800c4ec <_strtod_l+0x56c>)
 800c2aa:	aa14      	add	r2, sp, #80	; 0x50
 800c2ac:	a811      	add	r0, sp, #68	; 0x44
 800c2ae:	f001 f9eb 	bl	800d688 <__hexnan>
 800c2b2:	2805      	cmp	r0, #5
 800c2b4:	d126      	bne.n	800c304 <_strtod_l+0x384>
 800c2b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c2b8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800c2bc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800c2c0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800c2c4:	e697      	b.n	800bff6 <_strtod_l+0x76>
 800c2c6:	250a      	movs	r5, #10
 800c2c8:	fb05 2c0c 	mla	ip, r5, ip, r2
 800c2cc:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800c2d0:	e7b9      	b.n	800c246 <_strtod_l+0x2c6>
 800c2d2:	2a6e      	cmp	r2, #110	; 0x6e
 800c2d4:	e7db      	b.n	800c28e <_strtod_l+0x30e>
 800c2d6:	4986      	ldr	r1, [pc, #536]	; (800c4f0 <_strtod_l+0x570>)
 800c2d8:	a811      	add	r0, sp, #68	; 0x44
 800c2da:	f001 f9c1 	bl	800d660 <__match>
 800c2de:	2800      	cmp	r0, #0
 800c2e0:	f43f aea5 	beq.w	800c02e <_strtod_l+0xae>
 800c2e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c2e6:	4983      	ldr	r1, [pc, #524]	; (800c4f4 <_strtod_l+0x574>)
 800c2e8:	3b01      	subs	r3, #1
 800c2ea:	a811      	add	r0, sp, #68	; 0x44
 800c2ec:	9311      	str	r3, [sp, #68]	; 0x44
 800c2ee:	f001 f9b7 	bl	800d660 <__match>
 800c2f2:	b910      	cbnz	r0, 800c2fa <_strtod_l+0x37a>
 800c2f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c2f6:	3301      	adds	r3, #1
 800c2f8:	9311      	str	r3, [sp, #68]	; 0x44
 800c2fa:	f8df 920c 	ldr.w	r9, [pc, #524]	; 800c508 <_strtod_l+0x588>
 800c2fe:	f04f 0800 	mov.w	r8, #0
 800c302:	e678      	b.n	800bff6 <_strtod_l+0x76>
 800c304:	487c      	ldr	r0, [pc, #496]	; (800c4f8 <_strtod_l+0x578>)
 800c306:	f000 fec7 	bl	800d098 <nan>
 800c30a:	ec59 8b10 	vmov	r8, r9, d0
 800c30e:	e672      	b.n	800bff6 <_strtod_l+0x76>
 800c310:	eddd 7a07 	vldr	s15, [sp, #28]
 800c314:	eba5 020b 	sub.w	r2, r5, fp
 800c318:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c31c:	2e00      	cmp	r6, #0
 800c31e:	bf08      	it	eq
 800c320:	461e      	moveq	r6, r3
 800c322:	2b10      	cmp	r3, #16
 800c324:	9206      	str	r2, [sp, #24]
 800c326:	461a      	mov	r2, r3
 800c328:	bfa8      	it	ge
 800c32a:	2210      	movge	r2, #16
 800c32c:	2b09      	cmp	r3, #9
 800c32e:	ec59 8b17 	vmov	r8, r9, d7
 800c332:	dd0c      	ble.n	800c34e <_strtod_l+0x3ce>
 800c334:	4971      	ldr	r1, [pc, #452]	; (800c4fc <_strtod_l+0x57c>)
 800c336:	eddd 6a05 	vldr	s13, [sp, #20]
 800c33a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800c33e:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800c342:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800c346:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c34a:	ec59 8b16 	vmov	r8, r9, d6
 800c34e:	2b0f      	cmp	r3, #15
 800c350:	dc37      	bgt.n	800c3c2 <_strtod_l+0x442>
 800c352:	9906      	ldr	r1, [sp, #24]
 800c354:	2900      	cmp	r1, #0
 800c356:	f43f ae4e 	beq.w	800bff6 <_strtod_l+0x76>
 800c35a:	dd23      	ble.n	800c3a4 <_strtod_l+0x424>
 800c35c:	2916      	cmp	r1, #22
 800c35e:	dc0b      	bgt.n	800c378 <_strtod_l+0x3f8>
 800c360:	4b66      	ldr	r3, [pc, #408]	; (800c4fc <_strtod_l+0x57c>)
 800c362:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800c366:	ed93 7b00 	vldr	d7, [r3]
 800c36a:	ec49 8b16 	vmov	d6, r8, r9
 800c36e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c372:	ec59 8b17 	vmov	r8, r9, d7
 800c376:	e63e      	b.n	800bff6 <_strtod_l+0x76>
 800c378:	9806      	ldr	r0, [sp, #24]
 800c37a:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800c37e:	4281      	cmp	r1, r0
 800c380:	db1f      	blt.n	800c3c2 <_strtod_l+0x442>
 800c382:	4a5e      	ldr	r2, [pc, #376]	; (800c4fc <_strtod_l+0x57c>)
 800c384:	f1c3 030f 	rsb	r3, r3, #15
 800c388:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800c38c:	ed91 7b00 	vldr	d7, [r1]
 800c390:	ec49 8b16 	vmov	d6, r8, r9
 800c394:	1ac3      	subs	r3, r0, r3
 800c396:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c39a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c39e:	ed92 6b00 	vldr	d6, [r2]
 800c3a2:	e7e4      	b.n	800c36e <_strtod_l+0x3ee>
 800c3a4:	9906      	ldr	r1, [sp, #24]
 800c3a6:	3116      	adds	r1, #22
 800c3a8:	db0b      	blt.n	800c3c2 <_strtod_l+0x442>
 800c3aa:	4b54      	ldr	r3, [pc, #336]	; (800c4fc <_strtod_l+0x57c>)
 800c3ac:	ebab 0505 	sub.w	r5, fp, r5
 800c3b0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c3b4:	ed95 7b00 	vldr	d7, [r5]
 800c3b8:	ec49 8b16 	vmov	d6, r8, r9
 800c3bc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c3c0:	e7d7      	b.n	800c372 <_strtod_l+0x3f2>
 800c3c2:	9906      	ldr	r1, [sp, #24]
 800c3c4:	1a9a      	subs	r2, r3, r2
 800c3c6:	440a      	add	r2, r1
 800c3c8:	2a00      	cmp	r2, #0
 800c3ca:	dd6e      	ble.n	800c4aa <_strtod_l+0x52a>
 800c3cc:	f012 000f 	ands.w	r0, r2, #15
 800c3d0:	d00a      	beq.n	800c3e8 <_strtod_l+0x468>
 800c3d2:	494a      	ldr	r1, [pc, #296]	; (800c4fc <_strtod_l+0x57c>)
 800c3d4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c3d8:	ed91 7b00 	vldr	d7, [r1]
 800c3dc:	ec49 8b16 	vmov	d6, r8, r9
 800c3e0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c3e4:	ec59 8b17 	vmov	r8, r9, d7
 800c3e8:	f032 020f 	bics.w	r2, r2, #15
 800c3ec:	d04e      	beq.n	800c48c <_strtod_l+0x50c>
 800c3ee:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800c3f2:	dd22      	ble.n	800c43a <_strtod_l+0x4ba>
 800c3f4:	2500      	movs	r5, #0
 800c3f6:	462e      	mov	r6, r5
 800c3f8:	9507      	str	r5, [sp, #28]
 800c3fa:	462f      	mov	r7, r5
 800c3fc:	2322      	movs	r3, #34	; 0x22
 800c3fe:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800c508 <_strtod_l+0x588>
 800c402:	6023      	str	r3, [r4, #0]
 800c404:	f04f 0800 	mov.w	r8, #0
 800c408:	9b07      	ldr	r3, [sp, #28]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	f43f adf3 	beq.w	800bff6 <_strtod_l+0x76>
 800c410:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c412:	4620      	mov	r0, r4
 800c414:	f7ff f930 	bl	800b678 <_Bfree>
 800c418:	4639      	mov	r1, r7
 800c41a:	4620      	mov	r0, r4
 800c41c:	f7ff f92c 	bl	800b678 <_Bfree>
 800c420:	4631      	mov	r1, r6
 800c422:	4620      	mov	r0, r4
 800c424:	f7ff f928 	bl	800b678 <_Bfree>
 800c428:	9907      	ldr	r1, [sp, #28]
 800c42a:	4620      	mov	r0, r4
 800c42c:	f7ff f924 	bl	800b678 <_Bfree>
 800c430:	4629      	mov	r1, r5
 800c432:	4620      	mov	r0, r4
 800c434:	f7ff f920 	bl	800b678 <_Bfree>
 800c438:	e5dd      	b.n	800bff6 <_strtod_l+0x76>
 800c43a:	2000      	movs	r0, #0
 800c43c:	ec49 8b17 	vmov	d7, r8, r9
 800c440:	4f2f      	ldr	r7, [pc, #188]	; (800c500 <_strtod_l+0x580>)
 800c442:	1112      	asrs	r2, r2, #4
 800c444:	4601      	mov	r1, r0
 800c446:	2a01      	cmp	r2, #1
 800c448:	dc23      	bgt.n	800c492 <_strtod_l+0x512>
 800c44a:	b108      	cbz	r0, 800c450 <_strtod_l+0x4d0>
 800c44c:	ec59 8b17 	vmov	r8, r9, d7
 800c450:	4a2b      	ldr	r2, [pc, #172]	; (800c500 <_strtod_l+0x580>)
 800c452:	482c      	ldr	r0, [pc, #176]	; (800c504 <_strtod_l+0x584>)
 800c454:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800c458:	ed92 7b00 	vldr	d7, [r2]
 800c45c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800c460:	ec49 8b16 	vmov	d6, r8, r9
 800c464:	4a28      	ldr	r2, [pc, #160]	; (800c508 <_strtod_l+0x588>)
 800c466:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c46a:	ee17 1a90 	vmov	r1, s15
 800c46e:	400a      	ands	r2, r1
 800c470:	4282      	cmp	r2, r0
 800c472:	ec59 8b17 	vmov	r8, r9, d7
 800c476:	d8bd      	bhi.n	800c3f4 <_strtod_l+0x474>
 800c478:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800c47c:	4282      	cmp	r2, r0
 800c47e:	bf86      	itte	hi
 800c480:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 800c50c <_strtod_l+0x58c>
 800c484:	f04f 38ff 	movhi.w	r8, #4294967295
 800c488:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800c48c:	2200      	movs	r2, #0
 800c48e:	9205      	str	r2, [sp, #20]
 800c490:	e076      	b.n	800c580 <_strtod_l+0x600>
 800c492:	f012 0f01 	tst.w	r2, #1
 800c496:	d004      	beq.n	800c4a2 <_strtod_l+0x522>
 800c498:	ed97 6b00 	vldr	d6, [r7]
 800c49c:	2001      	movs	r0, #1
 800c49e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c4a2:	3101      	adds	r1, #1
 800c4a4:	1052      	asrs	r2, r2, #1
 800c4a6:	3708      	adds	r7, #8
 800c4a8:	e7cd      	b.n	800c446 <_strtod_l+0x4c6>
 800c4aa:	d0ef      	beq.n	800c48c <_strtod_l+0x50c>
 800c4ac:	4252      	negs	r2, r2
 800c4ae:	f012 000f 	ands.w	r0, r2, #15
 800c4b2:	d00a      	beq.n	800c4ca <_strtod_l+0x54a>
 800c4b4:	4911      	ldr	r1, [pc, #68]	; (800c4fc <_strtod_l+0x57c>)
 800c4b6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c4ba:	ed91 7b00 	vldr	d7, [r1]
 800c4be:	ec49 8b16 	vmov	d6, r8, r9
 800c4c2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c4c6:	ec59 8b17 	vmov	r8, r9, d7
 800c4ca:	1112      	asrs	r2, r2, #4
 800c4cc:	d0de      	beq.n	800c48c <_strtod_l+0x50c>
 800c4ce:	2a1f      	cmp	r2, #31
 800c4d0:	dd1e      	ble.n	800c510 <_strtod_l+0x590>
 800c4d2:	2500      	movs	r5, #0
 800c4d4:	462e      	mov	r6, r5
 800c4d6:	9507      	str	r5, [sp, #28]
 800c4d8:	462f      	mov	r7, r5
 800c4da:	2322      	movs	r3, #34	; 0x22
 800c4dc:	f04f 0800 	mov.w	r8, #0
 800c4e0:	f04f 0900 	mov.w	r9, #0
 800c4e4:	6023      	str	r3, [r4, #0]
 800c4e6:	e78f      	b.n	800c408 <_strtod_l+0x488>
 800c4e8:	0800de59 	.word	0x0800de59
 800c4ec:	0800e084 	.word	0x0800e084
 800c4f0:	0800de51 	.word	0x0800de51
 800c4f4:	0800de88 	.word	0x0800de88
 800c4f8:	0800e215 	.word	0x0800e215
 800c4fc:	0800df98 	.word	0x0800df98
 800c500:	0800df70 	.word	0x0800df70
 800c504:	7ca00000 	.word	0x7ca00000
 800c508:	7ff00000 	.word	0x7ff00000
 800c50c:	7fefffff 	.word	0x7fefffff
 800c510:	f012 0110 	ands.w	r1, r2, #16
 800c514:	bf18      	it	ne
 800c516:	216a      	movne	r1, #106	; 0x6a
 800c518:	9105      	str	r1, [sp, #20]
 800c51a:	ec49 8b17 	vmov	d7, r8, r9
 800c51e:	49be      	ldr	r1, [pc, #760]	; (800c818 <_strtod_l+0x898>)
 800c520:	2000      	movs	r0, #0
 800c522:	07d7      	lsls	r7, r2, #31
 800c524:	d504      	bpl.n	800c530 <_strtod_l+0x5b0>
 800c526:	ed91 6b00 	vldr	d6, [r1]
 800c52a:	2001      	movs	r0, #1
 800c52c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c530:	1052      	asrs	r2, r2, #1
 800c532:	f101 0108 	add.w	r1, r1, #8
 800c536:	d1f4      	bne.n	800c522 <_strtod_l+0x5a2>
 800c538:	b108      	cbz	r0, 800c53e <_strtod_l+0x5be>
 800c53a:	ec59 8b17 	vmov	r8, r9, d7
 800c53e:	9a05      	ldr	r2, [sp, #20]
 800c540:	b1ba      	cbz	r2, 800c572 <_strtod_l+0x5f2>
 800c542:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800c546:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800c54a:	2a00      	cmp	r2, #0
 800c54c:	4648      	mov	r0, r9
 800c54e:	dd10      	ble.n	800c572 <_strtod_l+0x5f2>
 800c550:	2a1f      	cmp	r2, #31
 800c552:	f340 812c 	ble.w	800c7ae <_strtod_l+0x82e>
 800c556:	2a34      	cmp	r2, #52	; 0x34
 800c558:	bfde      	ittt	le
 800c55a:	f04f 32ff 	movle.w	r2, #4294967295
 800c55e:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800c562:	408a      	lslle	r2, r1
 800c564:	f04f 0800 	mov.w	r8, #0
 800c568:	bfcc      	ite	gt
 800c56a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800c56e:	ea02 0900 	andle.w	r9, r2, r0
 800c572:	ec49 8b17 	vmov	d7, r8, r9
 800c576:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c57a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c57e:	d0a8      	beq.n	800c4d2 <_strtod_l+0x552>
 800c580:	9a07      	ldr	r2, [sp, #28]
 800c582:	9200      	str	r2, [sp, #0]
 800c584:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c586:	4632      	mov	r2, r6
 800c588:	4620      	mov	r0, r4
 800c58a:	f7ff f8dd 	bl	800b748 <__s2b>
 800c58e:	9007      	str	r0, [sp, #28]
 800c590:	2800      	cmp	r0, #0
 800c592:	f43f af2f 	beq.w	800c3f4 <_strtod_l+0x474>
 800c596:	9a06      	ldr	r2, [sp, #24]
 800c598:	2a00      	cmp	r2, #0
 800c59a:	ebab 0305 	sub.w	r3, fp, r5
 800c59e:	ed9f 9b96 	vldr	d9, [pc, #600]	; 800c7f8 <_strtod_l+0x878>
 800c5a2:	bfa8      	it	ge
 800c5a4:	2300      	movge	r3, #0
 800c5a6:	ed9f ab96 	vldr	d10, [pc, #600]	; 800c800 <_strtod_l+0x880>
 800c5aa:	ed9f bb97 	vldr	d11, [pc, #604]	; 800c808 <_strtod_l+0x888>
 800c5ae:	9309      	str	r3, [sp, #36]	; 0x24
 800c5b0:	2500      	movs	r5, #0
 800c5b2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c5b6:	930c      	str	r3, [sp, #48]	; 0x30
 800c5b8:	462e      	mov	r6, r5
 800c5ba:	9b07      	ldr	r3, [sp, #28]
 800c5bc:	4620      	mov	r0, r4
 800c5be:	6859      	ldr	r1, [r3, #4]
 800c5c0:	f7ff f81a 	bl	800b5f8 <_Balloc>
 800c5c4:	4607      	mov	r7, r0
 800c5c6:	2800      	cmp	r0, #0
 800c5c8:	f43f af18 	beq.w	800c3fc <_strtod_l+0x47c>
 800c5cc:	9b07      	ldr	r3, [sp, #28]
 800c5ce:	691a      	ldr	r2, [r3, #16]
 800c5d0:	3202      	adds	r2, #2
 800c5d2:	f103 010c 	add.w	r1, r3, #12
 800c5d6:	0092      	lsls	r2, r2, #2
 800c5d8:	300c      	adds	r0, #12
 800c5da:	f000 fd4f 	bl	800d07c <memcpy>
 800c5de:	ec49 8b10 	vmov	d0, r8, r9
 800c5e2:	aa14      	add	r2, sp, #80	; 0x50
 800c5e4:	a913      	add	r1, sp, #76	; 0x4c
 800c5e6:	4620      	mov	r0, r4
 800c5e8:	f7ff fbe2 	bl	800bdb0 <__d2b>
 800c5ec:	ec49 8b18 	vmov	d8, r8, r9
 800c5f0:	9012      	str	r0, [sp, #72]	; 0x48
 800c5f2:	2800      	cmp	r0, #0
 800c5f4:	f43f af02 	beq.w	800c3fc <_strtod_l+0x47c>
 800c5f8:	2101      	movs	r1, #1
 800c5fa:	4620      	mov	r0, r4
 800c5fc:	f7ff f93c 	bl	800b878 <__i2b>
 800c600:	4606      	mov	r6, r0
 800c602:	2800      	cmp	r0, #0
 800c604:	f43f aefa 	beq.w	800c3fc <_strtod_l+0x47c>
 800c608:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c60a:	9914      	ldr	r1, [sp, #80]	; 0x50
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	bfab      	itete	ge
 800c610:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800c612:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800c614:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800c618:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800c61c:	bfac      	ite	ge
 800c61e:	eb03 0b02 	addge.w	fp, r3, r2
 800c622:	eba2 0a03 	sublt.w	sl, r2, r3
 800c626:	9a05      	ldr	r2, [sp, #20]
 800c628:	1a9b      	subs	r3, r3, r2
 800c62a:	440b      	add	r3, r1
 800c62c:	4a7b      	ldr	r2, [pc, #492]	; (800c81c <_strtod_l+0x89c>)
 800c62e:	3b01      	subs	r3, #1
 800c630:	4293      	cmp	r3, r2
 800c632:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800c636:	f280 80cd 	bge.w	800c7d4 <_strtod_l+0x854>
 800c63a:	1ad2      	subs	r2, r2, r3
 800c63c:	2a1f      	cmp	r2, #31
 800c63e:	eba1 0102 	sub.w	r1, r1, r2
 800c642:	f04f 0001 	mov.w	r0, #1
 800c646:	f300 80b9 	bgt.w	800c7bc <_strtod_l+0x83c>
 800c64a:	fa00 f302 	lsl.w	r3, r0, r2
 800c64e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c650:	2300      	movs	r3, #0
 800c652:	930a      	str	r3, [sp, #40]	; 0x28
 800c654:	eb0b 0301 	add.w	r3, fp, r1
 800c658:	9a05      	ldr	r2, [sp, #20]
 800c65a:	459b      	cmp	fp, r3
 800c65c:	448a      	add	sl, r1
 800c65e:	4492      	add	sl, r2
 800c660:	465a      	mov	r2, fp
 800c662:	bfa8      	it	ge
 800c664:	461a      	movge	r2, r3
 800c666:	4552      	cmp	r2, sl
 800c668:	bfa8      	it	ge
 800c66a:	4652      	movge	r2, sl
 800c66c:	2a00      	cmp	r2, #0
 800c66e:	bfc2      	ittt	gt
 800c670:	1a9b      	subgt	r3, r3, r2
 800c672:	ebaa 0a02 	subgt.w	sl, sl, r2
 800c676:	ebab 0b02 	subgt.w	fp, fp, r2
 800c67a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c67c:	2a00      	cmp	r2, #0
 800c67e:	dd18      	ble.n	800c6b2 <_strtod_l+0x732>
 800c680:	4631      	mov	r1, r6
 800c682:	4620      	mov	r0, r4
 800c684:	930f      	str	r3, [sp, #60]	; 0x3c
 800c686:	f7ff f9b7 	bl	800b9f8 <__pow5mult>
 800c68a:	4606      	mov	r6, r0
 800c68c:	2800      	cmp	r0, #0
 800c68e:	f43f aeb5 	beq.w	800c3fc <_strtod_l+0x47c>
 800c692:	4601      	mov	r1, r0
 800c694:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c696:	4620      	mov	r0, r4
 800c698:	f7ff f904 	bl	800b8a4 <__multiply>
 800c69c:	900e      	str	r0, [sp, #56]	; 0x38
 800c69e:	2800      	cmp	r0, #0
 800c6a0:	f43f aeac 	beq.w	800c3fc <_strtod_l+0x47c>
 800c6a4:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c6a6:	4620      	mov	r0, r4
 800c6a8:	f7fe ffe6 	bl	800b678 <_Bfree>
 800c6ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c6ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c6b0:	9212      	str	r2, [sp, #72]	; 0x48
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	f300 8093 	bgt.w	800c7de <_strtod_l+0x85e>
 800c6b8:	9b06      	ldr	r3, [sp, #24]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	dd08      	ble.n	800c6d0 <_strtod_l+0x750>
 800c6be:	4639      	mov	r1, r7
 800c6c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c6c2:	4620      	mov	r0, r4
 800c6c4:	f7ff f998 	bl	800b9f8 <__pow5mult>
 800c6c8:	4607      	mov	r7, r0
 800c6ca:	2800      	cmp	r0, #0
 800c6cc:	f43f ae96 	beq.w	800c3fc <_strtod_l+0x47c>
 800c6d0:	f1ba 0f00 	cmp.w	sl, #0
 800c6d4:	dd08      	ble.n	800c6e8 <_strtod_l+0x768>
 800c6d6:	4639      	mov	r1, r7
 800c6d8:	4652      	mov	r2, sl
 800c6da:	4620      	mov	r0, r4
 800c6dc:	f7ff f9e6 	bl	800baac <__lshift>
 800c6e0:	4607      	mov	r7, r0
 800c6e2:	2800      	cmp	r0, #0
 800c6e4:	f43f ae8a 	beq.w	800c3fc <_strtod_l+0x47c>
 800c6e8:	f1bb 0f00 	cmp.w	fp, #0
 800c6ec:	dd08      	ble.n	800c700 <_strtod_l+0x780>
 800c6ee:	4631      	mov	r1, r6
 800c6f0:	465a      	mov	r2, fp
 800c6f2:	4620      	mov	r0, r4
 800c6f4:	f7ff f9da 	bl	800baac <__lshift>
 800c6f8:	4606      	mov	r6, r0
 800c6fa:	2800      	cmp	r0, #0
 800c6fc:	f43f ae7e 	beq.w	800c3fc <_strtod_l+0x47c>
 800c700:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c702:	463a      	mov	r2, r7
 800c704:	4620      	mov	r0, r4
 800c706:	f7ff fa59 	bl	800bbbc <__mdiff>
 800c70a:	4605      	mov	r5, r0
 800c70c:	2800      	cmp	r0, #0
 800c70e:	f43f ae75 	beq.w	800c3fc <_strtod_l+0x47c>
 800c712:	2300      	movs	r3, #0
 800c714:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800c718:	60c3      	str	r3, [r0, #12]
 800c71a:	4631      	mov	r1, r6
 800c71c:	f7ff fa32 	bl	800bb84 <__mcmp>
 800c720:	2800      	cmp	r0, #0
 800c722:	da7f      	bge.n	800c824 <_strtod_l+0x8a4>
 800c724:	ea5a 0a08 	orrs.w	sl, sl, r8
 800c728:	f040 80a5 	bne.w	800c876 <_strtod_l+0x8f6>
 800c72c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c730:	2b00      	cmp	r3, #0
 800c732:	f040 80a0 	bne.w	800c876 <_strtod_l+0x8f6>
 800c736:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c73a:	0d1b      	lsrs	r3, r3, #20
 800c73c:	051b      	lsls	r3, r3, #20
 800c73e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c742:	f240 8098 	bls.w	800c876 <_strtod_l+0x8f6>
 800c746:	696b      	ldr	r3, [r5, #20]
 800c748:	b91b      	cbnz	r3, 800c752 <_strtod_l+0x7d2>
 800c74a:	692b      	ldr	r3, [r5, #16]
 800c74c:	2b01      	cmp	r3, #1
 800c74e:	f340 8092 	ble.w	800c876 <_strtod_l+0x8f6>
 800c752:	4629      	mov	r1, r5
 800c754:	2201      	movs	r2, #1
 800c756:	4620      	mov	r0, r4
 800c758:	f7ff f9a8 	bl	800baac <__lshift>
 800c75c:	4631      	mov	r1, r6
 800c75e:	4605      	mov	r5, r0
 800c760:	f7ff fa10 	bl	800bb84 <__mcmp>
 800c764:	2800      	cmp	r0, #0
 800c766:	f340 8086 	ble.w	800c876 <_strtod_l+0x8f6>
 800c76a:	9905      	ldr	r1, [sp, #20]
 800c76c:	4a2c      	ldr	r2, [pc, #176]	; (800c820 <_strtod_l+0x8a0>)
 800c76e:	464b      	mov	r3, r9
 800c770:	2900      	cmp	r1, #0
 800c772:	f000 809f 	beq.w	800c8b4 <_strtod_l+0x934>
 800c776:	ea02 0109 	and.w	r1, r2, r9
 800c77a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c77e:	f300 8099 	bgt.w	800c8b4 <_strtod_l+0x934>
 800c782:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c786:	f77f aea8 	ble.w	800c4da <_strtod_l+0x55a>
 800c78a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800c810 <_strtod_l+0x890>
 800c78e:	ec49 8b16 	vmov	d6, r8, r9
 800c792:	4b23      	ldr	r3, [pc, #140]	; (800c820 <_strtod_l+0x8a0>)
 800c794:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c798:	ee17 2a90 	vmov	r2, s15
 800c79c:	4013      	ands	r3, r2
 800c79e:	ec59 8b17 	vmov	r8, r9, d7
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	f47f ae34 	bne.w	800c410 <_strtod_l+0x490>
 800c7a8:	2322      	movs	r3, #34	; 0x22
 800c7aa:	6023      	str	r3, [r4, #0]
 800c7ac:	e630      	b.n	800c410 <_strtod_l+0x490>
 800c7ae:	f04f 31ff 	mov.w	r1, #4294967295
 800c7b2:	fa01 f202 	lsl.w	r2, r1, r2
 800c7b6:	ea02 0808 	and.w	r8, r2, r8
 800c7ba:	e6da      	b.n	800c572 <_strtod_l+0x5f2>
 800c7bc:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800c7c0:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800c7c4:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800c7c8:	33e2      	adds	r3, #226	; 0xe2
 800c7ca:	fa00 f303 	lsl.w	r3, r0, r3
 800c7ce:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800c7d2:	e73f      	b.n	800c654 <_strtod_l+0x6d4>
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	2301      	movs	r3, #1
 800c7d8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c7dc:	e73a      	b.n	800c654 <_strtod_l+0x6d4>
 800c7de:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c7e0:	461a      	mov	r2, r3
 800c7e2:	4620      	mov	r0, r4
 800c7e4:	f7ff f962 	bl	800baac <__lshift>
 800c7e8:	9012      	str	r0, [sp, #72]	; 0x48
 800c7ea:	2800      	cmp	r0, #0
 800c7ec:	f47f af64 	bne.w	800c6b8 <_strtod_l+0x738>
 800c7f0:	e604      	b.n	800c3fc <_strtod_l+0x47c>
 800c7f2:	bf00      	nop
 800c7f4:	f3af 8000 	nop.w
 800c7f8:	94a03595 	.word	0x94a03595
 800c7fc:	3fcfffff 	.word	0x3fcfffff
 800c800:	94a03595 	.word	0x94a03595
 800c804:	3fdfffff 	.word	0x3fdfffff
 800c808:	35afe535 	.word	0x35afe535
 800c80c:	3fe00000 	.word	0x3fe00000
 800c810:	00000000 	.word	0x00000000
 800c814:	39500000 	.word	0x39500000
 800c818:	0800e098 	.word	0x0800e098
 800c81c:	fffffc02 	.word	0xfffffc02
 800c820:	7ff00000 	.word	0x7ff00000
 800c824:	46cb      	mov	fp, r9
 800c826:	d15f      	bne.n	800c8e8 <_strtod_l+0x968>
 800c828:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c82c:	f1ba 0f00 	cmp.w	sl, #0
 800c830:	d02a      	beq.n	800c888 <_strtod_l+0x908>
 800c832:	4aa7      	ldr	r2, [pc, #668]	; (800cad0 <_strtod_l+0xb50>)
 800c834:	4293      	cmp	r3, r2
 800c836:	d12b      	bne.n	800c890 <_strtod_l+0x910>
 800c838:	9b05      	ldr	r3, [sp, #20]
 800c83a:	4642      	mov	r2, r8
 800c83c:	b1fb      	cbz	r3, 800c87e <_strtod_l+0x8fe>
 800c83e:	4ba5      	ldr	r3, [pc, #660]	; (800cad4 <_strtod_l+0xb54>)
 800c840:	ea09 0303 	and.w	r3, r9, r3
 800c844:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c848:	f04f 31ff 	mov.w	r1, #4294967295
 800c84c:	d81a      	bhi.n	800c884 <_strtod_l+0x904>
 800c84e:	0d1b      	lsrs	r3, r3, #20
 800c850:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c854:	fa01 f303 	lsl.w	r3, r1, r3
 800c858:	429a      	cmp	r2, r3
 800c85a:	d119      	bne.n	800c890 <_strtod_l+0x910>
 800c85c:	4b9e      	ldr	r3, [pc, #632]	; (800cad8 <_strtod_l+0xb58>)
 800c85e:	459b      	cmp	fp, r3
 800c860:	d102      	bne.n	800c868 <_strtod_l+0x8e8>
 800c862:	3201      	adds	r2, #1
 800c864:	f43f adca 	beq.w	800c3fc <_strtod_l+0x47c>
 800c868:	4b9a      	ldr	r3, [pc, #616]	; (800cad4 <_strtod_l+0xb54>)
 800c86a:	ea0b 0303 	and.w	r3, fp, r3
 800c86e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800c872:	f04f 0800 	mov.w	r8, #0
 800c876:	9b05      	ldr	r3, [sp, #20]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d186      	bne.n	800c78a <_strtod_l+0x80a>
 800c87c:	e5c8      	b.n	800c410 <_strtod_l+0x490>
 800c87e:	f04f 33ff 	mov.w	r3, #4294967295
 800c882:	e7e9      	b.n	800c858 <_strtod_l+0x8d8>
 800c884:	460b      	mov	r3, r1
 800c886:	e7e7      	b.n	800c858 <_strtod_l+0x8d8>
 800c888:	ea53 0308 	orrs.w	r3, r3, r8
 800c88c:	f43f af6d 	beq.w	800c76a <_strtod_l+0x7ea>
 800c890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c892:	b1cb      	cbz	r3, 800c8c8 <_strtod_l+0x948>
 800c894:	ea13 0f0b 	tst.w	r3, fp
 800c898:	d0ed      	beq.n	800c876 <_strtod_l+0x8f6>
 800c89a:	9a05      	ldr	r2, [sp, #20]
 800c89c:	4640      	mov	r0, r8
 800c89e:	4649      	mov	r1, r9
 800c8a0:	f1ba 0f00 	cmp.w	sl, #0
 800c8a4:	d014      	beq.n	800c8d0 <_strtod_l+0x950>
 800c8a6:	f7ff fb51 	bl	800bf4c <sulp>
 800c8aa:	ee38 7b00 	vadd.f64	d7, d8, d0
 800c8ae:	ec59 8b17 	vmov	r8, r9, d7
 800c8b2:	e7e0      	b.n	800c876 <_strtod_l+0x8f6>
 800c8b4:	4013      	ands	r3, r2
 800c8b6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c8ba:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800c8be:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800c8c2:	f04f 38ff 	mov.w	r8, #4294967295
 800c8c6:	e7d6      	b.n	800c876 <_strtod_l+0x8f6>
 800c8c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c8ca:	ea13 0f08 	tst.w	r3, r8
 800c8ce:	e7e3      	b.n	800c898 <_strtod_l+0x918>
 800c8d0:	f7ff fb3c 	bl	800bf4c <sulp>
 800c8d4:	ee38 0b40 	vsub.f64	d0, d8, d0
 800c8d8:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800c8dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8e0:	ec59 8b10 	vmov	r8, r9, d0
 800c8e4:	d1c7      	bne.n	800c876 <_strtod_l+0x8f6>
 800c8e6:	e5f8      	b.n	800c4da <_strtod_l+0x55a>
 800c8e8:	4631      	mov	r1, r6
 800c8ea:	4628      	mov	r0, r5
 800c8ec:	f7ff faba 	bl	800be64 <__ratio>
 800c8f0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800c8f4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800c8f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8fc:	d85f      	bhi.n	800c9be <_strtod_l+0xa3e>
 800c8fe:	f1ba 0f00 	cmp.w	sl, #0
 800c902:	d166      	bne.n	800c9d2 <_strtod_l+0xa52>
 800c904:	f1b8 0f00 	cmp.w	r8, #0
 800c908:	d14d      	bne.n	800c9a6 <_strtod_l+0xa26>
 800c90a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c90e:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800c912:	2b00      	cmp	r3, #0
 800c914:	d162      	bne.n	800c9dc <_strtod_l+0xa5c>
 800c916:	eeb4 0bcd 	vcmpe.f64	d0, d13
 800c91a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800c91e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c922:	d401      	bmi.n	800c928 <_strtod_l+0x9a8>
 800c924:	ee20 db0d 	vmul.f64	d13, d0, d13
 800c928:	eeb1 cb4d 	vneg.f64	d12, d13
 800c92c:	4869      	ldr	r0, [pc, #420]	; (800cad4 <_strtod_l+0xb54>)
 800c92e:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 800cae0 <_strtod_l+0xb60>
 800c932:	ea0b 0100 	and.w	r1, fp, r0
 800c936:	4561      	cmp	r1, ip
 800c938:	ec53 2b1c 	vmov	r2, r3, d12
 800c93c:	d17a      	bne.n	800ca34 <_strtod_l+0xab4>
 800c93e:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800c942:	ec49 8b10 	vmov	d0, r8, r9
 800c946:	910a      	str	r1, [sp, #40]	; 0x28
 800c948:	f7ff f9c2 	bl	800bcd0 <__ulp>
 800c94c:	ec49 8b1e 	vmov	d14, r8, r9
 800c950:	4860      	ldr	r0, [pc, #384]	; (800cad4 <_strtod_l+0xb54>)
 800c952:	eea0 eb0c 	vfma.f64	d14, d0, d12
 800c956:	ee1e 3a90 	vmov	r3, s29
 800c95a:	4a60      	ldr	r2, [pc, #384]	; (800cadc <_strtod_l+0xb5c>)
 800c95c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c95e:	4018      	ands	r0, r3
 800c960:	4290      	cmp	r0, r2
 800c962:	ec59 8b1e 	vmov	r8, r9, d14
 800c966:	d93c      	bls.n	800c9e2 <_strtod_l+0xa62>
 800c968:	ee18 2a90 	vmov	r2, s17
 800c96c:	4b5a      	ldr	r3, [pc, #360]	; (800cad8 <_strtod_l+0xb58>)
 800c96e:	429a      	cmp	r2, r3
 800c970:	d104      	bne.n	800c97c <_strtod_l+0x9fc>
 800c972:	ee18 3a10 	vmov	r3, s16
 800c976:	3301      	adds	r3, #1
 800c978:	f43f ad40 	beq.w	800c3fc <_strtod_l+0x47c>
 800c97c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 800cad8 <_strtod_l+0xb58>
 800c980:	f04f 38ff 	mov.w	r8, #4294967295
 800c984:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c986:	4620      	mov	r0, r4
 800c988:	f7fe fe76 	bl	800b678 <_Bfree>
 800c98c:	4639      	mov	r1, r7
 800c98e:	4620      	mov	r0, r4
 800c990:	f7fe fe72 	bl	800b678 <_Bfree>
 800c994:	4631      	mov	r1, r6
 800c996:	4620      	mov	r0, r4
 800c998:	f7fe fe6e 	bl	800b678 <_Bfree>
 800c99c:	4629      	mov	r1, r5
 800c99e:	4620      	mov	r0, r4
 800c9a0:	f7fe fe6a 	bl	800b678 <_Bfree>
 800c9a4:	e609      	b.n	800c5ba <_strtod_l+0x63a>
 800c9a6:	f1b8 0f01 	cmp.w	r8, #1
 800c9aa:	d103      	bne.n	800c9b4 <_strtod_l+0xa34>
 800c9ac:	f1b9 0f00 	cmp.w	r9, #0
 800c9b0:	f43f ad93 	beq.w	800c4da <_strtod_l+0x55a>
 800c9b4:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 800c9b8:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800c9bc:	e7b6      	b.n	800c92c <_strtod_l+0x9ac>
 800c9be:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800c9c2:	ee20 db0d 	vmul.f64	d13, d0, d13
 800c9c6:	f1ba 0f00 	cmp.w	sl, #0
 800c9ca:	d0ad      	beq.n	800c928 <_strtod_l+0x9a8>
 800c9cc:	eeb0 cb4d 	vmov.f64	d12, d13
 800c9d0:	e7ac      	b.n	800c92c <_strtod_l+0x9ac>
 800c9d2:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 800c9d6:	eeb0 db4c 	vmov.f64	d13, d12
 800c9da:	e7a7      	b.n	800c92c <_strtod_l+0x9ac>
 800c9dc:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 800c9e0:	e7a4      	b.n	800c92c <_strtod_l+0x9ac>
 800c9e2:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800c9e6:	9b05      	ldr	r3, [sp, #20]
 800c9e8:	46cb      	mov	fp, r9
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d1ca      	bne.n	800c984 <_strtod_l+0xa04>
 800c9ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c9f2:	0d1b      	lsrs	r3, r3, #20
 800c9f4:	051b      	lsls	r3, r3, #20
 800c9f6:	4299      	cmp	r1, r3
 800c9f8:	d1c4      	bne.n	800c984 <_strtod_l+0xa04>
 800c9fa:	ec51 0b1d 	vmov	r0, r1, d13
 800c9fe:	f7f3 fe9b 	bl	8000738 <__aeabi_d2lz>
 800ca02:	f7f3 fe53 	bl	80006ac <__aeabi_l2d>
 800ca06:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 800ca0a:	ec41 0b17 	vmov	d7, r0, r1
 800ca0e:	ea4b 0b08 	orr.w	fp, fp, r8
 800ca12:	ea5b 0b0a 	orrs.w	fp, fp, sl
 800ca16:	ee3d db47 	vsub.f64	d13, d13, d7
 800ca1a:	d03c      	beq.n	800ca96 <_strtod_l+0xb16>
 800ca1c:	eeb4 dbca 	vcmpe.f64	d13, d10
 800ca20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca24:	f53f acf4 	bmi.w	800c410 <_strtod_l+0x490>
 800ca28:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800ca2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca30:	dda8      	ble.n	800c984 <_strtod_l+0xa04>
 800ca32:	e4ed      	b.n	800c410 <_strtod_l+0x490>
 800ca34:	9805      	ldr	r0, [sp, #20]
 800ca36:	b1f0      	cbz	r0, 800ca76 <_strtod_l+0xaf6>
 800ca38:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800ca3c:	d81b      	bhi.n	800ca76 <_strtod_l+0xaf6>
 800ca3e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 800cac8 <_strtod_l+0xb48>
 800ca42:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800ca46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca4a:	d811      	bhi.n	800ca70 <_strtod_l+0xaf0>
 800ca4c:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800ca50:	ee1d 3a10 	vmov	r3, s26
 800ca54:	2b01      	cmp	r3, #1
 800ca56:	bf38      	it	cc
 800ca58:	2301      	movcc	r3, #1
 800ca5a:	ee0d 3a10 	vmov	s26, r3
 800ca5e:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800ca62:	f1ba 0f00 	cmp.w	sl, #0
 800ca66:	d113      	bne.n	800ca90 <_strtod_l+0xb10>
 800ca68:	eeb1 7b4d 	vneg.f64	d7, d13
 800ca6c:	ec53 2b17 	vmov	r2, r3, d7
 800ca70:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800ca74:	1a43      	subs	r3, r0, r1
 800ca76:	eeb0 0b48 	vmov.f64	d0, d8
 800ca7a:	ec43 2b1c 	vmov	d12, r2, r3
 800ca7e:	910a      	str	r1, [sp, #40]	; 0x28
 800ca80:	f7ff f926 	bl	800bcd0 <__ulp>
 800ca84:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ca86:	eeac 8b00 	vfma.f64	d8, d12, d0
 800ca8a:	ec59 8b18 	vmov	r8, r9, d8
 800ca8e:	e7aa      	b.n	800c9e6 <_strtod_l+0xa66>
 800ca90:	eeb0 7b4d 	vmov.f64	d7, d13
 800ca94:	e7ea      	b.n	800ca6c <_strtod_l+0xaec>
 800ca96:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800ca9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca9e:	f57f af71 	bpl.w	800c984 <_strtod_l+0xa04>
 800caa2:	e4b5      	b.n	800c410 <_strtod_l+0x490>
 800caa4:	2300      	movs	r3, #0
 800caa6:	9308      	str	r3, [sp, #32]
 800caa8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800caaa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800caac:	6013      	str	r3, [r2, #0]
 800caae:	f7ff baa6 	b.w	800bffe <_strtod_l+0x7e>
 800cab2:	2a65      	cmp	r2, #101	; 0x65
 800cab4:	f43f aba2 	beq.w	800c1fc <_strtod_l+0x27c>
 800cab8:	2a45      	cmp	r2, #69	; 0x45
 800caba:	f43f ab9f 	beq.w	800c1fc <_strtod_l+0x27c>
 800cabe:	2101      	movs	r1, #1
 800cac0:	f7ff bbd8 	b.w	800c274 <_strtod_l+0x2f4>
 800cac4:	f3af 8000 	nop.w
 800cac8:	ffc00000 	.word	0xffc00000
 800cacc:	41dfffff 	.word	0x41dfffff
 800cad0:	000fffff 	.word	0x000fffff
 800cad4:	7ff00000 	.word	0x7ff00000
 800cad8:	7fefffff 	.word	0x7fefffff
 800cadc:	7c9fffff 	.word	0x7c9fffff
 800cae0:	7fe00000 	.word	0x7fe00000

0800cae4 <_strtod_r>:
 800cae4:	4b01      	ldr	r3, [pc, #4]	; (800caec <_strtod_r+0x8>)
 800cae6:	f7ff ba4b 	b.w	800bf80 <_strtod_l>
 800caea:	bf00      	nop
 800caec:	2400006c 	.word	0x2400006c

0800caf0 <_strtol_l.constprop.0>:
 800caf0:	2b01      	cmp	r3, #1
 800caf2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800caf6:	d001      	beq.n	800cafc <_strtol_l.constprop.0+0xc>
 800caf8:	2b24      	cmp	r3, #36	; 0x24
 800cafa:	d906      	bls.n	800cb0a <_strtol_l.constprop.0+0x1a>
 800cafc:	f7fd fe52 	bl	800a7a4 <__errno>
 800cb00:	2316      	movs	r3, #22
 800cb02:	6003      	str	r3, [r0, #0]
 800cb04:	2000      	movs	r0, #0
 800cb06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb0a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800cbf0 <_strtol_l.constprop.0+0x100>
 800cb0e:	460d      	mov	r5, r1
 800cb10:	462e      	mov	r6, r5
 800cb12:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cb16:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800cb1a:	f017 0708 	ands.w	r7, r7, #8
 800cb1e:	d1f7      	bne.n	800cb10 <_strtol_l.constprop.0+0x20>
 800cb20:	2c2d      	cmp	r4, #45	; 0x2d
 800cb22:	d132      	bne.n	800cb8a <_strtol_l.constprop.0+0x9a>
 800cb24:	782c      	ldrb	r4, [r5, #0]
 800cb26:	2701      	movs	r7, #1
 800cb28:	1cb5      	adds	r5, r6, #2
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d05b      	beq.n	800cbe6 <_strtol_l.constprop.0+0xf6>
 800cb2e:	2b10      	cmp	r3, #16
 800cb30:	d109      	bne.n	800cb46 <_strtol_l.constprop.0+0x56>
 800cb32:	2c30      	cmp	r4, #48	; 0x30
 800cb34:	d107      	bne.n	800cb46 <_strtol_l.constprop.0+0x56>
 800cb36:	782c      	ldrb	r4, [r5, #0]
 800cb38:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800cb3c:	2c58      	cmp	r4, #88	; 0x58
 800cb3e:	d14d      	bne.n	800cbdc <_strtol_l.constprop.0+0xec>
 800cb40:	786c      	ldrb	r4, [r5, #1]
 800cb42:	2310      	movs	r3, #16
 800cb44:	3502      	adds	r5, #2
 800cb46:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800cb4a:	f108 38ff 	add.w	r8, r8, #4294967295
 800cb4e:	f04f 0e00 	mov.w	lr, #0
 800cb52:	fbb8 f9f3 	udiv	r9, r8, r3
 800cb56:	4676      	mov	r6, lr
 800cb58:	fb03 8a19 	mls	sl, r3, r9, r8
 800cb5c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800cb60:	f1bc 0f09 	cmp.w	ip, #9
 800cb64:	d816      	bhi.n	800cb94 <_strtol_l.constprop.0+0xa4>
 800cb66:	4664      	mov	r4, ip
 800cb68:	42a3      	cmp	r3, r4
 800cb6a:	dd24      	ble.n	800cbb6 <_strtol_l.constprop.0+0xc6>
 800cb6c:	f1be 3fff 	cmp.w	lr, #4294967295
 800cb70:	d008      	beq.n	800cb84 <_strtol_l.constprop.0+0x94>
 800cb72:	45b1      	cmp	r9, r6
 800cb74:	d31c      	bcc.n	800cbb0 <_strtol_l.constprop.0+0xc0>
 800cb76:	d101      	bne.n	800cb7c <_strtol_l.constprop.0+0x8c>
 800cb78:	45a2      	cmp	sl, r4
 800cb7a:	db19      	blt.n	800cbb0 <_strtol_l.constprop.0+0xc0>
 800cb7c:	fb06 4603 	mla	r6, r6, r3, r4
 800cb80:	f04f 0e01 	mov.w	lr, #1
 800cb84:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cb88:	e7e8      	b.n	800cb5c <_strtol_l.constprop.0+0x6c>
 800cb8a:	2c2b      	cmp	r4, #43	; 0x2b
 800cb8c:	bf04      	itt	eq
 800cb8e:	782c      	ldrbeq	r4, [r5, #0]
 800cb90:	1cb5      	addeq	r5, r6, #2
 800cb92:	e7ca      	b.n	800cb2a <_strtol_l.constprop.0+0x3a>
 800cb94:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800cb98:	f1bc 0f19 	cmp.w	ip, #25
 800cb9c:	d801      	bhi.n	800cba2 <_strtol_l.constprop.0+0xb2>
 800cb9e:	3c37      	subs	r4, #55	; 0x37
 800cba0:	e7e2      	b.n	800cb68 <_strtol_l.constprop.0+0x78>
 800cba2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800cba6:	f1bc 0f19 	cmp.w	ip, #25
 800cbaa:	d804      	bhi.n	800cbb6 <_strtol_l.constprop.0+0xc6>
 800cbac:	3c57      	subs	r4, #87	; 0x57
 800cbae:	e7db      	b.n	800cb68 <_strtol_l.constprop.0+0x78>
 800cbb0:	f04f 3eff 	mov.w	lr, #4294967295
 800cbb4:	e7e6      	b.n	800cb84 <_strtol_l.constprop.0+0x94>
 800cbb6:	f1be 3fff 	cmp.w	lr, #4294967295
 800cbba:	d105      	bne.n	800cbc8 <_strtol_l.constprop.0+0xd8>
 800cbbc:	2322      	movs	r3, #34	; 0x22
 800cbbe:	6003      	str	r3, [r0, #0]
 800cbc0:	4646      	mov	r6, r8
 800cbc2:	b942      	cbnz	r2, 800cbd6 <_strtol_l.constprop.0+0xe6>
 800cbc4:	4630      	mov	r0, r6
 800cbc6:	e79e      	b.n	800cb06 <_strtol_l.constprop.0+0x16>
 800cbc8:	b107      	cbz	r7, 800cbcc <_strtol_l.constprop.0+0xdc>
 800cbca:	4276      	negs	r6, r6
 800cbcc:	2a00      	cmp	r2, #0
 800cbce:	d0f9      	beq.n	800cbc4 <_strtol_l.constprop.0+0xd4>
 800cbd0:	f1be 0f00 	cmp.w	lr, #0
 800cbd4:	d000      	beq.n	800cbd8 <_strtol_l.constprop.0+0xe8>
 800cbd6:	1e69      	subs	r1, r5, #1
 800cbd8:	6011      	str	r1, [r2, #0]
 800cbda:	e7f3      	b.n	800cbc4 <_strtol_l.constprop.0+0xd4>
 800cbdc:	2430      	movs	r4, #48	; 0x30
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d1b1      	bne.n	800cb46 <_strtol_l.constprop.0+0x56>
 800cbe2:	2308      	movs	r3, #8
 800cbe4:	e7af      	b.n	800cb46 <_strtol_l.constprop.0+0x56>
 800cbe6:	2c30      	cmp	r4, #48	; 0x30
 800cbe8:	d0a5      	beq.n	800cb36 <_strtol_l.constprop.0+0x46>
 800cbea:	230a      	movs	r3, #10
 800cbec:	e7ab      	b.n	800cb46 <_strtol_l.constprop.0+0x56>
 800cbee:	bf00      	nop
 800cbf0:	0800e0c1 	.word	0x0800e0c1

0800cbf4 <_strtol_r>:
 800cbf4:	f7ff bf7c 	b.w	800caf0 <_strtol_l.constprop.0>

0800cbf8 <__ssputs_r>:
 800cbf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbfc:	688e      	ldr	r6, [r1, #8]
 800cbfe:	461f      	mov	r7, r3
 800cc00:	42be      	cmp	r6, r7
 800cc02:	680b      	ldr	r3, [r1, #0]
 800cc04:	4682      	mov	sl, r0
 800cc06:	460c      	mov	r4, r1
 800cc08:	4690      	mov	r8, r2
 800cc0a:	d82c      	bhi.n	800cc66 <__ssputs_r+0x6e>
 800cc0c:	898a      	ldrh	r2, [r1, #12]
 800cc0e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cc12:	d026      	beq.n	800cc62 <__ssputs_r+0x6a>
 800cc14:	6965      	ldr	r5, [r4, #20]
 800cc16:	6909      	ldr	r1, [r1, #16]
 800cc18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cc1c:	eba3 0901 	sub.w	r9, r3, r1
 800cc20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cc24:	1c7b      	adds	r3, r7, #1
 800cc26:	444b      	add	r3, r9
 800cc28:	106d      	asrs	r5, r5, #1
 800cc2a:	429d      	cmp	r5, r3
 800cc2c:	bf38      	it	cc
 800cc2e:	461d      	movcc	r5, r3
 800cc30:	0553      	lsls	r3, r2, #21
 800cc32:	d527      	bpl.n	800cc84 <__ssputs_r+0x8c>
 800cc34:	4629      	mov	r1, r5
 800cc36:	f7fe fc53 	bl	800b4e0 <_malloc_r>
 800cc3a:	4606      	mov	r6, r0
 800cc3c:	b360      	cbz	r0, 800cc98 <__ssputs_r+0xa0>
 800cc3e:	6921      	ldr	r1, [r4, #16]
 800cc40:	464a      	mov	r2, r9
 800cc42:	f000 fa1b 	bl	800d07c <memcpy>
 800cc46:	89a3      	ldrh	r3, [r4, #12]
 800cc48:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cc4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc50:	81a3      	strh	r3, [r4, #12]
 800cc52:	6126      	str	r6, [r4, #16]
 800cc54:	6165      	str	r5, [r4, #20]
 800cc56:	444e      	add	r6, r9
 800cc58:	eba5 0509 	sub.w	r5, r5, r9
 800cc5c:	6026      	str	r6, [r4, #0]
 800cc5e:	60a5      	str	r5, [r4, #8]
 800cc60:	463e      	mov	r6, r7
 800cc62:	42be      	cmp	r6, r7
 800cc64:	d900      	bls.n	800cc68 <__ssputs_r+0x70>
 800cc66:	463e      	mov	r6, r7
 800cc68:	6820      	ldr	r0, [r4, #0]
 800cc6a:	4632      	mov	r2, r6
 800cc6c:	4641      	mov	r1, r8
 800cc6e:	f000 f9c9 	bl	800d004 <memmove>
 800cc72:	68a3      	ldr	r3, [r4, #8]
 800cc74:	1b9b      	subs	r3, r3, r6
 800cc76:	60a3      	str	r3, [r4, #8]
 800cc78:	6823      	ldr	r3, [r4, #0]
 800cc7a:	4433      	add	r3, r6
 800cc7c:	6023      	str	r3, [r4, #0]
 800cc7e:	2000      	movs	r0, #0
 800cc80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc84:	462a      	mov	r2, r5
 800cc86:	f000 fdac 	bl	800d7e2 <_realloc_r>
 800cc8a:	4606      	mov	r6, r0
 800cc8c:	2800      	cmp	r0, #0
 800cc8e:	d1e0      	bne.n	800cc52 <__ssputs_r+0x5a>
 800cc90:	6921      	ldr	r1, [r4, #16]
 800cc92:	4650      	mov	r0, sl
 800cc94:	f7fe fbb0 	bl	800b3f8 <_free_r>
 800cc98:	230c      	movs	r3, #12
 800cc9a:	f8ca 3000 	str.w	r3, [sl]
 800cc9e:	89a3      	ldrh	r3, [r4, #12]
 800cca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cca4:	81a3      	strh	r3, [r4, #12]
 800cca6:	f04f 30ff 	mov.w	r0, #4294967295
 800ccaa:	e7e9      	b.n	800cc80 <__ssputs_r+0x88>

0800ccac <_svfiprintf_r>:
 800ccac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccb0:	4698      	mov	r8, r3
 800ccb2:	898b      	ldrh	r3, [r1, #12]
 800ccb4:	061b      	lsls	r3, r3, #24
 800ccb6:	b09d      	sub	sp, #116	; 0x74
 800ccb8:	4607      	mov	r7, r0
 800ccba:	460d      	mov	r5, r1
 800ccbc:	4614      	mov	r4, r2
 800ccbe:	d50e      	bpl.n	800ccde <_svfiprintf_r+0x32>
 800ccc0:	690b      	ldr	r3, [r1, #16]
 800ccc2:	b963      	cbnz	r3, 800ccde <_svfiprintf_r+0x32>
 800ccc4:	2140      	movs	r1, #64	; 0x40
 800ccc6:	f7fe fc0b 	bl	800b4e0 <_malloc_r>
 800ccca:	6028      	str	r0, [r5, #0]
 800cccc:	6128      	str	r0, [r5, #16]
 800ccce:	b920      	cbnz	r0, 800ccda <_svfiprintf_r+0x2e>
 800ccd0:	230c      	movs	r3, #12
 800ccd2:	603b      	str	r3, [r7, #0]
 800ccd4:	f04f 30ff 	mov.w	r0, #4294967295
 800ccd8:	e0d0      	b.n	800ce7c <_svfiprintf_r+0x1d0>
 800ccda:	2340      	movs	r3, #64	; 0x40
 800ccdc:	616b      	str	r3, [r5, #20]
 800ccde:	2300      	movs	r3, #0
 800cce0:	9309      	str	r3, [sp, #36]	; 0x24
 800cce2:	2320      	movs	r3, #32
 800cce4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cce8:	f8cd 800c 	str.w	r8, [sp, #12]
 800ccec:	2330      	movs	r3, #48	; 0x30
 800ccee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ce94 <_svfiprintf_r+0x1e8>
 800ccf2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ccf6:	f04f 0901 	mov.w	r9, #1
 800ccfa:	4623      	mov	r3, r4
 800ccfc:	469a      	mov	sl, r3
 800ccfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd02:	b10a      	cbz	r2, 800cd08 <_svfiprintf_r+0x5c>
 800cd04:	2a25      	cmp	r2, #37	; 0x25
 800cd06:	d1f9      	bne.n	800ccfc <_svfiprintf_r+0x50>
 800cd08:	ebba 0b04 	subs.w	fp, sl, r4
 800cd0c:	d00b      	beq.n	800cd26 <_svfiprintf_r+0x7a>
 800cd0e:	465b      	mov	r3, fp
 800cd10:	4622      	mov	r2, r4
 800cd12:	4629      	mov	r1, r5
 800cd14:	4638      	mov	r0, r7
 800cd16:	f7ff ff6f 	bl	800cbf8 <__ssputs_r>
 800cd1a:	3001      	adds	r0, #1
 800cd1c:	f000 80a9 	beq.w	800ce72 <_svfiprintf_r+0x1c6>
 800cd20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd22:	445a      	add	r2, fp
 800cd24:	9209      	str	r2, [sp, #36]	; 0x24
 800cd26:	f89a 3000 	ldrb.w	r3, [sl]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	f000 80a1 	beq.w	800ce72 <_svfiprintf_r+0x1c6>
 800cd30:	2300      	movs	r3, #0
 800cd32:	f04f 32ff 	mov.w	r2, #4294967295
 800cd36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd3a:	f10a 0a01 	add.w	sl, sl, #1
 800cd3e:	9304      	str	r3, [sp, #16]
 800cd40:	9307      	str	r3, [sp, #28]
 800cd42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd46:	931a      	str	r3, [sp, #104]	; 0x68
 800cd48:	4654      	mov	r4, sl
 800cd4a:	2205      	movs	r2, #5
 800cd4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd50:	4850      	ldr	r0, [pc, #320]	; (800ce94 <_svfiprintf_r+0x1e8>)
 800cd52:	f7f3 fac5 	bl	80002e0 <memchr>
 800cd56:	9a04      	ldr	r2, [sp, #16]
 800cd58:	b9d8      	cbnz	r0, 800cd92 <_svfiprintf_r+0xe6>
 800cd5a:	06d0      	lsls	r0, r2, #27
 800cd5c:	bf44      	itt	mi
 800cd5e:	2320      	movmi	r3, #32
 800cd60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd64:	0711      	lsls	r1, r2, #28
 800cd66:	bf44      	itt	mi
 800cd68:	232b      	movmi	r3, #43	; 0x2b
 800cd6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd6e:	f89a 3000 	ldrb.w	r3, [sl]
 800cd72:	2b2a      	cmp	r3, #42	; 0x2a
 800cd74:	d015      	beq.n	800cda2 <_svfiprintf_r+0xf6>
 800cd76:	9a07      	ldr	r2, [sp, #28]
 800cd78:	4654      	mov	r4, sl
 800cd7a:	2000      	movs	r0, #0
 800cd7c:	f04f 0c0a 	mov.w	ip, #10
 800cd80:	4621      	mov	r1, r4
 800cd82:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd86:	3b30      	subs	r3, #48	; 0x30
 800cd88:	2b09      	cmp	r3, #9
 800cd8a:	d94d      	bls.n	800ce28 <_svfiprintf_r+0x17c>
 800cd8c:	b1b0      	cbz	r0, 800cdbc <_svfiprintf_r+0x110>
 800cd8e:	9207      	str	r2, [sp, #28]
 800cd90:	e014      	b.n	800cdbc <_svfiprintf_r+0x110>
 800cd92:	eba0 0308 	sub.w	r3, r0, r8
 800cd96:	fa09 f303 	lsl.w	r3, r9, r3
 800cd9a:	4313      	orrs	r3, r2
 800cd9c:	9304      	str	r3, [sp, #16]
 800cd9e:	46a2      	mov	sl, r4
 800cda0:	e7d2      	b.n	800cd48 <_svfiprintf_r+0x9c>
 800cda2:	9b03      	ldr	r3, [sp, #12]
 800cda4:	1d19      	adds	r1, r3, #4
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	9103      	str	r1, [sp, #12]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	bfbb      	ittet	lt
 800cdae:	425b      	neglt	r3, r3
 800cdb0:	f042 0202 	orrlt.w	r2, r2, #2
 800cdb4:	9307      	strge	r3, [sp, #28]
 800cdb6:	9307      	strlt	r3, [sp, #28]
 800cdb8:	bfb8      	it	lt
 800cdba:	9204      	strlt	r2, [sp, #16]
 800cdbc:	7823      	ldrb	r3, [r4, #0]
 800cdbe:	2b2e      	cmp	r3, #46	; 0x2e
 800cdc0:	d10c      	bne.n	800cddc <_svfiprintf_r+0x130>
 800cdc2:	7863      	ldrb	r3, [r4, #1]
 800cdc4:	2b2a      	cmp	r3, #42	; 0x2a
 800cdc6:	d134      	bne.n	800ce32 <_svfiprintf_r+0x186>
 800cdc8:	9b03      	ldr	r3, [sp, #12]
 800cdca:	1d1a      	adds	r2, r3, #4
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	9203      	str	r2, [sp, #12]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	bfb8      	it	lt
 800cdd4:	f04f 33ff 	movlt.w	r3, #4294967295
 800cdd8:	3402      	adds	r4, #2
 800cdda:	9305      	str	r3, [sp, #20]
 800cddc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800cea4 <_svfiprintf_r+0x1f8>
 800cde0:	7821      	ldrb	r1, [r4, #0]
 800cde2:	2203      	movs	r2, #3
 800cde4:	4650      	mov	r0, sl
 800cde6:	f7f3 fa7b 	bl	80002e0 <memchr>
 800cdea:	b138      	cbz	r0, 800cdfc <_svfiprintf_r+0x150>
 800cdec:	9b04      	ldr	r3, [sp, #16]
 800cdee:	eba0 000a 	sub.w	r0, r0, sl
 800cdf2:	2240      	movs	r2, #64	; 0x40
 800cdf4:	4082      	lsls	r2, r0
 800cdf6:	4313      	orrs	r3, r2
 800cdf8:	3401      	adds	r4, #1
 800cdfa:	9304      	str	r3, [sp, #16]
 800cdfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce00:	4825      	ldr	r0, [pc, #148]	; (800ce98 <_svfiprintf_r+0x1ec>)
 800ce02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce06:	2206      	movs	r2, #6
 800ce08:	f7f3 fa6a 	bl	80002e0 <memchr>
 800ce0c:	2800      	cmp	r0, #0
 800ce0e:	d038      	beq.n	800ce82 <_svfiprintf_r+0x1d6>
 800ce10:	4b22      	ldr	r3, [pc, #136]	; (800ce9c <_svfiprintf_r+0x1f0>)
 800ce12:	bb1b      	cbnz	r3, 800ce5c <_svfiprintf_r+0x1b0>
 800ce14:	9b03      	ldr	r3, [sp, #12]
 800ce16:	3307      	adds	r3, #7
 800ce18:	f023 0307 	bic.w	r3, r3, #7
 800ce1c:	3308      	adds	r3, #8
 800ce1e:	9303      	str	r3, [sp, #12]
 800ce20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce22:	4433      	add	r3, r6
 800ce24:	9309      	str	r3, [sp, #36]	; 0x24
 800ce26:	e768      	b.n	800ccfa <_svfiprintf_r+0x4e>
 800ce28:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce2c:	460c      	mov	r4, r1
 800ce2e:	2001      	movs	r0, #1
 800ce30:	e7a6      	b.n	800cd80 <_svfiprintf_r+0xd4>
 800ce32:	2300      	movs	r3, #0
 800ce34:	3401      	adds	r4, #1
 800ce36:	9305      	str	r3, [sp, #20]
 800ce38:	4619      	mov	r1, r3
 800ce3a:	f04f 0c0a 	mov.w	ip, #10
 800ce3e:	4620      	mov	r0, r4
 800ce40:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce44:	3a30      	subs	r2, #48	; 0x30
 800ce46:	2a09      	cmp	r2, #9
 800ce48:	d903      	bls.n	800ce52 <_svfiprintf_r+0x1a6>
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d0c6      	beq.n	800cddc <_svfiprintf_r+0x130>
 800ce4e:	9105      	str	r1, [sp, #20]
 800ce50:	e7c4      	b.n	800cddc <_svfiprintf_r+0x130>
 800ce52:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce56:	4604      	mov	r4, r0
 800ce58:	2301      	movs	r3, #1
 800ce5a:	e7f0      	b.n	800ce3e <_svfiprintf_r+0x192>
 800ce5c:	ab03      	add	r3, sp, #12
 800ce5e:	9300      	str	r3, [sp, #0]
 800ce60:	462a      	mov	r2, r5
 800ce62:	4b0f      	ldr	r3, [pc, #60]	; (800cea0 <_svfiprintf_r+0x1f4>)
 800ce64:	a904      	add	r1, sp, #16
 800ce66:	4638      	mov	r0, r7
 800ce68:	f7fc fd42 	bl	80098f0 <_printf_float>
 800ce6c:	1c42      	adds	r2, r0, #1
 800ce6e:	4606      	mov	r6, r0
 800ce70:	d1d6      	bne.n	800ce20 <_svfiprintf_r+0x174>
 800ce72:	89ab      	ldrh	r3, [r5, #12]
 800ce74:	065b      	lsls	r3, r3, #25
 800ce76:	f53f af2d 	bmi.w	800ccd4 <_svfiprintf_r+0x28>
 800ce7a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce7c:	b01d      	add	sp, #116	; 0x74
 800ce7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce82:	ab03      	add	r3, sp, #12
 800ce84:	9300      	str	r3, [sp, #0]
 800ce86:	462a      	mov	r2, r5
 800ce88:	4b05      	ldr	r3, [pc, #20]	; (800cea0 <_svfiprintf_r+0x1f4>)
 800ce8a:	a904      	add	r1, sp, #16
 800ce8c:	4638      	mov	r0, r7
 800ce8e:	f7fc ffb7 	bl	8009e00 <_printf_i>
 800ce92:	e7eb      	b.n	800ce6c <_svfiprintf_r+0x1c0>
 800ce94:	0800e1c1 	.word	0x0800e1c1
 800ce98:	0800e1cb 	.word	0x0800e1cb
 800ce9c:	080098f1 	.word	0x080098f1
 800cea0:	0800cbf9 	.word	0x0800cbf9
 800cea4:	0800e1c7 	.word	0x0800e1c7

0800cea8 <__sflush_r>:
 800cea8:	898a      	ldrh	r2, [r1, #12]
 800ceaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ceae:	4605      	mov	r5, r0
 800ceb0:	0710      	lsls	r0, r2, #28
 800ceb2:	460c      	mov	r4, r1
 800ceb4:	d458      	bmi.n	800cf68 <__sflush_r+0xc0>
 800ceb6:	684b      	ldr	r3, [r1, #4]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	dc05      	bgt.n	800cec8 <__sflush_r+0x20>
 800cebc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	dc02      	bgt.n	800cec8 <__sflush_r+0x20>
 800cec2:	2000      	movs	r0, #0
 800cec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cec8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ceca:	2e00      	cmp	r6, #0
 800cecc:	d0f9      	beq.n	800cec2 <__sflush_r+0x1a>
 800cece:	2300      	movs	r3, #0
 800ced0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ced4:	682f      	ldr	r7, [r5, #0]
 800ced6:	6a21      	ldr	r1, [r4, #32]
 800ced8:	602b      	str	r3, [r5, #0]
 800ceda:	d032      	beq.n	800cf42 <__sflush_r+0x9a>
 800cedc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cede:	89a3      	ldrh	r3, [r4, #12]
 800cee0:	075a      	lsls	r2, r3, #29
 800cee2:	d505      	bpl.n	800cef0 <__sflush_r+0x48>
 800cee4:	6863      	ldr	r3, [r4, #4]
 800cee6:	1ac0      	subs	r0, r0, r3
 800cee8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ceea:	b10b      	cbz	r3, 800cef0 <__sflush_r+0x48>
 800ceec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ceee:	1ac0      	subs	r0, r0, r3
 800cef0:	2300      	movs	r3, #0
 800cef2:	4602      	mov	r2, r0
 800cef4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cef6:	6a21      	ldr	r1, [r4, #32]
 800cef8:	4628      	mov	r0, r5
 800cefa:	47b0      	blx	r6
 800cefc:	1c43      	adds	r3, r0, #1
 800cefe:	89a3      	ldrh	r3, [r4, #12]
 800cf00:	d106      	bne.n	800cf10 <__sflush_r+0x68>
 800cf02:	6829      	ldr	r1, [r5, #0]
 800cf04:	291d      	cmp	r1, #29
 800cf06:	d82b      	bhi.n	800cf60 <__sflush_r+0xb8>
 800cf08:	4a29      	ldr	r2, [pc, #164]	; (800cfb0 <__sflush_r+0x108>)
 800cf0a:	410a      	asrs	r2, r1
 800cf0c:	07d6      	lsls	r6, r2, #31
 800cf0e:	d427      	bmi.n	800cf60 <__sflush_r+0xb8>
 800cf10:	2200      	movs	r2, #0
 800cf12:	6062      	str	r2, [r4, #4]
 800cf14:	04d9      	lsls	r1, r3, #19
 800cf16:	6922      	ldr	r2, [r4, #16]
 800cf18:	6022      	str	r2, [r4, #0]
 800cf1a:	d504      	bpl.n	800cf26 <__sflush_r+0x7e>
 800cf1c:	1c42      	adds	r2, r0, #1
 800cf1e:	d101      	bne.n	800cf24 <__sflush_r+0x7c>
 800cf20:	682b      	ldr	r3, [r5, #0]
 800cf22:	b903      	cbnz	r3, 800cf26 <__sflush_r+0x7e>
 800cf24:	6560      	str	r0, [r4, #84]	; 0x54
 800cf26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf28:	602f      	str	r7, [r5, #0]
 800cf2a:	2900      	cmp	r1, #0
 800cf2c:	d0c9      	beq.n	800cec2 <__sflush_r+0x1a>
 800cf2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cf32:	4299      	cmp	r1, r3
 800cf34:	d002      	beq.n	800cf3c <__sflush_r+0x94>
 800cf36:	4628      	mov	r0, r5
 800cf38:	f7fe fa5e 	bl	800b3f8 <_free_r>
 800cf3c:	2000      	movs	r0, #0
 800cf3e:	6360      	str	r0, [r4, #52]	; 0x34
 800cf40:	e7c0      	b.n	800cec4 <__sflush_r+0x1c>
 800cf42:	2301      	movs	r3, #1
 800cf44:	4628      	mov	r0, r5
 800cf46:	47b0      	blx	r6
 800cf48:	1c41      	adds	r1, r0, #1
 800cf4a:	d1c8      	bne.n	800cede <__sflush_r+0x36>
 800cf4c:	682b      	ldr	r3, [r5, #0]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d0c5      	beq.n	800cede <__sflush_r+0x36>
 800cf52:	2b1d      	cmp	r3, #29
 800cf54:	d001      	beq.n	800cf5a <__sflush_r+0xb2>
 800cf56:	2b16      	cmp	r3, #22
 800cf58:	d101      	bne.n	800cf5e <__sflush_r+0xb6>
 800cf5a:	602f      	str	r7, [r5, #0]
 800cf5c:	e7b1      	b.n	800cec2 <__sflush_r+0x1a>
 800cf5e:	89a3      	ldrh	r3, [r4, #12]
 800cf60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf64:	81a3      	strh	r3, [r4, #12]
 800cf66:	e7ad      	b.n	800cec4 <__sflush_r+0x1c>
 800cf68:	690f      	ldr	r7, [r1, #16]
 800cf6a:	2f00      	cmp	r7, #0
 800cf6c:	d0a9      	beq.n	800cec2 <__sflush_r+0x1a>
 800cf6e:	0793      	lsls	r3, r2, #30
 800cf70:	680e      	ldr	r6, [r1, #0]
 800cf72:	bf08      	it	eq
 800cf74:	694b      	ldreq	r3, [r1, #20]
 800cf76:	600f      	str	r7, [r1, #0]
 800cf78:	bf18      	it	ne
 800cf7a:	2300      	movne	r3, #0
 800cf7c:	eba6 0807 	sub.w	r8, r6, r7
 800cf80:	608b      	str	r3, [r1, #8]
 800cf82:	f1b8 0f00 	cmp.w	r8, #0
 800cf86:	dd9c      	ble.n	800cec2 <__sflush_r+0x1a>
 800cf88:	6a21      	ldr	r1, [r4, #32]
 800cf8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cf8c:	4643      	mov	r3, r8
 800cf8e:	463a      	mov	r2, r7
 800cf90:	4628      	mov	r0, r5
 800cf92:	47b0      	blx	r6
 800cf94:	2800      	cmp	r0, #0
 800cf96:	dc06      	bgt.n	800cfa6 <__sflush_r+0xfe>
 800cf98:	89a3      	ldrh	r3, [r4, #12]
 800cf9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf9e:	81a3      	strh	r3, [r4, #12]
 800cfa0:	f04f 30ff 	mov.w	r0, #4294967295
 800cfa4:	e78e      	b.n	800cec4 <__sflush_r+0x1c>
 800cfa6:	4407      	add	r7, r0
 800cfa8:	eba8 0800 	sub.w	r8, r8, r0
 800cfac:	e7e9      	b.n	800cf82 <__sflush_r+0xda>
 800cfae:	bf00      	nop
 800cfb0:	dfbffffe 	.word	0xdfbffffe

0800cfb4 <_fflush_r>:
 800cfb4:	b538      	push	{r3, r4, r5, lr}
 800cfb6:	690b      	ldr	r3, [r1, #16]
 800cfb8:	4605      	mov	r5, r0
 800cfba:	460c      	mov	r4, r1
 800cfbc:	b913      	cbnz	r3, 800cfc4 <_fflush_r+0x10>
 800cfbe:	2500      	movs	r5, #0
 800cfc0:	4628      	mov	r0, r5
 800cfc2:	bd38      	pop	{r3, r4, r5, pc}
 800cfc4:	b118      	cbz	r0, 800cfce <_fflush_r+0x1a>
 800cfc6:	6a03      	ldr	r3, [r0, #32]
 800cfc8:	b90b      	cbnz	r3, 800cfce <_fflush_r+0x1a>
 800cfca:	f7fd facb 	bl	800a564 <__sinit>
 800cfce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d0f3      	beq.n	800cfbe <_fflush_r+0xa>
 800cfd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cfd8:	07d0      	lsls	r0, r2, #31
 800cfda:	d404      	bmi.n	800cfe6 <_fflush_r+0x32>
 800cfdc:	0599      	lsls	r1, r3, #22
 800cfde:	d402      	bmi.n	800cfe6 <_fflush_r+0x32>
 800cfe0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cfe2:	f7fd fc0a 	bl	800a7fa <__retarget_lock_acquire_recursive>
 800cfe6:	4628      	mov	r0, r5
 800cfe8:	4621      	mov	r1, r4
 800cfea:	f7ff ff5d 	bl	800cea8 <__sflush_r>
 800cfee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cff0:	07da      	lsls	r2, r3, #31
 800cff2:	4605      	mov	r5, r0
 800cff4:	d4e4      	bmi.n	800cfc0 <_fflush_r+0xc>
 800cff6:	89a3      	ldrh	r3, [r4, #12]
 800cff8:	059b      	lsls	r3, r3, #22
 800cffa:	d4e1      	bmi.n	800cfc0 <_fflush_r+0xc>
 800cffc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cffe:	f7fd fbfd 	bl	800a7fc <__retarget_lock_release_recursive>
 800d002:	e7dd      	b.n	800cfc0 <_fflush_r+0xc>

0800d004 <memmove>:
 800d004:	4288      	cmp	r0, r1
 800d006:	b510      	push	{r4, lr}
 800d008:	eb01 0402 	add.w	r4, r1, r2
 800d00c:	d902      	bls.n	800d014 <memmove+0x10>
 800d00e:	4284      	cmp	r4, r0
 800d010:	4623      	mov	r3, r4
 800d012:	d807      	bhi.n	800d024 <memmove+0x20>
 800d014:	1e43      	subs	r3, r0, #1
 800d016:	42a1      	cmp	r1, r4
 800d018:	d008      	beq.n	800d02c <memmove+0x28>
 800d01a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d01e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d022:	e7f8      	b.n	800d016 <memmove+0x12>
 800d024:	4402      	add	r2, r0
 800d026:	4601      	mov	r1, r0
 800d028:	428a      	cmp	r2, r1
 800d02a:	d100      	bne.n	800d02e <memmove+0x2a>
 800d02c:	bd10      	pop	{r4, pc}
 800d02e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d032:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d036:	e7f7      	b.n	800d028 <memmove+0x24>

0800d038 <strncmp>:
 800d038:	b510      	push	{r4, lr}
 800d03a:	b16a      	cbz	r2, 800d058 <strncmp+0x20>
 800d03c:	3901      	subs	r1, #1
 800d03e:	1884      	adds	r4, r0, r2
 800d040:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d044:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d048:	429a      	cmp	r2, r3
 800d04a:	d103      	bne.n	800d054 <strncmp+0x1c>
 800d04c:	42a0      	cmp	r0, r4
 800d04e:	d001      	beq.n	800d054 <strncmp+0x1c>
 800d050:	2a00      	cmp	r2, #0
 800d052:	d1f5      	bne.n	800d040 <strncmp+0x8>
 800d054:	1ad0      	subs	r0, r2, r3
 800d056:	bd10      	pop	{r4, pc}
 800d058:	4610      	mov	r0, r2
 800d05a:	e7fc      	b.n	800d056 <strncmp+0x1e>

0800d05c <_sbrk_r>:
 800d05c:	b538      	push	{r3, r4, r5, lr}
 800d05e:	4d06      	ldr	r5, [pc, #24]	; (800d078 <_sbrk_r+0x1c>)
 800d060:	2300      	movs	r3, #0
 800d062:	4604      	mov	r4, r0
 800d064:	4608      	mov	r0, r1
 800d066:	602b      	str	r3, [r5, #0]
 800d068:	f7f4 fd58 	bl	8001b1c <_sbrk>
 800d06c:	1c43      	adds	r3, r0, #1
 800d06e:	d102      	bne.n	800d076 <_sbrk_r+0x1a>
 800d070:	682b      	ldr	r3, [r5, #0]
 800d072:	b103      	cbz	r3, 800d076 <_sbrk_r+0x1a>
 800d074:	6023      	str	r3, [r4, #0]
 800d076:	bd38      	pop	{r3, r4, r5, pc}
 800d078:	24000b88 	.word	0x24000b88

0800d07c <memcpy>:
 800d07c:	440a      	add	r2, r1
 800d07e:	4291      	cmp	r1, r2
 800d080:	f100 33ff 	add.w	r3, r0, #4294967295
 800d084:	d100      	bne.n	800d088 <memcpy+0xc>
 800d086:	4770      	bx	lr
 800d088:	b510      	push	{r4, lr}
 800d08a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d08e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d092:	4291      	cmp	r1, r2
 800d094:	d1f9      	bne.n	800d08a <memcpy+0xe>
 800d096:	bd10      	pop	{r4, pc}

0800d098 <nan>:
 800d098:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d0a0 <nan+0x8>
 800d09c:	4770      	bx	lr
 800d09e:	bf00      	nop
 800d0a0:	00000000 	.word	0x00000000
 800d0a4:	7ff80000 	.word	0x7ff80000

0800d0a8 <__assert_func>:
 800d0a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d0aa:	4614      	mov	r4, r2
 800d0ac:	461a      	mov	r2, r3
 800d0ae:	4b09      	ldr	r3, [pc, #36]	; (800d0d4 <__assert_func+0x2c>)
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	4605      	mov	r5, r0
 800d0b4:	68d8      	ldr	r0, [r3, #12]
 800d0b6:	b14c      	cbz	r4, 800d0cc <__assert_func+0x24>
 800d0b8:	4b07      	ldr	r3, [pc, #28]	; (800d0d8 <__assert_func+0x30>)
 800d0ba:	9100      	str	r1, [sp, #0]
 800d0bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d0c0:	4906      	ldr	r1, [pc, #24]	; (800d0dc <__assert_func+0x34>)
 800d0c2:	462b      	mov	r3, r5
 800d0c4:	f000 fbca 	bl	800d85c <fiprintf>
 800d0c8:	f000 fbda 	bl	800d880 <abort>
 800d0cc:	4b04      	ldr	r3, [pc, #16]	; (800d0e0 <__assert_func+0x38>)
 800d0ce:	461c      	mov	r4, r3
 800d0d0:	e7f3      	b.n	800d0ba <__assert_func+0x12>
 800d0d2:	bf00      	nop
 800d0d4:	24000068 	.word	0x24000068
 800d0d8:	0800e1da 	.word	0x0800e1da
 800d0dc:	0800e1e7 	.word	0x0800e1e7
 800d0e0:	0800e215 	.word	0x0800e215

0800d0e4 <_calloc_r>:
 800d0e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d0e6:	fba1 2402 	umull	r2, r4, r1, r2
 800d0ea:	b94c      	cbnz	r4, 800d100 <_calloc_r+0x1c>
 800d0ec:	4611      	mov	r1, r2
 800d0ee:	9201      	str	r2, [sp, #4]
 800d0f0:	f7fe f9f6 	bl	800b4e0 <_malloc_r>
 800d0f4:	9a01      	ldr	r2, [sp, #4]
 800d0f6:	4605      	mov	r5, r0
 800d0f8:	b930      	cbnz	r0, 800d108 <_calloc_r+0x24>
 800d0fa:	4628      	mov	r0, r5
 800d0fc:	b003      	add	sp, #12
 800d0fe:	bd30      	pop	{r4, r5, pc}
 800d100:	220c      	movs	r2, #12
 800d102:	6002      	str	r2, [r0, #0]
 800d104:	2500      	movs	r5, #0
 800d106:	e7f8      	b.n	800d0fa <_calloc_r+0x16>
 800d108:	4621      	mov	r1, r4
 800d10a:	f7fd faf8 	bl	800a6fe <memset>
 800d10e:	e7f4      	b.n	800d0fa <_calloc_r+0x16>

0800d110 <rshift>:
 800d110:	6903      	ldr	r3, [r0, #16]
 800d112:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d116:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d11a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d11e:	f100 0414 	add.w	r4, r0, #20
 800d122:	dd45      	ble.n	800d1b0 <rshift+0xa0>
 800d124:	f011 011f 	ands.w	r1, r1, #31
 800d128:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d12c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d130:	d10c      	bne.n	800d14c <rshift+0x3c>
 800d132:	f100 0710 	add.w	r7, r0, #16
 800d136:	4629      	mov	r1, r5
 800d138:	42b1      	cmp	r1, r6
 800d13a:	d334      	bcc.n	800d1a6 <rshift+0x96>
 800d13c:	1a9b      	subs	r3, r3, r2
 800d13e:	009b      	lsls	r3, r3, #2
 800d140:	1eea      	subs	r2, r5, #3
 800d142:	4296      	cmp	r6, r2
 800d144:	bf38      	it	cc
 800d146:	2300      	movcc	r3, #0
 800d148:	4423      	add	r3, r4
 800d14a:	e015      	b.n	800d178 <rshift+0x68>
 800d14c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d150:	f1c1 0820 	rsb	r8, r1, #32
 800d154:	40cf      	lsrs	r7, r1
 800d156:	f105 0e04 	add.w	lr, r5, #4
 800d15a:	46a1      	mov	r9, r4
 800d15c:	4576      	cmp	r6, lr
 800d15e:	46f4      	mov	ip, lr
 800d160:	d815      	bhi.n	800d18e <rshift+0x7e>
 800d162:	1a9a      	subs	r2, r3, r2
 800d164:	0092      	lsls	r2, r2, #2
 800d166:	3a04      	subs	r2, #4
 800d168:	3501      	adds	r5, #1
 800d16a:	42ae      	cmp	r6, r5
 800d16c:	bf38      	it	cc
 800d16e:	2200      	movcc	r2, #0
 800d170:	18a3      	adds	r3, r4, r2
 800d172:	50a7      	str	r7, [r4, r2]
 800d174:	b107      	cbz	r7, 800d178 <rshift+0x68>
 800d176:	3304      	adds	r3, #4
 800d178:	1b1a      	subs	r2, r3, r4
 800d17a:	42a3      	cmp	r3, r4
 800d17c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d180:	bf08      	it	eq
 800d182:	2300      	moveq	r3, #0
 800d184:	6102      	str	r2, [r0, #16]
 800d186:	bf08      	it	eq
 800d188:	6143      	streq	r3, [r0, #20]
 800d18a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d18e:	f8dc c000 	ldr.w	ip, [ip]
 800d192:	fa0c fc08 	lsl.w	ip, ip, r8
 800d196:	ea4c 0707 	orr.w	r7, ip, r7
 800d19a:	f849 7b04 	str.w	r7, [r9], #4
 800d19e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d1a2:	40cf      	lsrs	r7, r1
 800d1a4:	e7da      	b.n	800d15c <rshift+0x4c>
 800d1a6:	f851 cb04 	ldr.w	ip, [r1], #4
 800d1aa:	f847 cf04 	str.w	ip, [r7, #4]!
 800d1ae:	e7c3      	b.n	800d138 <rshift+0x28>
 800d1b0:	4623      	mov	r3, r4
 800d1b2:	e7e1      	b.n	800d178 <rshift+0x68>

0800d1b4 <__hexdig_fun>:
 800d1b4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d1b8:	2b09      	cmp	r3, #9
 800d1ba:	d802      	bhi.n	800d1c2 <__hexdig_fun+0xe>
 800d1bc:	3820      	subs	r0, #32
 800d1be:	b2c0      	uxtb	r0, r0
 800d1c0:	4770      	bx	lr
 800d1c2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d1c6:	2b05      	cmp	r3, #5
 800d1c8:	d801      	bhi.n	800d1ce <__hexdig_fun+0x1a>
 800d1ca:	3847      	subs	r0, #71	; 0x47
 800d1cc:	e7f7      	b.n	800d1be <__hexdig_fun+0xa>
 800d1ce:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d1d2:	2b05      	cmp	r3, #5
 800d1d4:	d801      	bhi.n	800d1da <__hexdig_fun+0x26>
 800d1d6:	3827      	subs	r0, #39	; 0x27
 800d1d8:	e7f1      	b.n	800d1be <__hexdig_fun+0xa>
 800d1da:	2000      	movs	r0, #0
 800d1dc:	4770      	bx	lr
	...

0800d1e0 <__gethex>:
 800d1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1e4:	4617      	mov	r7, r2
 800d1e6:	680a      	ldr	r2, [r1, #0]
 800d1e8:	b085      	sub	sp, #20
 800d1ea:	f102 0b02 	add.w	fp, r2, #2
 800d1ee:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d1f2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d1f6:	4681      	mov	r9, r0
 800d1f8:	468a      	mov	sl, r1
 800d1fa:	9302      	str	r3, [sp, #8]
 800d1fc:	32fe      	adds	r2, #254	; 0xfe
 800d1fe:	eb02 030b 	add.w	r3, r2, fp
 800d202:	46d8      	mov	r8, fp
 800d204:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800d208:	9301      	str	r3, [sp, #4]
 800d20a:	2830      	cmp	r0, #48	; 0x30
 800d20c:	d0f7      	beq.n	800d1fe <__gethex+0x1e>
 800d20e:	f7ff ffd1 	bl	800d1b4 <__hexdig_fun>
 800d212:	4604      	mov	r4, r0
 800d214:	2800      	cmp	r0, #0
 800d216:	d138      	bne.n	800d28a <__gethex+0xaa>
 800d218:	49a7      	ldr	r1, [pc, #668]	; (800d4b8 <__gethex+0x2d8>)
 800d21a:	2201      	movs	r2, #1
 800d21c:	4640      	mov	r0, r8
 800d21e:	f7ff ff0b 	bl	800d038 <strncmp>
 800d222:	4606      	mov	r6, r0
 800d224:	2800      	cmp	r0, #0
 800d226:	d169      	bne.n	800d2fc <__gethex+0x11c>
 800d228:	f898 0001 	ldrb.w	r0, [r8, #1]
 800d22c:	465d      	mov	r5, fp
 800d22e:	f7ff ffc1 	bl	800d1b4 <__hexdig_fun>
 800d232:	2800      	cmp	r0, #0
 800d234:	d064      	beq.n	800d300 <__gethex+0x120>
 800d236:	465a      	mov	r2, fp
 800d238:	7810      	ldrb	r0, [r2, #0]
 800d23a:	2830      	cmp	r0, #48	; 0x30
 800d23c:	4690      	mov	r8, r2
 800d23e:	f102 0201 	add.w	r2, r2, #1
 800d242:	d0f9      	beq.n	800d238 <__gethex+0x58>
 800d244:	f7ff ffb6 	bl	800d1b4 <__hexdig_fun>
 800d248:	2301      	movs	r3, #1
 800d24a:	fab0 f480 	clz	r4, r0
 800d24e:	0964      	lsrs	r4, r4, #5
 800d250:	465e      	mov	r6, fp
 800d252:	9301      	str	r3, [sp, #4]
 800d254:	4642      	mov	r2, r8
 800d256:	4615      	mov	r5, r2
 800d258:	3201      	adds	r2, #1
 800d25a:	7828      	ldrb	r0, [r5, #0]
 800d25c:	f7ff ffaa 	bl	800d1b4 <__hexdig_fun>
 800d260:	2800      	cmp	r0, #0
 800d262:	d1f8      	bne.n	800d256 <__gethex+0x76>
 800d264:	4994      	ldr	r1, [pc, #592]	; (800d4b8 <__gethex+0x2d8>)
 800d266:	2201      	movs	r2, #1
 800d268:	4628      	mov	r0, r5
 800d26a:	f7ff fee5 	bl	800d038 <strncmp>
 800d26e:	b978      	cbnz	r0, 800d290 <__gethex+0xb0>
 800d270:	b946      	cbnz	r6, 800d284 <__gethex+0xa4>
 800d272:	1c6e      	adds	r6, r5, #1
 800d274:	4632      	mov	r2, r6
 800d276:	4615      	mov	r5, r2
 800d278:	3201      	adds	r2, #1
 800d27a:	7828      	ldrb	r0, [r5, #0]
 800d27c:	f7ff ff9a 	bl	800d1b4 <__hexdig_fun>
 800d280:	2800      	cmp	r0, #0
 800d282:	d1f8      	bne.n	800d276 <__gethex+0x96>
 800d284:	1b73      	subs	r3, r6, r5
 800d286:	009e      	lsls	r6, r3, #2
 800d288:	e004      	b.n	800d294 <__gethex+0xb4>
 800d28a:	2400      	movs	r4, #0
 800d28c:	4626      	mov	r6, r4
 800d28e:	e7e1      	b.n	800d254 <__gethex+0x74>
 800d290:	2e00      	cmp	r6, #0
 800d292:	d1f7      	bne.n	800d284 <__gethex+0xa4>
 800d294:	782b      	ldrb	r3, [r5, #0]
 800d296:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d29a:	2b50      	cmp	r3, #80	; 0x50
 800d29c:	d13d      	bne.n	800d31a <__gethex+0x13a>
 800d29e:	786b      	ldrb	r3, [r5, #1]
 800d2a0:	2b2b      	cmp	r3, #43	; 0x2b
 800d2a2:	d02f      	beq.n	800d304 <__gethex+0x124>
 800d2a4:	2b2d      	cmp	r3, #45	; 0x2d
 800d2a6:	d031      	beq.n	800d30c <__gethex+0x12c>
 800d2a8:	1c69      	adds	r1, r5, #1
 800d2aa:	f04f 0b00 	mov.w	fp, #0
 800d2ae:	7808      	ldrb	r0, [r1, #0]
 800d2b0:	f7ff ff80 	bl	800d1b4 <__hexdig_fun>
 800d2b4:	1e42      	subs	r2, r0, #1
 800d2b6:	b2d2      	uxtb	r2, r2
 800d2b8:	2a18      	cmp	r2, #24
 800d2ba:	d82e      	bhi.n	800d31a <__gethex+0x13a>
 800d2bc:	f1a0 0210 	sub.w	r2, r0, #16
 800d2c0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d2c4:	f7ff ff76 	bl	800d1b4 <__hexdig_fun>
 800d2c8:	f100 3cff 	add.w	ip, r0, #4294967295
 800d2cc:	fa5f fc8c 	uxtb.w	ip, ip
 800d2d0:	f1bc 0f18 	cmp.w	ip, #24
 800d2d4:	d91d      	bls.n	800d312 <__gethex+0x132>
 800d2d6:	f1bb 0f00 	cmp.w	fp, #0
 800d2da:	d000      	beq.n	800d2de <__gethex+0xfe>
 800d2dc:	4252      	negs	r2, r2
 800d2de:	4416      	add	r6, r2
 800d2e0:	f8ca 1000 	str.w	r1, [sl]
 800d2e4:	b1dc      	cbz	r4, 800d31e <__gethex+0x13e>
 800d2e6:	9b01      	ldr	r3, [sp, #4]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	bf14      	ite	ne
 800d2ec:	f04f 0800 	movne.w	r8, #0
 800d2f0:	f04f 0806 	moveq.w	r8, #6
 800d2f4:	4640      	mov	r0, r8
 800d2f6:	b005      	add	sp, #20
 800d2f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2fc:	4645      	mov	r5, r8
 800d2fe:	4626      	mov	r6, r4
 800d300:	2401      	movs	r4, #1
 800d302:	e7c7      	b.n	800d294 <__gethex+0xb4>
 800d304:	f04f 0b00 	mov.w	fp, #0
 800d308:	1ca9      	adds	r1, r5, #2
 800d30a:	e7d0      	b.n	800d2ae <__gethex+0xce>
 800d30c:	f04f 0b01 	mov.w	fp, #1
 800d310:	e7fa      	b.n	800d308 <__gethex+0x128>
 800d312:	230a      	movs	r3, #10
 800d314:	fb03 0002 	mla	r0, r3, r2, r0
 800d318:	e7d0      	b.n	800d2bc <__gethex+0xdc>
 800d31a:	4629      	mov	r1, r5
 800d31c:	e7e0      	b.n	800d2e0 <__gethex+0x100>
 800d31e:	eba5 0308 	sub.w	r3, r5, r8
 800d322:	3b01      	subs	r3, #1
 800d324:	4621      	mov	r1, r4
 800d326:	2b07      	cmp	r3, #7
 800d328:	dc0a      	bgt.n	800d340 <__gethex+0x160>
 800d32a:	4648      	mov	r0, r9
 800d32c:	f7fe f964 	bl	800b5f8 <_Balloc>
 800d330:	4604      	mov	r4, r0
 800d332:	b940      	cbnz	r0, 800d346 <__gethex+0x166>
 800d334:	4b61      	ldr	r3, [pc, #388]	; (800d4bc <__gethex+0x2dc>)
 800d336:	4602      	mov	r2, r0
 800d338:	21e4      	movs	r1, #228	; 0xe4
 800d33a:	4861      	ldr	r0, [pc, #388]	; (800d4c0 <__gethex+0x2e0>)
 800d33c:	f7ff feb4 	bl	800d0a8 <__assert_func>
 800d340:	3101      	adds	r1, #1
 800d342:	105b      	asrs	r3, r3, #1
 800d344:	e7ef      	b.n	800d326 <__gethex+0x146>
 800d346:	f100 0a14 	add.w	sl, r0, #20
 800d34a:	2300      	movs	r3, #0
 800d34c:	495a      	ldr	r1, [pc, #360]	; (800d4b8 <__gethex+0x2d8>)
 800d34e:	f8cd a004 	str.w	sl, [sp, #4]
 800d352:	469b      	mov	fp, r3
 800d354:	45a8      	cmp	r8, r5
 800d356:	d342      	bcc.n	800d3de <__gethex+0x1fe>
 800d358:	9801      	ldr	r0, [sp, #4]
 800d35a:	f840 bb04 	str.w	fp, [r0], #4
 800d35e:	eba0 000a 	sub.w	r0, r0, sl
 800d362:	1080      	asrs	r0, r0, #2
 800d364:	6120      	str	r0, [r4, #16]
 800d366:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800d36a:	4658      	mov	r0, fp
 800d36c:	f7fe fa36 	bl	800b7dc <__hi0bits>
 800d370:	683d      	ldr	r5, [r7, #0]
 800d372:	eba8 0000 	sub.w	r0, r8, r0
 800d376:	42a8      	cmp	r0, r5
 800d378:	dd59      	ble.n	800d42e <__gethex+0x24e>
 800d37a:	eba0 0805 	sub.w	r8, r0, r5
 800d37e:	4641      	mov	r1, r8
 800d380:	4620      	mov	r0, r4
 800d382:	f7fe fdc2 	bl	800bf0a <__any_on>
 800d386:	4683      	mov	fp, r0
 800d388:	b1b8      	cbz	r0, 800d3ba <__gethex+0x1da>
 800d38a:	f108 33ff 	add.w	r3, r8, #4294967295
 800d38e:	1159      	asrs	r1, r3, #5
 800d390:	f003 021f 	and.w	r2, r3, #31
 800d394:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d398:	f04f 0b01 	mov.w	fp, #1
 800d39c:	fa0b f202 	lsl.w	r2, fp, r2
 800d3a0:	420a      	tst	r2, r1
 800d3a2:	d00a      	beq.n	800d3ba <__gethex+0x1da>
 800d3a4:	455b      	cmp	r3, fp
 800d3a6:	dd06      	ble.n	800d3b6 <__gethex+0x1d6>
 800d3a8:	f1a8 0102 	sub.w	r1, r8, #2
 800d3ac:	4620      	mov	r0, r4
 800d3ae:	f7fe fdac 	bl	800bf0a <__any_on>
 800d3b2:	2800      	cmp	r0, #0
 800d3b4:	d138      	bne.n	800d428 <__gethex+0x248>
 800d3b6:	f04f 0b02 	mov.w	fp, #2
 800d3ba:	4641      	mov	r1, r8
 800d3bc:	4620      	mov	r0, r4
 800d3be:	f7ff fea7 	bl	800d110 <rshift>
 800d3c2:	4446      	add	r6, r8
 800d3c4:	68bb      	ldr	r3, [r7, #8]
 800d3c6:	42b3      	cmp	r3, r6
 800d3c8:	da41      	bge.n	800d44e <__gethex+0x26e>
 800d3ca:	4621      	mov	r1, r4
 800d3cc:	4648      	mov	r0, r9
 800d3ce:	f7fe f953 	bl	800b678 <_Bfree>
 800d3d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	6013      	str	r3, [r2, #0]
 800d3d8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800d3dc:	e78a      	b.n	800d2f4 <__gethex+0x114>
 800d3de:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800d3e2:	2a2e      	cmp	r2, #46	; 0x2e
 800d3e4:	d014      	beq.n	800d410 <__gethex+0x230>
 800d3e6:	2b20      	cmp	r3, #32
 800d3e8:	d106      	bne.n	800d3f8 <__gethex+0x218>
 800d3ea:	9b01      	ldr	r3, [sp, #4]
 800d3ec:	f843 bb04 	str.w	fp, [r3], #4
 800d3f0:	f04f 0b00 	mov.w	fp, #0
 800d3f4:	9301      	str	r3, [sp, #4]
 800d3f6:	465b      	mov	r3, fp
 800d3f8:	7828      	ldrb	r0, [r5, #0]
 800d3fa:	9303      	str	r3, [sp, #12]
 800d3fc:	f7ff feda 	bl	800d1b4 <__hexdig_fun>
 800d400:	9b03      	ldr	r3, [sp, #12]
 800d402:	f000 000f 	and.w	r0, r0, #15
 800d406:	4098      	lsls	r0, r3
 800d408:	ea4b 0b00 	orr.w	fp, fp, r0
 800d40c:	3304      	adds	r3, #4
 800d40e:	e7a1      	b.n	800d354 <__gethex+0x174>
 800d410:	45a8      	cmp	r8, r5
 800d412:	d8e8      	bhi.n	800d3e6 <__gethex+0x206>
 800d414:	2201      	movs	r2, #1
 800d416:	4628      	mov	r0, r5
 800d418:	9303      	str	r3, [sp, #12]
 800d41a:	f7ff fe0d 	bl	800d038 <strncmp>
 800d41e:	4926      	ldr	r1, [pc, #152]	; (800d4b8 <__gethex+0x2d8>)
 800d420:	9b03      	ldr	r3, [sp, #12]
 800d422:	2800      	cmp	r0, #0
 800d424:	d1df      	bne.n	800d3e6 <__gethex+0x206>
 800d426:	e795      	b.n	800d354 <__gethex+0x174>
 800d428:	f04f 0b03 	mov.w	fp, #3
 800d42c:	e7c5      	b.n	800d3ba <__gethex+0x1da>
 800d42e:	da0b      	bge.n	800d448 <__gethex+0x268>
 800d430:	eba5 0800 	sub.w	r8, r5, r0
 800d434:	4621      	mov	r1, r4
 800d436:	4642      	mov	r2, r8
 800d438:	4648      	mov	r0, r9
 800d43a:	f7fe fb37 	bl	800baac <__lshift>
 800d43e:	eba6 0608 	sub.w	r6, r6, r8
 800d442:	4604      	mov	r4, r0
 800d444:	f100 0a14 	add.w	sl, r0, #20
 800d448:	f04f 0b00 	mov.w	fp, #0
 800d44c:	e7ba      	b.n	800d3c4 <__gethex+0x1e4>
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	42b3      	cmp	r3, r6
 800d452:	dd73      	ble.n	800d53c <__gethex+0x35c>
 800d454:	1b9e      	subs	r6, r3, r6
 800d456:	42b5      	cmp	r5, r6
 800d458:	dc34      	bgt.n	800d4c4 <__gethex+0x2e4>
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	2b02      	cmp	r3, #2
 800d45e:	d023      	beq.n	800d4a8 <__gethex+0x2c8>
 800d460:	2b03      	cmp	r3, #3
 800d462:	d025      	beq.n	800d4b0 <__gethex+0x2d0>
 800d464:	2b01      	cmp	r3, #1
 800d466:	d115      	bne.n	800d494 <__gethex+0x2b4>
 800d468:	42b5      	cmp	r5, r6
 800d46a:	d113      	bne.n	800d494 <__gethex+0x2b4>
 800d46c:	2d01      	cmp	r5, #1
 800d46e:	d10b      	bne.n	800d488 <__gethex+0x2a8>
 800d470:	9a02      	ldr	r2, [sp, #8]
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	6013      	str	r3, [r2, #0]
 800d476:	2301      	movs	r3, #1
 800d478:	6123      	str	r3, [r4, #16]
 800d47a:	f8ca 3000 	str.w	r3, [sl]
 800d47e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d480:	f04f 0862 	mov.w	r8, #98	; 0x62
 800d484:	601c      	str	r4, [r3, #0]
 800d486:	e735      	b.n	800d2f4 <__gethex+0x114>
 800d488:	1e69      	subs	r1, r5, #1
 800d48a:	4620      	mov	r0, r4
 800d48c:	f7fe fd3d 	bl	800bf0a <__any_on>
 800d490:	2800      	cmp	r0, #0
 800d492:	d1ed      	bne.n	800d470 <__gethex+0x290>
 800d494:	4621      	mov	r1, r4
 800d496:	4648      	mov	r0, r9
 800d498:	f7fe f8ee 	bl	800b678 <_Bfree>
 800d49c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d49e:	2300      	movs	r3, #0
 800d4a0:	6013      	str	r3, [r2, #0]
 800d4a2:	f04f 0850 	mov.w	r8, #80	; 0x50
 800d4a6:	e725      	b.n	800d2f4 <__gethex+0x114>
 800d4a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d1f2      	bne.n	800d494 <__gethex+0x2b4>
 800d4ae:	e7df      	b.n	800d470 <__gethex+0x290>
 800d4b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d1dc      	bne.n	800d470 <__gethex+0x290>
 800d4b6:	e7ed      	b.n	800d494 <__gethex+0x2b4>
 800d4b8:	0800e06c 	.word	0x0800e06c
 800d4bc:	0800df01 	.word	0x0800df01
 800d4c0:	0800e216 	.word	0x0800e216
 800d4c4:	f106 38ff 	add.w	r8, r6, #4294967295
 800d4c8:	f1bb 0f00 	cmp.w	fp, #0
 800d4cc:	d133      	bne.n	800d536 <__gethex+0x356>
 800d4ce:	f1b8 0f00 	cmp.w	r8, #0
 800d4d2:	d004      	beq.n	800d4de <__gethex+0x2fe>
 800d4d4:	4641      	mov	r1, r8
 800d4d6:	4620      	mov	r0, r4
 800d4d8:	f7fe fd17 	bl	800bf0a <__any_on>
 800d4dc:	4683      	mov	fp, r0
 800d4de:	ea4f 1268 	mov.w	r2, r8, asr #5
 800d4e2:	2301      	movs	r3, #1
 800d4e4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d4e8:	f008 081f 	and.w	r8, r8, #31
 800d4ec:	fa03 f308 	lsl.w	r3, r3, r8
 800d4f0:	4213      	tst	r3, r2
 800d4f2:	4631      	mov	r1, r6
 800d4f4:	4620      	mov	r0, r4
 800d4f6:	bf18      	it	ne
 800d4f8:	f04b 0b02 	orrne.w	fp, fp, #2
 800d4fc:	1bad      	subs	r5, r5, r6
 800d4fe:	f7ff fe07 	bl	800d110 <rshift>
 800d502:	687e      	ldr	r6, [r7, #4]
 800d504:	f04f 0802 	mov.w	r8, #2
 800d508:	f1bb 0f00 	cmp.w	fp, #0
 800d50c:	d04a      	beq.n	800d5a4 <__gethex+0x3c4>
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	2b02      	cmp	r3, #2
 800d512:	d016      	beq.n	800d542 <__gethex+0x362>
 800d514:	2b03      	cmp	r3, #3
 800d516:	d018      	beq.n	800d54a <__gethex+0x36a>
 800d518:	2b01      	cmp	r3, #1
 800d51a:	d109      	bne.n	800d530 <__gethex+0x350>
 800d51c:	f01b 0f02 	tst.w	fp, #2
 800d520:	d006      	beq.n	800d530 <__gethex+0x350>
 800d522:	f8da 3000 	ldr.w	r3, [sl]
 800d526:	ea4b 0b03 	orr.w	fp, fp, r3
 800d52a:	f01b 0f01 	tst.w	fp, #1
 800d52e:	d10f      	bne.n	800d550 <__gethex+0x370>
 800d530:	f048 0810 	orr.w	r8, r8, #16
 800d534:	e036      	b.n	800d5a4 <__gethex+0x3c4>
 800d536:	f04f 0b01 	mov.w	fp, #1
 800d53a:	e7d0      	b.n	800d4de <__gethex+0x2fe>
 800d53c:	f04f 0801 	mov.w	r8, #1
 800d540:	e7e2      	b.n	800d508 <__gethex+0x328>
 800d542:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d544:	f1c3 0301 	rsb	r3, r3, #1
 800d548:	930f      	str	r3, [sp, #60]	; 0x3c
 800d54a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d0ef      	beq.n	800d530 <__gethex+0x350>
 800d550:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d554:	f104 0214 	add.w	r2, r4, #20
 800d558:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800d55c:	9301      	str	r3, [sp, #4]
 800d55e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800d562:	2300      	movs	r3, #0
 800d564:	4694      	mov	ip, r2
 800d566:	f852 1b04 	ldr.w	r1, [r2], #4
 800d56a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800d56e:	d01e      	beq.n	800d5ae <__gethex+0x3ce>
 800d570:	3101      	adds	r1, #1
 800d572:	f8cc 1000 	str.w	r1, [ip]
 800d576:	f1b8 0f02 	cmp.w	r8, #2
 800d57a:	f104 0214 	add.w	r2, r4, #20
 800d57e:	d13d      	bne.n	800d5fc <__gethex+0x41c>
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	3b01      	subs	r3, #1
 800d584:	42ab      	cmp	r3, r5
 800d586:	d10b      	bne.n	800d5a0 <__gethex+0x3c0>
 800d588:	1169      	asrs	r1, r5, #5
 800d58a:	2301      	movs	r3, #1
 800d58c:	f005 051f 	and.w	r5, r5, #31
 800d590:	fa03 f505 	lsl.w	r5, r3, r5
 800d594:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d598:	421d      	tst	r5, r3
 800d59a:	bf18      	it	ne
 800d59c:	f04f 0801 	movne.w	r8, #1
 800d5a0:	f048 0820 	orr.w	r8, r8, #32
 800d5a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d5a6:	601c      	str	r4, [r3, #0]
 800d5a8:	9b02      	ldr	r3, [sp, #8]
 800d5aa:	601e      	str	r6, [r3, #0]
 800d5ac:	e6a2      	b.n	800d2f4 <__gethex+0x114>
 800d5ae:	4290      	cmp	r0, r2
 800d5b0:	f842 3c04 	str.w	r3, [r2, #-4]
 800d5b4:	d8d6      	bhi.n	800d564 <__gethex+0x384>
 800d5b6:	68a2      	ldr	r2, [r4, #8]
 800d5b8:	4593      	cmp	fp, r2
 800d5ba:	db17      	blt.n	800d5ec <__gethex+0x40c>
 800d5bc:	6861      	ldr	r1, [r4, #4]
 800d5be:	4648      	mov	r0, r9
 800d5c0:	3101      	adds	r1, #1
 800d5c2:	f7fe f819 	bl	800b5f8 <_Balloc>
 800d5c6:	4682      	mov	sl, r0
 800d5c8:	b918      	cbnz	r0, 800d5d2 <__gethex+0x3f2>
 800d5ca:	4b1b      	ldr	r3, [pc, #108]	; (800d638 <__gethex+0x458>)
 800d5cc:	4602      	mov	r2, r0
 800d5ce:	2184      	movs	r1, #132	; 0x84
 800d5d0:	e6b3      	b.n	800d33a <__gethex+0x15a>
 800d5d2:	6922      	ldr	r2, [r4, #16]
 800d5d4:	3202      	adds	r2, #2
 800d5d6:	f104 010c 	add.w	r1, r4, #12
 800d5da:	0092      	lsls	r2, r2, #2
 800d5dc:	300c      	adds	r0, #12
 800d5de:	f7ff fd4d 	bl	800d07c <memcpy>
 800d5e2:	4621      	mov	r1, r4
 800d5e4:	4648      	mov	r0, r9
 800d5e6:	f7fe f847 	bl	800b678 <_Bfree>
 800d5ea:	4654      	mov	r4, sl
 800d5ec:	6922      	ldr	r2, [r4, #16]
 800d5ee:	1c51      	adds	r1, r2, #1
 800d5f0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d5f4:	6121      	str	r1, [r4, #16]
 800d5f6:	2101      	movs	r1, #1
 800d5f8:	6151      	str	r1, [r2, #20]
 800d5fa:	e7bc      	b.n	800d576 <__gethex+0x396>
 800d5fc:	6921      	ldr	r1, [r4, #16]
 800d5fe:	4559      	cmp	r1, fp
 800d600:	dd0b      	ble.n	800d61a <__gethex+0x43a>
 800d602:	2101      	movs	r1, #1
 800d604:	4620      	mov	r0, r4
 800d606:	f7ff fd83 	bl	800d110 <rshift>
 800d60a:	68bb      	ldr	r3, [r7, #8]
 800d60c:	3601      	adds	r6, #1
 800d60e:	42b3      	cmp	r3, r6
 800d610:	f6ff aedb 	blt.w	800d3ca <__gethex+0x1ea>
 800d614:	f04f 0801 	mov.w	r8, #1
 800d618:	e7c2      	b.n	800d5a0 <__gethex+0x3c0>
 800d61a:	f015 051f 	ands.w	r5, r5, #31
 800d61e:	d0f9      	beq.n	800d614 <__gethex+0x434>
 800d620:	9b01      	ldr	r3, [sp, #4]
 800d622:	441a      	add	r2, r3
 800d624:	f1c5 0520 	rsb	r5, r5, #32
 800d628:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800d62c:	f7fe f8d6 	bl	800b7dc <__hi0bits>
 800d630:	42a8      	cmp	r0, r5
 800d632:	dbe6      	blt.n	800d602 <__gethex+0x422>
 800d634:	e7ee      	b.n	800d614 <__gethex+0x434>
 800d636:	bf00      	nop
 800d638:	0800df01 	.word	0x0800df01

0800d63c <L_shift>:
 800d63c:	f1c2 0208 	rsb	r2, r2, #8
 800d640:	0092      	lsls	r2, r2, #2
 800d642:	b570      	push	{r4, r5, r6, lr}
 800d644:	f1c2 0620 	rsb	r6, r2, #32
 800d648:	6843      	ldr	r3, [r0, #4]
 800d64a:	6804      	ldr	r4, [r0, #0]
 800d64c:	fa03 f506 	lsl.w	r5, r3, r6
 800d650:	432c      	orrs	r4, r5
 800d652:	40d3      	lsrs	r3, r2
 800d654:	6004      	str	r4, [r0, #0]
 800d656:	f840 3f04 	str.w	r3, [r0, #4]!
 800d65a:	4288      	cmp	r0, r1
 800d65c:	d3f4      	bcc.n	800d648 <L_shift+0xc>
 800d65e:	bd70      	pop	{r4, r5, r6, pc}

0800d660 <__match>:
 800d660:	b530      	push	{r4, r5, lr}
 800d662:	6803      	ldr	r3, [r0, #0]
 800d664:	3301      	adds	r3, #1
 800d666:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d66a:	b914      	cbnz	r4, 800d672 <__match+0x12>
 800d66c:	6003      	str	r3, [r0, #0]
 800d66e:	2001      	movs	r0, #1
 800d670:	bd30      	pop	{r4, r5, pc}
 800d672:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d676:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d67a:	2d19      	cmp	r5, #25
 800d67c:	bf98      	it	ls
 800d67e:	3220      	addls	r2, #32
 800d680:	42a2      	cmp	r2, r4
 800d682:	d0f0      	beq.n	800d666 <__match+0x6>
 800d684:	2000      	movs	r0, #0
 800d686:	e7f3      	b.n	800d670 <__match+0x10>

0800d688 <__hexnan>:
 800d688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d68c:	680b      	ldr	r3, [r1, #0]
 800d68e:	6801      	ldr	r1, [r0, #0]
 800d690:	115e      	asrs	r6, r3, #5
 800d692:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d696:	f013 031f 	ands.w	r3, r3, #31
 800d69a:	b087      	sub	sp, #28
 800d69c:	bf18      	it	ne
 800d69e:	3604      	addne	r6, #4
 800d6a0:	2500      	movs	r5, #0
 800d6a2:	1f37      	subs	r7, r6, #4
 800d6a4:	4682      	mov	sl, r0
 800d6a6:	4690      	mov	r8, r2
 800d6a8:	9301      	str	r3, [sp, #4]
 800d6aa:	f846 5c04 	str.w	r5, [r6, #-4]
 800d6ae:	46b9      	mov	r9, r7
 800d6b0:	463c      	mov	r4, r7
 800d6b2:	9502      	str	r5, [sp, #8]
 800d6b4:	46ab      	mov	fp, r5
 800d6b6:	784a      	ldrb	r2, [r1, #1]
 800d6b8:	1c4b      	adds	r3, r1, #1
 800d6ba:	9303      	str	r3, [sp, #12]
 800d6bc:	b342      	cbz	r2, 800d710 <__hexnan+0x88>
 800d6be:	4610      	mov	r0, r2
 800d6c0:	9105      	str	r1, [sp, #20]
 800d6c2:	9204      	str	r2, [sp, #16]
 800d6c4:	f7ff fd76 	bl	800d1b4 <__hexdig_fun>
 800d6c8:	2800      	cmp	r0, #0
 800d6ca:	d14f      	bne.n	800d76c <__hexnan+0xe4>
 800d6cc:	9a04      	ldr	r2, [sp, #16]
 800d6ce:	9905      	ldr	r1, [sp, #20]
 800d6d0:	2a20      	cmp	r2, #32
 800d6d2:	d818      	bhi.n	800d706 <__hexnan+0x7e>
 800d6d4:	9b02      	ldr	r3, [sp, #8]
 800d6d6:	459b      	cmp	fp, r3
 800d6d8:	dd13      	ble.n	800d702 <__hexnan+0x7a>
 800d6da:	454c      	cmp	r4, r9
 800d6dc:	d206      	bcs.n	800d6ec <__hexnan+0x64>
 800d6de:	2d07      	cmp	r5, #7
 800d6e0:	dc04      	bgt.n	800d6ec <__hexnan+0x64>
 800d6e2:	462a      	mov	r2, r5
 800d6e4:	4649      	mov	r1, r9
 800d6e6:	4620      	mov	r0, r4
 800d6e8:	f7ff ffa8 	bl	800d63c <L_shift>
 800d6ec:	4544      	cmp	r4, r8
 800d6ee:	d950      	bls.n	800d792 <__hexnan+0x10a>
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	f1a4 0904 	sub.w	r9, r4, #4
 800d6f6:	f844 3c04 	str.w	r3, [r4, #-4]
 800d6fa:	f8cd b008 	str.w	fp, [sp, #8]
 800d6fe:	464c      	mov	r4, r9
 800d700:	461d      	mov	r5, r3
 800d702:	9903      	ldr	r1, [sp, #12]
 800d704:	e7d7      	b.n	800d6b6 <__hexnan+0x2e>
 800d706:	2a29      	cmp	r2, #41	; 0x29
 800d708:	d155      	bne.n	800d7b6 <__hexnan+0x12e>
 800d70a:	3102      	adds	r1, #2
 800d70c:	f8ca 1000 	str.w	r1, [sl]
 800d710:	f1bb 0f00 	cmp.w	fp, #0
 800d714:	d04f      	beq.n	800d7b6 <__hexnan+0x12e>
 800d716:	454c      	cmp	r4, r9
 800d718:	d206      	bcs.n	800d728 <__hexnan+0xa0>
 800d71a:	2d07      	cmp	r5, #7
 800d71c:	dc04      	bgt.n	800d728 <__hexnan+0xa0>
 800d71e:	462a      	mov	r2, r5
 800d720:	4649      	mov	r1, r9
 800d722:	4620      	mov	r0, r4
 800d724:	f7ff ff8a 	bl	800d63c <L_shift>
 800d728:	4544      	cmp	r4, r8
 800d72a:	d934      	bls.n	800d796 <__hexnan+0x10e>
 800d72c:	f1a8 0204 	sub.w	r2, r8, #4
 800d730:	4623      	mov	r3, r4
 800d732:	f853 1b04 	ldr.w	r1, [r3], #4
 800d736:	f842 1f04 	str.w	r1, [r2, #4]!
 800d73a:	429f      	cmp	r7, r3
 800d73c:	d2f9      	bcs.n	800d732 <__hexnan+0xaa>
 800d73e:	1b3b      	subs	r3, r7, r4
 800d740:	f023 0303 	bic.w	r3, r3, #3
 800d744:	3304      	adds	r3, #4
 800d746:	3e03      	subs	r6, #3
 800d748:	3401      	adds	r4, #1
 800d74a:	42a6      	cmp	r6, r4
 800d74c:	bf38      	it	cc
 800d74e:	2304      	movcc	r3, #4
 800d750:	4443      	add	r3, r8
 800d752:	2200      	movs	r2, #0
 800d754:	f843 2b04 	str.w	r2, [r3], #4
 800d758:	429f      	cmp	r7, r3
 800d75a:	d2fb      	bcs.n	800d754 <__hexnan+0xcc>
 800d75c:	683b      	ldr	r3, [r7, #0]
 800d75e:	b91b      	cbnz	r3, 800d768 <__hexnan+0xe0>
 800d760:	4547      	cmp	r7, r8
 800d762:	d126      	bne.n	800d7b2 <__hexnan+0x12a>
 800d764:	2301      	movs	r3, #1
 800d766:	603b      	str	r3, [r7, #0]
 800d768:	2005      	movs	r0, #5
 800d76a:	e025      	b.n	800d7b8 <__hexnan+0x130>
 800d76c:	3501      	adds	r5, #1
 800d76e:	2d08      	cmp	r5, #8
 800d770:	f10b 0b01 	add.w	fp, fp, #1
 800d774:	dd06      	ble.n	800d784 <__hexnan+0xfc>
 800d776:	4544      	cmp	r4, r8
 800d778:	d9c3      	bls.n	800d702 <__hexnan+0x7a>
 800d77a:	2300      	movs	r3, #0
 800d77c:	f844 3c04 	str.w	r3, [r4, #-4]
 800d780:	2501      	movs	r5, #1
 800d782:	3c04      	subs	r4, #4
 800d784:	6822      	ldr	r2, [r4, #0]
 800d786:	f000 000f 	and.w	r0, r0, #15
 800d78a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d78e:	6020      	str	r0, [r4, #0]
 800d790:	e7b7      	b.n	800d702 <__hexnan+0x7a>
 800d792:	2508      	movs	r5, #8
 800d794:	e7b5      	b.n	800d702 <__hexnan+0x7a>
 800d796:	9b01      	ldr	r3, [sp, #4]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d0df      	beq.n	800d75c <__hexnan+0xd4>
 800d79c:	f1c3 0320 	rsb	r3, r3, #32
 800d7a0:	f04f 32ff 	mov.w	r2, #4294967295
 800d7a4:	40da      	lsrs	r2, r3
 800d7a6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d7aa:	4013      	ands	r3, r2
 800d7ac:	f846 3c04 	str.w	r3, [r6, #-4]
 800d7b0:	e7d4      	b.n	800d75c <__hexnan+0xd4>
 800d7b2:	3f04      	subs	r7, #4
 800d7b4:	e7d2      	b.n	800d75c <__hexnan+0xd4>
 800d7b6:	2004      	movs	r0, #4
 800d7b8:	b007      	add	sp, #28
 800d7ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d7be <__ascii_mbtowc>:
 800d7be:	b082      	sub	sp, #8
 800d7c0:	b901      	cbnz	r1, 800d7c4 <__ascii_mbtowc+0x6>
 800d7c2:	a901      	add	r1, sp, #4
 800d7c4:	b142      	cbz	r2, 800d7d8 <__ascii_mbtowc+0x1a>
 800d7c6:	b14b      	cbz	r3, 800d7dc <__ascii_mbtowc+0x1e>
 800d7c8:	7813      	ldrb	r3, [r2, #0]
 800d7ca:	600b      	str	r3, [r1, #0]
 800d7cc:	7812      	ldrb	r2, [r2, #0]
 800d7ce:	1e10      	subs	r0, r2, #0
 800d7d0:	bf18      	it	ne
 800d7d2:	2001      	movne	r0, #1
 800d7d4:	b002      	add	sp, #8
 800d7d6:	4770      	bx	lr
 800d7d8:	4610      	mov	r0, r2
 800d7da:	e7fb      	b.n	800d7d4 <__ascii_mbtowc+0x16>
 800d7dc:	f06f 0001 	mvn.w	r0, #1
 800d7e0:	e7f8      	b.n	800d7d4 <__ascii_mbtowc+0x16>

0800d7e2 <_realloc_r>:
 800d7e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7e6:	4680      	mov	r8, r0
 800d7e8:	4614      	mov	r4, r2
 800d7ea:	460e      	mov	r6, r1
 800d7ec:	b921      	cbnz	r1, 800d7f8 <_realloc_r+0x16>
 800d7ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d7f2:	4611      	mov	r1, r2
 800d7f4:	f7fd be74 	b.w	800b4e0 <_malloc_r>
 800d7f8:	b92a      	cbnz	r2, 800d806 <_realloc_r+0x24>
 800d7fa:	f7fd fdfd 	bl	800b3f8 <_free_r>
 800d7fe:	4625      	mov	r5, r4
 800d800:	4628      	mov	r0, r5
 800d802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d806:	f000 f842 	bl	800d88e <_malloc_usable_size_r>
 800d80a:	4284      	cmp	r4, r0
 800d80c:	4607      	mov	r7, r0
 800d80e:	d802      	bhi.n	800d816 <_realloc_r+0x34>
 800d810:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d814:	d812      	bhi.n	800d83c <_realloc_r+0x5a>
 800d816:	4621      	mov	r1, r4
 800d818:	4640      	mov	r0, r8
 800d81a:	f7fd fe61 	bl	800b4e0 <_malloc_r>
 800d81e:	4605      	mov	r5, r0
 800d820:	2800      	cmp	r0, #0
 800d822:	d0ed      	beq.n	800d800 <_realloc_r+0x1e>
 800d824:	42bc      	cmp	r4, r7
 800d826:	4622      	mov	r2, r4
 800d828:	4631      	mov	r1, r6
 800d82a:	bf28      	it	cs
 800d82c:	463a      	movcs	r2, r7
 800d82e:	f7ff fc25 	bl	800d07c <memcpy>
 800d832:	4631      	mov	r1, r6
 800d834:	4640      	mov	r0, r8
 800d836:	f7fd fddf 	bl	800b3f8 <_free_r>
 800d83a:	e7e1      	b.n	800d800 <_realloc_r+0x1e>
 800d83c:	4635      	mov	r5, r6
 800d83e:	e7df      	b.n	800d800 <_realloc_r+0x1e>

0800d840 <__ascii_wctomb>:
 800d840:	b149      	cbz	r1, 800d856 <__ascii_wctomb+0x16>
 800d842:	2aff      	cmp	r2, #255	; 0xff
 800d844:	bf85      	ittet	hi
 800d846:	238a      	movhi	r3, #138	; 0x8a
 800d848:	6003      	strhi	r3, [r0, #0]
 800d84a:	700a      	strbls	r2, [r1, #0]
 800d84c:	f04f 30ff 	movhi.w	r0, #4294967295
 800d850:	bf98      	it	ls
 800d852:	2001      	movls	r0, #1
 800d854:	4770      	bx	lr
 800d856:	4608      	mov	r0, r1
 800d858:	4770      	bx	lr
	...

0800d85c <fiprintf>:
 800d85c:	b40e      	push	{r1, r2, r3}
 800d85e:	b503      	push	{r0, r1, lr}
 800d860:	4601      	mov	r1, r0
 800d862:	ab03      	add	r3, sp, #12
 800d864:	4805      	ldr	r0, [pc, #20]	; (800d87c <fiprintf+0x20>)
 800d866:	f853 2b04 	ldr.w	r2, [r3], #4
 800d86a:	6800      	ldr	r0, [r0, #0]
 800d86c:	9301      	str	r3, [sp, #4]
 800d86e:	f000 f83f 	bl	800d8f0 <_vfiprintf_r>
 800d872:	b002      	add	sp, #8
 800d874:	f85d eb04 	ldr.w	lr, [sp], #4
 800d878:	b003      	add	sp, #12
 800d87a:	4770      	bx	lr
 800d87c:	24000068 	.word	0x24000068

0800d880 <abort>:
 800d880:	b508      	push	{r3, lr}
 800d882:	2006      	movs	r0, #6
 800d884:	f000 fa0c 	bl	800dca0 <raise>
 800d888:	2001      	movs	r0, #1
 800d88a:	f7f4 f8cf 	bl	8001a2c <_exit>

0800d88e <_malloc_usable_size_r>:
 800d88e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d892:	1f18      	subs	r0, r3, #4
 800d894:	2b00      	cmp	r3, #0
 800d896:	bfbc      	itt	lt
 800d898:	580b      	ldrlt	r3, [r1, r0]
 800d89a:	18c0      	addlt	r0, r0, r3
 800d89c:	4770      	bx	lr

0800d89e <__sfputc_r>:
 800d89e:	6893      	ldr	r3, [r2, #8]
 800d8a0:	3b01      	subs	r3, #1
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	b410      	push	{r4}
 800d8a6:	6093      	str	r3, [r2, #8]
 800d8a8:	da08      	bge.n	800d8bc <__sfputc_r+0x1e>
 800d8aa:	6994      	ldr	r4, [r2, #24]
 800d8ac:	42a3      	cmp	r3, r4
 800d8ae:	db01      	blt.n	800d8b4 <__sfputc_r+0x16>
 800d8b0:	290a      	cmp	r1, #10
 800d8b2:	d103      	bne.n	800d8bc <__sfputc_r+0x1e>
 800d8b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d8b8:	f000 b934 	b.w	800db24 <__swbuf_r>
 800d8bc:	6813      	ldr	r3, [r2, #0]
 800d8be:	1c58      	adds	r0, r3, #1
 800d8c0:	6010      	str	r0, [r2, #0]
 800d8c2:	7019      	strb	r1, [r3, #0]
 800d8c4:	4608      	mov	r0, r1
 800d8c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d8ca:	4770      	bx	lr

0800d8cc <__sfputs_r>:
 800d8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8ce:	4606      	mov	r6, r0
 800d8d0:	460f      	mov	r7, r1
 800d8d2:	4614      	mov	r4, r2
 800d8d4:	18d5      	adds	r5, r2, r3
 800d8d6:	42ac      	cmp	r4, r5
 800d8d8:	d101      	bne.n	800d8de <__sfputs_r+0x12>
 800d8da:	2000      	movs	r0, #0
 800d8dc:	e007      	b.n	800d8ee <__sfputs_r+0x22>
 800d8de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8e2:	463a      	mov	r2, r7
 800d8e4:	4630      	mov	r0, r6
 800d8e6:	f7ff ffda 	bl	800d89e <__sfputc_r>
 800d8ea:	1c43      	adds	r3, r0, #1
 800d8ec:	d1f3      	bne.n	800d8d6 <__sfputs_r+0xa>
 800d8ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d8f0 <_vfiprintf_r>:
 800d8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8f4:	460d      	mov	r5, r1
 800d8f6:	b09d      	sub	sp, #116	; 0x74
 800d8f8:	4614      	mov	r4, r2
 800d8fa:	4698      	mov	r8, r3
 800d8fc:	4606      	mov	r6, r0
 800d8fe:	b118      	cbz	r0, 800d908 <_vfiprintf_r+0x18>
 800d900:	6a03      	ldr	r3, [r0, #32]
 800d902:	b90b      	cbnz	r3, 800d908 <_vfiprintf_r+0x18>
 800d904:	f7fc fe2e 	bl	800a564 <__sinit>
 800d908:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d90a:	07d9      	lsls	r1, r3, #31
 800d90c:	d405      	bmi.n	800d91a <_vfiprintf_r+0x2a>
 800d90e:	89ab      	ldrh	r3, [r5, #12]
 800d910:	059a      	lsls	r2, r3, #22
 800d912:	d402      	bmi.n	800d91a <_vfiprintf_r+0x2a>
 800d914:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d916:	f7fc ff70 	bl	800a7fa <__retarget_lock_acquire_recursive>
 800d91a:	89ab      	ldrh	r3, [r5, #12]
 800d91c:	071b      	lsls	r3, r3, #28
 800d91e:	d501      	bpl.n	800d924 <_vfiprintf_r+0x34>
 800d920:	692b      	ldr	r3, [r5, #16]
 800d922:	b99b      	cbnz	r3, 800d94c <_vfiprintf_r+0x5c>
 800d924:	4629      	mov	r1, r5
 800d926:	4630      	mov	r0, r6
 800d928:	f000 f93a 	bl	800dba0 <__swsetup_r>
 800d92c:	b170      	cbz	r0, 800d94c <_vfiprintf_r+0x5c>
 800d92e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d930:	07dc      	lsls	r4, r3, #31
 800d932:	d504      	bpl.n	800d93e <_vfiprintf_r+0x4e>
 800d934:	f04f 30ff 	mov.w	r0, #4294967295
 800d938:	b01d      	add	sp, #116	; 0x74
 800d93a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d93e:	89ab      	ldrh	r3, [r5, #12]
 800d940:	0598      	lsls	r0, r3, #22
 800d942:	d4f7      	bmi.n	800d934 <_vfiprintf_r+0x44>
 800d944:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d946:	f7fc ff59 	bl	800a7fc <__retarget_lock_release_recursive>
 800d94a:	e7f3      	b.n	800d934 <_vfiprintf_r+0x44>
 800d94c:	2300      	movs	r3, #0
 800d94e:	9309      	str	r3, [sp, #36]	; 0x24
 800d950:	2320      	movs	r3, #32
 800d952:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d956:	f8cd 800c 	str.w	r8, [sp, #12]
 800d95a:	2330      	movs	r3, #48	; 0x30
 800d95c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800db10 <_vfiprintf_r+0x220>
 800d960:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d964:	f04f 0901 	mov.w	r9, #1
 800d968:	4623      	mov	r3, r4
 800d96a:	469a      	mov	sl, r3
 800d96c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d970:	b10a      	cbz	r2, 800d976 <_vfiprintf_r+0x86>
 800d972:	2a25      	cmp	r2, #37	; 0x25
 800d974:	d1f9      	bne.n	800d96a <_vfiprintf_r+0x7a>
 800d976:	ebba 0b04 	subs.w	fp, sl, r4
 800d97a:	d00b      	beq.n	800d994 <_vfiprintf_r+0xa4>
 800d97c:	465b      	mov	r3, fp
 800d97e:	4622      	mov	r2, r4
 800d980:	4629      	mov	r1, r5
 800d982:	4630      	mov	r0, r6
 800d984:	f7ff ffa2 	bl	800d8cc <__sfputs_r>
 800d988:	3001      	adds	r0, #1
 800d98a:	f000 80a9 	beq.w	800dae0 <_vfiprintf_r+0x1f0>
 800d98e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d990:	445a      	add	r2, fp
 800d992:	9209      	str	r2, [sp, #36]	; 0x24
 800d994:	f89a 3000 	ldrb.w	r3, [sl]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	f000 80a1 	beq.w	800dae0 <_vfiprintf_r+0x1f0>
 800d99e:	2300      	movs	r3, #0
 800d9a0:	f04f 32ff 	mov.w	r2, #4294967295
 800d9a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d9a8:	f10a 0a01 	add.w	sl, sl, #1
 800d9ac:	9304      	str	r3, [sp, #16]
 800d9ae:	9307      	str	r3, [sp, #28]
 800d9b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d9b4:	931a      	str	r3, [sp, #104]	; 0x68
 800d9b6:	4654      	mov	r4, sl
 800d9b8:	2205      	movs	r2, #5
 800d9ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9be:	4854      	ldr	r0, [pc, #336]	; (800db10 <_vfiprintf_r+0x220>)
 800d9c0:	f7f2 fc8e 	bl	80002e0 <memchr>
 800d9c4:	9a04      	ldr	r2, [sp, #16]
 800d9c6:	b9d8      	cbnz	r0, 800da00 <_vfiprintf_r+0x110>
 800d9c8:	06d1      	lsls	r1, r2, #27
 800d9ca:	bf44      	itt	mi
 800d9cc:	2320      	movmi	r3, #32
 800d9ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d9d2:	0713      	lsls	r3, r2, #28
 800d9d4:	bf44      	itt	mi
 800d9d6:	232b      	movmi	r3, #43	; 0x2b
 800d9d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d9dc:	f89a 3000 	ldrb.w	r3, [sl]
 800d9e0:	2b2a      	cmp	r3, #42	; 0x2a
 800d9e2:	d015      	beq.n	800da10 <_vfiprintf_r+0x120>
 800d9e4:	9a07      	ldr	r2, [sp, #28]
 800d9e6:	4654      	mov	r4, sl
 800d9e8:	2000      	movs	r0, #0
 800d9ea:	f04f 0c0a 	mov.w	ip, #10
 800d9ee:	4621      	mov	r1, r4
 800d9f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d9f4:	3b30      	subs	r3, #48	; 0x30
 800d9f6:	2b09      	cmp	r3, #9
 800d9f8:	d94d      	bls.n	800da96 <_vfiprintf_r+0x1a6>
 800d9fa:	b1b0      	cbz	r0, 800da2a <_vfiprintf_r+0x13a>
 800d9fc:	9207      	str	r2, [sp, #28]
 800d9fe:	e014      	b.n	800da2a <_vfiprintf_r+0x13a>
 800da00:	eba0 0308 	sub.w	r3, r0, r8
 800da04:	fa09 f303 	lsl.w	r3, r9, r3
 800da08:	4313      	orrs	r3, r2
 800da0a:	9304      	str	r3, [sp, #16]
 800da0c:	46a2      	mov	sl, r4
 800da0e:	e7d2      	b.n	800d9b6 <_vfiprintf_r+0xc6>
 800da10:	9b03      	ldr	r3, [sp, #12]
 800da12:	1d19      	adds	r1, r3, #4
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	9103      	str	r1, [sp, #12]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	bfbb      	ittet	lt
 800da1c:	425b      	neglt	r3, r3
 800da1e:	f042 0202 	orrlt.w	r2, r2, #2
 800da22:	9307      	strge	r3, [sp, #28]
 800da24:	9307      	strlt	r3, [sp, #28]
 800da26:	bfb8      	it	lt
 800da28:	9204      	strlt	r2, [sp, #16]
 800da2a:	7823      	ldrb	r3, [r4, #0]
 800da2c:	2b2e      	cmp	r3, #46	; 0x2e
 800da2e:	d10c      	bne.n	800da4a <_vfiprintf_r+0x15a>
 800da30:	7863      	ldrb	r3, [r4, #1]
 800da32:	2b2a      	cmp	r3, #42	; 0x2a
 800da34:	d134      	bne.n	800daa0 <_vfiprintf_r+0x1b0>
 800da36:	9b03      	ldr	r3, [sp, #12]
 800da38:	1d1a      	adds	r2, r3, #4
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	9203      	str	r2, [sp, #12]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	bfb8      	it	lt
 800da42:	f04f 33ff 	movlt.w	r3, #4294967295
 800da46:	3402      	adds	r4, #2
 800da48:	9305      	str	r3, [sp, #20]
 800da4a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800db20 <_vfiprintf_r+0x230>
 800da4e:	7821      	ldrb	r1, [r4, #0]
 800da50:	2203      	movs	r2, #3
 800da52:	4650      	mov	r0, sl
 800da54:	f7f2 fc44 	bl	80002e0 <memchr>
 800da58:	b138      	cbz	r0, 800da6a <_vfiprintf_r+0x17a>
 800da5a:	9b04      	ldr	r3, [sp, #16]
 800da5c:	eba0 000a 	sub.w	r0, r0, sl
 800da60:	2240      	movs	r2, #64	; 0x40
 800da62:	4082      	lsls	r2, r0
 800da64:	4313      	orrs	r3, r2
 800da66:	3401      	adds	r4, #1
 800da68:	9304      	str	r3, [sp, #16]
 800da6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da6e:	4829      	ldr	r0, [pc, #164]	; (800db14 <_vfiprintf_r+0x224>)
 800da70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800da74:	2206      	movs	r2, #6
 800da76:	f7f2 fc33 	bl	80002e0 <memchr>
 800da7a:	2800      	cmp	r0, #0
 800da7c:	d03f      	beq.n	800dafe <_vfiprintf_r+0x20e>
 800da7e:	4b26      	ldr	r3, [pc, #152]	; (800db18 <_vfiprintf_r+0x228>)
 800da80:	bb1b      	cbnz	r3, 800daca <_vfiprintf_r+0x1da>
 800da82:	9b03      	ldr	r3, [sp, #12]
 800da84:	3307      	adds	r3, #7
 800da86:	f023 0307 	bic.w	r3, r3, #7
 800da8a:	3308      	adds	r3, #8
 800da8c:	9303      	str	r3, [sp, #12]
 800da8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da90:	443b      	add	r3, r7
 800da92:	9309      	str	r3, [sp, #36]	; 0x24
 800da94:	e768      	b.n	800d968 <_vfiprintf_r+0x78>
 800da96:	fb0c 3202 	mla	r2, ip, r2, r3
 800da9a:	460c      	mov	r4, r1
 800da9c:	2001      	movs	r0, #1
 800da9e:	e7a6      	b.n	800d9ee <_vfiprintf_r+0xfe>
 800daa0:	2300      	movs	r3, #0
 800daa2:	3401      	adds	r4, #1
 800daa4:	9305      	str	r3, [sp, #20]
 800daa6:	4619      	mov	r1, r3
 800daa8:	f04f 0c0a 	mov.w	ip, #10
 800daac:	4620      	mov	r0, r4
 800daae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dab2:	3a30      	subs	r2, #48	; 0x30
 800dab4:	2a09      	cmp	r2, #9
 800dab6:	d903      	bls.n	800dac0 <_vfiprintf_r+0x1d0>
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d0c6      	beq.n	800da4a <_vfiprintf_r+0x15a>
 800dabc:	9105      	str	r1, [sp, #20]
 800dabe:	e7c4      	b.n	800da4a <_vfiprintf_r+0x15a>
 800dac0:	fb0c 2101 	mla	r1, ip, r1, r2
 800dac4:	4604      	mov	r4, r0
 800dac6:	2301      	movs	r3, #1
 800dac8:	e7f0      	b.n	800daac <_vfiprintf_r+0x1bc>
 800daca:	ab03      	add	r3, sp, #12
 800dacc:	9300      	str	r3, [sp, #0]
 800dace:	462a      	mov	r2, r5
 800dad0:	4b12      	ldr	r3, [pc, #72]	; (800db1c <_vfiprintf_r+0x22c>)
 800dad2:	a904      	add	r1, sp, #16
 800dad4:	4630      	mov	r0, r6
 800dad6:	f7fb ff0b 	bl	80098f0 <_printf_float>
 800dada:	4607      	mov	r7, r0
 800dadc:	1c78      	adds	r0, r7, #1
 800dade:	d1d6      	bne.n	800da8e <_vfiprintf_r+0x19e>
 800dae0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dae2:	07d9      	lsls	r1, r3, #31
 800dae4:	d405      	bmi.n	800daf2 <_vfiprintf_r+0x202>
 800dae6:	89ab      	ldrh	r3, [r5, #12]
 800dae8:	059a      	lsls	r2, r3, #22
 800daea:	d402      	bmi.n	800daf2 <_vfiprintf_r+0x202>
 800daec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800daee:	f7fc fe85 	bl	800a7fc <__retarget_lock_release_recursive>
 800daf2:	89ab      	ldrh	r3, [r5, #12]
 800daf4:	065b      	lsls	r3, r3, #25
 800daf6:	f53f af1d 	bmi.w	800d934 <_vfiprintf_r+0x44>
 800dafa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dafc:	e71c      	b.n	800d938 <_vfiprintf_r+0x48>
 800dafe:	ab03      	add	r3, sp, #12
 800db00:	9300      	str	r3, [sp, #0]
 800db02:	462a      	mov	r2, r5
 800db04:	4b05      	ldr	r3, [pc, #20]	; (800db1c <_vfiprintf_r+0x22c>)
 800db06:	a904      	add	r1, sp, #16
 800db08:	4630      	mov	r0, r6
 800db0a:	f7fc f979 	bl	8009e00 <_printf_i>
 800db0e:	e7e4      	b.n	800dada <_vfiprintf_r+0x1ea>
 800db10:	0800e1c1 	.word	0x0800e1c1
 800db14:	0800e1cb 	.word	0x0800e1cb
 800db18:	080098f1 	.word	0x080098f1
 800db1c:	0800d8cd 	.word	0x0800d8cd
 800db20:	0800e1c7 	.word	0x0800e1c7

0800db24 <__swbuf_r>:
 800db24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db26:	460e      	mov	r6, r1
 800db28:	4614      	mov	r4, r2
 800db2a:	4605      	mov	r5, r0
 800db2c:	b118      	cbz	r0, 800db36 <__swbuf_r+0x12>
 800db2e:	6a03      	ldr	r3, [r0, #32]
 800db30:	b90b      	cbnz	r3, 800db36 <__swbuf_r+0x12>
 800db32:	f7fc fd17 	bl	800a564 <__sinit>
 800db36:	69a3      	ldr	r3, [r4, #24]
 800db38:	60a3      	str	r3, [r4, #8]
 800db3a:	89a3      	ldrh	r3, [r4, #12]
 800db3c:	071a      	lsls	r2, r3, #28
 800db3e:	d525      	bpl.n	800db8c <__swbuf_r+0x68>
 800db40:	6923      	ldr	r3, [r4, #16]
 800db42:	b31b      	cbz	r3, 800db8c <__swbuf_r+0x68>
 800db44:	6823      	ldr	r3, [r4, #0]
 800db46:	6922      	ldr	r2, [r4, #16]
 800db48:	1a98      	subs	r0, r3, r2
 800db4a:	6963      	ldr	r3, [r4, #20]
 800db4c:	b2f6      	uxtb	r6, r6
 800db4e:	4283      	cmp	r3, r0
 800db50:	4637      	mov	r7, r6
 800db52:	dc04      	bgt.n	800db5e <__swbuf_r+0x3a>
 800db54:	4621      	mov	r1, r4
 800db56:	4628      	mov	r0, r5
 800db58:	f7ff fa2c 	bl	800cfb4 <_fflush_r>
 800db5c:	b9e0      	cbnz	r0, 800db98 <__swbuf_r+0x74>
 800db5e:	68a3      	ldr	r3, [r4, #8]
 800db60:	3b01      	subs	r3, #1
 800db62:	60a3      	str	r3, [r4, #8]
 800db64:	6823      	ldr	r3, [r4, #0]
 800db66:	1c5a      	adds	r2, r3, #1
 800db68:	6022      	str	r2, [r4, #0]
 800db6a:	701e      	strb	r6, [r3, #0]
 800db6c:	6962      	ldr	r2, [r4, #20]
 800db6e:	1c43      	adds	r3, r0, #1
 800db70:	429a      	cmp	r2, r3
 800db72:	d004      	beq.n	800db7e <__swbuf_r+0x5a>
 800db74:	89a3      	ldrh	r3, [r4, #12]
 800db76:	07db      	lsls	r3, r3, #31
 800db78:	d506      	bpl.n	800db88 <__swbuf_r+0x64>
 800db7a:	2e0a      	cmp	r6, #10
 800db7c:	d104      	bne.n	800db88 <__swbuf_r+0x64>
 800db7e:	4621      	mov	r1, r4
 800db80:	4628      	mov	r0, r5
 800db82:	f7ff fa17 	bl	800cfb4 <_fflush_r>
 800db86:	b938      	cbnz	r0, 800db98 <__swbuf_r+0x74>
 800db88:	4638      	mov	r0, r7
 800db8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db8c:	4621      	mov	r1, r4
 800db8e:	4628      	mov	r0, r5
 800db90:	f000 f806 	bl	800dba0 <__swsetup_r>
 800db94:	2800      	cmp	r0, #0
 800db96:	d0d5      	beq.n	800db44 <__swbuf_r+0x20>
 800db98:	f04f 37ff 	mov.w	r7, #4294967295
 800db9c:	e7f4      	b.n	800db88 <__swbuf_r+0x64>
	...

0800dba0 <__swsetup_r>:
 800dba0:	b538      	push	{r3, r4, r5, lr}
 800dba2:	4b2a      	ldr	r3, [pc, #168]	; (800dc4c <__swsetup_r+0xac>)
 800dba4:	4605      	mov	r5, r0
 800dba6:	6818      	ldr	r0, [r3, #0]
 800dba8:	460c      	mov	r4, r1
 800dbaa:	b118      	cbz	r0, 800dbb4 <__swsetup_r+0x14>
 800dbac:	6a03      	ldr	r3, [r0, #32]
 800dbae:	b90b      	cbnz	r3, 800dbb4 <__swsetup_r+0x14>
 800dbb0:	f7fc fcd8 	bl	800a564 <__sinit>
 800dbb4:	89a3      	ldrh	r3, [r4, #12]
 800dbb6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dbba:	0718      	lsls	r0, r3, #28
 800dbbc:	d422      	bmi.n	800dc04 <__swsetup_r+0x64>
 800dbbe:	06d9      	lsls	r1, r3, #27
 800dbc0:	d407      	bmi.n	800dbd2 <__swsetup_r+0x32>
 800dbc2:	2309      	movs	r3, #9
 800dbc4:	602b      	str	r3, [r5, #0]
 800dbc6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dbca:	81a3      	strh	r3, [r4, #12]
 800dbcc:	f04f 30ff 	mov.w	r0, #4294967295
 800dbd0:	e034      	b.n	800dc3c <__swsetup_r+0x9c>
 800dbd2:	0758      	lsls	r0, r3, #29
 800dbd4:	d512      	bpl.n	800dbfc <__swsetup_r+0x5c>
 800dbd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dbd8:	b141      	cbz	r1, 800dbec <__swsetup_r+0x4c>
 800dbda:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dbde:	4299      	cmp	r1, r3
 800dbe0:	d002      	beq.n	800dbe8 <__swsetup_r+0x48>
 800dbe2:	4628      	mov	r0, r5
 800dbe4:	f7fd fc08 	bl	800b3f8 <_free_r>
 800dbe8:	2300      	movs	r3, #0
 800dbea:	6363      	str	r3, [r4, #52]	; 0x34
 800dbec:	89a3      	ldrh	r3, [r4, #12]
 800dbee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dbf2:	81a3      	strh	r3, [r4, #12]
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	6063      	str	r3, [r4, #4]
 800dbf8:	6923      	ldr	r3, [r4, #16]
 800dbfa:	6023      	str	r3, [r4, #0]
 800dbfc:	89a3      	ldrh	r3, [r4, #12]
 800dbfe:	f043 0308 	orr.w	r3, r3, #8
 800dc02:	81a3      	strh	r3, [r4, #12]
 800dc04:	6923      	ldr	r3, [r4, #16]
 800dc06:	b94b      	cbnz	r3, 800dc1c <__swsetup_r+0x7c>
 800dc08:	89a3      	ldrh	r3, [r4, #12]
 800dc0a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dc0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dc12:	d003      	beq.n	800dc1c <__swsetup_r+0x7c>
 800dc14:	4621      	mov	r1, r4
 800dc16:	4628      	mov	r0, r5
 800dc18:	f000 f884 	bl	800dd24 <__smakebuf_r>
 800dc1c:	89a0      	ldrh	r0, [r4, #12]
 800dc1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dc22:	f010 0301 	ands.w	r3, r0, #1
 800dc26:	d00a      	beq.n	800dc3e <__swsetup_r+0x9e>
 800dc28:	2300      	movs	r3, #0
 800dc2a:	60a3      	str	r3, [r4, #8]
 800dc2c:	6963      	ldr	r3, [r4, #20]
 800dc2e:	425b      	negs	r3, r3
 800dc30:	61a3      	str	r3, [r4, #24]
 800dc32:	6923      	ldr	r3, [r4, #16]
 800dc34:	b943      	cbnz	r3, 800dc48 <__swsetup_r+0xa8>
 800dc36:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dc3a:	d1c4      	bne.n	800dbc6 <__swsetup_r+0x26>
 800dc3c:	bd38      	pop	{r3, r4, r5, pc}
 800dc3e:	0781      	lsls	r1, r0, #30
 800dc40:	bf58      	it	pl
 800dc42:	6963      	ldrpl	r3, [r4, #20]
 800dc44:	60a3      	str	r3, [r4, #8]
 800dc46:	e7f4      	b.n	800dc32 <__swsetup_r+0x92>
 800dc48:	2000      	movs	r0, #0
 800dc4a:	e7f7      	b.n	800dc3c <__swsetup_r+0x9c>
 800dc4c:	24000068 	.word	0x24000068

0800dc50 <_raise_r>:
 800dc50:	291f      	cmp	r1, #31
 800dc52:	b538      	push	{r3, r4, r5, lr}
 800dc54:	4604      	mov	r4, r0
 800dc56:	460d      	mov	r5, r1
 800dc58:	d904      	bls.n	800dc64 <_raise_r+0x14>
 800dc5a:	2316      	movs	r3, #22
 800dc5c:	6003      	str	r3, [r0, #0]
 800dc5e:	f04f 30ff 	mov.w	r0, #4294967295
 800dc62:	bd38      	pop	{r3, r4, r5, pc}
 800dc64:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800dc66:	b112      	cbz	r2, 800dc6e <_raise_r+0x1e>
 800dc68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dc6c:	b94b      	cbnz	r3, 800dc82 <_raise_r+0x32>
 800dc6e:	4620      	mov	r0, r4
 800dc70:	f000 f830 	bl	800dcd4 <_getpid_r>
 800dc74:	462a      	mov	r2, r5
 800dc76:	4601      	mov	r1, r0
 800dc78:	4620      	mov	r0, r4
 800dc7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc7e:	f000 b817 	b.w	800dcb0 <_kill_r>
 800dc82:	2b01      	cmp	r3, #1
 800dc84:	d00a      	beq.n	800dc9c <_raise_r+0x4c>
 800dc86:	1c59      	adds	r1, r3, #1
 800dc88:	d103      	bne.n	800dc92 <_raise_r+0x42>
 800dc8a:	2316      	movs	r3, #22
 800dc8c:	6003      	str	r3, [r0, #0]
 800dc8e:	2001      	movs	r0, #1
 800dc90:	e7e7      	b.n	800dc62 <_raise_r+0x12>
 800dc92:	2400      	movs	r4, #0
 800dc94:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dc98:	4628      	mov	r0, r5
 800dc9a:	4798      	blx	r3
 800dc9c:	2000      	movs	r0, #0
 800dc9e:	e7e0      	b.n	800dc62 <_raise_r+0x12>

0800dca0 <raise>:
 800dca0:	4b02      	ldr	r3, [pc, #8]	; (800dcac <raise+0xc>)
 800dca2:	4601      	mov	r1, r0
 800dca4:	6818      	ldr	r0, [r3, #0]
 800dca6:	f7ff bfd3 	b.w	800dc50 <_raise_r>
 800dcaa:	bf00      	nop
 800dcac:	24000068 	.word	0x24000068

0800dcb0 <_kill_r>:
 800dcb0:	b538      	push	{r3, r4, r5, lr}
 800dcb2:	4d07      	ldr	r5, [pc, #28]	; (800dcd0 <_kill_r+0x20>)
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	4604      	mov	r4, r0
 800dcb8:	4608      	mov	r0, r1
 800dcba:	4611      	mov	r1, r2
 800dcbc:	602b      	str	r3, [r5, #0]
 800dcbe:	f7f3 fea5 	bl	8001a0c <_kill>
 800dcc2:	1c43      	adds	r3, r0, #1
 800dcc4:	d102      	bne.n	800dccc <_kill_r+0x1c>
 800dcc6:	682b      	ldr	r3, [r5, #0]
 800dcc8:	b103      	cbz	r3, 800dccc <_kill_r+0x1c>
 800dcca:	6023      	str	r3, [r4, #0]
 800dccc:	bd38      	pop	{r3, r4, r5, pc}
 800dcce:	bf00      	nop
 800dcd0:	24000b88 	.word	0x24000b88

0800dcd4 <_getpid_r>:
 800dcd4:	f7f3 be92 	b.w	80019fc <_getpid>

0800dcd8 <__swhatbuf_r>:
 800dcd8:	b570      	push	{r4, r5, r6, lr}
 800dcda:	460c      	mov	r4, r1
 800dcdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dce0:	2900      	cmp	r1, #0
 800dce2:	b096      	sub	sp, #88	; 0x58
 800dce4:	4615      	mov	r5, r2
 800dce6:	461e      	mov	r6, r3
 800dce8:	da0d      	bge.n	800dd06 <__swhatbuf_r+0x2e>
 800dcea:	89a3      	ldrh	r3, [r4, #12]
 800dcec:	f013 0f80 	tst.w	r3, #128	; 0x80
 800dcf0:	f04f 0100 	mov.w	r1, #0
 800dcf4:	bf0c      	ite	eq
 800dcf6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800dcfa:	2340      	movne	r3, #64	; 0x40
 800dcfc:	2000      	movs	r0, #0
 800dcfe:	6031      	str	r1, [r6, #0]
 800dd00:	602b      	str	r3, [r5, #0]
 800dd02:	b016      	add	sp, #88	; 0x58
 800dd04:	bd70      	pop	{r4, r5, r6, pc}
 800dd06:	466a      	mov	r2, sp
 800dd08:	f000 f848 	bl	800dd9c <_fstat_r>
 800dd0c:	2800      	cmp	r0, #0
 800dd0e:	dbec      	blt.n	800dcea <__swhatbuf_r+0x12>
 800dd10:	9901      	ldr	r1, [sp, #4]
 800dd12:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800dd16:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800dd1a:	4259      	negs	r1, r3
 800dd1c:	4159      	adcs	r1, r3
 800dd1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dd22:	e7eb      	b.n	800dcfc <__swhatbuf_r+0x24>

0800dd24 <__smakebuf_r>:
 800dd24:	898b      	ldrh	r3, [r1, #12]
 800dd26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dd28:	079d      	lsls	r5, r3, #30
 800dd2a:	4606      	mov	r6, r0
 800dd2c:	460c      	mov	r4, r1
 800dd2e:	d507      	bpl.n	800dd40 <__smakebuf_r+0x1c>
 800dd30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dd34:	6023      	str	r3, [r4, #0]
 800dd36:	6123      	str	r3, [r4, #16]
 800dd38:	2301      	movs	r3, #1
 800dd3a:	6163      	str	r3, [r4, #20]
 800dd3c:	b002      	add	sp, #8
 800dd3e:	bd70      	pop	{r4, r5, r6, pc}
 800dd40:	ab01      	add	r3, sp, #4
 800dd42:	466a      	mov	r2, sp
 800dd44:	f7ff ffc8 	bl	800dcd8 <__swhatbuf_r>
 800dd48:	9900      	ldr	r1, [sp, #0]
 800dd4a:	4605      	mov	r5, r0
 800dd4c:	4630      	mov	r0, r6
 800dd4e:	f7fd fbc7 	bl	800b4e0 <_malloc_r>
 800dd52:	b948      	cbnz	r0, 800dd68 <__smakebuf_r+0x44>
 800dd54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd58:	059a      	lsls	r2, r3, #22
 800dd5a:	d4ef      	bmi.n	800dd3c <__smakebuf_r+0x18>
 800dd5c:	f023 0303 	bic.w	r3, r3, #3
 800dd60:	f043 0302 	orr.w	r3, r3, #2
 800dd64:	81a3      	strh	r3, [r4, #12]
 800dd66:	e7e3      	b.n	800dd30 <__smakebuf_r+0xc>
 800dd68:	89a3      	ldrh	r3, [r4, #12]
 800dd6a:	6020      	str	r0, [r4, #0]
 800dd6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd70:	81a3      	strh	r3, [r4, #12]
 800dd72:	9b00      	ldr	r3, [sp, #0]
 800dd74:	6163      	str	r3, [r4, #20]
 800dd76:	9b01      	ldr	r3, [sp, #4]
 800dd78:	6120      	str	r0, [r4, #16]
 800dd7a:	b15b      	cbz	r3, 800dd94 <__smakebuf_r+0x70>
 800dd7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dd80:	4630      	mov	r0, r6
 800dd82:	f000 f81d 	bl	800ddc0 <_isatty_r>
 800dd86:	b128      	cbz	r0, 800dd94 <__smakebuf_r+0x70>
 800dd88:	89a3      	ldrh	r3, [r4, #12]
 800dd8a:	f023 0303 	bic.w	r3, r3, #3
 800dd8e:	f043 0301 	orr.w	r3, r3, #1
 800dd92:	81a3      	strh	r3, [r4, #12]
 800dd94:	89a3      	ldrh	r3, [r4, #12]
 800dd96:	431d      	orrs	r5, r3
 800dd98:	81a5      	strh	r5, [r4, #12]
 800dd9a:	e7cf      	b.n	800dd3c <__smakebuf_r+0x18>

0800dd9c <_fstat_r>:
 800dd9c:	b538      	push	{r3, r4, r5, lr}
 800dd9e:	4d07      	ldr	r5, [pc, #28]	; (800ddbc <_fstat_r+0x20>)
 800dda0:	2300      	movs	r3, #0
 800dda2:	4604      	mov	r4, r0
 800dda4:	4608      	mov	r0, r1
 800dda6:	4611      	mov	r1, r2
 800dda8:	602b      	str	r3, [r5, #0]
 800ddaa:	f7f3 fe8e 	bl	8001aca <_fstat>
 800ddae:	1c43      	adds	r3, r0, #1
 800ddb0:	d102      	bne.n	800ddb8 <_fstat_r+0x1c>
 800ddb2:	682b      	ldr	r3, [r5, #0]
 800ddb4:	b103      	cbz	r3, 800ddb8 <_fstat_r+0x1c>
 800ddb6:	6023      	str	r3, [r4, #0]
 800ddb8:	bd38      	pop	{r3, r4, r5, pc}
 800ddba:	bf00      	nop
 800ddbc:	24000b88 	.word	0x24000b88

0800ddc0 <_isatty_r>:
 800ddc0:	b538      	push	{r3, r4, r5, lr}
 800ddc2:	4d06      	ldr	r5, [pc, #24]	; (800dddc <_isatty_r+0x1c>)
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	4604      	mov	r4, r0
 800ddc8:	4608      	mov	r0, r1
 800ddca:	602b      	str	r3, [r5, #0]
 800ddcc:	f7f3 fe8d 	bl	8001aea <_isatty>
 800ddd0:	1c43      	adds	r3, r0, #1
 800ddd2:	d102      	bne.n	800ddda <_isatty_r+0x1a>
 800ddd4:	682b      	ldr	r3, [r5, #0]
 800ddd6:	b103      	cbz	r3, 800ddda <_isatty_r+0x1a>
 800ddd8:	6023      	str	r3, [r4, #0]
 800ddda:	bd38      	pop	{r3, r4, r5, pc}
 800dddc:	24000b88 	.word	0x24000b88

0800dde0 <_init>:
 800dde0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dde2:	bf00      	nop
 800dde4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dde6:	bc08      	pop	{r3}
 800dde8:	469e      	mov	lr, r3
 800ddea:	4770      	bx	lr

0800ddec <_fini>:
 800ddec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddee:	bf00      	nop
 800ddf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddf2:	bc08      	pop	{r3}
 800ddf4:	469e      	mov	lr, r3
 800ddf6:	4770      	bx	lr
