
Ultrasonico_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c548  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  0800c7e8  0800c7e8  0001c7e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c904  0800c904  00020124  2**0
                  CONTENTS
  4 .ARM          00000008  0800c904  0800c904  0001c904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c90c  0800c90c  00020124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c90c  0800c90c  0001c90c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c910  0800c910  0001c910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  24000000  0800c914  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000064  0800c978  00020064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000c4  0800c9d8  000200c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000052a8  24000124  0800ca38  00020124  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  240053cc  0800ca38  000253cc  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00020152  2**0
                  CONTENTS, READONLY
 15 .debug_info   0002b4ca  00000000  00000000  00020195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00004b7c  00000000  00000000  0004b65f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001ef0  00000000  00000000  000501e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001815  00000000  00000000  000520d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003da94  00000000  00000000  000538e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000275c4  00000000  00000000  00091379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001972fe  00000000  00000000  000b893d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000089f4  00000000  00000000  0024fc3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006b  00000000  00000000  00258630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000124 	.word	0x24000124
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c7d0 	.word	0x0800c7d0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000128 	.word	0x24000128
 80002dc:	0800c7d0 	.word	0x0800c7d0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b970 	b.w	8000678 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	460d      	mov	r5, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	460f      	mov	r7, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4694      	mov	ip, r2
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0xe2>
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	b143      	cbz	r3, 80003de <__udivmoddi4+0x2e>
 80003cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003d0:	f1c3 0220 	rsb	r2, r3, #32
 80003d4:	409f      	lsls	r7, r3
 80003d6:	fa20 f202 	lsr.w	r2, r0, r2
 80003da:	4317      	orrs	r7, r2
 80003dc:	409c      	lsls	r4, r3
 80003de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003e2:	fa1f f58c 	uxth.w	r5, ip
 80003e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003ea:	0c22      	lsrs	r2, r4, #16
 80003ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80003f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003f4:	fb01 f005 	mul.w	r0, r1, r5
 80003f8:	4290      	cmp	r0, r2
 80003fa:	d90a      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000400:	f101 37ff 	add.w	r7, r1, #4294967295
 8000404:	f080 811c 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000408:	4290      	cmp	r0, r2
 800040a:	f240 8119 	bls.w	8000640 <__udivmoddi4+0x290>
 800040e:	3902      	subs	r1, #2
 8000410:	4462      	add	r2, ip
 8000412:	1a12      	subs	r2, r2, r0
 8000414:	b2a4      	uxth	r4, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000422:	fb00 f505 	mul.w	r5, r0, r5
 8000426:	42a5      	cmp	r5, r4
 8000428:	d90a      	bls.n	8000440 <__udivmoddi4+0x90>
 800042a:	eb1c 0404 	adds.w	r4, ip, r4
 800042e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000432:	f080 8107 	bcs.w	8000644 <__udivmoddi4+0x294>
 8000436:	42a5      	cmp	r5, r4
 8000438:	f240 8104 	bls.w	8000644 <__udivmoddi4+0x294>
 800043c:	4464      	add	r4, ip
 800043e:	3802      	subs	r0, #2
 8000440:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000444:	1b64      	subs	r4, r4, r5
 8000446:	2100      	movs	r1, #0
 8000448:	b11e      	cbz	r6, 8000452 <__udivmoddi4+0xa2>
 800044a:	40dc      	lsrs	r4, r3
 800044c:	2300      	movs	r3, #0
 800044e:	e9c6 4300 	strd	r4, r3, [r6]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0xbc>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80ed 	beq.w	800063a <__udivmoddi4+0x28a>
 8000460:	2100      	movs	r1, #0
 8000462:	e9c6 0500 	strd	r0, r5, [r6]
 8000466:	4608      	mov	r0, r1
 8000468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046c:	fab3 f183 	clz	r1, r3
 8000470:	2900      	cmp	r1, #0
 8000472:	d149      	bne.n	8000508 <__udivmoddi4+0x158>
 8000474:	42ab      	cmp	r3, r5
 8000476:	d302      	bcc.n	800047e <__udivmoddi4+0xce>
 8000478:	4282      	cmp	r2, r0
 800047a:	f200 80f8 	bhi.w	800066e <__udivmoddi4+0x2be>
 800047e:	1a84      	subs	r4, r0, r2
 8000480:	eb65 0203 	sbc.w	r2, r5, r3
 8000484:	2001      	movs	r0, #1
 8000486:	4617      	mov	r7, r2
 8000488:	2e00      	cmp	r6, #0
 800048a:	d0e2      	beq.n	8000452 <__udivmoddi4+0xa2>
 800048c:	e9c6 4700 	strd	r4, r7, [r6]
 8000490:	e7df      	b.n	8000452 <__udivmoddi4+0xa2>
 8000492:	b902      	cbnz	r2, 8000496 <__udivmoddi4+0xe6>
 8000494:	deff      	udf	#255	; 0xff
 8000496:	fab2 f382 	clz	r3, r2
 800049a:	2b00      	cmp	r3, #0
 800049c:	f040 8090 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a0:	1a8a      	subs	r2, r1, r2
 80004a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a6:	fa1f fe8c 	uxth.w	lr, ip
 80004aa:	2101      	movs	r1, #1
 80004ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80004b0:	fb07 2015 	mls	r0, r7, r5, r2
 80004b4:	0c22      	lsrs	r2, r4, #16
 80004b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ba:	fb0e f005 	mul.w	r0, lr, r5
 80004be:	4290      	cmp	r0, r2
 80004c0:	d908      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c2:	eb1c 0202 	adds.w	r2, ip, r2
 80004c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4290      	cmp	r0, r2
 80004ce:	f200 80cb 	bhi.w	8000668 <__udivmoddi4+0x2b8>
 80004d2:	4645      	mov	r5, r8
 80004d4:	1a12      	subs	r2, r2, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004dc:	fb07 2210 	mls	r2, r7, r0, r2
 80004e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004e4:	fb0e fe00 	mul.w	lr, lr, r0
 80004e8:	45a6      	cmp	lr, r4
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x14e>
 80004ec:	eb1c 0404 	adds.w	r4, ip, r4
 80004f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80004f4:	d202      	bcs.n	80004fc <__udivmoddi4+0x14c>
 80004f6:	45a6      	cmp	lr, r4
 80004f8:	f200 80bb 	bhi.w	8000672 <__udivmoddi4+0x2c2>
 80004fc:	4610      	mov	r0, r2
 80004fe:	eba4 040e 	sub.w	r4, r4, lr
 8000502:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000506:	e79f      	b.n	8000448 <__udivmoddi4+0x98>
 8000508:	f1c1 0720 	rsb	r7, r1, #32
 800050c:	408b      	lsls	r3, r1
 800050e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000512:	ea4c 0c03 	orr.w	ip, ip, r3
 8000516:	fa05 f401 	lsl.w	r4, r5, r1
 800051a:	fa20 f307 	lsr.w	r3, r0, r7
 800051e:	40fd      	lsrs	r5, r7
 8000520:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000524:	4323      	orrs	r3, r4
 8000526:	fbb5 f8f9 	udiv	r8, r5, r9
 800052a:	fa1f fe8c 	uxth.w	lr, ip
 800052e:	fb09 5518 	mls	r5, r9, r8, r5
 8000532:	0c1c      	lsrs	r4, r3, #16
 8000534:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000538:	fb08 f50e 	mul.w	r5, r8, lr
 800053c:	42a5      	cmp	r5, r4
 800053e:	fa02 f201 	lsl.w	r2, r2, r1
 8000542:	fa00 f001 	lsl.w	r0, r0, r1
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1c 0404 	adds.w	r4, ip, r4
 800054c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000550:	f080 8088 	bcs.w	8000664 <__udivmoddi4+0x2b4>
 8000554:	42a5      	cmp	r5, r4
 8000556:	f240 8085 	bls.w	8000664 <__udivmoddi4+0x2b4>
 800055a:	f1a8 0802 	sub.w	r8, r8, #2
 800055e:	4464      	add	r4, ip
 8000560:	1b64      	subs	r4, r4, r5
 8000562:	b29d      	uxth	r5, r3
 8000564:	fbb4 f3f9 	udiv	r3, r4, r9
 8000568:	fb09 4413 	mls	r4, r9, r3, r4
 800056c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000570:	fb03 fe0e 	mul.w	lr, r3, lr
 8000574:	45a6      	cmp	lr, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000580:	d26c      	bcs.n	800065c <__udivmoddi4+0x2ac>
 8000582:	45a6      	cmp	lr, r4
 8000584:	d96a      	bls.n	800065c <__udivmoddi4+0x2ac>
 8000586:	3b02      	subs	r3, #2
 8000588:	4464      	add	r4, ip
 800058a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800058e:	fba3 9502 	umull	r9, r5, r3, r2
 8000592:	eba4 040e 	sub.w	r4, r4, lr
 8000596:	42ac      	cmp	r4, r5
 8000598:	46c8      	mov	r8, r9
 800059a:	46ae      	mov	lr, r5
 800059c:	d356      	bcc.n	800064c <__udivmoddi4+0x29c>
 800059e:	d053      	beq.n	8000648 <__udivmoddi4+0x298>
 80005a0:	b156      	cbz	r6, 80005b8 <__udivmoddi4+0x208>
 80005a2:	ebb0 0208 	subs.w	r2, r0, r8
 80005a6:	eb64 040e 	sbc.w	r4, r4, lr
 80005aa:	fa04 f707 	lsl.w	r7, r4, r7
 80005ae:	40ca      	lsrs	r2, r1
 80005b0:	40cc      	lsrs	r4, r1
 80005b2:	4317      	orrs	r7, r2
 80005b4:	e9c6 7400 	strd	r7, r4, [r6]
 80005b8:	4618      	mov	r0, r3
 80005ba:	2100      	movs	r1, #0
 80005bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c0:	f1c3 0120 	rsb	r1, r3, #32
 80005c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005c8:	fa20 f201 	lsr.w	r2, r0, r1
 80005cc:	fa25 f101 	lsr.w	r1, r5, r1
 80005d0:	409d      	lsls	r5, r3
 80005d2:	432a      	orrs	r2, r5
 80005d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005d8:	fa1f fe8c 	uxth.w	lr, ip
 80005dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80005e0:	fb07 1510 	mls	r5, r7, r0, r1
 80005e4:	0c11      	lsrs	r1, r2, #16
 80005e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005ea:	fb00 f50e 	mul.w	r5, r0, lr
 80005ee:	428d      	cmp	r5, r1
 80005f0:	fa04 f403 	lsl.w	r4, r4, r3
 80005f4:	d908      	bls.n	8000608 <__udivmoddi4+0x258>
 80005f6:	eb1c 0101 	adds.w	r1, ip, r1
 80005fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80005fe:	d22f      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000600:	428d      	cmp	r5, r1
 8000602:	d92d      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000604:	3802      	subs	r0, #2
 8000606:	4461      	add	r1, ip
 8000608:	1b49      	subs	r1, r1, r5
 800060a:	b292      	uxth	r2, r2
 800060c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000610:	fb07 1115 	mls	r1, r7, r5, r1
 8000614:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000618:	fb05 f10e 	mul.w	r1, r5, lr
 800061c:	4291      	cmp	r1, r2
 800061e:	d908      	bls.n	8000632 <__udivmoddi4+0x282>
 8000620:	eb1c 0202 	adds.w	r2, ip, r2
 8000624:	f105 38ff 	add.w	r8, r5, #4294967295
 8000628:	d216      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 800062a:	4291      	cmp	r1, r2
 800062c:	d914      	bls.n	8000658 <__udivmoddi4+0x2a8>
 800062e:	3d02      	subs	r5, #2
 8000630:	4462      	add	r2, ip
 8000632:	1a52      	subs	r2, r2, r1
 8000634:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000638:	e738      	b.n	80004ac <__udivmoddi4+0xfc>
 800063a:	4631      	mov	r1, r6
 800063c:	4630      	mov	r0, r6
 800063e:	e708      	b.n	8000452 <__udivmoddi4+0xa2>
 8000640:	4639      	mov	r1, r7
 8000642:	e6e6      	b.n	8000412 <__udivmoddi4+0x62>
 8000644:	4610      	mov	r0, r2
 8000646:	e6fb      	b.n	8000440 <__udivmoddi4+0x90>
 8000648:	4548      	cmp	r0, r9
 800064a:	d2a9      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 800064c:	ebb9 0802 	subs.w	r8, r9, r2
 8000650:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000654:	3b01      	subs	r3, #1
 8000656:	e7a3      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000658:	4645      	mov	r5, r8
 800065a:	e7ea      	b.n	8000632 <__udivmoddi4+0x282>
 800065c:	462b      	mov	r3, r5
 800065e:	e794      	b.n	800058a <__udivmoddi4+0x1da>
 8000660:	4640      	mov	r0, r8
 8000662:	e7d1      	b.n	8000608 <__udivmoddi4+0x258>
 8000664:	46d0      	mov	r8, sl
 8000666:	e77b      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000668:	3d02      	subs	r5, #2
 800066a:	4462      	add	r2, ip
 800066c:	e732      	b.n	80004d4 <__udivmoddi4+0x124>
 800066e:	4608      	mov	r0, r1
 8000670:	e70a      	b.n	8000488 <__udivmoddi4+0xd8>
 8000672:	4464      	add	r4, ip
 8000674:	3802      	subs	r0, #2
 8000676:	e742      	b.n	80004fe <__udivmoddi4+0x14e>

08000678 <__aeabi_idiv0>:
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000680:	4b3d      	ldr	r3, [pc, #244]	; (8000778 <SystemInit+0xfc>)
 8000682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000686:	4a3c      	ldr	r2, [pc, #240]	; (8000778 <SystemInit+0xfc>)
 8000688:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800068c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000690:	4b39      	ldr	r3, [pc, #228]	; (8000778 <SystemInit+0xfc>)
 8000692:	691b      	ldr	r3, [r3, #16]
 8000694:	4a38      	ldr	r2, [pc, #224]	; (8000778 <SystemInit+0xfc>)
 8000696:	f043 0310 	orr.w	r3, r3, #16
 800069a:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800069c:	4b37      	ldr	r3, [pc, #220]	; (800077c <SystemInit+0x100>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f003 030f 	and.w	r3, r3, #15
 80006a4:	2b06      	cmp	r3, #6
 80006a6:	d807      	bhi.n	80006b8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006a8:	4b34      	ldr	r3, [pc, #208]	; (800077c <SystemInit+0x100>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f023 030f 	bic.w	r3, r3, #15
 80006b0:	4a32      	ldr	r2, [pc, #200]	; (800077c <SystemInit+0x100>)
 80006b2:	f043 0307 	orr.w	r3, r3, #7
 80006b6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006b8:	4b31      	ldr	r3, [pc, #196]	; (8000780 <SystemInit+0x104>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a30      	ldr	r2, [pc, #192]	; (8000780 <SystemInit+0x104>)
 80006be:	f043 0301 	orr.w	r3, r3, #1
 80006c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c4:	4b2e      	ldr	r3, [pc, #184]	; (8000780 <SystemInit+0x104>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ca:	4b2d      	ldr	r3, [pc, #180]	; (8000780 <SystemInit+0x104>)
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	492c      	ldr	r1, [pc, #176]	; (8000780 <SystemInit+0x104>)
 80006d0:	4b2c      	ldr	r3, [pc, #176]	; (8000784 <SystemInit+0x108>)
 80006d2:	4013      	ands	r3, r2
 80006d4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006d6:	4b29      	ldr	r3, [pc, #164]	; (800077c <SystemInit+0x100>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f003 0308 	and.w	r3, r3, #8
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d007      	beq.n	80006f2 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e2:	4b26      	ldr	r3, [pc, #152]	; (800077c <SystemInit+0x100>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f023 030f 	bic.w	r3, r3, #15
 80006ea:	4a24      	ldr	r2, [pc, #144]	; (800077c <SystemInit+0x100>)
 80006ec:	f043 0307 	orr.w	r3, r3, #7
 80006f0:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f2:	4b23      	ldr	r3, [pc, #140]	; (8000780 <SystemInit+0x104>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006f8:	4b21      	ldr	r3, [pc, #132]	; (8000780 <SystemInit+0x104>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006fe:	4b20      	ldr	r3, [pc, #128]	; (8000780 <SystemInit+0x104>)
 8000700:	2200      	movs	r2, #0
 8000702:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000704:	4b1e      	ldr	r3, [pc, #120]	; (8000780 <SystemInit+0x104>)
 8000706:	4a20      	ldr	r2, [pc, #128]	; (8000788 <SystemInit+0x10c>)
 8000708:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070a:	4b1d      	ldr	r3, [pc, #116]	; (8000780 <SystemInit+0x104>)
 800070c:	4a1f      	ldr	r2, [pc, #124]	; (800078c <SystemInit+0x110>)
 800070e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000710:	4b1b      	ldr	r3, [pc, #108]	; (8000780 <SystemInit+0x104>)
 8000712:	4a1f      	ldr	r2, [pc, #124]	; (8000790 <SystemInit+0x114>)
 8000714:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000716:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800071c:	4b18      	ldr	r3, [pc, #96]	; (8000780 <SystemInit+0x104>)
 800071e:	4a1c      	ldr	r2, [pc, #112]	; (8000790 <SystemInit+0x114>)
 8000720:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000722:	4b17      	ldr	r3, [pc, #92]	; (8000780 <SystemInit+0x104>)
 8000724:	2200      	movs	r2, #0
 8000726:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000728:	4b15      	ldr	r3, [pc, #84]	; (8000780 <SystemInit+0x104>)
 800072a:	4a19      	ldr	r2, [pc, #100]	; (8000790 <SystemInit+0x114>)
 800072c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800072e:	4b14      	ldr	r3, [pc, #80]	; (8000780 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000734:	4b12      	ldr	r3, [pc, #72]	; (8000780 <SystemInit+0x104>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a11      	ldr	r2, [pc, #68]	; (8000780 <SystemInit+0x104>)
 800073a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800073e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000740:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <SystemInit+0x104>)
 8000742:	2200      	movs	r2, #0
 8000744:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000746:	4b13      	ldr	r3, [pc, #76]	; (8000794 <SystemInit+0x118>)
 8000748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800074a:	4a12      	ldr	r2, [pc, #72]	; (8000794 <SystemInit+0x118>)
 800074c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000750:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <SystemInit+0x11c>)
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <SystemInit+0x120>)
 8000758:	4013      	ands	r3, r2
 800075a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800075e:	d202      	bcs.n	8000766 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000760:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <SystemInit+0x124>)
 8000762:	2201      	movs	r2, #1
 8000764:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <SystemInit+0x128>)
 8000768:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800076c:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 800076e:	bf00      	nop
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	e000ed00 	.word	0xe000ed00
 800077c:	52002000 	.word	0x52002000
 8000780:	58024400 	.word	0x58024400
 8000784:	eaf6ed7f 	.word	0xeaf6ed7f
 8000788:	02020200 	.word	0x02020200
 800078c:	01ff0000 	.word	0x01ff0000
 8000790:	01010280 	.word	0x01010280
 8000794:	580000c0 	.word	0x580000c0
 8000798:	5c001000 	.word	0x5c001000
 800079c:	ffff0000 	.word	0xffff0000
 80007a0:	51008108 	.word	0x51008108
 80007a4:	52004000 	.word	0x52004000

080007a8 <HCSR04_Read>:
#define TRIG_PIN GPIO_PIN_2
#define TRIG_PORT GPIOB


void HCSR04_Read(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 80007ac:	2201      	movs	r2, #1
 80007ae:	2104      	movs	r1, #4
 80007b0:	480a      	ldr	r0, [pc, #40]	; (80007dc <HCSR04_Read+0x34>)
 80007b2:	f002 fbe1 	bl	8002f78 <HAL_GPIO_WritePin>
	osDelay(1);  // wait for 10 us //TODO: review if this delay is required, if it is, then need to consider this delay as part of the task that acquires data.
 80007b6:	2001      	movs	r0, #1
 80007b8:	f008 fe72 	bl	80094a0 <osDelay>

	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 80007bc:	2200      	movs	r2, #0
 80007be:	2104      	movs	r1, #4
 80007c0:	4806      	ldr	r0, [pc, #24]	; (80007dc <HCSR04_Read+0x34>)
 80007c2:	f002 fbd9 	bl	8002f78 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC1);
 80007c6:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <HCSR04_Read+0x38>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	68da      	ldr	r2, [r3, #12]
 80007cc:	4b04      	ldr	r3, [pc, #16]	; (80007e0 <HCSR04_Read+0x38>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f042 0202 	orr.w	r2, r2, #2
 80007d4:	60da      	str	r2, [r3, #12]
}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	58020400 	.word	0x58020400
 80007e0:	24000228 	.word	0x24000228
 80007e4:	00000000 	.word	0x00000000

080007e8 <HAL_TIM_IC_CaptureCallback>:

// Let's write the callback function

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	7f1b      	ldrb	r3, [r3, #28]
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	d17d      	bne.n	80008f4 <HAL_TIM_IC_CaptureCallback+0x10c>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 80007f8:	4b45      	ldr	r3, [pc, #276]	; (8000910 <HAL_TIM_IC_CaptureCallback+0x128>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d11a      	bne.n	8000836 <HAL_TIM_IC_CaptureCallback+0x4e>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000800:	2100      	movs	r1, #0
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f006 f8f0 	bl	80069e8 <HAL_TIM_ReadCapturedValue>
 8000808:	4603      	mov	r3, r0
 800080a:	4a42      	ldr	r2, [pc, #264]	; (8000914 <HAL_TIM_IC_CaptureCallback+0x12c>)
 800080c:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 800080e:	4b40      	ldr	r3, [pc, #256]	; (8000910 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000810:	2201      	movs	r2, #1
 8000812:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	6a1a      	ldr	r2, [r3, #32]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f022 020a 	bic.w	r2, r2, #10
 8000822:	621a      	str	r2, [r3, #32]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	6a1a      	ldr	r2, [r3, #32]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f042 0202 	orr.w	r2, r2, #2
 8000832:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
		}
	}
}
 8000834:	e05e      	b.n	80008f4 <HAL_TIM_IC_CaptureCallback+0x10c>
		else if (Is_First_Captured==1)   // if the first is already captured
 8000836:	4b36      	ldr	r3, [pc, #216]	; (8000910 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	2b01      	cmp	r3, #1
 800083c:	d15a      	bne.n	80008f4 <HAL_TIM_IC_CaptureCallback+0x10c>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 800083e:	2100      	movs	r1, #0
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f006 f8d1 	bl	80069e8 <HAL_TIM_ReadCapturedValue>
 8000846:	4603      	mov	r3, r0
 8000848:	4a33      	ldr	r2, [pc, #204]	; (8000918 <HAL_TIM_IC_CaptureCallback+0x130>)
 800084a:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	2200      	movs	r2, #0
 8000852:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 8000854:	4b30      	ldr	r3, [pc, #192]	; (8000918 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	4b2e      	ldr	r3, [pc, #184]	; (8000914 <HAL_TIM_IC_CaptureCallback+0x12c>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	429a      	cmp	r2, r3
 800085e:	d907      	bls.n	8000870 <HAL_TIM_IC_CaptureCallback+0x88>
				Difference = IC_Val2-IC_Val1;
 8000860:	4b2d      	ldr	r3, [pc, #180]	; (8000918 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000862:	681a      	ldr	r2, [r3, #0]
 8000864:	4b2b      	ldr	r3, [pc, #172]	; (8000914 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	1ad3      	subs	r3, r2, r3
 800086a:	4a2c      	ldr	r2, [pc, #176]	; (800091c <HAL_TIM_IC_CaptureCallback+0x134>)
 800086c:	6013      	str	r3, [r2, #0]
 800086e:	e00f      	b.n	8000890 <HAL_TIM_IC_CaptureCallback+0xa8>
			else if (IC_Val1 > IC_Val2)
 8000870:	4b28      	ldr	r3, [pc, #160]	; (8000914 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	4b28      	ldr	r3, [pc, #160]	; (8000918 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	429a      	cmp	r2, r3
 800087a:	d909      	bls.n	8000890 <HAL_TIM_IC_CaptureCallback+0xa8>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 800087c:	4b26      	ldr	r3, [pc, #152]	; (8000918 <HAL_TIM_IC_CaptureCallback+0x130>)
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	4b24      	ldr	r3, [pc, #144]	; (8000914 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	1ad2      	subs	r2, r2, r3
 8000886:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800088a:	4413      	add	r3, r2
 800088c:	4a23      	ldr	r2, [pc, #140]	; (800091c <HAL_TIM_IC_CaptureCallback+0x134>)
 800088e:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2 * 0.135;
 8000890:	4b22      	ldr	r3, [pc, #136]	; (800091c <HAL_TIM_IC_CaptureCallback+0x134>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	ee07 3a90 	vmov	s15, r3
 8000898:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800089c:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8000900 <HAL_TIM_IC_CaptureCallback+0x118>
 80008a0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80008a4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80008a8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80008ac:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8000908 <HAL_TIM_IC_CaptureCallback+0x120>
 80008b0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80008b8:	ee17 3a90 	vmov	r3, s15
 80008bc:	b29a      	uxth	r2, r3
 80008be:	4b18      	ldr	r3, [pc, #96]	; (8000920 <HAL_TIM_IC_CaptureCallback+0x138>)
 80008c0:	801a      	strh	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 80008c2:	4b13      	ldr	r3, [pc, #76]	; (8000910 <HAL_TIM_IC_CaptureCallback+0x128>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	6a1a      	ldr	r2, [r3, #32]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f022 020a 	bic.w	r2, r2, #10
 80008d6:	621a      	str	r2, [r3, #32]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	6a12      	ldr	r2, [r2, #32]
 80008e2:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
 80008e4:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	68da      	ldr	r2, [r3, #12]
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	f022 0202 	bic.w	r2, r2, #2
 80008f2:	60da      	str	r2, [r3, #12]
}
 80008f4:	bf00      	nop
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	f3af 8000 	nop.w
 8000900:	b020c49c 	.word	0xb020c49c
 8000904:	3fa16872 	.word	0x3fa16872
 8000908:	147ae148 	.word	0x147ae148
 800090c:	3fc147ae 	.word	0x3fc147ae
 8000910:	2400083c 	.word	0x2400083c
 8000914:	24000830 	.word	0x24000830
 8000918:	24000834 	.word	0x24000834
 800091c:	24000838 	.word	0x24000838
 8000920:	2400083e 	.word	0x2400083e
 8000924:	24000228 	.word	0x24000228

08000928 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800092e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000932:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000934:	bf00      	nop
 8000936:	4b34      	ldr	r3, [pc, #208]	; (8000a08 <main+0xe0>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800093e:	2b00      	cmp	r3, #0
 8000940:	d004      	beq.n	800094c <main+0x24>
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	1e5a      	subs	r2, r3, #1
 8000946:	607a      	str	r2, [r7, #4]
 8000948:	2b00      	cmp	r3, #0
 800094a:	dcf4      	bgt.n	8000936 <main+0xe>
  if ( timeout < 0 )
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2b00      	cmp	r3, #0
 8000950:	da01      	bge.n	8000956 <main+0x2e>
  {
  Error_Handler();
 8000952:	f000 fb19 	bl	8000f88 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000956:	f000 fe57 	bl	8001608 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800095a:	f000 f86b 	bl	8000a34 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800095e:	4b2a      	ldr	r3, [pc, #168]	; (8000a08 <main+0xe0>)
 8000960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000964:	4a28      	ldr	r2, [pc, #160]	; (8000a08 <main+0xe0>)
 8000966:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800096a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800096e:	4b26      	ldr	r3, [pc, #152]	; (8000a08 <main+0xe0>)
 8000970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000978:	603b      	str	r3, [r7, #0]
 800097a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800097c:	2000      	movs	r0, #0
 800097e:	f002 fb15 	bl	8002fac <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000982:	2100      	movs	r1, #0
 8000984:	2000      	movs	r0, #0
 8000986:	f002 fb2b 	bl	8002fe0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800098a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800098e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000990:	bf00      	nop
 8000992:	4b1d      	ldr	r3, [pc, #116]	; (8000a08 <main+0xe0>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800099a:	2b00      	cmp	r3, #0
 800099c:	d104      	bne.n	80009a8 <main+0x80>
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	1e5a      	subs	r2, r3, #1
 80009a2:	607a      	str	r2, [r7, #4]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	dcf4      	bgt.n	8000992 <main+0x6a>
if ( timeout < 0 )
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	da01      	bge.n	80009b2 <main+0x8a>
{
Error_Handler();
 80009ae:	f000 faeb 	bl	8000f88 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b2:	f000 fa27 	bl	8000e04 <MX_GPIO_Init>
  MX_ETH_Init();
 80009b6:	f000 f8eb 	bl	8000b90 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80009ba:	f000 f9a5 	bl	8000d08 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80009be:	f000 f9ef 	bl	8000da0 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 80009c2:	f000 f931 	bl	8000c28 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 80009c6:	2100      	movs	r1, #0
 80009c8:	4810      	ldr	r0, [pc, #64]	; (8000a0c <main+0xe4>)
 80009ca:	f005 fc55 	bl	8006278 <HAL_TIM_IC_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80009ce:	f008 fc8b 	bl	80092e8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80009d2:	4a0f      	ldr	r2, [pc, #60]	; (8000a10 <main+0xe8>)
 80009d4:	2100      	movs	r1, #0
 80009d6:	480f      	ldr	r0, [pc, #60]	; (8000a14 <main+0xec>)
 80009d8:	f008 fcd0 	bl	800937c <osThreadNew>
 80009dc:	4603      	mov	r3, r0
 80009de:	4a0e      	ldr	r2, [pc, #56]	; (8000a18 <main+0xf0>)
 80009e0:	6013      	str	r3, [r2, #0]

  /* creation of UltrasonicTask */
  UltrasonicTaskHandle = osThreadNew(StartTaskUltrasonic, NULL, &UltrasonicTask_attributes);
 80009e2:	4a0e      	ldr	r2, [pc, #56]	; (8000a1c <main+0xf4>)
 80009e4:	2100      	movs	r1, #0
 80009e6:	480e      	ldr	r0, [pc, #56]	; (8000a20 <main+0xf8>)
 80009e8:	f008 fcc8 	bl	800937c <osThreadNew>
 80009ec:	4603      	mov	r3, r0
 80009ee:	4a0d      	ldr	r2, [pc, #52]	; (8000a24 <main+0xfc>)
 80009f0:	6013      	str	r3, [r2, #0]

  /* creation of LedTask */
  LedTaskHandle = osThreadNew(StartTaskLed, NULL, &LedTask_attributes);
 80009f2:	4a0d      	ldr	r2, [pc, #52]	; (8000a28 <main+0x100>)
 80009f4:	2100      	movs	r1, #0
 80009f6:	480d      	ldr	r0, [pc, #52]	; (8000a2c <main+0x104>)
 80009f8:	f008 fcc0 	bl	800937c <osThreadNew>
 80009fc:	4603      	mov	r3, r0
 80009fe:	4a0c      	ldr	r2, [pc, #48]	; (8000a30 <main+0x108>)
 8000a00:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000a02:	f008 fc95 	bl	8009330 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a06:	e7fe      	b.n	8000a06 <main+0xde>
 8000a08:	58024400 	.word	0x58024400
 8000a0c:	24000228 	.word	0x24000228
 8000a10:	0800c83c 	.word	0x0800c83c
 8000a14:	08000f05 	.word	0x08000f05
 8000a18:	24000814 	.word	0x24000814
 8000a1c:	0800c860 	.word	0x0800c860
 8000a20:	08000f15 	.word	0x08000f15
 8000a24:	24000818 	.word	0x24000818
 8000a28:	0800c884 	.word	0x0800c884
 8000a2c:	08000f55 	.word	0x08000f55
 8000a30:	2400081c 	.word	0x2400081c

08000a34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b09e      	sub	sp, #120	; 0x78
 8000a38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a3e:	224c      	movs	r2, #76	; 0x4c
 8000a40:	2100      	movs	r1, #0
 8000a42:	4618      	mov	r0, r3
 8000a44:	f00b f9ea 	bl	800be1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a48:	f107 030c 	add.w	r3, r7, #12
 8000a4c:	2220      	movs	r2, #32
 8000a4e:	2100      	movs	r1, #0
 8000a50:	4618      	mov	r0, r3
 8000a52:	f00b f9e3 	bl	800be1c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a56:	2002      	movs	r0, #2
 8000a58:	f002 fc1e 	bl	8003298 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60bb      	str	r3, [r7, #8]
 8000a60:	4b48      	ldr	r3, [pc, #288]	; (8000b84 <SystemClock_Config+0x150>)
 8000a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a64:	4a47      	ldr	r2, [pc, #284]	; (8000b84 <SystemClock_Config+0x150>)
 8000a66:	f023 0301 	bic.w	r3, r3, #1
 8000a6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a6c:	4b45      	ldr	r3, [pc, #276]	; (8000b84 <SystemClock_Config+0x150>)
 8000a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a70:	f003 0301 	and.w	r3, r3, #1
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	4b44      	ldr	r3, [pc, #272]	; (8000b88 <SystemClock_Config+0x154>)
 8000a78:	699b      	ldr	r3, [r3, #24]
 8000a7a:	4a43      	ldr	r2, [pc, #268]	; (8000b88 <SystemClock_Config+0x154>)
 8000a7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a80:	6193      	str	r3, [r2, #24]
 8000a82:	4b41      	ldr	r3, [pc, #260]	; (8000b88 <SystemClock_Config+0x154>)
 8000a84:	699b      	ldr	r3, [r3, #24]
 8000a86:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a8e:	bf00      	nop
 8000a90:	4b3d      	ldr	r3, [pc, #244]	; (8000b88 <SystemClock_Config+0x154>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a9c:	d1f8      	bne.n	8000a90 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9e:	4b3b      	ldr	r3, [pc, #236]	; (8000b8c <SystemClock_Config+0x158>)
 8000aa0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000aa4:	4a39      	ldr	r2, [pc, #228]	; (8000b8c <SystemClock_Config+0x158>)
 8000aa6:	f043 0302 	orr.w	r3, r3, #2
 8000aaa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000aae:	4b37      	ldr	r3, [pc, #220]	; (8000b8c <SystemClock_Config+0x158>)
 8000ab0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ab4:	f003 0302 	and.w	r3, r3, #2
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000abc:	2300      	movs	r3, #0
 8000abe:	603b      	str	r3, [r7, #0]
 8000ac0:	4b31      	ldr	r3, [pc, #196]	; (8000b88 <SystemClock_Config+0x154>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	4a30      	ldr	r2, [pc, #192]	; (8000b88 <SystemClock_Config+0x154>)
 8000ac6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000aca:	6193      	str	r3, [r2, #24]
 8000acc:	4b2e      	ldr	r3, [pc, #184]	; (8000b88 <SystemClock_Config+0x154>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ad4:	603b      	str	r3, [r7, #0]
 8000ad6:	4b2b      	ldr	r3, [pc, #172]	; (8000b84 <SystemClock_Config+0x150>)
 8000ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ada:	4a2a      	ldr	r2, [pc, #168]	; (8000b84 <SystemClock_Config+0x150>)
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000ae2:	4b28      	ldr	r3, [pc, #160]	; (8000b84 <SystemClock_Config+0x150>)
 8000ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000aee:	bf00      	nop
 8000af0:	4b25      	ldr	r3, [pc, #148]	; (8000b88 <SystemClock_Config+0x154>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000af8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000afc:	d1f8      	bne.n	8000af0 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000afe:	2301      	movs	r3, #1
 8000b00:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b02:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b06:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b10:	2301      	movs	r3, #1
 8000b12:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000b14:	2378      	movs	r3, #120	; 0x78
 8000b16:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b20:	2302      	movs	r3, #2
 8000b22:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b24:	230c      	movs	r3, #12
 8000b26:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b34:	4618      	mov	r0, r3
 8000b36:	f002 fc19 	bl	800336c <HAL_RCC_OscConfig>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000b40:	f000 fa22 	bl	8000f88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b44:	233f      	movs	r3, #63	; 0x3f
 8000b46:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b48:	2303      	movs	r3, #3
 8000b4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b50:	2308      	movs	r3, #8
 8000b52:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b54:	2340      	movs	r3, #64	; 0x40
 8000b56:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b58:	2340      	movs	r3, #64	; 0x40
 8000b5a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b62:	2340      	movs	r3, #64	; 0x40
 8000b64:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b66:	f107 030c 	add.w	r3, r7, #12
 8000b6a:	2104      	movs	r1, #4
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f003 f857 	bl	8003c20 <HAL_RCC_ClockConfig>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000b78:	f000 fa06 	bl	8000f88 <Error_Handler>
  }
}
 8000b7c:	bf00      	nop
 8000b7e:	3778      	adds	r7, #120	; 0x78
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	58000400 	.word	0x58000400
 8000b88:	58024800 	.word	0x58024800
 8000b8c:	58024400 	.word	0x58024400

08000b90 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000b94:	4b1e      	ldr	r3, [pc, #120]	; (8000c10 <MX_ETH_Init+0x80>)
 8000b96:	4a1f      	ldr	r2, [pc, #124]	; (8000c14 <MX_ETH_Init+0x84>)
 8000b98:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000b9a:	4b1f      	ldr	r3, [pc, #124]	; (8000c18 <MX_ETH_Init+0x88>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000ba0:	4b1d      	ldr	r3, [pc, #116]	; (8000c18 <MX_ETH_Init+0x88>)
 8000ba2:	2280      	movs	r2, #128	; 0x80
 8000ba4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000ba6:	4b1c      	ldr	r3, [pc, #112]	; (8000c18 <MX_ETH_Init+0x88>)
 8000ba8:	22e1      	movs	r2, #225	; 0xe1
 8000baa:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000bac:	4b1a      	ldr	r3, [pc, #104]	; (8000c18 <MX_ETH_Init+0x88>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000bb2:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <MX_ETH_Init+0x88>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000bb8:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <MX_ETH_Init+0x88>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000bbe:	4b14      	ldr	r3, [pc, #80]	; (8000c10 <MX_ETH_Init+0x80>)
 8000bc0:	4a15      	ldr	r2, [pc, #84]	; (8000c18 <MX_ETH_Init+0x88>)
 8000bc2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000bc4:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <MX_ETH_Init+0x80>)
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000bca:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <MX_ETH_Init+0x80>)
 8000bcc:	4a13      	ldr	r2, [pc, #76]	; (8000c1c <MX_ETH_Init+0x8c>)
 8000bce:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000bd0:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <MX_ETH_Init+0x80>)
 8000bd2:	4a13      	ldr	r2, [pc, #76]	; (8000c20 <MX_ETH_Init+0x90>)
 8000bd4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <MX_ETH_Init+0x80>)
 8000bd8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000bdc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000bde:	480c      	ldr	r0, [pc, #48]	; (8000c10 <MX_ETH_Init+0x80>)
 8000be0:	f001 fbf6 	bl	80023d0 <HAL_ETH_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000bea:	f000 f9cd 	bl	8000f88 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000bee:	2238      	movs	r2, #56	; 0x38
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	480c      	ldr	r0, [pc, #48]	; (8000c24 <MX_ETH_Init+0x94>)
 8000bf4:	f00b f912 	bl	800be1c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <MX_ETH_Init+0x94>)
 8000bfa:	2221      	movs	r2, #33	; 0x21
 8000bfc:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000bfe:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <MX_ETH_Init+0x94>)
 8000c00:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000c04:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000c06:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <MX_ETH_Init+0x94>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	24000178 	.word	0x24000178
 8000c14:	40028000 	.word	0x40028000
 8000c18:	24000840 	.word	0x24000840
 8000c1c:	240000c4 	.word	0x240000c4
 8000c20:	24000064 	.word	0x24000064
 8000c24:	24000140 	.word	0x24000140

08000c28 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08c      	sub	sp, #48	; 0x30
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c2e:	f107 0320 	add.w	r3, r7, #32
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000c48:	1d3b      	adds	r3, r7, #4
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c54:	4b2b      	ldr	r3, [pc, #172]	; (8000d04 <MX_TIM2_Init+0xdc>)
 8000c56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c5a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 39;
 8000c5c:	4b29      	ldr	r3, [pc, #164]	; (8000d04 <MX_TIM2_Init+0xdc>)
 8000c5e:	2227      	movs	r2, #39	; 0x27
 8000c60:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c62:	4b28      	ldr	r3, [pc, #160]	; (8000d04 <MX_TIM2_Init+0xdc>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000c68:	4b26      	ldr	r3, [pc, #152]	; (8000d04 <MX_TIM2_Init+0xdc>)
 8000c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8000c6e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c70:	4b24      	ldr	r3, [pc, #144]	; (8000d04 <MX_TIM2_Init+0xdc>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c76:	4b23      	ldr	r3, [pc, #140]	; (8000d04 <MX_TIM2_Init+0xdc>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c7c:	4821      	ldr	r0, [pc, #132]	; (8000d04 <MX_TIM2_Init+0xdc>)
 8000c7e:	f005 f9c9 	bl	8006014 <HAL_TIM_Base_Init>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000c88:	f000 f97e 	bl	8000f88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c90:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c92:	f107 0320 	add.w	r3, r7, #32
 8000c96:	4619      	mov	r1, r3
 8000c98:	481a      	ldr	r0, [pc, #104]	; (8000d04 <MX_TIM2_Init+0xdc>)
 8000c9a:	f005 fdad 	bl	80067f8 <HAL_TIM_ConfigClockSource>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000ca4:	f000 f970 	bl	8000f88 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000ca8:	4816      	ldr	r0, [pc, #88]	; (8000d04 <MX_TIM2_Init+0xdc>)
 8000caa:	f005 fa83 	bl	80061b4 <HAL_TIM_IC_Init>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000cb4:	f000 f968 	bl	8000f88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	480f      	ldr	r0, [pc, #60]	; (8000d04 <MX_TIM2_Init+0xdc>)
 8000cc8:	f006 f978 	bl	8006fbc <HAL_TIMEx_MasterConfigSynchronization>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8000cd2:	f000 f959 	bl	8000f88 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000ce6:	1d3b      	adds	r3, r7, #4
 8000ce8:	2200      	movs	r2, #0
 8000cea:	4619      	mov	r1, r3
 8000cec:	4805      	ldr	r0, [pc, #20]	; (8000d04 <MX_TIM2_Init+0xdc>)
 8000cee:	f005 fce6 	bl	80066be <HAL_TIM_IC_ConfigChannel>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000cf8:	f000 f946 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cfc:	bf00      	nop
 8000cfe:	3730      	adds	r7, #48	; 0x30
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	24000228 	.word	0x24000228

08000d08 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d0c:	4b22      	ldr	r3, [pc, #136]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d0e:	4a23      	ldr	r2, [pc, #140]	; (8000d9c <MX_USART3_UART_Init+0x94>)
 8000d10:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d12:	4b21      	ldr	r3, [pc, #132]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d18:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d1a:	4b1f      	ldr	r3, [pc, #124]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d20:	4b1d      	ldr	r3, [pc, #116]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d26:	4b1c      	ldr	r3, [pc, #112]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d2c:	4b1a      	ldr	r3, [pc, #104]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d2e:	220c      	movs	r2, #12
 8000d30:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d32:	4b19      	ldr	r3, [pc, #100]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d38:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d3e:	4b16      	ldr	r3, [pc, #88]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d44:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d4a:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d50:	4811      	ldr	r0, [pc, #68]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d52:	f006 f9df 	bl	8007114 <HAL_UART_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d5c:	f000 f914 	bl	8000f88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d60:	2100      	movs	r1, #0
 8000d62:	480d      	ldr	r0, [pc, #52]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d64:	f007 fea8 	bl	8008ab8 <HAL_UARTEx_SetTxFifoThreshold>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d6e:	f000 f90b 	bl	8000f88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d72:	2100      	movs	r1, #0
 8000d74:	4808      	ldr	r0, [pc, #32]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d76:	f007 fedd 	bl	8008b34 <HAL_UARTEx_SetRxFifoThreshold>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d80:	f000 f902 	bl	8000f88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d84:	4804      	ldr	r0, [pc, #16]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d86:	f007 fe5e 	bl	8008a46 <HAL_UARTEx_DisableFifoMode>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d90:	f000 f8fa 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	24000274 	.word	0x24000274
 8000d9c:	40004800 	.word	0x40004800

08000da0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000da4:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000da6:	4a16      	ldr	r2, [pc, #88]	; (8000e00 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000da8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000daa:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dac:	2209      	movs	r2, #9
 8000dae:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000db0:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000db2:	2202      	movs	r2, #2
 8000db4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000db6:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000dbc:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dbe:	2202      	movs	r2, #2
 8000dc0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000dce:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000dd4:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000dda:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000de6:	4805      	ldr	r0, [pc, #20]	; (8000dfc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000de8:	f002 f90e 	bl	8003008 <HAL_PCD_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000df2:	f000 f8c9 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	24000308 	.word	0x24000308
 8000e00:	40080000 	.word	0x40080000

08000e04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08c      	sub	sp, #48	; 0x30
 8000e08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0a:	f107 031c 	add.w	r3, r7, #28
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	609a      	str	r2, [r3, #8]
 8000e16:	60da      	str	r2, [r3, #12]
 8000e18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1a:	4b38      	ldr	r3, [pc, #224]	; (8000efc <MX_GPIO_Init+0xf8>)
 8000e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e20:	4a36      	ldr	r2, [pc, #216]	; (8000efc <MX_GPIO_Init+0xf8>)
 8000e22:	f043 0304 	orr.w	r3, r3, #4
 8000e26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e2a:	4b34      	ldr	r3, [pc, #208]	; (8000efc <MX_GPIO_Init+0xf8>)
 8000e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e30:	f003 0304 	and.w	r3, r3, #4
 8000e34:	61bb      	str	r3, [r7, #24]
 8000e36:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e38:	4b30      	ldr	r3, [pc, #192]	; (8000efc <MX_GPIO_Init+0xf8>)
 8000e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e3e:	4a2f      	ldr	r2, [pc, #188]	; (8000efc <MX_GPIO_Init+0xf8>)
 8000e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e48:	4b2c      	ldr	r3, [pc, #176]	; (8000efc <MX_GPIO_Init+0xf8>)
 8000e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e52:	617b      	str	r3, [r7, #20]
 8000e54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e56:	4b29      	ldr	r3, [pc, #164]	; (8000efc <MX_GPIO_Init+0xf8>)
 8000e58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e5c:	4a27      	ldr	r2, [pc, #156]	; (8000efc <MX_GPIO_Init+0xf8>)
 8000e5e:	f043 0301 	orr.w	r3, r3, #1
 8000e62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e66:	4b25      	ldr	r3, [pc, #148]	; (8000efc <MX_GPIO_Init+0xf8>)
 8000e68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e6c:	f003 0301 	and.w	r3, r3, #1
 8000e70:	613b      	str	r3, [r7, #16]
 8000e72:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e74:	4b21      	ldr	r3, [pc, #132]	; (8000efc <MX_GPIO_Init+0xf8>)
 8000e76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e7a:	4a20      	ldr	r2, [pc, #128]	; (8000efc <MX_GPIO_Init+0xf8>)
 8000e7c:	f043 0302 	orr.w	r3, r3, #2
 8000e80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e84:	4b1d      	ldr	r3, [pc, #116]	; (8000efc <MX_GPIO_Init+0xf8>)
 8000e86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e8a:	f003 0302 	and.w	r3, r3, #2
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e92:	4b1a      	ldr	r3, [pc, #104]	; (8000efc <MX_GPIO_Init+0xf8>)
 8000e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e98:	4a18      	ldr	r2, [pc, #96]	; (8000efc <MX_GPIO_Init+0xf8>)
 8000e9a:	f043 0308 	orr.w	r3, r3, #8
 8000e9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ea2:	4b16      	ldr	r3, [pc, #88]	; (8000efc <MX_GPIO_Init+0xf8>)
 8000ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea8:	f003 0308 	and.w	r3, r3, #8
 8000eac:	60bb      	str	r3, [r7, #8]
 8000eae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eb0:	4b12      	ldr	r3, [pc, #72]	; (8000efc <MX_GPIO_Init+0xf8>)
 8000eb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb6:	4a11      	ldr	r2, [pc, #68]	; (8000efc <MX_GPIO_Init+0xf8>)
 8000eb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ebc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ec0:	4b0e      	ldr	r3, [pc, #56]	; (8000efc <MX_GPIO_Init+0xf8>)
 8000ec2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2104      	movs	r1, #4
 8000ed2:	480b      	ldr	r0, [pc, #44]	; (8000f00 <MX_GPIO_Init+0xfc>)
 8000ed4:	f002 f850 	bl	8002f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ed8:	2304      	movs	r3, #4
 8000eda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000edc:	2301      	movs	r3, #1
 8000ede:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee8:	f107 031c 	add.w	r3, r7, #28
 8000eec:	4619      	mov	r1, r3
 8000eee:	4804      	ldr	r0, [pc, #16]	; (8000f00 <MX_GPIO_Init+0xfc>)
 8000ef0:	f001 fe92 	bl	8002c18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ef4:	bf00      	nop
 8000ef6:	3730      	adds	r7, #48	; 0x30
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	58024400 	.word	0x58024400
 8000f00:	58020400 	.word	0x58020400

08000f04 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	f008 fac7 	bl	80094a0 <osDelay>
 8000f12:	e7fb      	b.n	8000f0c <StartDefaultTask+0x8>

08000f14 <StartTaskUltrasonic>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskUltrasonic */
void StartTaskUltrasonic(void *argument)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskUltrasonic */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);//TODO: increase delay to shorten task periodicity (ms)
 8000f1c:	2064      	movs	r0, #100	; 0x64
 8000f1e:	f008 fabf 	bl	80094a0 <osDelay>

    HCSR04_Read();
 8000f22:	f7ff fc41 	bl	80007a8 <HCSR04_Read>

   	sprintf(MSG,"S= %d \n",Distance);
 8000f26:	4b07      	ldr	r3, [pc, #28]	; (8000f44 <StartTaskUltrasonic+0x30>)
 8000f28:	881b      	ldrh	r3, [r3, #0]
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	4906      	ldr	r1, [pc, #24]	; (8000f48 <StartTaskUltrasonic+0x34>)
 8000f2e:	4807      	ldr	r0, [pc, #28]	; (8000f4c <StartTaskUltrasonic+0x38>)
 8000f30:	f00a ff54 	bl	800bddc <siprintf>
   	HAL_UART_Transmit(&huart3, MSG, sizeof(MSG), 15);
 8000f34:	230f      	movs	r3, #15
 8000f36:	220f      	movs	r2, #15
 8000f38:	4904      	ldr	r1, [pc, #16]	; (8000f4c <StartTaskUltrasonic+0x38>)
 8000f3a:	4805      	ldr	r0, [pc, #20]	; (8000f50 <StartTaskUltrasonic+0x3c>)
 8000f3c:	f006 f93a 	bl	80071b4 <HAL_UART_Transmit>
  {
 8000f40:	e7ec      	b.n	8000f1c <StartTaskUltrasonic+0x8>
 8000f42:	bf00      	nop
 8000f44:	2400083e 	.word	0x2400083e
 8000f48:	0800c80c 	.word	0x0800c80c
 8000f4c:	24000820 	.word	0x24000820
 8000f50:	24000274 	.word	0x24000274

08000f54 <StartTaskLed>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskLed */
void StartTaskLed(void *argument)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskLed */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	f008 fa9f 	bl	80094a0 <osDelay>
 8000f62:	e7fb      	b.n	8000f5c <StartTaskLed+0x8>

08000f64 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM12) {
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a04      	ldr	r2, [pc, #16]	; (8000f84 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d101      	bne.n	8000f7a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f76:	f000 fb83 	bl	8001680 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40001800 	.word	0x40001800

08000f88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f8c:	b672      	cpsid	i
}
 8000f8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <Error_Handler+0x8>
	...

08000f94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9a:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <HAL_MspInit+0x38>)
 8000f9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fa0:	4a0a      	ldr	r2, [pc, #40]	; (8000fcc <HAL_MspInit+0x38>)
 8000fa2:	f043 0302 	orr.w	r3, r3, #2
 8000fa6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000faa:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <HAL_MspInit+0x38>)
 8000fac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fb0:	f003 0302 	and.w	r3, r3, #2
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	210f      	movs	r1, #15
 8000fbc:	f06f 0001 	mvn.w	r0, #1
 8000fc0:	f000 fc7a 	bl	80018b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	58024400 	.word	0x58024400

08000fd0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08e      	sub	sp, #56	; 0x38
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a59      	ldr	r2, [pc, #356]	; (8001154 <HAL_ETH_MspInit+0x184>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	f040 80ab 	bne.w	800114a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000ff4:	4b58      	ldr	r3, [pc, #352]	; (8001158 <HAL_ETH_MspInit+0x188>)
 8000ff6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ffa:	4a57      	ldr	r2, [pc, #348]	; (8001158 <HAL_ETH_MspInit+0x188>)
 8000ffc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001000:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001004:	4b54      	ldr	r3, [pc, #336]	; (8001158 <HAL_ETH_MspInit+0x188>)
 8001006:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800100a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800100e:	623b      	str	r3, [r7, #32]
 8001010:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001012:	4b51      	ldr	r3, [pc, #324]	; (8001158 <HAL_ETH_MspInit+0x188>)
 8001014:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001018:	4a4f      	ldr	r2, [pc, #316]	; (8001158 <HAL_ETH_MspInit+0x188>)
 800101a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800101e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001022:	4b4d      	ldr	r3, [pc, #308]	; (8001158 <HAL_ETH_MspInit+0x188>)
 8001024:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001028:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800102c:	61fb      	str	r3, [r7, #28]
 800102e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001030:	4b49      	ldr	r3, [pc, #292]	; (8001158 <HAL_ETH_MspInit+0x188>)
 8001032:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001036:	4a48      	ldr	r2, [pc, #288]	; (8001158 <HAL_ETH_MspInit+0x188>)
 8001038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800103c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001040:	4b45      	ldr	r3, [pc, #276]	; (8001158 <HAL_ETH_MspInit+0x188>)
 8001042:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104a:	61bb      	str	r3, [r7, #24]
 800104c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800104e:	4b42      	ldr	r3, [pc, #264]	; (8001158 <HAL_ETH_MspInit+0x188>)
 8001050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001054:	4a40      	ldr	r2, [pc, #256]	; (8001158 <HAL_ETH_MspInit+0x188>)
 8001056:	f043 0304 	orr.w	r3, r3, #4
 800105a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800105e:	4b3e      	ldr	r3, [pc, #248]	; (8001158 <HAL_ETH_MspInit+0x188>)
 8001060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001064:	f003 0304 	and.w	r3, r3, #4
 8001068:	617b      	str	r3, [r7, #20]
 800106a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106c:	4b3a      	ldr	r3, [pc, #232]	; (8001158 <HAL_ETH_MspInit+0x188>)
 800106e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001072:	4a39      	ldr	r2, [pc, #228]	; (8001158 <HAL_ETH_MspInit+0x188>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800107c:	4b36      	ldr	r3, [pc, #216]	; (8001158 <HAL_ETH_MspInit+0x188>)
 800107e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	613b      	str	r3, [r7, #16]
 8001088:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800108a:	4b33      	ldr	r3, [pc, #204]	; (8001158 <HAL_ETH_MspInit+0x188>)
 800108c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001090:	4a31      	ldr	r2, [pc, #196]	; (8001158 <HAL_ETH_MspInit+0x188>)
 8001092:	f043 0302 	orr.w	r3, r3, #2
 8001096:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800109a:	4b2f      	ldr	r3, [pc, #188]	; (8001158 <HAL_ETH_MspInit+0x188>)
 800109c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a0:	f003 0302 	and.w	r3, r3, #2
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80010a8:	4b2b      	ldr	r3, [pc, #172]	; (8001158 <HAL_ETH_MspInit+0x188>)
 80010aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ae:	4a2a      	ldr	r2, [pc, #168]	; (8001158 <HAL_ETH_MspInit+0x188>)
 80010b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010b8:	4b27      	ldr	r3, [pc, #156]	; (8001158 <HAL_ETH_MspInit+0x188>)
 80010ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80010c6:	2332      	movs	r3, #50	; 0x32
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	2302      	movs	r3, #2
 80010cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d2:	2300      	movs	r3, #0
 80010d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010d6:	230b      	movs	r3, #11
 80010d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010de:	4619      	mov	r1, r3
 80010e0:	481e      	ldr	r0, [pc, #120]	; (800115c <HAL_ETH_MspInit+0x18c>)
 80010e2:	f001 fd99 	bl	8002c18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80010e6:	2386      	movs	r3, #134	; 0x86
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ea:	2302      	movs	r3, #2
 80010ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f2:	2300      	movs	r3, #0
 80010f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010f6:	230b      	movs	r3, #11
 80010f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010fe:	4619      	mov	r1, r3
 8001100:	4817      	ldr	r0, [pc, #92]	; (8001160 <HAL_ETH_MspInit+0x190>)
 8001102:	f001 fd89 	bl	8002c18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001106:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110c:	2302      	movs	r3, #2
 800110e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001114:	2300      	movs	r3, #0
 8001116:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001118:	230b      	movs	r3, #11
 800111a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001120:	4619      	mov	r1, r3
 8001122:	4810      	ldr	r0, [pc, #64]	; (8001164 <HAL_ETH_MspInit+0x194>)
 8001124:	f001 fd78 	bl	8002c18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001128:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112e:	2302      	movs	r3, #2
 8001130:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001136:	2300      	movs	r3, #0
 8001138:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800113a:	230b      	movs	r3, #11
 800113c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800113e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001142:	4619      	mov	r1, r3
 8001144:	4808      	ldr	r0, [pc, #32]	; (8001168 <HAL_ETH_MspInit+0x198>)
 8001146:	f001 fd67 	bl	8002c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800114a:	bf00      	nop
 800114c:	3738      	adds	r7, #56	; 0x38
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40028000 	.word	0x40028000
 8001158:	58024400 	.word	0x58024400
 800115c:	58020800 	.word	0x58020800
 8001160:	58020000 	.word	0x58020000
 8001164:	58020400 	.word	0x58020400
 8001168:	58021800 	.word	0x58021800

0800116c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	; 0x28
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800118c:	d135      	bne.n	80011fa <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800118e:	4b1d      	ldr	r3, [pc, #116]	; (8001204 <HAL_TIM_Base_MspInit+0x98>)
 8001190:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001194:	4a1b      	ldr	r2, [pc, #108]	; (8001204 <HAL_TIM_Base_MspInit+0x98>)
 8001196:	f043 0301 	orr.w	r3, r3, #1
 800119a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800119e:	4b19      	ldr	r3, [pc, #100]	; (8001204 <HAL_TIM_Base_MspInit+0x98>)
 80011a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	613b      	str	r3, [r7, #16]
 80011aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ac:	4b15      	ldr	r3, [pc, #84]	; (8001204 <HAL_TIM_Base_MspInit+0x98>)
 80011ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b2:	4a14      	ldr	r2, [pc, #80]	; (8001204 <HAL_TIM_Base_MspInit+0x98>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011bc:	4b11      	ldr	r3, [pc, #68]	; (8001204 <HAL_TIM_Base_MspInit+0x98>)
 80011be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011ca:	2301      	movs	r3, #1
 80011cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ce:	2302      	movs	r3, #2
 80011d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d6:	2300      	movs	r3, #0
 80011d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011da:	2301      	movs	r3, #1
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011de:	f107 0314 	add.w	r3, r7, #20
 80011e2:	4619      	mov	r1, r3
 80011e4:	4808      	ldr	r0, [pc, #32]	; (8001208 <HAL_TIM_Base_MspInit+0x9c>)
 80011e6:	f001 fd17 	bl	8002c18 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2105      	movs	r1, #5
 80011ee:	201c      	movs	r0, #28
 80011f0:	f000 fb62 	bl	80018b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011f4:	201c      	movs	r0, #28
 80011f6:	f000 fb79 	bl	80018ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011fa:	bf00      	nop
 80011fc:	3728      	adds	r7, #40	; 0x28
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	58024400 	.word	0x58024400
 8001208:	58020000 	.word	0x58020000

0800120c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b0ba      	sub	sp, #232	; 0xe8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001224:	f107 0310 	add.w	r3, r7, #16
 8001228:	22c0      	movs	r2, #192	; 0xc0
 800122a:	2100      	movs	r1, #0
 800122c:	4618      	mov	r0, r3
 800122e:	f00a fdf5 	bl	800be1c <memset>
  if(huart->Instance==USART3)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a2b      	ldr	r2, [pc, #172]	; (80012e4 <HAL_UART_MspInit+0xd8>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d14e      	bne.n	80012da <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800123c:	f04f 0202 	mov.w	r2, #2
 8001240:	f04f 0300 	mov.w	r3, #0
 8001244:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001248:	2300      	movs	r3, #0
 800124a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800124e:	f107 0310 	add.w	r3, r7, #16
 8001252:	4618      	mov	r0, r3
 8001254:	f003 f8b2 	bl	80043bc <HAL_RCCEx_PeriphCLKConfig>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800125e:	f7ff fe93 	bl	8000f88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001262:	4b21      	ldr	r3, [pc, #132]	; (80012e8 <HAL_UART_MspInit+0xdc>)
 8001264:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001268:	4a1f      	ldr	r2, [pc, #124]	; (80012e8 <HAL_UART_MspInit+0xdc>)
 800126a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800126e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001272:	4b1d      	ldr	r3, [pc, #116]	; (80012e8 <HAL_UART_MspInit+0xdc>)
 8001274:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001278:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001280:	4b19      	ldr	r3, [pc, #100]	; (80012e8 <HAL_UART_MspInit+0xdc>)
 8001282:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001286:	4a18      	ldr	r2, [pc, #96]	; (80012e8 <HAL_UART_MspInit+0xdc>)
 8001288:	f043 0308 	orr.w	r3, r3, #8
 800128c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001290:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <HAL_UART_MspInit+0xdc>)
 8001292:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001296:	f003 0308 	and.w	r3, r3, #8
 800129a:	60bb      	str	r3, [r7, #8]
 800129c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800129e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a6:	2302      	movs	r3, #2
 80012a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b2:	2300      	movs	r3, #0
 80012b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012b8:	2307      	movs	r3, #7
 80012ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012be:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012c2:	4619      	mov	r1, r3
 80012c4:	4809      	ldr	r0, [pc, #36]	; (80012ec <HAL_UART_MspInit+0xe0>)
 80012c6:	f001 fca7 	bl	8002c18 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80012ca:	2200      	movs	r2, #0
 80012cc:	2105      	movs	r1, #5
 80012ce:	2027      	movs	r0, #39	; 0x27
 80012d0:	f000 faf2 	bl	80018b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80012d4:	2027      	movs	r0, #39	; 0x27
 80012d6:	f000 fb09 	bl	80018ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012da:	bf00      	nop
 80012dc:	37e8      	adds	r7, #232	; 0xe8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40004800 	.word	0x40004800
 80012e8:	58024400 	.word	0x58024400
 80012ec:	58020c00 	.word	0x58020c00

080012f0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b0ba      	sub	sp, #232	; 0xe8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001308:	f107 0310 	add.w	r3, r7, #16
 800130c:	22c0      	movs	r2, #192	; 0xc0
 800130e:	2100      	movs	r1, #0
 8001310:	4618      	mov	r0, r3
 8001312:	f00a fd83 	bl	800be1c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a38      	ldr	r2, [pc, #224]	; (80013fc <HAL_PCD_MspInit+0x10c>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d168      	bne.n	80013f2 <HAL_PCD_MspInit+0x102>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001320:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001324:	f04f 0300 	mov.w	r3, #0
 8001328:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 800132c:	2301      	movs	r3, #1
 800132e:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 8001330:	2318      	movs	r3, #24
 8001332:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001334:	2302      	movs	r3, #2
 8001336:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8001338:	2304      	movs	r3, #4
 800133a:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 800133c:	2302      	movs	r3, #2
 800133e:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001340:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001344:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001346:	2300      	movs	r3, #0
 8001348:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 800134a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800134e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001352:	f107 0310 	add.w	r3, r7, #16
 8001356:	4618      	mov	r0, r3
 8001358:	f003 f830 	bl	80043bc <HAL_RCCEx_PeriphCLKConfig>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <HAL_PCD_MspInit+0x76>
    {
      Error_Handler();
 8001362:	f7ff fe11 	bl	8000f88 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001366:	f001 fff1 	bl	800334c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800136a:	4b25      	ldr	r3, [pc, #148]	; (8001400 <HAL_PCD_MspInit+0x110>)
 800136c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001370:	4a23      	ldr	r2, [pc, #140]	; (8001400 <HAL_PCD_MspInit+0x110>)
 8001372:	f043 0301 	orr.w	r3, r3, #1
 8001376:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800137a:	4b21      	ldr	r3, [pc, #132]	; (8001400 <HAL_PCD_MspInit+0x110>)
 800137c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001380:	f003 0301 	and.w	r3, r3, #1
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001388:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800138c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001390:	2302      	movs	r3, #2
 8001392:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139c:	2300      	movs	r3, #0
 800139e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80013a2:	230a      	movs	r3, #10
 80013a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013ac:	4619      	mov	r1, r3
 80013ae:	4815      	ldr	r0, [pc, #84]	; (8001404 <HAL_PCD_MspInit+0x114>)
 80013b0:	f001 fc32 	bl	8002c18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013bc:	2300      	movs	r3, #0
 80013be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013cc:	4619      	mov	r1, r3
 80013ce:	480d      	ldr	r0, [pc, #52]	; (8001404 <HAL_PCD_MspInit+0x114>)
 80013d0:	f001 fc22 	bl	8002c18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80013d4:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <HAL_PCD_MspInit+0x110>)
 80013d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013da:	4a09      	ldr	r2, [pc, #36]	; (8001400 <HAL_PCD_MspInit+0x110>)
 80013dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80013e0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <HAL_PCD_MspInit+0x110>)
 80013e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80013ee:	60bb      	str	r3, [r7, #8]
 80013f0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80013f2:	bf00      	nop
 80013f4:	37e8      	adds	r7, #232	; 0xe8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40080000 	.word	0x40080000
 8001400:	58024400 	.word	0x58024400
 8001404:	58020000 	.word	0x58020000

08001408 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b090      	sub	sp, #64	; 0x40
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM12 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b0f      	cmp	r3, #15
 8001414:	d827      	bhi.n	8001466 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, TickPriority ,0U);
 8001416:	2200      	movs	r2, #0
 8001418:	6879      	ldr	r1, [r7, #4]
 800141a:	202b      	movs	r0, #43	; 0x2b
 800141c:	f000 fa4c 	bl	80018b8 <HAL_NVIC_SetPriority>

  /* Enable the TIM12 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001420:	202b      	movs	r0, #43	; 0x2b
 8001422:	f000 fa63 	bl	80018ec <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001426:	4a29      	ldr	r2, [pc, #164]	; (80014cc <HAL_InitTick+0xc4>)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM12 clock */
  __HAL_RCC_TIM12_CLK_ENABLE();
 800142c:	4b28      	ldr	r3, [pc, #160]	; (80014d0 <HAL_InitTick+0xc8>)
 800142e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001432:	4a27      	ldr	r2, [pc, #156]	; (80014d0 <HAL_InitTick+0xc8>)
 8001434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001438:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800143c:	4b24      	ldr	r3, [pc, #144]	; (80014d0 <HAL_InitTick+0xc8>)
 800143e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800144a:	f107 0210 	add.w	r2, r7, #16
 800144e:	f107 0314 	add.w	r3, r7, #20
 8001452:	4611      	mov	r1, r2
 8001454:	4618      	mov	r0, r3
 8001456:	f002 ff6f 	bl	8004338 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800145a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800145c:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM12 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800145e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001460:	2b00      	cmp	r3, #0
 8001462:	d106      	bne.n	8001472 <HAL_InitTick+0x6a>
 8001464:	e001      	b.n	800146a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e02b      	b.n	80014c2 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800146a:	f002 ff39 	bl	80042e0 <HAL_RCC_GetPCLK1Freq>
 800146e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001470:	e004      	b.n	800147c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001472:	f002 ff35 	bl	80042e0 <HAL_RCC_GetPCLK1Freq>
 8001476:	4603      	mov	r3, r0
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM12 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800147c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800147e:	4a15      	ldr	r2, [pc, #84]	; (80014d4 <HAL_InitTick+0xcc>)
 8001480:	fba2 2303 	umull	r2, r3, r2, r3
 8001484:	0c9b      	lsrs	r3, r3, #18
 8001486:	3b01      	subs	r3, #1
 8001488:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM12 */
  htim12.Instance = TIM12;
 800148a:	4b13      	ldr	r3, [pc, #76]	; (80014d8 <HAL_InitTick+0xd0>)
 800148c:	4a13      	ldr	r2, [pc, #76]	; (80014dc <HAL_InitTick+0xd4>)
 800148e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM12CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim12.Init.Period = (1000000U / 1000U) - 1U;
 8001490:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <HAL_InitTick+0xd0>)
 8001492:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001496:	60da      	str	r2, [r3, #12]
  htim12.Init.Prescaler = uwPrescalerValue;
 8001498:	4a0f      	ldr	r2, [pc, #60]	; (80014d8 <HAL_InitTick+0xd0>)
 800149a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800149c:	6053      	str	r3, [r2, #4]
  htim12.Init.ClockDivision = 0;
 800149e:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <HAL_InitTick+0xd0>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	611a      	str	r2, [r3, #16]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a4:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <HAL_InitTick+0xd0>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim12) == HAL_OK)
 80014aa:	480b      	ldr	r0, [pc, #44]	; (80014d8 <HAL_InitTick+0xd0>)
 80014ac:	f004 fdb2 	bl	8006014 <HAL_TIM_Base_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d104      	bne.n	80014c0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim12);
 80014b6:	4808      	ldr	r0, [pc, #32]	; (80014d8 <HAL_InitTick+0xd0>)
 80014b8:	f004 fe04 	bl	80060c4 <HAL_TIM_Base_Start_IT>
 80014bc:	4603      	mov	r3, r0
 80014be:	e000      	b.n	80014c2 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3740      	adds	r7, #64	; 0x40
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	24000008 	.word	0x24000008
 80014d0:	58024400 	.word	0x58024400
 80014d4:	431bde83 	.word	0x431bde83
 80014d8:	24000848 	.word	0x24000848
 80014dc:	40001800 	.word	0x40001800

080014e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014e4:	e7fe      	b.n	80014e4 <NMI_Handler+0x4>

080014e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ea:	e7fe      	b.n	80014ea <HardFault_Handler+0x4>

080014ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f0:	e7fe      	b.n	80014f0 <MemManage_Handler+0x4>

080014f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014f2:	b480      	push	{r7}
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014f6:	e7fe      	b.n	80014f6 <BusFault_Handler+0x4>

080014f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014fc:	e7fe      	b.n	80014fc <UsageFault_Handler+0x4>

080014fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014fe:	b480      	push	{r7}
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001510:	4802      	ldr	r0, [pc, #8]	; (800151c <TIM2_IRQHandler+0x10>)
 8001512:	f004 ffb5 	bl	8006480 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	24000228 	.word	0x24000228

08001520 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001524:	4802      	ldr	r0, [pc, #8]	; (8001530 <USART3_IRQHandler+0x10>)
 8001526:	f005 fed3 	bl	80072d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	24000274 	.word	0x24000274

08001534 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8001538:	4802      	ldr	r0, [pc, #8]	; (8001544 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 800153a:	f004 ffa1 	bl	8006480 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	24000848 	.word	0x24000848

08001548 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001550:	4a14      	ldr	r2, [pc, #80]	; (80015a4 <_sbrk+0x5c>)
 8001552:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <_sbrk+0x60>)
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800155c:	4b13      	ldr	r3, [pc, #76]	; (80015ac <_sbrk+0x64>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d102      	bne.n	800156a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001564:	4b11      	ldr	r3, [pc, #68]	; (80015ac <_sbrk+0x64>)
 8001566:	4a12      	ldr	r2, [pc, #72]	; (80015b0 <_sbrk+0x68>)
 8001568:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <_sbrk+0x64>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4413      	add	r3, r2
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	429a      	cmp	r2, r3
 8001576:	d207      	bcs.n	8001588 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001578:	f00a fcae 	bl	800bed8 <__errno>
 800157c:	4603      	mov	r3, r0
 800157e:	220c      	movs	r2, #12
 8001580:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001582:	f04f 33ff 	mov.w	r3, #4294967295
 8001586:	e009      	b.n	800159c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001588:	4b08      	ldr	r3, [pc, #32]	; (80015ac <_sbrk+0x64>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800158e:	4b07      	ldr	r3, [pc, #28]	; (80015ac <_sbrk+0x64>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4413      	add	r3, r2
 8001596:	4a05      	ldr	r2, [pc, #20]	; (80015ac <_sbrk+0x64>)
 8001598:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800159a:	68fb      	ldr	r3, [r7, #12]
}
 800159c:	4618      	mov	r0, r3
 800159e:	3718      	adds	r7, #24
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	24080000 	.word	0x24080000
 80015a8:	00000400 	.word	0x00000400
 80015ac:	24000894 	.word	0x24000894
 80015b0:	240053d0 	.word	0x240053d0

080015b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80015b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015ec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80015b8:	f7ff f860 	bl	800067c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015bc:	480c      	ldr	r0, [pc, #48]	; (80015f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015be:	490d      	ldr	r1, [pc, #52]	; (80015f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015c0:	4a0d      	ldr	r2, [pc, #52]	; (80015f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015c4:	e002      	b.n	80015cc <LoopCopyDataInit>

080015c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ca:	3304      	adds	r3, #4

080015cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d0:	d3f9      	bcc.n	80015c6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015d2:	4a0a      	ldr	r2, [pc, #40]	; (80015fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015d4:	4c0a      	ldr	r4, [pc, #40]	; (8001600 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015d8:	e001      	b.n	80015de <LoopFillZerobss>

080015da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015dc:	3204      	adds	r2, #4

080015de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e0:	d3fb      	bcc.n	80015da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015e2:	f00a fc7f 	bl	800bee4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015e6:	f7ff f99f 	bl	8000928 <main>
  bx  lr
 80015ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015ec:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80015f0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80015f4:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 80015f8:	0800c914 	.word	0x0800c914
  ldr r2, =_sbss
 80015fc:	24000124 	.word	0x24000124
  ldr r4, =_ebss
 8001600:	240053cc 	.word	0x240053cc

08001604 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001604:	e7fe      	b.n	8001604 <ADC3_IRQHandler>
	...

08001608 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800160e:	2003      	movs	r0, #3
 8001610:	f000 f947 	bl	80018a2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001614:	f002 fcba 	bl	8003f8c <HAL_RCC_GetSysClockFreq>
 8001618:	4602      	mov	r2, r0
 800161a:	4b15      	ldr	r3, [pc, #84]	; (8001670 <HAL_Init+0x68>)
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	0a1b      	lsrs	r3, r3, #8
 8001620:	f003 030f 	and.w	r3, r3, #15
 8001624:	4913      	ldr	r1, [pc, #76]	; (8001674 <HAL_Init+0x6c>)
 8001626:	5ccb      	ldrb	r3, [r1, r3]
 8001628:	f003 031f 	and.w	r3, r3, #31
 800162c:	fa22 f303 	lsr.w	r3, r2, r3
 8001630:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001632:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <HAL_Init+0x68>)
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	f003 030f 	and.w	r3, r3, #15
 800163a:	4a0e      	ldr	r2, [pc, #56]	; (8001674 <HAL_Init+0x6c>)
 800163c:	5cd3      	ldrb	r3, [r2, r3]
 800163e:	f003 031f 	and.w	r3, r3, #31
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	fa22 f303 	lsr.w	r3, r2, r3
 8001648:	4a0b      	ldr	r2, [pc, #44]	; (8001678 <HAL_Init+0x70>)
 800164a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800164c:	4a0b      	ldr	r2, [pc, #44]	; (800167c <HAL_Init+0x74>)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001652:	200f      	movs	r0, #15
 8001654:	f7ff fed8 	bl	8001408 <HAL_InitTick>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e002      	b.n	8001668 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001662:	f7ff fc97 	bl	8000f94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001666:	2300      	movs	r3, #0
}
 8001668:	4618      	mov	r0, r3
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	58024400 	.word	0x58024400
 8001674:	0800c82c 	.word	0x0800c82c
 8001678:	24000004 	.word	0x24000004
 800167c:	24000000 	.word	0x24000000

08001680 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001684:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <HAL_IncTick+0x20>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	461a      	mov	r2, r3
 800168a:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <HAL_IncTick+0x24>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4413      	add	r3, r2
 8001690:	4a04      	ldr	r2, [pc, #16]	; (80016a4 <HAL_IncTick+0x24>)
 8001692:	6013      	str	r3, [r2, #0]
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	2400000c 	.word	0x2400000c
 80016a4:	24000898 	.word	0x24000898

080016a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  return uwTick;
 80016ac:	4b03      	ldr	r3, [pc, #12]	; (80016bc <HAL_GetTick+0x14>)
 80016ae:	681b      	ldr	r3, [r3, #0]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	24000898 	.word	0x24000898

080016c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016c8:	f7ff ffee 	bl	80016a8 <HAL_GetTick>
 80016cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016d8:	d005      	beq.n	80016e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016da:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <HAL_Delay+0x44>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	461a      	mov	r2, r3
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	4413      	add	r3, r2
 80016e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016e6:	bf00      	nop
 80016e8:	f7ff ffde 	bl	80016a8 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d8f7      	bhi.n	80016e8 <HAL_Delay+0x28>
  {
  }
}
 80016f8:	bf00      	nop
 80016fa:	bf00      	nop
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	2400000c 	.word	0x2400000c

08001708 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800170c:	4b03      	ldr	r3, [pc, #12]	; (800171c <HAL_GetREVID+0x14>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	0c1b      	lsrs	r3, r3, #16
}
 8001712:	4618      	mov	r0, r3
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	5c001000 	.word	0x5c001000

08001720 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001730:	4904      	ldr	r1, [pc, #16]	; (8001744 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4313      	orrs	r3, r2
 8001736:	604b      	str	r3, [r1, #4]
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	58000400 	.word	0x58000400

08001748 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001758:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <__NVIC_SetPriorityGrouping+0x40>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800175e:	68ba      	ldr	r2, [r7, #8]
 8001760:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001764:	4013      	ands	r3, r2
 8001766:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <__NVIC_SetPriorityGrouping+0x44>)
 8001772:	4313      	orrs	r3, r2
 8001774:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001776:	4a04      	ldr	r2, [pc, #16]	; (8001788 <__NVIC_SetPriorityGrouping+0x40>)
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	60d3      	str	r3, [r2, #12]
}
 800177c:	bf00      	nop
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	e000ed00 	.word	0xe000ed00
 800178c:	05fa0000 	.word	0x05fa0000

08001790 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001794:	4b04      	ldr	r3, [pc, #16]	; (80017a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	0a1b      	lsrs	r3, r3, #8
 800179a:	f003 0307 	and.w	r3, r3, #7
}
 800179e:	4618      	mov	r0, r3
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	db0b      	blt.n	80017d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017be:	88fb      	ldrh	r3, [r7, #6]
 80017c0:	f003 021f 	and.w	r2, r3, #31
 80017c4:	4907      	ldr	r1, [pc, #28]	; (80017e4 <__NVIC_EnableIRQ+0x38>)
 80017c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ca:	095b      	lsrs	r3, r3, #5
 80017cc:	2001      	movs	r0, #1
 80017ce:	fa00 f202 	lsl.w	r2, r0, r2
 80017d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	e000e100 	.word	0xe000e100

080017e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	6039      	str	r1, [r7, #0]
 80017f2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	db0a      	blt.n	8001812 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	490c      	ldr	r1, [pc, #48]	; (8001834 <__NVIC_SetPriority+0x4c>)
 8001802:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001806:	0112      	lsls	r2, r2, #4
 8001808:	b2d2      	uxtb	r2, r2
 800180a:	440b      	add	r3, r1
 800180c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001810:	e00a      	b.n	8001828 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	b2da      	uxtb	r2, r3
 8001816:	4908      	ldr	r1, [pc, #32]	; (8001838 <__NVIC_SetPriority+0x50>)
 8001818:	88fb      	ldrh	r3, [r7, #6]
 800181a:	f003 030f 	and.w	r3, r3, #15
 800181e:	3b04      	subs	r3, #4
 8001820:	0112      	lsls	r2, r2, #4
 8001822:	b2d2      	uxtb	r2, r2
 8001824:	440b      	add	r3, r1
 8001826:	761a      	strb	r2, [r3, #24]
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000e100 	.word	0xe000e100
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800183c:	b480      	push	{r7}
 800183e:	b089      	sub	sp, #36	; 0x24
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	f1c3 0307 	rsb	r3, r3, #7
 8001856:	2b04      	cmp	r3, #4
 8001858:	bf28      	it	cs
 800185a:	2304      	movcs	r3, #4
 800185c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	3304      	adds	r3, #4
 8001862:	2b06      	cmp	r3, #6
 8001864:	d902      	bls.n	800186c <NVIC_EncodePriority+0x30>
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	3b03      	subs	r3, #3
 800186a:	e000      	b.n	800186e <NVIC_EncodePriority+0x32>
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001870:	f04f 32ff 	mov.w	r2, #4294967295
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43da      	mvns	r2, r3
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	401a      	ands	r2, r3
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001884:	f04f 31ff 	mov.w	r1, #4294967295
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	fa01 f303 	lsl.w	r3, r1, r3
 800188e:	43d9      	mvns	r1, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001894:	4313      	orrs	r3, r2
         );
}
 8001896:	4618      	mov	r0, r3
 8001898:	3724      	adds	r7, #36	; 0x24
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b082      	sub	sp, #8
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7ff ff4c 	bl	8001748 <__NVIC_SetPriorityGrouping>
}
 80018b0:	bf00      	nop
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
 80018c4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018c6:	f7ff ff63 	bl	8001790 <__NVIC_GetPriorityGrouping>
 80018ca:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	68b9      	ldr	r1, [r7, #8]
 80018d0:	6978      	ldr	r0, [r7, #20]
 80018d2:	f7ff ffb3 	bl	800183c <NVIC_EncodePriority>
 80018d6:	4602      	mov	r2, r0
 80018d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018dc:	4611      	mov	r1, r2
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff ff82 	bl	80017e8 <__NVIC_SetPriority>
}
 80018e4:	bf00      	nop
 80018e6:	3718      	adds	r7, #24
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff ff56 	bl	80017ac <__NVIC_EnableIRQ>
}
 8001900:	bf00      	nop
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001910:	f7ff feca 	bl	80016a8 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d101      	bne.n	8001920 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e2dc      	b.n	8001eda <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001926:	b2db      	uxtb	r3, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d008      	beq.n	800193e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2280      	movs	r2, #128	; 0x80
 8001930:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e2cd      	b.n	8001eda <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a76      	ldr	r2, [pc, #472]	; (8001b1c <HAL_DMA_Abort+0x214>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d04a      	beq.n	80019de <HAL_DMA_Abort+0xd6>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a74      	ldr	r2, [pc, #464]	; (8001b20 <HAL_DMA_Abort+0x218>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d045      	beq.n	80019de <HAL_DMA_Abort+0xd6>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a73      	ldr	r2, [pc, #460]	; (8001b24 <HAL_DMA_Abort+0x21c>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d040      	beq.n	80019de <HAL_DMA_Abort+0xd6>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a71      	ldr	r2, [pc, #452]	; (8001b28 <HAL_DMA_Abort+0x220>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d03b      	beq.n	80019de <HAL_DMA_Abort+0xd6>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a70      	ldr	r2, [pc, #448]	; (8001b2c <HAL_DMA_Abort+0x224>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d036      	beq.n	80019de <HAL_DMA_Abort+0xd6>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a6e      	ldr	r2, [pc, #440]	; (8001b30 <HAL_DMA_Abort+0x228>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d031      	beq.n	80019de <HAL_DMA_Abort+0xd6>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a6d      	ldr	r2, [pc, #436]	; (8001b34 <HAL_DMA_Abort+0x22c>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d02c      	beq.n	80019de <HAL_DMA_Abort+0xd6>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a6b      	ldr	r2, [pc, #428]	; (8001b38 <HAL_DMA_Abort+0x230>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d027      	beq.n	80019de <HAL_DMA_Abort+0xd6>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a6a      	ldr	r2, [pc, #424]	; (8001b3c <HAL_DMA_Abort+0x234>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d022      	beq.n	80019de <HAL_DMA_Abort+0xd6>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a68      	ldr	r2, [pc, #416]	; (8001b40 <HAL_DMA_Abort+0x238>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d01d      	beq.n	80019de <HAL_DMA_Abort+0xd6>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a67      	ldr	r2, [pc, #412]	; (8001b44 <HAL_DMA_Abort+0x23c>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d018      	beq.n	80019de <HAL_DMA_Abort+0xd6>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a65      	ldr	r2, [pc, #404]	; (8001b48 <HAL_DMA_Abort+0x240>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d013      	beq.n	80019de <HAL_DMA_Abort+0xd6>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a64      	ldr	r2, [pc, #400]	; (8001b4c <HAL_DMA_Abort+0x244>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d00e      	beq.n	80019de <HAL_DMA_Abort+0xd6>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a62      	ldr	r2, [pc, #392]	; (8001b50 <HAL_DMA_Abort+0x248>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d009      	beq.n	80019de <HAL_DMA_Abort+0xd6>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a61      	ldr	r2, [pc, #388]	; (8001b54 <HAL_DMA_Abort+0x24c>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d004      	beq.n	80019de <HAL_DMA_Abort+0xd6>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a5f      	ldr	r2, [pc, #380]	; (8001b58 <HAL_DMA_Abort+0x250>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d101      	bne.n	80019e2 <HAL_DMA_Abort+0xda>
 80019de:	2301      	movs	r3, #1
 80019e0:	e000      	b.n	80019e4 <HAL_DMA_Abort+0xdc>
 80019e2:	2300      	movs	r3, #0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d013      	beq.n	8001a10 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f022 021e 	bic.w	r2, r2, #30
 80019f6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	695a      	ldr	r2, [r3, #20]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a06:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	617b      	str	r3, [r7, #20]
 8001a0e:	e00a      	b.n	8001a26 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f022 020e 	bic.w	r2, r2, #14
 8001a1e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a3c      	ldr	r2, [pc, #240]	; (8001b1c <HAL_DMA_Abort+0x214>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d072      	beq.n	8001b16 <HAL_DMA_Abort+0x20e>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a3a      	ldr	r2, [pc, #232]	; (8001b20 <HAL_DMA_Abort+0x218>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d06d      	beq.n	8001b16 <HAL_DMA_Abort+0x20e>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a39      	ldr	r2, [pc, #228]	; (8001b24 <HAL_DMA_Abort+0x21c>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d068      	beq.n	8001b16 <HAL_DMA_Abort+0x20e>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a37      	ldr	r2, [pc, #220]	; (8001b28 <HAL_DMA_Abort+0x220>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d063      	beq.n	8001b16 <HAL_DMA_Abort+0x20e>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a36      	ldr	r2, [pc, #216]	; (8001b2c <HAL_DMA_Abort+0x224>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d05e      	beq.n	8001b16 <HAL_DMA_Abort+0x20e>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a34      	ldr	r2, [pc, #208]	; (8001b30 <HAL_DMA_Abort+0x228>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d059      	beq.n	8001b16 <HAL_DMA_Abort+0x20e>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a33      	ldr	r2, [pc, #204]	; (8001b34 <HAL_DMA_Abort+0x22c>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d054      	beq.n	8001b16 <HAL_DMA_Abort+0x20e>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a31      	ldr	r2, [pc, #196]	; (8001b38 <HAL_DMA_Abort+0x230>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d04f      	beq.n	8001b16 <HAL_DMA_Abort+0x20e>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a30      	ldr	r2, [pc, #192]	; (8001b3c <HAL_DMA_Abort+0x234>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d04a      	beq.n	8001b16 <HAL_DMA_Abort+0x20e>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a2e      	ldr	r2, [pc, #184]	; (8001b40 <HAL_DMA_Abort+0x238>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d045      	beq.n	8001b16 <HAL_DMA_Abort+0x20e>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a2d      	ldr	r2, [pc, #180]	; (8001b44 <HAL_DMA_Abort+0x23c>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d040      	beq.n	8001b16 <HAL_DMA_Abort+0x20e>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a2b      	ldr	r2, [pc, #172]	; (8001b48 <HAL_DMA_Abort+0x240>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d03b      	beq.n	8001b16 <HAL_DMA_Abort+0x20e>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a2a      	ldr	r2, [pc, #168]	; (8001b4c <HAL_DMA_Abort+0x244>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d036      	beq.n	8001b16 <HAL_DMA_Abort+0x20e>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a28      	ldr	r2, [pc, #160]	; (8001b50 <HAL_DMA_Abort+0x248>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d031      	beq.n	8001b16 <HAL_DMA_Abort+0x20e>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a27      	ldr	r2, [pc, #156]	; (8001b54 <HAL_DMA_Abort+0x24c>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d02c      	beq.n	8001b16 <HAL_DMA_Abort+0x20e>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a25      	ldr	r2, [pc, #148]	; (8001b58 <HAL_DMA_Abort+0x250>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d027      	beq.n	8001b16 <HAL_DMA_Abort+0x20e>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a24      	ldr	r2, [pc, #144]	; (8001b5c <HAL_DMA_Abort+0x254>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d022      	beq.n	8001b16 <HAL_DMA_Abort+0x20e>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a22      	ldr	r2, [pc, #136]	; (8001b60 <HAL_DMA_Abort+0x258>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d01d      	beq.n	8001b16 <HAL_DMA_Abort+0x20e>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a21      	ldr	r2, [pc, #132]	; (8001b64 <HAL_DMA_Abort+0x25c>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d018      	beq.n	8001b16 <HAL_DMA_Abort+0x20e>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a1f      	ldr	r2, [pc, #124]	; (8001b68 <HAL_DMA_Abort+0x260>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d013      	beq.n	8001b16 <HAL_DMA_Abort+0x20e>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a1e      	ldr	r2, [pc, #120]	; (8001b6c <HAL_DMA_Abort+0x264>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d00e      	beq.n	8001b16 <HAL_DMA_Abort+0x20e>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a1c      	ldr	r2, [pc, #112]	; (8001b70 <HAL_DMA_Abort+0x268>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d009      	beq.n	8001b16 <HAL_DMA_Abort+0x20e>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a1b      	ldr	r2, [pc, #108]	; (8001b74 <HAL_DMA_Abort+0x26c>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d004      	beq.n	8001b16 <HAL_DMA_Abort+0x20e>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a19      	ldr	r2, [pc, #100]	; (8001b78 <HAL_DMA_Abort+0x270>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d132      	bne.n	8001b7c <HAL_DMA_Abort+0x274>
 8001b16:	2301      	movs	r3, #1
 8001b18:	e031      	b.n	8001b7e <HAL_DMA_Abort+0x276>
 8001b1a:	bf00      	nop
 8001b1c:	40020010 	.word	0x40020010
 8001b20:	40020028 	.word	0x40020028
 8001b24:	40020040 	.word	0x40020040
 8001b28:	40020058 	.word	0x40020058
 8001b2c:	40020070 	.word	0x40020070
 8001b30:	40020088 	.word	0x40020088
 8001b34:	400200a0 	.word	0x400200a0
 8001b38:	400200b8 	.word	0x400200b8
 8001b3c:	40020410 	.word	0x40020410
 8001b40:	40020428 	.word	0x40020428
 8001b44:	40020440 	.word	0x40020440
 8001b48:	40020458 	.word	0x40020458
 8001b4c:	40020470 	.word	0x40020470
 8001b50:	40020488 	.word	0x40020488
 8001b54:	400204a0 	.word	0x400204a0
 8001b58:	400204b8 	.word	0x400204b8
 8001b5c:	58025408 	.word	0x58025408
 8001b60:	5802541c 	.word	0x5802541c
 8001b64:	58025430 	.word	0x58025430
 8001b68:	58025444 	.word	0x58025444
 8001b6c:	58025458 	.word	0x58025458
 8001b70:	5802546c 	.word	0x5802546c
 8001b74:	58025480 	.word	0x58025480
 8001b78:	58025494 	.word	0x58025494
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d007      	beq.n	8001b92 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b90:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a6d      	ldr	r2, [pc, #436]	; (8001d4c <HAL_DMA_Abort+0x444>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d04a      	beq.n	8001c32 <HAL_DMA_Abort+0x32a>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a6b      	ldr	r2, [pc, #428]	; (8001d50 <HAL_DMA_Abort+0x448>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d045      	beq.n	8001c32 <HAL_DMA_Abort+0x32a>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a6a      	ldr	r2, [pc, #424]	; (8001d54 <HAL_DMA_Abort+0x44c>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d040      	beq.n	8001c32 <HAL_DMA_Abort+0x32a>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a68      	ldr	r2, [pc, #416]	; (8001d58 <HAL_DMA_Abort+0x450>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d03b      	beq.n	8001c32 <HAL_DMA_Abort+0x32a>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a67      	ldr	r2, [pc, #412]	; (8001d5c <HAL_DMA_Abort+0x454>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d036      	beq.n	8001c32 <HAL_DMA_Abort+0x32a>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a65      	ldr	r2, [pc, #404]	; (8001d60 <HAL_DMA_Abort+0x458>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d031      	beq.n	8001c32 <HAL_DMA_Abort+0x32a>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a64      	ldr	r2, [pc, #400]	; (8001d64 <HAL_DMA_Abort+0x45c>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d02c      	beq.n	8001c32 <HAL_DMA_Abort+0x32a>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a62      	ldr	r2, [pc, #392]	; (8001d68 <HAL_DMA_Abort+0x460>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d027      	beq.n	8001c32 <HAL_DMA_Abort+0x32a>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a61      	ldr	r2, [pc, #388]	; (8001d6c <HAL_DMA_Abort+0x464>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d022      	beq.n	8001c32 <HAL_DMA_Abort+0x32a>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a5f      	ldr	r2, [pc, #380]	; (8001d70 <HAL_DMA_Abort+0x468>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d01d      	beq.n	8001c32 <HAL_DMA_Abort+0x32a>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a5e      	ldr	r2, [pc, #376]	; (8001d74 <HAL_DMA_Abort+0x46c>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d018      	beq.n	8001c32 <HAL_DMA_Abort+0x32a>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a5c      	ldr	r2, [pc, #368]	; (8001d78 <HAL_DMA_Abort+0x470>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d013      	beq.n	8001c32 <HAL_DMA_Abort+0x32a>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a5b      	ldr	r2, [pc, #364]	; (8001d7c <HAL_DMA_Abort+0x474>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d00e      	beq.n	8001c32 <HAL_DMA_Abort+0x32a>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a59      	ldr	r2, [pc, #356]	; (8001d80 <HAL_DMA_Abort+0x478>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d009      	beq.n	8001c32 <HAL_DMA_Abort+0x32a>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a58      	ldr	r2, [pc, #352]	; (8001d84 <HAL_DMA_Abort+0x47c>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d004      	beq.n	8001c32 <HAL_DMA_Abort+0x32a>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a56      	ldr	r2, [pc, #344]	; (8001d88 <HAL_DMA_Abort+0x480>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d108      	bne.n	8001c44 <HAL_DMA_Abort+0x33c>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f022 0201 	bic.w	r2, r2, #1
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	e007      	b.n	8001c54 <HAL_DMA_Abort+0x34c>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f022 0201 	bic.w	r2, r2, #1
 8001c52:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001c54:	e013      	b.n	8001c7e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c56:	f7ff fd27 	bl	80016a8 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b05      	cmp	r3, #5
 8001c62:	d90c      	bls.n	8001c7e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2220      	movs	r2, #32
 8001c68:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2203      	movs	r2, #3
 8001c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e12d      	b.n	8001eda <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1e5      	bne.n	8001c56 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a2f      	ldr	r2, [pc, #188]	; (8001d4c <HAL_DMA_Abort+0x444>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d04a      	beq.n	8001d2a <HAL_DMA_Abort+0x422>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a2d      	ldr	r2, [pc, #180]	; (8001d50 <HAL_DMA_Abort+0x448>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d045      	beq.n	8001d2a <HAL_DMA_Abort+0x422>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a2c      	ldr	r2, [pc, #176]	; (8001d54 <HAL_DMA_Abort+0x44c>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d040      	beq.n	8001d2a <HAL_DMA_Abort+0x422>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a2a      	ldr	r2, [pc, #168]	; (8001d58 <HAL_DMA_Abort+0x450>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d03b      	beq.n	8001d2a <HAL_DMA_Abort+0x422>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a29      	ldr	r2, [pc, #164]	; (8001d5c <HAL_DMA_Abort+0x454>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d036      	beq.n	8001d2a <HAL_DMA_Abort+0x422>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a27      	ldr	r2, [pc, #156]	; (8001d60 <HAL_DMA_Abort+0x458>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d031      	beq.n	8001d2a <HAL_DMA_Abort+0x422>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a26      	ldr	r2, [pc, #152]	; (8001d64 <HAL_DMA_Abort+0x45c>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d02c      	beq.n	8001d2a <HAL_DMA_Abort+0x422>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a24      	ldr	r2, [pc, #144]	; (8001d68 <HAL_DMA_Abort+0x460>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d027      	beq.n	8001d2a <HAL_DMA_Abort+0x422>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a23      	ldr	r2, [pc, #140]	; (8001d6c <HAL_DMA_Abort+0x464>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d022      	beq.n	8001d2a <HAL_DMA_Abort+0x422>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a21      	ldr	r2, [pc, #132]	; (8001d70 <HAL_DMA_Abort+0x468>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d01d      	beq.n	8001d2a <HAL_DMA_Abort+0x422>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a20      	ldr	r2, [pc, #128]	; (8001d74 <HAL_DMA_Abort+0x46c>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d018      	beq.n	8001d2a <HAL_DMA_Abort+0x422>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a1e      	ldr	r2, [pc, #120]	; (8001d78 <HAL_DMA_Abort+0x470>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d013      	beq.n	8001d2a <HAL_DMA_Abort+0x422>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a1d      	ldr	r2, [pc, #116]	; (8001d7c <HAL_DMA_Abort+0x474>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d00e      	beq.n	8001d2a <HAL_DMA_Abort+0x422>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a1b      	ldr	r2, [pc, #108]	; (8001d80 <HAL_DMA_Abort+0x478>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d009      	beq.n	8001d2a <HAL_DMA_Abort+0x422>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a1a      	ldr	r2, [pc, #104]	; (8001d84 <HAL_DMA_Abort+0x47c>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d004      	beq.n	8001d2a <HAL_DMA_Abort+0x422>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a18      	ldr	r2, [pc, #96]	; (8001d88 <HAL_DMA_Abort+0x480>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d101      	bne.n	8001d2e <HAL_DMA_Abort+0x426>
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e000      	b.n	8001d30 <HAL_DMA_Abort+0x428>
 8001d2e:	2300      	movs	r3, #0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d02b      	beq.n	8001d8c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d38:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d3e:	f003 031f 	and.w	r3, r3, #31
 8001d42:	223f      	movs	r2, #63	; 0x3f
 8001d44:	409a      	lsls	r2, r3
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	609a      	str	r2, [r3, #8]
 8001d4a:	e02a      	b.n	8001da2 <HAL_DMA_Abort+0x49a>
 8001d4c:	40020010 	.word	0x40020010
 8001d50:	40020028 	.word	0x40020028
 8001d54:	40020040 	.word	0x40020040
 8001d58:	40020058 	.word	0x40020058
 8001d5c:	40020070 	.word	0x40020070
 8001d60:	40020088 	.word	0x40020088
 8001d64:	400200a0 	.word	0x400200a0
 8001d68:	400200b8 	.word	0x400200b8
 8001d6c:	40020410 	.word	0x40020410
 8001d70:	40020428 	.word	0x40020428
 8001d74:	40020440 	.word	0x40020440
 8001d78:	40020458 	.word	0x40020458
 8001d7c:	40020470 	.word	0x40020470
 8001d80:	40020488 	.word	0x40020488
 8001d84:	400204a0 	.word	0x400204a0
 8001d88:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d90:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d96:	f003 031f 	and.w	r3, r3, #31
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	409a      	lsls	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a4f      	ldr	r2, [pc, #316]	; (8001ee4 <HAL_DMA_Abort+0x5dc>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d072      	beq.n	8001e92 <HAL_DMA_Abort+0x58a>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a4d      	ldr	r2, [pc, #308]	; (8001ee8 <HAL_DMA_Abort+0x5e0>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d06d      	beq.n	8001e92 <HAL_DMA_Abort+0x58a>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a4c      	ldr	r2, [pc, #304]	; (8001eec <HAL_DMA_Abort+0x5e4>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d068      	beq.n	8001e92 <HAL_DMA_Abort+0x58a>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a4a      	ldr	r2, [pc, #296]	; (8001ef0 <HAL_DMA_Abort+0x5e8>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d063      	beq.n	8001e92 <HAL_DMA_Abort+0x58a>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a49      	ldr	r2, [pc, #292]	; (8001ef4 <HAL_DMA_Abort+0x5ec>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d05e      	beq.n	8001e92 <HAL_DMA_Abort+0x58a>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a47      	ldr	r2, [pc, #284]	; (8001ef8 <HAL_DMA_Abort+0x5f0>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d059      	beq.n	8001e92 <HAL_DMA_Abort+0x58a>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a46      	ldr	r2, [pc, #280]	; (8001efc <HAL_DMA_Abort+0x5f4>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d054      	beq.n	8001e92 <HAL_DMA_Abort+0x58a>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a44      	ldr	r2, [pc, #272]	; (8001f00 <HAL_DMA_Abort+0x5f8>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d04f      	beq.n	8001e92 <HAL_DMA_Abort+0x58a>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a43      	ldr	r2, [pc, #268]	; (8001f04 <HAL_DMA_Abort+0x5fc>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d04a      	beq.n	8001e92 <HAL_DMA_Abort+0x58a>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a41      	ldr	r2, [pc, #260]	; (8001f08 <HAL_DMA_Abort+0x600>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d045      	beq.n	8001e92 <HAL_DMA_Abort+0x58a>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a40      	ldr	r2, [pc, #256]	; (8001f0c <HAL_DMA_Abort+0x604>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d040      	beq.n	8001e92 <HAL_DMA_Abort+0x58a>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a3e      	ldr	r2, [pc, #248]	; (8001f10 <HAL_DMA_Abort+0x608>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d03b      	beq.n	8001e92 <HAL_DMA_Abort+0x58a>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a3d      	ldr	r2, [pc, #244]	; (8001f14 <HAL_DMA_Abort+0x60c>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d036      	beq.n	8001e92 <HAL_DMA_Abort+0x58a>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a3b      	ldr	r2, [pc, #236]	; (8001f18 <HAL_DMA_Abort+0x610>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d031      	beq.n	8001e92 <HAL_DMA_Abort+0x58a>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a3a      	ldr	r2, [pc, #232]	; (8001f1c <HAL_DMA_Abort+0x614>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d02c      	beq.n	8001e92 <HAL_DMA_Abort+0x58a>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a38      	ldr	r2, [pc, #224]	; (8001f20 <HAL_DMA_Abort+0x618>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d027      	beq.n	8001e92 <HAL_DMA_Abort+0x58a>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a37      	ldr	r2, [pc, #220]	; (8001f24 <HAL_DMA_Abort+0x61c>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d022      	beq.n	8001e92 <HAL_DMA_Abort+0x58a>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a35      	ldr	r2, [pc, #212]	; (8001f28 <HAL_DMA_Abort+0x620>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d01d      	beq.n	8001e92 <HAL_DMA_Abort+0x58a>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a34      	ldr	r2, [pc, #208]	; (8001f2c <HAL_DMA_Abort+0x624>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d018      	beq.n	8001e92 <HAL_DMA_Abort+0x58a>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a32      	ldr	r2, [pc, #200]	; (8001f30 <HAL_DMA_Abort+0x628>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d013      	beq.n	8001e92 <HAL_DMA_Abort+0x58a>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a31      	ldr	r2, [pc, #196]	; (8001f34 <HAL_DMA_Abort+0x62c>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d00e      	beq.n	8001e92 <HAL_DMA_Abort+0x58a>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a2f      	ldr	r2, [pc, #188]	; (8001f38 <HAL_DMA_Abort+0x630>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d009      	beq.n	8001e92 <HAL_DMA_Abort+0x58a>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a2e      	ldr	r2, [pc, #184]	; (8001f3c <HAL_DMA_Abort+0x634>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d004      	beq.n	8001e92 <HAL_DMA_Abort+0x58a>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a2c      	ldr	r2, [pc, #176]	; (8001f40 <HAL_DMA_Abort+0x638>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d101      	bne.n	8001e96 <HAL_DMA_Abort+0x58e>
 8001e92:	2301      	movs	r3, #1
 8001e94:	e000      	b.n	8001e98 <HAL_DMA_Abort+0x590>
 8001e96:	2300      	movs	r3, #0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d015      	beq.n	8001ec8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001ea4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00c      	beq.n	8001ec8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001eb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ebc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001ec6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3718      	adds	r7, #24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40020010 	.word	0x40020010
 8001ee8:	40020028 	.word	0x40020028
 8001eec:	40020040 	.word	0x40020040
 8001ef0:	40020058 	.word	0x40020058
 8001ef4:	40020070 	.word	0x40020070
 8001ef8:	40020088 	.word	0x40020088
 8001efc:	400200a0 	.word	0x400200a0
 8001f00:	400200b8 	.word	0x400200b8
 8001f04:	40020410 	.word	0x40020410
 8001f08:	40020428 	.word	0x40020428
 8001f0c:	40020440 	.word	0x40020440
 8001f10:	40020458 	.word	0x40020458
 8001f14:	40020470 	.word	0x40020470
 8001f18:	40020488 	.word	0x40020488
 8001f1c:	400204a0 	.word	0x400204a0
 8001f20:	400204b8 	.word	0x400204b8
 8001f24:	58025408 	.word	0x58025408
 8001f28:	5802541c 	.word	0x5802541c
 8001f2c:	58025430 	.word	0x58025430
 8001f30:	58025444 	.word	0x58025444
 8001f34:	58025458 	.word	0x58025458
 8001f38:	5802546c 	.word	0x5802546c
 8001f3c:	58025480 	.word	0x58025480
 8001f40:	58025494 	.word	0x58025494

08001f44 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e237      	b.n	80023c6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d004      	beq.n	8001f6c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2280      	movs	r2, #128	; 0x80
 8001f66:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e22c      	b.n	80023c6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a5c      	ldr	r2, [pc, #368]	; (80020e4 <HAL_DMA_Abort_IT+0x1a0>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d04a      	beq.n	800200c <HAL_DMA_Abort_IT+0xc8>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a5b      	ldr	r2, [pc, #364]	; (80020e8 <HAL_DMA_Abort_IT+0x1a4>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d045      	beq.n	800200c <HAL_DMA_Abort_IT+0xc8>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a59      	ldr	r2, [pc, #356]	; (80020ec <HAL_DMA_Abort_IT+0x1a8>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d040      	beq.n	800200c <HAL_DMA_Abort_IT+0xc8>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a58      	ldr	r2, [pc, #352]	; (80020f0 <HAL_DMA_Abort_IT+0x1ac>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d03b      	beq.n	800200c <HAL_DMA_Abort_IT+0xc8>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a56      	ldr	r2, [pc, #344]	; (80020f4 <HAL_DMA_Abort_IT+0x1b0>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d036      	beq.n	800200c <HAL_DMA_Abort_IT+0xc8>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a55      	ldr	r2, [pc, #340]	; (80020f8 <HAL_DMA_Abort_IT+0x1b4>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d031      	beq.n	800200c <HAL_DMA_Abort_IT+0xc8>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a53      	ldr	r2, [pc, #332]	; (80020fc <HAL_DMA_Abort_IT+0x1b8>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d02c      	beq.n	800200c <HAL_DMA_Abort_IT+0xc8>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a52      	ldr	r2, [pc, #328]	; (8002100 <HAL_DMA_Abort_IT+0x1bc>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d027      	beq.n	800200c <HAL_DMA_Abort_IT+0xc8>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a50      	ldr	r2, [pc, #320]	; (8002104 <HAL_DMA_Abort_IT+0x1c0>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d022      	beq.n	800200c <HAL_DMA_Abort_IT+0xc8>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a4f      	ldr	r2, [pc, #316]	; (8002108 <HAL_DMA_Abort_IT+0x1c4>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d01d      	beq.n	800200c <HAL_DMA_Abort_IT+0xc8>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a4d      	ldr	r2, [pc, #308]	; (800210c <HAL_DMA_Abort_IT+0x1c8>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d018      	beq.n	800200c <HAL_DMA_Abort_IT+0xc8>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a4c      	ldr	r2, [pc, #304]	; (8002110 <HAL_DMA_Abort_IT+0x1cc>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d013      	beq.n	800200c <HAL_DMA_Abort_IT+0xc8>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a4a      	ldr	r2, [pc, #296]	; (8002114 <HAL_DMA_Abort_IT+0x1d0>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d00e      	beq.n	800200c <HAL_DMA_Abort_IT+0xc8>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a49      	ldr	r2, [pc, #292]	; (8002118 <HAL_DMA_Abort_IT+0x1d4>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d009      	beq.n	800200c <HAL_DMA_Abort_IT+0xc8>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a47      	ldr	r2, [pc, #284]	; (800211c <HAL_DMA_Abort_IT+0x1d8>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d004      	beq.n	800200c <HAL_DMA_Abort_IT+0xc8>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a46      	ldr	r2, [pc, #280]	; (8002120 <HAL_DMA_Abort_IT+0x1dc>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d101      	bne.n	8002010 <HAL_DMA_Abort_IT+0xcc>
 800200c:	2301      	movs	r3, #1
 800200e:	e000      	b.n	8002012 <HAL_DMA_Abort_IT+0xce>
 8002010:	2300      	movs	r3, #0
 8002012:	2b00      	cmp	r3, #0
 8002014:	f000 8086 	beq.w	8002124 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2204      	movs	r2, #4
 800201c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a2f      	ldr	r2, [pc, #188]	; (80020e4 <HAL_DMA_Abort_IT+0x1a0>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d04a      	beq.n	80020c0 <HAL_DMA_Abort_IT+0x17c>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a2e      	ldr	r2, [pc, #184]	; (80020e8 <HAL_DMA_Abort_IT+0x1a4>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d045      	beq.n	80020c0 <HAL_DMA_Abort_IT+0x17c>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a2c      	ldr	r2, [pc, #176]	; (80020ec <HAL_DMA_Abort_IT+0x1a8>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d040      	beq.n	80020c0 <HAL_DMA_Abort_IT+0x17c>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a2b      	ldr	r2, [pc, #172]	; (80020f0 <HAL_DMA_Abort_IT+0x1ac>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d03b      	beq.n	80020c0 <HAL_DMA_Abort_IT+0x17c>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a29      	ldr	r2, [pc, #164]	; (80020f4 <HAL_DMA_Abort_IT+0x1b0>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d036      	beq.n	80020c0 <HAL_DMA_Abort_IT+0x17c>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a28      	ldr	r2, [pc, #160]	; (80020f8 <HAL_DMA_Abort_IT+0x1b4>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d031      	beq.n	80020c0 <HAL_DMA_Abort_IT+0x17c>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a26      	ldr	r2, [pc, #152]	; (80020fc <HAL_DMA_Abort_IT+0x1b8>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d02c      	beq.n	80020c0 <HAL_DMA_Abort_IT+0x17c>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a25      	ldr	r2, [pc, #148]	; (8002100 <HAL_DMA_Abort_IT+0x1bc>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d027      	beq.n	80020c0 <HAL_DMA_Abort_IT+0x17c>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a23      	ldr	r2, [pc, #140]	; (8002104 <HAL_DMA_Abort_IT+0x1c0>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d022      	beq.n	80020c0 <HAL_DMA_Abort_IT+0x17c>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a22      	ldr	r2, [pc, #136]	; (8002108 <HAL_DMA_Abort_IT+0x1c4>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d01d      	beq.n	80020c0 <HAL_DMA_Abort_IT+0x17c>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a20      	ldr	r2, [pc, #128]	; (800210c <HAL_DMA_Abort_IT+0x1c8>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d018      	beq.n	80020c0 <HAL_DMA_Abort_IT+0x17c>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a1f      	ldr	r2, [pc, #124]	; (8002110 <HAL_DMA_Abort_IT+0x1cc>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d013      	beq.n	80020c0 <HAL_DMA_Abort_IT+0x17c>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a1d      	ldr	r2, [pc, #116]	; (8002114 <HAL_DMA_Abort_IT+0x1d0>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d00e      	beq.n	80020c0 <HAL_DMA_Abort_IT+0x17c>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a1c      	ldr	r2, [pc, #112]	; (8002118 <HAL_DMA_Abort_IT+0x1d4>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d009      	beq.n	80020c0 <HAL_DMA_Abort_IT+0x17c>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a1a      	ldr	r2, [pc, #104]	; (800211c <HAL_DMA_Abort_IT+0x1d8>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d004      	beq.n	80020c0 <HAL_DMA_Abort_IT+0x17c>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a19      	ldr	r2, [pc, #100]	; (8002120 <HAL_DMA_Abort_IT+0x1dc>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d108      	bne.n	80020d2 <HAL_DMA_Abort_IT+0x18e>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f022 0201 	bic.w	r2, r2, #1
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	e178      	b.n	80023c4 <HAL_DMA_Abort_IT+0x480>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f022 0201 	bic.w	r2, r2, #1
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	e16f      	b.n	80023c4 <HAL_DMA_Abort_IT+0x480>
 80020e4:	40020010 	.word	0x40020010
 80020e8:	40020028 	.word	0x40020028
 80020ec:	40020040 	.word	0x40020040
 80020f0:	40020058 	.word	0x40020058
 80020f4:	40020070 	.word	0x40020070
 80020f8:	40020088 	.word	0x40020088
 80020fc:	400200a0 	.word	0x400200a0
 8002100:	400200b8 	.word	0x400200b8
 8002104:	40020410 	.word	0x40020410
 8002108:	40020428 	.word	0x40020428
 800210c:	40020440 	.word	0x40020440
 8002110:	40020458 	.word	0x40020458
 8002114:	40020470 	.word	0x40020470
 8002118:	40020488 	.word	0x40020488
 800211c:	400204a0 	.word	0x400204a0
 8002120:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 020e 	bic.w	r2, r2, #14
 8002132:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a6c      	ldr	r2, [pc, #432]	; (80022ec <HAL_DMA_Abort_IT+0x3a8>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d04a      	beq.n	80021d4 <HAL_DMA_Abort_IT+0x290>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a6b      	ldr	r2, [pc, #428]	; (80022f0 <HAL_DMA_Abort_IT+0x3ac>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d045      	beq.n	80021d4 <HAL_DMA_Abort_IT+0x290>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a69      	ldr	r2, [pc, #420]	; (80022f4 <HAL_DMA_Abort_IT+0x3b0>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d040      	beq.n	80021d4 <HAL_DMA_Abort_IT+0x290>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a68      	ldr	r2, [pc, #416]	; (80022f8 <HAL_DMA_Abort_IT+0x3b4>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d03b      	beq.n	80021d4 <HAL_DMA_Abort_IT+0x290>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a66      	ldr	r2, [pc, #408]	; (80022fc <HAL_DMA_Abort_IT+0x3b8>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d036      	beq.n	80021d4 <HAL_DMA_Abort_IT+0x290>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a65      	ldr	r2, [pc, #404]	; (8002300 <HAL_DMA_Abort_IT+0x3bc>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d031      	beq.n	80021d4 <HAL_DMA_Abort_IT+0x290>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a63      	ldr	r2, [pc, #396]	; (8002304 <HAL_DMA_Abort_IT+0x3c0>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d02c      	beq.n	80021d4 <HAL_DMA_Abort_IT+0x290>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a62      	ldr	r2, [pc, #392]	; (8002308 <HAL_DMA_Abort_IT+0x3c4>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d027      	beq.n	80021d4 <HAL_DMA_Abort_IT+0x290>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a60      	ldr	r2, [pc, #384]	; (800230c <HAL_DMA_Abort_IT+0x3c8>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d022      	beq.n	80021d4 <HAL_DMA_Abort_IT+0x290>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a5f      	ldr	r2, [pc, #380]	; (8002310 <HAL_DMA_Abort_IT+0x3cc>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d01d      	beq.n	80021d4 <HAL_DMA_Abort_IT+0x290>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a5d      	ldr	r2, [pc, #372]	; (8002314 <HAL_DMA_Abort_IT+0x3d0>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d018      	beq.n	80021d4 <HAL_DMA_Abort_IT+0x290>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a5c      	ldr	r2, [pc, #368]	; (8002318 <HAL_DMA_Abort_IT+0x3d4>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d013      	beq.n	80021d4 <HAL_DMA_Abort_IT+0x290>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a5a      	ldr	r2, [pc, #360]	; (800231c <HAL_DMA_Abort_IT+0x3d8>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d00e      	beq.n	80021d4 <HAL_DMA_Abort_IT+0x290>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a59      	ldr	r2, [pc, #356]	; (8002320 <HAL_DMA_Abort_IT+0x3dc>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d009      	beq.n	80021d4 <HAL_DMA_Abort_IT+0x290>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a57      	ldr	r2, [pc, #348]	; (8002324 <HAL_DMA_Abort_IT+0x3e0>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d004      	beq.n	80021d4 <HAL_DMA_Abort_IT+0x290>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a56      	ldr	r2, [pc, #344]	; (8002328 <HAL_DMA_Abort_IT+0x3e4>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d108      	bne.n	80021e6 <HAL_DMA_Abort_IT+0x2a2>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f022 0201 	bic.w	r2, r2, #1
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	e007      	b.n	80021f6 <HAL_DMA_Abort_IT+0x2b2>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f022 0201 	bic.w	r2, r2, #1
 80021f4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a3c      	ldr	r2, [pc, #240]	; (80022ec <HAL_DMA_Abort_IT+0x3a8>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d072      	beq.n	80022e6 <HAL_DMA_Abort_IT+0x3a2>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a3a      	ldr	r2, [pc, #232]	; (80022f0 <HAL_DMA_Abort_IT+0x3ac>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d06d      	beq.n	80022e6 <HAL_DMA_Abort_IT+0x3a2>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a39      	ldr	r2, [pc, #228]	; (80022f4 <HAL_DMA_Abort_IT+0x3b0>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d068      	beq.n	80022e6 <HAL_DMA_Abort_IT+0x3a2>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a37      	ldr	r2, [pc, #220]	; (80022f8 <HAL_DMA_Abort_IT+0x3b4>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d063      	beq.n	80022e6 <HAL_DMA_Abort_IT+0x3a2>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a36      	ldr	r2, [pc, #216]	; (80022fc <HAL_DMA_Abort_IT+0x3b8>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d05e      	beq.n	80022e6 <HAL_DMA_Abort_IT+0x3a2>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a34      	ldr	r2, [pc, #208]	; (8002300 <HAL_DMA_Abort_IT+0x3bc>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d059      	beq.n	80022e6 <HAL_DMA_Abort_IT+0x3a2>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a33      	ldr	r2, [pc, #204]	; (8002304 <HAL_DMA_Abort_IT+0x3c0>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d054      	beq.n	80022e6 <HAL_DMA_Abort_IT+0x3a2>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a31      	ldr	r2, [pc, #196]	; (8002308 <HAL_DMA_Abort_IT+0x3c4>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d04f      	beq.n	80022e6 <HAL_DMA_Abort_IT+0x3a2>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a30      	ldr	r2, [pc, #192]	; (800230c <HAL_DMA_Abort_IT+0x3c8>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d04a      	beq.n	80022e6 <HAL_DMA_Abort_IT+0x3a2>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a2e      	ldr	r2, [pc, #184]	; (8002310 <HAL_DMA_Abort_IT+0x3cc>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d045      	beq.n	80022e6 <HAL_DMA_Abort_IT+0x3a2>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a2d      	ldr	r2, [pc, #180]	; (8002314 <HAL_DMA_Abort_IT+0x3d0>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d040      	beq.n	80022e6 <HAL_DMA_Abort_IT+0x3a2>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a2b      	ldr	r2, [pc, #172]	; (8002318 <HAL_DMA_Abort_IT+0x3d4>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d03b      	beq.n	80022e6 <HAL_DMA_Abort_IT+0x3a2>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a2a      	ldr	r2, [pc, #168]	; (800231c <HAL_DMA_Abort_IT+0x3d8>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d036      	beq.n	80022e6 <HAL_DMA_Abort_IT+0x3a2>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a28      	ldr	r2, [pc, #160]	; (8002320 <HAL_DMA_Abort_IT+0x3dc>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d031      	beq.n	80022e6 <HAL_DMA_Abort_IT+0x3a2>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a27      	ldr	r2, [pc, #156]	; (8002324 <HAL_DMA_Abort_IT+0x3e0>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d02c      	beq.n	80022e6 <HAL_DMA_Abort_IT+0x3a2>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a25      	ldr	r2, [pc, #148]	; (8002328 <HAL_DMA_Abort_IT+0x3e4>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d027      	beq.n	80022e6 <HAL_DMA_Abort_IT+0x3a2>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a24      	ldr	r2, [pc, #144]	; (800232c <HAL_DMA_Abort_IT+0x3e8>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d022      	beq.n	80022e6 <HAL_DMA_Abort_IT+0x3a2>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a22      	ldr	r2, [pc, #136]	; (8002330 <HAL_DMA_Abort_IT+0x3ec>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d01d      	beq.n	80022e6 <HAL_DMA_Abort_IT+0x3a2>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a21      	ldr	r2, [pc, #132]	; (8002334 <HAL_DMA_Abort_IT+0x3f0>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d018      	beq.n	80022e6 <HAL_DMA_Abort_IT+0x3a2>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a1f      	ldr	r2, [pc, #124]	; (8002338 <HAL_DMA_Abort_IT+0x3f4>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d013      	beq.n	80022e6 <HAL_DMA_Abort_IT+0x3a2>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a1e      	ldr	r2, [pc, #120]	; (800233c <HAL_DMA_Abort_IT+0x3f8>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d00e      	beq.n	80022e6 <HAL_DMA_Abort_IT+0x3a2>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a1c      	ldr	r2, [pc, #112]	; (8002340 <HAL_DMA_Abort_IT+0x3fc>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d009      	beq.n	80022e6 <HAL_DMA_Abort_IT+0x3a2>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a1b      	ldr	r2, [pc, #108]	; (8002344 <HAL_DMA_Abort_IT+0x400>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d004      	beq.n	80022e6 <HAL_DMA_Abort_IT+0x3a2>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a19      	ldr	r2, [pc, #100]	; (8002348 <HAL_DMA_Abort_IT+0x404>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d132      	bne.n	800234c <HAL_DMA_Abort_IT+0x408>
 80022e6:	2301      	movs	r3, #1
 80022e8:	e031      	b.n	800234e <HAL_DMA_Abort_IT+0x40a>
 80022ea:	bf00      	nop
 80022ec:	40020010 	.word	0x40020010
 80022f0:	40020028 	.word	0x40020028
 80022f4:	40020040 	.word	0x40020040
 80022f8:	40020058 	.word	0x40020058
 80022fc:	40020070 	.word	0x40020070
 8002300:	40020088 	.word	0x40020088
 8002304:	400200a0 	.word	0x400200a0
 8002308:	400200b8 	.word	0x400200b8
 800230c:	40020410 	.word	0x40020410
 8002310:	40020428 	.word	0x40020428
 8002314:	40020440 	.word	0x40020440
 8002318:	40020458 	.word	0x40020458
 800231c:	40020470 	.word	0x40020470
 8002320:	40020488 	.word	0x40020488
 8002324:	400204a0 	.word	0x400204a0
 8002328:	400204b8 	.word	0x400204b8
 800232c:	58025408 	.word	0x58025408
 8002330:	5802541c 	.word	0x5802541c
 8002334:	58025430 	.word	0x58025430
 8002338:	58025444 	.word	0x58025444
 800233c:	58025458 	.word	0x58025458
 8002340:	5802546c 	.word	0x5802546c
 8002344:	58025480 	.word	0x58025480
 8002348:	58025494 	.word	0x58025494
 800234c:	2300      	movs	r3, #0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d028      	beq.n	80023a4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800235c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002360:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002366:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800236c:	f003 031f 	and.w	r3, r3, #31
 8002370:	2201      	movs	r2, #1
 8002372:	409a      	lsls	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002380:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00c      	beq.n	80023a4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002394:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002398:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80023a2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d003      	beq.n	80023c4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop

080023d0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e0cf      	b.n	8002582 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d106      	bne.n	80023fa <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2223      	movs	r2, #35	; 0x23
 80023f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f7fe fdeb 	bl	8000fd0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023fa:	4b64      	ldr	r3, [pc, #400]	; (800258c <HAL_ETH_Init+0x1bc>)
 80023fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002400:	4a62      	ldr	r2, [pc, #392]	; (800258c <HAL_ETH_Init+0x1bc>)
 8002402:	f043 0302 	orr.w	r3, r3, #2
 8002406:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800240a:	4b60      	ldr	r3, [pc, #384]	; (800258c <HAL_ETH_Init+0x1bc>)
 800240c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	7a1b      	ldrb	r3, [r3, #8]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d103      	bne.n	8002428 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002420:	2000      	movs	r0, #0
 8002422:	f7ff f97d 	bl	8001720 <HAL_SYSCFG_ETHInterfaceSelect>
 8002426:	e003      	b.n	8002430 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002428:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800242c:	f7ff f978 	bl	8001720 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8002430:	4b57      	ldr	r3, [pc, #348]	; (8002590 <HAL_ETH_Init+0x1c0>)
 8002432:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	6812      	ldr	r2, [r2, #0]
 8002442:	f043 0301 	orr.w	r3, r3, #1
 8002446:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800244a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800244c:	f7ff f92c 	bl	80016a8 <HAL_GetTick>
 8002450:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002452:	e011      	b.n	8002478 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002454:	f7ff f928 	bl	80016a8 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002462:	d909      	bls.n	8002478 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2204      	movs	r2, #4
 8002468:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	22e0      	movs	r2, #224	; 0xe0
 8002470:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e084      	b.n	8002582 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1e4      	bne.n	8002454 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f886 	bl	800259c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002490:	f001 fef6 	bl	8004280 <HAL_RCC_GetHCLKFreq>
 8002494:	4603      	mov	r3, r0
 8002496:	4a3f      	ldr	r2, [pc, #252]	; (8002594 <HAL_ETH_Init+0x1c4>)
 8002498:	fba2 2303 	umull	r2, r3, r2, r3
 800249c:	0c9a      	lsrs	r2, r3, #18
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	3a01      	subs	r2, #1
 80024a4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 fa71 	bl	8002990 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024b6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80024ba:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	6812      	ldr	r2, [r2, #0]
 80024c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80024c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024ca:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	f003 0303 	and.w	r3, r3, #3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d009      	beq.n	80024ee <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	22e0      	movs	r2, #224	; 0xe0
 80024e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e049      	b.n	8002582 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024f6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80024fa:	4b27      	ldr	r3, [pc, #156]	; (8002598 <HAL_ETH_Init+0x1c8>)
 80024fc:	4013      	ands	r3, r2
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	6952      	ldr	r2, [r2, #20]
 8002502:	0051      	lsls	r1, r2, #1
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	6812      	ldr	r2, [r2, #0]
 8002508:	430b      	orrs	r3, r1
 800250a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800250e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 fad9 	bl	8002aca <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 fb1f 	bl	8002b5c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	3305      	adds	r3, #5
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	021a      	lsls	r2, r3, #8
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	3304      	adds	r3, #4
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	4619      	mov	r1, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	430a      	orrs	r2, r1
 8002538:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	3303      	adds	r3, #3
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	061a      	lsls	r2, r3, #24
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	3302      	adds	r3, #2
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	041b      	lsls	r3, r3, #16
 8002550:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	3301      	adds	r3, #1
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800255c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800256a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800256c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2210      	movs	r2, #16
 800257c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	58024400 	.word	0x58024400
 8002590:	58000400 	.word	0x58000400
 8002594:	431bde83 	.word	0x431bde83
 8002598:	ffff8001 	.word	0xffff8001

0800259c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80025ac:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80025b4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80025b6:	f001 fe63 	bl	8004280 <HAL_RCC_GetHCLKFreq>
 80025ba:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	4a1e      	ldr	r2, [pc, #120]	; (8002638 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d908      	bls.n	80025d6 <HAL_ETH_SetMDIOClockRange+0x3a>
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	4a1d      	ldr	r2, [pc, #116]	; (800263c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d804      	bhi.n	80025d6 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	e027      	b.n	8002626 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	4a18      	ldr	r2, [pc, #96]	; (800263c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d908      	bls.n	80025f0 <HAL_ETH_SetMDIOClockRange+0x54>
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	4a17      	ldr	r2, [pc, #92]	; (8002640 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d204      	bcs.n	80025f0 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	e01a      	b.n	8002626 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	4a13      	ldr	r2, [pc, #76]	; (8002640 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d303      	bcc.n	8002600 <HAL_ETH_SetMDIOClockRange+0x64>
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	4a12      	ldr	r2, [pc, #72]	; (8002644 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d911      	bls.n	8002624 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	4a10      	ldr	r2, [pc, #64]	; (8002644 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d908      	bls.n	800261a <HAL_ETH_SetMDIOClockRange+0x7e>
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	4a0f      	ldr	r2, [pc, #60]	; (8002648 <HAL_ETH_SetMDIOClockRange+0xac>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d804      	bhi.n	800261a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	e005      	b.n	8002626 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	e000      	b.n	8002626 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002624:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002630:	bf00      	nop
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	01312cff 	.word	0x01312cff
 800263c:	02160ebf 	.word	0x02160ebf
 8002640:	03938700 	.word	0x03938700
 8002644:	05f5e0ff 	.word	0x05f5e0ff
 8002648:	08f0d17f 	.word	0x08f0d17f

0800264c <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800265e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	791b      	ldrb	r3, [r3, #4]
 8002664:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002666:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	7b1b      	ldrb	r3, [r3, #12]
 800266c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800266e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	7b5b      	ldrb	r3, [r3, #13]
 8002674:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002676:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	7b9b      	ldrb	r3, [r3, #14]
 800267c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800267e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	7bdb      	ldrb	r3, [r3, #15]
 8002684:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002686:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	7c12      	ldrb	r2, [r2, #16]
 800268c:	2a00      	cmp	r2, #0
 800268e:	d102      	bne.n	8002696 <ETH_SetMACConfig+0x4a>
 8002690:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002694:	e000      	b.n	8002698 <ETH_SetMACConfig+0x4c>
 8002696:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002698:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	7c52      	ldrb	r2, [r2, #17]
 800269e:	2a00      	cmp	r2, #0
 80026a0:	d102      	bne.n	80026a8 <ETH_SetMACConfig+0x5c>
 80026a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026a6:	e000      	b.n	80026aa <ETH_SetMACConfig+0x5e>
 80026a8:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80026aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	7c9b      	ldrb	r3, [r3, #18]
 80026b0:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80026b2:	431a      	orrs	r2, r3
               macconf->Speed |
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80026b8:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80026be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	7f1b      	ldrb	r3, [r3, #28]
 80026c4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80026c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	7f5b      	ldrb	r3, [r3, #29]
 80026cc:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80026ce:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	7f92      	ldrb	r2, [r2, #30]
 80026d4:	2a00      	cmp	r2, #0
 80026d6:	d102      	bne.n	80026de <ETH_SetMACConfig+0x92>
 80026d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026dc:	e000      	b.n	80026e0 <ETH_SetMACConfig+0x94>
 80026de:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80026e0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	7fdb      	ldrb	r3, [r3, #31]
 80026e6:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80026e8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	f892 2020 	ldrb.w	r2, [r2, #32]
 80026f0:	2a00      	cmp	r2, #0
 80026f2:	d102      	bne.n	80026fa <ETH_SetMACConfig+0xae>
 80026f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026f8:	e000      	b.n	80026fc <ETH_SetMACConfig+0xb0>
 80026fa:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80026fc:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002702:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800270a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800270c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002712:	4313      	orrs	r3, r2
 8002714:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	4b56      	ldr	r3, [pc, #344]	; (8002878 <ETH_SetMACConfig+0x22c>)
 800271e:	4013      	ands	r3, r2
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	6812      	ldr	r2, [r2, #0]
 8002724:	68f9      	ldr	r1, [r7, #12]
 8002726:	430b      	orrs	r3, r1
 8002728:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800272e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002736:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002738:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002740:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002742:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800274a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800274c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002754:	2a00      	cmp	r2, #0
 8002756:	d102      	bne.n	800275e <ETH_SetMACConfig+0x112>
 8002758:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800275c:	e000      	b.n	8002760 <ETH_SetMACConfig+0x114>
 800275e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002760:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002766:	4313      	orrs	r3, r2
 8002768:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	4b42      	ldr	r3, [pc, #264]	; (800287c <ETH_SetMACConfig+0x230>)
 8002772:	4013      	ands	r3, r2
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	6812      	ldr	r2, [r2, #0]
 8002778:	68f9      	ldr	r1, [r7, #12]
 800277a:	430b      	orrs	r3, r1
 800277c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002784:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800278a:	4313      	orrs	r3, r2
 800278c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68da      	ldr	r2, [r3, #12]
 8002794:	4b3a      	ldr	r3, [pc, #232]	; (8002880 <ETH_SetMACConfig+0x234>)
 8002796:	4013      	ands	r3, r2
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6812      	ldr	r2, [r2, #0]
 800279c:	68f9      	ldr	r1, [r7, #12]
 800279e:	430b      	orrs	r3, r1
 80027a0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80027a8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80027ae:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80027b6:	2a00      	cmp	r2, #0
 80027b8:	d101      	bne.n	80027be <ETH_SetMACConfig+0x172>
 80027ba:	2280      	movs	r2, #128	; 0x80
 80027bc:	e000      	b.n	80027c0 <ETH_SetMACConfig+0x174>
 80027be:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80027c0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027c6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80027c8:	4313      	orrs	r3, r2
 80027ca:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80027d2:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80027d6:	4013      	ands	r3, r2
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	6812      	ldr	r2, [r2, #0]
 80027dc:	68f9      	ldr	r1, [r7, #12]
 80027de:	430b      	orrs	r3, r1
 80027e0:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80027e8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80027f0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80027f2:	4313      	orrs	r3, r2
 80027f4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027fe:	f023 0103 	bic.w	r1, r3, #3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	430a      	orrs	r2, r1
 800280a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002816:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	430a      	orrs	r2, r1
 8002824:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002832:	2a00      	cmp	r2, #0
 8002834:	d101      	bne.n	800283a <ETH_SetMACConfig+0x1ee>
 8002836:	2240      	movs	r2, #64	; 0x40
 8002838:	e000      	b.n	800283c <ETH_SetMACConfig+0x1f0>
 800283a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800283c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002844:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002846:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800284e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002850:	4313      	orrs	r3, r2
 8002852:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800285c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	430a      	orrs	r2, r1
 8002868:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800286c:	bf00      	nop
 800286e:	3714      	adds	r7, #20
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr
 8002878:	00048083 	.word	0x00048083
 800287c:	c0f88000 	.word	0xc0f88000
 8002880:	fffffef0 	.word	0xfffffef0

08002884 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	4b38      	ldr	r3, [pc, #224]	; (800297c <ETH_SetDMAConfig+0xf8>)
 800289a:	4013      	ands	r3, r2
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	6811      	ldr	r1, [r2, #0]
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	6812      	ldr	r2, [r2, #0]
 80028a4:	430b      	orrs	r3, r1
 80028a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80028aa:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	791b      	ldrb	r3, [r3, #4]
 80028b0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80028b6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	7b1b      	ldrb	r3, [r3, #12]
 80028bc:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80028be:	4313      	orrs	r3, r2
 80028c0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	4b2c      	ldr	r3, [pc, #176]	; (8002980 <ETH_SetDMAConfig+0xfc>)
 80028ce:	4013      	ands	r3, r2
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	6812      	ldr	r2, [r2, #0]
 80028d4:	68f9      	ldr	r1, [r7, #12]
 80028d6:	430b      	orrs	r3, r1
 80028d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80028dc:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	7b5b      	ldrb	r3, [r3, #13]
 80028e2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80028e8:	4313      	orrs	r3, r2
 80028ea:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028f4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80028f8:	4b22      	ldr	r3, [pc, #136]	; (8002984 <ETH_SetDMAConfig+0x100>)
 80028fa:	4013      	ands	r3, r2
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6812      	ldr	r2, [r2, #0]
 8002900:	68f9      	ldr	r1, [r7, #12]
 8002902:	430b      	orrs	r3, r1
 8002904:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002908:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	7d1b      	ldrb	r3, [r3, #20]
 8002914:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002916:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	7f5b      	ldrb	r3, [r3, #29]
 800291c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800291e:	4313      	orrs	r3, r2
 8002920:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800292a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800292e:	4b16      	ldr	r3, [pc, #88]	; (8002988 <ETH_SetDMAConfig+0x104>)
 8002930:	4013      	ands	r3, r2
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	6812      	ldr	r2, [r2, #0]
 8002936:	68f9      	ldr	r1, [r7, #12]
 8002938:	430b      	orrs	r3, r1
 800293a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800293e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	7f1b      	ldrb	r3, [r3, #28]
 8002946:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800294c:	4313      	orrs	r3, r2
 800294e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002958:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800295c:	4b0b      	ldr	r3, [pc, #44]	; (800298c <ETH_SetDMAConfig+0x108>)
 800295e:	4013      	ands	r3, r2
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	6812      	ldr	r2, [r2, #0]
 8002964:	68f9      	ldr	r1, [r7, #12]
 8002966:	430b      	orrs	r3, r1
 8002968:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800296c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8002970:	bf00      	nop
 8002972:	3714      	adds	r7, #20
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	ffff87fd 	.word	0xffff87fd
 8002980:	ffff2ffe 	.word	0xffff2ffe
 8002984:	fffec000 	.word	0xfffec000
 8002988:	ffc0efef 	.word	0xffc0efef
 800298c:	7fc0ffff 	.word	0x7fc0ffff

08002990 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b0a4      	sub	sp, #144	; 0x90
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002998:	2301      	movs	r3, #1
 800299a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800299e:	2300      	movs	r3, #0
 80029a0:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80029a2:	2300      	movs	r3, #0
 80029a4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80029a8:	2300      	movs	r3, #0
 80029aa:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80029ae:	2301      	movs	r3, #1
 80029b0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80029b4:	2301      	movs	r3, #1
 80029b6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80029ba:	2301      	movs	r3, #1
 80029bc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80029c0:	2300      	movs	r3, #0
 80029c2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80029c6:	2301      	movs	r3, #1
 80029c8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80029cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029d0:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80029d2:	2300      	movs	r3, #0
 80029d4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80029d8:	2300      	movs	r3, #0
 80029da:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80029dc:	2300      	movs	r3, #0
 80029de:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80029e2:	2300      	movs	r3, #0
 80029e4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80029e8:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80029ec:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80029ee:	2300      	movs	r3, #0
 80029f0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80029f4:	2300      	movs	r3, #0
 80029f6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80029f8:	2301      	movs	r3, #1
 80029fa:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80029fe:	2300      	movs	r3, #0
 8002a00:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002a04:	2300      	movs	r3, #0
 8002a06:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002a12:	2300      	movs	r3, #0
 8002a14:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002a16:	2300      	movs	r3, #0
 8002a18:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002a22:	2301      	movs	r3, #1
 8002a24:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002a28:	2320      	movs	r3, #32
 8002a2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002a34:	2300      	movs	r3, #0
 8002a36:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002a3a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002a40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a44:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002a46:	2300      	movs	r3, #0
 8002a48:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002a52:	2300      	movs	r3, #0
 8002a54:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002a64:	2301      	movs	r3, #1
 8002a66:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002a74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a78:	4619      	mov	r1, r3
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7ff fde6 	bl	800264c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002a80:	2301      	movs	r3, #1
 8002a82:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002a84:	2301      	movs	r3, #1
 8002a86:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002a92:	2300      	movs	r3, #0
 8002a94:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002a96:	2300      	movs	r3, #0
 8002a98:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002a9a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a9e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002aa4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002aa8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002ab0:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002ab4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002ab6:	f107 0308 	add.w	r3, r7, #8
 8002aba:	4619      	mov	r1, r3
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f7ff fee1 	bl	8002884 <ETH_SetDMAConfig>
}
 8002ac2:	bf00      	nop
 8002ac4:	3790      	adds	r7, #144	; 0x90
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b085      	sub	sp, #20
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60fb      	str	r3, [r7, #12]
 8002ad6:	e01d      	b.n	8002b14 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	68d9      	ldr	r1, [r3, #12]
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	4413      	add	r3, r2
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	440b      	add	r3, r1
 8002ae8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	2200      	movs	r2, #0
 8002af4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	2200      	movs	r2, #0
 8002afa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	2200      	movs	r2, #0
 8002b00:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002b02:	68b9      	ldr	r1, [r7, #8]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	3206      	adds	r2, #6
 8002b0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	3301      	adds	r3, #1
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2b03      	cmp	r3, #3
 8002b18:	d9de      	bls.n	8002ad8 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b28:	461a      	mov	r2, r3
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68da      	ldr	r2, [r3, #12]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b3c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68da      	ldr	r2, [r3, #12]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b4c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8002b50:	bf00      	nop
 8002b52:	3714      	adds	r7, #20
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b64:	2300      	movs	r3, #0
 8002b66:	60fb      	str	r3, [r7, #12]
 8002b68:	e023      	b.n	8002bb2 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6919      	ldr	r1, [r3, #16]
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	4613      	mov	r3, r2
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	4413      	add	r3, r2
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	440b      	add	r3, r1
 8002b7a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	2200      	movs	r2, #0
 8002b86:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	2200      	movs	r2, #0
 8002b92:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	2200      	movs	r2, #0
 8002b98:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002ba0:	68b9      	ldr	r1, [r7, #8]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	3212      	adds	r2, #18
 8002ba8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	3301      	adds	r3, #1
 8002bb0:	60fb      	str	r3, [r7, #12]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2b03      	cmp	r3, #3
 8002bb6:	d9d8      	bls.n	8002b6a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bde:	461a      	mov	r2, r3
 8002be0:	2303      	movs	r3, #3
 8002be2:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	691a      	ldr	r2, [r3, #16]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bf2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c06:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8002c0a:	bf00      	nop
 8002c0c:	3714      	adds	r7, #20
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
	...

08002c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b089      	sub	sp, #36	; 0x24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002c22:	2300      	movs	r3, #0
 8002c24:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002c26:	4b89      	ldr	r3, [pc, #548]	; (8002e4c <HAL_GPIO_Init+0x234>)
 8002c28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002c2a:	e194      	b.n	8002f56 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	2101      	movs	r1, #1
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	fa01 f303 	lsl.w	r3, r1, r3
 8002c38:	4013      	ands	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f000 8186 	beq.w	8002f50 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f003 0303 	and.w	r3, r3, #3
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d005      	beq.n	8002c5c <HAL_GPIO_Init+0x44>
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f003 0303 	and.w	r3, r3, #3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d130      	bne.n	8002cbe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	2203      	movs	r2, #3
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	4013      	ands	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	68da      	ldr	r2, [r3, #12]
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c92:	2201      	movs	r2, #1
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	091b      	lsrs	r3, r3, #4
 8002ca8:	f003 0201 	and.w	r2, r3, #1
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f003 0303 	and.w	r3, r3, #3
 8002cc6:	2b03      	cmp	r3, #3
 8002cc8:	d017      	beq.n	8002cfa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	2203      	movs	r2, #3
 8002cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cda:	43db      	mvns	r3, r3
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	4013      	ands	r3, r2
 8002ce0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	689a      	ldr	r2, [r3, #8]
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	fa02 f303 	lsl.w	r3, r2, r3
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f003 0303 	and.w	r3, r3, #3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d123      	bne.n	8002d4e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	08da      	lsrs	r2, r3, #3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	3208      	adds	r2, #8
 8002d0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	f003 0307 	and.w	r3, r3, #7
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	220f      	movs	r2, #15
 8002d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d22:	43db      	mvns	r3, r3
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	4013      	ands	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	691a      	ldr	r2, [r3, #16]
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	f003 0307 	and.w	r3, r3, #7
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	08da      	lsrs	r2, r3, #3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	3208      	adds	r2, #8
 8002d48:	69b9      	ldr	r1, [r7, #24]
 8002d4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	2203      	movs	r2, #3
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	43db      	mvns	r3, r3
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4013      	ands	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f003 0203 	and.w	r2, r3, #3
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	fa02 f303 	lsl.w	r3, r2, r3
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f000 80e0 	beq.w	8002f50 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d90:	4b2f      	ldr	r3, [pc, #188]	; (8002e50 <HAL_GPIO_Init+0x238>)
 8002d92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002d96:	4a2e      	ldr	r2, [pc, #184]	; (8002e50 <HAL_GPIO_Init+0x238>)
 8002d98:	f043 0302 	orr.w	r3, r3, #2
 8002d9c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002da0:	4b2b      	ldr	r3, [pc, #172]	; (8002e50 <HAL_GPIO_Init+0x238>)
 8002da2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	60fb      	str	r3, [r7, #12]
 8002dac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dae:	4a29      	ldr	r2, [pc, #164]	; (8002e54 <HAL_GPIO_Init+0x23c>)
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	089b      	lsrs	r3, r3, #2
 8002db4:	3302      	adds	r3, #2
 8002db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	f003 0303 	and.w	r3, r3, #3
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	220f      	movs	r2, #15
 8002dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dca:	43db      	mvns	r3, r3
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	4013      	ands	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a20      	ldr	r2, [pc, #128]	; (8002e58 <HAL_GPIO_Init+0x240>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d052      	beq.n	8002e80 <HAL_GPIO_Init+0x268>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a1f      	ldr	r2, [pc, #124]	; (8002e5c <HAL_GPIO_Init+0x244>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d031      	beq.n	8002e46 <HAL_GPIO_Init+0x22e>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a1e      	ldr	r2, [pc, #120]	; (8002e60 <HAL_GPIO_Init+0x248>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d02b      	beq.n	8002e42 <HAL_GPIO_Init+0x22a>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a1d      	ldr	r2, [pc, #116]	; (8002e64 <HAL_GPIO_Init+0x24c>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d025      	beq.n	8002e3e <HAL_GPIO_Init+0x226>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a1c      	ldr	r2, [pc, #112]	; (8002e68 <HAL_GPIO_Init+0x250>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d01f      	beq.n	8002e3a <HAL_GPIO_Init+0x222>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a1b      	ldr	r2, [pc, #108]	; (8002e6c <HAL_GPIO_Init+0x254>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d019      	beq.n	8002e36 <HAL_GPIO_Init+0x21e>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a1a      	ldr	r2, [pc, #104]	; (8002e70 <HAL_GPIO_Init+0x258>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d013      	beq.n	8002e32 <HAL_GPIO_Init+0x21a>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a19      	ldr	r2, [pc, #100]	; (8002e74 <HAL_GPIO_Init+0x25c>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d00d      	beq.n	8002e2e <HAL_GPIO_Init+0x216>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a18      	ldr	r2, [pc, #96]	; (8002e78 <HAL_GPIO_Init+0x260>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d007      	beq.n	8002e2a <HAL_GPIO_Init+0x212>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a17      	ldr	r2, [pc, #92]	; (8002e7c <HAL_GPIO_Init+0x264>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d101      	bne.n	8002e26 <HAL_GPIO_Init+0x20e>
 8002e22:	2309      	movs	r3, #9
 8002e24:	e02d      	b.n	8002e82 <HAL_GPIO_Init+0x26a>
 8002e26:	230a      	movs	r3, #10
 8002e28:	e02b      	b.n	8002e82 <HAL_GPIO_Init+0x26a>
 8002e2a:	2308      	movs	r3, #8
 8002e2c:	e029      	b.n	8002e82 <HAL_GPIO_Init+0x26a>
 8002e2e:	2307      	movs	r3, #7
 8002e30:	e027      	b.n	8002e82 <HAL_GPIO_Init+0x26a>
 8002e32:	2306      	movs	r3, #6
 8002e34:	e025      	b.n	8002e82 <HAL_GPIO_Init+0x26a>
 8002e36:	2305      	movs	r3, #5
 8002e38:	e023      	b.n	8002e82 <HAL_GPIO_Init+0x26a>
 8002e3a:	2304      	movs	r3, #4
 8002e3c:	e021      	b.n	8002e82 <HAL_GPIO_Init+0x26a>
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e01f      	b.n	8002e82 <HAL_GPIO_Init+0x26a>
 8002e42:	2302      	movs	r3, #2
 8002e44:	e01d      	b.n	8002e82 <HAL_GPIO_Init+0x26a>
 8002e46:	2301      	movs	r3, #1
 8002e48:	e01b      	b.n	8002e82 <HAL_GPIO_Init+0x26a>
 8002e4a:	bf00      	nop
 8002e4c:	58000080 	.word	0x58000080
 8002e50:	58024400 	.word	0x58024400
 8002e54:	58000400 	.word	0x58000400
 8002e58:	58020000 	.word	0x58020000
 8002e5c:	58020400 	.word	0x58020400
 8002e60:	58020800 	.word	0x58020800
 8002e64:	58020c00 	.word	0x58020c00
 8002e68:	58021000 	.word	0x58021000
 8002e6c:	58021400 	.word	0x58021400
 8002e70:	58021800 	.word	0x58021800
 8002e74:	58021c00 	.word	0x58021c00
 8002e78:	58022000 	.word	0x58022000
 8002e7c:	58022400 	.word	0x58022400
 8002e80:	2300      	movs	r3, #0
 8002e82:	69fa      	ldr	r2, [r7, #28]
 8002e84:	f002 0203 	and.w	r2, r2, #3
 8002e88:	0092      	lsls	r2, r2, #2
 8002e8a:	4093      	lsls	r3, r2
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e92:	4938      	ldr	r1, [pc, #224]	; (8002f74 <HAL_GPIO_Init+0x35c>)
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	089b      	lsrs	r3, r3, #2
 8002e98:	3302      	adds	r3, #2
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	43db      	mvns	r3, r3
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d003      	beq.n	8002ec6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002ec6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002ece:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	43db      	mvns	r3, r3
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	4013      	ands	r3, r2
 8002ede:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d003      	beq.n	8002ef4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002ef4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	43db      	mvns	r3, r3
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d003      	beq.n	8002f20 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	43db      	mvns	r3, r3
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	4013      	ands	r3, r2
 8002f34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	3301      	adds	r3, #1
 8002f54:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f47f ae63 	bne.w	8002c2c <HAL_GPIO_Init+0x14>
  }
}
 8002f66:	bf00      	nop
 8002f68:	bf00      	nop
 8002f6a:	3724      	adds	r7, #36	; 0x24
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr
 8002f74:	58000400 	.word	0x58000400

08002f78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	460b      	mov	r3, r1
 8002f82:	807b      	strh	r3, [r7, #2]
 8002f84:	4613      	mov	r3, r2
 8002f86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f88:	787b      	ldrb	r3, [r7, #1]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d003      	beq.n	8002f96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f8e:	887a      	ldrh	r2, [r7, #2]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002f94:	e003      	b.n	8002f9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002f96:	887b      	ldrh	r3, [r7, #2]
 8002f98:	041a      	lsls	r2, r3, #16
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	619a      	str	r2, [r3, #24]
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
	...

08002fac <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002fb4:	4a08      	ldr	r2, [pc, #32]	; (8002fd8 <HAL_HSEM_FastTake+0x2c>)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	3320      	adds	r3, #32
 8002fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fbe:	4a07      	ldr	r2, [pc, #28]	; (8002fdc <HAL_HSEM_FastTake+0x30>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d101      	bne.n	8002fc8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	e000      	b.n	8002fca <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	58026400 	.word	0x58026400
 8002fdc:	80000300 	.word	0x80000300

08002fe0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002fea:	4906      	ldr	r1, [pc, #24]	; (8003004 <HAL_HSEM_Release+0x24>)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr
 8003004:	58026400 	.word	0x58026400

08003008 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800300a:	b08f      	sub	sp, #60	; 0x3c
 800300c:	af0a      	add	r7, sp, #40	; 0x28
 800300e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e116      	b.n	8003248 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2b00      	cmp	r3, #0
 800302a:	d106      	bne.n	800303a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f7fe f95b 	bl	80012f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2203      	movs	r2, #3
 800303e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800304a:	2b00      	cmp	r3, #0
 800304c:	d102      	bne.n	8003054 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4618      	mov	r0, r3
 800305a:	f005 fe65 	bl	8008d28 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	603b      	str	r3, [r7, #0]
 8003064:	687e      	ldr	r6, [r7, #4]
 8003066:	466d      	mov	r5, sp
 8003068:	f106 0410 	add.w	r4, r6, #16
 800306c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800306e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003070:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003072:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003074:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003078:	e885 0003 	stmia.w	r5, {r0, r1}
 800307c:	1d33      	adds	r3, r6, #4
 800307e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003080:	6838      	ldr	r0, [r7, #0]
 8003082:	f005 fde3 	bl	8008c4c <USB_CoreInit>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d005      	beq.n	8003098 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2202      	movs	r2, #2
 8003090:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e0d7      	b.n	8003248 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2100      	movs	r1, #0
 800309e:	4618      	mov	r0, r3
 80030a0:	f005 fe53 	bl	8008d4a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030a4:	2300      	movs	r3, #0
 80030a6:	73fb      	strb	r3, [r7, #15]
 80030a8:	e04a      	b.n	8003140 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80030aa:	7bfa      	ldrb	r2, [r7, #15]
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	4613      	mov	r3, r2
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	4413      	add	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	440b      	add	r3, r1
 80030b8:	333d      	adds	r3, #61	; 0x3d
 80030ba:	2201      	movs	r2, #1
 80030bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80030be:	7bfa      	ldrb	r2, [r7, #15]
 80030c0:	6879      	ldr	r1, [r7, #4]
 80030c2:	4613      	mov	r3, r2
 80030c4:	00db      	lsls	r3, r3, #3
 80030c6:	4413      	add	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	440b      	add	r3, r1
 80030cc:	333c      	adds	r3, #60	; 0x3c
 80030ce:	7bfa      	ldrb	r2, [r7, #15]
 80030d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80030d2:	7bfa      	ldrb	r2, [r7, #15]
 80030d4:	7bfb      	ldrb	r3, [r7, #15]
 80030d6:	b298      	uxth	r0, r3
 80030d8:	6879      	ldr	r1, [r7, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	4413      	add	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	440b      	add	r3, r1
 80030e4:	3356      	adds	r3, #86	; 0x56
 80030e6:	4602      	mov	r2, r0
 80030e8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80030ea:	7bfa      	ldrb	r2, [r7, #15]
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	4613      	mov	r3, r2
 80030f0:	00db      	lsls	r3, r3, #3
 80030f2:	4413      	add	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	440b      	add	r3, r1
 80030f8:	3340      	adds	r3, #64	; 0x40
 80030fa:	2200      	movs	r2, #0
 80030fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80030fe:	7bfa      	ldrb	r2, [r7, #15]
 8003100:	6879      	ldr	r1, [r7, #4]
 8003102:	4613      	mov	r3, r2
 8003104:	00db      	lsls	r3, r3, #3
 8003106:	4413      	add	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	440b      	add	r3, r1
 800310c:	3344      	adds	r3, #68	; 0x44
 800310e:	2200      	movs	r2, #0
 8003110:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003112:	7bfa      	ldrb	r2, [r7, #15]
 8003114:	6879      	ldr	r1, [r7, #4]
 8003116:	4613      	mov	r3, r2
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	4413      	add	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	440b      	add	r3, r1
 8003120:	3348      	adds	r3, #72	; 0x48
 8003122:	2200      	movs	r2, #0
 8003124:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003126:	7bfa      	ldrb	r2, [r7, #15]
 8003128:	6879      	ldr	r1, [r7, #4]
 800312a:	4613      	mov	r3, r2
 800312c:	00db      	lsls	r3, r3, #3
 800312e:	4413      	add	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	440b      	add	r3, r1
 8003134:	334c      	adds	r3, #76	; 0x4c
 8003136:	2200      	movs	r2, #0
 8003138:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800313a:	7bfb      	ldrb	r3, [r7, #15]
 800313c:	3301      	adds	r3, #1
 800313e:	73fb      	strb	r3, [r7, #15]
 8003140:	7bfa      	ldrb	r2, [r7, #15]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	429a      	cmp	r2, r3
 8003148:	d3af      	bcc.n	80030aa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800314a:	2300      	movs	r3, #0
 800314c:	73fb      	strb	r3, [r7, #15]
 800314e:	e044      	b.n	80031da <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003150:	7bfa      	ldrb	r2, [r7, #15]
 8003152:	6879      	ldr	r1, [r7, #4]
 8003154:	4613      	mov	r3, r2
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	4413      	add	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003162:	2200      	movs	r2, #0
 8003164:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003166:	7bfa      	ldrb	r2, [r7, #15]
 8003168:	6879      	ldr	r1, [r7, #4]
 800316a:	4613      	mov	r3, r2
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	4413      	add	r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	440b      	add	r3, r1
 8003174:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003178:	7bfa      	ldrb	r2, [r7, #15]
 800317a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800317c:	7bfa      	ldrb	r2, [r7, #15]
 800317e:	6879      	ldr	r1, [r7, #4]
 8003180:	4613      	mov	r3, r2
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	4413      	add	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	440b      	add	r3, r1
 800318a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800318e:	2200      	movs	r2, #0
 8003190:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003192:	7bfa      	ldrb	r2, [r7, #15]
 8003194:	6879      	ldr	r1, [r7, #4]
 8003196:	4613      	mov	r3, r2
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	4413      	add	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	440b      	add	r3, r1
 80031a0:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80031a4:	2200      	movs	r2, #0
 80031a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80031a8:	7bfa      	ldrb	r2, [r7, #15]
 80031aa:	6879      	ldr	r1, [r7, #4]
 80031ac:	4613      	mov	r3, r2
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	4413      	add	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	440b      	add	r3, r1
 80031b6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80031ba:	2200      	movs	r2, #0
 80031bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80031be:	7bfa      	ldrb	r2, [r7, #15]
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	4613      	mov	r3, r2
 80031c4:	00db      	lsls	r3, r3, #3
 80031c6:	4413      	add	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	440b      	add	r3, r1
 80031cc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80031d0:	2200      	movs	r2, #0
 80031d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031d4:	7bfb      	ldrb	r3, [r7, #15]
 80031d6:	3301      	adds	r3, #1
 80031d8:	73fb      	strb	r3, [r7, #15]
 80031da:	7bfa      	ldrb	r2, [r7, #15]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d3b5      	bcc.n	8003150 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	603b      	str	r3, [r7, #0]
 80031ea:	687e      	ldr	r6, [r7, #4]
 80031ec:	466d      	mov	r5, sp
 80031ee:	f106 0410 	add.w	r4, r6, #16
 80031f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8003202:	1d33      	adds	r3, r6, #4
 8003204:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003206:	6838      	ldr	r0, [r7, #0]
 8003208:	f005 fdec 	bl	8008de4 <USB_DevInit>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d005      	beq.n	800321e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2202      	movs	r2, #2
 8003216:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e014      	b.n	8003248 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003232:	2b01      	cmp	r3, #1
 8003234:	d102      	bne.n	800323c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f80a 	bl	8003250 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4618      	mov	r0, r3
 8003242:	f005 ffaa 	bl	800919a <USB_DevDisconnect>

  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3714      	adds	r7, #20
 800324c:	46bd      	mov	sp, r7
 800324e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003250 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800327e:	4b05      	ldr	r3, [pc, #20]	; (8003294 <HAL_PCDEx_ActivateLPM+0x44>)
 8003280:	4313      	orrs	r3, r2
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3714      	adds	r7, #20
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr
 8003294:	10000003 	.word	0x10000003

08003298 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80032a0:	4b29      	ldr	r3, [pc, #164]	; (8003348 <HAL_PWREx_ConfigSupply+0xb0>)
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	f003 0307 	and.w	r3, r3, #7
 80032a8:	2b06      	cmp	r3, #6
 80032aa:	d00a      	beq.n	80032c2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80032ac:	4b26      	ldr	r3, [pc, #152]	; (8003348 <HAL_PWREx_ConfigSupply+0xb0>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d001      	beq.n	80032be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e040      	b.n	8003340 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80032be:	2300      	movs	r3, #0
 80032c0:	e03e      	b.n	8003340 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80032c2:	4b21      	ldr	r3, [pc, #132]	; (8003348 <HAL_PWREx_ConfigSupply+0xb0>)
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80032ca:	491f      	ldr	r1, [pc, #124]	; (8003348 <HAL_PWREx_ConfigSupply+0xb0>)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80032d2:	f7fe f9e9 	bl	80016a8 <HAL_GetTick>
 80032d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80032d8:	e009      	b.n	80032ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80032da:	f7fe f9e5 	bl	80016a8 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032e8:	d901      	bls.n	80032ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e028      	b.n	8003340 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80032ee:	4b16      	ldr	r3, [pc, #88]	; (8003348 <HAL_PWREx_ConfigSupply+0xb0>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032fa:	d1ee      	bne.n	80032da <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2b1e      	cmp	r3, #30
 8003300:	d008      	beq.n	8003314 <HAL_PWREx_ConfigSupply+0x7c>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2b2e      	cmp	r3, #46	; 0x2e
 8003306:	d005      	beq.n	8003314 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b1d      	cmp	r3, #29
 800330c:	d002      	beq.n	8003314 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b2d      	cmp	r3, #45	; 0x2d
 8003312:	d114      	bne.n	800333e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003314:	f7fe f9c8 	bl	80016a8 <HAL_GetTick>
 8003318:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800331a:	e009      	b.n	8003330 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800331c:	f7fe f9c4 	bl	80016a8 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800332a:	d901      	bls.n	8003330 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e007      	b.n	8003340 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003330:	4b05      	ldr	r3, [pc, #20]	; (8003348 <HAL_PWREx_ConfigSupply+0xb0>)
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800333c:	d1ee      	bne.n	800331c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	58024800 	.word	0x58024800

0800334c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003350:	4b05      	ldr	r3, [pc, #20]	; (8003368 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	4a04      	ldr	r2, [pc, #16]	; (8003368 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003356:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800335a:	60d3      	str	r3, [r2, #12]
}
 800335c:	bf00      	nop
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	58024800 	.word	0x58024800

0800336c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b08c      	sub	sp, #48	; 0x30
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d102      	bne.n	8003380 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	f000 bc48 	b.w	8003c10 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 8088 	beq.w	800349e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800338e:	4b99      	ldr	r3, [pc, #612]	; (80035f4 <HAL_RCC_OscConfig+0x288>)
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003396:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003398:	4b96      	ldr	r3, [pc, #600]	; (80035f4 <HAL_RCC_OscConfig+0x288>)
 800339a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800339e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a0:	2b10      	cmp	r3, #16
 80033a2:	d007      	beq.n	80033b4 <HAL_RCC_OscConfig+0x48>
 80033a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a6:	2b18      	cmp	r3, #24
 80033a8:	d111      	bne.n	80033ce <HAL_RCC_OscConfig+0x62>
 80033aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ac:	f003 0303 	and.w	r3, r3, #3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d10c      	bne.n	80033ce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b4:	4b8f      	ldr	r3, [pc, #572]	; (80035f4 <HAL_RCC_OscConfig+0x288>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d06d      	beq.n	800349c <HAL_RCC_OscConfig+0x130>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d169      	bne.n	800349c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	f000 bc21 	b.w	8003c10 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033d6:	d106      	bne.n	80033e6 <HAL_RCC_OscConfig+0x7a>
 80033d8:	4b86      	ldr	r3, [pc, #536]	; (80035f4 <HAL_RCC_OscConfig+0x288>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a85      	ldr	r2, [pc, #532]	; (80035f4 <HAL_RCC_OscConfig+0x288>)
 80033de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e2:	6013      	str	r3, [r2, #0]
 80033e4:	e02e      	b.n	8003444 <HAL_RCC_OscConfig+0xd8>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10c      	bne.n	8003408 <HAL_RCC_OscConfig+0x9c>
 80033ee:	4b81      	ldr	r3, [pc, #516]	; (80035f4 <HAL_RCC_OscConfig+0x288>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a80      	ldr	r2, [pc, #512]	; (80035f4 <HAL_RCC_OscConfig+0x288>)
 80033f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033f8:	6013      	str	r3, [r2, #0]
 80033fa:	4b7e      	ldr	r3, [pc, #504]	; (80035f4 <HAL_RCC_OscConfig+0x288>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a7d      	ldr	r2, [pc, #500]	; (80035f4 <HAL_RCC_OscConfig+0x288>)
 8003400:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003404:	6013      	str	r3, [r2, #0]
 8003406:	e01d      	b.n	8003444 <HAL_RCC_OscConfig+0xd8>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003410:	d10c      	bne.n	800342c <HAL_RCC_OscConfig+0xc0>
 8003412:	4b78      	ldr	r3, [pc, #480]	; (80035f4 <HAL_RCC_OscConfig+0x288>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a77      	ldr	r2, [pc, #476]	; (80035f4 <HAL_RCC_OscConfig+0x288>)
 8003418:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800341c:	6013      	str	r3, [r2, #0]
 800341e:	4b75      	ldr	r3, [pc, #468]	; (80035f4 <HAL_RCC_OscConfig+0x288>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a74      	ldr	r2, [pc, #464]	; (80035f4 <HAL_RCC_OscConfig+0x288>)
 8003424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003428:	6013      	str	r3, [r2, #0]
 800342a:	e00b      	b.n	8003444 <HAL_RCC_OscConfig+0xd8>
 800342c:	4b71      	ldr	r3, [pc, #452]	; (80035f4 <HAL_RCC_OscConfig+0x288>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a70      	ldr	r2, [pc, #448]	; (80035f4 <HAL_RCC_OscConfig+0x288>)
 8003432:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003436:	6013      	str	r3, [r2, #0]
 8003438:	4b6e      	ldr	r3, [pc, #440]	; (80035f4 <HAL_RCC_OscConfig+0x288>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a6d      	ldr	r2, [pc, #436]	; (80035f4 <HAL_RCC_OscConfig+0x288>)
 800343e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003442:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d013      	beq.n	8003474 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800344c:	f7fe f92c 	bl	80016a8 <HAL_GetTick>
 8003450:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003452:	e008      	b.n	8003466 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003454:	f7fe f928 	bl	80016a8 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b64      	cmp	r3, #100	; 0x64
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e3d4      	b.n	8003c10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003466:	4b63      	ldr	r3, [pc, #396]	; (80035f4 <HAL_RCC_OscConfig+0x288>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d0f0      	beq.n	8003454 <HAL_RCC_OscConfig+0xe8>
 8003472:	e014      	b.n	800349e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003474:	f7fe f918 	bl	80016a8 <HAL_GetTick>
 8003478:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800347c:	f7fe f914 	bl	80016a8 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b64      	cmp	r3, #100	; 0x64
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e3c0      	b.n	8003c10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800348e:	4b59      	ldr	r3, [pc, #356]	; (80035f4 <HAL_RCC_OscConfig+0x288>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1f0      	bne.n	800347c <HAL_RCC_OscConfig+0x110>
 800349a:	e000      	b.n	800349e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800349c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f000 80ca 	beq.w	8003640 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034ac:	4b51      	ldr	r3, [pc, #324]	; (80035f4 <HAL_RCC_OscConfig+0x288>)
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034b4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80034b6:	4b4f      	ldr	r3, [pc, #316]	; (80035f4 <HAL_RCC_OscConfig+0x288>)
 80034b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ba:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80034bc:	6a3b      	ldr	r3, [r7, #32]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d007      	beq.n	80034d2 <HAL_RCC_OscConfig+0x166>
 80034c2:	6a3b      	ldr	r3, [r7, #32]
 80034c4:	2b18      	cmp	r3, #24
 80034c6:	d156      	bne.n	8003576 <HAL_RCC_OscConfig+0x20a>
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	f003 0303 	and.w	r3, r3, #3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d151      	bne.n	8003576 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034d2:	4b48      	ldr	r3, [pc, #288]	; (80035f4 <HAL_RCC_OscConfig+0x288>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0304 	and.w	r3, r3, #4
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d005      	beq.n	80034ea <HAL_RCC_OscConfig+0x17e>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e392      	b.n	8003c10 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80034ea:	4b42      	ldr	r3, [pc, #264]	; (80035f4 <HAL_RCC_OscConfig+0x288>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f023 0219 	bic.w	r2, r3, #25
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	493f      	ldr	r1, [pc, #252]	; (80035f4 <HAL_RCC_OscConfig+0x288>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fc:	f7fe f8d4 	bl	80016a8 <HAL_GetTick>
 8003500:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003502:	e008      	b.n	8003516 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003504:	f7fe f8d0 	bl	80016a8 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e37c      	b.n	8003c10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003516:	4b37      	ldr	r3, [pc, #220]	; (80035f4 <HAL_RCC_OscConfig+0x288>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0304 	and.w	r3, r3, #4
 800351e:	2b00      	cmp	r3, #0
 8003520:	d0f0      	beq.n	8003504 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003522:	f7fe f8f1 	bl	8001708 <HAL_GetREVID>
 8003526:	4603      	mov	r3, r0
 8003528:	f241 0203 	movw	r2, #4099	; 0x1003
 800352c:	4293      	cmp	r3, r2
 800352e:	d817      	bhi.n	8003560 <HAL_RCC_OscConfig+0x1f4>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	2b40      	cmp	r3, #64	; 0x40
 8003536:	d108      	bne.n	800354a <HAL_RCC_OscConfig+0x1de>
 8003538:	4b2e      	ldr	r3, [pc, #184]	; (80035f4 <HAL_RCC_OscConfig+0x288>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003540:	4a2c      	ldr	r2, [pc, #176]	; (80035f4 <HAL_RCC_OscConfig+0x288>)
 8003542:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003546:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003548:	e07a      	b.n	8003640 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800354a:	4b2a      	ldr	r3, [pc, #168]	; (80035f4 <HAL_RCC_OscConfig+0x288>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	031b      	lsls	r3, r3, #12
 8003558:	4926      	ldr	r1, [pc, #152]	; (80035f4 <HAL_RCC_OscConfig+0x288>)
 800355a:	4313      	orrs	r3, r2
 800355c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800355e:	e06f      	b.n	8003640 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003560:	4b24      	ldr	r3, [pc, #144]	; (80035f4 <HAL_RCC_OscConfig+0x288>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	061b      	lsls	r3, r3, #24
 800356e:	4921      	ldr	r1, [pc, #132]	; (80035f4 <HAL_RCC_OscConfig+0x288>)
 8003570:	4313      	orrs	r3, r2
 8003572:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003574:	e064      	b.n	8003640 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d047      	beq.n	800360e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800357e:	4b1d      	ldr	r3, [pc, #116]	; (80035f4 <HAL_RCC_OscConfig+0x288>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f023 0219 	bic.w	r2, r3, #25
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	491a      	ldr	r1, [pc, #104]	; (80035f4 <HAL_RCC_OscConfig+0x288>)
 800358c:	4313      	orrs	r3, r2
 800358e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003590:	f7fe f88a 	bl	80016a8 <HAL_GetTick>
 8003594:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003596:	e008      	b.n	80035aa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003598:	f7fe f886 	bl	80016a8 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e332      	b.n	8003c10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035aa:	4b12      	ldr	r3, [pc, #72]	; (80035f4 <HAL_RCC_OscConfig+0x288>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0304 	and.w	r3, r3, #4
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d0f0      	beq.n	8003598 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035b6:	f7fe f8a7 	bl	8001708 <HAL_GetREVID>
 80035ba:	4603      	mov	r3, r0
 80035bc:	f241 0203 	movw	r2, #4099	; 0x1003
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d819      	bhi.n	80035f8 <HAL_RCC_OscConfig+0x28c>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	2b40      	cmp	r3, #64	; 0x40
 80035ca:	d108      	bne.n	80035de <HAL_RCC_OscConfig+0x272>
 80035cc:	4b09      	ldr	r3, [pc, #36]	; (80035f4 <HAL_RCC_OscConfig+0x288>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80035d4:	4a07      	ldr	r2, [pc, #28]	; (80035f4 <HAL_RCC_OscConfig+0x288>)
 80035d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035da:	6053      	str	r3, [r2, #4]
 80035dc:	e030      	b.n	8003640 <HAL_RCC_OscConfig+0x2d4>
 80035de:	4b05      	ldr	r3, [pc, #20]	; (80035f4 <HAL_RCC_OscConfig+0x288>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	031b      	lsls	r3, r3, #12
 80035ec:	4901      	ldr	r1, [pc, #4]	; (80035f4 <HAL_RCC_OscConfig+0x288>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	604b      	str	r3, [r1, #4]
 80035f2:	e025      	b.n	8003640 <HAL_RCC_OscConfig+0x2d4>
 80035f4:	58024400 	.word	0x58024400
 80035f8:	4b9a      	ldr	r3, [pc, #616]	; (8003864 <HAL_RCC_OscConfig+0x4f8>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	061b      	lsls	r3, r3, #24
 8003606:	4997      	ldr	r1, [pc, #604]	; (8003864 <HAL_RCC_OscConfig+0x4f8>)
 8003608:	4313      	orrs	r3, r2
 800360a:	604b      	str	r3, [r1, #4]
 800360c:	e018      	b.n	8003640 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800360e:	4b95      	ldr	r3, [pc, #596]	; (8003864 <HAL_RCC_OscConfig+0x4f8>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a94      	ldr	r2, [pc, #592]	; (8003864 <HAL_RCC_OscConfig+0x4f8>)
 8003614:	f023 0301 	bic.w	r3, r3, #1
 8003618:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800361a:	f7fe f845 	bl	80016a8 <HAL_GetTick>
 800361e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003620:	e008      	b.n	8003634 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003622:	f7fe f841 	bl	80016a8 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e2ed      	b.n	8003c10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003634:	4b8b      	ldr	r3, [pc, #556]	; (8003864 <HAL_RCC_OscConfig+0x4f8>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0304 	and.w	r3, r3, #4
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1f0      	bne.n	8003622 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0310 	and.w	r3, r3, #16
 8003648:	2b00      	cmp	r3, #0
 800364a:	f000 80a9 	beq.w	80037a0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800364e:	4b85      	ldr	r3, [pc, #532]	; (8003864 <HAL_RCC_OscConfig+0x4f8>)
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003656:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003658:	4b82      	ldr	r3, [pc, #520]	; (8003864 <HAL_RCC_OscConfig+0x4f8>)
 800365a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	2b08      	cmp	r3, #8
 8003662:	d007      	beq.n	8003674 <HAL_RCC_OscConfig+0x308>
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	2b18      	cmp	r3, #24
 8003668:	d13a      	bne.n	80036e0 <HAL_RCC_OscConfig+0x374>
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f003 0303 	and.w	r3, r3, #3
 8003670:	2b01      	cmp	r3, #1
 8003672:	d135      	bne.n	80036e0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003674:	4b7b      	ldr	r3, [pc, #492]	; (8003864 <HAL_RCC_OscConfig+0x4f8>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800367c:	2b00      	cmp	r3, #0
 800367e:	d005      	beq.n	800368c <HAL_RCC_OscConfig+0x320>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	69db      	ldr	r3, [r3, #28]
 8003684:	2b80      	cmp	r3, #128	; 0x80
 8003686:	d001      	beq.n	800368c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e2c1      	b.n	8003c10 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800368c:	f7fe f83c 	bl	8001708 <HAL_GetREVID>
 8003690:	4603      	mov	r3, r0
 8003692:	f241 0203 	movw	r2, #4099	; 0x1003
 8003696:	4293      	cmp	r3, r2
 8003698:	d817      	bhi.n	80036ca <HAL_RCC_OscConfig+0x35e>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	2b20      	cmp	r3, #32
 80036a0:	d108      	bne.n	80036b4 <HAL_RCC_OscConfig+0x348>
 80036a2:	4b70      	ldr	r3, [pc, #448]	; (8003864 <HAL_RCC_OscConfig+0x4f8>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80036aa:	4a6e      	ldr	r2, [pc, #440]	; (8003864 <HAL_RCC_OscConfig+0x4f8>)
 80036ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80036b0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80036b2:	e075      	b.n	80037a0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80036b4:	4b6b      	ldr	r3, [pc, #428]	; (8003864 <HAL_RCC_OscConfig+0x4f8>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	069b      	lsls	r3, r3, #26
 80036c2:	4968      	ldr	r1, [pc, #416]	; (8003864 <HAL_RCC_OscConfig+0x4f8>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80036c8:	e06a      	b.n	80037a0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80036ca:	4b66      	ldr	r3, [pc, #408]	; (8003864 <HAL_RCC_OscConfig+0x4f8>)
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	061b      	lsls	r3, r3, #24
 80036d8:	4962      	ldr	r1, [pc, #392]	; (8003864 <HAL_RCC_OscConfig+0x4f8>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80036de:	e05f      	b.n	80037a0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	69db      	ldr	r3, [r3, #28]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d042      	beq.n	800376e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80036e8:	4b5e      	ldr	r3, [pc, #376]	; (8003864 <HAL_RCC_OscConfig+0x4f8>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a5d      	ldr	r2, [pc, #372]	; (8003864 <HAL_RCC_OscConfig+0x4f8>)
 80036ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f4:	f7fd ffd8 	bl	80016a8 <HAL_GetTick>
 80036f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80036fa:	e008      	b.n	800370e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80036fc:	f7fd ffd4 	bl	80016a8 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b02      	cmp	r3, #2
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e280      	b.n	8003c10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800370e:	4b55      	ldr	r3, [pc, #340]	; (8003864 <HAL_RCC_OscConfig+0x4f8>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003716:	2b00      	cmp	r3, #0
 8003718:	d0f0      	beq.n	80036fc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800371a:	f7fd fff5 	bl	8001708 <HAL_GetREVID>
 800371e:	4603      	mov	r3, r0
 8003720:	f241 0203 	movw	r2, #4099	; 0x1003
 8003724:	4293      	cmp	r3, r2
 8003726:	d817      	bhi.n	8003758 <HAL_RCC_OscConfig+0x3ec>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a1b      	ldr	r3, [r3, #32]
 800372c:	2b20      	cmp	r3, #32
 800372e:	d108      	bne.n	8003742 <HAL_RCC_OscConfig+0x3d6>
 8003730:	4b4c      	ldr	r3, [pc, #304]	; (8003864 <HAL_RCC_OscConfig+0x4f8>)
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003738:	4a4a      	ldr	r2, [pc, #296]	; (8003864 <HAL_RCC_OscConfig+0x4f8>)
 800373a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800373e:	6053      	str	r3, [r2, #4]
 8003740:	e02e      	b.n	80037a0 <HAL_RCC_OscConfig+0x434>
 8003742:	4b48      	ldr	r3, [pc, #288]	; (8003864 <HAL_RCC_OscConfig+0x4f8>)
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	069b      	lsls	r3, r3, #26
 8003750:	4944      	ldr	r1, [pc, #272]	; (8003864 <HAL_RCC_OscConfig+0x4f8>)
 8003752:	4313      	orrs	r3, r2
 8003754:	604b      	str	r3, [r1, #4]
 8003756:	e023      	b.n	80037a0 <HAL_RCC_OscConfig+0x434>
 8003758:	4b42      	ldr	r3, [pc, #264]	; (8003864 <HAL_RCC_OscConfig+0x4f8>)
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	061b      	lsls	r3, r3, #24
 8003766:	493f      	ldr	r1, [pc, #252]	; (8003864 <HAL_RCC_OscConfig+0x4f8>)
 8003768:	4313      	orrs	r3, r2
 800376a:	60cb      	str	r3, [r1, #12]
 800376c:	e018      	b.n	80037a0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800376e:	4b3d      	ldr	r3, [pc, #244]	; (8003864 <HAL_RCC_OscConfig+0x4f8>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a3c      	ldr	r2, [pc, #240]	; (8003864 <HAL_RCC_OscConfig+0x4f8>)
 8003774:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003778:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800377a:	f7fd ff95 	bl	80016a8 <HAL_GetTick>
 800377e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003780:	e008      	b.n	8003794 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003782:	f7fd ff91 	bl	80016a8 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d901      	bls.n	8003794 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e23d      	b.n	8003c10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003794:	4b33      	ldr	r3, [pc, #204]	; (8003864 <HAL_RCC_OscConfig+0x4f8>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1f0      	bne.n	8003782 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0308 	and.w	r3, r3, #8
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d036      	beq.n	800381a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d019      	beq.n	80037e8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037b4:	4b2b      	ldr	r3, [pc, #172]	; (8003864 <HAL_RCC_OscConfig+0x4f8>)
 80037b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037b8:	4a2a      	ldr	r2, [pc, #168]	; (8003864 <HAL_RCC_OscConfig+0x4f8>)
 80037ba:	f043 0301 	orr.w	r3, r3, #1
 80037be:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c0:	f7fd ff72 	bl	80016a8 <HAL_GetTick>
 80037c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80037c6:	e008      	b.n	80037da <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037c8:	f7fd ff6e 	bl	80016a8 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e21a      	b.n	8003c10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80037da:	4b22      	ldr	r3, [pc, #136]	; (8003864 <HAL_RCC_OscConfig+0x4f8>)
 80037dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d0f0      	beq.n	80037c8 <HAL_RCC_OscConfig+0x45c>
 80037e6:	e018      	b.n	800381a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037e8:	4b1e      	ldr	r3, [pc, #120]	; (8003864 <HAL_RCC_OscConfig+0x4f8>)
 80037ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ec:	4a1d      	ldr	r2, [pc, #116]	; (8003864 <HAL_RCC_OscConfig+0x4f8>)
 80037ee:	f023 0301 	bic.w	r3, r3, #1
 80037f2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f4:	f7fd ff58 	bl	80016a8 <HAL_GetTick>
 80037f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80037fa:	e008      	b.n	800380e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037fc:	f7fd ff54 	bl	80016a8 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b02      	cmp	r3, #2
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e200      	b.n	8003c10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800380e:	4b15      	ldr	r3, [pc, #84]	; (8003864 <HAL_RCC_OscConfig+0x4f8>)
 8003810:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1f0      	bne.n	80037fc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0320 	and.w	r3, r3, #32
 8003822:	2b00      	cmp	r3, #0
 8003824:	d039      	beq.n	800389a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d01c      	beq.n	8003868 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800382e:	4b0d      	ldr	r3, [pc, #52]	; (8003864 <HAL_RCC_OscConfig+0x4f8>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a0c      	ldr	r2, [pc, #48]	; (8003864 <HAL_RCC_OscConfig+0x4f8>)
 8003834:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003838:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800383a:	f7fd ff35 	bl	80016a8 <HAL_GetTick>
 800383e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003840:	e008      	b.n	8003854 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003842:	f7fd ff31 	bl	80016a8 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d901      	bls.n	8003854 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e1dd      	b.n	8003c10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003854:	4b03      	ldr	r3, [pc, #12]	; (8003864 <HAL_RCC_OscConfig+0x4f8>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d0f0      	beq.n	8003842 <HAL_RCC_OscConfig+0x4d6>
 8003860:	e01b      	b.n	800389a <HAL_RCC_OscConfig+0x52e>
 8003862:	bf00      	nop
 8003864:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003868:	4b9b      	ldr	r3, [pc, #620]	; (8003ad8 <HAL_RCC_OscConfig+0x76c>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a9a      	ldr	r2, [pc, #616]	; (8003ad8 <HAL_RCC_OscConfig+0x76c>)
 800386e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003872:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003874:	f7fd ff18 	bl	80016a8 <HAL_GetTick>
 8003878:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800387a:	e008      	b.n	800388e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800387c:	f7fd ff14 	bl	80016a8 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e1c0      	b.n	8003c10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800388e:	4b92      	ldr	r3, [pc, #584]	; (8003ad8 <HAL_RCC_OscConfig+0x76c>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1f0      	bne.n	800387c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0304 	and.w	r3, r3, #4
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f000 8081 	beq.w	80039aa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80038a8:	4b8c      	ldr	r3, [pc, #560]	; (8003adc <HAL_RCC_OscConfig+0x770>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a8b      	ldr	r2, [pc, #556]	; (8003adc <HAL_RCC_OscConfig+0x770>)
 80038ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038b4:	f7fd fef8 	bl	80016a8 <HAL_GetTick>
 80038b8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038ba:	e008      	b.n	80038ce <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038bc:	f7fd fef4 	bl	80016a8 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b64      	cmp	r3, #100	; 0x64
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e1a0      	b.n	8003c10 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038ce:	4b83      	ldr	r3, [pc, #524]	; (8003adc <HAL_RCC_OscConfig+0x770>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d0f0      	beq.n	80038bc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d106      	bne.n	80038f0 <HAL_RCC_OscConfig+0x584>
 80038e2:	4b7d      	ldr	r3, [pc, #500]	; (8003ad8 <HAL_RCC_OscConfig+0x76c>)
 80038e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e6:	4a7c      	ldr	r2, [pc, #496]	; (8003ad8 <HAL_RCC_OscConfig+0x76c>)
 80038e8:	f043 0301 	orr.w	r3, r3, #1
 80038ec:	6713      	str	r3, [r2, #112]	; 0x70
 80038ee:	e02d      	b.n	800394c <HAL_RCC_OscConfig+0x5e0>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10c      	bne.n	8003912 <HAL_RCC_OscConfig+0x5a6>
 80038f8:	4b77      	ldr	r3, [pc, #476]	; (8003ad8 <HAL_RCC_OscConfig+0x76c>)
 80038fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fc:	4a76      	ldr	r2, [pc, #472]	; (8003ad8 <HAL_RCC_OscConfig+0x76c>)
 80038fe:	f023 0301 	bic.w	r3, r3, #1
 8003902:	6713      	str	r3, [r2, #112]	; 0x70
 8003904:	4b74      	ldr	r3, [pc, #464]	; (8003ad8 <HAL_RCC_OscConfig+0x76c>)
 8003906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003908:	4a73      	ldr	r2, [pc, #460]	; (8003ad8 <HAL_RCC_OscConfig+0x76c>)
 800390a:	f023 0304 	bic.w	r3, r3, #4
 800390e:	6713      	str	r3, [r2, #112]	; 0x70
 8003910:	e01c      	b.n	800394c <HAL_RCC_OscConfig+0x5e0>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	2b05      	cmp	r3, #5
 8003918:	d10c      	bne.n	8003934 <HAL_RCC_OscConfig+0x5c8>
 800391a:	4b6f      	ldr	r3, [pc, #444]	; (8003ad8 <HAL_RCC_OscConfig+0x76c>)
 800391c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800391e:	4a6e      	ldr	r2, [pc, #440]	; (8003ad8 <HAL_RCC_OscConfig+0x76c>)
 8003920:	f043 0304 	orr.w	r3, r3, #4
 8003924:	6713      	str	r3, [r2, #112]	; 0x70
 8003926:	4b6c      	ldr	r3, [pc, #432]	; (8003ad8 <HAL_RCC_OscConfig+0x76c>)
 8003928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392a:	4a6b      	ldr	r2, [pc, #428]	; (8003ad8 <HAL_RCC_OscConfig+0x76c>)
 800392c:	f043 0301 	orr.w	r3, r3, #1
 8003930:	6713      	str	r3, [r2, #112]	; 0x70
 8003932:	e00b      	b.n	800394c <HAL_RCC_OscConfig+0x5e0>
 8003934:	4b68      	ldr	r3, [pc, #416]	; (8003ad8 <HAL_RCC_OscConfig+0x76c>)
 8003936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003938:	4a67      	ldr	r2, [pc, #412]	; (8003ad8 <HAL_RCC_OscConfig+0x76c>)
 800393a:	f023 0301 	bic.w	r3, r3, #1
 800393e:	6713      	str	r3, [r2, #112]	; 0x70
 8003940:	4b65      	ldr	r3, [pc, #404]	; (8003ad8 <HAL_RCC_OscConfig+0x76c>)
 8003942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003944:	4a64      	ldr	r2, [pc, #400]	; (8003ad8 <HAL_RCC_OscConfig+0x76c>)
 8003946:	f023 0304 	bic.w	r3, r3, #4
 800394a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d015      	beq.n	8003980 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003954:	f7fd fea8 	bl	80016a8 <HAL_GetTick>
 8003958:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800395a:	e00a      	b.n	8003972 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800395c:	f7fd fea4 	bl	80016a8 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	f241 3288 	movw	r2, #5000	; 0x1388
 800396a:	4293      	cmp	r3, r2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e14e      	b.n	8003c10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003972:	4b59      	ldr	r3, [pc, #356]	; (8003ad8 <HAL_RCC_OscConfig+0x76c>)
 8003974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d0ee      	beq.n	800395c <HAL_RCC_OscConfig+0x5f0>
 800397e:	e014      	b.n	80039aa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003980:	f7fd fe92 	bl	80016a8 <HAL_GetTick>
 8003984:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003986:	e00a      	b.n	800399e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003988:	f7fd fe8e 	bl	80016a8 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	f241 3288 	movw	r2, #5000	; 0x1388
 8003996:	4293      	cmp	r3, r2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e138      	b.n	8003c10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800399e:	4b4e      	ldr	r3, [pc, #312]	; (8003ad8 <HAL_RCC_OscConfig+0x76c>)
 80039a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1ee      	bne.n	8003988 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f000 812d 	beq.w	8003c0e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80039b4:	4b48      	ldr	r3, [pc, #288]	; (8003ad8 <HAL_RCC_OscConfig+0x76c>)
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039bc:	2b18      	cmp	r3, #24
 80039be:	f000 80bd 	beq.w	8003b3c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	f040 809e 	bne.w	8003b08 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039cc:	4b42      	ldr	r3, [pc, #264]	; (8003ad8 <HAL_RCC_OscConfig+0x76c>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a41      	ldr	r2, [pc, #260]	; (8003ad8 <HAL_RCC_OscConfig+0x76c>)
 80039d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d8:	f7fd fe66 	bl	80016a8 <HAL_GetTick>
 80039dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80039de:	e008      	b.n	80039f2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039e0:	f7fd fe62 	bl	80016a8 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e10e      	b.n	8003c10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80039f2:	4b39      	ldr	r3, [pc, #228]	; (8003ad8 <HAL_RCC_OscConfig+0x76c>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1f0      	bne.n	80039e0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039fe:	4b36      	ldr	r3, [pc, #216]	; (8003ad8 <HAL_RCC_OscConfig+0x76c>)
 8003a00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a02:	4b37      	ldr	r3, [pc, #220]	; (8003ae0 <HAL_RCC_OscConfig+0x774>)
 8003a04:	4013      	ands	r3, r2
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003a0e:	0112      	lsls	r2, r2, #4
 8003a10:	430a      	orrs	r2, r1
 8003a12:	4931      	ldr	r1, [pc, #196]	; (8003ad8 <HAL_RCC_OscConfig+0x76c>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	628b      	str	r3, [r1, #40]	; 0x28
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a26:	3b01      	subs	r3, #1
 8003a28:	025b      	lsls	r3, r3, #9
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	431a      	orrs	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a32:	3b01      	subs	r3, #1
 8003a34:	041b      	lsls	r3, r3, #16
 8003a36:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a40:	3b01      	subs	r3, #1
 8003a42:	061b      	lsls	r3, r3, #24
 8003a44:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003a48:	4923      	ldr	r1, [pc, #140]	; (8003ad8 <HAL_RCC_OscConfig+0x76c>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003a4e:	4b22      	ldr	r3, [pc, #136]	; (8003ad8 <HAL_RCC_OscConfig+0x76c>)
 8003a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a52:	4a21      	ldr	r2, [pc, #132]	; (8003ad8 <HAL_RCC_OscConfig+0x76c>)
 8003a54:	f023 0301 	bic.w	r3, r3, #1
 8003a58:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003a5a:	4b1f      	ldr	r3, [pc, #124]	; (8003ad8 <HAL_RCC_OscConfig+0x76c>)
 8003a5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a5e:	4b21      	ldr	r3, [pc, #132]	; (8003ae4 <HAL_RCC_OscConfig+0x778>)
 8003a60:	4013      	ands	r3, r2
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003a66:	00d2      	lsls	r2, r2, #3
 8003a68:	491b      	ldr	r1, [pc, #108]	; (8003ad8 <HAL_RCC_OscConfig+0x76c>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003a6e:	4b1a      	ldr	r3, [pc, #104]	; (8003ad8 <HAL_RCC_OscConfig+0x76c>)
 8003a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a72:	f023 020c 	bic.w	r2, r3, #12
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7a:	4917      	ldr	r1, [pc, #92]	; (8003ad8 <HAL_RCC_OscConfig+0x76c>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003a80:	4b15      	ldr	r3, [pc, #84]	; (8003ad8 <HAL_RCC_OscConfig+0x76c>)
 8003a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a84:	f023 0202 	bic.w	r2, r3, #2
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8c:	4912      	ldr	r1, [pc, #72]	; (8003ad8 <HAL_RCC_OscConfig+0x76c>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003a92:	4b11      	ldr	r3, [pc, #68]	; (8003ad8 <HAL_RCC_OscConfig+0x76c>)
 8003a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a96:	4a10      	ldr	r2, [pc, #64]	; (8003ad8 <HAL_RCC_OscConfig+0x76c>)
 8003a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a9c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a9e:	4b0e      	ldr	r3, [pc, #56]	; (8003ad8 <HAL_RCC_OscConfig+0x76c>)
 8003aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa2:	4a0d      	ldr	r2, [pc, #52]	; (8003ad8 <HAL_RCC_OscConfig+0x76c>)
 8003aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aa8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003aaa:	4b0b      	ldr	r3, [pc, #44]	; (8003ad8 <HAL_RCC_OscConfig+0x76c>)
 8003aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aae:	4a0a      	ldr	r2, [pc, #40]	; (8003ad8 <HAL_RCC_OscConfig+0x76c>)
 8003ab0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ab4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003ab6:	4b08      	ldr	r3, [pc, #32]	; (8003ad8 <HAL_RCC_OscConfig+0x76c>)
 8003ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aba:	4a07      	ldr	r2, [pc, #28]	; (8003ad8 <HAL_RCC_OscConfig+0x76c>)
 8003abc:	f043 0301 	orr.w	r3, r3, #1
 8003ac0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ac2:	4b05      	ldr	r3, [pc, #20]	; (8003ad8 <HAL_RCC_OscConfig+0x76c>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a04      	ldr	r2, [pc, #16]	; (8003ad8 <HAL_RCC_OscConfig+0x76c>)
 8003ac8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003acc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ace:	f7fd fdeb 	bl	80016a8 <HAL_GetTick>
 8003ad2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ad4:	e011      	b.n	8003afa <HAL_RCC_OscConfig+0x78e>
 8003ad6:	bf00      	nop
 8003ad8:	58024400 	.word	0x58024400
 8003adc:	58024800 	.word	0x58024800
 8003ae0:	fffffc0c 	.word	0xfffffc0c
 8003ae4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ae8:	f7fd fdde 	bl	80016a8 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e08a      	b.n	8003c10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003afa:	4b47      	ldr	r3, [pc, #284]	; (8003c18 <HAL_RCC_OscConfig+0x8ac>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d0f0      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x77c>
 8003b06:	e082      	b.n	8003c0e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b08:	4b43      	ldr	r3, [pc, #268]	; (8003c18 <HAL_RCC_OscConfig+0x8ac>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a42      	ldr	r2, [pc, #264]	; (8003c18 <HAL_RCC_OscConfig+0x8ac>)
 8003b0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b14:	f7fd fdc8 	bl	80016a8 <HAL_GetTick>
 8003b18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b1a:	e008      	b.n	8003b2e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b1c:	f7fd fdc4 	bl	80016a8 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e070      	b.n	8003c10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b2e:	4b3a      	ldr	r3, [pc, #232]	; (8003c18 <HAL_RCC_OscConfig+0x8ac>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1f0      	bne.n	8003b1c <HAL_RCC_OscConfig+0x7b0>
 8003b3a:	e068      	b.n	8003c0e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003b3c:	4b36      	ldr	r3, [pc, #216]	; (8003c18 <HAL_RCC_OscConfig+0x8ac>)
 8003b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b40:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003b42:	4b35      	ldr	r3, [pc, #212]	; (8003c18 <HAL_RCC_OscConfig+0x8ac>)
 8003b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b46:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d031      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	f003 0203 	and.w	r2, r3, #3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d12a      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	091b      	lsrs	r3, r3, #4
 8003b62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d122      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b78:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d11a      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	0a5b      	lsrs	r3, r3, #9
 8003b82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b8a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d111      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	0c1b      	lsrs	r3, r3, #16
 8003b94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d108      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	0e1b      	lsrs	r3, r3, #24
 8003ba6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bae:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d001      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e02b      	b.n	8003c10 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003bb8:	4b17      	ldr	r3, [pc, #92]	; (8003c18 <HAL_RCC_OscConfig+0x8ac>)
 8003bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bbc:	08db      	lsrs	r3, r3, #3
 8003bbe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003bc2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d01f      	beq.n	8003c0e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003bce:	4b12      	ldr	r3, [pc, #72]	; (8003c18 <HAL_RCC_OscConfig+0x8ac>)
 8003bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd2:	4a11      	ldr	r2, [pc, #68]	; (8003c18 <HAL_RCC_OscConfig+0x8ac>)
 8003bd4:	f023 0301 	bic.w	r3, r3, #1
 8003bd8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003bda:	f7fd fd65 	bl	80016a8 <HAL_GetTick>
 8003bde:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003be0:	bf00      	nop
 8003be2:	f7fd fd61 	bl	80016a8 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d0f9      	beq.n	8003be2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003bee:	4b0a      	ldr	r3, [pc, #40]	; (8003c18 <HAL_RCC_OscConfig+0x8ac>)
 8003bf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bf2:	4b0a      	ldr	r3, [pc, #40]	; (8003c1c <HAL_RCC_OscConfig+0x8b0>)
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003bfa:	00d2      	lsls	r2, r2, #3
 8003bfc:	4906      	ldr	r1, [pc, #24]	; (8003c18 <HAL_RCC_OscConfig+0x8ac>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003c02:	4b05      	ldr	r3, [pc, #20]	; (8003c18 <HAL_RCC_OscConfig+0x8ac>)
 8003c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c06:	4a04      	ldr	r2, [pc, #16]	; (8003c18 <HAL_RCC_OscConfig+0x8ac>)
 8003c08:	f043 0301 	orr.w	r3, r3, #1
 8003c0c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3730      	adds	r7, #48	; 0x30
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	58024400 	.word	0x58024400
 8003c1c:	ffff0007 	.word	0xffff0007

08003c20 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b086      	sub	sp, #24
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d101      	bne.n	8003c34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e19c      	b.n	8003f6e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c34:	4b8a      	ldr	r3, [pc, #552]	; (8003e60 <HAL_RCC_ClockConfig+0x240>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 030f 	and.w	r3, r3, #15
 8003c3c:	683a      	ldr	r2, [r7, #0]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d910      	bls.n	8003c64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c42:	4b87      	ldr	r3, [pc, #540]	; (8003e60 <HAL_RCC_ClockConfig+0x240>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f023 020f 	bic.w	r2, r3, #15
 8003c4a:	4985      	ldr	r1, [pc, #532]	; (8003e60 <HAL_RCC_ClockConfig+0x240>)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c52:	4b83      	ldr	r3, [pc, #524]	; (8003e60 <HAL_RCC_ClockConfig+0x240>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 030f 	and.w	r3, r3, #15
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d001      	beq.n	8003c64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e184      	b.n	8003f6e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0304 	and.w	r3, r3, #4
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d010      	beq.n	8003c92 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	691a      	ldr	r2, [r3, #16]
 8003c74:	4b7b      	ldr	r3, [pc, #492]	; (8003e64 <HAL_RCC_ClockConfig+0x244>)
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d908      	bls.n	8003c92 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003c80:	4b78      	ldr	r3, [pc, #480]	; (8003e64 <HAL_RCC_ClockConfig+0x244>)
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	4975      	ldr	r1, [pc, #468]	; (8003e64 <HAL_RCC_ClockConfig+0x244>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0308 	and.w	r3, r3, #8
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d010      	beq.n	8003cc0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	695a      	ldr	r2, [r3, #20]
 8003ca2:	4b70      	ldr	r3, [pc, #448]	; (8003e64 <HAL_RCC_ClockConfig+0x244>)
 8003ca4:	69db      	ldr	r3, [r3, #28]
 8003ca6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d908      	bls.n	8003cc0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003cae:	4b6d      	ldr	r3, [pc, #436]	; (8003e64 <HAL_RCC_ClockConfig+0x244>)
 8003cb0:	69db      	ldr	r3, [r3, #28]
 8003cb2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	496a      	ldr	r1, [pc, #424]	; (8003e64 <HAL_RCC_ClockConfig+0x244>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0310 	and.w	r3, r3, #16
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d010      	beq.n	8003cee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	699a      	ldr	r2, [r3, #24]
 8003cd0:	4b64      	ldr	r3, [pc, #400]	; (8003e64 <HAL_RCC_ClockConfig+0x244>)
 8003cd2:	69db      	ldr	r3, [r3, #28]
 8003cd4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d908      	bls.n	8003cee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003cdc:	4b61      	ldr	r3, [pc, #388]	; (8003e64 <HAL_RCC_ClockConfig+0x244>)
 8003cde:	69db      	ldr	r3, [r3, #28]
 8003ce0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	495e      	ldr	r1, [pc, #376]	; (8003e64 <HAL_RCC_ClockConfig+0x244>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0320 	and.w	r3, r3, #32
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d010      	beq.n	8003d1c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	69da      	ldr	r2, [r3, #28]
 8003cfe:	4b59      	ldr	r3, [pc, #356]	; (8003e64 <HAL_RCC_ClockConfig+0x244>)
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d908      	bls.n	8003d1c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003d0a:	4b56      	ldr	r3, [pc, #344]	; (8003e64 <HAL_RCC_ClockConfig+0x244>)
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	69db      	ldr	r3, [r3, #28]
 8003d16:	4953      	ldr	r1, [pc, #332]	; (8003e64 <HAL_RCC_ClockConfig+0x244>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d010      	beq.n	8003d4a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	68da      	ldr	r2, [r3, #12]
 8003d2c:	4b4d      	ldr	r3, [pc, #308]	; (8003e64 <HAL_RCC_ClockConfig+0x244>)
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	f003 030f 	and.w	r3, r3, #15
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d908      	bls.n	8003d4a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d38:	4b4a      	ldr	r3, [pc, #296]	; (8003e64 <HAL_RCC_ClockConfig+0x244>)
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	f023 020f 	bic.w	r2, r3, #15
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	4947      	ldr	r1, [pc, #284]	; (8003e64 <HAL_RCC_ClockConfig+0x244>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d055      	beq.n	8003e02 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003d56:	4b43      	ldr	r3, [pc, #268]	; (8003e64 <HAL_RCC_ClockConfig+0x244>)
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	4940      	ldr	r1, [pc, #256]	; (8003e64 <HAL_RCC_ClockConfig+0x244>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d107      	bne.n	8003d80 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d70:	4b3c      	ldr	r3, [pc, #240]	; (8003e64 <HAL_RCC_ClockConfig+0x244>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d121      	bne.n	8003dc0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e0f6      	b.n	8003f6e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	2b03      	cmp	r3, #3
 8003d86:	d107      	bne.n	8003d98 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d88:	4b36      	ldr	r3, [pc, #216]	; (8003e64 <HAL_RCC_ClockConfig+0x244>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d115      	bne.n	8003dc0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e0ea      	b.n	8003f6e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d107      	bne.n	8003db0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003da0:	4b30      	ldr	r3, [pc, #192]	; (8003e64 <HAL_RCC_ClockConfig+0x244>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d109      	bne.n	8003dc0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e0de      	b.n	8003f6e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003db0:	4b2c      	ldr	r3, [pc, #176]	; (8003e64 <HAL_RCC_ClockConfig+0x244>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d101      	bne.n	8003dc0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e0d6      	b.n	8003f6e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003dc0:	4b28      	ldr	r3, [pc, #160]	; (8003e64 <HAL_RCC_ClockConfig+0x244>)
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	f023 0207 	bic.w	r2, r3, #7
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	4925      	ldr	r1, [pc, #148]	; (8003e64 <HAL_RCC_ClockConfig+0x244>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dd2:	f7fd fc69 	bl	80016a8 <HAL_GetTick>
 8003dd6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dd8:	e00a      	b.n	8003df0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dda:	f7fd fc65 	bl	80016a8 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d901      	bls.n	8003df0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e0be      	b.n	8003f6e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003df0:	4b1c      	ldr	r3, [pc, #112]	; (8003e64 <HAL_RCC_ClockConfig+0x244>)
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	00db      	lsls	r3, r3, #3
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d1eb      	bne.n	8003dda <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d010      	beq.n	8003e30 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68da      	ldr	r2, [r3, #12]
 8003e12:	4b14      	ldr	r3, [pc, #80]	; (8003e64 <HAL_RCC_ClockConfig+0x244>)
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	f003 030f 	and.w	r3, r3, #15
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d208      	bcs.n	8003e30 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e1e:	4b11      	ldr	r3, [pc, #68]	; (8003e64 <HAL_RCC_ClockConfig+0x244>)
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	f023 020f 	bic.w	r2, r3, #15
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	490e      	ldr	r1, [pc, #56]	; (8003e64 <HAL_RCC_ClockConfig+0x244>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e30:	4b0b      	ldr	r3, [pc, #44]	; (8003e60 <HAL_RCC_ClockConfig+0x240>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 030f 	and.w	r3, r3, #15
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d214      	bcs.n	8003e68 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e3e:	4b08      	ldr	r3, [pc, #32]	; (8003e60 <HAL_RCC_ClockConfig+0x240>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f023 020f 	bic.w	r2, r3, #15
 8003e46:	4906      	ldr	r1, [pc, #24]	; (8003e60 <HAL_RCC_ClockConfig+0x240>)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e4e:	4b04      	ldr	r3, [pc, #16]	; (8003e60 <HAL_RCC_ClockConfig+0x240>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 030f 	and.w	r3, r3, #15
 8003e56:	683a      	ldr	r2, [r7, #0]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d005      	beq.n	8003e68 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e086      	b.n	8003f6e <HAL_RCC_ClockConfig+0x34e>
 8003e60:	52002000 	.word	0x52002000
 8003e64:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0304 	and.w	r3, r3, #4
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d010      	beq.n	8003e96 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	691a      	ldr	r2, [r3, #16]
 8003e78:	4b3f      	ldr	r3, [pc, #252]	; (8003f78 <HAL_RCC_ClockConfig+0x358>)
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d208      	bcs.n	8003e96 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003e84:	4b3c      	ldr	r3, [pc, #240]	; (8003f78 <HAL_RCC_ClockConfig+0x358>)
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	4939      	ldr	r1, [pc, #228]	; (8003f78 <HAL_RCC_ClockConfig+0x358>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0308 	and.w	r3, r3, #8
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d010      	beq.n	8003ec4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	695a      	ldr	r2, [r3, #20]
 8003ea6:	4b34      	ldr	r3, [pc, #208]	; (8003f78 <HAL_RCC_ClockConfig+0x358>)
 8003ea8:	69db      	ldr	r3, [r3, #28]
 8003eaa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d208      	bcs.n	8003ec4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003eb2:	4b31      	ldr	r3, [pc, #196]	; (8003f78 <HAL_RCC_ClockConfig+0x358>)
 8003eb4:	69db      	ldr	r3, [r3, #28]
 8003eb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	492e      	ldr	r1, [pc, #184]	; (8003f78 <HAL_RCC_ClockConfig+0x358>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0310 	and.w	r3, r3, #16
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d010      	beq.n	8003ef2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	699a      	ldr	r2, [r3, #24]
 8003ed4:	4b28      	ldr	r3, [pc, #160]	; (8003f78 <HAL_RCC_ClockConfig+0x358>)
 8003ed6:	69db      	ldr	r3, [r3, #28]
 8003ed8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d208      	bcs.n	8003ef2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003ee0:	4b25      	ldr	r3, [pc, #148]	; (8003f78 <HAL_RCC_ClockConfig+0x358>)
 8003ee2:	69db      	ldr	r3, [r3, #28]
 8003ee4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	4922      	ldr	r1, [pc, #136]	; (8003f78 <HAL_RCC_ClockConfig+0x358>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0320 	and.w	r3, r3, #32
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d010      	beq.n	8003f20 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	69da      	ldr	r2, [r3, #28]
 8003f02:	4b1d      	ldr	r3, [pc, #116]	; (8003f78 <HAL_RCC_ClockConfig+0x358>)
 8003f04:	6a1b      	ldr	r3, [r3, #32]
 8003f06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d208      	bcs.n	8003f20 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003f0e:	4b1a      	ldr	r3, [pc, #104]	; (8003f78 <HAL_RCC_ClockConfig+0x358>)
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	69db      	ldr	r3, [r3, #28]
 8003f1a:	4917      	ldr	r1, [pc, #92]	; (8003f78 <HAL_RCC_ClockConfig+0x358>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003f20:	f000 f834 	bl	8003f8c <HAL_RCC_GetSysClockFreq>
 8003f24:	4602      	mov	r2, r0
 8003f26:	4b14      	ldr	r3, [pc, #80]	; (8003f78 <HAL_RCC_ClockConfig+0x358>)
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	0a1b      	lsrs	r3, r3, #8
 8003f2c:	f003 030f 	and.w	r3, r3, #15
 8003f30:	4912      	ldr	r1, [pc, #72]	; (8003f7c <HAL_RCC_ClockConfig+0x35c>)
 8003f32:	5ccb      	ldrb	r3, [r1, r3]
 8003f34:	f003 031f 	and.w	r3, r3, #31
 8003f38:	fa22 f303 	lsr.w	r3, r2, r3
 8003f3c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003f3e:	4b0e      	ldr	r3, [pc, #56]	; (8003f78 <HAL_RCC_ClockConfig+0x358>)
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	f003 030f 	and.w	r3, r3, #15
 8003f46:	4a0d      	ldr	r2, [pc, #52]	; (8003f7c <HAL_RCC_ClockConfig+0x35c>)
 8003f48:	5cd3      	ldrb	r3, [r2, r3]
 8003f4a:	f003 031f 	and.w	r3, r3, #31
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	fa22 f303 	lsr.w	r3, r2, r3
 8003f54:	4a0a      	ldr	r2, [pc, #40]	; (8003f80 <HAL_RCC_ClockConfig+0x360>)
 8003f56:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003f58:	4a0a      	ldr	r2, [pc, #40]	; (8003f84 <HAL_RCC_ClockConfig+0x364>)
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003f5e:	4b0a      	ldr	r3, [pc, #40]	; (8003f88 <HAL_RCC_ClockConfig+0x368>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7fd fa50 	bl	8001408 <HAL_InitTick>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3718      	adds	r7, #24
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	58024400 	.word	0x58024400
 8003f7c:	0800c82c 	.word	0x0800c82c
 8003f80:	24000004 	.word	0x24000004
 8003f84:	24000000 	.word	0x24000000
 8003f88:	24000008 	.word	0x24000008

08003f8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b089      	sub	sp, #36	; 0x24
 8003f90:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f92:	4bb3      	ldr	r3, [pc, #716]	; (8004260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f9a:	2b18      	cmp	r3, #24
 8003f9c:	f200 8155 	bhi.w	800424a <HAL_RCC_GetSysClockFreq+0x2be>
 8003fa0:	a201      	add	r2, pc, #4	; (adr r2, 8003fa8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa6:	bf00      	nop
 8003fa8:	0800400d 	.word	0x0800400d
 8003fac:	0800424b 	.word	0x0800424b
 8003fb0:	0800424b 	.word	0x0800424b
 8003fb4:	0800424b 	.word	0x0800424b
 8003fb8:	0800424b 	.word	0x0800424b
 8003fbc:	0800424b 	.word	0x0800424b
 8003fc0:	0800424b 	.word	0x0800424b
 8003fc4:	0800424b 	.word	0x0800424b
 8003fc8:	08004033 	.word	0x08004033
 8003fcc:	0800424b 	.word	0x0800424b
 8003fd0:	0800424b 	.word	0x0800424b
 8003fd4:	0800424b 	.word	0x0800424b
 8003fd8:	0800424b 	.word	0x0800424b
 8003fdc:	0800424b 	.word	0x0800424b
 8003fe0:	0800424b 	.word	0x0800424b
 8003fe4:	0800424b 	.word	0x0800424b
 8003fe8:	08004039 	.word	0x08004039
 8003fec:	0800424b 	.word	0x0800424b
 8003ff0:	0800424b 	.word	0x0800424b
 8003ff4:	0800424b 	.word	0x0800424b
 8003ff8:	0800424b 	.word	0x0800424b
 8003ffc:	0800424b 	.word	0x0800424b
 8004000:	0800424b 	.word	0x0800424b
 8004004:	0800424b 	.word	0x0800424b
 8004008:	0800403f 	.word	0x0800403f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800400c:	4b94      	ldr	r3, [pc, #592]	; (8004260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0320 	and.w	r3, r3, #32
 8004014:	2b00      	cmp	r3, #0
 8004016:	d009      	beq.n	800402c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004018:	4b91      	ldr	r3, [pc, #580]	; (8004260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	08db      	lsrs	r3, r3, #3
 800401e:	f003 0303 	and.w	r3, r3, #3
 8004022:	4a90      	ldr	r2, [pc, #576]	; (8004264 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004024:	fa22 f303 	lsr.w	r3, r2, r3
 8004028:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800402a:	e111      	b.n	8004250 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800402c:	4b8d      	ldr	r3, [pc, #564]	; (8004264 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800402e:	61bb      	str	r3, [r7, #24]
      break;
 8004030:	e10e      	b.n	8004250 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004032:	4b8d      	ldr	r3, [pc, #564]	; (8004268 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004034:	61bb      	str	r3, [r7, #24]
      break;
 8004036:	e10b      	b.n	8004250 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004038:	4b8c      	ldr	r3, [pc, #560]	; (800426c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800403a:	61bb      	str	r3, [r7, #24]
      break;
 800403c:	e108      	b.n	8004250 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800403e:	4b88      	ldr	r3, [pc, #544]	; (8004260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004042:	f003 0303 	and.w	r3, r3, #3
 8004046:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004048:	4b85      	ldr	r3, [pc, #532]	; (8004260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800404a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800404c:	091b      	lsrs	r3, r3, #4
 800404e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004052:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004054:	4b82      	ldr	r3, [pc, #520]	; (8004260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004058:	f003 0301 	and.w	r3, r3, #1
 800405c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800405e:	4b80      	ldr	r3, [pc, #512]	; (8004260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004062:	08db      	lsrs	r3, r3, #3
 8004064:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	fb02 f303 	mul.w	r3, r2, r3
 800406e:	ee07 3a90 	vmov	s15, r3
 8004072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004076:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	2b00      	cmp	r3, #0
 800407e:	f000 80e1 	beq.w	8004244 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	2b02      	cmp	r3, #2
 8004086:	f000 8083 	beq.w	8004190 <HAL_RCC_GetSysClockFreq+0x204>
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	2b02      	cmp	r3, #2
 800408e:	f200 80a1 	bhi.w	80041d4 <HAL_RCC_GetSysClockFreq+0x248>
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d003      	beq.n	80040a0 <HAL_RCC_GetSysClockFreq+0x114>
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d056      	beq.n	800414c <HAL_RCC_GetSysClockFreq+0x1c0>
 800409e:	e099      	b.n	80041d4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80040a0:	4b6f      	ldr	r3, [pc, #444]	; (8004260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0320 	and.w	r3, r3, #32
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d02d      	beq.n	8004108 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80040ac:	4b6c      	ldr	r3, [pc, #432]	; (8004260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	08db      	lsrs	r3, r3, #3
 80040b2:	f003 0303 	and.w	r3, r3, #3
 80040b6:	4a6b      	ldr	r2, [pc, #428]	; (8004264 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80040b8:	fa22 f303 	lsr.w	r3, r2, r3
 80040bc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	ee07 3a90 	vmov	s15, r3
 80040c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	ee07 3a90 	vmov	s15, r3
 80040ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040d6:	4b62      	ldr	r3, [pc, #392]	; (8004260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040de:	ee07 3a90 	vmov	s15, r3
 80040e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80040ea:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004270 <HAL_RCC_GetSysClockFreq+0x2e4>
 80040ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004102:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004106:	e087      	b.n	8004218 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	ee07 3a90 	vmov	s15, r3
 800410e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004112:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004274 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800411a:	4b51      	ldr	r3, [pc, #324]	; (8004260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800411c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004122:	ee07 3a90 	vmov	s15, r3
 8004126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800412a:	ed97 6a02 	vldr	s12, [r7, #8]
 800412e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004270 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800413a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800413e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004146:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800414a:	e065      	b.n	8004218 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	ee07 3a90 	vmov	s15, r3
 8004152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004156:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004278 <HAL_RCC_GetSysClockFreq+0x2ec>
 800415a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800415e:	4b40      	ldr	r3, [pc, #256]	; (8004260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004166:	ee07 3a90 	vmov	s15, r3
 800416a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800416e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004172:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004270 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800417a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800417e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800418a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800418e:	e043      	b.n	8004218 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	ee07 3a90 	vmov	s15, r3
 8004196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800419a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800427c <HAL_RCC_GetSysClockFreq+0x2f0>
 800419e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041a2:	4b2f      	ldr	r3, [pc, #188]	; (8004260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041aa:	ee07 3a90 	vmov	s15, r3
 80041ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80041b6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004270 <HAL_RCC_GetSysClockFreq+0x2e4>
 80041ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80041d2:	e021      	b.n	8004218 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	ee07 3a90 	vmov	s15, r3
 80041da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041de:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004278 <HAL_RCC_GetSysClockFreq+0x2ec>
 80041e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041e6:	4b1e      	ldr	r3, [pc, #120]	; (8004260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ee:	ee07 3a90 	vmov	s15, r3
 80041f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80041fa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004270 <HAL_RCC_GetSysClockFreq+0x2e4>
 80041fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004206:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800420a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800420e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004212:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004216:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004218:	4b11      	ldr	r3, [pc, #68]	; (8004260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800421a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421c:	0a5b      	lsrs	r3, r3, #9
 800421e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004222:	3301      	adds	r3, #1
 8004224:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	ee07 3a90 	vmov	s15, r3
 800422c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004230:	edd7 6a07 	vldr	s13, [r7, #28]
 8004234:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004238:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800423c:	ee17 3a90 	vmov	r3, s15
 8004240:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004242:	e005      	b.n	8004250 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004244:	2300      	movs	r3, #0
 8004246:	61bb      	str	r3, [r7, #24]
      break;
 8004248:	e002      	b.n	8004250 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800424a:	4b07      	ldr	r3, [pc, #28]	; (8004268 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800424c:	61bb      	str	r3, [r7, #24]
      break;
 800424e:	bf00      	nop
  }

  return sysclockfreq;
 8004250:	69bb      	ldr	r3, [r7, #24]
}
 8004252:	4618      	mov	r0, r3
 8004254:	3724      	adds	r7, #36	; 0x24
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	58024400 	.word	0x58024400
 8004264:	03d09000 	.word	0x03d09000
 8004268:	003d0900 	.word	0x003d0900
 800426c:	007a1200 	.word	0x007a1200
 8004270:	46000000 	.word	0x46000000
 8004274:	4c742400 	.word	0x4c742400
 8004278:	4a742400 	.word	0x4a742400
 800427c:	4af42400 	.word	0x4af42400

08004280 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004286:	f7ff fe81 	bl	8003f8c <HAL_RCC_GetSysClockFreq>
 800428a:	4602      	mov	r2, r0
 800428c:	4b10      	ldr	r3, [pc, #64]	; (80042d0 <HAL_RCC_GetHCLKFreq+0x50>)
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	0a1b      	lsrs	r3, r3, #8
 8004292:	f003 030f 	and.w	r3, r3, #15
 8004296:	490f      	ldr	r1, [pc, #60]	; (80042d4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004298:	5ccb      	ldrb	r3, [r1, r3]
 800429a:	f003 031f 	and.w	r3, r3, #31
 800429e:	fa22 f303 	lsr.w	r3, r2, r3
 80042a2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80042a4:	4b0a      	ldr	r3, [pc, #40]	; (80042d0 <HAL_RCC_GetHCLKFreq+0x50>)
 80042a6:	699b      	ldr	r3, [r3, #24]
 80042a8:	f003 030f 	and.w	r3, r3, #15
 80042ac:	4a09      	ldr	r2, [pc, #36]	; (80042d4 <HAL_RCC_GetHCLKFreq+0x54>)
 80042ae:	5cd3      	ldrb	r3, [r2, r3]
 80042b0:	f003 031f 	and.w	r3, r3, #31
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	fa22 f303 	lsr.w	r3, r2, r3
 80042ba:	4a07      	ldr	r2, [pc, #28]	; (80042d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80042bc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80042be:	4a07      	ldr	r2, [pc, #28]	; (80042dc <HAL_RCC_GetHCLKFreq+0x5c>)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80042c4:	4b04      	ldr	r3, [pc, #16]	; (80042d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80042c6:	681b      	ldr	r3, [r3, #0]
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3708      	adds	r7, #8
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	58024400 	.word	0x58024400
 80042d4:	0800c82c 	.word	0x0800c82c
 80042d8:	24000004 	.word	0x24000004
 80042dc:	24000000 	.word	0x24000000

080042e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80042e4:	f7ff ffcc 	bl	8004280 <HAL_RCC_GetHCLKFreq>
 80042e8:	4602      	mov	r2, r0
 80042ea:	4b06      	ldr	r3, [pc, #24]	; (8004304 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	091b      	lsrs	r3, r3, #4
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	4904      	ldr	r1, [pc, #16]	; (8004308 <HAL_RCC_GetPCLK1Freq+0x28>)
 80042f6:	5ccb      	ldrb	r3, [r1, r3]
 80042f8:	f003 031f 	and.w	r3, r3, #31
 80042fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004300:	4618      	mov	r0, r3
 8004302:	bd80      	pop	{r7, pc}
 8004304:	58024400 	.word	0x58024400
 8004308:	0800c82c 	.word	0x0800c82c

0800430c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004310:	f7ff ffb6 	bl	8004280 <HAL_RCC_GetHCLKFreq>
 8004314:	4602      	mov	r2, r0
 8004316:	4b06      	ldr	r3, [pc, #24]	; (8004330 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	0a1b      	lsrs	r3, r3, #8
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	4904      	ldr	r1, [pc, #16]	; (8004334 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004322:	5ccb      	ldrb	r3, [r1, r3]
 8004324:	f003 031f 	and.w	r3, r3, #31
 8004328:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800432c:	4618      	mov	r0, r3
 800432e:	bd80      	pop	{r7, pc}
 8004330:	58024400 	.word	0x58024400
 8004334:	0800c82c 	.word	0x0800c82c

08004338 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	223f      	movs	r2, #63	; 0x3f
 8004346:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004348:	4b1a      	ldr	r3, [pc, #104]	; (80043b4 <HAL_RCC_GetClockConfig+0x7c>)
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	f003 0207 	and.w	r2, r3, #7
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004354:	4b17      	ldr	r3, [pc, #92]	; (80043b4 <HAL_RCC_GetClockConfig+0x7c>)
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004360:	4b14      	ldr	r3, [pc, #80]	; (80043b4 <HAL_RCC_GetClockConfig+0x7c>)
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	f003 020f 	and.w	r2, r3, #15
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800436c:	4b11      	ldr	r3, [pc, #68]	; (80043b4 <HAL_RCC_GetClockConfig+0x7c>)
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004378:	4b0e      	ldr	r3, [pc, #56]	; (80043b4 <HAL_RCC_GetClockConfig+0x7c>)
 800437a:	69db      	ldr	r3, [r3, #28]
 800437c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004384:	4b0b      	ldr	r3, [pc, #44]	; (80043b4 <HAL_RCC_GetClockConfig+0x7c>)
 8004386:	69db      	ldr	r3, [r3, #28]
 8004388:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004390:	4b08      	ldr	r3, [pc, #32]	; (80043b4 <HAL_RCC_GetClockConfig+0x7c>)
 8004392:	6a1b      	ldr	r3, [r3, #32]
 8004394:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800439c:	4b06      	ldr	r3, [pc, #24]	; (80043b8 <HAL_RCC_GetClockConfig+0x80>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 020f 	and.w	r2, r3, #15
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	601a      	str	r2, [r3, #0]
}
 80043a8:	bf00      	nop
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr
 80043b4:	58024400 	.word	0x58024400
 80043b8:	52002000 	.word	0x52002000

080043bc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043c0:	b0ca      	sub	sp, #296	; 0x128
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80043c8:	2300      	movs	r3, #0
 80043ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043ce:	2300      	movs	r3, #0
 80043d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80043d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043dc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80043e0:	2500      	movs	r5, #0
 80043e2:	ea54 0305 	orrs.w	r3, r4, r5
 80043e6:	d049      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80043e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80043f2:	d02f      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80043f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80043f8:	d828      	bhi.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80043fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043fe:	d01a      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004400:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004404:	d822      	bhi.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004406:	2b00      	cmp	r3, #0
 8004408:	d003      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800440a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800440e:	d007      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004410:	e01c      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004412:	4bb8      	ldr	r3, [pc, #736]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004416:	4ab7      	ldr	r2, [pc, #732]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800441c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800441e:	e01a      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004420:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004424:	3308      	adds	r3, #8
 8004426:	2102      	movs	r1, #2
 8004428:	4618      	mov	r0, r3
 800442a:	f001 fc8f 	bl	8005d4c <RCCEx_PLL2_Config>
 800442e:	4603      	mov	r3, r0
 8004430:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004434:	e00f      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004436:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800443a:	3328      	adds	r3, #40	; 0x28
 800443c:	2102      	movs	r1, #2
 800443e:	4618      	mov	r0, r3
 8004440:	f001 fd36 	bl	8005eb0 <RCCEx_PLL3_Config>
 8004444:	4603      	mov	r3, r0
 8004446:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800444a:	e004      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004452:	e000      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004454:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004456:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10a      	bne.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800445e:	4ba5      	ldr	r3, [pc, #660]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004462:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004466:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800446a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800446c:	4aa1      	ldr	r2, [pc, #644]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800446e:	430b      	orrs	r3, r1
 8004470:	6513      	str	r3, [r2, #80]	; 0x50
 8004472:	e003      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004474:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004478:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800447c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004484:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8004488:	f04f 0900 	mov.w	r9, #0
 800448c:	ea58 0309 	orrs.w	r3, r8, r9
 8004490:	d047      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004492:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004498:	2b04      	cmp	r3, #4
 800449a:	d82a      	bhi.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800449c:	a201      	add	r2, pc, #4	; (adr r2, 80044a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800449e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a2:	bf00      	nop
 80044a4:	080044b9 	.word	0x080044b9
 80044a8:	080044c7 	.word	0x080044c7
 80044ac:	080044dd 	.word	0x080044dd
 80044b0:	080044fb 	.word	0x080044fb
 80044b4:	080044fb 	.word	0x080044fb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044b8:	4b8e      	ldr	r3, [pc, #568]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80044ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044bc:	4a8d      	ldr	r2, [pc, #564]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80044be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80044c4:	e01a      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044ca:	3308      	adds	r3, #8
 80044cc:	2100      	movs	r1, #0
 80044ce:	4618      	mov	r0, r3
 80044d0:	f001 fc3c 	bl	8005d4c <RCCEx_PLL2_Config>
 80044d4:	4603      	mov	r3, r0
 80044d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80044da:	e00f      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80044dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044e0:	3328      	adds	r3, #40	; 0x28
 80044e2:	2100      	movs	r1, #0
 80044e4:	4618      	mov	r0, r3
 80044e6:	f001 fce3 	bl	8005eb0 <RCCEx_PLL3_Config>
 80044ea:	4603      	mov	r3, r0
 80044ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80044f0:	e004      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80044f8:	e000      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80044fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10a      	bne.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004504:	4b7b      	ldr	r3, [pc, #492]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004508:	f023 0107 	bic.w	r1, r3, #7
 800450c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004512:	4a78      	ldr	r2, [pc, #480]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004514:	430b      	orrs	r3, r1
 8004516:	6513      	str	r3, [r2, #80]	; 0x50
 8004518:	e003      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800451a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800451e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004522:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800452e:	f04f 0b00 	mov.w	fp, #0
 8004532:	ea5a 030b 	orrs.w	r3, sl, fp
 8004536:	d04c      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004538:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800453c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800453e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004542:	d030      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004544:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004548:	d829      	bhi.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800454a:	2bc0      	cmp	r3, #192	; 0xc0
 800454c:	d02d      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800454e:	2bc0      	cmp	r3, #192	; 0xc0
 8004550:	d825      	bhi.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004552:	2b80      	cmp	r3, #128	; 0x80
 8004554:	d018      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004556:	2b80      	cmp	r3, #128	; 0x80
 8004558:	d821      	bhi.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800455a:	2b00      	cmp	r3, #0
 800455c:	d002      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800455e:	2b40      	cmp	r3, #64	; 0x40
 8004560:	d007      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004562:	e01c      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004564:	4b63      	ldr	r3, [pc, #396]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004568:	4a62      	ldr	r2, [pc, #392]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800456a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800456e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004570:	e01c      	b.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004572:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004576:	3308      	adds	r3, #8
 8004578:	2100      	movs	r1, #0
 800457a:	4618      	mov	r0, r3
 800457c:	f001 fbe6 	bl	8005d4c <RCCEx_PLL2_Config>
 8004580:	4603      	mov	r3, r0
 8004582:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004586:	e011      	b.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004588:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800458c:	3328      	adds	r3, #40	; 0x28
 800458e:	2100      	movs	r1, #0
 8004590:	4618      	mov	r0, r3
 8004592:	f001 fc8d 	bl	8005eb0 <RCCEx_PLL3_Config>
 8004596:	4603      	mov	r3, r0
 8004598:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800459c:	e006      	b.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80045a4:	e002      	b.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80045a6:	bf00      	nop
 80045a8:	e000      	b.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80045aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d10a      	bne.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80045b4:	4b4f      	ldr	r3, [pc, #316]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80045b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045b8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80045bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045c2:	4a4c      	ldr	r2, [pc, #304]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80045c4:	430b      	orrs	r3, r1
 80045c6:	6513      	str	r3, [r2, #80]	; 0x50
 80045c8:	e003      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80045d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045da:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80045de:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80045e2:	2300      	movs	r3, #0
 80045e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80045e8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80045ec:	460b      	mov	r3, r1
 80045ee:	4313      	orrs	r3, r2
 80045f0:	d053      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80045f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80045fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045fe:	d035      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004600:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004604:	d82e      	bhi.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004606:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800460a:	d031      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800460c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004610:	d828      	bhi.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004612:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004616:	d01a      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004618:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800461c:	d822      	bhi.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004622:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004626:	d007      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004628:	e01c      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800462a:	4b32      	ldr	r3, [pc, #200]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800462c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462e:	4a31      	ldr	r2, [pc, #196]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004634:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004636:	e01c      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004638:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800463c:	3308      	adds	r3, #8
 800463e:	2100      	movs	r1, #0
 8004640:	4618      	mov	r0, r3
 8004642:	f001 fb83 	bl	8005d4c <RCCEx_PLL2_Config>
 8004646:	4603      	mov	r3, r0
 8004648:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800464c:	e011      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800464e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004652:	3328      	adds	r3, #40	; 0x28
 8004654:	2100      	movs	r1, #0
 8004656:	4618      	mov	r0, r3
 8004658:	f001 fc2a 	bl	8005eb0 <RCCEx_PLL3_Config>
 800465c:	4603      	mov	r3, r0
 800465e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004662:	e006      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800466a:	e002      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800466c:	bf00      	nop
 800466e:	e000      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004670:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004672:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10b      	bne.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800467a:	4b1e      	ldr	r3, [pc, #120]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800467c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800467e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8004682:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004686:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800468a:	4a1a      	ldr	r2, [pc, #104]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800468c:	430b      	orrs	r3, r1
 800468e:	6593      	str	r3, [r2, #88]	; 0x58
 8004690:	e003      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004692:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004696:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800469a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800469e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80046a6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80046aa:	2300      	movs	r3, #0
 80046ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80046b0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80046b4:	460b      	mov	r3, r1
 80046b6:	4313      	orrs	r3, r2
 80046b8:	d056      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80046ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80046c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046c6:	d038      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80046c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046cc:	d831      	bhi.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80046ce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80046d2:	d034      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80046d4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80046d8:	d82b      	bhi.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80046da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046de:	d01d      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x360>
 80046e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046e4:	d825      	bhi.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d006      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80046ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046ee:	d00a      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80046f0:	e01f      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80046f2:	bf00      	nop
 80046f4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046f8:	4ba2      	ldr	r3, [pc, #648]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80046fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fc:	4aa1      	ldr	r2, [pc, #644]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80046fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004702:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004704:	e01c      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004706:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800470a:	3308      	adds	r3, #8
 800470c:	2100      	movs	r1, #0
 800470e:	4618      	mov	r0, r3
 8004710:	f001 fb1c 	bl	8005d4c <RCCEx_PLL2_Config>
 8004714:	4603      	mov	r3, r0
 8004716:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800471a:	e011      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800471c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004720:	3328      	adds	r3, #40	; 0x28
 8004722:	2100      	movs	r1, #0
 8004724:	4618      	mov	r0, r3
 8004726:	f001 fbc3 	bl	8005eb0 <RCCEx_PLL3_Config>
 800472a:	4603      	mov	r3, r0
 800472c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004730:	e006      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004738:	e002      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800473a:	bf00      	nop
 800473c:	e000      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800473e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004740:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004744:	2b00      	cmp	r3, #0
 8004746:	d10b      	bne.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004748:	4b8e      	ldr	r3, [pc, #568]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800474a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800474c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004750:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004754:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004758:	4a8a      	ldr	r2, [pc, #552]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800475a:	430b      	orrs	r3, r1
 800475c:	6593      	str	r3, [r2, #88]	; 0x58
 800475e:	e003      	b.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004760:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004764:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004768:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800476c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004770:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004774:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004778:	2300      	movs	r3, #0
 800477a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800477e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004782:	460b      	mov	r3, r1
 8004784:	4313      	orrs	r3, r2
 8004786:	d03a      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004788:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800478c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800478e:	2b30      	cmp	r3, #48	; 0x30
 8004790:	d01f      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004792:	2b30      	cmp	r3, #48	; 0x30
 8004794:	d819      	bhi.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004796:	2b20      	cmp	r3, #32
 8004798:	d00c      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800479a:	2b20      	cmp	r3, #32
 800479c:	d815      	bhi.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d019      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80047a2:	2b10      	cmp	r3, #16
 80047a4:	d111      	bne.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047a6:	4b77      	ldr	r3, [pc, #476]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80047a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047aa:	4a76      	ldr	r2, [pc, #472]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80047ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80047b2:	e011      	b.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80047b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047b8:	3308      	adds	r3, #8
 80047ba:	2102      	movs	r1, #2
 80047bc:	4618      	mov	r0, r3
 80047be:	f001 fac5 	bl	8005d4c <RCCEx_PLL2_Config>
 80047c2:	4603      	mov	r3, r0
 80047c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80047c8:	e006      	b.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80047d0:	e002      	b.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80047d2:	bf00      	nop
 80047d4:	e000      	b.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80047d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d10a      	bne.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80047e0:	4b68      	ldr	r3, [pc, #416]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80047e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047e4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80047e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ee:	4a65      	ldr	r2, [pc, #404]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80047f0:	430b      	orrs	r3, r1
 80047f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80047f4:	e003      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80047fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004806:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800480a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800480e:	2300      	movs	r3, #0
 8004810:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004814:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004818:	460b      	mov	r3, r1
 800481a:	4313      	orrs	r3, r2
 800481c:	d051      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800481e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004822:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004824:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004828:	d035      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800482a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800482e:	d82e      	bhi.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004830:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004834:	d031      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004836:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800483a:	d828      	bhi.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800483c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004840:	d01a      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004842:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004846:	d822      	bhi.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004848:	2b00      	cmp	r3, #0
 800484a:	d003      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800484c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004850:	d007      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004852:	e01c      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004854:	4b4b      	ldr	r3, [pc, #300]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004858:	4a4a      	ldr	r2, [pc, #296]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800485a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800485e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004860:	e01c      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004862:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004866:	3308      	adds	r3, #8
 8004868:	2100      	movs	r1, #0
 800486a:	4618      	mov	r0, r3
 800486c:	f001 fa6e 	bl	8005d4c <RCCEx_PLL2_Config>
 8004870:	4603      	mov	r3, r0
 8004872:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004876:	e011      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004878:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800487c:	3328      	adds	r3, #40	; 0x28
 800487e:	2100      	movs	r1, #0
 8004880:	4618      	mov	r0, r3
 8004882:	f001 fb15 	bl	8005eb0 <RCCEx_PLL3_Config>
 8004886:	4603      	mov	r3, r0
 8004888:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800488c:	e006      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004894:	e002      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004896:	bf00      	nop
 8004898:	e000      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800489a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800489c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d10a      	bne.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80048a4:	4b37      	ldr	r3, [pc, #220]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048a8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80048ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048b2:	4a34      	ldr	r2, [pc, #208]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048b4:	430b      	orrs	r3, r1
 80048b6:	6513      	str	r3, [r2, #80]	; 0x50
 80048b8:	e003      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80048c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ca:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80048ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80048d2:	2300      	movs	r3, #0
 80048d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80048d8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80048dc:	460b      	mov	r3, r1
 80048de:	4313      	orrs	r3, r2
 80048e0:	d056      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80048e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048ec:	d033      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80048ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048f2:	d82c      	bhi.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80048f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80048f8:	d02f      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80048fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80048fe:	d826      	bhi.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004900:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004904:	d02b      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004906:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800490a:	d820      	bhi.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800490c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004910:	d012      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004912:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004916:	d81a      	bhi.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004918:	2b00      	cmp	r3, #0
 800491a:	d022      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800491c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004920:	d115      	bne.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004922:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004926:	3308      	adds	r3, #8
 8004928:	2101      	movs	r1, #1
 800492a:	4618      	mov	r0, r3
 800492c:	f001 fa0e 	bl	8005d4c <RCCEx_PLL2_Config>
 8004930:	4603      	mov	r3, r0
 8004932:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004936:	e015      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004938:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800493c:	3328      	adds	r3, #40	; 0x28
 800493e:	2101      	movs	r1, #1
 8004940:	4618      	mov	r0, r3
 8004942:	f001 fab5 	bl	8005eb0 <RCCEx_PLL3_Config>
 8004946:	4603      	mov	r3, r0
 8004948:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800494c:	e00a      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004954:	e006      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004956:	bf00      	nop
 8004958:	e004      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800495a:	bf00      	nop
 800495c:	e002      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800495e:	bf00      	nop
 8004960:	e000      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004962:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004964:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004968:	2b00      	cmp	r3, #0
 800496a:	d10d      	bne.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800496c:	4b05      	ldr	r3, [pc, #20]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800496e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004970:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004974:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004978:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800497a:	4a02      	ldr	r2, [pc, #8]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800497c:	430b      	orrs	r3, r1
 800497e:	6513      	str	r3, [r2, #80]	; 0x50
 8004980:	e006      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004982:	bf00      	nop
 8004984:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004988:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800498c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004990:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004998:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800499c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80049a0:	2300      	movs	r3, #0
 80049a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80049a6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80049aa:	460b      	mov	r3, r1
 80049ac:	4313      	orrs	r3, r2
 80049ae:	d055      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80049b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80049b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049bc:	d033      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80049be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049c2:	d82c      	bhi.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80049c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049c8:	d02f      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80049ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ce:	d826      	bhi.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80049d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80049d4:	d02b      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x672>
 80049d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80049da:	d820      	bhi.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80049dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049e0:	d012      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80049e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049e6:	d81a      	bhi.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d022      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80049ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049f0:	d115      	bne.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80049f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049f6:	3308      	adds	r3, #8
 80049f8:	2101      	movs	r1, #1
 80049fa:	4618      	mov	r0, r3
 80049fc:	f001 f9a6 	bl	8005d4c <RCCEx_PLL2_Config>
 8004a00:	4603      	mov	r3, r0
 8004a02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004a06:	e015      	b.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a0c:	3328      	adds	r3, #40	; 0x28
 8004a0e:	2101      	movs	r1, #1
 8004a10:	4618      	mov	r0, r3
 8004a12:	f001 fa4d 	bl	8005eb0 <RCCEx_PLL3_Config>
 8004a16:	4603      	mov	r3, r0
 8004a18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004a1c:	e00a      	b.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004a24:	e006      	b.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004a26:	bf00      	nop
 8004a28:	e004      	b.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004a2a:	bf00      	nop
 8004a2c:	e002      	b.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004a2e:	bf00      	nop
 8004a30:	e000      	b.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004a32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d10b      	bne.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004a3c:	4ba3      	ldr	r3, [pc, #652]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a40:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a48:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004a4c:	4a9f      	ldr	r2, [pc, #636]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a4e:	430b      	orrs	r3, r1
 8004a50:	6593      	str	r3, [r2, #88]	; 0x58
 8004a52:	e003      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a64:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004a68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004a72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004a76:	460b      	mov	r3, r1
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	d037      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a86:	d00e      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004a88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a8c:	d816      	bhi.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d018      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004a92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a96:	d111      	bne.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a98:	4b8c      	ldr	r3, [pc, #560]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9c:	4a8b      	ldr	r2, [pc, #556]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aa2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004aa4:	e00f      	b.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004aaa:	3308      	adds	r3, #8
 8004aac:	2101      	movs	r1, #1
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f001 f94c 	bl	8005d4c <RCCEx_PLL2_Config>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004aba:	e004      	b.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004ac2:	e000      	b.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004ac4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ac6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d10a      	bne.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ace:	4b7f      	ldr	r3, [pc, #508]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ad2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004adc:	4a7b      	ldr	r2, [pc, #492]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ade:	430b      	orrs	r3, r1
 8004ae0:	6513      	str	r3, [r2, #80]	; 0x50
 8004ae2:	e003      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ae4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ae8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004af8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004afc:	2300      	movs	r3, #0
 8004afe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004b02:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004b06:	460b      	mov	r3, r1
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	d039      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b12:	2b03      	cmp	r3, #3
 8004b14:	d81c      	bhi.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004b16:	a201      	add	r2, pc, #4	; (adr r2, 8004b1c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b1c:	08004b59 	.word	0x08004b59
 8004b20:	08004b2d 	.word	0x08004b2d
 8004b24:	08004b3b 	.word	0x08004b3b
 8004b28:	08004b59 	.word	0x08004b59
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b2c:	4b67      	ldr	r3, [pc, #412]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b30:	4a66      	ldr	r2, [pc, #408]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004b38:	e00f      	b.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b3e:	3308      	adds	r3, #8
 8004b40:	2102      	movs	r1, #2
 8004b42:	4618      	mov	r0, r3
 8004b44:	f001 f902 	bl	8005d4c <RCCEx_PLL2_Config>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004b4e:	e004      	b.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004b56:	e000      	b.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004b58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10a      	bne.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004b62:	4b5a      	ldr	r3, [pc, #360]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b66:	f023 0103 	bic.w	r1, r3, #3
 8004b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b70:	4a56      	ldr	r2, [pc, #344]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b72:	430b      	orrs	r3, r1
 8004b74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b76:	e003      	b.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b7c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b88:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004b8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b90:	2300      	movs	r3, #0
 8004b92:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004b96:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	f000 809f 	beq.w	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ba2:	4b4b      	ldr	r3, [pc, #300]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a4a      	ldr	r2, [pc, #296]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bae:	f7fc fd7b 	bl	80016a8 <HAL_GetTick>
 8004bb2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bb6:	e00b      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bb8:	f7fc fd76 	bl	80016a8 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	2b64      	cmp	r3, #100	; 0x64
 8004bc6:	d903      	bls.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004bce:	e005      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bd0:	4b3f      	ldr	r3, [pc, #252]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d0ed      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004bdc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d179      	bne.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004be4:	4b39      	ldr	r3, [pc, #228]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004be6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004bf0:	4053      	eors	r3, r2
 8004bf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d015      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004bfa:	4b34      	ldr	r3, [pc, #208]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c02:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c06:	4b31      	ldr	r3, [pc, #196]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c0a:	4a30      	ldr	r2, [pc, #192]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c10:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c12:	4b2e      	ldr	r3, [pc, #184]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c16:	4a2d      	ldr	r2, [pc, #180]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c1c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004c1e:	4a2b      	ldr	r2, [pc, #172]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c20:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004c24:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c2a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004c2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c32:	d118      	bne.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c34:	f7fc fd38 	bl	80016a8 <HAL_GetTick>
 8004c38:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c3c:	e00d      	b.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c3e:	f7fc fd33 	bl	80016a8 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004c48:	1ad2      	subs	r2, r2, r3
 8004c4a:	f241 3388 	movw	r3, #5000	; 0x1388
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d903      	bls.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8004c58:	e005      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c5a:	4b1c      	ldr	r3, [pc, #112]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d0eb      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004c66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d129      	bne.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c72:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004c76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c7e:	d10e      	bne.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004c80:	4b12      	ldr	r3, [pc, #72]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c8c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004c90:	091a      	lsrs	r2, r3, #4
 8004c92:	4b10      	ldr	r3, [pc, #64]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004c94:	4013      	ands	r3, r2
 8004c96:	4a0d      	ldr	r2, [pc, #52]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c98:	430b      	orrs	r3, r1
 8004c9a:	6113      	str	r3, [r2, #16]
 8004c9c:	e005      	b.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004c9e:	4b0b      	ldr	r3, [pc, #44]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	4a0a      	ldr	r2, [pc, #40]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ca4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004ca8:	6113      	str	r3, [r2, #16]
 8004caa:	4b08      	ldr	r3, [pc, #32]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cac:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cb2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004cb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cba:	4a04      	ldr	r2, [pc, #16]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cbc:	430b      	orrs	r3, r1
 8004cbe:	6713      	str	r3, [r2, #112]	; 0x70
 8004cc0:	e00e      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004cc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cc6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8004cca:	e009      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004ccc:	58024400 	.word	0x58024400
 8004cd0:	58024800 	.word	0x58024800
 8004cd4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cd8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cdc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce8:	f002 0301 	and.w	r3, r2, #1
 8004cec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004cf6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	f000 8089 	beq.w	8004e14 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d08:	2b28      	cmp	r3, #40	; 0x28
 8004d0a:	d86b      	bhi.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004d0c:	a201      	add	r2, pc, #4	; (adr r2, 8004d14 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d12:	bf00      	nop
 8004d14:	08004ded 	.word	0x08004ded
 8004d18:	08004de5 	.word	0x08004de5
 8004d1c:	08004de5 	.word	0x08004de5
 8004d20:	08004de5 	.word	0x08004de5
 8004d24:	08004de5 	.word	0x08004de5
 8004d28:	08004de5 	.word	0x08004de5
 8004d2c:	08004de5 	.word	0x08004de5
 8004d30:	08004de5 	.word	0x08004de5
 8004d34:	08004db9 	.word	0x08004db9
 8004d38:	08004de5 	.word	0x08004de5
 8004d3c:	08004de5 	.word	0x08004de5
 8004d40:	08004de5 	.word	0x08004de5
 8004d44:	08004de5 	.word	0x08004de5
 8004d48:	08004de5 	.word	0x08004de5
 8004d4c:	08004de5 	.word	0x08004de5
 8004d50:	08004de5 	.word	0x08004de5
 8004d54:	08004dcf 	.word	0x08004dcf
 8004d58:	08004de5 	.word	0x08004de5
 8004d5c:	08004de5 	.word	0x08004de5
 8004d60:	08004de5 	.word	0x08004de5
 8004d64:	08004de5 	.word	0x08004de5
 8004d68:	08004de5 	.word	0x08004de5
 8004d6c:	08004de5 	.word	0x08004de5
 8004d70:	08004de5 	.word	0x08004de5
 8004d74:	08004ded 	.word	0x08004ded
 8004d78:	08004de5 	.word	0x08004de5
 8004d7c:	08004de5 	.word	0x08004de5
 8004d80:	08004de5 	.word	0x08004de5
 8004d84:	08004de5 	.word	0x08004de5
 8004d88:	08004de5 	.word	0x08004de5
 8004d8c:	08004de5 	.word	0x08004de5
 8004d90:	08004de5 	.word	0x08004de5
 8004d94:	08004ded 	.word	0x08004ded
 8004d98:	08004de5 	.word	0x08004de5
 8004d9c:	08004de5 	.word	0x08004de5
 8004da0:	08004de5 	.word	0x08004de5
 8004da4:	08004de5 	.word	0x08004de5
 8004da8:	08004de5 	.word	0x08004de5
 8004dac:	08004de5 	.word	0x08004de5
 8004db0:	08004de5 	.word	0x08004de5
 8004db4:	08004ded 	.word	0x08004ded
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dbc:	3308      	adds	r3, #8
 8004dbe:	2101      	movs	r1, #1
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f000 ffc3 	bl	8005d4c <RCCEx_PLL2_Config>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004dcc:	e00f      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dd2:	3328      	adds	r3, #40	; 0x28
 8004dd4:	2101      	movs	r1, #1
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f001 f86a 	bl	8005eb0 <RCCEx_PLL3_Config>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004de2:	e004      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004dea:	e000      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004dec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d10a      	bne.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004df6:	4bbf      	ldr	r3, [pc, #764]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dfa:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e04:	4abb      	ldr	r2, [pc, #748]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004e06:	430b      	orrs	r3, r1
 8004e08:	6553      	str	r3, [r2, #84]	; 0x54
 8004e0a:	e003      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e10:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e1c:	f002 0302 	and.w	r3, r2, #2
 8004e20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e24:	2300      	movs	r3, #0
 8004e26:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004e2a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004e2e:	460b      	mov	r3, r1
 8004e30:	4313      	orrs	r3, r2
 8004e32:	d041      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e3a:	2b05      	cmp	r3, #5
 8004e3c:	d824      	bhi.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004e3e:	a201      	add	r2, pc, #4	; (adr r2, 8004e44 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e44:	08004e91 	.word	0x08004e91
 8004e48:	08004e5d 	.word	0x08004e5d
 8004e4c:	08004e73 	.word	0x08004e73
 8004e50:	08004e91 	.word	0x08004e91
 8004e54:	08004e91 	.word	0x08004e91
 8004e58:	08004e91 	.word	0x08004e91
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e60:	3308      	adds	r3, #8
 8004e62:	2101      	movs	r1, #1
 8004e64:	4618      	mov	r0, r3
 8004e66:	f000 ff71 	bl	8005d4c <RCCEx_PLL2_Config>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004e70:	e00f      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e76:	3328      	adds	r3, #40	; 0x28
 8004e78:	2101      	movs	r1, #1
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f001 f818 	bl	8005eb0 <RCCEx_PLL3_Config>
 8004e80:	4603      	mov	r3, r0
 8004e82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004e86:	e004      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004e8e:	e000      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004e90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10a      	bne.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004e9a:	4b96      	ldr	r3, [pc, #600]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e9e:	f023 0107 	bic.w	r1, r3, #7
 8004ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ea6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ea8:	4a92      	ldr	r2, [pc, #584]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004eaa:	430b      	orrs	r3, r1
 8004eac:	6553      	str	r3, [r2, #84]	; 0x54
 8004eae:	e003      	b.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eb0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004eb4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec0:	f002 0304 	and.w	r3, r2, #4
 8004ec4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ec8:	2300      	movs	r3, #0
 8004eca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ece:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	d044      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004edc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ee0:	2b05      	cmp	r3, #5
 8004ee2:	d825      	bhi.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004ee4:	a201      	add	r2, pc, #4	; (adr r2, 8004eec <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eea:	bf00      	nop
 8004eec:	08004f39 	.word	0x08004f39
 8004ef0:	08004f05 	.word	0x08004f05
 8004ef4:	08004f1b 	.word	0x08004f1b
 8004ef8:	08004f39 	.word	0x08004f39
 8004efc:	08004f39 	.word	0x08004f39
 8004f00:	08004f39 	.word	0x08004f39
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f08:	3308      	adds	r3, #8
 8004f0a:	2101      	movs	r1, #1
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f000 ff1d 	bl	8005d4c <RCCEx_PLL2_Config>
 8004f12:	4603      	mov	r3, r0
 8004f14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004f18:	e00f      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f1e:	3328      	adds	r3, #40	; 0x28
 8004f20:	2101      	movs	r1, #1
 8004f22:	4618      	mov	r0, r3
 8004f24:	f000 ffc4 	bl	8005eb0 <RCCEx_PLL3_Config>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004f2e:	e004      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004f36:	e000      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004f38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d10b      	bne.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f42:	4b6c      	ldr	r3, [pc, #432]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f46:	f023 0107 	bic.w	r1, r3, #7
 8004f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f52:	4a68      	ldr	r2, [pc, #416]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004f54:	430b      	orrs	r3, r1
 8004f56:	6593      	str	r3, [r2, #88]	; 0x58
 8004f58:	e003      	b.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6a:	f002 0320 	and.w	r3, r2, #32
 8004f6e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f72:	2300      	movs	r3, #0
 8004f74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	d055      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f8e:	d033      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004f90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f94:	d82c      	bhi.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004f96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f9a:	d02f      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fa0:	d826      	bhi.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004fa2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004fa6:	d02b      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004fa8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004fac:	d820      	bhi.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004fae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fb2:	d012      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004fb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fb8:	d81a      	bhi.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d022      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004fbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fc2:	d115      	bne.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fc8:	3308      	adds	r3, #8
 8004fca:	2100      	movs	r1, #0
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f000 febd 	bl	8005d4c <RCCEx_PLL2_Config>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004fd8:	e015      	b.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fde:	3328      	adds	r3, #40	; 0x28
 8004fe0:	2102      	movs	r1, #2
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f000 ff64 	bl	8005eb0 <RCCEx_PLL3_Config>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004fee:	e00a      	b.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004ff6:	e006      	b.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004ff8:	bf00      	nop
 8004ffa:	e004      	b.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004ffc:	bf00      	nop
 8004ffe:	e002      	b.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005000:	bf00      	nop
 8005002:	e000      	b.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005004:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005006:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800500a:	2b00      	cmp	r3, #0
 800500c:	d10b      	bne.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800500e:	4b39      	ldr	r3, [pc, #228]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005012:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005016:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800501a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800501e:	4a35      	ldr	r2, [pc, #212]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005020:	430b      	orrs	r3, r1
 8005022:	6553      	str	r3, [r2, #84]	; 0x54
 8005024:	e003      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005026:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800502a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800502e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005036:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800503a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800503e:	2300      	movs	r3, #0
 8005040:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005044:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005048:	460b      	mov	r3, r1
 800504a:	4313      	orrs	r3, r2
 800504c:	d058      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800504e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005052:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005056:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800505a:	d033      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800505c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005060:	d82c      	bhi.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005066:	d02f      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005068:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800506c:	d826      	bhi.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800506e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005072:	d02b      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005074:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005078:	d820      	bhi.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800507a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800507e:	d012      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005080:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005084:	d81a      	bhi.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005086:	2b00      	cmp	r3, #0
 8005088:	d022      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800508a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800508e:	d115      	bne.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005090:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005094:	3308      	adds	r3, #8
 8005096:	2100      	movs	r1, #0
 8005098:	4618      	mov	r0, r3
 800509a:	f000 fe57 	bl	8005d4c <RCCEx_PLL2_Config>
 800509e:	4603      	mov	r3, r0
 80050a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80050a4:	e015      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80050a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050aa:	3328      	adds	r3, #40	; 0x28
 80050ac:	2102      	movs	r1, #2
 80050ae:	4618      	mov	r0, r3
 80050b0:	f000 fefe 	bl	8005eb0 <RCCEx_PLL3_Config>
 80050b4:	4603      	mov	r3, r0
 80050b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80050ba:	e00a      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80050c2:	e006      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80050c4:	bf00      	nop
 80050c6:	e004      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80050c8:	bf00      	nop
 80050ca:	e002      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80050cc:	bf00      	nop
 80050ce:	e000      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80050d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d10e      	bne.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80050da:	4b06      	ldr	r3, [pc, #24]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80050dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050de:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80050e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050ea:	4a02      	ldr	r2, [pc, #8]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80050ec:	430b      	orrs	r3, r1
 80050ee:	6593      	str	r3, [r2, #88]	; 0x58
 80050f0:	e006      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80050f2:	bf00      	nop
 80050f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005100:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005108:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800510c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005110:	2300      	movs	r3, #0
 8005112:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005116:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800511a:	460b      	mov	r3, r1
 800511c:	4313      	orrs	r3, r2
 800511e:	d055      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005120:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005124:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005128:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800512c:	d033      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800512e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005132:	d82c      	bhi.n	800518e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005134:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005138:	d02f      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800513a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800513e:	d826      	bhi.n	800518e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005140:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005144:	d02b      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005146:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800514a:	d820      	bhi.n	800518e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800514c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005150:	d012      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005152:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005156:	d81a      	bhi.n	800518e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005158:	2b00      	cmp	r3, #0
 800515a:	d022      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800515c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005160:	d115      	bne.n	800518e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005162:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005166:	3308      	adds	r3, #8
 8005168:	2100      	movs	r1, #0
 800516a:	4618      	mov	r0, r3
 800516c:	f000 fdee 	bl	8005d4c <RCCEx_PLL2_Config>
 8005170:	4603      	mov	r3, r0
 8005172:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005176:	e015      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005178:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800517c:	3328      	adds	r3, #40	; 0x28
 800517e:	2102      	movs	r1, #2
 8005180:	4618      	mov	r0, r3
 8005182:	f000 fe95 	bl	8005eb0 <RCCEx_PLL3_Config>
 8005186:	4603      	mov	r3, r0
 8005188:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800518c:	e00a      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005194:	e006      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005196:	bf00      	nop
 8005198:	e004      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800519a:	bf00      	nop
 800519c:	e002      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800519e:	bf00      	nop
 80051a0:	e000      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80051a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d10b      	bne.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80051ac:	4ba1      	ldr	r3, [pc, #644]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80051ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80051b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80051bc:	4a9d      	ldr	r2, [pc, #628]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80051be:	430b      	orrs	r3, r1
 80051c0:	6593      	str	r3, [r2, #88]	; 0x58
 80051c2:	e003      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80051cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d4:	f002 0308 	and.w	r3, r2, #8
 80051d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80051dc:	2300      	movs	r3, #0
 80051de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80051e2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80051e6:	460b      	mov	r3, r1
 80051e8:	4313      	orrs	r3, r2
 80051ea:	d01e      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80051ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051f8:	d10c      	bne.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80051fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051fe:	3328      	adds	r3, #40	; 0x28
 8005200:	2102      	movs	r1, #2
 8005202:	4618      	mov	r0, r3
 8005204:	f000 fe54 	bl	8005eb0 <RCCEx_PLL3_Config>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d002      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005214:	4b87      	ldr	r3, [pc, #540]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005218:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800521c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005220:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005224:	4a83      	ldr	r2, [pc, #524]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005226:	430b      	orrs	r3, r1
 8005228:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800522a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800522e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005232:	f002 0310 	and.w	r3, r2, #16
 8005236:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800523a:	2300      	movs	r3, #0
 800523c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005240:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005244:	460b      	mov	r3, r1
 8005246:	4313      	orrs	r3, r2
 8005248:	d01e      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800524a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800524e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005252:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005256:	d10c      	bne.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005258:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800525c:	3328      	adds	r3, #40	; 0x28
 800525e:	2102      	movs	r1, #2
 8005260:	4618      	mov	r0, r3
 8005262:	f000 fe25 	bl	8005eb0 <RCCEx_PLL3_Config>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d002      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005272:	4b70      	ldr	r3, [pc, #448]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005276:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800527a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800527e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005282:	4a6c      	ldr	r2, [pc, #432]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005284:	430b      	orrs	r3, r1
 8005286:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005288:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800528c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005290:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005294:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005298:	2300      	movs	r3, #0
 800529a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800529e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80052a2:	460b      	mov	r3, r1
 80052a4:	4313      	orrs	r3, r2
 80052a6:	d03e      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80052a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80052b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052b4:	d022      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80052b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052ba:	d81b      	bhi.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d003      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80052c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052c4:	d00b      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80052c6:	e015      	b.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052cc:	3308      	adds	r3, #8
 80052ce:	2100      	movs	r1, #0
 80052d0:	4618      	mov	r0, r3
 80052d2:	f000 fd3b 	bl	8005d4c <RCCEx_PLL2_Config>
 80052d6:	4603      	mov	r3, r0
 80052d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80052dc:	e00f      	b.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80052de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052e2:	3328      	adds	r3, #40	; 0x28
 80052e4:	2102      	movs	r1, #2
 80052e6:	4618      	mov	r0, r3
 80052e8:	f000 fde2 	bl	8005eb0 <RCCEx_PLL3_Config>
 80052ec:	4603      	mov	r3, r0
 80052ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80052f2:	e004      	b.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80052fa:	e000      	b.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80052fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005302:	2b00      	cmp	r3, #0
 8005304:	d10b      	bne.n	800531e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005306:	4b4b      	ldr	r3, [pc, #300]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800530a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800530e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005312:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005316:	4a47      	ldr	r2, [pc, #284]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005318:	430b      	orrs	r3, r1
 800531a:	6593      	str	r3, [r2, #88]	; 0x58
 800531c:	e003      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800531e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005322:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005326:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800532a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800532e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005332:	67bb      	str	r3, [r7, #120]	; 0x78
 8005334:	2300      	movs	r3, #0
 8005336:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005338:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800533c:	460b      	mov	r3, r1
 800533e:	4313      	orrs	r3, r2
 8005340:	d03b      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005342:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800534a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800534e:	d01f      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005350:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005354:	d818      	bhi.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005356:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800535a:	d003      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800535c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005360:	d007      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005362:	e011      	b.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005364:	4b33      	ldr	r3, [pc, #204]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005368:	4a32      	ldr	r2, [pc, #200]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800536a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800536e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005370:	e00f      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005372:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005376:	3328      	adds	r3, #40	; 0x28
 8005378:	2101      	movs	r1, #1
 800537a:	4618      	mov	r0, r3
 800537c:	f000 fd98 	bl	8005eb0 <RCCEx_PLL3_Config>
 8005380:	4603      	mov	r3, r0
 8005382:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005386:	e004      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800538e:	e000      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005390:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005392:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005396:	2b00      	cmp	r3, #0
 8005398:	d10b      	bne.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800539a:	4b26      	ldr	r3, [pc, #152]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800539c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800539e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80053a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053aa:	4a22      	ldr	r2, [pc, #136]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80053ac:	430b      	orrs	r3, r1
 80053ae:	6553      	str	r3, [r2, #84]	; 0x54
 80053b0:	e003      	b.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80053ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80053c6:	673b      	str	r3, [r7, #112]	; 0x70
 80053c8:	2300      	movs	r3, #0
 80053ca:	677b      	str	r3, [r7, #116]	; 0x74
 80053cc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80053d0:	460b      	mov	r3, r1
 80053d2:	4313      	orrs	r3, r2
 80053d4:	d034      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80053d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d003      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80053e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053e4:	d007      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80053e6:	e011      	b.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053e8:	4b12      	ldr	r3, [pc, #72]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80053ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ec:	4a11      	ldr	r2, [pc, #68]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80053ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80053f4:	e00e      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80053f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053fa:	3308      	adds	r3, #8
 80053fc:	2102      	movs	r1, #2
 80053fe:	4618      	mov	r0, r3
 8005400:	f000 fca4 	bl	8005d4c <RCCEx_PLL2_Config>
 8005404:	4603      	mov	r3, r0
 8005406:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800540a:	e003      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005412:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005414:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005418:	2b00      	cmp	r3, #0
 800541a:	d10d      	bne.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800541c:	4b05      	ldr	r3, [pc, #20]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800541e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005420:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005424:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800542a:	4a02      	ldr	r2, [pc, #8]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800542c:	430b      	orrs	r3, r1
 800542e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005430:	e006      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005432:	bf00      	nop
 8005434:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005438:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800543c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005440:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005448:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800544c:	66bb      	str	r3, [r7, #104]	; 0x68
 800544e:	2300      	movs	r3, #0
 8005450:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005452:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005456:	460b      	mov	r3, r1
 8005458:	4313      	orrs	r3, r2
 800545a:	d00c      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800545c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005460:	3328      	adds	r3, #40	; 0x28
 8005462:	2102      	movs	r1, #2
 8005464:	4618      	mov	r0, r3
 8005466:	f000 fd23 	bl	8005eb0 <RCCEx_PLL3_Config>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d002      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005476:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800547a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8005482:	663b      	str	r3, [r7, #96]	; 0x60
 8005484:	2300      	movs	r3, #0
 8005486:	667b      	str	r3, [r7, #100]	; 0x64
 8005488:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800548c:	460b      	mov	r3, r1
 800548e:	4313      	orrs	r3, r2
 8005490:	d038      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005492:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005496:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800549a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800549e:	d018      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80054a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054a4:	d811      	bhi.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80054a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054aa:	d014      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80054ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054b0:	d80b      	bhi.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d011      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80054b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054ba:	d106      	bne.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054bc:	4bc3      	ldr	r3, [pc, #780]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80054be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c0:	4ac2      	ldr	r2, [pc, #776]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80054c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80054c8:	e008      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80054d0:	e004      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80054d2:	bf00      	nop
 80054d4:	e002      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80054d6:	bf00      	nop
 80054d8:	e000      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80054da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d10b      	bne.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80054e4:	4bb9      	ldr	r3, [pc, #740]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80054e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054e8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80054ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054f4:	4ab5      	ldr	r2, [pc, #724]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80054f6:	430b      	orrs	r3, r1
 80054f8:	6553      	str	r3, [r2, #84]	; 0x54
 80054fa:	e003      	b.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005500:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005504:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800550c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005510:	65bb      	str	r3, [r7, #88]	; 0x58
 8005512:	2300      	movs	r3, #0
 8005514:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005516:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800551a:	460b      	mov	r3, r1
 800551c:	4313      	orrs	r3, r2
 800551e:	d009      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005520:	4baa      	ldr	r3, [pc, #680]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005524:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005528:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800552c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800552e:	4aa7      	ldr	r2, [pc, #668]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005530:	430b      	orrs	r3, r1
 8005532:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005534:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800553c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8005540:	653b      	str	r3, [r7, #80]	; 0x50
 8005542:	2300      	movs	r3, #0
 8005544:	657b      	str	r3, [r7, #84]	; 0x54
 8005546:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800554a:	460b      	mov	r3, r1
 800554c:	4313      	orrs	r3, r2
 800554e:	d00a      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005550:	4b9e      	ldr	r3, [pc, #632]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8005558:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800555c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005560:	4a9a      	ldr	r2, [pc, #616]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005562:	430b      	orrs	r3, r1
 8005564:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005566:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800556a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800556e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005572:	64bb      	str	r3, [r7, #72]	; 0x48
 8005574:	2300      	movs	r3, #0
 8005576:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005578:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800557c:	460b      	mov	r3, r1
 800557e:	4313      	orrs	r3, r2
 8005580:	d009      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005582:	4b92      	ldr	r3, [pc, #584]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005586:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800558a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800558e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005590:	4a8e      	ldr	r2, [pc, #568]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005592:	430b      	orrs	r3, r1
 8005594:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005596:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800559a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80055a2:	643b      	str	r3, [r7, #64]	; 0x40
 80055a4:	2300      	movs	r3, #0
 80055a6:	647b      	str	r3, [r7, #68]	; 0x44
 80055a8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80055ac:	460b      	mov	r3, r1
 80055ae:	4313      	orrs	r3, r2
 80055b0:	d00e      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80055b2:	4b86      	ldr	r3, [pc, #536]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	4a85      	ldr	r2, [pc, #532]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80055b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80055bc:	6113      	str	r3, [r2, #16]
 80055be:	4b83      	ldr	r3, [pc, #524]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80055c0:	6919      	ldr	r1, [r3, #16]
 80055c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055c6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80055ca:	4a80      	ldr	r2, [pc, #512]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80055cc:	430b      	orrs	r3, r1
 80055ce:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80055d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d8:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80055dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80055de:	2300      	movs	r3, #0
 80055e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055e2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80055e6:	460b      	mov	r3, r1
 80055e8:	4313      	orrs	r3, r2
 80055ea:	d009      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80055ec:	4b77      	ldr	r3, [pc, #476]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80055ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055f0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80055f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055fa:	4a74      	ldr	r2, [pc, #464]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80055fc:	430b      	orrs	r3, r1
 80055fe:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005600:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005608:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800560c:	633b      	str	r3, [r7, #48]	; 0x30
 800560e:	2300      	movs	r3, #0
 8005610:	637b      	str	r3, [r7, #52]	; 0x34
 8005612:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005616:	460b      	mov	r3, r1
 8005618:	4313      	orrs	r3, r2
 800561a:	d00a      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800561c:	4b6b      	ldr	r3, [pc, #428]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800561e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005620:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8005624:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005628:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800562c:	4a67      	ldr	r2, [pc, #412]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800562e:	430b      	orrs	r3, r1
 8005630:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005632:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563a:	2100      	movs	r1, #0
 800563c:	62b9      	str	r1, [r7, #40]	; 0x28
 800563e:	f003 0301 	and.w	r3, r3, #1
 8005642:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005644:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005648:	460b      	mov	r3, r1
 800564a:	4313      	orrs	r3, r2
 800564c:	d011      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800564e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005652:	3308      	adds	r3, #8
 8005654:	2100      	movs	r1, #0
 8005656:	4618      	mov	r0, r3
 8005658:	f000 fb78 	bl	8005d4c <RCCEx_PLL2_Config>
 800565c:	4603      	mov	r3, r0
 800565e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005662:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005666:	2b00      	cmp	r3, #0
 8005668:	d003      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800566a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800566e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005672:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800567a:	2100      	movs	r1, #0
 800567c:	6239      	str	r1, [r7, #32]
 800567e:	f003 0302 	and.w	r3, r3, #2
 8005682:	627b      	str	r3, [r7, #36]	; 0x24
 8005684:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005688:	460b      	mov	r3, r1
 800568a:	4313      	orrs	r3, r2
 800568c:	d011      	beq.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800568e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005692:	3308      	adds	r3, #8
 8005694:	2101      	movs	r1, #1
 8005696:	4618      	mov	r0, r3
 8005698:	f000 fb58 	bl	8005d4c <RCCEx_PLL2_Config>
 800569c:	4603      	mov	r3, r0
 800569e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80056a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d003      	beq.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80056b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ba:	2100      	movs	r1, #0
 80056bc:	61b9      	str	r1, [r7, #24]
 80056be:	f003 0304 	and.w	r3, r3, #4
 80056c2:	61fb      	str	r3, [r7, #28]
 80056c4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80056c8:	460b      	mov	r3, r1
 80056ca:	4313      	orrs	r3, r2
 80056cc:	d011      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80056ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056d2:	3308      	adds	r3, #8
 80056d4:	2102      	movs	r1, #2
 80056d6:	4618      	mov	r0, r3
 80056d8:	f000 fb38 	bl	8005d4c <RCCEx_PLL2_Config>
 80056dc:	4603      	mov	r3, r0
 80056de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80056e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d003      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80056f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fa:	2100      	movs	r1, #0
 80056fc:	6139      	str	r1, [r7, #16]
 80056fe:	f003 0308 	and.w	r3, r3, #8
 8005702:	617b      	str	r3, [r7, #20]
 8005704:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005708:	460b      	mov	r3, r1
 800570a:	4313      	orrs	r3, r2
 800570c:	d011      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800570e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005712:	3328      	adds	r3, #40	; 0x28
 8005714:	2100      	movs	r1, #0
 8005716:	4618      	mov	r0, r3
 8005718:	f000 fbca 	bl	8005eb0 <RCCEx_PLL3_Config>
 800571c:	4603      	mov	r3, r0
 800571e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8005722:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005726:	2b00      	cmp	r3, #0
 8005728:	d003      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800572a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800572e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005732:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573a:	2100      	movs	r1, #0
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	f003 0310 	and.w	r3, r3, #16
 8005742:	60fb      	str	r3, [r7, #12]
 8005744:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005748:	460b      	mov	r3, r1
 800574a:	4313      	orrs	r3, r2
 800574c:	d011      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800574e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005752:	3328      	adds	r3, #40	; 0x28
 8005754:	2101      	movs	r1, #1
 8005756:	4618      	mov	r0, r3
 8005758:	f000 fbaa 	bl	8005eb0 <RCCEx_PLL3_Config>
 800575c:	4603      	mov	r3, r0
 800575e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005762:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005766:	2b00      	cmp	r3, #0
 8005768:	d003      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800576a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800576e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005772:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577a:	2100      	movs	r1, #0
 800577c:	6039      	str	r1, [r7, #0]
 800577e:	f003 0320 	and.w	r3, r3, #32
 8005782:	607b      	str	r3, [r7, #4]
 8005784:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005788:	460b      	mov	r3, r1
 800578a:	4313      	orrs	r3, r2
 800578c:	d011      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800578e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005792:	3328      	adds	r3, #40	; 0x28
 8005794:	2102      	movs	r1, #2
 8005796:	4618      	mov	r0, r3
 8005798:	f000 fb8a 	bl	8005eb0 <RCCEx_PLL3_Config>
 800579c:	4603      	mov	r3, r0
 800579e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80057a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d003      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80057b2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d101      	bne.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80057ba:	2300      	movs	r3, #0
 80057bc:	e000      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80057c6:	46bd      	mov	sp, r7
 80057c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057cc:	58024400 	.word	0x58024400

080057d0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80057d4:	f7fe fd54 	bl	8004280 <HAL_RCC_GetHCLKFreq>
 80057d8:	4602      	mov	r2, r0
 80057da:	4b06      	ldr	r3, [pc, #24]	; (80057f4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80057dc:	6a1b      	ldr	r3, [r3, #32]
 80057de:	091b      	lsrs	r3, r3, #4
 80057e0:	f003 0307 	and.w	r3, r3, #7
 80057e4:	4904      	ldr	r1, [pc, #16]	; (80057f8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80057e6:	5ccb      	ldrb	r3, [r1, r3]
 80057e8:	f003 031f 	and.w	r3, r3, #31
 80057ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	58024400 	.word	0x58024400
 80057f8:	0800c82c 	.word	0x0800c82c

080057fc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b089      	sub	sp, #36	; 0x24
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005804:	4ba1      	ldr	r3, [pc, #644]	; (8005a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005808:	f003 0303 	and.w	r3, r3, #3
 800580c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800580e:	4b9f      	ldr	r3, [pc, #636]	; (8005a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005812:	0b1b      	lsrs	r3, r3, #12
 8005814:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005818:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800581a:	4b9c      	ldr	r3, [pc, #624]	; (8005a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800581c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581e:	091b      	lsrs	r3, r3, #4
 8005820:	f003 0301 	and.w	r3, r3, #1
 8005824:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005826:	4b99      	ldr	r3, [pc, #612]	; (8005a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800582a:	08db      	lsrs	r3, r3, #3
 800582c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	fb02 f303 	mul.w	r3, r2, r3
 8005836:	ee07 3a90 	vmov	s15, r3
 800583a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800583e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	2b00      	cmp	r3, #0
 8005846:	f000 8111 	beq.w	8005a6c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	2b02      	cmp	r3, #2
 800584e:	f000 8083 	beq.w	8005958 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	2b02      	cmp	r3, #2
 8005856:	f200 80a1 	bhi.w	800599c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d003      	beq.n	8005868 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	2b01      	cmp	r3, #1
 8005864:	d056      	beq.n	8005914 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005866:	e099      	b.n	800599c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005868:	4b88      	ldr	r3, [pc, #544]	; (8005a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0320 	and.w	r3, r3, #32
 8005870:	2b00      	cmp	r3, #0
 8005872:	d02d      	beq.n	80058d0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005874:	4b85      	ldr	r3, [pc, #532]	; (8005a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	08db      	lsrs	r3, r3, #3
 800587a:	f003 0303 	and.w	r3, r3, #3
 800587e:	4a84      	ldr	r2, [pc, #528]	; (8005a90 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005880:	fa22 f303 	lsr.w	r3, r2, r3
 8005884:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	ee07 3a90 	vmov	s15, r3
 800588c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	ee07 3a90 	vmov	s15, r3
 8005896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800589a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800589e:	4b7b      	ldr	r3, [pc, #492]	; (8005a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058a6:	ee07 3a90 	vmov	s15, r3
 80058aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80058b2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005a94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80058b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058ca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80058ce:	e087      	b.n	80059e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	ee07 3a90 	vmov	s15, r3
 80058d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058da:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005a98 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80058de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058e2:	4b6a      	ldr	r3, [pc, #424]	; (8005a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058ea:	ee07 3a90 	vmov	s15, r3
 80058ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80058f6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005a94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80058fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005902:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800590a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800590e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005912:	e065      	b.n	80059e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	ee07 3a90 	vmov	s15, r3
 800591a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800591e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005a9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005926:	4b59      	ldr	r3, [pc, #356]	; (8005a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800592e:	ee07 3a90 	vmov	s15, r3
 8005932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005936:	ed97 6a03 	vldr	s12, [r7, #12]
 800593a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005a94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800593e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005946:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800594a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800594e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005952:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005956:	e043      	b.n	80059e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	ee07 3a90 	vmov	s15, r3
 800595e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005962:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800596a:	4b48      	ldr	r3, [pc, #288]	; (8005a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800596c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005972:	ee07 3a90 	vmov	s15, r3
 8005976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800597a:	ed97 6a03 	vldr	s12, [r7, #12]
 800597e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005a94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800598a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800598e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005996:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800599a:	e021      	b.n	80059e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	ee07 3a90 	vmov	s15, r3
 80059a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059a6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005a9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80059aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059ae:	4b37      	ldr	r3, [pc, #220]	; (8005a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059b6:	ee07 3a90 	vmov	s15, r3
 80059ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059be:	ed97 6a03 	vldr	s12, [r7, #12]
 80059c2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005a94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80059c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80059de:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80059e0:	4b2a      	ldr	r3, [pc, #168]	; (8005a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e4:	0a5b      	lsrs	r3, r3, #9
 80059e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059ea:	ee07 3a90 	vmov	s15, r3
 80059ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80059f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80059fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80059fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a06:	ee17 2a90 	vmov	r2, s15
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005a0e:	4b1f      	ldr	r3, [pc, #124]	; (8005a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a12:	0c1b      	lsrs	r3, r3, #16
 8005a14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a18:	ee07 3a90 	vmov	s15, r3
 8005a1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a24:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a28:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a34:	ee17 2a90 	vmov	r2, s15
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005a3c:	4b13      	ldr	r3, [pc, #76]	; (8005a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a40:	0e1b      	lsrs	r3, r3, #24
 8005a42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a46:	ee07 3a90 	vmov	s15, r3
 8005a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a56:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a62:	ee17 2a90 	vmov	r2, s15
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005a6a:	e008      	b.n	8005a7e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	609a      	str	r2, [r3, #8]
}
 8005a7e:	bf00      	nop
 8005a80:	3724      	adds	r7, #36	; 0x24
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	58024400 	.word	0x58024400
 8005a90:	03d09000 	.word	0x03d09000
 8005a94:	46000000 	.word	0x46000000
 8005a98:	4c742400 	.word	0x4c742400
 8005a9c:	4a742400 	.word	0x4a742400
 8005aa0:	4af42400 	.word	0x4af42400

08005aa4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b089      	sub	sp, #36	; 0x24
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005aac:	4ba1      	ldr	r3, [pc, #644]	; (8005d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab0:	f003 0303 	and.w	r3, r3, #3
 8005ab4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005ab6:	4b9f      	ldr	r3, [pc, #636]	; (8005d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aba:	0d1b      	lsrs	r3, r3, #20
 8005abc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ac0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005ac2:	4b9c      	ldr	r3, [pc, #624]	; (8005d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac6:	0a1b      	lsrs	r3, r3, #8
 8005ac8:	f003 0301 	and.w	r3, r3, #1
 8005acc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005ace:	4b99      	ldr	r3, [pc, #612]	; (8005d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ad2:	08db      	lsrs	r3, r3, #3
 8005ad4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ad8:	693a      	ldr	r2, [r7, #16]
 8005ada:	fb02 f303 	mul.w	r3, r2, r3
 8005ade:	ee07 3a90 	vmov	s15, r3
 8005ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ae6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	f000 8111 	beq.w	8005d14 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	f000 8083 	beq.w	8005c00 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	f200 80a1 	bhi.w	8005c44 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d003      	beq.n	8005b10 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d056      	beq.n	8005bbc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005b0e:	e099      	b.n	8005c44 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b10:	4b88      	ldr	r3, [pc, #544]	; (8005d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 0320 	and.w	r3, r3, #32
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d02d      	beq.n	8005b78 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b1c:	4b85      	ldr	r3, [pc, #532]	; (8005d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	08db      	lsrs	r3, r3, #3
 8005b22:	f003 0303 	and.w	r3, r3, #3
 8005b26:	4a84      	ldr	r2, [pc, #528]	; (8005d38 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005b28:	fa22 f303 	lsr.w	r3, r2, r3
 8005b2c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	ee07 3a90 	vmov	s15, r3
 8005b34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	ee07 3a90 	vmov	s15, r3
 8005b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b46:	4b7b      	ldr	r3, [pc, #492]	; (8005d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b4e:	ee07 3a90 	vmov	s15, r3
 8005b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b56:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b5a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005d3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b72:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005b76:	e087      	b.n	8005c88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	ee07 3a90 	vmov	s15, r3
 8005b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b82:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005d40 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b8a:	4b6a      	ldr	r3, [pc, #424]	; (8005d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b92:	ee07 3a90 	vmov	s15, r3
 8005b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b9e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005d3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005baa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005bba:	e065      	b.n	8005c88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	ee07 3a90 	vmov	s15, r3
 8005bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bc6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005d44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bce:	4b59      	ldr	r3, [pc, #356]	; (8005d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bd6:	ee07 3a90 	vmov	s15, r3
 8005bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bde:	ed97 6a03 	vldr	s12, [r7, #12]
 8005be2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005d3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005bfe:	e043      	b.n	8005c88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	ee07 3a90 	vmov	s15, r3
 8005c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c0a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005d48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c12:	4b48      	ldr	r3, [pc, #288]	; (8005d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c1a:	ee07 3a90 	vmov	s15, r3
 8005c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c22:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c26:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005d3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c42:	e021      	b.n	8005c88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	ee07 3a90 	vmov	s15, r3
 8005c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c4e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005d44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005c52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c56:	4b37      	ldr	r3, [pc, #220]	; (8005d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c5e:	ee07 3a90 	vmov	s15, r3
 8005c62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c66:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c6a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005d3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c86:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005c88:	4b2a      	ldr	r3, [pc, #168]	; (8005d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8c:	0a5b      	lsrs	r3, r3, #9
 8005c8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c92:	ee07 3a90 	vmov	s15, r3
 8005c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ca2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ca6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005caa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cae:	ee17 2a90 	vmov	r2, s15
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005cb6:	4b1f      	ldr	r3, [pc, #124]	; (8005d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cba:	0c1b      	lsrs	r3, r3, #16
 8005cbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cc0:	ee07 3a90 	vmov	s15, r3
 8005cc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cc8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ccc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005cd0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cdc:	ee17 2a90 	vmov	r2, s15
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005ce4:	4b13      	ldr	r3, [pc, #76]	; (8005d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce8:	0e1b      	lsrs	r3, r3, #24
 8005cea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cee:	ee07 3a90 	vmov	s15, r3
 8005cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cf6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005cfa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005cfe:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d0a:	ee17 2a90 	vmov	r2, s15
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005d12:	e008      	b.n	8005d26 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	609a      	str	r2, [r3, #8]
}
 8005d26:	bf00      	nop
 8005d28:	3724      	adds	r7, #36	; 0x24
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	58024400 	.word	0x58024400
 8005d38:	03d09000 	.word	0x03d09000
 8005d3c:	46000000 	.word	0x46000000
 8005d40:	4c742400 	.word	0x4c742400
 8005d44:	4a742400 	.word	0x4a742400
 8005d48:	4af42400 	.word	0x4af42400

08005d4c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d56:	2300      	movs	r3, #0
 8005d58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005d5a:	4b53      	ldr	r3, [pc, #332]	; (8005ea8 <RCCEx_PLL2_Config+0x15c>)
 8005d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d5e:	f003 0303 	and.w	r3, r3, #3
 8005d62:	2b03      	cmp	r3, #3
 8005d64:	d101      	bne.n	8005d6a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e099      	b.n	8005e9e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005d6a:	4b4f      	ldr	r3, [pc, #316]	; (8005ea8 <RCCEx_PLL2_Config+0x15c>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a4e      	ldr	r2, [pc, #312]	; (8005ea8 <RCCEx_PLL2_Config+0x15c>)
 8005d70:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005d74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d76:	f7fb fc97 	bl	80016a8 <HAL_GetTick>
 8005d7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005d7c:	e008      	b.n	8005d90 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005d7e:	f7fb fc93 	bl	80016a8 <HAL_GetTick>
 8005d82:	4602      	mov	r2, r0
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	d901      	bls.n	8005d90 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	e086      	b.n	8005e9e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005d90:	4b45      	ldr	r3, [pc, #276]	; (8005ea8 <RCCEx_PLL2_Config+0x15c>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d1f0      	bne.n	8005d7e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005d9c:	4b42      	ldr	r3, [pc, #264]	; (8005ea8 <RCCEx_PLL2_Config+0x15c>)
 8005d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	031b      	lsls	r3, r3, #12
 8005daa:	493f      	ldr	r1, [pc, #252]	; (8005ea8 <RCCEx_PLL2_Config+0x15c>)
 8005dac:	4313      	orrs	r3, r2
 8005dae:	628b      	str	r3, [r1, #40]	; 0x28
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	3b01      	subs	r3, #1
 8005db6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	3b01      	subs	r3, #1
 8005dc0:	025b      	lsls	r3, r3, #9
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	431a      	orrs	r2, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	041b      	lsls	r3, r3, #16
 8005dce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005dd2:	431a      	orrs	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	061b      	lsls	r3, r3, #24
 8005ddc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005de0:	4931      	ldr	r1, [pc, #196]	; (8005ea8 <RCCEx_PLL2_Config+0x15c>)
 8005de2:	4313      	orrs	r3, r2
 8005de4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005de6:	4b30      	ldr	r3, [pc, #192]	; (8005ea8 <RCCEx_PLL2_Config+0x15c>)
 8005de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	492d      	ldr	r1, [pc, #180]	; (8005ea8 <RCCEx_PLL2_Config+0x15c>)
 8005df4:	4313      	orrs	r3, r2
 8005df6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005df8:	4b2b      	ldr	r3, [pc, #172]	; (8005ea8 <RCCEx_PLL2_Config+0x15c>)
 8005dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfc:	f023 0220 	bic.w	r2, r3, #32
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	699b      	ldr	r3, [r3, #24]
 8005e04:	4928      	ldr	r1, [pc, #160]	; (8005ea8 <RCCEx_PLL2_Config+0x15c>)
 8005e06:	4313      	orrs	r3, r2
 8005e08:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005e0a:	4b27      	ldr	r3, [pc, #156]	; (8005ea8 <RCCEx_PLL2_Config+0x15c>)
 8005e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0e:	4a26      	ldr	r2, [pc, #152]	; (8005ea8 <RCCEx_PLL2_Config+0x15c>)
 8005e10:	f023 0310 	bic.w	r3, r3, #16
 8005e14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005e16:	4b24      	ldr	r3, [pc, #144]	; (8005ea8 <RCCEx_PLL2_Config+0x15c>)
 8005e18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e1a:	4b24      	ldr	r3, [pc, #144]	; (8005eac <RCCEx_PLL2_Config+0x160>)
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	69d2      	ldr	r2, [r2, #28]
 8005e22:	00d2      	lsls	r2, r2, #3
 8005e24:	4920      	ldr	r1, [pc, #128]	; (8005ea8 <RCCEx_PLL2_Config+0x15c>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005e2a:	4b1f      	ldr	r3, [pc, #124]	; (8005ea8 <RCCEx_PLL2_Config+0x15c>)
 8005e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e2e:	4a1e      	ldr	r2, [pc, #120]	; (8005ea8 <RCCEx_PLL2_Config+0x15c>)
 8005e30:	f043 0310 	orr.w	r3, r3, #16
 8005e34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d106      	bne.n	8005e4a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005e3c:	4b1a      	ldr	r3, [pc, #104]	; (8005ea8 <RCCEx_PLL2_Config+0x15c>)
 8005e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e40:	4a19      	ldr	r2, [pc, #100]	; (8005ea8 <RCCEx_PLL2_Config+0x15c>)
 8005e42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005e48:	e00f      	b.n	8005e6a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d106      	bne.n	8005e5e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005e50:	4b15      	ldr	r3, [pc, #84]	; (8005ea8 <RCCEx_PLL2_Config+0x15c>)
 8005e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e54:	4a14      	ldr	r2, [pc, #80]	; (8005ea8 <RCCEx_PLL2_Config+0x15c>)
 8005e56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005e5c:	e005      	b.n	8005e6a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005e5e:	4b12      	ldr	r3, [pc, #72]	; (8005ea8 <RCCEx_PLL2_Config+0x15c>)
 8005e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e62:	4a11      	ldr	r2, [pc, #68]	; (8005ea8 <RCCEx_PLL2_Config+0x15c>)
 8005e64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005e68:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005e6a:	4b0f      	ldr	r3, [pc, #60]	; (8005ea8 <RCCEx_PLL2_Config+0x15c>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a0e      	ldr	r2, [pc, #56]	; (8005ea8 <RCCEx_PLL2_Config+0x15c>)
 8005e70:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e76:	f7fb fc17 	bl	80016a8 <HAL_GetTick>
 8005e7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005e7c:	e008      	b.n	8005e90 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005e7e:	f7fb fc13 	bl	80016a8 <HAL_GetTick>
 8005e82:	4602      	mov	r2, r0
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	1ad3      	subs	r3, r2, r3
 8005e88:	2b02      	cmp	r3, #2
 8005e8a:	d901      	bls.n	8005e90 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	e006      	b.n	8005e9e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005e90:	4b05      	ldr	r3, [pc, #20]	; (8005ea8 <RCCEx_PLL2_Config+0x15c>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d0f0      	beq.n	8005e7e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3710      	adds	r7, #16
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	58024400 	.word	0x58024400
 8005eac:	ffff0007 	.word	0xffff0007

08005eb0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005ebe:	4b53      	ldr	r3, [pc, #332]	; (800600c <RCCEx_PLL3_Config+0x15c>)
 8005ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec2:	f003 0303 	and.w	r3, r3, #3
 8005ec6:	2b03      	cmp	r3, #3
 8005ec8:	d101      	bne.n	8005ece <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e099      	b.n	8006002 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005ece:	4b4f      	ldr	r3, [pc, #316]	; (800600c <RCCEx_PLL3_Config+0x15c>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a4e      	ldr	r2, [pc, #312]	; (800600c <RCCEx_PLL3_Config+0x15c>)
 8005ed4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ed8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005eda:	f7fb fbe5 	bl	80016a8 <HAL_GetTick>
 8005ede:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005ee0:	e008      	b.n	8005ef4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005ee2:	f7fb fbe1 	bl	80016a8 <HAL_GetTick>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d901      	bls.n	8005ef4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e086      	b.n	8006002 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005ef4:	4b45      	ldr	r3, [pc, #276]	; (800600c <RCCEx_PLL3_Config+0x15c>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d1f0      	bne.n	8005ee2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005f00:	4b42      	ldr	r3, [pc, #264]	; (800600c <RCCEx_PLL3_Config+0x15c>)
 8005f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f04:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	051b      	lsls	r3, r3, #20
 8005f0e:	493f      	ldr	r1, [pc, #252]	; (800600c <RCCEx_PLL3_Config+0x15c>)
 8005f10:	4313      	orrs	r3, r2
 8005f12:	628b      	str	r3, [r1, #40]	; 0x28
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	3b01      	subs	r3, #1
 8005f24:	025b      	lsls	r3, r3, #9
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	431a      	orrs	r2, r3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	041b      	lsls	r3, r3, #16
 8005f32:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005f36:	431a      	orrs	r2, r3
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	061b      	lsls	r3, r3, #24
 8005f40:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005f44:	4931      	ldr	r1, [pc, #196]	; (800600c <RCCEx_PLL3_Config+0x15c>)
 8005f46:	4313      	orrs	r3, r2
 8005f48:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005f4a:	4b30      	ldr	r3, [pc, #192]	; (800600c <RCCEx_PLL3_Config+0x15c>)
 8005f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	695b      	ldr	r3, [r3, #20]
 8005f56:	492d      	ldr	r1, [pc, #180]	; (800600c <RCCEx_PLL3_Config+0x15c>)
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005f5c:	4b2b      	ldr	r3, [pc, #172]	; (800600c <RCCEx_PLL3_Config+0x15c>)
 8005f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f60:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	699b      	ldr	r3, [r3, #24]
 8005f68:	4928      	ldr	r1, [pc, #160]	; (800600c <RCCEx_PLL3_Config+0x15c>)
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005f6e:	4b27      	ldr	r3, [pc, #156]	; (800600c <RCCEx_PLL3_Config+0x15c>)
 8005f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f72:	4a26      	ldr	r2, [pc, #152]	; (800600c <RCCEx_PLL3_Config+0x15c>)
 8005f74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005f7a:	4b24      	ldr	r3, [pc, #144]	; (800600c <RCCEx_PLL3_Config+0x15c>)
 8005f7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f7e:	4b24      	ldr	r3, [pc, #144]	; (8006010 <RCCEx_PLL3_Config+0x160>)
 8005f80:	4013      	ands	r3, r2
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	69d2      	ldr	r2, [r2, #28]
 8005f86:	00d2      	lsls	r2, r2, #3
 8005f88:	4920      	ldr	r1, [pc, #128]	; (800600c <RCCEx_PLL3_Config+0x15c>)
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005f8e:	4b1f      	ldr	r3, [pc, #124]	; (800600c <RCCEx_PLL3_Config+0x15c>)
 8005f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f92:	4a1e      	ldr	r2, [pc, #120]	; (800600c <RCCEx_PLL3_Config+0x15c>)
 8005f94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f98:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d106      	bne.n	8005fae <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005fa0:	4b1a      	ldr	r3, [pc, #104]	; (800600c <RCCEx_PLL3_Config+0x15c>)
 8005fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa4:	4a19      	ldr	r2, [pc, #100]	; (800600c <RCCEx_PLL3_Config+0x15c>)
 8005fa6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005faa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005fac:	e00f      	b.n	8005fce <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d106      	bne.n	8005fc2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005fb4:	4b15      	ldr	r3, [pc, #84]	; (800600c <RCCEx_PLL3_Config+0x15c>)
 8005fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb8:	4a14      	ldr	r2, [pc, #80]	; (800600c <RCCEx_PLL3_Config+0x15c>)
 8005fba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005fbe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005fc0:	e005      	b.n	8005fce <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005fc2:	4b12      	ldr	r3, [pc, #72]	; (800600c <RCCEx_PLL3_Config+0x15c>)
 8005fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc6:	4a11      	ldr	r2, [pc, #68]	; (800600c <RCCEx_PLL3_Config+0x15c>)
 8005fc8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005fcc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005fce:	4b0f      	ldr	r3, [pc, #60]	; (800600c <RCCEx_PLL3_Config+0x15c>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a0e      	ldr	r2, [pc, #56]	; (800600c <RCCEx_PLL3_Config+0x15c>)
 8005fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fda:	f7fb fb65 	bl	80016a8 <HAL_GetTick>
 8005fde:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005fe0:	e008      	b.n	8005ff4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005fe2:	f7fb fb61 	bl	80016a8 <HAL_GetTick>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	1ad3      	subs	r3, r2, r3
 8005fec:	2b02      	cmp	r3, #2
 8005fee:	d901      	bls.n	8005ff4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	e006      	b.n	8006002 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ff4:	4b05      	ldr	r3, [pc, #20]	; (800600c <RCCEx_PLL3_Config+0x15c>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d0f0      	beq.n	8005fe2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006000:	7bfb      	ldrb	r3, [r7, #15]
}
 8006002:	4618      	mov	r0, r3
 8006004:	3710      	adds	r7, #16
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	58024400 	.word	0x58024400
 8006010:	ffff0007 	.word	0xffff0007

08006014 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d101      	bne.n	8006026 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e049      	b.n	80060ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800602c:	b2db      	uxtb	r3, r3
 800602e:	2b00      	cmp	r3, #0
 8006030:	d106      	bne.n	8006040 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f7fb f896 	bl	800116c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2202      	movs	r2, #2
 8006044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	3304      	adds	r3, #4
 8006050:	4619      	mov	r1, r3
 8006052:	4610      	mov	r0, r2
 8006054:	f000 fd2a 	bl	8006aac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3708      	adds	r7, #8
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
	...

080060c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d001      	beq.n	80060dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	e054      	b.n	8006186 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2202      	movs	r2, #2
 80060e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68da      	ldr	r2, [r3, #12]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f042 0201 	orr.w	r2, r2, #1
 80060f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a26      	ldr	r2, [pc, #152]	; (8006194 <HAL_TIM_Base_Start_IT+0xd0>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d022      	beq.n	8006144 <HAL_TIM_Base_Start_IT+0x80>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006106:	d01d      	beq.n	8006144 <HAL_TIM_Base_Start_IT+0x80>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a22      	ldr	r2, [pc, #136]	; (8006198 <HAL_TIM_Base_Start_IT+0xd4>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d018      	beq.n	8006144 <HAL_TIM_Base_Start_IT+0x80>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a21      	ldr	r2, [pc, #132]	; (800619c <HAL_TIM_Base_Start_IT+0xd8>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d013      	beq.n	8006144 <HAL_TIM_Base_Start_IT+0x80>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a1f      	ldr	r2, [pc, #124]	; (80061a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d00e      	beq.n	8006144 <HAL_TIM_Base_Start_IT+0x80>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a1e      	ldr	r2, [pc, #120]	; (80061a4 <HAL_TIM_Base_Start_IT+0xe0>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d009      	beq.n	8006144 <HAL_TIM_Base_Start_IT+0x80>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a1c      	ldr	r2, [pc, #112]	; (80061a8 <HAL_TIM_Base_Start_IT+0xe4>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d004      	beq.n	8006144 <HAL_TIM_Base_Start_IT+0x80>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a1b      	ldr	r2, [pc, #108]	; (80061ac <HAL_TIM_Base_Start_IT+0xe8>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d115      	bne.n	8006170 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	689a      	ldr	r2, [r3, #8]
 800614a:	4b19      	ldr	r3, [pc, #100]	; (80061b0 <HAL_TIM_Base_Start_IT+0xec>)
 800614c:	4013      	ands	r3, r2
 800614e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2b06      	cmp	r3, #6
 8006154:	d015      	beq.n	8006182 <HAL_TIM_Base_Start_IT+0xbe>
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800615c:	d011      	beq.n	8006182 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f042 0201 	orr.w	r2, r2, #1
 800616c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800616e:	e008      	b.n	8006182 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f042 0201 	orr.w	r2, r2, #1
 800617e:	601a      	str	r2, [r3, #0]
 8006180:	e000      	b.n	8006184 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006182:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	3714      	adds	r7, #20
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr
 8006192:	bf00      	nop
 8006194:	40010000 	.word	0x40010000
 8006198:	40000400 	.word	0x40000400
 800619c:	40000800 	.word	0x40000800
 80061a0:	40000c00 	.word	0x40000c00
 80061a4:	40010400 	.word	0x40010400
 80061a8:	40001800 	.word	0x40001800
 80061ac:	40014000 	.word	0x40014000
 80061b0:	00010007 	.word	0x00010007

080061b4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d101      	bne.n	80061c6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e049      	b.n	800625a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d106      	bne.n	80061e0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 f841 	bl	8006262 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2202      	movs	r2, #2
 80061e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	3304      	adds	r3, #4
 80061f0:	4619      	mov	r1, r3
 80061f2:	4610      	mov	r0, r2
 80061f4:	f000 fc5a 	bl	8006aac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3708      	adds	r7, #8
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}

08006262 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006262:	b480      	push	{r7}
 8006264:	b083      	sub	sp, #12
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800626a:	bf00      	nop
 800626c:	370c      	adds	r7, #12
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr
	...

08006278 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d104      	bne.n	8006292 <HAL_TIM_IC_Start+0x1a>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800628e:	b2db      	uxtb	r3, r3
 8006290:	e023      	b.n	80062da <HAL_TIM_IC_Start+0x62>
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	2b04      	cmp	r3, #4
 8006296:	d104      	bne.n	80062a2 <HAL_TIM_IC_Start+0x2a>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	e01b      	b.n	80062da <HAL_TIM_IC_Start+0x62>
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	2b08      	cmp	r3, #8
 80062a6:	d104      	bne.n	80062b2 <HAL_TIM_IC_Start+0x3a>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	e013      	b.n	80062da <HAL_TIM_IC_Start+0x62>
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	2b0c      	cmp	r3, #12
 80062b6:	d104      	bne.n	80062c2 <HAL_TIM_IC_Start+0x4a>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	e00b      	b.n	80062da <HAL_TIM_IC_Start+0x62>
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	2b10      	cmp	r3, #16
 80062c6:	d104      	bne.n	80062d2 <HAL_TIM_IC_Start+0x5a>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	e003      	b.n	80062da <HAL_TIM_IC_Start+0x62>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d104      	bne.n	80062ec <HAL_TIM_IC_Start+0x74>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	e013      	b.n	8006314 <HAL_TIM_IC_Start+0x9c>
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	2b04      	cmp	r3, #4
 80062f0:	d104      	bne.n	80062fc <HAL_TIM_IC_Start+0x84>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	e00b      	b.n	8006314 <HAL_TIM_IC_Start+0x9c>
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	2b08      	cmp	r3, #8
 8006300:	d104      	bne.n	800630c <HAL_TIM_IC_Start+0x94>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006308:	b2db      	uxtb	r3, r3
 800630a:	e003      	b.n	8006314 <HAL_TIM_IC_Start+0x9c>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8006312:	b2db      	uxtb	r3, r3
 8006314:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006316:	7bfb      	ldrb	r3, [r7, #15]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d102      	bne.n	8006322 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800631c:	7bbb      	ldrb	r3, [r7, #14]
 800631e:	2b01      	cmp	r3, #1
 8006320:	d001      	beq.n	8006326 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e097      	b.n	8006456 <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d104      	bne.n	8006336 <HAL_TIM_IC_Start+0xbe>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2202      	movs	r2, #2
 8006330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006334:	e023      	b.n	800637e <HAL_TIM_IC_Start+0x106>
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	2b04      	cmp	r3, #4
 800633a:	d104      	bne.n	8006346 <HAL_TIM_IC_Start+0xce>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2202      	movs	r2, #2
 8006340:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006344:	e01b      	b.n	800637e <HAL_TIM_IC_Start+0x106>
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	2b08      	cmp	r3, #8
 800634a:	d104      	bne.n	8006356 <HAL_TIM_IC_Start+0xde>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2202      	movs	r2, #2
 8006350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006354:	e013      	b.n	800637e <HAL_TIM_IC_Start+0x106>
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	2b0c      	cmp	r3, #12
 800635a:	d104      	bne.n	8006366 <HAL_TIM_IC_Start+0xee>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2202      	movs	r2, #2
 8006360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006364:	e00b      	b.n	800637e <HAL_TIM_IC_Start+0x106>
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	2b10      	cmp	r3, #16
 800636a:	d104      	bne.n	8006376 <HAL_TIM_IC_Start+0xfe>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2202      	movs	r2, #2
 8006370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006374:	e003      	b.n	800637e <HAL_TIM_IC_Start+0x106>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2202      	movs	r2, #2
 800637a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d104      	bne.n	800638e <HAL_TIM_IC_Start+0x116>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2202      	movs	r2, #2
 8006388:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800638c:	e013      	b.n	80063b6 <HAL_TIM_IC_Start+0x13e>
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	2b04      	cmp	r3, #4
 8006392:	d104      	bne.n	800639e <HAL_TIM_IC_Start+0x126>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2202      	movs	r2, #2
 8006398:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800639c:	e00b      	b.n	80063b6 <HAL_TIM_IC_Start+0x13e>
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	2b08      	cmp	r3, #8
 80063a2:	d104      	bne.n	80063ae <HAL_TIM_IC_Start+0x136>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2202      	movs	r2, #2
 80063a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80063ac:	e003      	b.n	80063b6 <HAL_TIM_IC_Start+0x13e>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2202      	movs	r2, #2
 80063b2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	2201      	movs	r2, #1
 80063bc:	6839      	ldr	r1, [r7, #0]
 80063be:	4618      	mov	r0, r3
 80063c0:	f000 fdd6 	bl	8006f70 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a25      	ldr	r2, [pc, #148]	; (8006460 <HAL_TIM_IC_Start+0x1e8>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d022      	beq.n	8006414 <HAL_TIM_IC_Start+0x19c>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063d6:	d01d      	beq.n	8006414 <HAL_TIM_IC_Start+0x19c>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a21      	ldr	r2, [pc, #132]	; (8006464 <HAL_TIM_IC_Start+0x1ec>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d018      	beq.n	8006414 <HAL_TIM_IC_Start+0x19c>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a20      	ldr	r2, [pc, #128]	; (8006468 <HAL_TIM_IC_Start+0x1f0>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d013      	beq.n	8006414 <HAL_TIM_IC_Start+0x19c>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a1e      	ldr	r2, [pc, #120]	; (800646c <HAL_TIM_IC_Start+0x1f4>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d00e      	beq.n	8006414 <HAL_TIM_IC_Start+0x19c>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a1d      	ldr	r2, [pc, #116]	; (8006470 <HAL_TIM_IC_Start+0x1f8>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d009      	beq.n	8006414 <HAL_TIM_IC_Start+0x19c>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a1b      	ldr	r2, [pc, #108]	; (8006474 <HAL_TIM_IC_Start+0x1fc>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d004      	beq.n	8006414 <HAL_TIM_IC_Start+0x19c>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a1a      	ldr	r2, [pc, #104]	; (8006478 <HAL_TIM_IC_Start+0x200>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d115      	bne.n	8006440 <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	689a      	ldr	r2, [r3, #8]
 800641a:	4b18      	ldr	r3, [pc, #96]	; (800647c <HAL_TIM_IC_Start+0x204>)
 800641c:	4013      	ands	r3, r2
 800641e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	2b06      	cmp	r3, #6
 8006424:	d015      	beq.n	8006452 <HAL_TIM_IC_Start+0x1da>
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800642c:	d011      	beq.n	8006452 <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f042 0201 	orr.w	r2, r2, #1
 800643c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800643e:	e008      	b.n	8006452 <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f042 0201 	orr.w	r2, r2, #1
 800644e:	601a      	str	r2, [r3, #0]
 8006450:	e000      	b.n	8006454 <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006452:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3710      	adds	r7, #16
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	40010000 	.word	0x40010000
 8006464:	40000400 	.word	0x40000400
 8006468:	40000800 	.word	0x40000800
 800646c:	40000c00 	.word	0x40000c00
 8006470:	40010400 	.word	0x40010400
 8006474:	40001800 	.word	0x40001800
 8006478:	40014000 	.word	0x40014000
 800647c:	00010007 	.word	0x00010007

08006480 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b082      	sub	sp, #8
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	f003 0302 	and.w	r3, r3, #2
 8006492:	2b02      	cmp	r3, #2
 8006494:	d122      	bne.n	80064dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	f003 0302 	and.w	r3, r3, #2
 80064a0:	2b02      	cmp	r3, #2
 80064a2:	d11b      	bne.n	80064dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f06f 0202 	mvn.w	r2, #2
 80064ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2201      	movs	r2, #1
 80064b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	699b      	ldr	r3, [r3, #24]
 80064ba:	f003 0303 	and.w	r3, r3, #3
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d003      	beq.n	80064ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f7fa f990 	bl	80007e8 <HAL_TIM_IC_CaptureCallback>
 80064c8:	e005      	b.n	80064d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 fad0 	bl	8006a70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 fad7 	bl	8006a84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	f003 0304 	and.w	r3, r3, #4
 80064e6:	2b04      	cmp	r3, #4
 80064e8:	d122      	bne.n	8006530 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	f003 0304 	and.w	r3, r3, #4
 80064f4:	2b04      	cmp	r3, #4
 80064f6:	d11b      	bne.n	8006530 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f06f 0204 	mvn.w	r2, #4
 8006500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2202      	movs	r2, #2
 8006506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	699b      	ldr	r3, [r3, #24]
 800650e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006512:	2b00      	cmp	r3, #0
 8006514:	d003      	beq.n	800651e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f7fa f966 	bl	80007e8 <HAL_TIM_IC_CaptureCallback>
 800651c:	e005      	b.n	800652a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 faa6 	bl	8006a70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 faad 	bl	8006a84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	f003 0308 	and.w	r3, r3, #8
 800653a:	2b08      	cmp	r3, #8
 800653c:	d122      	bne.n	8006584 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	f003 0308 	and.w	r3, r3, #8
 8006548:	2b08      	cmp	r3, #8
 800654a:	d11b      	bne.n	8006584 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f06f 0208 	mvn.w	r2, #8
 8006554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2204      	movs	r2, #4
 800655a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	69db      	ldr	r3, [r3, #28]
 8006562:	f003 0303 	and.w	r3, r3, #3
 8006566:	2b00      	cmp	r3, #0
 8006568:	d003      	beq.n	8006572 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f7fa f93c 	bl	80007e8 <HAL_TIM_IC_CaptureCallback>
 8006570:	e005      	b.n	800657e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 fa7c 	bl	8006a70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 fa83 	bl	8006a84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	f003 0310 	and.w	r3, r3, #16
 800658e:	2b10      	cmp	r3, #16
 8006590:	d122      	bne.n	80065d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	f003 0310 	and.w	r3, r3, #16
 800659c:	2b10      	cmp	r3, #16
 800659e:	d11b      	bne.n	80065d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f06f 0210 	mvn.w	r2, #16
 80065a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2208      	movs	r2, #8
 80065ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	69db      	ldr	r3, [r3, #28]
 80065b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d003      	beq.n	80065c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f7fa f912 	bl	80007e8 <HAL_TIM_IC_CaptureCallback>
 80065c4:	e005      	b.n	80065d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 fa52 	bl	8006a70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 fa59 	bl	8006a84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	f003 0301 	and.w	r3, r3, #1
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d10e      	bne.n	8006604 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	f003 0301 	and.w	r3, r3, #1
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d107      	bne.n	8006604 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f06f 0201 	mvn.w	r2, #1
 80065fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f7fa fcb0 	bl	8000f64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800660e:	2b80      	cmp	r3, #128	; 0x80
 8006610:	d10e      	bne.n	8006630 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800661c:	2b80      	cmp	r3, #128	; 0x80
 800661e:	d107      	bne.n	8006630 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 fd5e 	bl	80070ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800663a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800663e:	d10e      	bne.n	800665e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800664a:	2b80      	cmp	r3, #128	; 0x80
 800664c:	d107      	bne.n	800665e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006656:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 fd51 	bl	8007100 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	691b      	ldr	r3, [r3, #16]
 8006664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006668:	2b40      	cmp	r3, #64	; 0x40
 800666a:	d10e      	bne.n	800668a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006676:	2b40      	cmp	r3, #64	; 0x40
 8006678:	d107      	bne.n	800668a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 fa07 	bl	8006a98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	f003 0320 	and.w	r3, r3, #32
 8006694:	2b20      	cmp	r3, #32
 8006696:	d10e      	bne.n	80066b6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	f003 0320 	and.w	r3, r3, #32
 80066a2:	2b20      	cmp	r3, #32
 80066a4:	d107      	bne.n	80066b6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f06f 0220 	mvn.w	r2, #32
 80066ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 fd11 	bl	80070d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066b6:	bf00      	nop
 80066b8:	3708      	adds	r7, #8
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}

080066be <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80066be:	b580      	push	{r7, lr}
 80066c0:	b086      	sub	sp, #24
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	60f8      	str	r0, [r7, #12]
 80066c6:	60b9      	str	r1, [r7, #8]
 80066c8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066ca:	2300      	movs	r3, #0
 80066cc:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d101      	bne.n	80066dc <HAL_TIM_IC_ConfigChannel+0x1e>
 80066d8:	2302      	movs	r3, #2
 80066da:	e088      	b.n	80067ee <HAL_TIM_IC_ConfigChannel+0x130>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2201      	movs	r2, #1
 80066e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d11b      	bne.n	8006722 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80066fa:	f000 fa71 	bl	8006be0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	699a      	ldr	r2, [r3, #24]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f022 020c 	bic.w	r2, r2, #12
 800670c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	6999      	ldr	r1, [r3, #24]
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	689a      	ldr	r2, [r3, #8]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	430a      	orrs	r2, r1
 800671e:	619a      	str	r2, [r3, #24]
 8006720:	e060      	b.n	80067e4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2b04      	cmp	r3, #4
 8006726:	d11c      	bne.n	8006762 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006738:	f000 faf5 	bl	8006d26 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	699a      	ldr	r2, [r3, #24]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800674a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	6999      	ldr	r1, [r3, #24]
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	021a      	lsls	r2, r3, #8
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	430a      	orrs	r2, r1
 800675e:	619a      	str	r2, [r3, #24]
 8006760:	e040      	b.n	80067e4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2b08      	cmp	r3, #8
 8006766:	d11b      	bne.n	80067a0 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006778:	f000 fb42 	bl	8006e00 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	69da      	ldr	r2, [r3, #28]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f022 020c 	bic.w	r2, r2, #12
 800678a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	69d9      	ldr	r1, [r3, #28]
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	689a      	ldr	r2, [r3, #8]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	430a      	orrs	r2, r1
 800679c:	61da      	str	r2, [r3, #28]
 800679e:	e021      	b.n	80067e4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2b0c      	cmp	r3, #12
 80067a4:	d11c      	bne.n	80067e0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80067b6:	f000 fb5f 	bl	8006e78 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	69da      	ldr	r2, [r3, #28]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80067c8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	69d9      	ldr	r1, [r3, #28]
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	021a      	lsls	r2, r3, #8
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	430a      	orrs	r2, r1
 80067dc:	61da      	str	r2, [r3, #28]
 80067de:	e001      	b.n	80067e4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80067ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3718      	adds	r7, #24
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
	...

080067f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006802:	2300      	movs	r3, #0
 8006804:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800680c:	2b01      	cmp	r3, #1
 800680e:	d101      	bne.n	8006814 <HAL_TIM_ConfigClockSource+0x1c>
 8006810:	2302      	movs	r3, #2
 8006812:	e0dc      	b.n	80069ce <HAL_TIM_ConfigClockSource+0x1d6>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2202      	movs	r2, #2
 8006820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800682c:	68ba      	ldr	r2, [r7, #8]
 800682e:	4b6a      	ldr	r3, [pc, #424]	; (80069d8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8006830:	4013      	ands	r3, r2
 8006832:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800683a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	68ba      	ldr	r2, [r7, #8]
 8006842:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a64      	ldr	r2, [pc, #400]	; (80069dc <HAL_TIM_ConfigClockSource+0x1e4>)
 800684a:	4293      	cmp	r3, r2
 800684c:	f000 80a9 	beq.w	80069a2 <HAL_TIM_ConfigClockSource+0x1aa>
 8006850:	4a62      	ldr	r2, [pc, #392]	; (80069dc <HAL_TIM_ConfigClockSource+0x1e4>)
 8006852:	4293      	cmp	r3, r2
 8006854:	f200 80ae 	bhi.w	80069b4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006858:	4a61      	ldr	r2, [pc, #388]	; (80069e0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800685a:	4293      	cmp	r3, r2
 800685c:	f000 80a1 	beq.w	80069a2 <HAL_TIM_ConfigClockSource+0x1aa>
 8006860:	4a5f      	ldr	r2, [pc, #380]	; (80069e0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006862:	4293      	cmp	r3, r2
 8006864:	f200 80a6 	bhi.w	80069b4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006868:	4a5e      	ldr	r2, [pc, #376]	; (80069e4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800686a:	4293      	cmp	r3, r2
 800686c:	f000 8099 	beq.w	80069a2 <HAL_TIM_ConfigClockSource+0x1aa>
 8006870:	4a5c      	ldr	r2, [pc, #368]	; (80069e4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006872:	4293      	cmp	r3, r2
 8006874:	f200 809e 	bhi.w	80069b4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006878:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800687c:	f000 8091 	beq.w	80069a2 <HAL_TIM_ConfigClockSource+0x1aa>
 8006880:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006884:	f200 8096 	bhi.w	80069b4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006888:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800688c:	f000 8089 	beq.w	80069a2 <HAL_TIM_ConfigClockSource+0x1aa>
 8006890:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006894:	f200 808e 	bhi.w	80069b4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006898:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800689c:	d03e      	beq.n	800691c <HAL_TIM_ConfigClockSource+0x124>
 800689e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068a2:	f200 8087 	bhi.w	80069b4 <HAL_TIM_ConfigClockSource+0x1bc>
 80068a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068aa:	f000 8086 	beq.w	80069ba <HAL_TIM_ConfigClockSource+0x1c2>
 80068ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068b2:	d87f      	bhi.n	80069b4 <HAL_TIM_ConfigClockSource+0x1bc>
 80068b4:	2b70      	cmp	r3, #112	; 0x70
 80068b6:	d01a      	beq.n	80068ee <HAL_TIM_ConfigClockSource+0xf6>
 80068b8:	2b70      	cmp	r3, #112	; 0x70
 80068ba:	d87b      	bhi.n	80069b4 <HAL_TIM_ConfigClockSource+0x1bc>
 80068bc:	2b60      	cmp	r3, #96	; 0x60
 80068be:	d050      	beq.n	8006962 <HAL_TIM_ConfigClockSource+0x16a>
 80068c0:	2b60      	cmp	r3, #96	; 0x60
 80068c2:	d877      	bhi.n	80069b4 <HAL_TIM_ConfigClockSource+0x1bc>
 80068c4:	2b50      	cmp	r3, #80	; 0x50
 80068c6:	d03c      	beq.n	8006942 <HAL_TIM_ConfigClockSource+0x14a>
 80068c8:	2b50      	cmp	r3, #80	; 0x50
 80068ca:	d873      	bhi.n	80069b4 <HAL_TIM_ConfigClockSource+0x1bc>
 80068cc:	2b40      	cmp	r3, #64	; 0x40
 80068ce:	d058      	beq.n	8006982 <HAL_TIM_ConfigClockSource+0x18a>
 80068d0:	2b40      	cmp	r3, #64	; 0x40
 80068d2:	d86f      	bhi.n	80069b4 <HAL_TIM_ConfigClockSource+0x1bc>
 80068d4:	2b30      	cmp	r3, #48	; 0x30
 80068d6:	d064      	beq.n	80069a2 <HAL_TIM_ConfigClockSource+0x1aa>
 80068d8:	2b30      	cmp	r3, #48	; 0x30
 80068da:	d86b      	bhi.n	80069b4 <HAL_TIM_ConfigClockSource+0x1bc>
 80068dc:	2b20      	cmp	r3, #32
 80068de:	d060      	beq.n	80069a2 <HAL_TIM_ConfigClockSource+0x1aa>
 80068e0:	2b20      	cmp	r3, #32
 80068e2:	d867      	bhi.n	80069b4 <HAL_TIM_ConfigClockSource+0x1bc>
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d05c      	beq.n	80069a2 <HAL_TIM_ConfigClockSource+0x1aa>
 80068e8:	2b10      	cmp	r3, #16
 80068ea:	d05a      	beq.n	80069a2 <HAL_TIM_ConfigClockSource+0x1aa>
 80068ec:	e062      	b.n	80069b4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80068fe:	f000 fb17 	bl	8006f30 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006910:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	68ba      	ldr	r2, [r7, #8]
 8006918:	609a      	str	r2, [r3, #8]
      break;
 800691a:	e04f      	b.n	80069bc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800692c:	f000 fb00 	bl	8006f30 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	689a      	ldr	r2, [r3, #8]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800693e:	609a      	str	r2, [r3, #8]
      break;
 8006940:	e03c      	b.n	80069bc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800694e:	461a      	mov	r2, r3
 8006950:	f000 f9ba 	bl	8006cc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	2150      	movs	r1, #80	; 0x50
 800695a:	4618      	mov	r0, r3
 800695c:	f000 faca 	bl	8006ef4 <TIM_ITRx_SetConfig>
      break;
 8006960:	e02c      	b.n	80069bc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800696e:	461a      	mov	r2, r3
 8006970:	f000 fa16 	bl	8006da0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	2160      	movs	r1, #96	; 0x60
 800697a:	4618      	mov	r0, r3
 800697c:	f000 faba 	bl	8006ef4 <TIM_ITRx_SetConfig>
      break;
 8006980:	e01c      	b.n	80069bc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800698e:	461a      	mov	r2, r3
 8006990:	f000 f99a 	bl	8006cc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2140      	movs	r1, #64	; 0x40
 800699a:	4618      	mov	r0, r3
 800699c:	f000 faaa 	bl	8006ef4 <TIM_ITRx_SetConfig>
      break;
 80069a0:	e00c      	b.n	80069bc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4619      	mov	r1, r3
 80069ac:	4610      	mov	r0, r2
 80069ae:	f000 faa1 	bl	8006ef4 <TIM_ITRx_SetConfig>
      break;
 80069b2:	e003      	b.n	80069bc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	73fb      	strb	r3, [r7, #15]
      break;
 80069b8:	e000      	b.n	80069bc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80069ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80069cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3710      	adds	r7, #16
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	ffceff88 	.word	0xffceff88
 80069dc:	00100040 	.word	0x00100040
 80069e0:	00100030 	.word	0x00100030
 80069e4:	00100020 	.word	0x00100020

080069e8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80069f2:	2300      	movs	r3, #0
 80069f4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	2b0c      	cmp	r3, #12
 80069fa:	d831      	bhi.n	8006a60 <HAL_TIM_ReadCapturedValue+0x78>
 80069fc:	a201      	add	r2, pc, #4	; (adr r2, 8006a04 <HAL_TIM_ReadCapturedValue+0x1c>)
 80069fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a02:	bf00      	nop
 8006a04:	08006a39 	.word	0x08006a39
 8006a08:	08006a61 	.word	0x08006a61
 8006a0c:	08006a61 	.word	0x08006a61
 8006a10:	08006a61 	.word	0x08006a61
 8006a14:	08006a43 	.word	0x08006a43
 8006a18:	08006a61 	.word	0x08006a61
 8006a1c:	08006a61 	.word	0x08006a61
 8006a20:	08006a61 	.word	0x08006a61
 8006a24:	08006a4d 	.word	0x08006a4d
 8006a28:	08006a61 	.word	0x08006a61
 8006a2c:	08006a61 	.word	0x08006a61
 8006a30:	08006a61 	.word	0x08006a61
 8006a34:	08006a57 	.word	0x08006a57
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a3e:	60fb      	str	r3, [r7, #12]

      break;
 8006a40:	e00f      	b.n	8006a62 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a48:	60fb      	str	r3, [r7, #12]

      break;
 8006a4a:	e00a      	b.n	8006a62 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a52:	60fb      	str	r3, [r7, #12]

      break;
 8006a54:	e005      	b.n	8006a62 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5c:	60fb      	str	r3, [r7, #12]

      break;
 8006a5e:	e000      	b.n	8006a62 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006a60:	bf00      	nop
  }

  return tmpreg;
 8006a62:	68fb      	ldr	r3, [r7, #12]
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3714      	adds	r7, #20
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a78:	bf00      	nop
 8006a7a:	370c      	adds	r7, #12
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a8c:	bf00      	nop
 8006a8e:	370c      	adds	r7, #12
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr

08006a98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006aa0:	bf00      	nop
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b085      	sub	sp, #20
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4a40      	ldr	r2, [pc, #256]	; (8006bc0 <TIM_Base_SetConfig+0x114>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d013      	beq.n	8006aec <TIM_Base_SetConfig+0x40>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aca:	d00f      	beq.n	8006aec <TIM_Base_SetConfig+0x40>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a3d      	ldr	r2, [pc, #244]	; (8006bc4 <TIM_Base_SetConfig+0x118>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d00b      	beq.n	8006aec <TIM_Base_SetConfig+0x40>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4a3c      	ldr	r2, [pc, #240]	; (8006bc8 <TIM_Base_SetConfig+0x11c>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d007      	beq.n	8006aec <TIM_Base_SetConfig+0x40>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a3b      	ldr	r2, [pc, #236]	; (8006bcc <TIM_Base_SetConfig+0x120>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d003      	beq.n	8006aec <TIM_Base_SetConfig+0x40>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a3a      	ldr	r2, [pc, #232]	; (8006bd0 <TIM_Base_SetConfig+0x124>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d108      	bne.n	8006afe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006af2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	68fa      	ldr	r2, [r7, #12]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4a2f      	ldr	r2, [pc, #188]	; (8006bc0 <TIM_Base_SetConfig+0x114>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d01f      	beq.n	8006b46 <TIM_Base_SetConfig+0x9a>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b0c:	d01b      	beq.n	8006b46 <TIM_Base_SetConfig+0x9a>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4a2c      	ldr	r2, [pc, #176]	; (8006bc4 <TIM_Base_SetConfig+0x118>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d017      	beq.n	8006b46 <TIM_Base_SetConfig+0x9a>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	4a2b      	ldr	r2, [pc, #172]	; (8006bc8 <TIM_Base_SetConfig+0x11c>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d013      	beq.n	8006b46 <TIM_Base_SetConfig+0x9a>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4a2a      	ldr	r2, [pc, #168]	; (8006bcc <TIM_Base_SetConfig+0x120>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d00f      	beq.n	8006b46 <TIM_Base_SetConfig+0x9a>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4a29      	ldr	r2, [pc, #164]	; (8006bd0 <TIM_Base_SetConfig+0x124>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d00b      	beq.n	8006b46 <TIM_Base_SetConfig+0x9a>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	4a28      	ldr	r2, [pc, #160]	; (8006bd4 <TIM_Base_SetConfig+0x128>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d007      	beq.n	8006b46 <TIM_Base_SetConfig+0x9a>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a27      	ldr	r2, [pc, #156]	; (8006bd8 <TIM_Base_SetConfig+0x12c>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d003      	beq.n	8006b46 <TIM_Base_SetConfig+0x9a>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a26      	ldr	r2, [pc, #152]	; (8006bdc <TIM_Base_SetConfig+0x130>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d108      	bne.n	8006b58 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	4313      	orrs	r3, r2
 8006b56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	695b      	ldr	r3, [r3, #20]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	689a      	ldr	r2, [r3, #8]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4a10      	ldr	r2, [pc, #64]	; (8006bc0 <TIM_Base_SetConfig+0x114>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d00f      	beq.n	8006ba4 <TIM_Base_SetConfig+0xf8>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4a12      	ldr	r2, [pc, #72]	; (8006bd0 <TIM_Base_SetConfig+0x124>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d00b      	beq.n	8006ba4 <TIM_Base_SetConfig+0xf8>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	4a11      	ldr	r2, [pc, #68]	; (8006bd4 <TIM_Base_SetConfig+0x128>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d007      	beq.n	8006ba4 <TIM_Base_SetConfig+0xf8>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a10      	ldr	r2, [pc, #64]	; (8006bd8 <TIM_Base_SetConfig+0x12c>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d003      	beq.n	8006ba4 <TIM_Base_SetConfig+0xf8>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4a0f      	ldr	r2, [pc, #60]	; (8006bdc <TIM_Base_SetConfig+0x130>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d103      	bne.n	8006bac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	691a      	ldr	r2, [r3, #16]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	615a      	str	r2, [r3, #20]
}
 8006bb2:	bf00      	nop
 8006bb4:	3714      	adds	r7, #20
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr
 8006bbe:	bf00      	nop
 8006bc0:	40010000 	.word	0x40010000
 8006bc4:	40000400 	.word	0x40000400
 8006bc8:	40000800 	.word	0x40000800
 8006bcc:	40000c00 	.word	0x40000c00
 8006bd0:	40010400 	.word	0x40010400
 8006bd4:	40014000 	.word	0x40014000
 8006bd8:	40014400 	.word	0x40014400
 8006bdc:	40014800 	.word	0x40014800

08006be0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b087      	sub	sp, #28
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	607a      	str	r2, [r7, #4]
 8006bec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	6a1b      	ldr	r3, [r3, #32]
 8006bf2:	f023 0201 	bic.w	r2, r3, #1
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	699b      	ldr	r3, [r3, #24]
 8006bfe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6a1b      	ldr	r3, [r3, #32]
 8006c04:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	4a28      	ldr	r2, [pc, #160]	; (8006cac <TIM_TI1_SetConfig+0xcc>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d01b      	beq.n	8006c46 <TIM_TI1_SetConfig+0x66>
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c14:	d017      	beq.n	8006c46 <TIM_TI1_SetConfig+0x66>
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	4a25      	ldr	r2, [pc, #148]	; (8006cb0 <TIM_TI1_SetConfig+0xd0>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d013      	beq.n	8006c46 <TIM_TI1_SetConfig+0x66>
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	4a24      	ldr	r2, [pc, #144]	; (8006cb4 <TIM_TI1_SetConfig+0xd4>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d00f      	beq.n	8006c46 <TIM_TI1_SetConfig+0x66>
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	4a23      	ldr	r2, [pc, #140]	; (8006cb8 <TIM_TI1_SetConfig+0xd8>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d00b      	beq.n	8006c46 <TIM_TI1_SetConfig+0x66>
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	4a22      	ldr	r2, [pc, #136]	; (8006cbc <TIM_TI1_SetConfig+0xdc>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d007      	beq.n	8006c46 <TIM_TI1_SetConfig+0x66>
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	4a21      	ldr	r2, [pc, #132]	; (8006cc0 <TIM_TI1_SetConfig+0xe0>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d003      	beq.n	8006c46 <TIM_TI1_SetConfig+0x66>
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	4a20      	ldr	r2, [pc, #128]	; (8006cc4 <TIM_TI1_SetConfig+0xe4>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d101      	bne.n	8006c4a <TIM_TI1_SetConfig+0x6a>
 8006c46:	2301      	movs	r3, #1
 8006c48:	e000      	b.n	8006c4c <TIM_TI1_SetConfig+0x6c>
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d008      	beq.n	8006c62 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	f023 0303 	bic.w	r3, r3, #3
 8006c56:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006c58:	697a      	ldr	r2, [r7, #20]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	617b      	str	r3, [r7, #20]
 8006c60:	e003      	b.n	8006c6a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	f043 0301 	orr.w	r3, r3, #1
 8006c68:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	011b      	lsls	r3, r3, #4
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	697a      	ldr	r2, [r7, #20]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	f023 030a 	bic.w	r3, r3, #10
 8006c84:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	f003 030a 	and.w	r3, r3, #10
 8006c8c:	693a      	ldr	r2, [r7, #16]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	697a      	ldr	r2, [r7, #20]
 8006c96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	693a      	ldr	r2, [r7, #16]
 8006c9c:	621a      	str	r2, [r3, #32]
}
 8006c9e:	bf00      	nop
 8006ca0:	371c      	adds	r7, #28
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	40010000 	.word	0x40010000
 8006cb0:	40000400 	.word	0x40000400
 8006cb4:	40000800 	.word	0x40000800
 8006cb8:	40000c00 	.word	0x40000c00
 8006cbc:	40010400 	.word	0x40010400
 8006cc0:	40001800 	.word	0x40001800
 8006cc4:	40014000 	.word	0x40014000

08006cc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b087      	sub	sp, #28
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6a1b      	ldr	r3, [r3, #32]
 8006cd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6a1b      	ldr	r3, [r3, #32]
 8006cde:	f023 0201 	bic.w	r2, r3, #1
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	699b      	ldr	r3, [r3, #24]
 8006cea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006cf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	011b      	lsls	r3, r3, #4
 8006cf8:	693a      	ldr	r2, [r7, #16]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	f023 030a 	bic.w	r3, r3, #10
 8006d04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d06:	697a      	ldr	r2, [r7, #20]
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	693a      	ldr	r2, [r7, #16]
 8006d12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	697a      	ldr	r2, [r7, #20]
 8006d18:	621a      	str	r2, [r3, #32]
}
 8006d1a:	bf00      	nop
 8006d1c:	371c      	adds	r7, #28
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr

08006d26 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d26:	b480      	push	{r7}
 8006d28:	b087      	sub	sp, #28
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	60f8      	str	r0, [r7, #12]
 8006d2e:	60b9      	str	r1, [r7, #8]
 8006d30:	607a      	str	r2, [r7, #4]
 8006d32:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6a1b      	ldr	r3, [r3, #32]
 8006d38:	f023 0210 	bic.w	r2, r3, #16
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	699b      	ldr	r3, [r3, #24]
 8006d44:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6a1b      	ldr	r3, [r3, #32]
 8006d4a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d52:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	021b      	lsls	r3, r3, #8
 8006d58:	697a      	ldr	r2, [r7, #20]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	031b      	lsls	r3, r3, #12
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	697a      	ldr	r2, [r7, #20]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d78:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	011b      	lsls	r3, r3, #4
 8006d7e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006d82:	693a      	ldr	r2, [r7, #16]
 8006d84:	4313      	orrs	r3, r2
 8006d86:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	697a      	ldr	r2, [r7, #20]
 8006d8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	693a      	ldr	r2, [r7, #16]
 8006d92:	621a      	str	r2, [r3, #32]
}
 8006d94:	bf00      	nop
 8006d96:	371c      	adds	r7, #28
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b087      	sub	sp, #28
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	60f8      	str	r0, [r7, #12]
 8006da8:	60b9      	str	r1, [r7, #8]
 8006daa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6a1b      	ldr	r3, [r3, #32]
 8006db0:	f023 0210 	bic.w	r2, r3, #16
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	699b      	ldr	r3, [r3, #24]
 8006dbc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	6a1b      	ldr	r3, [r3, #32]
 8006dc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006dca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	031b      	lsls	r3, r3, #12
 8006dd0:	697a      	ldr	r2, [r7, #20]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ddc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	011b      	lsls	r3, r3, #4
 8006de2:	693a      	ldr	r2, [r7, #16]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	697a      	ldr	r2, [r7, #20]
 8006dec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	693a      	ldr	r2, [r7, #16]
 8006df2:	621a      	str	r2, [r3, #32]
}
 8006df4:	bf00      	nop
 8006df6:	371c      	adds	r7, #28
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b087      	sub	sp, #28
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	607a      	str	r2, [r7, #4]
 8006e0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	6a1b      	ldr	r3, [r3, #32]
 8006e12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	69db      	ldr	r3, [r3, #28]
 8006e1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6a1b      	ldr	r3, [r3, #32]
 8006e24:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	f023 0303 	bic.w	r3, r3, #3
 8006e2c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006e2e:	697a      	ldr	r2, [r7, #20]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e3c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	011b      	lsls	r3, r3, #4
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	697a      	ldr	r2, [r7, #20]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006e50:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	021b      	lsls	r3, r3, #8
 8006e56:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006e5a:	693a      	ldr	r2, [r7, #16]
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	697a      	ldr	r2, [r7, #20]
 8006e64:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	693a      	ldr	r2, [r7, #16]
 8006e6a:	621a      	str	r2, [r3, #32]
}
 8006e6c:	bf00      	nop
 8006e6e:	371c      	adds	r7, #28
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b087      	sub	sp, #28
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	607a      	str	r2, [r7, #4]
 8006e84:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6a1b      	ldr	r3, [r3, #32]
 8006e8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	69db      	ldr	r3, [r3, #28]
 8006e96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6a1b      	ldr	r3, [r3, #32]
 8006e9c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ea4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	021b      	lsls	r3, r3, #8
 8006eaa:	697a      	ldr	r2, [r7, #20]
 8006eac:	4313      	orrs	r3, r2
 8006eae:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006eb6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	031b      	lsls	r3, r3, #12
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	697a      	ldr	r2, [r7, #20]
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006eca:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	031b      	lsls	r3, r3, #12
 8006ed0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006ed4:	693a      	ldr	r2, [r7, #16]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	697a      	ldr	r2, [r7, #20]
 8006ede:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	693a      	ldr	r2, [r7, #16]
 8006ee4:	621a      	str	r2, [r3, #32]
}
 8006ee6:	bf00      	nop
 8006ee8:	371c      	adds	r7, #28
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr
	...

08006ef4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b085      	sub	sp, #20
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f04:	68fa      	ldr	r2, [r7, #12]
 8006f06:	4b09      	ldr	r3, [pc, #36]	; (8006f2c <TIM_ITRx_SetConfig+0x38>)
 8006f08:	4013      	ands	r3, r2
 8006f0a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f0c:	683a      	ldr	r2, [r7, #0]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	4313      	orrs	r3, r2
 8006f12:	f043 0307 	orr.w	r3, r3, #7
 8006f16:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	68fa      	ldr	r2, [r7, #12]
 8006f1c:	609a      	str	r2, [r3, #8]
}
 8006f1e:	bf00      	nop
 8006f20:	3714      	adds	r7, #20
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr
 8006f2a:	bf00      	nop
 8006f2c:	ffcfff8f 	.word	0xffcfff8f

08006f30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b087      	sub	sp, #28
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	607a      	str	r2, [r7, #4]
 8006f3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	021a      	lsls	r2, r3, #8
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	431a      	orrs	r2, r3
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	697a      	ldr	r2, [r7, #20]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	697a      	ldr	r2, [r7, #20]
 8006f62:	609a      	str	r2, [r3, #8]
}
 8006f64:	bf00      	nop
 8006f66:	371c      	adds	r7, #28
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b087      	sub	sp, #28
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	60f8      	str	r0, [r7, #12]
 8006f78:	60b9      	str	r1, [r7, #8]
 8006f7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	f003 031f 	and.w	r3, r3, #31
 8006f82:	2201      	movs	r2, #1
 8006f84:	fa02 f303 	lsl.w	r3, r2, r3
 8006f88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	6a1a      	ldr	r2, [r3, #32]
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	43db      	mvns	r3, r3
 8006f92:	401a      	ands	r2, r3
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6a1a      	ldr	r2, [r3, #32]
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	f003 031f 	and.w	r3, r3, #31
 8006fa2:	6879      	ldr	r1, [r7, #4]
 8006fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8006fa8:	431a      	orrs	r2, r3
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	621a      	str	r2, [r3, #32]
}
 8006fae:	bf00      	nop
 8006fb0:	371c      	adds	r7, #28
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr
	...

08006fbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b085      	sub	sp, #20
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d101      	bne.n	8006fd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006fd0:	2302      	movs	r3, #2
 8006fd2:	e06d      	b.n	80070b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2202      	movs	r2, #2
 8006fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a30      	ldr	r2, [pc, #192]	; (80070bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d004      	beq.n	8007008 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a2f      	ldr	r2, [pc, #188]	; (80070c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d108      	bne.n	800701a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800700e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	68fa      	ldr	r2, [r7, #12]
 8007016:	4313      	orrs	r3, r2
 8007018:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007020:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	68fa      	ldr	r2, [r7, #12]
 8007028:	4313      	orrs	r3, r2
 800702a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	68fa      	ldr	r2, [r7, #12]
 8007032:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a20      	ldr	r2, [pc, #128]	; (80070bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d022      	beq.n	8007084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007046:	d01d      	beq.n	8007084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a1d      	ldr	r2, [pc, #116]	; (80070c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d018      	beq.n	8007084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a1c      	ldr	r2, [pc, #112]	; (80070c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d013      	beq.n	8007084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a1a      	ldr	r2, [pc, #104]	; (80070cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d00e      	beq.n	8007084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a15      	ldr	r2, [pc, #84]	; (80070c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d009      	beq.n	8007084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a16      	ldr	r2, [pc, #88]	; (80070d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d004      	beq.n	8007084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a15      	ldr	r2, [pc, #84]	; (80070d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d10c      	bne.n	800709e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800708a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	68ba      	ldr	r2, [r7, #8]
 8007092:	4313      	orrs	r3, r2
 8007094:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	68ba      	ldr	r2, [r7, #8]
 800709c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2201      	movs	r2, #1
 80070a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070ae:	2300      	movs	r3, #0
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3714      	adds	r7, #20
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr
 80070bc:	40010000 	.word	0x40010000
 80070c0:	40010400 	.word	0x40010400
 80070c4:	40000400 	.word	0x40000400
 80070c8:	40000800 	.word	0x40000800
 80070cc:	40000c00 	.word	0x40000c00
 80070d0:	40001800 	.word	0x40001800
 80070d4:	40014000 	.word	0x40014000

080070d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80070e0:	bf00      	nop
 80070e2:	370c      	adds	r7, #12
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr

080070ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b083      	sub	sp, #12
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80070f4:	bf00      	nop
 80070f6:	370c      	adds	r7, #12
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr

08007100 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007108:	bf00      	nop
 800710a:	370c      	adds	r7, #12
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d101      	bne.n	8007126 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	e042      	b.n	80071ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800712c:	2b00      	cmp	r3, #0
 800712e:	d106      	bne.n	800713e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f7fa f867 	bl	800120c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2224      	movs	r2, #36	; 0x24
 8007142:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f022 0201 	bic.w	r2, r2, #1
 8007154:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 fc94 	bl	8007a84 <UART_SetConfig>
 800715c:	4603      	mov	r3, r0
 800715e:	2b01      	cmp	r3, #1
 8007160:	d101      	bne.n	8007166 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	e022      	b.n	80071ac <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800716a:	2b00      	cmp	r3, #0
 800716c:	d002      	beq.n	8007174 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f001 f9f0 	bl	8008554 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	685a      	ldr	r2, [r3, #4]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007182:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	689a      	ldr	r2, [r3, #8]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007192:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f042 0201 	orr.w	r2, r2, #1
 80071a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f001 fa77 	bl	8008698 <UART_CheckIdleState>
 80071aa:	4603      	mov	r3, r0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3708      	adds	r7, #8
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b08a      	sub	sp, #40	; 0x28
 80071b8:	af02      	add	r7, sp, #8
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	603b      	str	r3, [r7, #0]
 80071c0:	4613      	mov	r3, r2
 80071c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071ca:	2b20      	cmp	r3, #32
 80071cc:	d17b      	bne.n	80072c6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d002      	beq.n	80071da <HAL_UART_Transmit+0x26>
 80071d4:	88fb      	ldrh	r3, [r7, #6]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d101      	bne.n	80071de <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	e074      	b.n	80072c8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2200      	movs	r2, #0
 80071e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2221      	movs	r2, #33	; 0x21
 80071ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80071ee:	f7fa fa5b 	bl	80016a8 <HAL_GetTick>
 80071f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	88fa      	ldrh	r2, [r7, #6]
 80071f8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	88fa      	ldrh	r2, [r7, #6]
 8007200:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800720c:	d108      	bne.n	8007220 <HAL_UART_Transmit+0x6c>
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	691b      	ldr	r3, [r3, #16]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d104      	bne.n	8007220 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007216:	2300      	movs	r3, #0
 8007218:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	61bb      	str	r3, [r7, #24]
 800721e:	e003      	b.n	8007228 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007224:	2300      	movs	r3, #0
 8007226:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007228:	e030      	b.n	800728c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	9300      	str	r3, [sp, #0]
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	2200      	movs	r2, #0
 8007232:	2180      	movs	r1, #128	; 0x80
 8007234:	68f8      	ldr	r0, [r7, #12]
 8007236:	f001 fad9 	bl	80087ec <UART_WaitOnFlagUntilTimeout>
 800723a:	4603      	mov	r3, r0
 800723c:	2b00      	cmp	r3, #0
 800723e:	d005      	beq.n	800724c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2220      	movs	r2, #32
 8007244:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8007248:	2303      	movs	r3, #3
 800724a:	e03d      	b.n	80072c8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d10b      	bne.n	800726a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007252:	69bb      	ldr	r3, [r7, #24]
 8007254:	881b      	ldrh	r3, [r3, #0]
 8007256:	461a      	mov	r2, r3
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007260:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007262:	69bb      	ldr	r3, [r7, #24]
 8007264:	3302      	adds	r3, #2
 8007266:	61bb      	str	r3, [r7, #24]
 8007268:	e007      	b.n	800727a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	781a      	ldrb	r2, [r3, #0]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	3301      	adds	r3, #1
 8007278:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007280:	b29b      	uxth	r3, r3
 8007282:	3b01      	subs	r3, #1
 8007284:	b29a      	uxth	r2, r3
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007292:	b29b      	uxth	r3, r3
 8007294:	2b00      	cmp	r3, #0
 8007296:	d1c8      	bne.n	800722a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	9300      	str	r3, [sp, #0]
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	2200      	movs	r2, #0
 80072a0:	2140      	movs	r1, #64	; 0x40
 80072a2:	68f8      	ldr	r0, [r7, #12]
 80072a4:	f001 faa2 	bl	80087ec <UART_WaitOnFlagUntilTimeout>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d005      	beq.n	80072ba <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2220      	movs	r2, #32
 80072b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80072b6:	2303      	movs	r3, #3
 80072b8:	e006      	b.n	80072c8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2220      	movs	r2, #32
 80072be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80072c2:	2300      	movs	r3, #0
 80072c4:	e000      	b.n	80072c8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80072c6:	2302      	movs	r3, #2
  }
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3720      	adds	r7, #32
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b0ba      	sub	sp, #232	; 0xe8
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	69db      	ldr	r3, [r3, #28]
 80072de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80072f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80072fa:	f640 030f 	movw	r3, #2063	; 0x80f
 80072fe:	4013      	ands	r3, r2
 8007300:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007304:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007308:	2b00      	cmp	r3, #0
 800730a:	d11b      	bne.n	8007344 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800730c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007310:	f003 0320 	and.w	r3, r3, #32
 8007314:	2b00      	cmp	r3, #0
 8007316:	d015      	beq.n	8007344 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800731c:	f003 0320 	and.w	r3, r3, #32
 8007320:	2b00      	cmp	r3, #0
 8007322:	d105      	bne.n	8007330 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007324:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800732c:	2b00      	cmp	r3, #0
 800732e:	d009      	beq.n	8007344 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007334:	2b00      	cmp	r3, #0
 8007336:	f000 8377 	beq.w	8007a28 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	4798      	blx	r3
      }
      return;
 8007342:	e371      	b.n	8007a28 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007344:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007348:	2b00      	cmp	r3, #0
 800734a:	f000 8123 	beq.w	8007594 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800734e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007352:	4b8d      	ldr	r3, [pc, #564]	; (8007588 <HAL_UART_IRQHandler+0x2b8>)
 8007354:	4013      	ands	r3, r2
 8007356:	2b00      	cmp	r3, #0
 8007358:	d106      	bne.n	8007368 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800735a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800735e:	4b8b      	ldr	r3, [pc, #556]	; (800758c <HAL_UART_IRQHandler+0x2bc>)
 8007360:	4013      	ands	r3, r2
 8007362:	2b00      	cmp	r3, #0
 8007364:	f000 8116 	beq.w	8007594 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800736c:	f003 0301 	and.w	r3, r3, #1
 8007370:	2b00      	cmp	r3, #0
 8007372:	d011      	beq.n	8007398 <HAL_UART_IRQHandler+0xc8>
 8007374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800737c:	2b00      	cmp	r3, #0
 800737e:	d00b      	beq.n	8007398 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2201      	movs	r2, #1
 8007386:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800738e:	f043 0201 	orr.w	r2, r3, #1
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800739c:	f003 0302 	and.w	r3, r3, #2
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d011      	beq.n	80073c8 <HAL_UART_IRQHandler+0xf8>
 80073a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073a8:	f003 0301 	and.w	r3, r3, #1
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d00b      	beq.n	80073c8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	2202      	movs	r2, #2
 80073b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073be:	f043 0204 	orr.w	r2, r3, #4
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80073c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073cc:	f003 0304 	and.w	r3, r3, #4
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d011      	beq.n	80073f8 <HAL_UART_IRQHandler+0x128>
 80073d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073d8:	f003 0301 	and.w	r3, r3, #1
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d00b      	beq.n	80073f8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	2204      	movs	r2, #4
 80073e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073ee:	f043 0202 	orr.w	r2, r3, #2
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80073f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073fc:	f003 0308 	and.w	r3, r3, #8
 8007400:	2b00      	cmp	r3, #0
 8007402:	d017      	beq.n	8007434 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007408:	f003 0320 	and.w	r3, r3, #32
 800740c:	2b00      	cmp	r3, #0
 800740e:	d105      	bne.n	800741c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007410:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007414:	4b5c      	ldr	r3, [pc, #368]	; (8007588 <HAL_UART_IRQHandler+0x2b8>)
 8007416:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007418:	2b00      	cmp	r3, #0
 800741a:	d00b      	beq.n	8007434 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2208      	movs	r2, #8
 8007422:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800742a:	f043 0208 	orr.w	r2, r3, #8
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007438:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800743c:	2b00      	cmp	r3, #0
 800743e:	d012      	beq.n	8007466 <HAL_UART_IRQHandler+0x196>
 8007440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007444:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007448:	2b00      	cmp	r3, #0
 800744a:	d00c      	beq.n	8007466 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007454:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800745c:	f043 0220 	orr.w	r2, r3, #32
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800746c:	2b00      	cmp	r3, #0
 800746e:	f000 82dd 	beq.w	8007a2c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007476:	f003 0320 	and.w	r3, r3, #32
 800747a:	2b00      	cmp	r3, #0
 800747c:	d013      	beq.n	80074a6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800747e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007482:	f003 0320 	and.w	r3, r3, #32
 8007486:	2b00      	cmp	r3, #0
 8007488:	d105      	bne.n	8007496 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800748a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800748e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007492:	2b00      	cmp	r3, #0
 8007494:	d007      	beq.n	80074a6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800749a:	2b00      	cmp	r3, #0
 800749c:	d003      	beq.n	80074a6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ba:	2b40      	cmp	r3, #64	; 0x40
 80074bc:	d005      	beq.n	80074ca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80074be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80074c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d054      	beq.n	8007574 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f001 f9f6 	bl	80088bc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074da:	2b40      	cmp	r3, #64	; 0x40
 80074dc:	d146      	bne.n	800756c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	3308      	adds	r3, #8
 80074e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80074ec:	e853 3f00 	ldrex	r3, [r3]
 80074f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80074f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	3308      	adds	r3, #8
 8007506:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800750a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800750e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007512:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007516:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800751a:	e841 2300 	strex	r3, r2, [r1]
 800751e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007522:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007526:	2b00      	cmp	r3, #0
 8007528:	d1d9      	bne.n	80074de <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007530:	2b00      	cmp	r3, #0
 8007532:	d017      	beq.n	8007564 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800753a:	4a15      	ldr	r2, [pc, #84]	; (8007590 <HAL_UART_IRQHandler+0x2c0>)
 800753c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007544:	4618      	mov	r0, r3
 8007546:	f7fa fcfd 	bl	8001f44 <HAL_DMA_Abort_IT>
 800754a:	4603      	mov	r3, r0
 800754c:	2b00      	cmp	r3, #0
 800754e:	d019      	beq.n	8007584 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800755e:	4610      	mov	r0, r2
 8007560:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007562:	e00f      	b.n	8007584 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 fa77 	bl	8007a58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800756a:	e00b      	b.n	8007584 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 fa73 	bl	8007a58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007572:	e007      	b.n	8007584 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 fa6f 	bl	8007a58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8007582:	e253      	b.n	8007a2c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007584:	bf00      	nop
    return;
 8007586:	e251      	b.n	8007a2c <HAL_UART_IRQHandler+0x75c>
 8007588:	10000001 	.word	0x10000001
 800758c:	04000120 	.word	0x04000120
 8007590:	08008989 	.word	0x08008989

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007598:	2b01      	cmp	r3, #1
 800759a:	f040 81e7 	bne.w	800796c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800759e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075a2:	f003 0310 	and.w	r3, r3, #16
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	f000 81e0 	beq.w	800796c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80075ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075b0:	f003 0310 	and.w	r3, r3, #16
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	f000 81d9 	beq.w	800796c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	2210      	movs	r2, #16
 80075c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075cc:	2b40      	cmp	r3, #64	; 0x40
 80075ce:	f040 8151 	bne.w	8007874 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a96      	ldr	r2, [pc, #600]	; (8007834 <HAL_UART_IRQHandler+0x564>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d068      	beq.n	80076b2 <HAL_UART_IRQHandler+0x3e2>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a93      	ldr	r2, [pc, #588]	; (8007838 <HAL_UART_IRQHandler+0x568>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d061      	beq.n	80076b2 <HAL_UART_IRQHandler+0x3e2>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a91      	ldr	r2, [pc, #580]	; (800783c <HAL_UART_IRQHandler+0x56c>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d05a      	beq.n	80076b2 <HAL_UART_IRQHandler+0x3e2>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a8e      	ldr	r2, [pc, #568]	; (8007840 <HAL_UART_IRQHandler+0x570>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d053      	beq.n	80076b2 <HAL_UART_IRQHandler+0x3e2>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a8c      	ldr	r2, [pc, #560]	; (8007844 <HAL_UART_IRQHandler+0x574>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d04c      	beq.n	80076b2 <HAL_UART_IRQHandler+0x3e2>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a89      	ldr	r2, [pc, #548]	; (8007848 <HAL_UART_IRQHandler+0x578>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d045      	beq.n	80076b2 <HAL_UART_IRQHandler+0x3e2>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a87      	ldr	r2, [pc, #540]	; (800784c <HAL_UART_IRQHandler+0x57c>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d03e      	beq.n	80076b2 <HAL_UART_IRQHandler+0x3e2>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a84      	ldr	r2, [pc, #528]	; (8007850 <HAL_UART_IRQHandler+0x580>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d037      	beq.n	80076b2 <HAL_UART_IRQHandler+0x3e2>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a82      	ldr	r2, [pc, #520]	; (8007854 <HAL_UART_IRQHandler+0x584>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d030      	beq.n	80076b2 <HAL_UART_IRQHandler+0x3e2>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a7f      	ldr	r2, [pc, #508]	; (8007858 <HAL_UART_IRQHandler+0x588>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d029      	beq.n	80076b2 <HAL_UART_IRQHandler+0x3e2>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a7d      	ldr	r2, [pc, #500]	; (800785c <HAL_UART_IRQHandler+0x58c>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d022      	beq.n	80076b2 <HAL_UART_IRQHandler+0x3e2>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a7a      	ldr	r2, [pc, #488]	; (8007860 <HAL_UART_IRQHandler+0x590>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d01b      	beq.n	80076b2 <HAL_UART_IRQHandler+0x3e2>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a78      	ldr	r2, [pc, #480]	; (8007864 <HAL_UART_IRQHandler+0x594>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d014      	beq.n	80076b2 <HAL_UART_IRQHandler+0x3e2>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a75      	ldr	r2, [pc, #468]	; (8007868 <HAL_UART_IRQHandler+0x598>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d00d      	beq.n	80076b2 <HAL_UART_IRQHandler+0x3e2>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a73      	ldr	r2, [pc, #460]	; (800786c <HAL_UART_IRQHandler+0x59c>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d006      	beq.n	80076b2 <HAL_UART_IRQHandler+0x3e2>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a70      	ldr	r2, [pc, #448]	; (8007870 <HAL_UART_IRQHandler+0x5a0>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d106      	bne.n	80076c0 <HAL_UART_IRQHandler+0x3f0>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	b29b      	uxth	r3, r3
 80076be:	e005      	b.n	80076cc <HAL_UART_IRQHandler+0x3fc>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80076d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	f000 81ab 	beq.w	8007a30 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80076e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80076e4:	429a      	cmp	r2, r3
 80076e6:	f080 81a3 	bcs.w	8007a30 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80076f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076fa:	69db      	ldr	r3, [r3, #28]
 80076fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007700:	f000 8087 	beq.w	8007812 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800770c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007710:	e853 3f00 	ldrex	r3, [r3]
 8007714:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007718:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800771c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007720:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	461a      	mov	r2, r3
 800772a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800772e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007732:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007736:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800773a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800773e:	e841 2300 	strex	r3, r2, [r1]
 8007742:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007746:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800774a:	2b00      	cmp	r3, #0
 800774c:	d1da      	bne.n	8007704 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	3308      	adds	r3, #8
 8007754:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007756:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007758:	e853 3f00 	ldrex	r3, [r3]
 800775c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800775e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007760:	f023 0301 	bic.w	r3, r3, #1
 8007764:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	3308      	adds	r3, #8
 800776e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007772:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007776:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007778:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800777a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800777e:	e841 2300 	strex	r3, r2, [r1]
 8007782:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007784:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007786:	2b00      	cmp	r3, #0
 8007788:	d1e1      	bne.n	800774e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	3308      	adds	r3, #8
 8007790:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007792:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007794:	e853 3f00 	ldrex	r3, [r3]
 8007798:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800779a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800779c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	3308      	adds	r3, #8
 80077aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80077ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80077b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80077b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80077b6:	e841 2300 	strex	r3, r2, [r1]
 80077ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80077bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d1e3      	bne.n	800778a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2220      	movs	r2, #32
 80077c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077d8:	e853 3f00 	ldrex	r3, [r3]
 80077dc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80077de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077e0:	f023 0310 	bic.w	r3, r3, #16
 80077e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	461a      	mov	r2, r3
 80077ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80077f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80077f4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80077f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80077fa:	e841 2300 	strex	r3, r2, [r1]
 80077fe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007800:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007802:	2b00      	cmp	r3, #0
 8007804:	d1e4      	bne.n	80077d0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800780c:	4618      	mov	r0, r3
 800780e:	f7fa f87b 	bl	8001908 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2202      	movs	r2, #2
 8007816:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007824:	b29b      	uxth	r3, r3
 8007826:	1ad3      	subs	r3, r2, r3
 8007828:	b29b      	uxth	r3, r3
 800782a:	4619      	mov	r1, r3
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 f91d 	bl	8007a6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007832:	e0fd      	b.n	8007a30 <HAL_UART_IRQHandler+0x760>
 8007834:	40020010 	.word	0x40020010
 8007838:	40020028 	.word	0x40020028
 800783c:	40020040 	.word	0x40020040
 8007840:	40020058 	.word	0x40020058
 8007844:	40020070 	.word	0x40020070
 8007848:	40020088 	.word	0x40020088
 800784c:	400200a0 	.word	0x400200a0
 8007850:	400200b8 	.word	0x400200b8
 8007854:	40020410 	.word	0x40020410
 8007858:	40020428 	.word	0x40020428
 800785c:	40020440 	.word	0x40020440
 8007860:	40020458 	.word	0x40020458
 8007864:	40020470 	.word	0x40020470
 8007868:	40020488 	.word	0x40020488
 800786c:	400204a0 	.word	0x400204a0
 8007870:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007880:	b29b      	uxth	r3, r3
 8007882:	1ad3      	subs	r3, r2, r3
 8007884:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800788e:	b29b      	uxth	r3, r3
 8007890:	2b00      	cmp	r3, #0
 8007892:	f000 80cf 	beq.w	8007a34 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8007896:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800789a:	2b00      	cmp	r3, #0
 800789c:	f000 80ca 	beq.w	8007a34 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a8:	e853 3f00 	ldrex	r3, [r3]
 80078ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80078ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80078b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	461a      	mov	r2, r3
 80078be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80078c2:	647b      	str	r3, [r7, #68]	; 0x44
 80078c4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80078c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078ca:	e841 2300 	strex	r3, r2, [r1]
 80078ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80078d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d1e4      	bne.n	80078a0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	3308      	adds	r3, #8
 80078dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e0:	e853 3f00 	ldrex	r3, [r3]
 80078e4:	623b      	str	r3, [r7, #32]
   return(result);
 80078e6:	6a3a      	ldr	r2, [r7, #32]
 80078e8:	4b55      	ldr	r3, [pc, #340]	; (8007a40 <HAL_UART_IRQHandler+0x770>)
 80078ea:	4013      	ands	r3, r2
 80078ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	3308      	adds	r3, #8
 80078f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80078fa:	633a      	str	r2, [r7, #48]	; 0x30
 80078fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007900:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007902:	e841 2300 	strex	r3, r2, [r1]
 8007906:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790a:	2b00      	cmp	r3, #0
 800790c:	d1e3      	bne.n	80078d6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2220      	movs	r2, #32
 8007912:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	e853 3f00 	ldrex	r3, [r3]
 800792e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f023 0310 	bic.w	r3, r3, #16
 8007936:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	461a      	mov	r2, r3
 8007940:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007944:	61fb      	str	r3, [r7, #28]
 8007946:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007948:	69b9      	ldr	r1, [r7, #24]
 800794a:	69fa      	ldr	r2, [r7, #28]
 800794c:	e841 2300 	strex	r3, r2, [r1]
 8007950:	617b      	str	r3, [r7, #20]
   return(result);
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d1e4      	bne.n	8007922 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2202      	movs	r2, #2
 800795c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800795e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007962:	4619      	mov	r1, r3
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 f881 	bl	8007a6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800796a:	e063      	b.n	8007a34 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800796c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007970:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007974:	2b00      	cmp	r3, #0
 8007976:	d00e      	beq.n	8007996 <HAL_UART_IRQHandler+0x6c6>
 8007978:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800797c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007980:	2b00      	cmp	r3, #0
 8007982:	d008      	beq.n	8007996 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800798c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f001 f83b 	bl	8008a0a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007994:	e051      	b.n	8007a3a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800799a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d014      	beq.n	80079cc <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80079a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d105      	bne.n	80079ba <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80079ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d008      	beq.n	80079cc <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d03a      	beq.n	8007a38 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	4798      	blx	r3
    }
    return;
 80079ca:	e035      	b.n	8007a38 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80079cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d009      	beq.n	80079ec <HAL_UART_IRQHandler+0x71c>
 80079d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d003      	beq.n	80079ec <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f000 ffe5 	bl	80089b4 <UART_EndTransmit_IT>
    return;
 80079ea:	e026      	b.n	8007a3a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80079ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d009      	beq.n	8007a0c <HAL_UART_IRQHandler+0x73c>
 80079f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d003      	beq.n	8007a0c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f001 f814 	bl	8008a32 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a0a:	e016      	b.n	8007a3a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007a0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d010      	beq.n	8007a3a <HAL_UART_IRQHandler+0x76a>
 8007a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	da0c      	bge.n	8007a3a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 fffc 	bl	8008a1e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a26:	e008      	b.n	8007a3a <HAL_UART_IRQHandler+0x76a>
      return;
 8007a28:	bf00      	nop
 8007a2a:	e006      	b.n	8007a3a <HAL_UART_IRQHandler+0x76a>
    return;
 8007a2c:	bf00      	nop
 8007a2e:	e004      	b.n	8007a3a <HAL_UART_IRQHandler+0x76a>
      return;
 8007a30:	bf00      	nop
 8007a32:	e002      	b.n	8007a3a <HAL_UART_IRQHandler+0x76a>
      return;
 8007a34:	bf00      	nop
 8007a36:	e000      	b.n	8007a3a <HAL_UART_IRQHandler+0x76a>
    return;
 8007a38:	bf00      	nop
  }
}
 8007a3a:	37e8      	adds	r7, #232	; 0xe8
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	effffffe 	.word	0xeffffffe

08007a44 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007a4c:	bf00      	nop
 8007a4e:	370c      	adds	r7, #12
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007a60:	bf00      	nop
 8007a62:	370c      	adds	r7, #12
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b083      	sub	sp, #12
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	460b      	mov	r3, r1
 8007a76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007a78:	bf00      	nop
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr

08007a84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a88:	b092      	sub	sp, #72	; 0x48
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	689a      	ldr	r2, [r3, #8]
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	691b      	ldr	r3, [r3, #16]
 8007a9c:	431a      	orrs	r2, r3
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	695b      	ldr	r3, [r3, #20]
 8007aa2:	431a      	orrs	r2, r3
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	69db      	ldr	r3, [r3, #28]
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	4bbe      	ldr	r3, [pc, #760]	; (8007dac <UART_SetConfig+0x328>)
 8007ab4:	4013      	ands	r3, r2
 8007ab6:	697a      	ldr	r2, [r7, #20]
 8007ab8:	6812      	ldr	r2, [r2, #0]
 8007aba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007abc:	430b      	orrs	r3, r1
 8007abe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	68da      	ldr	r2, [r3, #12]
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	430a      	orrs	r2, r1
 8007ad4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	699b      	ldr	r3, [r3, #24]
 8007ada:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4ab3      	ldr	r2, [pc, #716]	; (8007db0 <UART_SetConfig+0x32c>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d004      	beq.n	8007af0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	6a1b      	ldr	r3, [r3, #32]
 8007aea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007aec:	4313      	orrs	r3, r2
 8007aee:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	689a      	ldr	r2, [r3, #8]
 8007af6:	4baf      	ldr	r3, [pc, #700]	; (8007db4 <UART_SetConfig+0x330>)
 8007af8:	4013      	ands	r3, r2
 8007afa:	697a      	ldr	r2, [r7, #20]
 8007afc:	6812      	ldr	r2, [r2, #0]
 8007afe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007b00:	430b      	orrs	r3, r1
 8007b02:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b0a:	f023 010f 	bic.w	r1, r3, #15
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	430a      	orrs	r2, r1
 8007b18:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4aa6      	ldr	r2, [pc, #664]	; (8007db8 <UART_SetConfig+0x334>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d177      	bne.n	8007c14 <UART_SetConfig+0x190>
 8007b24:	4ba5      	ldr	r3, [pc, #660]	; (8007dbc <UART_SetConfig+0x338>)
 8007b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b2c:	2b28      	cmp	r3, #40	; 0x28
 8007b2e:	d86d      	bhi.n	8007c0c <UART_SetConfig+0x188>
 8007b30:	a201      	add	r2, pc, #4	; (adr r2, 8007b38 <UART_SetConfig+0xb4>)
 8007b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b36:	bf00      	nop
 8007b38:	08007bdd 	.word	0x08007bdd
 8007b3c:	08007c0d 	.word	0x08007c0d
 8007b40:	08007c0d 	.word	0x08007c0d
 8007b44:	08007c0d 	.word	0x08007c0d
 8007b48:	08007c0d 	.word	0x08007c0d
 8007b4c:	08007c0d 	.word	0x08007c0d
 8007b50:	08007c0d 	.word	0x08007c0d
 8007b54:	08007c0d 	.word	0x08007c0d
 8007b58:	08007be5 	.word	0x08007be5
 8007b5c:	08007c0d 	.word	0x08007c0d
 8007b60:	08007c0d 	.word	0x08007c0d
 8007b64:	08007c0d 	.word	0x08007c0d
 8007b68:	08007c0d 	.word	0x08007c0d
 8007b6c:	08007c0d 	.word	0x08007c0d
 8007b70:	08007c0d 	.word	0x08007c0d
 8007b74:	08007c0d 	.word	0x08007c0d
 8007b78:	08007bed 	.word	0x08007bed
 8007b7c:	08007c0d 	.word	0x08007c0d
 8007b80:	08007c0d 	.word	0x08007c0d
 8007b84:	08007c0d 	.word	0x08007c0d
 8007b88:	08007c0d 	.word	0x08007c0d
 8007b8c:	08007c0d 	.word	0x08007c0d
 8007b90:	08007c0d 	.word	0x08007c0d
 8007b94:	08007c0d 	.word	0x08007c0d
 8007b98:	08007bf5 	.word	0x08007bf5
 8007b9c:	08007c0d 	.word	0x08007c0d
 8007ba0:	08007c0d 	.word	0x08007c0d
 8007ba4:	08007c0d 	.word	0x08007c0d
 8007ba8:	08007c0d 	.word	0x08007c0d
 8007bac:	08007c0d 	.word	0x08007c0d
 8007bb0:	08007c0d 	.word	0x08007c0d
 8007bb4:	08007c0d 	.word	0x08007c0d
 8007bb8:	08007bfd 	.word	0x08007bfd
 8007bbc:	08007c0d 	.word	0x08007c0d
 8007bc0:	08007c0d 	.word	0x08007c0d
 8007bc4:	08007c0d 	.word	0x08007c0d
 8007bc8:	08007c0d 	.word	0x08007c0d
 8007bcc:	08007c0d 	.word	0x08007c0d
 8007bd0:	08007c0d 	.word	0x08007c0d
 8007bd4:	08007c0d 	.word	0x08007c0d
 8007bd8:	08007c05 	.word	0x08007c05
 8007bdc:	2301      	movs	r3, #1
 8007bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007be2:	e222      	b.n	800802a <UART_SetConfig+0x5a6>
 8007be4:	2304      	movs	r3, #4
 8007be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bea:	e21e      	b.n	800802a <UART_SetConfig+0x5a6>
 8007bec:	2308      	movs	r3, #8
 8007bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bf2:	e21a      	b.n	800802a <UART_SetConfig+0x5a6>
 8007bf4:	2310      	movs	r3, #16
 8007bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bfa:	e216      	b.n	800802a <UART_SetConfig+0x5a6>
 8007bfc:	2320      	movs	r3, #32
 8007bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c02:	e212      	b.n	800802a <UART_SetConfig+0x5a6>
 8007c04:	2340      	movs	r3, #64	; 0x40
 8007c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c0a:	e20e      	b.n	800802a <UART_SetConfig+0x5a6>
 8007c0c:	2380      	movs	r3, #128	; 0x80
 8007c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c12:	e20a      	b.n	800802a <UART_SetConfig+0x5a6>
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a69      	ldr	r2, [pc, #420]	; (8007dc0 <UART_SetConfig+0x33c>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d130      	bne.n	8007c80 <UART_SetConfig+0x1fc>
 8007c1e:	4b67      	ldr	r3, [pc, #412]	; (8007dbc <UART_SetConfig+0x338>)
 8007c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c22:	f003 0307 	and.w	r3, r3, #7
 8007c26:	2b05      	cmp	r3, #5
 8007c28:	d826      	bhi.n	8007c78 <UART_SetConfig+0x1f4>
 8007c2a:	a201      	add	r2, pc, #4	; (adr r2, 8007c30 <UART_SetConfig+0x1ac>)
 8007c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c30:	08007c49 	.word	0x08007c49
 8007c34:	08007c51 	.word	0x08007c51
 8007c38:	08007c59 	.word	0x08007c59
 8007c3c:	08007c61 	.word	0x08007c61
 8007c40:	08007c69 	.word	0x08007c69
 8007c44:	08007c71 	.word	0x08007c71
 8007c48:	2300      	movs	r3, #0
 8007c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c4e:	e1ec      	b.n	800802a <UART_SetConfig+0x5a6>
 8007c50:	2304      	movs	r3, #4
 8007c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c56:	e1e8      	b.n	800802a <UART_SetConfig+0x5a6>
 8007c58:	2308      	movs	r3, #8
 8007c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c5e:	e1e4      	b.n	800802a <UART_SetConfig+0x5a6>
 8007c60:	2310      	movs	r3, #16
 8007c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c66:	e1e0      	b.n	800802a <UART_SetConfig+0x5a6>
 8007c68:	2320      	movs	r3, #32
 8007c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c6e:	e1dc      	b.n	800802a <UART_SetConfig+0x5a6>
 8007c70:	2340      	movs	r3, #64	; 0x40
 8007c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c76:	e1d8      	b.n	800802a <UART_SetConfig+0x5a6>
 8007c78:	2380      	movs	r3, #128	; 0x80
 8007c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c7e:	e1d4      	b.n	800802a <UART_SetConfig+0x5a6>
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a4f      	ldr	r2, [pc, #316]	; (8007dc4 <UART_SetConfig+0x340>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d130      	bne.n	8007cec <UART_SetConfig+0x268>
 8007c8a:	4b4c      	ldr	r3, [pc, #304]	; (8007dbc <UART_SetConfig+0x338>)
 8007c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c8e:	f003 0307 	and.w	r3, r3, #7
 8007c92:	2b05      	cmp	r3, #5
 8007c94:	d826      	bhi.n	8007ce4 <UART_SetConfig+0x260>
 8007c96:	a201      	add	r2, pc, #4	; (adr r2, 8007c9c <UART_SetConfig+0x218>)
 8007c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c9c:	08007cb5 	.word	0x08007cb5
 8007ca0:	08007cbd 	.word	0x08007cbd
 8007ca4:	08007cc5 	.word	0x08007cc5
 8007ca8:	08007ccd 	.word	0x08007ccd
 8007cac:	08007cd5 	.word	0x08007cd5
 8007cb0:	08007cdd 	.word	0x08007cdd
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cba:	e1b6      	b.n	800802a <UART_SetConfig+0x5a6>
 8007cbc:	2304      	movs	r3, #4
 8007cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cc2:	e1b2      	b.n	800802a <UART_SetConfig+0x5a6>
 8007cc4:	2308      	movs	r3, #8
 8007cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cca:	e1ae      	b.n	800802a <UART_SetConfig+0x5a6>
 8007ccc:	2310      	movs	r3, #16
 8007cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cd2:	e1aa      	b.n	800802a <UART_SetConfig+0x5a6>
 8007cd4:	2320      	movs	r3, #32
 8007cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cda:	e1a6      	b.n	800802a <UART_SetConfig+0x5a6>
 8007cdc:	2340      	movs	r3, #64	; 0x40
 8007cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ce2:	e1a2      	b.n	800802a <UART_SetConfig+0x5a6>
 8007ce4:	2380      	movs	r3, #128	; 0x80
 8007ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cea:	e19e      	b.n	800802a <UART_SetConfig+0x5a6>
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a35      	ldr	r2, [pc, #212]	; (8007dc8 <UART_SetConfig+0x344>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d130      	bne.n	8007d58 <UART_SetConfig+0x2d4>
 8007cf6:	4b31      	ldr	r3, [pc, #196]	; (8007dbc <UART_SetConfig+0x338>)
 8007cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cfa:	f003 0307 	and.w	r3, r3, #7
 8007cfe:	2b05      	cmp	r3, #5
 8007d00:	d826      	bhi.n	8007d50 <UART_SetConfig+0x2cc>
 8007d02:	a201      	add	r2, pc, #4	; (adr r2, 8007d08 <UART_SetConfig+0x284>)
 8007d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d08:	08007d21 	.word	0x08007d21
 8007d0c:	08007d29 	.word	0x08007d29
 8007d10:	08007d31 	.word	0x08007d31
 8007d14:	08007d39 	.word	0x08007d39
 8007d18:	08007d41 	.word	0x08007d41
 8007d1c:	08007d49 	.word	0x08007d49
 8007d20:	2300      	movs	r3, #0
 8007d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d26:	e180      	b.n	800802a <UART_SetConfig+0x5a6>
 8007d28:	2304      	movs	r3, #4
 8007d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d2e:	e17c      	b.n	800802a <UART_SetConfig+0x5a6>
 8007d30:	2308      	movs	r3, #8
 8007d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d36:	e178      	b.n	800802a <UART_SetConfig+0x5a6>
 8007d38:	2310      	movs	r3, #16
 8007d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d3e:	e174      	b.n	800802a <UART_SetConfig+0x5a6>
 8007d40:	2320      	movs	r3, #32
 8007d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d46:	e170      	b.n	800802a <UART_SetConfig+0x5a6>
 8007d48:	2340      	movs	r3, #64	; 0x40
 8007d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d4e:	e16c      	b.n	800802a <UART_SetConfig+0x5a6>
 8007d50:	2380      	movs	r3, #128	; 0x80
 8007d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d56:	e168      	b.n	800802a <UART_SetConfig+0x5a6>
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a1b      	ldr	r2, [pc, #108]	; (8007dcc <UART_SetConfig+0x348>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d142      	bne.n	8007de8 <UART_SetConfig+0x364>
 8007d62:	4b16      	ldr	r3, [pc, #88]	; (8007dbc <UART_SetConfig+0x338>)
 8007d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d66:	f003 0307 	and.w	r3, r3, #7
 8007d6a:	2b05      	cmp	r3, #5
 8007d6c:	d838      	bhi.n	8007de0 <UART_SetConfig+0x35c>
 8007d6e:	a201      	add	r2, pc, #4	; (adr r2, 8007d74 <UART_SetConfig+0x2f0>)
 8007d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d74:	08007d8d 	.word	0x08007d8d
 8007d78:	08007d95 	.word	0x08007d95
 8007d7c:	08007d9d 	.word	0x08007d9d
 8007d80:	08007da5 	.word	0x08007da5
 8007d84:	08007dd1 	.word	0x08007dd1
 8007d88:	08007dd9 	.word	0x08007dd9
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d92:	e14a      	b.n	800802a <UART_SetConfig+0x5a6>
 8007d94:	2304      	movs	r3, #4
 8007d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d9a:	e146      	b.n	800802a <UART_SetConfig+0x5a6>
 8007d9c:	2308      	movs	r3, #8
 8007d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007da2:	e142      	b.n	800802a <UART_SetConfig+0x5a6>
 8007da4:	2310      	movs	r3, #16
 8007da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007daa:	e13e      	b.n	800802a <UART_SetConfig+0x5a6>
 8007dac:	cfff69f3 	.word	0xcfff69f3
 8007db0:	58000c00 	.word	0x58000c00
 8007db4:	11fff4ff 	.word	0x11fff4ff
 8007db8:	40011000 	.word	0x40011000
 8007dbc:	58024400 	.word	0x58024400
 8007dc0:	40004400 	.word	0x40004400
 8007dc4:	40004800 	.word	0x40004800
 8007dc8:	40004c00 	.word	0x40004c00
 8007dcc:	40005000 	.word	0x40005000
 8007dd0:	2320      	movs	r3, #32
 8007dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dd6:	e128      	b.n	800802a <UART_SetConfig+0x5a6>
 8007dd8:	2340      	movs	r3, #64	; 0x40
 8007dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dde:	e124      	b.n	800802a <UART_SetConfig+0x5a6>
 8007de0:	2380      	movs	r3, #128	; 0x80
 8007de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007de6:	e120      	b.n	800802a <UART_SetConfig+0x5a6>
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4acb      	ldr	r2, [pc, #812]	; (800811c <UART_SetConfig+0x698>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d176      	bne.n	8007ee0 <UART_SetConfig+0x45c>
 8007df2:	4bcb      	ldr	r3, [pc, #812]	; (8008120 <UART_SetConfig+0x69c>)
 8007df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007df6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007dfa:	2b28      	cmp	r3, #40	; 0x28
 8007dfc:	d86c      	bhi.n	8007ed8 <UART_SetConfig+0x454>
 8007dfe:	a201      	add	r2, pc, #4	; (adr r2, 8007e04 <UART_SetConfig+0x380>)
 8007e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e04:	08007ea9 	.word	0x08007ea9
 8007e08:	08007ed9 	.word	0x08007ed9
 8007e0c:	08007ed9 	.word	0x08007ed9
 8007e10:	08007ed9 	.word	0x08007ed9
 8007e14:	08007ed9 	.word	0x08007ed9
 8007e18:	08007ed9 	.word	0x08007ed9
 8007e1c:	08007ed9 	.word	0x08007ed9
 8007e20:	08007ed9 	.word	0x08007ed9
 8007e24:	08007eb1 	.word	0x08007eb1
 8007e28:	08007ed9 	.word	0x08007ed9
 8007e2c:	08007ed9 	.word	0x08007ed9
 8007e30:	08007ed9 	.word	0x08007ed9
 8007e34:	08007ed9 	.word	0x08007ed9
 8007e38:	08007ed9 	.word	0x08007ed9
 8007e3c:	08007ed9 	.word	0x08007ed9
 8007e40:	08007ed9 	.word	0x08007ed9
 8007e44:	08007eb9 	.word	0x08007eb9
 8007e48:	08007ed9 	.word	0x08007ed9
 8007e4c:	08007ed9 	.word	0x08007ed9
 8007e50:	08007ed9 	.word	0x08007ed9
 8007e54:	08007ed9 	.word	0x08007ed9
 8007e58:	08007ed9 	.word	0x08007ed9
 8007e5c:	08007ed9 	.word	0x08007ed9
 8007e60:	08007ed9 	.word	0x08007ed9
 8007e64:	08007ec1 	.word	0x08007ec1
 8007e68:	08007ed9 	.word	0x08007ed9
 8007e6c:	08007ed9 	.word	0x08007ed9
 8007e70:	08007ed9 	.word	0x08007ed9
 8007e74:	08007ed9 	.word	0x08007ed9
 8007e78:	08007ed9 	.word	0x08007ed9
 8007e7c:	08007ed9 	.word	0x08007ed9
 8007e80:	08007ed9 	.word	0x08007ed9
 8007e84:	08007ec9 	.word	0x08007ec9
 8007e88:	08007ed9 	.word	0x08007ed9
 8007e8c:	08007ed9 	.word	0x08007ed9
 8007e90:	08007ed9 	.word	0x08007ed9
 8007e94:	08007ed9 	.word	0x08007ed9
 8007e98:	08007ed9 	.word	0x08007ed9
 8007e9c:	08007ed9 	.word	0x08007ed9
 8007ea0:	08007ed9 	.word	0x08007ed9
 8007ea4:	08007ed1 	.word	0x08007ed1
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007eae:	e0bc      	b.n	800802a <UART_SetConfig+0x5a6>
 8007eb0:	2304      	movs	r3, #4
 8007eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007eb6:	e0b8      	b.n	800802a <UART_SetConfig+0x5a6>
 8007eb8:	2308      	movs	r3, #8
 8007eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ebe:	e0b4      	b.n	800802a <UART_SetConfig+0x5a6>
 8007ec0:	2310      	movs	r3, #16
 8007ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ec6:	e0b0      	b.n	800802a <UART_SetConfig+0x5a6>
 8007ec8:	2320      	movs	r3, #32
 8007eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ece:	e0ac      	b.n	800802a <UART_SetConfig+0x5a6>
 8007ed0:	2340      	movs	r3, #64	; 0x40
 8007ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ed6:	e0a8      	b.n	800802a <UART_SetConfig+0x5a6>
 8007ed8:	2380      	movs	r3, #128	; 0x80
 8007eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ede:	e0a4      	b.n	800802a <UART_SetConfig+0x5a6>
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a8f      	ldr	r2, [pc, #572]	; (8008124 <UART_SetConfig+0x6a0>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d130      	bne.n	8007f4c <UART_SetConfig+0x4c8>
 8007eea:	4b8d      	ldr	r3, [pc, #564]	; (8008120 <UART_SetConfig+0x69c>)
 8007eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eee:	f003 0307 	and.w	r3, r3, #7
 8007ef2:	2b05      	cmp	r3, #5
 8007ef4:	d826      	bhi.n	8007f44 <UART_SetConfig+0x4c0>
 8007ef6:	a201      	add	r2, pc, #4	; (adr r2, 8007efc <UART_SetConfig+0x478>)
 8007ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007efc:	08007f15 	.word	0x08007f15
 8007f00:	08007f1d 	.word	0x08007f1d
 8007f04:	08007f25 	.word	0x08007f25
 8007f08:	08007f2d 	.word	0x08007f2d
 8007f0c:	08007f35 	.word	0x08007f35
 8007f10:	08007f3d 	.word	0x08007f3d
 8007f14:	2300      	movs	r3, #0
 8007f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f1a:	e086      	b.n	800802a <UART_SetConfig+0x5a6>
 8007f1c:	2304      	movs	r3, #4
 8007f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f22:	e082      	b.n	800802a <UART_SetConfig+0x5a6>
 8007f24:	2308      	movs	r3, #8
 8007f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f2a:	e07e      	b.n	800802a <UART_SetConfig+0x5a6>
 8007f2c:	2310      	movs	r3, #16
 8007f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f32:	e07a      	b.n	800802a <UART_SetConfig+0x5a6>
 8007f34:	2320      	movs	r3, #32
 8007f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f3a:	e076      	b.n	800802a <UART_SetConfig+0x5a6>
 8007f3c:	2340      	movs	r3, #64	; 0x40
 8007f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f42:	e072      	b.n	800802a <UART_SetConfig+0x5a6>
 8007f44:	2380      	movs	r3, #128	; 0x80
 8007f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f4a:	e06e      	b.n	800802a <UART_SetConfig+0x5a6>
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a75      	ldr	r2, [pc, #468]	; (8008128 <UART_SetConfig+0x6a4>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d130      	bne.n	8007fb8 <UART_SetConfig+0x534>
 8007f56:	4b72      	ldr	r3, [pc, #456]	; (8008120 <UART_SetConfig+0x69c>)
 8007f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f5a:	f003 0307 	and.w	r3, r3, #7
 8007f5e:	2b05      	cmp	r3, #5
 8007f60:	d826      	bhi.n	8007fb0 <UART_SetConfig+0x52c>
 8007f62:	a201      	add	r2, pc, #4	; (adr r2, 8007f68 <UART_SetConfig+0x4e4>)
 8007f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f68:	08007f81 	.word	0x08007f81
 8007f6c:	08007f89 	.word	0x08007f89
 8007f70:	08007f91 	.word	0x08007f91
 8007f74:	08007f99 	.word	0x08007f99
 8007f78:	08007fa1 	.word	0x08007fa1
 8007f7c:	08007fa9 	.word	0x08007fa9
 8007f80:	2300      	movs	r3, #0
 8007f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f86:	e050      	b.n	800802a <UART_SetConfig+0x5a6>
 8007f88:	2304      	movs	r3, #4
 8007f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f8e:	e04c      	b.n	800802a <UART_SetConfig+0x5a6>
 8007f90:	2308      	movs	r3, #8
 8007f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f96:	e048      	b.n	800802a <UART_SetConfig+0x5a6>
 8007f98:	2310      	movs	r3, #16
 8007f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f9e:	e044      	b.n	800802a <UART_SetConfig+0x5a6>
 8007fa0:	2320      	movs	r3, #32
 8007fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fa6:	e040      	b.n	800802a <UART_SetConfig+0x5a6>
 8007fa8:	2340      	movs	r3, #64	; 0x40
 8007faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fae:	e03c      	b.n	800802a <UART_SetConfig+0x5a6>
 8007fb0:	2380      	movs	r3, #128	; 0x80
 8007fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fb6:	e038      	b.n	800802a <UART_SetConfig+0x5a6>
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a5b      	ldr	r2, [pc, #364]	; (800812c <UART_SetConfig+0x6a8>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d130      	bne.n	8008024 <UART_SetConfig+0x5a0>
 8007fc2:	4b57      	ldr	r3, [pc, #348]	; (8008120 <UART_SetConfig+0x69c>)
 8007fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fc6:	f003 0307 	and.w	r3, r3, #7
 8007fca:	2b05      	cmp	r3, #5
 8007fcc:	d826      	bhi.n	800801c <UART_SetConfig+0x598>
 8007fce:	a201      	add	r2, pc, #4	; (adr r2, 8007fd4 <UART_SetConfig+0x550>)
 8007fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd4:	08007fed 	.word	0x08007fed
 8007fd8:	08007ff5 	.word	0x08007ff5
 8007fdc:	08007ffd 	.word	0x08007ffd
 8007fe0:	08008005 	.word	0x08008005
 8007fe4:	0800800d 	.word	0x0800800d
 8007fe8:	08008015 	.word	0x08008015
 8007fec:	2302      	movs	r3, #2
 8007fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ff2:	e01a      	b.n	800802a <UART_SetConfig+0x5a6>
 8007ff4:	2304      	movs	r3, #4
 8007ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ffa:	e016      	b.n	800802a <UART_SetConfig+0x5a6>
 8007ffc:	2308      	movs	r3, #8
 8007ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008002:	e012      	b.n	800802a <UART_SetConfig+0x5a6>
 8008004:	2310      	movs	r3, #16
 8008006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800800a:	e00e      	b.n	800802a <UART_SetConfig+0x5a6>
 800800c:	2320      	movs	r3, #32
 800800e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008012:	e00a      	b.n	800802a <UART_SetConfig+0x5a6>
 8008014:	2340      	movs	r3, #64	; 0x40
 8008016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800801a:	e006      	b.n	800802a <UART_SetConfig+0x5a6>
 800801c:	2380      	movs	r3, #128	; 0x80
 800801e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008022:	e002      	b.n	800802a <UART_SetConfig+0x5a6>
 8008024:	2380      	movs	r3, #128	; 0x80
 8008026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a3f      	ldr	r2, [pc, #252]	; (800812c <UART_SetConfig+0x6a8>)
 8008030:	4293      	cmp	r3, r2
 8008032:	f040 80f8 	bne.w	8008226 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008036:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800803a:	2b20      	cmp	r3, #32
 800803c:	dc46      	bgt.n	80080cc <UART_SetConfig+0x648>
 800803e:	2b02      	cmp	r3, #2
 8008040:	f2c0 8082 	blt.w	8008148 <UART_SetConfig+0x6c4>
 8008044:	3b02      	subs	r3, #2
 8008046:	2b1e      	cmp	r3, #30
 8008048:	d87e      	bhi.n	8008148 <UART_SetConfig+0x6c4>
 800804a:	a201      	add	r2, pc, #4	; (adr r2, 8008050 <UART_SetConfig+0x5cc>)
 800804c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008050:	080080d3 	.word	0x080080d3
 8008054:	08008149 	.word	0x08008149
 8008058:	080080db 	.word	0x080080db
 800805c:	08008149 	.word	0x08008149
 8008060:	08008149 	.word	0x08008149
 8008064:	08008149 	.word	0x08008149
 8008068:	080080eb 	.word	0x080080eb
 800806c:	08008149 	.word	0x08008149
 8008070:	08008149 	.word	0x08008149
 8008074:	08008149 	.word	0x08008149
 8008078:	08008149 	.word	0x08008149
 800807c:	08008149 	.word	0x08008149
 8008080:	08008149 	.word	0x08008149
 8008084:	08008149 	.word	0x08008149
 8008088:	080080fb 	.word	0x080080fb
 800808c:	08008149 	.word	0x08008149
 8008090:	08008149 	.word	0x08008149
 8008094:	08008149 	.word	0x08008149
 8008098:	08008149 	.word	0x08008149
 800809c:	08008149 	.word	0x08008149
 80080a0:	08008149 	.word	0x08008149
 80080a4:	08008149 	.word	0x08008149
 80080a8:	08008149 	.word	0x08008149
 80080ac:	08008149 	.word	0x08008149
 80080b0:	08008149 	.word	0x08008149
 80080b4:	08008149 	.word	0x08008149
 80080b8:	08008149 	.word	0x08008149
 80080bc:	08008149 	.word	0x08008149
 80080c0:	08008149 	.word	0x08008149
 80080c4:	08008149 	.word	0x08008149
 80080c8:	0800813b 	.word	0x0800813b
 80080cc:	2b40      	cmp	r3, #64	; 0x40
 80080ce:	d037      	beq.n	8008140 <UART_SetConfig+0x6bc>
 80080d0:	e03a      	b.n	8008148 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80080d2:	f7fd fb7d 	bl	80057d0 <HAL_RCCEx_GetD3PCLK1Freq>
 80080d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80080d8:	e03c      	b.n	8008154 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080de:	4618      	mov	r0, r3
 80080e0:	f7fd fb8c 	bl	80057fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80080e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080e8:	e034      	b.n	8008154 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080ea:	f107 0318 	add.w	r3, r7, #24
 80080ee:	4618      	mov	r0, r3
 80080f0:	f7fd fcd8 	bl	8005aa4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80080f4:	69fb      	ldr	r3, [r7, #28]
 80080f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080f8:	e02c      	b.n	8008154 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080fa:	4b09      	ldr	r3, [pc, #36]	; (8008120 <UART_SetConfig+0x69c>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f003 0320 	and.w	r3, r3, #32
 8008102:	2b00      	cmp	r3, #0
 8008104:	d016      	beq.n	8008134 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008106:	4b06      	ldr	r3, [pc, #24]	; (8008120 <UART_SetConfig+0x69c>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	08db      	lsrs	r3, r3, #3
 800810c:	f003 0303 	and.w	r3, r3, #3
 8008110:	4a07      	ldr	r2, [pc, #28]	; (8008130 <UART_SetConfig+0x6ac>)
 8008112:	fa22 f303 	lsr.w	r3, r2, r3
 8008116:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008118:	e01c      	b.n	8008154 <UART_SetConfig+0x6d0>
 800811a:	bf00      	nop
 800811c:	40011400 	.word	0x40011400
 8008120:	58024400 	.word	0x58024400
 8008124:	40007800 	.word	0x40007800
 8008128:	40007c00 	.word	0x40007c00
 800812c:	58000c00 	.word	0x58000c00
 8008130:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008134:	4b9d      	ldr	r3, [pc, #628]	; (80083ac <UART_SetConfig+0x928>)
 8008136:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008138:	e00c      	b.n	8008154 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800813a:	4b9d      	ldr	r3, [pc, #628]	; (80083b0 <UART_SetConfig+0x92c>)
 800813c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800813e:	e009      	b.n	8008154 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008140:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008144:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008146:	e005      	b.n	8008154 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008148:	2300      	movs	r3, #0
 800814a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800814c:	2301      	movs	r3, #1
 800814e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008152:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008156:	2b00      	cmp	r3, #0
 8008158:	f000 81de 	beq.w	8008518 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008160:	4a94      	ldr	r2, [pc, #592]	; (80083b4 <UART_SetConfig+0x930>)
 8008162:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008166:	461a      	mov	r2, r3
 8008168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800816a:	fbb3 f3f2 	udiv	r3, r3, r2
 800816e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	685a      	ldr	r2, [r3, #4]
 8008174:	4613      	mov	r3, r2
 8008176:	005b      	lsls	r3, r3, #1
 8008178:	4413      	add	r3, r2
 800817a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800817c:	429a      	cmp	r2, r3
 800817e:	d305      	bcc.n	800818c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008186:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008188:	429a      	cmp	r2, r3
 800818a:	d903      	bls.n	8008194 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800818c:	2301      	movs	r3, #1
 800818e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008192:	e1c1      	b.n	8008518 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008196:	2200      	movs	r2, #0
 8008198:	60bb      	str	r3, [r7, #8]
 800819a:	60fa      	str	r2, [r7, #12]
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a0:	4a84      	ldr	r2, [pc, #528]	; (80083b4 <UART_SetConfig+0x930>)
 80081a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	2200      	movs	r2, #0
 80081aa:	603b      	str	r3, [r7, #0]
 80081ac:	607a      	str	r2, [r7, #4]
 80081ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80081b6:	f7f8 f8e3 	bl	8000380 <__aeabi_uldivmod>
 80081ba:	4602      	mov	r2, r0
 80081bc:	460b      	mov	r3, r1
 80081be:	4610      	mov	r0, r2
 80081c0:	4619      	mov	r1, r3
 80081c2:	f04f 0200 	mov.w	r2, #0
 80081c6:	f04f 0300 	mov.w	r3, #0
 80081ca:	020b      	lsls	r3, r1, #8
 80081cc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80081d0:	0202      	lsls	r2, r0, #8
 80081d2:	6979      	ldr	r1, [r7, #20]
 80081d4:	6849      	ldr	r1, [r1, #4]
 80081d6:	0849      	lsrs	r1, r1, #1
 80081d8:	2000      	movs	r0, #0
 80081da:	460c      	mov	r4, r1
 80081dc:	4605      	mov	r5, r0
 80081de:	eb12 0804 	adds.w	r8, r2, r4
 80081e2:	eb43 0905 	adc.w	r9, r3, r5
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	2200      	movs	r2, #0
 80081ec:	469a      	mov	sl, r3
 80081ee:	4693      	mov	fp, r2
 80081f0:	4652      	mov	r2, sl
 80081f2:	465b      	mov	r3, fp
 80081f4:	4640      	mov	r0, r8
 80081f6:	4649      	mov	r1, r9
 80081f8:	f7f8 f8c2 	bl	8000380 <__aeabi_uldivmod>
 80081fc:	4602      	mov	r2, r0
 80081fe:	460b      	mov	r3, r1
 8008200:	4613      	mov	r3, r2
 8008202:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008206:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800820a:	d308      	bcc.n	800821e <UART_SetConfig+0x79a>
 800820c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800820e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008212:	d204      	bcs.n	800821e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800821a:	60da      	str	r2, [r3, #12]
 800821c:	e17c      	b.n	8008518 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008224:	e178      	b.n	8008518 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	69db      	ldr	r3, [r3, #28]
 800822a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800822e:	f040 80c5 	bne.w	80083bc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008232:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008236:	2b20      	cmp	r3, #32
 8008238:	dc48      	bgt.n	80082cc <UART_SetConfig+0x848>
 800823a:	2b00      	cmp	r3, #0
 800823c:	db7b      	blt.n	8008336 <UART_SetConfig+0x8b2>
 800823e:	2b20      	cmp	r3, #32
 8008240:	d879      	bhi.n	8008336 <UART_SetConfig+0x8b2>
 8008242:	a201      	add	r2, pc, #4	; (adr r2, 8008248 <UART_SetConfig+0x7c4>)
 8008244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008248:	080082d3 	.word	0x080082d3
 800824c:	080082db 	.word	0x080082db
 8008250:	08008337 	.word	0x08008337
 8008254:	08008337 	.word	0x08008337
 8008258:	080082e3 	.word	0x080082e3
 800825c:	08008337 	.word	0x08008337
 8008260:	08008337 	.word	0x08008337
 8008264:	08008337 	.word	0x08008337
 8008268:	080082f3 	.word	0x080082f3
 800826c:	08008337 	.word	0x08008337
 8008270:	08008337 	.word	0x08008337
 8008274:	08008337 	.word	0x08008337
 8008278:	08008337 	.word	0x08008337
 800827c:	08008337 	.word	0x08008337
 8008280:	08008337 	.word	0x08008337
 8008284:	08008337 	.word	0x08008337
 8008288:	08008303 	.word	0x08008303
 800828c:	08008337 	.word	0x08008337
 8008290:	08008337 	.word	0x08008337
 8008294:	08008337 	.word	0x08008337
 8008298:	08008337 	.word	0x08008337
 800829c:	08008337 	.word	0x08008337
 80082a0:	08008337 	.word	0x08008337
 80082a4:	08008337 	.word	0x08008337
 80082a8:	08008337 	.word	0x08008337
 80082ac:	08008337 	.word	0x08008337
 80082b0:	08008337 	.word	0x08008337
 80082b4:	08008337 	.word	0x08008337
 80082b8:	08008337 	.word	0x08008337
 80082bc:	08008337 	.word	0x08008337
 80082c0:	08008337 	.word	0x08008337
 80082c4:	08008337 	.word	0x08008337
 80082c8:	08008329 	.word	0x08008329
 80082cc:	2b40      	cmp	r3, #64	; 0x40
 80082ce:	d02e      	beq.n	800832e <UART_SetConfig+0x8aa>
 80082d0:	e031      	b.n	8008336 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082d2:	f7fc f805 	bl	80042e0 <HAL_RCC_GetPCLK1Freq>
 80082d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80082d8:	e033      	b.n	8008342 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082da:	f7fc f817 	bl	800430c <HAL_RCC_GetPCLK2Freq>
 80082de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80082e0:	e02f      	b.n	8008342 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082e6:	4618      	mov	r0, r3
 80082e8:	f7fd fa88 	bl	80057fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80082ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082f0:	e027      	b.n	8008342 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082f2:	f107 0318 	add.w	r3, r7, #24
 80082f6:	4618      	mov	r0, r3
 80082f8:	f7fd fbd4 	bl	8005aa4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80082fc:	69fb      	ldr	r3, [r7, #28]
 80082fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008300:	e01f      	b.n	8008342 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008302:	4b2d      	ldr	r3, [pc, #180]	; (80083b8 <UART_SetConfig+0x934>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f003 0320 	and.w	r3, r3, #32
 800830a:	2b00      	cmp	r3, #0
 800830c:	d009      	beq.n	8008322 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800830e:	4b2a      	ldr	r3, [pc, #168]	; (80083b8 <UART_SetConfig+0x934>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	08db      	lsrs	r3, r3, #3
 8008314:	f003 0303 	and.w	r3, r3, #3
 8008318:	4a24      	ldr	r2, [pc, #144]	; (80083ac <UART_SetConfig+0x928>)
 800831a:	fa22 f303 	lsr.w	r3, r2, r3
 800831e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008320:	e00f      	b.n	8008342 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008322:	4b22      	ldr	r3, [pc, #136]	; (80083ac <UART_SetConfig+0x928>)
 8008324:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008326:	e00c      	b.n	8008342 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008328:	4b21      	ldr	r3, [pc, #132]	; (80083b0 <UART_SetConfig+0x92c>)
 800832a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800832c:	e009      	b.n	8008342 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800832e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008332:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008334:	e005      	b.n	8008342 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008336:	2300      	movs	r3, #0
 8008338:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800833a:	2301      	movs	r3, #1
 800833c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008340:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008344:	2b00      	cmp	r3, #0
 8008346:	f000 80e7 	beq.w	8008518 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800834e:	4a19      	ldr	r2, [pc, #100]	; (80083b4 <UART_SetConfig+0x930>)
 8008350:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008354:	461a      	mov	r2, r3
 8008356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008358:	fbb3 f3f2 	udiv	r3, r3, r2
 800835c:	005a      	lsls	r2, r3, #1
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	085b      	lsrs	r3, r3, #1
 8008364:	441a      	add	r2, r3
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	fbb2 f3f3 	udiv	r3, r2, r3
 800836e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008372:	2b0f      	cmp	r3, #15
 8008374:	d916      	bls.n	80083a4 <UART_SetConfig+0x920>
 8008376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800837c:	d212      	bcs.n	80083a4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800837e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008380:	b29b      	uxth	r3, r3
 8008382:	f023 030f 	bic.w	r3, r3, #15
 8008386:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800838a:	085b      	lsrs	r3, r3, #1
 800838c:	b29b      	uxth	r3, r3
 800838e:	f003 0307 	and.w	r3, r3, #7
 8008392:	b29a      	uxth	r2, r3
 8008394:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008396:	4313      	orrs	r3, r2
 8008398:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80083a0:	60da      	str	r2, [r3, #12]
 80083a2:	e0b9      	b.n	8008518 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80083a4:	2301      	movs	r3, #1
 80083a6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80083aa:	e0b5      	b.n	8008518 <UART_SetConfig+0xa94>
 80083ac:	03d09000 	.word	0x03d09000
 80083b0:	003d0900 	.word	0x003d0900
 80083b4:	0800c8a8 	.word	0x0800c8a8
 80083b8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80083bc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80083c0:	2b20      	cmp	r3, #32
 80083c2:	dc49      	bgt.n	8008458 <UART_SetConfig+0x9d4>
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	db7c      	blt.n	80084c2 <UART_SetConfig+0xa3e>
 80083c8:	2b20      	cmp	r3, #32
 80083ca:	d87a      	bhi.n	80084c2 <UART_SetConfig+0xa3e>
 80083cc:	a201      	add	r2, pc, #4	; (adr r2, 80083d4 <UART_SetConfig+0x950>)
 80083ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d2:	bf00      	nop
 80083d4:	0800845f 	.word	0x0800845f
 80083d8:	08008467 	.word	0x08008467
 80083dc:	080084c3 	.word	0x080084c3
 80083e0:	080084c3 	.word	0x080084c3
 80083e4:	0800846f 	.word	0x0800846f
 80083e8:	080084c3 	.word	0x080084c3
 80083ec:	080084c3 	.word	0x080084c3
 80083f0:	080084c3 	.word	0x080084c3
 80083f4:	0800847f 	.word	0x0800847f
 80083f8:	080084c3 	.word	0x080084c3
 80083fc:	080084c3 	.word	0x080084c3
 8008400:	080084c3 	.word	0x080084c3
 8008404:	080084c3 	.word	0x080084c3
 8008408:	080084c3 	.word	0x080084c3
 800840c:	080084c3 	.word	0x080084c3
 8008410:	080084c3 	.word	0x080084c3
 8008414:	0800848f 	.word	0x0800848f
 8008418:	080084c3 	.word	0x080084c3
 800841c:	080084c3 	.word	0x080084c3
 8008420:	080084c3 	.word	0x080084c3
 8008424:	080084c3 	.word	0x080084c3
 8008428:	080084c3 	.word	0x080084c3
 800842c:	080084c3 	.word	0x080084c3
 8008430:	080084c3 	.word	0x080084c3
 8008434:	080084c3 	.word	0x080084c3
 8008438:	080084c3 	.word	0x080084c3
 800843c:	080084c3 	.word	0x080084c3
 8008440:	080084c3 	.word	0x080084c3
 8008444:	080084c3 	.word	0x080084c3
 8008448:	080084c3 	.word	0x080084c3
 800844c:	080084c3 	.word	0x080084c3
 8008450:	080084c3 	.word	0x080084c3
 8008454:	080084b5 	.word	0x080084b5
 8008458:	2b40      	cmp	r3, #64	; 0x40
 800845a:	d02e      	beq.n	80084ba <UART_SetConfig+0xa36>
 800845c:	e031      	b.n	80084c2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800845e:	f7fb ff3f 	bl	80042e0 <HAL_RCC_GetPCLK1Freq>
 8008462:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008464:	e033      	b.n	80084ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008466:	f7fb ff51 	bl	800430c <HAL_RCC_GetPCLK2Freq>
 800846a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800846c:	e02f      	b.n	80084ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800846e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008472:	4618      	mov	r0, r3
 8008474:	f7fd f9c2 	bl	80057fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800847a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800847c:	e027      	b.n	80084ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800847e:	f107 0318 	add.w	r3, r7, #24
 8008482:	4618      	mov	r0, r3
 8008484:	f7fd fb0e 	bl	8005aa4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008488:	69fb      	ldr	r3, [r7, #28]
 800848a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800848c:	e01f      	b.n	80084ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800848e:	4b2d      	ldr	r3, [pc, #180]	; (8008544 <UART_SetConfig+0xac0>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f003 0320 	and.w	r3, r3, #32
 8008496:	2b00      	cmp	r3, #0
 8008498:	d009      	beq.n	80084ae <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800849a:	4b2a      	ldr	r3, [pc, #168]	; (8008544 <UART_SetConfig+0xac0>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	08db      	lsrs	r3, r3, #3
 80084a0:	f003 0303 	and.w	r3, r3, #3
 80084a4:	4a28      	ldr	r2, [pc, #160]	; (8008548 <UART_SetConfig+0xac4>)
 80084a6:	fa22 f303 	lsr.w	r3, r2, r3
 80084aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80084ac:	e00f      	b.n	80084ce <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80084ae:	4b26      	ldr	r3, [pc, #152]	; (8008548 <UART_SetConfig+0xac4>)
 80084b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084b2:	e00c      	b.n	80084ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80084b4:	4b25      	ldr	r3, [pc, #148]	; (800854c <UART_SetConfig+0xac8>)
 80084b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084b8:	e009      	b.n	80084ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084c0:	e005      	b.n	80084ce <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80084c2:	2300      	movs	r3, #0
 80084c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80084c6:	2301      	movs	r3, #1
 80084c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80084cc:	bf00      	nop
    }

    if (pclk != 0U)
 80084ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d021      	beq.n	8008518 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d8:	4a1d      	ldr	r2, [pc, #116]	; (8008550 <UART_SetConfig+0xacc>)
 80084da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084de:	461a      	mov	r2, r3
 80084e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	085b      	lsrs	r3, r3, #1
 80084ec:	441a      	add	r2, r3
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80084f6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80084f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084fa:	2b0f      	cmp	r3, #15
 80084fc:	d909      	bls.n	8008512 <UART_SetConfig+0xa8e>
 80084fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008504:	d205      	bcs.n	8008512 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008508:	b29a      	uxth	r2, r3
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	60da      	str	r2, [r3, #12]
 8008510:	e002      	b.n	8008518 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008512:	2301      	movs	r3, #1
 8008514:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	2201      	movs	r2, #1
 800851c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	2201      	movs	r2, #1
 8008524:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	2200      	movs	r2, #0
 800852c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	2200      	movs	r2, #0
 8008532:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008534:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008538:	4618      	mov	r0, r3
 800853a:	3748      	adds	r7, #72	; 0x48
 800853c:	46bd      	mov	sp, r7
 800853e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008542:	bf00      	nop
 8008544:	58024400 	.word	0x58024400
 8008548:	03d09000 	.word	0x03d09000
 800854c:	003d0900 	.word	0x003d0900
 8008550:	0800c8a8 	.word	0x0800c8a8

08008554 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008554:	b480      	push	{r7}
 8008556:	b083      	sub	sp, #12
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008560:	f003 0301 	and.w	r3, r3, #1
 8008564:	2b00      	cmp	r3, #0
 8008566:	d00a      	beq.n	800857e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	430a      	orrs	r2, r1
 800857c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008582:	f003 0302 	and.w	r3, r3, #2
 8008586:	2b00      	cmp	r3, #0
 8008588:	d00a      	beq.n	80085a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	430a      	orrs	r2, r1
 800859e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a4:	f003 0304 	and.w	r3, r3, #4
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d00a      	beq.n	80085c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	430a      	orrs	r2, r1
 80085c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085c6:	f003 0308 	and.w	r3, r3, #8
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d00a      	beq.n	80085e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	430a      	orrs	r2, r1
 80085e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085e8:	f003 0310 	and.w	r3, r3, #16
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d00a      	beq.n	8008606 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	689b      	ldr	r3, [r3, #8]
 80085f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	430a      	orrs	r2, r1
 8008604:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800860a:	f003 0320 	and.w	r3, r3, #32
 800860e:	2b00      	cmp	r3, #0
 8008610:	d00a      	beq.n	8008628 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	430a      	orrs	r2, r1
 8008626:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800862c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008630:	2b00      	cmp	r3, #0
 8008632:	d01a      	beq.n	800866a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	430a      	orrs	r2, r1
 8008648:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800864e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008652:	d10a      	bne.n	800866a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	430a      	orrs	r2, r1
 8008668:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800866e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008672:	2b00      	cmp	r3, #0
 8008674:	d00a      	beq.n	800868c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	430a      	orrs	r2, r1
 800868a:	605a      	str	r2, [r3, #4]
  }
}
 800868c:	bf00      	nop
 800868e:	370c      	adds	r7, #12
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr

08008698 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b098      	sub	sp, #96	; 0x60
 800869c:	af02      	add	r7, sp, #8
 800869e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2200      	movs	r2, #0
 80086a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80086a8:	f7f8 fffe 	bl	80016a8 <HAL_GetTick>
 80086ac:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f003 0308 	and.w	r3, r3, #8
 80086b8:	2b08      	cmp	r3, #8
 80086ba:	d12f      	bne.n	800871c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80086c0:	9300      	str	r3, [sp, #0]
 80086c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086c4:	2200      	movs	r2, #0
 80086c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 f88e 	bl	80087ec <UART_WaitOnFlagUntilTimeout>
 80086d0:	4603      	mov	r3, r0
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d022      	beq.n	800871c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086de:	e853 3f00 	ldrex	r3, [r3]
 80086e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80086e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086ea:	653b      	str	r3, [r7, #80]	; 0x50
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	461a      	mov	r2, r3
 80086f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086f4:	647b      	str	r3, [r7, #68]	; 0x44
 80086f6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80086fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086fc:	e841 2300 	strex	r3, r2, [r1]
 8008700:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008704:	2b00      	cmp	r3, #0
 8008706:	d1e6      	bne.n	80086d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2220      	movs	r2, #32
 800870c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2200      	movs	r2, #0
 8008714:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008718:	2303      	movs	r3, #3
 800871a:	e063      	b.n	80087e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f003 0304 	and.w	r3, r3, #4
 8008726:	2b04      	cmp	r3, #4
 8008728:	d149      	bne.n	80087be <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800872a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800872e:	9300      	str	r3, [sp, #0]
 8008730:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008732:	2200      	movs	r2, #0
 8008734:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f000 f857 	bl	80087ec <UART_WaitOnFlagUntilTimeout>
 800873e:	4603      	mov	r3, r0
 8008740:	2b00      	cmp	r3, #0
 8008742:	d03c      	beq.n	80087be <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800874a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874c:	e853 3f00 	ldrex	r3, [r3]
 8008750:	623b      	str	r3, [r7, #32]
   return(result);
 8008752:	6a3b      	ldr	r3, [r7, #32]
 8008754:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008758:	64fb      	str	r3, [r7, #76]	; 0x4c
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	461a      	mov	r2, r3
 8008760:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008762:	633b      	str	r3, [r7, #48]	; 0x30
 8008764:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008766:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800876a:	e841 2300 	strex	r3, r2, [r1]
 800876e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008772:	2b00      	cmp	r3, #0
 8008774:	d1e6      	bne.n	8008744 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	3308      	adds	r3, #8
 800877c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	e853 3f00 	ldrex	r3, [r3]
 8008784:	60fb      	str	r3, [r7, #12]
   return(result);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	f023 0301 	bic.w	r3, r3, #1
 800878c:	64bb      	str	r3, [r7, #72]	; 0x48
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	3308      	adds	r3, #8
 8008794:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008796:	61fa      	str	r2, [r7, #28]
 8008798:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800879a:	69b9      	ldr	r1, [r7, #24]
 800879c:	69fa      	ldr	r2, [r7, #28]
 800879e:	e841 2300 	strex	r3, r2, [r1]
 80087a2:	617b      	str	r3, [r7, #20]
   return(result);
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d1e5      	bne.n	8008776 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2220      	movs	r2, #32
 80087ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2200      	movs	r2, #0
 80087b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087ba:	2303      	movs	r3, #3
 80087bc:	e012      	b.n	80087e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2220      	movs	r2, #32
 80087c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2220      	movs	r2, #32
 80087ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2200      	movs	r2, #0
 80087d2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2200      	movs	r2, #0
 80087d8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2200      	movs	r2, #0
 80087de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80087e2:	2300      	movs	r3, #0
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3758      	adds	r7, #88	; 0x58
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	60f8      	str	r0, [r7, #12]
 80087f4:	60b9      	str	r1, [r7, #8]
 80087f6:	603b      	str	r3, [r7, #0]
 80087f8:	4613      	mov	r3, r2
 80087fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087fc:	e049      	b.n	8008892 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087fe:	69bb      	ldr	r3, [r7, #24]
 8008800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008804:	d045      	beq.n	8008892 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008806:	f7f8 ff4f 	bl	80016a8 <HAL_GetTick>
 800880a:	4602      	mov	r2, r0
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	1ad3      	subs	r3, r2, r3
 8008810:	69ba      	ldr	r2, [r7, #24]
 8008812:	429a      	cmp	r2, r3
 8008814:	d302      	bcc.n	800881c <UART_WaitOnFlagUntilTimeout+0x30>
 8008816:	69bb      	ldr	r3, [r7, #24]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d101      	bne.n	8008820 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800881c:	2303      	movs	r3, #3
 800881e:	e048      	b.n	80088b2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f003 0304 	and.w	r3, r3, #4
 800882a:	2b00      	cmp	r3, #0
 800882c:	d031      	beq.n	8008892 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	69db      	ldr	r3, [r3, #28]
 8008834:	f003 0308 	and.w	r3, r3, #8
 8008838:	2b08      	cmp	r3, #8
 800883a:	d110      	bne.n	800885e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	2208      	movs	r2, #8
 8008842:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008844:	68f8      	ldr	r0, [r7, #12]
 8008846:	f000 f839 	bl	80088bc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2208      	movs	r2, #8
 800884e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2200      	movs	r2, #0
 8008856:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800885a:	2301      	movs	r3, #1
 800885c:	e029      	b.n	80088b2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	69db      	ldr	r3, [r3, #28]
 8008864:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008868:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800886c:	d111      	bne.n	8008892 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008876:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008878:	68f8      	ldr	r0, [r7, #12]
 800887a:	f000 f81f 	bl	80088bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2220      	movs	r2, #32
 8008882:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2200      	movs	r2, #0
 800888a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800888e:	2303      	movs	r3, #3
 8008890:	e00f      	b.n	80088b2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	69da      	ldr	r2, [r3, #28]
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	4013      	ands	r3, r2
 800889c:	68ba      	ldr	r2, [r7, #8]
 800889e:	429a      	cmp	r2, r3
 80088a0:	bf0c      	ite	eq
 80088a2:	2301      	moveq	r3, #1
 80088a4:	2300      	movne	r3, #0
 80088a6:	b2db      	uxtb	r3, r3
 80088a8:	461a      	mov	r2, r3
 80088aa:	79fb      	ldrb	r3, [r7, #7]
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d0a6      	beq.n	80087fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3710      	adds	r7, #16
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}
	...

080088bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80088bc:	b480      	push	{r7}
 80088be:	b095      	sub	sp, #84	; 0x54
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088cc:	e853 3f00 	ldrex	r3, [r3]
 80088d0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80088d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	461a      	mov	r2, r3
 80088e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088e2:	643b      	str	r3, [r7, #64]	; 0x40
 80088e4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80088e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80088ea:	e841 2300 	strex	r3, r2, [r1]
 80088ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80088f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d1e6      	bne.n	80088c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	3308      	adds	r3, #8
 80088fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088fe:	6a3b      	ldr	r3, [r7, #32]
 8008900:	e853 3f00 	ldrex	r3, [r3]
 8008904:	61fb      	str	r3, [r7, #28]
   return(result);
 8008906:	69fa      	ldr	r2, [r7, #28]
 8008908:	4b1e      	ldr	r3, [pc, #120]	; (8008984 <UART_EndRxTransfer+0xc8>)
 800890a:	4013      	ands	r3, r2
 800890c:	64bb      	str	r3, [r7, #72]	; 0x48
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	3308      	adds	r3, #8
 8008914:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008916:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008918:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800891a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800891c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800891e:	e841 2300 	strex	r3, r2, [r1]
 8008922:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008926:	2b00      	cmp	r3, #0
 8008928:	d1e5      	bne.n	80088f6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800892e:	2b01      	cmp	r3, #1
 8008930:	d118      	bne.n	8008964 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	e853 3f00 	ldrex	r3, [r3]
 800893e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	f023 0310 	bic.w	r3, r3, #16
 8008946:	647b      	str	r3, [r7, #68]	; 0x44
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	461a      	mov	r2, r3
 800894e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008950:	61bb      	str	r3, [r7, #24]
 8008952:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008954:	6979      	ldr	r1, [r7, #20]
 8008956:	69ba      	ldr	r2, [r7, #24]
 8008958:	e841 2300 	strex	r3, r2, [r1]
 800895c:	613b      	str	r3, [r7, #16]
   return(result);
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d1e6      	bne.n	8008932 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2220      	movs	r2, #32
 8008968:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2200      	movs	r2, #0
 8008976:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008978:	bf00      	nop
 800897a:	3754      	adds	r7, #84	; 0x54
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr
 8008984:	effffffe 	.word	0xeffffffe

08008988 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b084      	sub	sp, #16
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008994:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2200      	movs	r2, #0
 800899a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2200      	movs	r2, #0
 80089a2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80089a6:	68f8      	ldr	r0, [r7, #12]
 80089a8:	f7ff f856 	bl	8007a58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089ac:	bf00      	nop
 80089ae:	3710      	adds	r7, #16
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b088      	sub	sp, #32
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	e853 3f00 	ldrex	r3, [r3]
 80089c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089d0:	61fb      	str	r3, [r7, #28]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	461a      	mov	r2, r3
 80089d8:	69fb      	ldr	r3, [r7, #28]
 80089da:	61bb      	str	r3, [r7, #24]
 80089dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089de:	6979      	ldr	r1, [r7, #20]
 80089e0:	69ba      	ldr	r2, [r7, #24]
 80089e2:	e841 2300 	strex	r3, r2, [r1]
 80089e6:	613b      	str	r3, [r7, #16]
   return(result);
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d1e6      	bne.n	80089bc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2220      	movs	r2, #32
 80089f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2200      	movs	r2, #0
 80089fa:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f7ff f821 	bl	8007a44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a02:	bf00      	nop
 8008a04:	3720      	adds	r7, #32
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}

08008a0a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008a0a:	b480      	push	{r7}
 8008a0c:	b083      	sub	sp, #12
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008a12:	bf00      	nop
 8008a14:	370c      	adds	r7, #12
 8008a16:	46bd      	mov	sp, r7
 8008a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1c:	4770      	bx	lr

08008a1e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008a1e:	b480      	push	{r7}
 8008a20:	b083      	sub	sp, #12
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008a26:	bf00      	nop
 8008a28:	370c      	adds	r7, #12
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a30:	4770      	bx	lr

08008a32 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008a32:	b480      	push	{r7}
 8008a34:	b083      	sub	sp, #12
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008a3a:	bf00      	nop
 8008a3c:	370c      	adds	r7, #12
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a44:	4770      	bx	lr

08008a46 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008a46:	b480      	push	{r7}
 8008a48:	b085      	sub	sp, #20
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	d101      	bne.n	8008a5c <HAL_UARTEx_DisableFifoMode+0x16>
 8008a58:	2302      	movs	r3, #2
 8008a5a:	e027      	b.n	8008aac <HAL_UARTEx_DisableFifoMode+0x66>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2224      	movs	r2, #36	; 0x24
 8008a68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	681a      	ldr	r2, [r3, #0]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f022 0201 	bic.w	r2, r2, #1
 8008a82:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008a8a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	68fa      	ldr	r2, [r7, #12]
 8008a98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2220      	movs	r2, #32
 8008a9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008aaa:	2300      	movs	r3, #0
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3714      	adds	r7, #20
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr

08008ab8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b084      	sub	sp, #16
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	d101      	bne.n	8008ad0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008acc:	2302      	movs	r3, #2
 8008ace:	e02d      	b.n	8008b2c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2224      	movs	r2, #36	; 0x24
 8008adc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	681a      	ldr	r2, [r3, #0]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f022 0201 	bic.w	r2, r2, #1
 8008af6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	689b      	ldr	r3, [r3, #8]
 8008afe:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	683a      	ldr	r2, [r7, #0]
 8008b08:	430a      	orrs	r2, r1
 8008b0a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f000 f84f 	bl	8008bb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	68fa      	ldr	r2, [r7, #12]
 8008b18:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2220      	movs	r2, #32
 8008b1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2200      	movs	r2, #0
 8008b26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008b2a:	2300      	movs	r3, #0
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3710      	adds	r7, #16
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	d101      	bne.n	8008b4c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008b48:	2302      	movs	r3, #2
 8008b4a:	e02d      	b.n	8008ba8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2201      	movs	r2, #1
 8008b50:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2224      	movs	r2, #36	; 0x24
 8008b58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	681a      	ldr	r2, [r3, #0]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f022 0201 	bic.w	r2, r2, #1
 8008b72:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	689b      	ldr	r3, [r3, #8]
 8008b7a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	683a      	ldr	r2, [r7, #0]
 8008b84:	430a      	orrs	r2, r1
 8008b86:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f000 f811 	bl	8008bb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	68fa      	ldr	r2, [r7, #12]
 8008b94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2220      	movs	r2, #32
 8008b9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008ba6:	2300      	movs	r3, #0
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3710      	adds	r7, #16
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b085      	sub	sp, #20
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d108      	bne.n	8008bd2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008bd0:	e031      	b.n	8008c36 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008bd2:	2310      	movs	r3, #16
 8008bd4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008bd6:	2310      	movs	r3, #16
 8008bd8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	689b      	ldr	r3, [r3, #8]
 8008be0:	0e5b      	lsrs	r3, r3, #25
 8008be2:	b2db      	uxtb	r3, r3
 8008be4:	f003 0307 	and.w	r3, r3, #7
 8008be8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	689b      	ldr	r3, [r3, #8]
 8008bf0:	0f5b      	lsrs	r3, r3, #29
 8008bf2:	b2db      	uxtb	r3, r3
 8008bf4:	f003 0307 	and.w	r3, r3, #7
 8008bf8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008bfa:	7bbb      	ldrb	r3, [r7, #14]
 8008bfc:	7b3a      	ldrb	r2, [r7, #12]
 8008bfe:	4911      	ldr	r1, [pc, #68]	; (8008c44 <UARTEx_SetNbDataToProcess+0x94>)
 8008c00:	5c8a      	ldrb	r2, [r1, r2]
 8008c02:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008c06:	7b3a      	ldrb	r2, [r7, #12]
 8008c08:	490f      	ldr	r1, [pc, #60]	; (8008c48 <UARTEx_SetNbDataToProcess+0x98>)
 8008c0a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008c0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c10:	b29a      	uxth	r2, r3
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c18:	7bfb      	ldrb	r3, [r7, #15]
 8008c1a:	7b7a      	ldrb	r2, [r7, #13]
 8008c1c:	4909      	ldr	r1, [pc, #36]	; (8008c44 <UARTEx_SetNbDataToProcess+0x94>)
 8008c1e:	5c8a      	ldrb	r2, [r1, r2]
 8008c20:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008c24:	7b7a      	ldrb	r2, [r7, #13]
 8008c26:	4908      	ldr	r1, [pc, #32]	; (8008c48 <UARTEx_SetNbDataToProcess+0x98>)
 8008c28:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c2a:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c2e:	b29a      	uxth	r2, r3
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008c36:	bf00      	nop
 8008c38:	3714      	adds	r7, #20
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c40:	4770      	bx	lr
 8008c42:	bf00      	nop
 8008c44:	0800c8c0 	.word	0x0800c8c0
 8008c48:	0800c8c8 	.word	0x0800c8c8

08008c4c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008c4c:	b084      	sub	sp, #16
 8008c4e:	b580      	push	{r7, lr}
 8008c50:	b084      	sub	sp, #16
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	6078      	str	r0, [r7, #4]
 8008c56:	f107 001c 	add.w	r0, r7, #28
 8008c5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c60:	2b01      	cmp	r3, #1
 8008c62:	d120      	bne.n	8008ca6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	68da      	ldr	r2, [r3, #12]
 8008c74:	4b2a      	ldr	r3, [pc, #168]	; (8008d20 <USB_CoreInit+0xd4>)
 8008c76:	4013      	ands	r3, r2
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	68db      	ldr	r3, [r3, #12]
 8008c80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008c88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	d105      	bne.n	8008c9a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	68db      	ldr	r3, [r3, #12]
 8008c92:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f000 faac 	bl	80091f8 <USB_CoreReset>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	73fb      	strb	r3, [r7, #15]
 8008ca4:	e01a      	b.n	8008cdc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	68db      	ldr	r3, [r3, #12]
 8008caa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 faa0 	bl	80091f8 <USB_CoreReset>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008cbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d106      	bne.n	8008cd0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cc6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	639a      	str	r2, [r3, #56]	; 0x38
 8008cce:	e005      	b.n	8008cdc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cd4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cde:	2b01      	cmp	r3, #1
 8008ce0:	d116      	bne.n	8008d10 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ce6:	b29a      	uxth	r2, r3
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008cf0:	4b0c      	ldr	r3, [pc, #48]	; (8008d24 <USB_CoreInit+0xd8>)
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	689b      	ldr	r3, [r3, #8]
 8008cfc:	f043 0206 	orr.w	r2, r3, #6
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	689b      	ldr	r3, [r3, #8]
 8008d08:	f043 0220 	orr.w	r2, r3, #32
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3710      	adds	r7, #16
 8008d16:	46bd      	mov	sp, r7
 8008d18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008d1c:	b004      	add	sp, #16
 8008d1e:	4770      	bx	lr
 8008d20:	ffbdffbf 	.word	0xffbdffbf
 8008d24:	03ee0000 	.word	0x03ee0000

08008d28 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b083      	sub	sp, #12
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	689b      	ldr	r3, [r3, #8]
 8008d34:	f023 0201 	bic.w	r2, r3, #1
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008d3c:	2300      	movs	r3, #0
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	370c      	adds	r7, #12
 8008d42:	46bd      	mov	sp, r7
 8008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d48:	4770      	bx	lr

08008d4a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008d4a:	b580      	push	{r7, lr}
 8008d4c:	b084      	sub	sp, #16
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]
 8008d52:	460b      	mov	r3, r1
 8008d54:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008d56:	2300      	movs	r3, #0
 8008d58:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	68db      	ldr	r3, [r3, #12]
 8008d5e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008d66:	78fb      	ldrb	r3, [r7, #3]
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	d115      	bne.n	8008d98 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	68db      	ldr	r3, [r3, #12]
 8008d70:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008d78:	2001      	movs	r0, #1
 8008d7a:	f7f8 fca1 	bl	80016c0 <HAL_Delay>
      ms++;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	3301      	adds	r3, #1
 8008d82:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 fa29 	bl	80091dc <USB_GetMode>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d01e      	beq.n	8008dce <USB_SetCurrentMode+0x84>
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2b31      	cmp	r3, #49	; 0x31
 8008d94:	d9f0      	bls.n	8008d78 <USB_SetCurrentMode+0x2e>
 8008d96:	e01a      	b.n	8008dce <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008d98:	78fb      	ldrb	r3, [r7, #3]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d115      	bne.n	8008dca <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	68db      	ldr	r3, [r3, #12]
 8008da2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008daa:	2001      	movs	r0, #1
 8008dac:	f7f8 fc88 	bl	80016c0 <HAL_Delay>
      ms++;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	3301      	adds	r3, #1
 8008db4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 fa10 	bl	80091dc <USB_GetMode>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d005      	beq.n	8008dce <USB_SetCurrentMode+0x84>
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2b31      	cmp	r3, #49	; 0x31
 8008dc6:	d9f0      	bls.n	8008daa <USB_SetCurrentMode+0x60>
 8008dc8:	e001      	b.n	8008dce <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	e005      	b.n	8008dda <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2b32      	cmp	r3, #50	; 0x32
 8008dd2:	d101      	bne.n	8008dd8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	e000      	b.n	8008dda <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008dd8:	2300      	movs	r3, #0
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3710      	adds	r7, #16
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
	...

08008de4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008de4:	b084      	sub	sp, #16
 8008de6:	b580      	push	{r7, lr}
 8008de8:	b086      	sub	sp, #24
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	6078      	str	r0, [r7, #4]
 8008dee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008df2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008df6:	2300      	movs	r3, #0
 8008df8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008dfe:	2300      	movs	r3, #0
 8008e00:	613b      	str	r3, [r7, #16]
 8008e02:	e009      	b.n	8008e18 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008e04:	687a      	ldr	r2, [r7, #4]
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	3340      	adds	r3, #64	; 0x40
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	4413      	add	r3, r2
 8008e0e:	2200      	movs	r2, #0
 8008e10:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	3301      	adds	r3, #1
 8008e16:	613b      	str	r3, [r7, #16]
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	2b0e      	cmp	r3, #14
 8008e1c:	d9f2      	bls.n	8008e04 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d11c      	bne.n	8008e5e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	68fa      	ldr	r2, [r7, #12]
 8008e2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e32:	f043 0302 	orr.w	r3, r3, #2
 8008e36:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e3c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	601a      	str	r2, [r3, #0]
 8008e5c:	e005      	b.n	8008e6a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e62:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008e70:	461a      	mov	r2, r3
 8008e72:	2300      	movs	r3, #0
 8008e74:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e7c:	4619      	mov	r1, r3
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e84:	461a      	mov	r2, r3
 8008e86:	680b      	ldr	r3, [r1, #0]
 8008e88:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d10c      	bne.n	8008eaa <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d104      	bne.n	8008ea0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008e96:	2100      	movs	r1, #0
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f000 f965 	bl	8009168 <USB_SetDevSpeed>
 8008e9e:	e008      	b.n	8008eb2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008ea0:	2101      	movs	r1, #1
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f000 f960 	bl	8009168 <USB_SetDevSpeed>
 8008ea8:	e003      	b.n	8008eb2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008eaa:	2103      	movs	r1, #3
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 f95b 	bl	8009168 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008eb2:	2110      	movs	r1, #16
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 f8f3 	bl	80090a0 <USB_FlushTxFifo>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d001      	beq.n	8008ec4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f000 f91f 	bl	8009108 <USB_FlushRxFifo>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d001      	beq.n	8008ed4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008eda:	461a      	mov	r2, r3
 8008edc:	2300      	movs	r3, #0
 8008ede:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ee6:	461a      	mov	r2, r3
 8008ee8:	2300      	movs	r3, #0
 8008eea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ef8:	2300      	movs	r3, #0
 8008efa:	613b      	str	r3, [r7, #16]
 8008efc:	e043      	b.n	8008f86 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	015a      	lsls	r2, r3, #5
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	4413      	add	r3, r2
 8008f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f14:	d118      	bne.n	8008f48 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d10a      	bne.n	8008f32 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	015a      	lsls	r2, r3, #5
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	4413      	add	r3, r2
 8008f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f28:	461a      	mov	r2, r3
 8008f2a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008f2e:	6013      	str	r3, [r2, #0]
 8008f30:	e013      	b.n	8008f5a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	015a      	lsls	r2, r3, #5
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	4413      	add	r3, r2
 8008f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f3e:	461a      	mov	r2, r3
 8008f40:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008f44:	6013      	str	r3, [r2, #0]
 8008f46:	e008      	b.n	8008f5a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	015a      	lsls	r2, r3, #5
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	4413      	add	r3, r2
 8008f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f54:	461a      	mov	r2, r3
 8008f56:	2300      	movs	r3, #0
 8008f58:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	015a      	lsls	r2, r3, #5
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	4413      	add	r3, r2
 8008f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f66:	461a      	mov	r2, r3
 8008f68:	2300      	movs	r3, #0
 8008f6a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	015a      	lsls	r2, r3, #5
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	4413      	add	r3, r2
 8008f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f78:	461a      	mov	r2, r3
 8008f7a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008f7e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	3301      	adds	r3, #1
 8008f84:	613b      	str	r3, [r7, #16]
 8008f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f88:	693a      	ldr	r2, [r7, #16]
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d3b7      	bcc.n	8008efe <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f8e:	2300      	movs	r3, #0
 8008f90:	613b      	str	r3, [r7, #16]
 8008f92:	e043      	b.n	800901c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	015a      	lsls	r2, r3, #5
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	4413      	add	r3, r2
 8008f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008fa6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008faa:	d118      	bne.n	8008fde <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d10a      	bne.n	8008fc8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	015a      	lsls	r2, r3, #5
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	4413      	add	r3, r2
 8008fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fbe:	461a      	mov	r2, r3
 8008fc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008fc4:	6013      	str	r3, [r2, #0]
 8008fc6:	e013      	b.n	8008ff0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	015a      	lsls	r2, r3, #5
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	4413      	add	r3, r2
 8008fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008fda:	6013      	str	r3, [r2, #0]
 8008fdc:	e008      	b.n	8008ff0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	015a      	lsls	r2, r3, #5
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	4413      	add	r3, r2
 8008fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fea:	461a      	mov	r2, r3
 8008fec:	2300      	movs	r3, #0
 8008fee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	015a      	lsls	r2, r3, #5
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	4413      	add	r3, r2
 8008ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	2300      	movs	r3, #0
 8009000:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	015a      	lsls	r2, r3, #5
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	4413      	add	r3, r2
 800900a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800900e:	461a      	mov	r2, r3
 8009010:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009014:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	3301      	adds	r3, #1
 800901a:	613b      	str	r3, [r7, #16]
 800901c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800901e:	693a      	ldr	r2, [r7, #16]
 8009020:	429a      	cmp	r2, r3
 8009022:	d3b7      	bcc.n	8008f94 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800902a:	691b      	ldr	r3, [r3, #16]
 800902c:	68fa      	ldr	r2, [r7, #12]
 800902e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009032:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009036:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2200      	movs	r2, #0
 800903c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009044:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009048:	2b00      	cmp	r3, #0
 800904a:	d105      	bne.n	8009058 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	699b      	ldr	r3, [r3, #24]
 8009050:	f043 0210 	orr.w	r2, r3, #16
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	699a      	ldr	r2, [r3, #24]
 800905c:	4b0e      	ldr	r3, [pc, #56]	; (8009098 <USB_DevInit+0x2b4>)
 800905e:	4313      	orrs	r3, r2
 8009060:	687a      	ldr	r2, [r7, #4]
 8009062:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009066:	2b00      	cmp	r3, #0
 8009068:	d005      	beq.n	8009076 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	699b      	ldr	r3, [r3, #24]
 800906e:	f043 0208 	orr.w	r2, r3, #8
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009078:	2b01      	cmp	r3, #1
 800907a:	d105      	bne.n	8009088 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	699a      	ldr	r2, [r3, #24]
 8009080:	4b06      	ldr	r3, [pc, #24]	; (800909c <USB_DevInit+0x2b8>)
 8009082:	4313      	orrs	r3, r2
 8009084:	687a      	ldr	r2, [r7, #4]
 8009086:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009088:	7dfb      	ldrb	r3, [r7, #23]
}
 800908a:	4618      	mov	r0, r3
 800908c:	3718      	adds	r7, #24
 800908e:	46bd      	mov	sp, r7
 8009090:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009094:	b004      	add	sp, #16
 8009096:	4770      	bx	lr
 8009098:	803c3800 	.word	0x803c3800
 800909c:	40000004 	.word	0x40000004

080090a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b085      	sub	sp, #20
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80090aa:	2300      	movs	r3, #0
 80090ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	3301      	adds	r3, #1
 80090b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	4a13      	ldr	r2, [pc, #76]	; (8009104 <USB_FlushTxFifo+0x64>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d901      	bls.n	80090c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80090bc:	2303      	movs	r3, #3
 80090be:	e01b      	b.n	80090f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	691b      	ldr	r3, [r3, #16]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	daf2      	bge.n	80090ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80090c8:	2300      	movs	r3, #0
 80090ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	019b      	lsls	r3, r3, #6
 80090d0:	f043 0220 	orr.w	r2, r3, #32
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	3301      	adds	r3, #1
 80090dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	4a08      	ldr	r2, [pc, #32]	; (8009104 <USB_FlushTxFifo+0x64>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d901      	bls.n	80090ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80090e6:	2303      	movs	r3, #3
 80090e8:	e006      	b.n	80090f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	691b      	ldr	r3, [r3, #16]
 80090ee:	f003 0320 	and.w	r3, r3, #32
 80090f2:	2b20      	cmp	r3, #32
 80090f4:	d0f0      	beq.n	80090d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80090f6:	2300      	movs	r3, #0
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3714      	adds	r7, #20
 80090fc:	46bd      	mov	sp, r7
 80090fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009102:	4770      	bx	lr
 8009104:	00030d40 	.word	0x00030d40

08009108 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009108:	b480      	push	{r7}
 800910a:	b085      	sub	sp, #20
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009110:	2300      	movs	r3, #0
 8009112:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	3301      	adds	r3, #1
 8009118:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	4a11      	ldr	r2, [pc, #68]	; (8009164 <USB_FlushRxFifo+0x5c>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d901      	bls.n	8009126 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009122:	2303      	movs	r3, #3
 8009124:	e018      	b.n	8009158 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	691b      	ldr	r3, [r3, #16]
 800912a:	2b00      	cmp	r3, #0
 800912c:	daf2      	bge.n	8009114 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800912e:	2300      	movs	r3, #0
 8009130:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2210      	movs	r2, #16
 8009136:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	3301      	adds	r3, #1
 800913c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	4a08      	ldr	r2, [pc, #32]	; (8009164 <USB_FlushRxFifo+0x5c>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d901      	bls.n	800914a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009146:	2303      	movs	r3, #3
 8009148:	e006      	b.n	8009158 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	691b      	ldr	r3, [r3, #16]
 800914e:	f003 0310 	and.w	r3, r3, #16
 8009152:	2b10      	cmp	r3, #16
 8009154:	d0f0      	beq.n	8009138 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009156:	2300      	movs	r3, #0
}
 8009158:	4618      	mov	r0, r3
 800915a:	3714      	adds	r7, #20
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr
 8009164:	00030d40 	.word	0x00030d40

08009168 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009168:	b480      	push	{r7}
 800916a:	b085      	sub	sp, #20
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	460b      	mov	r3, r1
 8009172:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800917e:	681a      	ldr	r2, [r3, #0]
 8009180:	78fb      	ldrb	r3, [r7, #3]
 8009182:	68f9      	ldr	r1, [r7, #12]
 8009184:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009188:	4313      	orrs	r3, r2
 800918a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800918c:	2300      	movs	r3, #0
}
 800918e:	4618      	mov	r0, r3
 8009190:	3714      	adds	r7, #20
 8009192:	46bd      	mov	sp, r7
 8009194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009198:	4770      	bx	lr

0800919a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800919a:	b480      	push	{r7}
 800919c:	b085      	sub	sp, #20
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	68fa      	ldr	r2, [r7, #12]
 80091b0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80091b4:	f023 0303 	bic.w	r3, r3, #3
 80091b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	68fa      	ldr	r2, [r7, #12]
 80091c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091c8:	f043 0302 	orr.w	r3, r3, #2
 80091cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80091ce:	2300      	movs	r3, #0
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3714      	adds	r7, #20
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr

080091dc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80091dc:	b480      	push	{r7}
 80091de:	b083      	sub	sp, #12
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	695b      	ldr	r3, [r3, #20]
 80091e8:	f003 0301 	and.w	r3, r3, #1
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	370c      	adds	r7, #12
 80091f0:	46bd      	mov	sp, r7
 80091f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f6:	4770      	bx	lr

080091f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b085      	sub	sp, #20
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009200:	2300      	movs	r3, #0
 8009202:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	3301      	adds	r3, #1
 8009208:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	4a13      	ldr	r2, [pc, #76]	; (800925c <USB_CoreReset+0x64>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d901      	bls.n	8009216 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009212:	2303      	movs	r3, #3
 8009214:	e01b      	b.n	800924e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	691b      	ldr	r3, [r3, #16]
 800921a:	2b00      	cmp	r3, #0
 800921c:	daf2      	bge.n	8009204 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800921e:	2300      	movs	r3, #0
 8009220:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	691b      	ldr	r3, [r3, #16]
 8009226:	f043 0201 	orr.w	r2, r3, #1
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	3301      	adds	r3, #1
 8009232:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	4a09      	ldr	r2, [pc, #36]	; (800925c <USB_CoreReset+0x64>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d901      	bls.n	8009240 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800923c:	2303      	movs	r3, #3
 800923e:	e006      	b.n	800924e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	691b      	ldr	r3, [r3, #16]
 8009244:	f003 0301 	and.w	r3, r3, #1
 8009248:	2b01      	cmp	r3, #1
 800924a:	d0f0      	beq.n	800922e <USB_CoreReset+0x36>

  return HAL_OK;
 800924c:	2300      	movs	r3, #0
}
 800924e:	4618      	mov	r0, r3
 8009250:	3714      	adds	r7, #20
 8009252:	46bd      	mov	sp, r7
 8009254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009258:	4770      	bx	lr
 800925a:	bf00      	nop
 800925c:	00030d40 	.word	0x00030d40

08009260 <__NVIC_SetPriority>:
{
 8009260:	b480      	push	{r7}
 8009262:	b083      	sub	sp, #12
 8009264:	af00      	add	r7, sp, #0
 8009266:	4603      	mov	r3, r0
 8009268:	6039      	str	r1, [r7, #0]
 800926a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800926c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009270:	2b00      	cmp	r3, #0
 8009272:	db0a      	blt.n	800928a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	b2da      	uxtb	r2, r3
 8009278:	490c      	ldr	r1, [pc, #48]	; (80092ac <__NVIC_SetPriority+0x4c>)
 800927a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800927e:	0112      	lsls	r2, r2, #4
 8009280:	b2d2      	uxtb	r2, r2
 8009282:	440b      	add	r3, r1
 8009284:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009288:	e00a      	b.n	80092a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	b2da      	uxtb	r2, r3
 800928e:	4908      	ldr	r1, [pc, #32]	; (80092b0 <__NVIC_SetPriority+0x50>)
 8009290:	88fb      	ldrh	r3, [r7, #6]
 8009292:	f003 030f 	and.w	r3, r3, #15
 8009296:	3b04      	subs	r3, #4
 8009298:	0112      	lsls	r2, r2, #4
 800929a:	b2d2      	uxtb	r2, r2
 800929c:	440b      	add	r3, r1
 800929e:	761a      	strb	r2, [r3, #24]
}
 80092a0:	bf00      	nop
 80092a2:	370c      	adds	r7, #12
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr
 80092ac:	e000e100 	.word	0xe000e100
 80092b0:	e000ed00 	.word	0xe000ed00

080092b4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80092b4:	b580      	push	{r7, lr}
 80092b6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80092b8:	4b05      	ldr	r3, [pc, #20]	; (80092d0 <SysTick_Handler+0x1c>)
 80092ba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80092bc:	f002 f960 	bl	800b580 <xTaskGetSchedulerState>
 80092c0:	4603      	mov	r3, r0
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	d001      	beq.n	80092ca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80092c6:	f000 fd97 	bl	8009df8 <xPortSysTickHandler>
  }
}
 80092ca:	bf00      	nop
 80092cc:	bd80      	pop	{r7, pc}
 80092ce:	bf00      	nop
 80092d0:	e000e010 	.word	0xe000e010

080092d4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80092d4:	b580      	push	{r7, lr}
 80092d6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80092d8:	2100      	movs	r1, #0
 80092da:	f06f 0004 	mvn.w	r0, #4
 80092de:	f7ff ffbf 	bl	8009260 <__NVIC_SetPriority>
#endif
}
 80092e2:	bf00      	nop
 80092e4:	bd80      	pop	{r7, pc}
	...

080092e8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80092e8:	b480      	push	{r7}
 80092ea:	b083      	sub	sp, #12
 80092ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092ee:	f3ef 8305 	mrs	r3, IPSR
 80092f2:	603b      	str	r3, [r7, #0]
  return(result);
 80092f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d003      	beq.n	8009302 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80092fa:	f06f 0305 	mvn.w	r3, #5
 80092fe:	607b      	str	r3, [r7, #4]
 8009300:	e00c      	b.n	800931c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009302:	4b0a      	ldr	r3, [pc, #40]	; (800932c <osKernelInitialize+0x44>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d105      	bne.n	8009316 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800930a:	4b08      	ldr	r3, [pc, #32]	; (800932c <osKernelInitialize+0x44>)
 800930c:	2201      	movs	r2, #1
 800930e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009310:	2300      	movs	r3, #0
 8009312:	607b      	str	r3, [r7, #4]
 8009314:	e002      	b.n	800931c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009316:	f04f 33ff 	mov.w	r3, #4294967295
 800931a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800931c:	687b      	ldr	r3, [r7, #4]
}
 800931e:	4618      	mov	r0, r3
 8009320:	370c      	adds	r7, #12
 8009322:	46bd      	mov	sp, r7
 8009324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009328:	4770      	bx	lr
 800932a:	bf00      	nop
 800932c:	2400089c 	.word	0x2400089c

08009330 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009330:	b580      	push	{r7, lr}
 8009332:	b082      	sub	sp, #8
 8009334:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009336:	f3ef 8305 	mrs	r3, IPSR
 800933a:	603b      	str	r3, [r7, #0]
  return(result);
 800933c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800933e:	2b00      	cmp	r3, #0
 8009340:	d003      	beq.n	800934a <osKernelStart+0x1a>
    stat = osErrorISR;
 8009342:	f06f 0305 	mvn.w	r3, #5
 8009346:	607b      	str	r3, [r7, #4]
 8009348:	e010      	b.n	800936c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800934a:	4b0b      	ldr	r3, [pc, #44]	; (8009378 <osKernelStart+0x48>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	2b01      	cmp	r3, #1
 8009350:	d109      	bne.n	8009366 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009352:	f7ff ffbf 	bl	80092d4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009356:	4b08      	ldr	r3, [pc, #32]	; (8009378 <osKernelStart+0x48>)
 8009358:	2202      	movs	r2, #2
 800935a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800935c:	f001 fcb4 	bl	800acc8 <vTaskStartScheduler>
      stat = osOK;
 8009360:	2300      	movs	r3, #0
 8009362:	607b      	str	r3, [r7, #4]
 8009364:	e002      	b.n	800936c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009366:	f04f 33ff 	mov.w	r3, #4294967295
 800936a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800936c:	687b      	ldr	r3, [r7, #4]
}
 800936e:	4618      	mov	r0, r3
 8009370:	3708      	adds	r7, #8
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
 8009376:	bf00      	nop
 8009378:	2400089c 	.word	0x2400089c

0800937c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800937c:	b580      	push	{r7, lr}
 800937e:	b08e      	sub	sp, #56	; 0x38
 8009380:	af04      	add	r7, sp, #16
 8009382:	60f8      	str	r0, [r7, #12]
 8009384:	60b9      	str	r1, [r7, #8]
 8009386:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009388:	2300      	movs	r3, #0
 800938a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800938c:	f3ef 8305 	mrs	r3, IPSR
 8009390:	617b      	str	r3, [r7, #20]
  return(result);
 8009392:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009394:	2b00      	cmp	r3, #0
 8009396:	d17e      	bne.n	8009496 <osThreadNew+0x11a>
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d07b      	beq.n	8009496 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800939e:	2380      	movs	r3, #128	; 0x80
 80093a0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80093a2:	2318      	movs	r3, #24
 80093a4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80093a6:	2300      	movs	r3, #0
 80093a8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80093aa:	f04f 33ff 	mov.w	r3, #4294967295
 80093ae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d045      	beq.n	8009442 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d002      	beq.n	80093c4 <osThreadNew+0x48>
        name = attr->name;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	699b      	ldr	r3, [r3, #24]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d002      	beq.n	80093d2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	699b      	ldr	r3, [r3, #24]
 80093d0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80093d2:	69fb      	ldr	r3, [r7, #28]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d008      	beq.n	80093ea <osThreadNew+0x6e>
 80093d8:	69fb      	ldr	r3, [r7, #28]
 80093da:	2b38      	cmp	r3, #56	; 0x38
 80093dc:	d805      	bhi.n	80093ea <osThreadNew+0x6e>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	685b      	ldr	r3, [r3, #4]
 80093e2:	f003 0301 	and.w	r3, r3, #1
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d001      	beq.n	80093ee <osThreadNew+0x72>
        return (NULL);
 80093ea:	2300      	movs	r3, #0
 80093ec:	e054      	b.n	8009498 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	695b      	ldr	r3, [r3, #20]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d003      	beq.n	80093fe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	695b      	ldr	r3, [r3, #20]
 80093fa:	089b      	lsrs	r3, r3, #2
 80093fc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	689b      	ldr	r3, [r3, #8]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d00e      	beq.n	8009424 <osThreadNew+0xa8>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	68db      	ldr	r3, [r3, #12]
 800940a:	2ba7      	cmp	r3, #167	; 0xa7
 800940c:	d90a      	bls.n	8009424 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009412:	2b00      	cmp	r3, #0
 8009414:	d006      	beq.n	8009424 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	695b      	ldr	r3, [r3, #20]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d002      	beq.n	8009424 <osThreadNew+0xa8>
        mem = 1;
 800941e:	2301      	movs	r3, #1
 8009420:	61bb      	str	r3, [r7, #24]
 8009422:	e010      	b.n	8009446 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	689b      	ldr	r3, [r3, #8]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d10c      	bne.n	8009446 <osThreadNew+0xca>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	68db      	ldr	r3, [r3, #12]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d108      	bne.n	8009446 <osThreadNew+0xca>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	691b      	ldr	r3, [r3, #16]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d104      	bne.n	8009446 <osThreadNew+0xca>
          mem = 0;
 800943c:	2300      	movs	r3, #0
 800943e:	61bb      	str	r3, [r7, #24]
 8009440:	e001      	b.n	8009446 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009442:	2300      	movs	r3, #0
 8009444:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009446:	69bb      	ldr	r3, [r7, #24]
 8009448:	2b01      	cmp	r3, #1
 800944a:	d110      	bne.n	800946e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009454:	9202      	str	r2, [sp, #8]
 8009456:	9301      	str	r3, [sp, #4]
 8009458:	69fb      	ldr	r3, [r7, #28]
 800945a:	9300      	str	r3, [sp, #0]
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	6a3a      	ldr	r2, [r7, #32]
 8009460:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009462:	68f8      	ldr	r0, [r7, #12]
 8009464:	f001 fa44 	bl	800a8f0 <xTaskCreateStatic>
 8009468:	4603      	mov	r3, r0
 800946a:	613b      	str	r3, [r7, #16]
 800946c:	e013      	b.n	8009496 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800946e:	69bb      	ldr	r3, [r7, #24]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d110      	bne.n	8009496 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009474:	6a3b      	ldr	r3, [r7, #32]
 8009476:	b29a      	uxth	r2, r3
 8009478:	f107 0310 	add.w	r3, r7, #16
 800947c:	9301      	str	r3, [sp, #4]
 800947e:	69fb      	ldr	r3, [r7, #28]
 8009480:	9300      	str	r3, [sp, #0]
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009486:	68f8      	ldr	r0, [r7, #12]
 8009488:	f001 fa8f 	bl	800a9aa <xTaskCreate>
 800948c:	4603      	mov	r3, r0
 800948e:	2b01      	cmp	r3, #1
 8009490:	d001      	beq.n	8009496 <osThreadNew+0x11a>
            hTask = NULL;
 8009492:	2300      	movs	r3, #0
 8009494:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009496:	693b      	ldr	r3, [r7, #16]
}
 8009498:	4618      	mov	r0, r3
 800949a:	3728      	adds	r7, #40	; 0x28
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}

080094a0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b084      	sub	sp, #16
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80094a8:	f3ef 8305 	mrs	r3, IPSR
 80094ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80094ae:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d003      	beq.n	80094bc <osDelay+0x1c>
    stat = osErrorISR;
 80094b4:	f06f 0305 	mvn.w	r3, #5
 80094b8:	60fb      	str	r3, [r7, #12]
 80094ba:	e007      	b.n	80094cc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80094bc:	2300      	movs	r3, #0
 80094be:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d002      	beq.n	80094cc <osDelay+0x2c>
      vTaskDelay(ticks);
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f001 fbca 	bl	800ac60 <vTaskDelay>
    }
  }

  return (stat);
 80094cc:	68fb      	ldr	r3, [r7, #12]
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3710      	adds	r7, #16
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
	...

080094d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80094d8:	b480      	push	{r7}
 80094da:	b085      	sub	sp, #20
 80094dc:	af00      	add	r7, sp, #0
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	60b9      	str	r1, [r7, #8]
 80094e2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	4a07      	ldr	r2, [pc, #28]	; (8009504 <vApplicationGetIdleTaskMemory+0x2c>)
 80094e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	4a06      	ldr	r2, [pc, #24]	; (8009508 <vApplicationGetIdleTaskMemory+0x30>)
 80094ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2280      	movs	r2, #128	; 0x80
 80094f4:	601a      	str	r2, [r3, #0]
}
 80094f6:	bf00      	nop
 80094f8:	3714      	adds	r7, #20
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr
 8009502:	bf00      	nop
 8009504:	240008a0 	.word	0x240008a0
 8009508:	24000948 	.word	0x24000948

0800950c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800950c:	b480      	push	{r7}
 800950e:	b085      	sub	sp, #20
 8009510:	af00      	add	r7, sp, #0
 8009512:	60f8      	str	r0, [r7, #12]
 8009514:	60b9      	str	r1, [r7, #8]
 8009516:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	4a07      	ldr	r2, [pc, #28]	; (8009538 <vApplicationGetTimerTaskMemory+0x2c>)
 800951c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	4a06      	ldr	r2, [pc, #24]	; (800953c <vApplicationGetTimerTaskMemory+0x30>)
 8009522:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f44f 7280 	mov.w	r2, #256	; 0x100
 800952a:	601a      	str	r2, [r3, #0]
}
 800952c:	bf00      	nop
 800952e:	3714      	adds	r7, #20
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr
 8009538:	24000b48 	.word	0x24000b48
 800953c:	24000bf0 	.word	0x24000bf0

08009540 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b08a      	sub	sp, #40	; 0x28
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009548:	2300      	movs	r3, #0
 800954a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800954c:	f001 fc2c 	bl	800ada8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009550:	4b5b      	ldr	r3, [pc, #364]	; (80096c0 <pvPortMalloc+0x180>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d101      	bne.n	800955c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009558:	f000 f920 	bl	800979c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800955c:	4b59      	ldr	r3, [pc, #356]	; (80096c4 <pvPortMalloc+0x184>)
 800955e:	681a      	ldr	r2, [r3, #0]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	4013      	ands	r3, r2
 8009564:	2b00      	cmp	r3, #0
 8009566:	f040 8093 	bne.w	8009690 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d01d      	beq.n	80095ac <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009570:	2208      	movs	r2, #8
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	4413      	add	r3, r2
 8009576:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f003 0307 	and.w	r3, r3, #7
 800957e:	2b00      	cmp	r3, #0
 8009580:	d014      	beq.n	80095ac <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f023 0307 	bic.w	r3, r3, #7
 8009588:	3308      	adds	r3, #8
 800958a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f003 0307 	and.w	r3, r3, #7
 8009592:	2b00      	cmp	r3, #0
 8009594:	d00a      	beq.n	80095ac <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800959a:	f383 8811 	msr	BASEPRI, r3
 800959e:	f3bf 8f6f 	isb	sy
 80095a2:	f3bf 8f4f 	dsb	sy
 80095a6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80095a8:	bf00      	nop
 80095aa:	e7fe      	b.n	80095aa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d06e      	beq.n	8009690 <pvPortMalloc+0x150>
 80095b2:	4b45      	ldr	r3, [pc, #276]	; (80096c8 <pvPortMalloc+0x188>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	687a      	ldr	r2, [r7, #4]
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d869      	bhi.n	8009690 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80095bc:	4b43      	ldr	r3, [pc, #268]	; (80096cc <pvPortMalloc+0x18c>)
 80095be:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80095c0:	4b42      	ldr	r3, [pc, #264]	; (80096cc <pvPortMalloc+0x18c>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80095c6:	e004      	b.n	80095d2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80095c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ca:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80095cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80095d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d4:	685b      	ldr	r3, [r3, #4]
 80095d6:	687a      	ldr	r2, [r7, #4]
 80095d8:	429a      	cmp	r2, r3
 80095da:	d903      	bls.n	80095e4 <pvPortMalloc+0xa4>
 80095dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d1f1      	bne.n	80095c8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80095e4:	4b36      	ldr	r3, [pc, #216]	; (80096c0 <pvPortMalloc+0x180>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d050      	beq.n	8009690 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80095ee:	6a3b      	ldr	r3, [r7, #32]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	2208      	movs	r2, #8
 80095f4:	4413      	add	r3, r2
 80095f6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80095f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095fa:	681a      	ldr	r2, [r3, #0]
 80095fc:	6a3b      	ldr	r3, [r7, #32]
 80095fe:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009602:	685a      	ldr	r2, [r3, #4]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	1ad2      	subs	r2, r2, r3
 8009608:	2308      	movs	r3, #8
 800960a:	005b      	lsls	r3, r3, #1
 800960c:	429a      	cmp	r2, r3
 800960e:	d91f      	bls.n	8009650 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	4413      	add	r3, r2
 8009616:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009618:	69bb      	ldr	r3, [r7, #24]
 800961a:	f003 0307 	and.w	r3, r3, #7
 800961e:	2b00      	cmp	r3, #0
 8009620:	d00a      	beq.n	8009638 <pvPortMalloc+0xf8>
	__asm volatile
 8009622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009626:	f383 8811 	msr	BASEPRI, r3
 800962a:	f3bf 8f6f 	isb	sy
 800962e:	f3bf 8f4f 	dsb	sy
 8009632:	613b      	str	r3, [r7, #16]
}
 8009634:	bf00      	nop
 8009636:	e7fe      	b.n	8009636 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800963a:	685a      	ldr	r2, [r3, #4]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	1ad2      	subs	r2, r2, r3
 8009640:	69bb      	ldr	r3, [r7, #24]
 8009642:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009646:	687a      	ldr	r2, [r7, #4]
 8009648:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800964a:	69b8      	ldr	r0, [r7, #24]
 800964c:	f000 f908 	bl	8009860 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009650:	4b1d      	ldr	r3, [pc, #116]	; (80096c8 <pvPortMalloc+0x188>)
 8009652:	681a      	ldr	r2, [r3, #0]
 8009654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009656:	685b      	ldr	r3, [r3, #4]
 8009658:	1ad3      	subs	r3, r2, r3
 800965a:	4a1b      	ldr	r2, [pc, #108]	; (80096c8 <pvPortMalloc+0x188>)
 800965c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800965e:	4b1a      	ldr	r3, [pc, #104]	; (80096c8 <pvPortMalloc+0x188>)
 8009660:	681a      	ldr	r2, [r3, #0]
 8009662:	4b1b      	ldr	r3, [pc, #108]	; (80096d0 <pvPortMalloc+0x190>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	429a      	cmp	r2, r3
 8009668:	d203      	bcs.n	8009672 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800966a:	4b17      	ldr	r3, [pc, #92]	; (80096c8 <pvPortMalloc+0x188>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4a18      	ldr	r2, [pc, #96]	; (80096d0 <pvPortMalloc+0x190>)
 8009670:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009674:	685a      	ldr	r2, [r3, #4]
 8009676:	4b13      	ldr	r3, [pc, #76]	; (80096c4 <pvPortMalloc+0x184>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	431a      	orrs	r2, r3
 800967c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800967e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009682:	2200      	movs	r2, #0
 8009684:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009686:	4b13      	ldr	r3, [pc, #76]	; (80096d4 <pvPortMalloc+0x194>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	3301      	adds	r3, #1
 800968c:	4a11      	ldr	r2, [pc, #68]	; (80096d4 <pvPortMalloc+0x194>)
 800968e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009690:	f001 fb98 	bl	800adc4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009694:	69fb      	ldr	r3, [r7, #28]
 8009696:	f003 0307 	and.w	r3, r3, #7
 800969a:	2b00      	cmp	r3, #0
 800969c:	d00a      	beq.n	80096b4 <pvPortMalloc+0x174>
	__asm volatile
 800969e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a2:	f383 8811 	msr	BASEPRI, r3
 80096a6:	f3bf 8f6f 	isb	sy
 80096aa:	f3bf 8f4f 	dsb	sy
 80096ae:	60fb      	str	r3, [r7, #12]
}
 80096b0:	bf00      	nop
 80096b2:	e7fe      	b.n	80096b2 <pvPortMalloc+0x172>
	return pvReturn;
 80096b4:	69fb      	ldr	r3, [r7, #28]
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3728      	adds	r7, #40	; 0x28
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
 80096be:	bf00      	nop
 80096c0:	24004bf8 	.word	0x24004bf8
 80096c4:	24004c0c 	.word	0x24004c0c
 80096c8:	24004bfc 	.word	0x24004bfc
 80096cc:	24004bf0 	.word	0x24004bf0
 80096d0:	24004c00 	.word	0x24004c00
 80096d4:	24004c04 	.word	0x24004c04

080096d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b086      	sub	sp, #24
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d04d      	beq.n	8009786 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80096ea:	2308      	movs	r3, #8
 80096ec:	425b      	negs	r3, r3
 80096ee:	697a      	ldr	r2, [r7, #20]
 80096f0:	4413      	add	r3, r2
 80096f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	685a      	ldr	r2, [r3, #4]
 80096fc:	4b24      	ldr	r3, [pc, #144]	; (8009790 <vPortFree+0xb8>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4013      	ands	r3, r2
 8009702:	2b00      	cmp	r3, #0
 8009704:	d10a      	bne.n	800971c <vPortFree+0x44>
	__asm volatile
 8009706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800970a:	f383 8811 	msr	BASEPRI, r3
 800970e:	f3bf 8f6f 	isb	sy
 8009712:	f3bf 8f4f 	dsb	sy
 8009716:	60fb      	str	r3, [r7, #12]
}
 8009718:	bf00      	nop
 800971a:	e7fe      	b.n	800971a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d00a      	beq.n	800973a <vPortFree+0x62>
	__asm volatile
 8009724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009728:	f383 8811 	msr	BASEPRI, r3
 800972c:	f3bf 8f6f 	isb	sy
 8009730:	f3bf 8f4f 	dsb	sy
 8009734:	60bb      	str	r3, [r7, #8]
}
 8009736:	bf00      	nop
 8009738:	e7fe      	b.n	8009738 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	685a      	ldr	r2, [r3, #4]
 800973e:	4b14      	ldr	r3, [pc, #80]	; (8009790 <vPortFree+0xb8>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	4013      	ands	r3, r2
 8009744:	2b00      	cmp	r3, #0
 8009746:	d01e      	beq.n	8009786 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d11a      	bne.n	8009786 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	685a      	ldr	r2, [r3, #4]
 8009754:	4b0e      	ldr	r3, [pc, #56]	; (8009790 <vPortFree+0xb8>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	43db      	mvns	r3, r3
 800975a:	401a      	ands	r2, r3
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009760:	f001 fb22 	bl	800ada8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	685a      	ldr	r2, [r3, #4]
 8009768:	4b0a      	ldr	r3, [pc, #40]	; (8009794 <vPortFree+0xbc>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4413      	add	r3, r2
 800976e:	4a09      	ldr	r2, [pc, #36]	; (8009794 <vPortFree+0xbc>)
 8009770:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009772:	6938      	ldr	r0, [r7, #16]
 8009774:	f000 f874 	bl	8009860 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009778:	4b07      	ldr	r3, [pc, #28]	; (8009798 <vPortFree+0xc0>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	3301      	adds	r3, #1
 800977e:	4a06      	ldr	r2, [pc, #24]	; (8009798 <vPortFree+0xc0>)
 8009780:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009782:	f001 fb1f 	bl	800adc4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009786:	bf00      	nop
 8009788:	3718      	adds	r7, #24
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	24004c0c 	.word	0x24004c0c
 8009794:	24004bfc 	.word	0x24004bfc
 8009798:	24004c08 	.word	0x24004c08

0800979c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800979c:	b480      	push	{r7}
 800979e:	b085      	sub	sp, #20
 80097a0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80097a2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80097a6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80097a8:	4b27      	ldr	r3, [pc, #156]	; (8009848 <prvHeapInit+0xac>)
 80097aa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f003 0307 	and.w	r3, r3, #7
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d00c      	beq.n	80097d0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	3307      	adds	r3, #7
 80097ba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	f023 0307 	bic.w	r3, r3, #7
 80097c2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80097c4:	68ba      	ldr	r2, [r7, #8]
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	1ad3      	subs	r3, r2, r3
 80097ca:	4a1f      	ldr	r2, [pc, #124]	; (8009848 <prvHeapInit+0xac>)
 80097cc:	4413      	add	r3, r2
 80097ce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80097d4:	4a1d      	ldr	r2, [pc, #116]	; (800984c <prvHeapInit+0xb0>)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80097da:	4b1c      	ldr	r3, [pc, #112]	; (800984c <prvHeapInit+0xb0>)
 80097dc:	2200      	movs	r2, #0
 80097de:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	68ba      	ldr	r2, [r7, #8]
 80097e4:	4413      	add	r3, r2
 80097e6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80097e8:	2208      	movs	r2, #8
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	1a9b      	subs	r3, r3, r2
 80097ee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f023 0307 	bic.w	r3, r3, #7
 80097f6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	4a15      	ldr	r2, [pc, #84]	; (8009850 <prvHeapInit+0xb4>)
 80097fc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80097fe:	4b14      	ldr	r3, [pc, #80]	; (8009850 <prvHeapInit+0xb4>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	2200      	movs	r2, #0
 8009804:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009806:	4b12      	ldr	r3, [pc, #72]	; (8009850 <prvHeapInit+0xb4>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	2200      	movs	r2, #0
 800980c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	68fa      	ldr	r2, [r7, #12]
 8009816:	1ad2      	subs	r2, r2, r3
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800981c:	4b0c      	ldr	r3, [pc, #48]	; (8009850 <prvHeapInit+0xb4>)
 800981e:	681a      	ldr	r2, [r3, #0]
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	4a0a      	ldr	r2, [pc, #40]	; (8009854 <prvHeapInit+0xb8>)
 800982a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	4a09      	ldr	r2, [pc, #36]	; (8009858 <prvHeapInit+0xbc>)
 8009832:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009834:	4b09      	ldr	r3, [pc, #36]	; (800985c <prvHeapInit+0xc0>)
 8009836:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800983a:	601a      	str	r2, [r3, #0]
}
 800983c:	bf00      	nop
 800983e:	3714      	adds	r7, #20
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr
 8009848:	24000ff0 	.word	0x24000ff0
 800984c:	24004bf0 	.word	0x24004bf0
 8009850:	24004bf8 	.word	0x24004bf8
 8009854:	24004c00 	.word	0x24004c00
 8009858:	24004bfc 	.word	0x24004bfc
 800985c:	24004c0c 	.word	0x24004c0c

08009860 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009860:	b480      	push	{r7}
 8009862:	b085      	sub	sp, #20
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009868:	4b28      	ldr	r3, [pc, #160]	; (800990c <prvInsertBlockIntoFreeList+0xac>)
 800986a:	60fb      	str	r3, [r7, #12]
 800986c:	e002      	b.n	8009874 <prvInsertBlockIntoFreeList+0x14>
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	60fb      	str	r3, [r7, #12]
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	687a      	ldr	r2, [r7, #4]
 800987a:	429a      	cmp	r2, r3
 800987c:	d8f7      	bhi.n	800986e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	685b      	ldr	r3, [r3, #4]
 8009886:	68ba      	ldr	r2, [r7, #8]
 8009888:	4413      	add	r3, r2
 800988a:	687a      	ldr	r2, [r7, #4]
 800988c:	429a      	cmp	r2, r3
 800988e:	d108      	bne.n	80098a2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	685a      	ldr	r2, [r3, #4]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	441a      	add	r2, r3
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	68ba      	ldr	r2, [r7, #8]
 80098ac:	441a      	add	r2, r3
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	429a      	cmp	r2, r3
 80098b4:	d118      	bne.n	80098e8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681a      	ldr	r2, [r3, #0]
 80098ba:	4b15      	ldr	r3, [pc, #84]	; (8009910 <prvInsertBlockIntoFreeList+0xb0>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	429a      	cmp	r2, r3
 80098c0:	d00d      	beq.n	80098de <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	685a      	ldr	r2, [r3, #4]
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	685b      	ldr	r3, [r3, #4]
 80098cc:	441a      	add	r2, r3
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	681a      	ldr	r2, [r3, #0]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	601a      	str	r2, [r3, #0]
 80098dc:	e008      	b.n	80098f0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80098de:	4b0c      	ldr	r3, [pc, #48]	; (8009910 <prvInsertBlockIntoFreeList+0xb0>)
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	601a      	str	r2, [r3, #0]
 80098e6:	e003      	b.n	80098f0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681a      	ldr	r2, [r3, #0]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80098f0:	68fa      	ldr	r2, [r7, #12]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d002      	beq.n	80098fe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	687a      	ldr	r2, [r7, #4]
 80098fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80098fe:	bf00      	nop
 8009900:	3714      	adds	r7, #20
 8009902:	46bd      	mov	sp, r7
 8009904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009908:	4770      	bx	lr
 800990a:	bf00      	nop
 800990c:	24004bf0 	.word	0x24004bf0
 8009910:	24004bf8 	.word	0x24004bf8

08009914 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009914:	b480      	push	{r7}
 8009916:	b083      	sub	sp, #12
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f103 0208 	add.w	r2, r3, #8
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f04f 32ff 	mov.w	r2, #4294967295
 800992c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f103 0208 	add.w	r2, r3, #8
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f103 0208 	add.w	r2, r3, #8
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2200      	movs	r2, #0
 8009946:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009948:	bf00      	nop
 800994a:	370c      	adds	r7, #12
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr

08009954 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009954:	b480      	push	{r7}
 8009956:	b083      	sub	sp, #12
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2200      	movs	r2, #0
 8009960:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009962:	bf00      	nop
 8009964:	370c      	adds	r7, #12
 8009966:	46bd      	mov	sp, r7
 8009968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996c:	4770      	bx	lr

0800996e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800996e:	b480      	push	{r7}
 8009970:	b085      	sub	sp, #20
 8009972:	af00      	add	r7, sp, #0
 8009974:	6078      	str	r0, [r7, #4]
 8009976:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	68fa      	ldr	r2, [r7, #12]
 8009982:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	689a      	ldr	r2, [r3, #8]
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	689b      	ldr	r3, [r3, #8]
 8009990:	683a      	ldr	r2, [r7, #0]
 8009992:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	683a      	ldr	r2, [r7, #0]
 8009998:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	687a      	ldr	r2, [r7, #4]
 800999e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	1c5a      	adds	r2, r3, #1
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	601a      	str	r2, [r3, #0]
}
 80099aa:	bf00      	nop
 80099ac:	3714      	adds	r7, #20
 80099ae:	46bd      	mov	sp, r7
 80099b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b4:	4770      	bx	lr

080099b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80099b6:	b480      	push	{r7}
 80099b8:	b085      	sub	sp, #20
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	6078      	str	r0, [r7, #4]
 80099be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099cc:	d103      	bne.n	80099d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	691b      	ldr	r3, [r3, #16]
 80099d2:	60fb      	str	r3, [r7, #12]
 80099d4:	e00c      	b.n	80099f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	3308      	adds	r3, #8
 80099da:	60fb      	str	r3, [r7, #12]
 80099dc:	e002      	b.n	80099e4 <vListInsert+0x2e>
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	685b      	ldr	r3, [r3, #4]
 80099e2:	60fb      	str	r3, [r7, #12]
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	68ba      	ldr	r2, [r7, #8]
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d2f6      	bcs.n	80099de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	685a      	ldr	r2, [r3, #4]
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	683a      	ldr	r2, [r7, #0]
 80099fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	68fa      	ldr	r2, [r7, #12]
 8009a04:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	683a      	ldr	r2, [r7, #0]
 8009a0a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	1c5a      	adds	r2, r3, #1
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	601a      	str	r2, [r3, #0]
}
 8009a1c:	bf00      	nop
 8009a1e:	3714      	adds	r7, #20
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr

08009a28 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b085      	sub	sp, #20
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	691b      	ldr	r3, [r3, #16]
 8009a34:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	687a      	ldr	r2, [r7, #4]
 8009a3c:	6892      	ldr	r2, [r2, #8]
 8009a3e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	689b      	ldr	r3, [r3, #8]
 8009a44:	687a      	ldr	r2, [r7, #4]
 8009a46:	6852      	ldr	r2, [r2, #4]
 8009a48:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	685b      	ldr	r3, [r3, #4]
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d103      	bne.n	8009a5c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	689a      	ldr	r2, [r3, #8]
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	1e5a      	subs	r2, r3, #1
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3714      	adds	r7, #20
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr

08009a7c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b085      	sub	sp, #20
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	60f8      	str	r0, [r7, #12]
 8009a84:	60b9      	str	r1, [r7, #8]
 8009a86:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	3b04      	subs	r3, #4
 8009a8c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009a94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	3b04      	subs	r3, #4
 8009a9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	f023 0201 	bic.w	r2, r3, #1
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	3b04      	subs	r3, #4
 8009aaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009aac:	4a0c      	ldr	r2, [pc, #48]	; (8009ae0 <pxPortInitialiseStack+0x64>)
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	3b14      	subs	r3, #20
 8009ab6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	3b04      	subs	r3, #4
 8009ac2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f06f 0202 	mvn.w	r2, #2
 8009aca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	3b20      	subs	r3, #32
 8009ad0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3714      	adds	r7, #20
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr
 8009ae0:	08009ae5 	.word	0x08009ae5

08009ae4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b085      	sub	sp, #20
 8009ae8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009aea:	2300      	movs	r3, #0
 8009aec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009aee:	4b12      	ldr	r3, [pc, #72]	; (8009b38 <prvTaskExitError+0x54>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009af6:	d00a      	beq.n	8009b0e <prvTaskExitError+0x2a>
	__asm volatile
 8009af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009afc:	f383 8811 	msr	BASEPRI, r3
 8009b00:	f3bf 8f6f 	isb	sy
 8009b04:	f3bf 8f4f 	dsb	sy
 8009b08:	60fb      	str	r3, [r7, #12]
}
 8009b0a:	bf00      	nop
 8009b0c:	e7fe      	b.n	8009b0c <prvTaskExitError+0x28>
	__asm volatile
 8009b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b12:	f383 8811 	msr	BASEPRI, r3
 8009b16:	f3bf 8f6f 	isb	sy
 8009b1a:	f3bf 8f4f 	dsb	sy
 8009b1e:	60bb      	str	r3, [r7, #8]
}
 8009b20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009b22:	bf00      	nop
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d0fc      	beq.n	8009b24 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009b2a:	bf00      	nop
 8009b2c:	bf00      	nop
 8009b2e:	3714      	adds	r7, #20
 8009b30:	46bd      	mov	sp, r7
 8009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b36:	4770      	bx	lr
 8009b38:	24000010 	.word	0x24000010
 8009b3c:	00000000 	.word	0x00000000

08009b40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009b40:	4b07      	ldr	r3, [pc, #28]	; (8009b60 <pxCurrentTCBConst2>)
 8009b42:	6819      	ldr	r1, [r3, #0]
 8009b44:	6808      	ldr	r0, [r1, #0]
 8009b46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b4a:	f380 8809 	msr	PSP, r0
 8009b4e:	f3bf 8f6f 	isb	sy
 8009b52:	f04f 0000 	mov.w	r0, #0
 8009b56:	f380 8811 	msr	BASEPRI, r0
 8009b5a:	4770      	bx	lr
 8009b5c:	f3af 8000 	nop.w

08009b60 <pxCurrentTCBConst2>:
 8009b60:	24004c58 	.word	0x24004c58
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009b64:	bf00      	nop
 8009b66:	bf00      	nop

08009b68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009b68:	4808      	ldr	r0, [pc, #32]	; (8009b8c <prvPortStartFirstTask+0x24>)
 8009b6a:	6800      	ldr	r0, [r0, #0]
 8009b6c:	6800      	ldr	r0, [r0, #0]
 8009b6e:	f380 8808 	msr	MSP, r0
 8009b72:	f04f 0000 	mov.w	r0, #0
 8009b76:	f380 8814 	msr	CONTROL, r0
 8009b7a:	b662      	cpsie	i
 8009b7c:	b661      	cpsie	f
 8009b7e:	f3bf 8f4f 	dsb	sy
 8009b82:	f3bf 8f6f 	isb	sy
 8009b86:	df00      	svc	0
 8009b88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009b8a:	bf00      	nop
 8009b8c:	e000ed08 	.word	0xe000ed08

08009b90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b086      	sub	sp, #24
 8009b94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009b96:	4b46      	ldr	r3, [pc, #280]	; (8009cb0 <xPortStartScheduler+0x120>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	4a46      	ldr	r2, [pc, #280]	; (8009cb4 <xPortStartScheduler+0x124>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d10a      	bne.n	8009bb6 <xPortStartScheduler+0x26>
	__asm volatile
 8009ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba4:	f383 8811 	msr	BASEPRI, r3
 8009ba8:	f3bf 8f6f 	isb	sy
 8009bac:	f3bf 8f4f 	dsb	sy
 8009bb0:	613b      	str	r3, [r7, #16]
}
 8009bb2:	bf00      	nop
 8009bb4:	e7fe      	b.n	8009bb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009bb6:	4b3e      	ldr	r3, [pc, #248]	; (8009cb0 <xPortStartScheduler+0x120>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4a3f      	ldr	r2, [pc, #252]	; (8009cb8 <xPortStartScheduler+0x128>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d10a      	bne.n	8009bd6 <xPortStartScheduler+0x46>
	__asm volatile
 8009bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc4:	f383 8811 	msr	BASEPRI, r3
 8009bc8:	f3bf 8f6f 	isb	sy
 8009bcc:	f3bf 8f4f 	dsb	sy
 8009bd0:	60fb      	str	r3, [r7, #12]
}
 8009bd2:	bf00      	nop
 8009bd4:	e7fe      	b.n	8009bd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009bd6:	4b39      	ldr	r3, [pc, #228]	; (8009cbc <xPortStartScheduler+0x12c>)
 8009bd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	781b      	ldrb	r3, [r3, #0]
 8009bde:	b2db      	uxtb	r3, r3
 8009be0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	22ff      	movs	r2, #255	; 0xff
 8009be6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	781b      	ldrb	r3, [r3, #0]
 8009bec:	b2db      	uxtb	r3, r3
 8009bee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009bf0:	78fb      	ldrb	r3, [r7, #3]
 8009bf2:	b2db      	uxtb	r3, r3
 8009bf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009bf8:	b2da      	uxtb	r2, r3
 8009bfa:	4b31      	ldr	r3, [pc, #196]	; (8009cc0 <xPortStartScheduler+0x130>)
 8009bfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009bfe:	4b31      	ldr	r3, [pc, #196]	; (8009cc4 <xPortStartScheduler+0x134>)
 8009c00:	2207      	movs	r2, #7
 8009c02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009c04:	e009      	b.n	8009c1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009c06:	4b2f      	ldr	r3, [pc, #188]	; (8009cc4 <xPortStartScheduler+0x134>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	3b01      	subs	r3, #1
 8009c0c:	4a2d      	ldr	r2, [pc, #180]	; (8009cc4 <xPortStartScheduler+0x134>)
 8009c0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009c10:	78fb      	ldrb	r3, [r7, #3]
 8009c12:	b2db      	uxtb	r3, r3
 8009c14:	005b      	lsls	r3, r3, #1
 8009c16:	b2db      	uxtb	r3, r3
 8009c18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009c1a:	78fb      	ldrb	r3, [r7, #3]
 8009c1c:	b2db      	uxtb	r3, r3
 8009c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c22:	2b80      	cmp	r3, #128	; 0x80
 8009c24:	d0ef      	beq.n	8009c06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009c26:	4b27      	ldr	r3, [pc, #156]	; (8009cc4 <xPortStartScheduler+0x134>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f1c3 0307 	rsb	r3, r3, #7
 8009c2e:	2b04      	cmp	r3, #4
 8009c30:	d00a      	beq.n	8009c48 <xPortStartScheduler+0xb8>
	__asm volatile
 8009c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c36:	f383 8811 	msr	BASEPRI, r3
 8009c3a:	f3bf 8f6f 	isb	sy
 8009c3e:	f3bf 8f4f 	dsb	sy
 8009c42:	60bb      	str	r3, [r7, #8]
}
 8009c44:	bf00      	nop
 8009c46:	e7fe      	b.n	8009c46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009c48:	4b1e      	ldr	r3, [pc, #120]	; (8009cc4 <xPortStartScheduler+0x134>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	021b      	lsls	r3, r3, #8
 8009c4e:	4a1d      	ldr	r2, [pc, #116]	; (8009cc4 <xPortStartScheduler+0x134>)
 8009c50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009c52:	4b1c      	ldr	r3, [pc, #112]	; (8009cc4 <xPortStartScheduler+0x134>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009c5a:	4a1a      	ldr	r2, [pc, #104]	; (8009cc4 <xPortStartScheduler+0x134>)
 8009c5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	b2da      	uxtb	r2, r3
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009c66:	4b18      	ldr	r3, [pc, #96]	; (8009cc8 <xPortStartScheduler+0x138>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4a17      	ldr	r2, [pc, #92]	; (8009cc8 <xPortStartScheduler+0x138>)
 8009c6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009c70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009c72:	4b15      	ldr	r3, [pc, #84]	; (8009cc8 <xPortStartScheduler+0x138>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	4a14      	ldr	r2, [pc, #80]	; (8009cc8 <xPortStartScheduler+0x138>)
 8009c78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009c7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009c7e:	f000 f8dd 	bl	8009e3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009c82:	4b12      	ldr	r3, [pc, #72]	; (8009ccc <xPortStartScheduler+0x13c>)
 8009c84:	2200      	movs	r2, #0
 8009c86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009c88:	f000 f8fc 	bl	8009e84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009c8c:	4b10      	ldr	r3, [pc, #64]	; (8009cd0 <xPortStartScheduler+0x140>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4a0f      	ldr	r2, [pc, #60]	; (8009cd0 <xPortStartScheduler+0x140>)
 8009c92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009c96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009c98:	f7ff ff66 	bl	8009b68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009c9c:	f001 f9fa 	bl	800b094 <vTaskSwitchContext>
	prvTaskExitError();
 8009ca0:	f7ff ff20 	bl	8009ae4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009ca4:	2300      	movs	r3, #0
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3718      	adds	r7, #24
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}
 8009cae:	bf00      	nop
 8009cb0:	e000ed00 	.word	0xe000ed00
 8009cb4:	410fc271 	.word	0x410fc271
 8009cb8:	410fc270 	.word	0x410fc270
 8009cbc:	e000e400 	.word	0xe000e400
 8009cc0:	24004c10 	.word	0x24004c10
 8009cc4:	24004c14 	.word	0x24004c14
 8009cc8:	e000ed20 	.word	0xe000ed20
 8009ccc:	24000010 	.word	0x24000010
 8009cd0:	e000ef34 	.word	0xe000ef34

08009cd4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b083      	sub	sp, #12
 8009cd8:	af00      	add	r7, sp, #0
	__asm volatile
 8009cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cde:	f383 8811 	msr	BASEPRI, r3
 8009ce2:	f3bf 8f6f 	isb	sy
 8009ce6:	f3bf 8f4f 	dsb	sy
 8009cea:	607b      	str	r3, [r7, #4]
}
 8009cec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009cee:	4b0f      	ldr	r3, [pc, #60]	; (8009d2c <vPortEnterCritical+0x58>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	3301      	adds	r3, #1
 8009cf4:	4a0d      	ldr	r2, [pc, #52]	; (8009d2c <vPortEnterCritical+0x58>)
 8009cf6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009cf8:	4b0c      	ldr	r3, [pc, #48]	; (8009d2c <vPortEnterCritical+0x58>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	2b01      	cmp	r3, #1
 8009cfe:	d10f      	bne.n	8009d20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009d00:	4b0b      	ldr	r3, [pc, #44]	; (8009d30 <vPortEnterCritical+0x5c>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	b2db      	uxtb	r3, r3
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d00a      	beq.n	8009d20 <vPortEnterCritical+0x4c>
	__asm volatile
 8009d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d0e:	f383 8811 	msr	BASEPRI, r3
 8009d12:	f3bf 8f6f 	isb	sy
 8009d16:	f3bf 8f4f 	dsb	sy
 8009d1a:	603b      	str	r3, [r7, #0]
}
 8009d1c:	bf00      	nop
 8009d1e:	e7fe      	b.n	8009d1e <vPortEnterCritical+0x4a>
	}
}
 8009d20:	bf00      	nop
 8009d22:	370c      	adds	r7, #12
 8009d24:	46bd      	mov	sp, r7
 8009d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2a:	4770      	bx	lr
 8009d2c:	24000010 	.word	0x24000010
 8009d30:	e000ed04 	.word	0xe000ed04

08009d34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009d34:	b480      	push	{r7}
 8009d36:	b083      	sub	sp, #12
 8009d38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009d3a:	4b12      	ldr	r3, [pc, #72]	; (8009d84 <vPortExitCritical+0x50>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d10a      	bne.n	8009d58 <vPortExitCritical+0x24>
	__asm volatile
 8009d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d46:	f383 8811 	msr	BASEPRI, r3
 8009d4a:	f3bf 8f6f 	isb	sy
 8009d4e:	f3bf 8f4f 	dsb	sy
 8009d52:	607b      	str	r3, [r7, #4]
}
 8009d54:	bf00      	nop
 8009d56:	e7fe      	b.n	8009d56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009d58:	4b0a      	ldr	r3, [pc, #40]	; (8009d84 <vPortExitCritical+0x50>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	3b01      	subs	r3, #1
 8009d5e:	4a09      	ldr	r2, [pc, #36]	; (8009d84 <vPortExitCritical+0x50>)
 8009d60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009d62:	4b08      	ldr	r3, [pc, #32]	; (8009d84 <vPortExitCritical+0x50>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d105      	bne.n	8009d76 <vPortExitCritical+0x42>
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009d74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009d76:	bf00      	nop
 8009d78:	370c      	adds	r7, #12
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d80:	4770      	bx	lr
 8009d82:	bf00      	nop
 8009d84:	24000010 	.word	0x24000010
	...

08009d90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009d90:	f3ef 8009 	mrs	r0, PSP
 8009d94:	f3bf 8f6f 	isb	sy
 8009d98:	4b15      	ldr	r3, [pc, #84]	; (8009df0 <pxCurrentTCBConst>)
 8009d9a:	681a      	ldr	r2, [r3, #0]
 8009d9c:	f01e 0f10 	tst.w	lr, #16
 8009da0:	bf08      	it	eq
 8009da2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009da6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009daa:	6010      	str	r0, [r2, #0]
 8009dac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009db0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009db4:	f380 8811 	msr	BASEPRI, r0
 8009db8:	f3bf 8f4f 	dsb	sy
 8009dbc:	f3bf 8f6f 	isb	sy
 8009dc0:	f001 f968 	bl	800b094 <vTaskSwitchContext>
 8009dc4:	f04f 0000 	mov.w	r0, #0
 8009dc8:	f380 8811 	msr	BASEPRI, r0
 8009dcc:	bc09      	pop	{r0, r3}
 8009dce:	6819      	ldr	r1, [r3, #0]
 8009dd0:	6808      	ldr	r0, [r1, #0]
 8009dd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dd6:	f01e 0f10 	tst.w	lr, #16
 8009dda:	bf08      	it	eq
 8009ddc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009de0:	f380 8809 	msr	PSP, r0
 8009de4:	f3bf 8f6f 	isb	sy
 8009de8:	4770      	bx	lr
 8009dea:	bf00      	nop
 8009dec:	f3af 8000 	nop.w

08009df0 <pxCurrentTCBConst>:
 8009df0:	24004c58 	.word	0x24004c58
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009df4:	bf00      	nop
 8009df6:	bf00      	nop

08009df8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b082      	sub	sp, #8
 8009dfc:	af00      	add	r7, sp, #0
	__asm volatile
 8009dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e02:	f383 8811 	msr	BASEPRI, r3
 8009e06:	f3bf 8f6f 	isb	sy
 8009e0a:	f3bf 8f4f 	dsb	sy
 8009e0e:	607b      	str	r3, [r7, #4]
}
 8009e10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009e12:	f001 f885 	bl	800af20 <xTaskIncrementTick>
 8009e16:	4603      	mov	r3, r0
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d003      	beq.n	8009e24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009e1c:	4b06      	ldr	r3, [pc, #24]	; (8009e38 <xPortSysTickHandler+0x40>)
 8009e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e22:	601a      	str	r2, [r3, #0]
 8009e24:	2300      	movs	r3, #0
 8009e26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	f383 8811 	msr	BASEPRI, r3
}
 8009e2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009e30:	bf00      	nop
 8009e32:	3708      	adds	r7, #8
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}
 8009e38:	e000ed04 	.word	0xe000ed04

08009e3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009e40:	4b0b      	ldr	r3, [pc, #44]	; (8009e70 <vPortSetupTimerInterrupt+0x34>)
 8009e42:	2200      	movs	r2, #0
 8009e44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009e46:	4b0b      	ldr	r3, [pc, #44]	; (8009e74 <vPortSetupTimerInterrupt+0x38>)
 8009e48:	2200      	movs	r2, #0
 8009e4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009e4c:	4b0a      	ldr	r3, [pc, #40]	; (8009e78 <vPortSetupTimerInterrupt+0x3c>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4a0a      	ldr	r2, [pc, #40]	; (8009e7c <vPortSetupTimerInterrupt+0x40>)
 8009e52:	fba2 2303 	umull	r2, r3, r2, r3
 8009e56:	099b      	lsrs	r3, r3, #6
 8009e58:	4a09      	ldr	r2, [pc, #36]	; (8009e80 <vPortSetupTimerInterrupt+0x44>)
 8009e5a:	3b01      	subs	r3, #1
 8009e5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009e5e:	4b04      	ldr	r3, [pc, #16]	; (8009e70 <vPortSetupTimerInterrupt+0x34>)
 8009e60:	2207      	movs	r2, #7
 8009e62:	601a      	str	r2, [r3, #0]
}
 8009e64:	bf00      	nop
 8009e66:	46bd      	mov	sp, r7
 8009e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6c:	4770      	bx	lr
 8009e6e:	bf00      	nop
 8009e70:	e000e010 	.word	0xe000e010
 8009e74:	e000e018 	.word	0xe000e018
 8009e78:	24000000 	.word	0x24000000
 8009e7c:	10624dd3 	.word	0x10624dd3
 8009e80:	e000e014 	.word	0xe000e014

08009e84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009e84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009e94 <vPortEnableVFP+0x10>
 8009e88:	6801      	ldr	r1, [r0, #0]
 8009e8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009e8e:	6001      	str	r1, [r0, #0]
 8009e90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009e92:	bf00      	nop
 8009e94:	e000ed88 	.word	0xe000ed88

08009e98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009e98:	b480      	push	{r7}
 8009e9a:	b085      	sub	sp, #20
 8009e9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009e9e:	f3ef 8305 	mrs	r3, IPSR
 8009ea2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	2b0f      	cmp	r3, #15
 8009ea8:	d914      	bls.n	8009ed4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009eaa:	4a17      	ldr	r2, [pc, #92]	; (8009f08 <vPortValidateInterruptPriority+0x70>)
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	4413      	add	r3, r2
 8009eb0:	781b      	ldrb	r3, [r3, #0]
 8009eb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009eb4:	4b15      	ldr	r3, [pc, #84]	; (8009f0c <vPortValidateInterruptPriority+0x74>)
 8009eb6:	781b      	ldrb	r3, [r3, #0]
 8009eb8:	7afa      	ldrb	r2, [r7, #11]
 8009eba:	429a      	cmp	r2, r3
 8009ebc:	d20a      	bcs.n	8009ed4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec2:	f383 8811 	msr	BASEPRI, r3
 8009ec6:	f3bf 8f6f 	isb	sy
 8009eca:	f3bf 8f4f 	dsb	sy
 8009ece:	607b      	str	r3, [r7, #4]
}
 8009ed0:	bf00      	nop
 8009ed2:	e7fe      	b.n	8009ed2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009ed4:	4b0e      	ldr	r3, [pc, #56]	; (8009f10 <vPortValidateInterruptPriority+0x78>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009edc:	4b0d      	ldr	r3, [pc, #52]	; (8009f14 <vPortValidateInterruptPriority+0x7c>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	d90a      	bls.n	8009efa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee8:	f383 8811 	msr	BASEPRI, r3
 8009eec:	f3bf 8f6f 	isb	sy
 8009ef0:	f3bf 8f4f 	dsb	sy
 8009ef4:	603b      	str	r3, [r7, #0]
}
 8009ef6:	bf00      	nop
 8009ef8:	e7fe      	b.n	8009ef8 <vPortValidateInterruptPriority+0x60>
	}
 8009efa:	bf00      	nop
 8009efc:	3714      	adds	r7, #20
 8009efe:	46bd      	mov	sp, r7
 8009f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f04:	4770      	bx	lr
 8009f06:	bf00      	nop
 8009f08:	e000e3f0 	.word	0xe000e3f0
 8009f0c:	24004c10 	.word	0x24004c10
 8009f10:	e000ed0c 	.word	0xe000ed0c
 8009f14:	24004c14 	.word	0x24004c14

08009f18 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b084      	sub	sp, #16
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d10a      	bne.n	8009f42 <xQueueGenericReset+0x2a>
	__asm volatile
 8009f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f30:	f383 8811 	msr	BASEPRI, r3
 8009f34:	f3bf 8f6f 	isb	sy
 8009f38:	f3bf 8f4f 	dsb	sy
 8009f3c:	60bb      	str	r3, [r7, #8]
}
 8009f3e:	bf00      	nop
 8009f40:	e7fe      	b.n	8009f40 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009f42:	f7ff fec7 	bl	8009cd4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681a      	ldr	r2, [r3, #0]
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f4e:	68f9      	ldr	r1, [r7, #12]
 8009f50:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009f52:	fb01 f303 	mul.w	r3, r1, r3
 8009f56:	441a      	add	r2, r3
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681a      	ldr	r2, [r3, #0]
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681a      	ldr	r2, [r3, #0]
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f72:	3b01      	subs	r3, #1
 8009f74:	68f9      	ldr	r1, [r7, #12]
 8009f76:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009f78:	fb01 f303 	mul.w	r3, r1, r3
 8009f7c:	441a      	add	r2, r3
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	22ff      	movs	r2, #255	; 0xff
 8009f86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	22ff      	movs	r2, #255	; 0xff
 8009f8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d114      	bne.n	8009fc2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	691b      	ldr	r3, [r3, #16]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d01a      	beq.n	8009fd6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	3310      	adds	r3, #16
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f001 f929 	bl	800b1fc <xTaskRemoveFromEventList>
 8009faa:	4603      	mov	r3, r0
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d012      	beq.n	8009fd6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009fb0:	4b0c      	ldr	r3, [pc, #48]	; (8009fe4 <xQueueGenericReset+0xcc>)
 8009fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fb6:	601a      	str	r2, [r3, #0]
 8009fb8:	f3bf 8f4f 	dsb	sy
 8009fbc:	f3bf 8f6f 	isb	sy
 8009fc0:	e009      	b.n	8009fd6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	3310      	adds	r3, #16
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f7ff fca4 	bl	8009914 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	3324      	adds	r3, #36	; 0x24
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	f7ff fc9f 	bl	8009914 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009fd6:	f7ff fead 	bl	8009d34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009fda:	2301      	movs	r3, #1
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3710      	adds	r7, #16
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}
 8009fe4:	e000ed04 	.word	0xe000ed04

08009fe8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b08e      	sub	sp, #56	; 0x38
 8009fec:	af02      	add	r7, sp, #8
 8009fee:	60f8      	str	r0, [r7, #12]
 8009ff0:	60b9      	str	r1, [r7, #8]
 8009ff2:	607a      	str	r2, [r7, #4]
 8009ff4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d10a      	bne.n	800a012 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a000:	f383 8811 	msr	BASEPRI, r3
 800a004:	f3bf 8f6f 	isb	sy
 800a008:	f3bf 8f4f 	dsb	sy
 800a00c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a00e:	bf00      	nop
 800a010:	e7fe      	b.n	800a010 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d10a      	bne.n	800a02e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a01c:	f383 8811 	msr	BASEPRI, r3
 800a020:	f3bf 8f6f 	isb	sy
 800a024:	f3bf 8f4f 	dsb	sy
 800a028:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a02a:	bf00      	nop
 800a02c:	e7fe      	b.n	800a02c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d002      	beq.n	800a03a <xQueueGenericCreateStatic+0x52>
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d001      	beq.n	800a03e <xQueueGenericCreateStatic+0x56>
 800a03a:	2301      	movs	r3, #1
 800a03c:	e000      	b.n	800a040 <xQueueGenericCreateStatic+0x58>
 800a03e:	2300      	movs	r3, #0
 800a040:	2b00      	cmp	r3, #0
 800a042:	d10a      	bne.n	800a05a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a044:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a048:	f383 8811 	msr	BASEPRI, r3
 800a04c:	f3bf 8f6f 	isb	sy
 800a050:	f3bf 8f4f 	dsb	sy
 800a054:	623b      	str	r3, [r7, #32]
}
 800a056:	bf00      	nop
 800a058:	e7fe      	b.n	800a058 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d102      	bne.n	800a066 <xQueueGenericCreateStatic+0x7e>
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d101      	bne.n	800a06a <xQueueGenericCreateStatic+0x82>
 800a066:	2301      	movs	r3, #1
 800a068:	e000      	b.n	800a06c <xQueueGenericCreateStatic+0x84>
 800a06a:	2300      	movs	r3, #0
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d10a      	bne.n	800a086 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a074:	f383 8811 	msr	BASEPRI, r3
 800a078:	f3bf 8f6f 	isb	sy
 800a07c:	f3bf 8f4f 	dsb	sy
 800a080:	61fb      	str	r3, [r7, #28]
}
 800a082:	bf00      	nop
 800a084:	e7fe      	b.n	800a084 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a086:	2350      	movs	r3, #80	; 0x50
 800a088:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	2b50      	cmp	r3, #80	; 0x50
 800a08e:	d00a      	beq.n	800a0a6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a094:	f383 8811 	msr	BASEPRI, r3
 800a098:	f3bf 8f6f 	isb	sy
 800a09c:	f3bf 8f4f 	dsb	sy
 800a0a0:	61bb      	str	r3, [r7, #24]
}
 800a0a2:	bf00      	nop
 800a0a4:	e7fe      	b.n	800a0a4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a0a6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d00d      	beq.n	800a0ce <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a0b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a0ba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a0be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0c0:	9300      	str	r3, [sp, #0]
 800a0c2:	4613      	mov	r3, r2
 800a0c4:	687a      	ldr	r2, [r7, #4]
 800a0c6:	68b9      	ldr	r1, [r7, #8]
 800a0c8:	68f8      	ldr	r0, [r7, #12]
 800a0ca:	f000 f805 	bl	800a0d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a0ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3730      	adds	r7, #48	; 0x30
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}

0800a0d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b084      	sub	sp, #16
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	60f8      	str	r0, [r7, #12]
 800a0e0:	60b9      	str	r1, [r7, #8]
 800a0e2:	607a      	str	r2, [r7, #4]
 800a0e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d103      	bne.n	800a0f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a0ec:	69bb      	ldr	r3, [r7, #24]
 800a0ee:	69ba      	ldr	r2, [r7, #24]
 800a0f0:	601a      	str	r2, [r3, #0]
 800a0f2:	e002      	b.n	800a0fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a0f4:	69bb      	ldr	r3, [r7, #24]
 800a0f6:	687a      	ldr	r2, [r7, #4]
 800a0f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a0fa:	69bb      	ldr	r3, [r7, #24]
 800a0fc:	68fa      	ldr	r2, [r7, #12]
 800a0fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a100:	69bb      	ldr	r3, [r7, #24]
 800a102:	68ba      	ldr	r2, [r7, #8]
 800a104:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a106:	2101      	movs	r1, #1
 800a108:	69b8      	ldr	r0, [r7, #24]
 800a10a:	f7ff ff05 	bl	8009f18 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a10e:	69bb      	ldr	r3, [r7, #24]
 800a110:	78fa      	ldrb	r2, [r7, #3]
 800a112:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a116:	bf00      	nop
 800a118:	3710      	adds	r7, #16
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
	...

0800a120 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b08e      	sub	sp, #56	; 0x38
 800a124:	af00      	add	r7, sp, #0
 800a126:	60f8      	str	r0, [r7, #12]
 800a128:	60b9      	str	r1, [r7, #8]
 800a12a:	607a      	str	r2, [r7, #4]
 800a12c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a12e:	2300      	movs	r3, #0
 800a130:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d10a      	bne.n	800a152 <xQueueGenericSend+0x32>
	__asm volatile
 800a13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a140:	f383 8811 	msr	BASEPRI, r3
 800a144:	f3bf 8f6f 	isb	sy
 800a148:	f3bf 8f4f 	dsb	sy
 800a14c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a14e:	bf00      	nop
 800a150:	e7fe      	b.n	800a150 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d103      	bne.n	800a160 <xQueueGenericSend+0x40>
 800a158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a15a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d101      	bne.n	800a164 <xQueueGenericSend+0x44>
 800a160:	2301      	movs	r3, #1
 800a162:	e000      	b.n	800a166 <xQueueGenericSend+0x46>
 800a164:	2300      	movs	r3, #0
 800a166:	2b00      	cmp	r3, #0
 800a168:	d10a      	bne.n	800a180 <xQueueGenericSend+0x60>
	__asm volatile
 800a16a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a16e:	f383 8811 	msr	BASEPRI, r3
 800a172:	f3bf 8f6f 	isb	sy
 800a176:	f3bf 8f4f 	dsb	sy
 800a17a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a17c:	bf00      	nop
 800a17e:	e7fe      	b.n	800a17e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	2b02      	cmp	r3, #2
 800a184:	d103      	bne.n	800a18e <xQueueGenericSend+0x6e>
 800a186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a18a:	2b01      	cmp	r3, #1
 800a18c:	d101      	bne.n	800a192 <xQueueGenericSend+0x72>
 800a18e:	2301      	movs	r3, #1
 800a190:	e000      	b.n	800a194 <xQueueGenericSend+0x74>
 800a192:	2300      	movs	r3, #0
 800a194:	2b00      	cmp	r3, #0
 800a196:	d10a      	bne.n	800a1ae <xQueueGenericSend+0x8e>
	__asm volatile
 800a198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a19c:	f383 8811 	msr	BASEPRI, r3
 800a1a0:	f3bf 8f6f 	isb	sy
 800a1a4:	f3bf 8f4f 	dsb	sy
 800a1a8:	623b      	str	r3, [r7, #32]
}
 800a1aa:	bf00      	nop
 800a1ac:	e7fe      	b.n	800a1ac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a1ae:	f001 f9e7 	bl	800b580 <xTaskGetSchedulerState>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d102      	bne.n	800a1be <xQueueGenericSend+0x9e>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d101      	bne.n	800a1c2 <xQueueGenericSend+0xa2>
 800a1be:	2301      	movs	r3, #1
 800a1c0:	e000      	b.n	800a1c4 <xQueueGenericSend+0xa4>
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d10a      	bne.n	800a1de <xQueueGenericSend+0xbe>
	__asm volatile
 800a1c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1cc:	f383 8811 	msr	BASEPRI, r3
 800a1d0:	f3bf 8f6f 	isb	sy
 800a1d4:	f3bf 8f4f 	dsb	sy
 800a1d8:	61fb      	str	r3, [r7, #28]
}
 800a1da:	bf00      	nop
 800a1dc:	e7fe      	b.n	800a1dc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a1de:	f7ff fd79 	bl	8009cd4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a1e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d302      	bcc.n	800a1f4 <xQueueGenericSend+0xd4>
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	2b02      	cmp	r3, #2
 800a1f2:	d129      	bne.n	800a248 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a1f4:	683a      	ldr	r2, [r7, #0]
 800a1f6:	68b9      	ldr	r1, [r7, #8]
 800a1f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1fa:	f000 fa0b 	bl	800a614 <prvCopyDataToQueue>
 800a1fe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a204:	2b00      	cmp	r3, #0
 800a206:	d010      	beq.n	800a22a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a20a:	3324      	adds	r3, #36	; 0x24
 800a20c:	4618      	mov	r0, r3
 800a20e:	f000 fff5 	bl	800b1fc <xTaskRemoveFromEventList>
 800a212:	4603      	mov	r3, r0
 800a214:	2b00      	cmp	r3, #0
 800a216:	d013      	beq.n	800a240 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a218:	4b3f      	ldr	r3, [pc, #252]	; (800a318 <xQueueGenericSend+0x1f8>)
 800a21a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a21e:	601a      	str	r2, [r3, #0]
 800a220:	f3bf 8f4f 	dsb	sy
 800a224:	f3bf 8f6f 	isb	sy
 800a228:	e00a      	b.n	800a240 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a22a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d007      	beq.n	800a240 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a230:	4b39      	ldr	r3, [pc, #228]	; (800a318 <xQueueGenericSend+0x1f8>)
 800a232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a236:	601a      	str	r2, [r3, #0]
 800a238:	f3bf 8f4f 	dsb	sy
 800a23c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a240:	f7ff fd78 	bl	8009d34 <vPortExitCritical>
				return pdPASS;
 800a244:	2301      	movs	r3, #1
 800a246:	e063      	b.n	800a310 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d103      	bne.n	800a256 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a24e:	f7ff fd71 	bl	8009d34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a252:	2300      	movs	r3, #0
 800a254:	e05c      	b.n	800a310 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d106      	bne.n	800a26a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a25c:	f107 0314 	add.w	r3, r7, #20
 800a260:	4618      	mov	r0, r3
 800a262:	f001 f82f 	bl	800b2c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a266:	2301      	movs	r3, #1
 800a268:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a26a:	f7ff fd63 	bl	8009d34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a26e:	f000 fd9b 	bl	800ada8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a272:	f7ff fd2f 	bl	8009cd4 <vPortEnterCritical>
 800a276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a278:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a27c:	b25b      	sxtb	r3, r3
 800a27e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a282:	d103      	bne.n	800a28c <xQueueGenericSend+0x16c>
 800a284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a286:	2200      	movs	r2, #0
 800a288:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a28c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a28e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a292:	b25b      	sxtb	r3, r3
 800a294:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a298:	d103      	bne.n	800a2a2 <xQueueGenericSend+0x182>
 800a29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a29c:	2200      	movs	r2, #0
 800a29e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a2a2:	f7ff fd47 	bl	8009d34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a2a6:	1d3a      	adds	r2, r7, #4
 800a2a8:	f107 0314 	add.w	r3, r7, #20
 800a2ac:	4611      	mov	r1, r2
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f001 f81e 	bl	800b2f0 <xTaskCheckForTimeOut>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d124      	bne.n	800a304 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a2ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2bc:	f000 faa2 	bl	800a804 <prvIsQueueFull>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d018      	beq.n	800a2f8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c8:	3310      	adds	r3, #16
 800a2ca:	687a      	ldr	r2, [r7, #4]
 800a2cc:	4611      	mov	r1, r2
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f000 ff44 	bl	800b15c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a2d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2d6:	f000 fa2d 	bl	800a734 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a2da:	f000 fd73 	bl	800adc4 <xTaskResumeAll>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	f47f af7c 	bne.w	800a1de <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a2e6:	4b0c      	ldr	r3, [pc, #48]	; (800a318 <xQueueGenericSend+0x1f8>)
 800a2e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2ec:	601a      	str	r2, [r3, #0]
 800a2ee:	f3bf 8f4f 	dsb	sy
 800a2f2:	f3bf 8f6f 	isb	sy
 800a2f6:	e772      	b.n	800a1de <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a2f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2fa:	f000 fa1b 	bl	800a734 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a2fe:	f000 fd61 	bl	800adc4 <xTaskResumeAll>
 800a302:	e76c      	b.n	800a1de <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a304:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a306:	f000 fa15 	bl	800a734 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a30a:	f000 fd5b 	bl	800adc4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a30e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a310:	4618      	mov	r0, r3
 800a312:	3738      	adds	r7, #56	; 0x38
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}
 800a318:	e000ed04 	.word	0xe000ed04

0800a31c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b090      	sub	sp, #64	; 0x40
 800a320:	af00      	add	r7, sp, #0
 800a322:	60f8      	str	r0, [r7, #12]
 800a324:	60b9      	str	r1, [r7, #8]
 800a326:	607a      	str	r2, [r7, #4]
 800a328:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a330:	2b00      	cmp	r3, #0
 800a332:	d10a      	bne.n	800a34a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a334:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a338:	f383 8811 	msr	BASEPRI, r3
 800a33c:	f3bf 8f6f 	isb	sy
 800a340:	f3bf 8f4f 	dsb	sy
 800a344:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a346:	bf00      	nop
 800a348:	e7fe      	b.n	800a348 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d103      	bne.n	800a358 <xQueueGenericSendFromISR+0x3c>
 800a350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a354:	2b00      	cmp	r3, #0
 800a356:	d101      	bne.n	800a35c <xQueueGenericSendFromISR+0x40>
 800a358:	2301      	movs	r3, #1
 800a35a:	e000      	b.n	800a35e <xQueueGenericSendFromISR+0x42>
 800a35c:	2300      	movs	r3, #0
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d10a      	bne.n	800a378 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a362:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a366:	f383 8811 	msr	BASEPRI, r3
 800a36a:	f3bf 8f6f 	isb	sy
 800a36e:	f3bf 8f4f 	dsb	sy
 800a372:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a374:	bf00      	nop
 800a376:	e7fe      	b.n	800a376 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	2b02      	cmp	r3, #2
 800a37c:	d103      	bne.n	800a386 <xQueueGenericSendFromISR+0x6a>
 800a37e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a382:	2b01      	cmp	r3, #1
 800a384:	d101      	bne.n	800a38a <xQueueGenericSendFromISR+0x6e>
 800a386:	2301      	movs	r3, #1
 800a388:	e000      	b.n	800a38c <xQueueGenericSendFromISR+0x70>
 800a38a:	2300      	movs	r3, #0
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d10a      	bne.n	800a3a6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a390:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a394:	f383 8811 	msr	BASEPRI, r3
 800a398:	f3bf 8f6f 	isb	sy
 800a39c:	f3bf 8f4f 	dsb	sy
 800a3a0:	623b      	str	r3, [r7, #32]
}
 800a3a2:	bf00      	nop
 800a3a4:	e7fe      	b.n	800a3a4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a3a6:	f7ff fd77 	bl	8009e98 <vPortValidateInterruptPriority>
	__asm volatile
 800a3aa:	f3ef 8211 	mrs	r2, BASEPRI
 800a3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b2:	f383 8811 	msr	BASEPRI, r3
 800a3b6:	f3bf 8f6f 	isb	sy
 800a3ba:	f3bf 8f4f 	dsb	sy
 800a3be:	61fa      	str	r2, [r7, #28]
 800a3c0:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800a3c2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a3c4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a3c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	d302      	bcc.n	800a3d8 <xQueueGenericSendFromISR+0xbc>
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	2b02      	cmp	r3, #2
 800a3d6:	d12f      	bne.n	800a438 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a3de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3e6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a3e8:	683a      	ldr	r2, [r7, #0]
 800a3ea:	68b9      	ldr	r1, [r7, #8]
 800a3ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a3ee:	f000 f911 	bl	800a614 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a3f2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a3f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3fa:	d112      	bne.n	800a422 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a400:	2b00      	cmp	r3, #0
 800a402:	d016      	beq.n	800a432 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a406:	3324      	adds	r3, #36	; 0x24
 800a408:	4618      	mov	r0, r3
 800a40a:	f000 fef7 	bl	800b1fc <xTaskRemoveFromEventList>
 800a40e:	4603      	mov	r3, r0
 800a410:	2b00      	cmp	r3, #0
 800a412:	d00e      	beq.n	800a432 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d00b      	beq.n	800a432 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2201      	movs	r2, #1
 800a41e:	601a      	str	r2, [r3, #0]
 800a420:	e007      	b.n	800a432 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a422:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a426:	3301      	adds	r3, #1
 800a428:	b2db      	uxtb	r3, r3
 800a42a:	b25a      	sxtb	r2, r3
 800a42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a42e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a432:	2301      	movs	r3, #1
 800a434:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a436:	e001      	b.n	800a43c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a438:	2300      	movs	r3, #0
 800a43a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a43c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a43e:	617b      	str	r3, [r7, #20]
	__asm volatile
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	f383 8811 	msr	BASEPRI, r3
}
 800a446:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	3740      	adds	r7, #64	; 0x40
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}
	...

0800a454 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b08c      	sub	sp, #48	; 0x30
 800a458:	af00      	add	r7, sp, #0
 800a45a:	60f8      	str	r0, [r7, #12]
 800a45c:	60b9      	str	r1, [r7, #8]
 800a45e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a460:	2300      	movs	r3, #0
 800a462:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d10a      	bne.n	800a484 <xQueueReceive+0x30>
	__asm volatile
 800a46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a472:	f383 8811 	msr	BASEPRI, r3
 800a476:	f3bf 8f6f 	isb	sy
 800a47a:	f3bf 8f4f 	dsb	sy
 800a47e:	623b      	str	r3, [r7, #32]
}
 800a480:	bf00      	nop
 800a482:	e7fe      	b.n	800a482 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d103      	bne.n	800a492 <xQueueReceive+0x3e>
 800a48a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a48c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d101      	bne.n	800a496 <xQueueReceive+0x42>
 800a492:	2301      	movs	r3, #1
 800a494:	e000      	b.n	800a498 <xQueueReceive+0x44>
 800a496:	2300      	movs	r3, #0
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d10a      	bne.n	800a4b2 <xQueueReceive+0x5e>
	__asm volatile
 800a49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a0:	f383 8811 	msr	BASEPRI, r3
 800a4a4:	f3bf 8f6f 	isb	sy
 800a4a8:	f3bf 8f4f 	dsb	sy
 800a4ac:	61fb      	str	r3, [r7, #28]
}
 800a4ae:	bf00      	nop
 800a4b0:	e7fe      	b.n	800a4b0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a4b2:	f001 f865 	bl	800b580 <xTaskGetSchedulerState>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d102      	bne.n	800a4c2 <xQueueReceive+0x6e>
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d101      	bne.n	800a4c6 <xQueueReceive+0x72>
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	e000      	b.n	800a4c8 <xQueueReceive+0x74>
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d10a      	bne.n	800a4e2 <xQueueReceive+0x8e>
	__asm volatile
 800a4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d0:	f383 8811 	msr	BASEPRI, r3
 800a4d4:	f3bf 8f6f 	isb	sy
 800a4d8:	f3bf 8f4f 	dsb	sy
 800a4dc:	61bb      	str	r3, [r7, #24]
}
 800a4de:	bf00      	nop
 800a4e0:	e7fe      	b.n	800a4e0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a4e2:	f7ff fbf7 	bl	8009cd4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4ea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d01f      	beq.n	800a532 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a4f2:	68b9      	ldr	r1, [r7, #8]
 800a4f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4f6:	f000 f8f7 	bl	800a6e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4fc:	1e5a      	subs	r2, r3, #1
 800a4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a500:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a504:	691b      	ldr	r3, [r3, #16]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d00f      	beq.n	800a52a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a50a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a50c:	3310      	adds	r3, #16
 800a50e:	4618      	mov	r0, r3
 800a510:	f000 fe74 	bl	800b1fc <xTaskRemoveFromEventList>
 800a514:	4603      	mov	r3, r0
 800a516:	2b00      	cmp	r3, #0
 800a518:	d007      	beq.n	800a52a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a51a:	4b3d      	ldr	r3, [pc, #244]	; (800a610 <xQueueReceive+0x1bc>)
 800a51c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a520:	601a      	str	r2, [r3, #0]
 800a522:	f3bf 8f4f 	dsb	sy
 800a526:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a52a:	f7ff fc03 	bl	8009d34 <vPortExitCritical>
				return pdPASS;
 800a52e:	2301      	movs	r3, #1
 800a530:	e069      	b.n	800a606 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d103      	bne.n	800a540 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a538:	f7ff fbfc 	bl	8009d34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a53c:	2300      	movs	r3, #0
 800a53e:	e062      	b.n	800a606 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a542:	2b00      	cmp	r3, #0
 800a544:	d106      	bne.n	800a554 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a546:	f107 0310 	add.w	r3, r7, #16
 800a54a:	4618      	mov	r0, r3
 800a54c:	f000 feba 	bl	800b2c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a550:	2301      	movs	r3, #1
 800a552:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a554:	f7ff fbee 	bl	8009d34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a558:	f000 fc26 	bl	800ada8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a55c:	f7ff fbba 	bl	8009cd4 <vPortEnterCritical>
 800a560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a562:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a566:	b25b      	sxtb	r3, r3
 800a568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a56c:	d103      	bne.n	800a576 <xQueueReceive+0x122>
 800a56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a570:	2200      	movs	r2, #0
 800a572:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a578:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a57c:	b25b      	sxtb	r3, r3
 800a57e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a582:	d103      	bne.n	800a58c <xQueueReceive+0x138>
 800a584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a586:	2200      	movs	r2, #0
 800a588:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a58c:	f7ff fbd2 	bl	8009d34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a590:	1d3a      	adds	r2, r7, #4
 800a592:	f107 0310 	add.w	r3, r7, #16
 800a596:	4611      	mov	r1, r2
 800a598:	4618      	mov	r0, r3
 800a59a:	f000 fea9 	bl	800b2f0 <xTaskCheckForTimeOut>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d123      	bne.n	800a5ec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a5a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5a6:	f000 f917 	bl	800a7d8 <prvIsQueueEmpty>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d017      	beq.n	800a5e0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a5b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5b2:	3324      	adds	r3, #36	; 0x24
 800a5b4:	687a      	ldr	r2, [r7, #4]
 800a5b6:	4611      	mov	r1, r2
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f000 fdcf 	bl	800b15c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a5be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5c0:	f000 f8b8 	bl	800a734 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a5c4:	f000 fbfe 	bl	800adc4 <xTaskResumeAll>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d189      	bne.n	800a4e2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a5ce:	4b10      	ldr	r3, [pc, #64]	; (800a610 <xQueueReceive+0x1bc>)
 800a5d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5d4:	601a      	str	r2, [r3, #0]
 800a5d6:	f3bf 8f4f 	dsb	sy
 800a5da:	f3bf 8f6f 	isb	sy
 800a5de:	e780      	b.n	800a4e2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a5e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5e2:	f000 f8a7 	bl	800a734 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a5e6:	f000 fbed 	bl	800adc4 <xTaskResumeAll>
 800a5ea:	e77a      	b.n	800a4e2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a5ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5ee:	f000 f8a1 	bl	800a734 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a5f2:	f000 fbe7 	bl	800adc4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a5f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5f8:	f000 f8ee 	bl	800a7d8 <prvIsQueueEmpty>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	f43f af6f 	beq.w	800a4e2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a604:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a606:	4618      	mov	r0, r3
 800a608:	3730      	adds	r7, #48	; 0x30
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}
 800a60e:	bf00      	nop
 800a610:	e000ed04 	.word	0xe000ed04

0800a614 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b086      	sub	sp, #24
 800a618:	af00      	add	r7, sp, #0
 800a61a:	60f8      	str	r0, [r7, #12]
 800a61c:	60b9      	str	r1, [r7, #8]
 800a61e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a620:	2300      	movs	r3, #0
 800a622:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a628:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d10d      	bne.n	800a64e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d14d      	bne.n	800a6d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	689b      	ldr	r3, [r3, #8]
 800a63e:	4618      	mov	r0, r3
 800a640:	f000 ffbc 	bl	800b5bc <xTaskPriorityDisinherit>
 800a644:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	2200      	movs	r2, #0
 800a64a:	609a      	str	r2, [r3, #8]
 800a64c:	e043      	b.n	800a6d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d119      	bne.n	800a688 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	6858      	ldr	r0, [r3, #4]
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a65c:	461a      	mov	r2, r3
 800a65e:	68b9      	ldr	r1, [r7, #8]
 800a660:	f001 fc66 	bl	800bf30 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	685a      	ldr	r2, [r3, #4]
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a66c:	441a      	add	r2, r3
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	685a      	ldr	r2, [r3, #4]
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	689b      	ldr	r3, [r3, #8]
 800a67a:	429a      	cmp	r2, r3
 800a67c:	d32b      	bcc.n	800a6d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681a      	ldr	r2, [r3, #0]
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	605a      	str	r2, [r3, #4]
 800a686:	e026      	b.n	800a6d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	68d8      	ldr	r0, [r3, #12]
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a690:	461a      	mov	r2, r3
 800a692:	68b9      	ldr	r1, [r7, #8]
 800a694:	f001 fc4c 	bl	800bf30 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	68da      	ldr	r2, [r3, #12]
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6a0:	425b      	negs	r3, r3
 800a6a2:	441a      	add	r2, r3
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	68da      	ldr	r2, [r3, #12]
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	d207      	bcs.n	800a6c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	689a      	ldr	r2, [r3, #8]
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6bc:	425b      	negs	r3, r3
 800a6be:	441a      	add	r2, r3
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2b02      	cmp	r3, #2
 800a6c8:	d105      	bne.n	800a6d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a6ca:	693b      	ldr	r3, [r7, #16]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d002      	beq.n	800a6d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	3b01      	subs	r3, #1
 800a6d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	1c5a      	adds	r2, r3, #1
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a6de:	697b      	ldr	r3, [r7, #20]
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3718      	adds	r7, #24
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}

0800a6e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b082      	sub	sp, #8
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
 800a6f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d018      	beq.n	800a72c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	68da      	ldr	r2, [r3, #12]
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a702:	441a      	add	r2, r3
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	68da      	ldr	r2, [r3, #12]
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	689b      	ldr	r3, [r3, #8]
 800a710:	429a      	cmp	r2, r3
 800a712:	d303      	bcc.n	800a71c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681a      	ldr	r2, [r3, #0]
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	68d9      	ldr	r1, [r3, #12]
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a724:	461a      	mov	r2, r3
 800a726:	6838      	ldr	r0, [r7, #0]
 800a728:	f001 fc02 	bl	800bf30 <memcpy>
	}
}
 800a72c:	bf00      	nop
 800a72e:	3708      	adds	r7, #8
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}

0800a734 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b084      	sub	sp, #16
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a73c:	f7ff faca 	bl	8009cd4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a746:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a748:	e011      	b.n	800a76e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d012      	beq.n	800a778 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	3324      	adds	r3, #36	; 0x24
 800a756:	4618      	mov	r0, r3
 800a758:	f000 fd50 	bl	800b1fc <xTaskRemoveFromEventList>
 800a75c:	4603      	mov	r3, r0
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d001      	beq.n	800a766 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a762:	f000 fe27 	bl	800b3b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a766:	7bfb      	ldrb	r3, [r7, #15]
 800a768:	3b01      	subs	r3, #1
 800a76a:	b2db      	uxtb	r3, r3
 800a76c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a76e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a772:	2b00      	cmp	r3, #0
 800a774:	dce9      	bgt.n	800a74a <prvUnlockQueue+0x16>
 800a776:	e000      	b.n	800a77a <prvUnlockQueue+0x46>
					break;
 800a778:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	22ff      	movs	r2, #255	; 0xff
 800a77e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a782:	f7ff fad7 	bl	8009d34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a786:	f7ff faa5 	bl	8009cd4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a790:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a792:	e011      	b.n	800a7b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	691b      	ldr	r3, [r3, #16]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d012      	beq.n	800a7c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	3310      	adds	r3, #16
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f000 fd2b 	bl	800b1fc <xTaskRemoveFromEventList>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d001      	beq.n	800a7b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a7ac:	f000 fe02 	bl	800b3b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a7b0:	7bbb      	ldrb	r3, [r7, #14]
 800a7b2:	3b01      	subs	r3, #1
 800a7b4:	b2db      	uxtb	r3, r3
 800a7b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a7b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	dce9      	bgt.n	800a794 <prvUnlockQueue+0x60>
 800a7c0:	e000      	b.n	800a7c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a7c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	22ff      	movs	r2, #255	; 0xff
 800a7c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a7cc:	f7ff fab2 	bl	8009d34 <vPortExitCritical>
}
 800a7d0:	bf00      	nop
 800a7d2:	3710      	adds	r7, #16
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}

0800a7d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b084      	sub	sp, #16
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a7e0:	f7ff fa78 	bl	8009cd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d102      	bne.n	800a7f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	60fb      	str	r3, [r7, #12]
 800a7f0:	e001      	b.n	800a7f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a7f6:	f7ff fa9d 	bl	8009d34 <vPortExitCritical>

	return xReturn;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
}
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	3710      	adds	r7, #16
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}

0800a804 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b084      	sub	sp, #16
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a80c:	f7ff fa62 	bl	8009cd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a818:	429a      	cmp	r2, r3
 800a81a:	d102      	bne.n	800a822 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a81c:	2301      	movs	r3, #1
 800a81e:	60fb      	str	r3, [r7, #12]
 800a820:	e001      	b.n	800a826 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a822:	2300      	movs	r3, #0
 800a824:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a826:	f7ff fa85 	bl	8009d34 <vPortExitCritical>

	return xReturn;
 800a82a:	68fb      	ldr	r3, [r7, #12]
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3710      	adds	r7, #16
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}

0800a834 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a834:	b480      	push	{r7}
 800a836:	b085      	sub	sp, #20
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a83e:	2300      	movs	r3, #0
 800a840:	60fb      	str	r3, [r7, #12]
 800a842:	e014      	b.n	800a86e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a844:	4a0f      	ldr	r2, [pc, #60]	; (800a884 <vQueueAddToRegistry+0x50>)
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d10b      	bne.n	800a868 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a850:	490c      	ldr	r1, [pc, #48]	; (800a884 <vQueueAddToRegistry+0x50>)
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	683a      	ldr	r2, [r7, #0]
 800a856:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a85a:	4a0a      	ldr	r2, [pc, #40]	; (800a884 <vQueueAddToRegistry+0x50>)
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	00db      	lsls	r3, r3, #3
 800a860:	4413      	add	r3, r2
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a866:	e006      	b.n	800a876 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	3301      	adds	r3, #1
 800a86c:	60fb      	str	r3, [r7, #12]
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	2b07      	cmp	r3, #7
 800a872:	d9e7      	bls.n	800a844 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a874:	bf00      	nop
 800a876:	bf00      	nop
 800a878:	3714      	adds	r7, #20
 800a87a:	46bd      	mov	sp, r7
 800a87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a880:	4770      	bx	lr
 800a882:	bf00      	nop
 800a884:	24004c18 	.word	0x24004c18

0800a888 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b086      	sub	sp, #24
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	60f8      	str	r0, [r7, #12]
 800a890:	60b9      	str	r1, [r7, #8]
 800a892:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a898:	f7ff fa1c 	bl	8009cd4 <vPortEnterCritical>
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a8a2:	b25b      	sxtb	r3, r3
 800a8a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8a8:	d103      	bne.n	800a8b2 <vQueueWaitForMessageRestricted+0x2a>
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a8b2:	697b      	ldr	r3, [r7, #20]
 800a8b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a8b8:	b25b      	sxtb	r3, r3
 800a8ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8be:	d103      	bne.n	800a8c8 <vQueueWaitForMessageRestricted+0x40>
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a8c8:	f7ff fa34 	bl	8009d34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d106      	bne.n	800a8e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	3324      	adds	r3, #36	; 0x24
 800a8d8:	687a      	ldr	r2, [r7, #4]
 800a8da:	68b9      	ldr	r1, [r7, #8]
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f000 fc61 	bl	800b1a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a8e2:	6978      	ldr	r0, [r7, #20]
 800a8e4:	f7ff ff26 	bl	800a734 <prvUnlockQueue>
	}
 800a8e8:	bf00      	nop
 800a8ea:	3718      	adds	r7, #24
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}

0800a8f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b08e      	sub	sp, #56	; 0x38
 800a8f4:	af04      	add	r7, sp, #16
 800a8f6:	60f8      	str	r0, [r7, #12]
 800a8f8:	60b9      	str	r1, [r7, #8]
 800a8fa:	607a      	str	r2, [r7, #4]
 800a8fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a8fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a900:	2b00      	cmp	r3, #0
 800a902:	d10a      	bne.n	800a91a <xTaskCreateStatic+0x2a>
	__asm volatile
 800a904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a908:	f383 8811 	msr	BASEPRI, r3
 800a90c:	f3bf 8f6f 	isb	sy
 800a910:	f3bf 8f4f 	dsb	sy
 800a914:	623b      	str	r3, [r7, #32]
}
 800a916:	bf00      	nop
 800a918:	e7fe      	b.n	800a918 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a91a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d10a      	bne.n	800a936 <xTaskCreateStatic+0x46>
	__asm volatile
 800a920:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a924:	f383 8811 	msr	BASEPRI, r3
 800a928:	f3bf 8f6f 	isb	sy
 800a92c:	f3bf 8f4f 	dsb	sy
 800a930:	61fb      	str	r3, [r7, #28]
}
 800a932:	bf00      	nop
 800a934:	e7fe      	b.n	800a934 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a936:	23a8      	movs	r3, #168	; 0xa8
 800a938:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a93a:	693b      	ldr	r3, [r7, #16]
 800a93c:	2ba8      	cmp	r3, #168	; 0xa8
 800a93e:	d00a      	beq.n	800a956 <xTaskCreateStatic+0x66>
	__asm volatile
 800a940:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a944:	f383 8811 	msr	BASEPRI, r3
 800a948:	f3bf 8f6f 	isb	sy
 800a94c:	f3bf 8f4f 	dsb	sy
 800a950:	61bb      	str	r3, [r7, #24]
}
 800a952:	bf00      	nop
 800a954:	e7fe      	b.n	800a954 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a956:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d01e      	beq.n	800a99c <xTaskCreateStatic+0xac>
 800a95e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a960:	2b00      	cmp	r3, #0
 800a962:	d01b      	beq.n	800a99c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a966:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a96a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a96c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a970:	2202      	movs	r2, #2
 800a972:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a976:	2300      	movs	r3, #0
 800a978:	9303      	str	r3, [sp, #12]
 800a97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a97c:	9302      	str	r3, [sp, #8]
 800a97e:	f107 0314 	add.w	r3, r7, #20
 800a982:	9301      	str	r3, [sp, #4]
 800a984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a986:	9300      	str	r3, [sp, #0]
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	687a      	ldr	r2, [r7, #4]
 800a98c:	68b9      	ldr	r1, [r7, #8]
 800a98e:	68f8      	ldr	r0, [r7, #12]
 800a990:	f000 f850 	bl	800aa34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a994:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a996:	f000 f8f3 	bl	800ab80 <prvAddNewTaskToReadyList>
 800a99a:	e001      	b.n	800a9a0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a99c:	2300      	movs	r3, #0
 800a99e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a9a0:	697b      	ldr	r3, [r7, #20]
	}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3728      	adds	r7, #40	; 0x28
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}

0800a9aa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a9aa:	b580      	push	{r7, lr}
 800a9ac:	b08c      	sub	sp, #48	; 0x30
 800a9ae:	af04      	add	r7, sp, #16
 800a9b0:	60f8      	str	r0, [r7, #12]
 800a9b2:	60b9      	str	r1, [r7, #8]
 800a9b4:	603b      	str	r3, [r7, #0]
 800a9b6:	4613      	mov	r3, r2
 800a9b8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a9ba:	88fb      	ldrh	r3, [r7, #6]
 800a9bc:	009b      	lsls	r3, r3, #2
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f7fe fdbe 	bl	8009540 <pvPortMalloc>
 800a9c4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d00e      	beq.n	800a9ea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a9cc:	20a8      	movs	r0, #168	; 0xa8
 800a9ce:	f7fe fdb7 	bl	8009540 <pvPortMalloc>
 800a9d2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a9d4:	69fb      	ldr	r3, [r7, #28]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d003      	beq.n	800a9e2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a9da:	69fb      	ldr	r3, [r7, #28]
 800a9dc:	697a      	ldr	r2, [r7, #20]
 800a9de:	631a      	str	r2, [r3, #48]	; 0x30
 800a9e0:	e005      	b.n	800a9ee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a9e2:	6978      	ldr	r0, [r7, #20]
 800a9e4:	f7fe fe78 	bl	80096d8 <vPortFree>
 800a9e8:	e001      	b.n	800a9ee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a9ee:	69fb      	ldr	r3, [r7, #28]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d017      	beq.n	800aa24 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a9f4:	69fb      	ldr	r3, [r7, #28]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a9fc:	88fa      	ldrh	r2, [r7, #6]
 800a9fe:	2300      	movs	r3, #0
 800aa00:	9303      	str	r3, [sp, #12]
 800aa02:	69fb      	ldr	r3, [r7, #28]
 800aa04:	9302      	str	r3, [sp, #8]
 800aa06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa08:	9301      	str	r3, [sp, #4]
 800aa0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa0c:	9300      	str	r3, [sp, #0]
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	68b9      	ldr	r1, [r7, #8]
 800aa12:	68f8      	ldr	r0, [r7, #12]
 800aa14:	f000 f80e 	bl	800aa34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aa18:	69f8      	ldr	r0, [r7, #28]
 800aa1a:	f000 f8b1 	bl	800ab80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800aa1e:	2301      	movs	r3, #1
 800aa20:	61bb      	str	r3, [r7, #24]
 800aa22:	e002      	b.n	800aa2a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aa24:	f04f 33ff 	mov.w	r3, #4294967295
 800aa28:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aa2a:	69bb      	ldr	r3, [r7, #24]
	}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	3720      	adds	r7, #32
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}

0800aa34 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b088      	sub	sp, #32
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	60f8      	str	r0, [r7, #12]
 800aa3c:	60b9      	str	r1, [r7, #8]
 800aa3e:	607a      	str	r2, [r7, #4]
 800aa40:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800aa42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa44:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	009b      	lsls	r3, r3, #2
 800aa4a:	461a      	mov	r2, r3
 800aa4c:	21a5      	movs	r1, #165	; 0xa5
 800aa4e:	f001 f9e5 	bl	800be1c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aa52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa56:	6879      	ldr	r1, [r7, #4]
 800aa58:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800aa5c:	440b      	add	r3, r1
 800aa5e:	009b      	lsls	r3, r3, #2
 800aa60:	4413      	add	r3, r2
 800aa62:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800aa64:	69bb      	ldr	r3, [r7, #24]
 800aa66:	f023 0307 	bic.w	r3, r3, #7
 800aa6a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aa6c:	69bb      	ldr	r3, [r7, #24]
 800aa6e:	f003 0307 	and.w	r3, r3, #7
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d00a      	beq.n	800aa8c <prvInitialiseNewTask+0x58>
	__asm volatile
 800aa76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa7a:	f383 8811 	msr	BASEPRI, r3
 800aa7e:	f3bf 8f6f 	isb	sy
 800aa82:	f3bf 8f4f 	dsb	sy
 800aa86:	617b      	str	r3, [r7, #20]
}
 800aa88:	bf00      	nop
 800aa8a:	e7fe      	b.n	800aa8a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d01f      	beq.n	800aad2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aa92:	2300      	movs	r3, #0
 800aa94:	61fb      	str	r3, [r7, #28]
 800aa96:	e012      	b.n	800aabe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800aa98:	68ba      	ldr	r2, [r7, #8]
 800aa9a:	69fb      	ldr	r3, [r7, #28]
 800aa9c:	4413      	add	r3, r2
 800aa9e:	7819      	ldrb	r1, [r3, #0]
 800aaa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aaa2:	69fb      	ldr	r3, [r7, #28]
 800aaa4:	4413      	add	r3, r2
 800aaa6:	3334      	adds	r3, #52	; 0x34
 800aaa8:	460a      	mov	r2, r1
 800aaaa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800aaac:	68ba      	ldr	r2, [r7, #8]
 800aaae:	69fb      	ldr	r3, [r7, #28]
 800aab0:	4413      	add	r3, r2
 800aab2:	781b      	ldrb	r3, [r3, #0]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d006      	beq.n	800aac6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aab8:	69fb      	ldr	r3, [r7, #28]
 800aaba:	3301      	adds	r3, #1
 800aabc:	61fb      	str	r3, [r7, #28]
 800aabe:	69fb      	ldr	r3, [r7, #28]
 800aac0:	2b0f      	cmp	r3, #15
 800aac2:	d9e9      	bls.n	800aa98 <prvInitialiseNewTask+0x64>
 800aac4:	e000      	b.n	800aac8 <prvInitialiseNewTask+0x94>
			{
				break;
 800aac6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800aac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaca:	2200      	movs	r2, #0
 800aacc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aad0:	e003      	b.n	800aada <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800aad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad4:	2200      	movs	r2, #0
 800aad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aadc:	2b37      	cmp	r3, #55	; 0x37
 800aade:	d901      	bls.n	800aae4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800aae0:	2337      	movs	r3, #55	; 0x37
 800aae2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800aae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aae8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800aaea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aaee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800aaf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800aaf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf8:	3304      	adds	r3, #4
 800aafa:	4618      	mov	r0, r3
 800aafc:	f7fe ff2a 	bl	8009954 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ab00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab02:	3318      	adds	r3, #24
 800ab04:	4618      	mov	r0, r3
 800ab06:	f7fe ff25 	bl	8009954 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ab0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab0e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab12:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ab16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab18:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ab1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab1e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ab20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab22:	2200      	movs	r2, #0
 800ab24:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ab28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ab30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab32:	3354      	adds	r3, #84	; 0x54
 800ab34:	224c      	movs	r2, #76	; 0x4c
 800ab36:	2100      	movs	r1, #0
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f001 f96f 	bl	800be1c <memset>
 800ab3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab40:	4a0c      	ldr	r2, [pc, #48]	; (800ab74 <prvInitialiseNewTask+0x140>)
 800ab42:	659a      	str	r2, [r3, #88]	; 0x58
 800ab44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab46:	4a0c      	ldr	r2, [pc, #48]	; (800ab78 <prvInitialiseNewTask+0x144>)
 800ab48:	65da      	str	r2, [r3, #92]	; 0x5c
 800ab4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab4c:	4a0b      	ldr	r2, [pc, #44]	; (800ab7c <prvInitialiseNewTask+0x148>)
 800ab4e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ab50:	683a      	ldr	r2, [r7, #0]
 800ab52:	68f9      	ldr	r1, [r7, #12]
 800ab54:	69b8      	ldr	r0, [r7, #24]
 800ab56:	f7fe ff91 	bl	8009a7c <pxPortInitialiseStack>
 800ab5a:	4602      	mov	r2, r0
 800ab5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab5e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ab60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d002      	beq.n	800ab6c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ab66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab6a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab6c:	bf00      	nop
 800ab6e:	3720      	adds	r7, #32
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}
 800ab74:	24005284 	.word	0x24005284
 800ab78:	240052ec 	.word	0x240052ec
 800ab7c:	24005354 	.word	0x24005354

0800ab80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b082      	sub	sp, #8
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ab88:	f7ff f8a4 	bl	8009cd4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ab8c:	4b2d      	ldr	r3, [pc, #180]	; (800ac44 <prvAddNewTaskToReadyList+0xc4>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	3301      	adds	r3, #1
 800ab92:	4a2c      	ldr	r2, [pc, #176]	; (800ac44 <prvAddNewTaskToReadyList+0xc4>)
 800ab94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ab96:	4b2c      	ldr	r3, [pc, #176]	; (800ac48 <prvAddNewTaskToReadyList+0xc8>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d109      	bne.n	800abb2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ab9e:	4a2a      	ldr	r2, [pc, #168]	; (800ac48 <prvAddNewTaskToReadyList+0xc8>)
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800aba4:	4b27      	ldr	r3, [pc, #156]	; (800ac44 <prvAddNewTaskToReadyList+0xc4>)
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	2b01      	cmp	r3, #1
 800abaa:	d110      	bne.n	800abce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800abac:	f000 fc26 	bl	800b3fc <prvInitialiseTaskLists>
 800abb0:	e00d      	b.n	800abce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800abb2:	4b26      	ldr	r3, [pc, #152]	; (800ac4c <prvAddNewTaskToReadyList+0xcc>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d109      	bne.n	800abce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800abba:	4b23      	ldr	r3, [pc, #140]	; (800ac48 <prvAddNewTaskToReadyList+0xc8>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abc4:	429a      	cmp	r2, r3
 800abc6:	d802      	bhi.n	800abce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800abc8:	4a1f      	ldr	r2, [pc, #124]	; (800ac48 <prvAddNewTaskToReadyList+0xc8>)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800abce:	4b20      	ldr	r3, [pc, #128]	; (800ac50 <prvAddNewTaskToReadyList+0xd0>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	3301      	adds	r3, #1
 800abd4:	4a1e      	ldr	r2, [pc, #120]	; (800ac50 <prvAddNewTaskToReadyList+0xd0>)
 800abd6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800abd8:	4b1d      	ldr	r3, [pc, #116]	; (800ac50 <prvAddNewTaskToReadyList+0xd0>)
 800abda:	681a      	ldr	r2, [r3, #0]
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abe4:	4b1b      	ldr	r3, [pc, #108]	; (800ac54 <prvAddNewTaskToReadyList+0xd4>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	429a      	cmp	r2, r3
 800abea:	d903      	bls.n	800abf4 <prvAddNewTaskToReadyList+0x74>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abf0:	4a18      	ldr	r2, [pc, #96]	; (800ac54 <prvAddNewTaskToReadyList+0xd4>)
 800abf2:	6013      	str	r3, [r2, #0]
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abf8:	4613      	mov	r3, r2
 800abfa:	009b      	lsls	r3, r3, #2
 800abfc:	4413      	add	r3, r2
 800abfe:	009b      	lsls	r3, r3, #2
 800ac00:	4a15      	ldr	r2, [pc, #84]	; (800ac58 <prvAddNewTaskToReadyList+0xd8>)
 800ac02:	441a      	add	r2, r3
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	3304      	adds	r3, #4
 800ac08:	4619      	mov	r1, r3
 800ac0a:	4610      	mov	r0, r2
 800ac0c:	f7fe feaf 	bl	800996e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ac10:	f7ff f890 	bl	8009d34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ac14:	4b0d      	ldr	r3, [pc, #52]	; (800ac4c <prvAddNewTaskToReadyList+0xcc>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d00e      	beq.n	800ac3a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ac1c:	4b0a      	ldr	r3, [pc, #40]	; (800ac48 <prvAddNewTaskToReadyList+0xc8>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac26:	429a      	cmp	r2, r3
 800ac28:	d207      	bcs.n	800ac3a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ac2a:	4b0c      	ldr	r3, [pc, #48]	; (800ac5c <prvAddNewTaskToReadyList+0xdc>)
 800ac2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac30:	601a      	str	r2, [r3, #0]
 800ac32:	f3bf 8f4f 	dsb	sy
 800ac36:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac3a:	bf00      	nop
 800ac3c:	3708      	adds	r7, #8
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}
 800ac42:	bf00      	nop
 800ac44:	2400512c 	.word	0x2400512c
 800ac48:	24004c58 	.word	0x24004c58
 800ac4c:	24005138 	.word	0x24005138
 800ac50:	24005148 	.word	0x24005148
 800ac54:	24005134 	.word	0x24005134
 800ac58:	24004c5c 	.word	0x24004c5c
 800ac5c:	e000ed04 	.word	0xe000ed04

0800ac60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b084      	sub	sp, #16
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d017      	beq.n	800aca2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ac72:	4b13      	ldr	r3, [pc, #76]	; (800acc0 <vTaskDelay+0x60>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d00a      	beq.n	800ac90 <vTaskDelay+0x30>
	__asm volatile
 800ac7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac7e:	f383 8811 	msr	BASEPRI, r3
 800ac82:	f3bf 8f6f 	isb	sy
 800ac86:	f3bf 8f4f 	dsb	sy
 800ac8a:	60bb      	str	r3, [r7, #8]
}
 800ac8c:	bf00      	nop
 800ac8e:	e7fe      	b.n	800ac8e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ac90:	f000 f88a 	bl	800ada8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ac94:	2100      	movs	r1, #0
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f000 fcfe 	bl	800b698 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ac9c:	f000 f892 	bl	800adc4 <xTaskResumeAll>
 800aca0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d107      	bne.n	800acb8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800aca8:	4b06      	ldr	r3, [pc, #24]	; (800acc4 <vTaskDelay+0x64>)
 800acaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acae:	601a      	str	r2, [r3, #0]
 800acb0:	f3bf 8f4f 	dsb	sy
 800acb4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800acb8:	bf00      	nop
 800acba:	3710      	adds	r7, #16
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}
 800acc0:	24005154 	.word	0x24005154
 800acc4:	e000ed04 	.word	0xe000ed04

0800acc8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b08a      	sub	sp, #40	; 0x28
 800accc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800acce:	2300      	movs	r3, #0
 800acd0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800acd2:	2300      	movs	r3, #0
 800acd4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800acd6:	463a      	mov	r2, r7
 800acd8:	1d39      	adds	r1, r7, #4
 800acda:	f107 0308 	add.w	r3, r7, #8
 800acde:	4618      	mov	r0, r3
 800ace0:	f7fe fbfa 	bl	80094d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ace4:	6839      	ldr	r1, [r7, #0]
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	68ba      	ldr	r2, [r7, #8]
 800acea:	9202      	str	r2, [sp, #8]
 800acec:	9301      	str	r3, [sp, #4]
 800acee:	2300      	movs	r3, #0
 800acf0:	9300      	str	r3, [sp, #0]
 800acf2:	2300      	movs	r3, #0
 800acf4:	460a      	mov	r2, r1
 800acf6:	4924      	ldr	r1, [pc, #144]	; (800ad88 <vTaskStartScheduler+0xc0>)
 800acf8:	4824      	ldr	r0, [pc, #144]	; (800ad8c <vTaskStartScheduler+0xc4>)
 800acfa:	f7ff fdf9 	bl	800a8f0 <xTaskCreateStatic>
 800acfe:	4603      	mov	r3, r0
 800ad00:	4a23      	ldr	r2, [pc, #140]	; (800ad90 <vTaskStartScheduler+0xc8>)
 800ad02:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ad04:	4b22      	ldr	r3, [pc, #136]	; (800ad90 <vTaskStartScheduler+0xc8>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d002      	beq.n	800ad12 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	617b      	str	r3, [r7, #20]
 800ad10:	e001      	b.n	800ad16 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ad12:	2300      	movs	r3, #0
 800ad14:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ad16:	697b      	ldr	r3, [r7, #20]
 800ad18:	2b01      	cmp	r3, #1
 800ad1a:	d102      	bne.n	800ad22 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ad1c:	f000 fd10 	bl	800b740 <xTimerCreateTimerTask>
 800ad20:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ad22:	697b      	ldr	r3, [r7, #20]
 800ad24:	2b01      	cmp	r3, #1
 800ad26:	d11b      	bne.n	800ad60 <vTaskStartScheduler+0x98>
	__asm volatile
 800ad28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad2c:	f383 8811 	msr	BASEPRI, r3
 800ad30:	f3bf 8f6f 	isb	sy
 800ad34:	f3bf 8f4f 	dsb	sy
 800ad38:	613b      	str	r3, [r7, #16]
}
 800ad3a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ad3c:	4b15      	ldr	r3, [pc, #84]	; (800ad94 <vTaskStartScheduler+0xcc>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	3354      	adds	r3, #84	; 0x54
 800ad42:	4a15      	ldr	r2, [pc, #84]	; (800ad98 <vTaskStartScheduler+0xd0>)
 800ad44:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ad46:	4b15      	ldr	r3, [pc, #84]	; (800ad9c <vTaskStartScheduler+0xd4>)
 800ad48:	f04f 32ff 	mov.w	r2, #4294967295
 800ad4c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ad4e:	4b14      	ldr	r3, [pc, #80]	; (800ada0 <vTaskStartScheduler+0xd8>)
 800ad50:	2201      	movs	r2, #1
 800ad52:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ad54:	4b13      	ldr	r3, [pc, #76]	; (800ada4 <vTaskStartScheduler+0xdc>)
 800ad56:	2200      	movs	r2, #0
 800ad58:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ad5a:	f7fe ff19 	bl	8009b90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ad5e:	e00e      	b.n	800ad7e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad66:	d10a      	bne.n	800ad7e <vTaskStartScheduler+0xb6>
	__asm volatile
 800ad68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad6c:	f383 8811 	msr	BASEPRI, r3
 800ad70:	f3bf 8f6f 	isb	sy
 800ad74:	f3bf 8f4f 	dsb	sy
 800ad78:	60fb      	str	r3, [r7, #12]
}
 800ad7a:	bf00      	nop
 800ad7c:	e7fe      	b.n	800ad7c <vTaskStartScheduler+0xb4>
}
 800ad7e:	bf00      	nop
 800ad80:	3718      	adds	r7, #24
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}
 800ad86:	bf00      	nop
 800ad88:	0800c814 	.word	0x0800c814
 800ad8c:	0800b3cd 	.word	0x0800b3cd
 800ad90:	24005150 	.word	0x24005150
 800ad94:	24004c58 	.word	0x24004c58
 800ad98:	24000060 	.word	0x24000060
 800ad9c:	2400514c 	.word	0x2400514c
 800ada0:	24005138 	.word	0x24005138
 800ada4:	24005130 	.word	0x24005130

0800ada8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ada8:	b480      	push	{r7}
 800adaa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800adac:	4b04      	ldr	r3, [pc, #16]	; (800adc0 <vTaskSuspendAll+0x18>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	3301      	adds	r3, #1
 800adb2:	4a03      	ldr	r2, [pc, #12]	; (800adc0 <vTaskSuspendAll+0x18>)
 800adb4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800adb6:	bf00      	nop
 800adb8:	46bd      	mov	sp, r7
 800adba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbe:	4770      	bx	lr
 800adc0:	24005154 	.word	0x24005154

0800adc4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b084      	sub	sp, #16
 800adc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800adca:	2300      	movs	r3, #0
 800adcc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800adce:	2300      	movs	r3, #0
 800add0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800add2:	4b42      	ldr	r3, [pc, #264]	; (800aedc <xTaskResumeAll+0x118>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d10a      	bne.n	800adf0 <xTaskResumeAll+0x2c>
	__asm volatile
 800adda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adde:	f383 8811 	msr	BASEPRI, r3
 800ade2:	f3bf 8f6f 	isb	sy
 800ade6:	f3bf 8f4f 	dsb	sy
 800adea:	603b      	str	r3, [r7, #0]
}
 800adec:	bf00      	nop
 800adee:	e7fe      	b.n	800adee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800adf0:	f7fe ff70 	bl	8009cd4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800adf4:	4b39      	ldr	r3, [pc, #228]	; (800aedc <xTaskResumeAll+0x118>)
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	3b01      	subs	r3, #1
 800adfa:	4a38      	ldr	r2, [pc, #224]	; (800aedc <xTaskResumeAll+0x118>)
 800adfc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800adfe:	4b37      	ldr	r3, [pc, #220]	; (800aedc <xTaskResumeAll+0x118>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d162      	bne.n	800aecc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ae06:	4b36      	ldr	r3, [pc, #216]	; (800aee0 <xTaskResumeAll+0x11c>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d05e      	beq.n	800aecc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ae0e:	e02f      	b.n	800ae70 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae10:	4b34      	ldr	r3, [pc, #208]	; (800aee4 <xTaskResumeAll+0x120>)
 800ae12:	68db      	ldr	r3, [r3, #12]
 800ae14:	68db      	ldr	r3, [r3, #12]
 800ae16:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	3318      	adds	r3, #24
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f7fe fe03 	bl	8009a28 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	3304      	adds	r3, #4
 800ae26:	4618      	mov	r0, r3
 800ae28:	f7fe fdfe 	bl	8009a28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae30:	4b2d      	ldr	r3, [pc, #180]	; (800aee8 <xTaskResumeAll+0x124>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	429a      	cmp	r2, r3
 800ae36:	d903      	bls.n	800ae40 <xTaskResumeAll+0x7c>
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae3c:	4a2a      	ldr	r2, [pc, #168]	; (800aee8 <xTaskResumeAll+0x124>)
 800ae3e:	6013      	str	r3, [r2, #0]
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae44:	4613      	mov	r3, r2
 800ae46:	009b      	lsls	r3, r3, #2
 800ae48:	4413      	add	r3, r2
 800ae4a:	009b      	lsls	r3, r3, #2
 800ae4c:	4a27      	ldr	r2, [pc, #156]	; (800aeec <xTaskResumeAll+0x128>)
 800ae4e:	441a      	add	r2, r3
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	3304      	adds	r3, #4
 800ae54:	4619      	mov	r1, r3
 800ae56:	4610      	mov	r0, r2
 800ae58:	f7fe fd89 	bl	800996e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae60:	4b23      	ldr	r3, [pc, #140]	; (800aef0 <xTaskResumeAll+0x12c>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae66:	429a      	cmp	r2, r3
 800ae68:	d302      	bcc.n	800ae70 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ae6a:	4b22      	ldr	r3, [pc, #136]	; (800aef4 <xTaskResumeAll+0x130>)
 800ae6c:	2201      	movs	r2, #1
 800ae6e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ae70:	4b1c      	ldr	r3, [pc, #112]	; (800aee4 <xTaskResumeAll+0x120>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d1cb      	bne.n	800ae10 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d001      	beq.n	800ae82 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ae7e:	f000 fb5f 	bl	800b540 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ae82:	4b1d      	ldr	r3, [pc, #116]	; (800aef8 <xTaskResumeAll+0x134>)
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d010      	beq.n	800aeb0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ae8e:	f000 f847 	bl	800af20 <xTaskIncrementTick>
 800ae92:	4603      	mov	r3, r0
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d002      	beq.n	800ae9e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ae98:	4b16      	ldr	r3, [pc, #88]	; (800aef4 <xTaskResumeAll+0x130>)
 800ae9a:	2201      	movs	r2, #1
 800ae9c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	3b01      	subs	r3, #1
 800aea2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d1f1      	bne.n	800ae8e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800aeaa:	4b13      	ldr	r3, [pc, #76]	; (800aef8 <xTaskResumeAll+0x134>)
 800aeac:	2200      	movs	r2, #0
 800aeae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800aeb0:	4b10      	ldr	r3, [pc, #64]	; (800aef4 <xTaskResumeAll+0x130>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d009      	beq.n	800aecc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800aeb8:	2301      	movs	r3, #1
 800aeba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800aebc:	4b0f      	ldr	r3, [pc, #60]	; (800aefc <xTaskResumeAll+0x138>)
 800aebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aec2:	601a      	str	r2, [r3, #0]
 800aec4:	f3bf 8f4f 	dsb	sy
 800aec8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aecc:	f7fe ff32 	bl	8009d34 <vPortExitCritical>

	return xAlreadyYielded;
 800aed0:	68bb      	ldr	r3, [r7, #8]
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	3710      	adds	r7, #16
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}
 800aeda:	bf00      	nop
 800aedc:	24005154 	.word	0x24005154
 800aee0:	2400512c 	.word	0x2400512c
 800aee4:	240050ec 	.word	0x240050ec
 800aee8:	24005134 	.word	0x24005134
 800aeec:	24004c5c 	.word	0x24004c5c
 800aef0:	24004c58 	.word	0x24004c58
 800aef4:	24005140 	.word	0x24005140
 800aef8:	2400513c 	.word	0x2400513c
 800aefc:	e000ed04 	.word	0xe000ed04

0800af00 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800af00:	b480      	push	{r7}
 800af02:	b083      	sub	sp, #12
 800af04:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800af06:	4b05      	ldr	r3, [pc, #20]	; (800af1c <xTaskGetTickCount+0x1c>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800af0c:	687b      	ldr	r3, [r7, #4]
}
 800af0e:	4618      	mov	r0, r3
 800af10:	370c      	adds	r7, #12
 800af12:	46bd      	mov	sp, r7
 800af14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af18:	4770      	bx	lr
 800af1a:	bf00      	nop
 800af1c:	24005130 	.word	0x24005130

0800af20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b086      	sub	sp, #24
 800af24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800af26:	2300      	movs	r3, #0
 800af28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af2a:	4b4f      	ldr	r3, [pc, #316]	; (800b068 <xTaskIncrementTick+0x148>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	f040 808f 	bne.w	800b052 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800af34:	4b4d      	ldr	r3, [pc, #308]	; (800b06c <xTaskIncrementTick+0x14c>)
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	3301      	adds	r3, #1
 800af3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800af3c:	4a4b      	ldr	r2, [pc, #300]	; (800b06c <xTaskIncrementTick+0x14c>)
 800af3e:	693b      	ldr	r3, [r7, #16]
 800af40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d120      	bne.n	800af8a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800af48:	4b49      	ldr	r3, [pc, #292]	; (800b070 <xTaskIncrementTick+0x150>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d00a      	beq.n	800af68 <xTaskIncrementTick+0x48>
	__asm volatile
 800af52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af56:	f383 8811 	msr	BASEPRI, r3
 800af5a:	f3bf 8f6f 	isb	sy
 800af5e:	f3bf 8f4f 	dsb	sy
 800af62:	603b      	str	r3, [r7, #0]
}
 800af64:	bf00      	nop
 800af66:	e7fe      	b.n	800af66 <xTaskIncrementTick+0x46>
 800af68:	4b41      	ldr	r3, [pc, #260]	; (800b070 <xTaskIncrementTick+0x150>)
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	60fb      	str	r3, [r7, #12]
 800af6e:	4b41      	ldr	r3, [pc, #260]	; (800b074 <xTaskIncrementTick+0x154>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	4a3f      	ldr	r2, [pc, #252]	; (800b070 <xTaskIncrementTick+0x150>)
 800af74:	6013      	str	r3, [r2, #0]
 800af76:	4a3f      	ldr	r2, [pc, #252]	; (800b074 <xTaskIncrementTick+0x154>)
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	6013      	str	r3, [r2, #0]
 800af7c:	4b3e      	ldr	r3, [pc, #248]	; (800b078 <xTaskIncrementTick+0x158>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	3301      	adds	r3, #1
 800af82:	4a3d      	ldr	r2, [pc, #244]	; (800b078 <xTaskIncrementTick+0x158>)
 800af84:	6013      	str	r3, [r2, #0]
 800af86:	f000 fadb 	bl	800b540 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800af8a:	4b3c      	ldr	r3, [pc, #240]	; (800b07c <xTaskIncrementTick+0x15c>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	693a      	ldr	r2, [r7, #16]
 800af90:	429a      	cmp	r2, r3
 800af92:	d349      	bcc.n	800b028 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800af94:	4b36      	ldr	r3, [pc, #216]	; (800b070 <xTaskIncrementTick+0x150>)
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d104      	bne.n	800afa8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af9e:	4b37      	ldr	r3, [pc, #220]	; (800b07c <xTaskIncrementTick+0x15c>)
 800afa0:	f04f 32ff 	mov.w	r2, #4294967295
 800afa4:	601a      	str	r2, [r3, #0]
					break;
 800afa6:	e03f      	b.n	800b028 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afa8:	4b31      	ldr	r3, [pc, #196]	; (800b070 <xTaskIncrementTick+0x150>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	68db      	ldr	r3, [r3, #12]
 800afae:	68db      	ldr	r3, [r3, #12]
 800afb0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	685b      	ldr	r3, [r3, #4]
 800afb6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800afb8:	693a      	ldr	r2, [r7, #16]
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	429a      	cmp	r2, r3
 800afbe:	d203      	bcs.n	800afc8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800afc0:	4a2e      	ldr	r2, [pc, #184]	; (800b07c <xTaskIncrementTick+0x15c>)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800afc6:	e02f      	b.n	800b028 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	3304      	adds	r3, #4
 800afcc:	4618      	mov	r0, r3
 800afce:	f7fe fd2b 	bl	8009a28 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d004      	beq.n	800afe4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	3318      	adds	r3, #24
 800afde:	4618      	mov	r0, r3
 800afe0:	f7fe fd22 	bl	8009a28 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afe8:	4b25      	ldr	r3, [pc, #148]	; (800b080 <xTaskIncrementTick+0x160>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	429a      	cmp	r2, r3
 800afee:	d903      	bls.n	800aff8 <xTaskIncrementTick+0xd8>
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aff4:	4a22      	ldr	r2, [pc, #136]	; (800b080 <xTaskIncrementTick+0x160>)
 800aff6:	6013      	str	r3, [r2, #0]
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800affc:	4613      	mov	r3, r2
 800affe:	009b      	lsls	r3, r3, #2
 800b000:	4413      	add	r3, r2
 800b002:	009b      	lsls	r3, r3, #2
 800b004:	4a1f      	ldr	r2, [pc, #124]	; (800b084 <xTaskIncrementTick+0x164>)
 800b006:	441a      	add	r2, r3
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	3304      	adds	r3, #4
 800b00c:	4619      	mov	r1, r3
 800b00e:	4610      	mov	r0, r2
 800b010:	f7fe fcad 	bl	800996e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b018:	4b1b      	ldr	r3, [pc, #108]	; (800b088 <xTaskIncrementTick+0x168>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b01e:	429a      	cmp	r2, r3
 800b020:	d3b8      	bcc.n	800af94 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b022:	2301      	movs	r3, #1
 800b024:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b026:	e7b5      	b.n	800af94 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b028:	4b17      	ldr	r3, [pc, #92]	; (800b088 <xTaskIncrementTick+0x168>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b02e:	4915      	ldr	r1, [pc, #84]	; (800b084 <xTaskIncrementTick+0x164>)
 800b030:	4613      	mov	r3, r2
 800b032:	009b      	lsls	r3, r3, #2
 800b034:	4413      	add	r3, r2
 800b036:	009b      	lsls	r3, r3, #2
 800b038:	440b      	add	r3, r1
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	2b01      	cmp	r3, #1
 800b03e:	d901      	bls.n	800b044 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b040:	2301      	movs	r3, #1
 800b042:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b044:	4b11      	ldr	r3, [pc, #68]	; (800b08c <xTaskIncrementTick+0x16c>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d007      	beq.n	800b05c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b04c:	2301      	movs	r3, #1
 800b04e:	617b      	str	r3, [r7, #20]
 800b050:	e004      	b.n	800b05c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b052:	4b0f      	ldr	r3, [pc, #60]	; (800b090 <xTaskIncrementTick+0x170>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	3301      	adds	r3, #1
 800b058:	4a0d      	ldr	r2, [pc, #52]	; (800b090 <xTaskIncrementTick+0x170>)
 800b05a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b05c:	697b      	ldr	r3, [r7, #20]
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3718      	adds	r7, #24
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}
 800b066:	bf00      	nop
 800b068:	24005154 	.word	0x24005154
 800b06c:	24005130 	.word	0x24005130
 800b070:	240050e4 	.word	0x240050e4
 800b074:	240050e8 	.word	0x240050e8
 800b078:	24005144 	.word	0x24005144
 800b07c:	2400514c 	.word	0x2400514c
 800b080:	24005134 	.word	0x24005134
 800b084:	24004c5c 	.word	0x24004c5c
 800b088:	24004c58 	.word	0x24004c58
 800b08c:	24005140 	.word	0x24005140
 800b090:	2400513c 	.word	0x2400513c

0800b094 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b094:	b480      	push	{r7}
 800b096:	b085      	sub	sp, #20
 800b098:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b09a:	4b2a      	ldr	r3, [pc, #168]	; (800b144 <vTaskSwitchContext+0xb0>)
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d003      	beq.n	800b0aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b0a2:	4b29      	ldr	r3, [pc, #164]	; (800b148 <vTaskSwitchContext+0xb4>)
 800b0a4:	2201      	movs	r2, #1
 800b0a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b0a8:	e046      	b.n	800b138 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b0aa:	4b27      	ldr	r3, [pc, #156]	; (800b148 <vTaskSwitchContext+0xb4>)
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0b0:	4b26      	ldr	r3, [pc, #152]	; (800b14c <vTaskSwitchContext+0xb8>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	60fb      	str	r3, [r7, #12]
 800b0b6:	e010      	b.n	800b0da <vTaskSwitchContext+0x46>
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d10a      	bne.n	800b0d4 <vTaskSwitchContext+0x40>
	__asm volatile
 800b0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0c2:	f383 8811 	msr	BASEPRI, r3
 800b0c6:	f3bf 8f6f 	isb	sy
 800b0ca:	f3bf 8f4f 	dsb	sy
 800b0ce:	607b      	str	r3, [r7, #4]
}
 800b0d0:	bf00      	nop
 800b0d2:	e7fe      	b.n	800b0d2 <vTaskSwitchContext+0x3e>
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	3b01      	subs	r3, #1
 800b0d8:	60fb      	str	r3, [r7, #12]
 800b0da:	491d      	ldr	r1, [pc, #116]	; (800b150 <vTaskSwitchContext+0xbc>)
 800b0dc:	68fa      	ldr	r2, [r7, #12]
 800b0de:	4613      	mov	r3, r2
 800b0e0:	009b      	lsls	r3, r3, #2
 800b0e2:	4413      	add	r3, r2
 800b0e4:	009b      	lsls	r3, r3, #2
 800b0e6:	440b      	add	r3, r1
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d0e4      	beq.n	800b0b8 <vTaskSwitchContext+0x24>
 800b0ee:	68fa      	ldr	r2, [r7, #12]
 800b0f0:	4613      	mov	r3, r2
 800b0f2:	009b      	lsls	r3, r3, #2
 800b0f4:	4413      	add	r3, r2
 800b0f6:	009b      	lsls	r3, r3, #2
 800b0f8:	4a15      	ldr	r2, [pc, #84]	; (800b150 <vTaskSwitchContext+0xbc>)
 800b0fa:	4413      	add	r3, r2
 800b0fc:	60bb      	str	r3, [r7, #8]
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	685b      	ldr	r3, [r3, #4]
 800b102:	685a      	ldr	r2, [r3, #4]
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	605a      	str	r2, [r3, #4]
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	685a      	ldr	r2, [r3, #4]
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	3308      	adds	r3, #8
 800b110:	429a      	cmp	r2, r3
 800b112:	d104      	bne.n	800b11e <vTaskSwitchContext+0x8a>
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	685b      	ldr	r3, [r3, #4]
 800b118:	685a      	ldr	r2, [r3, #4]
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	605a      	str	r2, [r3, #4]
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	685b      	ldr	r3, [r3, #4]
 800b122:	68db      	ldr	r3, [r3, #12]
 800b124:	4a0b      	ldr	r2, [pc, #44]	; (800b154 <vTaskSwitchContext+0xc0>)
 800b126:	6013      	str	r3, [r2, #0]
 800b128:	4a08      	ldr	r2, [pc, #32]	; (800b14c <vTaskSwitchContext+0xb8>)
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b12e:	4b09      	ldr	r3, [pc, #36]	; (800b154 <vTaskSwitchContext+0xc0>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	3354      	adds	r3, #84	; 0x54
 800b134:	4a08      	ldr	r2, [pc, #32]	; (800b158 <vTaskSwitchContext+0xc4>)
 800b136:	6013      	str	r3, [r2, #0]
}
 800b138:	bf00      	nop
 800b13a:	3714      	adds	r7, #20
 800b13c:	46bd      	mov	sp, r7
 800b13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b142:	4770      	bx	lr
 800b144:	24005154 	.word	0x24005154
 800b148:	24005140 	.word	0x24005140
 800b14c:	24005134 	.word	0x24005134
 800b150:	24004c5c 	.word	0x24004c5c
 800b154:	24004c58 	.word	0x24004c58
 800b158:	24000060 	.word	0x24000060

0800b15c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b084      	sub	sp, #16
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
 800b164:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d10a      	bne.n	800b182 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b170:	f383 8811 	msr	BASEPRI, r3
 800b174:	f3bf 8f6f 	isb	sy
 800b178:	f3bf 8f4f 	dsb	sy
 800b17c:	60fb      	str	r3, [r7, #12]
}
 800b17e:	bf00      	nop
 800b180:	e7fe      	b.n	800b180 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b182:	4b07      	ldr	r3, [pc, #28]	; (800b1a0 <vTaskPlaceOnEventList+0x44>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	3318      	adds	r3, #24
 800b188:	4619      	mov	r1, r3
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f7fe fc13 	bl	80099b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b190:	2101      	movs	r1, #1
 800b192:	6838      	ldr	r0, [r7, #0]
 800b194:	f000 fa80 	bl	800b698 <prvAddCurrentTaskToDelayedList>
}
 800b198:	bf00      	nop
 800b19a:	3710      	adds	r7, #16
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}
 800b1a0:	24004c58 	.word	0x24004c58

0800b1a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b086      	sub	sp, #24
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	60f8      	str	r0, [r7, #12]
 800b1ac:	60b9      	str	r1, [r7, #8]
 800b1ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d10a      	bne.n	800b1cc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b1b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ba:	f383 8811 	msr	BASEPRI, r3
 800b1be:	f3bf 8f6f 	isb	sy
 800b1c2:	f3bf 8f4f 	dsb	sy
 800b1c6:	617b      	str	r3, [r7, #20]
}
 800b1c8:	bf00      	nop
 800b1ca:	e7fe      	b.n	800b1ca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b1cc:	4b0a      	ldr	r3, [pc, #40]	; (800b1f8 <vTaskPlaceOnEventListRestricted+0x54>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	3318      	adds	r3, #24
 800b1d2:	4619      	mov	r1, r3
 800b1d4:	68f8      	ldr	r0, [r7, #12]
 800b1d6:	f7fe fbca 	bl	800996e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d002      	beq.n	800b1e6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b1e0:	f04f 33ff 	mov.w	r3, #4294967295
 800b1e4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b1e6:	6879      	ldr	r1, [r7, #4]
 800b1e8:	68b8      	ldr	r0, [r7, #8]
 800b1ea:	f000 fa55 	bl	800b698 <prvAddCurrentTaskToDelayedList>
	}
 800b1ee:	bf00      	nop
 800b1f0:	3718      	adds	r7, #24
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}
 800b1f6:	bf00      	nop
 800b1f8:	24004c58 	.word	0x24004c58

0800b1fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b086      	sub	sp, #24
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	68db      	ldr	r3, [r3, #12]
 800b208:	68db      	ldr	r3, [r3, #12]
 800b20a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b20c:	693b      	ldr	r3, [r7, #16]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d10a      	bne.n	800b228 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b212:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b216:	f383 8811 	msr	BASEPRI, r3
 800b21a:	f3bf 8f6f 	isb	sy
 800b21e:	f3bf 8f4f 	dsb	sy
 800b222:	60fb      	str	r3, [r7, #12]
}
 800b224:	bf00      	nop
 800b226:	e7fe      	b.n	800b226 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b228:	693b      	ldr	r3, [r7, #16]
 800b22a:	3318      	adds	r3, #24
 800b22c:	4618      	mov	r0, r3
 800b22e:	f7fe fbfb 	bl	8009a28 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b232:	4b1e      	ldr	r3, [pc, #120]	; (800b2ac <xTaskRemoveFromEventList+0xb0>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d11d      	bne.n	800b276 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b23a:	693b      	ldr	r3, [r7, #16]
 800b23c:	3304      	adds	r3, #4
 800b23e:	4618      	mov	r0, r3
 800b240:	f7fe fbf2 	bl	8009a28 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b248:	4b19      	ldr	r3, [pc, #100]	; (800b2b0 <xTaskRemoveFromEventList+0xb4>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	429a      	cmp	r2, r3
 800b24e:	d903      	bls.n	800b258 <xTaskRemoveFromEventList+0x5c>
 800b250:	693b      	ldr	r3, [r7, #16]
 800b252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b254:	4a16      	ldr	r2, [pc, #88]	; (800b2b0 <xTaskRemoveFromEventList+0xb4>)
 800b256:	6013      	str	r3, [r2, #0]
 800b258:	693b      	ldr	r3, [r7, #16]
 800b25a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b25c:	4613      	mov	r3, r2
 800b25e:	009b      	lsls	r3, r3, #2
 800b260:	4413      	add	r3, r2
 800b262:	009b      	lsls	r3, r3, #2
 800b264:	4a13      	ldr	r2, [pc, #76]	; (800b2b4 <xTaskRemoveFromEventList+0xb8>)
 800b266:	441a      	add	r2, r3
 800b268:	693b      	ldr	r3, [r7, #16]
 800b26a:	3304      	adds	r3, #4
 800b26c:	4619      	mov	r1, r3
 800b26e:	4610      	mov	r0, r2
 800b270:	f7fe fb7d 	bl	800996e <vListInsertEnd>
 800b274:	e005      	b.n	800b282 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	3318      	adds	r3, #24
 800b27a:	4619      	mov	r1, r3
 800b27c:	480e      	ldr	r0, [pc, #56]	; (800b2b8 <xTaskRemoveFromEventList+0xbc>)
 800b27e:	f7fe fb76 	bl	800996e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b286:	4b0d      	ldr	r3, [pc, #52]	; (800b2bc <xTaskRemoveFromEventList+0xc0>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b28c:	429a      	cmp	r2, r3
 800b28e:	d905      	bls.n	800b29c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b290:	2301      	movs	r3, #1
 800b292:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b294:	4b0a      	ldr	r3, [pc, #40]	; (800b2c0 <xTaskRemoveFromEventList+0xc4>)
 800b296:	2201      	movs	r2, #1
 800b298:	601a      	str	r2, [r3, #0]
 800b29a:	e001      	b.n	800b2a0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b29c:	2300      	movs	r3, #0
 800b29e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b2a0:	697b      	ldr	r3, [r7, #20]
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3718      	adds	r7, #24
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}
 800b2aa:	bf00      	nop
 800b2ac:	24005154 	.word	0x24005154
 800b2b0:	24005134 	.word	0x24005134
 800b2b4:	24004c5c 	.word	0x24004c5c
 800b2b8:	240050ec 	.word	0x240050ec
 800b2bc:	24004c58 	.word	0x24004c58
 800b2c0:	24005140 	.word	0x24005140

0800b2c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b083      	sub	sp, #12
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b2cc:	4b06      	ldr	r3, [pc, #24]	; (800b2e8 <vTaskInternalSetTimeOutState+0x24>)
 800b2ce:	681a      	ldr	r2, [r3, #0]
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b2d4:	4b05      	ldr	r3, [pc, #20]	; (800b2ec <vTaskInternalSetTimeOutState+0x28>)
 800b2d6:	681a      	ldr	r2, [r3, #0]
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	605a      	str	r2, [r3, #4]
}
 800b2dc:	bf00      	nop
 800b2de:	370c      	adds	r7, #12
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e6:	4770      	bx	lr
 800b2e8:	24005144 	.word	0x24005144
 800b2ec:	24005130 	.word	0x24005130

0800b2f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b088      	sub	sp, #32
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
 800b2f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d10a      	bne.n	800b316 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b300:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b304:	f383 8811 	msr	BASEPRI, r3
 800b308:	f3bf 8f6f 	isb	sy
 800b30c:	f3bf 8f4f 	dsb	sy
 800b310:	613b      	str	r3, [r7, #16]
}
 800b312:	bf00      	nop
 800b314:	e7fe      	b.n	800b314 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d10a      	bne.n	800b332 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b320:	f383 8811 	msr	BASEPRI, r3
 800b324:	f3bf 8f6f 	isb	sy
 800b328:	f3bf 8f4f 	dsb	sy
 800b32c:	60fb      	str	r3, [r7, #12]
}
 800b32e:	bf00      	nop
 800b330:	e7fe      	b.n	800b330 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b332:	f7fe fccf 	bl	8009cd4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b336:	4b1d      	ldr	r3, [pc, #116]	; (800b3ac <xTaskCheckForTimeOut+0xbc>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	685b      	ldr	r3, [r3, #4]
 800b340:	69ba      	ldr	r2, [r7, #24]
 800b342:	1ad3      	subs	r3, r2, r3
 800b344:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b34e:	d102      	bne.n	800b356 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b350:	2300      	movs	r3, #0
 800b352:	61fb      	str	r3, [r7, #28]
 800b354:	e023      	b.n	800b39e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681a      	ldr	r2, [r3, #0]
 800b35a:	4b15      	ldr	r3, [pc, #84]	; (800b3b0 <xTaskCheckForTimeOut+0xc0>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	429a      	cmp	r2, r3
 800b360:	d007      	beq.n	800b372 <xTaskCheckForTimeOut+0x82>
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	685b      	ldr	r3, [r3, #4]
 800b366:	69ba      	ldr	r2, [r7, #24]
 800b368:	429a      	cmp	r2, r3
 800b36a:	d302      	bcc.n	800b372 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b36c:	2301      	movs	r3, #1
 800b36e:	61fb      	str	r3, [r7, #28]
 800b370:	e015      	b.n	800b39e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	697a      	ldr	r2, [r7, #20]
 800b378:	429a      	cmp	r2, r3
 800b37a:	d20b      	bcs.n	800b394 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	681a      	ldr	r2, [r3, #0]
 800b380:	697b      	ldr	r3, [r7, #20]
 800b382:	1ad2      	subs	r2, r2, r3
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b388:	6878      	ldr	r0, [r7, #4]
 800b38a:	f7ff ff9b 	bl	800b2c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b38e:	2300      	movs	r3, #0
 800b390:	61fb      	str	r3, [r7, #28]
 800b392:	e004      	b.n	800b39e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	2200      	movs	r2, #0
 800b398:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b39a:	2301      	movs	r3, #1
 800b39c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b39e:	f7fe fcc9 	bl	8009d34 <vPortExitCritical>

	return xReturn;
 800b3a2:	69fb      	ldr	r3, [r7, #28]
}
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	3720      	adds	r7, #32
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}
 800b3ac:	24005130 	.word	0x24005130
 800b3b0:	24005144 	.word	0x24005144

0800b3b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b3b8:	4b03      	ldr	r3, [pc, #12]	; (800b3c8 <vTaskMissedYield+0x14>)
 800b3ba:	2201      	movs	r2, #1
 800b3bc:	601a      	str	r2, [r3, #0]
}
 800b3be:	bf00      	nop
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c6:	4770      	bx	lr
 800b3c8:	24005140 	.word	0x24005140

0800b3cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b082      	sub	sp, #8
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b3d4:	f000 f852 	bl	800b47c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b3d8:	4b06      	ldr	r3, [pc, #24]	; (800b3f4 <prvIdleTask+0x28>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	2b01      	cmp	r3, #1
 800b3de:	d9f9      	bls.n	800b3d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b3e0:	4b05      	ldr	r3, [pc, #20]	; (800b3f8 <prvIdleTask+0x2c>)
 800b3e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3e6:	601a      	str	r2, [r3, #0]
 800b3e8:	f3bf 8f4f 	dsb	sy
 800b3ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b3f0:	e7f0      	b.n	800b3d4 <prvIdleTask+0x8>
 800b3f2:	bf00      	nop
 800b3f4:	24004c5c 	.word	0x24004c5c
 800b3f8:	e000ed04 	.word	0xe000ed04

0800b3fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b082      	sub	sp, #8
 800b400:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b402:	2300      	movs	r3, #0
 800b404:	607b      	str	r3, [r7, #4]
 800b406:	e00c      	b.n	800b422 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b408:	687a      	ldr	r2, [r7, #4]
 800b40a:	4613      	mov	r3, r2
 800b40c:	009b      	lsls	r3, r3, #2
 800b40e:	4413      	add	r3, r2
 800b410:	009b      	lsls	r3, r3, #2
 800b412:	4a12      	ldr	r2, [pc, #72]	; (800b45c <prvInitialiseTaskLists+0x60>)
 800b414:	4413      	add	r3, r2
 800b416:	4618      	mov	r0, r3
 800b418:	f7fe fa7c 	bl	8009914 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	3301      	adds	r3, #1
 800b420:	607b      	str	r3, [r7, #4]
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2b37      	cmp	r3, #55	; 0x37
 800b426:	d9ef      	bls.n	800b408 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b428:	480d      	ldr	r0, [pc, #52]	; (800b460 <prvInitialiseTaskLists+0x64>)
 800b42a:	f7fe fa73 	bl	8009914 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b42e:	480d      	ldr	r0, [pc, #52]	; (800b464 <prvInitialiseTaskLists+0x68>)
 800b430:	f7fe fa70 	bl	8009914 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b434:	480c      	ldr	r0, [pc, #48]	; (800b468 <prvInitialiseTaskLists+0x6c>)
 800b436:	f7fe fa6d 	bl	8009914 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b43a:	480c      	ldr	r0, [pc, #48]	; (800b46c <prvInitialiseTaskLists+0x70>)
 800b43c:	f7fe fa6a 	bl	8009914 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b440:	480b      	ldr	r0, [pc, #44]	; (800b470 <prvInitialiseTaskLists+0x74>)
 800b442:	f7fe fa67 	bl	8009914 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b446:	4b0b      	ldr	r3, [pc, #44]	; (800b474 <prvInitialiseTaskLists+0x78>)
 800b448:	4a05      	ldr	r2, [pc, #20]	; (800b460 <prvInitialiseTaskLists+0x64>)
 800b44a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b44c:	4b0a      	ldr	r3, [pc, #40]	; (800b478 <prvInitialiseTaskLists+0x7c>)
 800b44e:	4a05      	ldr	r2, [pc, #20]	; (800b464 <prvInitialiseTaskLists+0x68>)
 800b450:	601a      	str	r2, [r3, #0]
}
 800b452:	bf00      	nop
 800b454:	3708      	adds	r7, #8
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}
 800b45a:	bf00      	nop
 800b45c:	24004c5c 	.word	0x24004c5c
 800b460:	240050bc 	.word	0x240050bc
 800b464:	240050d0 	.word	0x240050d0
 800b468:	240050ec 	.word	0x240050ec
 800b46c:	24005100 	.word	0x24005100
 800b470:	24005118 	.word	0x24005118
 800b474:	240050e4 	.word	0x240050e4
 800b478:	240050e8 	.word	0x240050e8

0800b47c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b082      	sub	sp, #8
 800b480:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b482:	e019      	b.n	800b4b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b484:	f7fe fc26 	bl	8009cd4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b488:	4b10      	ldr	r3, [pc, #64]	; (800b4cc <prvCheckTasksWaitingTermination+0x50>)
 800b48a:	68db      	ldr	r3, [r3, #12]
 800b48c:	68db      	ldr	r3, [r3, #12]
 800b48e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	3304      	adds	r3, #4
 800b494:	4618      	mov	r0, r3
 800b496:	f7fe fac7 	bl	8009a28 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b49a:	4b0d      	ldr	r3, [pc, #52]	; (800b4d0 <prvCheckTasksWaitingTermination+0x54>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	3b01      	subs	r3, #1
 800b4a0:	4a0b      	ldr	r2, [pc, #44]	; (800b4d0 <prvCheckTasksWaitingTermination+0x54>)
 800b4a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b4a4:	4b0b      	ldr	r3, [pc, #44]	; (800b4d4 <prvCheckTasksWaitingTermination+0x58>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	3b01      	subs	r3, #1
 800b4aa:	4a0a      	ldr	r2, [pc, #40]	; (800b4d4 <prvCheckTasksWaitingTermination+0x58>)
 800b4ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b4ae:	f7fe fc41 	bl	8009d34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f000 f810 	bl	800b4d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b4b8:	4b06      	ldr	r3, [pc, #24]	; (800b4d4 <prvCheckTasksWaitingTermination+0x58>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d1e1      	bne.n	800b484 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b4c0:	bf00      	nop
 800b4c2:	bf00      	nop
 800b4c4:	3708      	adds	r7, #8
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}
 800b4ca:	bf00      	nop
 800b4cc:	24005100 	.word	0x24005100
 800b4d0:	2400512c 	.word	0x2400512c
 800b4d4:	24005114 	.word	0x24005114

0800b4d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b084      	sub	sp, #16
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	3354      	adds	r3, #84	; 0x54
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f000 fca1 	bl	800be2c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d108      	bne.n	800b506 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f7fe f8ed 	bl	80096d8 <vPortFree>
				vPortFree( pxTCB );
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f7fe f8ea 	bl	80096d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b504:	e018      	b.n	800b538 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b50c:	2b01      	cmp	r3, #1
 800b50e:	d103      	bne.n	800b518 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b510:	6878      	ldr	r0, [r7, #4]
 800b512:	f7fe f8e1 	bl	80096d8 <vPortFree>
	}
 800b516:	e00f      	b.n	800b538 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b51e:	2b02      	cmp	r3, #2
 800b520:	d00a      	beq.n	800b538 <prvDeleteTCB+0x60>
	__asm volatile
 800b522:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b526:	f383 8811 	msr	BASEPRI, r3
 800b52a:	f3bf 8f6f 	isb	sy
 800b52e:	f3bf 8f4f 	dsb	sy
 800b532:	60fb      	str	r3, [r7, #12]
}
 800b534:	bf00      	nop
 800b536:	e7fe      	b.n	800b536 <prvDeleteTCB+0x5e>
	}
 800b538:	bf00      	nop
 800b53a:	3710      	adds	r7, #16
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}

0800b540 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b540:	b480      	push	{r7}
 800b542:	b083      	sub	sp, #12
 800b544:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b546:	4b0c      	ldr	r3, [pc, #48]	; (800b578 <prvResetNextTaskUnblockTime+0x38>)
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d104      	bne.n	800b55a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b550:	4b0a      	ldr	r3, [pc, #40]	; (800b57c <prvResetNextTaskUnblockTime+0x3c>)
 800b552:	f04f 32ff 	mov.w	r2, #4294967295
 800b556:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b558:	e008      	b.n	800b56c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b55a:	4b07      	ldr	r3, [pc, #28]	; (800b578 <prvResetNextTaskUnblockTime+0x38>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	68db      	ldr	r3, [r3, #12]
 800b560:	68db      	ldr	r3, [r3, #12]
 800b562:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	685b      	ldr	r3, [r3, #4]
 800b568:	4a04      	ldr	r2, [pc, #16]	; (800b57c <prvResetNextTaskUnblockTime+0x3c>)
 800b56a:	6013      	str	r3, [r2, #0]
}
 800b56c:	bf00      	nop
 800b56e:	370c      	adds	r7, #12
 800b570:	46bd      	mov	sp, r7
 800b572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b576:	4770      	bx	lr
 800b578:	240050e4 	.word	0x240050e4
 800b57c:	2400514c 	.word	0x2400514c

0800b580 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b580:	b480      	push	{r7}
 800b582:	b083      	sub	sp, #12
 800b584:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b586:	4b0b      	ldr	r3, [pc, #44]	; (800b5b4 <xTaskGetSchedulerState+0x34>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d102      	bne.n	800b594 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b58e:	2301      	movs	r3, #1
 800b590:	607b      	str	r3, [r7, #4]
 800b592:	e008      	b.n	800b5a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b594:	4b08      	ldr	r3, [pc, #32]	; (800b5b8 <xTaskGetSchedulerState+0x38>)
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d102      	bne.n	800b5a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b59c:	2302      	movs	r3, #2
 800b59e:	607b      	str	r3, [r7, #4]
 800b5a0:	e001      	b.n	800b5a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b5a6:	687b      	ldr	r3, [r7, #4]
	}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	370c      	adds	r7, #12
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b2:	4770      	bx	lr
 800b5b4:	24005138 	.word	0x24005138
 800b5b8:	24005154 	.word	0x24005154

0800b5bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b086      	sub	sp, #24
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d056      	beq.n	800b680 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b5d2:	4b2e      	ldr	r3, [pc, #184]	; (800b68c <xTaskPriorityDisinherit+0xd0>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	693a      	ldr	r2, [r7, #16]
 800b5d8:	429a      	cmp	r2, r3
 800b5da:	d00a      	beq.n	800b5f2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e0:	f383 8811 	msr	BASEPRI, r3
 800b5e4:	f3bf 8f6f 	isb	sy
 800b5e8:	f3bf 8f4f 	dsb	sy
 800b5ec:	60fb      	str	r3, [r7, #12]
}
 800b5ee:	bf00      	nop
 800b5f0:	e7fe      	b.n	800b5f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d10a      	bne.n	800b610 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b5fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5fe:	f383 8811 	msr	BASEPRI, r3
 800b602:	f3bf 8f6f 	isb	sy
 800b606:	f3bf 8f4f 	dsb	sy
 800b60a:	60bb      	str	r3, [r7, #8]
}
 800b60c:	bf00      	nop
 800b60e:	e7fe      	b.n	800b60e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b610:	693b      	ldr	r3, [r7, #16]
 800b612:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b614:	1e5a      	subs	r2, r3, #1
 800b616:	693b      	ldr	r3, [r7, #16]
 800b618:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b61a:	693b      	ldr	r3, [r7, #16]
 800b61c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b622:	429a      	cmp	r2, r3
 800b624:	d02c      	beq.n	800b680 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b626:	693b      	ldr	r3, [r7, #16]
 800b628:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d128      	bne.n	800b680 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b62e:	693b      	ldr	r3, [r7, #16]
 800b630:	3304      	adds	r3, #4
 800b632:	4618      	mov	r0, r3
 800b634:	f7fe f9f8 	bl	8009a28 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b638:	693b      	ldr	r3, [r7, #16]
 800b63a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b63c:	693b      	ldr	r3, [r7, #16]
 800b63e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b644:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b648:	693b      	ldr	r3, [r7, #16]
 800b64a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b64c:	693b      	ldr	r3, [r7, #16]
 800b64e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b650:	4b0f      	ldr	r3, [pc, #60]	; (800b690 <xTaskPriorityDisinherit+0xd4>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	429a      	cmp	r2, r3
 800b656:	d903      	bls.n	800b660 <xTaskPriorityDisinherit+0xa4>
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b65c:	4a0c      	ldr	r2, [pc, #48]	; (800b690 <xTaskPriorityDisinherit+0xd4>)
 800b65e:	6013      	str	r3, [r2, #0]
 800b660:	693b      	ldr	r3, [r7, #16]
 800b662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b664:	4613      	mov	r3, r2
 800b666:	009b      	lsls	r3, r3, #2
 800b668:	4413      	add	r3, r2
 800b66a:	009b      	lsls	r3, r3, #2
 800b66c:	4a09      	ldr	r2, [pc, #36]	; (800b694 <xTaskPriorityDisinherit+0xd8>)
 800b66e:	441a      	add	r2, r3
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	3304      	adds	r3, #4
 800b674:	4619      	mov	r1, r3
 800b676:	4610      	mov	r0, r2
 800b678:	f7fe f979 	bl	800996e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b67c:	2301      	movs	r3, #1
 800b67e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b680:	697b      	ldr	r3, [r7, #20]
	}
 800b682:	4618      	mov	r0, r3
 800b684:	3718      	adds	r7, #24
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}
 800b68a:	bf00      	nop
 800b68c:	24004c58 	.word	0x24004c58
 800b690:	24005134 	.word	0x24005134
 800b694:	24004c5c 	.word	0x24004c5c

0800b698 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b084      	sub	sp, #16
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
 800b6a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b6a2:	4b21      	ldr	r3, [pc, #132]	; (800b728 <prvAddCurrentTaskToDelayedList+0x90>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b6a8:	4b20      	ldr	r3, [pc, #128]	; (800b72c <prvAddCurrentTaskToDelayedList+0x94>)
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	3304      	adds	r3, #4
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f7fe f9ba 	bl	8009a28 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6ba:	d10a      	bne.n	800b6d2 <prvAddCurrentTaskToDelayedList+0x3a>
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d007      	beq.n	800b6d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b6c2:	4b1a      	ldr	r3, [pc, #104]	; (800b72c <prvAddCurrentTaskToDelayedList+0x94>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	3304      	adds	r3, #4
 800b6c8:	4619      	mov	r1, r3
 800b6ca:	4819      	ldr	r0, [pc, #100]	; (800b730 <prvAddCurrentTaskToDelayedList+0x98>)
 800b6cc:	f7fe f94f 	bl	800996e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b6d0:	e026      	b.n	800b720 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b6d2:	68fa      	ldr	r2, [r7, #12]
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	4413      	add	r3, r2
 800b6d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b6da:	4b14      	ldr	r3, [pc, #80]	; (800b72c <prvAddCurrentTaskToDelayedList+0x94>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	68ba      	ldr	r2, [r7, #8]
 800b6e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b6e2:	68ba      	ldr	r2, [r7, #8]
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	429a      	cmp	r2, r3
 800b6e8:	d209      	bcs.n	800b6fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b6ea:	4b12      	ldr	r3, [pc, #72]	; (800b734 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b6ec:	681a      	ldr	r2, [r3, #0]
 800b6ee:	4b0f      	ldr	r3, [pc, #60]	; (800b72c <prvAddCurrentTaskToDelayedList+0x94>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	3304      	adds	r3, #4
 800b6f4:	4619      	mov	r1, r3
 800b6f6:	4610      	mov	r0, r2
 800b6f8:	f7fe f95d 	bl	80099b6 <vListInsert>
}
 800b6fc:	e010      	b.n	800b720 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b6fe:	4b0e      	ldr	r3, [pc, #56]	; (800b738 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b700:	681a      	ldr	r2, [r3, #0]
 800b702:	4b0a      	ldr	r3, [pc, #40]	; (800b72c <prvAddCurrentTaskToDelayedList+0x94>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	3304      	adds	r3, #4
 800b708:	4619      	mov	r1, r3
 800b70a:	4610      	mov	r0, r2
 800b70c:	f7fe f953 	bl	80099b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b710:	4b0a      	ldr	r3, [pc, #40]	; (800b73c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	68ba      	ldr	r2, [r7, #8]
 800b716:	429a      	cmp	r2, r3
 800b718:	d202      	bcs.n	800b720 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b71a:	4a08      	ldr	r2, [pc, #32]	; (800b73c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	6013      	str	r3, [r2, #0]
}
 800b720:	bf00      	nop
 800b722:	3710      	adds	r7, #16
 800b724:	46bd      	mov	sp, r7
 800b726:	bd80      	pop	{r7, pc}
 800b728:	24005130 	.word	0x24005130
 800b72c:	24004c58 	.word	0x24004c58
 800b730:	24005118 	.word	0x24005118
 800b734:	240050e8 	.word	0x240050e8
 800b738:	240050e4 	.word	0x240050e4
 800b73c:	2400514c 	.word	0x2400514c

0800b740 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b08a      	sub	sp, #40	; 0x28
 800b744:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b746:	2300      	movs	r3, #0
 800b748:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b74a:	f000 fb07 	bl	800bd5c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b74e:	4b1c      	ldr	r3, [pc, #112]	; (800b7c0 <xTimerCreateTimerTask+0x80>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d021      	beq.n	800b79a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b756:	2300      	movs	r3, #0
 800b758:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b75a:	2300      	movs	r3, #0
 800b75c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b75e:	1d3a      	adds	r2, r7, #4
 800b760:	f107 0108 	add.w	r1, r7, #8
 800b764:	f107 030c 	add.w	r3, r7, #12
 800b768:	4618      	mov	r0, r3
 800b76a:	f7fd fecf 	bl	800950c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b76e:	6879      	ldr	r1, [r7, #4]
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	68fa      	ldr	r2, [r7, #12]
 800b774:	9202      	str	r2, [sp, #8]
 800b776:	9301      	str	r3, [sp, #4]
 800b778:	2302      	movs	r3, #2
 800b77a:	9300      	str	r3, [sp, #0]
 800b77c:	2300      	movs	r3, #0
 800b77e:	460a      	mov	r2, r1
 800b780:	4910      	ldr	r1, [pc, #64]	; (800b7c4 <xTimerCreateTimerTask+0x84>)
 800b782:	4811      	ldr	r0, [pc, #68]	; (800b7c8 <xTimerCreateTimerTask+0x88>)
 800b784:	f7ff f8b4 	bl	800a8f0 <xTaskCreateStatic>
 800b788:	4603      	mov	r3, r0
 800b78a:	4a10      	ldr	r2, [pc, #64]	; (800b7cc <xTimerCreateTimerTask+0x8c>)
 800b78c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b78e:	4b0f      	ldr	r3, [pc, #60]	; (800b7cc <xTimerCreateTimerTask+0x8c>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d001      	beq.n	800b79a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b796:	2301      	movs	r3, #1
 800b798:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b79a:	697b      	ldr	r3, [r7, #20]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d10a      	bne.n	800b7b6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b7a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7a4:	f383 8811 	msr	BASEPRI, r3
 800b7a8:	f3bf 8f6f 	isb	sy
 800b7ac:	f3bf 8f4f 	dsb	sy
 800b7b0:	613b      	str	r3, [r7, #16]
}
 800b7b2:	bf00      	nop
 800b7b4:	e7fe      	b.n	800b7b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b7b6:	697b      	ldr	r3, [r7, #20]
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	3718      	adds	r7, #24
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd80      	pop	{r7, pc}
 800b7c0:	24005188 	.word	0x24005188
 800b7c4:	0800c81c 	.word	0x0800c81c
 800b7c8:	0800b905 	.word	0x0800b905
 800b7cc:	2400518c 	.word	0x2400518c

0800b7d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b08a      	sub	sp, #40	; 0x28
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	60f8      	str	r0, [r7, #12]
 800b7d8:	60b9      	str	r1, [r7, #8]
 800b7da:	607a      	str	r2, [r7, #4]
 800b7dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d10a      	bne.n	800b7fe <xTimerGenericCommand+0x2e>
	__asm volatile
 800b7e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ec:	f383 8811 	msr	BASEPRI, r3
 800b7f0:	f3bf 8f6f 	isb	sy
 800b7f4:	f3bf 8f4f 	dsb	sy
 800b7f8:	623b      	str	r3, [r7, #32]
}
 800b7fa:	bf00      	nop
 800b7fc:	e7fe      	b.n	800b7fc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b7fe:	4b1a      	ldr	r3, [pc, #104]	; (800b868 <xTimerGenericCommand+0x98>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d02a      	beq.n	800b85c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b812:	68bb      	ldr	r3, [r7, #8]
 800b814:	2b05      	cmp	r3, #5
 800b816:	dc18      	bgt.n	800b84a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b818:	f7ff feb2 	bl	800b580 <xTaskGetSchedulerState>
 800b81c:	4603      	mov	r3, r0
 800b81e:	2b02      	cmp	r3, #2
 800b820:	d109      	bne.n	800b836 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b822:	4b11      	ldr	r3, [pc, #68]	; (800b868 <xTimerGenericCommand+0x98>)
 800b824:	6818      	ldr	r0, [r3, #0]
 800b826:	f107 0110 	add.w	r1, r7, #16
 800b82a:	2300      	movs	r3, #0
 800b82c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b82e:	f7fe fc77 	bl	800a120 <xQueueGenericSend>
 800b832:	6278      	str	r0, [r7, #36]	; 0x24
 800b834:	e012      	b.n	800b85c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b836:	4b0c      	ldr	r3, [pc, #48]	; (800b868 <xTimerGenericCommand+0x98>)
 800b838:	6818      	ldr	r0, [r3, #0]
 800b83a:	f107 0110 	add.w	r1, r7, #16
 800b83e:	2300      	movs	r3, #0
 800b840:	2200      	movs	r2, #0
 800b842:	f7fe fc6d 	bl	800a120 <xQueueGenericSend>
 800b846:	6278      	str	r0, [r7, #36]	; 0x24
 800b848:	e008      	b.n	800b85c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b84a:	4b07      	ldr	r3, [pc, #28]	; (800b868 <xTimerGenericCommand+0x98>)
 800b84c:	6818      	ldr	r0, [r3, #0]
 800b84e:	f107 0110 	add.w	r1, r7, #16
 800b852:	2300      	movs	r3, #0
 800b854:	683a      	ldr	r2, [r7, #0]
 800b856:	f7fe fd61 	bl	800a31c <xQueueGenericSendFromISR>
 800b85a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3728      	adds	r7, #40	; 0x28
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}
 800b866:	bf00      	nop
 800b868:	24005188 	.word	0x24005188

0800b86c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b088      	sub	sp, #32
 800b870:	af02      	add	r7, sp, #8
 800b872:	6078      	str	r0, [r7, #4]
 800b874:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b876:	4b22      	ldr	r3, [pc, #136]	; (800b900 <prvProcessExpiredTimer+0x94>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	68db      	ldr	r3, [r3, #12]
 800b87c:	68db      	ldr	r3, [r3, #12]
 800b87e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b880:	697b      	ldr	r3, [r7, #20]
 800b882:	3304      	adds	r3, #4
 800b884:	4618      	mov	r0, r3
 800b886:	f7fe f8cf 	bl	8009a28 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b88a:	697b      	ldr	r3, [r7, #20]
 800b88c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b890:	f003 0304 	and.w	r3, r3, #4
 800b894:	2b00      	cmp	r3, #0
 800b896:	d022      	beq.n	800b8de <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b898:	697b      	ldr	r3, [r7, #20]
 800b89a:	699a      	ldr	r2, [r3, #24]
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	18d1      	adds	r1, r2, r3
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	683a      	ldr	r2, [r7, #0]
 800b8a4:	6978      	ldr	r0, [r7, #20]
 800b8a6:	f000 f8d1 	bl	800ba4c <prvInsertTimerInActiveList>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d01f      	beq.n	800b8f0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	9300      	str	r3, [sp, #0]
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	687a      	ldr	r2, [r7, #4]
 800b8b8:	2100      	movs	r1, #0
 800b8ba:	6978      	ldr	r0, [r7, #20]
 800b8bc:	f7ff ff88 	bl	800b7d0 <xTimerGenericCommand>
 800b8c0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b8c2:	693b      	ldr	r3, [r7, #16]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d113      	bne.n	800b8f0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b8c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8cc:	f383 8811 	msr	BASEPRI, r3
 800b8d0:	f3bf 8f6f 	isb	sy
 800b8d4:	f3bf 8f4f 	dsb	sy
 800b8d8:	60fb      	str	r3, [r7, #12]
}
 800b8da:	bf00      	nop
 800b8dc:	e7fe      	b.n	800b8dc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b8e4:	f023 0301 	bic.w	r3, r3, #1
 800b8e8:	b2da      	uxtb	r2, r3
 800b8ea:	697b      	ldr	r3, [r7, #20]
 800b8ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b8f0:	697b      	ldr	r3, [r7, #20]
 800b8f2:	6a1b      	ldr	r3, [r3, #32]
 800b8f4:	6978      	ldr	r0, [r7, #20]
 800b8f6:	4798      	blx	r3
}
 800b8f8:	bf00      	nop
 800b8fa:	3718      	adds	r7, #24
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}
 800b900:	24005180 	.word	0x24005180

0800b904 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b084      	sub	sp, #16
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b90c:	f107 0308 	add.w	r3, r7, #8
 800b910:	4618      	mov	r0, r3
 800b912:	f000 f857 	bl	800b9c4 <prvGetNextExpireTime>
 800b916:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	4619      	mov	r1, r3
 800b91c:	68f8      	ldr	r0, [r7, #12]
 800b91e:	f000 f803 	bl	800b928 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b922:	f000 f8d5 	bl	800bad0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b926:	e7f1      	b.n	800b90c <prvTimerTask+0x8>

0800b928 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b084      	sub	sp, #16
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
 800b930:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b932:	f7ff fa39 	bl	800ada8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b936:	f107 0308 	add.w	r3, r7, #8
 800b93a:	4618      	mov	r0, r3
 800b93c:	f000 f866 	bl	800ba0c <prvSampleTimeNow>
 800b940:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d130      	bne.n	800b9aa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d10a      	bne.n	800b964 <prvProcessTimerOrBlockTask+0x3c>
 800b94e:	687a      	ldr	r2, [r7, #4]
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	429a      	cmp	r2, r3
 800b954:	d806      	bhi.n	800b964 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b956:	f7ff fa35 	bl	800adc4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b95a:	68f9      	ldr	r1, [r7, #12]
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	f7ff ff85 	bl	800b86c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b962:	e024      	b.n	800b9ae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d008      	beq.n	800b97c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b96a:	4b13      	ldr	r3, [pc, #76]	; (800b9b8 <prvProcessTimerOrBlockTask+0x90>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d101      	bne.n	800b978 <prvProcessTimerOrBlockTask+0x50>
 800b974:	2301      	movs	r3, #1
 800b976:	e000      	b.n	800b97a <prvProcessTimerOrBlockTask+0x52>
 800b978:	2300      	movs	r3, #0
 800b97a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b97c:	4b0f      	ldr	r3, [pc, #60]	; (800b9bc <prvProcessTimerOrBlockTask+0x94>)
 800b97e:	6818      	ldr	r0, [r3, #0]
 800b980:	687a      	ldr	r2, [r7, #4]
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	1ad3      	subs	r3, r2, r3
 800b986:	683a      	ldr	r2, [r7, #0]
 800b988:	4619      	mov	r1, r3
 800b98a:	f7fe ff7d 	bl	800a888 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b98e:	f7ff fa19 	bl	800adc4 <xTaskResumeAll>
 800b992:	4603      	mov	r3, r0
 800b994:	2b00      	cmp	r3, #0
 800b996:	d10a      	bne.n	800b9ae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b998:	4b09      	ldr	r3, [pc, #36]	; (800b9c0 <prvProcessTimerOrBlockTask+0x98>)
 800b99a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b99e:	601a      	str	r2, [r3, #0]
 800b9a0:	f3bf 8f4f 	dsb	sy
 800b9a4:	f3bf 8f6f 	isb	sy
}
 800b9a8:	e001      	b.n	800b9ae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b9aa:	f7ff fa0b 	bl	800adc4 <xTaskResumeAll>
}
 800b9ae:	bf00      	nop
 800b9b0:	3710      	adds	r7, #16
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}
 800b9b6:	bf00      	nop
 800b9b8:	24005184 	.word	0x24005184
 800b9bc:	24005188 	.word	0x24005188
 800b9c0:	e000ed04 	.word	0xe000ed04

0800b9c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b9c4:	b480      	push	{r7}
 800b9c6:	b085      	sub	sp, #20
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b9cc:	4b0e      	ldr	r3, [pc, #56]	; (800ba08 <prvGetNextExpireTime+0x44>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d101      	bne.n	800b9da <prvGetNextExpireTime+0x16>
 800b9d6:	2201      	movs	r2, #1
 800b9d8:	e000      	b.n	800b9dc <prvGetNextExpireTime+0x18>
 800b9da:	2200      	movs	r2, #0
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d105      	bne.n	800b9f4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b9e8:	4b07      	ldr	r3, [pc, #28]	; (800ba08 <prvGetNextExpireTime+0x44>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	68db      	ldr	r3, [r3, #12]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	60fb      	str	r3, [r7, #12]
 800b9f2:	e001      	b.n	800b9f8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
}
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	3714      	adds	r7, #20
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba04:	4770      	bx	lr
 800ba06:	bf00      	nop
 800ba08:	24005180 	.word	0x24005180

0800ba0c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b084      	sub	sp, #16
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ba14:	f7ff fa74 	bl	800af00 <xTaskGetTickCount>
 800ba18:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ba1a:	4b0b      	ldr	r3, [pc, #44]	; (800ba48 <prvSampleTimeNow+0x3c>)
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	68fa      	ldr	r2, [r7, #12]
 800ba20:	429a      	cmp	r2, r3
 800ba22:	d205      	bcs.n	800ba30 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ba24:	f000 f936 	bl	800bc94 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2201      	movs	r2, #1
 800ba2c:	601a      	str	r2, [r3, #0]
 800ba2e:	e002      	b.n	800ba36 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2200      	movs	r2, #0
 800ba34:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ba36:	4a04      	ldr	r2, [pc, #16]	; (800ba48 <prvSampleTimeNow+0x3c>)
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	3710      	adds	r7, #16
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}
 800ba46:	bf00      	nop
 800ba48:	24005190 	.word	0x24005190

0800ba4c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b086      	sub	sp, #24
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	60f8      	str	r0, [r7, #12]
 800ba54:	60b9      	str	r1, [r7, #8]
 800ba56:	607a      	str	r2, [r7, #4]
 800ba58:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	68ba      	ldr	r2, [r7, #8]
 800ba62:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	68fa      	ldr	r2, [r7, #12]
 800ba68:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ba6a:	68ba      	ldr	r2, [r7, #8]
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	429a      	cmp	r2, r3
 800ba70:	d812      	bhi.n	800ba98 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba72:	687a      	ldr	r2, [r7, #4]
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	1ad2      	subs	r2, r2, r3
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	699b      	ldr	r3, [r3, #24]
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	d302      	bcc.n	800ba86 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ba80:	2301      	movs	r3, #1
 800ba82:	617b      	str	r3, [r7, #20]
 800ba84:	e01b      	b.n	800babe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ba86:	4b10      	ldr	r3, [pc, #64]	; (800bac8 <prvInsertTimerInActiveList+0x7c>)
 800ba88:	681a      	ldr	r2, [r3, #0]
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	3304      	adds	r3, #4
 800ba8e:	4619      	mov	r1, r3
 800ba90:	4610      	mov	r0, r2
 800ba92:	f7fd ff90 	bl	80099b6 <vListInsert>
 800ba96:	e012      	b.n	800babe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ba98:	687a      	ldr	r2, [r7, #4]
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	429a      	cmp	r2, r3
 800ba9e:	d206      	bcs.n	800baae <prvInsertTimerInActiveList+0x62>
 800baa0:	68ba      	ldr	r2, [r7, #8]
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	429a      	cmp	r2, r3
 800baa6:	d302      	bcc.n	800baae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800baa8:	2301      	movs	r3, #1
 800baaa:	617b      	str	r3, [r7, #20]
 800baac:	e007      	b.n	800babe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800baae:	4b07      	ldr	r3, [pc, #28]	; (800bacc <prvInsertTimerInActiveList+0x80>)
 800bab0:	681a      	ldr	r2, [r3, #0]
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	3304      	adds	r3, #4
 800bab6:	4619      	mov	r1, r3
 800bab8:	4610      	mov	r0, r2
 800baba:	f7fd ff7c 	bl	80099b6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800babe:	697b      	ldr	r3, [r7, #20]
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	3718      	adds	r7, #24
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}
 800bac8:	24005184 	.word	0x24005184
 800bacc:	24005180 	.word	0x24005180

0800bad0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b08e      	sub	sp, #56	; 0x38
 800bad4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bad6:	e0ca      	b.n	800bc6e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2b00      	cmp	r3, #0
 800badc:	da18      	bge.n	800bb10 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bade:	1d3b      	adds	r3, r7, #4
 800bae0:	3304      	adds	r3, #4
 800bae2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d10a      	bne.n	800bb00 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800baea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baee:	f383 8811 	msr	BASEPRI, r3
 800baf2:	f3bf 8f6f 	isb	sy
 800baf6:	f3bf 8f4f 	dsb	sy
 800bafa:	61fb      	str	r3, [r7, #28]
}
 800bafc:	bf00      	nop
 800bafe:	e7fe      	b.n	800bafe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bb00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb06:	6850      	ldr	r0, [r2, #4]
 800bb08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb0a:	6892      	ldr	r2, [r2, #8]
 800bb0c:	4611      	mov	r1, r2
 800bb0e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	f2c0 80ab 	blt.w	800bc6e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bb1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb1e:	695b      	ldr	r3, [r3, #20]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d004      	beq.n	800bb2e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bb24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb26:	3304      	adds	r3, #4
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f7fd ff7d 	bl	8009a28 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bb2e:	463b      	mov	r3, r7
 800bb30:	4618      	mov	r0, r3
 800bb32:	f7ff ff6b 	bl	800ba0c <prvSampleTimeNow>
 800bb36:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2b09      	cmp	r3, #9
 800bb3c:	f200 8096 	bhi.w	800bc6c <prvProcessReceivedCommands+0x19c>
 800bb40:	a201      	add	r2, pc, #4	; (adr r2, 800bb48 <prvProcessReceivedCommands+0x78>)
 800bb42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb46:	bf00      	nop
 800bb48:	0800bb71 	.word	0x0800bb71
 800bb4c:	0800bb71 	.word	0x0800bb71
 800bb50:	0800bb71 	.word	0x0800bb71
 800bb54:	0800bbe5 	.word	0x0800bbe5
 800bb58:	0800bbf9 	.word	0x0800bbf9
 800bb5c:	0800bc43 	.word	0x0800bc43
 800bb60:	0800bb71 	.word	0x0800bb71
 800bb64:	0800bb71 	.word	0x0800bb71
 800bb68:	0800bbe5 	.word	0x0800bbe5
 800bb6c:	0800bbf9 	.word	0x0800bbf9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bb70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb76:	f043 0301 	orr.w	r3, r3, #1
 800bb7a:	b2da      	uxtb	r2, r3
 800bb7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bb82:	68ba      	ldr	r2, [r7, #8]
 800bb84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb86:	699b      	ldr	r3, [r3, #24]
 800bb88:	18d1      	adds	r1, r2, r3
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb90:	f7ff ff5c 	bl	800ba4c <prvInsertTimerInActiveList>
 800bb94:	4603      	mov	r3, r0
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d069      	beq.n	800bc6e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bb9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb9c:	6a1b      	ldr	r3, [r3, #32]
 800bb9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bba0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bba4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bba8:	f003 0304 	and.w	r3, r3, #4
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d05e      	beq.n	800bc6e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bbb0:	68ba      	ldr	r2, [r7, #8]
 800bbb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbb4:	699b      	ldr	r3, [r3, #24]
 800bbb6:	441a      	add	r2, r3
 800bbb8:	2300      	movs	r3, #0
 800bbba:	9300      	str	r3, [sp, #0]
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	2100      	movs	r1, #0
 800bbc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbc2:	f7ff fe05 	bl	800b7d0 <xTimerGenericCommand>
 800bbc6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bbc8:	6a3b      	ldr	r3, [r7, #32]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d14f      	bne.n	800bc6e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800bbce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd2:	f383 8811 	msr	BASEPRI, r3
 800bbd6:	f3bf 8f6f 	isb	sy
 800bbda:	f3bf 8f4f 	dsb	sy
 800bbde:	61bb      	str	r3, [r7, #24]
}
 800bbe0:	bf00      	nop
 800bbe2:	e7fe      	b.n	800bbe2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bbe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbe6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bbea:	f023 0301 	bic.w	r3, r3, #1
 800bbee:	b2da      	uxtb	r2, r3
 800bbf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bbf6:	e03a      	b.n	800bc6e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bbf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bbfe:	f043 0301 	orr.w	r3, r3, #1
 800bc02:	b2da      	uxtb	r2, r3
 800bc04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bc0a:	68ba      	ldr	r2, [r7, #8]
 800bc0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc0e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bc10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc12:	699b      	ldr	r3, [r3, #24]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d10a      	bne.n	800bc2e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800bc18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc1c:	f383 8811 	msr	BASEPRI, r3
 800bc20:	f3bf 8f6f 	isb	sy
 800bc24:	f3bf 8f4f 	dsb	sy
 800bc28:	617b      	str	r3, [r7, #20]
}
 800bc2a:	bf00      	nop
 800bc2c:	e7fe      	b.n	800bc2c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bc2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc30:	699a      	ldr	r2, [r3, #24]
 800bc32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc34:	18d1      	adds	r1, r2, r3
 800bc36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc3c:	f7ff ff06 	bl	800ba4c <prvInsertTimerInActiveList>
					break;
 800bc40:	e015      	b.n	800bc6e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bc42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc48:	f003 0302 	and.w	r3, r3, #2
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d103      	bne.n	800bc58 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800bc50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc52:	f7fd fd41 	bl	80096d8 <vPortFree>
 800bc56:	e00a      	b.n	800bc6e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bc58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc5e:	f023 0301 	bic.w	r3, r3, #1
 800bc62:	b2da      	uxtb	r2, r3
 800bc64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bc6a:	e000      	b.n	800bc6e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800bc6c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bc6e:	4b08      	ldr	r3, [pc, #32]	; (800bc90 <prvProcessReceivedCommands+0x1c0>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	1d39      	adds	r1, r7, #4
 800bc74:	2200      	movs	r2, #0
 800bc76:	4618      	mov	r0, r3
 800bc78:	f7fe fbec 	bl	800a454 <xQueueReceive>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	f47f af2a 	bne.w	800bad8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bc84:	bf00      	nop
 800bc86:	bf00      	nop
 800bc88:	3730      	adds	r7, #48	; 0x30
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}
 800bc8e:	bf00      	nop
 800bc90:	24005188 	.word	0x24005188

0800bc94 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b088      	sub	sp, #32
 800bc98:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bc9a:	e048      	b.n	800bd2e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bc9c:	4b2d      	ldr	r3, [pc, #180]	; (800bd54 <prvSwitchTimerLists+0xc0>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	68db      	ldr	r3, [r3, #12]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bca6:	4b2b      	ldr	r3, [pc, #172]	; (800bd54 <prvSwitchTimerLists+0xc0>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	68db      	ldr	r3, [r3, #12]
 800bcac:	68db      	ldr	r3, [r3, #12]
 800bcae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	3304      	adds	r3, #4
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f7fd feb7 	bl	8009a28 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	6a1b      	ldr	r3, [r3, #32]
 800bcbe:	68f8      	ldr	r0, [r7, #12]
 800bcc0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bcc8:	f003 0304 	and.w	r3, r3, #4
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d02e      	beq.n	800bd2e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	699b      	ldr	r3, [r3, #24]
 800bcd4:	693a      	ldr	r2, [r7, #16]
 800bcd6:	4413      	add	r3, r2
 800bcd8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bcda:	68ba      	ldr	r2, [r7, #8]
 800bcdc:	693b      	ldr	r3, [r7, #16]
 800bcde:	429a      	cmp	r2, r3
 800bce0:	d90e      	bls.n	800bd00 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	68ba      	ldr	r2, [r7, #8]
 800bce6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	68fa      	ldr	r2, [r7, #12]
 800bcec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bcee:	4b19      	ldr	r3, [pc, #100]	; (800bd54 <prvSwitchTimerLists+0xc0>)
 800bcf0:	681a      	ldr	r2, [r3, #0]
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	3304      	adds	r3, #4
 800bcf6:	4619      	mov	r1, r3
 800bcf8:	4610      	mov	r0, r2
 800bcfa:	f7fd fe5c 	bl	80099b6 <vListInsert>
 800bcfe:	e016      	b.n	800bd2e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bd00:	2300      	movs	r3, #0
 800bd02:	9300      	str	r3, [sp, #0]
 800bd04:	2300      	movs	r3, #0
 800bd06:	693a      	ldr	r2, [r7, #16]
 800bd08:	2100      	movs	r1, #0
 800bd0a:	68f8      	ldr	r0, [r7, #12]
 800bd0c:	f7ff fd60 	bl	800b7d0 <xTimerGenericCommand>
 800bd10:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d10a      	bne.n	800bd2e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800bd18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd1c:	f383 8811 	msr	BASEPRI, r3
 800bd20:	f3bf 8f6f 	isb	sy
 800bd24:	f3bf 8f4f 	dsb	sy
 800bd28:	603b      	str	r3, [r7, #0]
}
 800bd2a:	bf00      	nop
 800bd2c:	e7fe      	b.n	800bd2c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bd2e:	4b09      	ldr	r3, [pc, #36]	; (800bd54 <prvSwitchTimerLists+0xc0>)
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d1b1      	bne.n	800bc9c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bd38:	4b06      	ldr	r3, [pc, #24]	; (800bd54 <prvSwitchTimerLists+0xc0>)
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bd3e:	4b06      	ldr	r3, [pc, #24]	; (800bd58 <prvSwitchTimerLists+0xc4>)
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	4a04      	ldr	r2, [pc, #16]	; (800bd54 <prvSwitchTimerLists+0xc0>)
 800bd44:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bd46:	4a04      	ldr	r2, [pc, #16]	; (800bd58 <prvSwitchTimerLists+0xc4>)
 800bd48:	697b      	ldr	r3, [r7, #20]
 800bd4a:	6013      	str	r3, [r2, #0]
}
 800bd4c:	bf00      	nop
 800bd4e:	3718      	adds	r7, #24
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bd80      	pop	{r7, pc}
 800bd54:	24005180 	.word	0x24005180
 800bd58:	24005184 	.word	0x24005184

0800bd5c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b082      	sub	sp, #8
 800bd60:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bd62:	f7fd ffb7 	bl	8009cd4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bd66:	4b15      	ldr	r3, [pc, #84]	; (800bdbc <prvCheckForValidListAndQueue+0x60>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d120      	bne.n	800bdb0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bd6e:	4814      	ldr	r0, [pc, #80]	; (800bdc0 <prvCheckForValidListAndQueue+0x64>)
 800bd70:	f7fd fdd0 	bl	8009914 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bd74:	4813      	ldr	r0, [pc, #76]	; (800bdc4 <prvCheckForValidListAndQueue+0x68>)
 800bd76:	f7fd fdcd 	bl	8009914 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bd7a:	4b13      	ldr	r3, [pc, #76]	; (800bdc8 <prvCheckForValidListAndQueue+0x6c>)
 800bd7c:	4a10      	ldr	r2, [pc, #64]	; (800bdc0 <prvCheckForValidListAndQueue+0x64>)
 800bd7e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bd80:	4b12      	ldr	r3, [pc, #72]	; (800bdcc <prvCheckForValidListAndQueue+0x70>)
 800bd82:	4a10      	ldr	r2, [pc, #64]	; (800bdc4 <prvCheckForValidListAndQueue+0x68>)
 800bd84:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bd86:	2300      	movs	r3, #0
 800bd88:	9300      	str	r3, [sp, #0]
 800bd8a:	4b11      	ldr	r3, [pc, #68]	; (800bdd0 <prvCheckForValidListAndQueue+0x74>)
 800bd8c:	4a11      	ldr	r2, [pc, #68]	; (800bdd4 <prvCheckForValidListAndQueue+0x78>)
 800bd8e:	2110      	movs	r1, #16
 800bd90:	200a      	movs	r0, #10
 800bd92:	f7fe f929 	bl	8009fe8 <xQueueGenericCreateStatic>
 800bd96:	4603      	mov	r3, r0
 800bd98:	4a08      	ldr	r2, [pc, #32]	; (800bdbc <prvCheckForValidListAndQueue+0x60>)
 800bd9a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bd9c:	4b07      	ldr	r3, [pc, #28]	; (800bdbc <prvCheckForValidListAndQueue+0x60>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d005      	beq.n	800bdb0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bda4:	4b05      	ldr	r3, [pc, #20]	; (800bdbc <prvCheckForValidListAndQueue+0x60>)
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	490b      	ldr	r1, [pc, #44]	; (800bdd8 <prvCheckForValidListAndQueue+0x7c>)
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f7fe fd42 	bl	800a834 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bdb0:	f7fd ffc0 	bl	8009d34 <vPortExitCritical>
}
 800bdb4:	bf00      	nop
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}
 800bdba:	bf00      	nop
 800bdbc:	24005188 	.word	0x24005188
 800bdc0:	24005158 	.word	0x24005158
 800bdc4:	2400516c 	.word	0x2400516c
 800bdc8:	24005180 	.word	0x24005180
 800bdcc:	24005184 	.word	0x24005184
 800bdd0:	24005234 	.word	0x24005234
 800bdd4:	24005194 	.word	0x24005194
 800bdd8:	0800c824 	.word	0x0800c824

0800bddc <siprintf>:
 800bddc:	b40e      	push	{r1, r2, r3}
 800bdde:	b500      	push	{lr}
 800bde0:	b09c      	sub	sp, #112	; 0x70
 800bde2:	ab1d      	add	r3, sp, #116	; 0x74
 800bde4:	9002      	str	r0, [sp, #8]
 800bde6:	9006      	str	r0, [sp, #24]
 800bde8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bdec:	4809      	ldr	r0, [pc, #36]	; (800be14 <siprintf+0x38>)
 800bdee:	9107      	str	r1, [sp, #28]
 800bdf0:	9104      	str	r1, [sp, #16]
 800bdf2:	4909      	ldr	r1, [pc, #36]	; (800be18 <siprintf+0x3c>)
 800bdf4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdf8:	9105      	str	r1, [sp, #20]
 800bdfa:	6800      	ldr	r0, [r0, #0]
 800bdfc:	9301      	str	r3, [sp, #4]
 800bdfe:	a902      	add	r1, sp, #8
 800be00:	f000 f9f6 	bl	800c1f0 <_svfiprintf_r>
 800be04:	9b02      	ldr	r3, [sp, #8]
 800be06:	2200      	movs	r2, #0
 800be08:	701a      	strb	r2, [r3, #0]
 800be0a:	b01c      	add	sp, #112	; 0x70
 800be0c:	f85d eb04 	ldr.w	lr, [sp], #4
 800be10:	b003      	add	sp, #12
 800be12:	4770      	bx	lr
 800be14:	24000060 	.word	0x24000060
 800be18:	ffff0208 	.word	0xffff0208

0800be1c <memset>:
 800be1c:	4402      	add	r2, r0
 800be1e:	4603      	mov	r3, r0
 800be20:	4293      	cmp	r3, r2
 800be22:	d100      	bne.n	800be26 <memset+0xa>
 800be24:	4770      	bx	lr
 800be26:	f803 1b01 	strb.w	r1, [r3], #1
 800be2a:	e7f9      	b.n	800be20 <memset+0x4>

0800be2c <_reclaim_reent>:
 800be2c:	4b29      	ldr	r3, [pc, #164]	; (800bed4 <_reclaim_reent+0xa8>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	4283      	cmp	r3, r0
 800be32:	b570      	push	{r4, r5, r6, lr}
 800be34:	4604      	mov	r4, r0
 800be36:	d04b      	beq.n	800bed0 <_reclaim_reent+0xa4>
 800be38:	69c3      	ldr	r3, [r0, #28]
 800be3a:	b143      	cbz	r3, 800be4e <_reclaim_reent+0x22>
 800be3c:	68db      	ldr	r3, [r3, #12]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d144      	bne.n	800becc <_reclaim_reent+0xa0>
 800be42:	69e3      	ldr	r3, [r4, #28]
 800be44:	6819      	ldr	r1, [r3, #0]
 800be46:	b111      	cbz	r1, 800be4e <_reclaim_reent+0x22>
 800be48:	4620      	mov	r0, r4
 800be4a:	f000 f87f 	bl	800bf4c <_free_r>
 800be4e:	6961      	ldr	r1, [r4, #20]
 800be50:	b111      	cbz	r1, 800be58 <_reclaim_reent+0x2c>
 800be52:	4620      	mov	r0, r4
 800be54:	f000 f87a 	bl	800bf4c <_free_r>
 800be58:	69e1      	ldr	r1, [r4, #28]
 800be5a:	b111      	cbz	r1, 800be62 <_reclaim_reent+0x36>
 800be5c:	4620      	mov	r0, r4
 800be5e:	f000 f875 	bl	800bf4c <_free_r>
 800be62:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800be64:	b111      	cbz	r1, 800be6c <_reclaim_reent+0x40>
 800be66:	4620      	mov	r0, r4
 800be68:	f000 f870 	bl	800bf4c <_free_r>
 800be6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be6e:	b111      	cbz	r1, 800be76 <_reclaim_reent+0x4a>
 800be70:	4620      	mov	r0, r4
 800be72:	f000 f86b 	bl	800bf4c <_free_r>
 800be76:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800be78:	b111      	cbz	r1, 800be80 <_reclaim_reent+0x54>
 800be7a:	4620      	mov	r0, r4
 800be7c:	f000 f866 	bl	800bf4c <_free_r>
 800be80:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800be82:	b111      	cbz	r1, 800be8a <_reclaim_reent+0x5e>
 800be84:	4620      	mov	r0, r4
 800be86:	f000 f861 	bl	800bf4c <_free_r>
 800be8a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800be8c:	b111      	cbz	r1, 800be94 <_reclaim_reent+0x68>
 800be8e:	4620      	mov	r0, r4
 800be90:	f000 f85c 	bl	800bf4c <_free_r>
 800be94:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800be96:	b111      	cbz	r1, 800be9e <_reclaim_reent+0x72>
 800be98:	4620      	mov	r0, r4
 800be9a:	f000 f857 	bl	800bf4c <_free_r>
 800be9e:	6a23      	ldr	r3, [r4, #32]
 800bea0:	b1b3      	cbz	r3, 800bed0 <_reclaim_reent+0xa4>
 800bea2:	4620      	mov	r0, r4
 800bea4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bea8:	4718      	bx	r3
 800beaa:	5949      	ldr	r1, [r1, r5]
 800beac:	b941      	cbnz	r1, 800bec0 <_reclaim_reent+0x94>
 800beae:	3504      	adds	r5, #4
 800beb0:	69e3      	ldr	r3, [r4, #28]
 800beb2:	2d80      	cmp	r5, #128	; 0x80
 800beb4:	68d9      	ldr	r1, [r3, #12]
 800beb6:	d1f8      	bne.n	800beaa <_reclaim_reent+0x7e>
 800beb8:	4620      	mov	r0, r4
 800beba:	f000 f847 	bl	800bf4c <_free_r>
 800bebe:	e7c0      	b.n	800be42 <_reclaim_reent+0x16>
 800bec0:	680e      	ldr	r6, [r1, #0]
 800bec2:	4620      	mov	r0, r4
 800bec4:	f000 f842 	bl	800bf4c <_free_r>
 800bec8:	4631      	mov	r1, r6
 800beca:	e7ef      	b.n	800beac <_reclaim_reent+0x80>
 800becc:	2500      	movs	r5, #0
 800bece:	e7ef      	b.n	800beb0 <_reclaim_reent+0x84>
 800bed0:	bd70      	pop	{r4, r5, r6, pc}
 800bed2:	bf00      	nop
 800bed4:	24000060 	.word	0x24000060

0800bed8 <__errno>:
 800bed8:	4b01      	ldr	r3, [pc, #4]	; (800bee0 <__errno+0x8>)
 800beda:	6818      	ldr	r0, [r3, #0]
 800bedc:	4770      	bx	lr
 800bede:	bf00      	nop
 800bee0:	24000060 	.word	0x24000060

0800bee4 <__libc_init_array>:
 800bee4:	b570      	push	{r4, r5, r6, lr}
 800bee6:	4d0d      	ldr	r5, [pc, #52]	; (800bf1c <__libc_init_array+0x38>)
 800bee8:	4c0d      	ldr	r4, [pc, #52]	; (800bf20 <__libc_init_array+0x3c>)
 800beea:	1b64      	subs	r4, r4, r5
 800beec:	10a4      	asrs	r4, r4, #2
 800beee:	2600      	movs	r6, #0
 800bef0:	42a6      	cmp	r6, r4
 800bef2:	d109      	bne.n	800bf08 <__libc_init_array+0x24>
 800bef4:	4d0b      	ldr	r5, [pc, #44]	; (800bf24 <__libc_init_array+0x40>)
 800bef6:	4c0c      	ldr	r4, [pc, #48]	; (800bf28 <__libc_init_array+0x44>)
 800bef8:	f000 fc6a 	bl	800c7d0 <_init>
 800befc:	1b64      	subs	r4, r4, r5
 800befe:	10a4      	asrs	r4, r4, #2
 800bf00:	2600      	movs	r6, #0
 800bf02:	42a6      	cmp	r6, r4
 800bf04:	d105      	bne.n	800bf12 <__libc_init_array+0x2e>
 800bf06:	bd70      	pop	{r4, r5, r6, pc}
 800bf08:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf0c:	4798      	blx	r3
 800bf0e:	3601      	adds	r6, #1
 800bf10:	e7ee      	b.n	800bef0 <__libc_init_array+0xc>
 800bf12:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf16:	4798      	blx	r3
 800bf18:	3601      	adds	r6, #1
 800bf1a:	e7f2      	b.n	800bf02 <__libc_init_array+0x1e>
 800bf1c:	0800c90c 	.word	0x0800c90c
 800bf20:	0800c90c 	.word	0x0800c90c
 800bf24:	0800c90c 	.word	0x0800c90c
 800bf28:	0800c910 	.word	0x0800c910

0800bf2c <__retarget_lock_acquire_recursive>:
 800bf2c:	4770      	bx	lr

0800bf2e <__retarget_lock_release_recursive>:
 800bf2e:	4770      	bx	lr

0800bf30 <memcpy>:
 800bf30:	440a      	add	r2, r1
 800bf32:	4291      	cmp	r1, r2
 800bf34:	f100 33ff 	add.w	r3, r0, #4294967295
 800bf38:	d100      	bne.n	800bf3c <memcpy+0xc>
 800bf3a:	4770      	bx	lr
 800bf3c:	b510      	push	{r4, lr}
 800bf3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf42:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf46:	4291      	cmp	r1, r2
 800bf48:	d1f9      	bne.n	800bf3e <memcpy+0xe>
 800bf4a:	bd10      	pop	{r4, pc}

0800bf4c <_free_r>:
 800bf4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf4e:	2900      	cmp	r1, #0
 800bf50:	d044      	beq.n	800bfdc <_free_r+0x90>
 800bf52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf56:	9001      	str	r0, [sp, #4]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	f1a1 0404 	sub.w	r4, r1, #4
 800bf5e:	bfb8      	it	lt
 800bf60:	18e4      	addlt	r4, r4, r3
 800bf62:	f000 f8df 	bl	800c124 <__malloc_lock>
 800bf66:	4a1e      	ldr	r2, [pc, #120]	; (800bfe0 <_free_r+0x94>)
 800bf68:	9801      	ldr	r0, [sp, #4]
 800bf6a:	6813      	ldr	r3, [r2, #0]
 800bf6c:	b933      	cbnz	r3, 800bf7c <_free_r+0x30>
 800bf6e:	6063      	str	r3, [r4, #4]
 800bf70:	6014      	str	r4, [r2, #0]
 800bf72:	b003      	add	sp, #12
 800bf74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bf78:	f000 b8da 	b.w	800c130 <__malloc_unlock>
 800bf7c:	42a3      	cmp	r3, r4
 800bf7e:	d908      	bls.n	800bf92 <_free_r+0x46>
 800bf80:	6825      	ldr	r5, [r4, #0]
 800bf82:	1961      	adds	r1, r4, r5
 800bf84:	428b      	cmp	r3, r1
 800bf86:	bf01      	itttt	eq
 800bf88:	6819      	ldreq	r1, [r3, #0]
 800bf8a:	685b      	ldreq	r3, [r3, #4]
 800bf8c:	1949      	addeq	r1, r1, r5
 800bf8e:	6021      	streq	r1, [r4, #0]
 800bf90:	e7ed      	b.n	800bf6e <_free_r+0x22>
 800bf92:	461a      	mov	r2, r3
 800bf94:	685b      	ldr	r3, [r3, #4]
 800bf96:	b10b      	cbz	r3, 800bf9c <_free_r+0x50>
 800bf98:	42a3      	cmp	r3, r4
 800bf9a:	d9fa      	bls.n	800bf92 <_free_r+0x46>
 800bf9c:	6811      	ldr	r1, [r2, #0]
 800bf9e:	1855      	adds	r5, r2, r1
 800bfa0:	42a5      	cmp	r5, r4
 800bfa2:	d10b      	bne.n	800bfbc <_free_r+0x70>
 800bfa4:	6824      	ldr	r4, [r4, #0]
 800bfa6:	4421      	add	r1, r4
 800bfa8:	1854      	adds	r4, r2, r1
 800bfaa:	42a3      	cmp	r3, r4
 800bfac:	6011      	str	r1, [r2, #0]
 800bfae:	d1e0      	bne.n	800bf72 <_free_r+0x26>
 800bfb0:	681c      	ldr	r4, [r3, #0]
 800bfb2:	685b      	ldr	r3, [r3, #4]
 800bfb4:	6053      	str	r3, [r2, #4]
 800bfb6:	440c      	add	r4, r1
 800bfb8:	6014      	str	r4, [r2, #0]
 800bfba:	e7da      	b.n	800bf72 <_free_r+0x26>
 800bfbc:	d902      	bls.n	800bfc4 <_free_r+0x78>
 800bfbe:	230c      	movs	r3, #12
 800bfc0:	6003      	str	r3, [r0, #0]
 800bfc2:	e7d6      	b.n	800bf72 <_free_r+0x26>
 800bfc4:	6825      	ldr	r5, [r4, #0]
 800bfc6:	1961      	adds	r1, r4, r5
 800bfc8:	428b      	cmp	r3, r1
 800bfca:	bf04      	itt	eq
 800bfcc:	6819      	ldreq	r1, [r3, #0]
 800bfce:	685b      	ldreq	r3, [r3, #4]
 800bfd0:	6063      	str	r3, [r4, #4]
 800bfd2:	bf04      	itt	eq
 800bfd4:	1949      	addeq	r1, r1, r5
 800bfd6:	6021      	streq	r1, [r4, #0]
 800bfd8:	6054      	str	r4, [r2, #4]
 800bfda:	e7ca      	b.n	800bf72 <_free_r+0x26>
 800bfdc:	b003      	add	sp, #12
 800bfde:	bd30      	pop	{r4, r5, pc}
 800bfe0:	240053c4 	.word	0x240053c4

0800bfe4 <sbrk_aligned>:
 800bfe4:	b570      	push	{r4, r5, r6, lr}
 800bfe6:	4e0e      	ldr	r6, [pc, #56]	; (800c020 <sbrk_aligned+0x3c>)
 800bfe8:	460c      	mov	r4, r1
 800bfea:	6831      	ldr	r1, [r6, #0]
 800bfec:	4605      	mov	r5, r0
 800bfee:	b911      	cbnz	r1, 800bff6 <sbrk_aligned+0x12>
 800bff0:	f000 fba6 	bl	800c740 <_sbrk_r>
 800bff4:	6030      	str	r0, [r6, #0]
 800bff6:	4621      	mov	r1, r4
 800bff8:	4628      	mov	r0, r5
 800bffa:	f000 fba1 	bl	800c740 <_sbrk_r>
 800bffe:	1c43      	adds	r3, r0, #1
 800c000:	d00a      	beq.n	800c018 <sbrk_aligned+0x34>
 800c002:	1cc4      	adds	r4, r0, #3
 800c004:	f024 0403 	bic.w	r4, r4, #3
 800c008:	42a0      	cmp	r0, r4
 800c00a:	d007      	beq.n	800c01c <sbrk_aligned+0x38>
 800c00c:	1a21      	subs	r1, r4, r0
 800c00e:	4628      	mov	r0, r5
 800c010:	f000 fb96 	bl	800c740 <_sbrk_r>
 800c014:	3001      	adds	r0, #1
 800c016:	d101      	bne.n	800c01c <sbrk_aligned+0x38>
 800c018:	f04f 34ff 	mov.w	r4, #4294967295
 800c01c:	4620      	mov	r0, r4
 800c01e:	bd70      	pop	{r4, r5, r6, pc}
 800c020:	240053c8 	.word	0x240053c8

0800c024 <_malloc_r>:
 800c024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c028:	1ccd      	adds	r5, r1, #3
 800c02a:	f025 0503 	bic.w	r5, r5, #3
 800c02e:	3508      	adds	r5, #8
 800c030:	2d0c      	cmp	r5, #12
 800c032:	bf38      	it	cc
 800c034:	250c      	movcc	r5, #12
 800c036:	2d00      	cmp	r5, #0
 800c038:	4607      	mov	r7, r0
 800c03a:	db01      	blt.n	800c040 <_malloc_r+0x1c>
 800c03c:	42a9      	cmp	r1, r5
 800c03e:	d905      	bls.n	800c04c <_malloc_r+0x28>
 800c040:	230c      	movs	r3, #12
 800c042:	603b      	str	r3, [r7, #0]
 800c044:	2600      	movs	r6, #0
 800c046:	4630      	mov	r0, r6
 800c048:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c04c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c120 <_malloc_r+0xfc>
 800c050:	f000 f868 	bl	800c124 <__malloc_lock>
 800c054:	f8d8 3000 	ldr.w	r3, [r8]
 800c058:	461c      	mov	r4, r3
 800c05a:	bb5c      	cbnz	r4, 800c0b4 <_malloc_r+0x90>
 800c05c:	4629      	mov	r1, r5
 800c05e:	4638      	mov	r0, r7
 800c060:	f7ff ffc0 	bl	800bfe4 <sbrk_aligned>
 800c064:	1c43      	adds	r3, r0, #1
 800c066:	4604      	mov	r4, r0
 800c068:	d155      	bne.n	800c116 <_malloc_r+0xf2>
 800c06a:	f8d8 4000 	ldr.w	r4, [r8]
 800c06e:	4626      	mov	r6, r4
 800c070:	2e00      	cmp	r6, #0
 800c072:	d145      	bne.n	800c100 <_malloc_r+0xdc>
 800c074:	2c00      	cmp	r4, #0
 800c076:	d048      	beq.n	800c10a <_malloc_r+0xe6>
 800c078:	6823      	ldr	r3, [r4, #0]
 800c07a:	4631      	mov	r1, r6
 800c07c:	4638      	mov	r0, r7
 800c07e:	eb04 0903 	add.w	r9, r4, r3
 800c082:	f000 fb5d 	bl	800c740 <_sbrk_r>
 800c086:	4581      	cmp	r9, r0
 800c088:	d13f      	bne.n	800c10a <_malloc_r+0xe6>
 800c08a:	6821      	ldr	r1, [r4, #0]
 800c08c:	1a6d      	subs	r5, r5, r1
 800c08e:	4629      	mov	r1, r5
 800c090:	4638      	mov	r0, r7
 800c092:	f7ff ffa7 	bl	800bfe4 <sbrk_aligned>
 800c096:	3001      	adds	r0, #1
 800c098:	d037      	beq.n	800c10a <_malloc_r+0xe6>
 800c09a:	6823      	ldr	r3, [r4, #0]
 800c09c:	442b      	add	r3, r5
 800c09e:	6023      	str	r3, [r4, #0]
 800c0a0:	f8d8 3000 	ldr.w	r3, [r8]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d038      	beq.n	800c11a <_malloc_r+0xf6>
 800c0a8:	685a      	ldr	r2, [r3, #4]
 800c0aa:	42a2      	cmp	r2, r4
 800c0ac:	d12b      	bne.n	800c106 <_malloc_r+0xe2>
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	605a      	str	r2, [r3, #4]
 800c0b2:	e00f      	b.n	800c0d4 <_malloc_r+0xb0>
 800c0b4:	6822      	ldr	r2, [r4, #0]
 800c0b6:	1b52      	subs	r2, r2, r5
 800c0b8:	d41f      	bmi.n	800c0fa <_malloc_r+0xd6>
 800c0ba:	2a0b      	cmp	r2, #11
 800c0bc:	d917      	bls.n	800c0ee <_malloc_r+0xca>
 800c0be:	1961      	adds	r1, r4, r5
 800c0c0:	42a3      	cmp	r3, r4
 800c0c2:	6025      	str	r5, [r4, #0]
 800c0c4:	bf18      	it	ne
 800c0c6:	6059      	strne	r1, [r3, #4]
 800c0c8:	6863      	ldr	r3, [r4, #4]
 800c0ca:	bf08      	it	eq
 800c0cc:	f8c8 1000 	streq.w	r1, [r8]
 800c0d0:	5162      	str	r2, [r4, r5]
 800c0d2:	604b      	str	r3, [r1, #4]
 800c0d4:	4638      	mov	r0, r7
 800c0d6:	f104 060b 	add.w	r6, r4, #11
 800c0da:	f000 f829 	bl	800c130 <__malloc_unlock>
 800c0de:	f026 0607 	bic.w	r6, r6, #7
 800c0e2:	1d23      	adds	r3, r4, #4
 800c0e4:	1af2      	subs	r2, r6, r3
 800c0e6:	d0ae      	beq.n	800c046 <_malloc_r+0x22>
 800c0e8:	1b9b      	subs	r3, r3, r6
 800c0ea:	50a3      	str	r3, [r4, r2]
 800c0ec:	e7ab      	b.n	800c046 <_malloc_r+0x22>
 800c0ee:	42a3      	cmp	r3, r4
 800c0f0:	6862      	ldr	r2, [r4, #4]
 800c0f2:	d1dd      	bne.n	800c0b0 <_malloc_r+0x8c>
 800c0f4:	f8c8 2000 	str.w	r2, [r8]
 800c0f8:	e7ec      	b.n	800c0d4 <_malloc_r+0xb0>
 800c0fa:	4623      	mov	r3, r4
 800c0fc:	6864      	ldr	r4, [r4, #4]
 800c0fe:	e7ac      	b.n	800c05a <_malloc_r+0x36>
 800c100:	4634      	mov	r4, r6
 800c102:	6876      	ldr	r6, [r6, #4]
 800c104:	e7b4      	b.n	800c070 <_malloc_r+0x4c>
 800c106:	4613      	mov	r3, r2
 800c108:	e7cc      	b.n	800c0a4 <_malloc_r+0x80>
 800c10a:	230c      	movs	r3, #12
 800c10c:	603b      	str	r3, [r7, #0]
 800c10e:	4638      	mov	r0, r7
 800c110:	f000 f80e 	bl	800c130 <__malloc_unlock>
 800c114:	e797      	b.n	800c046 <_malloc_r+0x22>
 800c116:	6025      	str	r5, [r4, #0]
 800c118:	e7dc      	b.n	800c0d4 <_malloc_r+0xb0>
 800c11a:	605b      	str	r3, [r3, #4]
 800c11c:	deff      	udf	#255	; 0xff
 800c11e:	bf00      	nop
 800c120:	240053c4 	.word	0x240053c4

0800c124 <__malloc_lock>:
 800c124:	4801      	ldr	r0, [pc, #4]	; (800c12c <__malloc_lock+0x8>)
 800c126:	f7ff bf01 	b.w	800bf2c <__retarget_lock_acquire_recursive>
 800c12a:	bf00      	nop
 800c12c:	240053c0 	.word	0x240053c0

0800c130 <__malloc_unlock>:
 800c130:	4801      	ldr	r0, [pc, #4]	; (800c138 <__malloc_unlock+0x8>)
 800c132:	f7ff befc 	b.w	800bf2e <__retarget_lock_release_recursive>
 800c136:	bf00      	nop
 800c138:	240053c0 	.word	0x240053c0

0800c13c <__ssputs_r>:
 800c13c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c140:	688e      	ldr	r6, [r1, #8]
 800c142:	461f      	mov	r7, r3
 800c144:	42be      	cmp	r6, r7
 800c146:	680b      	ldr	r3, [r1, #0]
 800c148:	4682      	mov	sl, r0
 800c14a:	460c      	mov	r4, r1
 800c14c:	4690      	mov	r8, r2
 800c14e:	d82c      	bhi.n	800c1aa <__ssputs_r+0x6e>
 800c150:	898a      	ldrh	r2, [r1, #12]
 800c152:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c156:	d026      	beq.n	800c1a6 <__ssputs_r+0x6a>
 800c158:	6965      	ldr	r5, [r4, #20]
 800c15a:	6909      	ldr	r1, [r1, #16]
 800c15c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c160:	eba3 0901 	sub.w	r9, r3, r1
 800c164:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c168:	1c7b      	adds	r3, r7, #1
 800c16a:	444b      	add	r3, r9
 800c16c:	106d      	asrs	r5, r5, #1
 800c16e:	429d      	cmp	r5, r3
 800c170:	bf38      	it	cc
 800c172:	461d      	movcc	r5, r3
 800c174:	0553      	lsls	r3, r2, #21
 800c176:	d527      	bpl.n	800c1c8 <__ssputs_r+0x8c>
 800c178:	4629      	mov	r1, r5
 800c17a:	f7ff ff53 	bl	800c024 <_malloc_r>
 800c17e:	4606      	mov	r6, r0
 800c180:	b360      	cbz	r0, 800c1dc <__ssputs_r+0xa0>
 800c182:	6921      	ldr	r1, [r4, #16]
 800c184:	464a      	mov	r2, r9
 800c186:	f7ff fed3 	bl	800bf30 <memcpy>
 800c18a:	89a3      	ldrh	r3, [r4, #12]
 800c18c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c194:	81a3      	strh	r3, [r4, #12]
 800c196:	6126      	str	r6, [r4, #16]
 800c198:	6165      	str	r5, [r4, #20]
 800c19a:	444e      	add	r6, r9
 800c19c:	eba5 0509 	sub.w	r5, r5, r9
 800c1a0:	6026      	str	r6, [r4, #0]
 800c1a2:	60a5      	str	r5, [r4, #8]
 800c1a4:	463e      	mov	r6, r7
 800c1a6:	42be      	cmp	r6, r7
 800c1a8:	d900      	bls.n	800c1ac <__ssputs_r+0x70>
 800c1aa:	463e      	mov	r6, r7
 800c1ac:	6820      	ldr	r0, [r4, #0]
 800c1ae:	4632      	mov	r2, r6
 800c1b0:	4641      	mov	r1, r8
 800c1b2:	f000 faab 	bl	800c70c <memmove>
 800c1b6:	68a3      	ldr	r3, [r4, #8]
 800c1b8:	1b9b      	subs	r3, r3, r6
 800c1ba:	60a3      	str	r3, [r4, #8]
 800c1bc:	6823      	ldr	r3, [r4, #0]
 800c1be:	4433      	add	r3, r6
 800c1c0:	6023      	str	r3, [r4, #0]
 800c1c2:	2000      	movs	r0, #0
 800c1c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1c8:	462a      	mov	r2, r5
 800c1ca:	f000 fac9 	bl	800c760 <_realloc_r>
 800c1ce:	4606      	mov	r6, r0
 800c1d0:	2800      	cmp	r0, #0
 800c1d2:	d1e0      	bne.n	800c196 <__ssputs_r+0x5a>
 800c1d4:	6921      	ldr	r1, [r4, #16]
 800c1d6:	4650      	mov	r0, sl
 800c1d8:	f7ff feb8 	bl	800bf4c <_free_r>
 800c1dc:	230c      	movs	r3, #12
 800c1de:	f8ca 3000 	str.w	r3, [sl]
 800c1e2:	89a3      	ldrh	r3, [r4, #12]
 800c1e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1e8:	81a3      	strh	r3, [r4, #12]
 800c1ea:	f04f 30ff 	mov.w	r0, #4294967295
 800c1ee:	e7e9      	b.n	800c1c4 <__ssputs_r+0x88>

0800c1f0 <_svfiprintf_r>:
 800c1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1f4:	4698      	mov	r8, r3
 800c1f6:	898b      	ldrh	r3, [r1, #12]
 800c1f8:	061b      	lsls	r3, r3, #24
 800c1fa:	b09d      	sub	sp, #116	; 0x74
 800c1fc:	4607      	mov	r7, r0
 800c1fe:	460d      	mov	r5, r1
 800c200:	4614      	mov	r4, r2
 800c202:	d50e      	bpl.n	800c222 <_svfiprintf_r+0x32>
 800c204:	690b      	ldr	r3, [r1, #16]
 800c206:	b963      	cbnz	r3, 800c222 <_svfiprintf_r+0x32>
 800c208:	2140      	movs	r1, #64	; 0x40
 800c20a:	f7ff ff0b 	bl	800c024 <_malloc_r>
 800c20e:	6028      	str	r0, [r5, #0]
 800c210:	6128      	str	r0, [r5, #16]
 800c212:	b920      	cbnz	r0, 800c21e <_svfiprintf_r+0x2e>
 800c214:	230c      	movs	r3, #12
 800c216:	603b      	str	r3, [r7, #0]
 800c218:	f04f 30ff 	mov.w	r0, #4294967295
 800c21c:	e0d0      	b.n	800c3c0 <_svfiprintf_r+0x1d0>
 800c21e:	2340      	movs	r3, #64	; 0x40
 800c220:	616b      	str	r3, [r5, #20]
 800c222:	2300      	movs	r3, #0
 800c224:	9309      	str	r3, [sp, #36]	; 0x24
 800c226:	2320      	movs	r3, #32
 800c228:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c22c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c230:	2330      	movs	r3, #48	; 0x30
 800c232:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c3d8 <_svfiprintf_r+0x1e8>
 800c236:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c23a:	f04f 0901 	mov.w	r9, #1
 800c23e:	4623      	mov	r3, r4
 800c240:	469a      	mov	sl, r3
 800c242:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c246:	b10a      	cbz	r2, 800c24c <_svfiprintf_r+0x5c>
 800c248:	2a25      	cmp	r2, #37	; 0x25
 800c24a:	d1f9      	bne.n	800c240 <_svfiprintf_r+0x50>
 800c24c:	ebba 0b04 	subs.w	fp, sl, r4
 800c250:	d00b      	beq.n	800c26a <_svfiprintf_r+0x7a>
 800c252:	465b      	mov	r3, fp
 800c254:	4622      	mov	r2, r4
 800c256:	4629      	mov	r1, r5
 800c258:	4638      	mov	r0, r7
 800c25a:	f7ff ff6f 	bl	800c13c <__ssputs_r>
 800c25e:	3001      	adds	r0, #1
 800c260:	f000 80a9 	beq.w	800c3b6 <_svfiprintf_r+0x1c6>
 800c264:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c266:	445a      	add	r2, fp
 800c268:	9209      	str	r2, [sp, #36]	; 0x24
 800c26a:	f89a 3000 	ldrb.w	r3, [sl]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	f000 80a1 	beq.w	800c3b6 <_svfiprintf_r+0x1c6>
 800c274:	2300      	movs	r3, #0
 800c276:	f04f 32ff 	mov.w	r2, #4294967295
 800c27a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c27e:	f10a 0a01 	add.w	sl, sl, #1
 800c282:	9304      	str	r3, [sp, #16]
 800c284:	9307      	str	r3, [sp, #28]
 800c286:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c28a:	931a      	str	r3, [sp, #104]	; 0x68
 800c28c:	4654      	mov	r4, sl
 800c28e:	2205      	movs	r2, #5
 800c290:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c294:	4850      	ldr	r0, [pc, #320]	; (800c3d8 <_svfiprintf_r+0x1e8>)
 800c296:	f7f4 f823 	bl	80002e0 <memchr>
 800c29a:	9a04      	ldr	r2, [sp, #16]
 800c29c:	b9d8      	cbnz	r0, 800c2d6 <_svfiprintf_r+0xe6>
 800c29e:	06d0      	lsls	r0, r2, #27
 800c2a0:	bf44      	itt	mi
 800c2a2:	2320      	movmi	r3, #32
 800c2a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2a8:	0711      	lsls	r1, r2, #28
 800c2aa:	bf44      	itt	mi
 800c2ac:	232b      	movmi	r3, #43	; 0x2b
 800c2ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2b2:	f89a 3000 	ldrb.w	r3, [sl]
 800c2b6:	2b2a      	cmp	r3, #42	; 0x2a
 800c2b8:	d015      	beq.n	800c2e6 <_svfiprintf_r+0xf6>
 800c2ba:	9a07      	ldr	r2, [sp, #28]
 800c2bc:	4654      	mov	r4, sl
 800c2be:	2000      	movs	r0, #0
 800c2c0:	f04f 0c0a 	mov.w	ip, #10
 800c2c4:	4621      	mov	r1, r4
 800c2c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2ca:	3b30      	subs	r3, #48	; 0x30
 800c2cc:	2b09      	cmp	r3, #9
 800c2ce:	d94d      	bls.n	800c36c <_svfiprintf_r+0x17c>
 800c2d0:	b1b0      	cbz	r0, 800c300 <_svfiprintf_r+0x110>
 800c2d2:	9207      	str	r2, [sp, #28]
 800c2d4:	e014      	b.n	800c300 <_svfiprintf_r+0x110>
 800c2d6:	eba0 0308 	sub.w	r3, r0, r8
 800c2da:	fa09 f303 	lsl.w	r3, r9, r3
 800c2de:	4313      	orrs	r3, r2
 800c2e0:	9304      	str	r3, [sp, #16]
 800c2e2:	46a2      	mov	sl, r4
 800c2e4:	e7d2      	b.n	800c28c <_svfiprintf_r+0x9c>
 800c2e6:	9b03      	ldr	r3, [sp, #12]
 800c2e8:	1d19      	adds	r1, r3, #4
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	9103      	str	r1, [sp, #12]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	bfbb      	ittet	lt
 800c2f2:	425b      	neglt	r3, r3
 800c2f4:	f042 0202 	orrlt.w	r2, r2, #2
 800c2f8:	9307      	strge	r3, [sp, #28]
 800c2fa:	9307      	strlt	r3, [sp, #28]
 800c2fc:	bfb8      	it	lt
 800c2fe:	9204      	strlt	r2, [sp, #16]
 800c300:	7823      	ldrb	r3, [r4, #0]
 800c302:	2b2e      	cmp	r3, #46	; 0x2e
 800c304:	d10c      	bne.n	800c320 <_svfiprintf_r+0x130>
 800c306:	7863      	ldrb	r3, [r4, #1]
 800c308:	2b2a      	cmp	r3, #42	; 0x2a
 800c30a:	d134      	bne.n	800c376 <_svfiprintf_r+0x186>
 800c30c:	9b03      	ldr	r3, [sp, #12]
 800c30e:	1d1a      	adds	r2, r3, #4
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	9203      	str	r2, [sp, #12]
 800c314:	2b00      	cmp	r3, #0
 800c316:	bfb8      	it	lt
 800c318:	f04f 33ff 	movlt.w	r3, #4294967295
 800c31c:	3402      	adds	r4, #2
 800c31e:	9305      	str	r3, [sp, #20]
 800c320:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c3e8 <_svfiprintf_r+0x1f8>
 800c324:	7821      	ldrb	r1, [r4, #0]
 800c326:	2203      	movs	r2, #3
 800c328:	4650      	mov	r0, sl
 800c32a:	f7f3 ffd9 	bl	80002e0 <memchr>
 800c32e:	b138      	cbz	r0, 800c340 <_svfiprintf_r+0x150>
 800c330:	9b04      	ldr	r3, [sp, #16]
 800c332:	eba0 000a 	sub.w	r0, r0, sl
 800c336:	2240      	movs	r2, #64	; 0x40
 800c338:	4082      	lsls	r2, r0
 800c33a:	4313      	orrs	r3, r2
 800c33c:	3401      	adds	r4, #1
 800c33e:	9304      	str	r3, [sp, #16]
 800c340:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c344:	4825      	ldr	r0, [pc, #148]	; (800c3dc <_svfiprintf_r+0x1ec>)
 800c346:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c34a:	2206      	movs	r2, #6
 800c34c:	f7f3 ffc8 	bl	80002e0 <memchr>
 800c350:	2800      	cmp	r0, #0
 800c352:	d038      	beq.n	800c3c6 <_svfiprintf_r+0x1d6>
 800c354:	4b22      	ldr	r3, [pc, #136]	; (800c3e0 <_svfiprintf_r+0x1f0>)
 800c356:	bb1b      	cbnz	r3, 800c3a0 <_svfiprintf_r+0x1b0>
 800c358:	9b03      	ldr	r3, [sp, #12]
 800c35a:	3307      	adds	r3, #7
 800c35c:	f023 0307 	bic.w	r3, r3, #7
 800c360:	3308      	adds	r3, #8
 800c362:	9303      	str	r3, [sp, #12]
 800c364:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c366:	4433      	add	r3, r6
 800c368:	9309      	str	r3, [sp, #36]	; 0x24
 800c36a:	e768      	b.n	800c23e <_svfiprintf_r+0x4e>
 800c36c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c370:	460c      	mov	r4, r1
 800c372:	2001      	movs	r0, #1
 800c374:	e7a6      	b.n	800c2c4 <_svfiprintf_r+0xd4>
 800c376:	2300      	movs	r3, #0
 800c378:	3401      	adds	r4, #1
 800c37a:	9305      	str	r3, [sp, #20]
 800c37c:	4619      	mov	r1, r3
 800c37e:	f04f 0c0a 	mov.w	ip, #10
 800c382:	4620      	mov	r0, r4
 800c384:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c388:	3a30      	subs	r2, #48	; 0x30
 800c38a:	2a09      	cmp	r2, #9
 800c38c:	d903      	bls.n	800c396 <_svfiprintf_r+0x1a6>
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d0c6      	beq.n	800c320 <_svfiprintf_r+0x130>
 800c392:	9105      	str	r1, [sp, #20]
 800c394:	e7c4      	b.n	800c320 <_svfiprintf_r+0x130>
 800c396:	fb0c 2101 	mla	r1, ip, r1, r2
 800c39a:	4604      	mov	r4, r0
 800c39c:	2301      	movs	r3, #1
 800c39e:	e7f0      	b.n	800c382 <_svfiprintf_r+0x192>
 800c3a0:	ab03      	add	r3, sp, #12
 800c3a2:	9300      	str	r3, [sp, #0]
 800c3a4:	462a      	mov	r2, r5
 800c3a6:	4b0f      	ldr	r3, [pc, #60]	; (800c3e4 <_svfiprintf_r+0x1f4>)
 800c3a8:	a904      	add	r1, sp, #16
 800c3aa:	4638      	mov	r0, r7
 800c3ac:	f3af 8000 	nop.w
 800c3b0:	1c42      	adds	r2, r0, #1
 800c3b2:	4606      	mov	r6, r0
 800c3b4:	d1d6      	bne.n	800c364 <_svfiprintf_r+0x174>
 800c3b6:	89ab      	ldrh	r3, [r5, #12]
 800c3b8:	065b      	lsls	r3, r3, #25
 800c3ba:	f53f af2d 	bmi.w	800c218 <_svfiprintf_r+0x28>
 800c3be:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c3c0:	b01d      	add	sp, #116	; 0x74
 800c3c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3c6:	ab03      	add	r3, sp, #12
 800c3c8:	9300      	str	r3, [sp, #0]
 800c3ca:	462a      	mov	r2, r5
 800c3cc:	4b05      	ldr	r3, [pc, #20]	; (800c3e4 <_svfiprintf_r+0x1f4>)
 800c3ce:	a904      	add	r1, sp, #16
 800c3d0:	4638      	mov	r0, r7
 800c3d2:	f000 f879 	bl	800c4c8 <_printf_i>
 800c3d6:	e7eb      	b.n	800c3b0 <_svfiprintf_r+0x1c0>
 800c3d8:	0800c8d0 	.word	0x0800c8d0
 800c3dc:	0800c8da 	.word	0x0800c8da
 800c3e0:	00000000 	.word	0x00000000
 800c3e4:	0800c13d 	.word	0x0800c13d
 800c3e8:	0800c8d6 	.word	0x0800c8d6

0800c3ec <_printf_common>:
 800c3ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3f0:	4616      	mov	r6, r2
 800c3f2:	4699      	mov	r9, r3
 800c3f4:	688a      	ldr	r2, [r1, #8]
 800c3f6:	690b      	ldr	r3, [r1, #16]
 800c3f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c3fc:	4293      	cmp	r3, r2
 800c3fe:	bfb8      	it	lt
 800c400:	4613      	movlt	r3, r2
 800c402:	6033      	str	r3, [r6, #0]
 800c404:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c408:	4607      	mov	r7, r0
 800c40a:	460c      	mov	r4, r1
 800c40c:	b10a      	cbz	r2, 800c412 <_printf_common+0x26>
 800c40e:	3301      	adds	r3, #1
 800c410:	6033      	str	r3, [r6, #0]
 800c412:	6823      	ldr	r3, [r4, #0]
 800c414:	0699      	lsls	r1, r3, #26
 800c416:	bf42      	ittt	mi
 800c418:	6833      	ldrmi	r3, [r6, #0]
 800c41a:	3302      	addmi	r3, #2
 800c41c:	6033      	strmi	r3, [r6, #0]
 800c41e:	6825      	ldr	r5, [r4, #0]
 800c420:	f015 0506 	ands.w	r5, r5, #6
 800c424:	d106      	bne.n	800c434 <_printf_common+0x48>
 800c426:	f104 0a19 	add.w	sl, r4, #25
 800c42a:	68e3      	ldr	r3, [r4, #12]
 800c42c:	6832      	ldr	r2, [r6, #0]
 800c42e:	1a9b      	subs	r3, r3, r2
 800c430:	42ab      	cmp	r3, r5
 800c432:	dc26      	bgt.n	800c482 <_printf_common+0x96>
 800c434:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c438:	1e13      	subs	r3, r2, #0
 800c43a:	6822      	ldr	r2, [r4, #0]
 800c43c:	bf18      	it	ne
 800c43e:	2301      	movne	r3, #1
 800c440:	0692      	lsls	r2, r2, #26
 800c442:	d42b      	bmi.n	800c49c <_printf_common+0xb0>
 800c444:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c448:	4649      	mov	r1, r9
 800c44a:	4638      	mov	r0, r7
 800c44c:	47c0      	blx	r8
 800c44e:	3001      	adds	r0, #1
 800c450:	d01e      	beq.n	800c490 <_printf_common+0xa4>
 800c452:	6823      	ldr	r3, [r4, #0]
 800c454:	6922      	ldr	r2, [r4, #16]
 800c456:	f003 0306 	and.w	r3, r3, #6
 800c45a:	2b04      	cmp	r3, #4
 800c45c:	bf02      	ittt	eq
 800c45e:	68e5      	ldreq	r5, [r4, #12]
 800c460:	6833      	ldreq	r3, [r6, #0]
 800c462:	1aed      	subeq	r5, r5, r3
 800c464:	68a3      	ldr	r3, [r4, #8]
 800c466:	bf0c      	ite	eq
 800c468:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c46c:	2500      	movne	r5, #0
 800c46e:	4293      	cmp	r3, r2
 800c470:	bfc4      	itt	gt
 800c472:	1a9b      	subgt	r3, r3, r2
 800c474:	18ed      	addgt	r5, r5, r3
 800c476:	2600      	movs	r6, #0
 800c478:	341a      	adds	r4, #26
 800c47a:	42b5      	cmp	r5, r6
 800c47c:	d11a      	bne.n	800c4b4 <_printf_common+0xc8>
 800c47e:	2000      	movs	r0, #0
 800c480:	e008      	b.n	800c494 <_printf_common+0xa8>
 800c482:	2301      	movs	r3, #1
 800c484:	4652      	mov	r2, sl
 800c486:	4649      	mov	r1, r9
 800c488:	4638      	mov	r0, r7
 800c48a:	47c0      	blx	r8
 800c48c:	3001      	adds	r0, #1
 800c48e:	d103      	bne.n	800c498 <_printf_common+0xac>
 800c490:	f04f 30ff 	mov.w	r0, #4294967295
 800c494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c498:	3501      	adds	r5, #1
 800c49a:	e7c6      	b.n	800c42a <_printf_common+0x3e>
 800c49c:	18e1      	adds	r1, r4, r3
 800c49e:	1c5a      	adds	r2, r3, #1
 800c4a0:	2030      	movs	r0, #48	; 0x30
 800c4a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c4a6:	4422      	add	r2, r4
 800c4a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c4ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c4b0:	3302      	adds	r3, #2
 800c4b2:	e7c7      	b.n	800c444 <_printf_common+0x58>
 800c4b4:	2301      	movs	r3, #1
 800c4b6:	4622      	mov	r2, r4
 800c4b8:	4649      	mov	r1, r9
 800c4ba:	4638      	mov	r0, r7
 800c4bc:	47c0      	blx	r8
 800c4be:	3001      	adds	r0, #1
 800c4c0:	d0e6      	beq.n	800c490 <_printf_common+0xa4>
 800c4c2:	3601      	adds	r6, #1
 800c4c4:	e7d9      	b.n	800c47a <_printf_common+0x8e>
	...

0800c4c8 <_printf_i>:
 800c4c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c4cc:	7e0f      	ldrb	r7, [r1, #24]
 800c4ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c4d0:	2f78      	cmp	r7, #120	; 0x78
 800c4d2:	4691      	mov	r9, r2
 800c4d4:	4680      	mov	r8, r0
 800c4d6:	460c      	mov	r4, r1
 800c4d8:	469a      	mov	sl, r3
 800c4da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c4de:	d807      	bhi.n	800c4f0 <_printf_i+0x28>
 800c4e0:	2f62      	cmp	r7, #98	; 0x62
 800c4e2:	d80a      	bhi.n	800c4fa <_printf_i+0x32>
 800c4e4:	2f00      	cmp	r7, #0
 800c4e6:	f000 80d4 	beq.w	800c692 <_printf_i+0x1ca>
 800c4ea:	2f58      	cmp	r7, #88	; 0x58
 800c4ec:	f000 80c0 	beq.w	800c670 <_printf_i+0x1a8>
 800c4f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c4f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c4f8:	e03a      	b.n	800c570 <_printf_i+0xa8>
 800c4fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c4fe:	2b15      	cmp	r3, #21
 800c500:	d8f6      	bhi.n	800c4f0 <_printf_i+0x28>
 800c502:	a101      	add	r1, pc, #4	; (adr r1, 800c508 <_printf_i+0x40>)
 800c504:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c508:	0800c561 	.word	0x0800c561
 800c50c:	0800c575 	.word	0x0800c575
 800c510:	0800c4f1 	.word	0x0800c4f1
 800c514:	0800c4f1 	.word	0x0800c4f1
 800c518:	0800c4f1 	.word	0x0800c4f1
 800c51c:	0800c4f1 	.word	0x0800c4f1
 800c520:	0800c575 	.word	0x0800c575
 800c524:	0800c4f1 	.word	0x0800c4f1
 800c528:	0800c4f1 	.word	0x0800c4f1
 800c52c:	0800c4f1 	.word	0x0800c4f1
 800c530:	0800c4f1 	.word	0x0800c4f1
 800c534:	0800c679 	.word	0x0800c679
 800c538:	0800c5a1 	.word	0x0800c5a1
 800c53c:	0800c633 	.word	0x0800c633
 800c540:	0800c4f1 	.word	0x0800c4f1
 800c544:	0800c4f1 	.word	0x0800c4f1
 800c548:	0800c69b 	.word	0x0800c69b
 800c54c:	0800c4f1 	.word	0x0800c4f1
 800c550:	0800c5a1 	.word	0x0800c5a1
 800c554:	0800c4f1 	.word	0x0800c4f1
 800c558:	0800c4f1 	.word	0x0800c4f1
 800c55c:	0800c63b 	.word	0x0800c63b
 800c560:	682b      	ldr	r3, [r5, #0]
 800c562:	1d1a      	adds	r2, r3, #4
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	602a      	str	r2, [r5, #0]
 800c568:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c56c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c570:	2301      	movs	r3, #1
 800c572:	e09f      	b.n	800c6b4 <_printf_i+0x1ec>
 800c574:	6820      	ldr	r0, [r4, #0]
 800c576:	682b      	ldr	r3, [r5, #0]
 800c578:	0607      	lsls	r7, r0, #24
 800c57a:	f103 0104 	add.w	r1, r3, #4
 800c57e:	6029      	str	r1, [r5, #0]
 800c580:	d501      	bpl.n	800c586 <_printf_i+0xbe>
 800c582:	681e      	ldr	r6, [r3, #0]
 800c584:	e003      	b.n	800c58e <_printf_i+0xc6>
 800c586:	0646      	lsls	r6, r0, #25
 800c588:	d5fb      	bpl.n	800c582 <_printf_i+0xba>
 800c58a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c58e:	2e00      	cmp	r6, #0
 800c590:	da03      	bge.n	800c59a <_printf_i+0xd2>
 800c592:	232d      	movs	r3, #45	; 0x2d
 800c594:	4276      	negs	r6, r6
 800c596:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c59a:	485a      	ldr	r0, [pc, #360]	; (800c704 <_printf_i+0x23c>)
 800c59c:	230a      	movs	r3, #10
 800c59e:	e012      	b.n	800c5c6 <_printf_i+0xfe>
 800c5a0:	682b      	ldr	r3, [r5, #0]
 800c5a2:	6820      	ldr	r0, [r4, #0]
 800c5a4:	1d19      	adds	r1, r3, #4
 800c5a6:	6029      	str	r1, [r5, #0]
 800c5a8:	0605      	lsls	r5, r0, #24
 800c5aa:	d501      	bpl.n	800c5b0 <_printf_i+0xe8>
 800c5ac:	681e      	ldr	r6, [r3, #0]
 800c5ae:	e002      	b.n	800c5b6 <_printf_i+0xee>
 800c5b0:	0641      	lsls	r1, r0, #25
 800c5b2:	d5fb      	bpl.n	800c5ac <_printf_i+0xe4>
 800c5b4:	881e      	ldrh	r6, [r3, #0]
 800c5b6:	4853      	ldr	r0, [pc, #332]	; (800c704 <_printf_i+0x23c>)
 800c5b8:	2f6f      	cmp	r7, #111	; 0x6f
 800c5ba:	bf0c      	ite	eq
 800c5bc:	2308      	moveq	r3, #8
 800c5be:	230a      	movne	r3, #10
 800c5c0:	2100      	movs	r1, #0
 800c5c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c5c6:	6865      	ldr	r5, [r4, #4]
 800c5c8:	60a5      	str	r5, [r4, #8]
 800c5ca:	2d00      	cmp	r5, #0
 800c5cc:	bfa2      	ittt	ge
 800c5ce:	6821      	ldrge	r1, [r4, #0]
 800c5d0:	f021 0104 	bicge.w	r1, r1, #4
 800c5d4:	6021      	strge	r1, [r4, #0]
 800c5d6:	b90e      	cbnz	r6, 800c5dc <_printf_i+0x114>
 800c5d8:	2d00      	cmp	r5, #0
 800c5da:	d04b      	beq.n	800c674 <_printf_i+0x1ac>
 800c5dc:	4615      	mov	r5, r2
 800c5de:	fbb6 f1f3 	udiv	r1, r6, r3
 800c5e2:	fb03 6711 	mls	r7, r3, r1, r6
 800c5e6:	5dc7      	ldrb	r7, [r0, r7]
 800c5e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c5ec:	4637      	mov	r7, r6
 800c5ee:	42bb      	cmp	r3, r7
 800c5f0:	460e      	mov	r6, r1
 800c5f2:	d9f4      	bls.n	800c5de <_printf_i+0x116>
 800c5f4:	2b08      	cmp	r3, #8
 800c5f6:	d10b      	bne.n	800c610 <_printf_i+0x148>
 800c5f8:	6823      	ldr	r3, [r4, #0]
 800c5fa:	07de      	lsls	r6, r3, #31
 800c5fc:	d508      	bpl.n	800c610 <_printf_i+0x148>
 800c5fe:	6923      	ldr	r3, [r4, #16]
 800c600:	6861      	ldr	r1, [r4, #4]
 800c602:	4299      	cmp	r1, r3
 800c604:	bfde      	ittt	le
 800c606:	2330      	movle	r3, #48	; 0x30
 800c608:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c60c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c610:	1b52      	subs	r2, r2, r5
 800c612:	6122      	str	r2, [r4, #16]
 800c614:	f8cd a000 	str.w	sl, [sp]
 800c618:	464b      	mov	r3, r9
 800c61a:	aa03      	add	r2, sp, #12
 800c61c:	4621      	mov	r1, r4
 800c61e:	4640      	mov	r0, r8
 800c620:	f7ff fee4 	bl	800c3ec <_printf_common>
 800c624:	3001      	adds	r0, #1
 800c626:	d14a      	bne.n	800c6be <_printf_i+0x1f6>
 800c628:	f04f 30ff 	mov.w	r0, #4294967295
 800c62c:	b004      	add	sp, #16
 800c62e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c632:	6823      	ldr	r3, [r4, #0]
 800c634:	f043 0320 	orr.w	r3, r3, #32
 800c638:	6023      	str	r3, [r4, #0]
 800c63a:	4833      	ldr	r0, [pc, #204]	; (800c708 <_printf_i+0x240>)
 800c63c:	2778      	movs	r7, #120	; 0x78
 800c63e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c642:	6823      	ldr	r3, [r4, #0]
 800c644:	6829      	ldr	r1, [r5, #0]
 800c646:	061f      	lsls	r7, r3, #24
 800c648:	f851 6b04 	ldr.w	r6, [r1], #4
 800c64c:	d402      	bmi.n	800c654 <_printf_i+0x18c>
 800c64e:	065f      	lsls	r7, r3, #25
 800c650:	bf48      	it	mi
 800c652:	b2b6      	uxthmi	r6, r6
 800c654:	07df      	lsls	r7, r3, #31
 800c656:	bf48      	it	mi
 800c658:	f043 0320 	orrmi.w	r3, r3, #32
 800c65c:	6029      	str	r1, [r5, #0]
 800c65e:	bf48      	it	mi
 800c660:	6023      	strmi	r3, [r4, #0]
 800c662:	b91e      	cbnz	r6, 800c66c <_printf_i+0x1a4>
 800c664:	6823      	ldr	r3, [r4, #0]
 800c666:	f023 0320 	bic.w	r3, r3, #32
 800c66a:	6023      	str	r3, [r4, #0]
 800c66c:	2310      	movs	r3, #16
 800c66e:	e7a7      	b.n	800c5c0 <_printf_i+0xf8>
 800c670:	4824      	ldr	r0, [pc, #144]	; (800c704 <_printf_i+0x23c>)
 800c672:	e7e4      	b.n	800c63e <_printf_i+0x176>
 800c674:	4615      	mov	r5, r2
 800c676:	e7bd      	b.n	800c5f4 <_printf_i+0x12c>
 800c678:	682b      	ldr	r3, [r5, #0]
 800c67a:	6826      	ldr	r6, [r4, #0]
 800c67c:	6961      	ldr	r1, [r4, #20]
 800c67e:	1d18      	adds	r0, r3, #4
 800c680:	6028      	str	r0, [r5, #0]
 800c682:	0635      	lsls	r5, r6, #24
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	d501      	bpl.n	800c68c <_printf_i+0x1c4>
 800c688:	6019      	str	r1, [r3, #0]
 800c68a:	e002      	b.n	800c692 <_printf_i+0x1ca>
 800c68c:	0670      	lsls	r0, r6, #25
 800c68e:	d5fb      	bpl.n	800c688 <_printf_i+0x1c0>
 800c690:	8019      	strh	r1, [r3, #0]
 800c692:	2300      	movs	r3, #0
 800c694:	6123      	str	r3, [r4, #16]
 800c696:	4615      	mov	r5, r2
 800c698:	e7bc      	b.n	800c614 <_printf_i+0x14c>
 800c69a:	682b      	ldr	r3, [r5, #0]
 800c69c:	1d1a      	adds	r2, r3, #4
 800c69e:	602a      	str	r2, [r5, #0]
 800c6a0:	681d      	ldr	r5, [r3, #0]
 800c6a2:	6862      	ldr	r2, [r4, #4]
 800c6a4:	2100      	movs	r1, #0
 800c6a6:	4628      	mov	r0, r5
 800c6a8:	f7f3 fe1a 	bl	80002e0 <memchr>
 800c6ac:	b108      	cbz	r0, 800c6b2 <_printf_i+0x1ea>
 800c6ae:	1b40      	subs	r0, r0, r5
 800c6b0:	6060      	str	r0, [r4, #4]
 800c6b2:	6863      	ldr	r3, [r4, #4]
 800c6b4:	6123      	str	r3, [r4, #16]
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c6bc:	e7aa      	b.n	800c614 <_printf_i+0x14c>
 800c6be:	6923      	ldr	r3, [r4, #16]
 800c6c0:	462a      	mov	r2, r5
 800c6c2:	4649      	mov	r1, r9
 800c6c4:	4640      	mov	r0, r8
 800c6c6:	47d0      	blx	sl
 800c6c8:	3001      	adds	r0, #1
 800c6ca:	d0ad      	beq.n	800c628 <_printf_i+0x160>
 800c6cc:	6823      	ldr	r3, [r4, #0]
 800c6ce:	079b      	lsls	r3, r3, #30
 800c6d0:	d413      	bmi.n	800c6fa <_printf_i+0x232>
 800c6d2:	68e0      	ldr	r0, [r4, #12]
 800c6d4:	9b03      	ldr	r3, [sp, #12]
 800c6d6:	4298      	cmp	r0, r3
 800c6d8:	bfb8      	it	lt
 800c6da:	4618      	movlt	r0, r3
 800c6dc:	e7a6      	b.n	800c62c <_printf_i+0x164>
 800c6de:	2301      	movs	r3, #1
 800c6e0:	4632      	mov	r2, r6
 800c6e2:	4649      	mov	r1, r9
 800c6e4:	4640      	mov	r0, r8
 800c6e6:	47d0      	blx	sl
 800c6e8:	3001      	adds	r0, #1
 800c6ea:	d09d      	beq.n	800c628 <_printf_i+0x160>
 800c6ec:	3501      	adds	r5, #1
 800c6ee:	68e3      	ldr	r3, [r4, #12]
 800c6f0:	9903      	ldr	r1, [sp, #12]
 800c6f2:	1a5b      	subs	r3, r3, r1
 800c6f4:	42ab      	cmp	r3, r5
 800c6f6:	dcf2      	bgt.n	800c6de <_printf_i+0x216>
 800c6f8:	e7eb      	b.n	800c6d2 <_printf_i+0x20a>
 800c6fa:	2500      	movs	r5, #0
 800c6fc:	f104 0619 	add.w	r6, r4, #25
 800c700:	e7f5      	b.n	800c6ee <_printf_i+0x226>
 800c702:	bf00      	nop
 800c704:	0800c8e1 	.word	0x0800c8e1
 800c708:	0800c8f2 	.word	0x0800c8f2

0800c70c <memmove>:
 800c70c:	4288      	cmp	r0, r1
 800c70e:	b510      	push	{r4, lr}
 800c710:	eb01 0402 	add.w	r4, r1, r2
 800c714:	d902      	bls.n	800c71c <memmove+0x10>
 800c716:	4284      	cmp	r4, r0
 800c718:	4623      	mov	r3, r4
 800c71a:	d807      	bhi.n	800c72c <memmove+0x20>
 800c71c:	1e43      	subs	r3, r0, #1
 800c71e:	42a1      	cmp	r1, r4
 800c720:	d008      	beq.n	800c734 <memmove+0x28>
 800c722:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c726:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c72a:	e7f8      	b.n	800c71e <memmove+0x12>
 800c72c:	4402      	add	r2, r0
 800c72e:	4601      	mov	r1, r0
 800c730:	428a      	cmp	r2, r1
 800c732:	d100      	bne.n	800c736 <memmove+0x2a>
 800c734:	bd10      	pop	{r4, pc}
 800c736:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c73a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c73e:	e7f7      	b.n	800c730 <memmove+0x24>

0800c740 <_sbrk_r>:
 800c740:	b538      	push	{r3, r4, r5, lr}
 800c742:	4d06      	ldr	r5, [pc, #24]	; (800c75c <_sbrk_r+0x1c>)
 800c744:	2300      	movs	r3, #0
 800c746:	4604      	mov	r4, r0
 800c748:	4608      	mov	r0, r1
 800c74a:	602b      	str	r3, [r5, #0]
 800c74c:	f7f4 fefc 	bl	8001548 <_sbrk>
 800c750:	1c43      	adds	r3, r0, #1
 800c752:	d102      	bne.n	800c75a <_sbrk_r+0x1a>
 800c754:	682b      	ldr	r3, [r5, #0]
 800c756:	b103      	cbz	r3, 800c75a <_sbrk_r+0x1a>
 800c758:	6023      	str	r3, [r4, #0]
 800c75a:	bd38      	pop	{r3, r4, r5, pc}
 800c75c:	240053bc 	.word	0x240053bc

0800c760 <_realloc_r>:
 800c760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c764:	4680      	mov	r8, r0
 800c766:	4614      	mov	r4, r2
 800c768:	460e      	mov	r6, r1
 800c76a:	b921      	cbnz	r1, 800c776 <_realloc_r+0x16>
 800c76c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c770:	4611      	mov	r1, r2
 800c772:	f7ff bc57 	b.w	800c024 <_malloc_r>
 800c776:	b92a      	cbnz	r2, 800c784 <_realloc_r+0x24>
 800c778:	f7ff fbe8 	bl	800bf4c <_free_r>
 800c77c:	4625      	mov	r5, r4
 800c77e:	4628      	mov	r0, r5
 800c780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c784:	f000 f81b 	bl	800c7be <_malloc_usable_size_r>
 800c788:	4284      	cmp	r4, r0
 800c78a:	4607      	mov	r7, r0
 800c78c:	d802      	bhi.n	800c794 <_realloc_r+0x34>
 800c78e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c792:	d812      	bhi.n	800c7ba <_realloc_r+0x5a>
 800c794:	4621      	mov	r1, r4
 800c796:	4640      	mov	r0, r8
 800c798:	f7ff fc44 	bl	800c024 <_malloc_r>
 800c79c:	4605      	mov	r5, r0
 800c79e:	2800      	cmp	r0, #0
 800c7a0:	d0ed      	beq.n	800c77e <_realloc_r+0x1e>
 800c7a2:	42bc      	cmp	r4, r7
 800c7a4:	4622      	mov	r2, r4
 800c7a6:	4631      	mov	r1, r6
 800c7a8:	bf28      	it	cs
 800c7aa:	463a      	movcs	r2, r7
 800c7ac:	f7ff fbc0 	bl	800bf30 <memcpy>
 800c7b0:	4631      	mov	r1, r6
 800c7b2:	4640      	mov	r0, r8
 800c7b4:	f7ff fbca 	bl	800bf4c <_free_r>
 800c7b8:	e7e1      	b.n	800c77e <_realloc_r+0x1e>
 800c7ba:	4635      	mov	r5, r6
 800c7bc:	e7df      	b.n	800c77e <_realloc_r+0x1e>

0800c7be <_malloc_usable_size_r>:
 800c7be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7c2:	1f18      	subs	r0, r3, #4
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	bfbc      	itt	lt
 800c7c8:	580b      	ldrlt	r3, [r1, r0]
 800c7ca:	18c0      	addlt	r0, r0, r3
 800c7cc:	4770      	bx	lr
	...

0800c7d0 <_init>:
 800c7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7d2:	bf00      	nop
 800c7d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7d6:	bc08      	pop	{r3}
 800c7d8:	469e      	mov	lr, r3
 800c7da:	4770      	bx	lr

0800c7dc <_fini>:
 800c7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7de:	bf00      	nop
 800c7e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7e2:	bc08      	pop	{r3}
 800c7e4:	469e      	mov	lr, r3
 800c7e6:	4770      	bx	lr
