
Ultrasonico_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090a4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08009344  08009344  00019344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093bc  080093bc  00020134  2**0
                  CONTENTS
  4 .ARM          00000008  080093bc  080093bc  000193bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093c4  080093c4  00020134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093c4  080093c4  000193c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093c8  080093c8  000193c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  080093cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000074  08009440  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000d4  080094a0  000200d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000730  24000134  08009500  00020134  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  24000864  08009500  00020864  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002022e  00000000  00000000  00020162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000031ed  00000000  00000000  00040390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001690  00000000  00000000  00043580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001568  00000000  00000000  00044c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003bdf3  00000000  00000000  00046178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001d6ed  00000000  00000000  00081f6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0018d094  00000000  00000000  0009f658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0022c6ec  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006570  00000000  00000000  0022c73c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000134 	.word	0x24000134
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800932c 	.word	0x0800932c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000138 	.word	0x24000138
 80002dc:	0800932c 	.word	0x0800932c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000688:	4b3d      	ldr	r3, [pc, #244]	; (8000780 <SystemInit+0xfc>)
 800068a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068e:	4a3c      	ldr	r2, [pc, #240]	; (8000780 <SystemInit+0xfc>)
 8000690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <SystemInit+0xfc>)
 800069a:	691b      	ldr	r3, [r3, #16]
 800069c:	4a38      	ldr	r2, [pc, #224]	; (8000780 <SystemInit+0xfc>)
 800069e:	f043 0310 	orr.w	r3, r3, #16
 80006a2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a4:	4b37      	ldr	r3, [pc, #220]	; (8000784 <SystemInit+0x100>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f003 030f 	and.w	r3, r3, #15
 80006ac:	2b06      	cmp	r3, #6
 80006ae:	d807      	bhi.n	80006c0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b0:	4b34      	ldr	r3, [pc, #208]	; (8000784 <SystemInit+0x100>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f023 030f 	bic.w	r3, r3, #15
 80006b8:	4a32      	ldr	r2, [pc, #200]	; (8000784 <SystemInit+0x100>)
 80006ba:	f043 0307 	orr.w	r3, r3, #7
 80006be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c0:	4b31      	ldr	r3, [pc, #196]	; (8000788 <SystemInit+0x104>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a30      	ldr	r2, [pc, #192]	; (8000788 <SystemInit+0x104>)
 80006c6:	f043 0301 	orr.w	r3, r3, #1
 80006ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006cc:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <SystemInit+0x104>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006d2:	4b2d      	ldr	r3, [pc, #180]	; (8000788 <SystemInit+0x104>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	492c      	ldr	r1, [pc, #176]	; (8000788 <SystemInit+0x104>)
 80006d8:	4b2c      	ldr	r3, [pc, #176]	; (800078c <SystemInit+0x108>)
 80006da:	4013      	ands	r3, r2
 80006dc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006de:	4b29      	ldr	r3, [pc, #164]	; (8000784 <SystemInit+0x100>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f003 0308 	and.w	r3, r3, #8
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d007      	beq.n	80006fa <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ea:	4b26      	ldr	r3, [pc, #152]	; (8000784 <SystemInit+0x100>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f023 030f 	bic.w	r3, r3, #15
 80006f2:	4a24      	ldr	r2, [pc, #144]	; (8000784 <SystemInit+0x100>)
 80006f4:	f043 0307 	orr.w	r3, r3, #7
 80006f8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <SystemInit+0x104>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <SystemInit+0x104>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000706:	4b20      	ldr	r3, [pc, #128]	; (8000788 <SystemInit+0x104>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <SystemInit+0x104>)
 800070e:	4a20      	ldr	r2, [pc, #128]	; (8000790 <SystemInit+0x10c>)
 8000710:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000712:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <SystemInit+0x104>)
 8000714:	4a1f      	ldr	r2, [pc, #124]	; (8000794 <SystemInit+0x110>)
 8000716:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <SystemInit+0x104>)
 800071a:	4a1f      	ldr	r2, [pc, #124]	; (8000798 <SystemInit+0x114>)
 800071c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <SystemInit+0x104>)
 8000720:	2200      	movs	r2, #0
 8000722:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <SystemInit+0x104>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <SystemInit+0x114>)
 8000728:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <SystemInit+0x104>)
 800072c:	2200      	movs	r2, #0
 800072e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000730:	4b15      	ldr	r3, [pc, #84]	; (8000788 <SystemInit+0x104>)
 8000732:	4a19      	ldr	r2, [pc, #100]	; (8000798 <SystemInit+0x114>)
 8000734:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <SystemInit+0x104>)
 8000738:	2200      	movs	r2, #0
 800073a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <SystemInit+0x104>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a11      	ldr	r2, [pc, #68]	; (8000788 <SystemInit+0x104>)
 8000742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000746:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <SystemInit+0x104>)
 800074a:	2200      	movs	r2, #0
 800074c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <SystemInit+0x118>)
 8000750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000752:	4a12      	ldr	r2, [pc, #72]	; (800079c <SystemInit+0x118>)
 8000754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000758:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <SystemInit+0x11c>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <SystemInit+0x120>)
 8000760:	4013      	ands	r3, r2
 8000762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000766:	d202      	bcs.n	800076e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <SystemInit+0x124>)
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <SystemInit+0x128>)
 8000770:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000774:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	e000ed00 	.word	0xe000ed00
 8000784:	52002000 	.word	0x52002000
 8000788:	58024400 	.word	0x58024400
 800078c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000790:	02020200 	.word	0x02020200
 8000794:	01ff0000 	.word	0x01ff0000
 8000798:	01010280 	.word	0x01010280
 800079c:	580000c0 	.word	0x580000c0
 80007a0:	5c001000 	.word	0x5c001000
 80007a4:	ffff0000 	.word	0xffff0000
 80007a8:	51008108 	.word	0x51008108
 80007ac:	52004000 	.word	0x52004000

080007b0 <HCSR04_Read>:
#define TRIG_PIN GPIO_PIN_2
#define TRIG_PORT GPIOB


void HCSR04_Read(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 80007b4:	2201      	movs	r2, #1
 80007b6:	2104      	movs	r1, #4
 80007b8:	480a      	ldr	r0, [pc, #40]	; (80007e4 <HCSR04_Read+0x34>)
 80007ba:	f002 fb57 	bl	8002e6c <HAL_GPIO_WritePin>
	HAL_Delay(1);  // wait for 10 us
 80007be:	2001      	movs	r0, #1
 80007c0:	f000 fec8 	bl	8001554 <HAL_Delay>

	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 80007c4:	2200      	movs	r2, #0
 80007c6:	2104      	movs	r1, #4
 80007c8:	4806      	ldr	r0, [pc, #24]	; (80007e4 <HCSR04_Read+0x34>)
 80007ca:	f002 fb4f 	bl	8002e6c <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC1);
 80007ce:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <HCSR04_Read+0x38>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	68da      	ldr	r2, [r3, #12]
 80007d4:	4b04      	ldr	r3, [pc, #16]	; (80007e8 <HCSR04_Read+0x38>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f042 0202 	orr.w	r2, r2, #2
 80007dc:	60da      	str	r2, [r3, #12]
}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	58020400 	.word	0x58020400
 80007e8:	24000238 	.word	0x24000238
 80007ec:	00000000 	.word	0x00000000

080007f0 <HAL_TIM_IC_CaptureCallback>:

// Let's write the callback function

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	7f1b      	ldrb	r3, [r3, #28]
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d17d      	bne.n	80008fc <HAL_TIM_IC_CaptureCallback+0x10c>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8000800:	4b45      	ldr	r3, [pc, #276]	; (8000918 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d11a      	bne.n	800083e <HAL_TIM_IC_CaptureCallback+0x4e>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000808:	2100      	movs	r1, #0
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f005 fcba 	bl	8006184 <HAL_TIM_ReadCapturedValue>
 8000810:	4603      	mov	r3, r0
 8000812:	4a42      	ldr	r2, [pc, #264]	; (800091c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000814:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000816:	4b40      	ldr	r3, [pc, #256]	; (8000918 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000818:	2201      	movs	r2, #1
 800081a:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	6a1a      	ldr	r2, [r3, #32]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	f022 020a 	bic.w	r2, r2, #10
 800082a:	621a      	str	r2, [r3, #32]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	6a1a      	ldr	r2, [r3, #32]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	f042 0202 	orr.w	r2, r2, #2
 800083a:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
		}
	}
}
 800083c:	e05e      	b.n	80008fc <HAL_TIM_IC_CaptureCallback+0x10c>
		else if (Is_First_Captured==1)   // if the first is already captured
 800083e:	4b36      	ldr	r3, [pc, #216]	; (8000918 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d15a      	bne.n	80008fc <HAL_TIM_IC_CaptureCallback+0x10c>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000846:	2100      	movs	r1, #0
 8000848:	6878      	ldr	r0, [r7, #4]
 800084a:	f005 fc9b 	bl	8006184 <HAL_TIM_ReadCapturedValue>
 800084e:	4603      	mov	r3, r0
 8000850:	4a33      	ldr	r2, [pc, #204]	; (8000920 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000852:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2200      	movs	r2, #0
 800085a:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 800085c:	4b30      	ldr	r3, [pc, #192]	; (8000920 <HAL_TIM_IC_CaptureCallback+0x130>)
 800085e:	681a      	ldr	r2, [r3, #0]
 8000860:	4b2e      	ldr	r3, [pc, #184]	; (800091c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	429a      	cmp	r2, r3
 8000866:	d907      	bls.n	8000878 <HAL_TIM_IC_CaptureCallback+0x88>
				Difference = IC_Val2-IC_Val1;
 8000868:	4b2d      	ldr	r3, [pc, #180]	; (8000920 <HAL_TIM_IC_CaptureCallback+0x130>)
 800086a:	681a      	ldr	r2, [r3, #0]
 800086c:	4b2b      	ldr	r3, [pc, #172]	; (800091c <HAL_TIM_IC_CaptureCallback+0x12c>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	1ad3      	subs	r3, r2, r3
 8000872:	4a2c      	ldr	r2, [pc, #176]	; (8000924 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000874:	6013      	str	r3, [r2, #0]
 8000876:	e00f      	b.n	8000898 <HAL_TIM_IC_CaptureCallback+0xa8>
			else if (IC_Val1 > IC_Val2)
 8000878:	4b28      	ldr	r3, [pc, #160]	; (800091c <HAL_TIM_IC_CaptureCallback+0x12c>)
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	4b28      	ldr	r3, [pc, #160]	; (8000920 <HAL_TIM_IC_CaptureCallback+0x130>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	429a      	cmp	r2, r3
 8000882:	d909      	bls.n	8000898 <HAL_TIM_IC_CaptureCallback+0xa8>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8000884:	4b26      	ldr	r3, [pc, #152]	; (8000920 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	4b24      	ldr	r3, [pc, #144]	; (800091c <HAL_TIM_IC_CaptureCallback+0x12c>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	1ad2      	subs	r2, r2, r3
 800088e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000892:	4413      	add	r3, r2
 8000894:	4a23      	ldr	r2, [pc, #140]	; (8000924 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000896:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2 * 0.135;
 8000898:	4b22      	ldr	r3, [pc, #136]	; (8000924 <HAL_TIM_IC_CaptureCallback+0x134>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	ee07 3a90 	vmov	s15, r3
 80008a0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80008a4:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8000908 <HAL_TIM_IC_CaptureCallback+0x118>
 80008a8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80008ac:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80008b0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80008b4:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8000910 <HAL_TIM_IC_CaptureCallback+0x120>
 80008b8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008bc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80008c0:	ee17 3a90 	vmov	r3, s15
 80008c4:	b29a      	uxth	r2, r3
 80008c6:	4b18      	ldr	r3, [pc, #96]	; (8000928 <HAL_TIM_IC_CaptureCallback+0x138>)
 80008c8:	801a      	strh	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 80008ca:	4b13      	ldr	r3, [pc, #76]	; (8000918 <HAL_TIM_IC_CaptureCallback+0x128>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	6a1a      	ldr	r2, [r3, #32]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	f022 020a 	bic.w	r2, r2, #10
 80008de:	621a      	str	r2, [r3, #32]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	6a12      	ldr	r2, [r2, #32]
 80008ea:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
 80008ec:	4b0f      	ldr	r3, [pc, #60]	; (800092c <HAL_TIM_IC_CaptureCallback+0x13c>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	68da      	ldr	r2, [r3, #12]
 80008f2:	4b0e      	ldr	r3, [pc, #56]	; (800092c <HAL_TIM_IC_CaptureCallback+0x13c>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f022 0202 	bic.w	r2, r2, #2
 80008fa:	60da      	str	r2, [r3, #12]
}
 80008fc:	bf00      	nop
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	f3af 8000 	nop.w
 8000908:	b020c49c 	.word	0xb020c49c
 800090c:	3fa16872 	.word	0x3fa16872
 8000910:	147ae148 	.word	0x147ae148
 8000914:	3fc147ae 	.word	0x3fc147ae
 8000918:	24000840 	.word	0x24000840
 800091c:	24000834 	.word	0x24000834
 8000920:	24000838 	.word	0x24000838
 8000924:	2400083c 	.word	0x2400083c
 8000928:	24000842 	.word	0x24000842
 800092c:	24000238 	.word	0x24000238

08000930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000936:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800093a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800093c:	bf00      	nop
 800093e:	4b2e      	ldr	r3, [pc, #184]	; (80009f8 <main+0xc8>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000946:	2b00      	cmp	r3, #0
 8000948:	d004      	beq.n	8000954 <main+0x24>
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	1e5a      	subs	r2, r3, #1
 800094e:	607a      	str	r2, [r7, #4]
 8000950:	2b00      	cmp	r3, #0
 8000952:	dcf4      	bgt.n	800093e <main+0xe>
  if ( timeout < 0 )
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2b00      	cmp	r3, #0
 8000958:	da01      	bge.n	800095e <main+0x2e>
  {
  Error_Handler();
 800095a:	f000 fa97 	bl	8000e8c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800095e:	f000 fd67 	bl	8001430 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000962:	f000 f855 	bl	8000a10 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000966:	4b24      	ldr	r3, [pc, #144]	; (80009f8 <main+0xc8>)
 8000968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800096c:	4a22      	ldr	r2, [pc, #136]	; (80009f8 <main+0xc8>)
 800096e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000972:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000976:	4b20      	ldr	r3, [pc, #128]	; (80009f8 <main+0xc8>)
 8000978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800097c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000980:	603b      	str	r3, [r7, #0]
 8000982:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000984:	2000      	movs	r0, #0
 8000986:	f002 fa8b 	bl	8002ea0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800098a:	2100      	movs	r1, #0
 800098c:	2000      	movs	r0, #0
 800098e:	f002 faa1 	bl	8002ed4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000992:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000996:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000998:	bf00      	nop
 800099a:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <main+0xc8>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d104      	bne.n	80009b0 <main+0x80>
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	1e5a      	subs	r2, r3, #1
 80009aa:	607a      	str	r2, [r7, #4]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	dcf4      	bgt.n	800099a <main+0x6a>
if ( timeout < 0 )
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	da01      	bge.n	80009ba <main+0x8a>
{
Error_Handler();
 80009b6:	f000 fa69 	bl	8000e8c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ba:	f000 f9e7 	bl	8000d8c <MX_GPIO_Init>
  MX_ETH_Init();
 80009be:	f000 f8ab 	bl	8000b18 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80009c2:	f000 f965 	bl	8000c90 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80009c6:	f000 f9af 	bl	8000d28 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 80009ca:	f000 f8f1 	bl	8000bb0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 80009ce:	2100      	movs	r1, #0
 80009d0:	480a      	ldr	r0, [pc, #40]	; (80009fc <main+0xcc>)
 80009d2:	f005 f81f 	bl	8005a14 <HAL_TIM_IC_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HCSR04_Read();
 80009d6:	f7ff feeb 	bl	80007b0 <HCSR04_Read>

	  sprintf(MSG,"S= %d \r \n",Distance);
 80009da:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <main+0xd0>)
 80009dc:	881b      	ldrh	r3, [r3, #0]
 80009de:	461a      	mov	r2, r3
 80009e0:	4908      	ldr	r1, [pc, #32]	; (8000a04 <main+0xd4>)
 80009e2:	4809      	ldr	r0, [pc, #36]	; (8000a08 <main+0xd8>)
 80009e4:	f008 f834 	bl	8008a50 <siprintf>
	  HAL_UART_Transmit(&huart3, MSG, sizeof(MSG), 10);
 80009e8:	230a      	movs	r3, #10
 80009ea:	2214      	movs	r2, #20
 80009ec:	4906      	ldr	r1, [pc, #24]	; (8000a08 <main+0xd8>)
 80009ee:	4807      	ldr	r0, [pc, #28]	; (8000a0c <main+0xdc>)
 80009f0:	f005 ffb8 	bl	8006964 <HAL_UART_Transmit>
  {
 80009f4:	e7ef      	b.n	80009d6 <main+0xa6>
 80009f6:	bf00      	nop
 80009f8:	58024400 	.word	0x58024400
 80009fc:	24000238 	.word	0x24000238
 8000a00:	24000842 	.word	0x24000842
 8000a04:	08009344 	.word	0x08009344
 8000a08:	24000820 	.word	0x24000820
 8000a0c:	24000284 	.word	0x24000284

08000a10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b09c      	sub	sp, #112	; 0x70
 8000a14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a1a:	224c      	movs	r2, #76	; 0x4c
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f008 f80e 	bl	8008a40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	2220      	movs	r2, #32
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f008 f808 	bl	8008a40 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a30:	2004      	movs	r0, #4
 8000a32:	f002 fbab 	bl	800318c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a36:	2300      	movs	r3, #0
 8000a38:	603b      	str	r3, [r7, #0]
 8000a3a:	4b34      	ldr	r3, [pc, #208]	; (8000b0c <SystemClock_Config+0xfc>)
 8000a3c:	699b      	ldr	r3, [r3, #24]
 8000a3e:	4a33      	ldr	r2, [pc, #204]	; (8000b0c <SystemClock_Config+0xfc>)
 8000a40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a44:	6193      	str	r3, [r2, #24]
 8000a46:	4b31      	ldr	r3, [pc, #196]	; (8000b0c <SystemClock_Config+0xfc>)
 8000a48:	699b      	ldr	r3, [r3, #24]
 8000a4a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a4e:	603b      	str	r3, [r7, #0]
 8000a50:	4b2f      	ldr	r3, [pc, #188]	; (8000b10 <SystemClock_Config+0x100>)
 8000a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a54:	4a2e      	ldr	r2, [pc, #184]	; (8000b10 <SystemClock_Config+0x100>)
 8000a56:	f043 0301 	orr.w	r3, r3, #1
 8000a5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a5c:	4b2c      	ldr	r3, [pc, #176]	; (8000b10 <SystemClock_Config+0x100>)
 8000a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a60:	f003 0301 	and.w	r3, r3, #1
 8000a64:	603b      	str	r3, [r7, #0]
 8000a66:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a68:	bf00      	nop
 8000a6a:	4b28      	ldr	r3, [pc, #160]	; (8000b0c <SystemClock_Config+0xfc>)
 8000a6c:	699b      	ldr	r3, [r3, #24]
 8000a6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a76:	d1f8      	bne.n	8000a6a <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000a78:	4b26      	ldr	r3, [pc, #152]	; (8000b14 <SystemClock_Config+0x104>)
 8000a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a7c:	f023 0303 	bic.w	r3, r3, #3
 8000a80:	4a24      	ldr	r2, [pc, #144]	; (8000b14 <SystemClock_Config+0x104>)
 8000a82:	f043 0302 	orr.w	r3, r3, #2
 8000a86:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a8c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a90:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a92:	2302      	movs	r3, #2
 8000a94:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a96:	2302      	movs	r3, #2
 8000a98:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000a9e:	2378      	movs	r3, #120	; 0x78
 8000aa0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000aae:	230c      	movs	r3, #12
 8000ab0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f002 fbce 	bl	8003260 <HAL_RCC_OscConfig>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000aca:	f000 f9df 	bl	8000e8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ace:	233f      	movs	r3, #63	; 0x3f
 8000ad0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ad2:	2303      	movs	r3, #3
 8000ad4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ada:	2308      	movs	r3, #8
 8000adc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ade:	2340      	movs	r3, #64	; 0x40
 8000ae0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ae2:	2340      	movs	r3, #64	; 0x40
 8000ae4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ae6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aea:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000aec:	2340      	movs	r3, #64	; 0x40
 8000aee:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000af0:	1d3b      	adds	r3, r7, #4
 8000af2:	2104      	movs	r1, #4
 8000af4:	4618      	mov	r0, r3
 8000af6:	f002 ffe1 	bl	8003abc <HAL_RCC_ClockConfig>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000b00:	f000 f9c4 	bl	8000e8c <Error_Handler>
  }
}
 8000b04:	bf00      	nop
 8000b06:	3770      	adds	r7, #112	; 0x70
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	58024800 	.word	0x58024800
 8000b10:	58000400 	.word	0x58000400
 8000b14:	58024400 	.word	0x58024400

08000b18 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000b1c:	4b1e      	ldr	r3, [pc, #120]	; (8000b98 <MX_ETH_Init+0x80>)
 8000b1e:	4a1f      	ldr	r2, [pc, #124]	; (8000b9c <MX_ETH_Init+0x84>)
 8000b20:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000b22:	4b1f      	ldr	r3, [pc, #124]	; (8000ba0 <MX_ETH_Init+0x88>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000b28:	4b1d      	ldr	r3, [pc, #116]	; (8000ba0 <MX_ETH_Init+0x88>)
 8000b2a:	2280      	movs	r2, #128	; 0x80
 8000b2c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000b2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ba0 <MX_ETH_Init+0x88>)
 8000b30:	22e1      	movs	r2, #225	; 0xe1
 8000b32:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000b34:	4b1a      	ldr	r3, [pc, #104]	; (8000ba0 <MX_ETH_Init+0x88>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000b3a:	4b19      	ldr	r3, [pc, #100]	; (8000ba0 <MX_ETH_Init+0x88>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000b40:	4b17      	ldr	r3, [pc, #92]	; (8000ba0 <MX_ETH_Init+0x88>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000b46:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <MX_ETH_Init+0x80>)
 8000b48:	4a15      	ldr	r2, [pc, #84]	; (8000ba0 <MX_ETH_Init+0x88>)
 8000b4a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000b4c:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <MX_ETH_Init+0x80>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <MX_ETH_Init+0x80>)
 8000b54:	4a13      	ldr	r2, [pc, #76]	; (8000ba4 <MX_ETH_Init+0x8c>)
 8000b56:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000b58:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <MX_ETH_Init+0x80>)
 8000b5a:	4a13      	ldr	r2, [pc, #76]	; (8000ba8 <MX_ETH_Init+0x90>)
 8000b5c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <MX_ETH_Init+0x80>)
 8000b60:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000b64:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000b66:	480c      	ldr	r0, [pc, #48]	; (8000b98 <MX_ETH_Init+0x80>)
 8000b68:	f001 fbac 	bl	80022c4 <HAL_ETH_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000b72:	f000 f98b 	bl	8000e8c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000b76:	2238      	movs	r2, #56	; 0x38
 8000b78:	2100      	movs	r1, #0
 8000b7a:	480c      	ldr	r0, [pc, #48]	; (8000bac <MX_ETH_Init+0x94>)
 8000b7c:	f007 ff60 	bl	8008a40 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000b80:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <MX_ETH_Init+0x94>)
 8000b82:	2221      	movs	r2, #33	; 0x21
 8000b84:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <MX_ETH_Init+0x94>)
 8000b88:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b8c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000b8e:	4b07      	ldr	r3, [pc, #28]	; (8000bac <MX_ETH_Init+0x94>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	24000188 	.word	0x24000188
 8000b9c:	40028000 	.word	0x40028000
 8000ba0:	24000844 	.word	0x24000844
 8000ba4:	240000d4 	.word	0x240000d4
 8000ba8:	24000074 	.word	0x24000074
 8000bac:	24000150 	.word	0x24000150

08000bb0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08c      	sub	sp, #48	; 0x30
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bb6:	f107 0320 	add.w	r3, r7, #32
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000bd0:	1d3b      	adds	r3, r7, #4
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bdc:	4b2b      	ldr	r3, [pc, #172]	; (8000c8c <MX_TIM2_Init+0xdc>)
 8000bde:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000be2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 39;
 8000be4:	4b29      	ldr	r3, [pc, #164]	; (8000c8c <MX_TIM2_Init+0xdc>)
 8000be6:	2227      	movs	r2, #39	; 0x27
 8000be8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bea:	4b28      	ldr	r3, [pc, #160]	; (8000c8c <MX_TIM2_Init+0xdc>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000bf0:	4b26      	ldr	r3, [pc, #152]	; (8000c8c <MX_TIM2_Init+0xdc>)
 8000bf2:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bf8:	4b24      	ldr	r3, [pc, #144]	; (8000c8c <MX_TIM2_Init+0xdc>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bfe:	4b23      	ldr	r3, [pc, #140]	; (8000c8c <MX_TIM2_Init+0xdc>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c04:	4821      	ldr	r0, [pc, #132]	; (8000c8c <MX_TIM2_Init+0xdc>)
 8000c06:	f004 fe4d 	bl	80058a4 <HAL_TIM_Base_Init>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000c10:	f000 f93c 	bl	8000e8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c18:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c1a:	f107 0320 	add.w	r3, r7, #32
 8000c1e:	4619      	mov	r1, r3
 8000c20:	481a      	ldr	r0, [pc, #104]	; (8000c8c <MX_TIM2_Init+0xdc>)
 8000c22:	f005 f9b7 	bl	8005f94 <HAL_TIM_ConfigClockSource>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000c2c:	f000 f92e 	bl	8000e8c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000c30:	4816      	ldr	r0, [pc, #88]	; (8000c8c <MX_TIM2_Init+0xdc>)
 8000c32:	f004 fe8e 	bl	8005952 <HAL_TIM_IC_Init>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000c3c:	f000 f926 	bl	8000e8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	480f      	ldr	r0, [pc, #60]	; (8000c8c <MX_TIM2_Init+0xdc>)
 8000c50:	f005 fd8c 	bl	800676c <HAL_TIMEx_MasterConfigSynchronization>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8000c5a:	f000 f917 	bl	8000e8c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c62:	2301      	movs	r3, #1
 8000c64:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	2200      	movs	r2, #0
 8000c72:	4619      	mov	r1, r3
 8000c74:	4805      	ldr	r0, [pc, #20]	; (8000c8c <MX_TIM2_Init+0xdc>)
 8000c76:	f005 f8f0 	bl	8005e5a <HAL_TIM_IC_ConfigChannel>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000c80:	f000 f904 	bl	8000e8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c84:	bf00      	nop
 8000c86:	3730      	adds	r7, #48	; 0x30
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	24000238 	.word	0x24000238

08000c90 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c94:	4b22      	ldr	r3, [pc, #136]	; (8000d20 <MX_USART3_UART_Init+0x90>)
 8000c96:	4a23      	ldr	r2, [pc, #140]	; (8000d24 <MX_USART3_UART_Init+0x94>)
 8000c98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c9a:	4b21      	ldr	r3, [pc, #132]	; (8000d20 <MX_USART3_UART_Init+0x90>)
 8000c9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ca0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ca2:	4b1f      	ldr	r3, [pc, #124]	; (8000d20 <MX_USART3_UART_Init+0x90>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ca8:	4b1d      	ldr	r3, [pc, #116]	; (8000d20 <MX_USART3_UART_Init+0x90>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cae:	4b1c      	ldr	r3, [pc, #112]	; (8000d20 <MX_USART3_UART_Init+0x90>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cb4:	4b1a      	ldr	r3, [pc, #104]	; (8000d20 <MX_USART3_UART_Init+0x90>)
 8000cb6:	220c      	movs	r2, #12
 8000cb8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cba:	4b19      	ldr	r3, [pc, #100]	; (8000d20 <MX_USART3_UART_Init+0x90>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc0:	4b17      	ldr	r3, [pc, #92]	; (8000d20 <MX_USART3_UART_Init+0x90>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cc6:	4b16      	ldr	r3, [pc, #88]	; (8000d20 <MX_USART3_UART_Init+0x90>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ccc:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <MX_USART3_UART_Init+0x90>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cd2:	4b13      	ldr	r3, [pc, #76]	; (8000d20 <MX_USART3_UART_Init+0x90>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cd8:	4811      	ldr	r0, [pc, #68]	; (8000d20 <MX_USART3_UART_Init+0x90>)
 8000cda:	f005 fdf3 	bl	80068c4 <HAL_UART_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ce4:	f000 f8d2 	bl	8000e8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ce8:	2100      	movs	r1, #0
 8000cea:	480d      	ldr	r0, [pc, #52]	; (8000d20 <MX_USART3_UART_Init+0x90>)
 8000cec:	f007 faaa 	bl	8008244 <HAL_UARTEx_SetTxFifoThreshold>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000cf6:	f000 f8c9 	bl	8000e8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4808      	ldr	r0, [pc, #32]	; (8000d20 <MX_USART3_UART_Init+0x90>)
 8000cfe:	f007 fadf 	bl	80082c0 <HAL_UARTEx_SetRxFifoThreshold>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d08:	f000 f8c0 	bl	8000e8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d0c:	4804      	ldr	r0, [pc, #16]	; (8000d20 <MX_USART3_UART_Init+0x90>)
 8000d0e:	f007 fa60 	bl	80081d2 <HAL_UARTEx_DisableFifoMode>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d18:	f000 f8b8 	bl	8000e8c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	24000284 	.word	0x24000284
 8000d24:	40004800 	.word	0x40004800

08000d28 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d2c:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d2e:	4a16      	ldr	r2, [pc, #88]	; (8000d88 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000d30:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000d32:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d34:	2209      	movs	r2, #9
 8000d36:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d38:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d3a:	2202      	movs	r2, #2
 8000d3c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000d3e:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d44:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d46:	2202      	movs	r2, #2
 8000d48:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d56:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000d5c:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000d62:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d6e:	4805      	ldr	r0, [pc, #20]	; (8000d84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d70:	f002 f8c4 	bl	8002efc <HAL_PCD_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000d7a:	f000 f887 	bl	8000e8c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	24000314 	.word	0x24000314
 8000d88:	40080000 	.word	0x40080000

08000d8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08c      	sub	sp, #48	; 0x30
 8000d90:	af00      	add	r7, sp, #0
	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d92:	f107 031c 	add.w	r3, r7, #28
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]
 8000da0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da2:	4b38      	ldr	r3, [pc, #224]	; (8000e84 <MX_GPIO_Init+0xf8>)
 8000da4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da8:	4a36      	ldr	r2, [pc, #216]	; (8000e84 <MX_GPIO_Init+0xf8>)
 8000daa:	f043 0304 	orr.w	r3, r3, #4
 8000dae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000db2:	4b34      	ldr	r3, [pc, #208]	; (8000e84 <MX_GPIO_Init+0xf8>)
 8000db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db8:	f003 0304 	and.w	r3, r3, #4
 8000dbc:	61bb      	str	r3, [r7, #24]
 8000dbe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dc0:	4b30      	ldr	r3, [pc, #192]	; (8000e84 <MX_GPIO_Init+0xf8>)
 8000dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc6:	4a2f      	ldr	r2, [pc, #188]	; (8000e84 <MX_GPIO_Init+0xf8>)
 8000dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dd0:	4b2c      	ldr	r3, [pc, #176]	; (8000e84 <MX_GPIO_Init+0xf8>)
 8000dd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dda:	617b      	str	r3, [r7, #20]
 8000ddc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dde:	4b29      	ldr	r3, [pc, #164]	; (8000e84 <MX_GPIO_Init+0xf8>)
 8000de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de4:	4a27      	ldr	r2, [pc, #156]	; (8000e84 <MX_GPIO_Init+0xf8>)
 8000de6:	f043 0301 	orr.w	r3, r3, #1
 8000dea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dee:	4b25      	ldr	r3, [pc, #148]	; (8000e84 <MX_GPIO_Init+0xf8>)
 8000df0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df4:	f003 0301 	and.w	r3, r3, #1
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfc:	4b21      	ldr	r3, [pc, #132]	; (8000e84 <MX_GPIO_Init+0xf8>)
 8000dfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e02:	4a20      	ldr	r2, [pc, #128]	; (8000e84 <MX_GPIO_Init+0xf8>)
 8000e04:	f043 0302 	orr.w	r3, r3, #2
 8000e08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e0c:	4b1d      	ldr	r3, [pc, #116]	; (8000e84 <MX_GPIO_Init+0xf8>)
 8000e0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e12:	f003 0302 	and.w	r3, r3, #2
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e1a:	4b1a      	ldr	r3, [pc, #104]	; (8000e84 <MX_GPIO_Init+0xf8>)
 8000e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e20:	4a18      	ldr	r2, [pc, #96]	; (8000e84 <MX_GPIO_Init+0xf8>)
 8000e22:	f043 0308 	orr.w	r3, r3, #8
 8000e26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e2a:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <MX_GPIO_Init+0xf8>)
 8000e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e30:	f003 0308 	and.w	r3, r3, #8
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <MX_GPIO_Init+0xf8>)
 8000e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e3e:	4a11      	ldr	r2, [pc, #68]	; (8000e84 <MX_GPIO_Init+0xf8>)
 8000e40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e48:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <MX_GPIO_Init+0xf8>)
 8000e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e52:	607b      	str	r3, [r7, #4]
 8000e54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000e56:	2200      	movs	r2, #0
 8000e58:	2104      	movs	r1, #4
 8000e5a:	480b      	ldr	r0, [pc, #44]	; (8000e88 <MX_GPIO_Init+0xfc>)
 8000e5c:	f002 f806 	bl	8002e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Trigger_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e60:	2304      	movs	r3, #4
 8000e62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e64:	2301      	movs	r3, #1
 8000e66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e70:	f107 031c 	add.w	r3, r7, #28
 8000e74:	4619      	mov	r1, r3
 8000e76:	4804      	ldr	r0, [pc, #16]	; (8000e88 <MX_GPIO_Init+0xfc>)
 8000e78:	f001 fe48 	bl	8002b0c <HAL_GPIO_Init>
}
 8000e7c:	bf00      	nop
 8000e7e:	3730      	adds	r7, #48	; 0x30
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	58024400 	.word	0x58024400
 8000e88:	58020400 	.word	0x58020400

08000e8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e90:	b672      	cpsid	i
}
 8000e92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <Error_Handler+0x8>
	...

08000e98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9e:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <HAL_MspInit+0x30>)
 8000ea0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ea4:	4a08      	ldr	r2, [pc, #32]	; (8000ec8 <HAL_MspInit+0x30>)
 8000ea6:	f043 0302 	orr.w	r3, r3, #2
 8000eaa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <HAL_MspInit+0x30>)
 8000eb0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000eb4:	f003 0302 	and.w	r3, r3, #2
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	58024400 	.word	0x58024400

08000ecc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08e      	sub	sp, #56	; 0x38
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a59      	ldr	r2, [pc, #356]	; (8001050 <HAL_ETH_MspInit+0x184>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	f040 80ab 	bne.w	8001046 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000ef0:	4b58      	ldr	r3, [pc, #352]	; (8001054 <HAL_ETH_MspInit+0x188>)
 8000ef2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ef6:	4a57      	ldr	r2, [pc, #348]	; (8001054 <HAL_ETH_MspInit+0x188>)
 8000ef8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000efc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f00:	4b54      	ldr	r3, [pc, #336]	; (8001054 <HAL_ETH_MspInit+0x188>)
 8000f02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f0a:	623b      	str	r3, [r7, #32]
 8000f0c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000f0e:	4b51      	ldr	r3, [pc, #324]	; (8001054 <HAL_ETH_MspInit+0x188>)
 8000f10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f14:	4a4f      	ldr	r2, [pc, #316]	; (8001054 <HAL_ETH_MspInit+0x188>)
 8000f16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f1a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f1e:	4b4d      	ldr	r3, [pc, #308]	; (8001054 <HAL_ETH_MspInit+0x188>)
 8000f20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f28:	61fb      	str	r3, [r7, #28]
 8000f2a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000f2c:	4b49      	ldr	r3, [pc, #292]	; (8001054 <HAL_ETH_MspInit+0x188>)
 8000f2e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f32:	4a48      	ldr	r2, [pc, #288]	; (8001054 <HAL_ETH_MspInit+0x188>)
 8000f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f38:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f3c:	4b45      	ldr	r3, [pc, #276]	; (8001054 <HAL_ETH_MspInit+0x188>)
 8000f3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f46:	61bb      	str	r3, [r7, #24]
 8000f48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f4a:	4b42      	ldr	r3, [pc, #264]	; (8001054 <HAL_ETH_MspInit+0x188>)
 8000f4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f50:	4a40      	ldr	r2, [pc, #256]	; (8001054 <HAL_ETH_MspInit+0x188>)
 8000f52:	f043 0304 	orr.w	r3, r3, #4
 8000f56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f5a:	4b3e      	ldr	r3, [pc, #248]	; (8001054 <HAL_ETH_MspInit+0x188>)
 8000f5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f60:	f003 0304 	and.w	r3, r3, #4
 8000f64:	617b      	str	r3, [r7, #20]
 8000f66:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f68:	4b3a      	ldr	r3, [pc, #232]	; (8001054 <HAL_ETH_MspInit+0x188>)
 8000f6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f6e:	4a39      	ldr	r2, [pc, #228]	; (8001054 <HAL_ETH_MspInit+0x188>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f78:	4b36      	ldr	r3, [pc, #216]	; (8001054 <HAL_ETH_MspInit+0x188>)
 8000f7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	613b      	str	r3, [r7, #16]
 8000f84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f86:	4b33      	ldr	r3, [pc, #204]	; (8001054 <HAL_ETH_MspInit+0x188>)
 8000f88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f8c:	4a31      	ldr	r2, [pc, #196]	; (8001054 <HAL_ETH_MspInit+0x188>)
 8000f8e:	f043 0302 	orr.w	r3, r3, #2
 8000f92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f96:	4b2f      	ldr	r3, [pc, #188]	; (8001054 <HAL_ETH_MspInit+0x188>)
 8000f98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f9c:	f003 0302 	and.w	r3, r3, #2
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fa4:	4b2b      	ldr	r3, [pc, #172]	; (8001054 <HAL_ETH_MspInit+0x188>)
 8000fa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000faa:	4a2a      	ldr	r2, [pc, #168]	; (8001054 <HAL_ETH_MspInit+0x188>)
 8000fac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fb4:	4b27      	ldr	r3, [pc, #156]	; (8001054 <HAL_ETH_MspInit+0x188>)
 8000fb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fbe:	60bb      	str	r3, [r7, #8]
 8000fc0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000fc2:	2332      	movs	r3, #50	; 0x32
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fd2:	230b      	movs	r3, #11
 8000fd4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fda:	4619      	mov	r1, r3
 8000fdc:	481e      	ldr	r0, [pc, #120]	; (8001058 <HAL_ETH_MspInit+0x18c>)
 8000fde:	f001 fd95 	bl	8002b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000fe2:	2386      	movs	r3, #134	; 0x86
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ff2:	230b      	movs	r3, #11
 8000ff4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4817      	ldr	r0, [pc, #92]	; (800105c <HAL_ETH_MspInit+0x190>)
 8000ffe:	f001 fd85 	bl	8002b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001002:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001006:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001008:	2302      	movs	r3, #2
 800100a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001010:	2300      	movs	r3, #0
 8001012:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001014:	230b      	movs	r3, #11
 8001016:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001018:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800101c:	4619      	mov	r1, r3
 800101e:	4810      	ldr	r0, [pc, #64]	; (8001060 <HAL_ETH_MspInit+0x194>)
 8001020:	f001 fd74 	bl	8002b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001024:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102a:	2302      	movs	r3, #2
 800102c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001032:	2300      	movs	r3, #0
 8001034:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001036:	230b      	movs	r3, #11
 8001038:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800103a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800103e:	4619      	mov	r1, r3
 8001040:	4808      	ldr	r0, [pc, #32]	; (8001064 <HAL_ETH_MspInit+0x198>)
 8001042:	f001 fd63 	bl	8002b0c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001046:	bf00      	nop
 8001048:	3738      	adds	r7, #56	; 0x38
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40028000 	.word	0x40028000
 8001054:	58024400 	.word	0x58024400
 8001058:	58020800 	.word	0x58020800
 800105c:	58020000 	.word	0x58020000
 8001060:	58020400 	.word	0x58020400
 8001064:	58021800 	.word	0x58021800

08001068 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08a      	sub	sp, #40	; 0x28
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001088:	d135      	bne.n	80010f6 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800108a:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <HAL_TIM_Base_MspInit+0x98>)
 800108c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001090:	4a1b      	ldr	r2, [pc, #108]	; (8001100 <HAL_TIM_Base_MspInit+0x98>)
 8001092:	f043 0301 	orr.w	r3, r3, #1
 8001096:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800109a:	4b19      	ldr	r3, [pc, #100]	; (8001100 <HAL_TIM_Base_MspInit+0x98>)
 800109c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	613b      	str	r3, [r7, #16]
 80010a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a8:	4b15      	ldr	r3, [pc, #84]	; (8001100 <HAL_TIM_Base_MspInit+0x98>)
 80010aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ae:	4a14      	ldr	r2, [pc, #80]	; (8001100 <HAL_TIM_Base_MspInit+0x98>)
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010b8:	4b11      	ldr	r3, [pc, #68]	; (8001100 <HAL_TIM_Base_MspInit+0x98>)
 80010ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010c6:	2301      	movs	r3, #1
 80010c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	2302      	movs	r3, #2
 80010cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d2:	2300      	movs	r3, #0
 80010d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010d6:	2301      	movs	r3, #1
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	4619      	mov	r1, r3
 80010e0:	4808      	ldr	r0, [pc, #32]	; (8001104 <HAL_TIM_Base_MspInit+0x9c>)
 80010e2:	f001 fd13 	bl	8002b0c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2100      	movs	r1, #0
 80010ea:	201c      	movs	r0, #28
 80010ec:	f000 fb51 	bl	8001792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010f0:	201c      	movs	r0, #28
 80010f2:	f000 fb68 	bl	80017c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010f6:	bf00      	nop
 80010f8:	3728      	adds	r7, #40	; 0x28
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	58024400 	.word	0x58024400
 8001104:	58020000 	.word	0x58020000

08001108 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b0b8      	sub	sp, #224	; 0xe0
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001120:	f107 0310 	add.w	r3, r7, #16
 8001124:	22bc      	movs	r2, #188	; 0xbc
 8001126:	2100      	movs	r1, #0
 8001128:	4618      	mov	r0, r3
 800112a:	f007 fc89 	bl	8008a40 <memset>
  if(huart->Instance==USART3)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a29      	ldr	r2, [pc, #164]	; (80011d8 <HAL_UART_MspInit+0xd0>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d14a      	bne.n	80011ce <HAL_UART_MspInit+0xc6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001138:	2302      	movs	r3, #2
 800113a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800113c:	2300      	movs	r3, #0
 800113e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001142:	f107 0310 	add.w	r3, r7, #16
 8001146:	4618      	mov	r0, r3
 8001148:	f003 f844 	bl	80041d4 <HAL_RCCEx_PeriphCLKConfig>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001152:	f7ff fe9b 	bl	8000e8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001156:	4b21      	ldr	r3, [pc, #132]	; (80011dc <HAL_UART_MspInit+0xd4>)
 8001158:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800115c:	4a1f      	ldr	r2, [pc, #124]	; (80011dc <HAL_UART_MspInit+0xd4>)
 800115e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001162:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001166:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <HAL_UART_MspInit+0xd4>)
 8001168:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800116c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001174:	4b19      	ldr	r3, [pc, #100]	; (80011dc <HAL_UART_MspInit+0xd4>)
 8001176:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800117a:	4a18      	ldr	r2, [pc, #96]	; (80011dc <HAL_UART_MspInit+0xd4>)
 800117c:	f043 0308 	orr.w	r3, r3, #8
 8001180:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001184:	4b15      	ldr	r3, [pc, #84]	; (80011dc <HAL_UART_MspInit+0xd4>)
 8001186:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800118a:	f003 0308 	and.w	r3, r3, #8
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001192:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001196:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119a:	2302      	movs	r3, #2
 800119c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a6:	2300      	movs	r3, #0
 80011a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011ac:	2307      	movs	r3, #7
 80011ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011b2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011b6:	4619      	mov	r1, r3
 80011b8:	4809      	ldr	r0, [pc, #36]	; (80011e0 <HAL_UART_MspInit+0xd8>)
 80011ba:	f001 fca7 	bl	8002b0c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	2100      	movs	r1, #0
 80011c2:	2027      	movs	r0, #39	; 0x27
 80011c4:	f000 fae5 	bl	8001792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80011c8:	2027      	movs	r0, #39	; 0x27
 80011ca:	f000 fafc 	bl	80017c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011ce:	bf00      	nop
 80011d0:	37e0      	adds	r7, #224	; 0xe0
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40004800 	.word	0x40004800
 80011dc:	58024400 	.word	0x58024400
 80011e0:	58020c00 	.word	0x58020c00

080011e4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b0b8      	sub	sp, #224	; 0xe0
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011fc:	f107 0310 	add.w	r3, r7, #16
 8001200:	22bc      	movs	r2, #188	; 0xbc
 8001202:	2100      	movs	r1, #0
 8001204:	4618      	mov	r0, r3
 8001206:	f007 fc1b 	bl	8008a40 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a36      	ldr	r2, [pc, #216]	; (80012e8 <HAL_PCD_MspInit+0x104>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d165      	bne.n	80012e0 <HAL_PCD_MspInit+0xfc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001214:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001218:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 800121a:	2301      	movs	r3, #1
 800121c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 800121e:	2318      	movs	r3, #24
 8001220:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001222:	2302      	movs	r3, #2
 8001224:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8001226:	2304      	movs	r3, #4
 8001228:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 800122a:	2302      	movs	r3, #2
 800122c:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 800122e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001232:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001238:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800123c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001240:	f107 0310 	add.w	r3, r7, #16
 8001244:	4618      	mov	r0, r3
 8001246:	f002 ffc5 	bl	80041d4 <HAL_RCCEx_PeriphCLKConfig>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001250:	f7ff fe1c 	bl	8000e8c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001254:	f001 fff4 	bl	8003240 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001258:	4b24      	ldr	r3, [pc, #144]	; (80012ec <HAL_PCD_MspInit+0x108>)
 800125a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800125e:	4a23      	ldr	r2, [pc, #140]	; (80012ec <HAL_PCD_MspInit+0x108>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001268:	4b20      	ldr	r3, [pc, #128]	; (80012ec <HAL_PCD_MspInit+0x108>)
 800126a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001276:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800127a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127e:	2302      	movs	r3, #2
 8001280:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	2300      	movs	r3, #0
 800128c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001290:	230a      	movs	r3, #10
 8001292:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001296:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800129a:	4619      	mov	r1, r3
 800129c:	4814      	ldr	r0, [pc, #80]	; (80012f0 <HAL_PCD_MspInit+0x10c>)
 800129e:	f001 fc35 	bl	8002b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012aa:	2300      	movs	r3, #0
 80012ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012ba:	4619      	mov	r1, r3
 80012bc:	480c      	ldr	r0, [pc, #48]	; (80012f0 <HAL_PCD_MspInit+0x10c>)
 80012be:	f001 fc25 	bl	8002b0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80012c2:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <HAL_PCD_MspInit+0x108>)
 80012c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012c8:	4a08      	ldr	r2, [pc, #32]	; (80012ec <HAL_PCD_MspInit+0x108>)
 80012ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80012ce:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80012d2:	4b06      	ldr	r3, [pc, #24]	; (80012ec <HAL_PCD_MspInit+0x108>)
 80012d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80012e0:	bf00      	nop
 80012e2:	37e0      	adds	r7, #224	; 0xe0
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40080000 	.word	0x40080000
 80012ec:	58024400 	.word	0x58024400
 80012f0:	58020000 	.word	0x58020000

080012f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <NMI_Handler+0x4>

080012fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012fe:	e7fe      	b.n	80012fe <HardFault_Handler+0x4>

08001300 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001304:	e7fe      	b.n	8001304 <MemManage_Handler+0x4>

08001306 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800130a:	e7fe      	b.n	800130a <BusFault_Handler+0x4>

0800130c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001310:	e7fe      	b.n	8001310 <UsageFault_Handler+0x4>

08001312 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001340:	f000 f8e8 	bl	8001514 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001344:	bf00      	nop
 8001346:	bd80      	pop	{r7, pc}

08001348 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800134c:	4802      	ldr	r0, [pc, #8]	; (8001358 <TIM2_IRQHandler+0x10>)
 800134e:	f004 fc65 	bl	8005c1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	24000238 	.word	0x24000238

0800135c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001360:	4802      	ldr	r0, [pc, #8]	; (800136c <USART3_IRQHandler+0x10>)
 8001362:	f005 fb95 	bl	8006a90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	24000284 	.word	0x24000284

08001370 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001378:	4a14      	ldr	r2, [pc, #80]	; (80013cc <_sbrk+0x5c>)
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <_sbrk+0x60>)
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001384:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <_sbrk+0x64>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d102      	bne.n	8001392 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800138c:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <_sbrk+0x64>)
 800138e:	4a12      	ldr	r2, [pc, #72]	; (80013d8 <_sbrk+0x68>)
 8001390:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001392:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <_sbrk+0x64>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4413      	add	r3, r2
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	429a      	cmp	r2, r3
 800139e:	d207      	bcs.n	80013b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013a0:	f007 fb24 	bl	80089ec <__errno>
 80013a4:	4603      	mov	r3, r0
 80013a6:	220c      	movs	r2, #12
 80013a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013aa:	f04f 33ff 	mov.w	r3, #4294967295
 80013ae:	e009      	b.n	80013c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013b0:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <_sbrk+0x64>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013b6:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <_sbrk+0x64>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4413      	add	r3, r2
 80013be:	4a05      	ldr	r2, [pc, #20]	; (80013d4 <_sbrk+0x64>)
 80013c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013c2:	68fb      	ldr	r3, [r7, #12]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3718      	adds	r7, #24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	24080000 	.word	0x24080000
 80013d0:	00000400 	.word	0x00000400
 80013d4:	2400084c 	.word	0x2400084c
 80013d8:	24000868 	.word	0x24000868

080013dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80013dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001414 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80013e0:	f7ff f950 	bl	8000684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013e4:	480c      	ldr	r0, [pc, #48]	; (8001418 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013e6:	490d      	ldr	r1, [pc, #52]	; (800141c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013e8:	4a0d      	ldr	r2, [pc, #52]	; (8001420 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013ec:	e002      	b.n	80013f4 <LoopCopyDataInit>

080013ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013f2:	3304      	adds	r3, #4

080013f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f8:	d3f9      	bcc.n	80013ee <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013fa:	4a0a      	ldr	r2, [pc, #40]	; (8001424 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013fc:	4c0a      	ldr	r4, [pc, #40]	; (8001428 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001400:	e001      	b.n	8001406 <LoopFillZerobss>

08001402 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001402:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001404:	3204      	adds	r2, #4

08001406 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001406:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001408:	d3fb      	bcc.n	8001402 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800140a:	f007 faf5 	bl	80089f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800140e:	f7ff fa8f 	bl	8000930 <main>
  bx  lr
 8001412:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001414:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001418:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800141c:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8001420:	080093cc 	.word	0x080093cc
  ldr r2, =_sbss
 8001424:	24000134 	.word	0x24000134
  ldr r4, =_ebss
 8001428:	24000864 	.word	0x24000864

0800142c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800142c:	e7fe      	b.n	800142c <ADC3_IRQHandler>
	...

08001430 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001436:	2003      	movs	r0, #3
 8001438:	f000 f9a0 	bl	800177c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800143c:	f002 fcf4 	bl	8003e28 <HAL_RCC_GetSysClockFreq>
 8001440:	4602      	mov	r2, r0
 8001442:	4b15      	ldr	r3, [pc, #84]	; (8001498 <HAL_Init+0x68>)
 8001444:	699b      	ldr	r3, [r3, #24]
 8001446:	0a1b      	lsrs	r3, r3, #8
 8001448:	f003 030f 	and.w	r3, r3, #15
 800144c:	4913      	ldr	r1, [pc, #76]	; (800149c <HAL_Init+0x6c>)
 800144e:	5ccb      	ldrb	r3, [r1, r3]
 8001450:	f003 031f 	and.w	r3, r3, #31
 8001454:	fa22 f303 	lsr.w	r3, r2, r3
 8001458:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800145a:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <HAL_Init+0x68>)
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	f003 030f 	and.w	r3, r3, #15
 8001462:	4a0e      	ldr	r2, [pc, #56]	; (800149c <HAL_Init+0x6c>)
 8001464:	5cd3      	ldrb	r3, [r2, r3]
 8001466:	f003 031f 	and.w	r3, r3, #31
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	fa22 f303 	lsr.w	r3, r2, r3
 8001470:	4a0b      	ldr	r2, [pc, #44]	; (80014a0 <HAL_Init+0x70>)
 8001472:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001474:	4a0b      	ldr	r2, [pc, #44]	; (80014a4 <HAL_Init+0x74>)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800147a:	2000      	movs	r0, #0
 800147c:	f000 f814 	bl	80014a8 <HAL_InitTick>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e002      	b.n	8001490 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800148a:	f7ff fd05 	bl	8000e98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800148e:	2300      	movs	r3, #0
}
 8001490:	4618      	mov	r0, r3
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	58024400 	.word	0x58024400
 800149c:	08009350 	.word	0x08009350
 80014a0:	24000004 	.word	0x24000004
 80014a4:	24000000 	.word	0x24000000

080014a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80014b0:	4b15      	ldr	r3, [pc, #84]	; (8001508 <HAL_InitTick+0x60>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d101      	bne.n	80014bc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e021      	b.n	8001500 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80014bc:	4b13      	ldr	r3, [pc, #76]	; (800150c <HAL_InitTick+0x64>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	4b11      	ldr	r3, [pc, #68]	; (8001508 <HAL_InitTick+0x60>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	4619      	mov	r1, r3
 80014c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d2:	4618      	mov	r0, r3
 80014d4:	f000 f985 	bl	80017e2 <HAL_SYSTICK_Config>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e00e      	b.n	8001500 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2b0f      	cmp	r3, #15
 80014e6:	d80a      	bhi.n	80014fe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014e8:	2200      	movs	r2, #0
 80014ea:	6879      	ldr	r1, [r7, #4]
 80014ec:	f04f 30ff 	mov.w	r0, #4294967295
 80014f0:	f000 f94f 	bl	8001792 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014f4:	4a06      	ldr	r2, [pc, #24]	; (8001510 <HAL_InitTick+0x68>)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014fa:	2300      	movs	r3, #0
 80014fc:	e000      	b.n	8001500 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
}
 8001500:	4618      	mov	r0, r3
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	2400000c 	.word	0x2400000c
 800150c:	24000000 	.word	0x24000000
 8001510:	24000008 	.word	0x24000008

08001514 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001518:	4b06      	ldr	r3, [pc, #24]	; (8001534 <HAL_IncTick+0x20>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	461a      	mov	r2, r3
 800151e:	4b06      	ldr	r3, [pc, #24]	; (8001538 <HAL_IncTick+0x24>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4413      	add	r3, r2
 8001524:	4a04      	ldr	r2, [pc, #16]	; (8001538 <HAL_IncTick+0x24>)
 8001526:	6013      	str	r3, [r2, #0]
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	2400000c 	.word	0x2400000c
 8001538:	24000850 	.word	0x24000850

0800153c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return uwTick;
 8001540:	4b03      	ldr	r3, [pc, #12]	; (8001550 <HAL_GetTick+0x14>)
 8001542:	681b      	ldr	r3, [r3, #0]
}
 8001544:	4618      	mov	r0, r3
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	24000850 	.word	0x24000850

08001554 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800155c:	f7ff ffee 	bl	800153c <HAL_GetTick>
 8001560:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800156c:	d005      	beq.n	800157a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800156e:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <HAL_Delay+0x44>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	461a      	mov	r2, r3
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	4413      	add	r3, r2
 8001578:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800157a:	bf00      	nop
 800157c:	f7ff ffde 	bl	800153c <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	68fa      	ldr	r2, [r7, #12]
 8001588:	429a      	cmp	r2, r3
 800158a:	d8f7      	bhi.n	800157c <HAL_Delay+0x28>
  {
  }
}
 800158c:	bf00      	nop
 800158e:	bf00      	nop
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	2400000c 	.word	0x2400000c

0800159c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80015a0:	4b03      	ldr	r3, [pc, #12]	; (80015b0 <HAL_GetREVID+0x14>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	0c1b      	lsrs	r3, r3, #16
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	5c001000 	.word	0x5c001000

080015b4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80015bc:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80015c4:	4904      	ldr	r1, [pc, #16]	; (80015d8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	604b      	str	r3, [r1, #4]
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	58000400 	.word	0x58000400

080015dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015ec:	4b0b      	ldr	r3, [pc, #44]	; (800161c <__NVIC_SetPriorityGrouping+0x40>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015f2:	68ba      	ldr	r2, [r7, #8]
 80015f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015f8:	4013      	ands	r3, r2
 80015fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001604:	4b06      	ldr	r3, [pc, #24]	; (8001620 <__NVIC_SetPriorityGrouping+0x44>)
 8001606:	4313      	orrs	r3, r2
 8001608:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800160a:	4a04      	ldr	r2, [pc, #16]	; (800161c <__NVIC_SetPriorityGrouping+0x40>)
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	60d3      	str	r3, [r2, #12]
}
 8001610:	bf00      	nop
 8001612:	3714      	adds	r7, #20
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	e000ed00 	.word	0xe000ed00
 8001620:	05fa0000 	.word	0x05fa0000

08001624 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001628:	4b04      	ldr	r3, [pc, #16]	; (800163c <__NVIC_GetPriorityGrouping+0x18>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	0a1b      	lsrs	r3, r3, #8
 800162e:	f003 0307 	and.w	r3, r3, #7
}
 8001632:	4618      	mov	r0, r3
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800164a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800164e:	2b00      	cmp	r3, #0
 8001650:	db0b      	blt.n	800166a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001652:	88fb      	ldrh	r3, [r7, #6]
 8001654:	f003 021f 	and.w	r2, r3, #31
 8001658:	4907      	ldr	r1, [pc, #28]	; (8001678 <__NVIC_EnableIRQ+0x38>)
 800165a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800165e:	095b      	lsrs	r3, r3, #5
 8001660:	2001      	movs	r0, #1
 8001662:	fa00 f202 	lsl.w	r2, r0, r2
 8001666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	e000e100 	.word	0xe000e100

0800167c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	6039      	str	r1, [r7, #0]
 8001686:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001688:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800168c:	2b00      	cmp	r3, #0
 800168e:	db0a      	blt.n	80016a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	b2da      	uxtb	r2, r3
 8001694:	490c      	ldr	r1, [pc, #48]	; (80016c8 <__NVIC_SetPriority+0x4c>)
 8001696:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800169a:	0112      	lsls	r2, r2, #4
 800169c:	b2d2      	uxtb	r2, r2
 800169e:	440b      	add	r3, r1
 80016a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016a4:	e00a      	b.n	80016bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	4908      	ldr	r1, [pc, #32]	; (80016cc <__NVIC_SetPriority+0x50>)
 80016ac:	88fb      	ldrh	r3, [r7, #6]
 80016ae:	f003 030f 	and.w	r3, r3, #15
 80016b2:	3b04      	subs	r3, #4
 80016b4:	0112      	lsls	r2, r2, #4
 80016b6:	b2d2      	uxtb	r2, r2
 80016b8:	440b      	add	r3, r1
 80016ba:	761a      	strb	r2, [r3, #24]
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	e000e100 	.word	0xe000e100
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b089      	sub	sp, #36	; 0x24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	f1c3 0307 	rsb	r3, r3, #7
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	bf28      	it	cs
 80016ee:	2304      	movcs	r3, #4
 80016f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	3304      	adds	r3, #4
 80016f6:	2b06      	cmp	r3, #6
 80016f8:	d902      	bls.n	8001700 <NVIC_EncodePriority+0x30>
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	3b03      	subs	r3, #3
 80016fe:	e000      	b.n	8001702 <NVIC_EncodePriority+0x32>
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001704:	f04f 32ff 	mov.w	r2, #4294967295
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43da      	mvns	r2, r3
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	401a      	ands	r2, r3
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001718:	f04f 31ff 	mov.w	r1, #4294967295
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	fa01 f303 	lsl.w	r3, r1, r3
 8001722:	43d9      	mvns	r1, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001728:	4313      	orrs	r3, r2
         );
}
 800172a:	4618      	mov	r0, r3
 800172c:	3724      	adds	r7, #36	; 0x24
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
	...

08001738 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	3b01      	subs	r3, #1
 8001744:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001748:	d301      	bcc.n	800174e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800174a:	2301      	movs	r3, #1
 800174c:	e00f      	b.n	800176e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800174e:	4a0a      	ldr	r2, [pc, #40]	; (8001778 <SysTick_Config+0x40>)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	3b01      	subs	r3, #1
 8001754:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001756:	210f      	movs	r1, #15
 8001758:	f04f 30ff 	mov.w	r0, #4294967295
 800175c:	f7ff ff8e 	bl	800167c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <SysTick_Config+0x40>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001766:	4b04      	ldr	r3, [pc, #16]	; (8001778 <SysTick_Config+0x40>)
 8001768:	2207      	movs	r2, #7
 800176a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	e000e010 	.word	0xe000e010

0800177c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f7ff ff29 	bl	80015dc <__NVIC_SetPriorityGrouping>
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b086      	sub	sp, #24
 8001796:	af00      	add	r7, sp, #0
 8001798:	4603      	mov	r3, r0
 800179a:	60b9      	str	r1, [r7, #8]
 800179c:	607a      	str	r2, [r7, #4]
 800179e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017a0:	f7ff ff40 	bl	8001624 <__NVIC_GetPriorityGrouping>
 80017a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	68b9      	ldr	r1, [r7, #8]
 80017aa:	6978      	ldr	r0, [r7, #20]
 80017ac:	f7ff ff90 	bl	80016d0 <NVIC_EncodePriority>
 80017b0:	4602      	mov	r2, r0
 80017b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017b6:	4611      	mov	r1, r2
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff ff5f 	bl	800167c <__NVIC_SetPriority>
}
 80017be:	bf00      	nop
 80017c0:	3718      	adds	r7, #24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b082      	sub	sp, #8
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	4603      	mov	r3, r0
 80017ce:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff ff33 	bl	8001640 <__NVIC_EnableIRQ>
}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b082      	sub	sp, #8
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7ff ffa4 	bl	8001738 <SysTick_Config>
 80017f0:	4603      	mov	r3, r0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
	...

080017fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001804:	f7ff fe9a 	bl	800153c <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d101      	bne.n	8001814 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e2dc      	b.n	8001dce <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800181a:	b2db      	uxtb	r3, r3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d008      	beq.n	8001832 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2280      	movs	r2, #128	; 0x80
 8001824:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e2cd      	b.n	8001dce <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a76      	ldr	r2, [pc, #472]	; (8001a10 <HAL_DMA_Abort+0x214>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d04a      	beq.n	80018d2 <HAL_DMA_Abort+0xd6>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a74      	ldr	r2, [pc, #464]	; (8001a14 <HAL_DMA_Abort+0x218>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d045      	beq.n	80018d2 <HAL_DMA_Abort+0xd6>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a73      	ldr	r2, [pc, #460]	; (8001a18 <HAL_DMA_Abort+0x21c>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d040      	beq.n	80018d2 <HAL_DMA_Abort+0xd6>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a71      	ldr	r2, [pc, #452]	; (8001a1c <HAL_DMA_Abort+0x220>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d03b      	beq.n	80018d2 <HAL_DMA_Abort+0xd6>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a70      	ldr	r2, [pc, #448]	; (8001a20 <HAL_DMA_Abort+0x224>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d036      	beq.n	80018d2 <HAL_DMA_Abort+0xd6>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a6e      	ldr	r2, [pc, #440]	; (8001a24 <HAL_DMA_Abort+0x228>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d031      	beq.n	80018d2 <HAL_DMA_Abort+0xd6>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a6d      	ldr	r2, [pc, #436]	; (8001a28 <HAL_DMA_Abort+0x22c>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d02c      	beq.n	80018d2 <HAL_DMA_Abort+0xd6>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a6b      	ldr	r2, [pc, #428]	; (8001a2c <HAL_DMA_Abort+0x230>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d027      	beq.n	80018d2 <HAL_DMA_Abort+0xd6>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a6a      	ldr	r2, [pc, #424]	; (8001a30 <HAL_DMA_Abort+0x234>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d022      	beq.n	80018d2 <HAL_DMA_Abort+0xd6>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a68      	ldr	r2, [pc, #416]	; (8001a34 <HAL_DMA_Abort+0x238>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d01d      	beq.n	80018d2 <HAL_DMA_Abort+0xd6>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a67      	ldr	r2, [pc, #412]	; (8001a38 <HAL_DMA_Abort+0x23c>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d018      	beq.n	80018d2 <HAL_DMA_Abort+0xd6>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a65      	ldr	r2, [pc, #404]	; (8001a3c <HAL_DMA_Abort+0x240>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d013      	beq.n	80018d2 <HAL_DMA_Abort+0xd6>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a64      	ldr	r2, [pc, #400]	; (8001a40 <HAL_DMA_Abort+0x244>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d00e      	beq.n	80018d2 <HAL_DMA_Abort+0xd6>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a62      	ldr	r2, [pc, #392]	; (8001a44 <HAL_DMA_Abort+0x248>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d009      	beq.n	80018d2 <HAL_DMA_Abort+0xd6>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a61      	ldr	r2, [pc, #388]	; (8001a48 <HAL_DMA_Abort+0x24c>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d004      	beq.n	80018d2 <HAL_DMA_Abort+0xd6>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a5f      	ldr	r2, [pc, #380]	; (8001a4c <HAL_DMA_Abort+0x250>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d101      	bne.n	80018d6 <HAL_DMA_Abort+0xda>
 80018d2:	2301      	movs	r3, #1
 80018d4:	e000      	b.n	80018d8 <HAL_DMA_Abort+0xdc>
 80018d6:	2300      	movs	r3, #0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d013      	beq.n	8001904 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f022 021e 	bic.w	r2, r2, #30
 80018ea:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	695a      	ldr	r2, [r3, #20]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018fa:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	617b      	str	r3, [r7, #20]
 8001902:	e00a      	b.n	800191a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f022 020e 	bic.w	r2, r2, #14
 8001912:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a3c      	ldr	r2, [pc, #240]	; (8001a10 <HAL_DMA_Abort+0x214>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d072      	beq.n	8001a0a <HAL_DMA_Abort+0x20e>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a3a      	ldr	r2, [pc, #232]	; (8001a14 <HAL_DMA_Abort+0x218>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d06d      	beq.n	8001a0a <HAL_DMA_Abort+0x20e>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a39      	ldr	r2, [pc, #228]	; (8001a18 <HAL_DMA_Abort+0x21c>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d068      	beq.n	8001a0a <HAL_DMA_Abort+0x20e>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a37      	ldr	r2, [pc, #220]	; (8001a1c <HAL_DMA_Abort+0x220>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d063      	beq.n	8001a0a <HAL_DMA_Abort+0x20e>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a36      	ldr	r2, [pc, #216]	; (8001a20 <HAL_DMA_Abort+0x224>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d05e      	beq.n	8001a0a <HAL_DMA_Abort+0x20e>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a34      	ldr	r2, [pc, #208]	; (8001a24 <HAL_DMA_Abort+0x228>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d059      	beq.n	8001a0a <HAL_DMA_Abort+0x20e>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a33      	ldr	r2, [pc, #204]	; (8001a28 <HAL_DMA_Abort+0x22c>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d054      	beq.n	8001a0a <HAL_DMA_Abort+0x20e>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a31      	ldr	r2, [pc, #196]	; (8001a2c <HAL_DMA_Abort+0x230>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d04f      	beq.n	8001a0a <HAL_DMA_Abort+0x20e>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a30      	ldr	r2, [pc, #192]	; (8001a30 <HAL_DMA_Abort+0x234>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d04a      	beq.n	8001a0a <HAL_DMA_Abort+0x20e>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a2e      	ldr	r2, [pc, #184]	; (8001a34 <HAL_DMA_Abort+0x238>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d045      	beq.n	8001a0a <HAL_DMA_Abort+0x20e>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a2d      	ldr	r2, [pc, #180]	; (8001a38 <HAL_DMA_Abort+0x23c>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d040      	beq.n	8001a0a <HAL_DMA_Abort+0x20e>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a2b      	ldr	r2, [pc, #172]	; (8001a3c <HAL_DMA_Abort+0x240>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d03b      	beq.n	8001a0a <HAL_DMA_Abort+0x20e>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a2a      	ldr	r2, [pc, #168]	; (8001a40 <HAL_DMA_Abort+0x244>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d036      	beq.n	8001a0a <HAL_DMA_Abort+0x20e>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a28      	ldr	r2, [pc, #160]	; (8001a44 <HAL_DMA_Abort+0x248>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d031      	beq.n	8001a0a <HAL_DMA_Abort+0x20e>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a27      	ldr	r2, [pc, #156]	; (8001a48 <HAL_DMA_Abort+0x24c>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d02c      	beq.n	8001a0a <HAL_DMA_Abort+0x20e>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a25      	ldr	r2, [pc, #148]	; (8001a4c <HAL_DMA_Abort+0x250>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d027      	beq.n	8001a0a <HAL_DMA_Abort+0x20e>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a24      	ldr	r2, [pc, #144]	; (8001a50 <HAL_DMA_Abort+0x254>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d022      	beq.n	8001a0a <HAL_DMA_Abort+0x20e>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a22      	ldr	r2, [pc, #136]	; (8001a54 <HAL_DMA_Abort+0x258>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d01d      	beq.n	8001a0a <HAL_DMA_Abort+0x20e>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a21      	ldr	r2, [pc, #132]	; (8001a58 <HAL_DMA_Abort+0x25c>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d018      	beq.n	8001a0a <HAL_DMA_Abort+0x20e>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a1f      	ldr	r2, [pc, #124]	; (8001a5c <HAL_DMA_Abort+0x260>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d013      	beq.n	8001a0a <HAL_DMA_Abort+0x20e>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a1e      	ldr	r2, [pc, #120]	; (8001a60 <HAL_DMA_Abort+0x264>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d00e      	beq.n	8001a0a <HAL_DMA_Abort+0x20e>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a1c      	ldr	r2, [pc, #112]	; (8001a64 <HAL_DMA_Abort+0x268>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d009      	beq.n	8001a0a <HAL_DMA_Abort+0x20e>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a1b      	ldr	r2, [pc, #108]	; (8001a68 <HAL_DMA_Abort+0x26c>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d004      	beq.n	8001a0a <HAL_DMA_Abort+0x20e>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a19      	ldr	r2, [pc, #100]	; (8001a6c <HAL_DMA_Abort+0x270>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d132      	bne.n	8001a70 <HAL_DMA_Abort+0x274>
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e031      	b.n	8001a72 <HAL_DMA_Abort+0x276>
 8001a0e:	bf00      	nop
 8001a10:	40020010 	.word	0x40020010
 8001a14:	40020028 	.word	0x40020028
 8001a18:	40020040 	.word	0x40020040
 8001a1c:	40020058 	.word	0x40020058
 8001a20:	40020070 	.word	0x40020070
 8001a24:	40020088 	.word	0x40020088
 8001a28:	400200a0 	.word	0x400200a0
 8001a2c:	400200b8 	.word	0x400200b8
 8001a30:	40020410 	.word	0x40020410
 8001a34:	40020428 	.word	0x40020428
 8001a38:	40020440 	.word	0x40020440
 8001a3c:	40020458 	.word	0x40020458
 8001a40:	40020470 	.word	0x40020470
 8001a44:	40020488 	.word	0x40020488
 8001a48:	400204a0 	.word	0x400204a0
 8001a4c:	400204b8 	.word	0x400204b8
 8001a50:	58025408 	.word	0x58025408
 8001a54:	5802541c 	.word	0x5802541c
 8001a58:	58025430 	.word	0x58025430
 8001a5c:	58025444 	.word	0x58025444
 8001a60:	58025458 	.word	0x58025458
 8001a64:	5802546c 	.word	0x5802546c
 8001a68:	58025480 	.word	0x58025480
 8001a6c:	58025494 	.word	0x58025494
 8001a70:	2300      	movs	r3, #0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d007      	beq.n	8001a86 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a84:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a6d      	ldr	r2, [pc, #436]	; (8001c40 <HAL_DMA_Abort+0x444>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d04a      	beq.n	8001b26 <HAL_DMA_Abort+0x32a>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a6b      	ldr	r2, [pc, #428]	; (8001c44 <HAL_DMA_Abort+0x448>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d045      	beq.n	8001b26 <HAL_DMA_Abort+0x32a>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a6a      	ldr	r2, [pc, #424]	; (8001c48 <HAL_DMA_Abort+0x44c>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d040      	beq.n	8001b26 <HAL_DMA_Abort+0x32a>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a68      	ldr	r2, [pc, #416]	; (8001c4c <HAL_DMA_Abort+0x450>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d03b      	beq.n	8001b26 <HAL_DMA_Abort+0x32a>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a67      	ldr	r2, [pc, #412]	; (8001c50 <HAL_DMA_Abort+0x454>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d036      	beq.n	8001b26 <HAL_DMA_Abort+0x32a>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a65      	ldr	r2, [pc, #404]	; (8001c54 <HAL_DMA_Abort+0x458>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d031      	beq.n	8001b26 <HAL_DMA_Abort+0x32a>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a64      	ldr	r2, [pc, #400]	; (8001c58 <HAL_DMA_Abort+0x45c>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d02c      	beq.n	8001b26 <HAL_DMA_Abort+0x32a>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a62      	ldr	r2, [pc, #392]	; (8001c5c <HAL_DMA_Abort+0x460>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d027      	beq.n	8001b26 <HAL_DMA_Abort+0x32a>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a61      	ldr	r2, [pc, #388]	; (8001c60 <HAL_DMA_Abort+0x464>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d022      	beq.n	8001b26 <HAL_DMA_Abort+0x32a>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a5f      	ldr	r2, [pc, #380]	; (8001c64 <HAL_DMA_Abort+0x468>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d01d      	beq.n	8001b26 <HAL_DMA_Abort+0x32a>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a5e      	ldr	r2, [pc, #376]	; (8001c68 <HAL_DMA_Abort+0x46c>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d018      	beq.n	8001b26 <HAL_DMA_Abort+0x32a>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a5c      	ldr	r2, [pc, #368]	; (8001c6c <HAL_DMA_Abort+0x470>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d013      	beq.n	8001b26 <HAL_DMA_Abort+0x32a>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a5b      	ldr	r2, [pc, #364]	; (8001c70 <HAL_DMA_Abort+0x474>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d00e      	beq.n	8001b26 <HAL_DMA_Abort+0x32a>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a59      	ldr	r2, [pc, #356]	; (8001c74 <HAL_DMA_Abort+0x478>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d009      	beq.n	8001b26 <HAL_DMA_Abort+0x32a>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a58      	ldr	r2, [pc, #352]	; (8001c78 <HAL_DMA_Abort+0x47c>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d004      	beq.n	8001b26 <HAL_DMA_Abort+0x32a>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a56      	ldr	r2, [pc, #344]	; (8001c7c <HAL_DMA_Abort+0x480>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d108      	bne.n	8001b38 <HAL_DMA_Abort+0x33c>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 0201 	bic.w	r2, r2, #1
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	e007      	b.n	8001b48 <HAL_DMA_Abort+0x34c>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f022 0201 	bic.w	r2, r2, #1
 8001b46:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001b48:	e013      	b.n	8001b72 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b4a:	f7ff fcf7 	bl	800153c <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b05      	cmp	r3, #5
 8001b56:	d90c      	bls.n	8001b72 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2220      	movs	r2, #32
 8001b5c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2203      	movs	r2, #3
 8001b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e12d      	b.n	8001dce <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1e5      	bne.n	8001b4a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a2f      	ldr	r2, [pc, #188]	; (8001c40 <HAL_DMA_Abort+0x444>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d04a      	beq.n	8001c1e <HAL_DMA_Abort+0x422>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a2d      	ldr	r2, [pc, #180]	; (8001c44 <HAL_DMA_Abort+0x448>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d045      	beq.n	8001c1e <HAL_DMA_Abort+0x422>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a2c      	ldr	r2, [pc, #176]	; (8001c48 <HAL_DMA_Abort+0x44c>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d040      	beq.n	8001c1e <HAL_DMA_Abort+0x422>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a2a      	ldr	r2, [pc, #168]	; (8001c4c <HAL_DMA_Abort+0x450>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d03b      	beq.n	8001c1e <HAL_DMA_Abort+0x422>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a29      	ldr	r2, [pc, #164]	; (8001c50 <HAL_DMA_Abort+0x454>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d036      	beq.n	8001c1e <HAL_DMA_Abort+0x422>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a27      	ldr	r2, [pc, #156]	; (8001c54 <HAL_DMA_Abort+0x458>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d031      	beq.n	8001c1e <HAL_DMA_Abort+0x422>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a26      	ldr	r2, [pc, #152]	; (8001c58 <HAL_DMA_Abort+0x45c>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d02c      	beq.n	8001c1e <HAL_DMA_Abort+0x422>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a24      	ldr	r2, [pc, #144]	; (8001c5c <HAL_DMA_Abort+0x460>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d027      	beq.n	8001c1e <HAL_DMA_Abort+0x422>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a23      	ldr	r2, [pc, #140]	; (8001c60 <HAL_DMA_Abort+0x464>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d022      	beq.n	8001c1e <HAL_DMA_Abort+0x422>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a21      	ldr	r2, [pc, #132]	; (8001c64 <HAL_DMA_Abort+0x468>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d01d      	beq.n	8001c1e <HAL_DMA_Abort+0x422>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a20      	ldr	r2, [pc, #128]	; (8001c68 <HAL_DMA_Abort+0x46c>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d018      	beq.n	8001c1e <HAL_DMA_Abort+0x422>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a1e      	ldr	r2, [pc, #120]	; (8001c6c <HAL_DMA_Abort+0x470>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d013      	beq.n	8001c1e <HAL_DMA_Abort+0x422>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a1d      	ldr	r2, [pc, #116]	; (8001c70 <HAL_DMA_Abort+0x474>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d00e      	beq.n	8001c1e <HAL_DMA_Abort+0x422>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a1b      	ldr	r2, [pc, #108]	; (8001c74 <HAL_DMA_Abort+0x478>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d009      	beq.n	8001c1e <HAL_DMA_Abort+0x422>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a1a      	ldr	r2, [pc, #104]	; (8001c78 <HAL_DMA_Abort+0x47c>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d004      	beq.n	8001c1e <HAL_DMA_Abort+0x422>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a18      	ldr	r2, [pc, #96]	; (8001c7c <HAL_DMA_Abort+0x480>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d101      	bne.n	8001c22 <HAL_DMA_Abort+0x426>
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e000      	b.n	8001c24 <HAL_DMA_Abort+0x428>
 8001c22:	2300      	movs	r3, #0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d02b      	beq.n	8001c80 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c2c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c32:	f003 031f 	and.w	r3, r3, #31
 8001c36:	223f      	movs	r2, #63	; 0x3f
 8001c38:	409a      	lsls	r2, r3
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	609a      	str	r2, [r3, #8]
 8001c3e:	e02a      	b.n	8001c96 <HAL_DMA_Abort+0x49a>
 8001c40:	40020010 	.word	0x40020010
 8001c44:	40020028 	.word	0x40020028
 8001c48:	40020040 	.word	0x40020040
 8001c4c:	40020058 	.word	0x40020058
 8001c50:	40020070 	.word	0x40020070
 8001c54:	40020088 	.word	0x40020088
 8001c58:	400200a0 	.word	0x400200a0
 8001c5c:	400200b8 	.word	0x400200b8
 8001c60:	40020410 	.word	0x40020410
 8001c64:	40020428 	.word	0x40020428
 8001c68:	40020440 	.word	0x40020440
 8001c6c:	40020458 	.word	0x40020458
 8001c70:	40020470 	.word	0x40020470
 8001c74:	40020488 	.word	0x40020488
 8001c78:	400204a0 	.word	0x400204a0
 8001c7c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c84:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c8a:	f003 031f 	and.w	r3, r3, #31
 8001c8e:	2201      	movs	r2, #1
 8001c90:	409a      	lsls	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a4f      	ldr	r2, [pc, #316]	; (8001dd8 <HAL_DMA_Abort+0x5dc>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d072      	beq.n	8001d86 <HAL_DMA_Abort+0x58a>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a4d      	ldr	r2, [pc, #308]	; (8001ddc <HAL_DMA_Abort+0x5e0>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d06d      	beq.n	8001d86 <HAL_DMA_Abort+0x58a>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a4c      	ldr	r2, [pc, #304]	; (8001de0 <HAL_DMA_Abort+0x5e4>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d068      	beq.n	8001d86 <HAL_DMA_Abort+0x58a>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a4a      	ldr	r2, [pc, #296]	; (8001de4 <HAL_DMA_Abort+0x5e8>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d063      	beq.n	8001d86 <HAL_DMA_Abort+0x58a>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a49      	ldr	r2, [pc, #292]	; (8001de8 <HAL_DMA_Abort+0x5ec>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d05e      	beq.n	8001d86 <HAL_DMA_Abort+0x58a>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a47      	ldr	r2, [pc, #284]	; (8001dec <HAL_DMA_Abort+0x5f0>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d059      	beq.n	8001d86 <HAL_DMA_Abort+0x58a>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a46      	ldr	r2, [pc, #280]	; (8001df0 <HAL_DMA_Abort+0x5f4>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d054      	beq.n	8001d86 <HAL_DMA_Abort+0x58a>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a44      	ldr	r2, [pc, #272]	; (8001df4 <HAL_DMA_Abort+0x5f8>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d04f      	beq.n	8001d86 <HAL_DMA_Abort+0x58a>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a43      	ldr	r2, [pc, #268]	; (8001df8 <HAL_DMA_Abort+0x5fc>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d04a      	beq.n	8001d86 <HAL_DMA_Abort+0x58a>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a41      	ldr	r2, [pc, #260]	; (8001dfc <HAL_DMA_Abort+0x600>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d045      	beq.n	8001d86 <HAL_DMA_Abort+0x58a>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a40      	ldr	r2, [pc, #256]	; (8001e00 <HAL_DMA_Abort+0x604>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d040      	beq.n	8001d86 <HAL_DMA_Abort+0x58a>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a3e      	ldr	r2, [pc, #248]	; (8001e04 <HAL_DMA_Abort+0x608>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d03b      	beq.n	8001d86 <HAL_DMA_Abort+0x58a>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a3d      	ldr	r2, [pc, #244]	; (8001e08 <HAL_DMA_Abort+0x60c>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d036      	beq.n	8001d86 <HAL_DMA_Abort+0x58a>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a3b      	ldr	r2, [pc, #236]	; (8001e0c <HAL_DMA_Abort+0x610>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d031      	beq.n	8001d86 <HAL_DMA_Abort+0x58a>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a3a      	ldr	r2, [pc, #232]	; (8001e10 <HAL_DMA_Abort+0x614>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d02c      	beq.n	8001d86 <HAL_DMA_Abort+0x58a>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a38      	ldr	r2, [pc, #224]	; (8001e14 <HAL_DMA_Abort+0x618>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d027      	beq.n	8001d86 <HAL_DMA_Abort+0x58a>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a37      	ldr	r2, [pc, #220]	; (8001e18 <HAL_DMA_Abort+0x61c>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d022      	beq.n	8001d86 <HAL_DMA_Abort+0x58a>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a35      	ldr	r2, [pc, #212]	; (8001e1c <HAL_DMA_Abort+0x620>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d01d      	beq.n	8001d86 <HAL_DMA_Abort+0x58a>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a34      	ldr	r2, [pc, #208]	; (8001e20 <HAL_DMA_Abort+0x624>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d018      	beq.n	8001d86 <HAL_DMA_Abort+0x58a>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a32      	ldr	r2, [pc, #200]	; (8001e24 <HAL_DMA_Abort+0x628>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d013      	beq.n	8001d86 <HAL_DMA_Abort+0x58a>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a31      	ldr	r2, [pc, #196]	; (8001e28 <HAL_DMA_Abort+0x62c>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d00e      	beq.n	8001d86 <HAL_DMA_Abort+0x58a>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a2f      	ldr	r2, [pc, #188]	; (8001e2c <HAL_DMA_Abort+0x630>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d009      	beq.n	8001d86 <HAL_DMA_Abort+0x58a>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a2e      	ldr	r2, [pc, #184]	; (8001e30 <HAL_DMA_Abort+0x634>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d004      	beq.n	8001d86 <HAL_DMA_Abort+0x58a>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a2c      	ldr	r2, [pc, #176]	; (8001e34 <HAL_DMA_Abort+0x638>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d101      	bne.n	8001d8a <HAL_DMA_Abort+0x58e>
 8001d86:	2301      	movs	r3, #1
 8001d88:	e000      	b.n	8001d8c <HAL_DMA_Abort+0x590>
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d015      	beq.n	8001dbc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001d98:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d00c      	beq.n	8001dbc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001dac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001db0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001dba:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40020010 	.word	0x40020010
 8001ddc:	40020028 	.word	0x40020028
 8001de0:	40020040 	.word	0x40020040
 8001de4:	40020058 	.word	0x40020058
 8001de8:	40020070 	.word	0x40020070
 8001dec:	40020088 	.word	0x40020088
 8001df0:	400200a0 	.word	0x400200a0
 8001df4:	400200b8 	.word	0x400200b8
 8001df8:	40020410 	.word	0x40020410
 8001dfc:	40020428 	.word	0x40020428
 8001e00:	40020440 	.word	0x40020440
 8001e04:	40020458 	.word	0x40020458
 8001e08:	40020470 	.word	0x40020470
 8001e0c:	40020488 	.word	0x40020488
 8001e10:	400204a0 	.word	0x400204a0
 8001e14:	400204b8 	.word	0x400204b8
 8001e18:	58025408 	.word	0x58025408
 8001e1c:	5802541c 	.word	0x5802541c
 8001e20:	58025430 	.word	0x58025430
 8001e24:	58025444 	.word	0x58025444
 8001e28:	58025458 	.word	0x58025458
 8001e2c:	5802546c 	.word	0x5802546c
 8001e30:	58025480 	.word	0x58025480
 8001e34:	58025494 	.word	0x58025494

08001e38 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e237      	b.n	80022ba <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d004      	beq.n	8001e60 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2280      	movs	r2, #128	; 0x80
 8001e5a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e22c      	b.n	80022ba <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a5c      	ldr	r2, [pc, #368]	; (8001fd8 <HAL_DMA_Abort_IT+0x1a0>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d04a      	beq.n	8001f00 <HAL_DMA_Abort_IT+0xc8>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a5b      	ldr	r2, [pc, #364]	; (8001fdc <HAL_DMA_Abort_IT+0x1a4>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d045      	beq.n	8001f00 <HAL_DMA_Abort_IT+0xc8>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a59      	ldr	r2, [pc, #356]	; (8001fe0 <HAL_DMA_Abort_IT+0x1a8>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d040      	beq.n	8001f00 <HAL_DMA_Abort_IT+0xc8>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a58      	ldr	r2, [pc, #352]	; (8001fe4 <HAL_DMA_Abort_IT+0x1ac>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d03b      	beq.n	8001f00 <HAL_DMA_Abort_IT+0xc8>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a56      	ldr	r2, [pc, #344]	; (8001fe8 <HAL_DMA_Abort_IT+0x1b0>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d036      	beq.n	8001f00 <HAL_DMA_Abort_IT+0xc8>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a55      	ldr	r2, [pc, #340]	; (8001fec <HAL_DMA_Abort_IT+0x1b4>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d031      	beq.n	8001f00 <HAL_DMA_Abort_IT+0xc8>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a53      	ldr	r2, [pc, #332]	; (8001ff0 <HAL_DMA_Abort_IT+0x1b8>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d02c      	beq.n	8001f00 <HAL_DMA_Abort_IT+0xc8>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a52      	ldr	r2, [pc, #328]	; (8001ff4 <HAL_DMA_Abort_IT+0x1bc>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d027      	beq.n	8001f00 <HAL_DMA_Abort_IT+0xc8>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a50      	ldr	r2, [pc, #320]	; (8001ff8 <HAL_DMA_Abort_IT+0x1c0>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d022      	beq.n	8001f00 <HAL_DMA_Abort_IT+0xc8>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a4f      	ldr	r2, [pc, #316]	; (8001ffc <HAL_DMA_Abort_IT+0x1c4>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d01d      	beq.n	8001f00 <HAL_DMA_Abort_IT+0xc8>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a4d      	ldr	r2, [pc, #308]	; (8002000 <HAL_DMA_Abort_IT+0x1c8>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d018      	beq.n	8001f00 <HAL_DMA_Abort_IT+0xc8>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a4c      	ldr	r2, [pc, #304]	; (8002004 <HAL_DMA_Abort_IT+0x1cc>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d013      	beq.n	8001f00 <HAL_DMA_Abort_IT+0xc8>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a4a      	ldr	r2, [pc, #296]	; (8002008 <HAL_DMA_Abort_IT+0x1d0>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d00e      	beq.n	8001f00 <HAL_DMA_Abort_IT+0xc8>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a49      	ldr	r2, [pc, #292]	; (800200c <HAL_DMA_Abort_IT+0x1d4>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d009      	beq.n	8001f00 <HAL_DMA_Abort_IT+0xc8>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a47      	ldr	r2, [pc, #284]	; (8002010 <HAL_DMA_Abort_IT+0x1d8>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d004      	beq.n	8001f00 <HAL_DMA_Abort_IT+0xc8>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a46      	ldr	r2, [pc, #280]	; (8002014 <HAL_DMA_Abort_IT+0x1dc>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d101      	bne.n	8001f04 <HAL_DMA_Abort_IT+0xcc>
 8001f00:	2301      	movs	r3, #1
 8001f02:	e000      	b.n	8001f06 <HAL_DMA_Abort_IT+0xce>
 8001f04:	2300      	movs	r3, #0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f000 8086 	beq.w	8002018 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2204      	movs	r2, #4
 8001f10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a2f      	ldr	r2, [pc, #188]	; (8001fd8 <HAL_DMA_Abort_IT+0x1a0>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d04a      	beq.n	8001fb4 <HAL_DMA_Abort_IT+0x17c>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a2e      	ldr	r2, [pc, #184]	; (8001fdc <HAL_DMA_Abort_IT+0x1a4>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d045      	beq.n	8001fb4 <HAL_DMA_Abort_IT+0x17c>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a2c      	ldr	r2, [pc, #176]	; (8001fe0 <HAL_DMA_Abort_IT+0x1a8>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d040      	beq.n	8001fb4 <HAL_DMA_Abort_IT+0x17c>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a2b      	ldr	r2, [pc, #172]	; (8001fe4 <HAL_DMA_Abort_IT+0x1ac>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d03b      	beq.n	8001fb4 <HAL_DMA_Abort_IT+0x17c>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a29      	ldr	r2, [pc, #164]	; (8001fe8 <HAL_DMA_Abort_IT+0x1b0>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d036      	beq.n	8001fb4 <HAL_DMA_Abort_IT+0x17c>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a28      	ldr	r2, [pc, #160]	; (8001fec <HAL_DMA_Abort_IT+0x1b4>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d031      	beq.n	8001fb4 <HAL_DMA_Abort_IT+0x17c>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a26      	ldr	r2, [pc, #152]	; (8001ff0 <HAL_DMA_Abort_IT+0x1b8>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d02c      	beq.n	8001fb4 <HAL_DMA_Abort_IT+0x17c>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a25      	ldr	r2, [pc, #148]	; (8001ff4 <HAL_DMA_Abort_IT+0x1bc>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d027      	beq.n	8001fb4 <HAL_DMA_Abort_IT+0x17c>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a23      	ldr	r2, [pc, #140]	; (8001ff8 <HAL_DMA_Abort_IT+0x1c0>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d022      	beq.n	8001fb4 <HAL_DMA_Abort_IT+0x17c>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a22      	ldr	r2, [pc, #136]	; (8001ffc <HAL_DMA_Abort_IT+0x1c4>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d01d      	beq.n	8001fb4 <HAL_DMA_Abort_IT+0x17c>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a20      	ldr	r2, [pc, #128]	; (8002000 <HAL_DMA_Abort_IT+0x1c8>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d018      	beq.n	8001fb4 <HAL_DMA_Abort_IT+0x17c>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a1f      	ldr	r2, [pc, #124]	; (8002004 <HAL_DMA_Abort_IT+0x1cc>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d013      	beq.n	8001fb4 <HAL_DMA_Abort_IT+0x17c>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a1d      	ldr	r2, [pc, #116]	; (8002008 <HAL_DMA_Abort_IT+0x1d0>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d00e      	beq.n	8001fb4 <HAL_DMA_Abort_IT+0x17c>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a1c      	ldr	r2, [pc, #112]	; (800200c <HAL_DMA_Abort_IT+0x1d4>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d009      	beq.n	8001fb4 <HAL_DMA_Abort_IT+0x17c>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a1a      	ldr	r2, [pc, #104]	; (8002010 <HAL_DMA_Abort_IT+0x1d8>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d004      	beq.n	8001fb4 <HAL_DMA_Abort_IT+0x17c>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a19      	ldr	r2, [pc, #100]	; (8002014 <HAL_DMA_Abort_IT+0x1dc>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d108      	bne.n	8001fc6 <HAL_DMA_Abort_IT+0x18e>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f022 0201 	bic.w	r2, r2, #1
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	e178      	b.n	80022b8 <HAL_DMA_Abort_IT+0x480>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f022 0201 	bic.w	r2, r2, #1
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	e16f      	b.n	80022b8 <HAL_DMA_Abort_IT+0x480>
 8001fd8:	40020010 	.word	0x40020010
 8001fdc:	40020028 	.word	0x40020028
 8001fe0:	40020040 	.word	0x40020040
 8001fe4:	40020058 	.word	0x40020058
 8001fe8:	40020070 	.word	0x40020070
 8001fec:	40020088 	.word	0x40020088
 8001ff0:	400200a0 	.word	0x400200a0
 8001ff4:	400200b8 	.word	0x400200b8
 8001ff8:	40020410 	.word	0x40020410
 8001ffc:	40020428 	.word	0x40020428
 8002000:	40020440 	.word	0x40020440
 8002004:	40020458 	.word	0x40020458
 8002008:	40020470 	.word	0x40020470
 800200c:	40020488 	.word	0x40020488
 8002010:	400204a0 	.word	0x400204a0
 8002014:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f022 020e 	bic.w	r2, r2, #14
 8002026:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a6c      	ldr	r2, [pc, #432]	; (80021e0 <HAL_DMA_Abort_IT+0x3a8>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d04a      	beq.n	80020c8 <HAL_DMA_Abort_IT+0x290>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a6b      	ldr	r2, [pc, #428]	; (80021e4 <HAL_DMA_Abort_IT+0x3ac>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d045      	beq.n	80020c8 <HAL_DMA_Abort_IT+0x290>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a69      	ldr	r2, [pc, #420]	; (80021e8 <HAL_DMA_Abort_IT+0x3b0>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d040      	beq.n	80020c8 <HAL_DMA_Abort_IT+0x290>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a68      	ldr	r2, [pc, #416]	; (80021ec <HAL_DMA_Abort_IT+0x3b4>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d03b      	beq.n	80020c8 <HAL_DMA_Abort_IT+0x290>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a66      	ldr	r2, [pc, #408]	; (80021f0 <HAL_DMA_Abort_IT+0x3b8>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d036      	beq.n	80020c8 <HAL_DMA_Abort_IT+0x290>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a65      	ldr	r2, [pc, #404]	; (80021f4 <HAL_DMA_Abort_IT+0x3bc>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d031      	beq.n	80020c8 <HAL_DMA_Abort_IT+0x290>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a63      	ldr	r2, [pc, #396]	; (80021f8 <HAL_DMA_Abort_IT+0x3c0>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d02c      	beq.n	80020c8 <HAL_DMA_Abort_IT+0x290>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a62      	ldr	r2, [pc, #392]	; (80021fc <HAL_DMA_Abort_IT+0x3c4>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d027      	beq.n	80020c8 <HAL_DMA_Abort_IT+0x290>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a60      	ldr	r2, [pc, #384]	; (8002200 <HAL_DMA_Abort_IT+0x3c8>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d022      	beq.n	80020c8 <HAL_DMA_Abort_IT+0x290>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a5f      	ldr	r2, [pc, #380]	; (8002204 <HAL_DMA_Abort_IT+0x3cc>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d01d      	beq.n	80020c8 <HAL_DMA_Abort_IT+0x290>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a5d      	ldr	r2, [pc, #372]	; (8002208 <HAL_DMA_Abort_IT+0x3d0>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d018      	beq.n	80020c8 <HAL_DMA_Abort_IT+0x290>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a5c      	ldr	r2, [pc, #368]	; (800220c <HAL_DMA_Abort_IT+0x3d4>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d013      	beq.n	80020c8 <HAL_DMA_Abort_IT+0x290>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a5a      	ldr	r2, [pc, #360]	; (8002210 <HAL_DMA_Abort_IT+0x3d8>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d00e      	beq.n	80020c8 <HAL_DMA_Abort_IT+0x290>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a59      	ldr	r2, [pc, #356]	; (8002214 <HAL_DMA_Abort_IT+0x3dc>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d009      	beq.n	80020c8 <HAL_DMA_Abort_IT+0x290>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a57      	ldr	r2, [pc, #348]	; (8002218 <HAL_DMA_Abort_IT+0x3e0>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d004      	beq.n	80020c8 <HAL_DMA_Abort_IT+0x290>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a56      	ldr	r2, [pc, #344]	; (800221c <HAL_DMA_Abort_IT+0x3e4>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d108      	bne.n	80020da <HAL_DMA_Abort_IT+0x2a2>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 0201 	bic.w	r2, r2, #1
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	e007      	b.n	80020ea <HAL_DMA_Abort_IT+0x2b2>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f022 0201 	bic.w	r2, r2, #1
 80020e8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a3c      	ldr	r2, [pc, #240]	; (80021e0 <HAL_DMA_Abort_IT+0x3a8>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d072      	beq.n	80021da <HAL_DMA_Abort_IT+0x3a2>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a3a      	ldr	r2, [pc, #232]	; (80021e4 <HAL_DMA_Abort_IT+0x3ac>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d06d      	beq.n	80021da <HAL_DMA_Abort_IT+0x3a2>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a39      	ldr	r2, [pc, #228]	; (80021e8 <HAL_DMA_Abort_IT+0x3b0>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d068      	beq.n	80021da <HAL_DMA_Abort_IT+0x3a2>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a37      	ldr	r2, [pc, #220]	; (80021ec <HAL_DMA_Abort_IT+0x3b4>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d063      	beq.n	80021da <HAL_DMA_Abort_IT+0x3a2>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a36      	ldr	r2, [pc, #216]	; (80021f0 <HAL_DMA_Abort_IT+0x3b8>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d05e      	beq.n	80021da <HAL_DMA_Abort_IT+0x3a2>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a34      	ldr	r2, [pc, #208]	; (80021f4 <HAL_DMA_Abort_IT+0x3bc>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d059      	beq.n	80021da <HAL_DMA_Abort_IT+0x3a2>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a33      	ldr	r2, [pc, #204]	; (80021f8 <HAL_DMA_Abort_IT+0x3c0>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d054      	beq.n	80021da <HAL_DMA_Abort_IT+0x3a2>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a31      	ldr	r2, [pc, #196]	; (80021fc <HAL_DMA_Abort_IT+0x3c4>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d04f      	beq.n	80021da <HAL_DMA_Abort_IT+0x3a2>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a30      	ldr	r2, [pc, #192]	; (8002200 <HAL_DMA_Abort_IT+0x3c8>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d04a      	beq.n	80021da <HAL_DMA_Abort_IT+0x3a2>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a2e      	ldr	r2, [pc, #184]	; (8002204 <HAL_DMA_Abort_IT+0x3cc>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d045      	beq.n	80021da <HAL_DMA_Abort_IT+0x3a2>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a2d      	ldr	r2, [pc, #180]	; (8002208 <HAL_DMA_Abort_IT+0x3d0>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d040      	beq.n	80021da <HAL_DMA_Abort_IT+0x3a2>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a2b      	ldr	r2, [pc, #172]	; (800220c <HAL_DMA_Abort_IT+0x3d4>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d03b      	beq.n	80021da <HAL_DMA_Abort_IT+0x3a2>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a2a      	ldr	r2, [pc, #168]	; (8002210 <HAL_DMA_Abort_IT+0x3d8>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d036      	beq.n	80021da <HAL_DMA_Abort_IT+0x3a2>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a28      	ldr	r2, [pc, #160]	; (8002214 <HAL_DMA_Abort_IT+0x3dc>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d031      	beq.n	80021da <HAL_DMA_Abort_IT+0x3a2>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a27      	ldr	r2, [pc, #156]	; (8002218 <HAL_DMA_Abort_IT+0x3e0>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d02c      	beq.n	80021da <HAL_DMA_Abort_IT+0x3a2>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a25      	ldr	r2, [pc, #148]	; (800221c <HAL_DMA_Abort_IT+0x3e4>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d027      	beq.n	80021da <HAL_DMA_Abort_IT+0x3a2>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a24      	ldr	r2, [pc, #144]	; (8002220 <HAL_DMA_Abort_IT+0x3e8>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d022      	beq.n	80021da <HAL_DMA_Abort_IT+0x3a2>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a22      	ldr	r2, [pc, #136]	; (8002224 <HAL_DMA_Abort_IT+0x3ec>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d01d      	beq.n	80021da <HAL_DMA_Abort_IT+0x3a2>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a21      	ldr	r2, [pc, #132]	; (8002228 <HAL_DMA_Abort_IT+0x3f0>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d018      	beq.n	80021da <HAL_DMA_Abort_IT+0x3a2>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a1f      	ldr	r2, [pc, #124]	; (800222c <HAL_DMA_Abort_IT+0x3f4>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d013      	beq.n	80021da <HAL_DMA_Abort_IT+0x3a2>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a1e      	ldr	r2, [pc, #120]	; (8002230 <HAL_DMA_Abort_IT+0x3f8>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d00e      	beq.n	80021da <HAL_DMA_Abort_IT+0x3a2>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a1c      	ldr	r2, [pc, #112]	; (8002234 <HAL_DMA_Abort_IT+0x3fc>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d009      	beq.n	80021da <HAL_DMA_Abort_IT+0x3a2>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a1b      	ldr	r2, [pc, #108]	; (8002238 <HAL_DMA_Abort_IT+0x400>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d004      	beq.n	80021da <HAL_DMA_Abort_IT+0x3a2>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a19      	ldr	r2, [pc, #100]	; (800223c <HAL_DMA_Abort_IT+0x404>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d132      	bne.n	8002240 <HAL_DMA_Abort_IT+0x408>
 80021da:	2301      	movs	r3, #1
 80021dc:	e031      	b.n	8002242 <HAL_DMA_Abort_IT+0x40a>
 80021de:	bf00      	nop
 80021e0:	40020010 	.word	0x40020010
 80021e4:	40020028 	.word	0x40020028
 80021e8:	40020040 	.word	0x40020040
 80021ec:	40020058 	.word	0x40020058
 80021f0:	40020070 	.word	0x40020070
 80021f4:	40020088 	.word	0x40020088
 80021f8:	400200a0 	.word	0x400200a0
 80021fc:	400200b8 	.word	0x400200b8
 8002200:	40020410 	.word	0x40020410
 8002204:	40020428 	.word	0x40020428
 8002208:	40020440 	.word	0x40020440
 800220c:	40020458 	.word	0x40020458
 8002210:	40020470 	.word	0x40020470
 8002214:	40020488 	.word	0x40020488
 8002218:	400204a0 	.word	0x400204a0
 800221c:	400204b8 	.word	0x400204b8
 8002220:	58025408 	.word	0x58025408
 8002224:	5802541c 	.word	0x5802541c
 8002228:	58025430 	.word	0x58025430
 800222c:	58025444 	.word	0x58025444
 8002230:	58025458 	.word	0x58025458
 8002234:	5802546c 	.word	0x5802546c
 8002238:	58025480 	.word	0x58025480
 800223c:	58025494 	.word	0x58025494
 8002240:	2300      	movs	r3, #0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d028      	beq.n	8002298 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002250:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002254:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002260:	f003 031f 	and.w	r3, r3, #31
 8002264:	2201      	movs	r2, #1
 8002266:	409a      	lsls	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002274:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00c      	beq.n	8002298 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002288:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800228c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002296:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d003      	beq.n	80022b8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop

080022c4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e0cf      	b.n	8002476 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d106      	bne.n	80022ee <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2223      	movs	r2, #35	; 0x23
 80022e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f7fe fdef 	bl	8000ecc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ee:	4b64      	ldr	r3, [pc, #400]	; (8002480 <HAL_ETH_Init+0x1bc>)
 80022f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80022f4:	4a62      	ldr	r2, [pc, #392]	; (8002480 <HAL_ETH_Init+0x1bc>)
 80022f6:	f043 0302 	orr.w	r3, r3, #2
 80022fa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80022fe:	4b60      	ldr	r3, [pc, #384]	; (8002480 <HAL_ETH_Init+0x1bc>)
 8002300:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	60bb      	str	r3, [r7, #8]
 800230a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	7a1b      	ldrb	r3, [r3, #8]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d103      	bne.n	800231c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002314:	2000      	movs	r0, #0
 8002316:	f7ff f94d 	bl	80015b4 <HAL_SYSCFG_ETHInterfaceSelect>
 800231a:	e003      	b.n	8002324 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800231c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002320:	f7ff f948 	bl	80015b4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8002324:	4b57      	ldr	r3, [pc, #348]	; (8002484 <HAL_ETH_Init+0x1c0>)
 8002326:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	6812      	ldr	r2, [r2, #0]
 8002336:	f043 0301 	orr.w	r3, r3, #1
 800233a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800233e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002340:	f7ff f8fc 	bl	800153c <HAL_GetTick>
 8002344:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002346:	e011      	b.n	800236c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002348:	f7ff f8f8 	bl	800153c <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002356:	d909      	bls.n	800236c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2204      	movs	r2, #4
 800235c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	22e0      	movs	r2, #224	; 0xe0
 8002364:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e084      	b.n	8002476 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1e4      	bne.n	8002348 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 f886 	bl	8002490 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002384:	f001 feca 	bl	800411c <HAL_RCC_GetHCLKFreq>
 8002388:	4603      	mov	r3, r0
 800238a:	4a3f      	ldr	r2, [pc, #252]	; (8002488 <HAL_ETH_Init+0x1c4>)
 800238c:	fba2 2303 	umull	r2, r3, r2, r3
 8002390:	0c9a      	lsrs	r2, r3, #18
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	3a01      	subs	r2, #1
 8002398:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f000 fa71 	bl	8002884 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023aa:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80023ae:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	6812      	ldr	r2, [r2, #0]
 80023b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80023ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023be:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	f003 0303 	and.w	r3, r3, #3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d009      	beq.n	80023e2 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	22e0      	movs	r2, #224	; 0xe0
 80023da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e049      	b.n	8002476 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ea:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80023ee:	4b27      	ldr	r3, [pc, #156]	; (800248c <HAL_ETH_Init+0x1c8>)
 80023f0:	4013      	ands	r3, r2
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	6952      	ldr	r2, [r2, #20]
 80023f6:	0051      	lsls	r1, r2, #1
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	6812      	ldr	r2, [r2, #0]
 80023fc:	430b      	orrs	r3, r1
 80023fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002402:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 fad9 	bl	80029be <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f000 fb1f 	bl	8002a50 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	3305      	adds	r3, #5
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	021a      	lsls	r2, r3, #8
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	3304      	adds	r3, #4
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	4619      	mov	r1, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	430a      	orrs	r2, r1
 800242c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	3303      	adds	r3, #3
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	061a      	lsls	r2, r3, #24
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	3302      	adds	r3, #2
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	041b      	lsls	r3, r3, #16
 8002444:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	3301      	adds	r3, #1
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002450:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800245e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002460:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2210      	movs	r2, #16
 8002470:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	58024400 	.word	0x58024400
 8002484:	58000400 	.word	0x58000400
 8002488:	431bde83 	.word	0x431bde83
 800248c:	ffff8001 	.word	0xffff8001

08002490 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80024a0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80024a8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80024aa:	f001 fe37 	bl	800411c <HAL_RCC_GetHCLKFreq>
 80024ae:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	4a1e      	ldr	r2, [pc, #120]	; (800252c <HAL_ETH_SetMDIOClockRange+0x9c>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d908      	bls.n	80024ca <HAL_ETH_SetMDIOClockRange+0x3a>
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	4a1d      	ldr	r2, [pc, #116]	; (8002530 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d804      	bhi.n	80024ca <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	e027      	b.n	800251a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	4a18      	ldr	r2, [pc, #96]	; (8002530 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d908      	bls.n	80024e4 <HAL_ETH_SetMDIOClockRange+0x54>
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	4a17      	ldr	r2, [pc, #92]	; (8002534 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d204      	bcs.n	80024e4 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80024e0:	60fb      	str	r3, [r7, #12]
 80024e2:	e01a      	b.n	800251a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	4a13      	ldr	r2, [pc, #76]	; (8002534 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d303      	bcc.n	80024f4 <HAL_ETH_SetMDIOClockRange+0x64>
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	4a12      	ldr	r2, [pc, #72]	; (8002538 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d911      	bls.n	8002518 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	4a10      	ldr	r2, [pc, #64]	; (8002538 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d908      	bls.n	800250e <HAL_ETH_SetMDIOClockRange+0x7e>
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	4a0f      	ldr	r2, [pc, #60]	; (800253c <HAL_ETH_SetMDIOClockRange+0xac>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d804      	bhi.n	800250e <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	e005      	b.n	800251a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002514:	60fb      	str	r3, [r7, #12]
 8002516:	e000      	b.n	800251a <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002518:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002524:	bf00      	nop
 8002526:	3710      	adds	r7, #16
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	01312cff 	.word	0x01312cff
 8002530:	02160ebf 	.word	0x02160ebf
 8002534:	03938700 	.word	0x03938700
 8002538:	05f5e0ff 	.word	0x05f5e0ff
 800253c:	08f0d17f 	.word	0x08f0d17f

08002540 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002552:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	791b      	ldrb	r3, [r3, #4]
 8002558:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800255a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	7b1b      	ldrb	r3, [r3, #12]
 8002560:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002562:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	7b5b      	ldrb	r3, [r3, #13]
 8002568:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800256a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	7b9b      	ldrb	r3, [r3, #14]
 8002570:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002572:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	7bdb      	ldrb	r3, [r3, #15]
 8002578:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800257a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	7c12      	ldrb	r2, [r2, #16]
 8002580:	2a00      	cmp	r2, #0
 8002582:	d102      	bne.n	800258a <ETH_SetMACConfig+0x4a>
 8002584:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002588:	e000      	b.n	800258c <ETH_SetMACConfig+0x4c>
 800258a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800258c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	7c52      	ldrb	r2, [r2, #17]
 8002592:	2a00      	cmp	r2, #0
 8002594:	d102      	bne.n	800259c <ETH_SetMACConfig+0x5c>
 8002596:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800259a:	e000      	b.n	800259e <ETH_SetMACConfig+0x5e>
 800259c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800259e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	7c9b      	ldrb	r3, [r3, #18]
 80025a4:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80025a6:	431a      	orrs	r2, r3
               macconf->Speed |
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80025ac:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80025b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	7f1b      	ldrb	r3, [r3, #28]
 80025b8:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80025ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	7f5b      	ldrb	r3, [r3, #29]
 80025c0:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80025c2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	7f92      	ldrb	r2, [r2, #30]
 80025c8:	2a00      	cmp	r2, #0
 80025ca:	d102      	bne.n	80025d2 <ETH_SetMACConfig+0x92>
 80025cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025d0:	e000      	b.n	80025d4 <ETH_SetMACConfig+0x94>
 80025d2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80025d4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	7fdb      	ldrb	r3, [r3, #31]
 80025da:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80025dc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80025e4:	2a00      	cmp	r2, #0
 80025e6:	d102      	bne.n	80025ee <ETH_SetMACConfig+0xae>
 80025e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025ec:	e000      	b.n	80025f0 <ETH_SetMACConfig+0xb0>
 80025ee:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80025f0:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80025f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80025fe:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002600:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002606:	4313      	orrs	r3, r2
 8002608:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	4b56      	ldr	r3, [pc, #344]	; (800276c <ETH_SetMACConfig+0x22c>)
 8002612:	4013      	ands	r3, r2
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	6812      	ldr	r2, [r2, #0]
 8002618:	68f9      	ldr	r1, [r7, #12]
 800261a:	430b      	orrs	r3, r1
 800261c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002622:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800262a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800262c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002634:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002636:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800263e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002640:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002648:	2a00      	cmp	r2, #0
 800264a:	d102      	bne.n	8002652 <ETH_SetMACConfig+0x112>
 800264c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002650:	e000      	b.n	8002654 <ETH_SetMACConfig+0x114>
 8002652:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002654:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800265a:	4313      	orrs	r3, r2
 800265c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	685a      	ldr	r2, [r3, #4]
 8002664:	4b42      	ldr	r3, [pc, #264]	; (8002770 <ETH_SetMACConfig+0x230>)
 8002666:	4013      	ands	r3, r2
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	6812      	ldr	r2, [r2, #0]
 800266c:	68f9      	ldr	r1, [r7, #12]
 800266e:	430b      	orrs	r3, r1
 8002670:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002678:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800267e:	4313      	orrs	r3, r2
 8002680:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68da      	ldr	r2, [r3, #12]
 8002688:	4b3a      	ldr	r3, [pc, #232]	; (8002774 <ETH_SetMACConfig+0x234>)
 800268a:	4013      	ands	r3, r2
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	6812      	ldr	r2, [r2, #0]
 8002690:	68f9      	ldr	r1, [r7, #12]
 8002692:	430b      	orrs	r3, r1
 8002694:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800269c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80026a2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80026aa:	2a00      	cmp	r2, #0
 80026ac:	d101      	bne.n	80026b2 <ETH_SetMACConfig+0x172>
 80026ae:	2280      	movs	r2, #128	; 0x80
 80026b0:	e000      	b.n	80026b4 <ETH_SetMACConfig+0x174>
 80026b2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80026b4:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ba:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80026bc:	4313      	orrs	r3, r2
 80026be:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80026c6:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80026ca:	4013      	ands	r3, r2
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	6812      	ldr	r2, [r2, #0]
 80026d0:	68f9      	ldr	r1, [r7, #12]
 80026d2:	430b      	orrs	r3, r1
 80026d4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80026dc:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80026e4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80026e6:	4313      	orrs	r3, r2
 80026e8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f2:	f023 0103 	bic.w	r1, r3, #3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	430a      	orrs	r2, r1
 80026fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800270a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002726:	2a00      	cmp	r2, #0
 8002728:	d101      	bne.n	800272e <ETH_SetMACConfig+0x1ee>
 800272a:	2240      	movs	r2, #64	; 0x40
 800272c:	e000      	b.n	8002730 <ETH_SetMACConfig+0x1f0>
 800272e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002730:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002738:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800273a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002742:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002744:	4313      	orrs	r3, r2
 8002746:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002750:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68fa      	ldr	r2, [r7, #12]
 800275a:	430a      	orrs	r2, r1
 800275c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002760:	bf00      	nop
 8002762:	3714      	adds	r7, #20
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	00048083 	.word	0x00048083
 8002770:	c0f88000 	.word	0xc0f88000
 8002774:	fffffef0 	.word	0xfffffef0

08002778 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	4b38      	ldr	r3, [pc, #224]	; (8002870 <ETH_SetDMAConfig+0xf8>)
 800278e:	4013      	ands	r3, r2
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	6811      	ldr	r1, [r2, #0]
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	6812      	ldr	r2, [r2, #0]
 8002798:	430b      	orrs	r3, r1
 800279a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800279e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	791b      	ldrb	r3, [r3, #4]
 80027a4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80027aa:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	7b1b      	ldrb	r3, [r3, #12]
 80027b0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80027b2:	4313      	orrs	r3, r2
 80027b4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027be:	685a      	ldr	r2, [r3, #4]
 80027c0:	4b2c      	ldr	r3, [pc, #176]	; (8002874 <ETH_SetDMAConfig+0xfc>)
 80027c2:	4013      	ands	r3, r2
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	6812      	ldr	r2, [r2, #0]
 80027c8:	68f9      	ldr	r1, [r7, #12]
 80027ca:	430b      	orrs	r3, r1
 80027cc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80027d0:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	7b5b      	ldrb	r3, [r3, #13]
 80027d6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80027dc:	4313      	orrs	r3, r2
 80027de:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027e8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80027ec:	4b22      	ldr	r3, [pc, #136]	; (8002878 <ETH_SetDMAConfig+0x100>)
 80027ee:	4013      	ands	r3, r2
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6812      	ldr	r2, [r2, #0]
 80027f4:	68f9      	ldr	r1, [r7, #12]
 80027f6:	430b      	orrs	r3, r1
 80027f8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80027fc:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	7d1b      	ldrb	r3, [r3, #20]
 8002808:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800280a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	7f5b      	ldrb	r3, [r3, #29]
 8002810:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002812:	4313      	orrs	r3, r2
 8002814:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800281e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8002822:	4b16      	ldr	r3, [pc, #88]	; (800287c <ETH_SetDMAConfig+0x104>)
 8002824:	4013      	ands	r3, r2
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	6812      	ldr	r2, [r2, #0]
 800282a:	68f9      	ldr	r1, [r7, #12]
 800282c:	430b      	orrs	r3, r1
 800282e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002832:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	7f1b      	ldrb	r3, [r3, #28]
 800283a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002840:	4313      	orrs	r3, r2
 8002842:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800284c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002850:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <ETH_SetDMAConfig+0x108>)
 8002852:	4013      	ands	r3, r2
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	6812      	ldr	r2, [r2, #0]
 8002858:	68f9      	ldr	r1, [r7, #12]
 800285a:	430b      	orrs	r3, r1
 800285c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002860:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8002864:	bf00      	nop
 8002866:	3714      	adds	r7, #20
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	ffff87fd 	.word	0xffff87fd
 8002874:	ffff2ffe 	.word	0xffff2ffe
 8002878:	fffec000 	.word	0xfffec000
 800287c:	ffc0efef 	.word	0xffc0efef
 8002880:	7fc0ffff 	.word	0x7fc0ffff

08002884 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b0a4      	sub	sp, #144	; 0x90
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800288c:	2301      	movs	r3, #1
 800288e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002892:	2300      	movs	r3, #0
 8002894:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002896:	2300      	movs	r3, #0
 8002898:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800289c:	2300      	movs	r3, #0
 800289e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80028a2:	2301      	movs	r3, #1
 80028a4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80028a8:	2301      	movs	r3, #1
 80028aa:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80028ae:	2301      	movs	r3, #1
 80028b0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80028b4:	2300      	movs	r3, #0
 80028b6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80028ba:	2301      	movs	r3, #1
 80028bc:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80028c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028c4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80028c6:	2300      	movs	r3, #0
 80028c8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80028cc:	2300      	movs	r3, #0
 80028ce:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80028d0:	2300      	movs	r3, #0
 80028d2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80028d6:	2300      	movs	r3, #0
 80028d8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80028dc:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80028e0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80028e2:	2300      	movs	r3, #0
 80028e4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80028e8:	2300      	movs	r3, #0
 80028ea:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80028ec:	2301      	movs	r3, #1
 80028ee:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80028f2:	2300      	movs	r3, #0
 80028f4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80028f8:	2300      	movs	r3, #0
 80028fa:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80028fe:	2300      	movs	r3, #0
 8002900:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002902:	2300      	movs	r3, #0
 8002904:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002906:	2300      	movs	r3, #0
 8002908:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800290a:	2300      	movs	r3, #0
 800290c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002910:	2300      	movs	r3, #0
 8002912:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002916:	2301      	movs	r3, #1
 8002918:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800291c:	2320      	movs	r3, #32
 800291e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002922:	2301      	movs	r3, #1
 8002924:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002928:	2300      	movs	r3, #0
 800292a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800292e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002932:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002934:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002938:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800293a:	2300      	movs	r3, #0
 800293c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002940:	2302      	movs	r3, #2
 8002942:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002946:	2300      	movs	r3, #0
 8002948:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800294c:	2300      	movs	r3, #0
 800294e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002952:	2300      	movs	r3, #0
 8002954:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002958:	2301      	movs	r3, #1
 800295a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800295e:	2300      	movs	r3, #0
 8002960:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002962:	2301      	movs	r3, #1
 8002964:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002968:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800296c:	4619      	mov	r1, r3
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f7ff fde6 	bl	8002540 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002974:	2301      	movs	r3, #1
 8002976:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002978:	2301      	movs	r3, #1
 800297a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800297c:	2300      	movs	r3, #0
 800297e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002980:	2300      	movs	r3, #0
 8002982:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002986:	2300      	movs	r3, #0
 8002988:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800298a:	2300      	movs	r3, #0
 800298c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800298e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002992:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002994:	2300      	movs	r3, #0
 8002996:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002998:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800299c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800299e:	2300      	movs	r3, #0
 80029a0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80029a4:	f44f 7306 	mov.w	r3, #536	; 0x218
 80029a8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80029aa:	f107 0308 	add.w	r3, r7, #8
 80029ae:	4619      	mov	r1, r3
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f7ff fee1 	bl	8002778 <ETH_SetDMAConfig>
}
 80029b6:	bf00      	nop
 80029b8:	3790      	adds	r7, #144	; 0x90
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80029be:	b480      	push	{r7}
 80029c0:	b085      	sub	sp, #20
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80029c6:	2300      	movs	r3, #0
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	e01d      	b.n	8002a08 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	68d9      	ldr	r1, [r3, #12]
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	4613      	mov	r3, r2
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	4413      	add	r3, r2
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	440b      	add	r3, r1
 80029dc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	2200      	movs	r2, #0
 80029e8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	2200      	movs	r2, #0
 80029ee:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	2200      	movs	r2, #0
 80029f4:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80029f6:	68b9      	ldr	r1, [r7, #8]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	3206      	adds	r2, #6
 80029fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	3301      	adds	r3, #1
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2b03      	cmp	r3, #3
 8002a0c:	d9de      	bls.n	80029cc <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	2303      	movs	r3, #3
 8002a20:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68da      	ldr	r2, [r3, #12]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a30:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68da      	ldr	r2, [r3, #12]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a40:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8002a44:	bf00      	nop
 8002a46:	3714      	adds	r7, #20
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	e023      	b.n	8002aa6 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6919      	ldr	r1, [r3, #16]
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	4613      	mov	r3, r2
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	4413      	add	r3, r2
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	440b      	add	r3, r1
 8002a6e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	2200      	movs	r2, #0
 8002a74:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	2200      	movs	r2, #0
 8002a86:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	2200      	movs	r2, #0
 8002a92:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002a94:	68b9      	ldr	r1, [r7, #8]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	3212      	adds	r2, #18
 8002a9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	60fb      	str	r3, [r7, #12]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2b03      	cmp	r3, #3
 8002aaa:	d9d8      	bls.n	8002a5e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	691a      	ldr	r2, [r3, #16]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ae6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002afa:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8002afe:	bf00      	nop
 8002b00:	3714      	adds	r7, #20
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
	...

08002b0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b089      	sub	sp, #36	; 0x24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002b16:	2300      	movs	r3, #0
 8002b18:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002b1a:	4b89      	ldr	r3, [pc, #548]	; (8002d40 <HAL_GPIO_Init+0x234>)
 8002b1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002b1e:	e194      	b.n	8002e4a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	2101      	movs	r1, #1
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f000 8186 	beq.w	8002e44 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f003 0303 	and.w	r3, r3, #3
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d005      	beq.n	8002b50 <HAL_GPIO_Init+0x44>
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f003 0303 	and.w	r3, r3, #3
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d130      	bne.n	8002bb2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	2203      	movs	r2, #3
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	43db      	mvns	r3, r3
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	4013      	ands	r3, r2
 8002b66:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	68da      	ldr	r2, [r3, #12]
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b86:	2201      	movs	r2, #1
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8e:	43db      	mvns	r3, r3
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	4013      	ands	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	091b      	lsrs	r3, r3, #4
 8002b9c:	f003 0201 	and.w	r2, r3, #1
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f003 0303 	and.w	r3, r3, #3
 8002bba:	2b03      	cmp	r3, #3
 8002bbc:	d017      	beq.n	8002bee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	2203      	movs	r2, #3
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	43db      	mvns	r3, r3
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	689a      	ldr	r2, [r3, #8]
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f003 0303 	and.w	r3, r3, #3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d123      	bne.n	8002c42 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	08da      	lsrs	r2, r3, #3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	3208      	adds	r2, #8
 8002c02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	f003 0307 	and.w	r3, r3, #7
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	220f      	movs	r2, #15
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	43db      	mvns	r3, r3
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	691a      	ldr	r2, [r3, #16]
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	f003 0307 	and.w	r3, r3, #7
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	08da      	lsrs	r2, r3, #3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	3208      	adds	r2, #8
 8002c3c:	69b9      	ldr	r1, [r7, #24]
 8002c3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	2203      	movs	r2, #3
 8002c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c52:	43db      	mvns	r3, r3
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	4013      	ands	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f003 0203 	and.w	r2, r3, #3
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f000 80e0 	beq.w	8002e44 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c84:	4b2f      	ldr	r3, [pc, #188]	; (8002d44 <HAL_GPIO_Init+0x238>)
 8002c86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c8a:	4a2e      	ldr	r2, [pc, #184]	; (8002d44 <HAL_GPIO_Init+0x238>)
 8002c8c:	f043 0302 	orr.w	r3, r3, #2
 8002c90:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002c94:	4b2b      	ldr	r3, [pc, #172]	; (8002d44 <HAL_GPIO_Init+0x238>)
 8002c96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ca2:	4a29      	ldr	r2, [pc, #164]	; (8002d48 <HAL_GPIO_Init+0x23c>)
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	089b      	lsrs	r3, r3, #2
 8002ca8:	3302      	adds	r3, #2
 8002caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	f003 0303 	and.w	r3, r3, #3
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	220f      	movs	r2, #15
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	43db      	mvns	r3, r3
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a20      	ldr	r2, [pc, #128]	; (8002d4c <HAL_GPIO_Init+0x240>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d052      	beq.n	8002d74 <HAL_GPIO_Init+0x268>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a1f      	ldr	r2, [pc, #124]	; (8002d50 <HAL_GPIO_Init+0x244>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d031      	beq.n	8002d3a <HAL_GPIO_Init+0x22e>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a1e      	ldr	r2, [pc, #120]	; (8002d54 <HAL_GPIO_Init+0x248>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d02b      	beq.n	8002d36 <HAL_GPIO_Init+0x22a>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a1d      	ldr	r2, [pc, #116]	; (8002d58 <HAL_GPIO_Init+0x24c>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d025      	beq.n	8002d32 <HAL_GPIO_Init+0x226>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a1c      	ldr	r2, [pc, #112]	; (8002d5c <HAL_GPIO_Init+0x250>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d01f      	beq.n	8002d2e <HAL_GPIO_Init+0x222>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a1b      	ldr	r2, [pc, #108]	; (8002d60 <HAL_GPIO_Init+0x254>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d019      	beq.n	8002d2a <HAL_GPIO_Init+0x21e>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a1a      	ldr	r2, [pc, #104]	; (8002d64 <HAL_GPIO_Init+0x258>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d013      	beq.n	8002d26 <HAL_GPIO_Init+0x21a>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a19      	ldr	r2, [pc, #100]	; (8002d68 <HAL_GPIO_Init+0x25c>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d00d      	beq.n	8002d22 <HAL_GPIO_Init+0x216>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a18      	ldr	r2, [pc, #96]	; (8002d6c <HAL_GPIO_Init+0x260>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d007      	beq.n	8002d1e <HAL_GPIO_Init+0x212>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a17      	ldr	r2, [pc, #92]	; (8002d70 <HAL_GPIO_Init+0x264>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d101      	bne.n	8002d1a <HAL_GPIO_Init+0x20e>
 8002d16:	2309      	movs	r3, #9
 8002d18:	e02d      	b.n	8002d76 <HAL_GPIO_Init+0x26a>
 8002d1a:	230a      	movs	r3, #10
 8002d1c:	e02b      	b.n	8002d76 <HAL_GPIO_Init+0x26a>
 8002d1e:	2308      	movs	r3, #8
 8002d20:	e029      	b.n	8002d76 <HAL_GPIO_Init+0x26a>
 8002d22:	2307      	movs	r3, #7
 8002d24:	e027      	b.n	8002d76 <HAL_GPIO_Init+0x26a>
 8002d26:	2306      	movs	r3, #6
 8002d28:	e025      	b.n	8002d76 <HAL_GPIO_Init+0x26a>
 8002d2a:	2305      	movs	r3, #5
 8002d2c:	e023      	b.n	8002d76 <HAL_GPIO_Init+0x26a>
 8002d2e:	2304      	movs	r3, #4
 8002d30:	e021      	b.n	8002d76 <HAL_GPIO_Init+0x26a>
 8002d32:	2303      	movs	r3, #3
 8002d34:	e01f      	b.n	8002d76 <HAL_GPIO_Init+0x26a>
 8002d36:	2302      	movs	r3, #2
 8002d38:	e01d      	b.n	8002d76 <HAL_GPIO_Init+0x26a>
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e01b      	b.n	8002d76 <HAL_GPIO_Init+0x26a>
 8002d3e:	bf00      	nop
 8002d40:	58000080 	.word	0x58000080
 8002d44:	58024400 	.word	0x58024400
 8002d48:	58000400 	.word	0x58000400
 8002d4c:	58020000 	.word	0x58020000
 8002d50:	58020400 	.word	0x58020400
 8002d54:	58020800 	.word	0x58020800
 8002d58:	58020c00 	.word	0x58020c00
 8002d5c:	58021000 	.word	0x58021000
 8002d60:	58021400 	.word	0x58021400
 8002d64:	58021800 	.word	0x58021800
 8002d68:	58021c00 	.word	0x58021c00
 8002d6c:	58022000 	.word	0x58022000
 8002d70:	58022400 	.word	0x58022400
 8002d74:	2300      	movs	r3, #0
 8002d76:	69fa      	ldr	r2, [r7, #28]
 8002d78:	f002 0203 	and.w	r2, r2, #3
 8002d7c:	0092      	lsls	r2, r2, #2
 8002d7e:	4093      	lsls	r3, r2
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d86:	4938      	ldr	r1, [pc, #224]	; (8002e68 <HAL_GPIO_Init+0x35c>)
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	089b      	lsrs	r3, r3, #2
 8002d8c:	3302      	adds	r3, #2
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	4013      	ands	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002dba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d003      	beq.n	8002de8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002de8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d003      	beq.n	8002e14 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	43db      	mvns	r3, r3
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4013      	ands	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d003      	beq.n	8002e3e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	3301      	adds	r3, #1
 8002e48:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	fa22 f303 	lsr.w	r3, r2, r3
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f47f ae63 	bne.w	8002b20 <HAL_GPIO_Init+0x14>
  }
}
 8002e5a:	bf00      	nop
 8002e5c:	bf00      	nop
 8002e5e:	3724      	adds	r7, #36	; 0x24
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr
 8002e68:	58000400 	.word	0x58000400

08002e6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	460b      	mov	r3, r1
 8002e76:	807b      	strh	r3, [r7, #2]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e7c:	787b      	ldrb	r3, [r7, #1]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e82:	887a      	ldrh	r2, [r7, #2]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002e88:	e003      	b.n	8002e92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002e8a:	887b      	ldrh	r3, [r7, #2]
 8002e8c:	041a      	lsls	r2, r3, #16
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	619a      	str	r2, [r3, #24]
}
 8002e92:	bf00      	nop
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
	...

08002ea0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002ea8:	4a08      	ldr	r2, [pc, #32]	; (8002ecc <HAL_HSEM_FastTake+0x2c>)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	3320      	adds	r3, #32
 8002eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eb2:	4a07      	ldr	r2, [pc, #28]	; (8002ed0 <HAL_HSEM_FastTake+0x30>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d101      	bne.n	8002ebc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	e000      	b.n	8002ebe <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	58026400 	.word	0x58026400
 8002ed0:	80000300 	.word	0x80000300

08002ed4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002ede:	4906      	ldr	r1, [pc, #24]	; (8002ef8 <HAL_HSEM_Release+0x24>)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	58026400 	.word	0x58026400

08002efc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002efe:	b08f      	sub	sp, #60	; 0x3c
 8002f00:	af0a      	add	r7, sp, #40	; 0x28
 8002f02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e116      	b.n	800313c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d106      	bne.n	8002f2e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f7fe f95b 	bl	80011e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2203      	movs	r2, #3
 8002f32:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d102      	bne.n	8002f48 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f005 fab1 	bl	80084b4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	603b      	str	r3, [r7, #0]
 8002f58:	687e      	ldr	r6, [r7, #4]
 8002f5a:	466d      	mov	r5, sp
 8002f5c:	f106 0410 	add.w	r4, r6, #16
 8002f60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f68:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f6c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f70:	1d33      	adds	r3, r6, #4
 8002f72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f74:	6838      	ldr	r0, [r7, #0]
 8002f76:	f005 fa2f 	bl	80083d8 <USB_CoreInit>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d005      	beq.n	8002f8c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2202      	movs	r2, #2
 8002f84:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e0d7      	b.n	800313c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2100      	movs	r1, #0
 8002f92:	4618      	mov	r0, r3
 8002f94:	f005 fa9f 	bl	80084d6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f98:	2300      	movs	r3, #0
 8002f9a:	73fb      	strb	r3, [r7, #15]
 8002f9c:	e04a      	b.n	8003034 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f9e:	7bfa      	ldrb	r2, [r7, #15]
 8002fa0:	6879      	ldr	r1, [r7, #4]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	4413      	add	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	440b      	add	r3, r1
 8002fac:	333d      	adds	r3, #61	; 0x3d
 8002fae:	2201      	movs	r2, #1
 8002fb0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002fb2:	7bfa      	ldrb	r2, [r7, #15]
 8002fb4:	6879      	ldr	r1, [r7, #4]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	00db      	lsls	r3, r3, #3
 8002fba:	4413      	add	r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	440b      	add	r3, r1
 8002fc0:	333c      	adds	r3, #60	; 0x3c
 8002fc2:	7bfa      	ldrb	r2, [r7, #15]
 8002fc4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002fc6:	7bfa      	ldrb	r2, [r7, #15]
 8002fc8:	7bfb      	ldrb	r3, [r7, #15]
 8002fca:	b298      	uxth	r0, r3
 8002fcc:	6879      	ldr	r1, [r7, #4]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	4413      	add	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	440b      	add	r3, r1
 8002fd8:	3344      	adds	r3, #68	; 0x44
 8002fda:	4602      	mov	r2, r0
 8002fdc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002fde:	7bfa      	ldrb	r2, [r7, #15]
 8002fe0:	6879      	ldr	r1, [r7, #4]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	4413      	add	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	440b      	add	r3, r1
 8002fec:	3340      	adds	r3, #64	; 0x40
 8002fee:	2200      	movs	r2, #0
 8002ff0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ff2:	7bfa      	ldrb	r2, [r7, #15]
 8002ff4:	6879      	ldr	r1, [r7, #4]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	00db      	lsls	r3, r3, #3
 8002ffa:	4413      	add	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	440b      	add	r3, r1
 8003000:	3348      	adds	r3, #72	; 0x48
 8003002:	2200      	movs	r2, #0
 8003004:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003006:	7bfa      	ldrb	r2, [r7, #15]
 8003008:	6879      	ldr	r1, [r7, #4]
 800300a:	4613      	mov	r3, r2
 800300c:	00db      	lsls	r3, r3, #3
 800300e:	4413      	add	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	440b      	add	r3, r1
 8003014:	334c      	adds	r3, #76	; 0x4c
 8003016:	2200      	movs	r2, #0
 8003018:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800301a:	7bfa      	ldrb	r2, [r7, #15]
 800301c:	6879      	ldr	r1, [r7, #4]
 800301e:	4613      	mov	r3, r2
 8003020:	00db      	lsls	r3, r3, #3
 8003022:	4413      	add	r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	440b      	add	r3, r1
 8003028:	3354      	adds	r3, #84	; 0x54
 800302a:	2200      	movs	r2, #0
 800302c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800302e:	7bfb      	ldrb	r3, [r7, #15]
 8003030:	3301      	adds	r3, #1
 8003032:	73fb      	strb	r3, [r7, #15]
 8003034:	7bfa      	ldrb	r2, [r7, #15]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	429a      	cmp	r2, r3
 800303c:	d3af      	bcc.n	8002f9e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800303e:	2300      	movs	r3, #0
 8003040:	73fb      	strb	r3, [r7, #15]
 8003042:	e044      	b.n	80030ce <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003044:	7bfa      	ldrb	r2, [r7, #15]
 8003046:	6879      	ldr	r1, [r7, #4]
 8003048:	4613      	mov	r3, r2
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	4413      	add	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	440b      	add	r3, r1
 8003052:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003056:	2200      	movs	r2, #0
 8003058:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800305a:	7bfa      	ldrb	r2, [r7, #15]
 800305c:	6879      	ldr	r1, [r7, #4]
 800305e:	4613      	mov	r3, r2
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	4413      	add	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	440b      	add	r3, r1
 8003068:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800306c:	7bfa      	ldrb	r2, [r7, #15]
 800306e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003070:	7bfa      	ldrb	r2, [r7, #15]
 8003072:	6879      	ldr	r1, [r7, #4]
 8003074:	4613      	mov	r3, r2
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	4413      	add	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	440b      	add	r3, r1
 800307e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003082:	2200      	movs	r2, #0
 8003084:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003086:	7bfa      	ldrb	r2, [r7, #15]
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	4613      	mov	r3, r2
 800308c:	00db      	lsls	r3, r3, #3
 800308e:	4413      	add	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	440b      	add	r3, r1
 8003094:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800309c:	7bfa      	ldrb	r2, [r7, #15]
 800309e:	6879      	ldr	r1, [r7, #4]
 80030a0:	4613      	mov	r3, r2
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	4413      	add	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	440b      	add	r3, r1
 80030aa:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80030ae:	2200      	movs	r2, #0
 80030b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80030b2:	7bfa      	ldrb	r2, [r7, #15]
 80030b4:	6879      	ldr	r1, [r7, #4]
 80030b6:	4613      	mov	r3, r2
 80030b8:	00db      	lsls	r3, r3, #3
 80030ba:	4413      	add	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	440b      	add	r3, r1
 80030c0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030c8:	7bfb      	ldrb	r3, [r7, #15]
 80030ca:	3301      	adds	r3, #1
 80030cc:	73fb      	strb	r3, [r7, #15]
 80030ce:	7bfa      	ldrb	r2, [r7, #15]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d3b5      	bcc.n	8003044 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	603b      	str	r3, [r7, #0]
 80030de:	687e      	ldr	r6, [r7, #4]
 80030e0:	466d      	mov	r5, sp
 80030e2:	f106 0410 	add.w	r4, r6, #16
 80030e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80030f6:	1d33      	adds	r3, r6, #4
 80030f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030fa:	6838      	ldr	r0, [r7, #0]
 80030fc:	f005 fa38 	bl	8008570 <USB_DevInit>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d005      	beq.n	8003112 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2202      	movs	r2, #2
 800310a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e014      	b.n	800313c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003126:	2b01      	cmp	r3, #1
 8003128:	d102      	bne.n	8003130 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 f80a 	bl	8003144 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4618      	mov	r0, r3
 8003136:	f005 fbf6 	bl	8008926 <USB_DevDisconnect>

  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3714      	adds	r7, #20
 8003140:	46bd      	mov	sp, r7
 8003142:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003144 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003172:	4b05      	ldr	r3, [pc, #20]	; (8003188 <HAL_PCDEx_ActivateLPM+0x44>)
 8003174:	4313      	orrs	r3, r2
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	3714      	adds	r7, #20
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr
 8003188:	10000003 	.word	0x10000003

0800318c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003194:	4b29      	ldr	r3, [pc, #164]	; (800323c <HAL_PWREx_ConfigSupply+0xb0>)
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f003 0307 	and.w	r3, r3, #7
 800319c:	2b06      	cmp	r3, #6
 800319e:	d00a      	beq.n	80031b6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80031a0:	4b26      	ldr	r3, [pc, #152]	; (800323c <HAL_PWREx_ConfigSupply+0xb0>)
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d001      	beq.n	80031b2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e040      	b.n	8003234 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80031b2:	2300      	movs	r3, #0
 80031b4:	e03e      	b.n	8003234 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80031b6:	4b21      	ldr	r3, [pc, #132]	; (800323c <HAL_PWREx_ConfigSupply+0xb0>)
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80031be:	491f      	ldr	r1, [pc, #124]	; (800323c <HAL_PWREx_ConfigSupply+0xb0>)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80031c6:	f7fe f9b9 	bl	800153c <HAL_GetTick>
 80031ca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80031cc:	e009      	b.n	80031e2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80031ce:	f7fe f9b5 	bl	800153c <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031dc:	d901      	bls.n	80031e2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e028      	b.n	8003234 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80031e2:	4b16      	ldr	r3, [pc, #88]	; (800323c <HAL_PWREx_ConfigSupply+0xb0>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031ee:	d1ee      	bne.n	80031ce <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b1e      	cmp	r3, #30
 80031f4:	d008      	beq.n	8003208 <HAL_PWREx_ConfigSupply+0x7c>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2b2e      	cmp	r3, #46	; 0x2e
 80031fa:	d005      	beq.n	8003208 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b1d      	cmp	r3, #29
 8003200:	d002      	beq.n	8003208 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2b2d      	cmp	r3, #45	; 0x2d
 8003206:	d114      	bne.n	8003232 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003208:	f7fe f998 	bl	800153c <HAL_GetTick>
 800320c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800320e:	e009      	b.n	8003224 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003210:	f7fe f994 	bl	800153c <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800321e:	d901      	bls.n	8003224 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e007      	b.n	8003234 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003224:	4b05      	ldr	r3, [pc, #20]	; (800323c <HAL_PWREx_ConfigSupply+0xb0>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800322c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003230:	d1ee      	bne.n	8003210 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	58024800 	.word	0x58024800

08003240 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003244:	4b05      	ldr	r3, [pc, #20]	; (800325c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	4a04      	ldr	r2, [pc, #16]	; (800325c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800324a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800324e:	60d3      	str	r3, [r2, #12]
}
 8003250:	bf00      	nop
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	58024800 	.word	0x58024800

08003260 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b08c      	sub	sp, #48	; 0x30
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d102      	bne.n	8003274 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	f000 bc1d 	b.w	8003aae <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	2b00      	cmp	r3, #0
 800327e:	f000 8087 	beq.w	8003390 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003282:	4b99      	ldr	r3, [pc, #612]	; (80034e8 <HAL_RCC_OscConfig+0x288>)
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800328a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800328c:	4b96      	ldr	r3, [pc, #600]	; (80034e8 <HAL_RCC_OscConfig+0x288>)
 800328e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003290:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003294:	2b10      	cmp	r3, #16
 8003296:	d007      	beq.n	80032a8 <HAL_RCC_OscConfig+0x48>
 8003298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800329a:	2b18      	cmp	r3, #24
 800329c:	d110      	bne.n	80032c0 <HAL_RCC_OscConfig+0x60>
 800329e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a0:	f003 0303 	and.w	r3, r3, #3
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d10b      	bne.n	80032c0 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a8:	4b8f      	ldr	r3, [pc, #572]	; (80034e8 <HAL_RCC_OscConfig+0x288>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d06c      	beq.n	800338e <HAL_RCC_OscConfig+0x12e>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d168      	bne.n	800338e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e3f6      	b.n	8003aae <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032c8:	d106      	bne.n	80032d8 <HAL_RCC_OscConfig+0x78>
 80032ca:	4b87      	ldr	r3, [pc, #540]	; (80034e8 <HAL_RCC_OscConfig+0x288>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a86      	ldr	r2, [pc, #536]	; (80034e8 <HAL_RCC_OscConfig+0x288>)
 80032d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032d4:	6013      	str	r3, [r2, #0]
 80032d6:	e02e      	b.n	8003336 <HAL_RCC_OscConfig+0xd6>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d10c      	bne.n	80032fa <HAL_RCC_OscConfig+0x9a>
 80032e0:	4b81      	ldr	r3, [pc, #516]	; (80034e8 <HAL_RCC_OscConfig+0x288>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a80      	ldr	r2, [pc, #512]	; (80034e8 <HAL_RCC_OscConfig+0x288>)
 80032e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ea:	6013      	str	r3, [r2, #0]
 80032ec:	4b7e      	ldr	r3, [pc, #504]	; (80034e8 <HAL_RCC_OscConfig+0x288>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a7d      	ldr	r2, [pc, #500]	; (80034e8 <HAL_RCC_OscConfig+0x288>)
 80032f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032f6:	6013      	str	r3, [r2, #0]
 80032f8:	e01d      	b.n	8003336 <HAL_RCC_OscConfig+0xd6>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003302:	d10c      	bne.n	800331e <HAL_RCC_OscConfig+0xbe>
 8003304:	4b78      	ldr	r3, [pc, #480]	; (80034e8 <HAL_RCC_OscConfig+0x288>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a77      	ldr	r2, [pc, #476]	; (80034e8 <HAL_RCC_OscConfig+0x288>)
 800330a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800330e:	6013      	str	r3, [r2, #0]
 8003310:	4b75      	ldr	r3, [pc, #468]	; (80034e8 <HAL_RCC_OscConfig+0x288>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a74      	ldr	r2, [pc, #464]	; (80034e8 <HAL_RCC_OscConfig+0x288>)
 8003316:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800331a:	6013      	str	r3, [r2, #0]
 800331c:	e00b      	b.n	8003336 <HAL_RCC_OscConfig+0xd6>
 800331e:	4b72      	ldr	r3, [pc, #456]	; (80034e8 <HAL_RCC_OscConfig+0x288>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a71      	ldr	r2, [pc, #452]	; (80034e8 <HAL_RCC_OscConfig+0x288>)
 8003324:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003328:	6013      	str	r3, [r2, #0]
 800332a:	4b6f      	ldr	r3, [pc, #444]	; (80034e8 <HAL_RCC_OscConfig+0x288>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a6e      	ldr	r2, [pc, #440]	; (80034e8 <HAL_RCC_OscConfig+0x288>)
 8003330:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003334:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d013      	beq.n	8003366 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800333e:	f7fe f8fd 	bl	800153c <HAL_GetTick>
 8003342:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003344:	e008      	b.n	8003358 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003346:	f7fe f8f9 	bl	800153c <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b64      	cmp	r3, #100	; 0x64
 8003352:	d901      	bls.n	8003358 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e3aa      	b.n	8003aae <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003358:	4b63      	ldr	r3, [pc, #396]	; (80034e8 <HAL_RCC_OscConfig+0x288>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d0f0      	beq.n	8003346 <HAL_RCC_OscConfig+0xe6>
 8003364:	e014      	b.n	8003390 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003366:	f7fe f8e9 	bl	800153c <HAL_GetTick>
 800336a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800336c:	e008      	b.n	8003380 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800336e:	f7fe f8e5 	bl	800153c <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b64      	cmp	r3, #100	; 0x64
 800337a:	d901      	bls.n	8003380 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e396      	b.n	8003aae <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003380:	4b59      	ldr	r3, [pc, #356]	; (80034e8 <HAL_RCC_OscConfig+0x288>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1f0      	bne.n	800336e <HAL_RCC_OscConfig+0x10e>
 800338c:	e000      	b.n	8003390 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800338e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	f000 80cb 	beq.w	8003534 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800339e:	4b52      	ldr	r3, [pc, #328]	; (80034e8 <HAL_RCC_OscConfig+0x288>)
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033a6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80033a8:	4b4f      	ldr	r3, [pc, #316]	; (80034e8 <HAL_RCC_OscConfig+0x288>)
 80033aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ac:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80033ae:	6a3b      	ldr	r3, [r7, #32]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d007      	beq.n	80033c4 <HAL_RCC_OscConfig+0x164>
 80033b4:	6a3b      	ldr	r3, [r7, #32]
 80033b6:	2b18      	cmp	r3, #24
 80033b8:	d156      	bne.n	8003468 <HAL_RCC_OscConfig+0x208>
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	f003 0303 	and.w	r3, r3, #3
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d151      	bne.n	8003468 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033c4:	4b48      	ldr	r3, [pc, #288]	; (80034e8 <HAL_RCC_OscConfig+0x288>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0304 	and.w	r3, r3, #4
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d005      	beq.n	80033dc <HAL_RCC_OscConfig+0x17c>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d101      	bne.n	80033dc <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e368      	b.n	8003aae <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80033dc:	4b42      	ldr	r3, [pc, #264]	; (80034e8 <HAL_RCC_OscConfig+0x288>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f023 0219 	bic.w	r2, r3, #25
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	493f      	ldr	r1, [pc, #252]	; (80034e8 <HAL_RCC_OscConfig+0x288>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80033ee:	f7fe f8a5 	bl	800153c <HAL_GetTick>
 80033f2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033f4:	e008      	b.n	8003408 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033f6:	f7fe f8a1 	bl	800153c <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d901      	bls.n	8003408 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e352      	b.n	8003aae <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003408:	4b37      	ldr	r3, [pc, #220]	; (80034e8 <HAL_RCC_OscConfig+0x288>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	2b00      	cmp	r3, #0
 8003412:	d0f0      	beq.n	80033f6 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003414:	f7fe f8c2 	bl	800159c <HAL_GetREVID>
 8003418:	4603      	mov	r3, r0
 800341a:	f241 0203 	movw	r2, #4099	; 0x1003
 800341e:	4293      	cmp	r3, r2
 8003420:	d817      	bhi.n	8003452 <HAL_RCC_OscConfig+0x1f2>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	2b40      	cmp	r3, #64	; 0x40
 8003428:	d108      	bne.n	800343c <HAL_RCC_OscConfig+0x1dc>
 800342a:	4b2f      	ldr	r3, [pc, #188]	; (80034e8 <HAL_RCC_OscConfig+0x288>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003432:	4a2d      	ldr	r2, [pc, #180]	; (80034e8 <HAL_RCC_OscConfig+0x288>)
 8003434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003438:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800343a:	e07b      	b.n	8003534 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800343c:	4b2a      	ldr	r3, [pc, #168]	; (80034e8 <HAL_RCC_OscConfig+0x288>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	031b      	lsls	r3, r3, #12
 800344a:	4927      	ldr	r1, [pc, #156]	; (80034e8 <HAL_RCC_OscConfig+0x288>)
 800344c:	4313      	orrs	r3, r2
 800344e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003450:	e070      	b.n	8003534 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003452:	4b25      	ldr	r3, [pc, #148]	; (80034e8 <HAL_RCC_OscConfig+0x288>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	061b      	lsls	r3, r3, #24
 8003460:	4921      	ldr	r1, [pc, #132]	; (80034e8 <HAL_RCC_OscConfig+0x288>)
 8003462:	4313      	orrs	r3, r2
 8003464:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003466:	e065      	b.n	8003534 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d048      	beq.n	8003502 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003470:	4b1d      	ldr	r3, [pc, #116]	; (80034e8 <HAL_RCC_OscConfig+0x288>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f023 0219 	bic.w	r2, r3, #25
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	491a      	ldr	r1, [pc, #104]	; (80034e8 <HAL_RCC_OscConfig+0x288>)
 800347e:	4313      	orrs	r3, r2
 8003480:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003482:	f7fe f85b 	bl	800153c <HAL_GetTick>
 8003486:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003488:	e008      	b.n	800349c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800348a:	f7fe f857 	bl	800153c <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b02      	cmp	r3, #2
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e308      	b.n	8003aae <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800349c:	4b12      	ldr	r3, [pc, #72]	; (80034e8 <HAL_RCC_OscConfig+0x288>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0304 	and.w	r3, r3, #4
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d0f0      	beq.n	800348a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034a8:	f7fe f878 	bl	800159c <HAL_GetREVID>
 80034ac:	4603      	mov	r3, r0
 80034ae:	f241 0203 	movw	r2, #4099	; 0x1003
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d81a      	bhi.n	80034ec <HAL_RCC_OscConfig+0x28c>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	2b40      	cmp	r3, #64	; 0x40
 80034bc:	d108      	bne.n	80034d0 <HAL_RCC_OscConfig+0x270>
 80034be:	4b0a      	ldr	r3, [pc, #40]	; (80034e8 <HAL_RCC_OscConfig+0x288>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80034c6:	4a08      	ldr	r2, [pc, #32]	; (80034e8 <HAL_RCC_OscConfig+0x288>)
 80034c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034cc:	6053      	str	r3, [r2, #4]
 80034ce:	e031      	b.n	8003534 <HAL_RCC_OscConfig+0x2d4>
 80034d0:	4b05      	ldr	r3, [pc, #20]	; (80034e8 <HAL_RCC_OscConfig+0x288>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	031b      	lsls	r3, r3, #12
 80034de:	4902      	ldr	r1, [pc, #8]	; (80034e8 <HAL_RCC_OscConfig+0x288>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	604b      	str	r3, [r1, #4]
 80034e4:	e026      	b.n	8003534 <HAL_RCC_OscConfig+0x2d4>
 80034e6:	bf00      	nop
 80034e8:	58024400 	.word	0x58024400
 80034ec:	4b9a      	ldr	r3, [pc, #616]	; (8003758 <HAL_RCC_OscConfig+0x4f8>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	061b      	lsls	r3, r3, #24
 80034fa:	4997      	ldr	r1, [pc, #604]	; (8003758 <HAL_RCC_OscConfig+0x4f8>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	604b      	str	r3, [r1, #4]
 8003500:	e018      	b.n	8003534 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003502:	4b95      	ldr	r3, [pc, #596]	; (8003758 <HAL_RCC_OscConfig+0x4f8>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a94      	ldr	r2, [pc, #592]	; (8003758 <HAL_RCC_OscConfig+0x4f8>)
 8003508:	f023 0301 	bic.w	r3, r3, #1
 800350c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350e:	f7fe f815 	bl	800153c <HAL_GetTick>
 8003512:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003514:	e008      	b.n	8003528 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003516:	f7fe f811 	bl	800153c <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e2c2      	b.n	8003aae <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003528:	4b8b      	ldr	r3, [pc, #556]	; (8003758 <HAL_RCC_OscConfig+0x4f8>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0304 	and.w	r3, r3, #4
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1f0      	bne.n	8003516 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0310 	and.w	r3, r3, #16
 800353c:	2b00      	cmp	r3, #0
 800353e:	f000 80a9 	beq.w	8003694 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003542:	4b85      	ldr	r3, [pc, #532]	; (8003758 <HAL_RCC_OscConfig+0x4f8>)
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800354a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800354c:	4b82      	ldr	r3, [pc, #520]	; (8003758 <HAL_RCC_OscConfig+0x4f8>)
 800354e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003550:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	2b08      	cmp	r3, #8
 8003556:	d007      	beq.n	8003568 <HAL_RCC_OscConfig+0x308>
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	2b18      	cmp	r3, #24
 800355c:	d13a      	bne.n	80035d4 <HAL_RCC_OscConfig+0x374>
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	f003 0303 	and.w	r3, r3, #3
 8003564:	2b01      	cmp	r3, #1
 8003566:	d135      	bne.n	80035d4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003568:	4b7b      	ldr	r3, [pc, #492]	; (8003758 <HAL_RCC_OscConfig+0x4f8>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003570:	2b00      	cmp	r3, #0
 8003572:	d005      	beq.n	8003580 <HAL_RCC_OscConfig+0x320>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	69db      	ldr	r3, [r3, #28]
 8003578:	2b80      	cmp	r3, #128	; 0x80
 800357a:	d001      	beq.n	8003580 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e296      	b.n	8003aae <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003580:	f7fe f80c 	bl	800159c <HAL_GetREVID>
 8003584:	4603      	mov	r3, r0
 8003586:	f241 0203 	movw	r2, #4099	; 0x1003
 800358a:	4293      	cmp	r3, r2
 800358c:	d817      	bhi.n	80035be <HAL_RCC_OscConfig+0x35e>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	2b20      	cmp	r3, #32
 8003594:	d108      	bne.n	80035a8 <HAL_RCC_OscConfig+0x348>
 8003596:	4b70      	ldr	r3, [pc, #448]	; (8003758 <HAL_RCC_OscConfig+0x4f8>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800359e:	4a6e      	ldr	r2, [pc, #440]	; (8003758 <HAL_RCC_OscConfig+0x4f8>)
 80035a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80035a4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80035a6:	e075      	b.n	8003694 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80035a8:	4b6b      	ldr	r3, [pc, #428]	; (8003758 <HAL_RCC_OscConfig+0x4f8>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	069b      	lsls	r3, r3, #26
 80035b6:	4968      	ldr	r1, [pc, #416]	; (8003758 <HAL_RCC_OscConfig+0x4f8>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80035bc:	e06a      	b.n	8003694 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80035be:	4b66      	ldr	r3, [pc, #408]	; (8003758 <HAL_RCC_OscConfig+0x4f8>)
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	061b      	lsls	r3, r3, #24
 80035cc:	4962      	ldr	r1, [pc, #392]	; (8003758 <HAL_RCC_OscConfig+0x4f8>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80035d2:	e05f      	b.n	8003694 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d042      	beq.n	8003662 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80035dc:	4b5e      	ldr	r3, [pc, #376]	; (8003758 <HAL_RCC_OscConfig+0x4f8>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a5d      	ldr	r2, [pc, #372]	; (8003758 <HAL_RCC_OscConfig+0x4f8>)
 80035e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e8:	f7fd ffa8 	bl	800153c <HAL_GetTick>
 80035ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80035f0:	f7fd ffa4 	bl	800153c <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e255      	b.n	8003aae <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003602:	4b55      	ldr	r3, [pc, #340]	; (8003758 <HAL_RCC_OscConfig+0x4f8>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360a:	2b00      	cmp	r3, #0
 800360c:	d0f0      	beq.n	80035f0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800360e:	f7fd ffc5 	bl	800159c <HAL_GetREVID>
 8003612:	4603      	mov	r3, r0
 8003614:	f241 0203 	movw	r2, #4099	; 0x1003
 8003618:	4293      	cmp	r3, r2
 800361a:	d817      	bhi.n	800364c <HAL_RCC_OscConfig+0x3ec>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	2b20      	cmp	r3, #32
 8003622:	d108      	bne.n	8003636 <HAL_RCC_OscConfig+0x3d6>
 8003624:	4b4c      	ldr	r3, [pc, #304]	; (8003758 <HAL_RCC_OscConfig+0x4f8>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800362c:	4a4a      	ldr	r2, [pc, #296]	; (8003758 <HAL_RCC_OscConfig+0x4f8>)
 800362e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003632:	6053      	str	r3, [r2, #4]
 8003634:	e02e      	b.n	8003694 <HAL_RCC_OscConfig+0x434>
 8003636:	4b48      	ldr	r3, [pc, #288]	; (8003758 <HAL_RCC_OscConfig+0x4f8>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	069b      	lsls	r3, r3, #26
 8003644:	4944      	ldr	r1, [pc, #272]	; (8003758 <HAL_RCC_OscConfig+0x4f8>)
 8003646:	4313      	orrs	r3, r2
 8003648:	604b      	str	r3, [r1, #4]
 800364a:	e023      	b.n	8003694 <HAL_RCC_OscConfig+0x434>
 800364c:	4b42      	ldr	r3, [pc, #264]	; (8003758 <HAL_RCC_OscConfig+0x4f8>)
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a1b      	ldr	r3, [r3, #32]
 8003658:	061b      	lsls	r3, r3, #24
 800365a:	493f      	ldr	r1, [pc, #252]	; (8003758 <HAL_RCC_OscConfig+0x4f8>)
 800365c:	4313      	orrs	r3, r2
 800365e:	60cb      	str	r3, [r1, #12]
 8003660:	e018      	b.n	8003694 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003662:	4b3d      	ldr	r3, [pc, #244]	; (8003758 <HAL_RCC_OscConfig+0x4f8>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a3c      	ldr	r2, [pc, #240]	; (8003758 <HAL_RCC_OscConfig+0x4f8>)
 8003668:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800366c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366e:	f7fd ff65 	bl	800153c <HAL_GetTick>
 8003672:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003674:	e008      	b.n	8003688 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003676:	f7fd ff61 	bl	800153c <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d901      	bls.n	8003688 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e212      	b.n	8003aae <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003688:	4b33      	ldr	r3, [pc, #204]	; (8003758 <HAL_RCC_OscConfig+0x4f8>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1f0      	bne.n	8003676 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0308 	and.w	r3, r3, #8
 800369c:	2b00      	cmp	r3, #0
 800369e:	d036      	beq.n	800370e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d019      	beq.n	80036dc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036a8:	4b2b      	ldr	r3, [pc, #172]	; (8003758 <HAL_RCC_OscConfig+0x4f8>)
 80036aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ac:	4a2a      	ldr	r2, [pc, #168]	; (8003758 <HAL_RCC_OscConfig+0x4f8>)
 80036ae:	f043 0301 	orr.w	r3, r3, #1
 80036b2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b4:	f7fd ff42 	bl	800153c <HAL_GetTick>
 80036b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80036ba:	e008      	b.n	80036ce <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036bc:	f7fd ff3e 	bl	800153c <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e1ef      	b.n	8003aae <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80036ce:	4b22      	ldr	r3, [pc, #136]	; (8003758 <HAL_RCC_OscConfig+0x4f8>)
 80036d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d0f0      	beq.n	80036bc <HAL_RCC_OscConfig+0x45c>
 80036da:	e018      	b.n	800370e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036dc:	4b1e      	ldr	r3, [pc, #120]	; (8003758 <HAL_RCC_OscConfig+0x4f8>)
 80036de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036e0:	4a1d      	ldr	r2, [pc, #116]	; (8003758 <HAL_RCC_OscConfig+0x4f8>)
 80036e2:	f023 0301 	bic.w	r3, r3, #1
 80036e6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e8:	f7fd ff28 	bl	800153c <HAL_GetTick>
 80036ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80036ee:	e008      	b.n	8003702 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036f0:	f7fd ff24 	bl	800153c <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e1d5      	b.n	8003aae <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003702:	4b15      	ldr	r3, [pc, #84]	; (8003758 <HAL_RCC_OscConfig+0x4f8>)
 8003704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1f0      	bne.n	80036f0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0320 	and.w	r3, r3, #32
 8003716:	2b00      	cmp	r3, #0
 8003718:	d039      	beq.n	800378e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d01c      	beq.n	800375c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003722:	4b0d      	ldr	r3, [pc, #52]	; (8003758 <HAL_RCC_OscConfig+0x4f8>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a0c      	ldr	r2, [pc, #48]	; (8003758 <HAL_RCC_OscConfig+0x4f8>)
 8003728:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800372c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800372e:	f7fd ff05 	bl	800153c <HAL_GetTick>
 8003732:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003734:	e008      	b.n	8003748 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003736:	f7fd ff01 	bl	800153c <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d901      	bls.n	8003748 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e1b2      	b.n	8003aae <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003748:	4b03      	ldr	r3, [pc, #12]	; (8003758 <HAL_RCC_OscConfig+0x4f8>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d0f0      	beq.n	8003736 <HAL_RCC_OscConfig+0x4d6>
 8003754:	e01b      	b.n	800378e <HAL_RCC_OscConfig+0x52e>
 8003756:	bf00      	nop
 8003758:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800375c:	4b9b      	ldr	r3, [pc, #620]	; (80039cc <HAL_RCC_OscConfig+0x76c>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a9a      	ldr	r2, [pc, #616]	; (80039cc <HAL_RCC_OscConfig+0x76c>)
 8003762:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003766:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003768:	f7fd fee8 	bl	800153c <HAL_GetTick>
 800376c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800376e:	e008      	b.n	8003782 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003770:	f7fd fee4 	bl	800153c <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e195      	b.n	8003aae <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003782:	4b92      	ldr	r3, [pc, #584]	; (80039cc <HAL_RCC_OscConfig+0x76c>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1f0      	bne.n	8003770 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0304 	and.w	r3, r3, #4
 8003796:	2b00      	cmp	r3, #0
 8003798:	f000 8081 	beq.w	800389e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800379c:	4b8c      	ldr	r3, [pc, #560]	; (80039d0 <HAL_RCC_OscConfig+0x770>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a8b      	ldr	r2, [pc, #556]	; (80039d0 <HAL_RCC_OscConfig+0x770>)
 80037a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037a8:	f7fd fec8 	bl	800153c <HAL_GetTick>
 80037ac:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80037b0:	f7fd fec4 	bl	800153c <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b64      	cmp	r3, #100	; 0x64
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e175      	b.n	8003aae <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037c2:	4b83      	ldr	r3, [pc, #524]	; (80039d0 <HAL_RCC_OscConfig+0x770>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d0f0      	beq.n	80037b0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d106      	bne.n	80037e4 <HAL_RCC_OscConfig+0x584>
 80037d6:	4b7d      	ldr	r3, [pc, #500]	; (80039cc <HAL_RCC_OscConfig+0x76c>)
 80037d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037da:	4a7c      	ldr	r2, [pc, #496]	; (80039cc <HAL_RCC_OscConfig+0x76c>)
 80037dc:	f043 0301 	orr.w	r3, r3, #1
 80037e0:	6713      	str	r3, [r2, #112]	; 0x70
 80037e2:	e02d      	b.n	8003840 <HAL_RCC_OscConfig+0x5e0>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d10c      	bne.n	8003806 <HAL_RCC_OscConfig+0x5a6>
 80037ec:	4b77      	ldr	r3, [pc, #476]	; (80039cc <HAL_RCC_OscConfig+0x76c>)
 80037ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f0:	4a76      	ldr	r2, [pc, #472]	; (80039cc <HAL_RCC_OscConfig+0x76c>)
 80037f2:	f023 0301 	bic.w	r3, r3, #1
 80037f6:	6713      	str	r3, [r2, #112]	; 0x70
 80037f8:	4b74      	ldr	r3, [pc, #464]	; (80039cc <HAL_RCC_OscConfig+0x76c>)
 80037fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fc:	4a73      	ldr	r2, [pc, #460]	; (80039cc <HAL_RCC_OscConfig+0x76c>)
 80037fe:	f023 0304 	bic.w	r3, r3, #4
 8003802:	6713      	str	r3, [r2, #112]	; 0x70
 8003804:	e01c      	b.n	8003840 <HAL_RCC_OscConfig+0x5e0>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	2b05      	cmp	r3, #5
 800380c:	d10c      	bne.n	8003828 <HAL_RCC_OscConfig+0x5c8>
 800380e:	4b6f      	ldr	r3, [pc, #444]	; (80039cc <HAL_RCC_OscConfig+0x76c>)
 8003810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003812:	4a6e      	ldr	r2, [pc, #440]	; (80039cc <HAL_RCC_OscConfig+0x76c>)
 8003814:	f043 0304 	orr.w	r3, r3, #4
 8003818:	6713      	str	r3, [r2, #112]	; 0x70
 800381a:	4b6c      	ldr	r3, [pc, #432]	; (80039cc <HAL_RCC_OscConfig+0x76c>)
 800381c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381e:	4a6b      	ldr	r2, [pc, #428]	; (80039cc <HAL_RCC_OscConfig+0x76c>)
 8003820:	f043 0301 	orr.w	r3, r3, #1
 8003824:	6713      	str	r3, [r2, #112]	; 0x70
 8003826:	e00b      	b.n	8003840 <HAL_RCC_OscConfig+0x5e0>
 8003828:	4b68      	ldr	r3, [pc, #416]	; (80039cc <HAL_RCC_OscConfig+0x76c>)
 800382a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382c:	4a67      	ldr	r2, [pc, #412]	; (80039cc <HAL_RCC_OscConfig+0x76c>)
 800382e:	f023 0301 	bic.w	r3, r3, #1
 8003832:	6713      	str	r3, [r2, #112]	; 0x70
 8003834:	4b65      	ldr	r3, [pc, #404]	; (80039cc <HAL_RCC_OscConfig+0x76c>)
 8003836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003838:	4a64      	ldr	r2, [pc, #400]	; (80039cc <HAL_RCC_OscConfig+0x76c>)
 800383a:	f023 0304 	bic.w	r3, r3, #4
 800383e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d015      	beq.n	8003874 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003848:	f7fd fe78 	bl	800153c <HAL_GetTick>
 800384c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800384e:	e00a      	b.n	8003866 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003850:	f7fd fe74 	bl	800153c <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	f241 3288 	movw	r2, #5000	; 0x1388
 800385e:	4293      	cmp	r3, r2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e123      	b.n	8003aae <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003866:	4b59      	ldr	r3, [pc, #356]	; (80039cc <HAL_RCC_OscConfig+0x76c>)
 8003868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d0ee      	beq.n	8003850 <HAL_RCC_OscConfig+0x5f0>
 8003872:	e014      	b.n	800389e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003874:	f7fd fe62 	bl	800153c <HAL_GetTick>
 8003878:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800387a:	e00a      	b.n	8003892 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800387c:	f7fd fe5e 	bl	800153c <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	f241 3288 	movw	r2, #5000	; 0x1388
 800388a:	4293      	cmp	r3, r2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e10d      	b.n	8003aae <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003892:	4b4e      	ldr	r3, [pc, #312]	; (80039cc <HAL_RCC_OscConfig+0x76c>)
 8003894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1ee      	bne.n	800387c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f000 8102 	beq.w	8003aac <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80038a8:	4b48      	ldr	r3, [pc, #288]	; (80039cc <HAL_RCC_OscConfig+0x76c>)
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038b0:	2b18      	cmp	r3, #24
 80038b2:	f000 80bd 	beq.w	8003a30 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	f040 809e 	bne.w	80039fc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038c0:	4b42      	ldr	r3, [pc, #264]	; (80039cc <HAL_RCC_OscConfig+0x76c>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a41      	ldr	r2, [pc, #260]	; (80039cc <HAL_RCC_OscConfig+0x76c>)
 80038c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038cc:	f7fd fe36 	bl	800153c <HAL_GetTick>
 80038d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80038d2:	e008      	b.n	80038e6 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038d4:	f7fd fe32 	bl	800153c <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e0e3      	b.n	8003aae <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80038e6:	4b39      	ldr	r3, [pc, #228]	; (80039cc <HAL_RCC_OscConfig+0x76c>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1f0      	bne.n	80038d4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038f2:	4b36      	ldr	r3, [pc, #216]	; (80039cc <HAL_RCC_OscConfig+0x76c>)
 80038f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038f6:	4b37      	ldr	r3, [pc, #220]	; (80039d4 <HAL_RCC_OscConfig+0x774>)
 80038f8:	4013      	ands	r3, r2
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003902:	0112      	lsls	r2, r2, #4
 8003904:	430a      	orrs	r2, r1
 8003906:	4931      	ldr	r1, [pc, #196]	; (80039cc <HAL_RCC_OscConfig+0x76c>)
 8003908:	4313      	orrs	r3, r2
 800390a:	628b      	str	r3, [r1, #40]	; 0x28
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003910:	3b01      	subs	r3, #1
 8003912:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800391a:	3b01      	subs	r3, #1
 800391c:	025b      	lsls	r3, r3, #9
 800391e:	b29b      	uxth	r3, r3
 8003920:	431a      	orrs	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003926:	3b01      	subs	r3, #1
 8003928:	041b      	lsls	r3, r3, #16
 800392a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800392e:	431a      	orrs	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003934:	3b01      	subs	r3, #1
 8003936:	061b      	lsls	r3, r3, #24
 8003938:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800393c:	4923      	ldr	r1, [pc, #140]	; (80039cc <HAL_RCC_OscConfig+0x76c>)
 800393e:	4313      	orrs	r3, r2
 8003940:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003942:	4b22      	ldr	r3, [pc, #136]	; (80039cc <HAL_RCC_OscConfig+0x76c>)
 8003944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003946:	4a21      	ldr	r2, [pc, #132]	; (80039cc <HAL_RCC_OscConfig+0x76c>)
 8003948:	f023 0301 	bic.w	r3, r3, #1
 800394c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800394e:	4b1f      	ldr	r3, [pc, #124]	; (80039cc <HAL_RCC_OscConfig+0x76c>)
 8003950:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003952:	4b21      	ldr	r3, [pc, #132]	; (80039d8 <HAL_RCC_OscConfig+0x778>)
 8003954:	4013      	ands	r3, r2
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800395a:	00d2      	lsls	r2, r2, #3
 800395c:	491b      	ldr	r1, [pc, #108]	; (80039cc <HAL_RCC_OscConfig+0x76c>)
 800395e:	4313      	orrs	r3, r2
 8003960:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003962:	4b1a      	ldr	r3, [pc, #104]	; (80039cc <HAL_RCC_OscConfig+0x76c>)
 8003964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003966:	f023 020c 	bic.w	r2, r3, #12
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	4917      	ldr	r1, [pc, #92]	; (80039cc <HAL_RCC_OscConfig+0x76c>)
 8003970:	4313      	orrs	r3, r2
 8003972:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003974:	4b15      	ldr	r3, [pc, #84]	; (80039cc <HAL_RCC_OscConfig+0x76c>)
 8003976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003978:	f023 0202 	bic.w	r2, r3, #2
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003980:	4912      	ldr	r1, [pc, #72]	; (80039cc <HAL_RCC_OscConfig+0x76c>)
 8003982:	4313      	orrs	r3, r2
 8003984:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003986:	4b11      	ldr	r3, [pc, #68]	; (80039cc <HAL_RCC_OscConfig+0x76c>)
 8003988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398a:	4a10      	ldr	r2, [pc, #64]	; (80039cc <HAL_RCC_OscConfig+0x76c>)
 800398c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003990:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003992:	4b0e      	ldr	r3, [pc, #56]	; (80039cc <HAL_RCC_OscConfig+0x76c>)
 8003994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003996:	4a0d      	ldr	r2, [pc, #52]	; (80039cc <HAL_RCC_OscConfig+0x76c>)
 8003998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800399c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800399e:	4b0b      	ldr	r3, [pc, #44]	; (80039cc <HAL_RCC_OscConfig+0x76c>)
 80039a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a2:	4a0a      	ldr	r2, [pc, #40]	; (80039cc <HAL_RCC_OscConfig+0x76c>)
 80039a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80039aa:	4b08      	ldr	r3, [pc, #32]	; (80039cc <HAL_RCC_OscConfig+0x76c>)
 80039ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ae:	4a07      	ldr	r2, [pc, #28]	; (80039cc <HAL_RCC_OscConfig+0x76c>)
 80039b0:	f043 0301 	orr.w	r3, r3, #1
 80039b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039b6:	4b05      	ldr	r3, [pc, #20]	; (80039cc <HAL_RCC_OscConfig+0x76c>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a04      	ldr	r2, [pc, #16]	; (80039cc <HAL_RCC_OscConfig+0x76c>)
 80039bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c2:	f7fd fdbb 	bl	800153c <HAL_GetTick>
 80039c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80039c8:	e011      	b.n	80039ee <HAL_RCC_OscConfig+0x78e>
 80039ca:	bf00      	nop
 80039cc:	58024400 	.word	0x58024400
 80039d0:	58024800 	.word	0x58024800
 80039d4:	fffffc0c 	.word	0xfffffc0c
 80039d8:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039dc:	f7fd fdae 	bl	800153c <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e05f      	b.n	8003aae <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80039ee:	4b32      	ldr	r3, [pc, #200]	; (8003ab8 <HAL_RCC_OscConfig+0x858>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d0f0      	beq.n	80039dc <HAL_RCC_OscConfig+0x77c>
 80039fa:	e057      	b.n	8003aac <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039fc:	4b2e      	ldr	r3, [pc, #184]	; (8003ab8 <HAL_RCC_OscConfig+0x858>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a2d      	ldr	r2, [pc, #180]	; (8003ab8 <HAL_RCC_OscConfig+0x858>)
 8003a02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a08:	f7fd fd98 	bl	800153c <HAL_GetTick>
 8003a0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a10:	f7fd fd94 	bl	800153c <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e045      	b.n	8003aae <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a22:	4b25      	ldr	r3, [pc, #148]	; (8003ab8 <HAL_RCC_OscConfig+0x858>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1f0      	bne.n	8003a10 <HAL_RCC_OscConfig+0x7b0>
 8003a2e:	e03d      	b.n	8003aac <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003a30:	4b21      	ldr	r3, [pc, #132]	; (8003ab8 <HAL_RCC_OscConfig+0x858>)
 8003a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a34:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003a36:	4b20      	ldr	r3, [pc, #128]	; (8003ab8 <HAL_RCC_OscConfig+0x858>)
 8003a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d031      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	f003 0203 	and.w	r2, r3, #3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d12a      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	091b      	lsrs	r3, r3, #4
 8003a56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d122      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d11a      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	0a5b      	lsrs	r3, r3, #9
 8003a76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a7e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d111      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	0c1b      	lsrs	r3, r3, #16
 8003a88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a90:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d108      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	0e1b      	lsrs	r3, r3, #24
 8003a9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d001      	beq.n	8003aac <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e000      	b.n	8003aae <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3730      	adds	r7, #48	; 0x30
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	58024400 	.word	0x58024400

08003abc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d101      	bne.n	8003ad0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e19c      	b.n	8003e0a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ad0:	4b8a      	ldr	r3, [pc, #552]	; (8003cfc <HAL_RCC_ClockConfig+0x240>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 030f 	and.w	r3, r3, #15
 8003ad8:	683a      	ldr	r2, [r7, #0]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d910      	bls.n	8003b00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ade:	4b87      	ldr	r3, [pc, #540]	; (8003cfc <HAL_RCC_ClockConfig+0x240>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f023 020f 	bic.w	r2, r3, #15
 8003ae6:	4985      	ldr	r1, [pc, #532]	; (8003cfc <HAL_RCC_ClockConfig+0x240>)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aee:	4b83      	ldr	r3, [pc, #524]	; (8003cfc <HAL_RCC_ClockConfig+0x240>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 030f 	and.w	r3, r3, #15
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d001      	beq.n	8003b00 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e184      	b.n	8003e0a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d010      	beq.n	8003b2e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	691a      	ldr	r2, [r3, #16]
 8003b10:	4b7b      	ldr	r3, [pc, #492]	; (8003d00 <HAL_RCC_ClockConfig+0x244>)
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d908      	bls.n	8003b2e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003b1c:	4b78      	ldr	r3, [pc, #480]	; (8003d00 <HAL_RCC_ClockConfig+0x244>)
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	4975      	ldr	r1, [pc, #468]	; (8003d00 <HAL_RCC_ClockConfig+0x244>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0308 	and.w	r3, r3, #8
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d010      	beq.n	8003b5c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	695a      	ldr	r2, [r3, #20]
 8003b3e:	4b70      	ldr	r3, [pc, #448]	; (8003d00 <HAL_RCC_ClockConfig+0x244>)
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d908      	bls.n	8003b5c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003b4a:	4b6d      	ldr	r3, [pc, #436]	; (8003d00 <HAL_RCC_ClockConfig+0x244>)
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	496a      	ldr	r1, [pc, #424]	; (8003d00 <HAL_RCC_ClockConfig+0x244>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0310 	and.w	r3, r3, #16
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d010      	beq.n	8003b8a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	699a      	ldr	r2, [r3, #24]
 8003b6c:	4b64      	ldr	r3, [pc, #400]	; (8003d00 <HAL_RCC_ClockConfig+0x244>)
 8003b6e:	69db      	ldr	r3, [r3, #28]
 8003b70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d908      	bls.n	8003b8a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003b78:	4b61      	ldr	r3, [pc, #388]	; (8003d00 <HAL_RCC_ClockConfig+0x244>)
 8003b7a:	69db      	ldr	r3, [r3, #28]
 8003b7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	495e      	ldr	r1, [pc, #376]	; (8003d00 <HAL_RCC_ClockConfig+0x244>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0320 	and.w	r3, r3, #32
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d010      	beq.n	8003bb8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	69da      	ldr	r2, [r3, #28]
 8003b9a:	4b59      	ldr	r3, [pc, #356]	; (8003d00 <HAL_RCC_ClockConfig+0x244>)
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d908      	bls.n	8003bb8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003ba6:	4b56      	ldr	r3, [pc, #344]	; (8003d00 <HAL_RCC_ClockConfig+0x244>)
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	4953      	ldr	r1, [pc, #332]	; (8003d00 <HAL_RCC_ClockConfig+0x244>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d010      	beq.n	8003be6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	68da      	ldr	r2, [r3, #12]
 8003bc8:	4b4d      	ldr	r3, [pc, #308]	; (8003d00 <HAL_RCC_ClockConfig+0x244>)
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	f003 030f 	and.w	r3, r3, #15
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d908      	bls.n	8003be6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bd4:	4b4a      	ldr	r3, [pc, #296]	; (8003d00 <HAL_RCC_ClockConfig+0x244>)
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	f023 020f 	bic.w	r2, r3, #15
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	4947      	ldr	r1, [pc, #284]	; (8003d00 <HAL_RCC_ClockConfig+0x244>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d055      	beq.n	8003c9e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003bf2:	4b43      	ldr	r3, [pc, #268]	; (8003d00 <HAL_RCC_ClockConfig+0x244>)
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	4940      	ldr	r1, [pc, #256]	; (8003d00 <HAL_RCC_ClockConfig+0x244>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d107      	bne.n	8003c1c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c0c:	4b3c      	ldr	r3, [pc, #240]	; (8003d00 <HAL_RCC_ClockConfig+0x244>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d121      	bne.n	8003c5c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e0f6      	b.n	8003e0a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	2b03      	cmp	r3, #3
 8003c22:	d107      	bne.n	8003c34 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c24:	4b36      	ldr	r3, [pc, #216]	; (8003d00 <HAL_RCC_ClockConfig+0x244>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d115      	bne.n	8003c5c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e0ea      	b.n	8003e0a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d107      	bne.n	8003c4c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c3c:	4b30      	ldr	r3, [pc, #192]	; (8003d00 <HAL_RCC_ClockConfig+0x244>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d109      	bne.n	8003c5c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e0de      	b.n	8003e0a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c4c:	4b2c      	ldr	r3, [pc, #176]	; (8003d00 <HAL_RCC_ClockConfig+0x244>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0304 	and.w	r3, r3, #4
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d101      	bne.n	8003c5c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e0d6      	b.n	8003e0a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c5c:	4b28      	ldr	r3, [pc, #160]	; (8003d00 <HAL_RCC_ClockConfig+0x244>)
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	f023 0207 	bic.w	r2, r3, #7
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	4925      	ldr	r1, [pc, #148]	; (8003d00 <HAL_RCC_ClockConfig+0x244>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c6e:	f7fd fc65 	bl	800153c <HAL_GetTick>
 8003c72:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c74:	e00a      	b.n	8003c8c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c76:	f7fd fc61 	bl	800153c <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d901      	bls.n	8003c8c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e0be      	b.n	8003e0a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c8c:	4b1c      	ldr	r3, [pc, #112]	; (8003d00 <HAL_RCC_ClockConfig+0x244>)
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	00db      	lsls	r3, r3, #3
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d1eb      	bne.n	8003c76 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d010      	beq.n	8003ccc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68da      	ldr	r2, [r3, #12]
 8003cae:	4b14      	ldr	r3, [pc, #80]	; (8003d00 <HAL_RCC_ClockConfig+0x244>)
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	f003 030f 	and.w	r3, r3, #15
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d208      	bcs.n	8003ccc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cba:	4b11      	ldr	r3, [pc, #68]	; (8003d00 <HAL_RCC_ClockConfig+0x244>)
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	f023 020f 	bic.w	r2, r3, #15
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	490e      	ldr	r1, [pc, #56]	; (8003d00 <HAL_RCC_ClockConfig+0x244>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ccc:	4b0b      	ldr	r3, [pc, #44]	; (8003cfc <HAL_RCC_ClockConfig+0x240>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 030f 	and.w	r3, r3, #15
 8003cd4:	683a      	ldr	r2, [r7, #0]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d214      	bcs.n	8003d04 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cda:	4b08      	ldr	r3, [pc, #32]	; (8003cfc <HAL_RCC_ClockConfig+0x240>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f023 020f 	bic.w	r2, r3, #15
 8003ce2:	4906      	ldr	r1, [pc, #24]	; (8003cfc <HAL_RCC_ClockConfig+0x240>)
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cea:	4b04      	ldr	r3, [pc, #16]	; (8003cfc <HAL_RCC_ClockConfig+0x240>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 030f 	and.w	r3, r3, #15
 8003cf2:	683a      	ldr	r2, [r7, #0]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d005      	beq.n	8003d04 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e086      	b.n	8003e0a <HAL_RCC_ClockConfig+0x34e>
 8003cfc:	52002000 	.word	0x52002000
 8003d00:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0304 	and.w	r3, r3, #4
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d010      	beq.n	8003d32 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	691a      	ldr	r2, [r3, #16]
 8003d14:	4b3f      	ldr	r3, [pc, #252]	; (8003e14 <HAL_RCC_ClockConfig+0x358>)
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d208      	bcs.n	8003d32 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003d20:	4b3c      	ldr	r3, [pc, #240]	; (8003e14 <HAL_RCC_ClockConfig+0x358>)
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	4939      	ldr	r1, [pc, #228]	; (8003e14 <HAL_RCC_ClockConfig+0x358>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0308 	and.w	r3, r3, #8
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d010      	beq.n	8003d60 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	695a      	ldr	r2, [r3, #20]
 8003d42:	4b34      	ldr	r3, [pc, #208]	; (8003e14 <HAL_RCC_ClockConfig+0x358>)
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d208      	bcs.n	8003d60 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003d4e:	4b31      	ldr	r3, [pc, #196]	; (8003e14 <HAL_RCC_ClockConfig+0x358>)
 8003d50:	69db      	ldr	r3, [r3, #28]
 8003d52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	492e      	ldr	r1, [pc, #184]	; (8003e14 <HAL_RCC_ClockConfig+0x358>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0310 	and.w	r3, r3, #16
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d010      	beq.n	8003d8e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	699a      	ldr	r2, [r3, #24]
 8003d70:	4b28      	ldr	r3, [pc, #160]	; (8003e14 <HAL_RCC_ClockConfig+0x358>)
 8003d72:	69db      	ldr	r3, [r3, #28]
 8003d74:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d208      	bcs.n	8003d8e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003d7c:	4b25      	ldr	r3, [pc, #148]	; (8003e14 <HAL_RCC_ClockConfig+0x358>)
 8003d7e:	69db      	ldr	r3, [r3, #28]
 8003d80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	4922      	ldr	r1, [pc, #136]	; (8003e14 <HAL_RCC_ClockConfig+0x358>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0320 	and.w	r3, r3, #32
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d010      	beq.n	8003dbc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	69da      	ldr	r2, [r3, #28]
 8003d9e:	4b1d      	ldr	r3, [pc, #116]	; (8003e14 <HAL_RCC_ClockConfig+0x358>)
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d208      	bcs.n	8003dbc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003daa:	4b1a      	ldr	r3, [pc, #104]	; (8003e14 <HAL_RCC_ClockConfig+0x358>)
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	69db      	ldr	r3, [r3, #28]
 8003db6:	4917      	ldr	r1, [pc, #92]	; (8003e14 <HAL_RCC_ClockConfig+0x358>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003dbc:	f000 f834 	bl	8003e28 <HAL_RCC_GetSysClockFreq>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	4b14      	ldr	r3, [pc, #80]	; (8003e14 <HAL_RCC_ClockConfig+0x358>)
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	0a1b      	lsrs	r3, r3, #8
 8003dc8:	f003 030f 	and.w	r3, r3, #15
 8003dcc:	4912      	ldr	r1, [pc, #72]	; (8003e18 <HAL_RCC_ClockConfig+0x35c>)
 8003dce:	5ccb      	ldrb	r3, [r1, r3]
 8003dd0:	f003 031f 	and.w	r3, r3, #31
 8003dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8003dd8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003dda:	4b0e      	ldr	r3, [pc, #56]	; (8003e14 <HAL_RCC_ClockConfig+0x358>)
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	f003 030f 	and.w	r3, r3, #15
 8003de2:	4a0d      	ldr	r2, [pc, #52]	; (8003e18 <HAL_RCC_ClockConfig+0x35c>)
 8003de4:	5cd3      	ldrb	r3, [r2, r3]
 8003de6:	f003 031f 	and.w	r3, r3, #31
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	fa22 f303 	lsr.w	r3, r2, r3
 8003df0:	4a0a      	ldr	r2, [pc, #40]	; (8003e1c <HAL_RCC_ClockConfig+0x360>)
 8003df2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003df4:	4a0a      	ldr	r2, [pc, #40]	; (8003e20 <HAL_RCC_ClockConfig+0x364>)
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003dfa:	4b0a      	ldr	r3, [pc, #40]	; (8003e24 <HAL_RCC_ClockConfig+0x368>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7fd fb52 	bl	80014a8 <HAL_InitTick>
 8003e04:	4603      	mov	r3, r0
 8003e06:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3718      	adds	r7, #24
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	58024400 	.word	0x58024400
 8003e18:	08009350 	.word	0x08009350
 8003e1c:	24000004 	.word	0x24000004
 8003e20:	24000000 	.word	0x24000000
 8003e24:	24000008 	.word	0x24000008

08003e28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b089      	sub	sp, #36	; 0x24
 8003e2c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e2e:	4bb3      	ldr	r3, [pc, #716]	; (80040fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e36:	2b18      	cmp	r3, #24
 8003e38:	f200 8155 	bhi.w	80040e6 <HAL_RCC_GetSysClockFreq+0x2be>
 8003e3c:	a201      	add	r2, pc, #4	; (adr r2, 8003e44 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e42:	bf00      	nop
 8003e44:	08003ea9 	.word	0x08003ea9
 8003e48:	080040e7 	.word	0x080040e7
 8003e4c:	080040e7 	.word	0x080040e7
 8003e50:	080040e7 	.word	0x080040e7
 8003e54:	080040e7 	.word	0x080040e7
 8003e58:	080040e7 	.word	0x080040e7
 8003e5c:	080040e7 	.word	0x080040e7
 8003e60:	080040e7 	.word	0x080040e7
 8003e64:	08003ecf 	.word	0x08003ecf
 8003e68:	080040e7 	.word	0x080040e7
 8003e6c:	080040e7 	.word	0x080040e7
 8003e70:	080040e7 	.word	0x080040e7
 8003e74:	080040e7 	.word	0x080040e7
 8003e78:	080040e7 	.word	0x080040e7
 8003e7c:	080040e7 	.word	0x080040e7
 8003e80:	080040e7 	.word	0x080040e7
 8003e84:	08003ed5 	.word	0x08003ed5
 8003e88:	080040e7 	.word	0x080040e7
 8003e8c:	080040e7 	.word	0x080040e7
 8003e90:	080040e7 	.word	0x080040e7
 8003e94:	080040e7 	.word	0x080040e7
 8003e98:	080040e7 	.word	0x080040e7
 8003e9c:	080040e7 	.word	0x080040e7
 8003ea0:	080040e7 	.word	0x080040e7
 8003ea4:	08003edb 	.word	0x08003edb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ea8:	4b94      	ldr	r3, [pc, #592]	; (80040fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0320 	and.w	r3, r3, #32
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d009      	beq.n	8003ec8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003eb4:	4b91      	ldr	r3, [pc, #580]	; (80040fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	08db      	lsrs	r3, r3, #3
 8003eba:	f003 0303 	and.w	r3, r3, #3
 8003ebe:	4a90      	ldr	r2, [pc, #576]	; (8004100 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ec4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003ec6:	e111      	b.n	80040ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003ec8:	4b8d      	ldr	r3, [pc, #564]	; (8004100 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003eca:	61bb      	str	r3, [r7, #24]
    break;
 8003ecc:	e10e      	b.n	80040ec <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003ece:	4b8d      	ldr	r3, [pc, #564]	; (8004104 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003ed0:	61bb      	str	r3, [r7, #24]
    break;
 8003ed2:	e10b      	b.n	80040ec <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003ed4:	4b8c      	ldr	r3, [pc, #560]	; (8004108 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003ed6:	61bb      	str	r3, [r7, #24]
    break;
 8003ed8:	e108      	b.n	80040ec <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003eda:	4b88      	ldr	r3, [pc, #544]	; (80040fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ede:	f003 0303 	and.w	r3, r3, #3
 8003ee2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003ee4:	4b85      	ldr	r3, [pc, #532]	; (80040fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee8:	091b      	lsrs	r3, r3, #4
 8003eea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003eee:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003ef0:	4b82      	ldr	r3, [pc, #520]	; (80040fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003efa:	4b80      	ldr	r3, [pc, #512]	; (80040fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003efe:	08db      	lsrs	r3, r3, #3
 8003f00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	fb02 f303 	mul.w	r3, r2, r3
 8003f0a:	ee07 3a90 	vmov	s15, r3
 8003f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f12:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f000 80e1 	beq.w	80040e0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	f000 8083 	beq.w	800402c <HAL_RCC_GetSysClockFreq+0x204>
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	f200 80a1 	bhi.w	8004070 <HAL_RCC_GetSysClockFreq+0x248>
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d003      	beq.n	8003f3c <HAL_RCC_GetSysClockFreq+0x114>
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d056      	beq.n	8003fe8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003f3a:	e099      	b.n	8004070 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f3c:	4b6f      	ldr	r3, [pc, #444]	; (80040fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0320 	and.w	r3, r3, #32
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d02d      	beq.n	8003fa4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003f48:	4b6c      	ldr	r3, [pc, #432]	; (80040fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	08db      	lsrs	r3, r3, #3
 8003f4e:	f003 0303 	and.w	r3, r3, #3
 8003f52:	4a6b      	ldr	r2, [pc, #428]	; (8004100 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003f54:	fa22 f303 	lsr.w	r3, r2, r3
 8003f58:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	ee07 3a90 	vmov	s15, r3
 8003f60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	ee07 3a90 	vmov	s15, r3
 8003f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f72:	4b62      	ldr	r3, [pc, #392]	; (80040fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f7a:	ee07 3a90 	vmov	s15, r3
 8003f7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f82:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f86:	eddf 5a61 	vldr	s11, [pc, #388]	; 800410c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f9e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003fa2:	e087      	b.n	80040b4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	ee07 3a90 	vmov	s15, r3
 8003faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fae:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004110 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003fb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fb6:	4b51      	ldr	r3, [pc, #324]	; (80040fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fbe:	ee07 3a90 	vmov	s15, r3
 8003fc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fca:	eddf 5a50 	vldr	s11, [pc, #320]	; 800410c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003fce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fe2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003fe6:	e065      	b.n	80040b4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	ee07 3a90 	vmov	s15, r3
 8003fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ff2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004114 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003ff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ffa:	4b40      	ldr	r3, [pc, #256]	; (80040fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004002:	ee07 3a90 	vmov	s15, r3
 8004006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800400a:	ed97 6a02 	vldr	s12, [r7, #8]
 800400e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800410c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004012:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004016:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800401a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800401e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004026:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800402a:	e043      	b.n	80040b4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	ee07 3a90 	vmov	s15, r3
 8004032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004036:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004118 <HAL_RCC_GetSysClockFreq+0x2f0>
 800403a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800403e:	4b2f      	ldr	r3, [pc, #188]	; (80040fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004046:	ee07 3a90 	vmov	s15, r3
 800404a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800404e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004052:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800410c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004056:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800405a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800405e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004062:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800406a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800406e:	e021      	b.n	80040b4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	ee07 3a90 	vmov	s15, r3
 8004076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800407a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004114 <HAL_RCC_GetSysClockFreq+0x2ec>
 800407e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004082:	4b1e      	ldr	r3, [pc, #120]	; (80040fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800408a:	ee07 3a90 	vmov	s15, r3
 800408e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004092:	ed97 6a02 	vldr	s12, [r7, #8]
 8004096:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800410c <HAL_RCC_GetSysClockFreq+0x2e4>
 800409a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800409e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040b2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80040b4:	4b11      	ldr	r3, [pc, #68]	; (80040fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b8:	0a5b      	lsrs	r3, r3, #9
 80040ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040be:	3301      	adds	r3, #1
 80040c0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	ee07 3a90 	vmov	s15, r3
 80040c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80040cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80040d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040d8:	ee17 3a90 	vmov	r3, s15
 80040dc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80040de:	e005      	b.n	80040ec <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80040e0:	2300      	movs	r3, #0
 80040e2:	61bb      	str	r3, [r7, #24]
    break;
 80040e4:	e002      	b.n	80040ec <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80040e6:	4b07      	ldr	r3, [pc, #28]	; (8004104 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80040e8:	61bb      	str	r3, [r7, #24]
    break;
 80040ea:	bf00      	nop
  }

  return sysclockfreq;
 80040ec:	69bb      	ldr	r3, [r7, #24]
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3724      	adds	r7, #36	; 0x24
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	58024400 	.word	0x58024400
 8004100:	03d09000 	.word	0x03d09000
 8004104:	003d0900 	.word	0x003d0900
 8004108:	007a1200 	.word	0x007a1200
 800410c:	46000000 	.word	0x46000000
 8004110:	4c742400 	.word	0x4c742400
 8004114:	4a742400 	.word	0x4a742400
 8004118:	4af42400 	.word	0x4af42400

0800411c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004122:	f7ff fe81 	bl	8003e28 <HAL_RCC_GetSysClockFreq>
 8004126:	4602      	mov	r2, r0
 8004128:	4b10      	ldr	r3, [pc, #64]	; (800416c <HAL_RCC_GetHCLKFreq+0x50>)
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	0a1b      	lsrs	r3, r3, #8
 800412e:	f003 030f 	and.w	r3, r3, #15
 8004132:	490f      	ldr	r1, [pc, #60]	; (8004170 <HAL_RCC_GetHCLKFreq+0x54>)
 8004134:	5ccb      	ldrb	r3, [r1, r3]
 8004136:	f003 031f 	and.w	r3, r3, #31
 800413a:	fa22 f303 	lsr.w	r3, r2, r3
 800413e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004140:	4b0a      	ldr	r3, [pc, #40]	; (800416c <HAL_RCC_GetHCLKFreq+0x50>)
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	f003 030f 	and.w	r3, r3, #15
 8004148:	4a09      	ldr	r2, [pc, #36]	; (8004170 <HAL_RCC_GetHCLKFreq+0x54>)
 800414a:	5cd3      	ldrb	r3, [r2, r3]
 800414c:	f003 031f 	and.w	r3, r3, #31
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	fa22 f303 	lsr.w	r3, r2, r3
 8004156:	4a07      	ldr	r2, [pc, #28]	; (8004174 <HAL_RCC_GetHCLKFreq+0x58>)
 8004158:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800415a:	4a07      	ldr	r2, [pc, #28]	; (8004178 <HAL_RCC_GetHCLKFreq+0x5c>)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004160:	4b04      	ldr	r3, [pc, #16]	; (8004174 <HAL_RCC_GetHCLKFreq+0x58>)
 8004162:	681b      	ldr	r3, [r3, #0]
}
 8004164:	4618      	mov	r0, r3
 8004166:	3708      	adds	r7, #8
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	58024400 	.word	0x58024400
 8004170:	08009350 	.word	0x08009350
 8004174:	24000004 	.word	0x24000004
 8004178:	24000000 	.word	0x24000000

0800417c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004180:	f7ff ffcc 	bl	800411c <HAL_RCC_GetHCLKFreq>
 8004184:	4602      	mov	r2, r0
 8004186:	4b06      	ldr	r3, [pc, #24]	; (80041a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004188:	69db      	ldr	r3, [r3, #28]
 800418a:	091b      	lsrs	r3, r3, #4
 800418c:	f003 0307 	and.w	r3, r3, #7
 8004190:	4904      	ldr	r1, [pc, #16]	; (80041a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004192:	5ccb      	ldrb	r3, [r1, r3]
 8004194:	f003 031f 	and.w	r3, r3, #31
 8004198:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800419c:	4618      	mov	r0, r3
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	58024400 	.word	0x58024400
 80041a4:	08009350 	.word	0x08009350

080041a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80041ac:	f7ff ffb6 	bl	800411c <HAL_RCC_GetHCLKFreq>
 80041b0:	4602      	mov	r2, r0
 80041b2:	4b06      	ldr	r3, [pc, #24]	; (80041cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	0a1b      	lsrs	r3, r3, #8
 80041b8:	f003 0307 	and.w	r3, r3, #7
 80041bc:	4904      	ldr	r1, [pc, #16]	; (80041d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80041be:	5ccb      	ldrb	r3, [r1, r3]
 80041c0:	f003 031f 	and.w	r3, r3, #31
 80041c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	58024400 	.word	0x58024400
 80041d0:	08009350 	.word	0x08009350

080041d4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b086      	sub	sp, #24
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80041dc:	2300      	movs	r3, #0
 80041de:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80041e0:	2300      	movs	r3, #0
 80041e2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d03f      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80041f8:	d02a      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80041fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80041fe:	d824      	bhi.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004200:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004204:	d018      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004206:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800420a:	d81e      	bhi.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800420c:	2b00      	cmp	r3, #0
 800420e:	d003      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004210:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004214:	d007      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004216:	e018      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004218:	4ba3      	ldr	r3, [pc, #652]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800421a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421c:	4aa2      	ldr	r2, [pc, #648]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800421e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004222:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004224:	e015      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	3304      	adds	r3, #4
 800422a:	2102      	movs	r1, #2
 800422c:	4618      	mov	r0, r3
 800422e:	f001 f9d5 	bl	80055dc <RCCEx_PLL2_Config>
 8004232:	4603      	mov	r3, r0
 8004234:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004236:	e00c      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	3324      	adds	r3, #36	; 0x24
 800423c:	2102      	movs	r1, #2
 800423e:	4618      	mov	r0, r3
 8004240:	f001 fa7e 	bl	8005740 <RCCEx_PLL3_Config>
 8004244:	4603      	mov	r3, r0
 8004246:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004248:	e003      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	75fb      	strb	r3, [r7, #23]
      break;
 800424e:	e000      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004250:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004252:	7dfb      	ldrb	r3, [r7, #23]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d109      	bne.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004258:	4b93      	ldr	r3, [pc, #588]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800425a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800425c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004264:	4990      	ldr	r1, [pc, #576]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004266:	4313      	orrs	r3, r2
 8004268:	650b      	str	r3, [r1, #80]	; 0x50
 800426a:	e001      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800426c:	7dfb      	ldrb	r3, [r7, #23]
 800426e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004278:	2b00      	cmp	r3, #0
 800427a:	d03d      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004280:	2b04      	cmp	r3, #4
 8004282:	d826      	bhi.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004284:	a201      	add	r2, pc, #4	; (adr r2, 800428c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800428a:	bf00      	nop
 800428c:	080042a1 	.word	0x080042a1
 8004290:	080042af 	.word	0x080042af
 8004294:	080042c1 	.word	0x080042c1
 8004298:	080042d9 	.word	0x080042d9
 800429c:	080042d9 	.word	0x080042d9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042a0:	4b81      	ldr	r3, [pc, #516]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80042a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a4:	4a80      	ldr	r2, [pc, #512]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80042a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80042ac:	e015      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	3304      	adds	r3, #4
 80042b2:	2100      	movs	r1, #0
 80042b4:	4618      	mov	r0, r3
 80042b6:	f001 f991 	bl	80055dc <RCCEx_PLL2_Config>
 80042ba:	4603      	mov	r3, r0
 80042bc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80042be:	e00c      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	3324      	adds	r3, #36	; 0x24
 80042c4:	2100      	movs	r1, #0
 80042c6:	4618      	mov	r0, r3
 80042c8:	f001 fa3a 	bl	8005740 <RCCEx_PLL3_Config>
 80042cc:	4603      	mov	r3, r0
 80042ce:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80042d0:	e003      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	75fb      	strb	r3, [r7, #23]
      break;
 80042d6:	e000      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80042d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042da:	7dfb      	ldrb	r3, [r7, #23]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d109      	bne.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042e0:	4b71      	ldr	r3, [pc, #452]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80042e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042e4:	f023 0207 	bic.w	r2, r3, #7
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ec:	496e      	ldr	r1, [pc, #440]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	650b      	str	r3, [r1, #80]	; 0x50
 80042f2:	e001      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042f4:	7dfb      	ldrb	r3, [r7, #23]
 80042f6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004300:	2b00      	cmp	r3, #0
 8004302:	d042      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004308:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800430c:	d02b      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800430e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004312:	d825      	bhi.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004314:	2bc0      	cmp	r3, #192	; 0xc0
 8004316:	d028      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004318:	2bc0      	cmp	r3, #192	; 0xc0
 800431a:	d821      	bhi.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800431c:	2b80      	cmp	r3, #128	; 0x80
 800431e:	d016      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004320:	2b80      	cmp	r3, #128	; 0x80
 8004322:	d81d      	bhi.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004324:	2b00      	cmp	r3, #0
 8004326:	d002      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004328:	2b40      	cmp	r3, #64	; 0x40
 800432a:	d007      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800432c:	e018      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800432e:	4b5e      	ldr	r3, [pc, #376]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004332:	4a5d      	ldr	r2, [pc, #372]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004338:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800433a:	e017      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	3304      	adds	r3, #4
 8004340:	2100      	movs	r1, #0
 8004342:	4618      	mov	r0, r3
 8004344:	f001 f94a 	bl	80055dc <RCCEx_PLL2_Config>
 8004348:	4603      	mov	r3, r0
 800434a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800434c:	e00e      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	3324      	adds	r3, #36	; 0x24
 8004352:	2100      	movs	r1, #0
 8004354:	4618      	mov	r0, r3
 8004356:	f001 f9f3 	bl	8005740 <RCCEx_PLL3_Config>
 800435a:	4603      	mov	r3, r0
 800435c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800435e:	e005      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	75fb      	strb	r3, [r7, #23]
      break;
 8004364:	e002      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004366:	bf00      	nop
 8004368:	e000      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800436a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800436c:	7dfb      	ldrb	r3, [r7, #23]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d109      	bne.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004372:	4b4d      	ldr	r3, [pc, #308]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004376:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800437e:	494a      	ldr	r1, [pc, #296]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004380:	4313      	orrs	r3, r2
 8004382:	650b      	str	r3, [r1, #80]	; 0x50
 8004384:	e001      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004386:	7dfb      	ldrb	r3, [r7, #23]
 8004388:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004392:	2b00      	cmp	r3, #0
 8004394:	d049      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800439c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043a0:	d030      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80043a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043a6:	d82a      	bhi.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80043a8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80043ac:	d02c      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80043ae:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80043b2:	d824      	bhi.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80043b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043b8:	d018      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x218>
 80043ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043be:	d81e      	bhi.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d003      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80043c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043c8:	d007      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x206>
 80043ca:	e018      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043cc:	4b36      	ldr	r3, [pc, #216]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80043ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d0:	4a35      	ldr	r2, [pc, #212]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80043d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80043d8:	e017      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	3304      	adds	r3, #4
 80043de:	2100      	movs	r1, #0
 80043e0:	4618      	mov	r0, r3
 80043e2:	f001 f8fb 	bl	80055dc <RCCEx_PLL2_Config>
 80043e6:	4603      	mov	r3, r0
 80043e8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80043ea:	e00e      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	3324      	adds	r3, #36	; 0x24
 80043f0:	2100      	movs	r1, #0
 80043f2:	4618      	mov	r0, r3
 80043f4:	f001 f9a4 	bl	8005740 <RCCEx_PLL3_Config>
 80043f8:	4603      	mov	r3, r0
 80043fa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80043fc:	e005      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	75fb      	strb	r3, [r7, #23]
      break;
 8004402:	e002      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004404:	bf00      	nop
 8004406:	e000      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004408:	bf00      	nop
    }

    if(ret == HAL_OK)
 800440a:	7dfb      	ldrb	r3, [r7, #23]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10a      	bne.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004410:	4b25      	ldr	r3, [pc, #148]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004414:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800441e:	4922      	ldr	r1, [pc, #136]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004420:	4313      	orrs	r3, r2
 8004422:	658b      	str	r3, [r1, #88]	; 0x58
 8004424:	e001      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004426:	7dfb      	ldrb	r3, [r7, #23]
 8004428:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004432:	2b00      	cmp	r3, #0
 8004434:	d04b      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800443c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004440:	d030      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004442:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004446:	d82a      	bhi.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004448:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800444c:	d02e      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800444e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004452:	d824      	bhi.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004454:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004458:	d018      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800445a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800445e:	d81e      	bhi.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004460:	2b00      	cmp	r3, #0
 8004462:	d003      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004464:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004468:	d007      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800446a:	e018      	b.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800446c:	4b0e      	ldr	r3, [pc, #56]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800446e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004470:	4a0d      	ldr	r2, [pc, #52]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004472:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004476:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004478:	e019      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	3304      	adds	r3, #4
 800447e:	2100      	movs	r1, #0
 8004480:	4618      	mov	r0, r3
 8004482:	f001 f8ab 	bl	80055dc <RCCEx_PLL2_Config>
 8004486:	4603      	mov	r3, r0
 8004488:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800448a:	e010      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	3324      	adds	r3, #36	; 0x24
 8004490:	2100      	movs	r1, #0
 8004492:	4618      	mov	r0, r3
 8004494:	f001 f954 	bl	8005740 <RCCEx_PLL3_Config>
 8004498:	4603      	mov	r3, r0
 800449a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800449c:	e007      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	75fb      	strb	r3, [r7, #23]
      break;
 80044a2:	e004      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80044a4:	bf00      	nop
 80044a6:	e002      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80044a8:	58024400 	.word	0x58024400
      break;
 80044ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044ae:	7dfb      	ldrb	r3, [r7, #23]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10a      	bne.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80044b4:	4b99      	ldr	r3, [pc, #612]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80044b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80044c2:	4996      	ldr	r1, [pc, #600]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	658b      	str	r3, [r1, #88]	; 0x58
 80044c8:	e001      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ca:	7dfb      	ldrb	r3, [r7, #23]
 80044cc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d032      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044de:	2b30      	cmp	r3, #48	; 0x30
 80044e0:	d01c      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x348>
 80044e2:	2b30      	cmp	r3, #48	; 0x30
 80044e4:	d817      	bhi.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80044e6:	2b20      	cmp	r3, #32
 80044e8:	d00c      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80044ea:	2b20      	cmp	r3, #32
 80044ec:	d813      	bhi.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d016      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80044f2:	2b10      	cmp	r3, #16
 80044f4:	d10f      	bne.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044f6:	4b89      	ldr	r3, [pc, #548]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80044f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fa:	4a88      	ldr	r2, [pc, #544]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80044fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004500:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004502:	e00e      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	3304      	adds	r3, #4
 8004508:	2102      	movs	r1, #2
 800450a:	4618      	mov	r0, r3
 800450c:	f001 f866 	bl	80055dc <RCCEx_PLL2_Config>
 8004510:	4603      	mov	r3, r0
 8004512:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004514:	e005      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	75fb      	strb	r3, [r7, #23]
      break;
 800451a:	e002      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800451c:	bf00      	nop
 800451e:	e000      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004520:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004522:	7dfb      	ldrb	r3, [r7, #23]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d109      	bne.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004528:	4b7c      	ldr	r3, [pc, #496]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800452a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800452c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004534:	4979      	ldr	r1, [pc, #484]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004536:	4313      	orrs	r3, r2
 8004538:	64cb      	str	r3, [r1, #76]	; 0x4c
 800453a:	e001      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800453c:	7dfb      	ldrb	r3, [r7, #23]
 800453e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d047      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004550:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004554:	d030      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004556:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800455a:	d82a      	bhi.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800455c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004560:	d02c      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004562:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004566:	d824      	bhi.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004568:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800456c:	d018      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800456e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004572:	d81e      	bhi.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004574:	2b00      	cmp	r3, #0
 8004576:	d003      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8004578:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800457c:	d007      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800457e:	e018      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004580:	4b66      	ldr	r3, [pc, #408]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004584:	4a65      	ldr	r2, [pc, #404]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004586:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800458a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800458c:	e017      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	3304      	adds	r3, #4
 8004592:	2100      	movs	r1, #0
 8004594:	4618      	mov	r0, r3
 8004596:	f001 f821 	bl	80055dc <RCCEx_PLL2_Config>
 800459a:	4603      	mov	r3, r0
 800459c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800459e:	e00e      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	3324      	adds	r3, #36	; 0x24
 80045a4:	2100      	movs	r1, #0
 80045a6:	4618      	mov	r0, r3
 80045a8:	f001 f8ca 	bl	8005740 <RCCEx_PLL3_Config>
 80045ac:	4603      	mov	r3, r0
 80045ae:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80045b0:	e005      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	75fb      	strb	r3, [r7, #23]
      break;
 80045b6:	e002      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80045b8:	bf00      	nop
 80045ba:	e000      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80045bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045be:	7dfb      	ldrb	r3, [r7, #23]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d109      	bne.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80045c4:	4b55      	ldr	r3, [pc, #340]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80045c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045d0:	4952      	ldr	r1, [pc, #328]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	650b      	str	r3, [r1, #80]	; 0x50
 80045d6:	e001      	b.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d8:	7dfb      	ldrb	r3, [r7, #23]
 80045da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d049      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045f0:	d02e      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80045f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045f6:	d828      	bhi.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x476>
 80045f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80045fc:	d02a      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80045fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004602:	d822      	bhi.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004604:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004608:	d026      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800460a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800460e:	d81c      	bhi.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004610:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004614:	d010      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8004616:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800461a:	d816      	bhi.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x476>
 800461c:	2b00      	cmp	r3, #0
 800461e:	d01d      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8004620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004624:	d111      	bne.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	3304      	adds	r3, #4
 800462a:	2101      	movs	r1, #1
 800462c:	4618      	mov	r0, r3
 800462e:	f000 ffd5 	bl	80055dc <RCCEx_PLL2_Config>
 8004632:	4603      	mov	r3, r0
 8004634:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004636:	e012      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	3324      	adds	r3, #36	; 0x24
 800463c:	2101      	movs	r1, #1
 800463e:	4618      	mov	r0, r3
 8004640:	f001 f87e 	bl	8005740 <RCCEx_PLL3_Config>
 8004644:	4603      	mov	r3, r0
 8004646:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004648:	e009      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	75fb      	strb	r3, [r7, #23]
      break;
 800464e:	e006      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004650:	bf00      	nop
 8004652:	e004      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004654:	bf00      	nop
 8004656:	e002      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004658:	bf00      	nop
 800465a:	e000      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800465c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800465e:	7dfb      	ldrb	r3, [r7, #23]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d109      	bne.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004664:	4b2d      	ldr	r3, [pc, #180]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004666:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004668:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004670:	492a      	ldr	r1, [pc, #168]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004672:	4313      	orrs	r3, r2
 8004674:	650b      	str	r3, [r1, #80]	; 0x50
 8004676:	e001      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004678:	7dfb      	ldrb	r3, [r7, #23]
 800467a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d04d      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800468e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004692:	d02e      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004694:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004698:	d828      	bhi.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x518>
 800469a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800469e:	d02a      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80046a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046a4:	d822      	bhi.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x518>
 80046a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80046aa:	d026      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x526>
 80046ac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80046b0:	d81c      	bhi.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x518>
 80046b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046b6:	d010      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x506>
 80046b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046bc:	d816      	bhi.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x518>
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d01d      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80046c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046c6:	d111      	bne.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	3304      	adds	r3, #4
 80046cc:	2101      	movs	r1, #1
 80046ce:	4618      	mov	r0, r3
 80046d0:	f000 ff84 	bl	80055dc <RCCEx_PLL2_Config>
 80046d4:	4603      	mov	r3, r0
 80046d6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80046d8:	e012      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	3324      	adds	r3, #36	; 0x24
 80046de:	2101      	movs	r1, #1
 80046e0:	4618      	mov	r0, r3
 80046e2:	f001 f82d 	bl	8005740 <RCCEx_PLL3_Config>
 80046e6:	4603      	mov	r3, r0
 80046e8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80046ea:	e009      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	75fb      	strb	r3, [r7, #23]
      break;
 80046f0:	e006      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80046f2:	bf00      	nop
 80046f4:	e004      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80046f6:	bf00      	nop
 80046f8:	e002      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80046fa:	bf00      	nop
 80046fc:	e000      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80046fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004700:	7dfb      	ldrb	r3, [r7, #23]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10c      	bne.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004706:	4b05      	ldr	r3, [pc, #20]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800470a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004714:	4901      	ldr	r1, [pc, #4]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004716:	4313      	orrs	r3, r2
 8004718:	658b      	str	r3, [r1, #88]	; 0x58
 800471a:	e003      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800471c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004720:	7dfb      	ldrb	r3, [r7, #23]
 8004722:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d02f      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004734:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004738:	d00e      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800473a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800473e:	d814      	bhi.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x596>
 8004740:	2b00      	cmp	r3, #0
 8004742:	d015      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8004744:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004748:	d10f      	bne.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800474a:	4baf      	ldr	r3, [pc, #700]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800474c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474e:	4aae      	ldr	r2, [pc, #696]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004754:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004756:	e00c      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	3304      	adds	r3, #4
 800475c:	2101      	movs	r1, #1
 800475e:	4618      	mov	r0, r3
 8004760:	f000 ff3c 	bl	80055dc <RCCEx_PLL2_Config>
 8004764:	4603      	mov	r3, r0
 8004766:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004768:	e003      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	75fb      	strb	r3, [r7, #23]
      break;
 800476e:	e000      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8004770:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004772:	7dfb      	ldrb	r3, [r7, #23]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d109      	bne.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004778:	4ba3      	ldr	r3, [pc, #652]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800477a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800477c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004784:	49a0      	ldr	r1, [pc, #640]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004786:	4313      	orrs	r3, r2
 8004788:	650b      	str	r3, [r1, #80]	; 0x50
 800478a:	e001      	b.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800478c:	7dfb      	ldrb	r3, [r7, #23]
 800478e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d032      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a0:	2b03      	cmp	r3, #3
 80047a2:	d81b      	bhi.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x608>
 80047a4:	a201      	add	r2, pc, #4	; (adr r2, 80047ac <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80047a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047aa:	bf00      	nop
 80047ac:	080047e3 	.word	0x080047e3
 80047b0:	080047bd 	.word	0x080047bd
 80047b4:	080047cb 	.word	0x080047cb
 80047b8:	080047e3 	.word	0x080047e3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047bc:	4b92      	ldr	r3, [pc, #584]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80047be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c0:	4a91      	ldr	r2, [pc, #580]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80047c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80047c8:	e00c      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	3304      	adds	r3, #4
 80047ce:	2102      	movs	r1, #2
 80047d0:	4618      	mov	r0, r3
 80047d2:	f000 ff03 	bl	80055dc <RCCEx_PLL2_Config>
 80047d6:	4603      	mov	r3, r0
 80047d8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80047da:	e003      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	75fb      	strb	r3, [r7, #23]
      break;
 80047e0:	e000      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80047e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047e4:	7dfb      	ldrb	r3, [r7, #23]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d109      	bne.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80047ea:	4b87      	ldr	r3, [pc, #540]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80047ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ee:	f023 0203 	bic.w	r2, r3, #3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f6:	4984      	ldr	r1, [pc, #528]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	64cb      	str	r3, [r1, #76]	; 0x4c
 80047fc:	e001      	b.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047fe:	7dfb      	ldrb	r3, [r7, #23]
 8004800:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 8086 	beq.w	800491c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004810:	4b7e      	ldr	r3, [pc, #504]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a7d      	ldr	r2, [pc, #500]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004816:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800481a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800481c:	f7fc fe8e 	bl	800153c <HAL_GetTick>
 8004820:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004822:	e009      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004824:	f7fc fe8a 	bl	800153c <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	2b64      	cmp	r3, #100	; 0x64
 8004830:	d902      	bls.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	75fb      	strb	r3, [r7, #23]
        break;
 8004836:	e005      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004838:	4b74      	ldr	r3, [pc, #464]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004840:	2b00      	cmp	r3, #0
 8004842:	d0ef      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004844:	7dfb      	ldrb	r3, [r7, #23]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d166      	bne.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800484a:	4b6f      	ldr	r3, [pc, #444]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800484c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004854:	4053      	eors	r3, r2
 8004856:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800485a:	2b00      	cmp	r3, #0
 800485c:	d013      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800485e:	4b6a      	ldr	r3, [pc, #424]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004862:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004866:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004868:	4b67      	ldr	r3, [pc, #412]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800486a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800486c:	4a66      	ldr	r2, [pc, #408]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800486e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004872:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004874:	4b64      	ldr	r3, [pc, #400]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004878:	4a63      	ldr	r2, [pc, #396]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800487a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800487e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004880:	4a61      	ldr	r2, [pc, #388]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800488c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004890:	d115      	bne.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004892:	f7fc fe53 	bl	800153c <HAL_GetTick>
 8004896:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004898:	e00b      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800489a:	f7fc fe4f 	bl	800153c <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d902      	bls.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	75fb      	strb	r3, [r7, #23]
            break;
 80048b0:	e005      	b.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048b2:	4b55      	ldr	r3, [pc, #340]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80048b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d0ed      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80048be:	7dfb      	ldrb	r3, [r7, #23]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d126      	bne.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80048ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048d2:	d10d      	bne.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80048d4:	4b4c      	ldr	r3, [pc, #304]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80048e2:	0919      	lsrs	r1, r3, #4
 80048e4:	4b4a      	ldr	r3, [pc, #296]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80048e6:	400b      	ands	r3, r1
 80048e8:	4947      	ldr	r1, [pc, #284]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	610b      	str	r3, [r1, #16]
 80048ee:	e005      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x728>
 80048f0:	4b45      	ldr	r3, [pc, #276]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	4a44      	ldr	r2, [pc, #272]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80048f6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80048fa:	6113      	str	r3, [r2, #16]
 80048fc:	4b42      	ldr	r3, [pc, #264]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80048fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004906:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800490a:	493f      	ldr	r1, [pc, #252]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800490c:	4313      	orrs	r3, r2
 800490e:	670b      	str	r3, [r1, #112]	; 0x70
 8004910:	e004      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004912:	7dfb      	ldrb	r3, [r7, #23]
 8004914:	75bb      	strb	r3, [r7, #22]
 8004916:	e001      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004918:	7dfb      	ldrb	r3, [r7, #23]
 800491a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0301 	and.w	r3, r3, #1
 8004924:	2b00      	cmp	r3, #0
 8004926:	f000 8085 	beq.w	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800492e:	2b28      	cmp	r3, #40	; 0x28
 8004930:	d866      	bhi.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004932:	a201      	add	r2, pc, #4	; (adr r2, 8004938 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004938:	08004a15 	.word	0x08004a15
 800493c:	08004a01 	.word	0x08004a01
 8004940:	08004a01 	.word	0x08004a01
 8004944:	08004a01 	.word	0x08004a01
 8004948:	08004a01 	.word	0x08004a01
 800494c:	08004a01 	.word	0x08004a01
 8004950:	08004a01 	.word	0x08004a01
 8004954:	08004a01 	.word	0x08004a01
 8004958:	080049dd 	.word	0x080049dd
 800495c:	08004a01 	.word	0x08004a01
 8004960:	08004a01 	.word	0x08004a01
 8004964:	08004a01 	.word	0x08004a01
 8004968:	08004a01 	.word	0x08004a01
 800496c:	08004a01 	.word	0x08004a01
 8004970:	08004a01 	.word	0x08004a01
 8004974:	08004a01 	.word	0x08004a01
 8004978:	080049ef 	.word	0x080049ef
 800497c:	08004a01 	.word	0x08004a01
 8004980:	08004a01 	.word	0x08004a01
 8004984:	08004a01 	.word	0x08004a01
 8004988:	08004a01 	.word	0x08004a01
 800498c:	08004a01 	.word	0x08004a01
 8004990:	08004a01 	.word	0x08004a01
 8004994:	08004a01 	.word	0x08004a01
 8004998:	08004a15 	.word	0x08004a15
 800499c:	08004a01 	.word	0x08004a01
 80049a0:	08004a01 	.word	0x08004a01
 80049a4:	08004a01 	.word	0x08004a01
 80049a8:	08004a01 	.word	0x08004a01
 80049ac:	08004a01 	.word	0x08004a01
 80049b0:	08004a01 	.word	0x08004a01
 80049b4:	08004a01 	.word	0x08004a01
 80049b8:	08004a15 	.word	0x08004a15
 80049bc:	08004a01 	.word	0x08004a01
 80049c0:	08004a01 	.word	0x08004a01
 80049c4:	08004a01 	.word	0x08004a01
 80049c8:	08004a01 	.word	0x08004a01
 80049cc:	08004a01 	.word	0x08004a01
 80049d0:	08004a01 	.word	0x08004a01
 80049d4:	08004a01 	.word	0x08004a01
 80049d8:	08004a15 	.word	0x08004a15
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	3304      	adds	r3, #4
 80049e0:	2101      	movs	r1, #1
 80049e2:	4618      	mov	r0, r3
 80049e4:	f000 fdfa 	bl	80055dc <RCCEx_PLL2_Config>
 80049e8:	4603      	mov	r3, r0
 80049ea:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80049ec:	e013      	b.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	3324      	adds	r3, #36	; 0x24
 80049f2:	2101      	movs	r1, #1
 80049f4:	4618      	mov	r0, r3
 80049f6:	f000 fea3 	bl	8005740 <RCCEx_PLL3_Config>
 80049fa:	4603      	mov	r3, r0
 80049fc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80049fe:	e00a      	b.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	75fb      	strb	r3, [r7, #23]
      break;
 8004a04:	e007      	b.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004a06:	bf00      	nop
 8004a08:	58024400 	.word	0x58024400
 8004a0c:	58024800 	.word	0x58024800
 8004a10:	00ffffcf 	.word	0x00ffffcf
      break;
 8004a14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a16:	7dfb      	ldrb	r3, [r7, #23]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d109      	bne.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004a1c:	4b96      	ldr	r3, [pc, #600]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a20:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a28:	4993      	ldr	r1, [pc, #588]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	654b      	str	r3, [r1, #84]	; 0x54
 8004a2e:	e001      	b.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a30:	7dfb      	ldrb	r3, [r7, #23]
 8004a32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0302 	and.w	r3, r3, #2
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d038      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a44:	2b05      	cmp	r3, #5
 8004a46:	d821      	bhi.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8004a48:	a201      	add	r2, pc, #4	; (adr r2, 8004a50 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8004a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a4e:	bf00      	nop
 8004a50:	08004a93 	.word	0x08004a93
 8004a54:	08004a69 	.word	0x08004a69
 8004a58:	08004a7b 	.word	0x08004a7b
 8004a5c:	08004a93 	.word	0x08004a93
 8004a60:	08004a93 	.word	0x08004a93
 8004a64:	08004a93 	.word	0x08004a93
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	3304      	adds	r3, #4
 8004a6c:	2101      	movs	r1, #1
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 fdb4 	bl	80055dc <RCCEx_PLL2_Config>
 8004a74:	4603      	mov	r3, r0
 8004a76:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004a78:	e00c      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	3324      	adds	r3, #36	; 0x24
 8004a7e:	2101      	movs	r1, #1
 8004a80:	4618      	mov	r0, r3
 8004a82:	f000 fe5d 	bl	8005740 <RCCEx_PLL3_Config>
 8004a86:	4603      	mov	r3, r0
 8004a88:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004a8a:	e003      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	75fb      	strb	r3, [r7, #23]
      break;
 8004a90:	e000      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8004a92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a94:	7dfb      	ldrb	r3, [r7, #23]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d109      	bne.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004a9a:	4b77      	ldr	r3, [pc, #476]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a9e:	f023 0207 	bic.w	r2, r3, #7
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aa6:	4974      	ldr	r1, [pc, #464]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	654b      	str	r3, [r1, #84]	; 0x54
 8004aac:	e001      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aae:	7dfb      	ldrb	r3, [r7, #23]
 8004ab0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0304 	and.w	r3, r3, #4
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d03a      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ac4:	2b05      	cmp	r3, #5
 8004ac6:	d821      	bhi.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x938>
 8004ac8:	a201      	add	r2, pc, #4	; (adr r2, 8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8004aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ace:	bf00      	nop
 8004ad0:	08004b13 	.word	0x08004b13
 8004ad4:	08004ae9 	.word	0x08004ae9
 8004ad8:	08004afb 	.word	0x08004afb
 8004adc:	08004b13 	.word	0x08004b13
 8004ae0:	08004b13 	.word	0x08004b13
 8004ae4:	08004b13 	.word	0x08004b13
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	3304      	adds	r3, #4
 8004aec:	2101      	movs	r1, #1
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 fd74 	bl	80055dc <RCCEx_PLL2_Config>
 8004af4:	4603      	mov	r3, r0
 8004af6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004af8:	e00c      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	3324      	adds	r3, #36	; 0x24
 8004afe:	2101      	movs	r1, #1
 8004b00:	4618      	mov	r0, r3
 8004b02:	f000 fe1d 	bl	8005740 <RCCEx_PLL3_Config>
 8004b06:	4603      	mov	r3, r0
 8004b08:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004b0a:	e003      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	75fb      	strb	r3, [r7, #23]
      break;
 8004b10:	e000      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8004b12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b14:	7dfb      	ldrb	r3, [r7, #23]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10a      	bne.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b1a:	4b57      	ldr	r3, [pc, #348]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b1e:	f023 0207 	bic.w	r2, r3, #7
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b28:	4953      	ldr	r1, [pc, #332]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	658b      	str	r3, [r1, #88]	; 0x58
 8004b2e:	e001      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b30:	7dfb      	ldrb	r3, [r7, #23]
 8004b32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0320 	and.w	r3, r3, #32
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d04b      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b4a:	d02e      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004b4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b50:	d828      	bhi.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b56:	d02a      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b5c:	d822      	bhi.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004b5e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004b62:	d026      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004b64:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004b68:	d81c      	bhi.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004b6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b6e:	d010      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8004b70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b74:	d816      	bhi.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d01d      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8004b7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b7e:	d111      	bne.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	3304      	adds	r3, #4
 8004b84:	2100      	movs	r1, #0
 8004b86:	4618      	mov	r0, r3
 8004b88:	f000 fd28 	bl	80055dc <RCCEx_PLL2_Config>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004b90:	e012      	b.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	3324      	adds	r3, #36	; 0x24
 8004b96:	2102      	movs	r1, #2
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f000 fdd1 	bl	8005740 <RCCEx_PLL3_Config>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004ba2:	e009      	b.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ba8:	e006      	b.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004baa:	bf00      	nop
 8004bac:	e004      	b.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004bae:	bf00      	nop
 8004bb0:	e002      	b.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004bb2:	bf00      	nop
 8004bb4:	e000      	b.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004bb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bb8:	7dfb      	ldrb	r3, [r7, #23]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10a      	bne.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bbe:	4b2e      	ldr	r3, [pc, #184]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bc2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bcc:	492a      	ldr	r1, [pc, #168]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	654b      	str	r3, [r1, #84]	; 0x54
 8004bd2:	e001      	b.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bd4:	7dfb      	ldrb	r3, [r7, #23]
 8004bd6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d04d      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004bee:	d02e      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004bf0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004bf4:	d828      	bhi.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004bf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bfa:	d02a      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004bfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c00:	d822      	bhi.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004c02:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c06:	d026      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004c08:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c0c:	d81c      	bhi.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004c0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c12:	d010      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8004c14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c18:	d816      	bhi.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d01d      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8004c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c22:	d111      	bne.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	3304      	adds	r3, #4
 8004c28:	2100      	movs	r1, #0
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f000 fcd6 	bl	80055dc <RCCEx_PLL2_Config>
 8004c30:	4603      	mov	r3, r0
 8004c32:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004c34:	e012      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	3324      	adds	r3, #36	; 0x24
 8004c3a:	2102      	movs	r1, #2
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f000 fd7f 	bl	8005740 <RCCEx_PLL3_Config>
 8004c42:	4603      	mov	r3, r0
 8004c44:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004c46:	e009      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c4c:	e006      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004c4e:	bf00      	nop
 8004c50:	e004      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004c52:	bf00      	nop
 8004c54:	e002      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004c56:	bf00      	nop
 8004c58:	e000      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004c5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c5c:	7dfb      	ldrb	r3, [r7, #23]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10c      	bne.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004c62:	4b05      	ldr	r3, [pc, #20]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c66:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c70:	4901      	ldr	r1, [pc, #4]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	658b      	str	r3, [r1, #88]	; 0x58
 8004c76:	e003      	b.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004c78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c7c:	7dfb      	ldrb	r3, [r7, #23]
 8004c7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d04b      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c92:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004c96:	d02e      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004c98:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004c9c:	d828      	bhi.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004c9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ca2:	d02a      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004ca4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ca8:	d822      	bhi.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004caa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004cae:	d026      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8004cb0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004cb4:	d81c      	bhi.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004cb6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cba:	d010      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8004cbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cc0:	d816      	bhi.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d01d      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8004cc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cca:	d111      	bne.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	3304      	adds	r3, #4
 8004cd0:	2100      	movs	r1, #0
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f000 fc82 	bl	80055dc <RCCEx_PLL2_Config>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004cdc:	e012      	b.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	3324      	adds	r3, #36	; 0x24
 8004ce2:	2102      	movs	r1, #2
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f000 fd2b 	bl	8005740 <RCCEx_PLL3_Config>
 8004cea:	4603      	mov	r3, r0
 8004cec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004cee:	e009      	b.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	75fb      	strb	r3, [r7, #23]
      break;
 8004cf4:	e006      	b.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004cf6:	bf00      	nop
 8004cf8:	e004      	b.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004cfa:	bf00      	nop
 8004cfc:	e002      	b.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004cfe:	bf00      	nop
 8004d00:	e000      	b.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004d02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d04:	7dfb      	ldrb	r3, [r7, #23]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d10a      	bne.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004d0a:	4b9d      	ldr	r3, [pc, #628]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d18:	4999      	ldr	r1, [pc, #612]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	658b      	str	r3, [r1, #88]	; 0x58
 8004d1e:	e001      	b.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d20:	7dfb      	ldrb	r3, [r7, #23]
 8004d22:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0308 	and.w	r3, r3, #8
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d01a      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d3a:	d10a      	bne.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	3324      	adds	r3, #36	; 0x24
 8004d40:	2102      	movs	r1, #2
 8004d42:	4618      	mov	r0, r3
 8004d44:	f000 fcfc 	bl	8005740 <RCCEx_PLL3_Config>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d001      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004d52:	4b8b      	ldr	r3, [pc, #556]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d56:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d60:	4987      	ldr	r1, [pc, #540]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0310 	and.w	r3, r3, #16
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d01a      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d7c:	d10a      	bne.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	3324      	adds	r3, #36	; 0x24
 8004d82:	2102      	movs	r1, #2
 8004d84:	4618      	mov	r0, r3
 8004d86:	f000 fcdb 	bl	8005740 <RCCEx_PLL3_Config>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d001      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d94:	4b7a      	ldr	r3, [pc, #488]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004da2:	4977      	ldr	r1, [pc, #476]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d034      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004dba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004dbe:	d01d      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004dc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004dc4:	d817      	bhi.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d003      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004dca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dce:	d009      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004dd0:	e011      	b.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	3304      	adds	r3, #4
 8004dd6:	2100      	movs	r1, #0
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f000 fbff 	bl	80055dc <RCCEx_PLL2_Config>
 8004dde:	4603      	mov	r3, r0
 8004de0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004de2:	e00c      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	3324      	adds	r3, #36	; 0x24
 8004de8:	2102      	movs	r1, #2
 8004dea:	4618      	mov	r0, r3
 8004dec:	f000 fca8 	bl	8005740 <RCCEx_PLL3_Config>
 8004df0:	4603      	mov	r3, r0
 8004df2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004df4:	e003      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	75fb      	strb	r3, [r7, #23]
      break;
 8004dfa:	e000      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004dfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dfe:	7dfb      	ldrb	r3, [r7, #23]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d10a      	bne.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e04:	4b5e      	ldr	r3, [pc, #376]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004e12:	495b      	ldr	r1, [pc, #364]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004e14:	4313      	orrs	r3, r2
 8004e16:	658b      	str	r3, [r1, #88]	; 0x58
 8004e18:	e001      	b.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e1a:	7dfb      	ldrb	r3, [r7, #23]
 8004e1c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d033      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e30:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e34:	d01c      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8004e36:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e3a:	d816      	bhi.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8004e3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e40:	d003      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8004e42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e46:	d007      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8004e48:	e00f      	b.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e4a:	4b4d      	ldr	r3, [pc, #308]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4e:	4a4c      	ldr	r2, [pc, #304]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004e50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e54:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004e56:	e00c      	b.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	3324      	adds	r3, #36	; 0x24
 8004e5c:	2101      	movs	r1, #1
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f000 fc6e 	bl	8005740 <RCCEx_PLL3_Config>
 8004e64:	4603      	mov	r3, r0
 8004e66:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004e68:	e003      	b.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	75fb      	strb	r3, [r7, #23]
      break;
 8004e6e:	e000      	b.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8004e70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e72:	7dfb      	ldrb	r3, [r7, #23]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d10a      	bne.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e78:	4b41      	ldr	r3, [pc, #260]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e86:	493e      	ldr	r1, [pc, #248]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	654b      	str	r3, [r1, #84]	; 0x54
 8004e8c:	e001      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e8e:	7dfb      	ldrb	r3, [r7, #23]
 8004e90:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d029      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d003      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8004ea6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eaa:	d007      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8004eac:	e00f      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004eae:	4b34      	ldr	r3, [pc, #208]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb2:	4a33      	ldr	r2, [pc, #204]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004eb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004eb8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004eba:	e00b      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	3304      	adds	r3, #4
 8004ec0:	2102      	movs	r1, #2
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f000 fb8a 	bl	80055dc <RCCEx_PLL2_Config>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004ecc:	e002      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	75fb      	strb	r3, [r7, #23]
      break;
 8004ed2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ed4:	7dfb      	ldrb	r3, [r7, #23]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d109      	bne.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004eda:	4b29      	ldr	r3, [pc, #164]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ede:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ee6:	4926      	ldr	r1, [pc, #152]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004eec:	e001      	b.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eee:	7dfb      	ldrb	r3, [r7, #23]
 8004ef0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00a      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	3324      	adds	r3, #36	; 0x24
 8004f02:	2102      	movs	r1, #2
 8004f04:	4618      	mov	r0, r3
 8004f06:	f000 fc1b 	bl	8005740 <RCCEx_PLL3_Config>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d001      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d033      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f28:	d017      	beq.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004f2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f2e:	d811      	bhi.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004f30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f34:	d013      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004f36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f3a:	d80b      	bhi.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d010      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8004f40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f44:	d106      	bne.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f46:	4b0e      	ldr	r3, [pc, #56]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4a:	4a0d      	ldr	r2, [pc, #52]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f50:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004f52:	e007      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	75fb      	strb	r3, [r7, #23]
      break;
 8004f58:	e004      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004f5a:	bf00      	nop
 8004f5c:	e002      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004f5e:	bf00      	nop
 8004f60:	e000      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004f62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f64:	7dfb      	ldrb	r3, [r7, #23]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d10c      	bne.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f6a:	4b05      	ldr	r3, [pc, #20]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f6e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f76:	4902      	ldr	r1, [pc, #8]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	654b      	str	r3, [r1, #84]	; 0x54
 8004f7c:	e004      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8004f7e:	bf00      	nop
 8004f80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f84:	7dfb      	ldrb	r3, [r7, #23]
 8004f86:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d008      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004f94:	4b31      	ldr	r3, [pc, #196]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f98:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa0:	492e      	ldr	r1, [pc, #184]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d009      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004fb2:	4b2a      	ldr	r3, [pc, #168]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004fc0:	4926      	ldr	r1, [pc, #152]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d008      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004fd2:	4b22      	ldr	r3, [pc, #136]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004fd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fd6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fde:	491f      	ldr	r1, [pc, #124]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d00d      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004ff0:	4b1a      	ldr	r3, [pc, #104]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	4a19      	ldr	r2, [pc, #100]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004ff6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004ffa:	6113      	str	r3, [r2, #16]
 8004ffc:	4b17      	ldr	r3, [pc, #92]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004ffe:	691a      	ldr	r2, [r3, #16]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005006:	4915      	ldr	r1, [pc, #84]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005008:	4313      	orrs	r3, r2
 800500a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2b00      	cmp	r3, #0
 8005012:	da08      	bge.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005014:	4b11      	ldr	r3, [pc, #68]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005018:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005020:	490e      	ldr	r1, [pc, #56]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005022:	4313      	orrs	r3, r2
 8005024:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d009      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005032:	4b0a      	ldr	r3, [pc, #40]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005036:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005040:	4906      	ldr	r1, [pc, #24]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005042:	4313      	orrs	r3, r2
 8005044:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005046:	7dbb      	ldrb	r3, [r7, #22]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d101      	bne.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800504c:	2300      	movs	r3, #0
 800504e:	e000      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
}
 8005052:	4618      	mov	r0, r3
 8005054:	3718      	adds	r7, #24
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	58024400 	.word	0x58024400

08005060 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005064:	f7ff f85a 	bl	800411c <HAL_RCC_GetHCLKFreq>
 8005068:	4602      	mov	r2, r0
 800506a:	4b06      	ldr	r3, [pc, #24]	; (8005084 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	091b      	lsrs	r3, r3, #4
 8005070:	f003 0307 	and.w	r3, r3, #7
 8005074:	4904      	ldr	r1, [pc, #16]	; (8005088 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005076:	5ccb      	ldrb	r3, [r1, r3]
 8005078:	f003 031f 	and.w	r3, r3, #31
 800507c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005080:	4618      	mov	r0, r3
 8005082:	bd80      	pop	{r7, pc}
 8005084:	58024400 	.word	0x58024400
 8005088:	08009350 	.word	0x08009350

0800508c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800508c:	b480      	push	{r7}
 800508e:	b089      	sub	sp, #36	; 0x24
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005094:	4ba1      	ldr	r3, [pc, #644]	; (800531c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005098:	f003 0303 	and.w	r3, r3, #3
 800509c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800509e:	4b9f      	ldr	r3, [pc, #636]	; (800531c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a2:	0b1b      	lsrs	r3, r3, #12
 80050a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050a8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80050aa:	4b9c      	ldr	r3, [pc, #624]	; (800531c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ae:	091b      	lsrs	r3, r3, #4
 80050b0:	f003 0301 	and.w	r3, r3, #1
 80050b4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80050b6:	4b99      	ldr	r3, [pc, #612]	; (800531c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ba:	08db      	lsrs	r3, r3, #3
 80050bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	fb02 f303 	mul.w	r3, r2, r3
 80050c6:	ee07 3a90 	vmov	s15, r3
 80050ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f000 8111 	beq.w	80052fc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	2b02      	cmp	r3, #2
 80050de:	f000 8083 	beq.w	80051e8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	f200 80a1 	bhi.w	800522c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d003      	beq.n	80050f8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d056      	beq.n	80051a4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80050f6:	e099      	b.n	800522c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050f8:	4b88      	ldr	r3, [pc, #544]	; (800531c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 0320 	and.w	r3, r3, #32
 8005100:	2b00      	cmp	r3, #0
 8005102:	d02d      	beq.n	8005160 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005104:	4b85      	ldr	r3, [pc, #532]	; (800531c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	08db      	lsrs	r3, r3, #3
 800510a:	f003 0303 	and.w	r3, r3, #3
 800510e:	4a84      	ldr	r2, [pc, #528]	; (8005320 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005110:	fa22 f303 	lsr.w	r3, r2, r3
 8005114:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	ee07 3a90 	vmov	s15, r3
 800511c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	ee07 3a90 	vmov	s15, r3
 8005126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800512a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800512e:	4b7b      	ldr	r3, [pc, #492]	; (800531c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005136:	ee07 3a90 	vmov	s15, r3
 800513a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800513e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005142:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005324 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005146:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800514a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800514e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005152:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800515a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800515e:	e087      	b.n	8005270 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	ee07 3a90 	vmov	s15, r3
 8005166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800516a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005328 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800516e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005172:	4b6a      	ldr	r3, [pc, #424]	; (800531c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800517a:	ee07 3a90 	vmov	s15, r3
 800517e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005182:	ed97 6a03 	vldr	s12, [r7, #12]
 8005186:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005324 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800518a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800518e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005192:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800519a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800519e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80051a2:	e065      	b.n	8005270 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	ee07 3a90 	vmov	s15, r3
 80051aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800532c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80051b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051b6:	4b59      	ldr	r3, [pc, #356]	; (800531c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051be:	ee07 3a90 	vmov	s15, r3
 80051c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80051ca:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005324 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80051ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80051e6:	e043      	b.n	8005270 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	ee07 3a90 	vmov	s15, r3
 80051ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051f2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005330 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80051f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051fa:	4b48      	ldr	r3, [pc, #288]	; (800531c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005202:	ee07 3a90 	vmov	s15, r3
 8005206:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800520a:	ed97 6a03 	vldr	s12, [r7, #12]
 800520e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005324 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005212:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005216:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800521a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800521e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005226:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800522a:	e021      	b.n	8005270 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	ee07 3a90 	vmov	s15, r3
 8005232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005236:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800532c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800523a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800523e:	4b37      	ldr	r3, [pc, #220]	; (800531c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005246:	ee07 3a90 	vmov	s15, r3
 800524a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800524e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005252:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005324 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005256:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800525a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800525e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005262:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800526a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800526e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005270:	4b2a      	ldr	r3, [pc, #168]	; (800531c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005274:	0a5b      	lsrs	r3, r3, #9
 8005276:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800527a:	ee07 3a90 	vmov	s15, r3
 800527e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005282:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005286:	ee37 7a87 	vadd.f32	s14, s15, s14
 800528a:	edd7 6a07 	vldr	s13, [r7, #28]
 800528e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005292:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005296:	ee17 2a90 	vmov	r2, s15
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800529e:	4b1f      	ldr	r3, [pc, #124]	; (800531c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a2:	0c1b      	lsrs	r3, r3, #16
 80052a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052a8:	ee07 3a90 	vmov	s15, r3
 80052ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80052b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80052bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052c4:	ee17 2a90 	vmov	r2, s15
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80052cc:	4b13      	ldr	r3, [pc, #76]	; (800531c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d0:	0e1b      	lsrs	r3, r3, #24
 80052d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052d6:	ee07 3a90 	vmov	s15, r3
 80052da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80052e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80052ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052f2:	ee17 2a90 	vmov	r2, s15
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80052fa:	e008      	b.n	800530e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	609a      	str	r2, [r3, #8]
}
 800530e:	bf00      	nop
 8005310:	3724      	adds	r7, #36	; 0x24
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	58024400 	.word	0x58024400
 8005320:	03d09000 	.word	0x03d09000
 8005324:	46000000 	.word	0x46000000
 8005328:	4c742400 	.word	0x4c742400
 800532c:	4a742400 	.word	0x4a742400
 8005330:	4af42400 	.word	0x4af42400

08005334 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005334:	b480      	push	{r7}
 8005336:	b089      	sub	sp, #36	; 0x24
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800533c:	4ba1      	ldr	r3, [pc, #644]	; (80055c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800533e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005340:	f003 0303 	and.w	r3, r3, #3
 8005344:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005346:	4b9f      	ldr	r3, [pc, #636]	; (80055c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800534a:	0d1b      	lsrs	r3, r3, #20
 800534c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005350:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005352:	4b9c      	ldr	r3, [pc, #624]	; (80055c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005356:	0a1b      	lsrs	r3, r3, #8
 8005358:	f003 0301 	and.w	r3, r3, #1
 800535c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800535e:	4b99      	ldr	r3, [pc, #612]	; (80055c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005362:	08db      	lsrs	r3, r3, #3
 8005364:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	fb02 f303 	mul.w	r3, r2, r3
 800536e:	ee07 3a90 	vmov	s15, r3
 8005372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005376:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	2b00      	cmp	r3, #0
 800537e:	f000 8111 	beq.w	80055a4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	2b02      	cmp	r3, #2
 8005386:	f000 8083 	beq.w	8005490 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	2b02      	cmp	r3, #2
 800538e:	f200 80a1 	bhi.w	80054d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d003      	beq.n	80053a0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	2b01      	cmp	r3, #1
 800539c:	d056      	beq.n	800544c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800539e:	e099      	b.n	80054d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053a0:	4b88      	ldr	r3, [pc, #544]	; (80055c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0320 	and.w	r3, r3, #32
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d02d      	beq.n	8005408 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80053ac:	4b85      	ldr	r3, [pc, #532]	; (80055c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	08db      	lsrs	r3, r3, #3
 80053b2:	f003 0303 	and.w	r3, r3, #3
 80053b6:	4a84      	ldr	r2, [pc, #528]	; (80055c8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80053b8:	fa22 f303 	lsr.w	r3, r2, r3
 80053bc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	ee07 3a90 	vmov	s15, r3
 80053c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	ee07 3a90 	vmov	s15, r3
 80053ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053d6:	4b7b      	ldr	r3, [pc, #492]	; (80055c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053de:	ee07 3a90 	vmov	s15, r3
 80053e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80053ea:	eddf 5a78 	vldr	s11, [pc, #480]	; 80055cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005402:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005406:	e087      	b.n	8005518 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	ee07 3a90 	vmov	s15, r3
 800540e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005412:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80055d0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005416:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800541a:	4b6a      	ldr	r3, [pc, #424]	; (80055c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800541c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005422:	ee07 3a90 	vmov	s15, r3
 8005426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800542a:	ed97 6a03 	vldr	s12, [r7, #12]
 800542e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80055cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005432:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005436:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800543a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800543e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005446:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800544a:	e065      	b.n	8005518 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	ee07 3a90 	vmov	s15, r3
 8005452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005456:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80055d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800545a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800545e:	4b59      	ldr	r3, [pc, #356]	; (80055c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005462:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005466:	ee07 3a90 	vmov	s15, r3
 800546a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800546e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005472:	eddf 5a56 	vldr	s11, [pc, #344]	; 80055cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005476:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800547a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800547e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005482:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800548a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800548e:	e043      	b.n	8005518 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	ee07 3a90 	vmov	s15, r3
 8005496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800549a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80055d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800549e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054a2:	4b48      	ldr	r3, [pc, #288]	; (80055c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054aa:	ee07 3a90 	vmov	s15, r3
 80054ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80054b6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80055cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80054ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80054d2:	e021      	b.n	8005518 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	ee07 3a90 	vmov	s15, r3
 80054da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054de:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80055d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80054e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054e6:	4b37      	ldr	r3, [pc, #220]	; (80055c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ee:	ee07 3a90 	vmov	s15, r3
 80054f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80054fa:	eddf 5a34 	vldr	s11, [pc, #208]	; 80055cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80054fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005506:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800550a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800550e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005512:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005516:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005518:	4b2a      	ldr	r3, [pc, #168]	; (80055c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800551a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551c:	0a5b      	lsrs	r3, r3, #9
 800551e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005522:	ee07 3a90 	vmov	s15, r3
 8005526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800552a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800552e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005532:	edd7 6a07 	vldr	s13, [r7, #28]
 8005536:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800553a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800553e:	ee17 2a90 	vmov	r2, s15
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005546:	4b1f      	ldr	r3, [pc, #124]	; (80055c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554a:	0c1b      	lsrs	r3, r3, #16
 800554c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005550:	ee07 3a90 	vmov	s15, r3
 8005554:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005558:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800555c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005560:	edd7 6a07 	vldr	s13, [r7, #28]
 8005564:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005568:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800556c:	ee17 2a90 	vmov	r2, s15
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005574:	4b13      	ldr	r3, [pc, #76]	; (80055c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005578:	0e1b      	lsrs	r3, r3, #24
 800557a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800557e:	ee07 3a90 	vmov	s15, r3
 8005582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005586:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800558a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800558e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005592:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005596:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800559a:	ee17 2a90 	vmov	r2, s15
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80055a2:	e008      	b.n	80055b6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	609a      	str	r2, [r3, #8]
}
 80055b6:	bf00      	nop
 80055b8:	3724      	adds	r7, #36	; 0x24
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	58024400 	.word	0x58024400
 80055c8:	03d09000 	.word	0x03d09000
 80055cc:	46000000 	.word	0x46000000
 80055d0:	4c742400 	.word	0x4c742400
 80055d4:	4a742400 	.word	0x4a742400
 80055d8:	4af42400 	.word	0x4af42400

080055dc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055e6:	2300      	movs	r3, #0
 80055e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80055ea:	4b53      	ldr	r3, [pc, #332]	; (8005738 <RCCEx_PLL2_Config+0x15c>)
 80055ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ee:	f003 0303 	and.w	r3, r3, #3
 80055f2:	2b03      	cmp	r3, #3
 80055f4:	d101      	bne.n	80055fa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e099      	b.n	800572e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80055fa:	4b4f      	ldr	r3, [pc, #316]	; (8005738 <RCCEx_PLL2_Config+0x15c>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a4e      	ldr	r2, [pc, #312]	; (8005738 <RCCEx_PLL2_Config+0x15c>)
 8005600:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005604:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005606:	f7fb ff99 	bl	800153c <HAL_GetTick>
 800560a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800560c:	e008      	b.n	8005620 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800560e:	f7fb ff95 	bl	800153c <HAL_GetTick>
 8005612:	4602      	mov	r2, r0
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	2b02      	cmp	r3, #2
 800561a:	d901      	bls.n	8005620 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800561c:	2303      	movs	r3, #3
 800561e:	e086      	b.n	800572e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005620:	4b45      	ldr	r3, [pc, #276]	; (8005738 <RCCEx_PLL2_Config+0x15c>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1f0      	bne.n	800560e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800562c:	4b42      	ldr	r3, [pc, #264]	; (8005738 <RCCEx_PLL2_Config+0x15c>)
 800562e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005630:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	031b      	lsls	r3, r3, #12
 800563a:	493f      	ldr	r1, [pc, #252]	; (8005738 <RCCEx_PLL2_Config+0x15c>)
 800563c:	4313      	orrs	r3, r2
 800563e:	628b      	str	r3, [r1, #40]	; 0x28
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	3b01      	subs	r3, #1
 8005646:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	3b01      	subs	r3, #1
 8005650:	025b      	lsls	r3, r3, #9
 8005652:	b29b      	uxth	r3, r3
 8005654:	431a      	orrs	r2, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	3b01      	subs	r3, #1
 800565c:	041b      	lsls	r3, r3, #16
 800565e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005662:	431a      	orrs	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	3b01      	subs	r3, #1
 800566a:	061b      	lsls	r3, r3, #24
 800566c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005670:	4931      	ldr	r1, [pc, #196]	; (8005738 <RCCEx_PLL2_Config+0x15c>)
 8005672:	4313      	orrs	r3, r2
 8005674:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005676:	4b30      	ldr	r3, [pc, #192]	; (8005738 <RCCEx_PLL2_Config+0x15c>)
 8005678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800567a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	492d      	ldr	r1, [pc, #180]	; (8005738 <RCCEx_PLL2_Config+0x15c>)
 8005684:	4313      	orrs	r3, r2
 8005686:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005688:	4b2b      	ldr	r3, [pc, #172]	; (8005738 <RCCEx_PLL2_Config+0x15c>)
 800568a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800568c:	f023 0220 	bic.w	r2, r3, #32
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	699b      	ldr	r3, [r3, #24]
 8005694:	4928      	ldr	r1, [pc, #160]	; (8005738 <RCCEx_PLL2_Config+0x15c>)
 8005696:	4313      	orrs	r3, r2
 8005698:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800569a:	4b27      	ldr	r3, [pc, #156]	; (8005738 <RCCEx_PLL2_Config+0x15c>)
 800569c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800569e:	4a26      	ldr	r2, [pc, #152]	; (8005738 <RCCEx_PLL2_Config+0x15c>)
 80056a0:	f023 0310 	bic.w	r3, r3, #16
 80056a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80056a6:	4b24      	ldr	r3, [pc, #144]	; (8005738 <RCCEx_PLL2_Config+0x15c>)
 80056a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056aa:	4b24      	ldr	r3, [pc, #144]	; (800573c <RCCEx_PLL2_Config+0x160>)
 80056ac:	4013      	ands	r3, r2
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	69d2      	ldr	r2, [r2, #28]
 80056b2:	00d2      	lsls	r2, r2, #3
 80056b4:	4920      	ldr	r1, [pc, #128]	; (8005738 <RCCEx_PLL2_Config+0x15c>)
 80056b6:	4313      	orrs	r3, r2
 80056b8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80056ba:	4b1f      	ldr	r3, [pc, #124]	; (8005738 <RCCEx_PLL2_Config+0x15c>)
 80056bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056be:	4a1e      	ldr	r2, [pc, #120]	; (8005738 <RCCEx_PLL2_Config+0x15c>)
 80056c0:	f043 0310 	orr.w	r3, r3, #16
 80056c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d106      	bne.n	80056da <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80056cc:	4b1a      	ldr	r3, [pc, #104]	; (8005738 <RCCEx_PLL2_Config+0x15c>)
 80056ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d0:	4a19      	ldr	r2, [pc, #100]	; (8005738 <RCCEx_PLL2_Config+0x15c>)
 80056d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80056d8:	e00f      	b.n	80056fa <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d106      	bne.n	80056ee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80056e0:	4b15      	ldr	r3, [pc, #84]	; (8005738 <RCCEx_PLL2_Config+0x15c>)
 80056e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e4:	4a14      	ldr	r2, [pc, #80]	; (8005738 <RCCEx_PLL2_Config+0x15c>)
 80056e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80056ec:	e005      	b.n	80056fa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80056ee:	4b12      	ldr	r3, [pc, #72]	; (8005738 <RCCEx_PLL2_Config+0x15c>)
 80056f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f2:	4a11      	ldr	r2, [pc, #68]	; (8005738 <RCCEx_PLL2_Config+0x15c>)
 80056f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80056f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80056fa:	4b0f      	ldr	r3, [pc, #60]	; (8005738 <RCCEx_PLL2_Config+0x15c>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a0e      	ldr	r2, [pc, #56]	; (8005738 <RCCEx_PLL2_Config+0x15c>)
 8005700:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005704:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005706:	f7fb ff19 	bl	800153c <HAL_GetTick>
 800570a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800570c:	e008      	b.n	8005720 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800570e:	f7fb ff15 	bl	800153c <HAL_GetTick>
 8005712:	4602      	mov	r2, r0
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	2b02      	cmp	r3, #2
 800571a:	d901      	bls.n	8005720 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	e006      	b.n	800572e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005720:	4b05      	ldr	r3, [pc, #20]	; (8005738 <RCCEx_PLL2_Config+0x15c>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d0f0      	beq.n	800570e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800572c:	7bfb      	ldrb	r3, [r7, #15]
}
 800572e:	4618      	mov	r0, r3
 8005730:	3710      	adds	r7, #16
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	58024400 	.word	0x58024400
 800573c:	ffff0007 	.word	0xffff0007

08005740 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800574a:	2300      	movs	r3, #0
 800574c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800574e:	4b53      	ldr	r3, [pc, #332]	; (800589c <RCCEx_PLL3_Config+0x15c>)
 8005750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005752:	f003 0303 	and.w	r3, r3, #3
 8005756:	2b03      	cmp	r3, #3
 8005758:	d101      	bne.n	800575e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e099      	b.n	8005892 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800575e:	4b4f      	ldr	r3, [pc, #316]	; (800589c <RCCEx_PLL3_Config+0x15c>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a4e      	ldr	r2, [pc, #312]	; (800589c <RCCEx_PLL3_Config+0x15c>)
 8005764:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005768:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800576a:	f7fb fee7 	bl	800153c <HAL_GetTick>
 800576e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005770:	e008      	b.n	8005784 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005772:	f7fb fee3 	bl	800153c <HAL_GetTick>
 8005776:	4602      	mov	r2, r0
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	2b02      	cmp	r3, #2
 800577e:	d901      	bls.n	8005784 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005780:	2303      	movs	r3, #3
 8005782:	e086      	b.n	8005892 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005784:	4b45      	ldr	r3, [pc, #276]	; (800589c <RCCEx_PLL3_Config+0x15c>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800578c:	2b00      	cmp	r3, #0
 800578e:	d1f0      	bne.n	8005772 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005790:	4b42      	ldr	r3, [pc, #264]	; (800589c <RCCEx_PLL3_Config+0x15c>)
 8005792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005794:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	051b      	lsls	r3, r3, #20
 800579e:	493f      	ldr	r1, [pc, #252]	; (800589c <RCCEx_PLL3_Config+0x15c>)
 80057a0:	4313      	orrs	r3, r2
 80057a2:	628b      	str	r3, [r1, #40]	; 0x28
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	3b01      	subs	r3, #1
 80057aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	3b01      	subs	r3, #1
 80057b4:	025b      	lsls	r3, r3, #9
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	431a      	orrs	r2, r3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	3b01      	subs	r3, #1
 80057c0:	041b      	lsls	r3, r3, #16
 80057c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80057c6:	431a      	orrs	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	3b01      	subs	r3, #1
 80057ce:	061b      	lsls	r3, r3, #24
 80057d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80057d4:	4931      	ldr	r1, [pc, #196]	; (800589c <RCCEx_PLL3_Config+0x15c>)
 80057d6:	4313      	orrs	r3, r2
 80057d8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80057da:	4b30      	ldr	r3, [pc, #192]	; (800589c <RCCEx_PLL3_Config+0x15c>)
 80057dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	695b      	ldr	r3, [r3, #20]
 80057e6:	492d      	ldr	r1, [pc, #180]	; (800589c <RCCEx_PLL3_Config+0x15c>)
 80057e8:	4313      	orrs	r3, r2
 80057ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80057ec:	4b2b      	ldr	r3, [pc, #172]	; (800589c <RCCEx_PLL3_Config+0x15c>)
 80057ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	699b      	ldr	r3, [r3, #24]
 80057f8:	4928      	ldr	r1, [pc, #160]	; (800589c <RCCEx_PLL3_Config+0x15c>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80057fe:	4b27      	ldr	r3, [pc, #156]	; (800589c <RCCEx_PLL3_Config+0x15c>)
 8005800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005802:	4a26      	ldr	r2, [pc, #152]	; (800589c <RCCEx_PLL3_Config+0x15c>)
 8005804:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005808:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800580a:	4b24      	ldr	r3, [pc, #144]	; (800589c <RCCEx_PLL3_Config+0x15c>)
 800580c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800580e:	4b24      	ldr	r3, [pc, #144]	; (80058a0 <RCCEx_PLL3_Config+0x160>)
 8005810:	4013      	ands	r3, r2
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	69d2      	ldr	r2, [r2, #28]
 8005816:	00d2      	lsls	r2, r2, #3
 8005818:	4920      	ldr	r1, [pc, #128]	; (800589c <RCCEx_PLL3_Config+0x15c>)
 800581a:	4313      	orrs	r3, r2
 800581c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800581e:	4b1f      	ldr	r3, [pc, #124]	; (800589c <RCCEx_PLL3_Config+0x15c>)
 8005820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005822:	4a1e      	ldr	r2, [pc, #120]	; (800589c <RCCEx_PLL3_Config+0x15c>)
 8005824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005828:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d106      	bne.n	800583e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005830:	4b1a      	ldr	r3, [pc, #104]	; (800589c <RCCEx_PLL3_Config+0x15c>)
 8005832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005834:	4a19      	ldr	r2, [pc, #100]	; (800589c <RCCEx_PLL3_Config+0x15c>)
 8005836:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800583a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800583c:	e00f      	b.n	800585e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	2b01      	cmp	r3, #1
 8005842:	d106      	bne.n	8005852 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005844:	4b15      	ldr	r3, [pc, #84]	; (800589c <RCCEx_PLL3_Config+0x15c>)
 8005846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005848:	4a14      	ldr	r2, [pc, #80]	; (800589c <RCCEx_PLL3_Config+0x15c>)
 800584a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800584e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005850:	e005      	b.n	800585e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005852:	4b12      	ldr	r3, [pc, #72]	; (800589c <RCCEx_PLL3_Config+0x15c>)
 8005854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005856:	4a11      	ldr	r2, [pc, #68]	; (800589c <RCCEx_PLL3_Config+0x15c>)
 8005858:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800585c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800585e:	4b0f      	ldr	r3, [pc, #60]	; (800589c <RCCEx_PLL3_Config+0x15c>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a0e      	ldr	r2, [pc, #56]	; (800589c <RCCEx_PLL3_Config+0x15c>)
 8005864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005868:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800586a:	f7fb fe67 	bl	800153c <HAL_GetTick>
 800586e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005870:	e008      	b.n	8005884 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005872:	f7fb fe63 	bl	800153c <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	2b02      	cmp	r3, #2
 800587e:	d901      	bls.n	8005884 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e006      	b.n	8005892 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005884:	4b05      	ldr	r3, [pc, #20]	; (800589c <RCCEx_PLL3_Config+0x15c>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d0f0      	beq.n	8005872 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005890:	7bfb      	ldrb	r3, [r7, #15]
}
 8005892:	4618      	mov	r0, r3
 8005894:	3710      	adds	r7, #16
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	58024400 	.word	0x58024400
 80058a0:	ffff0007 	.word	0xffff0007

080058a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b082      	sub	sp, #8
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d101      	bne.n	80058b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e049      	b.n	800594a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d106      	bne.n	80058d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f7fb fbcc 	bl	8001068 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2202      	movs	r2, #2
 80058d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	3304      	adds	r3, #4
 80058e0:	4619      	mov	r1, r3
 80058e2:	4610      	mov	r0, r2
 80058e4:	f000 fcba 	bl	800625c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3708      	adds	r7, #8
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}

08005952 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005952:	b580      	push	{r7, lr}
 8005954:	b082      	sub	sp, #8
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d101      	bne.n	8005964 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e049      	b.n	80059f8 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800596a:	b2db      	uxtb	r3, r3
 800596c:	2b00      	cmp	r3, #0
 800596e:	d106      	bne.n	800597e <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 f841 	bl	8005a00 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2202      	movs	r2, #2
 8005982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	3304      	adds	r3, #4
 800598e:	4619      	mov	r1, r3
 8005990:	4610      	mov	r0, r2
 8005992:	f000 fc63 	bl	800625c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2201      	movs	r2, #1
 800599a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2201      	movs	r2, #1
 80059a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2201      	movs	r2, #1
 80059ea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2201      	movs	r2, #1
 80059f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3708      	adds	r7, #8
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005a08:	bf00      	nop
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d104      	bne.n	8005a2e <HAL_TIM_IC_Start+0x1a>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	e023      	b.n	8005a76 <HAL_TIM_IC_Start+0x62>
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	2b04      	cmp	r3, #4
 8005a32:	d104      	bne.n	8005a3e <HAL_TIM_IC_Start+0x2a>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	e01b      	b.n	8005a76 <HAL_TIM_IC_Start+0x62>
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	2b08      	cmp	r3, #8
 8005a42:	d104      	bne.n	8005a4e <HAL_TIM_IC_Start+0x3a>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	e013      	b.n	8005a76 <HAL_TIM_IC_Start+0x62>
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	2b0c      	cmp	r3, #12
 8005a52:	d104      	bne.n	8005a5e <HAL_TIM_IC_Start+0x4a>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	e00b      	b.n	8005a76 <HAL_TIM_IC_Start+0x62>
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	2b10      	cmp	r3, #16
 8005a62:	d104      	bne.n	8005a6e <HAL_TIM_IC_Start+0x5a>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	e003      	b.n	8005a76 <HAL_TIM_IC_Start+0x62>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d104      	bne.n	8005a88 <HAL_TIM_IC_Start+0x74>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	e013      	b.n	8005ab0 <HAL_TIM_IC_Start+0x9c>
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	2b04      	cmp	r3, #4
 8005a8c:	d104      	bne.n	8005a98 <HAL_TIM_IC_Start+0x84>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	e00b      	b.n	8005ab0 <HAL_TIM_IC_Start+0x9c>
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	2b08      	cmp	r3, #8
 8005a9c:	d104      	bne.n	8005aa8 <HAL_TIM_IC_Start+0x94>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	e003      	b.n	8005ab0 <HAL_TIM_IC_Start+0x9c>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ab2:	7bfb      	ldrb	r3, [r7, #15]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d102      	bne.n	8005abe <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ab8:	7bbb      	ldrb	r3, [r7, #14]
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d001      	beq.n	8005ac2 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e097      	b.n	8005bf2 <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d104      	bne.n	8005ad2 <HAL_TIM_IC_Start+0xbe>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2202      	movs	r2, #2
 8005acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ad0:	e023      	b.n	8005b1a <HAL_TIM_IC_Start+0x106>
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	2b04      	cmp	r3, #4
 8005ad6:	d104      	bne.n	8005ae2 <HAL_TIM_IC_Start+0xce>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2202      	movs	r2, #2
 8005adc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ae0:	e01b      	b.n	8005b1a <HAL_TIM_IC_Start+0x106>
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	2b08      	cmp	r3, #8
 8005ae6:	d104      	bne.n	8005af2 <HAL_TIM_IC_Start+0xde>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2202      	movs	r2, #2
 8005aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005af0:	e013      	b.n	8005b1a <HAL_TIM_IC_Start+0x106>
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	2b0c      	cmp	r3, #12
 8005af6:	d104      	bne.n	8005b02 <HAL_TIM_IC_Start+0xee>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2202      	movs	r2, #2
 8005afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b00:	e00b      	b.n	8005b1a <HAL_TIM_IC_Start+0x106>
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	2b10      	cmp	r3, #16
 8005b06:	d104      	bne.n	8005b12 <HAL_TIM_IC_Start+0xfe>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b10:	e003      	b.n	8005b1a <HAL_TIM_IC_Start+0x106>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2202      	movs	r2, #2
 8005b16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d104      	bne.n	8005b2a <HAL_TIM_IC_Start+0x116>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2202      	movs	r2, #2
 8005b24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b28:	e013      	b.n	8005b52 <HAL_TIM_IC_Start+0x13e>
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	2b04      	cmp	r3, #4
 8005b2e:	d104      	bne.n	8005b3a <HAL_TIM_IC_Start+0x126>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2202      	movs	r2, #2
 8005b34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b38:	e00b      	b.n	8005b52 <HAL_TIM_IC_Start+0x13e>
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	2b08      	cmp	r3, #8
 8005b3e:	d104      	bne.n	8005b4a <HAL_TIM_IC_Start+0x136>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2202      	movs	r2, #2
 8005b44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b48:	e003      	b.n	8005b52 <HAL_TIM_IC_Start+0x13e>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2202      	movs	r2, #2
 8005b4e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2201      	movs	r2, #1
 8005b58:	6839      	ldr	r1, [r7, #0]
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f000 fde0 	bl	8006720 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a25      	ldr	r2, [pc, #148]	; (8005bfc <HAL_TIM_IC_Start+0x1e8>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d022      	beq.n	8005bb0 <HAL_TIM_IC_Start+0x19c>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b72:	d01d      	beq.n	8005bb0 <HAL_TIM_IC_Start+0x19c>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a21      	ldr	r2, [pc, #132]	; (8005c00 <HAL_TIM_IC_Start+0x1ec>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d018      	beq.n	8005bb0 <HAL_TIM_IC_Start+0x19c>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a20      	ldr	r2, [pc, #128]	; (8005c04 <HAL_TIM_IC_Start+0x1f0>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d013      	beq.n	8005bb0 <HAL_TIM_IC_Start+0x19c>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a1e      	ldr	r2, [pc, #120]	; (8005c08 <HAL_TIM_IC_Start+0x1f4>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d00e      	beq.n	8005bb0 <HAL_TIM_IC_Start+0x19c>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a1d      	ldr	r2, [pc, #116]	; (8005c0c <HAL_TIM_IC_Start+0x1f8>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d009      	beq.n	8005bb0 <HAL_TIM_IC_Start+0x19c>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a1b      	ldr	r2, [pc, #108]	; (8005c10 <HAL_TIM_IC_Start+0x1fc>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d004      	beq.n	8005bb0 <HAL_TIM_IC_Start+0x19c>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a1a      	ldr	r2, [pc, #104]	; (8005c14 <HAL_TIM_IC_Start+0x200>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d115      	bne.n	8005bdc <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	689a      	ldr	r2, [r3, #8]
 8005bb6:	4b18      	ldr	r3, [pc, #96]	; (8005c18 <HAL_TIM_IC_Start+0x204>)
 8005bb8:	4013      	ands	r3, r2
 8005bba:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	2b06      	cmp	r3, #6
 8005bc0:	d015      	beq.n	8005bee <HAL_TIM_IC_Start+0x1da>
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bc8:	d011      	beq.n	8005bee <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f042 0201 	orr.w	r2, r2, #1
 8005bd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bda:	e008      	b.n	8005bee <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f042 0201 	orr.w	r2, r2, #1
 8005bea:	601a      	str	r2, [r3, #0]
 8005bec:	e000      	b.n	8005bf0 <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3710      	adds	r7, #16
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	40010000 	.word	0x40010000
 8005c00:	40000400 	.word	0x40000400
 8005c04:	40000800 	.word	0x40000800
 8005c08:	40000c00 	.word	0x40000c00
 8005c0c:	40010400 	.word	0x40010400
 8005c10:	40001800 	.word	0x40001800
 8005c14:	40014000 	.word	0x40014000
 8005c18:	00010007 	.word	0x00010007

08005c1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	f003 0302 	and.w	r3, r3, #2
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d122      	bne.n	8005c78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	f003 0302 	and.w	r3, r3, #2
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d11b      	bne.n	8005c78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f06f 0202 	mvn.w	r2, #2
 8005c48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	699b      	ldr	r3, [r3, #24]
 8005c56:	f003 0303 	and.w	r3, r3, #3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d003      	beq.n	8005c66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f7fa fdc6 	bl	80007f0 <HAL_TIM_IC_CaptureCallback>
 8005c64:	e005      	b.n	8005c72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 fada 	bl	8006220 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f000 fae1 	bl	8006234 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	f003 0304 	and.w	r3, r3, #4
 8005c82:	2b04      	cmp	r3, #4
 8005c84:	d122      	bne.n	8005ccc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	f003 0304 	and.w	r3, r3, #4
 8005c90:	2b04      	cmp	r3, #4
 8005c92:	d11b      	bne.n	8005ccc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f06f 0204 	mvn.w	r2, #4
 8005c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2202      	movs	r2, #2
 8005ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	699b      	ldr	r3, [r3, #24]
 8005caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d003      	beq.n	8005cba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f7fa fd9c 	bl	80007f0 <HAL_TIM_IC_CaptureCallback>
 8005cb8:	e005      	b.n	8005cc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 fab0 	bl	8006220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 fab7 	bl	8006234 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	f003 0308 	and.w	r3, r3, #8
 8005cd6:	2b08      	cmp	r3, #8
 8005cd8:	d122      	bne.n	8005d20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	f003 0308 	and.w	r3, r3, #8
 8005ce4:	2b08      	cmp	r3, #8
 8005ce6:	d11b      	bne.n	8005d20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f06f 0208 	mvn.w	r2, #8
 8005cf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2204      	movs	r2, #4
 8005cf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	69db      	ldr	r3, [r3, #28]
 8005cfe:	f003 0303 	and.w	r3, r3, #3
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d003      	beq.n	8005d0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f7fa fd72 	bl	80007f0 <HAL_TIM_IC_CaptureCallback>
 8005d0c:	e005      	b.n	8005d1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 fa86 	bl	8006220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 fa8d 	bl	8006234 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	f003 0310 	and.w	r3, r3, #16
 8005d2a:	2b10      	cmp	r3, #16
 8005d2c:	d122      	bne.n	8005d74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	f003 0310 	and.w	r3, r3, #16
 8005d38:	2b10      	cmp	r3, #16
 8005d3a:	d11b      	bne.n	8005d74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f06f 0210 	mvn.w	r2, #16
 8005d44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2208      	movs	r2, #8
 8005d4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	69db      	ldr	r3, [r3, #28]
 8005d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d003      	beq.n	8005d62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f7fa fd48 	bl	80007f0 <HAL_TIM_IC_CaptureCallback>
 8005d60:	e005      	b.n	8005d6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 fa5c 	bl	8006220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 fa63 	bl	8006234 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	f003 0301 	and.w	r3, r3, #1
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d10e      	bne.n	8005da0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	f003 0301 	and.w	r3, r3, #1
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d107      	bne.n	8005da0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f06f 0201 	mvn.w	r2, #1
 8005d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 fa36 	bl	800620c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005daa:	2b80      	cmp	r3, #128	; 0x80
 8005dac:	d10e      	bne.n	8005dcc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005db8:	2b80      	cmp	r3, #128	; 0x80
 8005dba:	d107      	bne.n	8005dcc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 fd68 	bl	800689c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dda:	d10e      	bne.n	8005dfa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005de6:	2b80      	cmp	r3, #128	; 0x80
 8005de8:	d107      	bne.n	8005dfa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005df2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f000 fd5b 	bl	80068b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e04:	2b40      	cmp	r3, #64	; 0x40
 8005e06:	d10e      	bne.n	8005e26 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e12:	2b40      	cmp	r3, #64	; 0x40
 8005e14:	d107      	bne.n	8005e26 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 fa11 	bl	8006248 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	f003 0320 	and.w	r3, r3, #32
 8005e30:	2b20      	cmp	r3, #32
 8005e32:	d10e      	bne.n	8005e52 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	f003 0320 	and.w	r3, r3, #32
 8005e3e:	2b20      	cmp	r3, #32
 8005e40:	d107      	bne.n	8005e52 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f06f 0220 	mvn.w	r2, #32
 8005e4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 fd1b 	bl	8006888 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e52:	bf00      	nop
 8005e54:	3708      	adds	r7, #8
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}

08005e5a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005e5a:	b580      	push	{r7, lr}
 8005e5c:	b086      	sub	sp, #24
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	60f8      	str	r0, [r7, #12]
 8005e62:	60b9      	str	r1, [r7, #8]
 8005e64:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e66:	2300      	movs	r3, #0
 8005e68:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d101      	bne.n	8005e78 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005e74:	2302      	movs	r3, #2
 8005e76:	e088      	b.n	8005f8a <HAL_TIM_IC_ConfigChannel+0x130>
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d11b      	bne.n	8005ebe <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6818      	ldr	r0, [r3, #0]
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	6819      	ldr	r1, [r3, #0]
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	685a      	ldr	r2, [r3, #4]
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	f000 fa7b 	bl	8006390 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	699a      	ldr	r2, [r3, #24]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f022 020c 	bic.w	r2, r2, #12
 8005ea8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	6999      	ldr	r1, [r3, #24]
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	689a      	ldr	r2, [r3, #8]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	430a      	orrs	r2, r1
 8005eba:	619a      	str	r2, [r3, #24]
 8005ebc:	e060      	b.n	8005f80 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2b04      	cmp	r3, #4
 8005ec2:	d11c      	bne.n	8005efe <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6818      	ldr	r0, [r3, #0]
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	6819      	ldr	r1, [r3, #0]
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	685a      	ldr	r2, [r3, #4]
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	f000 faff 	bl	80064d6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	699a      	ldr	r2, [r3, #24]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005ee6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	6999      	ldr	r1, [r3, #24]
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	021a      	lsls	r2, r3, #8
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	430a      	orrs	r2, r1
 8005efa:	619a      	str	r2, [r3, #24]
 8005efc:	e040      	b.n	8005f80 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2b08      	cmp	r3, #8
 8005f02:	d11b      	bne.n	8005f3c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6818      	ldr	r0, [r3, #0]
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	6819      	ldr	r1, [r3, #0]
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	685a      	ldr	r2, [r3, #4]
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	f000 fb4c 	bl	80065b0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	69da      	ldr	r2, [r3, #28]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f022 020c 	bic.w	r2, r2, #12
 8005f26:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	69d9      	ldr	r1, [r3, #28]
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	689a      	ldr	r2, [r3, #8]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	430a      	orrs	r2, r1
 8005f38:	61da      	str	r2, [r3, #28]
 8005f3a:	e021      	b.n	8005f80 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2b0c      	cmp	r3, #12
 8005f40:	d11c      	bne.n	8005f7c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6818      	ldr	r0, [r3, #0]
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	6819      	ldr	r1, [r3, #0]
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	685a      	ldr	r2, [r3, #4]
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	f000 fb69 	bl	8006628 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	69da      	ldr	r2, [r3, #28]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005f64:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	69d9      	ldr	r1, [r3, #28]
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	021a      	lsls	r2, r3, #8
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	430a      	orrs	r2, r1
 8005f78:	61da      	str	r2, [r3, #28]
 8005f7a:	e001      	b.n	8005f80 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f88:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3718      	adds	r7, #24
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
	...

08005f94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d101      	bne.n	8005fb0 <HAL_TIM_ConfigClockSource+0x1c>
 8005fac:	2302      	movs	r3, #2
 8005fae:	e0dc      	b.n	800616a <HAL_TIM_ConfigClockSource+0x1d6>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2202      	movs	r2, #2
 8005fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005fc8:	68ba      	ldr	r2, [r7, #8]
 8005fca:	4b6a      	ldr	r3, [pc, #424]	; (8006174 <HAL_TIM_ConfigClockSource+0x1e0>)
 8005fcc:	4013      	ands	r3, r2
 8005fce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68ba      	ldr	r2, [r7, #8]
 8005fde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a64      	ldr	r2, [pc, #400]	; (8006178 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	f000 80a9 	beq.w	800613e <HAL_TIM_ConfigClockSource+0x1aa>
 8005fec:	4a62      	ldr	r2, [pc, #392]	; (8006178 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	f200 80ae 	bhi.w	8006150 <HAL_TIM_ConfigClockSource+0x1bc>
 8005ff4:	4a61      	ldr	r2, [pc, #388]	; (800617c <HAL_TIM_ConfigClockSource+0x1e8>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	f000 80a1 	beq.w	800613e <HAL_TIM_ConfigClockSource+0x1aa>
 8005ffc:	4a5f      	ldr	r2, [pc, #380]	; (800617c <HAL_TIM_ConfigClockSource+0x1e8>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	f200 80a6 	bhi.w	8006150 <HAL_TIM_ConfigClockSource+0x1bc>
 8006004:	4a5e      	ldr	r2, [pc, #376]	; (8006180 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006006:	4293      	cmp	r3, r2
 8006008:	f000 8099 	beq.w	800613e <HAL_TIM_ConfigClockSource+0x1aa>
 800600c:	4a5c      	ldr	r2, [pc, #368]	; (8006180 <HAL_TIM_ConfigClockSource+0x1ec>)
 800600e:	4293      	cmp	r3, r2
 8006010:	f200 809e 	bhi.w	8006150 <HAL_TIM_ConfigClockSource+0x1bc>
 8006014:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006018:	f000 8091 	beq.w	800613e <HAL_TIM_ConfigClockSource+0x1aa>
 800601c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006020:	f200 8096 	bhi.w	8006150 <HAL_TIM_ConfigClockSource+0x1bc>
 8006024:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006028:	f000 8089 	beq.w	800613e <HAL_TIM_ConfigClockSource+0x1aa>
 800602c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006030:	f200 808e 	bhi.w	8006150 <HAL_TIM_ConfigClockSource+0x1bc>
 8006034:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006038:	d03e      	beq.n	80060b8 <HAL_TIM_ConfigClockSource+0x124>
 800603a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800603e:	f200 8087 	bhi.w	8006150 <HAL_TIM_ConfigClockSource+0x1bc>
 8006042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006046:	f000 8086 	beq.w	8006156 <HAL_TIM_ConfigClockSource+0x1c2>
 800604a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800604e:	d87f      	bhi.n	8006150 <HAL_TIM_ConfigClockSource+0x1bc>
 8006050:	2b70      	cmp	r3, #112	; 0x70
 8006052:	d01a      	beq.n	800608a <HAL_TIM_ConfigClockSource+0xf6>
 8006054:	2b70      	cmp	r3, #112	; 0x70
 8006056:	d87b      	bhi.n	8006150 <HAL_TIM_ConfigClockSource+0x1bc>
 8006058:	2b60      	cmp	r3, #96	; 0x60
 800605a:	d050      	beq.n	80060fe <HAL_TIM_ConfigClockSource+0x16a>
 800605c:	2b60      	cmp	r3, #96	; 0x60
 800605e:	d877      	bhi.n	8006150 <HAL_TIM_ConfigClockSource+0x1bc>
 8006060:	2b50      	cmp	r3, #80	; 0x50
 8006062:	d03c      	beq.n	80060de <HAL_TIM_ConfigClockSource+0x14a>
 8006064:	2b50      	cmp	r3, #80	; 0x50
 8006066:	d873      	bhi.n	8006150 <HAL_TIM_ConfigClockSource+0x1bc>
 8006068:	2b40      	cmp	r3, #64	; 0x40
 800606a:	d058      	beq.n	800611e <HAL_TIM_ConfigClockSource+0x18a>
 800606c:	2b40      	cmp	r3, #64	; 0x40
 800606e:	d86f      	bhi.n	8006150 <HAL_TIM_ConfigClockSource+0x1bc>
 8006070:	2b30      	cmp	r3, #48	; 0x30
 8006072:	d064      	beq.n	800613e <HAL_TIM_ConfigClockSource+0x1aa>
 8006074:	2b30      	cmp	r3, #48	; 0x30
 8006076:	d86b      	bhi.n	8006150 <HAL_TIM_ConfigClockSource+0x1bc>
 8006078:	2b20      	cmp	r3, #32
 800607a:	d060      	beq.n	800613e <HAL_TIM_ConfigClockSource+0x1aa>
 800607c:	2b20      	cmp	r3, #32
 800607e:	d867      	bhi.n	8006150 <HAL_TIM_ConfigClockSource+0x1bc>
 8006080:	2b00      	cmp	r3, #0
 8006082:	d05c      	beq.n	800613e <HAL_TIM_ConfigClockSource+0x1aa>
 8006084:	2b10      	cmp	r3, #16
 8006086:	d05a      	beq.n	800613e <HAL_TIM_ConfigClockSource+0x1aa>
 8006088:	e062      	b.n	8006150 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6818      	ldr	r0, [r3, #0]
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	6899      	ldr	r1, [r3, #8]
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	685a      	ldr	r2, [r3, #4]
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	f000 fb21 	bl	80066e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80060ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68ba      	ldr	r2, [r7, #8]
 80060b4:	609a      	str	r2, [r3, #8]
      break;
 80060b6:	e04f      	b.n	8006158 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6818      	ldr	r0, [r3, #0]
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	6899      	ldr	r1, [r3, #8]
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	685a      	ldr	r2, [r3, #4]
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	f000 fb0a 	bl	80066e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	689a      	ldr	r2, [r3, #8]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060da:	609a      	str	r2, [r3, #8]
      break;
 80060dc:	e03c      	b.n	8006158 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6818      	ldr	r0, [r3, #0]
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	6859      	ldr	r1, [r3, #4]
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	461a      	mov	r2, r3
 80060ec:	f000 f9c4 	bl	8006478 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2150      	movs	r1, #80	; 0x50
 80060f6:	4618      	mov	r0, r3
 80060f8:	f000 fad4 	bl	80066a4 <TIM_ITRx_SetConfig>
      break;
 80060fc:	e02c      	b.n	8006158 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6818      	ldr	r0, [r3, #0]
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	6859      	ldr	r1, [r3, #4]
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	461a      	mov	r2, r3
 800610c:	f000 fa20 	bl	8006550 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2160      	movs	r1, #96	; 0x60
 8006116:	4618      	mov	r0, r3
 8006118:	f000 fac4 	bl	80066a4 <TIM_ITRx_SetConfig>
      break;
 800611c:	e01c      	b.n	8006158 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6818      	ldr	r0, [r3, #0]
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	6859      	ldr	r1, [r3, #4]
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	461a      	mov	r2, r3
 800612c:	f000 f9a4 	bl	8006478 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2140      	movs	r1, #64	; 0x40
 8006136:	4618      	mov	r0, r3
 8006138:	f000 fab4 	bl	80066a4 <TIM_ITRx_SetConfig>
      break;
 800613c:	e00c      	b.n	8006158 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4619      	mov	r1, r3
 8006148:	4610      	mov	r0, r2
 800614a:	f000 faab 	bl	80066a4 <TIM_ITRx_SetConfig>
      break;
 800614e:	e003      	b.n	8006158 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	73fb      	strb	r3, [r7, #15]
      break;
 8006154:	e000      	b.n	8006158 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8006156:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006168:	7bfb      	ldrb	r3, [r7, #15]
}
 800616a:	4618      	mov	r0, r3
 800616c:	3710      	adds	r7, #16
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	ffceff88 	.word	0xffceff88
 8006178:	00100040 	.word	0x00100040
 800617c:	00100030 	.word	0x00100030
 8006180:	00100020 	.word	0x00100020

08006184 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006184:	b480      	push	{r7}
 8006186:	b085      	sub	sp, #20
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800618e:	2300      	movs	r3, #0
 8006190:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	2b0c      	cmp	r3, #12
 8006196:	d831      	bhi.n	80061fc <HAL_TIM_ReadCapturedValue+0x78>
 8006198:	a201      	add	r2, pc, #4	; (adr r2, 80061a0 <HAL_TIM_ReadCapturedValue+0x1c>)
 800619a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800619e:	bf00      	nop
 80061a0:	080061d5 	.word	0x080061d5
 80061a4:	080061fd 	.word	0x080061fd
 80061a8:	080061fd 	.word	0x080061fd
 80061ac:	080061fd 	.word	0x080061fd
 80061b0:	080061df 	.word	0x080061df
 80061b4:	080061fd 	.word	0x080061fd
 80061b8:	080061fd 	.word	0x080061fd
 80061bc:	080061fd 	.word	0x080061fd
 80061c0:	080061e9 	.word	0x080061e9
 80061c4:	080061fd 	.word	0x080061fd
 80061c8:	080061fd 	.word	0x080061fd
 80061cc:	080061fd 	.word	0x080061fd
 80061d0:	080061f3 	.word	0x080061f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061da:	60fb      	str	r3, [r7, #12]

      break;
 80061dc:	e00f      	b.n	80061fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e4:	60fb      	str	r3, [r7, #12]

      break;
 80061e6:	e00a      	b.n	80061fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ee:	60fb      	str	r3, [r7, #12]

      break;
 80061f0:	e005      	b.n	80061fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f8:	60fb      	str	r3, [r7, #12]

      break;
 80061fa:	e000      	b.n	80061fe <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80061fc:	bf00      	nop
  }

  return tmpreg;
 80061fe:	68fb      	ldr	r3, [r7, #12]
}
 8006200:	4618      	mov	r0, r3
 8006202:	3714      	adds	r7, #20
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006214:	bf00      	nop
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006228:	bf00      	nop
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800623c:	bf00      	nop
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006250:	bf00      	nop
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800625c:	b480      	push	{r7}
 800625e:	b085      	sub	sp, #20
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a40      	ldr	r2, [pc, #256]	; (8006370 <TIM_Base_SetConfig+0x114>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d013      	beq.n	800629c <TIM_Base_SetConfig+0x40>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800627a:	d00f      	beq.n	800629c <TIM_Base_SetConfig+0x40>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a3d      	ldr	r2, [pc, #244]	; (8006374 <TIM_Base_SetConfig+0x118>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d00b      	beq.n	800629c <TIM_Base_SetConfig+0x40>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a3c      	ldr	r2, [pc, #240]	; (8006378 <TIM_Base_SetConfig+0x11c>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d007      	beq.n	800629c <TIM_Base_SetConfig+0x40>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a3b      	ldr	r2, [pc, #236]	; (800637c <TIM_Base_SetConfig+0x120>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d003      	beq.n	800629c <TIM_Base_SetConfig+0x40>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a3a      	ldr	r2, [pc, #232]	; (8006380 <TIM_Base_SetConfig+0x124>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d108      	bne.n	80062ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a2f      	ldr	r2, [pc, #188]	; (8006370 <TIM_Base_SetConfig+0x114>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d01f      	beq.n	80062f6 <TIM_Base_SetConfig+0x9a>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062bc:	d01b      	beq.n	80062f6 <TIM_Base_SetConfig+0x9a>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a2c      	ldr	r2, [pc, #176]	; (8006374 <TIM_Base_SetConfig+0x118>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d017      	beq.n	80062f6 <TIM_Base_SetConfig+0x9a>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a2b      	ldr	r2, [pc, #172]	; (8006378 <TIM_Base_SetConfig+0x11c>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d013      	beq.n	80062f6 <TIM_Base_SetConfig+0x9a>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a2a      	ldr	r2, [pc, #168]	; (800637c <TIM_Base_SetConfig+0x120>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d00f      	beq.n	80062f6 <TIM_Base_SetConfig+0x9a>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a29      	ldr	r2, [pc, #164]	; (8006380 <TIM_Base_SetConfig+0x124>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d00b      	beq.n	80062f6 <TIM_Base_SetConfig+0x9a>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a28      	ldr	r2, [pc, #160]	; (8006384 <TIM_Base_SetConfig+0x128>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d007      	beq.n	80062f6 <TIM_Base_SetConfig+0x9a>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a27      	ldr	r2, [pc, #156]	; (8006388 <TIM_Base_SetConfig+0x12c>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d003      	beq.n	80062f6 <TIM_Base_SetConfig+0x9a>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a26      	ldr	r2, [pc, #152]	; (800638c <TIM_Base_SetConfig+0x130>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d108      	bne.n	8006308 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	4313      	orrs	r3, r2
 8006306:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	695b      	ldr	r3, [r3, #20]
 8006312:	4313      	orrs	r3, r2
 8006314:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	689a      	ldr	r2, [r3, #8]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4a10      	ldr	r2, [pc, #64]	; (8006370 <TIM_Base_SetConfig+0x114>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d00f      	beq.n	8006354 <TIM_Base_SetConfig+0xf8>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a12      	ldr	r2, [pc, #72]	; (8006380 <TIM_Base_SetConfig+0x124>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d00b      	beq.n	8006354 <TIM_Base_SetConfig+0xf8>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a11      	ldr	r2, [pc, #68]	; (8006384 <TIM_Base_SetConfig+0x128>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d007      	beq.n	8006354 <TIM_Base_SetConfig+0xf8>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a10      	ldr	r2, [pc, #64]	; (8006388 <TIM_Base_SetConfig+0x12c>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d003      	beq.n	8006354 <TIM_Base_SetConfig+0xf8>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a0f      	ldr	r2, [pc, #60]	; (800638c <TIM_Base_SetConfig+0x130>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d103      	bne.n	800635c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	691a      	ldr	r2, [r3, #16]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	615a      	str	r2, [r3, #20]
}
 8006362:	bf00      	nop
 8006364:	3714      	adds	r7, #20
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr
 800636e:	bf00      	nop
 8006370:	40010000 	.word	0x40010000
 8006374:	40000400 	.word	0x40000400
 8006378:	40000800 	.word	0x40000800
 800637c:	40000c00 	.word	0x40000c00
 8006380:	40010400 	.word	0x40010400
 8006384:	40014000 	.word	0x40014000
 8006388:	40014400 	.word	0x40014400
 800638c:	40014800 	.word	0x40014800

08006390 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006390:	b480      	push	{r7}
 8006392:	b087      	sub	sp, #28
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	607a      	str	r2, [r7, #4]
 800639c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6a1b      	ldr	r3, [r3, #32]
 80063a2:	f023 0201 	bic.w	r2, r3, #1
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6a1b      	ldr	r3, [r3, #32]
 80063b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	4a28      	ldr	r2, [pc, #160]	; (800645c <TIM_TI1_SetConfig+0xcc>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d01b      	beq.n	80063f6 <TIM_TI1_SetConfig+0x66>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063c4:	d017      	beq.n	80063f6 <TIM_TI1_SetConfig+0x66>
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	4a25      	ldr	r2, [pc, #148]	; (8006460 <TIM_TI1_SetConfig+0xd0>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d013      	beq.n	80063f6 <TIM_TI1_SetConfig+0x66>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	4a24      	ldr	r2, [pc, #144]	; (8006464 <TIM_TI1_SetConfig+0xd4>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d00f      	beq.n	80063f6 <TIM_TI1_SetConfig+0x66>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	4a23      	ldr	r2, [pc, #140]	; (8006468 <TIM_TI1_SetConfig+0xd8>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d00b      	beq.n	80063f6 <TIM_TI1_SetConfig+0x66>
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	4a22      	ldr	r2, [pc, #136]	; (800646c <TIM_TI1_SetConfig+0xdc>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d007      	beq.n	80063f6 <TIM_TI1_SetConfig+0x66>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	4a21      	ldr	r2, [pc, #132]	; (8006470 <TIM_TI1_SetConfig+0xe0>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d003      	beq.n	80063f6 <TIM_TI1_SetConfig+0x66>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	4a20      	ldr	r2, [pc, #128]	; (8006474 <TIM_TI1_SetConfig+0xe4>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d101      	bne.n	80063fa <TIM_TI1_SetConfig+0x6a>
 80063f6:	2301      	movs	r3, #1
 80063f8:	e000      	b.n	80063fc <TIM_TI1_SetConfig+0x6c>
 80063fa:	2300      	movs	r3, #0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d008      	beq.n	8006412 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	f023 0303 	bic.w	r3, r3, #3
 8006406:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006408:	697a      	ldr	r2, [r7, #20]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4313      	orrs	r3, r2
 800640e:	617b      	str	r3, [r7, #20]
 8006410:	e003      	b.n	800641a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	f043 0301 	orr.w	r3, r3, #1
 8006418:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006420:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	011b      	lsls	r3, r3, #4
 8006426:	b2db      	uxtb	r3, r3
 8006428:	697a      	ldr	r2, [r7, #20]
 800642a:	4313      	orrs	r3, r2
 800642c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	f023 030a 	bic.w	r3, r3, #10
 8006434:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	f003 030a 	and.w	r3, r3, #10
 800643c:	693a      	ldr	r2, [r7, #16]
 800643e:	4313      	orrs	r3, r2
 8006440:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	697a      	ldr	r2, [r7, #20]
 8006446:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	693a      	ldr	r2, [r7, #16]
 800644c:	621a      	str	r2, [r3, #32]
}
 800644e:	bf00      	nop
 8006450:	371c      	adds	r7, #28
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop
 800645c:	40010000 	.word	0x40010000
 8006460:	40000400 	.word	0x40000400
 8006464:	40000800 	.word	0x40000800
 8006468:	40000c00 	.word	0x40000c00
 800646c:	40010400 	.word	0x40010400
 8006470:	40001800 	.word	0x40001800
 8006474:	40014000 	.word	0x40014000

08006478 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006478:	b480      	push	{r7}
 800647a:	b087      	sub	sp, #28
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6a1b      	ldr	r3, [r3, #32]
 8006488:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6a1b      	ldr	r3, [r3, #32]
 800648e:	f023 0201 	bic.w	r2, r3, #1
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	699b      	ldr	r3, [r3, #24]
 800649a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	011b      	lsls	r3, r3, #4
 80064a8:	693a      	ldr	r2, [r7, #16]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	f023 030a 	bic.w	r3, r3, #10
 80064b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064b6:	697a      	ldr	r2, [r7, #20]
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	693a      	ldr	r2, [r7, #16]
 80064c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	697a      	ldr	r2, [r7, #20]
 80064c8:	621a      	str	r2, [r3, #32]
}
 80064ca:	bf00      	nop
 80064cc:	371c      	adds	r7, #28
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr

080064d6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80064d6:	b480      	push	{r7}
 80064d8:	b087      	sub	sp, #28
 80064da:	af00      	add	r7, sp, #0
 80064dc:	60f8      	str	r0, [r7, #12]
 80064de:	60b9      	str	r1, [r7, #8]
 80064e0:	607a      	str	r2, [r7, #4]
 80064e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6a1b      	ldr	r3, [r3, #32]
 80064e8:	f023 0210 	bic.w	r2, r3, #16
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	699b      	ldr	r3, [r3, #24]
 80064f4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6a1b      	ldr	r3, [r3, #32]
 80064fa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006502:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	021b      	lsls	r3, r3, #8
 8006508:	697a      	ldr	r2, [r7, #20]
 800650a:	4313      	orrs	r3, r2
 800650c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006514:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	031b      	lsls	r3, r3, #12
 800651a:	b29b      	uxth	r3, r3
 800651c:	697a      	ldr	r2, [r7, #20]
 800651e:	4313      	orrs	r3, r2
 8006520:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006528:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	011b      	lsls	r3, r3, #4
 800652e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006532:	693a      	ldr	r2, [r7, #16]
 8006534:	4313      	orrs	r3, r2
 8006536:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	697a      	ldr	r2, [r7, #20]
 800653c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	693a      	ldr	r2, [r7, #16]
 8006542:	621a      	str	r2, [r3, #32]
}
 8006544:	bf00      	nop
 8006546:	371c      	adds	r7, #28
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006550:	b480      	push	{r7}
 8006552:	b087      	sub	sp, #28
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6a1b      	ldr	r3, [r3, #32]
 8006560:	f023 0210 	bic.w	r2, r3, #16
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	699b      	ldr	r3, [r3, #24]
 800656c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6a1b      	ldr	r3, [r3, #32]
 8006572:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800657a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	031b      	lsls	r3, r3, #12
 8006580:	697a      	ldr	r2, [r7, #20]
 8006582:	4313      	orrs	r3, r2
 8006584:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800658c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	011b      	lsls	r3, r3, #4
 8006592:	693a      	ldr	r2, [r7, #16]
 8006594:	4313      	orrs	r3, r2
 8006596:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	697a      	ldr	r2, [r7, #20]
 800659c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	693a      	ldr	r2, [r7, #16]
 80065a2:	621a      	str	r2, [r3, #32]
}
 80065a4:	bf00      	nop
 80065a6:	371c      	adds	r7, #28
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b087      	sub	sp, #28
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
 80065bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6a1b      	ldr	r3, [r3, #32]
 80065c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	69db      	ldr	r3, [r3, #28]
 80065ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	6a1b      	ldr	r3, [r3, #32]
 80065d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	f023 0303 	bic.w	r3, r3, #3
 80065dc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80065de:	697a      	ldr	r2, [r7, #20]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065ec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	011b      	lsls	r3, r3, #4
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	697a      	ldr	r2, [r7, #20]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006600:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	021b      	lsls	r3, r3, #8
 8006606:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800660a:	693a      	ldr	r2, [r7, #16]
 800660c:	4313      	orrs	r3, r2
 800660e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	697a      	ldr	r2, [r7, #20]
 8006614:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	693a      	ldr	r2, [r7, #16]
 800661a:	621a      	str	r2, [r3, #32]
}
 800661c:	bf00      	nop
 800661e:	371c      	adds	r7, #28
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006628:	b480      	push	{r7}
 800662a:	b087      	sub	sp, #28
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	607a      	str	r2, [r7, #4]
 8006634:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6a1b      	ldr	r3, [r3, #32]
 800663a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	69db      	ldr	r3, [r3, #28]
 8006646:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6a1b      	ldr	r3, [r3, #32]
 800664c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006654:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	021b      	lsls	r3, r3, #8
 800665a:	697a      	ldr	r2, [r7, #20]
 800665c:	4313      	orrs	r3, r2
 800665e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006666:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	031b      	lsls	r3, r3, #12
 800666c:	b29b      	uxth	r3, r3
 800666e:	697a      	ldr	r2, [r7, #20]
 8006670:	4313      	orrs	r3, r2
 8006672:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800667a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	031b      	lsls	r3, r3, #12
 8006680:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006684:	693a      	ldr	r2, [r7, #16]
 8006686:	4313      	orrs	r3, r2
 8006688:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	697a      	ldr	r2, [r7, #20]
 800668e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	693a      	ldr	r2, [r7, #16]
 8006694:	621a      	str	r2, [r3, #32]
}
 8006696:	bf00      	nop
 8006698:	371c      	adds	r7, #28
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr
	...

080066a4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b085      	sub	sp, #20
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	4b09      	ldr	r3, [pc, #36]	; (80066dc <TIM_ITRx_SetConfig+0x38>)
 80066b8:	4013      	ands	r3, r2
 80066ba:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066bc:	683a      	ldr	r2, [r7, #0]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	f043 0307 	orr.w	r3, r3, #7
 80066c6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	68fa      	ldr	r2, [r7, #12]
 80066cc:	609a      	str	r2, [r3, #8]
}
 80066ce:	bf00      	nop
 80066d0:	3714      	adds	r7, #20
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr
 80066da:	bf00      	nop
 80066dc:	ffcfff8f 	.word	0xffcfff8f

080066e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b087      	sub	sp, #28
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	607a      	str	r2, [r7, #4]
 80066ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	021a      	lsls	r2, r3, #8
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	431a      	orrs	r2, r3
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	4313      	orrs	r3, r2
 8006708:	697a      	ldr	r2, [r7, #20]
 800670a:	4313      	orrs	r3, r2
 800670c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	697a      	ldr	r2, [r7, #20]
 8006712:	609a      	str	r2, [r3, #8]
}
 8006714:	bf00      	nop
 8006716:	371c      	adds	r7, #28
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006720:	b480      	push	{r7}
 8006722:	b087      	sub	sp, #28
 8006724:	af00      	add	r7, sp, #0
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	f003 031f 	and.w	r3, r3, #31
 8006732:	2201      	movs	r2, #1
 8006734:	fa02 f303 	lsl.w	r3, r2, r3
 8006738:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6a1a      	ldr	r2, [r3, #32]
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	43db      	mvns	r3, r3
 8006742:	401a      	ands	r2, r3
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6a1a      	ldr	r2, [r3, #32]
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	f003 031f 	and.w	r3, r3, #31
 8006752:	6879      	ldr	r1, [r7, #4]
 8006754:	fa01 f303 	lsl.w	r3, r1, r3
 8006758:	431a      	orrs	r2, r3
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	621a      	str	r2, [r3, #32]
}
 800675e:	bf00      	nop
 8006760:	371c      	adds	r7, #28
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
	...

0800676c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800676c:	b480      	push	{r7}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800677c:	2b01      	cmp	r3, #1
 800677e:	d101      	bne.n	8006784 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006780:	2302      	movs	r3, #2
 8006782:	e06d      	b.n	8006860 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2202      	movs	r2, #2
 8006790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a30      	ldr	r2, [pc, #192]	; (800686c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d004      	beq.n	80067b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a2f      	ldr	r2, [pc, #188]	; (8006870 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d108      	bne.n	80067ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80067be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	4313      	orrs	r3, r2
 80067da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68fa      	ldr	r2, [r7, #12]
 80067e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a20      	ldr	r2, [pc, #128]	; (800686c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d022      	beq.n	8006834 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067f6:	d01d      	beq.n	8006834 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a1d      	ldr	r2, [pc, #116]	; (8006874 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d018      	beq.n	8006834 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a1c      	ldr	r2, [pc, #112]	; (8006878 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d013      	beq.n	8006834 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a1a      	ldr	r2, [pc, #104]	; (800687c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d00e      	beq.n	8006834 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a15      	ldr	r2, [pc, #84]	; (8006870 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d009      	beq.n	8006834 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a16      	ldr	r2, [pc, #88]	; (8006880 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d004      	beq.n	8006834 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a15      	ldr	r2, [pc, #84]	; (8006884 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d10c      	bne.n	800684e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800683a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	68ba      	ldr	r2, [r7, #8]
 8006842:	4313      	orrs	r3, r2
 8006844:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68ba      	ldr	r2, [r7, #8]
 800684c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2201      	movs	r2, #1
 8006852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800685e:	2300      	movs	r3, #0
}
 8006860:	4618      	mov	r0, r3
 8006862:	3714      	adds	r7, #20
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr
 800686c:	40010000 	.word	0x40010000
 8006870:	40010400 	.word	0x40010400
 8006874:	40000400 	.word	0x40000400
 8006878:	40000800 	.word	0x40000800
 800687c:	40000c00 	.word	0x40000c00
 8006880:	40001800 	.word	0x40001800
 8006884:	40014000 	.word	0x40014000

08006888 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006890:	bf00      	nop
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068a4:	bf00      	nop
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80068b8:	bf00      	nop
 80068ba:	370c      	adds	r7, #12
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b082      	sub	sp, #8
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d101      	bne.n	80068d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e042      	b.n	800695c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d106      	bne.n	80068ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f7fa fc0d 	bl	8001108 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2224      	movs	r2, #36	; 0x24
 80068f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f022 0201 	bic.w	r2, r2, #1
 8006904:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 fc80 	bl	800720c <UART_SetConfig>
 800690c:	4603      	mov	r3, r0
 800690e:	2b01      	cmp	r3, #1
 8006910:	d101      	bne.n	8006916 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e022      	b.n	800695c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800691a:	2b00      	cmp	r3, #0
 800691c:	d002      	beq.n	8006924 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f001 f9dc 	bl	8007cdc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	685a      	ldr	r2, [r3, #4]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006932:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	689a      	ldr	r2, [r3, #8]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006942:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f042 0201 	orr.w	r2, r2, #1
 8006952:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f001 fa63 	bl	8007e20 <UART_CheckIdleState>
 800695a:	4603      	mov	r3, r0
}
 800695c:	4618      	mov	r0, r3
 800695e:	3708      	adds	r7, #8
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b08a      	sub	sp, #40	; 0x28
 8006968:	af02      	add	r7, sp, #8
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	603b      	str	r3, [r7, #0]
 8006970:	4613      	mov	r3, r2
 8006972:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800697a:	2b20      	cmp	r3, #32
 800697c:	f040 8083 	bne.w	8006a86 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d002      	beq.n	800698c <HAL_UART_Transmit+0x28>
 8006986:	88fb      	ldrh	r3, [r7, #6]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d101      	bne.n	8006990 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e07b      	b.n	8006a88 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006996:	2b01      	cmp	r3, #1
 8006998:	d101      	bne.n	800699e <HAL_UART_Transmit+0x3a>
 800699a:	2302      	movs	r3, #2
 800699c:	e074      	b.n	8006a88 <HAL_UART_Transmit+0x124>
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2201      	movs	r2, #1
 80069a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2221      	movs	r2, #33	; 0x21
 80069b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069b6:	f7fa fdc1 	bl	800153c <HAL_GetTick>
 80069ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	88fa      	ldrh	r2, [r7, #6]
 80069c0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	88fa      	ldrh	r2, [r7, #6]
 80069c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069d4:	d108      	bne.n	80069e8 <HAL_UART_Transmit+0x84>
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d104      	bne.n	80069e8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80069de:	2300      	movs	r3, #0
 80069e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	61bb      	str	r3, [r7, #24]
 80069e6:	e003      	b.n	80069f0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069ec:	2300      	movs	r3, #0
 80069ee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80069f8:	e02c      	b.n	8006a54 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	9300      	str	r3, [sp, #0]
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	2200      	movs	r2, #0
 8006a02:	2180      	movs	r1, #128	; 0x80
 8006a04:	68f8      	ldr	r0, [r7, #12]
 8006a06:	f001 fa56 	bl	8007eb6 <UART_WaitOnFlagUntilTimeout>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d001      	beq.n	8006a14 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006a10:	2303      	movs	r3, #3
 8006a12:	e039      	b.n	8006a88 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d10b      	bne.n	8006a32 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	881b      	ldrh	r3, [r3, #0]
 8006a1e:	461a      	mov	r2, r3
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a28:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006a2a:	69bb      	ldr	r3, [r7, #24]
 8006a2c:	3302      	adds	r3, #2
 8006a2e:	61bb      	str	r3, [r7, #24]
 8006a30:	e007      	b.n	8006a42 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	781a      	ldrb	r2, [r3, #0]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	3301      	adds	r3, #1
 8006a40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	b29a      	uxth	r2, r3
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d1cc      	bne.n	80069fa <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	9300      	str	r3, [sp, #0]
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	2200      	movs	r2, #0
 8006a68:	2140      	movs	r1, #64	; 0x40
 8006a6a:	68f8      	ldr	r0, [r7, #12]
 8006a6c:	f001 fa23 	bl	8007eb6 <UART_WaitOnFlagUntilTimeout>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d001      	beq.n	8006a7a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e006      	b.n	8006a88 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2220      	movs	r2, #32
 8006a7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006a82:	2300      	movs	r3, #0
 8006a84:	e000      	b.n	8006a88 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006a86:	2302      	movs	r3, #2
  }
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3720      	adds	r7, #32
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b0ba      	sub	sp, #232	; 0xe8
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	69db      	ldr	r3, [r3, #28]
 8006a9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006ab6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006aba:	f640 030f 	movw	r3, #2063	; 0x80f
 8006abe:	4013      	ands	r3, r2
 8006ac0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006ac4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d11b      	bne.n	8006b04 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ad0:	f003 0320 	and.w	r3, r3, #32
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d015      	beq.n	8006b04 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006adc:	f003 0320 	and.w	r3, r3, #32
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d105      	bne.n	8006af0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006ae4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d009      	beq.n	8006b04 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	f000 835a 	beq.w	80071ae <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	4798      	blx	r3
      }
      return;
 8006b02:	e354      	b.n	80071ae <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006b04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	f000 811f 	beq.w	8006d4c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006b0e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006b12:	4b8b      	ldr	r3, [pc, #556]	; (8006d40 <HAL_UART_IRQHandler+0x2b0>)
 8006b14:	4013      	ands	r3, r2
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d106      	bne.n	8006b28 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006b1a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006b1e:	4b89      	ldr	r3, [pc, #548]	; (8006d44 <HAL_UART_IRQHandler+0x2b4>)
 8006b20:	4013      	ands	r3, r2
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	f000 8112 	beq.w	8006d4c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b2c:	f003 0301 	and.w	r3, r3, #1
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d011      	beq.n	8006b58 <HAL_UART_IRQHandler+0xc8>
 8006b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d00b      	beq.n	8006b58 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2201      	movs	r2, #1
 8006b46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b4e:	f043 0201 	orr.w	r2, r3, #1
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b5c:	f003 0302 	and.w	r3, r3, #2
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d011      	beq.n	8006b88 <HAL_UART_IRQHandler+0xf8>
 8006b64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b68:	f003 0301 	and.w	r3, r3, #1
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d00b      	beq.n	8006b88 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2202      	movs	r2, #2
 8006b76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b7e:	f043 0204 	orr.w	r2, r3, #4
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b8c:	f003 0304 	and.w	r3, r3, #4
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d011      	beq.n	8006bb8 <HAL_UART_IRQHandler+0x128>
 8006b94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b98:	f003 0301 	and.w	r3, r3, #1
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d00b      	beq.n	8006bb8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2204      	movs	r2, #4
 8006ba6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bae:	f043 0202 	orr.w	r2, r3, #2
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006bb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bbc:	f003 0308 	and.w	r3, r3, #8
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d017      	beq.n	8006bf4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006bc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bc8:	f003 0320 	and.w	r3, r3, #32
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d105      	bne.n	8006bdc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006bd0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006bd4:	4b5a      	ldr	r3, [pc, #360]	; (8006d40 <HAL_UART_IRQHandler+0x2b0>)
 8006bd6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d00b      	beq.n	8006bf4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2208      	movs	r2, #8
 8006be2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bea:	f043 0208 	orr.w	r2, r3, #8
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d012      	beq.n	8006c26 <HAL_UART_IRQHandler+0x196>
 8006c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d00c      	beq.n	8006c26 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c1c:	f043 0220 	orr.w	r2, r3, #32
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f000 82c0 	beq.w	80071b2 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c36:	f003 0320 	and.w	r3, r3, #32
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d013      	beq.n	8006c66 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006c3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c42:	f003 0320 	and.w	r3, r3, #32
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d105      	bne.n	8006c56 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006c4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d007      	beq.n	8006c66 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d003      	beq.n	8006c66 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c6c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c7a:	2b40      	cmp	r3, #64	; 0x40
 8006c7c:	d005      	beq.n	8006c8a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006c7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c82:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d04f      	beq.n	8006d2a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f001 f9dc 	bl	8008048 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c9a:	2b40      	cmp	r3, #64	; 0x40
 8006c9c:	d141      	bne.n	8006d22 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	3308      	adds	r3, #8
 8006ca4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006cac:	e853 3f00 	ldrex	r3, [r3]
 8006cb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006cb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006cb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	3308      	adds	r3, #8
 8006cc6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006cca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006cce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006cd6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006cda:	e841 2300 	strex	r3, r2, [r1]
 8006cde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006ce2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d1d9      	bne.n	8006c9e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d013      	beq.n	8006d1a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cf6:	4a14      	ldr	r2, [pc, #80]	; (8006d48 <HAL_UART_IRQHandler+0x2b8>)
 8006cf8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f7fb f89a 	bl	8001e38 <HAL_DMA_Abort_IT>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d017      	beq.n	8006d3a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006d14:	4610      	mov	r0, r2
 8006d16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d18:	e00f      	b.n	8006d3a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 fa60 	bl	80071e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d20:	e00b      	b.n	8006d3a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 fa5c 	bl	80071e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d28:	e007      	b.n	8006d3a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 fa58 	bl	80071e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006d38:	e23b      	b.n	80071b2 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d3a:	bf00      	nop
    return;
 8006d3c:	e239      	b.n	80071b2 <HAL_UART_IRQHandler+0x722>
 8006d3e:	bf00      	nop
 8006d40:	10000001 	.word	0x10000001
 8006d44:	04000120 	.word	0x04000120
 8006d48:	08008115 	.word	0x08008115

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	f040 81ce 	bne.w	80070f2 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d5a:	f003 0310 	and.w	r3, r3, #16
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	f000 81c7 	beq.w	80070f2 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d68:	f003 0310 	and.w	r3, r3, #16
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	f000 81c0 	beq.w	80070f2 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2210      	movs	r2, #16
 8006d78:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d84:	2b40      	cmp	r3, #64	; 0x40
 8006d86:	f040 813b 	bne.w	8007000 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a8b      	ldr	r2, [pc, #556]	; (8006fc0 <HAL_UART_IRQHandler+0x530>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d059      	beq.n	8006e4a <HAL_UART_IRQHandler+0x3ba>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a89      	ldr	r2, [pc, #548]	; (8006fc4 <HAL_UART_IRQHandler+0x534>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d053      	beq.n	8006e4a <HAL_UART_IRQHandler+0x3ba>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a87      	ldr	r2, [pc, #540]	; (8006fc8 <HAL_UART_IRQHandler+0x538>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d04d      	beq.n	8006e4a <HAL_UART_IRQHandler+0x3ba>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a85      	ldr	r2, [pc, #532]	; (8006fcc <HAL_UART_IRQHandler+0x53c>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d047      	beq.n	8006e4a <HAL_UART_IRQHandler+0x3ba>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a83      	ldr	r2, [pc, #524]	; (8006fd0 <HAL_UART_IRQHandler+0x540>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d041      	beq.n	8006e4a <HAL_UART_IRQHandler+0x3ba>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a81      	ldr	r2, [pc, #516]	; (8006fd4 <HAL_UART_IRQHandler+0x544>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d03b      	beq.n	8006e4a <HAL_UART_IRQHandler+0x3ba>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a7f      	ldr	r2, [pc, #508]	; (8006fd8 <HAL_UART_IRQHandler+0x548>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d035      	beq.n	8006e4a <HAL_UART_IRQHandler+0x3ba>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a7d      	ldr	r2, [pc, #500]	; (8006fdc <HAL_UART_IRQHandler+0x54c>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d02f      	beq.n	8006e4a <HAL_UART_IRQHandler+0x3ba>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a7b      	ldr	r2, [pc, #492]	; (8006fe0 <HAL_UART_IRQHandler+0x550>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d029      	beq.n	8006e4a <HAL_UART_IRQHandler+0x3ba>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a79      	ldr	r2, [pc, #484]	; (8006fe4 <HAL_UART_IRQHandler+0x554>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d023      	beq.n	8006e4a <HAL_UART_IRQHandler+0x3ba>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a77      	ldr	r2, [pc, #476]	; (8006fe8 <HAL_UART_IRQHandler+0x558>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d01d      	beq.n	8006e4a <HAL_UART_IRQHandler+0x3ba>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a75      	ldr	r2, [pc, #468]	; (8006fec <HAL_UART_IRQHandler+0x55c>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d017      	beq.n	8006e4a <HAL_UART_IRQHandler+0x3ba>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a73      	ldr	r2, [pc, #460]	; (8006ff0 <HAL_UART_IRQHandler+0x560>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d011      	beq.n	8006e4a <HAL_UART_IRQHandler+0x3ba>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a71      	ldr	r2, [pc, #452]	; (8006ff4 <HAL_UART_IRQHandler+0x564>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d00b      	beq.n	8006e4a <HAL_UART_IRQHandler+0x3ba>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a6f      	ldr	r2, [pc, #444]	; (8006ff8 <HAL_UART_IRQHandler+0x568>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d005      	beq.n	8006e4a <HAL_UART_IRQHandler+0x3ba>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a6d      	ldr	r2, [pc, #436]	; (8006ffc <HAL_UART_IRQHandler+0x56c>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d105      	bne.n	8006e56 <HAL_UART_IRQHandler+0x3c6>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	e004      	b.n	8006e60 <HAL_UART_IRQHandler+0x3d0>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e64:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	f000 81a4 	beq.w	80071b6 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006e74:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	f080 819c 	bcs.w	80071b6 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e84:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e8c:	69db      	ldr	r3, [r3, #28]
 8006e8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e92:	f000 8086 	beq.w	8006fa2 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ea2:	e853 3f00 	ldrex	r3, [r3]
 8006ea6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006eaa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006eae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006eb2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	461a      	mov	r2, r3
 8006ebc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ec0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006ec4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006ecc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006ed0:	e841 2300 	strex	r3, r2, [r1]
 8006ed4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006ed8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d1da      	bne.n	8006e96 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	3308      	adds	r3, #8
 8006ee6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006eea:	e853 3f00 	ldrex	r3, [r3]
 8006eee:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006ef0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ef2:	f023 0301 	bic.w	r3, r3, #1
 8006ef6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	3308      	adds	r3, #8
 8006f00:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006f04:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006f08:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006f0c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006f10:	e841 2300 	strex	r3, r2, [r1]
 8006f14:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006f16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d1e1      	bne.n	8006ee0 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	3308      	adds	r3, #8
 8006f22:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f26:	e853 3f00 	ldrex	r3, [r3]
 8006f2a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006f2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	3308      	adds	r3, #8
 8006f3c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006f40:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006f42:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f44:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006f46:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006f48:	e841 2300 	strex	r3, r2, [r1]
 8006f4c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006f4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d1e3      	bne.n	8006f1c <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2220      	movs	r2, #32
 8006f58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f6a:	e853 3f00 	ldrex	r3, [r3]
 8006f6e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006f70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f72:	f023 0310 	bic.w	r3, r3, #16
 8006f76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	461a      	mov	r2, r3
 8006f80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f84:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f86:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f88:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f8c:	e841 2300 	strex	r3, r2, [r1]
 8006f90:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006f92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d1e4      	bne.n	8006f62 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f7fa fc2d 	bl	80017fc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	1ad3      	subs	r3, r2, r3
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 f91c 	bl	80071f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006fbc:	e0fb      	b.n	80071b6 <HAL_UART_IRQHandler+0x726>
 8006fbe:	bf00      	nop
 8006fc0:	40020010 	.word	0x40020010
 8006fc4:	40020028 	.word	0x40020028
 8006fc8:	40020040 	.word	0x40020040
 8006fcc:	40020058 	.word	0x40020058
 8006fd0:	40020070 	.word	0x40020070
 8006fd4:	40020088 	.word	0x40020088
 8006fd8:	400200a0 	.word	0x400200a0
 8006fdc:	400200b8 	.word	0x400200b8
 8006fe0:	40020410 	.word	0x40020410
 8006fe4:	40020428 	.word	0x40020428
 8006fe8:	40020440 	.word	0x40020440
 8006fec:	40020458 	.word	0x40020458
 8006ff0:	40020470 	.word	0x40020470
 8006ff4:	40020488 	.word	0x40020488
 8006ff8:	400204a0 	.word	0x400204a0
 8006ffc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800700c:	b29b      	uxth	r3, r3
 800700e:	1ad3      	subs	r3, r2, r3
 8007010:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800701a:	b29b      	uxth	r3, r3
 800701c:	2b00      	cmp	r3, #0
 800701e:	f000 80cc 	beq.w	80071ba <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8007022:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007026:	2b00      	cmp	r3, #0
 8007028:	f000 80c7 	beq.w	80071ba <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007034:	e853 3f00 	ldrex	r3, [r3]
 8007038:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800703a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800703c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007040:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	461a      	mov	r2, r3
 800704a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800704e:	647b      	str	r3, [r7, #68]	; 0x44
 8007050:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007052:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007054:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007056:	e841 2300 	strex	r3, r2, [r1]
 800705a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800705c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800705e:	2b00      	cmp	r3, #0
 8007060:	d1e4      	bne.n	800702c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	3308      	adds	r3, #8
 8007068:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800706a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706c:	e853 3f00 	ldrex	r3, [r3]
 8007070:	623b      	str	r3, [r7, #32]
   return(result);
 8007072:	6a3a      	ldr	r2, [r7, #32]
 8007074:	4b54      	ldr	r3, [pc, #336]	; (80071c8 <HAL_UART_IRQHandler+0x738>)
 8007076:	4013      	ands	r3, r2
 8007078:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	3308      	adds	r3, #8
 8007082:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007086:	633a      	str	r2, [r7, #48]	; 0x30
 8007088:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800708a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800708c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800708e:	e841 2300 	strex	r3, r2, [r1]
 8007092:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007096:	2b00      	cmp	r3, #0
 8007098:	d1e3      	bne.n	8007062 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2220      	movs	r2, #32
 800709e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	e853 3f00 	ldrex	r3, [r3]
 80070ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f023 0310 	bic.w	r3, r3, #16
 80070c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	461a      	mov	r2, r3
 80070cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80070d0:	61fb      	str	r3, [r7, #28]
 80070d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d4:	69b9      	ldr	r1, [r7, #24]
 80070d6:	69fa      	ldr	r2, [r7, #28]
 80070d8:	e841 2300 	strex	r3, r2, [r1]
 80070dc:	617b      	str	r3, [r7, #20]
   return(result);
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d1e4      	bne.n	80070ae <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80070e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80070e8:	4619      	mov	r1, r3
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 f882 	bl	80071f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80070f0:	e063      	b.n	80071ba <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80070f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d00e      	beq.n	800711c <HAL_UART_IRQHandler+0x68c>
 80070fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007106:	2b00      	cmp	r3, #0
 8007108:	d008      	beq.n	800711c <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007112:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f001 f83e 	bl	8008196 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800711a:	e051      	b.n	80071c0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800711c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007124:	2b00      	cmp	r3, #0
 8007126:	d014      	beq.n	8007152 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800712c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007130:	2b00      	cmp	r3, #0
 8007132:	d105      	bne.n	8007140 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007134:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007138:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800713c:	2b00      	cmp	r3, #0
 800713e:	d008      	beq.n	8007152 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007144:	2b00      	cmp	r3, #0
 8007146:	d03a      	beq.n	80071be <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	4798      	blx	r3
    }
    return;
 8007150:	e035      	b.n	80071be <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800715a:	2b00      	cmp	r3, #0
 800715c:	d009      	beq.n	8007172 <HAL_UART_IRQHandler+0x6e2>
 800715e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007166:	2b00      	cmp	r3, #0
 8007168:	d003      	beq.n	8007172 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 ffe8 	bl	8008140 <UART_EndTransmit_IT>
    return;
 8007170:	e026      	b.n	80071c0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007176:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800717a:	2b00      	cmp	r3, #0
 800717c:	d009      	beq.n	8007192 <HAL_UART_IRQHandler+0x702>
 800717e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007182:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007186:	2b00      	cmp	r3, #0
 8007188:	d003      	beq.n	8007192 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f001 f817 	bl	80081be <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007190:	e016      	b.n	80071c0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007196:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800719a:	2b00      	cmp	r3, #0
 800719c:	d010      	beq.n	80071c0 <HAL_UART_IRQHandler+0x730>
 800719e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	da0c      	bge.n	80071c0 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 ffff 	bl	80081aa <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80071ac:	e008      	b.n	80071c0 <HAL_UART_IRQHandler+0x730>
      return;
 80071ae:	bf00      	nop
 80071b0:	e006      	b.n	80071c0 <HAL_UART_IRQHandler+0x730>
    return;
 80071b2:	bf00      	nop
 80071b4:	e004      	b.n	80071c0 <HAL_UART_IRQHandler+0x730>
      return;
 80071b6:	bf00      	nop
 80071b8:	e002      	b.n	80071c0 <HAL_UART_IRQHandler+0x730>
      return;
 80071ba:	bf00      	nop
 80071bc:	e000      	b.n	80071c0 <HAL_UART_IRQHandler+0x730>
    return;
 80071be:	bf00      	nop
  }
}
 80071c0:	37e8      	adds	r7, #232	; 0xe8
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	effffffe 	.word	0xeffffffe

080071cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80071d4:	bf00      	nop
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80071e8:	bf00      	nop
 80071ea:	370c      	adds	r7, #12
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr

080071f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	460b      	mov	r3, r1
 80071fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007200:	bf00      	nop
 8007202:	370c      	adds	r7, #12
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800720c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007210:	b092      	sub	sp, #72	; 0x48
 8007212:	af00      	add	r7, sp, #0
 8007214:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007216:	2300      	movs	r3, #0
 8007218:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	689a      	ldr	r2, [r3, #8]
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	691b      	ldr	r3, [r3, #16]
 8007224:	431a      	orrs	r2, r3
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	695b      	ldr	r3, [r3, #20]
 800722a:	431a      	orrs	r2, r3
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	69db      	ldr	r3, [r3, #28]
 8007230:	4313      	orrs	r3, r2
 8007232:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	4bbe      	ldr	r3, [pc, #760]	; (8007534 <UART_SetConfig+0x328>)
 800723c:	4013      	ands	r3, r2
 800723e:	697a      	ldr	r2, [r7, #20]
 8007240:	6812      	ldr	r2, [r2, #0]
 8007242:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007244:	430b      	orrs	r3, r1
 8007246:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	68da      	ldr	r2, [r3, #12]
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	430a      	orrs	r2, r1
 800725c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	699b      	ldr	r3, [r3, #24]
 8007262:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4ab3      	ldr	r2, [pc, #716]	; (8007538 <UART_SetConfig+0x32c>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d004      	beq.n	8007278 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	6a1b      	ldr	r3, [r3, #32]
 8007272:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007274:	4313      	orrs	r3, r2
 8007276:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	689a      	ldr	r2, [r3, #8]
 800727e:	4baf      	ldr	r3, [pc, #700]	; (800753c <UART_SetConfig+0x330>)
 8007280:	4013      	ands	r3, r2
 8007282:	697a      	ldr	r2, [r7, #20]
 8007284:	6812      	ldr	r2, [r2, #0]
 8007286:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007288:	430b      	orrs	r3, r1
 800728a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007292:	f023 010f 	bic.w	r1, r3, #15
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	430a      	orrs	r2, r1
 80072a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4aa6      	ldr	r2, [pc, #664]	; (8007540 <UART_SetConfig+0x334>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d177      	bne.n	800739c <UART_SetConfig+0x190>
 80072ac:	4ba5      	ldr	r3, [pc, #660]	; (8007544 <UART_SetConfig+0x338>)
 80072ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80072b4:	2b28      	cmp	r3, #40	; 0x28
 80072b6:	d86d      	bhi.n	8007394 <UART_SetConfig+0x188>
 80072b8:	a201      	add	r2, pc, #4	; (adr r2, 80072c0 <UART_SetConfig+0xb4>)
 80072ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072be:	bf00      	nop
 80072c0:	08007365 	.word	0x08007365
 80072c4:	08007395 	.word	0x08007395
 80072c8:	08007395 	.word	0x08007395
 80072cc:	08007395 	.word	0x08007395
 80072d0:	08007395 	.word	0x08007395
 80072d4:	08007395 	.word	0x08007395
 80072d8:	08007395 	.word	0x08007395
 80072dc:	08007395 	.word	0x08007395
 80072e0:	0800736d 	.word	0x0800736d
 80072e4:	08007395 	.word	0x08007395
 80072e8:	08007395 	.word	0x08007395
 80072ec:	08007395 	.word	0x08007395
 80072f0:	08007395 	.word	0x08007395
 80072f4:	08007395 	.word	0x08007395
 80072f8:	08007395 	.word	0x08007395
 80072fc:	08007395 	.word	0x08007395
 8007300:	08007375 	.word	0x08007375
 8007304:	08007395 	.word	0x08007395
 8007308:	08007395 	.word	0x08007395
 800730c:	08007395 	.word	0x08007395
 8007310:	08007395 	.word	0x08007395
 8007314:	08007395 	.word	0x08007395
 8007318:	08007395 	.word	0x08007395
 800731c:	08007395 	.word	0x08007395
 8007320:	0800737d 	.word	0x0800737d
 8007324:	08007395 	.word	0x08007395
 8007328:	08007395 	.word	0x08007395
 800732c:	08007395 	.word	0x08007395
 8007330:	08007395 	.word	0x08007395
 8007334:	08007395 	.word	0x08007395
 8007338:	08007395 	.word	0x08007395
 800733c:	08007395 	.word	0x08007395
 8007340:	08007385 	.word	0x08007385
 8007344:	08007395 	.word	0x08007395
 8007348:	08007395 	.word	0x08007395
 800734c:	08007395 	.word	0x08007395
 8007350:	08007395 	.word	0x08007395
 8007354:	08007395 	.word	0x08007395
 8007358:	08007395 	.word	0x08007395
 800735c:	08007395 	.word	0x08007395
 8007360:	0800738d 	.word	0x0800738d
 8007364:	2301      	movs	r3, #1
 8007366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800736a:	e222      	b.n	80077b2 <UART_SetConfig+0x5a6>
 800736c:	2304      	movs	r3, #4
 800736e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007372:	e21e      	b.n	80077b2 <UART_SetConfig+0x5a6>
 8007374:	2308      	movs	r3, #8
 8007376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800737a:	e21a      	b.n	80077b2 <UART_SetConfig+0x5a6>
 800737c:	2310      	movs	r3, #16
 800737e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007382:	e216      	b.n	80077b2 <UART_SetConfig+0x5a6>
 8007384:	2320      	movs	r3, #32
 8007386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800738a:	e212      	b.n	80077b2 <UART_SetConfig+0x5a6>
 800738c:	2340      	movs	r3, #64	; 0x40
 800738e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007392:	e20e      	b.n	80077b2 <UART_SetConfig+0x5a6>
 8007394:	2380      	movs	r3, #128	; 0x80
 8007396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800739a:	e20a      	b.n	80077b2 <UART_SetConfig+0x5a6>
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a69      	ldr	r2, [pc, #420]	; (8007548 <UART_SetConfig+0x33c>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d130      	bne.n	8007408 <UART_SetConfig+0x1fc>
 80073a6:	4b67      	ldr	r3, [pc, #412]	; (8007544 <UART_SetConfig+0x338>)
 80073a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073aa:	f003 0307 	and.w	r3, r3, #7
 80073ae:	2b05      	cmp	r3, #5
 80073b0:	d826      	bhi.n	8007400 <UART_SetConfig+0x1f4>
 80073b2:	a201      	add	r2, pc, #4	; (adr r2, 80073b8 <UART_SetConfig+0x1ac>)
 80073b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b8:	080073d1 	.word	0x080073d1
 80073bc:	080073d9 	.word	0x080073d9
 80073c0:	080073e1 	.word	0x080073e1
 80073c4:	080073e9 	.word	0x080073e9
 80073c8:	080073f1 	.word	0x080073f1
 80073cc:	080073f9 	.word	0x080073f9
 80073d0:	2300      	movs	r3, #0
 80073d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073d6:	e1ec      	b.n	80077b2 <UART_SetConfig+0x5a6>
 80073d8:	2304      	movs	r3, #4
 80073da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073de:	e1e8      	b.n	80077b2 <UART_SetConfig+0x5a6>
 80073e0:	2308      	movs	r3, #8
 80073e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073e6:	e1e4      	b.n	80077b2 <UART_SetConfig+0x5a6>
 80073e8:	2310      	movs	r3, #16
 80073ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073ee:	e1e0      	b.n	80077b2 <UART_SetConfig+0x5a6>
 80073f0:	2320      	movs	r3, #32
 80073f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073f6:	e1dc      	b.n	80077b2 <UART_SetConfig+0x5a6>
 80073f8:	2340      	movs	r3, #64	; 0x40
 80073fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073fe:	e1d8      	b.n	80077b2 <UART_SetConfig+0x5a6>
 8007400:	2380      	movs	r3, #128	; 0x80
 8007402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007406:	e1d4      	b.n	80077b2 <UART_SetConfig+0x5a6>
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a4f      	ldr	r2, [pc, #316]	; (800754c <UART_SetConfig+0x340>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d130      	bne.n	8007474 <UART_SetConfig+0x268>
 8007412:	4b4c      	ldr	r3, [pc, #304]	; (8007544 <UART_SetConfig+0x338>)
 8007414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007416:	f003 0307 	and.w	r3, r3, #7
 800741a:	2b05      	cmp	r3, #5
 800741c:	d826      	bhi.n	800746c <UART_SetConfig+0x260>
 800741e:	a201      	add	r2, pc, #4	; (adr r2, 8007424 <UART_SetConfig+0x218>)
 8007420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007424:	0800743d 	.word	0x0800743d
 8007428:	08007445 	.word	0x08007445
 800742c:	0800744d 	.word	0x0800744d
 8007430:	08007455 	.word	0x08007455
 8007434:	0800745d 	.word	0x0800745d
 8007438:	08007465 	.word	0x08007465
 800743c:	2300      	movs	r3, #0
 800743e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007442:	e1b6      	b.n	80077b2 <UART_SetConfig+0x5a6>
 8007444:	2304      	movs	r3, #4
 8007446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800744a:	e1b2      	b.n	80077b2 <UART_SetConfig+0x5a6>
 800744c:	2308      	movs	r3, #8
 800744e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007452:	e1ae      	b.n	80077b2 <UART_SetConfig+0x5a6>
 8007454:	2310      	movs	r3, #16
 8007456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800745a:	e1aa      	b.n	80077b2 <UART_SetConfig+0x5a6>
 800745c:	2320      	movs	r3, #32
 800745e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007462:	e1a6      	b.n	80077b2 <UART_SetConfig+0x5a6>
 8007464:	2340      	movs	r3, #64	; 0x40
 8007466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800746a:	e1a2      	b.n	80077b2 <UART_SetConfig+0x5a6>
 800746c:	2380      	movs	r3, #128	; 0x80
 800746e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007472:	e19e      	b.n	80077b2 <UART_SetConfig+0x5a6>
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a35      	ldr	r2, [pc, #212]	; (8007550 <UART_SetConfig+0x344>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d130      	bne.n	80074e0 <UART_SetConfig+0x2d4>
 800747e:	4b31      	ldr	r3, [pc, #196]	; (8007544 <UART_SetConfig+0x338>)
 8007480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007482:	f003 0307 	and.w	r3, r3, #7
 8007486:	2b05      	cmp	r3, #5
 8007488:	d826      	bhi.n	80074d8 <UART_SetConfig+0x2cc>
 800748a:	a201      	add	r2, pc, #4	; (adr r2, 8007490 <UART_SetConfig+0x284>)
 800748c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007490:	080074a9 	.word	0x080074a9
 8007494:	080074b1 	.word	0x080074b1
 8007498:	080074b9 	.word	0x080074b9
 800749c:	080074c1 	.word	0x080074c1
 80074a0:	080074c9 	.word	0x080074c9
 80074a4:	080074d1 	.word	0x080074d1
 80074a8:	2300      	movs	r3, #0
 80074aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074ae:	e180      	b.n	80077b2 <UART_SetConfig+0x5a6>
 80074b0:	2304      	movs	r3, #4
 80074b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074b6:	e17c      	b.n	80077b2 <UART_SetConfig+0x5a6>
 80074b8:	2308      	movs	r3, #8
 80074ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074be:	e178      	b.n	80077b2 <UART_SetConfig+0x5a6>
 80074c0:	2310      	movs	r3, #16
 80074c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074c6:	e174      	b.n	80077b2 <UART_SetConfig+0x5a6>
 80074c8:	2320      	movs	r3, #32
 80074ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074ce:	e170      	b.n	80077b2 <UART_SetConfig+0x5a6>
 80074d0:	2340      	movs	r3, #64	; 0x40
 80074d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074d6:	e16c      	b.n	80077b2 <UART_SetConfig+0x5a6>
 80074d8:	2380      	movs	r3, #128	; 0x80
 80074da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074de:	e168      	b.n	80077b2 <UART_SetConfig+0x5a6>
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a1b      	ldr	r2, [pc, #108]	; (8007554 <UART_SetConfig+0x348>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d142      	bne.n	8007570 <UART_SetConfig+0x364>
 80074ea:	4b16      	ldr	r3, [pc, #88]	; (8007544 <UART_SetConfig+0x338>)
 80074ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074ee:	f003 0307 	and.w	r3, r3, #7
 80074f2:	2b05      	cmp	r3, #5
 80074f4:	d838      	bhi.n	8007568 <UART_SetConfig+0x35c>
 80074f6:	a201      	add	r2, pc, #4	; (adr r2, 80074fc <UART_SetConfig+0x2f0>)
 80074f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074fc:	08007515 	.word	0x08007515
 8007500:	0800751d 	.word	0x0800751d
 8007504:	08007525 	.word	0x08007525
 8007508:	0800752d 	.word	0x0800752d
 800750c:	08007559 	.word	0x08007559
 8007510:	08007561 	.word	0x08007561
 8007514:	2300      	movs	r3, #0
 8007516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800751a:	e14a      	b.n	80077b2 <UART_SetConfig+0x5a6>
 800751c:	2304      	movs	r3, #4
 800751e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007522:	e146      	b.n	80077b2 <UART_SetConfig+0x5a6>
 8007524:	2308      	movs	r3, #8
 8007526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800752a:	e142      	b.n	80077b2 <UART_SetConfig+0x5a6>
 800752c:	2310      	movs	r3, #16
 800752e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007532:	e13e      	b.n	80077b2 <UART_SetConfig+0x5a6>
 8007534:	cfff69f3 	.word	0xcfff69f3
 8007538:	58000c00 	.word	0x58000c00
 800753c:	11fff4ff 	.word	0x11fff4ff
 8007540:	40011000 	.word	0x40011000
 8007544:	58024400 	.word	0x58024400
 8007548:	40004400 	.word	0x40004400
 800754c:	40004800 	.word	0x40004800
 8007550:	40004c00 	.word	0x40004c00
 8007554:	40005000 	.word	0x40005000
 8007558:	2320      	movs	r3, #32
 800755a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800755e:	e128      	b.n	80077b2 <UART_SetConfig+0x5a6>
 8007560:	2340      	movs	r3, #64	; 0x40
 8007562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007566:	e124      	b.n	80077b2 <UART_SetConfig+0x5a6>
 8007568:	2380      	movs	r3, #128	; 0x80
 800756a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800756e:	e120      	b.n	80077b2 <UART_SetConfig+0x5a6>
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4acb      	ldr	r2, [pc, #812]	; (80078a4 <UART_SetConfig+0x698>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d176      	bne.n	8007668 <UART_SetConfig+0x45c>
 800757a:	4bcb      	ldr	r3, [pc, #812]	; (80078a8 <UART_SetConfig+0x69c>)
 800757c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800757e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007582:	2b28      	cmp	r3, #40	; 0x28
 8007584:	d86c      	bhi.n	8007660 <UART_SetConfig+0x454>
 8007586:	a201      	add	r2, pc, #4	; (adr r2, 800758c <UART_SetConfig+0x380>)
 8007588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800758c:	08007631 	.word	0x08007631
 8007590:	08007661 	.word	0x08007661
 8007594:	08007661 	.word	0x08007661
 8007598:	08007661 	.word	0x08007661
 800759c:	08007661 	.word	0x08007661
 80075a0:	08007661 	.word	0x08007661
 80075a4:	08007661 	.word	0x08007661
 80075a8:	08007661 	.word	0x08007661
 80075ac:	08007639 	.word	0x08007639
 80075b0:	08007661 	.word	0x08007661
 80075b4:	08007661 	.word	0x08007661
 80075b8:	08007661 	.word	0x08007661
 80075bc:	08007661 	.word	0x08007661
 80075c0:	08007661 	.word	0x08007661
 80075c4:	08007661 	.word	0x08007661
 80075c8:	08007661 	.word	0x08007661
 80075cc:	08007641 	.word	0x08007641
 80075d0:	08007661 	.word	0x08007661
 80075d4:	08007661 	.word	0x08007661
 80075d8:	08007661 	.word	0x08007661
 80075dc:	08007661 	.word	0x08007661
 80075e0:	08007661 	.word	0x08007661
 80075e4:	08007661 	.word	0x08007661
 80075e8:	08007661 	.word	0x08007661
 80075ec:	08007649 	.word	0x08007649
 80075f0:	08007661 	.word	0x08007661
 80075f4:	08007661 	.word	0x08007661
 80075f8:	08007661 	.word	0x08007661
 80075fc:	08007661 	.word	0x08007661
 8007600:	08007661 	.word	0x08007661
 8007604:	08007661 	.word	0x08007661
 8007608:	08007661 	.word	0x08007661
 800760c:	08007651 	.word	0x08007651
 8007610:	08007661 	.word	0x08007661
 8007614:	08007661 	.word	0x08007661
 8007618:	08007661 	.word	0x08007661
 800761c:	08007661 	.word	0x08007661
 8007620:	08007661 	.word	0x08007661
 8007624:	08007661 	.word	0x08007661
 8007628:	08007661 	.word	0x08007661
 800762c:	08007659 	.word	0x08007659
 8007630:	2301      	movs	r3, #1
 8007632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007636:	e0bc      	b.n	80077b2 <UART_SetConfig+0x5a6>
 8007638:	2304      	movs	r3, #4
 800763a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800763e:	e0b8      	b.n	80077b2 <UART_SetConfig+0x5a6>
 8007640:	2308      	movs	r3, #8
 8007642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007646:	e0b4      	b.n	80077b2 <UART_SetConfig+0x5a6>
 8007648:	2310      	movs	r3, #16
 800764a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800764e:	e0b0      	b.n	80077b2 <UART_SetConfig+0x5a6>
 8007650:	2320      	movs	r3, #32
 8007652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007656:	e0ac      	b.n	80077b2 <UART_SetConfig+0x5a6>
 8007658:	2340      	movs	r3, #64	; 0x40
 800765a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800765e:	e0a8      	b.n	80077b2 <UART_SetConfig+0x5a6>
 8007660:	2380      	movs	r3, #128	; 0x80
 8007662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007666:	e0a4      	b.n	80077b2 <UART_SetConfig+0x5a6>
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a8f      	ldr	r2, [pc, #572]	; (80078ac <UART_SetConfig+0x6a0>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d130      	bne.n	80076d4 <UART_SetConfig+0x4c8>
 8007672:	4b8d      	ldr	r3, [pc, #564]	; (80078a8 <UART_SetConfig+0x69c>)
 8007674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007676:	f003 0307 	and.w	r3, r3, #7
 800767a:	2b05      	cmp	r3, #5
 800767c:	d826      	bhi.n	80076cc <UART_SetConfig+0x4c0>
 800767e:	a201      	add	r2, pc, #4	; (adr r2, 8007684 <UART_SetConfig+0x478>)
 8007680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007684:	0800769d 	.word	0x0800769d
 8007688:	080076a5 	.word	0x080076a5
 800768c:	080076ad 	.word	0x080076ad
 8007690:	080076b5 	.word	0x080076b5
 8007694:	080076bd 	.word	0x080076bd
 8007698:	080076c5 	.word	0x080076c5
 800769c:	2300      	movs	r3, #0
 800769e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076a2:	e086      	b.n	80077b2 <UART_SetConfig+0x5a6>
 80076a4:	2304      	movs	r3, #4
 80076a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076aa:	e082      	b.n	80077b2 <UART_SetConfig+0x5a6>
 80076ac:	2308      	movs	r3, #8
 80076ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076b2:	e07e      	b.n	80077b2 <UART_SetConfig+0x5a6>
 80076b4:	2310      	movs	r3, #16
 80076b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076ba:	e07a      	b.n	80077b2 <UART_SetConfig+0x5a6>
 80076bc:	2320      	movs	r3, #32
 80076be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076c2:	e076      	b.n	80077b2 <UART_SetConfig+0x5a6>
 80076c4:	2340      	movs	r3, #64	; 0x40
 80076c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076ca:	e072      	b.n	80077b2 <UART_SetConfig+0x5a6>
 80076cc:	2380      	movs	r3, #128	; 0x80
 80076ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076d2:	e06e      	b.n	80077b2 <UART_SetConfig+0x5a6>
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a75      	ldr	r2, [pc, #468]	; (80078b0 <UART_SetConfig+0x6a4>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d130      	bne.n	8007740 <UART_SetConfig+0x534>
 80076de:	4b72      	ldr	r3, [pc, #456]	; (80078a8 <UART_SetConfig+0x69c>)
 80076e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076e2:	f003 0307 	and.w	r3, r3, #7
 80076e6:	2b05      	cmp	r3, #5
 80076e8:	d826      	bhi.n	8007738 <UART_SetConfig+0x52c>
 80076ea:	a201      	add	r2, pc, #4	; (adr r2, 80076f0 <UART_SetConfig+0x4e4>)
 80076ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076f0:	08007709 	.word	0x08007709
 80076f4:	08007711 	.word	0x08007711
 80076f8:	08007719 	.word	0x08007719
 80076fc:	08007721 	.word	0x08007721
 8007700:	08007729 	.word	0x08007729
 8007704:	08007731 	.word	0x08007731
 8007708:	2300      	movs	r3, #0
 800770a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800770e:	e050      	b.n	80077b2 <UART_SetConfig+0x5a6>
 8007710:	2304      	movs	r3, #4
 8007712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007716:	e04c      	b.n	80077b2 <UART_SetConfig+0x5a6>
 8007718:	2308      	movs	r3, #8
 800771a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800771e:	e048      	b.n	80077b2 <UART_SetConfig+0x5a6>
 8007720:	2310      	movs	r3, #16
 8007722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007726:	e044      	b.n	80077b2 <UART_SetConfig+0x5a6>
 8007728:	2320      	movs	r3, #32
 800772a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800772e:	e040      	b.n	80077b2 <UART_SetConfig+0x5a6>
 8007730:	2340      	movs	r3, #64	; 0x40
 8007732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007736:	e03c      	b.n	80077b2 <UART_SetConfig+0x5a6>
 8007738:	2380      	movs	r3, #128	; 0x80
 800773a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800773e:	e038      	b.n	80077b2 <UART_SetConfig+0x5a6>
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a5b      	ldr	r2, [pc, #364]	; (80078b4 <UART_SetConfig+0x6a8>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d130      	bne.n	80077ac <UART_SetConfig+0x5a0>
 800774a:	4b57      	ldr	r3, [pc, #348]	; (80078a8 <UART_SetConfig+0x69c>)
 800774c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800774e:	f003 0307 	and.w	r3, r3, #7
 8007752:	2b05      	cmp	r3, #5
 8007754:	d826      	bhi.n	80077a4 <UART_SetConfig+0x598>
 8007756:	a201      	add	r2, pc, #4	; (adr r2, 800775c <UART_SetConfig+0x550>)
 8007758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800775c:	08007775 	.word	0x08007775
 8007760:	0800777d 	.word	0x0800777d
 8007764:	08007785 	.word	0x08007785
 8007768:	0800778d 	.word	0x0800778d
 800776c:	08007795 	.word	0x08007795
 8007770:	0800779d 	.word	0x0800779d
 8007774:	2302      	movs	r3, #2
 8007776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800777a:	e01a      	b.n	80077b2 <UART_SetConfig+0x5a6>
 800777c:	2304      	movs	r3, #4
 800777e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007782:	e016      	b.n	80077b2 <UART_SetConfig+0x5a6>
 8007784:	2308      	movs	r3, #8
 8007786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800778a:	e012      	b.n	80077b2 <UART_SetConfig+0x5a6>
 800778c:	2310      	movs	r3, #16
 800778e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007792:	e00e      	b.n	80077b2 <UART_SetConfig+0x5a6>
 8007794:	2320      	movs	r3, #32
 8007796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800779a:	e00a      	b.n	80077b2 <UART_SetConfig+0x5a6>
 800779c:	2340      	movs	r3, #64	; 0x40
 800779e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077a2:	e006      	b.n	80077b2 <UART_SetConfig+0x5a6>
 80077a4:	2380      	movs	r3, #128	; 0x80
 80077a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077aa:	e002      	b.n	80077b2 <UART_SetConfig+0x5a6>
 80077ac:	2380      	movs	r3, #128	; 0x80
 80077ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a3f      	ldr	r2, [pc, #252]	; (80078b4 <UART_SetConfig+0x6a8>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	f040 80f8 	bne.w	80079ae <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80077be:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80077c2:	2b20      	cmp	r3, #32
 80077c4:	dc46      	bgt.n	8007854 <UART_SetConfig+0x648>
 80077c6:	2b02      	cmp	r3, #2
 80077c8:	f2c0 8082 	blt.w	80078d0 <UART_SetConfig+0x6c4>
 80077cc:	3b02      	subs	r3, #2
 80077ce:	2b1e      	cmp	r3, #30
 80077d0:	d87e      	bhi.n	80078d0 <UART_SetConfig+0x6c4>
 80077d2:	a201      	add	r2, pc, #4	; (adr r2, 80077d8 <UART_SetConfig+0x5cc>)
 80077d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d8:	0800785b 	.word	0x0800785b
 80077dc:	080078d1 	.word	0x080078d1
 80077e0:	08007863 	.word	0x08007863
 80077e4:	080078d1 	.word	0x080078d1
 80077e8:	080078d1 	.word	0x080078d1
 80077ec:	080078d1 	.word	0x080078d1
 80077f0:	08007873 	.word	0x08007873
 80077f4:	080078d1 	.word	0x080078d1
 80077f8:	080078d1 	.word	0x080078d1
 80077fc:	080078d1 	.word	0x080078d1
 8007800:	080078d1 	.word	0x080078d1
 8007804:	080078d1 	.word	0x080078d1
 8007808:	080078d1 	.word	0x080078d1
 800780c:	080078d1 	.word	0x080078d1
 8007810:	08007883 	.word	0x08007883
 8007814:	080078d1 	.word	0x080078d1
 8007818:	080078d1 	.word	0x080078d1
 800781c:	080078d1 	.word	0x080078d1
 8007820:	080078d1 	.word	0x080078d1
 8007824:	080078d1 	.word	0x080078d1
 8007828:	080078d1 	.word	0x080078d1
 800782c:	080078d1 	.word	0x080078d1
 8007830:	080078d1 	.word	0x080078d1
 8007834:	080078d1 	.word	0x080078d1
 8007838:	080078d1 	.word	0x080078d1
 800783c:	080078d1 	.word	0x080078d1
 8007840:	080078d1 	.word	0x080078d1
 8007844:	080078d1 	.word	0x080078d1
 8007848:	080078d1 	.word	0x080078d1
 800784c:	080078d1 	.word	0x080078d1
 8007850:	080078c3 	.word	0x080078c3
 8007854:	2b40      	cmp	r3, #64	; 0x40
 8007856:	d037      	beq.n	80078c8 <UART_SetConfig+0x6bc>
 8007858:	e03a      	b.n	80078d0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800785a:	f7fd fc01 	bl	8005060 <HAL_RCCEx_GetD3PCLK1Freq>
 800785e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007860:	e03c      	b.n	80078dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007862:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007866:	4618      	mov	r0, r3
 8007868:	f7fd fc10 	bl	800508c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800786c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800786e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007870:	e034      	b.n	80078dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007872:	f107 0318 	add.w	r3, r7, #24
 8007876:	4618      	mov	r0, r3
 8007878:	f7fd fd5c 	bl	8005334 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800787c:	69fb      	ldr	r3, [r7, #28]
 800787e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007880:	e02c      	b.n	80078dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007882:	4b09      	ldr	r3, [pc, #36]	; (80078a8 <UART_SetConfig+0x69c>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f003 0320 	and.w	r3, r3, #32
 800788a:	2b00      	cmp	r3, #0
 800788c:	d016      	beq.n	80078bc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800788e:	4b06      	ldr	r3, [pc, #24]	; (80078a8 <UART_SetConfig+0x69c>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	08db      	lsrs	r3, r3, #3
 8007894:	f003 0303 	and.w	r3, r3, #3
 8007898:	4a07      	ldr	r2, [pc, #28]	; (80078b8 <UART_SetConfig+0x6ac>)
 800789a:	fa22 f303 	lsr.w	r3, r2, r3
 800789e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80078a0:	e01c      	b.n	80078dc <UART_SetConfig+0x6d0>
 80078a2:	bf00      	nop
 80078a4:	40011400 	.word	0x40011400
 80078a8:	58024400 	.word	0x58024400
 80078ac:	40007800 	.word	0x40007800
 80078b0:	40007c00 	.word	0x40007c00
 80078b4:	58000c00 	.word	0x58000c00
 80078b8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80078bc:	4b9d      	ldr	r3, [pc, #628]	; (8007b34 <UART_SetConfig+0x928>)
 80078be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078c0:	e00c      	b.n	80078dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80078c2:	4b9d      	ldr	r3, [pc, #628]	; (8007b38 <UART_SetConfig+0x92c>)
 80078c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078c6:	e009      	b.n	80078dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078ce:	e005      	b.n	80078dc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80078d0:	2300      	movs	r3, #0
 80078d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80078d4:	2301      	movs	r3, #1
 80078d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80078da:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80078dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078de:	2b00      	cmp	r3, #0
 80078e0:	f000 81de 	beq.w	8007ca0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e8:	4a94      	ldr	r2, [pc, #592]	; (8007b3c <UART_SetConfig+0x930>)
 80078ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078ee:	461a      	mov	r2, r3
 80078f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80078f6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	685a      	ldr	r2, [r3, #4]
 80078fc:	4613      	mov	r3, r2
 80078fe:	005b      	lsls	r3, r3, #1
 8007900:	4413      	add	r3, r2
 8007902:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007904:	429a      	cmp	r2, r3
 8007906:	d305      	bcc.n	8007914 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800790e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007910:	429a      	cmp	r2, r3
 8007912:	d903      	bls.n	800791c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800791a:	e1c1      	b.n	8007ca0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800791c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800791e:	2200      	movs	r2, #0
 8007920:	60bb      	str	r3, [r7, #8]
 8007922:	60fa      	str	r2, [r7, #12]
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007928:	4a84      	ldr	r2, [pc, #528]	; (8007b3c <UART_SetConfig+0x930>)
 800792a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800792e:	b29b      	uxth	r3, r3
 8007930:	2200      	movs	r2, #0
 8007932:	603b      	str	r3, [r7, #0]
 8007934:	607a      	str	r2, [r7, #4]
 8007936:	e9d7 2300 	ldrd	r2, r3, [r7]
 800793a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800793e:	f7f8 fd1f 	bl	8000380 <__aeabi_uldivmod>
 8007942:	4602      	mov	r2, r0
 8007944:	460b      	mov	r3, r1
 8007946:	4610      	mov	r0, r2
 8007948:	4619      	mov	r1, r3
 800794a:	f04f 0200 	mov.w	r2, #0
 800794e:	f04f 0300 	mov.w	r3, #0
 8007952:	020b      	lsls	r3, r1, #8
 8007954:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007958:	0202      	lsls	r2, r0, #8
 800795a:	6979      	ldr	r1, [r7, #20]
 800795c:	6849      	ldr	r1, [r1, #4]
 800795e:	0849      	lsrs	r1, r1, #1
 8007960:	2000      	movs	r0, #0
 8007962:	460c      	mov	r4, r1
 8007964:	4605      	mov	r5, r0
 8007966:	eb12 0804 	adds.w	r8, r2, r4
 800796a:	eb43 0905 	adc.w	r9, r3, r5
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	469a      	mov	sl, r3
 8007976:	4693      	mov	fp, r2
 8007978:	4652      	mov	r2, sl
 800797a:	465b      	mov	r3, fp
 800797c:	4640      	mov	r0, r8
 800797e:	4649      	mov	r1, r9
 8007980:	f7f8 fcfe 	bl	8000380 <__aeabi_uldivmod>
 8007984:	4602      	mov	r2, r0
 8007986:	460b      	mov	r3, r1
 8007988:	4613      	mov	r3, r2
 800798a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800798c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800798e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007992:	d308      	bcc.n	80079a6 <UART_SetConfig+0x79a>
 8007994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007996:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800799a:	d204      	bcs.n	80079a6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079a2:	60da      	str	r2, [r3, #12]
 80079a4:	e17c      	b.n	8007ca0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80079a6:	2301      	movs	r3, #1
 80079a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80079ac:	e178      	b.n	8007ca0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	69db      	ldr	r3, [r3, #28]
 80079b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079b6:	f040 80c5 	bne.w	8007b44 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80079ba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80079be:	2b20      	cmp	r3, #32
 80079c0:	dc48      	bgt.n	8007a54 <UART_SetConfig+0x848>
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	db7b      	blt.n	8007abe <UART_SetConfig+0x8b2>
 80079c6:	2b20      	cmp	r3, #32
 80079c8:	d879      	bhi.n	8007abe <UART_SetConfig+0x8b2>
 80079ca:	a201      	add	r2, pc, #4	; (adr r2, 80079d0 <UART_SetConfig+0x7c4>)
 80079cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d0:	08007a5b 	.word	0x08007a5b
 80079d4:	08007a63 	.word	0x08007a63
 80079d8:	08007abf 	.word	0x08007abf
 80079dc:	08007abf 	.word	0x08007abf
 80079e0:	08007a6b 	.word	0x08007a6b
 80079e4:	08007abf 	.word	0x08007abf
 80079e8:	08007abf 	.word	0x08007abf
 80079ec:	08007abf 	.word	0x08007abf
 80079f0:	08007a7b 	.word	0x08007a7b
 80079f4:	08007abf 	.word	0x08007abf
 80079f8:	08007abf 	.word	0x08007abf
 80079fc:	08007abf 	.word	0x08007abf
 8007a00:	08007abf 	.word	0x08007abf
 8007a04:	08007abf 	.word	0x08007abf
 8007a08:	08007abf 	.word	0x08007abf
 8007a0c:	08007abf 	.word	0x08007abf
 8007a10:	08007a8b 	.word	0x08007a8b
 8007a14:	08007abf 	.word	0x08007abf
 8007a18:	08007abf 	.word	0x08007abf
 8007a1c:	08007abf 	.word	0x08007abf
 8007a20:	08007abf 	.word	0x08007abf
 8007a24:	08007abf 	.word	0x08007abf
 8007a28:	08007abf 	.word	0x08007abf
 8007a2c:	08007abf 	.word	0x08007abf
 8007a30:	08007abf 	.word	0x08007abf
 8007a34:	08007abf 	.word	0x08007abf
 8007a38:	08007abf 	.word	0x08007abf
 8007a3c:	08007abf 	.word	0x08007abf
 8007a40:	08007abf 	.word	0x08007abf
 8007a44:	08007abf 	.word	0x08007abf
 8007a48:	08007abf 	.word	0x08007abf
 8007a4c:	08007abf 	.word	0x08007abf
 8007a50:	08007ab1 	.word	0x08007ab1
 8007a54:	2b40      	cmp	r3, #64	; 0x40
 8007a56:	d02e      	beq.n	8007ab6 <UART_SetConfig+0x8aa>
 8007a58:	e031      	b.n	8007abe <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a5a:	f7fc fb8f 	bl	800417c <HAL_RCC_GetPCLK1Freq>
 8007a5e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007a60:	e033      	b.n	8007aca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a62:	f7fc fba1 	bl	80041a8 <HAL_RCC_GetPCLK2Freq>
 8007a66:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007a68:	e02f      	b.n	8007aca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7fd fb0c 	bl	800508c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a78:	e027      	b.n	8007aca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a7a:	f107 0318 	add.w	r3, r7, #24
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f7fd fc58 	bl	8005334 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007a84:	69fb      	ldr	r3, [r7, #28]
 8007a86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a88:	e01f      	b.n	8007aca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a8a:	4b2d      	ldr	r3, [pc, #180]	; (8007b40 <UART_SetConfig+0x934>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f003 0320 	and.w	r3, r3, #32
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d009      	beq.n	8007aaa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007a96:	4b2a      	ldr	r3, [pc, #168]	; (8007b40 <UART_SetConfig+0x934>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	08db      	lsrs	r3, r3, #3
 8007a9c:	f003 0303 	and.w	r3, r3, #3
 8007aa0:	4a24      	ldr	r2, [pc, #144]	; (8007b34 <UART_SetConfig+0x928>)
 8007aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8007aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007aa8:	e00f      	b.n	8007aca <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007aaa:	4b22      	ldr	r3, [pc, #136]	; (8007b34 <UART_SetConfig+0x928>)
 8007aac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007aae:	e00c      	b.n	8007aca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007ab0:	4b21      	ldr	r3, [pc, #132]	; (8007b38 <UART_SetConfig+0x92c>)
 8007ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ab4:	e009      	b.n	8007aca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ab6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007aba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007abc:	e005      	b.n	8007aca <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007ac8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007aca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	f000 80e7 	beq.w	8007ca0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad6:	4a19      	ldr	r2, [pc, #100]	; (8007b3c <UART_SetConfig+0x930>)
 8007ad8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007adc:	461a      	mov	r2, r3
 8007ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ae0:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ae4:	005a      	lsls	r2, r3, #1
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	085b      	lsrs	r3, r3, #1
 8007aec:	441a      	add	r2, r3
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007af6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007afa:	2b0f      	cmp	r3, #15
 8007afc:	d916      	bls.n	8007b2c <UART_SetConfig+0x920>
 8007afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b04:	d212      	bcs.n	8007b2c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	f023 030f 	bic.w	r3, r3, #15
 8007b0e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b12:	085b      	lsrs	r3, r3, #1
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	f003 0307 	and.w	r3, r3, #7
 8007b1a:	b29a      	uxth	r2, r3
 8007b1c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007b28:	60da      	str	r2, [r3, #12]
 8007b2a:	e0b9      	b.n	8007ca0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007b32:	e0b5      	b.n	8007ca0 <UART_SetConfig+0xa94>
 8007b34:	03d09000 	.word	0x03d09000
 8007b38:	003d0900 	.word	0x003d0900
 8007b3c:	08009360 	.word	0x08009360
 8007b40:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b44:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007b48:	2b20      	cmp	r3, #32
 8007b4a:	dc49      	bgt.n	8007be0 <UART_SetConfig+0x9d4>
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	db7c      	blt.n	8007c4a <UART_SetConfig+0xa3e>
 8007b50:	2b20      	cmp	r3, #32
 8007b52:	d87a      	bhi.n	8007c4a <UART_SetConfig+0xa3e>
 8007b54:	a201      	add	r2, pc, #4	; (adr r2, 8007b5c <UART_SetConfig+0x950>)
 8007b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b5a:	bf00      	nop
 8007b5c:	08007be7 	.word	0x08007be7
 8007b60:	08007bef 	.word	0x08007bef
 8007b64:	08007c4b 	.word	0x08007c4b
 8007b68:	08007c4b 	.word	0x08007c4b
 8007b6c:	08007bf7 	.word	0x08007bf7
 8007b70:	08007c4b 	.word	0x08007c4b
 8007b74:	08007c4b 	.word	0x08007c4b
 8007b78:	08007c4b 	.word	0x08007c4b
 8007b7c:	08007c07 	.word	0x08007c07
 8007b80:	08007c4b 	.word	0x08007c4b
 8007b84:	08007c4b 	.word	0x08007c4b
 8007b88:	08007c4b 	.word	0x08007c4b
 8007b8c:	08007c4b 	.word	0x08007c4b
 8007b90:	08007c4b 	.word	0x08007c4b
 8007b94:	08007c4b 	.word	0x08007c4b
 8007b98:	08007c4b 	.word	0x08007c4b
 8007b9c:	08007c17 	.word	0x08007c17
 8007ba0:	08007c4b 	.word	0x08007c4b
 8007ba4:	08007c4b 	.word	0x08007c4b
 8007ba8:	08007c4b 	.word	0x08007c4b
 8007bac:	08007c4b 	.word	0x08007c4b
 8007bb0:	08007c4b 	.word	0x08007c4b
 8007bb4:	08007c4b 	.word	0x08007c4b
 8007bb8:	08007c4b 	.word	0x08007c4b
 8007bbc:	08007c4b 	.word	0x08007c4b
 8007bc0:	08007c4b 	.word	0x08007c4b
 8007bc4:	08007c4b 	.word	0x08007c4b
 8007bc8:	08007c4b 	.word	0x08007c4b
 8007bcc:	08007c4b 	.word	0x08007c4b
 8007bd0:	08007c4b 	.word	0x08007c4b
 8007bd4:	08007c4b 	.word	0x08007c4b
 8007bd8:	08007c4b 	.word	0x08007c4b
 8007bdc:	08007c3d 	.word	0x08007c3d
 8007be0:	2b40      	cmp	r3, #64	; 0x40
 8007be2:	d02e      	beq.n	8007c42 <UART_SetConfig+0xa36>
 8007be4:	e031      	b.n	8007c4a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007be6:	f7fc fac9 	bl	800417c <HAL_RCC_GetPCLK1Freq>
 8007bea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007bec:	e033      	b.n	8007c56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007bee:	f7fc fadb 	bl	80041a8 <HAL_RCC_GetPCLK2Freq>
 8007bf2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007bf4:	e02f      	b.n	8007c56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f7fd fa46 	bl	800508c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c04:	e027      	b.n	8007c56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c06:	f107 0318 	add.w	r3, r7, #24
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f7fd fb92 	bl	8005334 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007c10:	69fb      	ldr	r3, [r7, #28]
 8007c12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c14:	e01f      	b.n	8007c56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c16:	4b2d      	ldr	r3, [pc, #180]	; (8007ccc <UART_SetConfig+0xac0>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f003 0320 	and.w	r3, r3, #32
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d009      	beq.n	8007c36 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007c22:	4b2a      	ldr	r3, [pc, #168]	; (8007ccc <UART_SetConfig+0xac0>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	08db      	lsrs	r3, r3, #3
 8007c28:	f003 0303 	and.w	r3, r3, #3
 8007c2c:	4a28      	ldr	r2, [pc, #160]	; (8007cd0 <UART_SetConfig+0xac4>)
 8007c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8007c32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007c34:	e00f      	b.n	8007c56 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007c36:	4b26      	ldr	r3, [pc, #152]	; (8007cd0 <UART_SetConfig+0xac4>)
 8007c38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c3a:	e00c      	b.n	8007c56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007c3c:	4b25      	ldr	r3, [pc, #148]	; (8007cd4 <UART_SetConfig+0xac8>)
 8007c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c40:	e009      	b.n	8007c56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c48:	e005      	b.n	8007c56 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007c54:	bf00      	nop
    }

    if (pclk != 0U)
 8007c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d021      	beq.n	8007ca0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c60:	4a1d      	ldr	r2, [pc, #116]	; (8007cd8 <UART_SetConfig+0xacc>)
 8007c62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c66:	461a      	mov	r2, r3
 8007c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c6a:	fbb3 f2f2 	udiv	r2, r3, r2
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	085b      	lsrs	r3, r3, #1
 8007c74:	441a      	add	r2, r3
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c7e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c82:	2b0f      	cmp	r3, #15
 8007c84:	d909      	bls.n	8007c9a <UART_SetConfig+0xa8e>
 8007c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c8c:	d205      	bcs.n	8007c9a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c90:	b29a      	uxth	r2, r3
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	60da      	str	r2, [r3, #12]
 8007c98:	e002      	b.n	8007ca0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007cbc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3748      	adds	r7, #72	; 0x48
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007cca:	bf00      	nop
 8007ccc:	58024400 	.word	0x58024400
 8007cd0:	03d09000 	.word	0x03d09000
 8007cd4:	003d0900 	.word	0x003d0900
 8007cd8:	08009360 	.word	0x08009360

08007cdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b083      	sub	sp, #12
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce8:	f003 0301 	and.w	r3, r3, #1
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d00a      	beq.n	8007d06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	430a      	orrs	r2, r1
 8007d04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d0a:	f003 0302 	and.w	r3, r3, #2
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d00a      	beq.n	8007d28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	430a      	orrs	r2, r1
 8007d26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d2c:	f003 0304 	and.w	r3, r3, #4
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d00a      	beq.n	8007d4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	430a      	orrs	r2, r1
 8007d48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d4e:	f003 0308 	and.w	r3, r3, #8
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d00a      	beq.n	8007d6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	430a      	orrs	r2, r1
 8007d6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d70:	f003 0310 	and.w	r3, r3, #16
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d00a      	beq.n	8007d8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	430a      	orrs	r2, r1
 8007d8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d92:	f003 0320 	and.w	r3, r3, #32
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d00a      	beq.n	8007db0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	430a      	orrs	r2, r1
 8007dae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d01a      	beq.n	8007df2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	430a      	orrs	r2, r1
 8007dd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007dda:	d10a      	bne.n	8007df2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	430a      	orrs	r2, r1
 8007df0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d00a      	beq.n	8007e14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	430a      	orrs	r2, r1
 8007e12:	605a      	str	r2, [r3, #4]
  }
}
 8007e14:	bf00      	nop
 8007e16:	370c      	adds	r7, #12
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr

08007e20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b086      	sub	sp, #24
 8007e24:	af02      	add	r7, sp, #8
 8007e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e30:	f7f9 fb84 	bl	800153c <HAL_GetTick>
 8007e34:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f003 0308 	and.w	r3, r3, #8
 8007e40:	2b08      	cmp	r3, #8
 8007e42:	d10e      	bne.n	8007e62 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e48:	9300      	str	r3, [sp, #0]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 f82f 	bl	8007eb6 <UART_WaitOnFlagUntilTimeout>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d001      	beq.n	8007e62 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e5e:	2303      	movs	r3, #3
 8007e60:	e025      	b.n	8007eae <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f003 0304 	and.w	r3, r3, #4
 8007e6c:	2b04      	cmp	r3, #4
 8007e6e:	d10e      	bne.n	8007e8e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e74:	9300      	str	r3, [sp, #0]
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 f819 	bl	8007eb6 <UART_WaitOnFlagUntilTimeout>
 8007e84:	4603      	mov	r3, r0
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d001      	beq.n	8007e8e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e8a:	2303      	movs	r3, #3
 8007e8c:	e00f      	b.n	8007eae <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2220      	movs	r2, #32
 8007e92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2220      	movs	r2, #32
 8007e9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007eac:	2300      	movs	r3, #0
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3710      	adds	r7, #16
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}

08007eb6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007eb6:	b580      	push	{r7, lr}
 8007eb8:	b09c      	sub	sp, #112	; 0x70
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	60f8      	str	r0, [r7, #12]
 8007ebe:	60b9      	str	r1, [r7, #8]
 8007ec0:	603b      	str	r3, [r7, #0]
 8007ec2:	4613      	mov	r3, r2
 8007ec4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ec6:	e0a9      	b.n	800801c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ec8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ece:	f000 80a5 	beq.w	800801c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ed2:	f7f9 fb33 	bl	800153c <HAL_GetTick>
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	1ad3      	subs	r3, r2, r3
 8007edc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	d302      	bcc.n	8007ee8 <UART_WaitOnFlagUntilTimeout+0x32>
 8007ee2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d140      	bne.n	8007f6a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ef0:	e853 3f00 	ldrex	r3, [r3]
 8007ef4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007ef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ef8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007efc:	667b      	str	r3, [r7, #100]	; 0x64
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	461a      	mov	r2, r3
 8007f04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f08:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f0a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f0c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007f0e:	e841 2300 	strex	r3, r2, [r1]
 8007f12:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007f14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d1e6      	bne.n	8007ee8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	3308      	adds	r3, #8
 8007f20:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f24:	e853 3f00 	ldrex	r3, [r3]
 8007f28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f2c:	f023 0301 	bic.w	r3, r3, #1
 8007f30:	663b      	str	r3, [r7, #96]	; 0x60
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	3308      	adds	r3, #8
 8007f38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007f3a:	64ba      	str	r2, [r7, #72]	; 0x48
 8007f3c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007f40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f42:	e841 2300 	strex	r3, r2, [r1]
 8007f46:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007f48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d1e5      	bne.n	8007f1a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2220      	movs	r2, #32
 8007f52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2220      	movs	r2, #32
 8007f5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2200      	movs	r2, #0
 8007f62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007f66:	2303      	movs	r3, #3
 8007f68:	e069      	b.n	800803e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f003 0304 	and.w	r3, r3, #4
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d051      	beq.n	800801c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	69db      	ldr	r3, [r3, #28]
 8007f7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f86:	d149      	bne.n	800801c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f90:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f9a:	e853 3f00 	ldrex	r3, [r3]
 8007f9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007fa6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	461a      	mov	r2, r3
 8007fae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fb0:	637b      	str	r3, [r7, #52]	; 0x34
 8007fb2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007fb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007fb8:	e841 2300 	strex	r3, r2, [r1]
 8007fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d1e6      	bne.n	8007f92 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	3308      	adds	r3, #8
 8007fca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	e853 3f00 	ldrex	r3, [r3]
 8007fd2:	613b      	str	r3, [r7, #16]
   return(result);
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	f023 0301 	bic.w	r3, r3, #1
 8007fda:	66bb      	str	r3, [r7, #104]	; 0x68
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	3308      	adds	r3, #8
 8007fe2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007fe4:	623a      	str	r2, [r7, #32]
 8007fe6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe8:	69f9      	ldr	r1, [r7, #28]
 8007fea:	6a3a      	ldr	r2, [r7, #32]
 8007fec:	e841 2300 	strex	r3, r2, [r1]
 8007ff0:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d1e5      	bne.n	8007fc4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2220      	movs	r2, #32
 8007ffc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2220      	movs	r2, #32
 8008004:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2220      	movs	r2, #32
 800800c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2200      	movs	r2, #0
 8008014:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008018:	2303      	movs	r3, #3
 800801a:	e010      	b.n	800803e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	69da      	ldr	r2, [r3, #28]
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	4013      	ands	r3, r2
 8008026:	68ba      	ldr	r2, [r7, #8]
 8008028:	429a      	cmp	r2, r3
 800802a:	bf0c      	ite	eq
 800802c:	2301      	moveq	r3, #1
 800802e:	2300      	movne	r3, #0
 8008030:	b2db      	uxtb	r3, r3
 8008032:	461a      	mov	r2, r3
 8008034:	79fb      	ldrb	r3, [r7, #7]
 8008036:	429a      	cmp	r2, r3
 8008038:	f43f af46 	beq.w	8007ec8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800803c:	2300      	movs	r3, #0
}
 800803e:	4618      	mov	r0, r3
 8008040:	3770      	adds	r7, #112	; 0x70
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
	...

08008048 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008048:	b480      	push	{r7}
 800804a:	b095      	sub	sp, #84	; 0x54
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008058:	e853 3f00 	ldrex	r3, [r3]
 800805c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800805e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008060:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008064:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	461a      	mov	r2, r3
 800806c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800806e:	643b      	str	r3, [r7, #64]	; 0x40
 8008070:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008072:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008074:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008076:	e841 2300 	strex	r3, r2, [r1]
 800807a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800807c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800807e:	2b00      	cmp	r3, #0
 8008080:	d1e6      	bne.n	8008050 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	3308      	adds	r3, #8
 8008088:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800808a:	6a3b      	ldr	r3, [r7, #32]
 800808c:	e853 3f00 	ldrex	r3, [r3]
 8008090:	61fb      	str	r3, [r7, #28]
   return(result);
 8008092:	69fa      	ldr	r2, [r7, #28]
 8008094:	4b1e      	ldr	r3, [pc, #120]	; (8008110 <UART_EndRxTransfer+0xc8>)
 8008096:	4013      	ands	r3, r2
 8008098:	64bb      	str	r3, [r7, #72]	; 0x48
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	3308      	adds	r3, #8
 80080a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80080a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080aa:	e841 2300 	strex	r3, r2, [r1]
 80080ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d1e5      	bne.n	8008082 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d118      	bne.n	80080f0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	e853 3f00 	ldrex	r3, [r3]
 80080ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	f023 0310 	bic.w	r3, r3, #16
 80080d2:	647b      	str	r3, [r7, #68]	; 0x44
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	461a      	mov	r2, r3
 80080da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080dc:	61bb      	str	r3, [r7, #24]
 80080de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e0:	6979      	ldr	r1, [r7, #20]
 80080e2:	69ba      	ldr	r2, [r7, #24]
 80080e4:	e841 2300 	strex	r3, r2, [r1]
 80080e8:	613b      	str	r3, [r7, #16]
   return(result);
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d1e6      	bne.n	80080be <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2220      	movs	r2, #32
 80080f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2200      	movs	r2, #0
 80080fc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2200      	movs	r2, #0
 8008102:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008104:	bf00      	nop
 8008106:	3754      	adds	r7, #84	; 0x54
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr
 8008110:	effffffe 	.word	0xeffffffe

08008114 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b084      	sub	sp, #16
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008120:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2200      	movs	r2, #0
 8008126:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2200      	movs	r2, #0
 800812e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008132:	68f8      	ldr	r0, [r7, #12]
 8008134:	f7ff f854 	bl	80071e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008138:	bf00      	nop
 800813a:	3710      	adds	r7, #16
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b088      	sub	sp, #32
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	e853 3f00 	ldrex	r3, [r3]
 8008154:	60bb      	str	r3, [r7, #8]
   return(result);
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800815c:	61fb      	str	r3, [r7, #28]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	461a      	mov	r2, r3
 8008164:	69fb      	ldr	r3, [r7, #28]
 8008166:	61bb      	str	r3, [r7, #24]
 8008168:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800816a:	6979      	ldr	r1, [r7, #20]
 800816c:	69ba      	ldr	r2, [r7, #24]
 800816e:	e841 2300 	strex	r3, r2, [r1]
 8008172:	613b      	str	r3, [r7, #16]
   return(result);
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d1e6      	bne.n	8008148 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2220      	movs	r2, #32
 800817e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f7ff f81f 	bl	80071cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800818e:	bf00      	nop
 8008190:	3720      	adds	r7, #32
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}

08008196 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008196:	b480      	push	{r7}
 8008198:	b083      	sub	sp, #12
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800819e:	bf00      	nop
 80081a0:	370c      	adds	r7, #12
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr

080081aa <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80081aa:	b480      	push	{r7}
 80081ac:	b083      	sub	sp, #12
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80081b2:	bf00      	nop
 80081b4:	370c      	adds	r7, #12
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr

080081be <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80081be:	b480      	push	{r7}
 80081c0:	b083      	sub	sp, #12
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80081c6:	bf00      	nop
 80081c8:	370c      	adds	r7, #12
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr

080081d2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80081d2:	b480      	push	{r7}
 80081d4:	b085      	sub	sp, #20
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	d101      	bne.n	80081e8 <HAL_UARTEx_DisableFifoMode+0x16>
 80081e4:	2302      	movs	r3, #2
 80081e6:	e027      	b.n	8008238 <HAL_UARTEx_DisableFifoMode+0x66>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2201      	movs	r2, #1
 80081ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2224      	movs	r2, #36	; 0x24
 80081f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f022 0201 	bic.w	r2, r2, #1
 800820e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008216:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2200      	movs	r2, #0
 800821c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	68fa      	ldr	r2, [r7, #12]
 8008224:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2220      	movs	r2, #32
 800822a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2200      	movs	r2, #0
 8008232:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008236:	2300      	movs	r3, #0
}
 8008238:	4618      	mov	r0, r3
 800823a:	3714      	adds	r7, #20
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008254:	2b01      	cmp	r3, #1
 8008256:	d101      	bne.n	800825c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008258:	2302      	movs	r3, #2
 800825a:	e02d      	b.n	80082b8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2201      	movs	r2, #1
 8008260:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2224      	movs	r2, #36	; 0x24
 8008268:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f022 0201 	bic.w	r2, r2, #1
 8008282:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	683a      	ldr	r2, [r7, #0]
 8008294:	430a      	orrs	r2, r1
 8008296:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 f84f 	bl	800833c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	68fa      	ldr	r2, [r7, #12]
 80082a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2220      	movs	r2, #32
 80082aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2200      	movs	r2, #0
 80082b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80082b6:	2300      	movs	r3, #0
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3710      	adds	r7, #16
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d101      	bne.n	80082d8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80082d4:	2302      	movs	r3, #2
 80082d6:	e02d      	b.n	8008334 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2201      	movs	r2, #1
 80082dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2224      	movs	r2, #36	; 0x24
 80082e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f022 0201 	bic.w	r2, r2, #1
 80082fe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	683a      	ldr	r2, [r7, #0]
 8008310:	430a      	orrs	r2, r1
 8008312:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 f811 	bl	800833c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	68fa      	ldr	r2, [r7, #12]
 8008320:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2220      	movs	r2, #32
 8008326:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008332:	2300      	movs	r3, #0
}
 8008334:	4618      	mov	r0, r3
 8008336:	3710      	adds	r7, #16
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800833c:	b480      	push	{r7}
 800833e:	b085      	sub	sp, #20
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008348:	2b00      	cmp	r3, #0
 800834a:	d108      	bne.n	800835e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2201      	movs	r2, #1
 8008350:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2201      	movs	r2, #1
 8008358:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800835c:	e031      	b.n	80083c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800835e:	2310      	movs	r3, #16
 8008360:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008362:	2310      	movs	r3, #16
 8008364:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	0e5b      	lsrs	r3, r3, #25
 800836e:	b2db      	uxtb	r3, r3
 8008370:	f003 0307 	and.w	r3, r3, #7
 8008374:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	689b      	ldr	r3, [r3, #8]
 800837c:	0f5b      	lsrs	r3, r3, #29
 800837e:	b2db      	uxtb	r3, r3
 8008380:	f003 0307 	and.w	r3, r3, #7
 8008384:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008386:	7bbb      	ldrb	r3, [r7, #14]
 8008388:	7b3a      	ldrb	r2, [r7, #12]
 800838a:	4911      	ldr	r1, [pc, #68]	; (80083d0 <UARTEx_SetNbDataToProcess+0x94>)
 800838c:	5c8a      	ldrb	r2, [r1, r2]
 800838e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008392:	7b3a      	ldrb	r2, [r7, #12]
 8008394:	490f      	ldr	r1, [pc, #60]	; (80083d4 <UARTEx_SetNbDataToProcess+0x98>)
 8008396:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008398:	fb93 f3f2 	sdiv	r3, r3, r2
 800839c:	b29a      	uxth	r2, r3
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80083a4:	7bfb      	ldrb	r3, [r7, #15]
 80083a6:	7b7a      	ldrb	r2, [r7, #13]
 80083a8:	4909      	ldr	r1, [pc, #36]	; (80083d0 <UARTEx_SetNbDataToProcess+0x94>)
 80083aa:	5c8a      	ldrb	r2, [r1, r2]
 80083ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80083b0:	7b7a      	ldrb	r2, [r7, #13]
 80083b2:	4908      	ldr	r1, [pc, #32]	; (80083d4 <UARTEx_SetNbDataToProcess+0x98>)
 80083b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80083b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80083ba:	b29a      	uxth	r2, r3
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80083c2:	bf00      	nop
 80083c4:	3714      	adds	r7, #20
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr
 80083ce:	bf00      	nop
 80083d0:	08009378 	.word	0x08009378
 80083d4:	08009380 	.word	0x08009380

080083d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80083d8:	b084      	sub	sp, #16
 80083da:	b580      	push	{r7, lr}
 80083dc:	b084      	sub	sp, #16
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
 80083e2:	f107 001c 	add.w	r0, r7, #28
 80083e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80083ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d120      	bne.n	8008432 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	68da      	ldr	r2, [r3, #12]
 8008400:	4b2a      	ldr	r3, [pc, #168]	; (80084ac <USB_CoreInit+0xd4>)
 8008402:	4013      	ands	r3, r2
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	68db      	ldr	r3, [r3, #12]
 800840c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008416:	2b01      	cmp	r3, #1
 8008418:	d105      	bne.n	8008426 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	68db      	ldr	r3, [r3, #12]
 800841e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 faac 	bl	8008984 <USB_CoreReset>
 800842c:	4603      	mov	r3, r0
 800842e:	73fb      	strb	r3, [r7, #15]
 8008430:	e01a      	b.n	8008468 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	68db      	ldr	r3, [r3, #12]
 8008436:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 faa0 	bl	8008984 <USB_CoreReset>
 8008444:	4603      	mov	r3, r0
 8008446:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008448:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800844a:	2b00      	cmp	r3, #0
 800844c:	d106      	bne.n	800845c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008452:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	639a      	str	r2, [r3, #56]	; 0x38
 800845a:	e005      	b.n	8008468 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008460:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800846a:	2b01      	cmp	r3, #1
 800846c:	d116      	bne.n	800849c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008472:	b29a      	uxth	r2, r3
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800847c:	4b0c      	ldr	r3, [pc, #48]	; (80084b0 <USB_CoreInit+0xd8>)
 800847e:	4313      	orrs	r3, r2
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	689b      	ldr	r3, [r3, #8]
 8008488:	f043 0206 	orr.w	r2, r3, #6
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	f043 0220 	orr.w	r2, r3, #32
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800849c:	7bfb      	ldrb	r3, [r7, #15]
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3710      	adds	r7, #16
 80084a2:	46bd      	mov	sp, r7
 80084a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80084a8:	b004      	add	sp, #16
 80084aa:	4770      	bx	lr
 80084ac:	ffbdffbf 	.word	0xffbdffbf
 80084b0:	03ee0000 	.word	0x03ee0000

080084b4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b083      	sub	sp, #12
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	f023 0201 	bic.w	r2, r3, #1
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80084c8:	2300      	movs	r3, #0
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	370c      	adds	r7, #12
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr

080084d6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80084d6:	b580      	push	{r7, lr}
 80084d8:	b084      	sub	sp, #16
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
 80084de:	460b      	mov	r3, r1
 80084e0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80084e2:	2300      	movs	r3, #0
 80084e4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	68db      	ldr	r3, [r3, #12]
 80084ea:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80084f2:	78fb      	ldrb	r3, [r7, #3]
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d115      	bne.n	8008524 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	68db      	ldr	r3, [r3, #12]
 80084fc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008504:	2001      	movs	r0, #1
 8008506:	f7f9 f825 	bl	8001554 <HAL_Delay>
      ms++;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	3301      	adds	r3, #1
 800850e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 fa29 	bl	8008968 <USB_GetMode>
 8008516:	4603      	mov	r3, r0
 8008518:	2b01      	cmp	r3, #1
 800851a:	d01e      	beq.n	800855a <USB_SetCurrentMode+0x84>
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2b31      	cmp	r3, #49	; 0x31
 8008520:	d9f0      	bls.n	8008504 <USB_SetCurrentMode+0x2e>
 8008522:	e01a      	b.n	800855a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008524:	78fb      	ldrb	r3, [r7, #3]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d115      	bne.n	8008556 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	68db      	ldr	r3, [r3, #12]
 800852e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008536:	2001      	movs	r0, #1
 8008538:	f7f9 f80c 	bl	8001554 <HAL_Delay>
      ms++;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	3301      	adds	r3, #1
 8008540:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 fa10 	bl	8008968 <USB_GetMode>
 8008548:	4603      	mov	r3, r0
 800854a:	2b00      	cmp	r3, #0
 800854c:	d005      	beq.n	800855a <USB_SetCurrentMode+0x84>
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2b31      	cmp	r3, #49	; 0x31
 8008552:	d9f0      	bls.n	8008536 <USB_SetCurrentMode+0x60>
 8008554:	e001      	b.n	800855a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008556:	2301      	movs	r3, #1
 8008558:	e005      	b.n	8008566 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2b32      	cmp	r3, #50	; 0x32
 800855e:	d101      	bne.n	8008564 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008560:	2301      	movs	r3, #1
 8008562:	e000      	b.n	8008566 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008564:	2300      	movs	r3, #0
}
 8008566:	4618      	mov	r0, r3
 8008568:	3710      	adds	r7, #16
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}
	...

08008570 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008570:	b084      	sub	sp, #16
 8008572:	b580      	push	{r7, lr}
 8008574:	b086      	sub	sp, #24
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
 800857a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800857e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008582:	2300      	movs	r3, #0
 8008584:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800858a:	2300      	movs	r3, #0
 800858c:	613b      	str	r3, [r7, #16]
 800858e:	e009      	b.n	80085a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	3340      	adds	r3, #64	; 0x40
 8008596:	009b      	lsls	r3, r3, #2
 8008598:	4413      	add	r3, r2
 800859a:	2200      	movs	r2, #0
 800859c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	3301      	adds	r3, #1
 80085a2:	613b      	str	r3, [r7, #16]
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	2b0e      	cmp	r3, #14
 80085a8:	d9f2      	bls.n	8008590 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80085aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d11c      	bne.n	80085ea <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	68fa      	ldr	r2, [r7, #12]
 80085ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085be:	f043 0302 	orr.w	r3, r3, #2
 80085c2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085c8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	601a      	str	r2, [r3, #0]
 80085e8:	e005      	b.n	80085f6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80085fc:	461a      	mov	r2, r3
 80085fe:	2300      	movs	r3, #0
 8008600:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008608:	4619      	mov	r1, r3
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008610:	461a      	mov	r2, r3
 8008612:	680b      	ldr	r3, [r1, #0]
 8008614:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008618:	2b01      	cmp	r3, #1
 800861a:	d10c      	bne.n	8008636 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800861c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800861e:	2b00      	cmp	r3, #0
 8008620:	d104      	bne.n	800862c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008622:	2100      	movs	r1, #0
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 f965 	bl	80088f4 <USB_SetDevSpeed>
 800862a:	e008      	b.n	800863e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800862c:	2101      	movs	r1, #1
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 f960 	bl	80088f4 <USB_SetDevSpeed>
 8008634:	e003      	b.n	800863e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008636:	2103      	movs	r1, #3
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f000 f95b 	bl	80088f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800863e:	2110      	movs	r1, #16
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 f8f3 	bl	800882c <USB_FlushTxFifo>
 8008646:	4603      	mov	r3, r0
 8008648:	2b00      	cmp	r3, #0
 800864a:	d001      	beq.n	8008650 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800864c:	2301      	movs	r3, #1
 800864e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 f91f 	bl	8008894 <USB_FlushRxFifo>
 8008656:	4603      	mov	r3, r0
 8008658:	2b00      	cmp	r3, #0
 800865a:	d001      	beq.n	8008660 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800865c:	2301      	movs	r3, #1
 800865e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008666:	461a      	mov	r2, r3
 8008668:	2300      	movs	r3, #0
 800866a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008672:	461a      	mov	r2, r3
 8008674:	2300      	movs	r3, #0
 8008676:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800867e:	461a      	mov	r2, r3
 8008680:	2300      	movs	r3, #0
 8008682:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008684:	2300      	movs	r3, #0
 8008686:	613b      	str	r3, [r7, #16]
 8008688:	e043      	b.n	8008712 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	015a      	lsls	r2, r3, #5
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	4413      	add	r3, r2
 8008692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800869c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086a0:	d118      	bne.n	80086d4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d10a      	bne.n	80086be <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	015a      	lsls	r2, r3, #5
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	4413      	add	r3, r2
 80086b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086b4:	461a      	mov	r2, r3
 80086b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80086ba:	6013      	str	r3, [r2, #0]
 80086bc:	e013      	b.n	80086e6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	015a      	lsls	r2, r3, #5
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	4413      	add	r3, r2
 80086c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ca:	461a      	mov	r2, r3
 80086cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80086d0:	6013      	str	r3, [r2, #0]
 80086d2:	e008      	b.n	80086e6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	015a      	lsls	r2, r3, #5
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	4413      	add	r3, r2
 80086dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086e0:	461a      	mov	r2, r3
 80086e2:	2300      	movs	r3, #0
 80086e4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	015a      	lsls	r2, r3, #5
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	4413      	add	r3, r2
 80086ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086f2:	461a      	mov	r2, r3
 80086f4:	2300      	movs	r3, #0
 80086f6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	015a      	lsls	r2, r3, #5
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	4413      	add	r3, r2
 8008700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008704:	461a      	mov	r2, r3
 8008706:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800870a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	3301      	adds	r3, #1
 8008710:	613b      	str	r3, [r7, #16]
 8008712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008714:	693a      	ldr	r2, [r7, #16]
 8008716:	429a      	cmp	r2, r3
 8008718:	d3b7      	bcc.n	800868a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800871a:	2300      	movs	r3, #0
 800871c:	613b      	str	r3, [r7, #16]
 800871e:	e043      	b.n	80087a8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	015a      	lsls	r2, r3, #5
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	4413      	add	r3, r2
 8008728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008732:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008736:	d118      	bne.n	800876a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d10a      	bne.n	8008754 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	015a      	lsls	r2, r3, #5
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	4413      	add	r3, r2
 8008746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800874a:	461a      	mov	r2, r3
 800874c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008750:	6013      	str	r3, [r2, #0]
 8008752:	e013      	b.n	800877c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	015a      	lsls	r2, r3, #5
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	4413      	add	r3, r2
 800875c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008760:	461a      	mov	r2, r3
 8008762:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008766:	6013      	str	r3, [r2, #0]
 8008768:	e008      	b.n	800877c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	015a      	lsls	r2, r3, #5
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	4413      	add	r3, r2
 8008772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008776:	461a      	mov	r2, r3
 8008778:	2300      	movs	r3, #0
 800877a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	015a      	lsls	r2, r3, #5
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	4413      	add	r3, r2
 8008784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008788:	461a      	mov	r2, r3
 800878a:	2300      	movs	r3, #0
 800878c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	015a      	lsls	r2, r3, #5
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	4413      	add	r3, r2
 8008796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800879a:	461a      	mov	r2, r3
 800879c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80087a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	3301      	adds	r3, #1
 80087a6:	613b      	str	r3, [r7, #16]
 80087a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087aa:	693a      	ldr	r2, [r7, #16]
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d3b7      	bcc.n	8008720 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087b6:	691b      	ldr	r3, [r3, #16]
 80087b8:	68fa      	ldr	r2, [r7, #12]
 80087ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087c2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2200      	movs	r2, #0
 80087c8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80087d0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80087d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d105      	bne.n	80087e4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	699b      	ldr	r3, [r3, #24]
 80087dc:	f043 0210 	orr.w	r2, r3, #16
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	699a      	ldr	r2, [r3, #24]
 80087e8:	4b0e      	ldr	r3, [pc, #56]	; (8008824 <USB_DevInit+0x2b4>)
 80087ea:	4313      	orrs	r3, r2
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80087f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d005      	beq.n	8008802 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	699b      	ldr	r3, [r3, #24]
 80087fa:	f043 0208 	orr.w	r2, r3, #8
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008802:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008804:	2b01      	cmp	r3, #1
 8008806:	d105      	bne.n	8008814 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	699a      	ldr	r2, [r3, #24]
 800880c:	4b06      	ldr	r3, [pc, #24]	; (8008828 <USB_DevInit+0x2b8>)
 800880e:	4313      	orrs	r3, r2
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008814:	7dfb      	ldrb	r3, [r7, #23]
}
 8008816:	4618      	mov	r0, r3
 8008818:	3718      	adds	r7, #24
 800881a:	46bd      	mov	sp, r7
 800881c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008820:	b004      	add	sp, #16
 8008822:	4770      	bx	lr
 8008824:	803c3800 	.word	0x803c3800
 8008828:	40000004 	.word	0x40000004

0800882c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800882c:	b480      	push	{r7}
 800882e:	b085      	sub	sp, #20
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008836:	2300      	movs	r3, #0
 8008838:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	3301      	adds	r3, #1
 800883e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	4a13      	ldr	r2, [pc, #76]	; (8008890 <USB_FlushTxFifo+0x64>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d901      	bls.n	800884c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008848:	2303      	movs	r3, #3
 800884a:	e01b      	b.n	8008884 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	691b      	ldr	r3, [r3, #16]
 8008850:	2b00      	cmp	r3, #0
 8008852:	daf2      	bge.n	800883a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008854:	2300      	movs	r3, #0
 8008856:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	019b      	lsls	r3, r3, #6
 800885c:	f043 0220 	orr.w	r2, r3, #32
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	3301      	adds	r3, #1
 8008868:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	4a08      	ldr	r2, [pc, #32]	; (8008890 <USB_FlushTxFifo+0x64>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d901      	bls.n	8008876 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008872:	2303      	movs	r3, #3
 8008874:	e006      	b.n	8008884 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	691b      	ldr	r3, [r3, #16]
 800887a:	f003 0320 	and.w	r3, r3, #32
 800887e:	2b20      	cmp	r3, #32
 8008880:	d0f0      	beq.n	8008864 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008882:	2300      	movs	r3, #0
}
 8008884:	4618      	mov	r0, r3
 8008886:	3714      	adds	r7, #20
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr
 8008890:	00030d40 	.word	0x00030d40

08008894 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008894:	b480      	push	{r7}
 8008896:	b085      	sub	sp, #20
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800889c:	2300      	movs	r3, #0
 800889e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	3301      	adds	r3, #1
 80088a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	4a11      	ldr	r2, [pc, #68]	; (80088f0 <USB_FlushRxFifo+0x5c>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d901      	bls.n	80088b2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80088ae:	2303      	movs	r3, #3
 80088b0:	e018      	b.n	80088e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	691b      	ldr	r3, [r3, #16]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	daf2      	bge.n	80088a0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80088ba:	2300      	movs	r3, #0
 80088bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2210      	movs	r2, #16
 80088c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	3301      	adds	r3, #1
 80088c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	4a08      	ldr	r2, [pc, #32]	; (80088f0 <USB_FlushRxFifo+0x5c>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d901      	bls.n	80088d6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80088d2:	2303      	movs	r3, #3
 80088d4:	e006      	b.n	80088e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	691b      	ldr	r3, [r3, #16]
 80088da:	f003 0310 	and.w	r3, r3, #16
 80088de:	2b10      	cmp	r3, #16
 80088e0:	d0f0      	beq.n	80088c4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80088e2:	2300      	movs	r3, #0
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3714      	adds	r7, #20
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr
 80088f0:	00030d40 	.word	0x00030d40

080088f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b085      	sub	sp, #20
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	460b      	mov	r3, r1
 80088fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	78fb      	ldrb	r3, [r7, #3]
 800890e:	68f9      	ldr	r1, [r7, #12]
 8008910:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008914:	4313      	orrs	r3, r2
 8008916:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008918:	2300      	movs	r3, #0
}
 800891a:	4618      	mov	r0, r3
 800891c:	3714      	adds	r7, #20
 800891e:	46bd      	mov	sp, r7
 8008920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008924:	4770      	bx	lr

08008926 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008926:	b480      	push	{r7}
 8008928:	b085      	sub	sp, #20
 800892a:	af00      	add	r7, sp, #0
 800892c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	68fa      	ldr	r2, [r7, #12]
 800893c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008940:	f023 0303 	bic.w	r3, r3, #3
 8008944:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	68fa      	ldr	r2, [r7, #12]
 8008950:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008954:	f043 0302 	orr.w	r3, r3, #2
 8008958:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800895a:	2300      	movs	r3, #0
}
 800895c:	4618      	mov	r0, r3
 800895e:	3714      	adds	r7, #20
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr

08008968 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008968:	b480      	push	{r7}
 800896a:	b083      	sub	sp, #12
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	695b      	ldr	r3, [r3, #20]
 8008974:	f003 0301 	and.w	r3, r3, #1
}
 8008978:	4618      	mov	r0, r3
 800897a:	370c      	adds	r7, #12
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr

08008984 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008984:	b480      	push	{r7}
 8008986:	b085      	sub	sp, #20
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800898c:	2300      	movs	r3, #0
 800898e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	3301      	adds	r3, #1
 8008994:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	4a13      	ldr	r2, [pc, #76]	; (80089e8 <USB_CoreReset+0x64>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d901      	bls.n	80089a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800899e:	2303      	movs	r3, #3
 80089a0:	e01b      	b.n	80089da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	691b      	ldr	r3, [r3, #16]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	daf2      	bge.n	8008990 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80089aa:	2300      	movs	r3, #0
 80089ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	691b      	ldr	r3, [r3, #16]
 80089b2:	f043 0201 	orr.w	r2, r3, #1
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	3301      	adds	r3, #1
 80089be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	4a09      	ldr	r2, [pc, #36]	; (80089e8 <USB_CoreReset+0x64>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d901      	bls.n	80089cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80089c8:	2303      	movs	r3, #3
 80089ca:	e006      	b.n	80089da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	691b      	ldr	r3, [r3, #16]
 80089d0:	f003 0301 	and.w	r3, r3, #1
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d0f0      	beq.n	80089ba <USB_CoreReset+0x36>

  return HAL_OK;
 80089d8:	2300      	movs	r3, #0
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3714      	adds	r7, #20
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr
 80089e6:	bf00      	nop
 80089e8:	00030d40 	.word	0x00030d40

080089ec <__errno>:
 80089ec:	4b01      	ldr	r3, [pc, #4]	; (80089f4 <__errno+0x8>)
 80089ee:	6818      	ldr	r0, [r3, #0]
 80089f0:	4770      	bx	lr
 80089f2:	bf00      	nop
 80089f4:	24000010 	.word	0x24000010

080089f8 <__libc_init_array>:
 80089f8:	b570      	push	{r4, r5, r6, lr}
 80089fa:	4d0d      	ldr	r5, [pc, #52]	; (8008a30 <__libc_init_array+0x38>)
 80089fc:	4c0d      	ldr	r4, [pc, #52]	; (8008a34 <__libc_init_array+0x3c>)
 80089fe:	1b64      	subs	r4, r4, r5
 8008a00:	10a4      	asrs	r4, r4, #2
 8008a02:	2600      	movs	r6, #0
 8008a04:	42a6      	cmp	r6, r4
 8008a06:	d109      	bne.n	8008a1c <__libc_init_array+0x24>
 8008a08:	4d0b      	ldr	r5, [pc, #44]	; (8008a38 <__libc_init_array+0x40>)
 8008a0a:	4c0c      	ldr	r4, [pc, #48]	; (8008a3c <__libc_init_array+0x44>)
 8008a0c:	f000 fc8e 	bl	800932c <_init>
 8008a10:	1b64      	subs	r4, r4, r5
 8008a12:	10a4      	asrs	r4, r4, #2
 8008a14:	2600      	movs	r6, #0
 8008a16:	42a6      	cmp	r6, r4
 8008a18:	d105      	bne.n	8008a26 <__libc_init_array+0x2e>
 8008a1a:	bd70      	pop	{r4, r5, r6, pc}
 8008a1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a20:	4798      	blx	r3
 8008a22:	3601      	adds	r6, #1
 8008a24:	e7ee      	b.n	8008a04 <__libc_init_array+0xc>
 8008a26:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a2a:	4798      	blx	r3
 8008a2c:	3601      	adds	r6, #1
 8008a2e:	e7f2      	b.n	8008a16 <__libc_init_array+0x1e>
 8008a30:	080093c4 	.word	0x080093c4
 8008a34:	080093c4 	.word	0x080093c4
 8008a38:	080093c4 	.word	0x080093c4
 8008a3c:	080093c8 	.word	0x080093c8

08008a40 <memset>:
 8008a40:	4402      	add	r2, r0
 8008a42:	4603      	mov	r3, r0
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d100      	bne.n	8008a4a <memset+0xa>
 8008a48:	4770      	bx	lr
 8008a4a:	f803 1b01 	strb.w	r1, [r3], #1
 8008a4e:	e7f9      	b.n	8008a44 <memset+0x4>

08008a50 <siprintf>:
 8008a50:	b40e      	push	{r1, r2, r3}
 8008a52:	b500      	push	{lr}
 8008a54:	b09c      	sub	sp, #112	; 0x70
 8008a56:	ab1d      	add	r3, sp, #116	; 0x74
 8008a58:	9002      	str	r0, [sp, #8]
 8008a5a:	9006      	str	r0, [sp, #24]
 8008a5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008a60:	4809      	ldr	r0, [pc, #36]	; (8008a88 <siprintf+0x38>)
 8008a62:	9107      	str	r1, [sp, #28]
 8008a64:	9104      	str	r1, [sp, #16]
 8008a66:	4909      	ldr	r1, [pc, #36]	; (8008a8c <siprintf+0x3c>)
 8008a68:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a6c:	9105      	str	r1, [sp, #20]
 8008a6e:	6800      	ldr	r0, [r0, #0]
 8008a70:	9301      	str	r3, [sp, #4]
 8008a72:	a902      	add	r1, sp, #8
 8008a74:	f000 f868 	bl	8008b48 <_svfiprintf_r>
 8008a78:	9b02      	ldr	r3, [sp, #8]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	701a      	strb	r2, [r3, #0]
 8008a7e:	b01c      	add	sp, #112	; 0x70
 8008a80:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a84:	b003      	add	sp, #12
 8008a86:	4770      	bx	lr
 8008a88:	24000010 	.word	0x24000010
 8008a8c:	ffff0208 	.word	0xffff0208

08008a90 <__ssputs_r>:
 8008a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a94:	688e      	ldr	r6, [r1, #8]
 8008a96:	429e      	cmp	r6, r3
 8008a98:	4682      	mov	sl, r0
 8008a9a:	460c      	mov	r4, r1
 8008a9c:	4690      	mov	r8, r2
 8008a9e:	461f      	mov	r7, r3
 8008aa0:	d838      	bhi.n	8008b14 <__ssputs_r+0x84>
 8008aa2:	898a      	ldrh	r2, [r1, #12]
 8008aa4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008aa8:	d032      	beq.n	8008b10 <__ssputs_r+0x80>
 8008aaa:	6825      	ldr	r5, [r4, #0]
 8008aac:	6909      	ldr	r1, [r1, #16]
 8008aae:	eba5 0901 	sub.w	r9, r5, r1
 8008ab2:	6965      	ldr	r5, [r4, #20]
 8008ab4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ab8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008abc:	3301      	adds	r3, #1
 8008abe:	444b      	add	r3, r9
 8008ac0:	106d      	asrs	r5, r5, #1
 8008ac2:	429d      	cmp	r5, r3
 8008ac4:	bf38      	it	cc
 8008ac6:	461d      	movcc	r5, r3
 8008ac8:	0553      	lsls	r3, r2, #21
 8008aca:	d531      	bpl.n	8008b30 <__ssputs_r+0xa0>
 8008acc:	4629      	mov	r1, r5
 8008ace:	f000 fb63 	bl	8009198 <_malloc_r>
 8008ad2:	4606      	mov	r6, r0
 8008ad4:	b950      	cbnz	r0, 8008aec <__ssputs_r+0x5c>
 8008ad6:	230c      	movs	r3, #12
 8008ad8:	f8ca 3000 	str.w	r3, [sl]
 8008adc:	89a3      	ldrh	r3, [r4, #12]
 8008ade:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ae2:	81a3      	strh	r3, [r4, #12]
 8008ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aec:	6921      	ldr	r1, [r4, #16]
 8008aee:	464a      	mov	r2, r9
 8008af0:	f000 fabe 	bl	8009070 <memcpy>
 8008af4:	89a3      	ldrh	r3, [r4, #12]
 8008af6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008afa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008afe:	81a3      	strh	r3, [r4, #12]
 8008b00:	6126      	str	r6, [r4, #16]
 8008b02:	6165      	str	r5, [r4, #20]
 8008b04:	444e      	add	r6, r9
 8008b06:	eba5 0509 	sub.w	r5, r5, r9
 8008b0a:	6026      	str	r6, [r4, #0]
 8008b0c:	60a5      	str	r5, [r4, #8]
 8008b0e:	463e      	mov	r6, r7
 8008b10:	42be      	cmp	r6, r7
 8008b12:	d900      	bls.n	8008b16 <__ssputs_r+0x86>
 8008b14:	463e      	mov	r6, r7
 8008b16:	6820      	ldr	r0, [r4, #0]
 8008b18:	4632      	mov	r2, r6
 8008b1a:	4641      	mov	r1, r8
 8008b1c:	f000 fab6 	bl	800908c <memmove>
 8008b20:	68a3      	ldr	r3, [r4, #8]
 8008b22:	1b9b      	subs	r3, r3, r6
 8008b24:	60a3      	str	r3, [r4, #8]
 8008b26:	6823      	ldr	r3, [r4, #0]
 8008b28:	4433      	add	r3, r6
 8008b2a:	6023      	str	r3, [r4, #0]
 8008b2c:	2000      	movs	r0, #0
 8008b2e:	e7db      	b.n	8008ae8 <__ssputs_r+0x58>
 8008b30:	462a      	mov	r2, r5
 8008b32:	f000 fba5 	bl	8009280 <_realloc_r>
 8008b36:	4606      	mov	r6, r0
 8008b38:	2800      	cmp	r0, #0
 8008b3a:	d1e1      	bne.n	8008b00 <__ssputs_r+0x70>
 8008b3c:	6921      	ldr	r1, [r4, #16]
 8008b3e:	4650      	mov	r0, sl
 8008b40:	f000 fabe 	bl	80090c0 <_free_r>
 8008b44:	e7c7      	b.n	8008ad6 <__ssputs_r+0x46>
	...

08008b48 <_svfiprintf_r>:
 8008b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b4c:	4698      	mov	r8, r3
 8008b4e:	898b      	ldrh	r3, [r1, #12]
 8008b50:	061b      	lsls	r3, r3, #24
 8008b52:	b09d      	sub	sp, #116	; 0x74
 8008b54:	4607      	mov	r7, r0
 8008b56:	460d      	mov	r5, r1
 8008b58:	4614      	mov	r4, r2
 8008b5a:	d50e      	bpl.n	8008b7a <_svfiprintf_r+0x32>
 8008b5c:	690b      	ldr	r3, [r1, #16]
 8008b5e:	b963      	cbnz	r3, 8008b7a <_svfiprintf_r+0x32>
 8008b60:	2140      	movs	r1, #64	; 0x40
 8008b62:	f000 fb19 	bl	8009198 <_malloc_r>
 8008b66:	6028      	str	r0, [r5, #0]
 8008b68:	6128      	str	r0, [r5, #16]
 8008b6a:	b920      	cbnz	r0, 8008b76 <_svfiprintf_r+0x2e>
 8008b6c:	230c      	movs	r3, #12
 8008b6e:	603b      	str	r3, [r7, #0]
 8008b70:	f04f 30ff 	mov.w	r0, #4294967295
 8008b74:	e0d1      	b.n	8008d1a <_svfiprintf_r+0x1d2>
 8008b76:	2340      	movs	r3, #64	; 0x40
 8008b78:	616b      	str	r3, [r5, #20]
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	9309      	str	r3, [sp, #36]	; 0x24
 8008b7e:	2320      	movs	r3, #32
 8008b80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b84:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b88:	2330      	movs	r3, #48	; 0x30
 8008b8a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008d34 <_svfiprintf_r+0x1ec>
 8008b8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b92:	f04f 0901 	mov.w	r9, #1
 8008b96:	4623      	mov	r3, r4
 8008b98:	469a      	mov	sl, r3
 8008b9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b9e:	b10a      	cbz	r2, 8008ba4 <_svfiprintf_r+0x5c>
 8008ba0:	2a25      	cmp	r2, #37	; 0x25
 8008ba2:	d1f9      	bne.n	8008b98 <_svfiprintf_r+0x50>
 8008ba4:	ebba 0b04 	subs.w	fp, sl, r4
 8008ba8:	d00b      	beq.n	8008bc2 <_svfiprintf_r+0x7a>
 8008baa:	465b      	mov	r3, fp
 8008bac:	4622      	mov	r2, r4
 8008bae:	4629      	mov	r1, r5
 8008bb0:	4638      	mov	r0, r7
 8008bb2:	f7ff ff6d 	bl	8008a90 <__ssputs_r>
 8008bb6:	3001      	adds	r0, #1
 8008bb8:	f000 80aa 	beq.w	8008d10 <_svfiprintf_r+0x1c8>
 8008bbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bbe:	445a      	add	r2, fp
 8008bc0:	9209      	str	r2, [sp, #36]	; 0x24
 8008bc2:	f89a 3000 	ldrb.w	r3, [sl]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	f000 80a2 	beq.w	8008d10 <_svfiprintf_r+0x1c8>
 8008bcc:	2300      	movs	r3, #0
 8008bce:	f04f 32ff 	mov.w	r2, #4294967295
 8008bd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008bd6:	f10a 0a01 	add.w	sl, sl, #1
 8008bda:	9304      	str	r3, [sp, #16]
 8008bdc:	9307      	str	r3, [sp, #28]
 8008bde:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008be2:	931a      	str	r3, [sp, #104]	; 0x68
 8008be4:	4654      	mov	r4, sl
 8008be6:	2205      	movs	r2, #5
 8008be8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bec:	4851      	ldr	r0, [pc, #324]	; (8008d34 <_svfiprintf_r+0x1ec>)
 8008bee:	f7f7 fb77 	bl	80002e0 <memchr>
 8008bf2:	9a04      	ldr	r2, [sp, #16]
 8008bf4:	b9d8      	cbnz	r0, 8008c2e <_svfiprintf_r+0xe6>
 8008bf6:	06d0      	lsls	r0, r2, #27
 8008bf8:	bf44      	itt	mi
 8008bfa:	2320      	movmi	r3, #32
 8008bfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c00:	0711      	lsls	r1, r2, #28
 8008c02:	bf44      	itt	mi
 8008c04:	232b      	movmi	r3, #43	; 0x2b
 8008c06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c0a:	f89a 3000 	ldrb.w	r3, [sl]
 8008c0e:	2b2a      	cmp	r3, #42	; 0x2a
 8008c10:	d015      	beq.n	8008c3e <_svfiprintf_r+0xf6>
 8008c12:	9a07      	ldr	r2, [sp, #28]
 8008c14:	4654      	mov	r4, sl
 8008c16:	2000      	movs	r0, #0
 8008c18:	f04f 0c0a 	mov.w	ip, #10
 8008c1c:	4621      	mov	r1, r4
 8008c1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c22:	3b30      	subs	r3, #48	; 0x30
 8008c24:	2b09      	cmp	r3, #9
 8008c26:	d94e      	bls.n	8008cc6 <_svfiprintf_r+0x17e>
 8008c28:	b1b0      	cbz	r0, 8008c58 <_svfiprintf_r+0x110>
 8008c2a:	9207      	str	r2, [sp, #28]
 8008c2c:	e014      	b.n	8008c58 <_svfiprintf_r+0x110>
 8008c2e:	eba0 0308 	sub.w	r3, r0, r8
 8008c32:	fa09 f303 	lsl.w	r3, r9, r3
 8008c36:	4313      	orrs	r3, r2
 8008c38:	9304      	str	r3, [sp, #16]
 8008c3a:	46a2      	mov	sl, r4
 8008c3c:	e7d2      	b.n	8008be4 <_svfiprintf_r+0x9c>
 8008c3e:	9b03      	ldr	r3, [sp, #12]
 8008c40:	1d19      	adds	r1, r3, #4
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	9103      	str	r1, [sp, #12]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	bfbb      	ittet	lt
 8008c4a:	425b      	neglt	r3, r3
 8008c4c:	f042 0202 	orrlt.w	r2, r2, #2
 8008c50:	9307      	strge	r3, [sp, #28]
 8008c52:	9307      	strlt	r3, [sp, #28]
 8008c54:	bfb8      	it	lt
 8008c56:	9204      	strlt	r2, [sp, #16]
 8008c58:	7823      	ldrb	r3, [r4, #0]
 8008c5a:	2b2e      	cmp	r3, #46	; 0x2e
 8008c5c:	d10c      	bne.n	8008c78 <_svfiprintf_r+0x130>
 8008c5e:	7863      	ldrb	r3, [r4, #1]
 8008c60:	2b2a      	cmp	r3, #42	; 0x2a
 8008c62:	d135      	bne.n	8008cd0 <_svfiprintf_r+0x188>
 8008c64:	9b03      	ldr	r3, [sp, #12]
 8008c66:	1d1a      	adds	r2, r3, #4
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	9203      	str	r2, [sp, #12]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	bfb8      	it	lt
 8008c70:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c74:	3402      	adds	r4, #2
 8008c76:	9305      	str	r3, [sp, #20]
 8008c78:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008d44 <_svfiprintf_r+0x1fc>
 8008c7c:	7821      	ldrb	r1, [r4, #0]
 8008c7e:	2203      	movs	r2, #3
 8008c80:	4650      	mov	r0, sl
 8008c82:	f7f7 fb2d 	bl	80002e0 <memchr>
 8008c86:	b140      	cbz	r0, 8008c9a <_svfiprintf_r+0x152>
 8008c88:	2340      	movs	r3, #64	; 0x40
 8008c8a:	eba0 000a 	sub.w	r0, r0, sl
 8008c8e:	fa03 f000 	lsl.w	r0, r3, r0
 8008c92:	9b04      	ldr	r3, [sp, #16]
 8008c94:	4303      	orrs	r3, r0
 8008c96:	3401      	adds	r4, #1
 8008c98:	9304      	str	r3, [sp, #16]
 8008c9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c9e:	4826      	ldr	r0, [pc, #152]	; (8008d38 <_svfiprintf_r+0x1f0>)
 8008ca0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ca4:	2206      	movs	r2, #6
 8008ca6:	f7f7 fb1b 	bl	80002e0 <memchr>
 8008caa:	2800      	cmp	r0, #0
 8008cac:	d038      	beq.n	8008d20 <_svfiprintf_r+0x1d8>
 8008cae:	4b23      	ldr	r3, [pc, #140]	; (8008d3c <_svfiprintf_r+0x1f4>)
 8008cb0:	bb1b      	cbnz	r3, 8008cfa <_svfiprintf_r+0x1b2>
 8008cb2:	9b03      	ldr	r3, [sp, #12]
 8008cb4:	3307      	adds	r3, #7
 8008cb6:	f023 0307 	bic.w	r3, r3, #7
 8008cba:	3308      	adds	r3, #8
 8008cbc:	9303      	str	r3, [sp, #12]
 8008cbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cc0:	4433      	add	r3, r6
 8008cc2:	9309      	str	r3, [sp, #36]	; 0x24
 8008cc4:	e767      	b.n	8008b96 <_svfiprintf_r+0x4e>
 8008cc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008cca:	460c      	mov	r4, r1
 8008ccc:	2001      	movs	r0, #1
 8008cce:	e7a5      	b.n	8008c1c <_svfiprintf_r+0xd4>
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	3401      	adds	r4, #1
 8008cd4:	9305      	str	r3, [sp, #20]
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	f04f 0c0a 	mov.w	ip, #10
 8008cdc:	4620      	mov	r0, r4
 8008cde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ce2:	3a30      	subs	r2, #48	; 0x30
 8008ce4:	2a09      	cmp	r2, #9
 8008ce6:	d903      	bls.n	8008cf0 <_svfiprintf_r+0x1a8>
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d0c5      	beq.n	8008c78 <_svfiprintf_r+0x130>
 8008cec:	9105      	str	r1, [sp, #20]
 8008cee:	e7c3      	b.n	8008c78 <_svfiprintf_r+0x130>
 8008cf0:	fb0c 2101 	mla	r1, ip, r1, r2
 8008cf4:	4604      	mov	r4, r0
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	e7f0      	b.n	8008cdc <_svfiprintf_r+0x194>
 8008cfa:	ab03      	add	r3, sp, #12
 8008cfc:	9300      	str	r3, [sp, #0]
 8008cfe:	462a      	mov	r2, r5
 8008d00:	4b0f      	ldr	r3, [pc, #60]	; (8008d40 <_svfiprintf_r+0x1f8>)
 8008d02:	a904      	add	r1, sp, #16
 8008d04:	4638      	mov	r0, r7
 8008d06:	f3af 8000 	nop.w
 8008d0a:	1c42      	adds	r2, r0, #1
 8008d0c:	4606      	mov	r6, r0
 8008d0e:	d1d6      	bne.n	8008cbe <_svfiprintf_r+0x176>
 8008d10:	89ab      	ldrh	r3, [r5, #12]
 8008d12:	065b      	lsls	r3, r3, #25
 8008d14:	f53f af2c 	bmi.w	8008b70 <_svfiprintf_r+0x28>
 8008d18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d1a:	b01d      	add	sp, #116	; 0x74
 8008d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d20:	ab03      	add	r3, sp, #12
 8008d22:	9300      	str	r3, [sp, #0]
 8008d24:	462a      	mov	r2, r5
 8008d26:	4b06      	ldr	r3, [pc, #24]	; (8008d40 <_svfiprintf_r+0x1f8>)
 8008d28:	a904      	add	r1, sp, #16
 8008d2a:	4638      	mov	r0, r7
 8008d2c:	f000 f87a 	bl	8008e24 <_printf_i>
 8008d30:	e7eb      	b.n	8008d0a <_svfiprintf_r+0x1c2>
 8008d32:	bf00      	nop
 8008d34:	08009388 	.word	0x08009388
 8008d38:	08009392 	.word	0x08009392
 8008d3c:	00000000 	.word	0x00000000
 8008d40:	08008a91 	.word	0x08008a91
 8008d44:	0800938e 	.word	0x0800938e

08008d48 <_printf_common>:
 8008d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d4c:	4616      	mov	r6, r2
 8008d4e:	4699      	mov	r9, r3
 8008d50:	688a      	ldr	r2, [r1, #8]
 8008d52:	690b      	ldr	r3, [r1, #16]
 8008d54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	bfb8      	it	lt
 8008d5c:	4613      	movlt	r3, r2
 8008d5e:	6033      	str	r3, [r6, #0]
 8008d60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d64:	4607      	mov	r7, r0
 8008d66:	460c      	mov	r4, r1
 8008d68:	b10a      	cbz	r2, 8008d6e <_printf_common+0x26>
 8008d6a:	3301      	adds	r3, #1
 8008d6c:	6033      	str	r3, [r6, #0]
 8008d6e:	6823      	ldr	r3, [r4, #0]
 8008d70:	0699      	lsls	r1, r3, #26
 8008d72:	bf42      	ittt	mi
 8008d74:	6833      	ldrmi	r3, [r6, #0]
 8008d76:	3302      	addmi	r3, #2
 8008d78:	6033      	strmi	r3, [r6, #0]
 8008d7a:	6825      	ldr	r5, [r4, #0]
 8008d7c:	f015 0506 	ands.w	r5, r5, #6
 8008d80:	d106      	bne.n	8008d90 <_printf_common+0x48>
 8008d82:	f104 0a19 	add.w	sl, r4, #25
 8008d86:	68e3      	ldr	r3, [r4, #12]
 8008d88:	6832      	ldr	r2, [r6, #0]
 8008d8a:	1a9b      	subs	r3, r3, r2
 8008d8c:	42ab      	cmp	r3, r5
 8008d8e:	dc26      	bgt.n	8008dde <_printf_common+0x96>
 8008d90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008d94:	1e13      	subs	r3, r2, #0
 8008d96:	6822      	ldr	r2, [r4, #0]
 8008d98:	bf18      	it	ne
 8008d9a:	2301      	movne	r3, #1
 8008d9c:	0692      	lsls	r2, r2, #26
 8008d9e:	d42b      	bmi.n	8008df8 <_printf_common+0xb0>
 8008da0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008da4:	4649      	mov	r1, r9
 8008da6:	4638      	mov	r0, r7
 8008da8:	47c0      	blx	r8
 8008daa:	3001      	adds	r0, #1
 8008dac:	d01e      	beq.n	8008dec <_printf_common+0xa4>
 8008dae:	6823      	ldr	r3, [r4, #0]
 8008db0:	68e5      	ldr	r5, [r4, #12]
 8008db2:	6832      	ldr	r2, [r6, #0]
 8008db4:	f003 0306 	and.w	r3, r3, #6
 8008db8:	2b04      	cmp	r3, #4
 8008dba:	bf08      	it	eq
 8008dbc:	1aad      	subeq	r5, r5, r2
 8008dbe:	68a3      	ldr	r3, [r4, #8]
 8008dc0:	6922      	ldr	r2, [r4, #16]
 8008dc2:	bf0c      	ite	eq
 8008dc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008dc8:	2500      	movne	r5, #0
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	bfc4      	itt	gt
 8008dce:	1a9b      	subgt	r3, r3, r2
 8008dd0:	18ed      	addgt	r5, r5, r3
 8008dd2:	2600      	movs	r6, #0
 8008dd4:	341a      	adds	r4, #26
 8008dd6:	42b5      	cmp	r5, r6
 8008dd8:	d11a      	bne.n	8008e10 <_printf_common+0xc8>
 8008dda:	2000      	movs	r0, #0
 8008ddc:	e008      	b.n	8008df0 <_printf_common+0xa8>
 8008dde:	2301      	movs	r3, #1
 8008de0:	4652      	mov	r2, sl
 8008de2:	4649      	mov	r1, r9
 8008de4:	4638      	mov	r0, r7
 8008de6:	47c0      	blx	r8
 8008de8:	3001      	adds	r0, #1
 8008dea:	d103      	bne.n	8008df4 <_printf_common+0xac>
 8008dec:	f04f 30ff 	mov.w	r0, #4294967295
 8008df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008df4:	3501      	adds	r5, #1
 8008df6:	e7c6      	b.n	8008d86 <_printf_common+0x3e>
 8008df8:	18e1      	adds	r1, r4, r3
 8008dfa:	1c5a      	adds	r2, r3, #1
 8008dfc:	2030      	movs	r0, #48	; 0x30
 8008dfe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e02:	4422      	add	r2, r4
 8008e04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008e08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008e0c:	3302      	adds	r3, #2
 8008e0e:	e7c7      	b.n	8008da0 <_printf_common+0x58>
 8008e10:	2301      	movs	r3, #1
 8008e12:	4622      	mov	r2, r4
 8008e14:	4649      	mov	r1, r9
 8008e16:	4638      	mov	r0, r7
 8008e18:	47c0      	blx	r8
 8008e1a:	3001      	adds	r0, #1
 8008e1c:	d0e6      	beq.n	8008dec <_printf_common+0xa4>
 8008e1e:	3601      	adds	r6, #1
 8008e20:	e7d9      	b.n	8008dd6 <_printf_common+0x8e>
	...

08008e24 <_printf_i>:
 8008e24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e28:	7e0f      	ldrb	r7, [r1, #24]
 8008e2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008e2c:	2f78      	cmp	r7, #120	; 0x78
 8008e2e:	4691      	mov	r9, r2
 8008e30:	4680      	mov	r8, r0
 8008e32:	460c      	mov	r4, r1
 8008e34:	469a      	mov	sl, r3
 8008e36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008e3a:	d807      	bhi.n	8008e4c <_printf_i+0x28>
 8008e3c:	2f62      	cmp	r7, #98	; 0x62
 8008e3e:	d80a      	bhi.n	8008e56 <_printf_i+0x32>
 8008e40:	2f00      	cmp	r7, #0
 8008e42:	f000 80d8 	beq.w	8008ff6 <_printf_i+0x1d2>
 8008e46:	2f58      	cmp	r7, #88	; 0x58
 8008e48:	f000 80a3 	beq.w	8008f92 <_printf_i+0x16e>
 8008e4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008e54:	e03a      	b.n	8008ecc <_printf_i+0xa8>
 8008e56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008e5a:	2b15      	cmp	r3, #21
 8008e5c:	d8f6      	bhi.n	8008e4c <_printf_i+0x28>
 8008e5e:	a101      	add	r1, pc, #4	; (adr r1, 8008e64 <_printf_i+0x40>)
 8008e60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e64:	08008ebd 	.word	0x08008ebd
 8008e68:	08008ed1 	.word	0x08008ed1
 8008e6c:	08008e4d 	.word	0x08008e4d
 8008e70:	08008e4d 	.word	0x08008e4d
 8008e74:	08008e4d 	.word	0x08008e4d
 8008e78:	08008e4d 	.word	0x08008e4d
 8008e7c:	08008ed1 	.word	0x08008ed1
 8008e80:	08008e4d 	.word	0x08008e4d
 8008e84:	08008e4d 	.word	0x08008e4d
 8008e88:	08008e4d 	.word	0x08008e4d
 8008e8c:	08008e4d 	.word	0x08008e4d
 8008e90:	08008fdd 	.word	0x08008fdd
 8008e94:	08008f01 	.word	0x08008f01
 8008e98:	08008fbf 	.word	0x08008fbf
 8008e9c:	08008e4d 	.word	0x08008e4d
 8008ea0:	08008e4d 	.word	0x08008e4d
 8008ea4:	08008fff 	.word	0x08008fff
 8008ea8:	08008e4d 	.word	0x08008e4d
 8008eac:	08008f01 	.word	0x08008f01
 8008eb0:	08008e4d 	.word	0x08008e4d
 8008eb4:	08008e4d 	.word	0x08008e4d
 8008eb8:	08008fc7 	.word	0x08008fc7
 8008ebc:	682b      	ldr	r3, [r5, #0]
 8008ebe:	1d1a      	adds	r2, r3, #4
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	602a      	str	r2, [r5, #0]
 8008ec4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ec8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ecc:	2301      	movs	r3, #1
 8008ece:	e0a3      	b.n	8009018 <_printf_i+0x1f4>
 8008ed0:	6820      	ldr	r0, [r4, #0]
 8008ed2:	6829      	ldr	r1, [r5, #0]
 8008ed4:	0606      	lsls	r6, r0, #24
 8008ed6:	f101 0304 	add.w	r3, r1, #4
 8008eda:	d50a      	bpl.n	8008ef2 <_printf_i+0xce>
 8008edc:	680e      	ldr	r6, [r1, #0]
 8008ede:	602b      	str	r3, [r5, #0]
 8008ee0:	2e00      	cmp	r6, #0
 8008ee2:	da03      	bge.n	8008eec <_printf_i+0xc8>
 8008ee4:	232d      	movs	r3, #45	; 0x2d
 8008ee6:	4276      	negs	r6, r6
 8008ee8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008eec:	485e      	ldr	r0, [pc, #376]	; (8009068 <_printf_i+0x244>)
 8008eee:	230a      	movs	r3, #10
 8008ef0:	e019      	b.n	8008f26 <_printf_i+0x102>
 8008ef2:	680e      	ldr	r6, [r1, #0]
 8008ef4:	602b      	str	r3, [r5, #0]
 8008ef6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008efa:	bf18      	it	ne
 8008efc:	b236      	sxthne	r6, r6
 8008efe:	e7ef      	b.n	8008ee0 <_printf_i+0xbc>
 8008f00:	682b      	ldr	r3, [r5, #0]
 8008f02:	6820      	ldr	r0, [r4, #0]
 8008f04:	1d19      	adds	r1, r3, #4
 8008f06:	6029      	str	r1, [r5, #0]
 8008f08:	0601      	lsls	r1, r0, #24
 8008f0a:	d501      	bpl.n	8008f10 <_printf_i+0xec>
 8008f0c:	681e      	ldr	r6, [r3, #0]
 8008f0e:	e002      	b.n	8008f16 <_printf_i+0xf2>
 8008f10:	0646      	lsls	r6, r0, #25
 8008f12:	d5fb      	bpl.n	8008f0c <_printf_i+0xe8>
 8008f14:	881e      	ldrh	r6, [r3, #0]
 8008f16:	4854      	ldr	r0, [pc, #336]	; (8009068 <_printf_i+0x244>)
 8008f18:	2f6f      	cmp	r7, #111	; 0x6f
 8008f1a:	bf0c      	ite	eq
 8008f1c:	2308      	moveq	r3, #8
 8008f1e:	230a      	movne	r3, #10
 8008f20:	2100      	movs	r1, #0
 8008f22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f26:	6865      	ldr	r5, [r4, #4]
 8008f28:	60a5      	str	r5, [r4, #8]
 8008f2a:	2d00      	cmp	r5, #0
 8008f2c:	bfa2      	ittt	ge
 8008f2e:	6821      	ldrge	r1, [r4, #0]
 8008f30:	f021 0104 	bicge.w	r1, r1, #4
 8008f34:	6021      	strge	r1, [r4, #0]
 8008f36:	b90e      	cbnz	r6, 8008f3c <_printf_i+0x118>
 8008f38:	2d00      	cmp	r5, #0
 8008f3a:	d04d      	beq.n	8008fd8 <_printf_i+0x1b4>
 8008f3c:	4615      	mov	r5, r2
 8008f3e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008f42:	fb03 6711 	mls	r7, r3, r1, r6
 8008f46:	5dc7      	ldrb	r7, [r0, r7]
 8008f48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008f4c:	4637      	mov	r7, r6
 8008f4e:	42bb      	cmp	r3, r7
 8008f50:	460e      	mov	r6, r1
 8008f52:	d9f4      	bls.n	8008f3e <_printf_i+0x11a>
 8008f54:	2b08      	cmp	r3, #8
 8008f56:	d10b      	bne.n	8008f70 <_printf_i+0x14c>
 8008f58:	6823      	ldr	r3, [r4, #0]
 8008f5a:	07de      	lsls	r6, r3, #31
 8008f5c:	d508      	bpl.n	8008f70 <_printf_i+0x14c>
 8008f5e:	6923      	ldr	r3, [r4, #16]
 8008f60:	6861      	ldr	r1, [r4, #4]
 8008f62:	4299      	cmp	r1, r3
 8008f64:	bfde      	ittt	le
 8008f66:	2330      	movle	r3, #48	; 0x30
 8008f68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008f6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008f70:	1b52      	subs	r2, r2, r5
 8008f72:	6122      	str	r2, [r4, #16]
 8008f74:	f8cd a000 	str.w	sl, [sp]
 8008f78:	464b      	mov	r3, r9
 8008f7a:	aa03      	add	r2, sp, #12
 8008f7c:	4621      	mov	r1, r4
 8008f7e:	4640      	mov	r0, r8
 8008f80:	f7ff fee2 	bl	8008d48 <_printf_common>
 8008f84:	3001      	adds	r0, #1
 8008f86:	d14c      	bne.n	8009022 <_printf_i+0x1fe>
 8008f88:	f04f 30ff 	mov.w	r0, #4294967295
 8008f8c:	b004      	add	sp, #16
 8008f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f92:	4835      	ldr	r0, [pc, #212]	; (8009068 <_printf_i+0x244>)
 8008f94:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008f98:	6829      	ldr	r1, [r5, #0]
 8008f9a:	6823      	ldr	r3, [r4, #0]
 8008f9c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008fa0:	6029      	str	r1, [r5, #0]
 8008fa2:	061d      	lsls	r5, r3, #24
 8008fa4:	d514      	bpl.n	8008fd0 <_printf_i+0x1ac>
 8008fa6:	07df      	lsls	r7, r3, #31
 8008fa8:	bf44      	itt	mi
 8008faa:	f043 0320 	orrmi.w	r3, r3, #32
 8008fae:	6023      	strmi	r3, [r4, #0]
 8008fb0:	b91e      	cbnz	r6, 8008fba <_printf_i+0x196>
 8008fb2:	6823      	ldr	r3, [r4, #0]
 8008fb4:	f023 0320 	bic.w	r3, r3, #32
 8008fb8:	6023      	str	r3, [r4, #0]
 8008fba:	2310      	movs	r3, #16
 8008fbc:	e7b0      	b.n	8008f20 <_printf_i+0xfc>
 8008fbe:	6823      	ldr	r3, [r4, #0]
 8008fc0:	f043 0320 	orr.w	r3, r3, #32
 8008fc4:	6023      	str	r3, [r4, #0]
 8008fc6:	2378      	movs	r3, #120	; 0x78
 8008fc8:	4828      	ldr	r0, [pc, #160]	; (800906c <_printf_i+0x248>)
 8008fca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008fce:	e7e3      	b.n	8008f98 <_printf_i+0x174>
 8008fd0:	0659      	lsls	r1, r3, #25
 8008fd2:	bf48      	it	mi
 8008fd4:	b2b6      	uxthmi	r6, r6
 8008fd6:	e7e6      	b.n	8008fa6 <_printf_i+0x182>
 8008fd8:	4615      	mov	r5, r2
 8008fda:	e7bb      	b.n	8008f54 <_printf_i+0x130>
 8008fdc:	682b      	ldr	r3, [r5, #0]
 8008fde:	6826      	ldr	r6, [r4, #0]
 8008fe0:	6961      	ldr	r1, [r4, #20]
 8008fe2:	1d18      	adds	r0, r3, #4
 8008fe4:	6028      	str	r0, [r5, #0]
 8008fe6:	0635      	lsls	r5, r6, #24
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	d501      	bpl.n	8008ff0 <_printf_i+0x1cc>
 8008fec:	6019      	str	r1, [r3, #0]
 8008fee:	e002      	b.n	8008ff6 <_printf_i+0x1d2>
 8008ff0:	0670      	lsls	r0, r6, #25
 8008ff2:	d5fb      	bpl.n	8008fec <_printf_i+0x1c8>
 8008ff4:	8019      	strh	r1, [r3, #0]
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	6123      	str	r3, [r4, #16]
 8008ffa:	4615      	mov	r5, r2
 8008ffc:	e7ba      	b.n	8008f74 <_printf_i+0x150>
 8008ffe:	682b      	ldr	r3, [r5, #0]
 8009000:	1d1a      	adds	r2, r3, #4
 8009002:	602a      	str	r2, [r5, #0]
 8009004:	681d      	ldr	r5, [r3, #0]
 8009006:	6862      	ldr	r2, [r4, #4]
 8009008:	2100      	movs	r1, #0
 800900a:	4628      	mov	r0, r5
 800900c:	f7f7 f968 	bl	80002e0 <memchr>
 8009010:	b108      	cbz	r0, 8009016 <_printf_i+0x1f2>
 8009012:	1b40      	subs	r0, r0, r5
 8009014:	6060      	str	r0, [r4, #4]
 8009016:	6863      	ldr	r3, [r4, #4]
 8009018:	6123      	str	r3, [r4, #16]
 800901a:	2300      	movs	r3, #0
 800901c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009020:	e7a8      	b.n	8008f74 <_printf_i+0x150>
 8009022:	6923      	ldr	r3, [r4, #16]
 8009024:	462a      	mov	r2, r5
 8009026:	4649      	mov	r1, r9
 8009028:	4640      	mov	r0, r8
 800902a:	47d0      	blx	sl
 800902c:	3001      	adds	r0, #1
 800902e:	d0ab      	beq.n	8008f88 <_printf_i+0x164>
 8009030:	6823      	ldr	r3, [r4, #0]
 8009032:	079b      	lsls	r3, r3, #30
 8009034:	d413      	bmi.n	800905e <_printf_i+0x23a>
 8009036:	68e0      	ldr	r0, [r4, #12]
 8009038:	9b03      	ldr	r3, [sp, #12]
 800903a:	4298      	cmp	r0, r3
 800903c:	bfb8      	it	lt
 800903e:	4618      	movlt	r0, r3
 8009040:	e7a4      	b.n	8008f8c <_printf_i+0x168>
 8009042:	2301      	movs	r3, #1
 8009044:	4632      	mov	r2, r6
 8009046:	4649      	mov	r1, r9
 8009048:	4640      	mov	r0, r8
 800904a:	47d0      	blx	sl
 800904c:	3001      	adds	r0, #1
 800904e:	d09b      	beq.n	8008f88 <_printf_i+0x164>
 8009050:	3501      	adds	r5, #1
 8009052:	68e3      	ldr	r3, [r4, #12]
 8009054:	9903      	ldr	r1, [sp, #12]
 8009056:	1a5b      	subs	r3, r3, r1
 8009058:	42ab      	cmp	r3, r5
 800905a:	dcf2      	bgt.n	8009042 <_printf_i+0x21e>
 800905c:	e7eb      	b.n	8009036 <_printf_i+0x212>
 800905e:	2500      	movs	r5, #0
 8009060:	f104 0619 	add.w	r6, r4, #25
 8009064:	e7f5      	b.n	8009052 <_printf_i+0x22e>
 8009066:	bf00      	nop
 8009068:	08009399 	.word	0x08009399
 800906c:	080093aa 	.word	0x080093aa

08009070 <memcpy>:
 8009070:	440a      	add	r2, r1
 8009072:	4291      	cmp	r1, r2
 8009074:	f100 33ff 	add.w	r3, r0, #4294967295
 8009078:	d100      	bne.n	800907c <memcpy+0xc>
 800907a:	4770      	bx	lr
 800907c:	b510      	push	{r4, lr}
 800907e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009082:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009086:	4291      	cmp	r1, r2
 8009088:	d1f9      	bne.n	800907e <memcpy+0xe>
 800908a:	bd10      	pop	{r4, pc}

0800908c <memmove>:
 800908c:	4288      	cmp	r0, r1
 800908e:	b510      	push	{r4, lr}
 8009090:	eb01 0402 	add.w	r4, r1, r2
 8009094:	d902      	bls.n	800909c <memmove+0x10>
 8009096:	4284      	cmp	r4, r0
 8009098:	4623      	mov	r3, r4
 800909a:	d807      	bhi.n	80090ac <memmove+0x20>
 800909c:	1e43      	subs	r3, r0, #1
 800909e:	42a1      	cmp	r1, r4
 80090a0:	d008      	beq.n	80090b4 <memmove+0x28>
 80090a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80090a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80090aa:	e7f8      	b.n	800909e <memmove+0x12>
 80090ac:	4402      	add	r2, r0
 80090ae:	4601      	mov	r1, r0
 80090b0:	428a      	cmp	r2, r1
 80090b2:	d100      	bne.n	80090b6 <memmove+0x2a>
 80090b4:	bd10      	pop	{r4, pc}
 80090b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80090ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80090be:	e7f7      	b.n	80090b0 <memmove+0x24>

080090c0 <_free_r>:
 80090c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80090c2:	2900      	cmp	r1, #0
 80090c4:	d044      	beq.n	8009150 <_free_r+0x90>
 80090c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090ca:	9001      	str	r0, [sp, #4]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	f1a1 0404 	sub.w	r4, r1, #4
 80090d2:	bfb8      	it	lt
 80090d4:	18e4      	addlt	r4, r4, r3
 80090d6:	f000 f913 	bl	8009300 <__malloc_lock>
 80090da:	4a1e      	ldr	r2, [pc, #120]	; (8009154 <_free_r+0x94>)
 80090dc:	9801      	ldr	r0, [sp, #4]
 80090de:	6813      	ldr	r3, [r2, #0]
 80090e0:	b933      	cbnz	r3, 80090f0 <_free_r+0x30>
 80090e2:	6063      	str	r3, [r4, #4]
 80090e4:	6014      	str	r4, [r2, #0]
 80090e6:	b003      	add	sp, #12
 80090e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80090ec:	f000 b90e 	b.w	800930c <__malloc_unlock>
 80090f0:	42a3      	cmp	r3, r4
 80090f2:	d908      	bls.n	8009106 <_free_r+0x46>
 80090f4:	6825      	ldr	r5, [r4, #0]
 80090f6:	1961      	adds	r1, r4, r5
 80090f8:	428b      	cmp	r3, r1
 80090fa:	bf01      	itttt	eq
 80090fc:	6819      	ldreq	r1, [r3, #0]
 80090fe:	685b      	ldreq	r3, [r3, #4]
 8009100:	1949      	addeq	r1, r1, r5
 8009102:	6021      	streq	r1, [r4, #0]
 8009104:	e7ed      	b.n	80090e2 <_free_r+0x22>
 8009106:	461a      	mov	r2, r3
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	b10b      	cbz	r3, 8009110 <_free_r+0x50>
 800910c:	42a3      	cmp	r3, r4
 800910e:	d9fa      	bls.n	8009106 <_free_r+0x46>
 8009110:	6811      	ldr	r1, [r2, #0]
 8009112:	1855      	adds	r5, r2, r1
 8009114:	42a5      	cmp	r5, r4
 8009116:	d10b      	bne.n	8009130 <_free_r+0x70>
 8009118:	6824      	ldr	r4, [r4, #0]
 800911a:	4421      	add	r1, r4
 800911c:	1854      	adds	r4, r2, r1
 800911e:	42a3      	cmp	r3, r4
 8009120:	6011      	str	r1, [r2, #0]
 8009122:	d1e0      	bne.n	80090e6 <_free_r+0x26>
 8009124:	681c      	ldr	r4, [r3, #0]
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	6053      	str	r3, [r2, #4]
 800912a:	4421      	add	r1, r4
 800912c:	6011      	str	r1, [r2, #0]
 800912e:	e7da      	b.n	80090e6 <_free_r+0x26>
 8009130:	d902      	bls.n	8009138 <_free_r+0x78>
 8009132:	230c      	movs	r3, #12
 8009134:	6003      	str	r3, [r0, #0]
 8009136:	e7d6      	b.n	80090e6 <_free_r+0x26>
 8009138:	6825      	ldr	r5, [r4, #0]
 800913a:	1961      	adds	r1, r4, r5
 800913c:	428b      	cmp	r3, r1
 800913e:	bf04      	itt	eq
 8009140:	6819      	ldreq	r1, [r3, #0]
 8009142:	685b      	ldreq	r3, [r3, #4]
 8009144:	6063      	str	r3, [r4, #4]
 8009146:	bf04      	itt	eq
 8009148:	1949      	addeq	r1, r1, r5
 800914a:	6021      	streq	r1, [r4, #0]
 800914c:	6054      	str	r4, [r2, #4]
 800914e:	e7ca      	b.n	80090e6 <_free_r+0x26>
 8009150:	b003      	add	sp, #12
 8009152:	bd30      	pop	{r4, r5, pc}
 8009154:	24000854 	.word	0x24000854

08009158 <sbrk_aligned>:
 8009158:	b570      	push	{r4, r5, r6, lr}
 800915a:	4e0e      	ldr	r6, [pc, #56]	; (8009194 <sbrk_aligned+0x3c>)
 800915c:	460c      	mov	r4, r1
 800915e:	6831      	ldr	r1, [r6, #0]
 8009160:	4605      	mov	r5, r0
 8009162:	b911      	cbnz	r1, 800916a <sbrk_aligned+0x12>
 8009164:	f000 f8bc 	bl	80092e0 <_sbrk_r>
 8009168:	6030      	str	r0, [r6, #0]
 800916a:	4621      	mov	r1, r4
 800916c:	4628      	mov	r0, r5
 800916e:	f000 f8b7 	bl	80092e0 <_sbrk_r>
 8009172:	1c43      	adds	r3, r0, #1
 8009174:	d00a      	beq.n	800918c <sbrk_aligned+0x34>
 8009176:	1cc4      	adds	r4, r0, #3
 8009178:	f024 0403 	bic.w	r4, r4, #3
 800917c:	42a0      	cmp	r0, r4
 800917e:	d007      	beq.n	8009190 <sbrk_aligned+0x38>
 8009180:	1a21      	subs	r1, r4, r0
 8009182:	4628      	mov	r0, r5
 8009184:	f000 f8ac 	bl	80092e0 <_sbrk_r>
 8009188:	3001      	adds	r0, #1
 800918a:	d101      	bne.n	8009190 <sbrk_aligned+0x38>
 800918c:	f04f 34ff 	mov.w	r4, #4294967295
 8009190:	4620      	mov	r0, r4
 8009192:	bd70      	pop	{r4, r5, r6, pc}
 8009194:	24000858 	.word	0x24000858

08009198 <_malloc_r>:
 8009198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800919c:	1ccd      	adds	r5, r1, #3
 800919e:	f025 0503 	bic.w	r5, r5, #3
 80091a2:	3508      	adds	r5, #8
 80091a4:	2d0c      	cmp	r5, #12
 80091a6:	bf38      	it	cc
 80091a8:	250c      	movcc	r5, #12
 80091aa:	2d00      	cmp	r5, #0
 80091ac:	4607      	mov	r7, r0
 80091ae:	db01      	blt.n	80091b4 <_malloc_r+0x1c>
 80091b0:	42a9      	cmp	r1, r5
 80091b2:	d905      	bls.n	80091c0 <_malloc_r+0x28>
 80091b4:	230c      	movs	r3, #12
 80091b6:	603b      	str	r3, [r7, #0]
 80091b8:	2600      	movs	r6, #0
 80091ba:	4630      	mov	r0, r6
 80091bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091c0:	4e2e      	ldr	r6, [pc, #184]	; (800927c <_malloc_r+0xe4>)
 80091c2:	f000 f89d 	bl	8009300 <__malloc_lock>
 80091c6:	6833      	ldr	r3, [r6, #0]
 80091c8:	461c      	mov	r4, r3
 80091ca:	bb34      	cbnz	r4, 800921a <_malloc_r+0x82>
 80091cc:	4629      	mov	r1, r5
 80091ce:	4638      	mov	r0, r7
 80091d0:	f7ff ffc2 	bl	8009158 <sbrk_aligned>
 80091d4:	1c43      	adds	r3, r0, #1
 80091d6:	4604      	mov	r4, r0
 80091d8:	d14d      	bne.n	8009276 <_malloc_r+0xde>
 80091da:	6834      	ldr	r4, [r6, #0]
 80091dc:	4626      	mov	r6, r4
 80091de:	2e00      	cmp	r6, #0
 80091e0:	d140      	bne.n	8009264 <_malloc_r+0xcc>
 80091e2:	6823      	ldr	r3, [r4, #0]
 80091e4:	4631      	mov	r1, r6
 80091e6:	4638      	mov	r0, r7
 80091e8:	eb04 0803 	add.w	r8, r4, r3
 80091ec:	f000 f878 	bl	80092e0 <_sbrk_r>
 80091f0:	4580      	cmp	r8, r0
 80091f2:	d13a      	bne.n	800926a <_malloc_r+0xd2>
 80091f4:	6821      	ldr	r1, [r4, #0]
 80091f6:	3503      	adds	r5, #3
 80091f8:	1a6d      	subs	r5, r5, r1
 80091fa:	f025 0503 	bic.w	r5, r5, #3
 80091fe:	3508      	adds	r5, #8
 8009200:	2d0c      	cmp	r5, #12
 8009202:	bf38      	it	cc
 8009204:	250c      	movcc	r5, #12
 8009206:	4629      	mov	r1, r5
 8009208:	4638      	mov	r0, r7
 800920a:	f7ff ffa5 	bl	8009158 <sbrk_aligned>
 800920e:	3001      	adds	r0, #1
 8009210:	d02b      	beq.n	800926a <_malloc_r+0xd2>
 8009212:	6823      	ldr	r3, [r4, #0]
 8009214:	442b      	add	r3, r5
 8009216:	6023      	str	r3, [r4, #0]
 8009218:	e00e      	b.n	8009238 <_malloc_r+0xa0>
 800921a:	6822      	ldr	r2, [r4, #0]
 800921c:	1b52      	subs	r2, r2, r5
 800921e:	d41e      	bmi.n	800925e <_malloc_r+0xc6>
 8009220:	2a0b      	cmp	r2, #11
 8009222:	d916      	bls.n	8009252 <_malloc_r+0xba>
 8009224:	1961      	adds	r1, r4, r5
 8009226:	42a3      	cmp	r3, r4
 8009228:	6025      	str	r5, [r4, #0]
 800922a:	bf18      	it	ne
 800922c:	6059      	strne	r1, [r3, #4]
 800922e:	6863      	ldr	r3, [r4, #4]
 8009230:	bf08      	it	eq
 8009232:	6031      	streq	r1, [r6, #0]
 8009234:	5162      	str	r2, [r4, r5]
 8009236:	604b      	str	r3, [r1, #4]
 8009238:	4638      	mov	r0, r7
 800923a:	f104 060b 	add.w	r6, r4, #11
 800923e:	f000 f865 	bl	800930c <__malloc_unlock>
 8009242:	f026 0607 	bic.w	r6, r6, #7
 8009246:	1d23      	adds	r3, r4, #4
 8009248:	1af2      	subs	r2, r6, r3
 800924a:	d0b6      	beq.n	80091ba <_malloc_r+0x22>
 800924c:	1b9b      	subs	r3, r3, r6
 800924e:	50a3      	str	r3, [r4, r2]
 8009250:	e7b3      	b.n	80091ba <_malloc_r+0x22>
 8009252:	6862      	ldr	r2, [r4, #4]
 8009254:	42a3      	cmp	r3, r4
 8009256:	bf0c      	ite	eq
 8009258:	6032      	streq	r2, [r6, #0]
 800925a:	605a      	strne	r2, [r3, #4]
 800925c:	e7ec      	b.n	8009238 <_malloc_r+0xa0>
 800925e:	4623      	mov	r3, r4
 8009260:	6864      	ldr	r4, [r4, #4]
 8009262:	e7b2      	b.n	80091ca <_malloc_r+0x32>
 8009264:	4634      	mov	r4, r6
 8009266:	6876      	ldr	r6, [r6, #4]
 8009268:	e7b9      	b.n	80091de <_malloc_r+0x46>
 800926a:	230c      	movs	r3, #12
 800926c:	603b      	str	r3, [r7, #0]
 800926e:	4638      	mov	r0, r7
 8009270:	f000 f84c 	bl	800930c <__malloc_unlock>
 8009274:	e7a1      	b.n	80091ba <_malloc_r+0x22>
 8009276:	6025      	str	r5, [r4, #0]
 8009278:	e7de      	b.n	8009238 <_malloc_r+0xa0>
 800927a:	bf00      	nop
 800927c:	24000854 	.word	0x24000854

08009280 <_realloc_r>:
 8009280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009284:	4680      	mov	r8, r0
 8009286:	4614      	mov	r4, r2
 8009288:	460e      	mov	r6, r1
 800928a:	b921      	cbnz	r1, 8009296 <_realloc_r+0x16>
 800928c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009290:	4611      	mov	r1, r2
 8009292:	f7ff bf81 	b.w	8009198 <_malloc_r>
 8009296:	b92a      	cbnz	r2, 80092a4 <_realloc_r+0x24>
 8009298:	f7ff ff12 	bl	80090c0 <_free_r>
 800929c:	4625      	mov	r5, r4
 800929e:	4628      	mov	r0, r5
 80092a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092a4:	f000 f838 	bl	8009318 <_malloc_usable_size_r>
 80092a8:	4284      	cmp	r4, r0
 80092aa:	4607      	mov	r7, r0
 80092ac:	d802      	bhi.n	80092b4 <_realloc_r+0x34>
 80092ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80092b2:	d812      	bhi.n	80092da <_realloc_r+0x5a>
 80092b4:	4621      	mov	r1, r4
 80092b6:	4640      	mov	r0, r8
 80092b8:	f7ff ff6e 	bl	8009198 <_malloc_r>
 80092bc:	4605      	mov	r5, r0
 80092be:	2800      	cmp	r0, #0
 80092c0:	d0ed      	beq.n	800929e <_realloc_r+0x1e>
 80092c2:	42bc      	cmp	r4, r7
 80092c4:	4622      	mov	r2, r4
 80092c6:	4631      	mov	r1, r6
 80092c8:	bf28      	it	cs
 80092ca:	463a      	movcs	r2, r7
 80092cc:	f7ff fed0 	bl	8009070 <memcpy>
 80092d0:	4631      	mov	r1, r6
 80092d2:	4640      	mov	r0, r8
 80092d4:	f7ff fef4 	bl	80090c0 <_free_r>
 80092d8:	e7e1      	b.n	800929e <_realloc_r+0x1e>
 80092da:	4635      	mov	r5, r6
 80092dc:	e7df      	b.n	800929e <_realloc_r+0x1e>
	...

080092e0 <_sbrk_r>:
 80092e0:	b538      	push	{r3, r4, r5, lr}
 80092e2:	4d06      	ldr	r5, [pc, #24]	; (80092fc <_sbrk_r+0x1c>)
 80092e4:	2300      	movs	r3, #0
 80092e6:	4604      	mov	r4, r0
 80092e8:	4608      	mov	r0, r1
 80092ea:	602b      	str	r3, [r5, #0]
 80092ec:	f7f8 f840 	bl	8001370 <_sbrk>
 80092f0:	1c43      	adds	r3, r0, #1
 80092f2:	d102      	bne.n	80092fa <_sbrk_r+0x1a>
 80092f4:	682b      	ldr	r3, [r5, #0]
 80092f6:	b103      	cbz	r3, 80092fa <_sbrk_r+0x1a>
 80092f8:	6023      	str	r3, [r4, #0]
 80092fa:	bd38      	pop	{r3, r4, r5, pc}
 80092fc:	2400085c 	.word	0x2400085c

08009300 <__malloc_lock>:
 8009300:	4801      	ldr	r0, [pc, #4]	; (8009308 <__malloc_lock+0x8>)
 8009302:	f000 b811 	b.w	8009328 <__retarget_lock_acquire_recursive>
 8009306:	bf00      	nop
 8009308:	24000860 	.word	0x24000860

0800930c <__malloc_unlock>:
 800930c:	4801      	ldr	r0, [pc, #4]	; (8009314 <__malloc_unlock+0x8>)
 800930e:	f000 b80c 	b.w	800932a <__retarget_lock_release_recursive>
 8009312:	bf00      	nop
 8009314:	24000860 	.word	0x24000860

08009318 <_malloc_usable_size_r>:
 8009318:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800931c:	1f18      	subs	r0, r3, #4
 800931e:	2b00      	cmp	r3, #0
 8009320:	bfbc      	itt	lt
 8009322:	580b      	ldrlt	r3, [r1, r0]
 8009324:	18c0      	addlt	r0, r0, r3
 8009326:	4770      	bx	lr

08009328 <__retarget_lock_acquire_recursive>:
 8009328:	4770      	bx	lr

0800932a <__retarget_lock_release_recursive>:
 800932a:	4770      	bx	lr

0800932c <_init>:
 800932c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800932e:	bf00      	nop
 8009330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009332:	bc08      	pop	{r3}
 8009334:	469e      	mov	lr, r3
 8009336:	4770      	bx	lr

08009338 <_fini>:
 8009338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800933a:	bf00      	nop
 800933c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800933e:	bc08      	pop	{r3}
 8009340:	469e      	mov	lr, r3
 8009342:	4770      	bx	lr
