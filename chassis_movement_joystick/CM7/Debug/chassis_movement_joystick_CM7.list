
chassis_movement_joystick_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015168  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000548  08015408  08015408  00025408  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015950  08015950  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08015950  08015950  00025950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015958  08015958  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015958  08015958  00025958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801595c  0801595c  0002595c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  24000000  08015960  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000054e0  240001dc  08015b3c  000301dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240056bc  08015b3c  000356bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003020a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00032168  00000000  00000000  0003024d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005923  00000000  00000000  000623b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002308  00000000  00000000  00067cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001b28  00000000  00000000  00069fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00043471  00000000  00000000  0006bb08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002d42b  00000000  00000000  000aef79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001ab081  00000000  00000000  000dc3a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000ab08  00000000  00000000  00287428  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  00291f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001dc 	.word	0x240001dc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080153f0 	.word	0x080153f0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e0 	.word	0x240001e0
 80002dc:	080153f0 	.word	0x080153f0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a8 	b.w	8000a70 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9e08      	ldr	r6, [sp, #32]
 80007ae:	460d      	mov	r5, r1
 80007b0:	4604      	mov	r4, r0
 80007b2:	460f      	mov	r7, r1
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d14a      	bne.n	800084e <__udivmoddi4+0xa6>
 80007b8:	428a      	cmp	r2, r1
 80007ba:	4694      	mov	ip, r2
 80007bc:	d965      	bls.n	800088a <__udivmoddi4+0xe2>
 80007be:	fab2 f382 	clz	r3, r2
 80007c2:	b143      	cbz	r3, 80007d6 <__udivmoddi4+0x2e>
 80007c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80007c8:	f1c3 0220 	rsb	r2, r3, #32
 80007cc:	409f      	lsls	r7, r3
 80007ce:	fa20 f202 	lsr.w	r2, r0, r2
 80007d2:	4317      	orrs	r7, r2
 80007d4:	409c      	lsls	r4, r3
 80007d6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80007da:	fa1f f58c 	uxth.w	r5, ip
 80007de:	fbb7 f1fe 	udiv	r1, r7, lr
 80007e2:	0c22      	lsrs	r2, r4, #16
 80007e4:	fb0e 7711 	mls	r7, lr, r1, r7
 80007e8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80007ec:	fb01 f005 	mul.w	r0, r1, r5
 80007f0:	4290      	cmp	r0, r2
 80007f2:	d90a      	bls.n	800080a <__udivmoddi4+0x62>
 80007f4:	eb1c 0202 	adds.w	r2, ip, r2
 80007f8:	f101 37ff 	add.w	r7, r1, #4294967295
 80007fc:	f080 811c 	bcs.w	8000a38 <__udivmoddi4+0x290>
 8000800:	4290      	cmp	r0, r2
 8000802:	f240 8119 	bls.w	8000a38 <__udivmoddi4+0x290>
 8000806:	3902      	subs	r1, #2
 8000808:	4462      	add	r2, ip
 800080a:	1a12      	subs	r2, r2, r0
 800080c:	b2a4      	uxth	r4, r4
 800080e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000812:	fb0e 2210 	mls	r2, lr, r0, r2
 8000816:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800081a:	fb00 f505 	mul.w	r5, r0, r5
 800081e:	42a5      	cmp	r5, r4
 8000820:	d90a      	bls.n	8000838 <__udivmoddi4+0x90>
 8000822:	eb1c 0404 	adds.w	r4, ip, r4
 8000826:	f100 32ff 	add.w	r2, r0, #4294967295
 800082a:	f080 8107 	bcs.w	8000a3c <__udivmoddi4+0x294>
 800082e:	42a5      	cmp	r5, r4
 8000830:	f240 8104 	bls.w	8000a3c <__udivmoddi4+0x294>
 8000834:	4464      	add	r4, ip
 8000836:	3802      	subs	r0, #2
 8000838:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800083c:	1b64      	subs	r4, r4, r5
 800083e:	2100      	movs	r1, #0
 8000840:	b11e      	cbz	r6, 800084a <__udivmoddi4+0xa2>
 8000842:	40dc      	lsrs	r4, r3
 8000844:	2300      	movs	r3, #0
 8000846:	e9c6 4300 	strd	r4, r3, [r6]
 800084a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084e:	428b      	cmp	r3, r1
 8000850:	d908      	bls.n	8000864 <__udivmoddi4+0xbc>
 8000852:	2e00      	cmp	r6, #0
 8000854:	f000 80ed 	beq.w	8000a32 <__udivmoddi4+0x28a>
 8000858:	2100      	movs	r1, #0
 800085a:	e9c6 0500 	strd	r0, r5, [r6]
 800085e:	4608      	mov	r0, r1
 8000860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000864:	fab3 f183 	clz	r1, r3
 8000868:	2900      	cmp	r1, #0
 800086a:	d149      	bne.n	8000900 <__udivmoddi4+0x158>
 800086c:	42ab      	cmp	r3, r5
 800086e:	d302      	bcc.n	8000876 <__udivmoddi4+0xce>
 8000870:	4282      	cmp	r2, r0
 8000872:	f200 80f8 	bhi.w	8000a66 <__udivmoddi4+0x2be>
 8000876:	1a84      	subs	r4, r0, r2
 8000878:	eb65 0203 	sbc.w	r2, r5, r3
 800087c:	2001      	movs	r0, #1
 800087e:	4617      	mov	r7, r2
 8000880:	2e00      	cmp	r6, #0
 8000882:	d0e2      	beq.n	800084a <__udivmoddi4+0xa2>
 8000884:	e9c6 4700 	strd	r4, r7, [r6]
 8000888:	e7df      	b.n	800084a <__udivmoddi4+0xa2>
 800088a:	b902      	cbnz	r2, 800088e <__udivmoddi4+0xe6>
 800088c:	deff      	udf	#255	; 0xff
 800088e:	fab2 f382 	clz	r3, r2
 8000892:	2b00      	cmp	r3, #0
 8000894:	f040 8090 	bne.w	80009b8 <__udivmoddi4+0x210>
 8000898:	1a8a      	subs	r2, r1, r2
 800089a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800089e:	fa1f fe8c 	uxth.w	lr, ip
 80008a2:	2101      	movs	r1, #1
 80008a4:	fbb2 f5f7 	udiv	r5, r2, r7
 80008a8:	fb07 2015 	mls	r0, r7, r5, r2
 80008ac:	0c22      	lsrs	r2, r4, #16
 80008ae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80008b2:	fb0e f005 	mul.w	r0, lr, r5
 80008b6:	4290      	cmp	r0, r2
 80008b8:	d908      	bls.n	80008cc <__udivmoddi4+0x124>
 80008ba:	eb1c 0202 	adds.w	r2, ip, r2
 80008be:	f105 38ff 	add.w	r8, r5, #4294967295
 80008c2:	d202      	bcs.n	80008ca <__udivmoddi4+0x122>
 80008c4:	4290      	cmp	r0, r2
 80008c6:	f200 80cb 	bhi.w	8000a60 <__udivmoddi4+0x2b8>
 80008ca:	4645      	mov	r5, r8
 80008cc:	1a12      	subs	r2, r2, r0
 80008ce:	b2a4      	uxth	r4, r4
 80008d0:	fbb2 f0f7 	udiv	r0, r2, r7
 80008d4:	fb07 2210 	mls	r2, r7, r0, r2
 80008d8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008dc:	fb0e fe00 	mul.w	lr, lr, r0
 80008e0:	45a6      	cmp	lr, r4
 80008e2:	d908      	bls.n	80008f6 <__udivmoddi4+0x14e>
 80008e4:	eb1c 0404 	adds.w	r4, ip, r4
 80008e8:	f100 32ff 	add.w	r2, r0, #4294967295
 80008ec:	d202      	bcs.n	80008f4 <__udivmoddi4+0x14c>
 80008ee:	45a6      	cmp	lr, r4
 80008f0:	f200 80bb 	bhi.w	8000a6a <__udivmoddi4+0x2c2>
 80008f4:	4610      	mov	r0, r2
 80008f6:	eba4 040e 	sub.w	r4, r4, lr
 80008fa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80008fe:	e79f      	b.n	8000840 <__udivmoddi4+0x98>
 8000900:	f1c1 0720 	rsb	r7, r1, #32
 8000904:	408b      	lsls	r3, r1
 8000906:	fa22 fc07 	lsr.w	ip, r2, r7
 800090a:	ea4c 0c03 	orr.w	ip, ip, r3
 800090e:	fa05 f401 	lsl.w	r4, r5, r1
 8000912:	fa20 f307 	lsr.w	r3, r0, r7
 8000916:	40fd      	lsrs	r5, r7
 8000918:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800091c:	4323      	orrs	r3, r4
 800091e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000922:	fa1f fe8c 	uxth.w	lr, ip
 8000926:	fb09 5518 	mls	r5, r9, r8, r5
 800092a:	0c1c      	lsrs	r4, r3, #16
 800092c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000930:	fb08 f50e 	mul.w	r5, r8, lr
 8000934:	42a5      	cmp	r5, r4
 8000936:	fa02 f201 	lsl.w	r2, r2, r1
 800093a:	fa00 f001 	lsl.w	r0, r0, r1
 800093e:	d90b      	bls.n	8000958 <__udivmoddi4+0x1b0>
 8000940:	eb1c 0404 	adds.w	r4, ip, r4
 8000944:	f108 3aff 	add.w	sl, r8, #4294967295
 8000948:	f080 8088 	bcs.w	8000a5c <__udivmoddi4+0x2b4>
 800094c:	42a5      	cmp	r5, r4
 800094e:	f240 8085 	bls.w	8000a5c <__udivmoddi4+0x2b4>
 8000952:	f1a8 0802 	sub.w	r8, r8, #2
 8000956:	4464      	add	r4, ip
 8000958:	1b64      	subs	r4, r4, r5
 800095a:	b29d      	uxth	r5, r3
 800095c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000960:	fb09 4413 	mls	r4, r9, r3, r4
 8000964:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000968:	fb03 fe0e 	mul.w	lr, r3, lr
 800096c:	45a6      	cmp	lr, r4
 800096e:	d908      	bls.n	8000982 <__udivmoddi4+0x1da>
 8000970:	eb1c 0404 	adds.w	r4, ip, r4
 8000974:	f103 35ff 	add.w	r5, r3, #4294967295
 8000978:	d26c      	bcs.n	8000a54 <__udivmoddi4+0x2ac>
 800097a:	45a6      	cmp	lr, r4
 800097c:	d96a      	bls.n	8000a54 <__udivmoddi4+0x2ac>
 800097e:	3b02      	subs	r3, #2
 8000980:	4464      	add	r4, ip
 8000982:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000986:	fba3 9502 	umull	r9, r5, r3, r2
 800098a:	eba4 040e 	sub.w	r4, r4, lr
 800098e:	42ac      	cmp	r4, r5
 8000990:	46c8      	mov	r8, r9
 8000992:	46ae      	mov	lr, r5
 8000994:	d356      	bcc.n	8000a44 <__udivmoddi4+0x29c>
 8000996:	d053      	beq.n	8000a40 <__udivmoddi4+0x298>
 8000998:	b156      	cbz	r6, 80009b0 <__udivmoddi4+0x208>
 800099a:	ebb0 0208 	subs.w	r2, r0, r8
 800099e:	eb64 040e 	sbc.w	r4, r4, lr
 80009a2:	fa04 f707 	lsl.w	r7, r4, r7
 80009a6:	40ca      	lsrs	r2, r1
 80009a8:	40cc      	lsrs	r4, r1
 80009aa:	4317      	orrs	r7, r2
 80009ac:	e9c6 7400 	strd	r7, r4, [r6]
 80009b0:	4618      	mov	r0, r3
 80009b2:	2100      	movs	r1, #0
 80009b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b8:	f1c3 0120 	rsb	r1, r3, #32
 80009bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80009c0:	fa20 f201 	lsr.w	r2, r0, r1
 80009c4:	fa25 f101 	lsr.w	r1, r5, r1
 80009c8:	409d      	lsls	r5, r3
 80009ca:	432a      	orrs	r2, r5
 80009cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009d0:	fa1f fe8c 	uxth.w	lr, ip
 80009d4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009d8:	fb07 1510 	mls	r5, r7, r0, r1
 80009dc:	0c11      	lsrs	r1, r2, #16
 80009de:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80009e2:	fb00 f50e 	mul.w	r5, r0, lr
 80009e6:	428d      	cmp	r5, r1
 80009e8:	fa04 f403 	lsl.w	r4, r4, r3
 80009ec:	d908      	bls.n	8000a00 <__udivmoddi4+0x258>
 80009ee:	eb1c 0101 	adds.w	r1, ip, r1
 80009f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80009f6:	d22f      	bcs.n	8000a58 <__udivmoddi4+0x2b0>
 80009f8:	428d      	cmp	r5, r1
 80009fa:	d92d      	bls.n	8000a58 <__udivmoddi4+0x2b0>
 80009fc:	3802      	subs	r0, #2
 80009fe:	4461      	add	r1, ip
 8000a00:	1b49      	subs	r1, r1, r5
 8000a02:	b292      	uxth	r2, r2
 8000a04:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a08:	fb07 1115 	mls	r1, r7, r5, r1
 8000a0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a10:	fb05 f10e 	mul.w	r1, r5, lr
 8000a14:	4291      	cmp	r1, r2
 8000a16:	d908      	bls.n	8000a2a <__udivmoddi4+0x282>
 8000a18:	eb1c 0202 	adds.w	r2, ip, r2
 8000a1c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a20:	d216      	bcs.n	8000a50 <__udivmoddi4+0x2a8>
 8000a22:	4291      	cmp	r1, r2
 8000a24:	d914      	bls.n	8000a50 <__udivmoddi4+0x2a8>
 8000a26:	3d02      	subs	r5, #2
 8000a28:	4462      	add	r2, ip
 8000a2a:	1a52      	subs	r2, r2, r1
 8000a2c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a30:	e738      	b.n	80008a4 <__udivmoddi4+0xfc>
 8000a32:	4631      	mov	r1, r6
 8000a34:	4630      	mov	r0, r6
 8000a36:	e708      	b.n	800084a <__udivmoddi4+0xa2>
 8000a38:	4639      	mov	r1, r7
 8000a3a:	e6e6      	b.n	800080a <__udivmoddi4+0x62>
 8000a3c:	4610      	mov	r0, r2
 8000a3e:	e6fb      	b.n	8000838 <__udivmoddi4+0x90>
 8000a40:	4548      	cmp	r0, r9
 8000a42:	d2a9      	bcs.n	8000998 <__udivmoddi4+0x1f0>
 8000a44:	ebb9 0802 	subs.w	r8, r9, r2
 8000a48:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a4c:	3b01      	subs	r3, #1
 8000a4e:	e7a3      	b.n	8000998 <__udivmoddi4+0x1f0>
 8000a50:	4645      	mov	r5, r8
 8000a52:	e7ea      	b.n	8000a2a <__udivmoddi4+0x282>
 8000a54:	462b      	mov	r3, r5
 8000a56:	e794      	b.n	8000982 <__udivmoddi4+0x1da>
 8000a58:	4640      	mov	r0, r8
 8000a5a:	e7d1      	b.n	8000a00 <__udivmoddi4+0x258>
 8000a5c:	46d0      	mov	r8, sl
 8000a5e:	e77b      	b.n	8000958 <__udivmoddi4+0x1b0>
 8000a60:	3d02      	subs	r5, #2
 8000a62:	4462      	add	r2, ip
 8000a64:	e732      	b.n	80008cc <__udivmoddi4+0x124>
 8000a66:	4608      	mov	r0, r1
 8000a68:	e70a      	b.n	8000880 <__udivmoddi4+0xd8>
 8000a6a:	4464      	add	r4, ip
 8000a6c:	3802      	subs	r0, #2
 8000a6e:	e742      	b.n	80008f6 <__udivmoddi4+0x14e>

08000a70 <__aeabi_idiv0>:
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a78:	4b3d      	ldr	r3, [pc, #244]	; (8000b70 <SystemInit+0xfc>)
 8000a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a7e:	4a3c      	ldr	r2, [pc, #240]	; (8000b70 <SystemInit+0xfc>)
 8000a80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000a88:	4b39      	ldr	r3, [pc, #228]	; (8000b70 <SystemInit+0xfc>)
 8000a8a:	691b      	ldr	r3, [r3, #16]
 8000a8c:	4a38      	ldr	r2, [pc, #224]	; (8000b70 <SystemInit+0xfc>)
 8000a8e:	f043 0310 	orr.w	r3, r3, #16
 8000a92:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a94:	4b37      	ldr	r3, [pc, #220]	; (8000b74 <SystemInit+0x100>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f003 030f 	and.w	r3, r3, #15
 8000a9c:	2b06      	cmp	r3, #6
 8000a9e:	d807      	bhi.n	8000ab0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000aa0:	4b34      	ldr	r3, [pc, #208]	; (8000b74 <SystemInit+0x100>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f023 030f 	bic.w	r3, r3, #15
 8000aa8:	4a32      	ldr	r2, [pc, #200]	; (8000b74 <SystemInit+0x100>)
 8000aaa:	f043 0307 	orr.w	r3, r3, #7
 8000aae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ab0:	4b31      	ldr	r3, [pc, #196]	; (8000b78 <SystemInit+0x104>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a30      	ldr	r2, [pc, #192]	; (8000b78 <SystemInit+0x104>)
 8000ab6:	f043 0301 	orr.w	r3, r3, #1
 8000aba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000abc:	4b2e      	ldr	r3, [pc, #184]	; (8000b78 <SystemInit+0x104>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ac2:	4b2d      	ldr	r3, [pc, #180]	; (8000b78 <SystemInit+0x104>)
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	492c      	ldr	r1, [pc, #176]	; (8000b78 <SystemInit+0x104>)
 8000ac8:	4b2c      	ldr	r3, [pc, #176]	; (8000b7c <SystemInit+0x108>)
 8000aca:	4013      	ands	r3, r2
 8000acc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ace:	4b29      	ldr	r3, [pc, #164]	; (8000b74 <SystemInit+0x100>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f003 0308 	and.w	r3, r3, #8
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d007      	beq.n	8000aea <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ada:	4b26      	ldr	r3, [pc, #152]	; (8000b74 <SystemInit+0x100>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f023 030f 	bic.w	r3, r3, #15
 8000ae2:	4a24      	ldr	r2, [pc, #144]	; (8000b74 <SystemInit+0x100>)
 8000ae4:	f043 0307 	orr.w	r3, r3, #7
 8000ae8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000aea:	4b23      	ldr	r3, [pc, #140]	; (8000b78 <SystemInit+0x104>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <SystemInit+0x104>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <SystemInit+0x104>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <SystemInit+0x104>)
 8000afe:	4a20      	ldr	r2, [pc, #128]	; (8000b80 <SystemInit+0x10c>)
 8000b00:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <SystemInit+0x104>)
 8000b04:	4a1f      	ldr	r2, [pc, #124]	; (8000b84 <SystemInit+0x110>)
 8000b06:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <SystemInit+0x104>)
 8000b0a:	4a1f      	ldr	r2, [pc, #124]	; (8000b88 <SystemInit+0x114>)
 8000b0c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b0e:	4b1a      	ldr	r3, [pc, #104]	; (8000b78 <SystemInit+0x104>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b14:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <SystemInit+0x104>)
 8000b16:	4a1c      	ldr	r2, [pc, #112]	; (8000b88 <SystemInit+0x114>)
 8000b18:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b1a:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <SystemInit+0x104>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <SystemInit+0x104>)
 8000b22:	4a19      	ldr	r2, [pc, #100]	; (8000b88 <SystemInit+0x114>)
 8000b24:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b26:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <SystemInit+0x104>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <SystemInit+0x104>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a11      	ldr	r2, [pc, #68]	; (8000b78 <SystemInit+0x104>)
 8000b32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b36:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <SystemInit+0x104>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b3e:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <SystemInit+0x118>)
 8000b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b42:	4a12      	ldr	r2, [pc, #72]	; (8000b8c <SystemInit+0x118>)
 8000b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b48:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b4a:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <SystemInit+0x11c>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <SystemInit+0x120>)
 8000b50:	4013      	ands	r3, r2
 8000b52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b56:	d202      	bcs.n	8000b5e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b58:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <SystemInit+0x124>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b5e:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <SystemInit+0x128>)
 8000b60:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b64:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000ed00 	.word	0xe000ed00
 8000b74:	52002000 	.word	0x52002000
 8000b78:	58024400 	.word	0x58024400
 8000b7c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b80:	02020200 	.word	0x02020200
 8000b84:	01ff0000 	.word	0x01ff0000
 8000b88:	01010280 	.word	0x01010280
 8000b8c:	580000c0 	.word	0x580000c0
 8000b90:	5c001000 	.word	0x5c001000
 8000b94:	ffff0000 	.word	0xffff0000
 8000b98:	51008108 	.word	0x51008108
 8000b9c:	52004000 	.word	0x52004000

08000ba0 <_ZSt4ceilf>:
  using ::ceil;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  ceil(float __x)
  { return __builtin_ceilf(__x); }
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	ed87 0a01 	vstr	s0, [r7, #4]
 8000baa:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bae:	fefa 7a67 	vrintp.f32	s15, s15
 8000bb2:	eeb0 0a67 	vmov.f32	s0, s15
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <_ZN10LL_Control7EncoderC1EP17TIM_HandleTypeDefi>:
 *      Author: josue
 */

#include "Encoder.hpp"

LL_Control::Encoder::Encoder(TIM_HandleTypeDef * htim, int int_freq) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
 8000bcc:	4a09      	ldr	r2, [pc, #36]	; (8000bf4 <_ZN10LL_Control7EncoderC1EP17TIM_HandleTypeDefi+0x34>)
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	601a      	str	r2, [r3, #0]

	// Assignments
	this->htimCounter = htim;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	68ba      	ldr	r2, [r7, #8]
 8000bd6:	605a      	str	r2, [r3, #4]
	this->int_freq = int_freq;
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	611a      	str	r2, [r3, #16]

	set_encoderRes (537.667);
 8000bde:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8000bf8 <_ZN10LL_Control7EncoderC1EP17TIM_HandleTypeDefi+0x38>
 8000be2:	68f8      	ldr	r0, [r7, #12]
 8000be4:	f000 f838 	bl	8000c58 <_ZN10LL_Control7Encoder14set_encoderResEf>

}
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	4618      	mov	r0, r3
 8000bec:	3710      	adds	r7, #16
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	08015474 	.word	0x08015474
 8000bf8:	44066ab0 	.word	0x44066ab0

08000bfc <_ZN10LL_Control7EncoderD1Ev>:
LL_Control::Encoder::Encoder(){

}
LL_Control::Encoder::~Encoder() {
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	4a04      	ldr	r2, [pc, #16]	; (8000c18 <_ZN10LL_Control7EncoderD1Ev+0x1c>)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	08015474 	.word	0x08015474

08000c1c <_ZN10LL_Control7EncoderD0Ev>:
LL_Control::Encoder::~Encoder() {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
}
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f7ff ffe9 	bl	8000bfc <_ZN10LL_Control7EncoderD1Ev>
 8000c2a:	211c      	movs	r1, #28
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f010 f885 	bl	8010d3c <_ZdlPvj>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4618      	mov	r0, r3
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <_ZN10LL_Control7Encoder11set_ticksPREi>:
void LL_Control::Encoder::set_ticksPR(int ticks){
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6039      	str	r1, [r7, #0]
	ticksPerRevolution = ticks;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	683a      	ldr	r2, [r7, #0]
 8000c4a:	60da      	str	r2, [r3, #12]
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <_ZN10LL_Control7Encoder14set_encoderResEf>:
void LL_Control::Encoder::set_encoderRes(float res){
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	ed87 0a00 	vstr	s0, [r7]
	encoderRes = res;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	683a      	ldr	r2, [r7, #0]
 8000c68:	609a      	str	r2, [r3, #8]
	set_ticksPR((int) std::ceil(res) );
 8000c6a:	ed97 0a00 	vldr	s0, [r7]
 8000c6e:	f7ff ff97 	bl	8000ba0 <_ZSt4ceilf>
 8000c72:	eef0 7a40 	vmov.f32	s15, s0
 8000c76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c7a:	ee17 1a90 	vmov	r1, s15
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f7ff ffdc 	bl	8000c3c <_ZN10LL_Control7Encoder11set_ticksPREi>
}
 8000c84:	bf00      	nop
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <_ZN10LL_Control7Encoder7get_velEv>:
float LL_Control::Encoder::get_vel(){
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
	return vel;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	ee07 3a90 	vmov	s15, r3
}
 8000c9c:	eeb0 0a67 	vmov.f32	s0, s15
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <_ZN10LL_Control7Encoder13get_frequencyEv>:

int LL_Control::Encoder::get_frequency(){
 8000caa:	b480      	push	{r7}
 8000cac:	b083      	sub	sp, #12
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
	return int_freq;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	691b      	ldr	r3, [r3, #16]
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
	...

08000cc4 <_ZN10LL_Control7Encoder6updateEv>:

void LL_Control::Encoder::update(){
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]

	//HAL_GPIO_WritePin (GPIOE, GPIO_PIN_1, GPIO_PIN_SET);

	int tick =__HAL_TIM_GET_COUNTER(htimCounter);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd4:	60fb      	str	r3, [r7, #12]
	//int tick = htimCounter->Instance->CNT;

	// Code to avoid jumps when a revolution is completed
		// This basically happens when the encoder value changes drastically
		// from the last value to the new one
	if (std::abs(lastTick - tick) > ticksPerRevolution - 1){
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	68da      	ldr	r2, [r3, #12]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6959      	ldr	r1, [r3, #20]
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	1acb      	subs	r3, r1, r3
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	bfb8      	it	lt
 8000ce6:	425b      	neglt	r3, r3
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	dc04      	bgt.n	8000cf6 <_ZN10LL_Control7Encoder6updateEv+0x32>
		tick -= ticksPerRevolution;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	68fa      	ldr	r2, [r7, #12]
 8000cf2:	1ad3      	subs	r3, r2, r3
 8000cf4:	60fb      	str	r3, [r7, #12]
	}

	// Update angular velocities:
	//w_rightWheel = 2*pi*(lastTick_r - tick_r)/(encoderTickpRev*(0.02));
	vel = 2*pi*(lastTick - tick)*1000/(encoderRes*int_freq);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	695a      	ldr	r2, [r3, #20]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	ee07 3a90 	vmov	s15, r3
 8000d02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d06:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000d48 <_ZN10LL_Control7Encoder6updateEv+0x84>
 8000d0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d0e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000d4c <_ZN10LL_Control7Encoder6updateEv+0x88>
 8000d12:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	ed93 7a02 	vldr	s14, [r3, #8]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	691b      	ldr	r3, [r3, #16]
 8000d20:	ee07 3a90 	vmov	s15, r3
 8000d24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	edc3 7a06 	vstr	s15, [r3, #24]

	// Update last readout
	lastTick = tick;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	68fa      	ldr	r2, [r7, #12]
 8000d3a:	615a      	str	r2, [r3, #20]
}
 8000d3c:	bf00      	nop
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	40c90ff9 	.word	0x40c90ff9
 8000d4c:	447a0000 	.word	0x447a0000

08000d50 <_ZN10LL_Control8Motor_PIC1EPNS_7EncoderEP17TIM_HandleTypeDefii>:

#include "MotorPI.hpp"



LL_Control::Motor_PI::Motor_PI(LL_Control::Encoder * e, TIM_HandleTypeDef * htim, int minFreq, int maxFreq) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
 8000d5c:	603b      	str	r3, [r7, #0]
 8000d5e:	4a1c      	ldr	r2, [pc, #112]	; (8000dd0 <_ZN10LL_Control8Motor_PIC1EPNS_7EncoderEP17TIM_HandleTypeDefii+0x80>)
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	2201      	movs	r2, #1
 8000d68:	619a      	str	r2, [r3, #24]
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000d70:	629a      	str	r2, [r3, #40]	; 0x28
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000d78:	62da      	str	r2, [r3, #44]	; 0x2c

	enc = e;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	68ba      	ldr	r2, [r7, #8]
 8000d7e:	605a      	str	r2, [r3, #4]
	htimPWM = htim;
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	609a      	str	r2, [r3, #8]

	runFrequency = enc->get_frequency();
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff ff8d 	bl	8000caa <_ZN10LL_Control7Encoder13get_frequencyEv>
 8000d90:	4602      	mov	r2, r0
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	625a      	str	r2, [r3, #36]	; 0x24
    // Velocity
    set_MaxVel(32.0f);
 8000d96:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8000dd4 <_ZN10LL_Control8Motor_PIC1EPNS_7EncoderEP17TIM_HandleTypeDefii+0x84>
 8000d9a:	68f8      	ldr	r0, [r7, #12]
 8000d9c:	f000 f840 	bl	8000e20 <_ZN10LL_Control8Motor_PI10set_MaxVelEf>
    set_MinVel(-32.0f);
 8000da0:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8000dd8 <_ZN10LL_Control8Motor_PIC1EPNS_7EncoderEP17TIM_HandleTypeDefii+0x88>
 8000da4:	68f8      	ldr	r0, [r7, #12]
 8000da6:	f000 f84a 	bl	8000e3e <_ZN10LL_Control8Motor_PI10set_MinVelEf>
    // Frequency
    minFreqPWM = minFreq;
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	683a      	ldr	r2, [r7, #0]
 8000dae:	621a      	str	r2, [r3, #32]
    maxFreqPWM = maxFreq;
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	61da      	str	r2, [r3, #28]
    // Threshold
    set_threshold(0.05);
 8000db6:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8000ddc <_ZN10LL_Control8Motor_PIC1EPNS_7EncoderEP17TIM_HandleTypeDefii+0x8c>
 8000dba:	68f8      	ldr	r0, [r7, #12]
 8000dbc:	f000 f896 	bl	8000eec <_ZN10LL_Control8Motor_PI13set_thresholdEf>

    // Don't move
    stop();
 8000dc0:	68f8      	ldr	r0, [r7, #12]
 8000dc2:	f000 f9c5 	bl	8001150 <_ZN10LL_Control8Motor_PI4stopEv>
}
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3710      	adds	r7, #16
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	08015484 	.word	0x08015484
 8000dd4:	42000000 	.word	0x42000000
 8000dd8:	c2000000 	.word	0xc2000000
 8000ddc:	3d4ccccd 	.word	0x3d4ccccd

08000de0 <_ZN10LL_Control8Motor_PID1Ev>:

LL_Control::Motor_PI::~Motor_PI() {
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	4a04      	ldr	r2, [pc, #16]	; (8000dfc <_ZN10LL_Control8Motor_PID1Ev+0x1c>)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4618      	mov	r0, r3
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	08015484 	.word	0x08015484

08000e00 <_ZN10LL_Control8Motor_PID0Ev>:
LL_Control::Motor_PI::~Motor_PI() {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
}
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f7ff ffe9 	bl	8000de0 <_ZN10LL_Control8Motor_PID1Ev>
 8000e0e:	214c      	movs	r1, #76	; 0x4c
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f00f ff93 	bl	8010d3c <_ZdlPvj>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <_ZN10LL_Control8Motor_PI10set_MaxVelEf>:

// ===== Setters =====

void LL_Control::Motor_PI::set_MaxVel(float nMax){
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	ed87 0a00 	vstr	s0, [r7]
	maxVel = nMax;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	683a      	ldr	r2, [r7, #0]
 8000e30:	60da      	str	r2, [r3, #12]
}
 8000e32:	bf00      	nop
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr

08000e3e <_ZN10LL_Control8Motor_PI10set_MinVelEf>:
void LL_Control::Motor_PI::set_MinVel(float nMin){
 8000e3e:	b480      	push	{r7}
 8000e40:	b083      	sub	sp, #12
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
 8000e46:	ed87 0a00 	vstr	s0, [r7]
	minVel = nMin;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	683a      	ldr	r2, [r7, #0]
 8000e4e:	611a      	str	r2, [r3, #16]
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <_ZN10LL_Control8Motor_PI13set_referenceEf>:
void LL_Control::Motor_PI::set_reference(float ref){
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	ed87 0a00 	vstr	s0, [r7]
	// Limit the value if the ref is bigger
        // than our operational space
	if (ref > maxVel){
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	edd3 7a03 	vldr	s15, [r3, #12]
 8000e6e:	ed97 7a00 	vldr	s14, [r7]
 8000e72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e7a:	dd03      	ble.n	8000e84 <_ZN10LL_Control8Motor_PI13set_referenceEf+0x28>
		ref = maxVel;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	603b      	str	r3, [r7, #0]
 8000e82:	e00c      	b.n	8000e9e <_ZN10LL_Control8Motor_PI13set_referenceEf+0x42>
	}else if (ref < minVel){
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	edd3 7a04 	vldr	s15, [r3, #16]
 8000e8a:	ed97 7a00 	vldr	s14, [r7]
 8000e8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e96:	d502      	bpl.n	8000e9e <_ZN10LL_Control8Motor_PI13set_referenceEf+0x42>
		ref = minVel;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	691b      	ldr	r3, [r3, #16]
 8000e9c:	603b      	str	r3, [r7, #0]
	}
    reference = direction*ref;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	699b      	ldr	r3, [r3, #24]
 8000ea2:	ee07 3a90 	vmov	s15, r3
 8000ea6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eaa:	edd7 7a00 	vldr	s15, [r7]
 8000eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <_ZN10LL_Control8Motor_PI6set_KsEff>:
void LL_Control::Motor_PI::set_Ks(float k_i, float k_p){
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	ed87 0a02 	vstr	s0, [r7, #8]
 8000ed0:	edc7 0a01 	vstr	s1, [r7, #4]
	this->k_i = k_i;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	68ba      	ldr	r2, [r7, #8]
 8000ed8:	629a      	str	r2, [r3, #40]	; 0x28
	this->k_p = k_p;
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000ee0:	bf00      	nop
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <_ZN10LL_Control8Motor_PI13set_thresholdEf>:
void LL_Control::Motor_PI::set_runFrequency(int f){
	runFrequency = f;
}
void LL_Control::Motor_PI::set_threshold(float t){
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	ed87 0a00 	vstr	s0, [r7]
	threshold = t;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	683a      	ldr	r2, [r7, #0]
 8000efc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000efe:	bf00      	nop
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <_ZN10LL_Control8Motor_PI7get_velEv>:

// ===== Getters =====
float LL_Control::Motor_PI::get_vel(){
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b084      	sub	sp, #16
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]

	float vel = enc->get_vel();
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff feb8 	bl	8000c8c <_ZN10LL_Control7Encoder7get_velEv>
 8000f1c:	ed87 0a03 	vstr	s0, [r7, #12]
	// Sometimes it overflows into an invalid value
		// We double check to clean even more the data
	// If the calculated value is bigger than our maximum velocity
	if (vel >  maxVel || vel < minVel){
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	edd3 7a03 	vldr	s15, [r3, #12]
 8000f26:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f32:	dc09      	bgt.n	8000f48 <_ZN10LL_Control8Motor_PI7get_velEv+0x3e>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	edd3 7a04 	vldr	s15, [r3, #16]
 8000f3a:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f46:	d502      	bpl.n	8000f4e <_ZN10LL_Control8Motor_PI7get_velEv+0x44>
		vel = lastVel;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	695b      	ldr	r3, [r3, #20]
 8000f4c:	60fb      	str	r3, [r7, #12]
	}

	// Update last reading
	lastVel = vel;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	68fa      	ldr	r2, [r7, #12]
 8000f52:	615a      	str	r2, [r3, #20]

    // Should we invert this? 
	return vel;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	ee07 3a90 	vmov	s15, r3
}
 8000f5a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <_ZN10LL_Control8Motor_PI3mapEfffff>:

// ===== Others =====
void LL_Control::Motor_PI::invert(){
    direction *= -1;
}
float LL_Control::Motor_PI::map(float x, float in_min, float in_max, float out_min, float out_max){
 8000f64:	b480      	push	{r7}
 8000f66:	b087      	sub	sp, #28
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6178      	str	r0, [r7, #20]
 8000f6c:	ed87 0a04 	vstr	s0, [r7, #16]
 8000f70:	edc7 0a03 	vstr	s1, [r7, #12]
 8000f74:	ed87 1a02 	vstr	s2, [r7, #8]
 8000f78:	edc7 1a01 	vstr	s3, [r7, #4]
 8000f7c:	ed87 2a00 	vstr	s4, [r7]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000f80:	ed97 7a04 	vldr	s14, [r7, #16]
 8000f84:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f88:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f8c:	edd7 6a00 	vldr	s13, [r7]
 8000f90:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f94:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000f98:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000f9c:	ed97 7a02 	vldr	s14, [r7, #8]
 8000fa0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fa4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fa8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000fac:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fb0:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000fb4:	eeb0 0a67 	vmov.f32	s0, s15
 8000fb8:	371c      	adds	r7, #28
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <_ZN10LL_Control8Motor_PI3mapEf>:
int LL_Control::Motor_PI::map(float x){
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
 8000fca:	ed87 0a00 	vstr	s0, [r7]
	if (x > maxVel){
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	edd3 7a03 	vldr	s15, [r3, #12]
 8000fd4:	ed97 7a00 	vldr	s14, [r7]
 8000fd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fe0:	dd03      	ble.n	8000fea <_ZN10LL_Control8Motor_PI3mapEf+0x28>
		x = maxVel;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	603b      	str	r3, [r7, #0]
 8000fe8:	e00c      	b.n	8001004 <_ZN10LL_Control8Motor_PI3mapEf+0x42>
	}else if (x < minVel){
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	edd3 7a04 	vldr	s15, [r3, #16]
 8000ff0:	ed97 7a00 	vldr	s14, [r7]
 8000ff4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ffc:	d502      	bpl.n	8001004 <_ZN10LL_Control8Motor_PI3mapEf+0x42>
		x = minVel;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	691b      	ldr	r3, [r3, #16]
 8001002:	603b      	str	r3, [r7, #0]
	}
	return (int) map(x, minVel, maxVel, minFreqPWM, maxFreqPWM);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	edd3 7a04 	vldr	s15, [r3, #16]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6a1b      	ldr	r3, [r3, #32]
 8001014:	ee06 3a90 	vmov	s13, r3
 8001018:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	69db      	ldr	r3, [r3, #28]
 8001020:	ee06 3a10 	vmov	s12, r3
 8001024:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8001028:	eeb0 2a46 	vmov.f32	s4, s12
 800102c:	eef0 1a66 	vmov.f32	s3, s13
 8001030:	eeb0 1a47 	vmov.f32	s2, s14
 8001034:	eef0 0a67 	vmov.f32	s1, s15
 8001038:	ed97 0a00 	vldr	s0, [r7]
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f7ff ff91 	bl	8000f64 <_ZN10LL_Control8Motor_PI3mapEfffff>
 8001042:	eef0 7a40 	vmov.f32	s15, s0
 8001046:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800104a:	ee17 3a90 	vmov	r3, s15
}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <_ZN10LL_Control8Motor_PI9go_to_refEv>:

void LL_Control::Motor_PI::go_to_ref(){
 8001056:	b580      	push	{r7, lr}
 8001058:	ed2d 8b02 	vpush	{d8}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]

    // ===== #CONTROL =====
	error = reference - get_vel();
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	ed93 8a0d 	vldr	s16, [r3, #52]	; 0x34
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f7ff ff4e 	bl	8000f0a <_ZN10LL_Control8Motor_PI7get_velEv>
 800106e:	eef0 7a40 	vmov.f32	s15, s0
 8001072:	ee78 7a67 	vsub.f32	s15, s16, s15
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

	// Since we are not working with tasks, we can't actually make whiles
	if (error <= threshold && error >= -threshold){
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001088:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800108c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001090:	d80c      	bhi.n	80010ac <_ZN10LL_Control8Motor_PI9go_to_refEv+0x56>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800109e:	eef1 7a67 	vneg.f32	s15, s15
 80010a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010aa:	da4a      	bge.n	8001142 <_ZN10LL_Control8Motor_PI9go_to_refEv+0xec>
		return;
	}
    // If we are not on the threshold, keep altering PWM pulse
    
    // Update error on integral term
    intError += (float) (1.0f/runFrequency)*error ;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b6:	ee07 3a90 	vmov	s15, r3
 80010ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010be:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80010c2:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80010cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    	 * */
    //float intTerm = (1000/runFrequency)*error + lastError;

    // Regulate voltage to motor
        // Sadly, it isn't torque ;(
    control += (float) (1.0f/runFrequency)*(k_p*error + k_i*intError);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e4:	ee07 3a90 	vmov	s15, r3
 80010e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ec:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80010f0:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001100:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	edd3 5a0a 	vldr	s11, [r3, #40]	; 0x28
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001110:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001114:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001118:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800111c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48


    // Actually move motor
    //__HAL_TIM_SET_COMPARE(htimPWM, TIM_CHANNEL_1, control);
    htimPWM -> Instance-> CCR1 = map(control);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800112c:	eeb0 0a67 	vmov.f32	s0, s15
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f7ff ff46 	bl	8000fc2 <_ZN10LL_Control8Motor_PI3mapEf>
 8001136:	4602      	mov	r2, r0
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	635a      	str	r2, [r3, #52]	; 0x34
 8001140:	e000      	b.n	8001144 <_ZN10LL_Control8Motor_PI9go_to_refEv+0xee>
		return;
 8001142:	bf00      	nop

    // Update integral component
    //lastIntegral = intTerm;
}
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	ecbd 8b02 	vpop	{d8}
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <_ZN10LL_Control8Motor_PI4stopEv>:

void LL_Control::Motor_PI::stop(){
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
	set_reference(0.0);
 8001158:	ed9f 0a04 	vldr	s0, [pc, #16]	; 800116c <_ZN10LL_Control8Motor_PI4stopEv+0x1c>
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff fe7d 	bl	8000e5c <_ZN10LL_Control8Motor_PI13set_referenceEf>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	00000000 	.word	0x00000000

08001170 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8001176:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800117a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800117c:	bf00      	nop
 800117e:	4b3e      	ldr	r3, [pc, #248]	; (8001278 <main+0x108>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d006      	beq.n	8001198 <main+0x28>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	1e5a      	subs	r2, r3, #1
 800118e:	607a      	str	r2, [r7, #4]
 8001190:	2b00      	cmp	r3, #0
 8001192:	dd01      	ble.n	8001198 <main+0x28>
 8001194:	2301      	movs	r3, #1
 8001196:	e000      	b.n	800119a <main+0x2a>
 8001198:	2300      	movs	r3, #0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1ef      	bne.n	800117e <main+0xe>
  if ( timeout < 0 )
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	da01      	bge.n	80011a8 <main+0x38>
  {
  Error_Handler();
 80011a4:	f000 ff20 	bl	8001fe8 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011a8:	f001 fc00 	bl	80029ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ac:	f000 f878 	bl	80012a0 <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80011b0:	f000 f902 	bl	80013b8 <_Z24PeriphCommonClock_Configv>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80011b4:	4b30      	ldr	r3, [pc, #192]	; (8001278 <main+0x108>)
 80011b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ba:	4a2f      	ldr	r2, [pc, #188]	; (8001278 <main+0x108>)
 80011bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011c4:	4b2c      	ldr	r3, [pc, #176]	; (8001278 <main+0x108>)
 80011c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ce:	603b      	str	r3, [r7, #0]
 80011d0:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80011d2:	2000      	movs	r0, #0
 80011d4:	f005 fc80 	bl	8006ad8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80011d8:	2100      	movs	r1, #0
 80011da:	2000      	movs	r0, #0
 80011dc:	f005 fc96 	bl	8006b0c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80011e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011e4:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80011e6:	bf00      	nop
 80011e8:	4b23      	ldr	r3, [pc, #140]	; (8001278 <main+0x108>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d106      	bne.n	8001202 <main+0x92>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	1e5a      	subs	r2, r3, #1
 80011f8:	607a      	str	r2, [r7, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	dd01      	ble.n	8001202 <main+0x92>
 80011fe:	2301      	movs	r3, #1
 8001200:	e000      	b.n	8001204 <main+0x94>
 8001202:	2300      	movs	r3, #0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d1ef      	bne.n	80011e8 <main+0x78>
if ( timeout < 0 )
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	da01      	bge.n	8001212 <main+0xa2>
{
Error_Handler();
 800120e:	f000 feeb 	bl	8001fe8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001212:	f000 fd03 	bl	8001c1c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001216:	f000 fcd9 	bl	8001bcc <_ZL11MX_DMA_Initv>
  MX_USART3_UART_Init();
 800121a:	f000 fc41 	bl	8001aa0 <_ZL19MX_USART3_UART_Initv>
  MX_USB_OTG_FS_PCD_Init();
 800121e:	f000 fc9f 	bl	8001b60 <_ZL22MX_USB_OTG_FS_PCD_Initv>
  MX_TIM8_Init();
 8001222:	f000 fbd9 	bl	80019d8 <_ZL12MX_TIM8_Initv>
  MX_TIM4_Init();
 8001226:	f000 fb77 	bl	8001918 <_ZL12MX_TIM4_Initv>
  MX_TIM2_Init();
 800122a:	f000 fa55 	bl	80016d8 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 800122e:	f000 fae3 	bl	80017f8 <_ZL12MX_TIM3_Initv>
  MX_TIM1_Init();
 8001232:	f000 f9ef 	bl	8001614 <_ZL12MX_TIM1_Initv>
  MX_ADC1_Init();
 8001236:	f000 f8f5 	bl	8001424 <_ZL12MX_ADC1_Initv>
  MX_ADC2_Init();
 800123a:	f000 f97b 	bl	8001534 <_ZL12MX_ADC2_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800123e:	f00d f803 	bl	800e248 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001242:	4a0e      	ldr	r2, [pc, #56]	; (800127c <main+0x10c>)
 8001244:	2100      	movs	r1, #0
 8001246:	480e      	ldr	r0, [pc, #56]	; (8001280 <main+0x110>)
 8001248:	f00d f848 	bl	800e2dc <osThreadNew>
 800124c:	4603      	mov	r3, r0
 800124e:	4a0d      	ldr	r2, [pc, #52]	; (8001284 <main+0x114>)
 8001250:	6013      	str	r3, [r2, #0]

  /* creation of Joystick */
  JoystickHandle = osThreadNew(StartJoystick, NULL, &Joystick_attributes);
 8001252:	4a0d      	ldr	r2, [pc, #52]	; (8001288 <main+0x118>)
 8001254:	2100      	movs	r1, #0
 8001256:	480d      	ldr	r0, [pc, #52]	; (800128c <main+0x11c>)
 8001258:	f00d f840 	bl	800e2dc <osThreadNew>
 800125c:	4603      	mov	r3, r0
 800125e:	4a0c      	ldr	r2, [pc, #48]	; (8001290 <main+0x120>)
 8001260:	6013      	str	r3, [r2, #0]

  /* creation of Chassis */
  ChassisHandle = osThreadNew(StartChassis, NULL, &Chassis_attributes);
 8001262:	4a0c      	ldr	r2, [pc, #48]	; (8001294 <main+0x124>)
 8001264:	2100      	movs	r1, #0
 8001266:	480c      	ldr	r0, [pc, #48]	; (8001298 <main+0x128>)
 8001268:	f00d f838 	bl	800e2dc <osThreadNew>
 800126c:	4603      	mov	r3, r0
 800126e:	4a0b      	ldr	r2, [pc, #44]	; (800129c <main+0x12c>)
 8001270:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001272:	f00d f80d 	bl	800e290 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001276:	e7fe      	b.n	8001276 <main+0x106>
 8001278:	58024400 	.word	0x58024400
 800127c:	0801548c 	.word	0x0801548c
 8001280:	08001d4d 	.word	0x08001d4d
 8001284:	24000acc 	.word	0x24000acc
 8001288:	080154b0 	.word	0x080154b0
 800128c:	08001d5d 	.word	0x08001d5d
 8001290:	24000ad0 	.word	0x24000ad0
 8001294:	080154d4 	.word	0x080154d4
 8001298:	08001f29 	.word	0x08001f29
 800129c:	24000ad4 	.word	0x24000ad4

080012a0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b09c      	sub	sp, #112	; 0x70
 80012a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012aa:	224c      	movs	r2, #76	; 0x4c
 80012ac:	2100      	movs	r1, #0
 80012ae:	4618      	mov	r0, r3
 80012b0:	f010 fd8b 	bl	8011dca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	2220      	movs	r2, #32
 80012b8:	2100      	movs	r1, #0
 80012ba:	4618      	mov	r0, r3
 80012bc:	f010 fd85 	bl	8011dca <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80012c0:	2004      	movs	r0, #4
 80012c2:	f005 fd7f 	bl	8006dc4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80012c6:	2300      	movs	r3, #0
 80012c8:	603b      	str	r3, [r7, #0]
 80012ca:	4b39      	ldr	r3, [pc, #228]	; (80013b0 <_Z18SystemClock_Configv+0x110>)
 80012cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ce:	4a38      	ldr	r2, [pc, #224]	; (80013b0 <_Z18SystemClock_Configv+0x110>)
 80012d0:	f023 0301 	bic.w	r3, r3, #1
 80012d4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80012d6:	4b36      	ldr	r3, [pc, #216]	; (80013b0 <_Z18SystemClock_Configv+0x110>)
 80012d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	603b      	str	r3, [r7, #0]
 80012e0:	4b34      	ldr	r3, [pc, #208]	; (80013b4 <_Z18SystemClock_Configv+0x114>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012e8:	4a32      	ldr	r2, [pc, #200]	; (80013b4 <_Z18SystemClock_Configv+0x114>)
 80012ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ee:	6193      	str	r3, [r2, #24]
 80012f0:	4b30      	ldr	r3, [pc, #192]	; (80013b4 <_Z18SystemClock_Configv+0x114>)
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012f8:	603b      	str	r3, [r7, #0]
 80012fa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80012fc:	bf00      	nop
 80012fe:	4b2d      	ldr	r3, [pc, #180]	; (80013b4 <_Z18SystemClock_Configv+0x114>)
 8001300:	699b      	ldr	r3, [r3, #24]
 8001302:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001306:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800130a:	bf14      	ite	ne
 800130c:	2301      	movne	r3, #1
 800130e:	2300      	moveq	r3, #0
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1f3      	bne.n	80012fe <_Z18SystemClock_Configv+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001316:	2301      	movs	r3, #1
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800131a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800131e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001320:	2302      	movs	r3, #2
 8001322:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001324:	2302      	movs	r3, #2
 8001326:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001328:	2301      	movs	r3, #1
 800132a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 800132c:	2312      	movs	r3, #18
 800132e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001330:	2302      	movs	r3, #2
 8001332:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001334:	2302      	movs	r3, #2
 8001336:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001338:	2302      	movs	r3, #2
 800133a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800133c:	230c      	movs	r3, #12
 800133e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8001340:	2302      	movs	r3, #2
 8001342:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8001344:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001348:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800134a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134e:	4618      	mov	r0, r3
 8001350:	f005 fda2 	bl	8006e98 <HAL_RCC_OscConfig>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	bf14      	ite	ne
 800135a:	2301      	movne	r3, #1
 800135c:	2300      	moveq	r3, #0
 800135e:	b2db      	uxtb	r3, r3
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <_Z18SystemClock_Configv+0xc8>
  {
    Error_Handler();
 8001364:	f000 fe40 	bl	8001fe8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001368:	233f      	movs	r3, #63	; 0x3f
 800136a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800136c:	2303      	movs	r3, #3
 800136e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001370:	2300      	movs	r3, #0
 8001372:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001374:	2300      	movs	r3, #0
 8001376:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001378:	2340      	movs	r3, #64	; 0x40
 800137a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800137c:	2340      	movs	r3, #64	; 0x40
 800137e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001380:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001384:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001386:	2340      	movs	r3, #64	; 0x40
 8001388:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	2101      	movs	r1, #1
 800138e:	4618      	mov	r0, r3
 8001390:	f006 f9dc 	bl	800774c <HAL_RCC_ClockConfig>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	bf14      	ite	ne
 800139a:	2301      	movne	r3, #1
 800139c:	2300      	moveq	r3, #0
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <_Z18SystemClock_Configv+0x108>
  {
    Error_Handler();
 80013a4:	f000 fe20 	bl	8001fe8 <Error_Handler>
  }
}
 80013a8:	bf00      	nop
 80013aa:	3770      	adds	r7, #112	; 0x70
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	58000400 	.word	0x58000400
 80013b4:	58024800 	.word	0x58024800

080013b8 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b0b0      	sub	sp, #192	; 0xc0
 80013bc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013be:	463b      	mov	r3, r7
 80013c0:	22c0      	movs	r2, #192	; 0xc0
 80013c2:	2100      	movs	r1, #0
 80013c4:	4618      	mov	r0, r3
 80013c6:	f010 fd00 	bl	8011dca <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80013ca:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80013ce:	f04f 0300 	mov.w	r3, #0
 80013d2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 80013d6:	2301      	movs	r3, #1
 80013d8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 18;
 80013da:	2312      	movs	r3, #18
 80013dc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 80013de:	2304      	movs	r3, #4
 80013e0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80013e2:	2302      	movs	r3, #2
 80013e4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80013e6:	2302      	movs	r3, #2
 80013e8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80013ea:	23c0      	movs	r3, #192	; 0xc0
 80013ec:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80013ee:	2320      	movs	r3, #32
 80013f0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 80013f2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80013f8:	2300      	movs	r3, #0
 80013fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013fe:	463b      	mov	r3, r7
 8001400:	4618      	mov	r0, r3
 8001402:	f006 fd71 	bl	8007ee8 <HAL_RCCEx_PeriphCLKConfig>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	bf14      	ite	ne
 800140c:	2301      	movne	r3, #1
 800140e:	2300      	moveq	r3, #0
 8001410:	b2db      	uxtb	r3, r3
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <_Z24PeriphCommonClock_Configv+0x62>
  {
    Error_Handler();
 8001416:	f000 fde7 	bl	8001fe8 <Error_Handler>
  }
}
 800141a:	bf00      	nop
 800141c:	37c0      	adds	r7, #192	; 0xc0
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08a      	sub	sp, #40	; 0x28
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800142a:	f107 031c 	add.w	r3, r7, #28
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001436:	463b      	mov	r3, r7
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]
 8001444:	615a      	str	r2, [r3, #20]
 8001446:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001448:	4b37      	ldr	r3, [pc, #220]	; (8001528 <_ZL12MX_ADC1_Initv+0x104>)
 800144a:	4a38      	ldr	r2, [pc, #224]	; (800152c <_ZL12MX_ADC1_Initv+0x108>)
 800144c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800144e:	4b36      	ldr	r3, [pc, #216]	; (8001528 <_ZL12MX_ADC1_Initv+0x104>)
 8001450:	2200      	movs	r2, #0
 8001452:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001454:	4b34      	ldr	r3, [pc, #208]	; (8001528 <_ZL12MX_ADC1_Initv+0x104>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800145a:	4b33      	ldr	r3, [pc, #204]	; (8001528 <_ZL12MX_ADC1_Initv+0x104>)
 800145c:	2200      	movs	r2, #0
 800145e:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001460:	4b31      	ldr	r3, [pc, #196]	; (8001528 <_ZL12MX_ADC1_Initv+0x104>)
 8001462:	2204      	movs	r2, #4
 8001464:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001466:	4b30      	ldr	r3, [pc, #192]	; (8001528 <_ZL12MX_ADC1_Initv+0x104>)
 8001468:	2200      	movs	r2, #0
 800146a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800146c:	4b2e      	ldr	r3, [pc, #184]	; (8001528 <_ZL12MX_ADC1_Initv+0x104>)
 800146e:	2200      	movs	r2, #0
 8001470:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8001472:	4b2d      	ldr	r3, [pc, #180]	; (8001528 <_ZL12MX_ADC1_Initv+0x104>)
 8001474:	2201      	movs	r2, #1
 8001476:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001478:	4b2b      	ldr	r3, [pc, #172]	; (8001528 <_ZL12MX_ADC1_Initv+0x104>)
 800147a:	2200      	movs	r2, #0
 800147c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800147e:	4b2a      	ldr	r3, [pc, #168]	; (8001528 <_ZL12MX_ADC1_Initv+0x104>)
 8001480:	2200      	movs	r2, #0
 8001482:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001484:	4b28      	ldr	r3, [pc, #160]	; (8001528 <_ZL12MX_ADC1_Initv+0x104>)
 8001486:	2200      	movs	r2, #0
 8001488:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800148a:	4b27      	ldr	r3, [pc, #156]	; (8001528 <_ZL12MX_ADC1_Initv+0x104>)
 800148c:	2200      	movs	r2, #0
 800148e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001490:	4b25      	ldr	r3, [pc, #148]	; (8001528 <_ZL12MX_ADC1_Initv+0x104>)
 8001492:	2200      	movs	r2, #0
 8001494:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001496:	4b24      	ldr	r3, [pc, #144]	; (8001528 <_ZL12MX_ADC1_Initv+0x104>)
 8001498:	2200      	movs	r2, #0
 800149a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800149c:	4b22      	ldr	r3, [pc, #136]	; (8001528 <_ZL12MX_ADC1_Initv+0x104>)
 800149e:	2200      	movs	r2, #0
 80014a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014a4:	4820      	ldr	r0, [pc, #128]	; (8001528 <_ZL12MX_ADC1_Initv+0x104>)
 80014a6:	f001 fcef 	bl	8002e88 <HAL_ADC_Init>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	bf14      	ite	ne
 80014b0:	2301      	movne	r3, #1
 80014b2:	2300      	moveq	r3, #0
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <_ZL12MX_ADC1_Initv+0x9a>
  {
    Error_Handler();
 80014ba:	f000 fd95 	bl	8001fe8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80014be:	2300      	movs	r3, #0
 80014c0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80014c2:	f107 031c 	add.w	r3, r7, #28
 80014c6:	4619      	mov	r1, r3
 80014c8:	4817      	ldr	r0, [pc, #92]	; (8001528 <_ZL12MX_ADC1_Initv+0x104>)
 80014ca:	f002 fd57 	bl	8003f7c <HAL_ADCEx_MultiModeConfigChannel>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	bf14      	ite	ne
 80014d4:	2301      	movne	r3, #1
 80014d6:	2300      	moveq	r3, #0
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <_ZL12MX_ADC1_Initv+0xbe>
  {
    Error_Handler();
 80014de:	f000 fd83 	bl	8001fe8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 80014e2:	4b13      	ldr	r3, [pc, #76]	; (8001530 <_ZL12MX_ADC1_Initv+0x10c>)
 80014e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014e6:	2306      	movs	r3, #6
 80014e8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80014ea:	2300      	movs	r3, #0
 80014ec:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014ee:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80014f2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014f4:	2304      	movs	r3, #4
 80014f6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001500:	463b      	mov	r3, r7
 8001502:	4619      	mov	r1, r3
 8001504:	4808      	ldr	r0, [pc, #32]	; (8001528 <_ZL12MX_ADC1_Initv+0x104>)
 8001506:	f002 f82d 	bl	8003564 <HAL_ADC_ConfigChannel>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	bf14      	ite	ne
 8001510:	2301      	movne	r3, #1
 8001512:	2300      	moveq	r3, #0
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <_ZL12MX_ADC1_Initv+0xfa>
  {
    Error_Handler();
 800151a:	f000 fd65 	bl	8001fe8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800151e:	bf00      	nop
 8001520:	3728      	adds	r7, #40	; 0x28
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	240001f8 	.word	0x240001f8
 800152c:	40022000 	.word	0x40022000
 8001530:	4b840000 	.word	0x4b840000

08001534 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b088      	sub	sp, #32
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
 8001548:	615a      	str	r2, [r3, #20]
 800154a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800154c:	4b2e      	ldr	r3, [pc, #184]	; (8001608 <_ZL12MX_ADC2_Initv+0xd4>)
 800154e:	4a2f      	ldr	r2, [pc, #188]	; (800160c <_ZL12MX_ADC2_Initv+0xd8>)
 8001550:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001552:	4b2d      	ldr	r3, [pc, #180]	; (8001608 <_ZL12MX_ADC2_Initv+0xd4>)
 8001554:	2200      	movs	r2, #0
 8001556:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8001558:	4b2b      	ldr	r3, [pc, #172]	; (8001608 <_ZL12MX_ADC2_Initv+0xd4>)
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800155e:	4b2a      	ldr	r3, [pc, #168]	; (8001608 <_ZL12MX_ADC2_Initv+0xd4>)
 8001560:	2200      	movs	r2, #0
 8001562:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001564:	4b28      	ldr	r3, [pc, #160]	; (8001608 <_ZL12MX_ADC2_Initv+0xd4>)
 8001566:	2204      	movs	r2, #4
 8001568:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800156a:	4b27      	ldr	r3, [pc, #156]	; (8001608 <_ZL12MX_ADC2_Initv+0xd4>)
 800156c:	2200      	movs	r2, #0
 800156e:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001570:	4b25      	ldr	r3, [pc, #148]	; (8001608 <_ZL12MX_ADC2_Initv+0xd4>)
 8001572:	2200      	movs	r2, #0
 8001574:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8001576:	4b24      	ldr	r3, [pc, #144]	; (8001608 <_ZL12MX_ADC2_Initv+0xd4>)
 8001578:	2201      	movs	r2, #1
 800157a:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800157c:	4b22      	ldr	r3, [pc, #136]	; (8001608 <_ZL12MX_ADC2_Initv+0xd4>)
 800157e:	2200      	movs	r2, #0
 8001580:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001582:	4b21      	ldr	r3, [pc, #132]	; (8001608 <_ZL12MX_ADC2_Initv+0xd4>)
 8001584:	2200      	movs	r2, #0
 8001586:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001588:	4b1f      	ldr	r3, [pc, #124]	; (8001608 <_ZL12MX_ADC2_Initv+0xd4>)
 800158a:	2200      	movs	r2, #0
 800158c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800158e:	4b1e      	ldr	r3, [pc, #120]	; (8001608 <_ZL12MX_ADC2_Initv+0xd4>)
 8001590:	2200      	movs	r2, #0
 8001592:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001594:	4b1c      	ldr	r3, [pc, #112]	; (8001608 <_ZL12MX_ADC2_Initv+0xd4>)
 8001596:	2200      	movs	r2, #0
 8001598:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800159a:	4b1b      	ldr	r3, [pc, #108]	; (8001608 <_ZL12MX_ADC2_Initv+0xd4>)
 800159c:	2200      	movs	r2, #0
 800159e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80015a0:	4b19      	ldr	r3, [pc, #100]	; (8001608 <_ZL12MX_ADC2_Initv+0xd4>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80015a8:	4817      	ldr	r0, [pc, #92]	; (8001608 <_ZL12MX_ADC2_Initv+0xd4>)
 80015aa:	f001 fc6d 	bl	8002e88 <HAL_ADC_Init>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	bf14      	ite	ne
 80015b4:	2301      	movne	r3, #1
 80015b6:	2300      	moveq	r3, #0
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <_ZL12MX_ADC2_Initv+0x8e>
  {
    Error_Handler();
 80015be:	f000 fd13 	bl	8001fe8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 80015c2:	4b13      	ldr	r3, [pc, #76]	; (8001610 <_ZL12MX_ADC2_Initv+0xdc>)
 80015c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015c6:	2306      	movs	r3, #6
 80015c8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015ce:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80015d2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015d4:	2304      	movs	r3, #4
 80015d6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80015d8:	2300      	movs	r3, #0
 80015da:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80015dc:	2300      	movs	r3, #0
 80015de:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	4619      	mov	r1, r3
 80015e4:	4808      	ldr	r0, [pc, #32]	; (8001608 <_ZL12MX_ADC2_Initv+0xd4>)
 80015e6:	f001 ffbd 	bl	8003564 <HAL_ADC_ConfigChannel>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	bf14      	ite	ne
 80015f0:	2301      	movne	r3, #1
 80015f2:	2300      	moveq	r3, #0
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <_ZL12MX_ADC2_Initv+0xca>
  {
    Error_Handler();
 80015fa:	f000 fcf5 	bl	8001fe8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80015fe:	bf00      	nop
 8001600:	3720      	adds	r7, #32
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	2400025c 	.word	0x2400025c
 800160c:	40022100 	.word	0x40022100
 8001610:	4fb80000 	.word	0x4fb80000

08001614 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b088      	sub	sp, #32
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800161a:	f107 0310 	add.w	r3, r7, #16
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	605a      	str	r2, [r3, #4]
 8001624:	609a      	str	r2, [r3, #8]
 8001626:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001628:	1d3b      	adds	r3, r7, #4
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]
 8001630:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001632:	4b27      	ldr	r3, [pc, #156]	; (80016d0 <_ZL12MX_TIM1_Initv+0xbc>)
 8001634:	4a27      	ldr	r2, [pc, #156]	; (80016d4 <_ZL12MX_TIM1_Initv+0xc0>)
 8001636:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 74;
 8001638:	4b25      	ldr	r3, [pc, #148]	; (80016d0 <_ZL12MX_TIM1_Initv+0xbc>)
 800163a:	224a      	movs	r2, #74	; 0x4a
 800163c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800163e:	4b24      	ldr	r3, [pc, #144]	; (80016d0 <_ZL12MX_TIM1_Initv+0xbc>)
 8001640:	2200      	movs	r2, #0
 8001642:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8001644:	4b22      	ldr	r3, [pc, #136]	; (80016d0 <_ZL12MX_TIM1_Initv+0xbc>)
 8001646:	f644 6220 	movw	r2, #20000	; 0x4e20
 800164a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800164c:	4b20      	ldr	r3, [pc, #128]	; (80016d0 <_ZL12MX_TIM1_Initv+0xbc>)
 800164e:	2200      	movs	r2, #0
 8001650:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001652:	4b1f      	ldr	r3, [pc, #124]	; (80016d0 <_ZL12MX_TIM1_Initv+0xbc>)
 8001654:	2200      	movs	r2, #0
 8001656:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001658:	4b1d      	ldr	r3, [pc, #116]	; (80016d0 <_ZL12MX_TIM1_Initv+0xbc>)
 800165a:	2280      	movs	r2, #128	; 0x80
 800165c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800165e:	481c      	ldr	r0, [pc, #112]	; (80016d0 <_ZL12MX_TIM1_Initv+0xbc>)
 8001660:	f009 f940 	bl	800a8e4 <HAL_TIM_Base_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	bf14      	ite	ne
 800166a:	2301      	movne	r3, #1
 800166c:	2300      	moveq	r3, #0
 800166e:	b2db      	uxtb	r3, r3
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <_ZL12MX_TIM1_Initv+0x64>
  {
    Error_Handler();
 8001674:	f000 fcb8 	bl	8001fe8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001678:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800167c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800167e:	f107 0310 	add.w	r3, r7, #16
 8001682:	4619      	mov	r1, r3
 8001684:	4812      	ldr	r0, [pc, #72]	; (80016d0 <_ZL12MX_TIM1_Initv+0xbc>)
 8001686:	f009 fef5 	bl	800b474 <HAL_TIM_ConfigClockSource>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	bf14      	ite	ne
 8001690:	2301      	movne	r3, #1
 8001692:	2300      	moveq	r3, #0
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <_ZL12MX_TIM1_Initv+0x8a>
  {
    Error_Handler();
 800169a:	f000 fca5 	bl	8001fe8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800169e:	2300      	movs	r3, #0
 80016a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016a2:	2300      	movs	r3, #0
 80016a4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016aa:	1d3b      	adds	r3, r7, #4
 80016ac:	4619      	mov	r1, r3
 80016ae:	4808      	ldr	r0, [pc, #32]	; (80016d0 <_ZL12MX_TIM1_Initv+0xbc>)
 80016b0:	f00a fc34 	bl	800bf1c <HAL_TIMEx_MasterConfigSynchronization>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	bf14      	ite	ne
 80016ba:	2301      	movne	r3, #1
 80016bc:	2300      	moveq	r3, #0
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <_ZL12MX_TIM1_Initv+0xb4>
  {
    Error_Handler();
 80016c4:	f000 fc90 	bl	8001fe8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80016c8:	bf00      	nop
 80016ca:	3720      	adds	r7, #32
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	240002c0 	.word	0x240002c0
 80016d4:	40010000 	.word	0x40010000

080016d8 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08e      	sub	sp, #56	; 0x38
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	609a      	str	r2, [r3, #8]
 80016ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ec:	f107 031c 	add.w	r3, r7, #28
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016f8:	463b      	mov	r3, r7
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	605a      	str	r2, [r3, #4]
 8001700:	609a      	str	r2, [r3, #8]
 8001702:	60da      	str	r2, [r3, #12]
 8001704:	611a      	str	r2, [r3, #16]
 8001706:	615a      	str	r2, [r3, #20]
 8001708:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800170a:	4b3a      	ldr	r3, [pc, #232]	; (80017f4 <_ZL12MX_TIM2_Initv+0x11c>)
 800170c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001710:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 75;
 8001712:	4b38      	ldr	r3, [pc, #224]	; (80017f4 <_ZL12MX_TIM2_Initv+0x11c>)
 8001714:	224b      	movs	r2, #75	; 0x4b
 8001716:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001718:	4b36      	ldr	r3, [pc, #216]	; (80017f4 <_ZL12MX_TIM2_Initv+0x11c>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1950;
 800171e:	4b35      	ldr	r3, [pc, #212]	; (80017f4 <_ZL12MX_TIM2_Initv+0x11c>)
 8001720:	f240 729e 	movw	r2, #1950	; 0x79e
 8001724:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001726:	4b33      	ldr	r3, [pc, #204]	; (80017f4 <_ZL12MX_TIM2_Initv+0x11c>)
 8001728:	2200      	movs	r2, #0
 800172a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800172c:	4b31      	ldr	r3, [pc, #196]	; (80017f4 <_ZL12MX_TIM2_Initv+0x11c>)
 800172e:	2280      	movs	r2, #128	; 0x80
 8001730:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001732:	4830      	ldr	r0, [pc, #192]	; (80017f4 <_ZL12MX_TIM2_Initv+0x11c>)
 8001734:	f009 f8d6 	bl	800a8e4 <HAL_TIM_Base_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	bf14      	ite	ne
 800173e:	2301      	movne	r3, #1
 8001740:	2300      	moveq	r3, #0
 8001742:	b2db      	uxtb	r3, r3
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <_ZL12MX_TIM2_Initv+0x74>
  {
    Error_Handler();
 8001748:	f000 fc4e 	bl	8001fe8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800174c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001750:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001752:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001756:	4619      	mov	r1, r3
 8001758:	4826      	ldr	r0, [pc, #152]	; (80017f4 <_ZL12MX_TIM2_Initv+0x11c>)
 800175a:	f009 fe8b 	bl	800b474 <HAL_TIM_ConfigClockSource>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	bf14      	ite	ne
 8001764:	2301      	movne	r3, #1
 8001766:	2300      	moveq	r3, #0
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <_ZL12MX_TIM2_Initv+0x9a>
  {
    Error_Handler();
 800176e:	f000 fc3b 	bl	8001fe8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001772:	4820      	ldr	r0, [pc, #128]	; (80017f4 <_ZL12MX_TIM2_Initv+0x11c>)
 8001774:	f009 f986 	bl	800aa84 <HAL_TIM_PWM_Init>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	bf14      	ite	ne
 800177e:	2301      	movne	r3, #1
 8001780:	2300      	moveq	r3, #0
 8001782:	b2db      	uxtb	r3, r3
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <_ZL12MX_TIM2_Initv+0xb4>
  {
    Error_Handler();
 8001788:	f000 fc2e 	bl	8001fe8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800178c:	2300      	movs	r3, #0
 800178e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001790:	2300      	movs	r3, #0
 8001792:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001794:	f107 031c 	add.w	r3, r7, #28
 8001798:	4619      	mov	r1, r3
 800179a:	4816      	ldr	r0, [pc, #88]	; (80017f4 <_ZL12MX_TIM2_Initv+0x11c>)
 800179c:	f00a fbbe 	bl	800bf1c <HAL_TIMEx_MasterConfigSynchronization>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	bf14      	ite	ne
 80017a6:	2301      	movne	r3, #1
 80017a8:	2300      	moveq	r3, #0
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <_ZL12MX_TIM2_Initv+0xdc>
  {
    Error_Handler();
 80017b0:	f000 fc1a 	bl	8001fe8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017b4:	2360      	movs	r3, #96	; 0x60
 80017b6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80017b8:	2300      	movs	r3, #0
 80017ba:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017bc:	2300      	movs	r3, #0
 80017be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017c0:	2300      	movs	r3, #0
 80017c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017c4:	463b      	mov	r3, r7
 80017c6:	2200      	movs	r2, #0
 80017c8:	4619      	mov	r1, r3
 80017ca:	480a      	ldr	r0, [pc, #40]	; (80017f4 <_ZL12MX_TIM2_Initv+0x11c>)
 80017cc:	f009 fd3e 	bl	800b24c <HAL_TIM_PWM_ConfigChannel>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	bf14      	ite	ne
 80017d6:	2301      	movne	r3, #1
 80017d8:	2300      	moveq	r3, #0
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <_ZL12MX_TIM2_Initv+0x10c>
  {
    Error_Handler();
 80017e0:	f000 fc02 	bl	8001fe8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80017e4:	4803      	ldr	r0, [pc, #12]	; (80017f4 <_ZL12MX_TIM2_Initv+0x11c>)
 80017e6:	f000 fd85 	bl	80022f4 <HAL_TIM_MspPostInit>

}
 80017ea:	bf00      	nop
 80017ec:	3738      	adds	r7, #56	; 0x38
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	2400030c 	.word	0x2400030c

080017f8 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08e      	sub	sp, #56	; 0x38
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	605a      	str	r2, [r3, #4]
 8001808:	609a      	str	r2, [r3, #8]
 800180a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800180c:	f107 031c 	add.w	r3, r7, #28
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001818:	463b      	mov	r3, r7
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	605a      	str	r2, [r3, #4]
 8001820:	609a      	str	r2, [r3, #8]
 8001822:	60da      	str	r2, [r3, #12]
 8001824:	611a      	str	r2, [r3, #16]
 8001826:	615a      	str	r2, [r3, #20]
 8001828:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800182a:	4b39      	ldr	r3, [pc, #228]	; (8001910 <_ZL12MX_TIM3_Initv+0x118>)
 800182c:	4a39      	ldr	r2, [pc, #228]	; (8001914 <_ZL12MX_TIM3_Initv+0x11c>)
 800182e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 75;
 8001830:	4b37      	ldr	r3, [pc, #220]	; (8001910 <_ZL12MX_TIM3_Initv+0x118>)
 8001832:	224b      	movs	r2, #75	; 0x4b
 8001834:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001836:	4b36      	ldr	r3, [pc, #216]	; (8001910 <_ZL12MX_TIM3_Initv+0x118>)
 8001838:	2200      	movs	r2, #0
 800183a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1950;
 800183c:	4b34      	ldr	r3, [pc, #208]	; (8001910 <_ZL12MX_TIM3_Initv+0x118>)
 800183e:	f240 729e 	movw	r2, #1950	; 0x79e
 8001842:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001844:	4b32      	ldr	r3, [pc, #200]	; (8001910 <_ZL12MX_TIM3_Initv+0x118>)
 8001846:	2200      	movs	r2, #0
 8001848:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800184a:	4b31      	ldr	r3, [pc, #196]	; (8001910 <_ZL12MX_TIM3_Initv+0x118>)
 800184c:	2280      	movs	r2, #128	; 0x80
 800184e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001850:	482f      	ldr	r0, [pc, #188]	; (8001910 <_ZL12MX_TIM3_Initv+0x118>)
 8001852:	f009 f847 	bl	800a8e4 <HAL_TIM_Base_Init>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	bf14      	ite	ne
 800185c:	2301      	movne	r3, #1
 800185e:	2300      	moveq	r3, #0
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <_ZL12MX_TIM3_Initv+0x72>
  {
    Error_Handler();
 8001866:	f000 fbbf 	bl	8001fe8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800186a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800186e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001870:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001874:	4619      	mov	r1, r3
 8001876:	4826      	ldr	r0, [pc, #152]	; (8001910 <_ZL12MX_TIM3_Initv+0x118>)
 8001878:	f009 fdfc 	bl	800b474 <HAL_TIM_ConfigClockSource>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	bf14      	ite	ne
 8001882:	2301      	movne	r3, #1
 8001884:	2300      	moveq	r3, #0
 8001886:	b2db      	uxtb	r3, r3
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <_ZL12MX_TIM3_Initv+0x98>
  {
    Error_Handler();
 800188c:	f000 fbac 	bl	8001fe8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001890:	481f      	ldr	r0, [pc, #124]	; (8001910 <_ZL12MX_TIM3_Initv+0x118>)
 8001892:	f009 f8f7 	bl	800aa84 <HAL_TIM_PWM_Init>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	bf14      	ite	ne
 800189c:	2301      	movne	r3, #1
 800189e:	2300      	moveq	r3, #0
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <_ZL12MX_TIM3_Initv+0xb2>
  {
    Error_Handler();
 80018a6:	f000 fb9f 	bl	8001fe8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018aa:	2300      	movs	r3, #0
 80018ac:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ae:	2300      	movs	r3, #0
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018b2:	f107 031c 	add.w	r3, r7, #28
 80018b6:	4619      	mov	r1, r3
 80018b8:	4815      	ldr	r0, [pc, #84]	; (8001910 <_ZL12MX_TIM3_Initv+0x118>)
 80018ba:	f00a fb2f 	bl	800bf1c <HAL_TIMEx_MasterConfigSynchronization>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	bf14      	ite	ne
 80018c4:	2301      	movne	r3, #1
 80018c6:	2300      	moveq	r3, #0
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <_ZL12MX_TIM3_Initv+0xda>
  {
    Error_Handler();
 80018ce:	f000 fb8b 	bl	8001fe8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018d2:	2360      	movs	r3, #96	; 0x60
 80018d4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018da:	2300      	movs	r3, #0
 80018dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018de:	2300      	movs	r3, #0
 80018e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018e2:	463b      	mov	r3, r7
 80018e4:	2200      	movs	r2, #0
 80018e6:	4619      	mov	r1, r3
 80018e8:	4809      	ldr	r0, [pc, #36]	; (8001910 <_ZL12MX_TIM3_Initv+0x118>)
 80018ea:	f009 fcaf 	bl	800b24c <HAL_TIM_PWM_ConfigChannel>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	bf14      	ite	ne
 80018f4:	2301      	movne	r3, #1
 80018f6:	2300      	moveq	r3, #0
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <_ZL12MX_TIM3_Initv+0x10a>
  {
    Error_Handler();
 80018fe:	f000 fb73 	bl	8001fe8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001902:	4803      	ldr	r0, [pc, #12]	; (8001910 <_ZL12MX_TIM3_Initv+0x118>)
 8001904:	f000 fcf6 	bl	80022f4 <HAL_TIM_MspPostInit>

}
 8001908:	bf00      	nop
 800190a:	3738      	adds	r7, #56	; 0x38
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	24000358 	.word	0x24000358
 8001914:	40000400 	.word	0x40000400

08001918 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08c      	sub	sp, #48	; 0x30
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800191e:	f107 030c 	add.w	r3, r7, #12
 8001922:	2224      	movs	r2, #36	; 0x24
 8001924:	2100      	movs	r1, #0
 8001926:	4618      	mov	r0, r3
 8001928:	f010 fa4f 	bl	8011dca <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800192c:	463b      	mov	r3, r7
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	605a      	str	r2, [r3, #4]
 8001934:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001936:	4b26      	ldr	r3, [pc, #152]	; (80019d0 <_ZL12MX_TIM4_Initv+0xb8>)
 8001938:	4a26      	ldr	r2, [pc, #152]	; (80019d4 <_ZL12MX_TIM4_Initv+0xbc>)
 800193a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800193c:	4b24      	ldr	r3, [pc, #144]	; (80019d0 <_ZL12MX_TIM4_Initv+0xb8>)
 800193e:	2200      	movs	r2, #0
 8001940:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001942:	4b23      	ldr	r3, [pc, #140]	; (80019d0 <_ZL12MX_TIM4_Initv+0xb8>)
 8001944:	2200      	movs	r2, #0
 8001946:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 538;
 8001948:	4b21      	ldr	r3, [pc, #132]	; (80019d0 <_ZL12MX_TIM4_Initv+0xb8>)
 800194a:	f240 221a 	movw	r2, #538	; 0x21a
 800194e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001950:	4b1f      	ldr	r3, [pc, #124]	; (80019d0 <_ZL12MX_TIM4_Initv+0xb8>)
 8001952:	2200      	movs	r2, #0
 8001954:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001956:	4b1e      	ldr	r3, [pc, #120]	; (80019d0 <_ZL12MX_TIM4_Initv+0xb8>)
 8001958:	2280      	movs	r2, #128	; 0x80
 800195a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800195c:	2303      	movs	r3, #3
 800195e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001960:	2302      	movs	r3, #2
 8001962:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001964:	2301      	movs	r3, #1
 8001966:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001968:	2300      	movs	r3, #0
 800196a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 800196c:	2301      	movs	r3, #1
 800196e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001970:	2302      	movs	r3, #2
 8001972:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001974:	2301      	movs	r3, #1
 8001976:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001978:	2300      	movs	r3, #0
 800197a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 1;
 800197c:	2301      	movs	r3, #1
 800197e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001980:	f107 030c 	add.w	r3, r7, #12
 8001984:	4619      	mov	r1, r3
 8001986:	4812      	ldr	r0, [pc, #72]	; (80019d0 <_ZL12MX_TIM4_Initv+0xb8>)
 8001988:	f009 f9ec 	bl	800ad64 <HAL_TIM_Encoder_Init>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	bf14      	ite	ne
 8001992:	2301      	movne	r3, #1
 8001994:	2300      	moveq	r3, #0
 8001996:	b2db      	uxtb	r3, r3
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <_ZL12MX_TIM4_Initv+0x88>
  {
    Error_Handler();
 800199c:	f000 fb24 	bl	8001fe8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019a0:	2300      	movs	r3, #0
 80019a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019a4:	2300      	movs	r3, #0
 80019a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80019a8:	463b      	mov	r3, r7
 80019aa:	4619      	mov	r1, r3
 80019ac:	4808      	ldr	r0, [pc, #32]	; (80019d0 <_ZL12MX_TIM4_Initv+0xb8>)
 80019ae:	f00a fab5 	bl	800bf1c <HAL_TIMEx_MasterConfigSynchronization>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	bf14      	ite	ne
 80019b8:	2301      	movne	r3, #1
 80019ba:	2300      	moveq	r3, #0
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <_ZL12MX_TIM4_Initv+0xae>
  {
    Error_Handler();
 80019c2:	f000 fb11 	bl	8001fe8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80019c6:	bf00      	nop
 80019c8:	3730      	adds	r7, #48	; 0x30
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	240003a4 	.word	0x240003a4
 80019d4:	40000800 	.word	0x40000800

080019d8 <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08c      	sub	sp, #48	; 0x30
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019de:	f107 030c 	add.w	r3, r7, #12
 80019e2:	2224      	movs	r2, #36	; 0x24
 80019e4:	2100      	movs	r1, #0
 80019e6:	4618      	mov	r0, r3
 80019e8:	f010 f9ef 	bl	8011dca <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ec:	463b      	mov	r3, r7
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	605a      	str	r2, [r3, #4]
 80019f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80019f6:	4b28      	ldr	r3, [pc, #160]	; (8001a98 <_ZL12MX_TIM8_Initv+0xc0>)
 80019f8:	4a28      	ldr	r2, [pc, #160]	; (8001a9c <_ZL12MX_TIM8_Initv+0xc4>)
 80019fa:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80019fc:	4b26      	ldr	r3, [pc, #152]	; (8001a98 <_ZL12MX_TIM8_Initv+0xc0>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a02:	4b25      	ldr	r3, [pc, #148]	; (8001a98 <_ZL12MX_TIM8_Initv+0xc0>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 538;
 8001a08:	4b23      	ldr	r3, [pc, #140]	; (8001a98 <_ZL12MX_TIM8_Initv+0xc0>)
 8001a0a:	f240 221a 	movw	r2, #538	; 0x21a
 8001a0e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a10:	4b21      	ldr	r3, [pc, #132]	; (8001a98 <_ZL12MX_TIM8_Initv+0xc0>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001a16:	4b20      	ldr	r3, [pc, #128]	; (8001a98 <_ZL12MX_TIM8_Initv+0xc0>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a1c:	4b1e      	ldr	r3, [pc, #120]	; (8001a98 <_ZL12MX_TIM8_Initv+0xc0>)
 8001a1e:	2280      	movs	r2, #128	; 0x80
 8001a20:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a22:	2303      	movs	r3, #3
 8001a24:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a26:	2300      	movs	r3, #0
 8001a28:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 8001a32:	2301      	movs	r3, #1
 8001a34:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a36:	2300      	movs	r3, #0
 8001a38:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 1;
 8001a42:	2301      	movs	r3, #1
 8001a44:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001a46:	f107 030c 	add.w	r3, r7, #12
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4812      	ldr	r0, [pc, #72]	; (8001a98 <_ZL12MX_TIM8_Initv+0xc0>)
 8001a4e:	f009 f989 	bl	800ad64 <HAL_TIM_Encoder_Init>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	bf14      	ite	ne
 8001a58:	2301      	movne	r3, #1
 8001a5a:	2300      	moveq	r3, #0
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <_ZL12MX_TIM8_Initv+0x8e>
  {
    Error_Handler();
 8001a62:	f000 fac1 	bl	8001fe8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a66:	2300      	movs	r3, #0
 8001a68:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001a72:	463b      	mov	r3, r7
 8001a74:	4619      	mov	r1, r3
 8001a76:	4808      	ldr	r0, [pc, #32]	; (8001a98 <_ZL12MX_TIM8_Initv+0xc0>)
 8001a78:	f00a fa50 	bl	800bf1c <HAL_TIMEx_MasterConfigSynchronization>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	bf14      	ite	ne
 8001a82:	2301      	movne	r3, #1
 8001a84:	2300      	moveq	r3, #0
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <_ZL12MX_TIM8_Initv+0xb8>
  {
    Error_Handler();
 8001a8c:	f000 faac 	bl	8001fe8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001a90:	bf00      	nop
 8001a92:	3730      	adds	r7, #48	; 0x30
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	240003f0 	.word	0x240003f0
 8001a9c:	40010400 	.word	0x40010400

08001aa0 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001aa4:	4b2c      	ldr	r3, [pc, #176]	; (8001b58 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001aa6:	4a2d      	ldr	r2, [pc, #180]	; (8001b5c <_ZL19MX_USART3_UART_Initv+0xbc>)
 8001aa8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001aaa:	4b2b      	ldr	r3, [pc, #172]	; (8001b58 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001aac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ab0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ab2:	4b29      	ldr	r3, [pc, #164]	; (8001b58 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ab8:	4b27      	ldr	r3, [pc, #156]	; (8001b58 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001abe:	4b26      	ldr	r3, [pc, #152]	; (8001b58 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ac4:	4b24      	ldr	r3, [pc, #144]	; (8001b58 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001ac6:	220c      	movs	r2, #12
 8001ac8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aca:	4b23      	ldr	r3, [pc, #140]	; (8001b58 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ad0:	4b21      	ldr	r3, [pc, #132]	; (8001b58 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ad6:	4b20      	ldr	r3, [pc, #128]	; (8001b58 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001adc:	4b1e      	ldr	r3, [pc, #120]	; (8001b58 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ae2:	4b1d      	ldr	r3, [pc, #116]	; (8001b58 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ae8:	481b      	ldr	r0, [pc, #108]	; (8001b58 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001aea:	f00a fac3 	bl	800c074 <HAL_UART_Init>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	bf14      	ite	ne
 8001af4:	2301      	movne	r3, #1
 8001af6:	2300      	moveq	r3, #0
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <_ZL19MX_USART3_UART_Initv+0x62>
  {
    Error_Handler();
 8001afe:	f000 fa73 	bl	8001fe8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b02:	2100      	movs	r1, #0
 8001b04:	4814      	ldr	r0, [pc, #80]	; (8001b58 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001b06:	f00b ff87 	bl	800da18 <HAL_UARTEx_SetTxFifoThreshold>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	bf14      	ite	ne
 8001b10:	2301      	movne	r3, #1
 8001b12:	2300      	moveq	r3, #0
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <_ZL19MX_USART3_UART_Initv+0x7e>
  {
    Error_Handler();
 8001b1a:	f000 fa65 	bl	8001fe8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b1e:	2100      	movs	r1, #0
 8001b20:	480d      	ldr	r0, [pc, #52]	; (8001b58 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001b22:	f00b ffb7 	bl	800da94 <HAL_UARTEx_SetRxFifoThreshold>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	bf14      	ite	ne
 8001b2c:	2301      	movne	r3, #1
 8001b2e:	2300      	moveq	r3, #0
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <_ZL19MX_USART3_UART_Initv+0x9a>
  {
    Error_Handler();
 8001b36:	f000 fa57 	bl	8001fe8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001b3a:	4807      	ldr	r0, [pc, #28]	; (8001b58 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001b3c:	f00b ff33 	bl	800d9a6 <HAL_UARTEx_DisableFifoMode>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	bf14      	ite	ne
 8001b46:	2301      	movne	r3, #1
 8001b48:	2300      	moveq	r3, #0
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <_ZL19MX_USART3_UART_Initv+0xb4>
  {
    Error_Handler();
 8001b50:	f000 fa4a 	bl	8001fe8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b54:	bf00      	nop
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	2400043c 	.word	0x2400043c
 8001b5c:	40004800 	.word	0x40004800

08001b60 <_ZL22MX_USB_OTG_FS_PCD_Initv>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001b64:	4b17      	ldr	r3, [pc, #92]	; (8001bc4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001b66:	4a18      	ldr	r2, [pc, #96]	; (8001bc8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x68>)
 8001b68:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001b6a:	4b16      	ldr	r3, [pc, #88]	; (8001bc4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001b6c:	2209      	movs	r2, #9
 8001b6e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001b70:	4b14      	ldr	r3, [pc, #80]	; (8001bc4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001b72:	2202      	movs	r2, #2
 8001b74:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001b76:	4b13      	ldr	r3, [pc, #76]	; (8001bc4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001b7c:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001b7e:	2202      	movs	r2, #2
 8001b80:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001b82:	4b10      	ldr	r3, [pc, #64]	; (8001bc4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001b88:	4b0e      	ldr	r3, [pc, #56]	; (8001bc4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001b8e:	4b0d      	ldr	r3, [pc, #52]	; (8001bc4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001b94:	4b0b      	ldr	r3, [pc, #44]	; (8001bc4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001b96:	2201      	movs	r2, #1
 8001b98:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001b9a:	4b0a      	ldr	r3, [pc, #40]	; (8001bc4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001ba0:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001ba6:	4807      	ldr	r0, [pc, #28]	; (8001bc4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001ba8:	f004 ffc4 	bl	8006b34 <HAL_PCD_Init>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	bf14      	ite	ne
 8001bb2:	2301      	movne	r3, #1
 8001bb4:	2300      	moveq	r3, #0
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>
  {
    Error_Handler();
 8001bbc:	f000 fa14 	bl	8001fe8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001bc0:	bf00      	nop
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	240005c0 	.word	0x240005c0
 8001bc8:	40080000 	.word	0x40080000

08001bcc <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bd2:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <_ZL11MX_DMA_Initv+0x4c>)
 8001bd4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001bd8:	4a0f      	ldr	r2, [pc, #60]	; (8001c18 <_ZL11MX_DMA_Initv+0x4c>)
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001be2:	4b0d      	ldr	r3, [pc, #52]	; (8001c18 <_ZL11MX_DMA_Initv+0x4c>)
 8001be4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	607b      	str	r3, [r7, #4]
 8001bee:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	2105      	movs	r1, #5
 8001bf4:	200b      	movs	r0, #11
 8001bf6:	f002 fb57 	bl	80042a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001bfa:	200b      	movs	r0, #11
 8001bfc:	f002 fb6e 	bl	80042dc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001c00:	2200      	movs	r2, #0
 8001c02:	2105      	movs	r1, #5
 8001c04:	200c      	movs	r0, #12
 8001c06:	f002 fb4f 	bl	80042a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001c0a:	200c      	movs	r0, #12
 8001c0c:	f002 fb66 	bl	80042dc <HAL_NVIC_EnableIRQ>

}
 8001c10:	bf00      	nop
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	58024400 	.word	0x58024400

08001c1c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b08c      	sub	sp, #48	; 0x30
 8001c20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c22:	f107 031c 	add.w	r3, r7, #28
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	605a      	str	r2, [r3, #4]
 8001c2c:	609a      	str	r2, [r3, #8]
 8001c2e:	60da      	str	r2, [r3, #12]
 8001c30:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c32:	4b43      	ldr	r3, [pc, #268]	; (8001d40 <_ZL12MX_GPIO_Initv+0x124>)
 8001c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c38:	4a41      	ldr	r2, [pc, #260]	; (8001d40 <_ZL12MX_GPIO_Initv+0x124>)
 8001c3a:	f043 0304 	orr.w	r3, r3, #4
 8001c3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c42:	4b3f      	ldr	r3, [pc, #252]	; (8001d40 <_ZL12MX_GPIO_Initv+0x124>)
 8001c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	61bb      	str	r3, [r7, #24]
 8001c4e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c50:	4b3b      	ldr	r3, [pc, #236]	; (8001d40 <_ZL12MX_GPIO_Initv+0x124>)
 8001c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c56:	4a3a      	ldr	r2, [pc, #232]	; (8001d40 <_ZL12MX_GPIO_Initv+0x124>)
 8001c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c60:	4b37      	ldr	r3, [pc, #220]	; (8001d40 <_ZL12MX_GPIO_Initv+0x124>)
 8001c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c6a:	617b      	str	r3, [r7, #20]
 8001c6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6e:	4b34      	ldr	r3, [pc, #208]	; (8001d40 <_ZL12MX_GPIO_Initv+0x124>)
 8001c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c74:	4a32      	ldr	r2, [pc, #200]	; (8001d40 <_ZL12MX_GPIO_Initv+0x124>)
 8001c76:	f043 0301 	orr.w	r3, r3, #1
 8001c7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c7e:	4b30      	ldr	r3, [pc, #192]	; (8001d40 <_ZL12MX_GPIO_Initv+0x124>)
 8001c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	613b      	str	r3, [r7, #16]
 8001c8a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c8c:	4b2c      	ldr	r3, [pc, #176]	; (8001d40 <_ZL12MX_GPIO_Initv+0x124>)
 8001c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c92:	4a2b      	ldr	r2, [pc, #172]	; (8001d40 <_ZL12MX_GPIO_Initv+0x124>)
 8001c94:	f043 0302 	orr.w	r3, r3, #2
 8001c98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c9c:	4b28      	ldr	r3, [pc, #160]	; (8001d40 <_ZL12MX_GPIO_Initv+0x124>)
 8001c9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001caa:	4b25      	ldr	r3, [pc, #148]	; (8001d40 <_ZL12MX_GPIO_Initv+0x124>)
 8001cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cb0:	4a23      	ldr	r2, [pc, #140]	; (8001d40 <_ZL12MX_GPIO_Initv+0x124>)
 8001cb2:	f043 0308 	orr.w	r3, r3, #8
 8001cb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cba:	4b21      	ldr	r3, [pc, #132]	; (8001d40 <_ZL12MX_GPIO_Initv+0x124>)
 8001cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cc0:	f003 0308 	and.w	r3, r3, #8
 8001cc4:	60bb      	str	r3, [r7, #8]
 8001cc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cc8:	4b1d      	ldr	r3, [pc, #116]	; (8001d40 <_ZL12MX_GPIO_Initv+0x124>)
 8001cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cce:	4a1c      	ldr	r2, [pc, #112]	; (8001d40 <_ZL12MX_GPIO_Initv+0x124>)
 8001cd0:	f043 0310 	orr.w	r3, r3, #16
 8001cd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cd8:	4b19      	ldr	r3, [pc, #100]	; (8001d40 <_ZL12MX_GPIO_Initv+0x124>)
 8001cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cde:	f003 0310 	and.w	r3, r3, #16
 8001ce2:	607b      	str	r3, [r7, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f244 0101 	movw	r1, #16385	; 0x4001
 8001cec:	4815      	ldr	r0, [pc, #84]	; (8001d44 <_ZL12MX_GPIO_Initv+0x128>)
 8001cee:	f004 fed9 	bl	8006aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	2102      	movs	r1, #2
 8001cf6:	4814      	ldr	r0, [pc, #80]	; (8001d48 <_ZL12MX_GPIO_Initv+0x12c>)
 8001cf8:	f004 fed4 	bl	8006aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001cfc:	f244 0301 	movw	r3, #16385	; 0x4001
 8001d00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d02:	2301      	movs	r3, #1
 8001d04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d06:	2301      	movs	r3, #1
 8001d08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d0e:	f107 031c 	add.w	r3, r7, #28
 8001d12:	4619      	mov	r1, r3
 8001d14:	480b      	ldr	r0, [pc, #44]	; (8001d44 <_ZL12MX_GPIO_Initv+0x128>)
 8001d16:	f004 fd15 	bl	8006744 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d22:	2301      	movs	r3, #1
 8001d24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d26:	2302      	movs	r3, #2
 8001d28:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001d2a:	f107 031c 	add.w	r3, r7, #28
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4805      	ldr	r0, [pc, #20]	; (8001d48 <_ZL12MX_GPIO_Initv+0x12c>)
 8001d32:	f004 fd07 	bl	8006744 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d36:	bf00      	nop
 8001d38:	3730      	adds	r7, #48	; 0x30
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	58024400 	.word	0x58024400
 8001d44:	58020400 	.word	0x58020400
 8001d48:	58021000 	.word	0x58021000

08001d4c <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001d54:	2001      	movs	r0, #1
 8001d56:	f00c fb53 	bl	800e400 <osDelay>
 8001d5a:	e7fb      	b.n	8001d54 <_Z16StartDefaultTaskPv+0x8>

08001d5c <_Z13StartJoystickPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartJoystick */
void StartJoystick(void *argument)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af04      	add	r7, sp, #16
 8001d62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartJoystick */
  /* Infinite loop */
  for(;;)
  {
    HAL_ADC_Start(&hadc1);
 8001d64:	4860      	ldr	r0, [pc, #384]	; (8001ee8 <_Z13StartJoystickPv+0x18c>)
 8001d66:	f001 fa31 	bl	80031cc <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001d6a:	f04f 31ff 	mov.w	r1, #4294967295
 8001d6e:	485e      	ldr	r0, [pc, #376]	; (8001ee8 <_Z13StartJoystickPv+0x18c>)
 8001d70:	f001 faf6 	bl	8003360 <HAL_ADC_PollForConversion>
    x_adc = HAL_ADC_GetValue(&hadc1);
 8001d74:	485c      	ldr	r0, [pc, #368]	; (8001ee8 <_Z13StartJoystickPv+0x18c>)
 8001d76:	f001 fbe7 	bl	8003548 <HAL_ADC_GetValue>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	4b5b      	ldr	r3, [pc, #364]	; (8001eec <_Z13StartJoystickPv+0x190>)
 8001d80:	801a      	strh	r2, [r3, #0]
    osDelay(10U);
 8001d82:	200a      	movs	r0, #10
 8001d84:	f00c fb3c 	bl	800e400 <osDelay>

    HAL_ADC_Start(&hadc2);
 8001d88:	4859      	ldr	r0, [pc, #356]	; (8001ef0 <_Z13StartJoystickPv+0x194>)
 8001d8a:	f001 fa1f 	bl	80031cc <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8001d8e:	f04f 31ff 	mov.w	r1, #4294967295
 8001d92:	4857      	ldr	r0, [pc, #348]	; (8001ef0 <_Z13StartJoystickPv+0x194>)
 8001d94:	f001 fae4 	bl	8003360 <HAL_ADC_PollForConversion>
    y_adc = HAL_ADC_GetValue(&hadc2);
 8001d98:	4855      	ldr	r0, [pc, #340]	; (8001ef0 <_Z13StartJoystickPv+0x194>)
 8001d9a:	f001 fbd5 	bl	8003548 <HAL_ADC_GetValue>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	b29a      	uxth	r2, r3
 8001da2:	4b54      	ldr	r3, [pc, #336]	; (8001ef4 <_Z13StartJoystickPv+0x198>)
 8001da4:	801a      	strh	r2, [r3, #0]
    osDelay(10U);
 8001da6:	200a      	movs	r0, #10
 8001da8:	f00c fb2a 	bl	800e400 <osDelay>

    x_axis = x_adc / 1000;
 8001dac:	4b4f      	ldr	r3, [pc, #316]	; (8001eec <_Z13StartJoystickPv+0x190>)
 8001dae:	881b      	ldrh	r3, [r3, #0]
 8001db0:	4a51      	ldr	r2, [pc, #324]	; (8001ef8 <_Z13StartJoystickPv+0x19c>)
 8001db2:	fba2 2303 	umull	r2, r3, r2, r3
 8001db6:	099b      	lsrs	r3, r3, #6
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	ee07 3a90 	vmov	s15, r3
 8001dbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dc2:	4b4e      	ldr	r3, [pc, #312]	; (8001efc <_Z13StartJoystickPv+0x1a0>)
 8001dc4:	edc3 7a00 	vstr	s15, [r3]
    y_axis = y_adc / 1000;
 8001dc8:	4b4a      	ldr	r3, [pc, #296]	; (8001ef4 <_Z13StartJoystickPv+0x198>)
 8001dca:	881b      	ldrh	r3, [r3, #0]
 8001dcc:	4a4a      	ldr	r2, [pc, #296]	; (8001ef8 <_Z13StartJoystickPv+0x19c>)
 8001dce:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd2:	099b      	lsrs	r3, r3, #6
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	ee07 3a90 	vmov	s15, r3
 8001dda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dde:	4b48      	ldr	r3, [pc, #288]	; (8001f00 <_Z13StartJoystickPv+0x1a4>)
 8001de0:	edc3 7a00 	vstr	s15, [r3]
    in_min = 1;
 8001de4:	4b47      	ldr	r3, [pc, #284]	; (8001f04 <_Z13StartJoystickPv+0x1a8>)
 8001de6:	2201      	movs	r2, #1
 8001de8:	601a      	str	r2, [r3, #0]
    in_max = 65;
 8001dea:	4b47      	ldr	r3, [pc, #284]	; (8001f08 <_Z13StartJoystickPv+0x1ac>)
 8001dec:	2241      	movs	r2, #65	; 0x41
 8001dee:	601a      	str	r2, [r3, #0]
    out_min = -1;
 8001df0:	4b46      	ldr	r3, [pc, #280]	; (8001f0c <_Z13StartJoystickPv+0x1b0>)
 8001df2:	f04f 32ff 	mov.w	r2, #4294967295
 8001df6:	601a      	str	r2, [r3, #0]
    out_max = 1;
 8001df8:	4b45      	ldr	r3, [pc, #276]	; (8001f10 <_Z13StartJoystickPv+0x1b4>)
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	601a      	str	r2, [r3, #0]

    x_map = (x_axis - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001dfe:	4b3f      	ldr	r3, [pc, #252]	; (8001efc <_Z13StartJoystickPv+0x1a0>)
 8001e00:	ed93 7a00 	vldr	s14, [r3]
 8001e04:	4b3f      	ldr	r3, [pc, #252]	; (8001f04 <_Z13StartJoystickPv+0x1a8>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	ee07 3a90 	vmov	s15, r3
 8001e0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e10:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e14:	4b3e      	ldr	r3, [pc, #248]	; (8001f10 <_Z13StartJoystickPv+0x1b4>)
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	4b3c      	ldr	r3, [pc, #240]	; (8001f0c <_Z13StartJoystickPv+0x1b0>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	ee07 3a90 	vmov	s15, r3
 8001e22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e26:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001e2a:	4b37      	ldr	r3, [pc, #220]	; (8001f08 <_Z13StartJoystickPv+0x1ac>)
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	4b35      	ldr	r3, [pc, #212]	; (8001f04 <_Z13StartJoystickPv+0x1a8>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	ee07 3a90 	vmov	s15, r3
 8001e38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e40:	4b32      	ldr	r3, [pc, #200]	; (8001f0c <_Z13StartJoystickPv+0x1b0>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	ee07 3a90 	vmov	s15, r3
 8001e48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e50:	4b30      	ldr	r3, [pc, #192]	; (8001f14 <_Z13StartJoystickPv+0x1b8>)
 8001e52:	edc3 7a00 	vstr	s15, [r3]
    y_map = (y_axis - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001e56:	4b2a      	ldr	r3, [pc, #168]	; (8001f00 <_Z13StartJoystickPv+0x1a4>)
 8001e58:	ed93 7a00 	vldr	s14, [r3]
 8001e5c:	4b29      	ldr	r3, [pc, #164]	; (8001f04 <_Z13StartJoystickPv+0x1a8>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	ee07 3a90 	vmov	s15, r3
 8001e64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e68:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e6c:	4b28      	ldr	r3, [pc, #160]	; (8001f10 <_Z13StartJoystickPv+0x1b4>)
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	4b26      	ldr	r3, [pc, #152]	; (8001f0c <_Z13StartJoystickPv+0x1b0>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	ee07 3a90 	vmov	s15, r3
 8001e7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e7e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001e82:	4b21      	ldr	r3, [pc, #132]	; (8001f08 <_Z13StartJoystickPv+0x1ac>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	4b1f      	ldr	r3, [pc, #124]	; (8001f04 <_Z13StartJoystickPv+0x1a8>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	ee07 3a90 	vmov	s15, r3
 8001e90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e98:	4b1c      	ldr	r3, [pc, #112]	; (8001f0c <_Z13StartJoystickPv+0x1b0>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	ee07 3a90 	vmov	s15, r3
 8001ea0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ea4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ea8:	4b1b      	ldr	r3, [pc, #108]	; (8001f18 <_Z13StartJoystickPv+0x1bc>)
 8001eaa:	edc3 7a00 	vstr	s15, [r3]

    snprintf(msg, 50, "CH_1: %.2f, CH_2: %.2f \r\n", x_map, y_map);
 8001eae:	4b19      	ldr	r3, [pc, #100]	; (8001f14 <_Z13StartJoystickPv+0x1b8>)
 8001eb0:	edd3 7a00 	vldr	s15, [r3]
 8001eb4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001eb8:	4b17      	ldr	r3, [pc, #92]	; (8001f18 <_Z13StartJoystickPv+0x1bc>)
 8001eba:	edd3 6a00 	vldr	s13, [r3]
 8001ebe:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001ec2:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001ec6:	ed8d 7b00 	vstr	d7, [sp]
 8001eca:	4a14      	ldr	r2, [pc, #80]	; (8001f1c <_Z13StartJoystickPv+0x1c0>)
 8001ecc:	2132      	movs	r1, #50	; 0x32
 8001ece:	4814      	ldr	r0, [pc, #80]	; (8001f20 <_Z13StartJoystickPv+0x1c4>)
 8001ed0:	f00f fee4 	bl	8011c9c <sniprintf>
    HAL_UART_Transmit(&huart3,(uint8_t*) msg,sizeof(msg),10);// Sending in normal mode
 8001ed4:	230a      	movs	r3, #10
 8001ed6:	2232      	movs	r2, #50	; 0x32
 8001ed8:	4911      	ldr	r1, [pc, #68]	; (8001f20 <_Z13StartJoystickPv+0x1c4>)
 8001eda:	4812      	ldr	r0, [pc, #72]	; (8001f24 <_Z13StartJoystickPv+0x1c8>)
 8001edc:	f00a f91a 	bl	800c114 <HAL_UART_Transmit>
    osDelay(250U);
 8001ee0:	20fa      	movs	r0, #250	; 0xfa
 8001ee2:	f00c fa8d 	bl	800e400 <osDelay>
    HAL_ADC_Start(&hadc1);
 8001ee6:	e73d      	b.n	8001d64 <_Z13StartJoystickPv+0x8>
 8001ee8:	240001f8 	.word	0x240001f8
 8001eec:	24000ad8 	.word	0x24000ad8
 8001ef0:	2400025c 	.word	0x2400025c
 8001ef4:	24000ada 	.word	0x24000ada
 8001ef8:	10624dd3 	.word	0x10624dd3
 8001efc:	24000adc 	.word	0x24000adc
 8001f00:	24000ae0 	.word	0x24000ae0
 8001f04:	24000b18 	.word	0x24000b18
 8001f08:	24000b1c 	.word	0x24000b1c
 8001f0c:	24000b20 	.word	0x24000b20
 8001f10:	24000b24 	.word	0x24000b24
 8001f14:	24000b28 	.word	0x24000b28
 8001f18:	24000b2c 	.word	0x24000b2c
 8001f1c:	08015428 	.word	0x08015428
 8001f20:	24000ae4 	.word	0x24000ae4
 8001f24:	2400043c 	.word	0x2400043c

08001f28 <_Z12StartChassisPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartChassis */
void StartChassis(void *argument)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b09e      	sub	sp, #120	; 0x78
 8001f2c:	af02      	add	r7, sp, #8
 8001f2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartChassis */
  /* Infinite loop */
  HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL);
 8001f30:	213c      	movs	r1, #60	; 0x3c
 8001f32:	4821      	ldr	r0, [pc, #132]	; (8001fb8 <_Z12StartChassisPv+0x90>)
 8001f34:	f008 ffbc 	bl	800aeb0 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8001f38:	2100      	movs	r1, #0
 8001f3a:	4820      	ldr	r0, [pc, #128]	; (8001fbc <_Z12StartChassisPv+0x94>)
 8001f3c:	f008 fe04 	bl	800ab48 <HAL_TIM_PWM_Start>
  LL_Control::Encoder encL(&htim8, 50);
 8001f40:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f44:	2232      	movs	r2, #50	; 0x32
 8001f46:	491c      	ldr	r1, [pc, #112]	; (8001fb8 <_Z12StartChassisPv+0x90>)
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7fe fe39 	bl	8000bc0 <_ZN10LL_Control7EncoderC1EP17TIM_HandleTypeDefi>
  LL_Control::Motor_PI  motorL(&encL, &htim3, 1050, 1950);
 8001f4e:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8001f52:	f107 0008 	add.w	r0, r7, #8
 8001f56:	f240 739e 	movw	r3, #1950	; 0x79e
 8001f5a:	9300      	str	r3, [sp, #0]
 8001f5c:	f240 431a 	movw	r3, #1050	; 0x41a
 8001f60:	4a16      	ldr	r2, [pc, #88]	; (8001fbc <_Z12StartChassisPv+0x94>)
 8001f62:	f7fe fef5 	bl	8000d50 <_ZN10LL_Control8Motor_PIC1EPNS_7EncoderEP17TIM_HandleTypeDefii>
  motorL.set_Ks(10.0f,5);
 8001f66:	f107 0308 	add.w	r3, r7, #8
 8001f6a:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8001f6e:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe ffa6 	bl	8000ec4 <_ZN10LL_Control8Motor_PI6set_KsEff>
  motorL.stop();
 8001f78:	f107 0308 	add.w	r3, r7, #8
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff f8e7 	bl	8001150 <_ZN10LL_Control8Motor_PI4stopEv>

  for(;;)
  {

    motorL.set_reference(y_map*2);
 8001f82:	4b0f      	ldr	r3, [pc, #60]	; (8001fc0 <_Z12StartChassisPv+0x98>)
 8001f84:	edd3 7a00 	vldr	s15, [r3]
 8001f88:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f8c:	f107 0308 	add.w	r3, r7, #8
 8001f90:	eeb0 0a67 	vmov.f32	s0, s15
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7fe ff61 	bl	8000e5c <_ZN10LL_Control8Motor_PI13set_referenceEf>
    encL.update();
 8001f9a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe fe90 	bl	8000cc4 <_ZN10LL_Control7Encoder6updateEv>
    motorL.go_to_ref();
 8001fa4:	f107 0308 	add.w	r3, r7, #8
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff f854 	bl	8001056 <_ZN10LL_Control8Motor_PI9go_to_refEv>
    osDelay(20U);
 8001fae:	2014      	movs	r0, #20
 8001fb0:	f00c fa26 	bl	800e400 <osDelay>
    motorL.set_reference(y_map*2);
 8001fb4:	e7e5      	b.n	8001f82 <_Z12StartChassisPv+0x5a>
 8001fb6:	bf00      	nop
 8001fb8:	240003f0 	.word	0x240003f0
 8001fbc:	24000358 	.word	0x24000358
 8001fc0:	24000b2c 	.word	0x24000b2c

08001fc4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a04      	ldr	r2, [pc, #16]	; (8001fe4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d101      	bne.n	8001fda <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001fd6:	f000 fd25 	bl	8002a24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40014800 	.word	0x40014800

08001fe8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fec:	b672      	cpsid	i
}
 8001fee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ff0:	e7fe      	b.n	8001ff0 <Error_Handler+0x8>
	...

08001ff4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ffa:	4b0c      	ldr	r3, [pc, #48]	; (800202c <HAL_MspInit+0x38>)
 8001ffc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002000:	4a0a      	ldr	r2, [pc, #40]	; (800202c <HAL_MspInit+0x38>)
 8002002:	f043 0302 	orr.w	r3, r3, #2
 8002006:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800200a:	4b08      	ldr	r3, [pc, #32]	; (800202c <HAL_MspInit+0x38>)
 800200c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	607b      	str	r3, [r7, #4]
 8002016:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002018:	2200      	movs	r2, #0
 800201a:	210f      	movs	r1, #15
 800201c:	f06f 0001 	mvn.w	r0, #1
 8002020:	f002 f942 	bl	80042a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002024:	bf00      	nop
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	58024400 	.word	0x58024400

08002030 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b08c      	sub	sp, #48	; 0x30
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002038:	f107 031c 	add.w	r3, r7, #28
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	609a      	str	r2, [r3, #8]
 8002044:	60da      	str	r2, [r3, #12]
 8002046:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a39      	ldr	r2, [pc, #228]	; (8002134 <HAL_ADC_MspInit+0x104>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d133      	bne.n	80020ba <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002052:	4b39      	ldr	r3, [pc, #228]	; (8002138 <HAL_ADC_MspInit+0x108>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	3301      	adds	r3, #1
 8002058:	4a37      	ldr	r2, [pc, #220]	; (8002138 <HAL_ADC_MspInit+0x108>)
 800205a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800205c:	4b36      	ldr	r3, [pc, #216]	; (8002138 <HAL_ADC_MspInit+0x108>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d10e      	bne.n	8002082 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002064:	4b35      	ldr	r3, [pc, #212]	; (800213c <HAL_ADC_MspInit+0x10c>)
 8002066:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800206a:	4a34      	ldr	r2, [pc, #208]	; (800213c <HAL_ADC_MspInit+0x10c>)
 800206c:	f043 0320 	orr.w	r3, r3, #32
 8002070:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002074:	4b31      	ldr	r3, [pc, #196]	; (800213c <HAL_ADC_MspInit+0x10c>)
 8002076:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800207a:	f003 0320 	and.w	r3, r3, #32
 800207e:	61bb      	str	r3, [r7, #24]
 8002080:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002082:	4b2e      	ldr	r3, [pc, #184]	; (800213c <HAL_ADC_MspInit+0x10c>)
 8002084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002088:	4a2c      	ldr	r2, [pc, #176]	; (800213c <HAL_ADC_MspInit+0x10c>)
 800208a:	f043 0301 	orr.w	r3, r3, #1
 800208e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002092:	4b2a      	ldr	r3, [pc, #168]	; (800213c <HAL_ADC_MspInit+0x10c>)
 8002094:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	617b      	str	r3, [r7, #20]
 800209e:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_INP18
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80020a0:	2310      	movs	r3, #16
 80020a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020a4:	2303      	movs	r3, #3
 80020a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ac:	f107 031c 	add.w	r3, r7, #28
 80020b0:	4619      	mov	r1, r3
 80020b2:	4823      	ldr	r0, [pc, #140]	; (8002140 <HAL_ADC_MspInit+0x110>)
 80020b4:	f004 fb46 	bl	8006744 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80020b8:	e037      	b.n	800212a <HAL_ADC_MspInit+0xfa>
  else if(hadc->Instance==ADC2)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a21      	ldr	r2, [pc, #132]	; (8002144 <HAL_ADC_MspInit+0x114>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d132      	bne.n	800212a <HAL_ADC_MspInit+0xfa>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80020c4:	4b1c      	ldr	r3, [pc, #112]	; (8002138 <HAL_ADC_MspInit+0x108>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	3301      	adds	r3, #1
 80020ca:	4a1b      	ldr	r2, [pc, #108]	; (8002138 <HAL_ADC_MspInit+0x108>)
 80020cc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80020ce:	4b1a      	ldr	r3, [pc, #104]	; (8002138 <HAL_ADC_MspInit+0x108>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d10e      	bne.n	80020f4 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80020d6:	4b19      	ldr	r3, [pc, #100]	; (800213c <HAL_ADC_MspInit+0x10c>)
 80020d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80020dc:	4a17      	ldr	r2, [pc, #92]	; (800213c <HAL_ADC_MspInit+0x10c>)
 80020de:	f043 0320 	orr.w	r3, r3, #32
 80020e2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80020e6:	4b15      	ldr	r3, [pc, #84]	; (800213c <HAL_ADC_MspInit+0x10c>)
 80020e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80020ec:	f003 0320 	and.w	r3, r3, #32
 80020f0:	613b      	str	r3, [r7, #16]
 80020f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f4:	4b11      	ldr	r3, [pc, #68]	; (800213c <HAL_ADC_MspInit+0x10c>)
 80020f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020fa:	4a10      	ldr	r2, [pc, #64]	; (800213c <HAL_ADC_MspInit+0x10c>)
 80020fc:	f043 0301 	orr.w	r3, r3, #1
 8002100:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002104:	4b0d      	ldr	r3, [pc, #52]	; (800213c <HAL_ADC_MspInit+0x10c>)
 8002106:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002112:	2320      	movs	r3, #32
 8002114:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002116:	2303      	movs	r3, #3
 8002118:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211a:	2300      	movs	r3, #0
 800211c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800211e:	f107 031c 	add.w	r3, r7, #28
 8002122:	4619      	mov	r1, r3
 8002124:	4806      	ldr	r0, [pc, #24]	; (8002140 <HAL_ADC_MspInit+0x110>)
 8002126:	f004 fb0d 	bl	8006744 <HAL_GPIO_Init>
}
 800212a:	bf00      	nop
 800212c:	3730      	adds	r7, #48	; 0x30
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40022000 	.word	0x40022000
 8002138:	24000b30 	.word	0x24000b30
 800213c:	58024400 	.word	0x58024400
 8002140:	58020000 	.word	0x58020000
 8002144:	40022100 	.word	0x40022100

08002148 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a23      	ldr	r2, [pc, #140]	; (80021e4 <HAL_TIM_Base_MspInit+0x9c>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d117      	bne.n	800218a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800215a:	4b23      	ldr	r3, [pc, #140]	; (80021e8 <HAL_TIM_Base_MspInit+0xa0>)
 800215c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002160:	4a21      	ldr	r2, [pc, #132]	; (80021e8 <HAL_TIM_Base_MspInit+0xa0>)
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800216a:	4b1f      	ldr	r3, [pc, #124]	; (80021e8 <HAL_TIM_Base_MspInit+0xa0>)
 800216c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	617b      	str	r3, [r7, #20]
 8002176:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8002178:	2200      	movs	r2, #0
 800217a:	2105      	movs	r1, #5
 800217c:	2019      	movs	r0, #25
 800217e:	f002 f893 	bl	80042a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002182:	2019      	movs	r0, #25
 8002184:	f002 f8aa 	bl	80042dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002188:	e028      	b.n	80021dc <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM2)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002192:	d10f      	bne.n	80021b4 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002194:	4b14      	ldr	r3, [pc, #80]	; (80021e8 <HAL_TIM_Base_MspInit+0xa0>)
 8002196:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800219a:	4a13      	ldr	r2, [pc, #76]	; (80021e8 <HAL_TIM_Base_MspInit+0xa0>)
 800219c:	f043 0301 	orr.w	r3, r3, #1
 80021a0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80021a4:	4b10      	ldr	r3, [pc, #64]	; (80021e8 <HAL_TIM_Base_MspInit+0xa0>)
 80021a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	613b      	str	r3, [r7, #16]
 80021b0:	693b      	ldr	r3, [r7, #16]
}
 80021b2:	e013      	b.n	80021dc <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM3)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a0c      	ldr	r2, [pc, #48]	; (80021ec <HAL_TIM_Base_MspInit+0xa4>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d10e      	bne.n	80021dc <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021be:	4b0a      	ldr	r3, [pc, #40]	; (80021e8 <HAL_TIM_Base_MspInit+0xa0>)
 80021c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021c4:	4a08      	ldr	r2, [pc, #32]	; (80021e8 <HAL_TIM_Base_MspInit+0xa0>)
 80021c6:	f043 0302 	orr.w	r3, r3, #2
 80021ca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80021ce:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <HAL_TIM_Base_MspInit+0xa0>)
 80021d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	60fb      	str	r3, [r7, #12]
 80021da:	68fb      	ldr	r3, [r7, #12]
}
 80021dc:	bf00      	nop
 80021de:	3718      	adds	r7, #24
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40010000 	.word	0x40010000
 80021e8:	58024400 	.word	0x58024400
 80021ec:	40000400 	.word	0x40000400

080021f0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b08c      	sub	sp, #48	; 0x30
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f8:	f107 031c 	add.w	r3, r7, #28
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	609a      	str	r2, [r3, #8]
 8002204:	60da      	str	r2, [r3, #12]
 8002206:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a34      	ldr	r2, [pc, #208]	; (80022e0 <HAL_TIM_Encoder_MspInit+0xf0>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d12f      	bne.n	8002272 <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002212:	4b34      	ldr	r3, [pc, #208]	; (80022e4 <HAL_TIM_Encoder_MspInit+0xf4>)
 8002214:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002218:	4a32      	ldr	r2, [pc, #200]	; (80022e4 <HAL_TIM_Encoder_MspInit+0xf4>)
 800221a:	f043 0304 	orr.w	r3, r3, #4
 800221e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002222:	4b30      	ldr	r3, [pc, #192]	; (80022e4 <HAL_TIM_Encoder_MspInit+0xf4>)
 8002224:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002228:	f003 0304 	and.w	r3, r3, #4
 800222c:	61bb      	str	r3, [r7, #24]
 800222e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002230:	4b2c      	ldr	r3, [pc, #176]	; (80022e4 <HAL_TIM_Encoder_MspInit+0xf4>)
 8002232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002236:	4a2b      	ldr	r2, [pc, #172]	; (80022e4 <HAL_TIM_Encoder_MspInit+0xf4>)
 8002238:	f043 0308 	orr.w	r3, r3, #8
 800223c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002240:	4b28      	ldr	r3, [pc, #160]	; (80022e4 <HAL_TIM_Encoder_MspInit+0xf4>)
 8002242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002246:	f003 0308 	and.w	r3, r3, #8
 800224a:	617b      	str	r3, [r7, #20]
 800224c:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = EL_1_Pin|EL_2_Pin;
 800224e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002252:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002254:	2302      	movs	r3, #2
 8002256:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002258:	2301      	movs	r3, #1
 800225a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800225c:	2302      	movs	r3, #2
 800225e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002260:	2302      	movs	r3, #2
 8002262:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002264:	f107 031c 	add.w	r3, r7, #28
 8002268:	4619      	mov	r1, r3
 800226a:	481f      	ldr	r0, [pc, #124]	; (80022e8 <HAL_TIM_Encoder_MspInit+0xf8>)
 800226c:	f004 fa6a 	bl	8006744 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002270:	e032      	b.n	80022d8 <HAL_TIM_Encoder_MspInit+0xe8>
  else if(htim_encoder->Instance==TIM8)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a1d      	ldr	r2, [pc, #116]	; (80022ec <HAL_TIM_Encoder_MspInit+0xfc>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d12d      	bne.n	80022d8 <HAL_TIM_Encoder_MspInit+0xe8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800227c:	4b19      	ldr	r3, [pc, #100]	; (80022e4 <HAL_TIM_Encoder_MspInit+0xf4>)
 800227e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002282:	4a18      	ldr	r2, [pc, #96]	; (80022e4 <HAL_TIM_Encoder_MspInit+0xf4>)
 8002284:	f043 0302 	orr.w	r3, r3, #2
 8002288:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800228c:	4b15      	ldr	r3, [pc, #84]	; (80022e4 <HAL_TIM_Encoder_MspInit+0xf4>)
 800228e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	613b      	str	r3, [r7, #16]
 8002298:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800229a:	4b12      	ldr	r3, [pc, #72]	; (80022e4 <HAL_TIM_Encoder_MspInit+0xf4>)
 800229c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022a0:	4a10      	ldr	r2, [pc, #64]	; (80022e4 <HAL_TIM_Encoder_MspInit+0xf4>)
 80022a2:	f043 0304 	orr.w	r3, r3, #4
 80022a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022aa:	4b0e      	ldr	r3, [pc, #56]	; (80022e4 <HAL_TIM_Encoder_MspInit+0xf4>)
 80022ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022b0:	f003 0304 	and.w	r3, r3, #4
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ER_2_Pin|ER_1_Pin;
 80022b8:	23c0      	movs	r3, #192	; 0xc0
 80022ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022bc:	2302      	movs	r3, #2
 80022be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022c0:	2301      	movs	r3, #1
 80022c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022c4:	2302      	movs	r3, #2
 80022c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80022c8:	2303      	movs	r3, #3
 80022ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022cc:	f107 031c 	add.w	r3, r7, #28
 80022d0:	4619      	mov	r1, r3
 80022d2:	4807      	ldr	r0, [pc, #28]	; (80022f0 <HAL_TIM_Encoder_MspInit+0x100>)
 80022d4:	f004 fa36 	bl	8006744 <HAL_GPIO_Init>
}
 80022d8:	bf00      	nop
 80022da:	3730      	adds	r7, #48	; 0x30
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40000800 	.word	0x40000800
 80022e4:	58024400 	.word	0x58024400
 80022e8:	58020c00 	.word	0x58020c00
 80022ec:	40010400 	.word	0x40010400
 80022f0:	58020800 	.word	0x58020800

080022f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b08a      	sub	sp, #40	; 0x28
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022fc:	f107 0314 	add.w	r3, r7, #20
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	605a      	str	r2, [r3, #4]
 8002306:	609a      	str	r2, [r3, #8]
 8002308:	60da      	str	r2, [r3, #12]
 800230a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002314:	d11f      	bne.n	8002356 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002316:	4b24      	ldr	r3, [pc, #144]	; (80023a8 <HAL_TIM_MspPostInit+0xb4>)
 8002318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800231c:	4a22      	ldr	r2, [pc, #136]	; (80023a8 <HAL_TIM_MspPostInit+0xb4>)
 800231e:	f043 0301 	orr.w	r3, r3, #1
 8002322:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002326:	4b20      	ldr	r3, [pc, #128]	; (80023a8 <HAL_TIM_MspPostInit+0xb4>)
 8002328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	613b      	str	r3, [r7, #16]
 8002332:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PWM_L_Pin;
 8002334:	2301      	movs	r3, #1
 8002336:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002338:	2302      	movs	r3, #2
 800233a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233c:	2300      	movs	r3, #0
 800233e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002340:	2302      	movs	r3, #2
 8002342:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002344:	2301      	movs	r3, #1
 8002346:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_L_GPIO_Port, &GPIO_InitStruct);
 8002348:	f107 0314 	add.w	r3, r7, #20
 800234c:	4619      	mov	r1, r3
 800234e:	4817      	ldr	r0, [pc, #92]	; (80023ac <HAL_TIM_MspPostInit+0xb8>)
 8002350:	f004 f9f8 	bl	8006744 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002354:	e023      	b.n	800239e <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM3)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a15      	ldr	r2, [pc, #84]	; (80023b0 <HAL_TIM_MspPostInit+0xbc>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d11e      	bne.n	800239e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002360:	4b11      	ldr	r3, [pc, #68]	; (80023a8 <HAL_TIM_MspPostInit+0xb4>)
 8002362:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002366:	4a10      	ldr	r2, [pc, #64]	; (80023a8 <HAL_TIM_MspPostInit+0xb4>)
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002370:	4b0d      	ldr	r3, [pc, #52]	; (80023a8 <HAL_TIM_MspPostInit+0xb4>)
 8002372:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_R_Pin;
 800237e:	2340      	movs	r3, #64	; 0x40
 8002380:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002382:	2302      	movs	r3, #2
 8002384:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002386:	2300      	movs	r3, #0
 8002388:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800238a:	2302      	movs	r3, #2
 800238c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800238e:	2302      	movs	r3, #2
 8002390:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_R_GPIO_Port, &GPIO_InitStruct);
 8002392:	f107 0314 	add.w	r3, r7, #20
 8002396:	4619      	mov	r1, r3
 8002398:	4804      	ldr	r0, [pc, #16]	; (80023ac <HAL_TIM_MspPostInit+0xb8>)
 800239a:	f004 f9d3 	bl	8006744 <HAL_GPIO_Init>
}
 800239e:	bf00      	nop
 80023a0:	3728      	adds	r7, #40	; 0x28
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	58024400 	.word	0x58024400
 80023ac:	58020000 	.word	0x58020000
 80023b0:	40000400 	.word	0x40000400

080023b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b0ba      	sub	sp, #232	; 0xe8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023bc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	605a      	str	r2, [r3, #4]
 80023c6:	609a      	str	r2, [r3, #8]
 80023c8:	60da      	str	r2, [r3, #12]
 80023ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023cc:	f107 0310 	add.w	r3, r7, #16
 80023d0:	22c0      	movs	r2, #192	; 0xc0
 80023d2:	2100      	movs	r1, #0
 80023d4:	4618      	mov	r0, r3
 80023d6:	f00f fcf8 	bl	8011dca <memset>
  if(huart->Instance==USART3)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a59      	ldr	r2, [pc, #356]	; (8002544 <HAL_UART_MspInit+0x190>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	f040 80aa 	bne.w	800253a <HAL_UART_MspInit+0x186>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80023e6:	f04f 0202 	mov.w	r2, #2
 80023ea:	f04f 0300 	mov.w	r3, #0
 80023ee:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80023f2:	2300      	movs	r3, #0
 80023f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023f8:	f107 0310 	add.w	r3, r7, #16
 80023fc:	4618      	mov	r0, r3
 80023fe:	f005 fd73 	bl	8007ee8 <HAL_RCCEx_PeriphCLKConfig>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8002408:	f7ff fdee 	bl	8001fe8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800240c:	4b4e      	ldr	r3, [pc, #312]	; (8002548 <HAL_UART_MspInit+0x194>)
 800240e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002412:	4a4d      	ldr	r2, [pc, #308]	; (8002548 <HAL_UART_MspInit+0x194>)
 8002414:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002418:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800241c:	4b4a      	ldr	r3, [pc, #296]	; (8002548 <HAL_UART_MspInit+0x194>)
 800241e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002422:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800242a:	4b47      	ldr	r3, [pc, #284]	; (8002548 <HAL_UART_MspInit+0x194>)
 800242c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002430:	4a45      	ldr	r2, [pc, #276]	; (8002548 <HAL_UART_MspInit+0x194>)
 8002432:	f043 0308 	orr.w	r3, r3, #8
 8002436:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800243a:	4b43      	ldr	r3, [pc, #268]	; (8002548 <HAL_UART_MspInit+0x194>)
 800243c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002440:	f003 0308 	and.w	r3, r3, #8
 8002444:	60bb      	str	r3, [r7, #8]
 8002446:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002448:	f44f 7340 	mov.w	r3, #768	; 0x300
 800244c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002450:	2302      	movs	r3, #2
 8002452:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002456:	2300      	movs	r3, #0
 8002458:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245c:	2300      	movs	r3, #0
 800245e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002462:	2307      	movs	r3, #7
 8002464:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002468:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800246c:	4619      	mov	r1, r3
 800246e:	4837      	ldr	r0, [pc, #220]	; (800254c <HAL_UART_MspInit+0x198>)
 8002470:	f004 f968 	bl	8006744 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8002474:	4b36      	ldr	r3, [pc, #216]	; (8002550 <HAL_UART_MspInit+0x19c>)
 8002476:	4a37      	ldr	r2, [pc, #220]	; (8002554 <HAL_UART_MspInit+0x1a0>)
 8002478:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800247a:	4b35      	ldr	r3, [pc, #212]	; (8002550 <HAL_UART_MspInit+0x19c>)
 800247c:	222d      	movs	r2, #45	; 0x2d
 800247e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002480:	4b33      	ldr	r3, [pc, #204]	; (8002550 <HAL_UART_MspInit+0x19c>)
 8002482:	2200      	movs	r2, #0
 8002484:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002486:	4b32      	ldr	r3, [pc, #200]	; (8002550 <HAL_UART_MspInit+0x19c>)
 8002488:	2200      	movs	r2, #0
 800248a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800248c:	4b30      	ldr	r3, [pc, #192]	; (8002550 <HAL_UART_MspInit+0x19c>)
 800248e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002492:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002494:	4b2e      	ldr	r3, [pc, #184]	; (8002550 <HAL_UART_MspInit+0x19c>)
 8002496:	2200      	movs	r2, #0
 8002498:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800249a:	4b2d      	ldr	r3, [pc, #180]	; (8002550 <HAL_UART_MspInit+0x19c>)
 800249c:	2200      	movs	r2, #0
 800249e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80024a0:	4b2b      	ldr	r3, [pc, #172]	; (8002550 <HAL_UART_MspInit+0x19c>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80024a6:	4b2a      	ldr	r3, [pc, #168]	; (8002550 <HAL_UART_MspInit+0x19c>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024ac:	4b28      	ldr	r3, [pc, #160]	; (8002550 <HAL_UART_MspInit+0x19c>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80024b2:	4827      	ldr	r0, [pc, #156]	; (8002550 <HAL_UART_MspInit+0x19c>)
 80024b4:	f001 ff20 	bl	80042f8 <HAL_DMA_Init>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 80024be:	f7ff fd93 	bl	8001fe8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a22      	ldr	r2, [pc, #136]	; (8002550 <HAL_UART_MspInit+0x19c>)
 80024c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80024ca:	4a21      	ldr	r2, [pc, #132]	; (8002550 <HAL_UART_MspInit+0x19c>)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 80024d0:	4b21      	ldr	r3, [pc, #132]	; (8002558 <HAL_UART_MspInit+0x1a4>)
 80024d2:	4a22      	ldr	r2, [pc, #136]	; (800255c <HAL_UART_MspInit+0x1a8>)
 80024d4:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80024d6:	4b20      	ldr	r3, [pc, #128]	; (8002558 <HAL_UART_MspInit+0x1a4>)
 80024d8:	222e      	movs	r2, #46	; 0x2e
 80024da:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024dc:	4b1e      	ldr	r3, [pc, #120]	; (8002558 <HAL_UART_MspInit+0x1a4>)
 80024de:	2240      	movs	r2, #64	; 0x40
 80024e0:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024e2:	4b1d      	ldr	r3, [pc, #116]	; (8002558 <HAL_UART_MspInit+0x1a4>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024e8:	4b1b      	ldr	r3, [pc, #108]	; (8002558 <HAL_UART_MspInit+0x1a4>)
 80024ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024ee:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024f0:	4b19      	ldr	r3, [pc, #100]	; (8002558 <HAL_UART_MspInit+0x1a4>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024f6:	4b18      	ldr	r3, [pc, #96]	; (8002558 <HAL_UART_MspInit+0x1a4>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80024fc:	4b16      	ldr	r3, [pc, #88]	; (8002558 <HAL_UART_MspInit+0x1a4>)
 80024fe:	2200      	movs	r2, #0
 8002500:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002502:	4b15      	ldr	r3, [pc, #84]	; (8002558 <HAL_UART_MspInit+0x1a4>)
 8002504:	2200      	movs	r2, #0
 8002506:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002508:	4b13      	ldr	r3, [pc, #76]	; (8002558 <HAL_UART_MspInit+0x1a4>)
 800250a:	2200      	movs	r2, #0
 800250c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800250e:	4812      	ldr	r0, [pc, #72]	; (8002558 <HAL_UART_MspInit+0x1a4>)
 8002510:	f001 fef2 	bl	80042f8 <HAL_DMA_Init>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 800251a:	f7ff fd65 	bl	8001fe8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a0d      	ldr	r2, [pc, #52]	; (8002558 <HAL_UART_MspInit+0x1a4>)
 8002522:	67da      	str	r2, [r3, #124]	; 0x7c
 8002524:	4a0c      	ldr	r2, [pc, #48]	; (8002558 <HAL_UART_MspInit+0x1a4>)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800252a:	2200      	movs	r2, #0
 800252c:	2105      	movs	r1, #5
 800252e:	2027      	movs	r0, #39	; 0x27
 8002530:	f001 feba 	bl	80042a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002534:	2027      	movs	r0, #39	; 0x27
 8002536:	f001 fed1 	bl	80042dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800253a:	bf00      	nop
 800253c:	37e8      	adds	r7, #232	; 0xe8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	40004800 	.word	0x40004800
 8002548:	58024400 	.word	0x58024400
 800254c:	58020c00 	.word	0x58020c00
 8002550:	240004d0 	.word	0x240004d0
 8002554:	40020010 	.word	0x40020010
 8002558:	24000548 	.word	0x24000548
 800255c:	40020028 	.word	0x40020028

08002560 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b0ba      	sub	sp, #232	; 0xe8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002568:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	605a      	str	r2, [r3, #4]
 8002572:	609a      	str	r2, [r3, #8]
 8002574:	60da      	str	r2, [r3, #12]
 8002576:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002578:	f107 0310 	add.w	r3, r7, #16
 800257c:	22c0      	movs	r2, #192	; 0xc0
 800257e:	2100      	movs	r1, #0
 8002580:	4618      	mov	r0, r3
 8002582:	f00f fc22 	bl	8011dca <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a38      	ldr	r2, [pc, #224]	; (800266c <HAL_PCD_MspInit+0x10c>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d169      	bne.n	8002664 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002590:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002594:	f04f 0300 	mov.w	r3, #0
 8002598:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 800259c:	2301      	movs	r3, #1
 800259e:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 80025a0:	2312      	movs	r3, #18
 80025a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80025a4:	2302      	movs	r3, #2
 80025a6:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 80025a8:	2303      	movs	r3, #3
 80025aa:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80025ac:	2302      	movs	r3, #2
 80025ae:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80025b0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80025b4:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 80025b6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80025ba:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80025bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80025c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025c4:	f107 0310 	add.w	r3, r7, #16
 80025c8:	4618      	mov	r0, r3
 80025ca:	f005 fc8d 	bl	8007ee8 <HAL_RCCEx_PeriphCLKConfig>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 80025d4:	f7ff fd08 	bl	8001fe8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80025d8:	f004 fc4e 	bl	8006e78 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025dc:	4b24      	ldr	r3, [pc, #144]	; (8002670 <HAL_PCD_MspInit+0x110>)
 80025de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025e2:	4a23      	ldr	r2, [pc, #140]	; (8002670 <HAL_PCD_MspInit+0x110>)
 80025e4:	f043 0301 	orr.w	r3, r3, #1
 80025e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025ec:	4b20      	ldr	r3, [pc, #128]	; (8002670 <HAL_PCD_MspInit+0x110>)
 80025ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80025fa:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80025fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002602:	2302      	movs	r3, #2
 8002604:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002608:	2300      	movs	r3, #0
 800260a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800260e:	2300      	movs	r3, #0
 8002610:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002614:	230a      	movs	r3, #10
 8002616:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800261a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800261e:	4619      	mov	r1, r3
 8002620:	4814      	ldr	r0, [pc, #80]	; (8002674 <HAL_PCD_MspInit+0x114>)
 8002622:	f004 f88f 	bl	8006744 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002626:	f44f 7300 	mov.w	r3, #512	; 0x200
 800262a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800262e:	2300      	movs	r3, #0
 8002630:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002634:	2300      	movs	r3, #0
 8002636:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800263a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800263e:	4619      	mov	r1, r3
 8002640:	480c      	ldr	r0, [pc, #48]	; (8002674 <HAL_PCD_MspInit+0x114>)
 8002642:	f004 f87f 	bl	8006744 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002646:	4b0a      	ldr	r3, [pc, #40]	; (8002670 <HAL_PCD_MspInit+0x110>)
 8002648:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800264c:	4a08      	ldr	r2, [pc, #32]	; (8002670 <HAL_PCD_MspInit+0x110>)
 800264e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002652:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002656:	4b06      	ldr	r3, [pc, #24]	; (8002670 <HAL_PCD_MspInit+0x110>)
 8002658:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800265c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002660:	60bb      	str	r3, [r7, #8]
 8002662:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002664:	bf00      	nop
 8002666:	37e8      	adds	r7, #232	; 0xe8
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40080000 	.word	0x40080000
 8002670:	58024400 	.word	0x58024400
 8002674:	58020000 	.word	0x58020000

08002678 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b08e      	sub	sp, #56	; 0x38
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM17 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b0f      	cmp	r3, #15
 8002684:	d844      	bhi.n	8002710 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0U);
 8002686:	2200      	movs	r2, #0
 8002688:	6879      	ldr	r1, [r7, #4]
 800268a:	2076      	movs	r0, #118	; 0x76
 800268c:	f001 fe0c 	bl	80042a8 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002690:	2076      	movs	r0, #118	; 0x76
 8002692:	f001 fe23 	bl	80042dc <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002696:	4a24      	ldr	r2, [pc, #144]	; (8002728 <HAL_InitTick+0xb0>)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 800269c:	4b23      	ldr	r3, [pc, #140]	; (800272c <HAL_InitTick+0xb4>)
 800269e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026a2:	4a22      	ldr	r2, [pc, #136]	; (800272c <HAL_InitTick+0xb4>)
 80026a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026a8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80026ac:	4b1f      	ldr	r3, [pc, #124]	; (800272c <HAL_InitTick+0xb4>)
 80026ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026b6:	60bb      	str	r3, [r7, #8]
 80026b8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80026ba:	f107 020c 	add.w	r2, r7, #12
 80026be:	f107 0310 	add.w	r3, r7, #16
 80026c2:	4611      	mov	r1, r2
 80026c4:	4618      	mov	r0, r3
 80026c6:	f005 fbcd 	bl	8007e64 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80026ca:	f005 fbb5 	bl	8007e38 <HAL_RCC_GetPCLK2Freq>
 80026ce:	4603      	mov	r3, r0
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80026d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026d6:	4a16      	ldr	r2, [pc, #88]	; (8002730 <HAL_InitTick+0xb8>)
 80026d8:	fba2 2303 	umull	r2, r3, r2, r3
 80026dc:	0c9b      	lsrs	r3, r3, #18
 80026de:	3b01      	subs	r3, #1
 80026e0:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 80026e2:	4b14      	ldr	r3, [pc, #80]	; (8002734 <HAL_InitTick+0xbc>)
 80026e4:	4a14      	ldr	r2, [pc, #80]	; (8002738 <HAL_InitTick+0xc0>)
 80026e6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 80026e8:	4b12      	ldr	r3, [pc, #72]	; (8002734 <HAL_InitTick+0xbc>)
 80026ea:	f240 32e7 	movw	r2, #999	; 0x3e7
 80026ee:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 80026f0:	4a10      	ldr	r2, [pc, #64]	; (8002734 <HAL_InitTick+0xbc>)
 80026f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f4:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 80026f6:	4b0f      	ldr	r3, [pc, #60]	; (8002734 <HAL_InitTick+0xbc>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026fc:	4b0d      	ldr	r3, [pc, #52]	; (8002734 <HAL_InitTick+0xbc>)
 80026fe:	2200      	movs	r2, #0
 8002700:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8002702:	480c      	ldr	r0, [pc, #48]	; (8002734 <HAL_InitTick+0xbc>)
 8002704:	f008 f8ee 	bl	800a8e4 <HAL_TIM_Base_Init>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d107      	bne.n	800271e <HAL_InitTick+0xa6>
 800270e:	e001      	b.n	8002714 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e005      	b.n	8002720 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8002714:	4807      	ldr	r0, [pc, #28]	; (8002734 <HAL_InitTick+0xbc>)
 8002716:	f008 f93d 	bl	800a994 <HAL_TIM_Base_Start_IT>
 800271a:	4603      	mov	r3, r0
 800271c:	e000      	b.n	8002720 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
}
 8002720:	4618      	mov	r0, r3
 8002722:	3738      	adds	r7, #56	; 0x38
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	24000008 	.word	0x24000008
 800272c:	58024400 	.word	0x58024400
 8002730:	431bde83 	.word	0x431bde83
 8002734:	24000b34 	.word	0x24000b34
 8002738:	40014800 	.word	0x40014800

0800273c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002740:	e7fe      	b.n	8002740 <NMI_Handler+0x4>

08002742 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002742:	b480      	push	{r7}
 8002744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002746:	e7fe      	b.n	8002746 <HardFault_Handler+0x4>

08002748 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800274c:	e7fe      	b.n	800274c <MemManage_Handler+0x4>

0800274e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800274e:	b480      	push	{r7}
 8002750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002752:	e7fe      	b.n	8002752 <BusFault_Handler+0x4>

08002754 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002758:	e7fe      	b.n	8002758 <UsageFault_Handler+0x4>

0800275a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800275a:	b480      	push	{r7}
 800275c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800275e:	bf00      	nop
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800276c:	4802      	ldr	r0, [pc, #8]	; (8002778 <DMA1_Stream0_IRQHandler+0x10>)
 800276e:	f002 fe83 	bl	8005478 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002772:	bf00      	nop
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	240004d0 	.word	0x240004d0

0800277c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002780:	4802      	ldr	r0, [pc, #8]	; (800278c <DMA1_Stream1_IRQHandler+0x10>)
 8002782:	f002 fe79 	bl	8005478 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002786:	bf00      	nop
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	24000548 	.word	0x24000548

08002790 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002794:	4802      	ldr	r0, [pc, #8]	; (80027a0 <TIM1_UP_IRQHandler+0x10>)
 8002796:	f008 fc39 	bl	800b00c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800279a:	bf00      	nop
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	240002c0 	.word	0x240002c0

080027a4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80027a8:	4802      	ldr	r0, [pc, #8]	; (80027b4 <USART3_IRQHandler+0x10>)
 80027aa:	f009 fd41 	bl	800c230 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80027ae:	bf00      	nop
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	2400043c 	.word	0x2400043c

080027b8 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80027bc:	4802      	ldr	r0, [pc, #8]	; (80027c8 <TIM17_IRQHandler+0x10>)
 80027be:	f008 fc25 	bl	800b00c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80027c2:	bf00      	nop
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	24000b34 	.word	0x24000b34

080027cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  return 1;
 80027d0:	2301      	movs	r3, #1
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <_kill>:

int _kill(int pid, int sig)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80027e6:	f00f fba9 	bl	8011f3c <__errno>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2216      	movs	r2, #22
 80027ee:	601a      	str	r2, [r3, #0]
  return -1;
 80027f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3708      	adds	r7, #8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <_exit>:

void _exit (int status)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002804:	f04f 31ff 	mov.w	r1, #4294967295
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f7ff ffe7 	bl	80027dc <_kill>
  while (1) {}    /* Make sure we hang here */
 800280e:	e7fe      	b.n	800280e <_exit+0x12>

08002810 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800281c:	2300      	movs	r3, #0
 800281e:	617b      	str	r3, [r7, #20]
 8002820:	e00a      	b.n	8002838 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002822:	f3af 8000 	nop.w
 8002826:	4601      	mov	r1, r0
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	1c5a      	adds	r2, r3, #1
 800282c:	60ba      	str	r2, [r7, #8]
 800282e:	b2ca      	uxtb	r2, r1
 8002830:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	3301      	adds	r3, #1
 8002836:	617b      	str	r3, [r7, #20]
 8002838:	697a      	ldr	r2, [r7, #20]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	429a      	cmp	r2, r3
 800283e:	dbf0      	blt.n	8002822 <_read+0x12>
  }

  return len;
 8002840:	687b      	ldr	r3, [r7, #4]
}
 8002842:	4618      	mov	r0, r3
 8002844:	3718      	adds	r7, #24
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b086      	sub	sp, #24
 800284e:	af00      	add	r7, sp, #0
 8002850:	60f8      	str	r0, [r7, #12]
 8002852:	60b9      	str	r1, [r7, #8]
 8002854:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002856:	2300      	movs	r3, #0
 8002858:	617b      	str	r3, [r7, #20]
 800285a:	e009      	b.n	8002870 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	1c5a      	adds	r2, r3, #1
 8002860:	60ba      	str	r2, [r7, #8]
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	4618      	mov	r0, r3
 8002866:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	3301      	adds	r3, #1
 800286e:	617b      	str	r3, [r7, #20]
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	429a      	cmp	r2, r3
 8002876:	dbf1      	blt.n	800285c <_write+0x12>
  }
  return len;
 8002878:	687b      	ldr	r3, [r7, #4]
}
 800287a:	4618      	mov	r0, r3
 800287c:	3718      	adds	r7, #24
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <_close>:

int _close(int file)
{
 8002882:	b480      	push	{r7}
 8002884:	b083      	sub	sp, #12
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800288a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800288e:	4618      	mov	r0, r3
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr

0800289a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800289a:	b480      	push	{r7}
 800289c:	b083      	sub	sp, #12
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
 80028a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028aa:	605a      	str	r2, [r3, #4]
  return 0;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <_isatty>:

int _isatty(int file)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80028c2:	2301      	movs	r3, #1
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3714      	adds	r7, #20
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
	...

080028ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028f4:	4a14      	ldr	r2, [pc, #80]	; (8002948 <_sbrk+0x5c>)
 80028f6:	4b15      	ldr	r3, [pc, #84]	; (800294c <_sbrk+0x60>)
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002900:	4b13      	ldr	r3, [pc, #76]	; (8002950 <_sbrk+0x64>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d102      	bne.n	800290e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002908:	4b11      	ldr	r3, [pc, #68]	; (8002950 <_sbrk+0x64>)
 800290a:	4a12      	ldr	r2, [pc, #72]	; (8002954 <_sbrk+0x68>)
 800290c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800290e:	4b10      	ldr	r3, [pc, #64]	; (8002950 <_sbrk+0x64>)
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4413      	add	r3, r2
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	429a      	cmp	r2, r3
 800291a:	d207      	bcs.n	800292c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800291c:	f00f fb0e 	bl	8011f3c <__errno>
 8002920:	4603      	mov	r3, r0
 8002922:	220c      	movs	r2, #12
 8002924:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002926:	f04f 33ff 	mov.w	r3, #4294967295
 800292a:	e009      	b.n	8002940 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800292c:	4b08      	ldr	r3, [pc, #32]	; (8002950 <_sbrk+0x64>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002932:	4b07      	ldr	r3, [pc, #28]	; (8002950 <_sbrk+0x64>)
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4413      	add	r3, r2
 800293a:	4a05      	ldr	r2, [pc, #20]	; (8002950 <_sbrk+0x64>)
 800293c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800293e:	68fb      	ldr	r3, [r7, #12]
}
 8002940:	4618      	mov	r0, r3
 8002942:	3718      	adds	r7, #24
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	24080000 	.word	0x24080000
 800294c:	00000400 	.word	0x00000400
 8002950:	24000b80 	.word	0x24000b80
 8002954:	240056c0 	.word	0x240056c0

08002958 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002958:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002990 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800295c:	f7fe f88a 	bl	8000a74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002960:	480c      	ldr	r0, [pc, #48]	; (8002994 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002962:	490d      	ldr	r1, [pc, #52]	; (8002998 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002964:	4a0d      	ldr	r2, [pc, #52]	; (800299c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002966:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002968:	e002      	b.n	8002970 <LoopCopyDataInit>

0800296a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800296a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800296c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800296e:	3304      	adds	r3, #4

08002970 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002970:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002972:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002974:	d3f9      	bcc.n	800296a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002976:	4a0a      	ldr	r2, [pc, #40]	; (80029a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002978:	4c0a      	ldr	r4, [pc, #40]	; (80029a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800297a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800297c:	e001      	b.n	8002982 <LoopFillZerobss>

0800297e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800297e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002980:	3204      	adds	r2, #4

08002982 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002982:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002984:	d3fb      	bcc.n	800297e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002986:	f00f fadf 	bl	8011f48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800298a:	f7fe fbf1 	bl	8001170 <main>
  bx  lr
 800298e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002990:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002994:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002998:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 800299c:	08015960 	.word	0x08015960
  ldr r2, =_sbss
 80029a0:	240001dc 	.word	0x240001dc
  ldr r4, =_ebss
 80029a4:	240056bc 	.word	0x240056bc

080029a8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029a8:	e7fe      	b.n	80029a8 <ADC3_IRQHandler>
	...

080029ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029b2:	2003      	movs	r0, #3
 80029b4:	f001 fc6d 	bl	8004292 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80029b8:	f005 f87e 	bl	8007ab8 <HAL_RCC_GetSysClockFreq>
 80029bc:	4602      	mov	r2, r0
 80029be:	4b15      	ldr	r3, [pc, #84]	; (8002a14 <HAL_Init+0x68>)
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	0a1b      	lsrs	r3, r3, #8
 80029c4:	f003 030f 	and.w	r3, r3, #15
 80029c8:	4913      	ldr	r1, [pc, #76]	; (8002a18 <HAL_Init+0x6c>)
 80029ca:	5ccb      	ldrb	r3, [r1, r3]
 80029cc:	f003 031f 	and.w	r3, r3, #31
 80029d0:	fa22 f303 	lsr.w	r3, r2, r3
 80029d4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80029d6:	4b0f      	ldr	r3, [pc, #60]	; (8002a14 <HAL_Init+0x68>)
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	f003 030f 	and.w	r3, r3, #15
 80029de:	4a0e      	ldr	r2, [pc, #56]	; (8002a18 <HAL_Init+0x6c>)
 80029e0:	5cd3      	ldrb	r3, [r2, r3]
 80029e2:	f003 031f 	and.w	r3, r3, #31
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	fa22 f303 	lsr.w	r3, r2, r3
 80029ec:	4a0b      	ldr	r2, [pc, #44]	; (8002a1c <HAL_Init+0x70>)
 80029ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80029f0:	4a0b      	ldr	r2, [pc, #44]	; (8002a20 <HAL_Init+0x74>)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029f6:	200f      	movs	r0, #15
 80029f8:	f7ff fe3e 	bl	8002678 <HAL_InitTick>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e002      	b.n	8002a0c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002a06:	f7ff faf5 	bl	8001ff4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3708      	adds	r7, #8
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	58024400 	.word	0x58024400
 8002a18:	0801545c 	.word	0x0801545c
 8002a1c:	24000004 	.word	0x24000004
 8002a20:	24000000 	.word	0x24000000

08002a24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a28:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <HAL_IncTick+0x20>)
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	4b06      	ldr	r3, [pc, #24]	; (8002a48 <HAL_IncTick+0x24>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4413      	add	r3, r2
 8002a34:	4a04      	ldr	r2, [pc, #16]	; (8002a48 <HAL_IncTick+0x24>)
 8002a36:	6013      	str	r3, [r2, #0]
}
 8002a38:	bf00      	nop
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	2400000c 	.word	0x2400000c
 8002a48:	24000b84 	.word	0x24000b84

08002a4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a50:	4b03      	ldr	r3, [pc, #12]	; (8002a60 <HAL_GetTick+0x14>)
 8002a52:	681b      	ldr	r3, [r3, #0]
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	24000b84 	.word	0x24000b84

08002a64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a6c:	f7ff ffee 	bl	8002a4c <HAL_GetTick>
 8002a70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a7c:	d005      	beq.n	8002a8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a7e:	4b0a      	ldr	r3, [pc, #40]	; (8002aa8 <HAL_Delay+0x44>)
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	461a      	mov	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4413      	add	r3, r2
 8002a88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a8a:	bf00      	nop
 8002a8c:	f7ff ffde 	bl	8002a4c <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d8f7      	bhi.n	8002a8c <HAL_Delay+0x28>
  {
  }
}
 8002a9c:	bf00      	nop
 8002a9e:	bf00      	nop
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	2400000c 	.word	0x2400000c

08002aac <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002ab0:	4b03      	ldr	r3, [pc, #12]	; (8002ac0 <HAL_GetREVID+0x14>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	0c1b      	lsrs	r3, r3, #16
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr
 8002ac0:	5c001000 	.word	0x5c001000

08002ac4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	431a      	orrs	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	609a      	str	r2, [r3, #8]
}
 8002ade:	bf00      	nop
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002aea:	b480      	push	{r7}
 8002aec:	b083      	sub	sp, #12
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
 8002af2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	431a      	orrs	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	609a      	str	r2, [r3, #8]
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b087      	sub	sp, #28
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
 8002b38:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	3360      	adds	r3, #96	; 0x60
 8002b3e:	461a      	mov	r2, r3
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4413      	add	r3, r2
 8002b46:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	430b      	orrs	r3, r1
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002b60:	bf00      	nop
 8002b62:	371c      	adds	r7, #28
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	f003 031f 	and.w	r3, r3, #31
 8002b86:	6879      	ldr	r1, [r7, #4]
 8002b88:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	611a      	str	r2, [r3, #16]
}
 8002b92:	bf00      	nop
 8002b94:	3714      	adds	r7, #20
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr

08002b9e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b087      	sub	sp, #28
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	60f8      	str	r0, [r7, #12]
 8002ba6:	60b9      	str	r1, [r7, #8]
 8002ba8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	3360      	adds	r3, #96	; 0x60
 8002bae:	461a      	mov	r2, r3
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	4413      	add	r3, r2
 8002bb6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	601a      	str	r2, [r3, #0]
  }
}
 8002bc8:	bf00      	nop
 8002bca:	371c      	adds	r7, #28
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d101      	bne.n	8002bec <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002be8:	2301      	movs	r3, #1
 8002bea:	e000      	b.n	8002bee <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b087      	sub	sp, #28
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	60f8      	str	r0, [r7, #12]
 8002c02:	60b9      	str	r1, [r7, #8]
 8002c04:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	3330      	adds	r3, #48	; 0x30
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	0a1b      	lsrs	r3, r3, #8
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	f003 030c 	and.w	r3, r3, #12
 8002c16:	4413      	add	r3, r2
 8002c18:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	f003 031f 	and.w	r3, r3, #31
 8002c24:	211f      	movs	r1, #31
 8002c26:	fa01 f303 	lsl.w	r3, r1, r3
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	401a      	ands	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	0e9b      	lsrs	r3, r3, #26
 8002c32:	f003 011f 	and.w	r1, r3, #31
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	f003 031f 	and.w	r3, r3, #31
 8002c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c40:	431a      	orrs	r2, r3
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c46:	bf00      	nop
 8002c48:	371c      	adds	r7, #28
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c52:	b480      	push	{r7}
 8002c54:	b087      	sub	sp, #28
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	60f8      	str	r0, [r7, #12]
 8002c5a:	60b9      	str	r1, [r7, #8]
 8002c5c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	3314      	adds	r3, #20
 8002c62:	461a      	mov	r2, r3
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	0e5b      	lsrs	r3, r3, #25
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	f003 0304 	and.w	r3, r3, #4
 8002c6e:	4413      	add	r3, r2
 8002c70:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	0d1b      	lsrs	r3, r3, #20
 8002c7a:	f003 031f 	and.w	r3, r3, #31
 8002c7e:	2107      	movs	r1, #7
 8002c80:	fa01 f303 	lsl.w	r3, r1, r3
 8002c84:	43db      	mvns	r3, r3
 8002c86:	401a      	ands	r2, r3
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	0d1b      	lsrs	r3, r3, #20
 8002c8c:	f003 031f 	and.w	r3, r3, #31
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	fa01 f303 	lsl.w	r3, r1, r3
 8002c96:	431a      	orrs	r2, r3
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002c9c:	bf00      	nop
 8002c9e:	371c      	adds	r7, #28
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	401a      	ands	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f003 0318 	and.w	r3, r3, #24
 8002cca:	4908      	ldr	r1, [pc, #32]	; (8002cec <LL_ADC_SetChannelSingleDiff+0x44>)
 8002ccc:	40d9      	lsrs	r1, r3
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	400b      	ands	r3, r1
 8002cd2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002cde:	bf00      	nop
 8002ce0:	3714      	adds	r7, #20
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	000fffff 	.word	0x000fffff

08002cf0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f003 031f 	and.w	r3, r3, #31
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689a      	ldr	r2, [r3, #8]
 8002d34:	4b04      	ldr	r3, [pc, #16]	; (8002d48 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002d36:	4013      	ands	r3, r2
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	6093      	str	r3, [r2, #8]
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr
 8002d48:	5fffffc0 	.word	0x5fffffc0

08002d4c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d60:	d101      	bne.n	8002d66 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d62:	2301      	movs	r3, #1
 8002d64:	e000      	b.n	8002d68 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	4b05      	ldr	r3, [pc, #20]	; (8002d98 <LL_ADC_EnableInternalRegulator+0x24>)
 8002d82:	4013      	ands	r3, r2
 8002d84:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	6fffffc0 	.word	0x6fffffc0

08002d9c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002db0:	d101      	bne.n	8002db6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002db2:	2301      	movs	r3, #1
 8002db4:	e000      	b.n	8002db8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	4b05      	ldr	r3, [pc, #20]	; (8002de8 <LL_ADC_Enable+0x24>)
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	f043 0201 	orr.w	r2, r3, #1
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	7fffffc0 	.word	0x7fffffc0

08002dec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f003 0301 	and.w	r3, r3, #1
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d101      	bne.n	8002e04 <LL_ADC_IsEnabled+0x18>
 8002e00:	2301      	movs	r3, #1
 8002e02:	e000      	b.n	8002e06 <LL_ADC_IsEnabled+0x1a>
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
	...

08002e14 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	4b05      	ldr	r3, [pc, #20]	; (8002e38 <LL_ADC_REG_StartConversion+0x24>)
 8002e22:	4013      	ands	r3, r2
 8002e24:	f043 0204 	orr.w	r2, r3, #4
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	7fffffc0 	.word	0x7fffffc0

08002e3c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f003 0304 	and.w	r3, r3, #4
 8002e4c:	2b04      	cmp	r3, #4
 8002e4e:	d101      	bne.n	8002e54 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e50:	2301      	movs	r3, #1
 8002e52:	e000      	b.n	8002e56 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e62:	b480      	push	{r7}
 8002e64:	b083      	sub	sp, #12
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	2b08      	cmp	r3, #8
 8002e74:	d101      	bne.n	8002e7a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002e76:	2301      	movs	r3, #1
 8002e78:	e000      	b.n	8002e7c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e88:	b590      	push	{r4, r7, lr}
 8002e8a:	b089      	sub	sp, #36	; 0x24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e90:	2300      	movs	r3, #0
 8002e92:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002e94:	2300      	movs	r3, #0
 8002e96:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e18f      	b.n	80031c2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d109      	bne.n	8002ec4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f7ff f8bd 	bl	8002030 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff ff3f 	bl	8002d4c <LL_ADC_IsDeepPowerDownEnabled>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d004      	beq.n	8002ede <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff ff25 	bl	8002d28 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7ff ff5a 	bl	8002d9c <LL_ADC_IsInternalRegulatorEnabled>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d114      	bne.n	8002f18 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7ff ff3e 	bl	8002d74 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ef8:	4b87      	ldr	r3, [pc, #540]	; (8003118 <HAL_ADC_Init+0x290>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	099b      	lsrs	r3, r3, #6
 8002efe:	4a87      	ldr	r2, [pc, #540]	; (800311c <HAL_ADC_Init+0x294>)
 8002f00:	fba2 2303 	umull	r2, r3, r2, r3
 8002f04:	099b      	lsrs	r3, r3, #6
 8002f06:	3301      	adds	r3, #1
 8002f08:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f0a:	e002      	b.n	8002f12 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1f9      	bne.n	8002f0c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7ff ff3d 	bl	8002d9c <LL_ADC_IsInternalRegulatorEnabled>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d10d      	bne.n	8002f44 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f2c:	f043 0210 	orr.w	r2, r3, #16
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f38:	f043 0201 	orr.w	r2, r3, #1
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7ff ff77 	bl	8002e3c <LL_ADC_REG_IsConversionOngoing>
 8002f4e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f54:	f003 0310 	and.w	r3, r3, #16
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f040 8129 	bne.w	80031b0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f040 8125 	bne.w	80031b0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f6a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002f6e:	f043 0202 	orr.w	r2, r3, #2
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7ff ff36 	bl	8002dec <LL_ADC_IsEnabled>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d136      	bne.n	8002ff4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a65      	ldr	r2, [pc, #404]	; (8003120 <HAL_ADC_Init+0x298>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d004      	beq.n	8002f9a <HAL_ADC_Init+0x112>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a63      	ldr	r2, [pc, #396]	; (8003124 <HAL_ADC_Init+0x29c>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d10e      	bne.n	8002fb8 <HAL_ADC_Init+0x130>
 8002f9a:	4861      	ldr	r0, [pc, #388]	; (8003120 <HAL_ADC_Init+0x298>)
 8002f9c:	f7ff ff26 	bl	8002dec <LL_ADC_IsEnabled>
 8002fa0:	4604      	mov	r4, r0
 8002fa2:	4860      	ldr	r0, [pc, #384]	; (8003124 <HAL_ADC_Init+0x29c>)
 8002fa4:	f7ff ff22 	bl	8002dec <LL_ADC_IsEnabled>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	4323      	orrs	r3, r4
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	bf0c      	ite	eq
 8002fb0:	2301      	moveq	r3, #1
 8002fb2:	2300      	movne	r3, #0
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	e008      	b.n	8002fca <HAL_ADC_Init+0x142>
 8002fb8:	485b      	ldr	r0, [pc, #364]	; (8003128 <HAL_ADC_Init+0x2a0>)
 8002fba:	f7ff ff17 	bl	8002dec <LL_ADC_IsEnabled>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	bf0c      	ite	eq
 8002fc4:	2301      	moveq	r3, #1
 8002fc6:	2300      	movne	r3, #0
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d012      	beq.n	8002ff4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a53      	ldr	r2, [pc, #332]	; (8003120 <HAL_ADC_Init+0x298>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d004      	beq.n	8002fe2 <HAL_ADC_Init+0x15a>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a51      	ldr	r2, [pc, #324]	; (8003124 <HAL_ADC_Init+0x29c>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d101      	bne.n	8002fe6 <HAL_ADC_Init+0x15e>
 8002fe2:	4a52      	ldr	r2, [pc, #328]	; (800312c <HAL_ADC_Init+0x2a4>)
 8002fe4:	e000      	b.n	8002fe8 <HAL_ADC_Init+0x160>
 8002fe6:	4a52      	ldr	r2, [pc, #328]	; (8003130 <HAL_ADC_Init+0x2a8>)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	4619      	mov	r1, r3
 8002fee:	4610      	mov	r0, r2
 8002ff0:	f7ff fd68 	bl	8002ac4 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002ff4:	f7ff fd5a 	bl	8002aac <HAL_GetREVID>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	f241 0203 	movw	r2, #4099	; 0x1003
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d914      	bls.n	800302c <HAL_ADC_Init+0x1a4>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	2b10      	cmp	r3, #16
 8003008:	d110      	bne.n	800302c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	7d5b      	ldrb	r3, [r3, #21]
 800300e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003014:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800301a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	7f1b      	ldrb	r3, [r3, #28]
 8003020:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003022:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003024:	f043 030c 	orr.w	r3, r3, #12
 8003028:	61bb      	str	r3, [r7, #24]
 800302a:	e00d      	b.n	8003048 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	7d5b      	ldrb	r3, [r3, #21]
 8003030:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003036:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800303c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	7f1b      	ldrb	r3, [r3, #28]
 8003042:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003044:	4313      	orrs	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	7f1b      	ldrb	r3, [r3, #28]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d106      	bne.n	800305e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	3b01      	subs	r3, #1
 8003056:	045b      	lsls	r3, r3, #17
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	4313      	orrs	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003062:	2b00      	cmp	r3, #0
 8003064:	d009      	beq.n	800307a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003072:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	4313      	orrs	r3, r2
 8003078:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68da      	ldr	r2, [r3, #12]
 8003080:	4b2c      	ldr	r3, [pc, #176]	; (8003134 <HAL_ADC_Init+0x2ac>)
 8003082:	4013      	ands	r3, r2
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	6812      	ldr	r2, [r2, #0]
 8003088:	69b9      	ldr	r1, [r7, #24]
 800308a:	430b      	orrs	r3, r1
 800308c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4618      	mov	r0, r3
 8003094:	f7ff fed2 	bl	8002e3c <LL_ADC_REG_IsConversionOngoing>
 8003098:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f7ff fedf 	bl	8002e62 <LL_ADC_INJ_IsConversionOngoing>
 80030a4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d15f      	bne.n	800316c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d15c      	bne.n	800316c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	7d1b      	ldrb	r3, [r3, #20]
 80030b6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80030bc:	4313      	orrs	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68da      	ldr	r2, [r3, #12]
 80030c6:	4b1c      	ldr	r3, [pc, #112]	; (8003138 <HAL_ADC_Init+0x2b0>)
 80030c8:	4013      	ands	r3, r2
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	6812      	ldr	r2, [r2, #0]
 80030ce:	69b9      	ldr	r1, [r7, #24]
 80030d0:	430b      	orrs	r3, r1
 80030d2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d130      	bne.n	8003140 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	691a      	ldr	r2, [r3, #16]
 80030ea:	4b14      	ldr	r3, [pc, #80]	; (800313c <HAL_ADC_Init+0x2b4>)
 80030ec:	4013      	ands	r3, r2
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80030f2:	3a01      	subs	r2, #1
 80030f4:	0411      	lsls	r1, r2, #16
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80030fa:	4311      	orrs	r1, r2
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003100:	4311      	orrs	r1, r2
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003106:	430a      	orrs	r2, r1
 8003108:	431a      	orrs	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f042 0201 	orr.w	r2, r2, #1
 8003112:	611a      	str	r2, [r3, #16]
 8003114:	e01c      	b.n	8003150 <HAL_ADC_Init+0x2c8>
 8003116:	bf00      	nop
 8003118:	24000000 	.word	0x24000000
 800311c:	053e2d63 	.word	0x053e2d63
 8003120:	40022000 	.word	0x40022000
 8003124:	40022100 	.word	0x40022100
 8003128:	58026000 	.word	0x58026000
 800312c:	40022300 	.word	0x40022300
 8003130:	58026300 	.word	0x58026300
 8003134:	fff0c003 	.word	0xfff0c003
 8003138:	ffffbffc 	.word	0xffffbffc
 800313c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	691a      	ldr	r2, [r3, #16]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f022 0201 	bic.w	r2, r2, #1
 800314e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	430a      	orrs	r2, r1
 8003164:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 fdd6 	bl	8003d18 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d10c      	bne.n	800318e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317a:	f023 010f 	bic.w	r1, r3, #15
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	1e5a      	subs	r2, r3, #1
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	430a      	orrs	r2, r1
 800318a:	631a      	str	r2, [r3, #48]	; 0x30
 800318c:	e007      	b.n	800319e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f022 020f 	bic.w	r2, r2, #15
 800319c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a2:	f023 0303 	bic.w	r3, r3, #3
 80031a6:	f043 0201 	orr.w	r2, r3, #1
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	655a      	str	r2, [r3, #84]	; 0x54
 80031ae:	e007      	b.n	80031c0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b4:	f043 0210 	orr.w	r2, r3, #16
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80031c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3724      	adds	r7, #36	; 0x24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd90      	pop	{r4, r7, pc}
 80031ca:	bf00      	nop

080031cc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a5c      	ldr	r2, [pc, #368]	; (800334c <HAL_ADC_Start+0x180>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d004      	beq.n	80031e8 <HAL_ADC_Start+0x1c>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a5b      	ldr	r2, [pc, #364]	; (8003350 <HAL_ADC_Start+0x184>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d101      	bne.n	80031ec <HAL_ADC_Start+0x20>
 80031e8:	4b5a      	ldr	r3, [pc, #360]	; (8003354 <HAL_ADC_Start+0x188>)
 80031ea:	e000      	b.n	80031ee <HAL_ADC_Start+0x22>
 80031ec:	4b5a      	ldr	r3, [pc, #360]	; (8003358 <HAL_ADC_Start+0x18c>)
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7ff fd7e 	bl	8002cf0 <LL_ADC_GetMultimode>
 80031f4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff fe1e 	bl	8002e3c <LL_ADC_REG_IsConversionOngoing>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	f040 809a 	bne.w	800333c <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800320e:	2b01      	cmp	r3, #1
 8003210:	d101      	bne.n	8003216 <HAL_ADC_Start+0x4a>
 8003212:	2302      	movs	r3, #2
 8003214:	e095      	b.n	8003342 <HAL_ADC_Start+0x176>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 fcf0 	bl	8003c04 <ADC_Enable>
 8003224:	4603      	mov	r3, r0
 8003226:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003228:	7dfb      	ldrb	r3, [r7, #23]
 800322a:	2b00      	cmp	r3, #0
 800322c:	f040 8081 	bne.w	8003332 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003234:	4b49      	ldr	r3, [pc, #292]	; (800335c <HAL_ADC_Start+0x190>)
 8003236:	4013      	ands	r3, r2
 8003238:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a42      	ldr	r2, [pc, #264]	; (8003350 <HAL_ADC_Start+0x184>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d002      	beq.n	8003250 <HAL_ADC_Start+0x84>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	e000      	b.n	8003252 <HAL_ADC_Start+0x86>
 8003250:	4b3e      	ldr	r3, [pc, #248]	; (800334c <HAL_ADC_Start+0x180>)
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	6812      	ldr	r2, [r2, #0]
 8003256:	4293      	cmp	r3, r2
 8003258:	d002      	beq.n	8003260 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d105      	bne.n	800326c <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003264:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003270:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003274:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003278:	d106      	bne.n	8003288 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800327e:	f023 0206 	bic.w	r2, r3, #6
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	659a      	str	r2, [r3, #88]	; 0x58
 8003286:	e002      	b.n	800328e <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	221c      	movs	r2, #28
 8003294:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a2b      	ldr	r2, [pc, #172]	; (8003350 <HAL_ADC_Start+0x184>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d002      	beq.n	80032ae <HAL_ADC_Start+0xe2>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	e000      	b.n	80032b0 <HAL_ADC_Start+0xe4>
 80032ae:	4b27      	ldr	r3, [pc, #156]	; (800334c <HAL_ADC_Start+0x180>)
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	6812      	ldr	r2, [r2, #0]
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d008      	beq.n	80032ca <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d005      	beq.n	80032ca <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	2b05      	cmp	r3, #5
 80032c2:	d002      	beq.n	80032ca <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	2b09      	cmp	r3, #9
 80032c8:	d114      	bne.n	80032f4 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d007      	beq.n	80032e8 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80032e0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7ff fd91 	bl	8002e14 <LL_ADC_REG_StartConversion>
 80032f2:	e025      	b.n	8003340 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a12      	ldr	r2, [pc, #72]	; (8003350 <HAL_ADC_Start+0x184>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d002      	beq.n	8003310 <HAL_ADC_Start+0x144>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	e000      	b.n	8003312 <HAL_ADC_Start+0x146>
 8003310:	4b0e      	ldr	r3, [pc, #56]	; (800334c <HAL_ADC_Start+0x180>)
 8003312:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00f      	beq.n	8003340 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003324:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003328:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	655a      	str	r2, [r3, #84]	; 0x54
 8003330:	e006      	b.n	8003340 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800333a:	e001      	b.n	8003340 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800333c:	2302      	movs	r3, #2
 800333e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003340:	7dfb      	ldrb	r3, [r7, #23]
}
 8003342:	4618      	mov	r0, r3
 8003344:	3718      	adds	r7, #24
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	40022000 	.word	0x40022000
 8003350:	40022100 	.word	0x40022100
 8003354:	40022300 	.word	0x40022300
 8003358:	58026300 	.word	0x58026300
 800335c:	fffff0fe 	.word	0xfffff0fe

08003360 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b088      	sub	sp, #32
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a72      	ldr	r2, [pc, #456]	; (8003538 <HAL_ADC_PollForConversion+0x1d8>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d004      	beq.n	800337e <HAL_ADC_PollForConversion+0x1e>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a70      	ldr	r2, [pc, #448]	; (800353c <HAL_ADC_PollForConversion+0x1dc>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d101      	bne.n	8003382 <HAL_ADC_PollForConversion+0x22>
 800337e:	4b70      	ldr	r3, [pc, #448]	; (8003540 <HAL_ADC_PollForConversion+0x1e0>)
 8003380:	e000      	b.n	8003384 <HAL_ADC_PollForConversion+0x24>
 8003382:	4b70      	ldr	r3, [pc, #448]	; (8003544 <HAL_ADC_PollForConversion+0x1e4>)
 8003384:	4618      	mov	r0, r3
 8003386:	f7ff fcb3 	bl	8002cf0 <LL_ADC_GetMultimode>
 800338a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	2b08      	cmp	r3, #8
 8003392:	d102      	bne.n	800339a <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003394:	2308      	movs	r3, #8
 8003396:	61fb      	str	r3, [r7, #28]
 8003398:	e037      	b.n	800340a <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d005      	beq.n	80033ac <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	2b05      	cmp	r3, #5
 80033a4:	d002      	beq.n	80033ac <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	2b09      	cmp	r3, #9
 80033aa:	d111      	bne.n	80033d0 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d007      	beq.n	80033ca <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033be:	f043 0220 	orr.w	r2, r3, #32
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e0b1      	b.n	800352e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80033ca:	2304      	movs	r3, #4
 80033cc:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80033ce:	e01c      	b.n	800340a <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a58      	ldr	r2, [pc, #352]	; (8003538 <HAL_ADC_PollForConversion+0x1d8>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d004      	beq.n	80033e4 <HAL_ADC_PollForConversion+0x84>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a57      	ldr	r2, [pc, #348]	; (800353c <HAL_ADC_PollForConversion+0x1dc>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d101      	bne.n	80033e8 <HAL_ADC_PollForConversion+0x88>
 80033e4:	4b56      	ldr	r3, [pc, #344]	; (8003540 <HAL_ADC_PollForConversion+0x1e0>)
 80033e6:	e000      	b.n	80033ea <HAL_ADC_PollForConversion+0x8a>
 80033e8:	4b56      	ldr	r3, [pc, #344]	; (8003544 <HAL_ADC_PollForConversion+0x1e4>)
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7ff fc8e 	bl	8002d0c <LL_ADC_GetMultiDMATransfer>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d007      	beq.n	8003406 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033fa:	f043 0220 	orr.w	r2, r3, #32
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e093      	b.n	800352e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003406:	2304      	movs	r3, #4
 8003408:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800340a:	f7ff fb1f 	bl	8002a4c <HAL_GetTick>
 800340e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003410:	e021      	b.n	8003456 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003418:	d01d      	beq.n	8003456 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800341a:	f7ff fb17 	bl	8002a4c <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	429a      	cmp	r2, r3
 8003428:	d302      	bcc.n	8003430 <HAL_ADC_PollForConversion+0xd0>
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d112      	bne.n	8003456 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	4013      	ands	r3, r2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10b      	bne.n	8003456 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003442:	f043 0204 	orr.w	r2, r3, #4
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e06b      	b.n	800352e <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	4013      	ands	r3, r2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d0d6      	beq.n	8003412 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003468:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff fbad 	bl	8002bd4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d01c      	beq.n	80034ba <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	7d5b      	ldrb	r3, [r3, #21]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d118      	bne.n	80034ba <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0308 	and.w	r3, r3, #8
 8003492:	2b08      	cmp	r3, #8
 8003494:	d111      	bne.n	80034ba <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800349a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d105      	bne.n	80034ba <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b2:	f043 0201 	orr.w	r2, r3, #1
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a1f      	ldr	r2, [pc, #124]	; (800353c <HAL_ADC_PollForConversion+0x1dc>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d002      	beq.n	80034ca <HAL_ADC_PollForConversion+0x16a>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	e000      	b.n	80034cc <HAL_ADC_PollForConversion+0x16c>
 80034ca:	4b1b      	ldr	r3, [pc, #108]	; (8003538 <HAL_ADC_PollForConversion+0x1d8>)
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	6812      	ldr	r2, [r2, #0]
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d008      	beq.n	80034e6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d005      	beq.n	80034e6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	2b05      	cmp	r3, #5
 80034de:	d002      	beq.n	80034e6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	2b09      	cmp	r3, #9
 80034e4:	d104      	bne.n	80034f0 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	61bb      	str	r3, [r7, #24]
 80034ee:	e00c      	b.n	800350a <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a11      	ldr	r2, [pc, #68]	; (800353c <HAL_ADC_PollForConversion+0x1dc>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d002      	beq.n	8003500 <HAL_ADC_PollForConversion+0x1a0>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	e000      	b.n	8003502 <HAL_ADC_PollForConversion+0x1a2>
 8003500:	4b0d      	ldr	r3, [pc, #52]	; (8003538 <HAL_ADC_PollForConversion+0x1d8>)
 8003502:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	2b08      	cmp	r3, #8
 800350e:	d104      	bne.n	800351a <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2208      	movs	r2, #8
 8003516:	601a      	str	r2, [r3, #0]
 8003518:	e008      	b.n	800352c <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d103      	bne.n	800352c <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	220c      	movs	r2, #12
 800352a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3720      	adds	r7, #32
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	40022000 	.word	0x40022000
 800353c:	40022100 	.word	0x40022100
 8003540:	40022300 	.word	0x40022300
 8003544:	58026300 	.word	0x58026300

08003548 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003556:	4618      	mov	r0, r3
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
	...

08003564 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003564:	b590      	push	{r4, r7, lr}
 8003566:	b0a1      	sub	sp, #132	; 0x84
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800356e:	2300      	movs	r3, #0
 8003570:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003574:	2300      	movs	r3, #0
 8003576:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	4a9d      	ldr	r2, [pc, #628]	; (80037f4 <HAL_ADC_ConfigChannel+0x290>)
 800357e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003586:	2b01      	cmp	r3, #1
 8003588:	d101      	bne.n	800358e <HAL_ADC_ConfigChannel+0x2a>
 800358a:	2302      	movs	r3, #2
 800358c:	e321      	b.n	8003bd2 <HAL_ADC_ConfigChannel+0x66e>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4618      	mov	r0, r3
 800359c:	f7ff fc4e 	bl	8002e3c <LL_ADC_REG_IsConversionOngoing>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f040 8306 	bne.w	8003bb4 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d108      	bne.n	80035c6 <HAL_ADC_ConfigChannel+0x62>
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	0e9b      	lsrs	r3, r3, #26
 80035ba:	f003 031f 	and.w	r3, r3, #31
 80035be:	2201      	movs	r2, #1
 80035c0:	fa02 f303 	lsl.w	r3, r2, r3
 80035c4:	e016      	b.n	80035f4 <HAL_ADC_ConfigChannel+0x90>
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035ce:	fa93 f3a3 	rbit	r3, r3
 80035d2:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80035d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035d6:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80035d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80035de:	2320      	movs	r3, #32
 80035e0:	e003      	b.n	80035ea <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80035e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035e4:	fab3 f383 	clz	r3, r3
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	f003 031f 	and.w	r3, r3, #31
 80035ee:	2201      	movs	r2, #1
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	6812      	ldr	r2, [r2, #0]
 80035f8:	69d1      	ldr	r1, [r2, #28]
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	6812      	ldr	r2, [r2, #0]
 80035fe:	430b      	orrs	r3, r1
 8003600:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6818      	ldr	r0, [r3, #0]
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	6859      	ldr	r1, [r3, #4]
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	461a      	mov	r2, r3
 8003610:	f7ff faf3 	bl	8002bfa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4618      	mov	r0, r3
 800361a:	f7ff fc0f 	bl	8002e3c <LL_ADC_REG_IsConversionOngoing>
 800361e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4618      	mov	r0, r3
 8003626:	f7ff fc1c 	bl	8002e62 <LL_ADC_INJ_IsConversionOngoing>
 800362a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800362c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800362e:	2b00      	cmp	r3, #0
 8003630:	f040 80b3 	bne.w	800379a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003634:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003636:	2b00      	cmp	r3, #0
 8003638:	f040 80af 	bne.w	800379a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6818      	ldr	r0, [r3, #0]
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	6819      	ldr	r1, [r3, #0]
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	461a      	mov	r2, r3
 800364a:	f7ff fb02 	bl	8002c52 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800364e:	4b6a      	ldr	r3, [pc, #424]	; (80037f8 <HAL_ADC_ConfigChannel+0x294>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003656:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800365a:	d10b      	bne.n	8003674 <HAL_ADC_ConfigChannel+0x110>
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	695a      	ldr	r2, [r3, #20]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	089b      	lsrs	r3, r3, #2
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	fa02 f303 	lsl.w	r3, r2, r3
 8003672:	e01d      	b.n	80036b0 <HAL_ADC_ConfigChannel+0x14c>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	f003 0310 	and.w	r3, r3, #16
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10b      	bne.n	800369a <HAL_ADC_ConfigChannel+0x136>
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	695a      	ldr	r2, [r3, #20]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	089b      	lsrs	r3, r3, #2
 800368e:	f003 0307 	and.w	r3, r3, #7
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	fa02 f303 	lsl.w	r3, r2, r3
 8003698:	e00a      	b.n	80036b0 <HAL_ADC_ConfigChannel+0x14c>
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	695a      	ldr	r2, [r3, #20]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	089b      	lsrs	r3, r3, #2
 80036a6:	f003 0304 	and.w	r3, r3, #4
 80036aa:	005b      	lsls	r3, r3, #1
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	2b04      	cmp	r3, #4
 80036b8:	d027      	beq.n	800370a <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6818      	ldr	r0, [r3, #0]
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	6919      	ldr	r1, [r3, #16]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036c8:	f7ff fa30 	bl	8002b2c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6818      	ldr	r0, [r3, #0]
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	6919      	ldr	r1, [r3, #16]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	7e5b      	ldrb	r3, [r3, #25]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d102      	bne.n	80036e2 <HAL_ADC_ConfigChannel+0x17e>
 80036dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80036e0:	e000      	b.n	80036e4 <HAL_ADC_ConfigChannel+0x180>
 80036e2:	2300      	movs	r3, #0
 80036e4:	461a      	mov	r2, r3
 80036e6:	f7ff fa5a 	bl	8002b9e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6818      	ldr	r0, [r3, #0]
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	6919      	ldr	r1, [r3, #16]
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	7e1b      	ldrb	r3, [r3, #24]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d102      	bne.n	8003700 <HAL_ADC_ConfigChannel+0x19c>
 80036fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80036fe:	e000      	b.n	8003702 <HAL_ADC_ConfigChannel+0x19e>
 8003700:	2300      	movs	r3, #0
 8003702:	461a      	mov	r2, r3
 8003704:	f7ff fa32 	bl	8002b6c <LL_ADC_SetDataRightShift>
 8003708:	e047      	b.n	800379a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003710:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	069b      	lsls	r3, r3, #26
 800371a:	429a      	cmp	r2, r3
 800371c:	d107      	bne.n	800372e <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800372c:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003734:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	069b      	lsls	r3, r3, #26
 800373e:	429a      	cmp	r2, r3
 8003740:	d107      	bne.n	8003752 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003750:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003758:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	069b      	lsls	r3, r3, #26
 8003762:	429a      	cmp	r2, r3
 8003764:	d107      	bne.n	8003776 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003774:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800377c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	069b      	lsls	r3, r3, #26
 8003786:	429a      	cmp	r2, r3
 8003788:	d107      	bne.n	800379a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003798:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4618      	mov	r0, r3
 80037a0:	f7ff fb24 	bl	8002dec <LL_ADC_IsEnabled>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f040 820d 	bne.w	8003bc6 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6818      	ldr	r0, [r3, #0]
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	6819      	ldr	r1, [r3, #0]
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	461a      	mov	r2, r3
 80037ba:	f7ff fa75 	bl	8002ca8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	4a0c      	ldr	r2, [pc, #48]	; (80037f4 <HAL_ADC_ConfigChannel+0x290>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	f040 8133 	bne.w	8003a30 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d110      	bne.n	80037fc <HAL_ADC_ConfigChannel+0x298>
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	0e9b      	lsrs	r3, r3, #26
 80037e0:	3301      	adds	r3, #1
 80037e2:	f003 031f 	and.w	r3, r3, #31
 80037e6:	2b09      	cmp	r3, #9
 80037e8:	bf94      	ite	ls
 80037ea:	2301      	movls	r3, #1
 80037ec:	2300      	movhi	r3, #0
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	e01e      	b.n	8003830 <HAL_ADC_ConfigChannel+0x2cc>
 80037f2:	bf00      	nop
 80037f4:	47ff0000 	.word	0x47ff0000
 80037f8:	5c001000 	.word	0x5c001000
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003802:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003804:	fa93 f3a3 	rbit	r3, r3
 8003808:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800380a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800380c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800380e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003810:	2b00      	cmp	r3, #0
 8003812:	d101      	bne.n	8003818 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003814:	2320      	movs	r3, #32
 8003816:	e003      	b.n	8003820 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003818:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800381a:	fab3 f383 	clz	r3, r3
 800381e:	b2db      	uxtb	r3, r3
 8003820:	3301      	adds	r3, #1
 8003822:	f003 031f 	and.w	r3, r3, #31
 8003826:	2b09      	cmp	r3, #9
 8003828:	bf94      	ite	ls
 800382a:	2301      	movls	r3, #1
 800382c:	2300      	movhi	r3, #0
 800382e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003830:	2b00      	cmp	r3, #0
 8003832:	d079      	beq.n	8003928 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800383c:	2b00      	cmp	r3, #0
 800383e:	d107      	bne.n	8003850 <HAL_ADC_ConfigChannel+0x2ec>
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	0e9b      	lsrs	r3, r3, #26
 8003846:	3301      	adds	r3, #1
 8003848:	069b      	lsls	r3, r3, #26
 800384a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800384e:	e015      	b.n	800387c <HAL_ADC_ConfigChannel+0x318>
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003858:	fa93 f3a3 	rbit	r3, r3
 800385c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800385e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003860:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003862:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003864:	2b00      	cmp	r3, #0
 8003866:	d101      	bne.n	800386c <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8003868:	2320      	movs	r3, #32
 800386a:	e003      	b.n	8003874 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800386c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800386e:	fab3 f383 	clz	r3, r3
 8003872:	b2db      	uxtb	r3, r3
 8003874:	3301      	adds	r3, #1
 8003876:	069b      	lsls	r3, r3, #26
 8003878:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003884:	2b00      	cmp	r3, #0
 8003886:	d109      	bne.n	800389c <HAL_ADC_ConfigChannel+0x338>
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	0e9b      	lsrs	r3, r3, #26
 800388e:	3301      	adds	r3, #1
 8003890:	f003 031f 	and.w	r3, r3, #31
 8003894:	2101      	movs	r1, #1
 8003896:	fa01 f303 	lsl.w	r3, r1, r3
 800389a:	e017      	b.n	80038cc <HAL_ADC_ConfigChannel+0x368>
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038a4:	fa93 f3a3 	rbit	r3, r3
 80038a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80038aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ac:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80038ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d101      	bne.n	80038b8 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80038b4:	2320      	movs	r3, #32
 80038b6:	e003      	b.n	80038c0 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80038b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038ba:	fab3 f383 	clz	r3, r3
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	3301      	adds	r3, #1
 80038c2:	f003 031f 	and.w	r3, r3, #31
 80038c6:	2101      	movs	r1, #1
 80038c8:	fa01 f303 	lsl.w	r3, r1, r3
 80038cc:	ea42 0103 	orr.w	r1, r2, r3
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d10a      	bne.n	80038f2 <HAL_ADC_ConfigChannel+0x38e>
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	0e9b      	lsrs	r3, r3, #26
 80038e2:	3301      	adds	r3, #1
 80038e4:	f003 021f 	and.w	r2, r3, #31
 80038e8:	4613      	mov	r3, r2
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	4413      	add	r3, r2
 80038ee:	051b      	lsls	r3, r3, #20
 80038f0:	e018      	b.n	8003924 <HAL_ADC_ConfigChannel+0x3c0>
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038fa:	fa93 f3a3 	rbit	r3, r3
 80038fe:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003902:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800390a:	2320      	movs	r3, #32
 800390c:	e003      	b.n	8003916 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800390e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003910:	fab3 f383 	clz	r3, r3
 8003914:	b2db      	uxtb	r3, r3
 8003916:	3301      	adds	r3, #1
 8003918:	f003 021f 	and.w	r2, r3, #31
 800391c:	4613      	mov	r3, r2
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	4413      	add	r3, r2
 8003922:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003924:	430b      	orrs	r3, r1
 8003926:	e07e      	b.n	8003a26 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003930:	2b00      	cmp	r3, #0
 8003932:	d107      	bne.n	8003944 <HAL_ADC_ConfigChannel+0x3e0>
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	0e9b      	lsrs	r3, r3, #26
 800393a:	3301      	adds	r3, #1
 800393c:	069b      	lsls	r3, r3, #26
 800393e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003942:	e015      	b.n	8003970 <HAL_ADC_ConfigChannel+0x40c>
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394c:	fa93 f3a3 	rbit	r3, r3
 8003950:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003954:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003958:	2b00      	cmp	r3, #0
 800395a:	d101      	bne.n	8003960 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800395c:	2320      	movs	r3, #32
 800395e:	e003      	b.n	8003968 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003962:	fab3 f383 	clz	r3, r3
 8003966:	b2db      	uxtb	r3, r3
 8003968:	3301      	adds	r3, #1
 800396a:	069b      	lsls	r3, r3, #26
 800396c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003978:	2b00      	cmp	r3, #0
 800397a:	d109      	bne.n	8003990 <HAL_ADC_ConfigChannel+0x42c>
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	0e9b      	lsrs	r3, r3, #26
 8003982:	3301      	adds	r3, #1
 8003984:	f003 031f 	and.w	r3, r3, #31
 8003988:	2101      	movs	r1, #1
 800398a:	fa01 f303 	lsl.w	r3, r1, r3
 800398e:	e017      	b.n	80039c0 <HAL_ADC_ConfigChannel+0x45c>
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	fa93 f3a3 	rbit	r3, r3
 800399c:	61bb      	str	r3, [r7, #24]
  return result;
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80039a2:	6a3b      	ldr	r3, [r7, #32]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d101      	bne.n	80039ac <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80039a8:	2320      	movs	r3, #32
 80039aa:	e003      	b.n	80039b4 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80039ac:	6a3b      	ldr	r3, [r7, #32]
 80039ae:	fab3 f383 	clz	r3, r3
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	3301      	adds	r3, #1
 80039b6:	f003 031f 	and.w	r3, r3, #31
 80039ba:	2101      	movs	r1, #1
 80039bc:	fa01 f303 	lsl.w	r3, r1, r3
 80039c0:	ea42 0103 	orr.w	r1, r2, r3
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10d      	bne.n	80039ec <HAL_ADC_ConfigChannel+0x488>
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	0e9b      	lsrs	r3, r3, #26
 80039d6:	3301      	adds	r3, #1
 80039d8:	f003 021f 	and.w	r2, r3, #31
 80039dc:	4613      	mov	r3, r2
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	4413      	add	r3, r2
 80039e2:	3b1e      	subs	r3, #30
 80039e4:	051b      	lsls	r3, r3, #20
 80039e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80039ea:	e01b      	b.n	8003a24 <HAL_ADC_ConfigChannel+0x4c0>
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	fa93 f3a3 	rbit	r3, r3
 80039f8:	60fb      	str	r3, [r7, #12]
  return result;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d101      	bne.n	8003a08 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003a04:	2320      	movs	r3, #32
 8003a06:	e003      	b.n	8003a10 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	fab3 f383 	clz	r3, r3
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	3301      	adds	r3, #1
 8003a12:	f003 021f 	and.w	r2, r3, #31
 8003a16:	4613      	mov	r3, r2
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	4413      	add	r3, r2
 8003a1c:	3b1e      	subs	r3, #30
 8003a1e:	051b      	lsls	r3, r3, #20
 8003a20:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a24:	430b      	orrs	r3, r1
 8003a26:	683a      	ldr	r2, [r7, #0]
 8003a28:	6892      	ldr	r2, [r2, #8]
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	f7ff f911 	bl	8002c52 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f280 80c6 	bge.w	8003bc6 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a67      	ldr	r2, [pc, #412]	; (8003bdc <HAL_ADC_ConfigChannel+0x678>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d004      	beq.n	8003a4e <HAL_ADC_ConfigChannel+0x4ea>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a65      	ldr	r2, [pc, #404]	; (8003be0 <HAL_ADC_ConfigChannel+0x67c>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d101      	bne.n	8003a52 <HAL_ADC_ConfigChannel+0x4ee>
 8003a4e:	4b65      	ldr	r3, [pc, #404]	; (8003be4 <HAL_ADC_ConfigChannel+0x680>)
 8003a50:	e000      	b.n	8003a54 <HAL_ADC_ConfigChannel+0x4f0>
 8003a52:	4b65      	ldr	r3, [pc, #404]	; (8003be8 <HAL_ADC_ConfigChannel+0x684>)
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7ff f85b 	bl	8002b10 <LL_ADC_GetCommonPathInternalCh>
 8003a5a:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a5e      	ldr	r2, [pc, #376]	; (8003bdc <HAL_ADC_ConfigChannel+0x678>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d004      	beq.n	8003a70 <HAL_ADC_ConfigChannel+0x50c>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a5d      	ldr	r2, [pc, #372]	; (8003be0 <HAL_ADC_ConfigChannel+0x67c>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d10e      	bne.n	8003a8e <HAL_ADC_ConfigChannel+0x52a>
 8003a70:	485a      	ldr	r0, [pc, #360]	; (8003bdc <HAL_ADC_ConfigChannel+0x678>)
 8003a72:	f7ff f9bb 	bl	8002dec <LL_ADC_IsEnabled>
 8003a76:	4604      	mov	r4, r0
 8003a78:	4859      	ldr	r0, [pc, #356]	; (8003be0 <HAL_ADC_ConfigChannel+0x67c>)
 8003a7a:	f7ff f9b7 	bl	8002dec <LL_ADC_IsEnabled>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	4323      	orrs	r3, r4
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	bf0c      	ite	eq
 8003a86:	2301      	moveq	r3, #1
 8003a88:	2300      	movne	r3, #0
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	e008      	b.n	8003aa0 <HAL_ADC_ConfigChannel+0x53c>
 8003a8e:	4857      	ldr	r0, [pc, #348]	; (8003bec <HAL_ADC_ConfigChannel+0x688>)
 8003a90:	f7ff f9ac 	bl	8002dec <LL_ADC_IsEnabled>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	bf0c      	ite	eq
 8003a9a:	2301      	moveq	r3, #1
 8003a9c:	2300      	movne	r3, #0
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d07d      	beq.n	8003ba0 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a51      	ldr	r2, [pc, #324]	; (8003bf0 <HAL_ADC_ConfigChannel+0x68c>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d130      	bne.n	8003b10 <HAL_ADC_ConfigChannel+0x5ac>
 8003aae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ab0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d12b      	bne.n	8003b10 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a4b      	ldr	r2, [pc, #300]	; (8003bec <HAL_ADC_ConfigChannel+0x688>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	f040 8081 	bne.w	8003bc6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a44      	ldr	r2, [pc, #272]	; (8003bdc <HAL_ADC_ConfigChannel+0x678>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d004      	beq.n	8003ad8 <HAL_ADC_ConfigChannel+0x574>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a43      	ldr	r2, [pc, #268]	; (8003be0 <HAL_ADC_ConfigChannel+0x67c>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d101      	bne.n	8003adc <HAL_ADC_ConfigChannel+0x578>
 8003ad8:	4a42      	ldr	r2, [pc, #264]	; (8003be4 <HAL_ADC_ConfigChannel+0x680>)
 8003ada:	e000      	b.n	8003ade <HAL_ADC_ConfigChannel+0x57a>
 8003adc:	4a42      	ldr	r2, [pc, #264]	; (8003be8 <HAL_ADC_ConfigChannel+0x684>)
 8003ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ae0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	4610      	mov	r0, r2
 8003ae8:	f7fe ffff 	bl	8002aea <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003aec:	4b41      	ldr	r3, [pc, #260]	; (8003bf4 <HAL_ADC_ConfigChannel+0x690>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	099b      	lsrs	r3, r3, #6
 8003af2:	4a41      	ldr	r2, [pc, #260]	; (8003bf8 <HAL_ADC_ConfigChannel+0x694>)
 8003af4:	fba2 2303 	umull	r2, r3, r2, r3
 8003af8:	099b      	lsrs	r3, r3, #6
 8003afa:	3301      	adds	r3, #1
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003b00:	e002      	b.n	8003b08 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	3b01      	subs	r3, #1
 8003b06:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1f9      	bne.n	8003b02 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b0e:	e05a      	b.n	8003bc6 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a39      	ldr	r2, [pc, #228]	; (8003bfc <HAL_ADC_ConfigChannel+0x698>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d11e      	bne.n	8003b58 <HAL_ADC_ConfigChannel+0x5f4>
 8003b1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d119      	bne.n	8003b58 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a30      	ldr	r2, [pc, #192]	; (8003bec <HAL_ADC_ConfigChannel+0x688>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d14b      	bne.n	8003bc6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a2a      	ldr	r2, [pc, #168]	; (8003bdc <HAL_ADC_ConfigChannel+0x678>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d004      	beq.n	8003b42 <HAL_ADC_ConfigChannel+0x5de>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a28      	ldr	r2, [pc, #160]	; (8003be0 <HAL_ADC_ConfigChannel+0x67c>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d101      	bne.n	8003b46 <HAL_ADC_ConfigChannel+0x5e2>
 8003b42:	4a28      	ldr	r2, [pc, #160]	; (8003be4 <HAL_ADC_ConfigChannel+0x680>)
 8003b44:	e000      	b.n	8003b48 <HAL_ADC_ConfigChannel+0x5e4>
 8003b46:	4a28      	ldr	r2, [pc, #160]	; (8003be8 <HAL_ADC_ConfigChannel+0x684>)
 8003b48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b4e:	4619      	mov	r1, r3
 8003b50:	4610      	mov	r0, r2
 8003b52:	f7fe ffca 	bl	8002aea <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b56:	e036      	b.n	8003bc6 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a28      	ldr	r2, [pc, #160]	; (8003c00 <HAL_ADC_ConfigChannel+0x69c>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d131      	bne.n	8003bc6 <HAL_ADC_ConfigChannel+0x662>
 8003b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d12c      	bne.n	8003bc6 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a1e      	ldr	r2, [pc, #120]	; (8003bec <HAL_ADC_ConfigChannel+0x688>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d127      	bne.n	8003bc6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a18      	ldr	r2, [pc, #96]	; (8003bdc <HAL_ADC_ConfigChannel+0x678>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d004      	beq.n	8003b8a <HAL_ADC_ConfigChannel+0x626>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a16      	ldr	r2, [pc, #88]	; (8003be0 <HAL_ADC_ConfigChannel+0x67c>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d101      	bne.n	8003b8e <HAL_ADC_ConfigChannel+0x62a>
 8003b8a:	4a16      	ldr	r2, [pc, #88]	; (8003be4 <HAL_ADC_ConfigChannel+0x680>)
 8003b8c:	e000      	b.n	8003b90 <HAL_ADC_ConfigChannel+0x62c>
 8003b8e:	4a16      	ldr	r2, [pc, #88]	; (8003be8 <HAL_ADC_ConfigChannel+0x684>)
 8003b90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b92:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b96:	4619      	mov	r1, r3
 8003b98:	4610      	mov	r0, r2
 8003b9a:	f7fe ffa6 	bl	8002aea <LL_ADC_SetCommonPathInternalCh>
 8003b9e:	e012      	b.n	8003bc6 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba4:	f043 0220 	orr.w	r2, r3, #32
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003bb2:	e008      	b.n	8003bc6 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb8:	f043 0220 	orr.w	r2, r3, #32
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003bce:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3784      	adds	r7, #132	; 0x84
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd90      	pop	{r4, r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	40022000 	.word	0x40022000
 8003be0:	40022100 	.word	0x40022100
 8003be4:	40022300 	.word	0x40022300
 8003be8:	58026300 	.word	0x58026300
 8003bec:	58026000 	.word	0x58026000
 8003bf0:	cb840000 	.word	0xcb840000
 8003bf4:	24000000 	.word	0x24000000
 8003bf8:	053e2d63 	.word	0x053e2d63
 8003bfc:	c7520000 	.word	0xc7520000
 8003c00:	cfb80000 	.word	0xcfb80000

08003c04 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4618      	mov	r0, r3
 8003c12:	f7ff f8eb 	bl	8002dec <LL_ADC_IsEnabled>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d16e      	bne.n	8003cfa <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	689a      	ldr	r2, [r3, #8]
 8003c22:	4b38      	ldr	r3, [pc, #224]	; (8003d04 <ADC_Enable+0x100>)
 8003c24:	4013      	ands	r3, r2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00d      	beq.n	8003c46 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c2e:	f043 0210 	orr.w	r2, r3, #16
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c3a:	f043 0201 	orr.w	r2, r3, #1
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e05a      	b.n	8003cfc <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7ff f8ba 	bl	8002dc4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003c50:	f7fe fefc 	bl	8002a4c <HAL_GetTick>
 8003c54:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a2b      	ldr	r2, [pc, #172]	; (8003d08 <ADC_Enable+0x104>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d004      	beq.n	8003c6a <ADC_Enable+0x66>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a29      	ldr	r2, [pc, #164]	; (8003d0c <ADC_Enable+0x108>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d101      	bne.n	8003c6e <ADC_Enable+0x6a>
 8003c6a:	4b29      	ldr	r3, [pc, #164]	; (8003d10 <ADC_Enable+0x10c>)
 8003c6c:	e000      	b.n	8003c70 <ADC_Enable+0x6c>
 8003c6e:	4b29      	ldr	r3, [pc, #164]	; (8003d14 <ADC_Enable+0x110>)
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7ff f83d 	bl	8002cf0 <LL_ADC_GetMultimode>
 8003c76:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a23      	ldr	r2, [pc, #140]	; (8003d0c <ADC_Enable+0x108>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d002      	beq.n	8003c88 <ADC_Enable+0x84>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	e000      	b.n	8003c8a <ADC_Enable+0x86>
 8003c88:	4b1f      	ldr	r3, [pc, #124]	; (8003d08 <ADC_Enable+0x104>)
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	6812      	ldr	r2, [r2, #0]
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d02c      	beq.n	8003cec <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d130      	bne.n	8003cfa <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c98:	e028      	b.n	8003cec <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7ff f8a4 	bl	8002dec <LL_ADC_IsEnabled>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d104      	bne.n	8003cb4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7ff f888 	bl	8002dc4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003cb4:	f7fe feca 	bl	8002a4c <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d914      	bls.n	8003cec <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0301 	and.w	r3, r3, #1
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d00d      	beq.n	8003cec <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd4:	f043 0210 	orr.w	r2, r3, #16
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce0:	f043 0201 	orr.w	r2, r3, #1
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e007      	b.n	8003cfc <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d1cf      	bne.n	8003c9a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3710      	adds	r7, #16
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	8000003f 	.word	0x8000003f
 8003d08:	40022000 	.word	0x40022000
 8003d0c:	40022100 	.word	0x40022100
 8003d10:	40022300 	.word	0x40022300
 8003d14:	58026300 	.word	0x58026300

08003d18 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a7a      	ldr	r2, [pc, #488]	; (8003f10 <ADC_ConfigureBoostMode+0x1f8>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d004      	beq.n	8003d34 <ADC_ConfigureBoostMode+0x1c>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a79      	ldr	r2, [pc, #484]	; (8003f14 <ADC_ConfigureBoostMode+0x1fc>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d109      	bne.n	8003d48 <ADC_ConfigureBoostMode+0x30>
 8003d34:	4b78      	ldr	r3, [pc, #480]	; (8003f18 <ADC_ConfigureBoostMode+0x200>)
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	bf14      	ite	ne
 8003d40:	2301      	movne	r3, #1
 8003d42:	2300      	moveq	r3, #0
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	e008      	b.n	8003d5a <ADC_ConfigureBoostMode+0x42>
 8003d48:	4b74      	ldr	r3, [pc, #464]	; (8003f1c <ADC_ConfigureBoostMode+0x204>)
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	bf14      	ite	ne
 8003d54:	2301      	movne	r3, #1
 8003d56:	2300      	moveq	r3, #0
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d01c      	beq.n	8003d98 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003d5e:	f004 f825 	bl	8007dac <HAL_RCC_GetHCLKFreq>
 8003d62:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d6c:	d010      	beq.n	8003d90 <ADC_ConfigureBoostMode+0x78>
 8003d6e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d72:	d873      	bhi.n	8003e5c <ADC_ConfigureBoostMode+0x144>
 8003d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d78:	d002      	beq.n	8003d80 <ADC_ConfigureBoostMode+0x68>
 8003d7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d7e:	d16d      	bne.n	8003e5c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	0c1b      	lsrs	r3, r3, #16
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d8c:	60fb      	str	r3, [r7, #12]
        break;
 8003d8e:	e068      	b.n	8003e62 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	089b      	lsrs	r3, r3, #2
 8003d94:	60fb      	str	r3, [r7, #12]
        break;
 8003d96:	e064      	b.n	8003e62 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003d98:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003d9c:	f04f 0100 	mov.w	r1, #0
 8003da0:	f005 faac 	bl	80092fc <HAL_RCCEx_GetPeriphCLKFreq>
 8003da4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003dae:	d051      	beq.n	8003e54 <ADC_ConfigureBoostMode+0x13c>
 8003db0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003db4:	d854      	bhi.n	8003e60 <ADC_ConfigureBoostMode+0x148>
 8003db6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003dba:	d047      	beq.n	8003e4c <ADC_ConfigureBoostMode+0x134>
 8003dbc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003dc0:	d84e      	bhi.n	8003e60 <ADC_ConfigureBoostMode+0x148>
 8003dc2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003dc6:	d03d      	beq.n	8003e44 <ADC_ConfigureBoostMode+0x12c>
 8003dc8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003dcc:	d848      	bhi.n	8003e60 <ADC_ConfigureBoostMode+0x148>
 8003dce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003dd2:	d033      	beq.n	8003e3c <ADC_ConfigureBoostMode+0x124>
 8003dd4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003dd8:	d842      	bhi.n	8003e60 <ADC_ConfigureBoostMode+0x148>
 8003dda:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003dde:	d029      	beq.n	8003e34 <ADC_ConfigureBoostMode+0x11c>
 8003de0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003de4:	d83c      	bhi.n	8003e60 <ADC_ConfigureBoostMode+0x148>
 8003de6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003dea:	d01a      	beq.n	8003e22 <ADC_ConfigureBoostMode+0x10a>
 8003dec:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003df0:	d836      	bhi.n	8003e60 <ADC_ConfigureBoostMode+0x148>
 8003df2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003df6:	d014      	beq.n	8003e22 <ADC_ConfigureBoostMode+0x10a>
 8003df8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003dfc:	d830      	bhi.n	8003e60 <ADC_ConfigureBoostMode+0x148>
 8003dfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e02:	d00e      	beq.n	8003e22 <ADC_ConfigureBoostMode+0x10a>
 8003e04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e08:	d82a      	bhi.n	8003e60 <ADC_ConfigureBoostMode+0x148>
 8003e0a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003e0e:	d008      	beq.n	8003e22 <ADC_ConfigureBoostMode+0x10a>
 8003e10:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003e14:	d824      	bhi.n	8003e60 <ADC_ConfigureBoostMode+0x148>
 8003e16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e1a:	d002      	beq.n	8003e22 <ADC_ConfigureBoostMode+0x10a>
 8003e1c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003e20:	d11e      	bne.n	8003e60 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	0c9b      	lsrs	r3, r3, #18
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e30:	60fb      	str	r3, [r7, #12]
        break;
 8003e32:	e016      	b.n	8003e62 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	091b      	lsrs	r3, r3, #4
 8003e38:	60fb      	str	r3, [r7, #12]
        break;
 8003e3a:	e012      	b.n	8003e62 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	095b      	lsrs	r3, r3, #5
 8003e40:	60fb      	str	r3, [r7, #12]
        break;
 8003e42:	e00e      	b.n	8003e62 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	099b      	lsrs	r3, r3, #6
 8003e48:	60fb      	str	r3, [r7, #12]
        break;
 8003e4a:	e00a      	b.n	8003e62 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	09db      	lsrs	r3, r3, #7
 8003e50:	60fb      	str	r3, [r7, #12]
        break;
 8003e52:	e006      	b.n	8003e62 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	0a1b      	lsrs	r3, r3, #8
 8003e58:	60fb      	str	r3, [r7, #12]
        break;
 8003e5a:	e002      	b.n	8003e62 <ADC_ConfigureBoostMode+0x14a>
        break;
 8003e5c:	bf00      	nop
 8003e5e:	e000      	b.n	8003e62 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003e60:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003e62:	f7fe fe23 	bl	8002aac <HAL_GetREVID>
 8003e66:	4603      	mov	r3, r0
 8003e68:	f241 0203 	movw	r2, #4099	; 0x1003
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d815      	bhi.n	8003e9c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	4a2b      	ldr	r2, [pc, #172]	; (8003f20 <ADC_ConfigureBoostMode+0x208>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d908      	bls.n	8003e8a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	689a      	ldr	r2, [r3, #8]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e86:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003e88:	e03e      	b.n	8003f08 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e98:	609a      	str	r2, [r3, #8]
}
 8003e9a:	e035      	b.n	8003f08 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	085b      	lsrs	r3, r3, #1
 8003ea0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	4a1f      	ldr	r2, [pc, #124]	; (8003f24 <ADC_ConfigureBoostMode+0x20c>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d808      	bhi.n	8003ebc <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	689a      	ldr	r2, [r3, #8]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003eb8:	609a      	str	r2, [r3, #8]
}
 8003eba:	e025      	b.n	8003f08 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4a1a      	ldr	r2, [pc, #104]	; (8003f28 <ADC_ConfigureBoostMode+0x210>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d80a      	bhi.n	8003eda <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ed6:	609a      	str	r2, [r3, #8]
}
 8003ed8:	e016      	b.n	8003f08 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	4a13      	ldr	r2, [pc, #76]	; (8003f2c <ADC_ConfigureBoostMode+0x214>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d80a      	bhi.n	8003ef8 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ef4:	609a      	str	r2, [r3, #8]
}
 8003ef6:	e007      	b.n	8003f08 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	689a      	ldr	r2, [r3, #8]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003f06:	609a      	str	r2, [r3, #8]
}
 8003f08:	bf00      	nop
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	40022000 	.word	0x40022000
 8003f14:	40022100 	.word	0x40022100
 8003f18:	40022300 	.word	0x40022300
 8003f1c:	58026300 	.word	0x58026300
 8003f20:	01312d00 	.word	0x01312d00
 8003f24:	005f5e10 	.word	0x005f5e10
 8003f28:	00bebc20 	.word	0x00bebc20
 8003f2c:	017d7840 	.word	0x017d7840

08003f30 <LL_ADC_IsEnabled>:
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d101      	bne.n	8003f48 <LL_ADC_IsEnabled+0x18>
 8003f44:	2301      	movs	r3, #1
 8003f46:	e000      	b.n	8003f4a <LL_ADC_IsEnabled+0x1a>
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr

08003f56 <LL_ADC_REG_IsConversionOngoing>:
{
 8003f56:	b480      	push	{r7}
 8003f58:	b083      	sub	sp, #12
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f003 0304 	and.w	r3, r3, #4
 8003f66:	2b04      	cmp	r3, #4
 8003f68:	d101      	bne.n	8003f6e <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e000      	b.n	8003f70 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003f7c:	b590      	push	{r4, r7, lr}
 8003f7e:	b09f      	sub	sp, #124	; 0x7c
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f86:	2300      	movs	r3, #0
 8003f88:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d101      	bne.n	8003f9a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003f96:	2302      	movs	r3, #2
 8003f98:	e0be      	b.n	8004118 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a5c      	ldr	r2, [pc, #368]	; (8004120 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d102      	bne.n	8003fba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003fb4:	4b5b      	ldr	r3, [pc, #364]	; (8004124 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003fb6:	60bb      	str	r3, [r7, #8]
 8003fb8:	e001      	b.n	8003fbe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003fba:	2300      	movs	r3, #0
 8003fbc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d10b      	bne.n	8003fdc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc8:	f043 0220 	orr.w	r2, r3, #32
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e09d      	b.n	8004118 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7ff ffb9 	bl	8003f56 <LL_ADC_REG_IsConversionOngoing>
 8003fe4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7ff ffb3 	bl	8003f56 <LL_ADC_REG_IsConversionOngoing>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d17f      	bne.n	80040f6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003ff6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d17c      	bne.n	80040f6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a47      	ldr	r2, [pc, #284]	; (8004120 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d004      	beq.n	8004010 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a46      	ldr	r2, [pc, #280]	; (8004124 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d101      	bne.n	8004014 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004010:	4b45      	ldr	r3, [pc, #276]	; (8004128 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004012:	e000      	b.n	8004016 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004014:	4b45      	ldr	r3, [pc, #276]	; (800412c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004016:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d039      	beq.n	8004094 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	431a      	orrs	r2, r3
 800402e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004030:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a3a      	ldr	r2, [pc, #232]	; (8004120 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d004      	beq.n	8004046 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a38      	ldr	r2, [pc, #224]	; (8004124 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d10e      	bne.n	8004064 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004046:	4836      	ldr	r0, [pc, #216]	; (8004120 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004048:	f7ff ff72 	bl	8003f30 <LL_ADC_IsEnabled>
 800404c:	4604      	mov	r4, r0
 800404e:	4835      	ldr	r0, [pc, #212]	; (8004124 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004050:	f7ff ff6e 	bl	8003f30 <LL_ADC_IsEnabled>
 8004054:	4603      	mov	r3, r0
 8004056:	4323      	orrs	r3, r4
 8004058:	2b00      	cmp	r3, #0
 800405a:	bf0c      	ite	eq
 800405c:	2301      	moveq	r3, #1
 800405e:	2300      	movne	r3, #0
 8004060:	b2db      	uxtb	r3, r3
 8004062:	e008      	b.n	8004076 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004064:	4832      	ldr	r0, [pc, #200]	; (8004130 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004066:	f7ff ff63 	bl	8003f30 <LL_ADC_IsEnabled>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	bf0c      	ite	eq
 8004070:	2301      	moveq	r3, #1
 8004072:	2300      	movne	r3, #0
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d047      	beq.n	800410a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800407a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800407c:	689a      	ldr	r2, [r3, #8]
 800407e:	4b2d      	ldr	r3, [pc, #180]	; (8004134 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004080:	4013      	ands	r3, r2
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	6811      	ldr	r1, [r2, #0]
 8004086:	683a      	ldr	r2, [r7, #0]
 8004088:	6892      	ldr	r2, [r2, #8]
 800408a:	430a      	orrs	r2, r1
 800408c:	431a      	orrs	r2, r3
 800408e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004090:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004092:	e03a      	b.n	800410a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004094:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800409c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800409e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a1e      	ldr	r2, [pc, #120]	; (8004120 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d004      	beq.n	80040b4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a1d      	ldr	r2, [pc, #116]	; (8004124 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d10e      	bne.n	80040d2 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80040b4:	481a      	ldr	r0, [pc, #104]	; (8004120 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80040b6:	f7ff ff3b 	bl	8003f30 <LL_ADC_IsEnabled>
 80040ba:	4604      	mov	r4, r0
 80040bc:	4819      	ldr	r0, [pc, #100]	; (8004124 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80040be:	f7ff ff37 	bl	8003f30 <LL_ADC_IsEnabled>
 80040c2:	4603      	mov	r3, r0
 80040c4:	4323      	orrs	r3, r4
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	bf0c      	ite	eq
 80040ca:	2301      	moveq	r3, #1
 80040cc:	2300      	movne	r3, #0
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	e008      	b.n	80040e4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80040d2:	4817      	ldr	r0, [pc, #92]	; (8004130 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80040d4:	f7ff ff2c 	bl	8003f30 <LL_ADC_IsEnabled>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	bf0c      	ite	eq
 80040de:	2301      	moveq	r3, #1
 80040e0:	2300      	movne	r3, #0
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d010      	beq.n	800410a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80040e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ea:	689a      	ldr	r2, [r3, #8]
 80040ec:	4b11      	ldr	r3, [pc, #68]	; (8004134 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80040ee:	4013      	ands	r3, r2
 80040f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80040f2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80040f4:	e009      	b.n	800410a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040fa:	f043 0220 	orr.w	r2, r3, #32
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004108:	e000      	b.n	800410c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800410a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004114:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004118:	4618      	mov	r0, r3
 800411a:	377c      	adds	r7, #124	; 0x7c
 800411c:	46bd      	mov	sp, r7
 800411e:	bd90      	pop	{r4, r7, pc}
 8004120:	40022000 	.word	0x40022000
 8004124:	40022100 	.word	0x40022100
 8004128:	40022300 	.word	0x40022300
 800412c:	58026300 	.word	0x58026300
 8004130:	58026000 	.word	0x58026000
 8004134:	fffff0e0 	.word	0xfffff0e0

08004138 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004138:	b480      	push	{r7}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f003 0307 	and.w	r3, r3, #7
 8004146:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004148:	4b0b      	ldr	r3, [pc, #44]	; (8004178 <__NVIC_SetPriorityGrouping+0x40>)
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800414e:	68ba      	ldr	r2, [r7, #8]
 8004150:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004154:	4013      	ands	r3, r2
 8004156:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004160:	4b06      	ldr	r3, [pc, #24]	; (800417c <__NVIC_SetPriorityGrouping+0x44>)
 8004162:	4313      	orrs	r3, r2
 8004164:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004166:	4a04      	ldr	r2, [pc, #16]	; (8004178 <__NVIC_SetPriorityGrouping+0x40>)
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	60d3      	str	r3, [r2, #12]
}
 800416c:	bf00      	nop
 800416e:	3714      	adds	r7, #20
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr
 8004178:	e000ed00 	.word	0xe000ed00
 800417c:	05fa0000 	.word	0x05fa0000

08004180 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004180:	b480      	push	{r7}
 8004182:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004184:	4b04      	ldr	r3, [pc, #16]	; (8004198 <__NVIC_GetPriorityGrouping+0x18>)
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	0a1b      	lsrs	r3, r3, #8
 800418a:	f003 0307 	and.w	r3, r3, #7
}
 800418e:	4618      	mov	r0, r3
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr
 8004198:	e000ed00 	.word	0xe000ed00

0800419c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	4603      	mov	r3, r0
 80041a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80041a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	db0b      	blt.n	80041c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041ae:	88fb      	ldrh	r3, [r7, #6]
 80041b0:	f003 021f 	and.w	r2, r3, #31
 80041b4:	4907      	ldr	r1, [pc, #28]	; (80041d4 <__NVIC_EnableIRQ+0x38>)
 80041b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041ba:	095b      	lsrs	r3, r3, #5
 80041bc:	2001      	movs	r0, #1
 80041be:	fa00 f202 	lsl.w	r2, r0, r2
 80041c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80041c6:	bf00      	nop
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	e000e100 	.word	0xe000e100

080041d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	4603      	mov	r3, r0
 80041e0:	6039      	str	r1, [r7, #0]
 80041e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80041e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	db0a      	blt.n	8004202 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	b2da      	uxtb	r2, r3
 80041f0:	490c      	ldr	r1, [pc, #48]	; (8004224 <__NVIC_SetPriority+0x4c>)
 80041f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041f6:	0112      	lsls	r2, r2, #4
 80041f8:	b2d2      	uxtb	r2, r2
 80041fa:	440b      	add	r3, r1
 80041fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004200:	e00a      	b.n	8004218 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	b2da      	uxtb	r2, r3
 8004206:	4908      	ldr	r1, [pc, #32]	; (8004228 <__NVIC_SetPriority+0x50>)
 8004208:	88fb      	ldrh	r3, [r7, #6]
 800420a:	f003 030f 	and.w	r3, r3, #15
 800420e:	3b04      	subs	r3, #4
 8004210:	0112      	lsls	r2, r2, #4
 8004212:	b2d2      	uxtb	r2, r2
 8004214:	440b      	add	r3, r1
 8004216:	761a      	strb	r2, [r3, #24]
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr
 8004224:	e000e100 	.word	0xe000e100
 8004228:	e000ed00 	.word	0xe000ed00

0800422c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800422c:	b480      	push	{r7}
 800422e:	b089      	sub	sp, #36	; 0x24
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f003 0307 	and.w	r3, r3, #7
 800423e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	f1c3 0307 	rsb	r3, r3, #7
 8004246:	2b04      	cmp	r3, #4
 8004248:	bf28      	it	cs
 800424a:	2304      	movcs	r3, #4
 800424c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	3304      	adds	r3, #4
 8004252:	2b06      	cmp	r3, #6
 8004254:	d902      	bls.n	800425c <NVIC_EncodePriority+0x30>
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	3b03      	subs	r3, #3
 800425a:	e000      	b.n	800425e <NVIC_EncodePriority+0x32>
 800425c:	2300      	movs	r3, #0
 800425e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004260:	f04f 32ff 	mov.w	r2, #4294967295
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	fa02 f303 	lsl.w	r3, r2, r3
 800426a:	43da      	mvns	r2, r3
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	401a      	ands	r2, r3
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004274:	f04f 31ff 	mov.w	r1, #4294967295
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	fa01 f303 	lsl.w	r3, r1, r3
 800427e:	43d9      	mvns	r1, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004284:	4313      	orrs	r3, r2
         );
}
 8004286:	4618      	mov	r0, r3
 8004288:	3724      	adds	r7, #36	; 0x24
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr

08004292 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b082      	sub	sp, #8
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f7ff ff4c 	bl	8004138 <__NVIC_SetPriorityGrouping>
}
 80042a0:	bf00      	nop
 80042a2:	3708      	adds	r7, #8
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b086      	sub	sp, #24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	4603      	mov	r3, r0
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
 80042b4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80042b6:	f7ff ff63 	bl	8004180 <__NVIC_GetPriorityGrouping>
 80042ba:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	68b9      	ldr	r1, [r7, #8]
 80042c0:	6978      	ldr	r0, [r7, #20]
 80042c2:	f7ff ffb3 	bl	800422c <NVIC_EncodePriority>
 80042c6:	4602      	mov	r2, r0
 80042c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80042cc:	4611      	mov	r1, r2
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7ff ff82 	bl	80041d8 <__NVIC_SetPriority>
}
 80042d4:	bf00      	nop
 80042d6:	3718      	adds	r7, #24
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	4603      	mov	r3, r0
 80042e4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7ff ff56 	bl	800419c <__NVIC_EnableIRQ>
}
 80042f0:	bf00      	nop
 80042f2:	3708      	adds	r7, #8
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b086      	sub	sp, #24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004300:	f7fe fba4 	bl	8002a4c <HAL_GetTick>
 8004304:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e316      	b.n	800493e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a66      	ldr	r2, [pc, #408]	; (80044b0 <HAL_DMA_Init+0x1b8>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d04a      	beq.n	80043b0 <HAL_DMA_Init+0xb8>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a65      	ldr	r2, [pc, #404]	; (80044b4 <HAL_DMA_Init+0x1bc>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d045      	beq.n	80043b0 <HAL_DMA_Init+0xb8>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a63      	ldr	r2, [pc, #396]	; (80044b8 <HAL_DMA_Init+0x1c0>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d040      	beq.n	80043b0 <HAL_DMA_Init+0xb8>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a62      	ldr	r2, [pc, #392]	; (80044bc <HAL_DMA_Init+0x1c4>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d03b      	beq.n	80043b0 <HAL_DMA_Init+0xb8>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a60      	ldr	r2, [pc, #384]	; (80044c0 <HAL_DMA_Init+0x1c8>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d036      	beq.n	80043b0 <HAL_DMA_Init+0xb8>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a5f      	ldr	r2, [pc, #380]	; (80044c4 <HAL_DMA_Init+0x1cc>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d031      	beq.n	80043b0 <HAL_DMA_Init+0xb8>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a5d      	ldr	r2, [pc, #372]	; (80044c8 <HAL_DMA_Init+0x1d0>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d02c      	beq.n	80043b0 <HAL_DMA_Init+0xb8>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a5c      	ldr	r2, [pc, #368]	; (80044cc <HAL_DMA_Init+0x1d4>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d027      	beq.n	80043b0 <HAL_DMA_Init+0xb8>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a5a      	ldr	r2, [pc, #360]	; (80044d0 <HAL_DMA_Init+0x1d8>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d022      	beq.n	80043b0 <HAL_DMA_Init+0xb8>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a59      	ldr	r2, [pc, #356]	; (80044d4 <HAL_DMA_Init+0x1dc>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d01d      	beq.n	80043b0 <HAL_DMA_Init+0xb8>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a57      	ldr	r2, [pc, #348]	; (80044d8 <HAL_DMA_Init+0x1e0>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d018      	beq.n	80043b0 <HAL_DMA_Init+0xb8>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a56      	ldr	r2, [pc, #344]	; (80044dc <HAL_DMA_Init+0x1e4>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d013      	beq.n	80043b0 <HAL_DMA_Init+0xb8>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a54      	ldr	r2, [pc, #336]	; (80044e0 <HAL_DMA_Init+0x1e8>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d00e      	beq.n	80043b0 <HAL_DMA_Init+0xb8>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a53      	ldr	r2, [pc, #332]	; (80044e4 <HAL_DMA_Init+0x1ec>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d009      	beq.n	80043b0 <HAL_DMA_Init+0xb8>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a51      	ldr	r2, [pc, #324]	; (80044e8 <HAL_DMA_Init+0x1f0>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d004      	beq.n	80043b0 <HAL_DMA_Init+0xb8>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a50      	ldr	r2, [pc, #320]	; (80044ec <HAL_DMA_Init+0x1f4>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d101      	bne.n	80043b4 <HAL_DMA_Init+0xbc>
 80043b0:	2301      	movs	r3, #1
 80043b2:	e000      	b.n	80043b6 <HAL_DMA_Init+0xbe>
 80043b4:	2300      	movs	r3, #0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f000 813b 	beq.w	8004632 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2202      	movs	r2, #2
 80043c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a37      	ldr	r2, [pc, #220]	; (80044b0 <HAL_DMA_Init+0x1b8>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d04a      	beq.n	800446c <HAL_DMA_Init+0x174>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a36      	ldr	r2, [pc, #216]	; (80044b4 <HAL_DMA_Init+0x1bc>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d045      	beq.n	800446c <HAL_DMA_Init+0x174>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a34      	ldr	r2, [pc, #208]	; (80044b8 <HAL_DMA_Init+0x1c0>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d040      	beq.n	800446c <HAL_DMA_Init+0x174>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a33      	ldr	r2, [pc, #204]	; (80044bc <HAL_DMA_Init+0x1c4>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d03b      	beq.n	800446c <HAL_DMA_Init+0x174>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a31      	ldr	r2, [pc, #196]	; (80044c0 <HAL_DMA_Init+0x1c8>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d036      	beq.n	800446c <HAL_DMA_Init+0x174>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a30      	ldr	r2, [pc, #192]	; (80044c4 <HAL_DMA_Init+0x1cc>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d031      	beq.n	800446c <HAL_DMA_Init+0x174>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a2e      	ldr	r2, [pc, #184]	; (80044c8 <HAL_DMA_Init+0x1d0>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d02c      	beq.n	800446c <HAL_DMA_Init+0x174>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a2d      	ldr	r2, [pc, #180]	; (80044cc <HAL_DMA_Init+0x1d4>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d027      	beq.n	800446c <HAL_DMA_Init+0x174>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a2b      	ldr	r2, [pc, #172]	; (80044d0 <HAL_DMA_Init+0x1d8>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d022      	beq.n	800446c <HAL_DMA_Init+0x174>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a2a      	ldr	r2, [pc, #168]	; (80044d4 <HAL_DMA_Init+0x1dc>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d01d      	beq.n	800446c <HAL_DMA_Init+0x174>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a28      	ldr	r2, [pc, #160]	; (80044d8 <HAL_DMA_Init+0x1e0>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d018      	beq.n	800446c <HAL_DMA_Init+0x174>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a27      	ldr	r2, [pc, #156]	; (80044dc <HAL_DMA_Init+0x1e4>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d013      	beq.n	800446c <HAL_DMA_Init+0x174>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a25      	ldr	r2, [pc, #148]	; (80044e0 <HAL_DMA_Init+0x1e8>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d00e      	beq.n	800446c <HAL_DMA_Init+0x174>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a24      	ldr	r2, [pc, #144]	; (80044e4 <HAL_DMA_Init+0x1ec>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d009      	beq.n	800446c <HAL_DMA_Init+0x174>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a22      	ldr	r2, [pc, #136]	; (80044e8 <HAL_DMA_Init+0x1f0>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d004      	beq.n	800446c <HAL_DMA_Init+0x174>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a21      	ldr	r2, [pc, #132]	; (80044ec <HAL_DMA_Init+0x1f4>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d108      	bne.n	800447e <HAL_DMA_Init+0x186>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f022 0201 	bic.w	r2, r2, #1
 800447a:	601a      	str	r2, [r3, #0]
 800447c:	e007      	b.n	800448e <HAL_DMA_Init+0x196>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f022 0201 	bic.w	r2, r2, #1
 800448c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800448e:	e02f      	b.n	80044f0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004490:	f7fe fadc 	bl	8002a4c <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b05      	cmp	r3, #5
 800449c:	d928      	bls.n	80044f0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2220      	movs	r2, #32
 80044a2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2203      	movs	r2, #3
 80044a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e246      	b.n	800493e <HAL_DMA_Init+0x646>
 80044b0:	40020010 	.word	0x40020010
 80044b4:	40020028 	.word	0x40020028
 80044b8:	40020040 	.word	0x40020040
 80044bc:	40020058 	.word	0x40020058
 80044c0:	40020070 	.word	0x40020070
 80044c4:	40020088 	.word	0x40020088
 80044c8:	400200a0 	.word	0x400200a0
 80044cc:	400200b8 	.word	0x400200b8
 80044d0:	40020410 	.word	0x40020410
 80044d4:	40020428 	.word	0x40020428
 80044d8:	40020440 	.word	0x40020440
 80044dc:	40020458 	.word	0x40020458
 80044e0:	40020470 	.word	0x40020470
 80044e4:	40020488 	.word	0x40020488
 80044e8:	400204a0 	.word	0x400204a0
 80044ec:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1c8      	bne.n	8004490 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	4b83      	ldr	r3, [pc, #524]	; (8004718 <HAL_DMA_Init+0x420>)
 800450a:	4013      	ands	r3, r2
 800450c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004516:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004522:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800452e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a1b      	ldr	r3, [r3, #32]
 8004534:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	4313      	orrs	r3, r2
 800453a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004540:	2b04      	cmp	r3, #4
 8004542:	d107      	bne.n	8004554 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454c:	4313      	orrs	r3, r2
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	4313      	orrs	r3, r2
 8004552:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004554:	4b71      	ldr	r3, [pc, #452]	; (800471c <HAL_DMA_Init+0x424>)
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	4b71      	ldr	r3, [pc, #452]	; (8004720 <HAL_DMA_Init+0x428>)
 800455a:	4013      	ands	r3, r2
 800455c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004560:	d328      	bcc.n	80045b4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	2b28      	cmp	r3, #40	; 0x28
 8004568:	d903      	bls.n	8004572 <HAL_DMA_Init+0x27a>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	2b2e      	cmp	r3, #46	; 0x2e
 8004570:	d917      	bls.n	80045a2 <HAL_DMA_Init+0x2aa>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	2b3e      	cmp	r3, #62	; 0x3e
 8004578:	d903      	bls.n	8004582 <HAL_DMA_Init+0x28a>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	2b42      	cmp	r3, #66	; 0x42
 8004580:	d90f      	bls.n	80045a2 <HAL_DMA_Init+0x2aa>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	2b46      	cmp	r3, #70	; 0x46
 8004588:	d903      	bls.n	8004592 <HAL_DMA_Init+0x29a>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	2b48      	cmp	r3, #72	; 0x48
 8004590:	d907      	bls.n	80045a2 <HAL_DMA_Init+0x2aa>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	2b4e      	cmp	r3, #78	; 0x4e
 8004598:	d905      	bls.n	80045a6 <HAL_DMA_Init+0x2ae>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	2b52      	cmp	r3, #82	; 0x52
 80045a0:	d801      	bhi.n	80045a6 <HAL_DMA_Init+0x2ae>
 80045a2:	2301      	movs	r3, #1
 80045a4:	e000      	b.n	80045a8 <HAL_DMA_Init+0x2b0>
 80045a6:	2300      	movs	r3, #0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d003      	beq.n	80045b4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045b2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	f023 0307 	bic.w	r3, r3, #7
 80045ca:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045da:	2b04      	cmp	r3, #4
 80045dc:	d117      	bne.n	800460e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00e      	beq.n	800460e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f001 ff1d 	bl	8006430 <DMA_CheckFifoParam>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d008      	beq.n	800460e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2240      	movs	r2, #64	; 0x40
 8004600:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e197      	b.n	800493e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f001 fe58 	bl	80062cc <DMA_CalcBaseAndBitshift>
 800461c:	4603      	mov	r3, r0
 800461e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004624:	f003 031f 	and.w	r3, r3, #31
 8004628:	223f      	movs	r2, #63	; 0x3f
 800462a:	409a      	lsls	r2, r3
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	609a      	str	r2, [r3, #8]
 8004630:	e0cd      	b.n	80047ce <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a3b      	ldr	r2, [pc, #236]	; (8004724 <HAL_DMA_Init+0x42c>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d022      	beq.n	8004682 <HAL_DMA_Init+0x38a>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a39      	ldr	r2, [pc, #228]	; (8004728 <HAL_DMA_Init+0x430>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d01d      	beq.n	8004682 <HAL_DMA_Init+0x38a>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a38      	ldr	r2, [pc, #224]	; (800472c <HAL_DMA_Init+0x434>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d018      	beq.n	8004682 <HAL_DMA_Init+0x38a>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a36      	ldr	r2, [pc, #216]	; (8004730 <HAL_DMA_Init+0x438>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d013      	beq.n	8004682 <HAL_DMA_Init+0x38a>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a35      	ldr	r2, [pc, #212]	; (8004734 <HAL_DMA_Init+0x43c>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d00e      	beq.n	8004682 <HAL_DMA_Init+0x38a>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a33      	ldr	r2, [pc, #204]	; (8004738 <HAL_DMA_Init+0x440>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d009      	beq.n	8004682 <HAL_DMA_Init+0x38a>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a32      	ldr	r2, [pc, #200]	; (800473c <HAL_DMA_Init+0x444>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d004      	beq.n	8004682 <HAL_DMA_Init+0x38a>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a30      	ldr	r2, [pc, #192]	; (8004740 <HAL_DMA_Init+0x448>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d101      	bne.n	8004686 <HAL_DMA_Init+0x38e>
 8004682:	2301      	movs	r3, #1
 8004684:	e000      	b.n	8004688 <HAL_DMA_Init+0x390>
 8004686:	2300      	movs	r3, #0
 8004688:	2b00      	cmp	r3, #0
 800468a:	f000 8097 	beq.w	80047bc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a24      	ldr	r2, [pc, #144]	; (8004724 <HAL_DMA_Init+0x42c>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d021      	beq.n	80046dc <HAL_DMA_Init+0x3e4>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a22      	ldr	r2, [pc, #136]	; (8004728 <HAL_DMA_Init+0x430>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d01c      	beq.n	80046dc <HAL_DMA_Init+0x3e4>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a21      	ldr	r2, [pc, #132]	; (800472c <HAL_DMA_Init+0x434>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d017      	beq.n	80046dc <HAL_DMA_Init+0x3e4>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a1f      	ldr	r2, [pc, #124]	; (8004730 <HAL_DMA_Init+0x438>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d012      	beq.n	80046dc <HAL_DMA_Init+0x3e4>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a1e      	ldr	r2, [pc, #120]	; (8004734 <HAL_DMA_Init+0x43c>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d00d      	beq.n	80046dc <HAL_DMA_Init+0x3e4>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a1c      	ldr	r2, [pc, #112]	; (8004738 <HAL_DMA_Init+0x440>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d008      	beq.n	80046dc <HAL_DMA_Init+0x3e4>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a1b      	ldr	r2, [pc, #108]	; (800473c <HAL_DMA_Init+0x444>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d003      	beq.n	80046dc <HAL_DMA_Init+0x3e4>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a19      	ldr	r2, [pc, #100]	; (8004740 <HAL_DMA_Init+0x448>)
 80046da:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2202      	movs	r2, #2
 80046e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	4b13      	ldr	r3, [pc, #76]	; (8004744 <HAL_DMA_Init+0x44c>)
 80046f8:	4013      	ands	r3, r2
 80046fa:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	2b40      	cmp	r3, #64	; 0x40
 8004702:	d021      	beq.n	8004748 <HAL_DMA_Init+0x450>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	2b80      	cmp	r3, #128	; 0x80
 800470a:	d102      	bne.n	8004712 <HAL_DMA_Init+0x41a>
 800470c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004710:	e01b      	b.n	800474a <HAL_DMA_Init+0x452>
 8004712:	2300      	movs	r3, #0
 8004714:	e019      	b.n	800474a <HAL_DMA_Init+0x452>
 8004716:	bf00      	nop
 8004718:	fe10803f 	.word	0xfe10803f
 800471c:	5c001000 	.word	0x5c001000
 8004720:	ffff0000 	.word	0xffff0000
 8004724:	58025408 	.word	0x58025408
 8004728:	5802541c 	.word	0x5802541c
 800472c:	58025430 	.word	0x58025430
 8004730:	58025444 	.word	0x58025444
 8004734:	58025458 	.word	0x58025458
 8004738:	5802546c 	.word	0x5802546c
 800473c:	58025480 	.word	0x58025480
 8004740:	58025494 	.word	0x58025494
 8004744:	fffe000f 	.word	0xfffe000f
 8004748:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	68d2      	ldr	r2, [r2, #12]
 800474e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004750:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004758:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004760:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004768:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	69db      	ldr	r3, [r3, #28]
 800476e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004770:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a1b      	ldr	r3, [r3, #32]
 8004776:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004778:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	4313      	orrs	r3, r2
 800477e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	461a      	mov	r2, r3
 800478e:	4b6e      	ldr	r3, [pc, #440]	; (8004948 <HAL_DMA_Init+0x650>)
 8004790:	4413      	add	r3, r2
 8004792:	4a6e      	ldr	r2, [pc, #440]	; (800494c <HAL_DMA_Init+0x654>)
 8004794:	fba2 2303 	umull	r2, r3, r2, r3
 8004798:	091b      	lsrs	r3, r3, #4
 800479a:	009a      	lsls	r2, r3, #2
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f001 fd93 	bl	80062cc <DMA_CalcBaseAndBitshift>
 80047a6:	4603      	mov	r3, r0
 80047a8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ae:	f003 031f 	and.w	r3, r3, #31
 80047b2:	2201      	movs	r2, #1
 80047b4:	409a      	lsls	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	605a      	str	r2, [r3, #4]
 80047ba:	e008      	b.n	80047ce <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2240      	movs	r2, #64	; 0x40
 80047c0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2203      	movs	r2, #3
 80047c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e0b7      	b.n	800493e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a5f      	ldr	r2, [pc, #380]	; (8004950 <HAL_DMA_Init+0x658>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d072      	beq.n	80048be <HAL_DMA_Init+0x5c6>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a5d      	ldr	r2, [pc, #372]	; (8004954 <HAL_DMA_Init+0x65c>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d06d      	beq.n	80048be <HAL_DMA_Init+0x5c6>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a5c      	ldr	r2, [pc, #368]	; (8004958 <HAL_DMA_Init+0x660>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d068      	beq.n	80048be <HAL_DMA_Init+0x5c6>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a5a      	ldr	r2, [pc, #360]	; (800495c <HAL_DMA_Init+0x664>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d063      	beq.n	80048be <HAL_DMA_Init+0x5c6>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a59      	ldr	r2, [pc, #356]	; (8004960 <HAL_DMA_Init+0x668>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d05e      	beq.n	80048be <HAL_DMA_Init+0x5c6>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a57      	ldr	r2, [pc, #348]	; (8004964 <HAL_DMA_Init+0x66c>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d059      	beq.n	80048be <HAL_DMA_Init+0x5c6>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a56      	ldr	r2, [pc, #344]	; (8004968 <HAL_DMA_Init+0x670>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d054      	beq.n	80048be <HAL_DMA_Init+0x5c6>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a54      	ldr	r2, [pc, #336]	; (800496c <HAL_DMA_Init+0x674>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d04f      	beq.n	80048be <HAL_DMA_Init+0x5c6>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a53      	ldr	r2, [pc, #332]	; (8004970 <HAL_DMA_Init+0x678>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d04a      	beq.n	80048be <HAL_DMA_Init+0x5c6>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a51      	ldr	r2, [pc, #324]	; (8004974 <HAL_DMA_Init+0x67c>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d045      	beq.n	80048be <HAL_DMA_Init+0x5c6>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a50      	ldr	r2, [pc, #320]	; (8004978 <HAL_DMA_Init+0x680>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d040      	beq.n	80048be <HAL_DMA_Init+0x5c6>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a4e      	ldr	r2, [pc, #312]	; (800497c <HAL_DMA_Init+0x684>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d03b      	beq.n	80048be <HAL_DMA_Init+0x5c6>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a4d      	ldr	r2, [pc, #308]	; (8004980 <HAL_DMA_Init+0x688>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d036      	beq.n	80048be <HAL_DMA_Init+0x5c6>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a4b      	ldr	r2, [pc, #300]	; (8004984 <HAL_DMA_Init+0x68c>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d031      	beq.n	80048be <HAL_DMA_Init+0x5c6>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a4a      	ldr	r2, [pc, #296]	; (8004988 <HAL_DMA_Init+0x690>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d02c      	beq.n	80048be <HAL_DMA_Init+0x5c6>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a48      	ldr	r2, [pc, #288]	; (800498c <HAL_DMA_Init+0x694>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d027      	beq.n	80048be <HAL_DMA_Init+0x5c6>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a47      	ldr	r2, [pc, #284]	; (8004990 <HAL_DMA_Init+0x698>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d022      	beq.n	80048be <HAL_DMA_Init+0x5c6>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a45      	ldr	r2, [pc, #276]	; (8004994 <HAL_DMA_Init+0x69c>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d01d      	beq.n	80048be <HAL_DMA_Init+0x5c6>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a44      	ldr	r2, [pc, #272]	; (8004998 <HAL_DMA_Init+0x6a0>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d018      	beq.n	80048be <HAL_DMA_Init+0x5c6>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a42      	ldr	r2, [pc, #264]	; (800499c <HAL_DMA_Init+0x6a4>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d013      	beq.n	80048be <HAL_DMA_Init+0x5c6>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a41      	ldr	r2, [pc, #260]	; (80049a0 <HAL_DMA_Init+0x6a8>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d00e      	beq.n	80048be <HAL_DMA_Init+0x5c6>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a3f      	ldr	r2, [pc, #252]	; (80049a4 <HAL_DMA_Init+0x6ac>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d009      	beq.n	80048be <HAL_DMA_Init+0x5c6>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a3e      	ldr	r2, [pc, #248]	; (80049a8 <HAL_DMA_Init+0x6b0>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d004      	beq.n	80048be <HAL_DMA_Init+0x5c6>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a3c      	ldr	r2, [pc, #240]	; (80049ac <HAL_DMA_Init+0x6b4>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d101      	bne.n	80048c2 <HAL_DMA_Init+0x5ca>
 80048be:	2301      	movs	r3, #1
 80048c0:	e000      	b.n	80048c4 <HAL_DMA_Init+0x5cc>
 80048c2:	2300      	movs	r3, #0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d032      	beq.n	800492e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f001 fe2d 	bl	8006528 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	2b80      	cmp	r3, #128	; 0x80
 80048d4:	d102      	bne.n	80048dc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685a      	ldr	r2, [r3, #4]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048e4:	b2d2      	uxtb	r2, r2
 80048e6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80048f0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d010      	beq.n	800491c <HAL_DMA_Init+0x624>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	2b08      	cmp	r3, #8
 8004900:	d80c      	bhi.n	800491c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f001 feaa 	bl	800665c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800490c:	2200      	movs	r2, #0
 800490e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004918:	605a      	str	r2, [r3, #4]
 800491a:	e008      	b.n	800492e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3718      	adds	r7, #24
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	a7fdabf8 	.word	0xa7fdabf8
 800494c:	cccccccd 	.word	0xcccccccd
 8004950:	40020010 	.word	0x40020010
 8004954:	40020028 	.word	0x40020028
 8004958:	40020040 	.word	0x40020040
 800495c:	40020058 	.word	0x40020058
 8004960:	40020070 	.word	0x40020070
 8004964:	40020088 	.word	0x40020088
 8004968:	400200a0 	.word	0x400200a0
 800496c:	400200b8 	.word	0x400200b8
 8004970:	40020410 	.word	0x40020410
 8004974:	40020428 	.word	0x40020428
 8004978:	40020440 	.word	0x40020440
 800497c:	40020458 	.word	0x40020458
 8004980:	40020470 	.word	0x40020470
 8004984:	40020488 	.word	0x40020488
 8004988:	400204a0 	.word	0x400204a0
 800498c:	400204b8 	.word	0x400204b8
 8004990:	58025408 	.word	0x58025408
 8004994:	5802541c 	.word	0x5802541c
 8004998:	58025430 	.word	0x58025430
 800499c:	58025444 	.word	0x58025444
 80049a0:	58025458 	.word	0x58025458
 80049a4:	5802546c 	.word	0x5802546c
 80049a8:	58025480 	.word	0x58025480
 80049ac:	58025494 	.word	0x58025494

080049b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80049b8:	f7fe f848 	bl	8002a4c <HAL_GetTick>
 80049bc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d101      	bne.n	80049c8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e2dc      	b.n	8004f82 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d008      	beq.n	80049e6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2280      	movs	r2, #128	; 0x80
 80049d8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e2cd      	b.n	8004f82 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a76      	ldr	r2, [pc, #472]	; (8004bc4 <HAL_DMA_Abort+0x214>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d04a      	beq.n	8004a86 <HAL_DMA_Abort+0xd6>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a74      	ldr	r2, [pc, #464]	; (8004bc8 <HAL_DMA_Abort+0x218>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d045      	beq.n	8004a86 <HAL_DMA_Abort+0xd6>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a73      	ldr	r2, [pc, #460]	; (8004bcc <HAL_DMA_Abort+0x21c>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d040      	beq.n	8004a86 <HAL_DMA_Abort+0xd6>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a71      	ldr	r2, [pc, #452]	; (8004bd0 <HAL_DMA_Abort+0x220>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d03b      	beq.n	8004a86 <HAL_DMA_Abort+0xd6>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a70      	ldr	r2, [pc, #448]	; (8004bd4 <HAL_DMA_Abort+0x224>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d036      	beq.n	8004a86 <HAL_DMA_Abort+0xd6>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a6e      	ldr	r2, [pc, #440]	; (8004bd8 <HAL_DMA_Abort+0x228>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d031      	beq.n	8004a86 <HAL_DMA_Abort+0xd6>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a6d      	ldr	r2, [pc, #436]	; (8004bdc <HAL_DMA_Abort+0x22c>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d02c      	beq.n	8004a86 <HAL_DMA_Abort+0xd6>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a6b      	ldr	r2, [pc, #428]	; (8004be0 <HAL_DMA_Abort+0x230>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d027      	beq.n	8004a86 <HAL_DMA_Abort+0xd6>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a6a      	ldr	r2, [pc, #424]	; (8004be4 <HAL_DMA_Abort+0x234>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d022      	beq.n	8004a86 <HAL_DMA_Abort+0xd6>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a68      	ldr	r2, [pc, #416]	; (8004be8 <HAL_DMA_Abort+0x238>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d01d      	beq.n	8004a86 <HAL_DMA_Abort+0xd6>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a67      	ldr	r2, [pc, #412]	; (8004bec <HAL_DMA_Abort+0x23c>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d018      	beq.n	8004a86 <HAL_DMA_Abort+0xd6>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a65      	ldr	r2, [pc, #404]	; (8004bf0 <HAL_DMA_Abort+0x240>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d013      	beq.n	8004a86 <HAL_DMA_Abort+0xd6>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a64      	ldr	r2, [pc, #400]	; (8004bf4 <HAL_DMA_Abort+0x244>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d00e      	beq.n	8004a86 <HAL_DMA_Abort+0xd6>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a62      	ldr	r2, [pc, #392]	; (8004bf8 <HAL_DMA_Abort+0x248>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d009      	beq.n	8004a86 <HAL_DMA_Abort+0xd6>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a61      	ldr	r2, [pc, #388]	; (8004bfc <HAL_DMA_Abort+0x24c>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d004      	beq.n	8004a86 <HAL_DMA_Abort+0xd6>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a5f      	ldr	r2, [pc, #380]	; (8004c00 <HAL_DMA_Abort+0x250>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d101      	bne.n	8004a8a <HAL_DMA_Abort+0xda>
 8004a86:	2301      	movs	r3, #1
 8004a88:	e000      	b.n	8004a8c <HAL_DMA_Abort+0xdc>
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d013      	beq.n	8004ab8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f022 021e 	bic.w	r2, r2, #30
 8004a9e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	695a      	ldr	r2, [r3, #20]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004aae:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	617b      	str	r3, [r7, #20]
 8004ab6:	e00a      	b.n	8004ace <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f022 020e 	bic.w	r2, r2, #14
 8004ac6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a3c      	ldr	r2, [pc, #240]	; (8004bc4 <HAL_DMA_Abort+0x214>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d072      	beq.n	8004bbe <HAL_DMA_Abort+0x20e>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a3a      	ldr	r2, [pc, #232]	; (8004bc8 <HAL_DMA_Abort+0x218>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d06d      	beq.n	8004bbe <HAL_DMA_Abort+0x20e>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a39      	ldr	r2, [pc, #228]	; (8004bcc <HAL_DMA_Abort+0x21c>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d068      	beq.n	8004bbe <HAL_DMA_Abort+0x20e>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a37      	ldr	r2, [pc, #220]	; (8004bd0 <HAL_DMA_Abort+0x220>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d063      	beq.n	8004bbe <HAL_DMA_Abort+0x20e>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a36      	ldr	r2, [pc, #216]	; (8004bd4 <HAL_DMA_Abort+0x224>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d05e      	beq.n	8004bbe <HAL_DMA_Abort+0x20e>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a34      	ldr	r2, [pc, #208]	; (8004bd8 <HAL_DMA_Abort+0x228>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d059      	beq.n	8004bbe <HAL_DMA_Abort+0x20e>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a33      	ldr	r2, [pc, #204]	; (8004bdc <HAL_DMA_Abort+0x22c>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d054      	beq.n	8004bbe <HAL_DMA_Abort+0x20e>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a31      	ldr	r2, [pc, #196]	; (8004be0 <HAL_DMA_Abort+0x230>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d04f      	beq.n	8004bbe <HAL_DMA_Abort+0x20e>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a30      	ldr	r2, [pc, #192]	; (8004be4 <HAL_DMA_Abort+0x234>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d04a      	beq.n	8004bbe <HAL_DMA_Abort+0x20e>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a2e      	ldr	r2, [pc, #184]	; (8004be8 <HAL_DMA_Abort+0x238>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d045      	beq.n	8004bbe <HAL_DMA_Abort+0x20e>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a2d      	ldr	r2, [pc, #180]	; (8004bec <HAL_DMA_Abort+0x23c>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d040      	beq.n	8004bbe <HAL_DMA_Abort+0x20e>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a2b      	ldr	r2, [pc, #172]	; (8004bf0 <HAL_DMA_Abort+0x240>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d03b      	beq.n	8004bbe <HAL_DMA_Abort+0x20e>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a2a      	ldr	r2, [pc, #168]	; (8004bf4 <HAL_DMA_Abort+0x244>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d036      	beq.n	8004bbe <HAL_DMA_Abort+0x20e>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a28      	ldr	r2, [pc, #160]	; (8004bf8 <HAL_DMA_Abort+0x248>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d031      	beq.n	8004bbe <HAL_DMA_Abort+0x20e>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a27      	ldr	r2, [pc, #156]	; (8004bfc <HAL_DMA_Abort+0x24c>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d02c      	beq.n	8004bbe <HAL_DMA_Abort+0x20e>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a25      	ldr	r2, [pc, #148]	; (8004c00 <HAL_DMA_Abort+0x250>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d027      	beq.n	8004bbe <HAL_DMA_Abort+0x20e>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a24      	ldr	r2, [pc, #144]	; (8004c04 <HAL_DMA_Abort+0x254>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d022      	beq.n	8004bbe <HAL_DMA_Abort+0x20e>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a22      	ldr	r2, [pc, #136]	; (8004c08 <HAL_DMA_Abort+0x258>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d01d      	beq.n	8004bbe <HAL_DMA_Abort+0x20e>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a21      	ldr	r2, [pc, #132]	; (8004c0c <HAL_DMA_Abort+0x25c>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d018      	beq.n	8004bbe <HAL_DMA_Abort+0x20e>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a1f      	ldr	r2, [pc, #124]	; (8004c10 <HAL_DMA_Abort+0x260>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d013      	beq.n	8004bbe <HAL_DMA_Abort+0x20e>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a1e      	ldr	r2, [pc, #120]	; (8004c14 <HAL_DMA_Abort+0x264>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d00e      	beq.n	8004bbe <HAL_DMA_Abort+0x20e>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a1c      	ldr	r2, [pc, #112]	; (8004c18 <HAL_DMA_Abort+0x268>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d009      	beq.n	8004bbe <HAL_DMA_Abort+0x20e>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a1b      	ldr	r2, [pc, #108]	; (8004c1c <HAL_DMA_Abort+0x26c>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d004      	beq.n	8004bbe <HAL_DMA_Abort+0x20e>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a19      	ldr	r2, [pc, #100]	; (8004c20 <HAL_DMA_Abort+0x270>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d132      	bne.n	8004c24 <HAL_DMA_Abort+0x274>
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e031      	b.n	8004c26 <HAL_DMA_Abort+0x276>
 8004bc2:	bf00      	nop
 8004bc4:	40020010 	.word	0x40020010
 8004bc8:	40020028 	.word	0x40020028
 8004bcc:	40020040 	.word	0x40020040
 8004bd0:	40020058 	.word	0x40020058
 8004bd4:	40020070 	.word	0x40020070
 8004bd8:	40020088 	.word	0x40020088
 8004bdc:	400200a0 	.word	0x400200a0
 8004be0:	400200b8 	.word	0x400200b8
 8004be4:	40020410 	.word	0x40020410
 8004be8:	40020428 	.word	0x40020428
 8004bec:	40020440 	.word	0x40020440
 8004bf0:	40020458 	.word	0x40020458
 8004bf4:	40020470 	.word	0x40020470
 8004bf8:	40020488 	.word	0x40020488
 8004bfc:	400204a0 	.word	0x400204a0
 8004c00:	400204b8 	.word	0x400204b8
 8004c04:	58025408 	.word	0x58025408
 8004c08:	5802541c 	.word	0x5802541c
 8004c0c:	58025430 	.word	0x58025430
 8004c10:	58025444 	.word	0x58025444
 8004c14:	58025458 	.word	0x58025458
 8004c18:	5802546c 	.word	0x5802546c
 8004c1c:	58025480 	.word	0x58025480
 8004c20:	58025494 	.word	0x58025494
 8004c24:	2300      	movs	r3, #0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d007      	beq.n	8004c3a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c38:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a6d      	ldr	r2, [pc, #436]	; (8004df4 <HAL_DMA_Abort+0x444>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d04a      	beq.n	8004cda <HAL_DMA_Abort+0x32a>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a6b      	ldr	r2, [pc, #428]	; (8004df8 <HAL_DMA_Abort+0x448>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d045      	beq.n	8004cda <HAL_DMA_Abort+0x32a>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a6a      	ldr	r2, [pc, #424]	; (8004dfc <HAL_DMA_Abort+0x44c>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d040      	beq.n	8004cda <HAL_DMA_Abort+0x32a>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a68      	ldr	r2, [pc, #416]	; (8004e00 <HAL_DMA_Abort+0x450>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d03b      	beq.n	8004cda <HAL_DMA_Abort+0x32a>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a67      	ldr	r2, [pc, #412]	; (8004e04 <HAL_DMA_Abort+0x454>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d036      	beq.n	8004cda <HAL_DMA_Abort+0x32a>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a65      	ldr	r2, [pc, #404]	; (8004e08 <HAL_DMA_Abort+0x458>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d031      	beq.n	8004cda <HAL_DMA_Abort+0x32a>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a64      	ldr	r2, [pc, #400]	; (8004e0c <HAL_DMA_Abort+0x45c>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d02c      	beq.n	8004cda <HAL_DMA_Abort+0x32a>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a62      	ldr	r2, [pc, #392]	; (8004e10 <HAL_DMA_Abort+0x460>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d027      	beq.n	8004cda <HAL_DMA_Abort+0x32a>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a61      	ldr	r2, [pc, #388]	; (8004e14 <HAL_DMA_Abort+0x464>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d022      	beq.n	8004cda <HAL_DMA_Abort+0x32a>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a5f      	ldr	r2, [pc, #380]	; (8004e18 <HAL_DMA_Abort+0x468>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d01d      	beq.n	8004cda <HAL_DMA_Abort+0x32a>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a5e      	ldr	r2, [pc, #376]	; (8004e1c <HAL_DMA_Abort+0x46c>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d018      	beq.n	8004cda <HAL_DMA_Abort+0x32a>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a5c      	ldr	r2, [pc, #368]	; (8004e20 <HAL_DMA_Abort+0x470>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d013      	beq.n	8004cda <HAL_DMA_Abort+0x32a>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a5b      	ldr	r2, [pc, #364]	; (8004e24 <HAL_DMA_Abort+0x474>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d00e      	beq.n	8004cda <HAL_DMA_Abort+0x32a>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a59      	ldr	r2, [pc, #356]	; (8004e28 <HAL_DMA_Abort+0x478>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d009      	beq.n	8004cda <HAL_DMA_Abort+0x32a>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a58      	ldr	r2, [pc, #352]	; (8004e2c <HAL_DMA_Abort+0x47c>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d004      	beq.n	8004cda <HAL_DMA_Abort+0x32a>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a56      	ldr	r2, [pc, #344]	; (8004e30 <HAL_DMA_Abort+0x480>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d108      	bne.n	8004cec <HAL_DMA_Abort+0x33c>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f022 0201 	bic.w	r2, r2, #1
 8004ce8:	601a      	str	r2, [r3, #0]
 8004cea:	e007      	b.n	8004cfc <HAL_DMA_Abort+0x34c>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f022 0201 	bic.w	r2, r2, #1
 8004cfa:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004cfc:	e013      	b.n	8004d26 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004cfe:	f7fd fea5 	bl	8002a4c <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	2b05      	cmp	r3, #5
 8004d0a:	d90c      	bls.n	8004d26 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2220      	movs	r2, #32
 8004d10:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2203      	movs	r2, #3
 8004d16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e12d      	b.n	8004f82 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0301 	and.w	r3, r3, #1
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1e5      	bne.n	8004cfe <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a2f      	ldr	r2, [pc, #188]	; (8004df4 <HAL_DMA_Abort+0x444>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d04a      	beq.n	8004dd2 <HAL_DMA_Abort+0x422>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a2d      	ldr	r2, [pc, #180]	; (8004df8 <HAL_DMA_Abort+0x448>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d045      	beq.n	8004dd2 <HAL_DMA_Abort+0x422>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a2c      	ldr	r2, [pc, #176]	; (8004dfc <HAL_DMA_Abort+0x44c>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d040      	beq.n	8004dd2 <HAL_DMA_Abort+0x422>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a2a      	ldr	r2, [pc, #168]	; (8004e00 <HAL_DMA_Abort+0x450>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d03b      	beq.n	8004dd2 <HAL_DMA_Abort+0x422>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a29      	ldr	r2, [pc, #164]	; (8004e04 <HAL_DMA_Abort+0x454>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d036      	beq.n	8004dd2 <HAL_DMA_Abort+0x422>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a27      	ldr	r2, [pc, #156]	; (8004e08 <HAL_DMA_Abort+0x458>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d031      	beq.n	8004dd2 <HAL_DMA_Abort+0x422>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a26      	ldr	r2, [pc, #152]	; (8004e0c <HAL_DMA_Abort+0x45c>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d02c      	beq.n	8004dd2 <HAL_DMA_Abort+0x422>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a24      	ldr	r2, [pc, #144]	; (8004e10 <HAL_DMA_Abort+0x460>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d027      	beq.n	8004dd2 <HAL_DMA_Abort+0x422>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a23      	ldr	r2, [pc, #140]	; (8004e14 <HAL_DMA_Abort+0x464>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d022      	beq.n	8004dd2 <HAL_DMA_Abort+0x422>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a21      	ldr	r2, [pc, #132]	; (8004e18 <HAL_DMA_Abort+0x468>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d01d      	beq.n	8004dd2 <HAL_DMA_Abort+0x422>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a20      	ldr	r2, [pc, #128]	; (8004e1c <HAL_DMA_Abort+0x46c>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d018      	beq.n	8004dd2 <HAL_DMA_Abort+0x422>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a1e      	ldr	r2, [pc, #120]	; (8004e20 <HAL_DMA_Abort+0x470>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d013      	beq.n	8004dd2 <HAL_DMA_Abort+0x422>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a1d      	ldr	r2, [pc, #116]	; (8004e24 <HAL_DMA_Abort+0x474>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d00e      	beq.n	8004dd2 <HAL_DMA_Abort+0x422>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a1b      	ldr	r2, [pc, #108]	; (8004e28 <HAL_DMA_Abort+0x478>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d009      	beq.n	8004dd2 <HAL_DMA_Abort+0x422>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a1a      	ldr	r2, [pc, #104]	; (8004e2c <HAL_DMA_Abort+0x47c>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d004      	beq.n	8004dd2 <HAL_DMA_Abort+0x422>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a18      	ldr	r2, [pc, #96]	; (8004e30 <HAL_DMA_Abort+0x480>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d101      	bne.n	8004dd6 <HAL_DMA_Abort+0x426>
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e000      	b.n	8004dd8 <HAL_DMA_Abort+0x428>
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d02b      	beq.n	8004e34 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004de0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004de6:	f003 031f 	and.w	r3, r3, #31
 8004dea:	223f      	movs	r2, #63	; 0x3f
 8004dec:	409a      	lsls	r2, r3
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	609a      	str	r2, [r3, #8]
 8004df2:	e02a      	b.n	8004e4a <HAL_DMA_Abort+0x49a>
 8004df4:	40020010 	.word	0x40020010
 8004df8:	40020028 	.word	0x40020028
 8004dfc:	40020040 	.word	0x40020040
 8004e00:	40020058 	.word	0x40020058
 8004e04:	40020070 	.word	0x40020070
 8004e08:	40020088 	.word	0x40020088
 8004e0c:	400200a0 	.word	0x400200a0
 8004e10:	400200b8 	.word	0x400200b8
 8004e14:	40020410 	.word	0x40020410
 8004e18:	40020428 	.word	0x40020428
 8004e1c:	40020440 	.word	0x40020440
 8004e20:	40020458 	.word	0x40020458
 8004e24:	40020470 	.word	0x40020470
 8004e28:	40020488 	.word	0x40020488
 8004e2c:	400204a0 	.word	0x400204a0
 8004e30:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e38:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e3e:	f003 031f 	and.w	r3, r3, #31
 8004e42:	2201      	movs	r2, #1
 8004e44:	409a      	lsls	r2, r3
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a4f      	ldr	r2, [pc, #316]	; (8004f8c <HAL_DMA_Abort+0x5dc>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d072      	beq.n	8004f3a <HAL_DMA_Abort+0x58a>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a4d      	ldr	r2, [pc, #308]	; (8004f90 <HAL_DMA_Abort+0x5e0>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d06d      	beq.n	8004f3a <HAL_DMA_Abort+0x58a>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a4c      	ldr	r2, [pc, #304]	; (8004f94 <HAL_DMA_Abort+0x5e4>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d068      	beq.n	8004f3a <HAL_DMA_Abort+0x58a>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a4a      	ldr	r2, [pc, #296]	; (8004f98 <HAL_DMA_Abort+0x5e8>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d063      	beq.n	8004f3a <HAL_DMA_Abort+0x58a>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a49      	ldr	r2, [pc, #292]	; (8004f9c <HAL_DMA_Abort+0x5ec>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d05e      	beq.n	8004f3a <HAL_DMA_Abort+0x58a>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a47      	ldr	r2, [pc, #284]	; (8004fa0 <HAL_DMA_Abort+0x5f0>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d059      	beq.n	8004f3a <HAL_DMA_Abort+0x58a>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a46      	ldr	r2, [pc, #280]	; (8004fa4 <HAL_DMA_Abort+0x5f4>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d054      	beq.n	8004f3a <HAL_DMA_Abort+0x58a>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a44      	ldr	r2, [pc, #272]	; (8004fa8 <HAL_DMA_Abort+0x5f8>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d04f      	beq.n	8004f3a <HAL_DMA_Abort+0x58a>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a43      	ldr	r2, [pc, #268]	; (8004fac <HAL_DMA_Abort+0x5fc>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d04a      	beq.n	8004f3a <HAL_DMA_Abort+0x58a>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a41      	ldr	r2, [pc, #260]	; (8004fb0 <HAL_DMA_Abort+0x600>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d045      	beq.n	8004f3a <HAL_DMA_Abort+0x58a>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a40      	ldr	r2, [pc, #256]	; (8004fb4 <HAL_DMA_Abort+0x604>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d040      	beq.n	8004f3a <HAL_DMA_Abort+0x58a>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a3e      	ldr	r2, [pc, #248]	; (8004fb8 <HAL_DMA_Abort+0x608>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d03b      	beq.n	8004f3a <HAL_DMA_Abort+0x58a>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a3d      	ldr	r2, [pc, #244]	; (8004fbc <HAL_DMA_Abort+0x60c>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d036      	beq.n	8004f3a <HAL_DMA_Abort+0x58a>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a3b      	ldr	r2, [pc, #236]	; (8004fc0 <HAL_DMA_Abort+0x610>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d031      	beq.n	8004f3a <HAL_DMA_Abort+0x58a>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a3a      	ldr	r2, [pc, #232]	; (8004fc4 <HAL_DMA_Abort+0x614>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d02c      	beq.n	8004f3a <HAL_DMA_Abort+0x58a>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a38      	ldr	r2, [pc, #224]	; (8004fc8 <HAL_DMA_Abort+0x618>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d027      	beq.n	8004f3a <HAL_DMA_Abort+0x58a>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a37      	ldr	r2, [pc, #220]	; (8004fcc <HAL_DMA_Abort+0x61c>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d022      	beq.n	8004f3a <HAL_DMA_Abort+0x58a>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a35      	ldr	r2, [pc, #212]	; (8004fd0 <HAL_DMA_Abort+0x620>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d01d      	beq.n	8004f3a <HAL_DMA_Abort+0x58a>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a34      	ldr	r2, [pc, #208]	; (8004fd4 <HAL_DMA_Abort+0x624>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d018      	beq.n	8004f3a <HAL_DMA_Abort+0x58a>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a32      	ldr	r2, [pc, #200]	; (8004fd8 <HAL_DMA_Abort+0x628>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d013      	beq.n	8004f3a <HAL_DMA_Abort+0x58a>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a31      	ldr	r2, [pc, #196]	; (8004fdc <HAL_DMA_Abort+0x62c>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d00e      	beq.n	8004f3a <HAL_DMA_Abort+0x58a>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a2f      	ldr	r2, [pc, #188]	; (8004fe0 <HAL_DMA_Abort+0x630>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d009      	beq.n	8004f3a <HAL_DMA_Abort+0x58a>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a2e      	ldr	r2, [pc, #184]	; (8004fe4 <HAL_DMA_Abort+0x634>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d004      	beq.n	8004f3a <HAL_DMA_Abort+0x58a>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a2c      	ldr	r2, [pc, #176]	; (8004fe8 <HAL_DMA_Abort+0x638>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d101      	bne.n	8004f3e <HAL_DMA_Abort+0x58e>
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e000      	b.n	8004f40 <HAL_DMA_Abort+0x590>
 8004f3e:	2300      	movs	r3, #0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d015      	beq.n	8004f70 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004f4c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00c      	beq.n	8004f70 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f64:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004f6e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3718      	adds	r7, #24
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	40020010 	.word	0x40020010
 8004f90:	40020028 	.word	0x40020028
 8004f94:	40020040 	.word	0x40020040
 8004f98:	40020058 	.word	0x40020058
 8004f9c:	40020070 	.word	0x40020070
 8004fa0:	40020088 	.word	0x40020088
 8004fa4:	400200a0 	.word	0x400200a0
 8004fa8:	400200b8 	.word	0x400200b8
 8004fac:	40020410 	.word	0x40020410
 8004fb0:	40020428 	.word	0x40020428
 8004fb4:	40020440 	.word	0x40020440
 8004fb8:	40020458 	.word	0x40020458
 8004fbc:	40020470 	.word	0x40020470
 8004fc0:	40020488 	.word	0x40020488
 8004fc4:	400204a0 	.word	0x400204a0
 8004fc8:	400204b8 	.word	0x400204b8
 8004fcc:	58025408 	.word	0x58025408
 8004fd0:	5802541c 	.word	0x5802541c
 8004fd4:	58025430 	.word	0x58025430
 8004fd8:	58025444 	.word	0x58025444
 8004fdc:	58025458 	.word	0x58025458
 8004fe0:	5802546c 	.word	0x5802546c
 8004fe4:	58025480 	.word	0x58025480
 8004fe8:	58025494 	.word	0x58025494

08004fec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d101      	bne.n	8004ffe <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e237      	b.n	800546e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2b02      	cmp	r3, #2
 8005008:	d004      	beq.n	8005014 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2280      	movs	r2, #128	; 0x80
 800500e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e22c      	b.n	800546e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a5c      	ldr	r2, [pc, #368]	; (800518c <HAL_DMA_Abort_IT+0x1a0>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d04a      	beq.n	80050b4 <HAL_DMA_Abort_IT+0xc8>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a5b      	ldr	r2, [pc, #364]	; (8005190 <HAL_DMA_Abort_IT+0x1a4>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d045      	beq.n	80050b4 <HAL_DMA_Abort_IT+0xc8>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a59      	ldr	r2, [pc, #356]	; (8005194 <HAL_DMA_Abort_IT+0x1a8>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d040      	beq.n	80050b4 <HAL_DMA_Abort_IT+0xc8>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a58      	ldr	r2, [pc, #352]	; (8005198 <HAL_DMA_Abort_IT+0x1ac>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d03b      	beq.n	80050b4 <HAL_DMA_Abort_IT+0xc8>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a56      	ldr	r2, [pc, #344]	; (800519c <HAL_DMA_Abort_IT+0x1b0>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d036      	beq.n	80050b4 <HAL_DMA_Abort_IT+0xc8>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a55      	ldr	r2, [pc, #340]	; (80051a0 <HAL_DMA_Abort_IT+0x1b4>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d031      	beq.n	80050b4 <HAL_DMA_Abort_IT+0xc8>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a53      	ldr	r2, [pc, #332]	; (80051a4 <HAL_DMA_Abort_IT+0x1b8>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d02c      	beq.n	80050b4 <HAL_DMA_Abort_IT+0xc8>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a52      	ldr	r2, [pc, #328]	; (80051a8 <HAL_DMA_Abort_IT+0x1bc>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d027      	beq.n	80050b4 <HAL_DMA_Abort_IT+0xc8>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a50      	ldr	r2, [pc, #320]	; (80051ac <HAL_DMA_Abort_IT+0x1c0>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d022      	beq.n	80050b4 <HAL_DMA_Abort_IT+0xc8>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a4f      	ldr	r2, [pc, #316]	; (80051b0 <HAL_DMA_Abort_IT+0x1c4>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d01d      	beq.n	80050b4 <HAL_DMA_Abort_IT+0xc8>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a4d      	ldr	r2, [pc, #308]	; (80051b4 <HAL_DMA_Abort_IT+0x1c8>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d018      	beq.n	80050b4 <HAL_DMA_Abort_IT+0xc8>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a4c      	ldr	r2, [pc, #304]	; (80051b8 <HAL_DMA_Abort_IT+0x1cc>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d013      	beq.n	80050b4 <HAL_DMA_Abort_IT+0xc8>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a4a      	ldr	r2, [pc, #296]	; (80051bc <HAL_DMA_Abort_IT+0x1d0>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d00e      	beq.n	80050b4 <HAL_DMA_Abort_IT+0xc8>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a49      	ldr	r2, [pc, #292]	; (80051c0 <HAL_DMA_Abort_IT+0x1d4>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d009      	beq.n	80050b4 <HAL_DMA_Abort_IT+0xc8>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a47      	ldr	r2, [pc, #284]	; (80051c4 <HAL_DMA_Abort_IT+0x1d8>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d004      	beq.n	80050b4 <HAL_DMA_Abort_IT+0xc8>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a46      	ldr	r2, [pc, #280]	; (80051c8 <HAL_DMA_Abort_IT+0x1dc>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d101      	bne.n	80050b8 <HAL_DMA_Abort_IT+0xcc>
 80050b4:	2301      	movs	r3, #1
 80050b6:	e000      	b.n	80050ba <HAL_DMA_Abort_IT+0xce>
 80050b8:	2300      	movs	r3, #0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	f000 8086 	beq.w	80051cc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2204      	movs	r2, #4
 80050c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a2f      	ldr	r2, [pc, #188]	; (800518c <HAL_DMA_Abort_IT+0x1a0>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d04a      	beq.n	8005168 <HAL_DMA_Abort_IT+0x17c>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a2e      	ldr	r2, [pc, #184]	; (8005190 <HAL_DMA_Abort_IT+0x1a4>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d045      	beq.n	8005168 <HAL_DMA_Abort_IT+0x17c>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a2c      	ldr	r2, [pc, #176]	; (8005194 <HAL_DMA_Abort_IT+0x1a8>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d040      	beq.n	8005168 <HAL_DMA_Abort_IT+0x17c>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a2b      	ldr	r2, [pc, #172]	; (8005198 <HAL_DMA_Abort_IT+0x1ac>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d03b      	beq.n	8005168 <HAL_DMA_Abort_IT+0x17c>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a29      	ldr	r2, [pc, #164]	; (800519c <HAL_DMA_Abort_IT+0x1b0>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d036      	beq.n	8005168 <HAL_DMA_Abort_IT+0x17c>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a28      	ldr	r2, [pc, #160]	; (80051a0 <HAL_DMA_Abort_IT+0x1b4>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d031      	beq.n	8005168 <HAL_DMA_Abort_IT+0x17c>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a26      	ldr	r2, [pc, #152]	; (80051a4 <HAL_DMA_Abort_IT+0x1b8>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d02c      	beq.n	8005168 <HAL_DMA_Abort_IT+0x17c>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a25      	ldr	r2, [pc, #148]	; (80051a8 <HAL_DMA_Abort_IT+0x1bc>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d027      	beq.n	8005168 <HAL_DMA_Abort_IT+0x17c>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a23      	ldr	r2, [pc, #140]	; (80051ac <HAL_DMA_Abort_IT+0x1c0>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d022      	beq.n	8005168 <HAL_DMA_Abort_IT+0x17c>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a22      	ldr	r2, [pc, #136]	; (80051b0 <HAL_DMA_Abort_IT+0x1c4>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d01d      	beq.n	8005168 <HAL_DMA_Abort_IT+0x17c>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a20      	ldr	r2, [pc, #128]	; (80051b4 <HAL_DMA_Abort_IT+0x1c8>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d018      	beq.n	8005168 <HAL_DMA_Abort_IT+0x17c>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a1f      	ldr	r2, [pc, #124]	; (80051b8 <HAL_DMA_Abort_IT+0x1cc>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d013      	beq.n	8005168 <HAL_DMA_Abort_IT+0x17c>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a1d      	ldr	r2, [pc, #116]	; (80051bc <HAL_DMA_Abort_IT+0x1d0>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d00e      	beq.n	8005168 <HAL_DMA_Abort_IT+0x17c>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a1c      	ldr	r2, [pc, #112]	; (80051c0 <HAL_DMA_Abort_IT+0x1d4>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d009      	beq.n	8005168 <HAL_DMA_Abort_IT+0x17c>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a1a      	ldr	r2, [pc, #104]	; (80051c4 <HAL_DMA_Abort_IT+0x1d8>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d004      	beq.n	8005168 <HAL_DMA_Abort_IT+0x17c>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a19      	ldr	r2, [pc, #100]	; (80051c8 <HAL_DMA_Abort_IT+0x1dc>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d108      	bne.n	800517a <HAL_DMA_Abort_IT+0x18e>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f022 0201 	bic.w	r2, r2, #1
 8005176:	601a      	str	r2, [r3, #0]
 8005178:	e178      	b.n	800546c <HAL_DMA_Abort_IT+0x480>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f022 0201 	bic.w	r2, r2, #1
 8005188:	601a      	str	r2, [r3, #0]
 800518a:	e16f      	b.n	800546c <HAL_DMA_Abort_IT+0x480>
 800518c:	40020010 	.word	0x40020010
 8005190:	40020028 	.word	0x40020028
 8005194:	40020040 	.word	0x40020040
 8005198:	40020058 	.word	0x40020058
 800519c:	40020070 	.word	0x40020070
 80051a0:	40020088 	.word	0x40020088
 80051a4:	400200a0 	.word	0x400200a0
 80051a8:	400200b8 	.word	0x400200b8
 80051ac:	40020410 	.word	0x40020410
 80051b0:	40020428 	.word	0x40020428
 80051b4:	40020440 	.word	0x40020440
 80051b8:	40020458 	.word	0x40020458
 80051bc:	40020470 	.word	0x40020470
 80051c0:	40020488 	.word	0x40020488
 80051c4:	400204a0 	.word	0x400204a0
 80051c8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f022 020e 	bic.w	r2, r2, #14
 80051da:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a6c      	ldr	r2, [pc, #432]	; (8005394 <HAL_DMA_Abort_IT+0x3a8>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d04a      	beq.n	800527c <HAL_DMA_Abort_IT+0x290>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a6b      	ldr	r2, [pc, #428]	; (8005398 <HAL_DMA_Abort_IT+0x3ac>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d045      	beq.n	800527c <HAL_DMA_Abort_IT+0x290>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a69      	ldr	r2, [pc, #420]	; (800539c <HAL_DMA_Abort_IT+0x3b0>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d040      	beq.n	800527c <HAL_DMA_Abort_IT+0x290>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a68      	ldr	r2, [pc, #416]	; (80053a0 <HAL_DMA_Abort_IT+0x3b4>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d03b      	beq.n	800527c <HAL_DMA_Abort_IT+0x290>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a66      	ldr	r2, [pc, #408]	; (80053a4 <HAL_DMA_Abort_IT+0x3b8>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d036      	beq.n	800527c <HAL_DMA_Abort_IT+0x290>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a65      	ldr	r2, [pc, #404]	; (80053a8 <HAL_DMA_Abort_IT+0x3bc>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d031      	beq.n	800527c <HAL_DMA_Abort_IT+0x290>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a63      	ldr	r2, [pc, #396]	; (80053ac <HAL_DMA_Abort_IT+0x3c0>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d02c      	beq.n	800527c <HAL_DMA_Abort_IT+0x290>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a62      	ldr	r2, [pc, #392]	; (80053b0 <HAL_DMA_Abort_IT+0x3c4>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d027      	beq.n	800527c <HAL_DMA_Abort_IT+0x290>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a60      	ldr	r2, [pc, #384]	; (80053b4 <HAL_DMA_Abort_IT+0x3c8>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d022      	beq.n	800527c <HAL_DMA_Abort_IT+0x290>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a5f      	ldr	r2, [pc, #380]	; (80053b8 <HAL_DMA_Abort_IT+0x3cc>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d01d      	beq.n	800527c <HAL_DMA_Abort_IT+0x290>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a5d      	ldr	r2, [pc, #372]	; (80053bc <HAL_DMA_Abort_IT+0x3d0>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d018      	beq.n	800527c <HAL_DMA_Abort_IT+0x290>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a5c      	ldr	r2, [pc, #368]	; (80053c0 <HAL_DMA_Abort_IT+0x3d4>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d013      	beq.n	800527c <HAL_DMA_Abort_IT+0x290>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a5a      	ldr	r2, [pc, #360]	; (80053c4 <HAL_DMA_Abort_IT+0x3d8>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d00e      	beq.n	800527c <HAL_DMA_Abort_IT+0x290>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a59      	ldr	r2, [pc, #356]	; (80053c8 <HAL_DMA_Abort_IT+0x3dc>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d009      	beq.n	800527c <HAL_DMA_Abort_IT+0x290>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a57      	ldr	r2, [pc, #348]	; (80053cc <HAL_DMA_Abort_IT+0x3e0>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d004      	beq.n	800527c <HAL_DMA_Abort_IT+0x290>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a56      	ldr	r2, [pc, #344]	; (80053d0 <HAL_DMA_Abort_IT+0x3e4>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d108      	bne.n	800528e <HAL_DMA_Abort_IT+0x2a2>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f022 0201 	bic.w	r2, r2, #1
 800528a:	601a      	str	r2, [r3, #0]
 800528c:	e007      	b.n	800529e <HAL_DMA_Abort_IT+0x2b2>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f022 0201 	bic.w	r2, r2, #1
 800529c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a3c      	ldr	r2, [pc, #240]	; (8005394 <HAL_DMA_Abort_IT+0x3a8>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d072      	beq.n	800538e <HAL_DMA_Abort_IT+0x3a2>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a3a      	ldr	r2, [pc, #232]	; (8005398 <HAL_DMA_Abort_IT+0x3ac>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d06d      	beq.n	800538e <HAL_DMA_Abort_IT+0x3a2>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a39      	ldr	r2, [pc, #228]	; (800539c <HAL_DMA_Abort_IT+0x3b0>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d068      	beq.n	800538e <HAL_DMA_Abort_IT+0x3a2>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a37      	ldr	r2, [pc, #220]	; (80053a0 <HAL_DMA_Abort_IT+0x3b4>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d063      	beq.n	800538e <HAL_DMA_Abort_IT+0x3a2>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a36      	ldr	r2, [pc, #216]	; (80053a4 <HAL_DMA_Abort_IT+0x3b8>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d05e      	beq.n	800538e <HAL_DMA_Abort_IT+0x3a2>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a34      	ldr	r2, [pc, #208]	; (80053a8 <HAL_DMA_Abort_IT+0x3bc>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d059      	beq.n	800538e <HAL_DMA_Abort_IT+0x3a2>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a33      	ldr	r2, [pc, #204]	; (80053ac <HAL_DMA_Abort_IT+0x3c0>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d054      	beq.n	800538e <HAL_DMA_Abort_IT+0x3a2>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a31      	ldr	r2, [pc, #196]	; (80053b0 <HAL_DMA_Abort_IT+0x3c4>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d04f      	beq.n	800538e <HAL_DMA_Abort_IT+0x3a2>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a30      	ldr	r2, [pc, #192]	; (80053b4 <HAL_DMA_Abort_IT+0x3c8>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d04a      	beq.n	800538e <HAL_DMA_Abort_IT+0x3a2>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a2e      	ldr	r2, [pc, #184]	; (80053b8 <HAL_DMA_Abort_IT+0x3cc>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d045      	beq.n	800538e <HAL_DMA_Abort_IT+0x3a2>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a2d      	ldr	r2, [pc, #180]	; (80053bc <HAL_DMA_Abort_IT+0x3d0>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d040      	beq.n	800538e <HAL_DMA_Abort_IT+0x3a2>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a2b      	ldr	r2, [pc, #172]	; (80053c0 <HAL_DMA_Abort_IT+0x3d4>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d03b      	beq.n	800538e <HAL_DMA_Abort_IT+0x3a2>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a2a      	ldr	r2, [pc, #168]	; (80053c4 <HAL_DMA_Abort_IT+0x3d8>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d036      	beq.n	800538e <HAL_DMA_Abort_IT+0x3a2>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a28      	ldr	r2, [pc, #160]	; (80053c8 <HAL_DMA_Abort_IT+0x3dc>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d031      	beq.n	800538e <HAL_DMA_Abort_IT+0x3a2>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a27      	ldr	r2, [pc, #156]	; (80053cc <HAL_DMA_Abort_IT+0x3e0>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d02c      	beq.n	800538e <HAL_DMA_Abort_IT+0x3a2>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a25      	ldr	r2, [pc, #148]	; (80053d0 <HAL_DMA_Abort_IT+0x3e4>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d027      	beq.n	800538e <HAL_DMA_Abort_IT+0x3a2>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a24      	ldr	r2, [pc, #144]	; (80053d4 <HAL_DMA_Abort_IT+0x3e8>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d022      	beq.n	800538e <HAL_DMA_Abort_IT+0x3a2>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a22      	ldr	r2, [pc, #136]	; (80053d8 <HAL_DMA_Abort_IT+0x3ec>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d01d      	beq.n	800538e <HAL_DMA_Abort_IT+0x3a2>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a21      	ldr	r2, [pc, #132]	; (80053dc <HAL_DMA_Abort_IT+0x3f0>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d018      	beq.n	800538e <HAL_DMA_Abort_IT+0x3a2>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a1f      	ldr	r2, [pc, #124]	; (80053e0 <HAL_DMA_Abort_IT+0x3f4>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d013      	beq.n	800538e <HAL_DMA_Abort_IT+0x3a2>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a1e      	ldr	r2, [pc, #120]	; (80053e4 <HAL_DMA_Abort_IT+0x3f8>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d00e      	beq.n	800538e <HAL_DMA_Abort_IT+0x3a2>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a1c      	ldr	r2, [pc, #112]	; (80053e8 <HAL_DMA_Abort_IT+0x3fc>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d009      	beq.n	800538e <HAL_DMA_Abort_IT+0x3a2>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a1b      	ldr	r2, [pc, #108]	; (80053ec <HAL_DMA_Abort_IT+0x400>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d004      	beq.n	800538e <HAL_DMA_Abort_IT+0x3a2>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a19      	ldr	r2, [pc, #100]	; (80053f0 <HAL_DMA_Abort_IT+0x404>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d132      	bne.n	80053f4 <HAL_DMA_Abort_IT+0x408>
 800538e:	2301      	movs	r3, #1
 8005390:	e031      	b.n	80053f6 <HAL_DMA_Abort_IT+0x40a>
 8005392:	bf00      	nop
 8005394:	40020010 	.word	0x40020010
 8005398:	40020028 	.word	0x40020028
 800539c:	40020040 	.word	0x40020040
 80053a0:	40020058 	.word	0x40020058
 80053a4:	40020070 	.word	0x40020070
 80053a8:	40020088 	.word	0x40020088
 80053ac:	400200a0 	.word	0x400200a0
 80053b0:	400200b8 	.word	0x400200b8
 80053b4:	40020410 	.word	0x40020410
 80053b8:	40020428 	.word	0x40020428
 80053bc:	40020440 	.word	0x40020440
 80053c0:	40020458 	.word	0x40020458
 80053c4:	40020470 	.word	0x40020470
 80053c8:	40020488 	.word	0x40020488
 80053cc:	400204a0 	.word	0x400204a0
 80053d0:	400204b8 	.word	0x400204b8
 80053d4:	58025408 	.word	0x58025408
 80053d8:	5802541c 	.word	0x5802541c
 80053dc:	58025430 	.word	0x58025430
 80053e0:	58025444 	.word	0x58025444
 80053e4:	58025458 	.word	0x58025458
 80053e8:	5802546c 	.word	0x5802546c
 80053ec:	58025480 	.word	0x58025480
 80053f0:	58025494 	.word	0x58025494
 80053f4:	2300      	movs	r3, #0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d028      	beq.n	800544c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005404:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005408:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800540e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005414:	f003 031f 	and.w	r3, r3, #31
 8005418:	2201      	movs	r2, #1
 800541a:	409a      	lsls	r2, r3
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005428:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00c      	beq.n	800544c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800543c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005440:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800544a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005460:	2b00      	cmp	r3, #0
 8005462:	d003      	beq.n	800546c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3710      	adds	r7, #16
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop

08005478 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b08a      	sub	sp, #40	; 0x28
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005480:	2300      	movs	r3, #0
 8005482:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005484:	4b67      	ldr	r3, [pc, #412]	; (8005624 <HAL_DMA_IRQHandler+0x1ac>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a67      	ldr	r2, [pc, #412]	; (8005628 <HAL_DMA_IRQHandler+0x1b0>)
 800548a:	fba2 2303 	umull	r2, r3, r2, r3
 800548e:	0a9b      	lsrs	r3, r3, #10
 8005490:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005496:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800549c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800549e:	6a3b      	ldr	r3, [r7, #32]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a5f      	ldr	r2, [pc, #380]	; (800562c <HAL_DMA_IRQHandler+0x1b4>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d04a      	beq.n	800554a <HAL_DMA_IRQHandler+0xd2>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a5d      	ldr	r2, [pc, #372]	; (8005630 <HAL_DMA_IRQHandler+0x1b8>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d045      	beq.n	800554a <HAL_DMA_IRQHandler+0xd2>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a5c      	ldr	r2, [pc, #368]	; (8005634 <HAL_DMA_IRQHandler+0x1bc>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d040      	beq.n	800554a <HAL_DMA_IRQHandler+0xd2>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a5a      	ldr	r2, [pc, #360]	; (8005638 <HAL_DMA_IRQHandler+0x1c0>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d03b      	beq.n	800554a <HAL_DMA_IRQHandler+0xd2>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a59      	ldr	r2, [pc, #356]	; (800563c <HAL_DMA_IRQHandler+0x1c4>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d036      	beq.n	800554a <HAL_DMA_IRQHandler+0xd2>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a57      	ldr	r2, [pc, #348]	; (8005640 <HAL_DMA_IRQHandler+0x1c8>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d031      	beq.n	800554a <HAL_DMA_IRQHandler+0xd2>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a56      	ldr	r2, [pc, #344]	; (8005644 <HAL_DMA_IRQHandler+0x1cc>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d02c      	beq.n	800554a <HAL_DMA_IRQHandler+0xd2>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a54      	ldr	r2, [pc, #336]	; (8005648 <HAL_DMA_IRQHandler+0x1d0>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d027      	beq.n	800554a <HAL_DMA_IRQHandler+0xd2>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a53      	ldr	r2, [pc, #332]	; (800564c <HAL_DMA_IRQHandler+0x1d4>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d022      	beq.n	800554a <HAL_DMA_IRQHandler+0xd2>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a51      	ldr	r2, [pc, #324]	; (8005650 <HAL_DMA_IRQHandler+0x1d8>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d01d      	beq.n	800554a <HAL_DMA_IRQHandler+0xd2>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a50      	ldr	r2, [pc, #320]	; (8005654 <HAL_DMA_IRQHandler+0x1dc>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d018      	beq.n	800554a <HAL_DMA_IRQHandler+0xd2>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a4e      	ldr	r2, [pc, #312]	; (8005658 <HAL_DMA_IRQHandler+0x1e0>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d013      	beq.n	800554a <HAL_DMA_IRQHandler+0xd2>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a4d      	ldr	r2, [pc, #308]	; (800565c <HAL_DMA_IRQHandler+0x1e4>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d00e      	beq.n	800554a <HAL_DMA_IRQHandler+0xd2>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a4b      	ldr	r2, [pc, #300]	; (8005660 <HAL_DMA_IRQHandler+0x1e8>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d009      	beq.n	800554a <HAL_DMA_IRQHandler+0xd2>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a4a      	ldr	r2, [pc, #296]	; (8005664 <HAL_DMA_IRQHandler+0x1ec>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d004      	beq.n	800554a <HAL_DMA_IRQHandler+0xd2>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a48      	ldr	r2, [pc, #288]	; (8005668 <HAL_DMA_IRQHandler+0x1f0>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d101      	bne.n	800554e <HAL_DMA_IRQHandler+0xd6>
 800554a:	2301      	movs	r3, #1
 800554c:	e000      	b.n	8005550 <HAL_DMA_IRQHandler+0xd8>
 800554e:	2300      	movs	r3, #0
 8005550:	2b00      	cmp	r3, #0
 8005552:	f000 842b 	beq.w	8005dac <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800555a:	f003 031f 	and.w	r3, r3, #31
 800555e:	2208      	movs	r2, #8
 8005560:	409a      	lsls	r2, r3
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	4013      	ands	r3, r2
 8005566:	2b00      	cmp	r3, #0
 8005568:	f000 80a2 	beq.w	80056b0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a2e      	ldr	r2, [pc, #184]	; (800562c <HAL_DMA_IRQHandler+0x1b4>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d04a      	beq.n	800560c <HAL_DMA_IRQHandler+0x194>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a2d      	ldr	r2, [pc, #180]	; (8005630 <HAL_DMA_IRQHandler+0x1b8>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d045      	beq.n	800560c <HAL_DMA_IRQHandler+0x194>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a2b      	ldr	r2, [pc, #172]	; (8005634 <HAL_DMA_IRQHandler+0x1bc>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d040      	beq.n	800560c <HAL_DMA_IRQHandler+0x194>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a2a      	ldr	r2, [pc, #168]	; (8005638 <HAL_DMA_IRQHandler+0x1c0>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d03b      	beq.n	800560c <HAL_DMA_IRQHandler+0x194>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a28      	ldr	r2, [pc, #160]	; (800563c <HAL_DMA_IRQHandler+0x1c4>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d036      	beq.n	800560c <HAL_DMA_IRQHandler+0x194>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a27      	ldr	r2, [pc, #156]	; (8005640 <HAL_DMA_IRQHandler+0x1c8>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d031      	beq.n	800560c <HAL_DMA_IRQHandler+0x194>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a25      	ldr	r2, [pc, #148]	; (8005644 <HAL_DMA_IRQHandler+0x1cc>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d02c      	beq.n	800560c <HAL_DMA_IRQHandler+0x194>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a24      	ldr	r2, [pc, #144]	; (8005648 <HAL_DMA_IRQHandler+0x1d0>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d027      	beq.n	800560c <HAL_DMA_IRQHandler+0x194>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a22      	ldr	r2, [pc, #136]	; (800564c <HAL_DMA_IRQHandler+0x1d4>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d022      	beq.n	800560c <HAL_DMA_IRQHandler+0x194>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a21      	ldr	r2, [pc, #132]	; (8005650 <HAL_DMA_IRQHandler+0x1d8>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d01d      	beq.n	800560c <HAL_DMA_IRQHandler+0x194>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a1f      	ldr	r2, [pc, #124]	; (8005654 <HAL_DMA_IRQHandler+0x1dc>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d018      	beq.n	800560c <HAL_DMA_IRQHandler+0x194>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a1e      	ldr	r2, [pc, #120]	; (8005658 <HAL_DMA_IRQHandler+0x1e0>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d013      	beq.n	800560c <HAL_DMA_IRQHandler+0x194>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a1c      	ldr	r2, [pc, #112]	; (800565c <HAL_DMA_IRQHandler+0x1e4>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d00e      	beq.n	800560c <HAL_DMA_IRQHandler+0x194>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a1b      	ldr	r2, [pc, #108]	; (8005660 <HAL_DMA_IRQHandler+0x1e8>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d009      	beq.n	800560c <HAL_DMA_IRQHandler+0x194>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a19      	ldr	r2, [pc, #100]	; (8005664 <HAL_DMA_IRQHandler+0x1ec>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d004      	beq.n	800560c <HAL_DMA_IRQHandler+0x194>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a18      	ldr	r2, [pc, #96]	; (8005668 <HAL_DMA_IRQHandler+0x1f0>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d12f      	bne.n	800566c <HAL_DMA_IRQHandler+0x1f4>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0304 	and.w	r3, r3, #4
 8005616:	2b00      	cmp	r3, #0
 8005618:	bf14      	ite	ne
 800561a:	2301      	movne	r3, #1
 800561c:	2300      	moveq	r3, #0
 800561e:	b2db      	uxtb	r3, r3
 8005620:	e02e      	b.n	8005680 <HAL_DMA_IRQHandler+0x208>
 8005622:	bf00      	nop
 8005624:	24000000 	.word	0x24000000
 8005628:	1b4e81b5 	.word	0x1b4e81b5
 800562c:	40020010 	.word	0x40020010
 8005630:	40020028 	.word	0x40020028
 8005634:	40020040 	.word	0x40020040
 8005638:	40020058 	.word	0x40020058
 800563c:	40020070 	.word	0x40020070
 8005640:	40020088 	.word	0x40020088
 8005644:	400200a0 	.word	0x400200a0
 8005648:	400200b8 	.word	0x400200b8
 800564c:	40020410 	.word	0x40020410
 8005650:	40020428 	.word	0x40020428
 8005654:	40020440 	.word	0x40020440
 8005658:	40020458 	.word	0x40020458
 800565c:	40020470 	.word	0x40020470
 8005660:	40020488 	.word	0x40020488
 8005664:	400204a0 	.word	0x400204a0
 8005668:	400204b8 	.word	0x400204b8
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0308 	and.w	r3, r3, #8
 8005676:	2b00      	cmp	r3, #0
 8005678:	bf14      	ite	ne
 800567a:	2301      	movne	r3, #1
 800567c:	2300      	moveq	r3, #0
 800567e:	b2db      	uxtb	r3, r3
 8005680:	2b00      	cmp	r3, #0
 8005682:	d015      	beq.n	80056b0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f022 0204 	bic.w	r2, r2, #4
 8005692:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005698:	f003 031f 	and.w	r3, r3, #31
 800569c:	2208      	movs	r2, #8
 800569e:	409a      	lsls	r2, r3
 80056a0:	6a3b      	ldr	r3, [r7, #32]
 80056a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056a8:	f043 0201 	orr.w	r2, r3, #1
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056b4:	f003 031f 	and.w	r3, r3, #31
 80056b8:	69ba      	ldr	r2, [r7, #24]
 80056ba:	fa22 f303 	lsr.w	r3, r2, r3
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d06e      	beq.n	80057a4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a69      	ldr	r2, [pc, #420]	; (8005870 <HAL_DMA_IRQHandler+0x3f8>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d04a      	beq.n	8005766 <HAL_DMA_IRQHandler+0x2ee>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a67      	ldr	r2, [pc, #412]	; (8005874 <HAL_DMA_IRQHandler+0x3fc>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d045      	beq.n	8005766 <HAL_DMA_IRQHandler+0x2ee>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a66      	ldr	r2, [pc, #408]	; (8005878 <HAL_DMA_IRQHandler+0x400>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d040      	beq.n	8005766 <HAL_DMA_IRQHandler+0x2ee>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a64      	ldr	r2, [pc, #400]	; (800587c <HAL_DMA_IRQHandler+0x404>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d03b      	beq.n	8005766 <HAL_DMA_IRQHandler+0x2ee>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a63      	ldr	r2, [pc, #396]	; (8005880 <HAL_DMA_IRQHandler+0x408>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d036      	beq.n	8005766 <HAL_DMA_IRQHandler+0x2ee>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a61      	ldr	r2, [pc, #388]	; (8005884 <HAL_DMA_IRQHandler+0x40c>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d031      	beq.n	8005766 <HAL_DMA_IRQHandler+0x2ee>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a60      	ldr	r2, [pc, #384]	; (8005888 <HAL_DMA_IRQHandler+0x410>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d02c      	beq.n	8005766 <HAL_DMA_IRQHandler+0x2ee>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a5e      	ldr	r2, [pc, #376]	; (800588c <HAL_DMA_IRQHandler+0x414>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d027      	beq.n	8005766 <HAL_DMA_IRQHandler+0x2ee>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a5d      	ldr	r2, [pc, #372]	; (8005890 <HAL_DMA_IRQHandler+0x418>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d022      	beq.n	8005766 <HAL_DMA_IRQHandler+0x2ee>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a5b      	ldr	r2, [pc, #364]	; (8005894 <HAL_DMA_IRQHandler+0x41c>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d01d      	beq.n	8005766 <HAL_DMA_IRQHandler+0x2ee>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a5a      	ldr	r2, [pc, #360]	; (8005898 <HAL_DMA_IRQHandler+0x420>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d018      	beq.n	8005766 <HAL_DMA_IRQHandler+0x2ee>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a58      	ldr	r2, [pc, #352]	; (800589c <HAL_DMA_IRQHandler+0x424>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d013      	beq.n	8005766 <HAL_DMA_IRQHandler+0x2ee>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a57      	ldr	r2, [pc, #348]	; (80058a0 <HAL_DMA_IRQHandler+0x428>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d00e      	beq.n	8005766 <HAL_DMA_IRQHandler+0x2ee>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a55      	ldr	r2, [pc, #340]	; (80058a4 <HAL_DMA_IRQHandler+0x42c>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d009      	beq.n	8005766 <HAL_DMA_IRQHandler+0x2ee>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a54      	ldr	r2, [pc, #336]	; (80058a8 <HAL_DMA_IRQHandler+0x430>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d004      	beq.n	8005766 <HAL_DMA_IRQHandler+0x2ee>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a52      	ldr	r2, [pc, #328]	; (80058ac <HAL_DMA_IRQHandler+0x434>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d10a      	bne.n	800577c <HAL_DMA_IRQHandler+0x304>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	695b      	ldr	r3, [r3, #20]
 800576c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005770:	2b00      	cmp	r3, #0
 8005772:	bf14      	ite	ne
 8005774:	2301      	movne	r3, #1
 8005776:	2300      	moveq	r3, #0
 8005778:	b2db      	uxtb	r3, r3
 800577a:	e003      	b.n	8005784 <HAL_DMA_IRQHandler+0x30c>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2300      	movs	r3, #0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00d      	beq.n	80057a4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800578c:	f003 031f 	and.w	r3, r3, #31
 8005790:	2201      	movs	r2, #1
 8005792:	409a      	lsls	r2, r3
 8005794:	6a3b      	ldr	r3, [r7, #32]
 8005796:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800579c:	f043 0202 	orr.w	r2, r3, #2
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057a8:	f003 031f 	and.w	r3, r3, #31
 80057ac:	2204      	movs	r2, #4
 80057ae:	409a      	lsls	r2, r3
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	4013      	ands	r3, r2
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f000 808f 	beq.w	80058d8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a2c      	ldr	r2, [pc, #176]	; (8005870 <HAL_DMA_IRQHandler+0x3f8>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d04a      	beq.n	800585a <HAL_DMA_IRQHandler+0x3e2>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a2a      	ldr	r2, [pc, #168]	; (8005874 <HAL_DMA_IRQHandler+0x3fc>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d045      	beq.n	800585a <HAL_DMA_IRQHandler+0x3e2>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a29      	ldr	r2, [pc, #164]	; (8005878 <HAL_DMA_IRQHandler+0x400>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d040      	beq.n	800585a <HAL_DMA_IRQHandler+0x3e2>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a27      	ldr	r2, [pc, #156]	; (800587c <HAL_DMA_IRQHandler+0x404>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d03b      	beq.n	800585a <HAL_DMA_IRQHandler+0x3e2>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a26      	ldr	r2, [pc, #152]	; (8005880 <HAL_DMA_IRQHandler+0x408>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d036      	beq.n	800585a <HAL_DMA_IRQHandler+0x3e2>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a24      	ldr	r2, [pc, #144]	; (8005884 <HAL_DMA_IRQHandler+0x40c>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d031      	beq.n	800585a <HAL_DMA_IRQHandler+0x3e2>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a23      	ldr	r2, [pc, #140]	; (8005888 <HAL_DMA_IRQHandler+0x410>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d02c      	beq.n	800585a <HAL_DMA_IRQHandler+0x3e2>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a21      	ldr	r2, [pc, #132]	; (800588c <HAL_DMA_IRQHandler+0x414>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d027      	beq.n	800585a <HAL_DMA_IRQHandler+0x3e2>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a20      	ldr	r2, [pc, #128]	; (8005890 <HAL_DMA_IRQHandler+0x418>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d022      	beq.n	800585a <HAL_DMA_IRQHandler+0x3e2>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a1e      	ldr	r2, [pc, #120]	; (8005894 <HAL_DMA_IRQHandler+0x41c>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d01d      	beq.n	800585a <HAL_DMA_IRQHandler+0x3e2>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a1d      	ldr	r2, [pc, #116]	; (8005898 <HAL_DMA_IRQHandler+0x420>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d018      	beq.n	800585a <HAL_DMA_IRQHandler+0x3e2>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a1b      	ldr	r2, [pc, #108]	; (800589c <HAL_DMA_IRQHandler+0x424>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d013      	beq.n	800585a <HAL_DMA_IRQHandler+0x3e2>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a1a      	ldr	r2, [pc, #104]	; (80058a0 <HAL_DMA_IRQHandler+0x428>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d00e      	beq.n	800585a <HAL_DMA_IRQHandler+0x3e2>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a18      	ldr	r2, [pc, #96]	; (80058a4 <HAL_DMA_IRQHandler+0x42c>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d009      	beq.n	800585a <HAL_DMA_IRQHandler+0x3e2>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a17      	ldr	r2, [pc, #92]	; (80058a8 <HAL_DMA_IRQHandler+0x430>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d004      	beq.n	800585a <HAL_DMA_IRQHandler+0x3e2>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a15      	ldr	r2, [pc, #84]	; (80058ac <HAL_DMA_IRQHandler+0x434>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d12a      	bne.n	80058b0 <HAL_DMA_IRQHandler+0x438>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0302 	and.w	r3, r3, #2
 8005864:	2b00      	cmp	r3, #0
 8005866:	bf14      	ite	ne
 8005868:	2301      	movne	r3, #1
 800586a:	2300      	moveq	r3, #0
 800586c:	b2db      	uxtb	r3, r3
 800586e:	e023      	b.n	80058b8 <HAL_DMA_IRQHandler+0x440>
 8005870:	40020010 	.word	0x40020010
 8005874:	40020028 	.word	0x40020028
 8005878:	40020040 	.word	0x40020040
 800587c:	40020058 	.word	0x40020058
 8005880:	40020070 	.word	0x40020070
 8005884:	40020088 	.word	0x40020088
 8005888:	400200a0 	.word	0x400200a0
 800588c:	400200b8 	.word	0x400200b8
 8005890:	40020410 	.word	0x40020410
 8005894:	40020428 	.word	0x40020428
 8005898:	40020440 	.word	0x40020440
 800589c:	40020458 	.word	0x40020458
 80058a0:	40020470 	.word	0x40020470
 80058a4:	40020488 	.word	0x40020488
 80058a8:	400204a0 	.word	0x400204a0
 80058ac:	400204b8 	.word	0x400204b8
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2300      	movs	r3, #0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00d      	beq.n	80058d8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058c0:	f003 031f 	and.w	r3, r3, #31
 80058c4:	2204      	movs	r2, #4
 80058c6:	409a      	lsls	r2, r3
 80058c8:	6a3b      	ldr	r3, [r7, #32]
 80058ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058d0:	f043 0204 	orr.w	r2, r3, #4
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058dc:	f003 031f 	and.w	r3, r3, #31
 80058e0:	2210      	movs	r2, #16
 80058e2:	409a      	lsls	r2, r3
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	4013      	ands	r3, r2
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f000 80a6 	beq.w	8005a3a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a85      	ldr	r2, [pc, #532]	; (8005b08 <HAL_DMA_IRQHandler+0x690>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d04a      	beq.n	800598e <HAL_DMA_IRQHandler+0x516>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a83      	ldr	r2, [pc, #524]	; (8005b0c <HAL_DMA_IRQHandler+0x694>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d045      	beq.n	800598e <HAL_DMA_IRQHandler+0x516>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a82      	ldr	r2, [pc, #520]	; (8005b10 <HAL_DMA_IRQHandler+0x698>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d040      	beq.n	800598e <HAL_DMA_IRQHandler+0x516>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a80      	ldr	r2, [pc, #512]	; (8005b14 <HAL_DMA_IRQHandler+0x69c>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d03b      	beq.n	800598e <HAL_DMA_IRQHandler+0x516>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a7f      	ldr	r2, [pc, #508]	; (8005b18 <HAL_DMA_IRQHandler+0x6a0>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d036      	beq.n	800598e <HAL_DMA_IRQHandler+0x516>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a7d      	ldr	r2, [pc, #500]	; (8005b1c <HAL_DMA_IRQHandler+0x6a4>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d031      	beq.n	800598e <HAL_DMA_IRQHandler+0x516>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a7c      	ldr	r2, [pc, #496]	; (8005b20 <HAL_DMA_IRQHandler+0x6a8>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d02c      	beq.n	800598e <HAL_DMA_IRQHandler+0x516>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a7a      	ldr	r2, [pc, #488]	; (8005b24 <HAL_DMA_IRQHandler+0x6ac>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d027      	beq.n	800598e <HAL_DMA_IRQHandler+0x516>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a79      	ldr	r2, [pc, #484]	; (8005b28 <HAL_DMA_IRQHandler+0x6b0>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d022      	beq.n	800598e <HAL_DMA_IRQHandler+0x516>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a77      	ldr	r2, [pc, #476]	; (8005b2c <HAL_DMA_IRQHandler+0x6b4>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d01d      	beq.n	800598e <HAL_DMA_IRQHandler+0x516>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a76      	ldr	r2, [pc, #472]	; (8005b30 <HAL_DMA_IRQHandler+0x6b8>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d018      	beq.n	800598e <HAL_DMA_IRQHandler+0x516>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a74      	ldr	r2, [pc, #464]	; (8005b34 <HAL_DMA_IRQHandler+0x6bc>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d013      	beq.n	800598e <HAL_DMA_IRQHandler+0x516>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a73      	ldr	r2, [pc, #460]	; (8005b38 <HAL_DMA_IRQHandler+0x6c0>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d00e      	beq.n	800598e <HAL_DMA_IRQHandler+0x516>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a71      	ldr	r2, [pc, #452]	; (8005b3c <HAL_DMA_IRQHandler+0x6c4>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d009      	beq.n	800598e <HAL_DMA_IRQHandler+0x516>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a70      	ldr	r2, [pc, #448]	; (8005b40 <HAL_DMA_IRQHandler+0x6c8>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d004      	beq.n	800598e <HAL_DMA_IRQHandler+0x516>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a6e      	ldr	r2, [pc, #440]	; (8005b44 <HAL_DMA_IRQHandler+0x6cc>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d10a      	bne.n	80059a4 <HAL_DMA_IRQHandler+0x52c>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0308 	and.w	r3, r3, #8
 8005998:	2b00      	cmp	r3, #0
 800599a:	bf14      	ite	ne
 800599c:	2301      	movne	r3, #1
 800599e:	2300      	moveq	r3, #0
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	e009      	b.n	80059b8 <HAL_DMA_IRQHandler+0x540>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0304 	and.w	r3, r3, #4
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	bf14      	ite	ne
 80059b2:	2301      	movne	r3, #1
 80059b4:	2300      	moveq	r3, #0
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d03e      	beq.n	8005a3a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059c0:	f003 031f 	and.w	r3, r3, #31
 80059c4:	2210      	movs	r2, #16
 80059c6:	409a      	lsls	r2, r3
 80059c8:	6a3b      	ldr	r3, [r7, #32]
 80059ca:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d018      	beq.n	8005a0c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d108      	bne.n	80059fa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d024      	beq.n	8005a3a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	4798      	blx	r3
 80059f8:	e01f      	b.n	8005a3a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d01b      	beq.n	8005a3a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	4798      	blx	r3
 8005a0a:	e016      	b.n	8005a3a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d107      	bne.n	8005a2a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f022 0208 	bic.w	r2, r2, #8
 8005a28:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d003      	beq.n	8005a3a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a3e:	f003 031f 	and.w	r3, r3, #31
 8005a42:	2220      	movs	r2, #32
 8005a44:	409a      	lsls	r2, r3
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	4013      	ands	r3, r2
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	f000 8110 	beq.w	8005c70 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a2c      	ldr	r2, [pc, #176]	; (8005b08 <HAL_DMA_IRQHandler+0x690>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d04a      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x678>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a2b      	ldr	r2, [pc, #172]	; (8005b0c <HAL_DMA_IRQHandler+0x694>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d045      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x678>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a29      	ldr	r2, [pc, #164]	; (8005b10 <HAL_DMA_IRQHandler+0x698>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d040      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x678>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a28      	ldr	r2, [pc, #160]	; (8005b14 <HAL_DMA_IRQHandler+0x69c>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d03b      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x678>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a26      	ldr	r2, [pc, #152]	; (8005b18 <HAL_DMA_IRQHandler+0x6a0>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d036      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x678>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a25      	ldr	r2, [pc, #148]	; (8005b1c <HAL_DMA_IRQHandler+0x6a4>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d031      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x678>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a23      	ldr	r2, [pc, #140]	; (8005b20 <HAL_DMA_IRQHandler+0x6a8>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d02c      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x678>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a22      	ldr	r2, [pc, #136]	; (8005b24 <HAL_DMA_IRQHandler+0x6ac>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d027      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x678>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a20      	ldr	r2, [pc, #128]	; (8005b28 <HAL_DMA_IRQHandler+0x6b0>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d022      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x678>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a1f      	ldr	r2, [pc, #124]	; (8005b2c <HAL_DMA_IRQHandler+0x6b4>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d01d      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x678>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a1d      	ldr	r2, [pc, #116]	; (8005b30 <HAL_DMA_IRQHandler+0x6b8>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d018      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x678>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a1c      	ldr	r2, [pc, #112]	; (8005b34 <HAL_DMA_IRQHandler+0x6bc>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d013      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x678>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a1a      	ldr	r2, [pc, #104]	; (8005b38 <HAL_DMA_IRQHandler+0x6c0>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d00e      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x678>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a19      	ldr	r2, [pc, #100]	; (8005b3c <HAL_DMA_IRQHandler+0x6c4>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d009      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x678>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a17      	ldr	r2, [pc, #92]	; (8005b40 <HAL_DMA_IRQHandler+0x6c8>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d004      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x678>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a16      	ldr	r2, [pc, #88]	; (8005b44 <HAL_DMA_IRQHandler+0x6cc>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d12b      	bne.n	8005b48 <HAL_DMA_IRQHandler+0x6d0>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 0310 	and.w	r3, r3, #16
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	bf14      	ite	ne
 8005afe:	2301      	movne	r3, #1
 8005b00:	2300      	moveq	r3, #0
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	e02a      	b.n	8005b5c <HAL_DMA_IRQHandler+0x6e4>
 8005b06:	bf00      	nop
 8005b08:	40020010 	.word	0x40020010
 8005b0c:	40020028 	.word	0x40020028
 8005b10:	40020040 	.word	0x40020040
 8005b14:	40020058 	.word	0x40020058
 8005b18:	40020070 	.word	0x40020070
 8005b1c:	40020088 	.word	0x40020088
 8005b20:	400200a0 	.word	0x400200a0
 8005b24:	400200b8 	.word	0x400200b8
 8005b28:	40020410 	.word	0x40020410
 8005b2c:	40020428 	.word	0x40020428
 8005b30:	40020440 	.word	0x40020440
 8005b34:	40020458 	.word	0x40020458
 8005b38:	40020470 	.word	0x40020470
 8005b3c:	40020488 	.word	0x40020488
 8005b40:	400204a0 	.word	0x400204a0
 8005b44:	400204b8 	.word	0x400204b8
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0302 	and.w	r3, r3, #2
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	bf14      	ite	ne
 8005b56:	2301      	movne	r3, #1
 8005b58:	2300      	moveq	r3, #0
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f000 8087 	beq.w	8005c70 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b66:	f003 031f 	and.w	r3, r3, #31
 8005b6a:	2220      	movs	r2, #32
 8005b6c:	409a      	lsls	r2, r3
 8005b6e:	6a3b      	ldr	r3, [r7, #32]
 8005b70:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	2b04      	cmp	r3, #4
 8005b7c:	d139      	bne.n	8005bf2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f022 0216 	bic.w	r2, r2, #22
 8005b8c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	695a      	ldr	r2, [r3, #20]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b9c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d103      	bne.n	8005bae <HAL_DMA_IRQHandler+0x736>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d007      	beq.n	8005bbe <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f022 0208 	bic.w	r2, r2, #8
 8005bbc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bc2:	f003 031f 	and.w	r3, r3, #31
 8005bc6:	223f      	movs	r2, #63	; 0x3f
 8005bc8:	409a      	lsls	r2, r3
 8005bca:	6a3b      	ldr	r3, [r7, #32]
 8005bcc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	f000 834a 	beq.w	800627c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	4798      	blx	r3
          }
          return;
 8005bf0:	e344      	b.n	800627c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d018      	beq.n	8005c32 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d108      	bne.n	8005c20 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d02c      	beq.n	8005c70 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	4798      	blx	r3
 8005c1e:	e027      	b.n	8005c70 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d023      	beq.n	8005c70 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	4798      	blx	r3
 8005c30:	e01e      	b.n	8005c70 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d10f      	bne.n	8005c60 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f022 0210 	bic.w	r2, r2, #16
 8005c4e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d003      	beq.n	8005c70 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f000 8306 	beq.w	8006286 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c7e:	f003 0301 	and.w	r3, r3, #1
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	f000 8088 	beq.w	8005d98 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2204      	movs	r2, #4
 8005c8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a7a      	ldr	r2, [pc, #488]	; (8005e80 <HAL_DMA_IRQHandler+0xa08>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d04a      	beq.n	8005d30 <HAL_DMA_IRQHandler+0x8b8>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a79      	ldr	r2, [pc, #484]	; (8005e84 <HAL_DMA_IRQHandler+0xa0c>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d045      	beq.n	8005d30 <HAL_DMA_IRQHandler+0x8b8>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a77      	ldr	r2, [pc, #476]	; (8005e88 <HAL_DMA_IRQHandler+0xa10>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d040      	beq.n	8005d30 <HAL_DMA_IRQHandler+0x8b8>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a76      	ldr	r2, [pc, #472]	; (8005e8c <HAL_DMA_IRQHandler+0xa14>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d03b      	beq.n	8005d30 <HAL_DMA_IRQHandler+0x8b8>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a74      	ldr	r2, [pc, #464]	; (8005e90 <HAL_DMA_IRQHandler+0xa18>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d036      	beq.n	8005d30 <HAL_DMA_IRQHandler+0x8b8>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a73      	ldr	r2, [pc, #460]	; (8005e94 <HAL_DMA_IRQHandler+0xa1c>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d031      	beq.n	8005d30 <HAL_DMA_IRQHandler+0x8b8>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a71      	ldr	r2, [pc, #452]	; (8005e98 <HAL_DMA_IRQHandler+0xa20>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d02c      	beq.n	8005d30 <HAL_DMA_IRQHandler+0x8b8>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a70      	ldr	r2, [pc, #448]	; (8005e9c <HAL_DMA_IRQHandler+0xa24>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d027      	beq.n	8005d30 <HAL_DMA_IRQHandler+0x8b8>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a6e      	ldr	r2, [pc, #440]	; (8005ea0 <HAL_DMA_IRQHandler+0xa28>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d022      	beq.n	8005d30 <HAL_DMA_IRQHandler+0x8b8>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a6d      	ldr	r2, [pc, #436]	; (8005ea4 <HAL_DMA_IRQHandler+0xa2c>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d01d      	beq.n	8005d30 <HAL_DMA_IRQHandler+0x8b8>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a6b      	ldr	r2, [pc, #428]	; (8005ea8 <HAL_DMA_IRQHandler+0xa30>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d018      	beq.n	8005d30 <HAL_DMA_IRQHandler+0x8b8>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a6a      	ldr	r2, [pc, #424]	; (8005eac <HAL_DMA_IRQHandler+0xa34>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d013      	beq.n	8005d30 <HAL_DMA_IRQHandler+0x8b8>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a68      	ldr	r2, [pc, #416]	; (8005eb0 <HAL_DMA_IRQHandler+0xa38>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d00e      	beq.n	8005d30 <HAL_DMA_IRQHandler+0x8b8>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a67      	ldr	r2, [pc, #412]	; (8005eb4 <HAL_DMA_IRQHandler+0xa3c>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d009      	beq.n	8005d30 <HAL_DMA_IRQHandler+0x8b8>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a65      	ldr	r2, [pc, #404]	; (8005eb8 <HAL_DMA_IRQHandler+0xa40>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d004      	beq.n	8005d30 <HAL_DMA_IRQHandler+0x8b8>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a64      	ldr	r2, [pc, #400]	; (8005ebc <HAL_DMA_IRQHandler+0xa44>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d108      	bne.n	8005d42 <HAL_DMA_IRQHandler+0x8ca>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f022 0201 	bic.w	r2, r2, #1
 8005d3e:	601a      	str	r2, [r3, #0]
 8005d40:	e007      	b.n	8005d52 <HAL_DMA_IRQHandler+0x8da>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f022 0201 	bic.w	r2, r2, #1
 8005d50:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	3301      	adds	r3, #1
 8005d56:	60fb      	str	r3, [r7, #12]
 8005d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d307      	bcc.n	8005d6e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 0301 	and.w	r3, r3, #1
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d1f2      	bne.n	8005d52 <HAL_DMA_IRQHandler+0x8da>
 8005d6c:	e000      	b.n	8005d70 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005d6e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 0301 	and.w	r3, r3, #1
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d004      	beq.n	8005d88 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2203      	movs	r2, #3
 8005d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005d86:	e003      	b.n	8005d90 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f000 8272 	beq.w	8006286 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	4798      	blx	r3
 8005daa:	e26c      	b.n	8006286 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a43      	ldr	r2, [pc, #268]	; (8005ec0 <HAL_DMA_IRQHandler+0xa48>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d022      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x984>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a42      	ldr	r2, [pc, #264]	; (8005ec4 <HAL_DMA_IRQHandler+0xa4c>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d01d      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x984>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a40      	ldr	r2, [pc, #256]	; (8005ec8 <HAL_DMA_IRQHandler+0xa50>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d018      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x984>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a3f      	ldr	r2, [pc, #252]	; (8005ecc <HAL_DMA_IRQHandler+0xa54>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d013      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x984>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a3d      	ldr	r2, [pc, #244]	; (8005ed0 <HAL_DMA_IRQHandler+0xa58>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d00e      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x984>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a3c      	ldr	r2, [pc, #240]	; (8005ed4 <HAL_DMA_IRQHandler+0xa5c>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d009      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x984>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a3a      	ldr	r2, [pc, #232]	; (8005ed8 <HAL_DMA_IRQHandler+0xa60>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d004      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x984>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a39      	ldr	r2, [pc, #228]	; (8005edc <HAL_DMA_IRQHandler+0xa64>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d101      	bne.n	8005e00 <HAL_DMA_IRQHandler+0x988>
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e000      	b.n	8005e02 <HAL_DMA_IRQHandler+0x98a>
 8005e00:	2300      	movs	r3, #0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	f000 823f 	beq.w	8006286 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e14:	f003 031f 	and.w	r3, r3, #31
 8005e18:	2204      	movs	r2, #4
 8005e1a:	409a      	lsls	r2, r3
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	4013      	ands	r3, r2
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f000 80cd 	beq.w	8005fc0 <HAL_DMA_IRQHandler+0xb48>
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	f003 0304 	and.w	r3, r3, #4
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f000 80c7 	beq.w	8005fc0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e36:	f003 031f 	and.w	r3, r3, #31
 8005e3a:	2204      	movs	r2, #4
 8005e3c:	409a      	lsls	r2, r3
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d049      	beq.n	8005ee0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d109      	bne.n	8005e6a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	f000 8210 	beq.w	8006280 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e68:	e20a      	b.n	8006280 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	f000 8206 	beq.w	8006280 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e7c:	e200      	b.n	8006280 <HAL_DMA_IRQHandler+0xe08>
 8005e7e:	bf00      	nop
 8005e80:	40020010 	.word	0x40020010
 8005e84:	40020028 	.word	0x40020028
 8005e88:	40020040 	.word	0x40020040
 8005e8c:	40020058 	.word	0x40020058
 8005e90:	40020070 	.word	0x40020070
 8005e94:	40020088 	.word	0x40020088
 8005e98:	400200a0 	.word	0x400200a0
 8005e9c:	400200b8 	.word	0x400200b8
 8005ea0:	40020410 	.word	0x40020410
 8005ea4:	40020428 	.word	0x40020428
 8005ea8:	40020440 	.word	0x40020440
 8005eac:	40020458 	.word	0x40020458
 8005eb0:	40020470 	.word	0x40020470
 8005eb4:	40020488 	.word	0x40020488
 8005eb8:	400204a0 	.word	0x400204a0
 8005ebc:	400204b8 	.word	0x400204b8
 8005ec0:	58025408 	.word	0x58025408
 8005ec4:	5802541c 	.word	0x5802541c
 8005ec8:	58025430 	.word	0x58025430
 8005ecc:	58025444 	.word	0x58025444
 8005ed0:	58025458 	.word	0x58025458
 8005ed4:	5802546c 	.word	0x5802546c
 8005ed8:	58025480 	.word	0x58025480
 8005edc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	f003 0320 	and.w	r3, r3, #32
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d160      	bne.n	8005fac <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a7f      	ldr	r2, [pc, #508]	; (80060ec <HAL_DMA_IRQHandler+0xc74>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d04a      	beq.n	8005f8a <HAL_DMA_IRQHandler+0xb12>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a7d      	ldr	r2, [pc, #500]	; (80060f0 <HAL_DMA_IRQHandler+0xc78>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d045      	beq.n	8005f8a <HAL_DMA_IRQHandler+0xb12>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a7c      	ldr	r2, [pc, #496]	; (80060f4 <HAL_DMA_IRQHandler+0xc7c>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d040      	beq.n	8005f8a <HAL_DMA_IRQHandler+0xb12>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a7a      	ldr	r2, [pc, #488]	; (80060f8 <HAL_DMA_IRQHandler+0xc80>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d03b      	beq.n	8005f8a <HAL_DMA_IRQHandler+0xb12>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a79      	ldr	r2, [pc, #484]	; (80060fc <HAL_DMA_IRQHandler+0xc84>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d036      	beq.n	8005f8a <HAL_DMA_IRQHandler+0xb12>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a77      	ldr	r2, [pc, #476]	; (8006100 <HAL_DMA_IRQHandler+0xc88>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d031      	beq.n	8005f8a <HAL_DMA_IRQHandler+0xb12>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a76      	ldr	r2, [pc, #472]	; (8006104 <HAL_DMA_IRQHandler+0xc8c>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d02c      	beq.n	8005f8a <HAL_DMA_IRQHandler+0xb12>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a74      	ldr	r2, [pc, #464]	; (8006108 <HAL_DMA_IRQHandler+0xc90>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d027      	beq.n	8005f8a <HAL_DMA_IRQHandler+0xb12>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a73      	ldr	r2, [pc, #460]	; (800610c <HAL_DMA_IRQHandler+0xc94>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d022      	beq.n	8005f8a <HAL_DMA_IRQHandler+0xb12>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a71      	ldr	r2, [pc, #452]	; (8006110 <HAL_DMA_IRQHandler+0xc98>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d01d      	beq.n	8005f8a <HAL_DMA_IRQHandler+0xb12>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a70      	ldr	r2, [pc, #448]	; (8006114 <HAL_DMA_IRQHandler+0xc9c>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d018      	beq.n	8005f8a <HAL_DMA_IRQHandler+0xb12>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a6e      	ldr	r2, [pc, #440]	; (8006118 <HAL_DMA_IRQHandler+0xca0>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d013      	beq.n	8005f8a <HAL_DMA_IRQHandler+0xb12>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a6d      	ldr	r2, [pc, #436]	; (800611c <HAL_DMA_IRQHandler+0xca4>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d00e      	beq.n	8005f8a <HAL_DMA_IRQHandler+0xb12>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a6b      	ldr	r2, [pc, #428]	; (8006120 <HAL_DMA_IRQHandler+0xca8>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d009      	beq.n	8005f8a <HAL_DMA_IRQHandler+0xb12>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a6a      	ldr	r2, [pc, #424]	; (8006124 <HAL_DMA_IRQHandler+0xcac>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d004      	beq.n	8005f8a <HAL_DMA_IRQHandler+0xb12>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a68      	ldr	r2, [pc, #416]	; (8006128 <HAL_DMA_IRQHandler+0xcb0>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d108      	bne.n	8005f9c <HAL_DMA_IRQHandler+0xb24>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f022 0208 	bic.w	r2, r2, #8
 8005f98:	601a      	str	r2, [r3, #0]
 8005f9a:	e007      	b.n	8005fac <HAL_DMA_IRQHandler+0xb34>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f022 0204 	bic.w	r2, r2, #4
 8005faa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f000 8165 	beq.w	8006280 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005fbe:	e15f      	b.n	8006280 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fc4:	f003 031f 	and.w	r3, r3, #31
 8005fc8:	2202      	movs	r2, #2
 8005fca:	409a      	lsls	r2, r3
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	4013      	ands	r3, r2
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	f000 80c5 	beq.w	8006160 <HAL_DMA_IRQHandler+0xce8>
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	f003 0302 	and.w	r3, r3, #2
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	f000 80bf 	beq.w	8006160 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fe6:	f003 031f 	and.w	r3, r3, #31
 8005fea:	2202      	movs	r2, #2
 8005fec:	409a      	lsls	r2, r3
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d018      	beq.n	800602e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006002:	2b00      	cmp	r3, #0
 8006004:	d109      	bne.n	800601a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800600a:	2b00      	cmp	r3, #0
 800600c:	f000 813a 	beq.w	8006284 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006018:	e134      	b.n	8006284 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800601e:	2b00      	cmp	r3, #0
 8006020:	f000 8130 	beq.w	8006284 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800602c:	e12a      	b.n	8006284 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	f003 0320 	and.w	r3, r3, #32
 8006034:	2b00      	cmp	r3, #0
 8006036:	f040 8089 	bne.w	800614c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a2b      	ldr	r2, [pc, #172]	; (80060ec <HAL_DMA_IRQHandler+0xc74>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d04a      	beq.n	80060da <HAL_DMA_IRQHandler+0xc62>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a29      	ldr	r2, [pc, #164]	; (80060f0 <HAL_DMA_IRQHandler+0xc78>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d045      	beq.n	80060da <HAL_DMA_IRQHandler+0xc62>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a28      	ldr	r2, [pc, #160]	; (80060f4 <HAL_DMA_IRQHandler+0xc7c>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d040      	beq.n	80060da <HAL_DMA_IRQHandler+0xc62>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a26      	ldr	r2, [pc, #152]	; (80060f8 <HAL_DMA_IRQHandler+0xc80>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d03b      	beq.n	80060da <HAL_DMA_IRQHandler+0xc62>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a25      	ldr	r2, [pc, #148]	; (80060fc <HAL_DMA_IRQHandler+0xc84>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d036      	beq.n	80060da <HAL_DMA_IRQHandler+0xc62>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a23      	ldr	r2, [pc, #140]	; (8006100 <HAL_DMA_IRQHandler+0xc88>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d031      	beq.n	80060da <HAL_DMA_IRQHandler+0xc62>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a22      	ldr	r2, [pc, #136]	; (8006104 <HAL_DMA_IRQHandler+0xc8c>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d02c      	beq.n	80060da <HAL_DMA_IRQHandler+0xc62>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a20      	ldr	r2, [pc, #128]	; (8006108 <HAL_DMA_IRQHandler+0xc90>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d027      	beq.n	80060da <HAL_DMA_IRQHandler+0xc62>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a1f      	ldr	r2, [pc, #124]	; (800610c <HAL_DMA_IRQHandler+0xc94>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d022      	beq.n	80060da <HAL_DMA_IRQHandler+0xc62>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a1d      	ldr	r2, [pc, #116]	; (8006110 <HAL_DMA_IRQHandler+0xc98>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d01d      	beq.n	80060da <HAL_DMA_IRQHandler+0xc62>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a1c      	ldr	r2, [pc, #112]	; (8006114 <HAL_DMA_IRQHandler+0xc9c>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d018      	beq.n	80060da <HAL_DMA_IRQHandler+0xc62>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a1a      	ldr	r2, [pc, #104]	; (8006118 <HAL_DMA_IRQHandler+0xca0>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d013      	beq.n	80060da <HAL_DMA_IRQHandler+0xc62>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a19      	ldr	r2, [pc, #100]	; (800611c <HAL_DMA_IRQHandler+0xca4>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d00e      	beq.n	80060da <HAL_DMA_IRQHandler+0xc62>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a17      	ldr	r2, [pc, #92]	; (8006120 <HAL_DMA_IRQHandler+0xca8>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d009      	beq.n	80060da <HAL_DMA_IRQHandler+0xc62>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a16      	ldr	r2, [pc, #88]	; (8006124 <HAL_DMA_IRQHandler+0xcac>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d004      	beq.n	80060da <HAL_DMA_IRQHandler+0xc62>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a14      	ldr	r2, [pc, #80]	; (8006128 <HAL_DMA_IRQHandler+0xcb0>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d128      	bne.n	800612c <HAL_DMA_IRQHandler+0xcb4>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f022 0214 	bic.w	r2, r2, #20
 80060e8:	601a      	str	r2, [r3, #0]
 80060ea:	e027      	b.n	800613c <HAL_DMA_IRQHandler+0xcc4>
 80060ec:	40020010 	.word	0x40020010
 80060f0:	40020028 	.word	0x40020028
 80060f4:	40020040 	.word	0x40020040
 80060f8:	40020058 	.word	0x40020058
 80060fc:	40020070 	.word	0x40020070
 8006100:	40020088 	.word	0x40020088
 8006104:	400200a0 	.word	0x400200a0
 8006108:	400200b8 	.word	0x400200b8
 800610c:	40020410 	.word	0x40020410
 8006110:	40020428 	.word	0x40020428
 8006114:	40020440 	.word	0x40020440
 8006118:	40020458 	.word	0x40020458
 800611c:	40020470 	.word	0x40020470
 8006120:	40020488 	.word	0x40020488
 8006124:	400204a0 	.word	0x400204a0
 8006128:	400204b8 	.word	0x400204b8
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f022 020a 	bic.w	r2, r2, #10
 800613a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006150:	2b00      	cmp	r3, #0
 8006152:	f000 8097 	beq.w	8006284 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800615e:	e091      	b.n	8006284 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006164:	f003 031f 	and.w	r3, r3, #31
 8006168:	2208      	movs	r2, #8
 800616a:	409a      	lsls	r2, r3
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	4013      	ands	r3, r2
 8006170:	2b00      	cmp	r3, #0
 8006172:	f000 8088 	beq.w	8006286 <HAL_DMA_IRQHandler+0xe0e>
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	f003 0308 	and.w	r3, r3, #8
 800617c:	2b00      	cmp	r3, #0
 800617e:	f000 8082 	beq.w	8006286 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a41      	ldr	r2, [pc, #260]	; (800628c <HAL_DMA_IRQHandler+0xe14>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d04a      	beq.n	8006222 <HAL_DMA_IRQHandler+0xdaa>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a3f      	ldr	r2, [pc, #252]	; (8006290 <HAL_DMA_IRQHandler+0xe18>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d045      	beq.n	8006222 <HAL_DMA_IRQHandler+0xdaa>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a3e      	ldr	r2, [pc, #248]	; (8006294 <HAL_DMA_IRQHandler+0xe1c>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d040      	beq.n	8006222 <HAL_DMA_IRQHandler+0xdaa>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a3c      	ldr	r2, [pc, #240]	; (8006298 <HAL_DMA_IRQHandler+0xe20>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d03b      	beq.n	8006222 <HAL_DMA_IRQHandler+0xdaa>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a3b      	ldr	r2, [pc, #236]	; (800629c <HAL_DMA_IRQHandler+0xe24>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d036      	beq.n	8006222 <HAL_DMA_IRQHandler+0xdaa>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a39      	ldr	r2, [pc, #228]	; (80062a0 <HAL_DMA_IRQHandler+0xe28>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d031      	beq.n	8006222 <HAL_DMA_IRQHandler+0xdaa>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a38      	ldr	r2, [pc, #224]	; (80062a4 <HAL_DMA_IRQHandler+0xe2c>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d02c      	beq.n	8006222 <HAL_DMA_IRQHandler+0xdaa>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a36      	ldr	r2, [pc, #216]	; (80062a8 <HAL_DMA_IRQHandler+0xe30>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d027      	beq.n	8006222 <HAL_DMA_IRQHandler+0xdaa>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a35      	ldr	r2, [pc, #212]	; (80062ac <HAL_DMA_IRQHandler+0xe34>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d022      	beq.n	8006222 <HAL_DMA_IRQHandler+0xdaa>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a33      	ldr	r2, [pc, #204]	; (80062b0 <HAL_DMA_IRQHandler+0xe38>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d01d      	beq.n	8006222 <HAL_DMA_IRQHandler+0xdaa>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a32      	ldr	r2, [pc, #200]	; (80062b4 <HAL_DMA_IRQHandler+0xe3c>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d018      	beq.n	8006222 <HAL_DMA_IRQHandler+0xdaa>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a30      	ldr	r2, [pc, #192]	; (80062b8 <HAL_DMA_IRQHandler+0xe40>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d013      	beq.n	8006222 <HAL_DMA_IRQHandler+0xdaa>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a2f      	ldr	r2, [pc, #188]	; (80062bc <HAL_DMA_IRQHandler+0xe44>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d00e      	beq.n	8006222 <HAL_DMA_IRQHandler+0xdaa>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a2d      	ldr	r2, [pc, #180]	; (80062c0 <HAL_DMA_IRQHandler+0xe48>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d009      	beq.n	8006222 <HAL_DMA_IRQHandler+0xdaa>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a2c      	ldr	r2, [pc, #176]	; (80062c4 <HAL_DMA_IRQHandler+0xe4c>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d004      	beq.n	8006222 <HAL_DMA_IRQHandler+0xdaa>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a2a      	ldr	r2, [pc, #168]	; (80062c8 <HAL_DMA_IRQHandler+0xe50>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d108      	bne.n	8006234 <HAL_DMA_IRQHandler+0xdbc>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f022 021c 	bic.w	r2, r2, #28
 8006230:	601a      	str	r2, [r3, #0]
 8006232:	e007      	b.n	8006244 <HAL_DMA_IRQHandler+0xdcc>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f022 020e 	bic.w	r2, r2, #14
 8006242:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006248:	f003 031f 	and.w	r3, r3, #31
 800624c:	2201      	movs	r2, #1
 800624e:	409a      	lsls	r2, r3
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2201      	movs	r2, #1
 800625e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800626e:	2b00      	cmp	r3, #0
 8006270:	d009      	beq.n	8006286 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	4798      	blx	r3
 800627a:	e004      	b.n	8006286 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800627c:	bf00      	nop
 800627e:	e002      	b.n	8006286 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006280:	bf00      	nop
 8006282:	e000      	b.n	8006286 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006284:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006286:	3728      	adds	r7, #40	; 0x28
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}
 800628c:	40020010 	.word	0x40020010
 8006290:	40020028 	.word	0x40020028
 8006294:	40020040 	.word	0x40020040
 8006298:	40020058 	.word	0x40020058
 800629c:	40020070 	.word	0x40020070
 80062a0:	40020088 	.word	0x40020088
 80062a4:	400200a0 	.word	0x400200a0
 80062a8:	400200b8 	.word	0x400200b8
 80062ac:	40020410 	.word	0x40020410
 80062b0:	40020428 	.word	0x40020428
 80062b4:	40020440 	.word	0x40020440
 80062b8:	40020458 	.word	0x40020458
 80062bc:	40020470 	.word	0x40020470
 80062c0:	40020488 	.word	0x40020488
 80062c4:	400204a0 	.word	0x400204a0
 80062c8:	400204b8 	.word	0x400204b8

080062cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b085      	sub	sp, #20
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a42      	ldr	r2, [pc, #264]	; (80063e4 <DMA_CalcBaseAndBitshift+0x118>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d04a      	beq.n	8006374 <DMA_CalcBaseAndBitshift+0xa8>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a41      	ldr	r2, [pc, #260]	; (80063e8 <DMA_CalcBaseAndBitshift+0x11c>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d045      	beq.n	8006374 <DMA_CalcBaseAndBitshift+0xa8>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a3f      	ldr	r2, [pc, #252]	; (80063ec <DMA_CalcBaseAndBitshift+0x120>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d040      	beq.n	8006374 <DMA_CalcBaseAndBitshift+0xa8>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a3e      	ldr	r2, [pc, #248]	; (80063f0 <DMA_CalcBaseAndBitshift+0x124>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d03b      	beq.n	8006374 <DMA_CalcBaseAndBitshift+0xa8>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a3c      	ldr	r2, [pc, #240]	; (80063f4 <DMA_CalcBaseAndBitshift+0x128>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d036      	beq.n	8006374 <DMA_CalcBaseAndBitshift+0xa8>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a3b      	ldr	r2, [pc, #236]	; (80063f8 <DMA_CalcBaseAndBitshift+0x12c>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d031      	beq.n	8006374 <DMA_CalcBaseAndBitshift+0xa8>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a39      	ldr	r2, [pc, #228]	; (80063fc <DMA_CalcBaseAndBitshift+0x130>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d02c      	beq.n	8006374 <DMA_CalcBaseAndBitshift+0xa8>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a38      	ldr	r2, [pc, #224]	; (8006400 <DMA_CalcBaseAndBitshift+0x134>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d027      	beq.n	8006374 <DMA_CalcBaseAndBitshift+0xa8>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a36      	ldr	r2, [pc, #216]	; (8006404 <DMA_CalcBaseAndBitshift+0x138>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d022      	beq.n	8006374 <DMA_CalcBaseAndBitshift+0xa8>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a35      	ldr	r2, [pc, #212]	; (8006408 <DMA_CalcBaseAndBitshift+0x13c>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d01d      	beq.n	8006374 <DMA_CalcBaseAndBitshift+0xa8>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a33      	ldr	r2, [pc, #204]	; (800640c <DMA_CalcBaseAndBitshift+0x140>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d018      	beq.n	8006374 <DMA_CalcBaseAndBitshift+0xa8>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a32      	ldr	r2, [pc, #200]	; (8006410 <DMA_CalcBaseAndBitshift+0x144>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d013      	beq.n	8006374 <DMA_CalcBaseAndBitshift+0xa8>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a30      	ldr	r2, [pc, #192]	; (8006414 <DMA_CalcBaseAndBitshift+0x148>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d00e      	beq.n	8006374 <DMA_CalcBaseAndBitshift+0xa8>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a2f      	ldr	r2, [pc, #188]	; (8006418 <DMA_CalcBaseAndBitshift+0x14c>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d009      	beq.n	8006374 <DMA_CalcBaseAndBitshift+0xa8>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a2d      	ldr	r2, [pc, #180]	; (800641c <DMA_CalcBaseAndBitshift+0x150>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d004      	beq.n	8006374 <DMA_CalcBaseAndBitshift+0xa8>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a2c      	ldr	r2, [pc, #176]	; (8006420 <DMA_CalcBaseAndBitshift+0x154>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d101      	bne.n	8006378 <DMA_CalcBaseAndBitshift+0xac>
 8006374:	2301      	movs	r3, #1
 8006376:	e000      	b.n	800637a <DMA_CalcBaseAndBitshift+0xae>
 8006378:	2300      	movs	r3, #0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d024      	beq.n	80063c8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	b2db      	uxtb	r3, r3
 8006384:	3b10      	subs	r3, #16
 8006386:	4a27      	ldr	r2, [pc, #156]	; (8006424 <DMA_CalcBaseAndBitshift+0x158>)
 8006388:	fba2 2303 	umull	r2, r3, r2, r3
 800638c:	091b      	lsrs	r3, r3, #4
 800638e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f003 0307 	and.w	r3, r3, #7
 8006396:	4a24      	ldr	r2, [pc, #144]	; (8006428 <DMA_CalcBaseAndBitshift+0x15c>)
 8006398:	5cd3      	ldrb	r3, [r2, r3]
 800639a:	461a      	mov	r2, r3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2b03      	cmp	r3, #3
 80063a4:	d908      	bls.n	80063b8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	461a      	mov	r2, r3
 80063ac:	4b1f      	ldr	r3, [pc, #124]	; (800642c <DMA_CalcBaseAndBitshift+0x160>)
 80063ae:	4013      	ands	r3, r2
 80063b0:	1d1a      	adds	r2, r3, #4
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	659a      	str	r2, [r3, #88]	; 0x58
 80063b6:	e00d      	b.n	80063d4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	461a      	mov	r2, r3
 80063be:	4b1b      	ldr	r3, [pc, #108]	; (800642c <DMA_CalcBaseAndBitshift+0x160>)
 80063c0:	4013      	ands	r3, r2
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	6593      	str	r3, [r2, #88]	; 0x58
 80063c6:	e005      	b.n	80063d4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3714      	adds	r7, #20
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr
 80063e4:	40020010 	.word	0x40020010
 80063e8:	40020028 	.word	0x40020028
 80063ec:	40020040 	.word	0x40020040
 80063f0:	40020058 	.word	0x40020058
 80063f4:	40020070 	.word	0x40020070
 80063f8:	40020088 	.word	0x40020088
 80063fc:	400200a0 	.word	0x400200a0
 8006400:	400200b8 	.word	0x400200b8
 8006404:	40020410 	.word	0x40020410
 8006408:	40020428 	.word	0x40020428
 800640c:	40020440 	.word	0x40020440
 8006410:	40020458 	.word	0x40020458
 8006414:	40020470 	.word	0x40020470
 8006418:	40020488 	.word	0x40020488
 800641c:	400204a0 	.word	0x400204a0
 8006420:	400204b8 	.word	0x400204b8
 8006424:	aaaaaaab 	.word	0xaaaaaaab
 8006428:	080154f8 	.word	0x080154f8
 800642c:	fffffc00 	.word	0xfffffc00

08006430 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006430:	b480      	push	{r7}
 8006432:	b085      	sub	sp, #20
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006438:	2300      	movs	r3, #0
 800643a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	699b      	ldr	r3, [r3, #24]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d120      	bne.n	8006486 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006448:	2b03      	cmp	r3, #3
 800644a:	d858      	bhi.n	80064fe <DMA_CheckFifoParam+0xce>
 800644c:	a201      	add	r2, pc, #4	; (adr r2, 8006454 <DMA_CheckFifoParam+0x24>)
 800644e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006452:	bf00      	nop
 8006454:	08006465 	.word	0x08006465
 8006458:	08006477 	.word	0x08006477
 800645c:	08006465 	.word	0x08006465
 8006460:	080064ff 	.word	0x080064ff
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006468:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d048      	beq.n	8006502 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006474:	e045      	b.n	8006502 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800647a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800647e:	d142      	bne.n	8006506 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006484:	e03f      	b.n	8006506 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	699b      	ldr	r3, [r3, #24]
 800648a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800648e:	d123      	bne.n	80064d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006494:	2b03      	cmp	r3, #3
 8006496:	d838      	bhi.n	800650a <DMA_CheckFifoParam+0xda>
 8006498:	a201      	add	r2, pc, #4	; (adr r2, 80064a0 <DMA_CheckFifoParam+0x70>)
 800649a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800649e:	bf00      	nop
 80064a0:	080064b1 	.word	0x080064b1
 80064a4:	080064b7 	.word	0x080064b7
 80064a8:	080064b1 	.word	0x080064b1
 80064ac:	080064c9 	.word	0x080064c9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	73fb      	strb	r3, [r7, #15]
        break;
 80064b4:	e030      	b.n	8006518 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d025      	beq.n	800650e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80064c6:	e022      	b.n	800650e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80064d0:	d11f      	bne.n	8006512 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80064d6:	e01c      	b.n	8006512 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064dc:	2b02      	cmp	r3, #2
 80064de:	d902      	bls.n	80064e6 <DMA_CheckFifoParam+0xb6>
 80064e0:	2b03      	cmp	r3, #3
 80064e2:	d003      	beq.n	80064ec <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80064e4:	e018      	b.n	8006518 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	73fb      	strb	r3, [r7, #15]
        break;
 80064ea:	e015      	b.n	8006518 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00e      	beq.n	8006516 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	73fb      	strb	r3, [r7, #15]
    break;
 80064fc:	e00b      	b.n	8006516 <DMA_CheckFifoParam+0xe6>
        break;
 80064fe:	bf00      	nop
 8006500:	e00a      	b.n	8006518 <DMA_CheckFifoParam+0xe8>
        break;
 8006502:	bf00      	nop
 8006504:	e008      	b.n	8006518 <DMA_CheckFifoParam+0xe8>
        break;
 8006506:	bf00      	nop
 8006508:	e006      	b.n	8006518 <DMA_CheckFifoParam+0xe8>
        break;
 800650a:	bf00      	nop
 800650c:	e004      	b.n	8006518 <DMA_CheckFifoParam+0xe8>
        break;
 800650e:	bf00      	nop
 8006510:	e002      	b.n	8006518 <DMA_CheckFifoParam+0xe8>
        break;
 8006512:	bf00      	nop
 8006514:	e000      	b.n	8006518 <DMA_CheckFifoParam+0xe8>
    break;
 8006516:	bf00      	nop
    }
  }

  return status;
 8006518:	7bfb      	ldrb	r3, [r7, #15]
}
 800651a:	4618      	mov	r0, r3
 800651c:	3714      	adds	r7, #20
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr
 8006526:	bf00      	nop

08006528 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a38      	ldr	r2, [pc, #224]	; (800661c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d022      	beq.n	8006586 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a36      	ldr	r2, [pc, #216]	; (8006620 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d01d      	beq.n	8006586 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a35      	ldr	r2, [pc, #212]	; (8006624 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d018      	beq.n	8006586 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a33      	ldr	r2, [pc, #204]	; (8006628 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d013      	beq.n	8006586 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a32      	ldr	r2, [pc, #200]	; (800662c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d00e      	beq.n	8006586 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a30      	ldr	r2, [pc, #192]	; (8006630 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d009      	beq.n	8006586 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a2f      	ldr	r2, [pc, #188]	; (8006634 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d004      	beq.n	8006586 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a2d      	ldr	r2, [pc, #180]	; (8006638 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d101      	bne.n	800658a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006586:	2301      	movs	r3, #1
 8006588:	e000      	b.n	800658c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800658a:	2300      	movs	r3, #0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d01a      	beq.n	80065c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	b2db      	uxtb	r3, r3
 8006596:	3b08      	subs	r3, #8
 8006598:	4a28      	ldr	r2, [pc, #160]	; (800663c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800659a:	fba2 2303 	umull	r2, r3, r2, r3
 800659e:	091b      	lsrs	r3, r3, #4
 80065a0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	4b26      	ldr	r3, [pc, #152]	; (8006640 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80065a6:	4413      	add	r3, r2
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	461a      	mov	r2, r3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a24      	ldr	r2, [pc, #144]	; (8006644 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80065b4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f003 031f 	and.w	r3, r3, #31
 80065bc:	2201      	movs	r2, #1
 80065be:	409a      	lsls	r2, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80065c4:	e024      	b.n	8006610 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	3b10      	subs	r3, #16
 80065ce:	4a1e      	ldr	r2, [pc, #120]	; (8006648 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80065d0:	fba2 2303 	umull	r2, r3, r2, r3
 80065d4:	091b      	lsrs	r3, r3, #4
 80065d6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	4a1c      	ldr	r2, [pc, #112]	; (800664c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d806      	bhi.n	80065ee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	4a1b      	ldr	r2, [pc, #108]	; (8006650 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d902      	bls.n	80065ee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	3308      	adds	r3, #8
 80065ec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	4b18      	ldr	r3, [pc, #96]	; (8006654 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80065f2:	4413      	add	r3, r2
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	461a      	mov	r2, r3
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4a16      	ldr	r2, [pc, #88]	; (8006658 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006600:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f003 031f 	and.w	r3, r3, #31
 8006608:	2201      	movs	r2, #1
 800660a:	409a      	lsls	r2, r3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006610:	bf00      	nop
 8006612:	3714      	adds	r7, #20
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr
 800661c:	58025408 	.word	0x58025408
 8006620:	5802541c 	.word	0x5802541c
 8006624:	58025430 	.word	0x58025430
 8006628:	58025444 	.word	0x58025444
 800662c:	58025458 	.word	0x58025458
 8006630:	5802546c 	.word	0x5802546c
 8006634:	58025480 	.word	0x58025480
 8006638:	58025494 	.word	0x58025494
 800663c:	cccccccd 	.word	0xcccccccd
 8006640:	16009600 	.word	0x16009600
 8006644:	58025880 	.word	0x58025880
 8006648:	aaaaaaab 	.word	0xaaaaaaab
 800664c:	400204b8 	.word	0x400204b8
 8006650:	4002040f 	.word	0x4002040f
 8006654:	10008200 	.word	0x10008200
 8006658:	40020880 	.word	0x40020880

0800665c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800665c:	b480      	push	{r7}
 800665e:	b085      	sub	sp, #20
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	b2db      	uxtb	r3, r3
 800666a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d04a      	beq.n	8006708 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2b08      	cmp	r3, #8
 8006676:	d847      	bhi.n	8006708 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a25      	ldr	r2, [pc, #148]	; (8006714 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d022      	beq.n	80066c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a24      	ldr	r2, [pc, #144]	; (8006718 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d01d      	beq.n	80066c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a22      	ldr	r2, [pc, #136]	; (800671c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d018      	beq.n	80066c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a21      	ldr	r2, [pc, #132]	; (8006720 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d013      	beq.n	80066c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a1f      	ldr	r2, [pc, #124]	; (8006724 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d00e      	beq.n	80066c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a1e      	ldr	r2, [pc, #120]	; (8006728 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d009      	beq.n	80066c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a1c      	ldr	r2, [pc, #112]	; (800672c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d004      	beq.n	80066c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a1b      	ldr	r2, [pc, #108]	; (8006730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d101      	bne.n	80066cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80066c8:	2301      	movs	r3, #1
 80066ca:	e000      	b.n	80066ce <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80066cc:	2300      	movs	r3, #0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00a      	beq.n	80066e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	4b17      	ldr	r3, [pc, #92]	; (8006734 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80066d6:	4413      	add	r3, r2
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	461a      	mov	r2, r3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a15      	ldr	r2, [pc, #84]	; (8006738 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80066e4:	671a      	str	r2, [r3, #112]	; 0x70
 80066e6:	e009      	b.n	80066fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	4b14      	ldr	r3, [pc, #80]	; (800673c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80066ec:	4413      	add	r3, r2
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	461a      	mov	r2, r3
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a11      	ldr	r2, [pc, #68]	; (8006740 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80066fa:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	3b01      	subs	r3, #1
 8006700:	2201      	movs	r2, #1
 8006702:	409a      	lsls	r2, r3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006708:	bf00      	nop
 800670a:	3714      	adds	r7, #20
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr
 8006714:	58025408 	.word	0x58025408
 8006718:	5802541c 	.word	0x5802541c
 800671c:	58025430 	.word	0x58025430
 8006720:	58025444 	.word	0x58025444
 8006724:	58025458 	.word	0x58025458
 8006728:	5802546c 	.word	0x5802546c
 800672c:	58025480 	.word	0x58025480
 8006730:	58025494 	.word	0x58025494
 8006734:	1600963f 	.word	0x1600963f
 8006738:	58025940 	.word	0x58025940
 800673c:	1000823f 	.word	0x1000823f
 8006740:	40020940 	.word	0x40020940

08006744 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006744:	b480      	push	{r7}
 8006746:	b089      	sub	sp, #36	; 0x24
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800674e:	2300      	movs	r3, #0
 8006750:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006752:	4b89      	ldr	r3, [pc, #548]	; (8006978 <HAL_GPIO_Init+0x234>)
 8006754:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006756:	e194      	b.n	8006a82 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	2101      	movs	r1, #1
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	fa01 f303 	lsl.w	r3, r1, r3
 8006764:	4013      	ands	r3, r2
 8006766:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	2b00      	cmp	r3, #0
 800676c:	f000 8186 	beq.w	8006a7c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	f003 0303 	and.w	r3, r3, #3
 8006778:	2b01      	cmp	r3, #1
 800677a:	d005      	beq.n	8006788 <HAL_GPIO_Init+0x44>
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	f003 0303 	and.w	r3, r3, #3
 8006784:	2b02      	cmp	r3, #2
 8006786:	d130      	bne.n	80067ea <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	005b      	lsls	r3, r3, #1
 8006792:	2203      	movs	r2, #3
 8006794:	fa02 f303 	lsl.w	r3, r2, r3
 8006798:	43db      	mvns	r3, r3
 800679a:	69ba      	ldr	r2, [r7, #24]
 800679c:	4013      	ands	r3, r2
 800679e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	68da      	ldr	r2, [r3, #12]
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	005b      	lsls	r3, r3, #1
 80067a8:	fa02 f303 	lsl.w	r3, r2, r3
 80067ac:	69ba      	ldr	r2, [r7, #24]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	69ba      	ldr	r2, [r7, #24]
 80067b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80067be:	2201      	movs	r2, #1
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	fa02 f303 	lsl.w	r3, r2, r3
 80067c6:	43db      	mvns	r3, r3
 80067c8:	69ba      	ldr	r2, [r7, #24]
 80067ca:	4013      	ands	r3, r2
 80067cc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	091b      	lsrs	r3, r3, #4
 80067d4:	f003 0201 	and.w	r2, r3, #1
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	fa02 f303 	lsl.w	r3, r2, r3
 80067de:	69ba      	ldr	r2, [r7, #24]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	69ba      	ldr	r2, [r7, #24]
 80067e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	f003 0303 	and.w	r3, r3, #3
 80067f2:	2b03      	cmp	r3, #3
 80067f4:	d017      	beq.n	8006826 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	005b      	lsls	r3, r3, #1
 8006800:	2203      	movs	r2, #3
 8006802:	fa02 f303 	lsl.w	r3, r2, r3
 8006806:	43db      	mvns	r3, r3
 8006808:	69ba      	ldr	r2, [r7, #24]
 800680a:	4013      	ands	r3, r2
 800680c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	689a      	ldr	r2, [r3, #8]
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	005b      	lsls	r3, r3, #1
 8006816:	fa02 f303 	lsl.w	r3, r2, r3
 800681a:	69ba      	ldr	r2, [r7, #24]
 800681c:	4313      	orrs	r3, r2
 800681e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	69ba      	ldr	r2, [r7, #24]
 8006824:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	f003 0303 	and.w	r3, r3, #3
 800682e:	2b02      	cmp	r3, #2
 8006830:	d123      	bne.n	800687a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006832:	69fb      	ldr	r3, [r7, #28]
 8006834:	08da      	lsrs	r2, r3, #3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	3208      	adds	r2, #8
 800683a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800683e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	f003 0307 	and.w	r3, r3, #7
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	220f      	movs	r2, #15
 800684a:	fa02 f303 	lsl.w	r3, r2, r3
 800684e:	43db      	mvns	r3, r3
 8006850:	69ba      	ldr	r2, [r7, #24]
 8006852:	4013      	ands	r3, r2
 8006854:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	691a      	ldr	r2, [r3, #16]
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	f003 0307 	and.w	r3, r3, #7
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	fa02 f303 	lsl.w	r3, r2, r3
 8006866:	69ba      	ldr	r2, [r7, #24]
 8006868:	4313      	orrs	r3, r2
 800686a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	08da      	lsrs	r2, r3, #3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	3208      	adds	r2, #8
 8006874:	69b9      	ldr	r1, [r7, #24]
 8006876:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	005b      	lsls	r3, r3, #1
 8006884:	2203      	movs	r2, #3
 8006886:	fa02 f303 	lsl.w	r3, r2, r3
 800688a:	43db      	mvns	r3, r3
 800688c:	69ba      	ldr	r2, [r7, #24]
 800688e:	4013      	ands	r3, r2
 8006890:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	f003 0203 	and.w	r2, r3, #3
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	005b      	lsls	r3, r3, #1
 800689e:	fa02 f303 	lsl.w	r3, r2, r3
 80068a2:	69ba      	ldr	r2, [r7, #24]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	69ba      	ldr	r2, [r7, #24]
 80068ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	f000 80e0 	beq.w	8006a7c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80068bc:	4b2f      	ldr	r3, [pc, #188]	; (800697c <HAL_GPIO_Init+0x238>)
 80068be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80068c2:	4a2e      	ldr	r2, [pc, #184]	; (800697c <HAL_GPIO_Init+0x238>)
 80068c4:	f043 0302 	orr.w	r3, r3, #2
 80068c8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80068cc:	4b2b      	ldr	r3, [pc, #172]	; (800697c <HAL_GPIO_Init+0x238>)
 80068ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80068d2:	f003 0302 	and.w	r3, r3, #2
 80068d6:	60fb      	str	r3, [r7, #12]
 80068d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80068da:	4a29      	ldr	r2, [pc, #164]	; (8006980 <HAL_GPIO_Init+0x23c>)
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	089b      	lsrs	r3, r3, #2
 80068e0:	3302      	adds	r3, #2
 80068e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	f003 0303 	and.w	r3, r3, #3
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	220f      	movs	r2, #15
 80068f2:	fa02 f303 	lsl.w	r3, r2, r3
 80068f6:	43db      	mvns	r3, r3
 80068f8:	69ba      	ldr	r2, [r7, #24]
 80068fa:	4013      	ands	r3, r2
 80068fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a20      	ldr	r2, [pc, #128]	; (8006984 <HAL_GPIO_Init+0x240>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d052      	beq.n	80069ac <HAL_GPIO_Init+0x268>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a1f      	ldr	r2, [pc, #124]	; (8006988 <HAL_GPIO_Init+0x244>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d031      	beq.n	8006972 <HAL_GPIO_Init+0x22e>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a1e      	ldr	r2, [pc, #120]	; (800698c <HAL_GPIO_Init+0x248>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d02b      	beq.n	800696e <HAL_GPIO_Init+0x22a>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a1d      	ldr	r2, [pc, #116]	; (8006990 <HAL_GPIO_Init+0x24c>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d025      	beq.n	800696a <HAL_GPIO_Init+0x226>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a1c      	ldr	r2, [pc, #112]	; (8006994 <HAL_GPIO_Init+0x250>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d01f      	beq.n	8006966 <HAL_GPIO_Init+0x222>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a1b      	ldr	r2, [pc, #108]	; (8006998 <HAL_GPIO_Init+0x254>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d019      	beq.n	8006962 <HAL_GPIO_Init+0x21e>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a1a      	ldr	r2, [pc, #104]	; (800699c <HAL_GPIO_Init+0x258>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d013      	beq.n	800695e <HAL_GPIO_Init+0x21a>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a19      	ldr	r2, [pc, #100]	; (80069a0 <HAL_GPIO_Init+0x25c>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d00d      	beq.n	800695a <HAL_GPIO_Init+0x216>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a18      	ldr	r2, [pc, #96]	; (80069a4 <HAL_GPIO_Init+0x260>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d007      	beq.n	8006956 <HAL_GPIO_Init+0x212>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a17      	ldr	r2, [pc, #92]	; (80069a8 <HAL_GPIO_Init+0x264>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d101      	bne.n	8006952 <HAL_GPIO_Init+0x20e>
 800694e:	2309      	movs	r3, #9
 8006950:	e02d      	b.n	80069ae <HAL_GPIO_Init+0x26a>
 8006952:	230a      	movs	r3, #10
 8006954:	e02b      	b.n	80069ae <HAL_GPIO_Init+0x26a>
 8006956:	2308      	movs	r3, #8
 8006958:	e029      	b.n	80069ae <HAL_GPIO_Init+0x26a>
 800695a:	2307      	movs	r3, #7
 800695c:	e027      	b.n	80069ae <HAL_GPIO_Init+0x26a>
 800695e:	2306      	movs	r3, #6
 8006960:	e025      	b.n	80069ae <HAL_GPIO_Init+0x26a>
 8006962:	2305      	movs	r3, #5
 8006964:	e023      	b.n	80069ae <HAL_GPIO_Init+0x26a>
 8006966:	2304      	movs	r3, #4
 8006968:	e021      	b.n	80069ae <HAL_GPIO_Init+0x26a>
 800696a:	2303      	movs	r3, #3
 800696c:	e01f      	b.n	80069ae <HAL_GPIO_Init+0x26a>
 800696e:	2302      	movs	r3, #2
 8006970:	e01d      	b.n	80069ae <HAL_GPIO_Init+0x26a>
 8006972:	2301      	movs	r3, #1
 8006974:	e01b      	b.n	80069ae <HAL_GPIO_Init+0x26a>
 8006976:	bf00      	nop
 8006978:	58000080 	.word	0x58000080
 800697c:	58024400 	.word	0x58024400
 8006980:	58000400 	.word	0x58000400
 8006984:	58020000 	.word	0x58020000
 8006988:	58020400 	.word	0x58020400
 800698c:	58020800 	.word	0x58020800
 8006990:	58020c00 	.word	0x58020c00
 8006994:	58021000 	.word	0x58021000
 8006998:	58021400 	.word	0x58021400
 800699c:	58021800 	.word	0x58021800
 80069a0:	58021c00 	.word	0x58021c00
 80069a4:	58022000 	.word	0x58022000
 80069a8:	58022400 	.word	0x58022400
 80069ac:	2300      	movs	r3, #0
 80069ae:	69fa      	ldr	r2, [r7, #28]
 80069b0:	f002 0203 	and.w	r2, r2, #3
 80069b4:	0092      	lsls	r2, r2, #2
 80069b6:	4093      	lsls	r3, r2
 80069b8:	69ba      	ldr	r2, [r7, #24]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80069be:	4938      	ldr	r1, [pc, #224]	; (8006aa0 <HAL_GPIO_Init+0x35c>)
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	089b      	lsrs	r3, r3, #2
 80069c4:	3302      	adds	r3, #2
 80069c6:	69ba      	ldr	r2, [r7, #24]
 80069c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80069cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	43db      	mvns	r3, r3
 80069d8:	69ba      	ldr	r2, [r7, #24]
 80069da:	4013      	ands	r3, r2
 80069dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d003      	beq.n	80069f2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80069ea:	69ba      	ldr	r2, [r7, #24]
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80069f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80069fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	43db      	mvns	r3, r3
 8006a06:	69ba      	ldr	r2, [r7, #24]
 8006a08:	4013      	ands	r3, r2
 8006a0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d003      	beq.n	8006a20 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006a18:	69ba      	ldr	r2, [r7, #24]
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006a20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a24:	69bb      	ldr	r3, [r7, #24]
 8006a26:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	43db      	mvns	r3, r3
 8006a32:	69ba      	ldr	r2, [r7, #24]
 8006a34:	4013      	ands	r3, r2
 8006a36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d003      	beq.n	8006a4c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006a44:	69ba      	ldr	r2, [r7, #24]
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	69ba      	ldr	r2, [r7, #24]
 8006a50:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	43db      	mvns	r3, r3
 8006a5c:	69ba      	ldr	r2, [r7, #24]
 8006a5e:	4013      	ands	r3, r2
 8006a60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d003      	beq.n	8006a76 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006a6e:	69ba      	ldr	r2, [r7, #24]
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	69ba      	ldr	r2, [r7, #24]
 8006a7a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006a7c:	69fb      	ldr	r3, [r7, #28]
 8006a7e:	3301      	adds	r3, #1
 8006a80:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	fa22 f303 	lsr.w	r3, r2, r3
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	f47f ae63 	bne.w	8006758 <HAL_GPIO_Init+0x14>
  }
}
 8006a92:	bf00      	nop
 8006a94:	bf00      	nop
 8006a96:	3724      	adds	r7, #36	; 0x24
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr
 8006aa0:	58000400 	.word	0x58000400

08006aa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	460b      	mov	r3, r1
 8006aae:	807b      	strh	r3, [r7, #2]
 8006ab0:	4613      	mov	r3, r2
 8006ab2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006ab4:	787b      	ldrb	r3, [r7, #1]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d003      	beq.n	8006ac2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006aba:	887a      	ldrh	r2, [r7, #2]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006ac0:	e003      	b.n	8006aca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006ac2:	887b      	ldrh	r3, [r7, #2]
 8006ac4:	041a      	lsls	r2, r3, #16
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	619a      	str	r2, [r3, #24]
}
 8006aca:	bf00      	nop
 8006acc:	370c      	adds	r7, #12
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
	...

08006ad8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8006ae0:	4a08      	ldr	r2, [pc, #32]	; (8006b04 <HAL_HSEM_FastTake+0x2c>)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	3320      	adds	r3, #32
 8006ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006aea:	4a07      	ldr	r2, [pc, #28]	; (8006b08 <HAL_HSEM_FastTake+0x30>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d101      	bne.n	8006af4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8006af0:	2300      	movs	r3, #0
 8006af2:	e000      	b.n	8006af6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	370c      	adds	r7, #12
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr
 8006b02:	bf00      	nop
 8006b04:	58026400 	.word	0x58026400
 8006b08:	80000300 	.word	0x80000300

08006b0c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8006b16:	4906      	ldr	r1, [pc, #24]	; (8006b30 <HAL_HSEM_Release+0x24>)
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8006b24:	bf00      	nop
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr
 8006b30:	58026400 	.word	0x58026400

08006b34 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b36:	b08f      	sub	sp, #60	; 0x3c
 8006b38:	af0a      	add	r7, sp, #40	; 0x28
 8006b3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d101      	bne.n	8006b46 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	e116      	b.n	8006d74 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d106      	bne.n	8006b66 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f7fb fcfd 	bl	8002560 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2203      	movs	r2, #3
 8006b6a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d102      	bne.n	8006b80 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4618      	mov	r0, r3
 8006b86:	f007 f87f 	bl	800dc88 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	603b      	str	r3, [r7, #0]
 8006b90:	687e      	ldr	r6, [r7, #4]
 8006b92:	466d      	mov	r5, sp
 8006b94:	f106 0410 	add.w	r4, r6, #16
 8006b98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006b9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006b9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006b9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006ba0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006ba4:	e885 0003 	stmia.w	r5, {r0, r1}
 8006ba8:	1d33      	adds	r3, r6, #4
 8006baa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006bac:	6838      	ldr	r0, [r7, #0]
 8006bae:	f006 fffd 	bl	800dbac <USB_CoreInit>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d005      	beq.n	8006bc4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2202      	movs	r2, #2
 8006bbc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e0d7      	b.n	8006d74 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2100      	movs	r1, #0
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f007 f86d 	bl	800dcaa <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	73fb      	strb	r3, [r7, #15]
 8006bd4:	e04a      	b.n	8006c6c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006bd6:	7bfa      	ldrb	r2, [r7, #15]
 8006bd8:	6879      	ldr	r1, [r7, #4]
 8006bda:	4613      	mov	r3, r2
 8006bdc:	00db      	lsls	r3, r3, #3
 8006bde:	4413      	add	r3, r2
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	440b      	add	r3, r1
 8006be4:	333d      	adds	r3, #61	; 0x3d
 8006be6:	2201      	movs	r2, #1
 8006be8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006bea:	7bfa      	ldrb	r2, [r7, #15]
 8006bec:	6879      	ldr	r1, [r7, #4]
 8006bee:	4613      	mov	r3, r2
 8006bf0:	00db      	lsls	r3, r3, #3
 8006bf2:	4413      	add	r3, r2
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	440b      	add	r3, r1
 8006bf8:	333c      	adds	r3, #60	; 0x3c
 8006bfa:	7bfa      	ldrb	r2, [r7, #15]
 8006bfc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006bfe:	7bfa      	ldrb	r2, [r7, #15]
 8006c00:	7bfb      	ldrb	r3, [r7, #15]
 8006c02:	b298      	uxth	r0, r3
 8006c04:	6879      	ldr	r1, [r7, #4]
 8006c06:	4613      	mov	r3, r2
 8006c08:	00db      	lsls	r3, r3, #3
 8006c0a:	4413      	add	r3, r2
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	440b      	add	r3, r1
 8006c10:	3356      	adds	r3, #86	; 0x56
 8006c12:	4602      	mov	r2, r0
 8006c14:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006c16:	7bfa      	ldrb	r2, [r7, #15]
 8006c18:	6879      	ldr	r1, [r7, #4]
 8006c1a:	4613      	mov	r3, r2
 8006c1c:	00db      	lsls	r3, r3, #3
 8006c1e:	4413      	add	r3, r2
 8006c20:	009b      	lsls	r3, r3, #2
 8006c22:	440b      	add	r3, r1
 8006c24:	3340      	adds	r3, #64	; 0x40
 8006c26:	2200      	movs	r2, #0
 8006c28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006c2a:	7bfa      	ldrb	r2, [r7, #15]
 8006c2c:	6879      	ldr	r1, [r7, #4]
 8006c2e:	4613      	mov	r3, r2
 8006c30:	00db      	lsls	r3, r3, #3
 8006c32:	4413      	add	r3, r2
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	440b      	add	r3, r1
 8006c38:	3344      	adds	r3, #68	; 0x44
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006c3e:	7bfa      	ldrb	r2, [r7, #15]
 8006c40:	6879      	ldr	r1, [r7, #4]
 8006c42:	4613      	mov	r3, r2
 8006c44:	00db      	lsls	r3, r3, #3
 8006c46:	4413      	add	r3, r2
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	440b      	add	r3, r1
 8006c4c:	3348      	adds	r3, #72	; 0x48
 8006c4e:	2200      	movs	r2, #0
 8006c50:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006c52:	7bfa      	ldrb	r2, [r7, #15]
 8006c54:	6879      	ldr	r1, [r7, #4]
 8006c56:	4613      	mov	r3, r2
 8006c58:	00db      	lsls	r3, r3, #3
 8006c5a:	4413      	add	r3, r2
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	440b      	add	r3, r1
 8006c60:	334c      	adds	r3, #76	; 0x4c
 8006c62:	2200      	movs	r2, #0
 8006c64:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c66:	7bfb      	ldrb	r3, [r7, #15]
 8006c68:	3301      	adds	r3, #1
 8006c6a:	73fb      	strb	r3, [r7, #15]
 8006c6c:	7bfa      	ldrb	r2, [r7, #15]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d3af      	bcc.n	8006bd6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c76:	2300      	movs	r3, #0
 8006c78:	73fb      	strb	r3, [r7, #15]
 8006c7a:	e044      	b.n	8006d06 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006c7c:	7bfa      	ldrb	r2, [r7, #15]
 8006c7e:	6879      	ldr	r1, [r7, #4]
 8006c80:	4613      	mov	r3, r2
 8006c82:	00db      	lsls	r3, r3, #3
 8006c84:	4413      	add	r3, r2
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	440b      	add	r3, r1
 8006c8a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8006c8e:	2200      	movs	r2, #0
 8006c90:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006c92:	7bfa      	ldrb	r2, [r7, #15]
 8006c94:	6879      	ldr	r1, [r7, #4]
 8006c96:	4613      	mov	r3, r2
 8006c98:	00db      	lsls	r3, r3, #3
 8006c9a:	4413      	add	r3, r2
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	440b      	add	r3, r1
 8006ca0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8006ca4:	7bfa      	ldrb	r2, [r7, #15]
 8006ca6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006ca8:	7bfa      	ldrb	r2, [r7, #15]
 8006caa:	6879      	ldr	r1, [r7, #4]
 8006cac:	4613      	mov	r3, r2
 8006cae:	00db      	lsls	r3, r3, #3
 8006cb0:	4413      	add	r3, r2
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	440b      	add	r3, r1
 8006cb6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006cba:	2200      	movs	r2, #0
 8006cbc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006cbe:	7bfa      	ldrb	r2, [r7, #15]
 8006cc0:	6879      	ldr	r1, [r7, #4]
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	00db      	lsls	r3, r3, #3
 8006cc6:	4413      	add	r3, r2
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	440b      	add	r3, r1
 8006ccc:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006cd4:	7bfa      	ldrb	r2, [r7, #15]
 8006cd6:	6879      	ldr	r1, [r7, #4]
 8006cd8:	4613      	mov	r3, r2
 8006cda:	00db      	lsls	r3, r3, #3
 8006cdc:	4413      	add	r3, r2
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	440b      	add	r3, r1
 8006ce2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006cea:	7bfa      	ldrb	r2, [r7, #15]
 8006cec:	6879      	ldr	r1, [r7, #4]
 8006cee:	4613      	mov	r3, r2
 8006cf0:	00db      	lsls	r3, r3, #3
 8006cf2:	4413      	add	r3, r2
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	440b      	add	r3, r1
 8006cf8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d00:	7bfb      	ldrb	r3, [r7, #15]
 8006d02:	3301      	adds	r3, #1
 8006d04:	73fb      	strb	r3, [r7, #15]
 8006d06:	7bfa      	ldrb	r2, [r7, #15]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d3b5      	bcc.n	8006c7c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	603b      	str	r3, [r7, #0]
 8006d16:	687e      	ldr	r6, [r7, #4]
 8006d18:	466d      	mov	r5, sp
 8006d1a:	f106 0410 	add.w	r4, r6, #16
 8006d1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006d20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006d22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006d24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006d26:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006d2a:	e885 0003 	stmia.w	r5, {r0, r1}
 8006d2e:	1d33      	adds	r3, r6, #4
 8006d30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d32:	6838      	ldr	r0, [r7, #0]
 8006d34:	f007 f806 	bl	800dd44 <USB_DevInit>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d005      	beq.n	8006d4a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2202      	movs	r2, #2
 8006d42:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	e014      	b.n	8006d74 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2201      	movs	r2, #1
 8006d56:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d102      	bne.n	8006d68 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 f80a 	bl	8006d7c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f007 f9c4 	bl	800e0fa <USB_DevDisconnect>

  return HAL_OK;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3714      	adds	r7, #20
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006d7c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b085      	sub	sp, #20
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	699b      	ldr	r3, [r3, #24]
 8006d9e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006daa:	4b05      	ldr	r3, [pc, #20]	; (8006dc0 <HAL_PCDEx_ActivateLPM+0x44>)
 8006dac:	4313      	orrs	r3, r2
 8006dae:	68fa      	ldr	r2, [r7, #12]
 8006db0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006db2:	2300      	movs	r3, #0
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3714      	adds	r7, #20
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr
 8006dc0:	10000003 	.word	0x10000003

08006dc4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b084      	sub	sp, #16
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006dcc:	4b29      	ldr	r3, [pc, #164]	; (8006e74 <HAL_PWREx_ConfigSupply+0xb0>)
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	f003 0307 	and.w	r3, r3, #7
 8006dd4:	2b06      	cmp	r3, #6
 8006dd6:	d00a      	beq.n	8006dee <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006dd8:	4b26      	ldr	r3, [pc, #152]	; (8006e74 <HAL_PWREx_ConfigSupply+0xb0>)
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d001      	beq.n	8006dea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	e040      	b.n	8006e6c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006dea:	2300      	movs	r3, #0
 8006dec:	e03e      	b.n	8006e6c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006dee:	4b21      	ldr	r3, [pc, #132]	; (8006e74 <HAL_PWREx_ConfigSupply+0xb0>)
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8006df6:	491f      	ldr	r1, [pc, #124]	; (8006e74 <HAL_PWREx_ConfigSupply+0xb0>)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006dfe:	f7fb fe25 	bl	8002a4c <HAL_GetTick>
 8006e02:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006e04:	e009      	b.n	8006e1a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006e06:	f7fb fe21 	bl	8002a4c <HAL_GetTick>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	1ad3      	subs	r3, r2, r3
 8006e10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e14:	d901      	bls.n	8006e1a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e028      	b.n	8006e6c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006e1a:	4b16      	ldr	r3, [pc, #88]	; (8006e74 <HAL_PWREx_ConfigSupply+0xb0>)
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e26:	d1ee      	bne.n	8006e06 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2b1e      	cmp	r3, #30
 8006e2c:	d008      	beq.n	8006e40 <HAL_PWREx_ConfigSupply+0x7c>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2b2e      	cmp	r3, #46	; 0x2e
 8006e32:	d005      	beq.n	8006e40 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2b1d      	cmp	r3, #29
 8006e38:	d002      	beq.n	8006e40 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2b2d      	cmp	r3, #45	; 0x2d
 8006e3e:	d114      	bne.n	8006e6a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006e40:	f7fb fe04 	bl	8002a4c <HAL_GetTick>
 8006e44:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006e46:	e009      	b.n	8006e5c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006e48:	f7fb fe00 	bl	8002a4c <HAL_GetTick>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	1ad3      	subs	r3, r2, r3
 8006e52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e56:	d901      	bls.n	8006e5c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e007      	b.n	8006e6c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006e5c:	4b05      	ldr	r3, [pc, #20]	; (8006e74 <HAL_PWREx_ConfigSupply+0xb0>)
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e68:	d1ee      	bne.n	8006e48 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006e6a:	2300      	movs	r3, #0
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3710      	adds	r7, #16
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}
 8006e74:	58024800 	.word	0x58024800

08006e78 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006e7c:	4b05      	ldr	r3, [pc, #20]	; (8006e94 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	4a04      	ldr	r2, [pc, #16]	; (8006e94 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006e82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e86:	60d3      	str	r3, [r2, #12]
}
 8006e88:	bf00      	nop
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr
 8006e92:	bf00      	nop
 8006e94:	58024800 	.word	0x58024800

08006e98 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b08c      	sub	sp, #48	; 0x30
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d102      	bne.n	8006eac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	f000 bc48 	b.w	800773c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f003 0301 	and.w	r3, r3, #1
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	f000 8088 	beq.w	8006fca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006eba:	4b99      	ldr	r3, [pc, #612]	; (8007120 <HAL_RCC_OscConfig+0x288>)
 8006ebc:	691b      	ldr	r3, [r3, #16]
 8006ebe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006ec4:	4b96      	ldr	r3, [pc, #600]	; (8007120 <HAL_RCC_OscConfig+0x288>)
 8006ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ecc:	2b10      	cmp	r3, #16
 8006ece:	d007      	beq.n	8006ee0 <HAL_RCC_OscConfig+0x48>
 8006ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ed2:	2b18      	cmp	r3, #24
 8006ed4:	d111      	bne.n	8006efa <HAL_RCC_OscConfig+0x62>
 8006ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed8:	f003 0303 	and.w	r3, r3, #3
 8006edc:	2b02      	cmp	r3, #2
 8006ede:	d10c      	bne.n	8006efa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ee0:	4b8f      	ldr	r3, [pc, #572]	; (8007120 <HAL_RCC_OscConfig+0x288>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d06d      	beq.n	8006fc8 <HAL_RCC_OscConfig+0x130>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d169      	bne.n	8006fc8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	f000 bc21 	b.w	800773c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f02:	d106      	bne.n	8006f12 <HAL_RCC_OscConfig+0x7a>
 8006f04:	4b86      	ldr	r3, [pc, #536]	; (8007120 <HAL_RCC_OscConfig+0x288>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a85      	ldr	r2, [pc, #532]	; (8007120 <HAL_RCC_OscConfig+0x288>)
 8006f0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f0e:	6013      	str	r3, [r2, #0]
 8006f10:	e02e      	b.n	8006f70 <HAL_RCC_OscConfig+0xd8>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d10c      	bne.n	8006f34 <HAL_RCC_OscConfig+0x9c>
 8006f1a:	4b81      	ldr	r3, [pc, #516]	; (8007120 <HAL_RCC_OscConfig+0x288>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a80      	ldr	r2, [pc, #512]	; (8007120 <HAL_RCC_OscConfig+0x288>)
 8006f20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f24:	6013      	str	r3, [r2, #0]
 8006f26:	4b7e      	ldr	r3, [pc, #504]	; (8007120 <HAL_RCC_OscConfig+0x288>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a7d      	ldr	r2, [pc, #500]	; (8007120 <HAL_RCC_OscConfig+0x288>)
 8006f2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f30:	6013      	str	r3, [r2, #0]
 8006f32:	e01d      	b.n	8006f70 <HAL_RCC_OscConfig+0xd8>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f3c:	d10c      	bne.n	8006f58 <HAL_RCC_OscConfig+0xc0>
 8006f3e:	4b78      	ldr	r3, [pc, #480]	; (8007120 <HAL_RCC_OscConfig+0x288>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a77      	ldr	r2, [pc, #476]	; (8007120 <HAL_RCC_OscConfig+0x288>)
 8006f44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f48:	6013      	str	r3, [r2, #0]
 8006f4a:	4b75      	ldr	r3, [pc, #468]	; (8007120 <HAL_RCC_OscConfig+0x288>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a74      	ldr	r2, [pc, #464]	; (8007120 <HAL_RCC_OscConfig+0x288>)
 8006f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f54:	6013      	str	r3, [r2, #0]
 8006f56:	e00b      	b.n	8006f70 <HAL_RCC_OscConfig+0xd8>
 8006f58:	4b71      	ldr	r3, [pc, #452]	; (8007120 <HAL_RCC_OscConfig+0x288>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a70      	ldr	r2, [pc, #448]	; (8007120 <HAL_RCC_OscConfig+0x288>)
 8006f5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f62:	6013      	str	r3, [r2, #0]
 8006f64:	4b6e      	ldr	r3, [pc, #440]	; (8007120 <HAL_RCC_OscConfig+0x288>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a6d      	ldr	r2, [pc, #436]	; (8007120 <HAL_RCC_OscConfig+0x288>)
 8006f6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d013      	beq.n	8006fa0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f78:	f7fb fd68 	bl	8002a4c <HAL_GetTick>
 8006f7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006f7e:	e008      	b.n	8006f92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f80:	f7fb fd64 	bl	8002a4c <HAL_GetTick>
 8006f84:	4602      	mov	r2, r0
 8006f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f88:	1ad3      	subs	r3, r2, r3
 8006f8a:	2b64      	cmp	r3, #100	; 0x64
 8006f8c:	d901      	bls.n	8006f92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006f8e:	2303      	movs	r3, #3
 8006f90:	e3d4      	b.n	800773c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006f92:	4b63      	ldr	r3, [pc, #396]	; (8007120 <HAL_RCC_OscConfig+0x288>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d0f0      	beq.n	8006f80 <HAL_RCC_OscConfig+0xe8>
 8006f9e:	e014      	b.n	8006fca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fa0:	f7fb fd54 	bl	8002a4c <HAL_GetTick>
 8006fa4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006fa6:	e008      	b.n	8006fba <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006fa8:	f7fb fd50 	bl	8002a4c <HAL_GetTick>
 8006fac:	4602      	mov	r2, r0
 8006fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb0:	1ad3      	subs	r3, r2, r3
 8006fb2:	2b64      	cmp	r3, #100	; 0x64
 8006fb4:	d901      	bls.n	8006fba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006fb6:	2303      	movs	r3, #3
 8006fb8:	e3c0      	b.n	800773c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006fba:	4b59      	ldr	r3, [pc, #356]	; (8007120 <HAL_RCC_OscConfig+0x288>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d1f0      	bne.n	8006fa8 <HAL_RCC_OscConfig+0x110>
 8006fc6:	e000      	b.n	8006fca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f003 0302 	and.w	r3, r3, #2
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	f000 80ca 	beq.w	800716c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006fd8:	4b51      	ldr	r3, [pc, #324]	; (8007120 <HAL_RCC_OscConfig+0x288>)
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006fe0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006fe2:	4b4f      	ldr	r3, [pc, #316]	; (8007120 <HAL_RCC_OscConfig+0x288>)
 8006fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fe6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006fe8:	6a3b      	ldr	r3, [r7, #32]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d007      	beq.n	8006ffe <HAL_RCC_OscConfig+0x166>
 8006fee:	6a3b      	ldr	r3, [r7, #32]
 8006ff0:	2b18      	cmp	r3, #24
 8006ff2:	d156      	bne.n	80070a2 <HAL_RCC_OscConfig+0x20a>
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	f003 0303 	and.w	r3, r3, #3
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d151      	bne.n	80070a2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ffe:	4b48      	ldr	r3, [pc, #288]	; (8007120 <HAL_RCC_OscConfig+0x288>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f003 0304 	and.w	r3, r3, #4
 8007006:	2b00      	cmp	r3, #0
 8007008:	d005      	beq.n	8007016 <HAL_RCC_OscConfig+0x17e>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d101      	bne.n	8007016 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e392      	b.n	800773c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007016:	4b42      	ldr	r3, [pc, #264]	; (8007120 <HAL_RCC_OscConfig+0x288>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f023 0219 	bic.w	r2, r3, #25
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	493f      	ldr	r1, [pc, #252]	; (8007120 <HAL_RCC_OscConfig+0x288>)
 8007024:	4313      	orrs	r3, r2
 8007026:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007028:	f7fb fd10 	bl	8002a4c <HAL_GetTick>
 800702c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800702e:	e008      	b.n	8007042 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007030:	f7fb fd0c 	bl	8002a4c <HAL_GetTick>
 8007034:	4602      	mov	r2, r0
 8007036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007038:	1ad3      	subs	r3, r2, r3
 800703a:	2b02      	cmp	r3, #2
 800703c:	d901      	bls.n	8007042 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800703e:	2303      	movs	r3, #3
 8007040:	e37c      	b.n	800773c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007042:	4b37      	ldr	r3, [pc, #220]	; (8007120 <HAL_RCC_OscConfig+0x288>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f003 0304 	and.w	r3, r3, #4
 800704a:	2b00      	cmp	r3, #0
 800704c:	d0f0      	beq.n	8007030 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800704e:	f7fb fd2d 	bl	8002aac <HAL_GetREVID>
 8007052:	4603      	mov	r3, r0
 8007054:	f241 0203 	movw	r2, #4099	; 0x1003
 8007058:	4293      	cmp	r3, r2
 800705a:	d817      	bhi.n	800708c <HAL_RCC_OscConfig+0x1f4>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	691b      	ldr	r3, [r3, #16]
 8007060:	2b40      	cmp	r3, #64	; 0x40
 8007062:	d108      	bne.n	8007076 <HAL_RCC_OscConfig+0x1de>
 8007064:	4b2e      	ldr	r3, [pc, #184]	; (8007120 <HAL_RCC_OscConfig+0x288>)
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800706c:	4a2c      	ldr	r2, [pc, #176]	; (8007120 <HAL_RCC_OscConfig+0x288>)
 800706e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007072:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007074:	e07a      	b.n	800716c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007076:	4b2a      	ldr	r3, [pc, #168]	; (8007120 <HAL_RCC_OscConfig+0x288>)
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	031b      	lsls	r3, r3, #12
 8007084:	4926      	ldr	r1, [pc, #152]	; (8007120 <HAL_RCC_OscConfig+0x288>)
 8007086:	4313      	orrs	r3, r2
 8007088:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800708a:	e06f      	b.n	800716c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800708c:	4b24      	ldr	r3, [pc, #144]	; (8007120 <HAL_RCC_OscConfig+0x288>)
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	691b      	ldr	r3, [r3, #16]
 8007098:	061b      	lsls	r3, r3, #24
 800709a:	4921      	ldr	r1, [pc, #132]	; (8007120 <HAL_RCC_OscConfig+0x288>)
 800709c:	4313      	orrs	r3, r2
 800709e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80070a0:	e064      	b.n	800716c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d047      	beq.n	800713a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80070aa:	4b1d      	ldr	r3, [pc, #116]	; (8007120 <HAL_RCC_OscConfig+0x288>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f023 0219 	bic.w	r2, r3, #25
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	68db      	ldr	r3, [r3, #12]
 80070b6:	491a      	ldr	r1, [pc, #104]	; (8007120 <HAL_RCC_OscConfig+0x288>)
 80070b8:	4313      	orrs	r3, r2
 80070ba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070bc:	f7fb fcc6 	bl	8002a4c <HAL_GetTick>
 80070c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80070c2:	e008      	b.n	80070d6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070c4:	f7fb fcc2 	bl	8002a4c <HAL_GetTick>
 80070c8:	4602      	mov	r2, r0
 80070ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070cc:	1ad3      	subs	r3, r2, r3
 80070ce:	2b02      	cmp	r3, #2
 80070d0:	d901      	bls.n	80070d6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80070d2:	2303      	movs	r3, #3
 80070d4:	e332      	b.n	800773c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80070d6:	4b12      	ldr	r3, [pc, #72]	; (8007120 <HAL_RCC_OscConfig+0x288>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f003 0304 	and.w	r3, r3, #4
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d0f0      	beq.n	80070c4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070e2:	f7fb fce3 	bl	8002aac <HAL_GetREVID>
 80070e6:	4603      	mov	r3, r0
 80070e8:	f241 0203 	movw	r2, #4099	; 0x1003
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d819      	bhi.n	8007124 <HAL_RCC_OscConfig+0x28c>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	691b      	ldr	r3, [r3, #16]
 80070f4:	2b40      	cmp	r3, #64	; 0x40
 80070f6:	d108      	bne.n	800710a <HAL_RCC_OscConfig+0x272>
 80070f8:	4b09      	ldr	r3, [pc, #36]	; (8007120 <HAL_RCC_OscConfig+0x288>)
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007100:	4a07      	ldr	r2, [pc, #28]	; (8007120 <HAL_RCC_OscConfig+0x288>)
 8007102:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007106:	6053      	str	r3, [r2, #4]
 8007108:	e030      	b.n	800716c <HAL_RCC_OscConfig+0x2d4>
 800710a:	4b05      	ldr	r3, [pc, #20]	; (8007120 <HAL_RCC_OscConfig+0x288>)
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	031b      	lsls	r3, r3, #12
 8007118:	4901      	ldr	r1, [pc, #4]	; (8007120 <HAL_RCC_OscConfig+0x288>)
 800711a:	4313      	orrs	r3, r2
 800711c:	604b      	str	r3, [r1, #4]
 800711e:	e025      	b.n	800716c <HAL_RCC_OscConfig+0x2d4>
 8007120:	58024400 	.word	0x58024400
 8007124:	4b9a      	ldr	r3, [pc, #616]	; (8007390 <HAL_RCC_OscConfig+0x4f8>)
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	061b      	lsls	r3, r3, #24
 8007132:	4997      	ldr	r1, [pc, #604]	; (8007390 <HAL_RCC_OscConfig+0x4f8>)
 8007134:	4313      	orrs	r3, r2
 8007136:	604b      	str	r3, [r1, #4]
 8007138:	e018      	b.n	800716c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800713a:	4b95      	ldr	r3, [pc, #596]	; (8007390 <HAL_RCC_OscConfig+0x4f8>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a94      	ldr	r2, [pc, #592]	; (8007390 <HAL_RCC_OscConfig+0x4f8>)
 8007140:	f023 0301 	bic.w	r3, r3, #1
 8007144:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007146:	f7fb fc81 	bl	8002a4c <HAL_GetTick>
 800714a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800714c:	e008      	b.n	8007160 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800714e:	f7fb fc7d 	bl	8002a4c <HAL_GetTick>
 8007152:	4602      	mov	r2, r0
 8007154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007156:	1ad3      	subs	r3, r2, r3
 8007158:	2b02      	cmp	r3, #2
 800715a:	d901      	bls.n	8007160 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800715c:	2303      	movs	r3, #3
 800715e:	e2ed      	b.n	800773c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007160:	4b8b      	ldr	r3, [pc, #556]	; (8007390 <HAL_RCC_OscConfig+0x4f8>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 0304 	and.w	r3, r3, #4
 8007168:	2b00      	cmp	r3, #0
 800716a:	d1f0      	bne.n	800714e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f003 0310 	and.w	r3, r3, #16
 8007174:	2b00      	cmp	r3, #0
 8007176:	f000 80a9 	beq.w	80072cc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800717a:	4b85      	ldr	r3, [pc, #532]	; (8007390 <HAL_RCC_OscConfig+0x4f8>)
 800717c:	691b      	ldr	r3, [r3, #16]
 800717e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007182:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007184:	4b82      	ldr	r3, [pc, #520]	; (8007390 <HAL_RCC_OscConfig+0x4f8>)
 8007186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007188:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	2b08      	cmp	r3, #8
 800718e:	d007      	beq.n	80071a0 <HAL_RCC_OscConfig+0x308>
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	2b18      	cmp	r3, #24
 8007194:	d13a      	bne.n	800720c <HAL_RCC_OscConfig+0x374>
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	f003 0303 	and.w	r3, r3, #3
 800719c:	2b01      	cmp	r3, #1
 800719e:	d135      	bne.n	800720c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80071a0:	4b7b      	ldr	r3, [pc, #492]	; (8007390 <HAL_RCC_OscConfig+0x4f8>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d005      	beq.n	80071b8 <HAL_RCC_OscConfig+0x320>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	69db      	ldr	r3, [r3, #28]
 80071b0:	2b80      	cmp	r3, #128	; 0x80
 80071b2:	d001      	beq.n	80071b8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80071b4:	2301      	movs	r3, #1
 80071b6:	e2c1      	b.n	800773c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80071b8:	f7fb fc78 	bl	8002aac <HAL_GetREVID>
 80071bc:	4603      	mov	r3, r0
 80071be:	f241 0203 	movw	r2, #4099	; 0x1003
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d817      	bhi.n	80071f6 <HAL_RCC_OscConfig+0x35e>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6a1b      	ldr	r3, [r3, #32]
 80071ca:	2b20      	cmp	r3, #32
 80071cc:	d108      	bne.n	80071e0 <HAL_RCC_OscConfig+0x348>
 80071ce:	4b70      	ldr	r3, [pc, #448]	; (8007390 <HAL_RCC_OscConfig+0x4f8>)
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80071d6:	4a6e      	ldr	r2, [pc, #440]	; (8007390 <HAL_RCC_OscConfig+0x4f8>)
 80071d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071dc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80071de:	e075      	b.n	80072cc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80071e0:	4b6b      	ldr	r3, [pc, #428]	; (8007390 <HAL_RCC_OscConfig+0x4f8>)
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6a1b      	ldr	r3, [r3, #32]
 80071ec:	069b      	lsls	r3, r3, #26
 80071ee:	4968      	ldr	r1, [pc, #416]	; (8007390 <HAL_RCC_OscConfig+0x4f8>)
 80071f0:	4313      	orrs	r3, r2
 80071f2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80071f4:	e06a      	b.n	80072cc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80071f6:	4b66      	ldr	r3, [pc, #408]	; (8007390 <HAL_RCC_OscConfig+0x4f8>)
 80071f8:	68db      	ldr	r3, [r3, #12]
 80071fa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6a1b      	ldr	r3, [r3, #32]
 8007202:	061b      	lsls	r3, r3, #24
 8007204:	4962      	ldr	r1, [pc, #392]	; (8007390 <HAL_RCC_OscConfig+0x4f8>)
 8007206:	4313      	orrs	r3, r2
 8007208:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800720a:	e05f      	b.n	80072cc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	69db      	ldr	r3, [r3, #28]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d042      	beq.n	800729a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007214:	4b5e      	ldr	r3, [pc, #376]	; (8007390 <HAL_RCC_OscConfig+0x4f8>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a5d      	ldr	r2, [pc, #372]	; (8007390 <HAL_RCC_OscConfig+0x4f8>)
 800721a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800721e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007220:	f7fb fc14 	bl	8002a4c <HAL_GetTick>
 8007224:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007226:	e008      	b.n	800723a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007228:	f7fb fc10 	bl	8002a4c <HAL_GetTick>
 800722c:	4602      	mov	r2, r0
 800722e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007230:	1ad3      	subs	r3, r2, r3
 8007232:	2b02      	cmp	r3, #2
 8007234:	d901      	bls.n	800723a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007236:	2303      	movs	r3, #3
 8007238:	e280      	b.n	800773c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800723a:	4b55      	ldr	r3, [pc, #340]	; (8007390 <HAL_RCC_OscConfig+0x4f8>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007242:	2b00      	cmp	r3, #0
 8007244:	d0f0      	beq.n	8007228 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007246:	f7fb fc31 	bl	8002aac <HAL_GetREVID>
 800724a:	4603      	mov	r3, r0
 800724c:	f241 0203 	movw	r2, #4099	; 0x1003
 8007250:	4293      	cmp	r3, r2
 8007252:	d817      	bhi.n	8007284 <HAL_RCC_OscConfig+0x3ec>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6a1b      	ldr	r3, [r3, #32]
 8007258:	2b20      	cmp	r3, #32
 800725a:	d108      	bne.n	800726e <HAL_RCC_OscConfig+0x3d6>
 800725c:	4b4c      	ldr	r3, [pc, #304]	; (8007390 <HAL_RCC_OscConfig+0x4f8>)
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007264:	4a4a      	ldr	r2, [pc, #296]	; (8007390 <HAL_RCC_OscConfig+0x4f8>)
 8007266:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800726a:	6053      	str	r3, [r2, #4]
 800726c:	e02e      	b.n	80072cc <HAL_RCC_OscConfig+0x434>
 800726e:	4b48      	ldr	r3, [pc, #288]	; (8007390 <HAL_RCC_OscConfig+0x4f8>)
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a1b      	ldr	r3, [r3, #32]
 800727a:	069b      	lsls	r3, r3, #26
 800727c:	4944      	ldr	r1, [pc, #272]	; (8007390 <HAL_RCC_OscConfig+0x4f8>)
 800727e:	4313      	orrs	r3, r2
 8007280:	604b      	str	r3, [r1, #4]
 8007282:	e023      	b.n	80072cc <HAL_RCC_OscConfig+0x434>
 8007284:	4b42      	ldr	r3, [pc, #264]	; (8007390 <HAL_RCC_OscConfig+0x4f8>)
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6a1b      	ldr	r3, [r3, #32]
 8007290:	061b      	lsls	r3, r3, #24
 8007292:	493f      	ldr	r1, [pc, #252]	; (8007390 <HAL_RCC_OscConfig+0x4f8>)
 8007294:	4313      	orrs	r3, r2
 8007296:	60cb      	str	r3, [r1, #12]
 8007298:	e018      	b.n	80072cc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800729a:	4b3d      	ldr	r3, [pc, #244]	; (8007390 <HAL_RCC_OscConfig+0x4f8>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a3c      	ldr	r2, [pc, #240]	; (8007390 <HAL_RCC_OscConfig+0x4f8>)
 80072a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072a6:	f7fb fbd1 	bl	8002a4c <HAL_GetTick>
 80072aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80072ac:	e008      	b.n	80072c0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80072ae:	f7fb fbcd 	bl	8002a4c <HAL_GetTick>
 80072b2:	4602      	mov	r2, r0
 80072b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b6:	1ad3      	subs	r3, r2, r3
 80072b8:	2b02      	cmp	r3, #2
 80072ba:	d901      	bls.n	80072c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80072bc:	2303      	movs	r3, #3
 80072be:	e23d      	b.n	800773c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80072c0:	4b33      	ldr	r3, [pc, #204]	; (8007390 <HAL_RCC_OscConfig+0x4f8>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d1f0      	bne.n	80072ae <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f003 0308 	and.w	r3, r3, #8
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d036      	beq.n	8007346 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	695b      	ldr	r3, [r3, #20]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d019      	beq.n	8007314 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80072e0:	4b2b      	ldr	r3, [pc, #172]	; (8007390 <HAL_RCC_OscConfig+0x4f8>)
 80072e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072e4:	4a2a      	ldr	r2, [pc, #168]	; (8007390 <HAL_RCC_OscConfig+0x4f8>)
 80072e6:	f043 0301 	orr.w	r3, r3, #1
 80072ea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072ec:	f7fb fbae 	bl	8002a4c <HAL_GetTick>
 80072f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80072f2:	e008      	b.n	8007306 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072f4:	f7fb fbaa 	bl	8002a4c <HAL_GetTick>
 80072f8:	4602      	mov	r2, r0
 80072fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fc:	1ad3      	subs	r3, r2, r3
 80072fe:	2b02      	cmp	r3, #2
 8007300:	d901      	bls.n	8007306 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007302:	2303      	movs	r3, #3
 8007304:	e21a      	b.n	800773c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007306:	4b22      	ldr	r3, [pc, #136]	; (8007390 <HAL_RCC_OscConfig+0x4f8>)
 8007308:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800730a:	f003 0302 	and.w	r3, r3, #2
 800730e:	2b00      	cmp	r3, #0
 8007310:	d0f0      	beq.n	80072f4 <HAL_RCC_OscConfig+0x45c>
 8007312:	e018      	b.n	8007346 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007314:	4b1e      	ldr	r3, [pc, #120]	; (8007390 <HAL_RCC_OscConfig+0x4f8>)
 8007316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007318:	4a1d      	ldr	r2, [pc, #116]	; (8007390 <HAL_RCC_OscConfig+0x4f8>)
 800731a:	f023 0301 	bic.w	r3, r3, #1
 800731e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007320:	f7fb fb94 	bl	8002a4c <HAL_GetTick>
 8007324:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007326:	e008      	b.n	800733a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007328:	f7fb fb90 	bl	8002a4c <HAL_GetTick>
 800732c:	4602      	mov	r2, r0
 800732e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007330:	1ad3      	subs	r3, r2, r3
 8007332:	2b02      	cmp	r3, #2
 8007334:	d901      	bls.n	800733a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007336:	2303      	movs	r3, #3
 8007338:	e200      	b.n	800773c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800733a:	4b15      	ldr	r3, [pc, #84]	; (8007390 <HAL_RCC_OscConfig+0x4f8>)
 800733c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800733e:	f003 0302 	and.w	r3, r3, #2
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1f0      	bne.n	8007328 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f003 0320 	and.w	r3, r3, #32
 800734e:	2b00      	cmp	r3, #0
 8007350:	d039      	beq.n	80073c6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	699b      	ldr	r3, [r3, #24]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d01c      	beq.n	8007394 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800735a:	4b0d      	ldr	r3, [pc, #52]	; (8007390 <HAL_RCC_OscConfig+0x4f8>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a0c      	ldr	r2, [pc, #48]	; (8007390 <HAL_RCC_OscConfig+0x4f8>)
 8007360:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007364:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007366:	f7fb fb71 	bl	8002a4c <HAL_GetTick>
 800736a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800736c:	e008      	b.n	8007380 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800736e:	f7fb fb6d 	bl	8002a4c <HAL_GetTick>
 8007372:	4602      	mov	r2, r0
 8007374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007376:	1ad3      	subs	r3, r2, r3
 8007378:	2b02      	cmp	r3, #2
 800737a:	d901      	bls.n	8007380 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800737c:	2303      	movs	r3, #3
 800737e:	e1dd      	b.n	800773c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007380:	4b03      	ldr	r3, [pc, #12]	; (8007390 <HAL_RCC_OscConfig+0x4f8>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007388:	2b00      	cmp	r3, #0
 800738a:	d0f0      	beq.n	800736e <HAL_RCC_OscConfig+0x4d6>
 800738c:	e01b      	b.n	80073c6 <HAL_RCC_OscConfig+0x52e>
 800738e:	bf00      	nop
 8007390:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007394:	4b9b      	ldr	r3, [pc, #620]	; (8007604 <HAL_RCC_OscConfig+0x76c>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a9a      	ldr	r2, [pc, #616]	; (8007604 <HAL_RCC_OscConfig+0x76c>)
 800739a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800739e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80073a0:	f7fb fb54 	bl	8002a4c <HAL_GetTick>
 80073a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80073a6:	e008      	b.n	80073ba <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80073a8:	f7fb fb50 	bl	8002a4c <HAL_GetTick>
 80073ac:	4602      	mov	r2, r0
 80073ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b0:	1ad3      	subs	r3, r2, r3
 80073b2:	2b02      	cmp	r3, #2
 80073b4:	d901      	bls.n	80073ba <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80073b6:	2303      	movs	r3, #3
 80073b8:	e1c0      	b.n	800773c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80073ba:	4b92      	ldr	r3, [pc, #584]	; (8007604 <HAL_RCC_OscConfig+0x76c>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1f0      	bne.n	80073a8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f003 0304 	and.w	r3, r3, #4
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	f000 8081 	beq.w	80074d6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80073d4:	4b8c      	ldr	r3, [pc, #560]	; (8007608 <HAL_RCC_OscConfig+0x770>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a8b      	ldr	r2, [pc, #556]	; (8007608 <HAL_RCC_OscConfig+0x770>)
 80073da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80073e0:	f7fb fb34 	bl	8002a4c <HAL_GetTick>
 80073e4:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073e6:	e008      	b.n	80073fa <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073e8:	f7fb fb30 	bl	8002a4c <HAL_GetTick>
 80073ec:	4602      	mov	r2, r0
 80073ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f0:	1ad3      	subs	r3, r2, r3
 80073f2:	2b64      	cmp	r3, #100	; 0x64
 80073f4:	d901      	bls.n	80073fa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80073f6:	2303      	movs	r3, #3
 80073f8:	e1a0      	b.n	800773c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073fa:	4b83      	ldr	r3, [pc, #524]	; (8007608 <HAL_RCC_OscConfig+0x770>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007402:	2b00      	cmp	r3, #0
 8007404:	d0f0      	beq.n	80073e8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	2b01      	cmp	r3, #1
 800740c:	d106      	bne.n	800741c <HAL_RCC_OscConfig+0x584>
 800740e:	4b7d      	ldr	r3, [pc, #500]	; (8007604 <HAL_RCC_OscConfig+0x76c>)
 8007410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007412:	4a7c      	ldr	r2, [pc, #496]	; (8007604 <HAL_RCC_OscConfig+0x76c>)
 8007414:	f043 0301 	orr.w	r3, r3, #1
 8007418:	6713      	str	r3, [r2, #112]	; 0x70
 800741a:	e02d      	b.n	8007478 <HAL_RCC_OscConfig+0x5e0>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d10c      	bne.n	800743e <HAL_RCC_OscConfig+0x5a6>
 8007424:	4b77      	ldr	r3, [pc, #476]	; (8007604 <HAL_RCC_OscConfig+0x76c>)
 8007426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007428:	4a76      	ldr	r2, [pc, #472]	; (8007604 <HAL_RCC_OscConfig+0x76c>)
 800742a:	f023 0301 	bic.w	r3, r3, #1
 800742e:	6713      	str	r3, [r2, #112]	; 0x70
 8007430:	4b74      	ldr	r3, [pc, #464]	; (8007604 <HAL_RCC_OscConfig+0x76c>)
 8007432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007434:	4a73      	ldr	r2, [pc, #460]	; (8007604 <HAL_RCC_OscConfig+0x76c>)
 8007436:	f023 0304 	bic.w	r3, r3, #4
 800743a:	6713      	str	r3, [r2, #112]	; 0x70
 800743c:	e01c      	b.n	8007478 <HAL_RCC_OscConfig+0x5e0>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	2b05      	cmp	r3, #5
 8007444:	d10c      	bne.n	8007460 <HAL_RCC_OscConfig+0x5c8>
 8007446:	4b6f      	ldr	r3, [pc, #444]	; (8007604 <HAL_RCC_OscConfig+0x76c>)
 8007448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800744a:	4a6e      	ldr	r2, [pc, #440]	; (8007604 <HAL_RCC_OscConfig+0x76c>)
 800744c:	f043 0304 	orr.w	r3, r3, #4
 8007450:	6713      	str	r3, [r2, #112]	; 0x70
 8007452:	4b6c      	ldr	r3, [pc, #432]	; (8007604 <HAL_RCC_OscConfig+0x76c>)
 8007454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007456:	4a6b      	ldr	r2, [pc, #428]	; (8007604 <HAL_RCC_OscConfig+0x76c>)
 8007458:	f043 0301 	orr.w	r3, r3, #1
 800745c:	6713      	str	r3, [r2, #112]	; 0x70
 800745e:	e00b      	b.n	8007478 <HAL_RCC_OscConfig+0x5e0>
 8007460:	4b68      	ldr	r3, [pc, #416]	; (8007604 <HAL_RCC_OscConfig+0x76c>)
 8007462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007464:	4a67      	ldr	r2, [pc, #412]	; (8007604 <HAL_RCC_OscConfig+0x76c>)
 8007466:	f023 0301 	bic.w	r3, r3, #1
 800746a:	6713      	str	r3, [r2, #112]	; 0x70
 800746c:	4b65      	ldr	r3, [pc, #404]	; (8007604 <HAL_RCC_OscConfig+0x76c>)
 800746e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007470:	4a64      	ldr	r2, [pc, #400]	; (8007604 <HAL_RCC_OscConfig+0x76c>)
 8007472:	f023 0304 	bic.w	r3, r3, #4
 8007476:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d015      	beq.n	80074ac <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007480:	f7fb fae4 	bl	8002a4c <HAL_GetTick>
 8007484:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007486:	e00a      	b.n	800749e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007488:	f7fb fae0 	bl	8002a4c <HAL_GetTick>
 800748c:	4602      	mov	r2, r0
 800748e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007490:	1ad3      	subs	r3, r2, r3
 8007492:	f241 3288 	movw	r2, #5000	; 0x1388
 8007496:	4293      	cmp	r3, r2
 8007498:	d901      	bls.n	800749e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800749a:	2303      	movs	r3, #3
 800749c:	e14e      	b.n	800773c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800749e:	4b59      	ldr	r3, [pc, #356]	; (8007604 <HAL_RCC_OscConfig+0x76c>)
 80074a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074a2:	f003 0302 	and.w	r3, r3, #2
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d0ee      	beq.n	8007488 <HAL_RCC_OscConfig+0x5f0>
 80074aa:	e014      	b.n	80074d6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074ac:	f7fb face 	bl	8002a4c <HAL_GetTick>
 80074b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80074b2:	e00a      	b.n	80074ca <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074b4:	f7fb faca 	bl	8002a4c <HAL_GetTick>
 80074b8:	4602      	mov	r2, r0
 80074ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074bc:	1ad3      	subs	r3, r2, r3
 80074be:	f241 3288 	movw	r2, #5000	; 0x1388
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d901      	bls.n	80074ca <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80074c6:	2303      	movs	r3, #3
 80074c8:	e138      	b.n	800773c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80074ca:	4b4e      	ldr	r3, [pc, #312]	; (8007604 <HAL_RCC_OscConfig+0x76c>)
 80074cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ce:	f003 0302 	and.w	r3, r3, #2
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d1ee      	bne.n	80074b4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074da:	2b00      	cmp	r3, #0
 80074dc:	f000 812d 	beq.w	800773a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80074e0:	4b48      	ldr	r3, [pc, #288]	; (8007604 <HAL_RCC_OscConfig+0x76c>)
 80074e2:	691b      	ldr	r3, [r3, #16]
 80074e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074e8:	2b18      	cmp	r3, #24
 80074ea:	f000 80bd 	beq.w	8007668 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f2:	2b02      	cmp	r3, #2
 80074f4:	f040 809e 	bne.w	8007634 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074f8:	4b42      	ldr	r3, [pc, #264]	; (8007604 <HAL_RCC_OscConfig+0x76c>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a41      	ldr	r2, [pc, #260]	; (8007604 <HAL_RCC_OscConfig+0x76c>)
 80074fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007502:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007504:	f7fb faa2 	bl	8002a4c <HAL_GetTick>
 8007508:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800750a:	e008      	b.n	800751e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800750c:	f7fb fa9e 	bl	8002a4c <HAL_GetTick>
 8007510:	4602      	mov	r2, r0
 8007512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007514:	1ad3      	subs	r3, r2, r3
 8007516:	2b02      	cmp	r3, #2
 8007518:	d901      	bls.n	800751e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800751a:	2303      	movs	r3, #3
 800751c:	e10e      	b.n	800773c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800751e:	4b39      	ldr	r3, [pc, #228]	; (8007604 <HAL_RCC_OscConfig+0x76c>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007526:	2b00      	cmp	r3, #0
 8007528:	d1f0      	bne.n	800750c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800752a:	4b36      	ldr	r3, [pc, #216]	; (8007604 <HAL_RCC_OscConfig+0x76c>)
 800752c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800752e:	4b37      	ldr	r3, [pc, #220]	; (800760c <HAL_RCC_OscConfig+0x774>)
 8007530:	4013      	ands	r3, r2
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800753a:	0112      	lsls	r2, r2, #4
 800753c:	430a      	orrs	r2, r1
 800753e:	4931      	ldr	r1, [pc, #196]	; (8007604 <HAL_RCC_OscConfig+0x76c>)
 8007540:	4313      	orrs	r3, r2
 8007542:	628b      	str	r3, [r1, #40]	; 0x28
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007548:	3b01      	subs	r3, #1
 800754a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007552:	3b01      	subs	r3, #1
 8007554:	025b      	lsls	r3, r3, #9
 8007556:	b29b      	uxth	r3, r3
 8007558:	431a      	orrs	r2, r3
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800755e:	3b01      	subs	r3, #1
 8007560:	041b      	lsls	r3, r3, #16
 8007562:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007566:	431a      	orrs	r2, r3
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800756c:	3b01      	subs	r3, #1
 800756e:	061b      	lsls	r3, r3, #24
 8007570:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007574:	4923      	ldr	r1, [pc, #140]	; (8007604 <HAL_RCC_OscConfig+0x76c>)
 8007576:	4313      	orrs	r3, r2
 8007578:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800757a:	4b22      	ldr	r3, [pc, #136]	; (8007604 <HAL_RCC_OscConfig+0x76c>)
 800757c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800757e:	4a21      	ldr	r2, [pc, #132]	; (8007604 <HAL_RCC_OscConfig+0x76c>)
 8007580:	f023 0301 	bic.w	r3, r3, #1
 8007584:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007586:	4b1f      	ldr	r3, [pc, #124]	; (8007604 <HAL_RCC_OscConfig+0x76c>)
 8007588:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800758a:	4b21      	ldr	r3, [pc, #132]	; (8007610 <HAL_RCC_OscConfig+0x778>)
 800758c:	4013      	ands	r3, r2
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007592:	00d2      	lsls	r2, r2, #3
 8007594:	491b      	ldr	r1, [pc, #108]	; (8007604 <HAL_RCC_OscConfig+0x76c>)
 8007596:	4313      	orrs	r3, r2
 8007598:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800759a:	4b1a      	ldr	r3, [pc, #104]	; (8007604 <HAL_RCC_OscConfig+0x76c>)
 800759c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800759e:	f023 020c 	bic.w	r2, r3, #12
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a6:	4917      	ldr	r1, [pc, #92]	; (8007604 <HAL_RCC_OscConfig+0x76c>)
 80075a8:	4313      	orrs	r3, r2
 80075aa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80075ac:	4b15      	ldr	r3, [pc, #84]	; (8007604 <HAL_RCC_OscConfig+0x76c>)
 80075ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b0:	f023 0202 	bic.w	r2, r3, #2
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075b8:	4912      	ldr	r1, [pc, #72]	; (8007604 <HAL_RCC_OscConfig+0x76c>)
 80075ba:	4313      	orrs	r3, r2
 80075bc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80075be:	4b11      	ldr	r3, [pc, #68]	; (8007604 <HAL_RCC_OscConfig+0x76c>)
 80075c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c2:	4a10      	ldr	r2, [pc, #64]	; (8007604 <HAL_RCC_OscConfig+0x76c>)
 80075c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075ca:	4b0e      	ldr	r3, [pc, #56]	; (8007604 <HAL_RCC_OscConfig+0x76c>)
 80075cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ce:	4a0d      	ldr	r2, [pc, #52]	; (8007604 <HAL_RCC_OscConfig+0x76c>)
 80075d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80075d6:	4b0b      	ldr	r3, [pc, #44]	; (8007604 <HAL_RCC_OscConfig+0x76c>)
 80075d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075da:	4a0a      	ldr	r2, [pc, #40]	; (8007604 <HAL_RCC_OscConfig+0x76c>)
 80075dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80075e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80075e2:	4b08      	ldr	r3, [pc, #32]	; (8007604 <HAL_RCC_OscConfig+0x76c>)
 80075e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e6:	4a07      	ldr	r2, [pc, #28]	; (8007604 <HAL_RCC_OscConfig+0x76c>)
 80075e8:	f043 0301 	orr.w	r3, r3, #1
 80075ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80075ee:	4b05      	ldr	r3, [pc, #20]	; (8007604 <HAL_RCC_OscConfig+0x76c>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a04      	ldr	r2, [pc, #16]	; (8007604 <HAL_RCC_OscConfig+0x76c>)
 80075f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80075f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075fa:	f7fb fa27 	bl	8002a4c <HAL_GetTick>
 80075fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007600:	e011      	b.n	8007626 <HAL_RCC_OscConfig+0x78e>
 8007602:	bf00      	nop
 8007604:	58024400 	.word	0x58024400
 8007608:	58024800 	.word	0x58024800
 800760c:	fffffc0c 	.word	0xfffffc0c
 8007610:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007614:	f7fb fa1a 	bl	8002a4c <HAL_GetTick>
 8007618:	4602      	mov	r2, r0
 800761a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	2b02      	cmp	r3, #2
 8007620:	d901      	bls.n	8007626 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007622:	2303      	movs	r3, #3
 8007624:	e08a      	b.n	800773c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007626:	4b47      	ldr	r3, [pc, #284]	; (8007744 <HAL_RCC_OscConfig+0x8ac>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800762e:	2b00      	cmp	r3, #0
 8007630:	d0f0      	beq.n	8007614 <HAL_RCC_OscConfig+0x77c>
 8007632:	e082      	b.n	800773a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007634:	4b43      	ldr	r3, [pc, #268]	; (8007744 <HAL_RCC_OscConfig+0x8ac>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a42      	ldr	r2, [pc, #264]	; (8007744 <HAL_RCC_OscConfig+0x8ac>)
 800763a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800763e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007640:	f7fb fa04 	bl	8002a4c <HAL_GetTick>
 8007644:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007646:	e008      	b.n	800765a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007648:	f7fb fa00 	bl	8002a4c <HAL_GetTick>
 800764c:	4602      	mov	r2, r0
 800764e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007650:	1ad3      	subs	r3, r2, r3
 8007652:	2b02      	cmp	r3, #2
 8007654:	d901      	bls.n	800765a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007656:	2303      	movs	r3, #3
 8007658:	e070      	b.n	800773c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800765a:	4b3a      	ldr	r3, [pc, #232]	; (8007744 <HAL_RCC_OscConfig+0x8ac>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007662:	2b00      	cmp	r3, #0
 8007664:	d1f0      	bne.n	8007648 <HAL_RCC_OscConfig+0x7b0>
 8007666:	e068      	b.n	800773a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007668:	4b36      	ldr	r3, [pc, #216]	; (8007744 <HAL_RCC_OscConfig+0x8ac>)
 800766a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800766c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800766e:	4b35      	ldr	r3, [pc, #212]	; (8007744 <HAL_RCC_OscConfig+0x8ac>)
 8007670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007672:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007678:	2b01      	cmp	r3, #1
 800767a:	d031      	beq.n	80076e0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	f003 0203 	and.w	r2, r3, #3
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007686:	429a      	cmp	r2, r3
 8007688:	d12a      	bne.n	80076e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	091b      	lsrs	r3, r3, #4
 800768e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007696:	429a      	cmp	r2, r3
 8007698:	d122      	bne.n	80076e0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076a4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d11a      	bne.n	80076e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	0a5b      	lsrs	r3, r3, #9
 80076ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076b6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d111      	bne.n	80076e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	0c1b      	lsrs	r3, r3, #16
 80076c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076c8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d108      	bne.n	80076e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	0e1b      	lsrs	r3, r3, #24
 80076d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076da:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80076dc:	429a      	cmp	r2, r3
 80076de:	d001      	beq.n	80076e4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	e02b      	b.n	800773c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80076e4:	4b17      	ldr	r3, [pc, #92]	; (8007744 <HAL_RCC_OscConfig+0x8ac>)
 80076e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076e8:	08db      	lsrs	r3, r3, #3
 80076ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80076ee:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076f4:	693a      	ldr	r2, [r7, #16]
 80076f6:	429a      	cmp	r2, r3
 80076f8:	d01f      	beq.n	800773a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80076fa:	4b12      	ldr	r3, [pc, #72]	; (8007744 <HAL_RCC_OscConfig+0x8ac>)
 80076fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076fe:	4a11      	ldr	r2, [pc, #68]	; (8007744 <HAL_RCC_OscConfig+0x8ac>)
 8007700:	f023 0301 	bic.w	r3, r3, #1
 8007704:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007706:	f7fb f9a1 	bl	8002a4c <HAL_GetTick>
 800770a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800770c:	bf00      	nop
 800770e:	f7fb f99d 	bl	8002a4c <HAL_GetTick>
 8007712:	4602      	mov	r2, r0
 8007714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007716:	4293      	cmp	r3, r2
 8007718:	d0f9      	beq.n	800770e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800771a:	4b0a      	ldr	r3, [pc, #40]	; (8007744 <HAL_RCC_OscConfig+0x8ac>)
 800771c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800771e:	4b0a      	ldr	r3, [pc, #40]	; (8007748 <HAL_RCC_OscConfig+0x8b0>)
 8007720:	4013      	ands	r3, r2
 8007722:	687a      	ldr	r2, [r7, #4]
 8007724:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007726:	00d2      	lsls	r2, r2, #3
 8007728:	4906      	ldr	r1, [pc, #24]	; (8007744 <HAL_RCC_OscConfig+0x8ac>)
 800772a:	4313      	orrs	r3, r2
 800772c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800772e:	4b05      	ldr	r3, [pc, #20]	; (8007744 <HAL_RCC_OscConfig+0x8ac>)
 8007730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007732:	4a04      	ldr	r2, [pc, #16]	; (8007744 <HAL_RCC_OscConfig+0x8ac>)
 8007734:	f043 0301 	orr.w	r3, r3, #1
 8007738:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	3730      	adds	r7, #48	; 0x30
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}
 8007744:	58024400 	.word	0x58024400
 8007748:	ffff0007 	.word	0xffff0007

0800774c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b086      	sub	sp, #24
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d101      	bne.n	8007760 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800775c:	2301      	movs	r3, #1
 800775e:	e19c      	b.n	8007a9a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007760:	4b8a      	ldr	r3, [pc, #552]	; (800798c <HAL_RCC_ClockConfig+0x240>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f003 030f 	and.w	r3, r3, #15
 8007768:	683a      	ldr	r2, [r7, #0]
 800776a:	429a      	cmp	r2, r3
 800776c:	d910      	bls.n	8007790 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800776e:	4b87      	ldr	r3, [pc, #540]	; (800798c <HAL_RCC_ClockConfig+0x240>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f023 020f 	bic.w	r2, r3, #15
 8007776:	4985      	ldr	r1, [pc, #532]	; (800798c <HAL_RCC_ClockConfig+0x240>)
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	4313      	orrs	r3, r2
 800777c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800777e:	4b83      	ldr	r3, [pc, #524]	; (800798c <HAL_RCC_ClockConfig+0x240>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f003 030f 	and.w	r3, r3, #15
 8007786:	683a      	ldr	r2, [r7, #0]
 8007788:	429a      	cmp	r2, r3
 800778a:	d001      	beq.n	8007790 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	e184      	b.n	8007a9a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f003 0304 	and.w	r3, r3, #4
 8007798:	2b00      	cmp	r3, #0
 800779a:	d010      	beq.n	80077be <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	691a      	ldr	r2, [r3, #16]
 80077a0:	4b7b      	ldr	r3, [pc, #492]	; (8007990 <HAL_RCC_ClockConfig+0x244>)
 80077a2:	699b      	ldr	r3, [r3, #24]
 80077a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d908      	bls.n	80077be <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80077ac:	4b78      	ldr	r3, [pc, #480]	; (8007990 <HAL_RCC_ClockConfig+0x244>)
 80077ae:	699b      	ldr	r3, [r3, #24]
 80077b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	691b      	ldr	r3, [r3, #16]
 80077b8:	4975      	ldr	r1, [pc, #468]	; (8007990 <HAL_RCC_ClockConfig+0x244>)
 80077ba:	4313      	orrs	r3, r2
 80077bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f003 0308 	and.w	r3, r3, #8
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d010      	beq.n	80077ec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	695a      	ldr	r2, [r3, #20]
 80077ce:	4b70      	ldr	r3, [pc, #448]	; (8007990 <HAL_RCC_ClockConfig+0x244>)
 80077d0:	69db      	ldr	r3, [r3, #28]
 80077d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d908      	bls.n	80077ec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80077da:	4b6d      	ldr	r3, [pc, #436]	; (8007990 <HAL_RCC_ClockConfig+0x244>)
 80077dc:	69db      	ldr	r3, [r3, #28]
 80077de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	695b      	ldr	r3, [r3, #20]
 80077e6:	496a      	ldr	r1, [pc, #424]	; (8007990 <HAL_RCC_ClockConfig+0x244>)
 80077e8:	4313      	orrs	r3, r2
 80077ea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f003 0310 	and.w	r3, r3, #16
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d010      	beq.n	800781a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	699a      	ldr	r2, [r3, #24]
 80077fc:	4b64      	ldr	r3, [pc, #400]	; (8007990 <HAL_RCC_ClockConfig+0x244>)
 80077fe:	69db      	ldr	r3, [r3, #28]
 8007800:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007804:	429a      	cmp	r2, r3
 8007806:	d908      	bls.n	800781a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007808:	4b61      	ldr	r3, [pc, #388]	; (8007990 <HAL_RCC_ClockConfig+0x244>)
 800780a:	69db      	ldr	r3, [r3, #28]
 800780c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	699b      	ldr	r3, [r3, #24]
 8007814:	495e      	ldr	r1, [pc, #376]	; (8007990 <HAL_RCC_ClockConfig+0x244>)
 8007816:	4313      	orrs	r3, r2
 8007818:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f003 0320 	and.w	r3, r3, #32
 8007822:	2b00      	cmp	r3, #0
 8007824:	d010      	beq.n	8007848 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	69da      	ldr	r2, [r3, #28]
 800782a:	4b59      	ldr	r3, [pc, #356]	; (8007990 <HAL_RCC_ClockConfig+0x244>)
 800782c:	6a1b      	ldr	r3, [r3, #32]
 800782e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007832:	429a      	cmp	r2, r3
 8007834:	d908      	bls.n	8007848 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007836:	4b56      	ldr	r3, [pc, #344]	; (8007990 <HAL_RCC_ClockConfig+0x244>)
 8007838:	6a1b      	ldr	r3, [r3, #32]
 800783a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	69db      	ldr	r3, [r3, #28]
 8007842:	4953      	ldr	r1, [pc, #332]	; (8007990 <HAL_RCC_ClockConfig+0x244>)
 8007844:	4313      	orrs	r3, r2
 8007846:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f003 0302 	and.w	r3, r3, #2
 8007850:	2b00      	cmp	r3, #0
 8007852:	d010      	beq.n	8007876 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	68da      	ldr	r2, [r3, #12]
 8007858:	4b4d      	ldr	r3, [pc, #308]	; (8007990 <HAL_RCC_ClockConfig+0x244>)
 800785a:	699b      	ldr	r3, [r3, #24]
 800785c:	f003 030f 	and.w	r3, r3, #15
 8007860:	429a      	cmp	r2, r3
 8007862:	d908      	bls.n	8007876 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007864:	4b4a      	ldr	r3, [pc, #296]	; (8007990 <HAL_RCC_ClockConfig+0x244>)
 8007866:	699b      	ldr	r3, [r3, #24]
 8007868:	f023 020f 	bic.w	r2, r3, #15
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	4947      	ldr	r1, [pc, #284]	; (8007990 <HAL_RCC_ClockConfig+0x244>)
 8007872:	4313      	orrs	r3, r2
 8007874:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f003 0301 	and.w	r3, r3, #1
 800787e:	2b00      	cmp	r3, #0
 8007880:	d055      	beq.n	800792e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007882:	4b43      	ldr	r3, [pc, #268]	; (8007990 <HAL_RCC_ClockConfig+0x244>)
 8007884:	699b      	ldr	r3, [r3, #24]
 8007886:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	4940      	ldr	r1, [pc, #256]	; (8007990 <HAL_RCC_ClockConfig+0x244>)
 8007890:	4313      	orrs	r3, r2
 8007892:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	2b02      	cmp	r3, #2
 800789a:	d107      	bne.n	80078ac <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800789c:	4b3c      	ldr	r3, [pc, #240]	; (8007990 <HAL_RCC_ClockConfig+0x244>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d121      	bne.n	80078ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80078a8:	2301      	movs	r3, #1
 80078aa:	e0f6      	b.n	8007a9a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	2b03      	cmp	r3, #3
 80078b2:	d107      	bne.n	80078c4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80078b4:	4b36      	ldr	r3, [pc, #216]	; (8007990 <HAL_RCC_ClockConfig+0x244>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d115      	bne.n	80078ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	e0ea      	b.n	8007a9a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d107      	bne.n	80078dc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80078cc:	4b30      	ldr	r3, [pc, #192]	; (8007990 <HAL_RCC_ClockConfig+0x244>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d109      	bne.n	80078ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80078d8:	2301      	movs	r3, #1
 80078da:	e0de      	b.n	8007a9a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80078dc:	4b2c      	ldr	r3, [pc, #176]	; (8007990 <HAL_RCC_ClockConfig+0x244>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f003 0304 	and.w	r3, r3, #4
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d101      	bne.n	80078ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	e0d6      	b.n	8007a9a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80078ec:	4b28      	ldr	r3, [pc, #160]	; (8007990 <HAL_RCC_ClockConfig+0x244>)
 80078ee:	691b      	ldr	r3, [r3, #16]
 80078f0:	f023 0207 	bic.w	r2, r3, #7
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	4925      	ldr	r1, [pc, #148]	; (8007990 <HAL_RCC_ClockConfig+0x244>)
 80078fa:	4313      	orrs	r3, r2
 80078fc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078fe:	f7fb f8a5 	bl	8002a4c <HAL_GetTick>
 8007902:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007904:	e00a      	b.n	800791c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007906:	f7fb f8a1 	bl	8002a4c <HAL_GetTick>
 800790a:	4602      	mov	r2, r0
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	1ad3      	subs	r3, r2, r3
 8007910:	f241 3288 	movw	r2, #5000	; 0x1388
 8007914:	4293      	cmp	r3, r2
 8007916:	d901      	bls.n	800791c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007918:	2303      	movs	r3, #3
 800791a:	e0be      	b.n	8007a9a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800791c:	4b1c      	ldr	r3, [pc, #112]	; (8007990 <HAL_RCC_ClockConfig+0x244>)
 800791e:	691b      	ldr	r3, [r3, #16]
 8007920:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	00db      	lsls	r3, r3, #3
 800792a:	429a      	cmp	r2, r3
 800792c:	d1eb      	bne.n	8007906 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f003 0302 	and.w	r3, r3, #2
 8007936:	2b00      	cmp	r3, #0
 8007938:	d010      	beq.n	800795c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	68da      	ldr	r2, [r3, #12]
 800793e:	4b14      	ldr	r3, [pc, #80]	; (8007990 <HAL_RCC_ClockConfig+0x244>)
 8007940:	699b      	ldr	r3, [r3, #24]
 8007942:	f003 030f 	and.w	r3, r3, #15
 8007946:	429a      	cmp	r2, r3
 8007948:	d208      	bcs.n	800795c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800794a:	4b11      	ldr	r3, [pc, #68]	; (8007990 <HAL_RCC_ClockConfig+0x244>)
 800794c:	699b      	ldr	r3, [r3, #24]
 800794e:	f023 020f 	bic.w	r2, r3, #15
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	68db      	ldr	r3, [r3, #12]
 8007956:	490e      	ldr	r1, [pc, #56]	; (8007990 <HAL_RCC_ClockConfig+0x244>)
 8007958:	4313      	orrs	r3, r2
 800795a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800795c:	4b0b      	ldr	r3, [pc, #44]	; (800798c <HAL_RCC_ClockConfig+0x240>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f003 030f 	and.w	r3, r3, #15
 8007964:	683a      	ldr	r2, [r7, #0]
 8007966:	429a      	cmp	r2, r3
 8007968:	d214      	bcs.n	8007994 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800796a:	4b08      	ldr	r3, [pc, #32]	; (800798c <HAL_RCC_ClockConfig+0x240>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f023 020f 	bic.w	r2, r3, #15
 8007972:	4906      	ldr	r1, [pc, #24]	; (800798c <HAL_RCC_ClockConfig+0x240>)
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	4313      	orrs	r3, r2
 8007978:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800797a:	4b04      	ldr	r3, [pc, #16]	; (800798c <HAL_RCC_ClockConfig+0x240>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f003 030f 	and.w	r3, r3, #15
 8007982:	683a      	ldr	r2, [r7, #0]
 8007984:	429a      	cmp	r2, r3
 8007986:	d005      	beq.n	8007994 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007988:	2301      	movs	r3, #1
 800798a:	e086      	b.n	8007a9a <HAL_RCC_ClockConfig+0x34e>
 800798c:	52002000 	.word	0x52002000
 8007990:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f003 0304 	and.w	r3, r3, #4
 800799c:	2b00      	cmp	r3, #0
 800799e:	d010      	beq.n	80079c2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	691a      	ldr	r2, [r3, #16]
 80079a4:	4b3f      	ldr	r3, [pc, #252]	; (8007aa4 <HAL_RCC_ClockConfig+0x358>)
 80079a6:	699b      	ldr	r3, [r3, #24]
 80079a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d208      	bcs.n	80079c2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80079b0:	4b3c      	ldr	r3, [pc, #240]	; (8007aa4 <HAL_RCC_ClockConfig+0x358>)
 80079b2:	699b      	ldr	r3, [r3, #24]
 80079b4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	691b      	ldr	r3, [r3, #16]
 80079bc:	4939      	ldr	r1, [pc, #228]	; (8007aa4 <HAL_RCC_ClockConfig+0x358>)
 80079be:	4313      	orrs	r3, r2
 80079c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f003 0308 	and.w	r3, r3, #8
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d010      	beq.n	80079f0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	695a      	ldr	r2, [r3, #20]
 80079d2:	4b34      	ldr	r3, [pc, #208]	; (8007aa4 <HAL_RCC_ClockConfig+0x358>)
 80079d4:	69db      	ldr	r3, [r3, #28]
 80079d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80079da:	429a      	cmp	r2, r3
 80079dc:	d208      	bcs.n	80079f0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80079de:	4b31      	ldr	r3, [pc, #196]	; (8007aa4 <HAL_RCC_ClockConfig+0x358>)
 80079e0:	69db      	ldr	r3, [r3, #28]
 80079e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	695b      	ldr	r3, [r3, #20]
 80079ea:	492e      	ldr	r1, [pc, #184]	; (8007aa4 <HAL_RCC_ClockConfig+0x358>)
 80079ec:	4313      	orrs	r3, r2
 80079ee:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f003 0310 	and.w	r3, r3, #16
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d010      	beq.n	8007a1e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	699a      	ldr	r2, [r3, #24]
 8007a00:	4b28      	ldr	r3, [pc, #160]	; (8007aa4 <HAL_RCC_ClockConfig+0x358>)
 8007a02:	69db      	ldr	r3, [r3, #28]
 8007a04:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d208      	bcs.n	8007a1e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007a0c:	4b25      	ldr	r3, [pc, #148]	; (8007aa4 <HAL_RCC_ClockConfig+0x358>)
 8007a0e:	69db      	ldr	r3, [r3, #28]
 8007a10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	699b      	ldr	r3, [r3, #24]
 8007a18:	4922      	ldr	r1, [pc, #136]	; (8007aa4 <HAL_RCC_ClockConfig+0x358>)
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f003 0320 	and.w	r3, r3, #32
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d010      	beq.n	8007a4c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	69da      	ldr	r2, [r3, #28]
 8007a2e:	4b1d      	ldr	r3, [pc, #116]	; (8007aa4 <HAL_RCC_ClockConfig+0x358>)
 8007a30:	6a1b      	ldr	r3, [r3, #32]
 8007a32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d208      	bcs.n	8007a4c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007a3a:	4b1a      	ldr	r3, [pc, #104]	; (8007aa4 <HAL_RCC_ClockConfig+0x358>)
 8007a3c:	6a1b      	ldr	r3, [r3, #32]
 8007a3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	69db      	ldr	r3, [r3, #28]
 8007a46:	4917      	ldr	r1, [pc, #92]	; (8007aa4 <HAL_RCC_ClockConfig+0x358>)
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007a4c:	f000 f834 	bl	8007ab8 <HAL_RCC_GetSysClockFreq>
 8007a50:	4602      	mov	r2, r0
 8007a52:	4b14      	ldr	r3, [pc, #80]	; (8007aa4 <HAL_RCC_ClockConfig+0x358>)
 8007a54:	699b      	ldr	r3, [r3, #24]
 8007a56:	0a1b      	lsrs	r3, r3, #8
 8007a58:	f003 030f 	and.w	r3, r3, #15
 8007a5c:	4912      	ldr	r1, [pc, #72]	; (8007aa8 <HAL_RCC_ClockConfig+0x35c>)
 8007a5e:	5ccb      	ldrb	r3, [r1, r3]
 8007a60:	f003 031f 	and.w	r3, r3, #31
 8007a64:	fa22 f303 	lsr.w	r3, r2, r3
 8007a68:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007a6a:	4b0e      	ldr	r3, [pc, #56]	; (8007aa4 <HAL_RCC_ClockConfig+0x358>)
 8007a6c:	699b      	ldr	r3, [r3, #24]
 8007a6e:	f003 030f 	and.w	r3, r3, #15
 8007a72:	4a0d      	ldr	r2, [pc, #52]	; (8007aa8 <HAL_RCC_ClockConfig+0x35c>)
 8007a74:	5cd3      	ldrb	r3, [r2, r3]
 8007a76:	f003 031f 	and.w	r3, r3, #31
 8007a7a:	693a      	ldr	r2, [r7, #16]
 8007a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8007a80:	4a0a      	ldr	r2, [pc, #40]	; (8007aac <HAL_RCC_ClockConfig+0x360>)
 8007a82:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007a84:	4a0a      	ldr	r2, [pc, #40]	; (8007ab0 <HAL_RCC_ClockConfig+0x364>)
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007a8a:	4b0a      	ldr	r3, [pc, #40]	; (8007ab4 <HAL_RCC_ClockConfig+0x368>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f7fa fdf2 	bl	8002678 <HAL_InitTick>
 8007a94:	4603      	mov	r3, r0
 8007a96:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3718      	adds	r7, #24
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	bf00      	nop
 8007aa4:	58024400 	.word	0x58024400
 8007aa8:	0801545c 	.word	0x0801545c
 8007aac:	24000004 	.word	0x24000004
 8007ab0:	24000000 	.word	0x24000000
 8007ab4:	24000008 	.word	0x24000008

08007ab8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b089      	sub	sp, #36	; 0x24
 8007abc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007abe:	4bb3      	ldr	r3, [pc, #716]	; (8007d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ac0:	691b      	ldr	r3, [r3, #16]
 8007ac2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ac6:	2b18      	cmp	r3, #24
 8007ac8:	f200 8155 	bhi.w	8007d76 <HAL_RCC_GetSysClockFreq+0x2be>
 8007acc:	a201      	add	r2, pc, #4	; (adr r2, 8007ad4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ad2:	bf00      	nop
 8007ad4:	08007b39 	.word	0x08007b39
 8007ad8:	08007d77 	.word	0x08007d77
 8007adc:	08007d77 	.word	0x08007d77
 8007ae0:	08007d77 	.word	0x08007d77
 8007ae4:	08007d77 	.word	0x08007d77
 8007ae8:	08007d77 	.word	0x08007d77
 8007aec:	08007d77 	.word	0x08007d77
 8007af0:	08007d77 	.word	0x08007d77
 8007af4:	08007b5f 	.word	0x08007b5f
 8007af8:	08007d77 	.word	0x08007d77
 8007afc:	08007d77 	.word	0x08007d77
 8007b00:	08007d77 	.word	0x08007d77
 8007b04:	08007d77 	.word	0x08007d77
 8007b08:	08007d77 	.word	0x08007d77
 8007b0c:	08007d77 	.word	0x08007d77
 8007b10:	08007d77 	.word	0x08007d77
 8007b14:	08007b65 	.word	0x08007b65
 8007b18:	08007d77 	.word	0x08007d77
 8007b1c:	08007d77 	.word	0x08007d77
 8007b20:	08007d77 	.word	0x08007d77
 8007b24:	08007d77 	.word	0x08007d77
 8007b28:	08007d77 	.word	0x08007d77
 8007b2c:	08007d77 	.word	0x08007d77
 8007b30:	08007d77 	.word	0x08007d77
 8007b34:	08007b6b 	.word	0x08007b6b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b38:	4b94      	ldr	r3, [pc, #592]	; (8007d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f003 0320 	and.w	r3, r3, #32
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d009      	beq.n	8007b58 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b44:	4b91      	ldr	r3, [pc, #580]	; (8007d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	08db      	lsrs	r3, r3, #3
 8007b4a:	f003 0303 	and.w	r3, r3, #3
 8007b4e:	4a90      	ldr	r2, [pc, #576]	; (8007d90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007b50:	fa22 f303 	lsr.w	r3, r2, r3
 8007b54:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007b56:	e111      	b.n	8007d7c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007b58:	4b8d      	ldr	r3, [pc, #564]	; (8007d90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007b5a:	61bb      	str	r3, [r7, #24]
      break;
 8007b5c:	e10e      	b.n	8007d7c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007b5e:	4b8d      	ldr	r3, [pc, #564]	; (8007d94 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007b60:	61bb      	str	r3, [r7, #24]
      break;
 8007b62:	e10b      	b.n	8007d7c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007b64:	4b8c      	ldr	r3, [pc, #560]	; (8007d98 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007b66:	61bb      	str	r3, [r7, #24]
      break;
 8007b68:	e108      	b.n	8007d7c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007b6a:	4b88      	ldr	r3, [pc, #544]	; (8007d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b6e:	f003 0303 	and.w	r3, r3, #3
 8007b72:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007b74:	4b85      	ldr	r3, [pc, #532]	; (8007d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b78:	091b      	lsrs	r3, r3, #4
 8007b7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b7e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007b80:	4b82      	ldr	r3, [pc, #520]	; (8007d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b84:	f003 0301 	and.w	r3, r3, #1
 8007b88:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007b8a:	4b80      	ldr	r3, [pc, #512]	; (8007d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b8e:	08db      	lsrs	r3, r3, #3
 8007b90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b94:	68fa      	ldr	r2, [r7, #12]
 8007b96:	fb02 f303 	mul.w	r3, r2, r3
 8007b9a:	ee07 3a90 	vmov	s15, r3
 8007b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ba2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	f000 80e1 	beq.w	8007d70 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	2b02      	cmp	r3, #2
 8007bb2:	f000 8083 	beq.w	8007cbc <HAL_RCC_GetSysClockFreq+0x204>
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	2b02      	cmp	r3, #2
 8007bba:	f200 80a1 	bhi.w	8007d00 <HAL_RCC_GetSysClockFreq+0x248>
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d003      	beq.n	8007bcc <HAL_RCC_GetSysClockFreq+0x114>
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d056      	beq.n	8007c78 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007bca:	e099      	b.n	8007d00 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007bcc:	4b6f      	ldr	r3, [pc, #444]	; (8007d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f003 0320 	and.w	r3, r3, #32
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d02d      	beq.n	8007c34 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007bd8:	4b6c      	ldr	r3, [pc, #432]	; (8007d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	08db      	lsrs	r3, r3, #3
 8007bde:	f003 0303 	and.w	r3, r3, #3
 8007be2:	4a6b      	ldr	r2, [pc, #428]	; (8007d90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007be4:	fa22 f303 	lsr.w	r3, r2, r3
 8007be8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	ee07 3a90 	vmov	s15, r3
 8007bf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	ee07 3a90 	vmov	s15, r3
 8007bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c02:	4b62      	ldr	r3, [pc, #392]	; (8007d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c0a:	ee07 3a90 	vmov	s15, r3
 8007c0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c12:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c16:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007d9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007c1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c2e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007c32:	e087      	b.n	8007d44 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	ee07 3a90 	vmov	s15, r3
 8007c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c3e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007da0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c46:	4b51      	ldr	r3, [pc, #324]	; (8007d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c4e:	ee07 3a90 	vmov	s15, r3
 8007c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c56:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c5a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007d9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007c76:	e065      	b.n	8007d44 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	ee07 3a90 	vmov	s15, r3
 8007c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c82:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007da4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007c86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c8a:	4b40      	ldr	r3, [pc, #256]	; (8007d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c92:	ee07 3a90 	vmov	s15, r3
 8007c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c9e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007d9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007ca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007caa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cb6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007cba:	e043      	b.n	8007d44 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	ee07 3a90 	vmov	s15, r3
 8007cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cc6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007da8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007cca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cce:	4b2f      	ldr	r3, [pc, #188]	; (8007d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cd6:	ee07 3a90 	vmov	s15, r3
 8007cda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cde:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ce2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007d9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007ce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cfa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007cfe:	e021      	b.n	8007d44 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	ee07 3a90 	vmov	s15, r3
 8007d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d0a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007da4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007d0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d12:	4b1e      	ldr	r3, [pc, #120]	; (8007d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d1a:	ee07 3a90 	vmov	s15, r3
 8007d1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d22:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d26:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007d9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007d42:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007d44:	4b11      	ldr	r3, [pc, #68]	; (8007d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d48:	0a5b      	lsrs	r3, r3, #9
 8007d4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d4e:	3301      	adds	r3, #1
 8007d50:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	ee07 3a90 	vmov	s15, r3
 8007d58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007d5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d68:	ee17 3a90 	vmov	r3, s15
 8007d6c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007d6e:	e005      	b.n	8007d7c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007d70:	2300      	movs	r3, #0
 8007d72:	61bb      	str	r3, [r7, #24]
      break;
 8007d74:	e002      	b.n	8007d7c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007d76:	4b07      	ldr	r3, [pc, #28]	; (8007d94 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007d78:	61bb      	str	r3, [r7, #24]
      break;
 8007d7a:	bf00      	nop
  }

  return sysclockfreq;
 8007d7c:	69bb      	ldr	r3, [r7, #24]
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3724      	adds	r7, #36	; 0x24
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr
 8007d8a:	bf00      	nop
 8007d8c:	58024400 	.word	0x58024400
 8007d90:	03d09000 	.word	0x03d09000
 8007d94:	003d0900 	.word	0x003d0900
 8007d98:	007a1200 	.word	0x007a1200
 8007d9c:	46000000 	.word	0x46000000
 8007da0:	4c742400 	.word	0x4c742400
 8007da4:	4a742400 	.word	0x4a742400
 8007da8:	4af42400 	.word	0x4af42400

08007dac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b082      	sub	sp, #8
 8007db0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007db2:	f7ff fe81 	bl	8007ab8 <HAL_RCC_GetSysClockFreq>
 8007db6:	4602      	mov	r2, r0
 8007db8:	4b10      	ldr	r3, [pc, #64]	; (8007dfc <HAL_RCC_GetHCLKFreq+0x50>)
 8007dba:	699b      	ldr	r3, [r3, #24]
 8007dbc:	0a1b      	lsrs	r3, r3, #8
 8007dbe:	f003 030f 	and.w	r3, r3, #15
 8007dc2:	490f      	ldr	r1, [pc, #60]	; (8007e00 <HAL_RCC_GetHCLKFreq+0x54>)
 8007dc4:	5ccb      	ldrb	r3, [r1, r3]
 8007dc6:	f003 031f 	and.w	r3, r3, #31
 8007dca:	fa22 f303 	lsr.w	r3, r2, r3
 8007dce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007dd0:	4b0a      	ldr	r3, [pc, #40]	; (8007dfc <HAL_RCC_GetHCLKFreq+0x50>)
 8007dd2:	699b      	ldr	r3, [r3, #24]
 8007dd4:	f003 030f 	and.w	r3, r3, #15
 8007dd8:	4a09      	ldr	r2, [pc, #36]	; (8007e00 <HAL_RCC_GetHCLKFreq+0x54>)
 8007dda:	5cd3      	ldrb	r3, [r2, r3]
 8007ddc:	f003 031f 	and.w	r3, r3, #31
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	fa22 f303 	lsr.w	r3, r2, r3
 8007de6:	4a07      	ldr	r2, [pc, #28]	; (8007e04 <HAL_RCC_GetHCLKFreq+0x58>)
 8007de8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007dea:	4a07      	ldr	r2, [pc, #28]	; (8007e08 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007df0:	4b04      	ldr	r3, [pc, #16]	; (8007e04 <HAL_RCC_GetHCLKFreq+0x58>)
 8007df2:	681b      	ldr	r3, [r3, #0]
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3708      	adds	r7, #8
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	58024400 	.word	0x58024400
 8007e00:	0801545c 	.word	0x0801545c
 8007e04:	24000004 	.word	0x24000004
 8007e08:	24000000 	.word	0x24000000

08007e0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007e10:	f7ff ffcc 	bl	8007dac <HAL_RCC_GetHCLKFreq>
 8007e14:	4602      	mov	r2, r0
 8007e16:	4b06      	ldr	r3, [pc, #24]	; (8007e30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e18:	69db      	ldr	r3, [r3, #28]
 8007e1a:	091b      	lsrs	r3, r3, #4
 8007e1c:	f003 0307 	and.w	r3, r3, #7
 8007e20:	4904      	ldr	r1, [pc, #16]	; (8007e34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007e22:	5ccb      	ldrb	r3, [r1, r3]
 8007e24:	f003 031f 	and.w	r3, r3, #31
 8007e28:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	bd80      	pop	{r7, pc}
 8007e30:	58024400 	.word	0x58024400
 8007e34:	0801545c 	.word	0x0801545c

08007e38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007e3c:	f7ff ffb6 	bl	8007dac <HAL_RCC_GetHCLKFreq>
 8007e40:	4602      	mov	r2, r0
 8007e42:	4b06      	ldr	r3, [pc, #24]	; (8007e5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e44:	69db      	ldr	r3, [r3, #28]
 8007e46:	0a1b      	lsrs	r3, r3, #8
 8007e48:	f003 0307 	and.w	r3, r3, #7
 8007e4c:	4904      	ldr	r1, [pc, #16]	; (8007e60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007e4e:	5ccb      	ldrb	r3, [r1, r3]
 8007e50:	f003 031f 	and.w	r3, r3, #31
 8007e54:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	bd80      	pop	{r7, pc}
 8007e5c:	58024400 	.word	0x58024400
 8007e60:	0801545c 	.word	0x0801545c

08007e64 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	223f      	movs	r2, #63	; 0x3f
 8007e72:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007e74:	4b1a      	ldr	r3, [pc, #104]	; (8007ee0 <HAL_RCC_GetClockConfig+0x7c>)
 8007e76:	691b      	ldr	r3, [r3, #16]
 8007e78:	f003 0207 	and.w	r2, r3, #7
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007e80:	4b17      	ldr	r3, [pc, #92]	; (8007ee0 <HAL_RCC_GetClockConfig+0x7c>)
 8007e82:	699b      	ldr	r3, [r3, #24]
 8007e84:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007e8c:	4b14      	ldr	r3, [pc, #80]	; (8007ee0 <HAL_RCC_GetClockConfig+0x7c>)
 8007e8e:	699b      	ldr	r3, [r3, #24]
 8007e90:	f003 020f 	and.w	r2, r3, #15
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007e98:	4b11      	ldr	r3, [pc, #68]	; (8007ee0 <HAL_RCC_GetClockConfig+0x7c>)
 8007e9a:	699b      	ldr	r3, [r3, #24]
 8007e9c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007ea4:	4b0e      	ldr	r3, [pc, #56]	; (8007ee0 <HAL_RCC_GetClockConfig+0x7c>)
 8007ea6:	69db      	ldr	r3, [r3, #28]
 8007ea8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007eb0:	4b0b      	ldr	r3, [pc, #44]	; (8007ee0 <HAL_RCC_GetClockConfig+0x7c>)
 8007eb2:	69db      	ldr	r3, [r3, #28]
 8007eb4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007ebc:	4b08      	ldr	r3, [pc, #32]	; (8007ee0 <HAL_RCC_GetClockConfig+0x7c>)
 8007ebe:	6a1b      	ldr	r3, [r3, #32]
 8007ec0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007ec8:	4b06      	ldr	r3, [pc, #24]	; (8007ee4 <HAL_RCC_GetClockConfig+0x80>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f003 020f 	and.w	r2, r3, #15
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	601a      	str	r2, [r3, #0]
}
 8007ed4:	bf00      	nop
 8007ed6:	370c      	adds	r7, #12
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr
 8007ee0:	58024400 	.word	0x58024400
 8007ee4:	52002000 	.word	0x52002000

08007ee8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ee8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007eec:	b0ca      	sub	sp, #296	; 0x128
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007efa:	2300      	movs	r3, #0
 8007efc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f08:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8007f0c:	2500      	movs	r5, #0
 8007f0e:	ea54 0305 	orrs.w	r3, r4, r5
 8007f12:	d049      	beq.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f1a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007f1e:	d02f      	beq.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007f20:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007f24:	d828      	bhi.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007f26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f2a:	d01a      	beq.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007f2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f30:	d822      	bhi.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d003      	beq.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007f36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f3a:	d007      	beq.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007f3c:	e01c      	b.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f3e:	4bb8      	ldr	r3, [pc, #736]	; (8008220 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f42:	4ab7      	ldr	r2, [pc, #732]	; (8008220 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f48:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007f4a:	e01a      	b.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f50:	3308      	adds	r3, #8
 8007f52:	2102      	movs	r1, #2
 8007f54:	4618      	mov	r0, r3
 8007f56:	f002 fb61 	bl	800a61c <RCCEx_PLL2_Config>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007f60:	e00f      	b.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f66:	3328      	adds	r3, #40	; 0x28
 8007f68:	2102      	movs	r1, #2
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f002 fc08 	bl	800a780 <RCCEx_PLL3_Config>
 8007f70:	4603      	mov	r3, r0
 8007f72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007f76:	e004      	b.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007f7e:	e000      	b.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007f80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d10a      	bne.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007f8a:	4ba5      	ldr	r3, [pc, #660]	; (8008220 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f8e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f98:	4aa1      	ldr	r2, [pc, #644]	; (8008220 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f9a:	430b      	orrs	r3, r1
 8007f9c:	6513      	str	r3, [r2, #80]	; 0x50
 8007f9e:	e003      	b.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fa0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007fa4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8007fb4:	f04f 0900 	mov.w	r9, #0
 8007fb8:	ea58 0309 	orrs.w	r3, r8, r9
 8007fbc:	d047      	beq.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fc4:	2b04      	cmp	r3, #4
 8007fc6:	d82a      	bhi.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007fc8:	a201      	add	r2, pc, #4	; (adr r2, 8007fd0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fce:	bf00      	nop
 8007fd0:	08007fe5 	.word	0x08007fe5
 8007fd4:	08007ff3 	.word	0x08007ff3
 8007fd8:	08008009 	.word	0x08008009
 8007fdc:	08008027 	.word	0x08008027
 8007fe0:	08008027 	.word	0x08008027
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fe4:	4b8e      	ldr	r3, [pc, #568]	; (8008220 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe8:	4a8d      	ldr	r2, [pc, #564]	; (8008220 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007fea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007ff0:	e01a      	b.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ff6:	3308      	adds	r3, #8
 8007ff8:	2100      	movs	r1, #0
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f002 fb0e 	bl	800a61c <RCCEx_PLL2_Config>
 8008000:	4603      	mov	r3, r0
 8008002:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008006:	e00f      	b.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008008:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800800c:	3328      	adds	r3, #40	; 0x28
 800800e:	2100      	movs	r1, #0
 8008010:	4618      	mov	r0, r3
 8008012:	f002 fbb5 	bl	800a780 <RCCEx_PLL3_Config>
 8008016:	4603      	mov	r3, r0
 8008018:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800801c:	e004      	b.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008024:	e000      	b.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008026:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008028:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800802c:	2b00      	cmp	r3, #0
 800802e:	d10a      	bne.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008030:	4b7b      	ldr	r3, [pc, #492]	; (8008220 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008034:	f023 0107 	bic.w	r1, r3, #7
 8008038:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800803c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800803e:	4a78      	ldr	r2, [pc, #480]	; (8008220 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008040:	430b      	orrs	r3, r1
 8008042:	6513      	str	r3, [r2, #80]	; 0x50
 8008044:	e003      	b.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008046:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800804a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800804e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008056:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800805a:	f04f 0b00 	mov.w	fp, #0
 800805e:	ea5a 030b 	orrs.w	r3, sl, fp
 8008062:	d04c      	beq.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008064:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800806a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800806e:	d030      	beq.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008070:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008074:	d829      	bhi.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008076:	2bc0      	cmp	r3, #192	; 0xc0
 8008078:	d02d      	beq.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800807a:	2bc0      	cmp	r3, #192	; 0xc0
 800807c:	d825      	bhi.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800807e:	2b80      	cmp	r3, #128	; 0x80
 8008080:	d018      	beq.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008082:	2b80      	cmp	r3, #128	; 0x80
 8008084:	d821      	bhi.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008086:	2b00      	cmp	r3, #0
 8008088:	d002      	beq.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800808a:	2b40      	cmp	r3, #64	; 0x40
 800808c:	d007      	beq.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800808e:	e01c      	b.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008090:	4b63      	ldr	r3, [pc, #396]	; (8008220 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008094:	4a62      	ldr	r2, [pc, #392]	; (8008220 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008096:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800809a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800809c:	e01c      	b.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800809e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080a2:	3308      	adds	r3, #8
 80080a4:	2100      	movs	r1, #0
 80080a6:	4618      	mov	r0, r3
 80080a8:	f002 fab8 	bl	800a61c <RCCEx_PLL2_Config>
 80080ac:	4603      	mov	r3, r0
 80080ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80080b2:	e011      	b.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80080b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080b8:	3328      	adds	r3, #40	; 0x28
 80080ba:	2100      	movs	r1, #0
 80080bc:	4618      	mov	r0, r3
 80080be:	f002 fb5f 	bl	800a780 <RCCEx_PLL3_Config>
 80080c2:	4603      	mov	r3, r0
 80080c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80080c8:	e006      	b.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080ca:	2301      	movs	r3, #1
 80080cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80080d0:	e002      	b.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80080d2:	bf00      	nop
 80080d4:	e000      	b.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80080d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d10a      	bne.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80080e0:	4b4f      	ldr	r3, [pc, #316]	; (8008220 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80080e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080e4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80080e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080ee:	4a4c      	ldr	r2, [pc, #304]	; (8008220 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80080f0:	430b      	orrs	r3, r1
 80080f2:	6513      	str	r3, [r2, #80]	; 0x50
 80080f4:	e003      	b.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80080fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008106:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800810a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800810e:	2300      	movs	r3, #0
 8008110:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008114:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8008118:	460b      	mov	r3, r1
 800811a:	4313      	orrs	r3, r2
 800811c:	d053      	beq.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800811e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008122:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008126:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800812a:	d035      	beq.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800812c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008130:	d82e      	bhi.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008132:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008136:	d031      	beq.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008138:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800813c:	d828      	bhi.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800813e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008142:	d01a      	beq.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008144:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008148:	d822      	bhi.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800814a:	2b00      	cmp	r3, #0
 800814c:	d003      	beq.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800814e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008152:	d007      	beq.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008154:	e01c      	b.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008156:	4b32      	ldr	r3, [pc, #200]	; (8008220 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800815a:	4a31      	ldr	r2, [pc, #196]	; (8008220 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800815c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008160:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008162:	e01c      	b.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008164:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008168:	3308      	adds	r3, #8
 800816a:	2100      	movs	r1, #0
 800816c:	4618      	mov	r0, r3
 800816e:	f002 fa55 	bl	800a61c <RCCEx_PLL2_Config>
 8008172:	4603      	mov	r3, r0
 8008174:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008178:	e011      	b.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800817a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800817e:	3328      	adds	r3, #40	; 0x28
 8008180:	2100      	movs	r1, #0
 8008182:	4618      	mov	r0, r3
 8008184:	f002 fafc 	bl	800a780 <RCCEx_PLL3_Config>
 8008188:	4603      	mov	r3, r0
 800818a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800818e:	e006      	b.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008190:	2301      	movs	r3, #1
 8008192:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008196:	e002      	b.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008198:	bf00      	nop
 800819a:	e000      	b.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800819c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800819e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d10b      	bne.n	80081be <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80081a6:	4b1e      	ldr	r3, [pc, #120]	; (8008220 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80081a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081aa:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80081ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80081b6:	4a1a      	ldr	r2, [pc, #104]	; (8008220 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80081b8:	430b      	orrs	r3, r1
 80081ba:	6593      	str	r3, [r2, #88]	; 0x58
 80081bc:	e003      	b.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80081c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80081c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ce:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80081d2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80081d6:	2300      	movs	r3, #0
 80081d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80081dc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80081e0:	460b      	mov	r3, r1
 80081e2:	4313      	orrs	r3, r2
 80081e4:	d056      	beq.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80081e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80081ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80081f2:	d038      	beq.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80081f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80081f8:	d831      	bhi.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80081fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80081fe:	d034      	beq.n	800826a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008200:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008204:	d82b      	bhi.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008206:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800820a:	d01d      	beq.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800820c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008210:	d825      	bhi.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008212:	2b00      	cmp	r3, #0
 8008214:	d006      	beq.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008216:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800821a:	d00a      	beq.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800821c:	e01f      	b.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800821e:	bf00      	nop
 8008220:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008224:	4ba2      	ldr	r3, [pc, #648]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008228:	4aa1      	ldr	r2, [pc, #644]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800822a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800822e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008230:	e01c      	b.n	800826c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008232:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008236:	3308      	adds	r3, #8
 8008238:	2100      	movs	r1, #0
 800823a:	4618      	mov	r0, r3
 800823c:	f002 f9ee 	bl	800a61c <RCCEx_PLL2_Config>
 8008240:	4603      	mov	r3, r0
 8008242:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008246:	e011      	b.n	800826c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008248:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800824c:	3328      	adds	r3, #40	; 0x28
 800824e:	2100      	movs	r1, #0
 8008250:	4618      	mov	r0, r3
 8008252:	f002 fa95 	bl	800a780 <RCCEx_PLL3_Config>
 8008256:	4603      	mov	r3, r0
 8008258:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800825c:	e006      	b.n	800826c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800825e:	2301      	movs	r3, #1
 8008260:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008264:	e002      	b.n	800826c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008266:	bf00      	nop
 8008268:	e000      	b.n	800826c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800826a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800826c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008270:	2b00      	cmp	r3, #0
 8008272:	d10b      	bne.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008274:	4b8e      	ldr	r3, [pc, #568]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008278:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800827c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008280:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008284:	4a8a      	ldr	r2, [pc, #552]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008286:	430b      	orrs	r3, r1
 8008288:	6593      	str	r3, [r2, #88]	; 0x58
 800828a:	e003      	b.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800828c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008290:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008294:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800829c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80082a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80082a4:	2300      	movs	r3, #0
 80082a6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80082aa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80082ae:	460b      	mov	r3, r1
 80082b0:	4313      	orrs	r3, r2
 80082b2:	d03a      	beq.n	800832a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80082b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082ba:	2b30      	cmp	r3, #48	; 0x30
 80082bc:	d01f      	beq.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x416>
 80082be:	2b30      	cmp	r3, #48	; 0x30
 80082c0:	d819      	bhi.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80082c2:	2b20      	cmp	r3, #32
 80082c4:	d00c      	beq.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80082c6:	2b20      	cmp	r3, #32
 80082c8:	d815      	bhi.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d019      	beq.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80082ce:	2b10      	cmp	r3, #16
 80082d0:	d111      	bne.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082d2:	4b77      	ldr	r3, [pc, #476]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80082d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082d6:	4a76      	ldr	r2, [pc, #472]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80082d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80082de:	e011      	b.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80082e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082e4:	3308      	adds	r3, #8
 80082e6:	2102      	movs	r1, #2
 80082e8:	4618      	mov	r0, r3
 80082ea:	f002 f997 	bl	800a61c <RCCEx_PLL2_Config>
 80082ee:	4603      	mov	r3, r0
 80082f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80082f4:	e006      	b.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80082f6:	2301      	movs	r3, #1
 80082f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80082fc:	e002      	b.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80082fe:	bf00      	nop
 8008300:	e000      	b.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008302:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008304:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008308:	2b00      	cmp	r3, #0
 800830a:	d10a      	bne.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800830c:	4b68      	ldr	r3, [pc, #416]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800830e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008310:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8008314:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800831a:	4a65      	ldr	r2, [pc, #404]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800831c:	430b      	orrs	r3, r1
 800831e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008320:	e003      	b.n	800832a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008322:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008326:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800832a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800832e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008332:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8008336:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800833a:	2300      	movs	r3, #0
 800833c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008340:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8008344:	460b      	mov	r3, r1
 8008346:	4313      	orrs	r3, r2
 8008348:	d051      	beq.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800834a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800834e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008350:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008354:	d035      	beq.n	80083c2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008356:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800835a:	d82e      	bhi.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800835c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008360:	d031      	beq.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008362:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008366:	d828      	bhi.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008368:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800836c:	d01a      	beq.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800836e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008372:	d822      	bhi.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008374:	2b00      	cmp	r3, #0
 8008376:	d003      	beq.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8008378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800837c:	d007      	beq.n	800838e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800837e:	e01c      	b.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008380:	4b4b      	ldr	r3, [pc, #300]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008384:	4a4a      	ldr	r2, [pc, #296]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008386:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800838a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800838c:	e01c      	b.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800838e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008392:	3308      	adds	r3, #8
 8008394:	2100      	movs	r1, #0
 8008396:	4618      	mov	r0, r3
 8008398:	f002 f940 	bl	800a61c <RCCEx_PLL2_Config>
 800839c:	4603      	mov	r3, r0
 800839e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80083a2:	e011      	b.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80083a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083a8:	3328      	adds	r3, #40	; 0x28
 80083aa:	2100      	movs	r1, #0
 80083ac:	4618      	mov	r0, r3
 80083ae:	f002 f9e7 	bl	800a780 <RCCEx_PLL3_Config>
 80083b2:	4603      	mov	r3, r0
 80083b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80083b8:	e006      	b.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80083c0:	e002      	b.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80083c2:	bf00      	nop
 80083c4:	e000      	b.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80083c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d10a      	bne.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80083d0:	4b37      	ldr	r3, [pc, #220]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80083d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083d4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80083d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083de:	4a34      	ldr	r2, [pc, #208]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80083e0:	430b      	orrs	r3, r1
 80083e2:	6513      	str	r3, [r2, #80]	; 0x50
 80083e4:	e003      	b.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80083ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80083fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80083fe:	2300      	movs	r3, #0
 8008400:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008404:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8008408:	460b      	mov	r3, r1
 800840a:	4313      	orrs	r3, r2
 800840c:	d056      	beq.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800840e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008412:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008414:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008418:	d033      	beq.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800841a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800841e:	d82c      	bhi.n	800847a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008420:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008424:	d02f      	beq.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008426:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800842a:	d826      	bhi.n	800847a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800842c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008430:	d02b      	beq.n	800848a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8008432:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008436:	d820      	bhi.n	800847a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008438:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800843c:	d012      	beq.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800843e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008442:	d81a      	bhi.n	800847a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008444:	2b00      	cmp	r3, #0
 8008446:	d022      	beq.n	800848e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800844c:	d115      	bne.n	800847a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800844e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008452:	3308      	adds	r3, #8
 8008454:	2101      	movs	r1, #1
 8008456:	4618      	mov	r0, r3
 8008458:	f002 f8e0 	bl	800a61c <RCCEx_PLL2_Config>
 800845c:	4603      	mov	r3, r0
 800845e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008462:	e015      	b.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008464:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008468:	3328      	adds	r3, #40	; 0x28
 800846a:	2101      	movs	r1, #1
 800846c:	4618      	mov	r0, r3
 800846e:	f002 f987 	bl	800a780 <RCCEx_PLL3_Config>
 8008472:	4603      	mov	r3, r0
 8008474:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008478:	e00a      	b.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800847a:	2301      	movs	r3, #1
 800847c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008480:	e006      	b.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008482:	bf00      	nop
 8008484:	e004      	b.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008486:	bf00      	nop
 8008488:	e002      	b.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800848a:	bf00      	nop
 800848c:	e000      	b.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800848e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008490:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008494:	2b00      	cmp	r3, #0
 8008496:	d10d      	bne.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008498:	4b05      	ldr	r3, [pc, #20]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800849a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800849c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80084a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084a6:	4a02      	ldr	r2, [pc, #8]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80084a8:	430b      	orrs	r3, r1
 80084aa:	6513      	str	r3, [r2, #80]	; 0x50
 80084ac:	e006      	b.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80084ae:	bf00      	nop
 80084b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80084b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80084bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c4:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80084c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80084cc:	2300      	movs	r3, #0
 80084ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80084d2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80084d6:	460b      	mov	r3, r1
 80084d8:	4313      	orrs	r3, r2
 80084da:	d055      	beq.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80084dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80084e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80084e8:	d033      	beq.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80084ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80084ee:	d82c      	bhi.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80084f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084f4:	d02f      	beq.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80084f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084fa:	d826      	bhi.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80084fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008500:	d02b      	beq.n	800855a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8008502:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008506:	d820      	bhi.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008508:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800850c:	d012      	beq.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800850e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008512:	d81a      	bhi.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008514:	2b00      	cmp	r3, #0
 8008516:	d022      	beq.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008518:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800851c:	d115      	bne.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800851e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008522:	3308      	adds	r3, #8
 8008524:	2101      	movs	r1, #1
 8008526:	4618      	mov	r0, r3
 8008528:	f002 f878 	bl	800a61c <RCCEx_PLL2_Config>
 800852c:	4603      	mov	r3, r0
 800852e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008532:	e015      	b.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008534:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008538:	3328      	adds	r3, #40	; 0x28
 800853a:	2101      	movs	r1, #1
 800853c:	4618      	mov	r0, r3
 800853e:	f002 f91f 	bl	800a780 <RCCEx_PLL3_Config>
 8008542:	4603      	mov	r3, r0
 8008544:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008548:	e00a      	b.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800854a:	2301      	movs	r3, #1
 800854c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008550:	e006      	b.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008552:	bf00      	nop
 8008554:	e004      	b.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008556:	bf00      	nop
 8008558:	e002      	b.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800855a:	bf00      	nop
 800855c:	e000      	b.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800855e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008560:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008564:	2b00      	cmp	r3, #0
 8008566:	d10b      	bne.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008568:	4ba3      	ldr	r3, [pc, #652]	; (80087f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800856a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800856c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8008570:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008574:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008578:	4a9f      	ldr	r2, [pc, #636]	; (80087f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800857a:	430b      	orrs	r3, r1
 800857c:	6593      	str	r3, [r2, #88]	; 0x58
 800857e:	e003      	b.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008580:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008584:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008588:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800858c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008590:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8008594:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008598:	2300      	movs	r3, #0
 800859a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800859e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80085a2:	460b      	mov	r3, r1
 80085a4:	4313      	orrs	r3, r2
 80085a6:	d037      	beq.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80085a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085b2:	d00e      	beq.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80085b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085b8:	d816      	bhi.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d018      	beq.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80085be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80085c2:	d111      	bne.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085c4:	4b8c      	ldr	r3, [pc, #560]	; (80087f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c8:	4a8b      	ldr	r2, [pc, #556]	; (80087f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80085d0:	e00f      	b.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80085d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085d6:	3308      	adds	r3, #8
 80085d8:	2101      	movs	r1, #1
 80085da:	4618      	mov	r0, r3
 80085dc:	f002 f81e 	bl	800a61c <RCCEx_PLL2_Config>
 80085e0:	4603      	mov	r3, r0
 80085e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80085e6:	e004      	b.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085e8:	2301      	movs	r3, #1
 80085ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80085ee:	e000      	b.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80085f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d10a      	bne.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80085fa:	4b7f      	ldr	r3, [pc, #508]	; (80087f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085fe:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008602:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008608:	4a7b      	ldr	r2, [pc, #492]	; (80087f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800860a:	430b      	orrs	r3, r1
 800860c:	6513      	str	r3, [r2, #80]	; 0x50
 800860e:	e003      	b.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008610:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008614:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008618:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800861c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008620:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8008624:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008628:	2300      	movs	r3, #0
 800862a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800862e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8008632:	460b      	mov	r3, r1
 8008634:	4313      	orrs	r3, r2
 8008636:	d039      	beq.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008638:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800863c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800863e:	2b03      	cmp	r3, #3
 8008640:	d81c      	bhi.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8008642:	a201      	add	r2, pc, #4	; (adr r2, 8008648 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008648:	08008685 	.word	0x08008685
 800864c:	08008659 	.word	0x08008659
 8008650:	08008667 	.word	0x08008667
 8008654:	08008685 	.word	0x08008685
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008658:	4b67      	ldr	r3, [pc, #412]	; (80087f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800865a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800865c:	4a66      	ldr	r2, [pc, #408]	; (80087f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800865e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008662:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008664:	e00f      	b.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008666:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800866a:	3308      	adds	r3, #8
 800866c:	2102      	movs	r1, #2
 800866e:	4618      	mov	r0, r3
 8008670:	f001 ffd4 	bl	800a61c <RCCEx_PLL2_Config>
 8008674:	4603      	mov	r3, r0
 8008676:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800867a:	e004      	b.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800867c:	2301      	movs	r3, #1
 800867e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008682:	e000      	b.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008684:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008686:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800868a:	2b00      	cmp	r3, #0
 800868c:	d10a      	bne.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800868e:	4b5a      	ldr	r3, [pc, #360]	; (80087f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008692:	f023 0103 	bic.w	r1, r3, #3
 8008696:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800869a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800869c:	4a56      	ldr	r2, [pc, #344]	; (80087f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800869e:	430b      	orrs	r3, r1
 80086a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80086a2:	e003      	b.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80086a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80086ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80086b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80086bc:	2300      	movs	r3, #0
 80086be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80086c2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80086c6:	460b      	mov	r3, r1
 80086c8:	4313      	orrs	r3, r2
 80086ca:	f000 809f 	beq.w	800880c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80086ce:	4b4b      	ldr	r3, [pc, #300]	; (80087fc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a4a      	ldr	r2, [pc, #296]	; (80087fc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80086d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80086da:	f7fa f9b7 	bl	8002a4c <HAL_GetTick>
 80086de:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80086e2:	e00b      	b.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80086e4:	f7fa f9b2 	bl	8002a4c <HAL_GetTick>
 80086e8:	4602      	mov	r2, r0
 80086ea:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80086ee:	1ad3      	subs	r3, r2, r3
 80086f0:	2b64      	cmp	r3, #100	; 0x64
 80086f2:	d903      	bls.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80086f4:	2303      	movs	r3, #3
 80086f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80086fa:	e005      	b.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80086fc:	4b3f      	ldr	r3, [pc, #252]	; (80087fc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008704:	2b00      	cmp	r3, #0
 8008706:	d0ed      	beq.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008708:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800870c:	2b00      	cmp	r3, #0
 800870e:	d179      	bne.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008710:	4b39      	ldr	r3, [pc, #228]	; (80087f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008712:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008714:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008718:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800871c:	4053      	eors	r3, r2
 800871e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008722:	2b00      	cmp	r3, #0
 8008724:	d015      	beq.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008726:	4b34      	ldr	r3, [pc, #208]	; (80087f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800872a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800872e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008732:	4b31      	ldr	r3, [pc, #196]	; (80087f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008736:	4a30      	ldr	r2, [pc, #192]	; (80087f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800873c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800873e:	4b2e      	ldr	r3, [pc, #184]	; (80087f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008742:	4a2d      	ldr	r2, [pc, #180]	; (80087f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008744:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008748:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800874a:	4a2b      	ldr	r2, [pc, #172]	; (80087f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800874c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008750:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008752:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008756:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800875a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800875e:	d118      	bne.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008760:	f7fa f974 	bl	8002a4c <HAL_GetTick>
 8008764:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008768:	e00d      	b.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800876a:	f7fa f96f 	bl	8002a4c <HAL_GetTick>
 800876e:	4602      	mov	r2, r0
 8008770:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008774:	1ad2      	subs	r2, r2, r3
 8008776:	f241 3388 	movw	r3, #5000	; 0x1388
 800877a:	429a      	cmp	r2, r3
 800877c:	d903      	bls.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800877e:	2303      	movs	r3, #3
 8008780:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8008784:	e005      	b.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008786:	4b1c      	ldr	r3, [pc, #112]	; (80087f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800878a:	f003 0302 	and.w	r3, r3, #2
 800878e:	2b00      	cmp	r3, #0
 8008790:	d0eb      	beq.n	800876a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8008792:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008796:	2b00      	cmp	r3, #0
 8008798:	d129      	bne.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800879a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800879e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80087a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087aa:	d10e      	bne.n	80087ca <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80087ac:	4b12      	ldr	r3, [pc, #72]	; (80087f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80087ae:	691b      	ldr	r3, [r3, #16]
 80087b0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80087b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80087bc:	091a      	lsrs	r2, r3, #4
 80087be:	4b10      	ldr	r3, [pc, #64]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80087c0:	4013      	ands	r3, r2
 80087c2:	4a0d      	ldr	r2, [pc, #52]	; (80087f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80087c4:	430b      	orrs	r3, r1
 80087c6:	6113      	str	r3, [r2, #16]
 80087c8:	e005      	b.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80087ca:	4b0b      	ldr	r3, [pc, #44]	; (80087f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80087cc:	691b      	ldr	r3, [r3, #16]
 80087ce:	4a0a      	ldr	r2, [pc, #40]	; (80087f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80087d0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80087d4:	6113      	str	r3, [r2, #16]
 80087d6:	4b08      	ldr	r3, [pc, #32]	; (80087f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80087d8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80087da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80087e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80087e6:	4a04      	ldr	r2, [pc, #16]	; (80087f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80087e8:	430b      	orrs	r3, r1
 80087ea:	6713      	str	r3, [r2, #112]	; 0x70
 80087ec:	e00e      	b.n	800880c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80087ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80087f6:	e009      	b.n	800880c <HAL_RCCEx_PeriphCLKConfig+0x924>
 80087f8:	58024400 	.word	0x58024400
 80087fc:	58024800 	.word	0x58024800
 8008800:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008804:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008808:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800880c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008814:	f002 0301 	and.w	r3, r2, #1
 8008818:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800881c:	2300      	movs	r3, #0
 800881e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008822:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008826:	460b      	mov	r3, r1
 8008828:	4313      	orrs	r3, r2
 800882a:	f000 8089 	beq.w	8008940 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800882e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008832:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008834:	2b28      	cmp	r3, #40	; 0x28
 8008836:	d86b      	bhi.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008838:	a201      	add	r2, pc, #4	; (adr r2, 8008840 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800883a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800883e:	bf00      	nop
 8008840:	08008919 	.word	0x08008919
 8008844:	08008911 	.word	0x08008911
 8008848:	08008911 	.word	0x08008911
 800884c:	08008911 	.word	0x08008911
 8008850:	08008911 	.word	0x08008911
 8008854:	08008911 	.word	0x08008911
 8008858:	08008911 	.word	0x08008911
 800885c:	08008911 	.word	0x08008911
 8008860:	080088e5 	.word	0x080088e5
 8008864:	08008911 	.word	0x08008911
 8008868:	08008911 	.word	0x08008911
 800886c:	08008911 	.word	0x08008911
 8008870:	08008911 	.word	0x08008911
 8008874:	08008911 	.word	0x08008911
 8008878:	08008911 	.word	0x08008911
 800887c:	08008911 	.word	0x08008911
 8008880:	080088fb 	.word	0x080088fb
 8008884:	08008911 	.word	0x08008911
 8008888:	08008911 	.word	0x08008911
 800888c:	08008911 	.word	0x08008911
 8008890:	08008911 	.word	0x08008911
 8008894:	08008911 	.word	0x08008911
 8008898:	08008911 	.word	0x08008911
 800889c:	08008911 	.word	0x08008911
 80088a0:	08008919 	.word	0x08008919
 80088a4:	08008911 	.word	0x08008911
 80088a8:	08008911 	.word	0x08008911
 80088ac:	08008911 	.word	0x08008911
 80088b0:	08008911 	.word	0x08008911
 80088b4:	08008911 	.word	0x08008911
 80088b8:	08008911 	.word	0x08008911
 80088bc:	08008911 	.word	0x08008911
 80088c0:	08008919 	.word	0x08008919
 80088c4:	08008911 	.word	0x08008911
 80088c8:	08008911 	.word	0x08008911
 80088cc:	08008911 	.word	0x08008911
 80088d0:	08008911 	.word	0x08008911
 80088d4:	08008911 	.word	0x08008911
 80088d8:	08008911 	.word	0x08008911
 80088dc:	08008911 	.word	0x08008911
 80088e0:	08008919 	.word	0x08008919
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80088e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088e8:	3308      	adds	r3, #8
 80088ea:	2101      	movs	r1, #1
 80088ec:	4618      	mov	r0, r3
 80088ee:	f001 fe95 	bl	800a61c <RCCEx_PLL2_Config>
 80088f2:	4603      	mov	r3, r0
 80088f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80088f8:	e00f      	b.n	800891a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80088fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088fe:	3328      	adds	r3, #40	; 0x28
 8008900:	2101      	movs	r1, #1
 8008902:	4618      	mov	r0, r3
 8008904:	f001 ff3c 	bl	800a780 <RCCEx_PLL3_Config>
 8008908:	4603      	mov	r3, r0
 800890a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800890e:	e004      	b.n	800891a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008910:	2301      	movs	r3, #1
 8008912:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008916:	e000      	b.n	800891a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008918:	bf00      	nop
    }

    if (ret == HAL_OK)
 800891a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800891e:	2b00      	cmp	r3, #0
 8008920:	d10a      	bne.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008922:	4bbf      	ldr	r3, [pc, #764]	; (8008c20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008926:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800892a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800892e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008930:	4abb      	ldr	r2, [pc, #748]	; (8008c20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008932:	430b      	orrs	r3, r1
 8008934:	6553      	str	r3, [r2, #84]	; 0x54
 8008936:	e003      	b.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008938:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800893c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008940:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008948:	f002 0302 	and.w	r3, r2, #2
 800894c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008950:	2300      	movs	r3, #0
 8008952:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008956:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800895a:	460b      	mov	r3, r1
 800895c:	4313      	orrs	r3, r2
 800895e:	d041      	beq.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008960:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008964:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008966:	2b05      	cmp	r3, #5
 8008968:	d824      	bhi.n	80089b4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800896a:	a201      	add	r2, pc, #4	; (adr r2, 8008970 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800896c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008970:	080089bd 	.word	0x080089bd
 8008974:	08008989 	.word	0x08008989
 8008978:	0800899f 	.word	0x0800899f
 800897c:	080089bd 	.word	0x080089bd
 8008980:	080089bd 	.word	0x080089bd
 8008984:	080089bd 	.word	0x080089bd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008988:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800898c:	3308      	adds	r3, #8
 800898e:	2101      	movs	r1, #1
 8008990:	4618      	mov	r0, r3
 8008992:	f001 fe43 	bl	800a61c <RCCEx_PLL2_Config>
 8008996:	4603      	mov	r3, r0
 8008998:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800899c:	e00f      	b.n	80089be <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800899e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089a2:	3328      	adds	r3, #40	; 0x28
 80089a4:	2101      	movs	r1, #1
 80089a6:	4618      	mov	r0, r3
 80089a8:	f001 feea 	bl	800a780 <RCCEx_PLL3_Config>
 80089ac:	4603      	mov	r3, r0
 80089ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80089b2:	e004      	b.n	80089be <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089b4:	2301      	movs	r3, #1
 80089b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80089ba:	e000      	b.n	80089be <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80089bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d10a      	bne.n	80089dc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80089c6:	4b96      	ldr	r3, [pc, #600]	; (8008c20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80089c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089ca:	f023 0107 	bic.w	r1, r3, #7
 80089ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089d4:	4a92      	ldr	r2, [pc, #584]	; (8008c20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80089d6:	430b      	orrs	r3, r1
 80089d8:	6553      	str	r3, [r2, #84]	; 0x54
 80089da:	e003      	b.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80089e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ec:	f002 0304 	and.w	r3, r2, #4
 80089f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80089f4:	2300      	movs	r3, #0
 80089f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80089fa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80089fe:	460b      	mov	r3, r1
 8008a00:	4313      	orrs	r3, r2
 8008a02:	d044      	beq.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a0c:	2b05      	cmp	r3, #5
 8008a0e:	d825      	bhi.n	8008a5c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008a10:	a201      	add	r2, pc, #4	; (adr r2, 8008a18 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8008a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a16:	bf00      	nop
 8008a18:	08008a65 	.word	0x08008a65
 8008a1c:	08008a31 	.word	0x08008a31
 8008a20:	08008a47 	.word	0x08008a47
 8008a24:	08008a65 	.word	0x08008a65
 8008a28:	08008a65 	.word	0x08008a65
 8008a2c:	08008a65 	.word	0x08008a65
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a34:	3308      	adds	r3, #8
 8008a36:	2101      	movs	r1, #1
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f001 fdef 	bl	800a61c <RCCEx_PLL2_Config>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008a44:	e00f      	b.n	8008a66 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a4a:	3328      	adds	r3, #40	; 0x28
 8008a4c:	2101      	movs	r1, #1
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f001 fe96 	bl	800a780 <RCCEx_PLL3_Config>
 8008a54:	4603      	mov	r3, r0
 8008a56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008a5a:	e004      	b.n	8008a66 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008a62:	e000      	b.n	8008a66 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008a64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d10b      	bne.n	8008a86 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008a6e:	4b6c      	ldr	r3, [pc, #432]	; (8008c20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a72:	f023 0107 	bic.w	r1, r3, #7
 8008a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a7e:	4a68      	ldr	r2, [pc, #416]	; (8008c20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008a80:	430b      	orrs	r3, r1
 8008a82:	6593      	str	r3, [r2, #88]	; 0x58
 8008a84:	e003      	b.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a8a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a96:	f002 0320 	and.w	r3, r2, #32
 8008a9a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008aa4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008aa8:	460b      	mov	r3, r1
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	d055      	beq.n	8008b5a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ab6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008aba:	d033      	beq.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008abc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ac0:	d82c      	bhi.n	8008b1c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ac6:	d02f      	beq.n	8008b28 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008acc:	d826      	bhi.n	8008b1c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008ace:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008ad2:	d02b      	beq.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008ad4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008ad8:	d820      	bhi.n	8008b1c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008ada:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ade:	d012      	beq.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008ae0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ae4:	d81a      	bhi.n	8008b1c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d022      	beq.n	8008b30 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008aea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008aee:	d115      	bne.n	8008b1c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008af4:	3308      	adds	r3, #8
 8008af6:	2100      	movs	r1, #0
 8008af8:	4618      	mov	r0, r3
 8008afa:	f001 fd8f 	bl	800a61c <RCCEx_PLL2_Config>
 8008afe:	4603      	mov	r3, r0
 8008b00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008b04:	e015      	b.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b0a:	3328      	adds	r3, #40	; 0x28
 8008b0c:	2102      	movs	r1, #2
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f001 fe36 	bl	800a780 <RCCEx_PLL3_Config>
 8008b14:	4603      	mov	r3, r0
 8008b16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008b1a:	e00a      	b.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008b22:	e006      	b.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008b24:	bf00      	nop
 8008b26:	e004      	b.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008b28:	bf00      	nop
 8008b2a:	e002      	b.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008b2c:	bf00      	nop
 8008b2e:	e000      	b.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008b30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d10b      	bne.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008b3a:	4b39      	ldr	r3, [pc, #228]	; (8008c20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b3e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8008b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b4a:	4a35      	ldr	r2, [pc, #212]	; (8008c20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008b4c:	430b      	orrs	r3, r1
 8008b4e:	6553      	str	r3, [r2, #84]	; 0x54
 8008b50:	e003      	b.n	8008b5a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b62:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8008b66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008b70:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8008b74:	460b      	mov	r3, r1
 8008b76:	4313      	orrs	r3, r2
 8008b78:	d058      	beq.n	8008c2c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008b82:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008b86:	d033      	beq.n	8008bf0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008b88:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008b8c:	d82c      	bhi.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008b8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b92:	d02f      	beq.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008b94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b98:	d826      	bhi.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008b9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008b9e:	d02b      	beq.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8008ba0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008ba4:	d820      	bhi.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008ba6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008baa:	d012      	beq.n	8008bd2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008bac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bb0:	d81a      	bhi.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d022      	beq.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bba:	d115      	bne.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bc0:	3308      	adds	r3, #8
 8008bc2:	2100      	movs	r1, #0
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f001 fd29 	bl	800a61c <RCCEx_PLL2_Config>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008bd0:	e015      	b.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bd6:	3328      	adds	r3, #40	; 0x28
 8008bd8:	2102      	movs	r1, #2
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f001 fdd0 	bl	800a780 <RCCEx_PLL3_Config>
 8008be0:	4603      	mov	r3, r0
 8008be2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008be6:	e00a      	b.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008be8:	2301      	movs	r3, #1
 8008bea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008bee:	e006      	b.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008bf0:	bf00      	nop
 8008bf2:	e004      	b.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008bf4:	bf00      	nop
 8008bf6:	e002      	b.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008bf8:	bf00      	nop
 8008bfa:	e000      	b.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008bfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bfe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d10e      	bne.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008c06:	4b06      	ldr	r3, [pc, #24]	; (8008c20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c0a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8008c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008c16:	4a02      	ldr	r2, [pc, #8]	; (8008c20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008c18:	430b      	orrs	r3, r1
 8008c1a:	6593      	str	r3, [r2, #88]	; 0x58
 8008c1c:	e006      	b.n	8008c2c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008c1e:	bf00      	nop
 8008c20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c28:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c34:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8008c38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008c42:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8008c46:	460b      	mov	r3, r1
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	d055      	beq.n	8008cf8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c50:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008c54:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008c58:	d033      	beq.n	8008cc2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008c5a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008c5e:	d82c      	bhi.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008c60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c64:	d02f      	beq.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008c66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c6a:	d826      	bhi.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008c6c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008c70:	d02b      	beq.n	8008cca <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8008c72:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008c76:	d820      	bhi.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008c78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c7c:	d012      	beq.n	8008ca4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8008c7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c82:	d81a      	bhi.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d022      	beq.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008c88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c8c:	d115      	bne.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c92:	3308      	adds	r3, #8
 8008c94:	2100      	movs	r1, #0
 8008c96:	4618      	mov	r0, r3
 8008c98:	f001 fcc0 	bl	800a61c <RCCEx_PLL2_Config>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008ca2:	e015      	b.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ca8:	3328      	adds	r3, #40	; 0x28
 8008caa:	2102      	movs	r1, #2
 8008cac:	4618      	mov	r0, r3
 8008cae:	f001 fd67 	bl	800a780 <RCCEx_PLL3_Config>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008cb8:	e00a      	b.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008cc0:	e006      	b.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008cc2:	bf00      	nop
 8008cc4:	e004      	b.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008cc6:	bf00      	nop
 8008cc8:	e002      	b.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008cca:	bf00      	nop
 8008ccc:	e000      	b.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008cce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cd0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d10b      	bne.n	8008cf0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008cd8:	4ba1      	ldr	r3, [pc, #644]	; (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cdc:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8008ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ce4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008ce8:	4a9d      	ldr	r2, [pc, #628]	; (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008cea:	430b      	orrs	r3, r1
 8008cec:	6593      	str	r3, [r2, #88]	; 0x58
 8008cee:	e003      	b.n	8008cf8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cf0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008cf4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d00:	f002 0308 	and.w	r3, r2, #8
 8008d04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008d08:	2300      	movs	r3, #0
 8008d0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008d0e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8008d12:	460b      	mov	r3, r1
 8008d14:	4313      	orrs	r3, r2
 8008d16:	d01e      	beq.n	8008d56 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d24:	d10c      	bne.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d2a:	3328      	adds	r3, #40	; 0x28
 8008d2c:	2102      	movs	r1, #2
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f001 fd26 	bl	800a780 <RCCEx_PLL3_Config>
 8008d34:	4603      	mov	r3, r0
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d002      	beq.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008d40:	4b87      	ldr	r3, [pc, #540]	; (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d44:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d50:	4a83      	ldr	r2, [pc, #524]	; (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d52:	430b      	orrs	r3, r1
 8008d54:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d5e:	f002 0310 	and.w	r3, r2, #16
 8008d62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008d66:	2300      	movs	r3, #0
 8008d68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008d6c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8008d70:	460b      	mov	r3, r1
 8008d72:	4313      	orrs	r3, r2
 8008d74:	d01e      	beq.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008d7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d82:	d10c      	bne.n	8008d9e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d88:	3328      	adds	r3, #40	; 0x28
 8008d8a:	2102      	movs	r1, #2
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f001 fcf7 	bl	800a780 <RCCEx_PLL3_Config>
 8008d92:	4603      	mov	r3, r0
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d002      	beq.n	8008d9e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008d9e:	4b70      	ldr	r3, [pc, #448]	; (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008da2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008daa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008dae:	4a6c      	ldr	r2, [pc, #432]	; (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008db0:	430b      	orrs	r3, r1
 8008db2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dbc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8008dc0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008dca:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8008dce:	460b      	mov	r3, r1
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	d03e      	beq.n	8008e52 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dd8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008ddc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008de0:	d022      	beq.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8008de2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008de6:	d81b      	bhi.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d003      	beq.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008df0:	d00b      	beq.n	8008e0a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008df2:	e015      	b.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008df8:	3308      	adds	r3, #8
 8008dfa:	2100      	movs	r1, #0
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f001 fc0d 	bl	800a61c <RCCEx_PLL2_Config>
 8008e02:	4603      	mov	r3, r0
 8008e04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008e08:	e00f      	b.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e0e:	3328      	adds	r3, #40	; 0x28
 8008e10:	2102      	movs	r1, #2
 8008e12:	4618      	mov	r0, r3
 8008e14:	f001 fcb4 	bl	800a780 <RCCEx_PLL3_Config>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008e1e:	e004      	b.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e20:	2301      	movs	r3, #1
 8008e22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008e26:	e000      	b.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008e28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d10b      	bne.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008e32:	4b4b      	ldr	r3, [pc, #300]	; (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e36:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8008e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008e42:	4a47      	ldr	r2, [pc, #284]	; (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008e44:	430b      	orrs	r3, r1
 8008e46:	6593      	str	r3, [r2, #88]	; 0x58
 8008e48:	e003      	b.n	8008e52 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e4e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e5a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8008e5e:	67bb      	str	r3, [r7, #120]	; 0x78
 8008e60:	2300      	movs	r3, #0
 8008e62:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008e64:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8008e68:	460b      	mov	r3, r1
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	d03b      	beq.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e76:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008e7a:	d01f      	beq.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008e7c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008e80:	d818      	bhi.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8008e82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e86:	d003      	beq.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008e88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e8c:	d007      	beq.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8008e8e:	e011      	b.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e90:	4b33      	ldr	r3, [pc, #204]	; (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e94:	4a32      	ldr	r2, [pc, #200]	; (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008e96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008e9c:	e00f      	b.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ea2:	3328      	adds	r3, #40	; 0x28
 8008ea4:	2101      	movs	r1, #1
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f001 fc6a 	bl	800a780 <RCCEx_PLL3_Config>
 8008eac:	4603      	mov	r3, r0
 8008eae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8008eb2:	e004      	b.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008eba:	e000      	b.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008ebc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ebe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d10b      	bne.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008ec6:	4b26      	ldr	r3, [pc, #152]	; (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008eca:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ed6:	4a22      	ldr	r2, [pc, #136]	; (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008ed8:	430b      	orrs	r3, r1
 8008eda:	6553      	str	r3, [r2, #84]	; 0x54
 8008edc:	e003      	b.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ede:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ee2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eee:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8008ef2:	673b      	str	r3, [r7, #112]	; 0x70
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	677b      	str	r3, [r7, #116]	; 0x74
 8008ef8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8008efc:	460b      	mov	r3, r1
 8008efe:	4313      	orrs	r3, r2
 8008f00:	d034      	beq.n	8008f6c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d003      	beq.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f10:	d007      	beq.n	8008f22 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008f12:	e011      	b.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f14:	4b12      	ldr	r3, [pc, #72]	; (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f18:	4a11      	ldr	r2, [pc, #68]	; (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008f1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008f20:	e00e      	b.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f26:	3308      	adds	r3, #8
 8008f28:	2102      	movs	r1, #2
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f001 fb76 	bl	800a61c <RCCEx_PLL2_Config>
 8008f30:	4603      	mov	r3, r0
 8008f32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008f36:	e003      	b.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008f38:	2301      	movs	r3, #1
 8008f3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008f3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d10d      	bne.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008f48:	4b05      	ldr	r3, [pc, #20]	; (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f4c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f56:	4a02      	ldr	r2, [pc, #8]	; (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008f58:	430b      	orrs	r3, r1
 8008f5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008f5c:	e006      	b.n	8008f6c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008f5e:	bf00      	nop
 8008f60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f68:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f74:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8008f78:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f7e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8008f82:	460b      	mov	r3, r1
 8008f84:	4313      	orrs	r3, r2
 8008f86:	d00c      	beq.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f8c:	3328      	adds	r3, #40	; 0x28
 8008f8e:	2102      	movs	r1, #2
 8008f90:	4618      	mov	r0, r3
 8008f92:	f001 fbf5 	bl	800a780 <RCCEx_PLL3_Config>
 8008f96:	4603      	mov	r3, r0
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d002      	beq.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008faa:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8008fae:	663b      	str	r3, [r7, #96]	; 0x60
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	667b      	str	r3, [r7, #100]	; 0x64
 8008fb4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8008fb8:	460b      	mov	r3, r1
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	d038      	beq.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008fca:	d018      	beq.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008fcc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008fd0:	d811      	bhi.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008fd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fd6:	d014      	beq.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008fd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fdc:	d80b      	bhi.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d011      	beq.n	8009006 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008fe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fe6:	d106      	bne.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fe8:	4bc3      	ldr	r3, [pc, #780]	; (80092f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fec:	4ac2      	ldr	r2, [pc, #776]	; (80092f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008fee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ff2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008ff4:	e008      	b.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008ffc:	e004      	b.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008ffe:	bf00      	nop
 8009000:	e002      	b.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009002:	bf00      	nop
 8009004:	e000      	b.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009006:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009008:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800900c:	2b00      	cmp	r3, #0
 800900e:	d10b      	bne.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009010:	4bb9      	ldr	r3, [pc, #740]	; (80092f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009014:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009018:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800901c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009020:	4ab5      	ldr	r2, [pc, #724]	; (80092f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009022:	430b      	orrs	r3, r1
 8009024:	6553      	str	r3, [r2, #84]	; 0x54
 8009026:	e003      	b.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009028:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800902c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009030:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009038:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800903c:	65bb      	str	r3, [r7, #88]	; 0x58
 800903e:	2300      	movs	r3, #0
 8009040:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009042:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8009046:	460b      	mov	r3, r1
 8009048:	4313      	orrs	r3, r2
 800904a:	d009      	beq.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800904c:	4baa      	ldr	r3, [pc, #680]	; (80092f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800904e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009050:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009054:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009058:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800905a:	4aa7      	ldr	r2, [pc, #668]	; (80092f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800905c:	430b      	orrs	r3, r1
 800905e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009060:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009068:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800906c:	653b      	str	r3, [r7, #80]	; 0x50
 800906e:	2300      	movs	r3, #0
 8009070:	657b      	str	r3, [r7, #84]	; 0x54
 8009072:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8009076:	460b      	mov	r3, r1
 8009078:	4313      	orrs	r3, r2
 800907a:	d00a      	beq.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800907c:	4b9e      	ldr	r3, [pc, #632]	; (80092f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800907e:	691b      	ldr	r3, [r3, #16]
 8009080:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8009084:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009088:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800908c:	4a9a      	ldr	r2, [pc, #616]	; (80092f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800908e:	430b      	orrs	r3, r1
 8009090:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009092:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800909a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800909e:	64bb      	str	r3, [r7, #72]	; 0x48
 80090a0:	2300      	movs	r3, #0
 80090a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80090a4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80090a8:	460b      	mov	r3, r1
 80090aa:	4313      	orrs	r3, r2
 80090ac:	d009      	beq.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80090ae:	4b92      	ldr	r3, [pc, #584]	; (80092f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80090b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090b2:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80090b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090bc:	4a8e      	ldr	r2, [pc, #568]	; (80092f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80090be:	430b      	orrs	r3, r1
 80090c0:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80090c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ca:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80090ce:	643b      	str	r3, [r7, #64]	; 0x40
 80090d0:	2300      	movs	r3, #0
 80090d2:	647b      	str	r3, [r7, #68]	; 0x44
 80090d4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80090d8:	460b      	mov	r3, r1
 80090da:	4313      	orrs	r3, r2
 80090dc:	d00e      	beq.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80090de:	4b86      	ldr	r3, [pc, #536]	; (80092f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80090e0:	691b      	ldr	r3, [r3, #16]
 80090e2:	4a85      	ldr	r2, [pc, #532]	; (80092f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80090e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80090e8:	6113      	str	r3, [r2, #16]
 80090ea:	4b83      	ldr	r3, [pc, #524]	; (80092f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80090ec:	6919      	ldr	r1, [r3, #16]
 80090ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090f2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80090f6:	4a80      	ldr	r2, [pc, #512]	; (80092f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80090f8:	430b      	orrs	r3, r1
 80090fa:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80090fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009104:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8009108:	63bb      	str	r3, [r7, #56]	; 0x38
 800910a:	2300      	movs	r3, #0
 800910c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800910e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8009112:	460b      	mov	r3, r1
 8009114:	4313      	orrs	r3, r2
 8009116:	d009      	beq.n	800912c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009118:	4b77      	ldr	r3, [pc, #476]	; (80092f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800911a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800911c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009120:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009126:	4a74      	ldr	r2, [pc, #464]	; (80092f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009128:	430b      	orrs	r3, r1
 800912a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800912c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009134:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8009138:	633b      	str	r3, [r7, #48]	; 0x30
 800913a:	2300      	movs	r3, #0
 800913c:	637b      	str	r3, [r7, #52]	; 0x34
 800913e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8009142:	460b      	mov	r3, r1
 8009144:	4313      	orrs	r3, r2
 8009146:	d00a      	beq.n	800915e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009148:	4b6b      	ldr	r3, [pc, #428]	; (80092f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800914a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800914c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8009150:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009154:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009158:	4a67      	ldr	r2, [pc, #412]	; (80092f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800915a:	430b      	orrs	r3, r1
 800915c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800915e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009166:	2100      	movs	r1, #0
 8009168:	62b9      	str	r1, [r7, #40]	; 0x28
 800916a:	f003 0301 	and.w	r3, r3, #1
 800916e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009170:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8009174:	460b      	mov	r3, r1
 8009176:	4313      	orrs	r3, r2
 8009178:	d011      	beq.n	800919e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800917a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800917e:	3308      	adds	r3, #8
 8009180:	2100      	movs	r1, #0
 8009182:	4618      	mov	r0, r3
 8009184:	f001 fa4a 	bl	800a61c <RCCEx_PLL2_Config>
 8009188:	4603      	mov	r3, r0
 800918a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800918e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009192:	2b00      	cmp	r3, #0
 8009194:	d003      	beq.n	800919e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009196:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800919a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800919e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a6:	2100      	movs	r1, #0
 80091a8:	6239      	str	r1, [r7, #32]
 80091aa:	f003 0302 	and.w	r3, r3, #2
 80091ae:	627b      	str	r3, [r7, #36]	; 0x24
 80091b0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80091b4:	460b      	mov	r3, r1
 80091b6:	4313      	orrs	r3, r2
 80091b8:	d011      	beq.n	80091de <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80091ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091be:	3308      	adds	r3, #8
 80091c0:	2101      	movs	r1, #1
 80091c2:	4618      	mov	r0, r3
 80091c4:	f001 fa2a 	bl	800a61c <RCCEx_PLL2_Config>
 80091c8:	4603      	mov	r3, r0
 80091ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80091ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d003      	beq.n	80091de <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80091da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80091de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e6:	2100      	movs	r1, #0
 80091e8:	61b9      	str	r1, [r7, #24]
 80091ea:	f003 0304 	and.w	r3, r3, #4
 80091ee:	61fb      	str	r3, [r7, #28]
 80091f0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80091f4:	460b      	mov	r3, r1
 80091f6:	4313      	orrs	r3, r2
 80091f8:	d011      	beq.n	800921e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80091fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091fe:	3308      	adds	r3, #8
 8009200:	2102      	movs	r1, #2
 8009202:	4618      	mov	r0, r3
 8009204:	f001 fa0a 	bl	800a61c <RCCEx_PLL2_Config>
 8009208:	4603      	mov	r3, r0
 800920a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800920e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009212:	2b00      	cmp	r3, #0
 8009214:	d003      	beq.n	800921e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009216:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800921a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800921e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009226:	2100      	movs	r1, #0
 8009228:	6139      	str	r1, [r7, #16]
 800922a:	f003 0308 	and.w	r3, r3, #8
 800922e:	617b      	str	r3, [r7, #20]
 8009230:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009234:	460b      	mov	r3, r1
 8009236:	4313      	orrs	r3, r2
 8009238:	d011      	beq.n	800925e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800923a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800923e:	3328      	adds	r3, #40	; 0x28
 8009240:	2100      	movs	r1, #0
 8009242:	4618      	mov	r0, r3
 8009244:	f001 fa9c 	bl	800a780 <RCCEx_PLL3_Config>
 8009248:	4603      	mov	r3, r0
 800924a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800924e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009252:	2b00      	cmp	r3, #0
 8009254:	d003      	beq.n	800925e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009256:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800925a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800925e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009266:	2100      	movs	r1, #0
 8009268:	60b9      	str	r1, [r7, #8]
 800926a:	f003 0310 	and.w	r3, r3, #16
 800926e:	60fb      	str	r3, [r7, #12]
 8009270:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009274:	460b      	mov	r3, r1
 8009276:	4313      	orrs	r3, r2
 8009278:	d011      	beq.n	800929e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800927a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800927e:	3328      	adds	r3, #40	; 0x28
 8009280:	2101      	movs	r1, #1
 8009282:	4618      	mov	r0, r3
 8009284:	f001 fa7c 	bl	800a780 <RCCEx_PLL3_Config>
 8009288:	4603      	mov	r3, r0
 800928a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800928e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009292:	2b00      	cmp	r3, #0
 8009294:	d003      	beq.n	800929e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009296:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800929a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800929e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a6:	2100      	movs	r1, #0
 80092a8:	6039      	str	r1, [r7, #0]
 80092aa:	f003 0320 	and.w	r3, r3, #32
 80092ae:	607b      	str	r3, [r7, #4]
 80092b0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80092b4:	460b      	mov	r3, r1
 80092b6:	4313      	orrs	r3, r2
 80092b8:	d011      	beq.n	80092de <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80092ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092be:	3328      	adds	r3, #40	; 0x28
 80092c0:	2102      	movs	r1, #2
 80092c2:	4618      	mov	r0, r3
 80092c4:	f001 fa5c 	bl	800a780 <RCCEx_PLL3_Config>
 80092c8:	4603      	mov	r3, r0
 80092ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80092ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d003      	beq.n	80092de <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80092da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80092de:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d101      	bne.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80092e6:	2300      	movs	r3, #0
 80092e8:	e000      	b.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80092ea:	2301      	movs	r3, #1
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80092f2:	46bd      	mov	sp, r7
 80092f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80092f8:	58024400 	.word	0x58024400

080092fc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b090      	sub	sp, #64	; 0x40
 8009300:	af00      	add	r7, sp, #0
 8009302:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009306:	e9d7 2300 	ldrd	r2, r3, [r7]
 800930a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800930e:	430b      	orrs	r3, r1
 8009310:	f040 8094 	bne.w	800943c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009314:	4b9e      	ldr	r3, [pc, #632]	; (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009318:	f003 0307 	and.w	r3, r3, #7
 800931c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800931e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009320:	2b04      	cmp	r3, #4
 8009322:	f200 8087 	bhi.w	8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009326:	a201      	add	r2, pc, #4	; (adr r2, 800932c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800932c:	08009341 	.word	0x08009341
 8009330:	08009369 	.word	0x08009369
 8009334:	08009391 	.word	0x08009391
 8009338:	0800942d 	.word	0x0800942d
 800933c:	080093b9 	.word	0x080093b9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009340:	4b93      	ldr	r3, [pc, #588]	; (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009348:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800934c:	d108      	bne.n	8009360 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800934e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009352:	4618      	mov	r0, r3
 8009354:	f001 f810 	bl	800a378 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800935a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800935c:	f000 bd45 	b.w	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009360:	2300      	movs	r3, #0
 8009362:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009364:	f000 bd41 	b.w	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009368:	4b89      	ldr	r3, [pc, #548]	; (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009370:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009374:	d108      	bne.n	8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009376:	f107 0318 	add.w	r3, r7, #24
 800937a:	4618      	mov	r0, r3
 800937c:	f000 fd54 	bl	8009e28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009380:	69bb      	ldr	r3, [r7, #24]
 8009382:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009384:	f000 bd31 	b.w	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009388:	2300      	movs	r3, #0
 800938a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800938c:	f000 bd2d 	b.w	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009390:	4b7f      	ldr	r3, [pc, #508]	; (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009398:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800939c:	d108      	bne.n	80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800939e:	f107 030c 	add.w	r3, r7, #12
 80093a2:	4618      	mov	r0, r3
 80093a4:	f000 fe94 	bl	800a0d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093ac:	f000 bd1d 	b.w	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80093b0:	2300      	movs	r3, #0
 80093b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093b4:	f000 bd19 	b.w	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80093b8:	4b75      	ldr	r3, [pc, #468]	; (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80093ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80093c0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80093c2:	4b73      	ldr	r3, [pc, #460]	; (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f003 0304 	and.w	r3, r3, #4
 80093ca:	2b04      	cmp	r3, #4
 80093cc:	d10c      	bne.n	80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80093ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d109      	bne.n	80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80093d4:	4b6e      	ldr	r3, [pc, #440]	; (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	08db      	lsrs	r3, r3, #3
 80093da:	f003 0303 	and.w	r3, r3, #3
 80093de:	4a6d      	ldr	r2, [pc, #436]	; (8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80093e0:	fa22 f303 	lsr.w	r3, r2, r3
 80093e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093e6:	e01f      	b.n	8009428 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80093e8:	4b69      	ldr	r3, [pc, #420]	; (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093f4:	d106      	bne.n	8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80093f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093fc:	d102      	bne.n	8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80093fe:	4b66      	ldr	r3, [pc, #408]	; (8009598 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009400:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009402:	e011      	b.n	8009428 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009404:	4b62      	ldr	r3, [pc, #392]	; (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800940c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009410:	d106      	bne.n	8009420 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8009412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009414:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009418:	d102      	bne.n	8009420 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800941a:	4b60      	ldr	r3, [pc, #384]	; (800959c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800941c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800941e:	e003      	b.n	8009428 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009420:	2300      	movs	r3, #0
 8009422:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009424:	f000 bce1 	b.w	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009428:	f000 bcdf 	b.w	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800942c:	4b5c      	ldr	r3, [pc, #368]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800942e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009430:	f000 bcdb 	b.w	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009434:	2300      	movs	r3, #0
 8009436:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009438:	f000 bcd7 	b.w	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800943c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009440:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8009444:	430b      	orrs	r3, r1
 8009446:	f040 80ad 	bne.w	80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800944a:	4b51      	ldr	r3, [pc, #324]	; (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800944c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800944e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8009452:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009456:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800945a:	d056      	beq.n	800950a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800945c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800945e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009462:	f200 8090 	bhi.w	8009586 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009468:	2bc0      	cmp	r3, #192	; 0xc0
 800946a:	f000 8088 	beq.w	800957e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800946e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009470:	2bc0      	cmp	r3, #192	; 0xc0
 8009472:	f200 8088 	bhi.w	8009586 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009478:	2b80      	cmp	r3, #128	; 0x80
 800947a:	d032      	beq.n	80094e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800947c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800947e:	2b80      	cmp	r3, #128	; 0x80
 8009480:	f200 8081 	bhi.w	8009586 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009486:	2b00      	cmp	r3, #0
 8009488:	d003      	beq.n	8009492 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800948a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800948c:	2b40      	cmp	r3, #64	; 0x40
 800948e:	d014      	beq.n	80094ba <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8009490:	e079      	b.n	8009586 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009492:	4b3f      	ldr	r3, [pc, #252]	; (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800949a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800949e:	d108      	bne.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80094a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80094a4:	4618      	mov	r0, r3
 80094a6:	f000 ff67 	bl	800a378 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80094aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094ae:	f000 bc9c 	b.w	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094b2:	2300      	movs	r3, #0
 80094b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094b6:	f000 bc98 	b.w	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80094ba:	4b35      	ldr	r3, [pc, #212]	; (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80094c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80094c6:	d108      	bne.n	80094da <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094c8:	f107 0318 	add.w	r3, r7, #24
 80094cc:	4618      	mov	r0, r3
 80094ce:	f000 fcab 	bl	8009e28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80094d2:	69bb      	ldr	r3, [r7, #24]
 80094d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094d6:	f000 bc88 	b.w	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094da:	2300      	movs	r3, #0
 80094dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094de:	f000 bc84 	b.w	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80094e2:	4b2b      	ldr	r3, [pc, #172]	; (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80094ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094ee:	d108      	bne.n	8009502 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094f0:	f107 030c 	add.w	r3, r7, #12
 80094f4:	4618      	mov	r0, r3
 80094f6:	f000 fdeb 	bl	800a0d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094fe:	f000 bc74 	b.w	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009502:	2300      	movs	r3, #0
 8009504:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009506:	f000 bc70 	b.w	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800950a:	4b21      	ldr	r3, [pc, #132]	; (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800950c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800950e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009512:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009514:	4b1e      	ldr	r3, [pc, #120]	; (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f003 0304 	and.w	r3, r3, #4
 800951c:	2b04      	cmp	r3, #4
 800951e:	d10c      	bne.n	800953a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8009520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009522:	2b00      	cmp	r3, #0
 8009524:	d109      	bne.n	800953a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009526:	4b1a      	ldr	r3, [pc, #104]	; (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	08db      	lsrs	r3, r3, #3
 800952c:	f003 0303 	and.w	r3, r3, #3
 8009530:	4a18      	ldr	r2, [pc, #96]	; (8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009532:	fa22 f303 	lsr.w	r3, r2, r3
 8009536:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009538:	e01f      	b.n	800957a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800953a:	4b15      	ldr	r3, [pc, #84]	; (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009542:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009546:	d106      	bne.n	8009556 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8009548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800954a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800954e:	d102      	bne.n	8009556 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009550:	4b11      	ldr	r3, [pc, #68]	; (8009598 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009552:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009554:	e011      	b.n	800957a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009556:	4b0e      	ldr	r3, [pc, #56]	; (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800955e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009562:	d106      	bne.n	8009572 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8009564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009566:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800956a:	d102      	bne.n	8009572 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800956c:	4b0b      	ldr	r3, [pc, #44]	; (800959c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800956e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009570:	e003      	b.n	800957a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009572:	2300      	movs	r3, #0
 8009574:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009576:	f000 bc38 	b.w	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800957a:	f000 bc36 	b.w	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800957e:	4b08      	ldr	r3, [pc, #32]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009580:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009582:	f000 bc32 	b.w	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009586:	2300      	movs	r3, #0
 8009588:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800958a:	f000 bc2e 	b.w	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800958e:	bf00      	nop
 8009590:	58024400 	.word	0x58024400
 8009594:	03d09000 	.word	0x03d09000
 8009598:	003d0900 	.word	0x003d0900
 800959c:	007a1200 	.word	0x007a1200
 80095a0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80095a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095a8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80095ac:	430b      	orrs	r3, r1
 80095ae:	f040 809c 	bne.w	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80095b2:	4b9e      	ldr	r3, [pc, #632]	; (800982c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80095b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095b6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80095ba:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80095bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80095c2:	d054      	beq.n	800966e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80095c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80095ca:	f200 808b 	bhi.w	80096e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80095ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80095d4:	f000 8083 	beq.w	80096de <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80095d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095da:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80095de:	f200 8081 	bhi.w	80096e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80095e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80095e8:	d02f      	beq.n	800964a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80095ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80095f0:	d878      	bhi.n	80096e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80095f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d004      	beq.n	8009602 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80095f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80095fe:	d012      	beq.n	8009626 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8009600:	e070      	b.n	80096e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009602:	4b8a      	ldr	r3, [pc, #552]	; (800982c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800960a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800960e:	d107      	bne.n	8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009610:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009614:	4618      	mov	r0, r3
 8009616:	f000 feaf 	bl	800a378 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800961a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800961c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800961e:	e3e4      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009620:	2300      	movs	r3, #0
 8009622:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009624:	e3e1      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009626:	4b81      	ldr	r3, [pc, #516]	; (800982c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800962e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009632:	d107      	bne.n	8009644 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009634:	f107 0318 	add.w	r3, r7, #24
 8009638:	4618      	mov	r0, r3
 800963a:	f000 fbf5 	bl	8009e28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800963e:	69bb      	ldr	r3, [r7, #24]
 8009640:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009642:	e3d2      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009644:	2300      	movs	r3, #0
 8009646:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009648:	e3cf      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800964a:	4b78      	ldr	r3, [pc, #480]	; (800982c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009652:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009656:	d107      	bne.n	8009668 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009658:	f107 030c 	add.w	r3, r7, #12
 800965c:	4618      	mov	r0, r3
 800965e:	f000 fd37 	bl	800a0d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009666:	e3c0      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009668:	2300      	movs	r3, #0
 800966a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800966c:	e3bd      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800966e:	4b6f      	ldr	r3, [pc, #444]	; (800982c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009672:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009676:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009678:	4b6c      	ldr	r3, [pc, #432]	; (800982c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f003 0304 	and.w	r3, r3, #4
 8009680:	2b04      	cmp	r3, #4
 8009682:	d10c      	bne.n	800969e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009686:	2b00      	cmp	r3, #0
 8009688:	d109      	bne.n	800969e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800968a:	4b68      	ldr	r3, [pc, #416]	; (800982c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	08db      	lsrs	r3, r3, #3
 8009690:	f003 0303 	and.w	r3, r3, #3
 8009694:	4a66      	ldr	r2, [pc, #408]	; (8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009696:	fa22 f303 	lsr.w	r3, r2, r3
 800969a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800969c:	e01e      	b.n	80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800969e:	4b63      	ldr	r3, [pc, #396]	; (800982c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096aa:	d106      	bne.n	80096ba <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80096ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80096b2:	d102      	bne.n	80096ba <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80096b4:	4b5f      	ldr	r3, [pc, #380]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80096b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096b8:	e010      	b.n	80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80096ba:	4b5c      	ldr	r3, [pc, #368]	; (800982c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096c6:	d106      	bne.n	80096d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80096c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096ce:	d102      	bne.n	80096d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80096d0:	4b59      	ldr	r3, [pc, #356]	; (8009838 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80096d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096d4:	e002      	b.n	80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80096d6:	2300      	movs	r3, #0
 80096d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80096da:	e386      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80096dc:	e385      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80096de:	4b57      	ldr	r3, [pc, #348]	; (800983c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80096e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80096e2:	e382      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80096e4:	2300      	movs	r3, #0
 80096e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80096e8:	e37f      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80096ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096ee:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80096f2:	430b      	orrs	r3, r1
 80096f4:	f040 80a7 	bne.w	8009846 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80096f8:	4b4c      	ldr	r3, [pc, #304]	; (800982c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80096fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096fc:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009700:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009704:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009708:	d055      	beq.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800970a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800970c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009710:	f200 8096 	bhi.w	8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009716:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800971a:	f000 8084 	beq.w	8009826 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800971e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009720:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009724:	f200 808c 	bhi.w	8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800972a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800972e:	d030      	beq.n	8009792 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8009730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009732:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009736:	f200 8083 	bhi.w	8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800973a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800973c:	2b00      	cmp	r3, #0
 800973e:	d004      	beq.n	800974a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8009740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009742:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009746:	d012      	beq.n	800976e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8009748:	e07a      	b.n	8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800974a:	4b38      	ldr	r3, [pc, #224]	; (800982c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009752:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009756:	d107      	bne.n	8009768 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009758:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800975c:	4618      	mov	r0, r3
 800975e:	f000 fe0b 	bl	800a378 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009764:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009766:	e340      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009768:	2300      	movs	r3, #0
 800976a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800976c:	e33d      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800976e:	4b2f      	ldr	r3, [pc, #188]	; (800982c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009776:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800977a:	d107      	bne.n	800978c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800977c:	f107 0318 	add.w	r3, r7, #24
 8009780:	4618      	mov	r0, r3
 8009782:	f000 fb51 	bl	8009e28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009786:	69bb      	ldr	r3, [r7, #24]
 8009788:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800978a:	e32e      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800978c:	2300      	movs	r3, #0
 800978e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009790:	e32b      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009792:	4b26      	ldr	r3, [pc, #152]	; (800982c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800979a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800979e:	d107      	bne.n	80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80097a0:	f107 030c 	add.w	r3, r7, #12
 80097a4:	4618      	mov	r0, r3
 80097a6:	f000 fc93 	bl	800a0d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097ae:	e31c      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80097b0:	2300      	movs	r3, #0
 80097b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097b4:	e319      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80097b6:	4b1d      	ldr	r3, [pc, #116]	; (800982c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80097b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80097be:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80097c0:	4b1a      	ldr	r3, [pc, #104]	; (800982c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f003 0304 	and.w	r3, r3, #4
 80097c8:	2b04      	cmp	r3, #4
 80097ca:	d10c      	bne.n	80097e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80097cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d109      	bne.n	80097e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80097d2:	4b16      	ldr	r3, [pc, #88]	; (800982c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	08db      	lsrs	r3, r3, #3
 80097d8:	f003 0303 	and.w	r3, r3, #3
 80097dc:	4a14      	ldr	r2, [pc, #80]	; (8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80097de:	fa22 f303 	lsr.w	r3, r2, r3
 80097e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097e4:	e01e      	b.n	8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80097e6:	4b11      	ldr	r3, [pc, #68]	; (800982c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097f2:	d106      	bne.n	8009802 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80097f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80097fa:	d102      	bne.n	8009802 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80097fc:	4b0d      	ldr	r3, [pc, #52]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80097fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009800:	e010      	b.n	8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009802:	4b0a      	ldr	r3, [pc, #40]	; (800982c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800980a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800980e:	d106      	bne.n	800981e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8009810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009812:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009816:	d102      	bne.n	800981e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009818:	4b07      	ldr	r3, [pc, #28]	; (8009838 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800981a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800981c:	e002      	b.n	8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800981e:	2300      	movs	r3, #0
 8009820:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009822:	e2e2      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009824:	e2e1      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009826:	4b05      	ldr	r3, [pc, #20]	; (800983c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009828:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800982a:	e2de      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800982c:	58024400 	.word	0x58024400
 8009830:	03d09000 	.word	0x03d09000
 8009834:	003d0900 	.word	0x003d0900
 8009838:	007a1200 	.word	0x007a1200
 800983c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8009840:	2300      	movs	r3, #0
 8009842:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009844:	e2d1      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009846:	e9d7 2300 	ldrd	r2, r3, [r7]
 800984a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800984e:	430b      	orrs	r3, r1
 8009850:	f040 809c 	bne.w	800998c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009854:	4b93      	ldr	r3, [pc, #588]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009858:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800985c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800985e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009860:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009864:	d054      	beq.n	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8009866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009868:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800986c:	f200 808b 	bhi.w	8009986 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009872:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009876:	f000 8083 	beq.w	8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800987a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800987c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009880:	f200 8081 	bhi.w	8009986 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009886:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800988a:	d02f      	beq.n	80098ec <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800988c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800988e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009892:	d878      	bhi.n	8009986 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009896:	2b00      	cmp	r3, #0
 8009898:	d004      	beq.n	80098a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800989a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800989c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098a0:	d012      	beq.n	80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80098a2:	e070      	b.n	8009986 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80098a4:	4b7f      	ldr	r3, [pc, #508]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80098b0:	d107      	bne.n	80098c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80098b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80098b6:	4618      	mov	r0, r3
 80098b8:	f000 fd5e 	bl	800a378 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80098bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098c0:	e293      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80098c2:	2300      	movs	r3, #0
 80098c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80098c6:	e290      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80098c8:	4b76      	ldr	r3, [pc, #472]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80098d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80098d4:	d107      	bne.n	80098e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098d6:	f107 0318 	add.w	r3, r7, #24
 80098da:	4618      	mov	r0, r3
 80098dc:	f000 faa4 	bl	8009e28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80098e0:	69bb      	ldr	r3, [r7, #24]
 80098e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098e4:	e281      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80098e6:	2300      	movs	r3, #0
 80098e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80098ea:	e27e      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80098ec:	4b6d      	ldr	r3, [pc, #436]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80098f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098f8:	d107      	bne.n	800990a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098fa:	f107 030c 	add.w	r3, r7, #12
 80098fe:	4618      	mov	r0, r3
 8009900:	f000 fbe6 	bl	800a0d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009908:	e26f      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800990a:	2300      	movs	r3, #0
 800990c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800990e:	e26c      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009910:	4b64      	ldr	r3, [pc, #400]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009914:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009918:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800991a:	4b62      	ldr	r3, [pc, #392]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f003 0304 	and.w	r3, r3, #4
 8009922:	2b04      	cmp	r3, #4
 8009924:	d10c      	bne.n	8009940 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8009926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009928:	2b00      	cmp	r3, #0
 800992a:	d109      	bne.n	8009940 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800992c:	4b5d      	ldr	r3, [pc, #372]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	08db      	lsrs	r3, r3, #3
 8009932:	f003 0303 	and.w	r3, r3, #3
 8009936:	4a5c      	ldr	r2, [pc, #368]	; (8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009938:	fa22 f303 	lsr.w	r3, r2, r3
 800993c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800993e:	e01e      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009940:	4b58      	ldr	r3, [pc, #352]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009948:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800994c:	d106      	bne.n	800995c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800994e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009950:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009954:	d102      	bne.n	800995c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009956:	4b55      	ldr	r3, [pc, #340]	; (8009aac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009958:	63fb      	str	r3, [r7, #60]	; 0x3c
 800995a:	e010      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800995c:	4b51      	ldr	r3, [pc, #324]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009964:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009968:	d106      	bne.n	8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800996a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800996c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009970:	d102      	bne.n	8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009972:	4b4f      	ldr	r3, [pc, #316]	; (8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009974:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009976:	e002      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009978:	2300      	movs	r3, #0
 800997a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800997c:	e235      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800997e:	e234      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009980:	4b4c      	ldr	r3, [pc, #304]	; (8009ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8009982:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009984:	e231      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009986:	2300      	movs	r3, #0
 8009988:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800998a:	e22e      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800998c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009990:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8009994:	430b      	orrs	r3, r1
 8009996:	f040 808f 	bne.w	8009ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800999a:	4b42      	ldr	r3, [pc, #264]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800999c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800999e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80099a2:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80099a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80099aa:	d06b      	beq.n	8009a84 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80099ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80099b2:	d874      	bhi.n	8009a9e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80099b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80099ba:	d056      	beq.n	8009a6a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80099bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80099c2:	d86c      	bhi.n	8009a9e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80099c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80099ca:	d03b      	beq.n	8009a44 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80099cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80099d2:	d864      	bhi.n	8009a9e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80099d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80099da:	d021      	beq.n	8009a20 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80099dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80099e2:	d85c      	bhi.n	8009a9e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80099e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d004      	beq.n	80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80099ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099f0:	d004      	beq.n	80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80099f2:	e054      	b.n	8009a9e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80099f4:	f7fe fa0a 	bl	8007e0c <HAL_RCC_GetPCLK1Freq>
 80099f8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80099fa:	e1f6      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80099fc:	4b29      	ldr	r3, [pc, #164]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009a08:	d107      	bne.n	8009a1a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a0a:	f107 0318 	add.w	r3, r7, #24
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f000 fa0a 	bl	8009e28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009a14:	69fb      	ldr	r3, [r7, #28]
 8009a16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a18:	e1e7      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a1e:	e1e4      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009a20:	4b20      	ldr	r3, [pc, #128]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a2c:	d107      	bne.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a2e:	f107 030c 	add.w	r3, r7, #12
 8009a32:	4618      	mov	r0, r3
 8009a34:	f000 fb4c 	bl	800a0d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009a38:	693b      	ldr	r3, [r7, #16]
 8009a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a3c:	e1d5      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a42:	e1d2      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009a44:	4b17      	ldr	r3, [pc, #92]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f003 0304 	and.w	r3, r3, #4
 8009a4c:	2b04      	cmp	r3, #4
 8009a4e:	d109      	bne.n	8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a50:	4b14      	ldr	r3, [pc, #80]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	08db      	lsrs	r3, r3, #3
 8009a56:	f003 0303 	and.w	r3, r3, #3
 8009a5a:	4a13      	ldr	r2, [pc, #76]	; (8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8009a60:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a62:	e1c2      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a64:	2300      	movs	r3, #0
 8009a66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a68:	e1bf      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009a6a:	4b0e      	ldr	r3, [pc, #56]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a76:	d102      	bne.n	8009a7e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8009a78:	4b0c      	ldr	r3, [pc, #48]	; (8009aac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a7c:	e1b5      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a82:	e1b2      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009a84:	4b07      	ldr	r3, [pc, #28]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a90:	d102      	bne.n	8009a98 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8009a92:	4b07      	ldr	r3, [pc, #28]	; (8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009a94:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a96:	e1a8      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a9c:	e1a5      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009aa2:	e1a2      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009aa4:	58024400 	.word	0x58024400
 8009aa8:	03d09000 	.word	0x03d09000
 8009aac:	003d0900 	.word	0x003d0900
 8009ab0:	007a1200 	.word	0x007a1200
 8009ab4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009ab8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009abc:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8009ac0:	430b      	orrs	r3, r1
 8009ac2:	d173      	bne.n	8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009ac4:	4b9c      	ldr	r3, [pc, #624]	; (8009d38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ac8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009acc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ad0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ad4:	d02f      	beq.n	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ad8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009adc:	d863      	bhi.n	8009ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8009ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d004      	beq.n	8009aee <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8009ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009aea:	d012      	beq.n	8009b12 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8009aec:	e05b      	b.n	8009ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009aee:	4b92      	ldr	r3, [pc, #584]	; (8009d38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009af6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009afa:	d107      	bne.n	8009b0c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009afc:	f107 0318 	add.w	r3, r7, #24
 8009b00:	4618      	mov	r0, r3
 8009b02:	f000 f991 	bl	8009e28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009b06:	69bb      	ldr	r3, [r7, #24]
 8009b08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b0a:	e16e      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b10:	e16b      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009b12:	4b89      	ldr	r3, [pc, #548]	; (8009d38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009b1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b1e:	d107      	bne.n	8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b20:	f107 030c 	add.w	r3, r7, #12
 8009b24:	4618      	mov	r0, r3
 8009b26:	f000 fad3 	bl	800a0d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b2e:	e15c      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b30:	2300      	movs	r3, #0
 8009b32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b34:	e159      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009b36:	4b80      	ldr	r3, [pc, #512]	; (8009d38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009b3e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009b40:	4b7d      	ldr	r3, [pc, #500]	; (8009d38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f003 0304 	and.w	r3, r3, #4
 8009b48:	2b04      	cmp	r3, #4
 8009b4a:	d10c      	bne.n	8009b66 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8009b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d109      	bne.n	8009b66 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b52:	4b79      	ldr	r3, [pc, #484]	; (8009d38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	08db      	lsrs	r3, r3, #3
 8009b58:	f003 0303 	and.w	r3, r3, #3
 8009b5c:	4a77      	ldr	r2, [pc, #476]	; (8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8009b62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b64:	e01e      	b.n	8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009b66:	4b74      	ldr	r3, [pc, #464]	; (8009d38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b72:	d106      	bne.n	8009b82 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8009b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b7a:	d102      	bne.n	8009b82 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009b7c:	4b70      	ldr	r3, [pc, #448]	; (8009d40 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b80:	e010      	b.n	8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009b82:	4b6d      	ldr	r3, [pc, #436]	; (8009d38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b8e:	d106      	bne.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8009b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b96:	d102      	bne.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009b98:	4b6a      	ldr	r3, [pc, #424]	; (8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b9c:	e002      	b.n	8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009ba2:	e122      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009ba4:	e121      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009baa:	e11e      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009bac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bb0:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8009bb4:	430b      	orrs	r3, r1
 8009bb6:	d133      	bne.n	8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009bb8:	4b5f      	ldr	r3, [pc, #380]	; (8009d38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009bc0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d004      	beq.n	8009bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8009bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bce:	d012      	beq.n	8009bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8009bd0:	e023      	b.n	8009c1a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009bd2:	4b59      	ldr	r3, [pc, #356]	; (8009d38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009bda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009bde:	d107      	bne.n	8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009be0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009be4:	4618      	mov	r0, r3
 8009be6:	f000 fbc7 	bl	800a378 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009bee:	e0fc      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bf4:	e0f9      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009bf6:	4b50      	ldr	r3, [pc, #320]	; (8009d38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009bfe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009c02:	d107      	bne.n	8009c14 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c04:	f107 0318 	add.w	r3, r7, #24
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f000 f90d 	bl	8009e28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009c0e:	6a3b      	ldr	r3, [r7, #32]
 8009c10:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c12:	e0ea      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c14:	2300      	movs	r3, #0
 8009c16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c18:	e0e7      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c1e:	e0e4      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009c20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c24:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8009c28:	430b      	orrs	r3, r1
 8009c2a:	f040 808d 	bne.w	8009d48 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009c2e:	4b42      	ldr	r3, [pc, #264]	; (8009d38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c32:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009c36:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c3e:	d06b      	beq.n	8009d18 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8009c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c46:	d874      	bhi.n	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c4e:	d056      	beq.n	8009cfe <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8009c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c56:	d86c      	bhi.n	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c5a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009c5e:	d03b      	beq.n	8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8009c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c62:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009c66:	d864      	bhi.n	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c6e:	d021      	beq.n	8009cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8009c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c76:	d85c      	bhi.n	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d004      	beq.n	8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8009c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c84:	d004      	beq.n	8009c90 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8009c86:	e054      	b.n	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009c88:	f000 f8b8 	bl	8009dfc <HAL_RCCEx_GetD3PCLK1Freq>
 8009c8c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009c8e:	e0ac      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009c90:	4b29      	ldr	r3, [pc, #164]	; (8009d38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009c9c:	d107      	bne.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c9e:	f107 0318 	add.w	r3, r7, #24
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f000 f8c0 	bl	8009e28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009ca8:	69fb      	ldr	r3, [r7, #28]
 8009caa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009cac:	e09d      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009cb2:	e09a      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009cb4:	4b20      	ldr	r3, [pc, #128]	; (8009d38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009cbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009cc0:	d107      	bne.n	8009cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009cc2:	f107 030c 	add.w	r3, r7, #12
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f000 fa02 	bl	800a0d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009cd0:	e08b      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009cd6:	e088      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009cd8:	4b17      	ldr	r3, [pc, #92]	; (8009d38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f003 0304 	and.w	r3, r3, #4
 8009ce0:	2b04      	cmp	r3, #4
 8009ce2:	d109      	bne.n	8009cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009ce4:	4b14      	ldr	r3, [pc, #80]	; (8009d38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	08db      	lsrs	r3, r3, #3
 8009cea:	f003 0303 	and.w	r3, r3, #3
 8009cee:	4a13      	ldr	r2, [pc, #76]	; (8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8009cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009cf6:	e078      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009cfc:	e075      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009cfe:	4b0e      	ldr	r3, [pc, #56]	; (8009d38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d0a:	d102      	bne.n	8009d12 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8009d0c:	4b0c      	ldr	r3, [pc, #48]	; (8009d40 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d10:	e06b      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d12:	2300      	movs	r3, #0
 8009d14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d16:	e068      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009d18:	4b07      	ldr	r3, [pc, #28]	; (8009d38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d24:	d102      	bne.n	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8009d26:	4b07      	ldr	r3, [pc, #28]	; (8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009d28:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d2a:	e05e      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d30:	e05b      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009d32:	2300      	movs	r3, #0
 8009d34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d36:	e058      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009d38:	58024400 	.word	0x58024400
 8009d3c:	03d09000 	.word	0x03d09000
 8009d40:	003d0900 	.word	0x003d0900
 8009d44:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009d48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d4c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8009d50:	430b      	orrs	r3, r1
 8009d52:	d148      	bne.n	8009de6 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009d54:	4b27      	ldr	r3, [pc, #156]	; (8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009d5c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d64:	d02a      	beq.n	8009dbc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8009d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d6c:	d838      	bhi.n	8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8009d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d004      	beq.n	8009d7e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8009d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d7a:	d00d      	beq.n	8009d98 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8009d7c:	e030      	b.n	8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009d7e:	4b1d      	ldr	r3, [pc, #116]	; (8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d8a:	d102      	bne.n	8009d92 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8009d8c:	4b1a      	ldr	r3, [pc, #104]	; (8009df8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8009d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d90:	e02b      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d92:	2300      	movs	r3, #0
 8009d94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d96:	e028      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009d98:	4b16      	ldr	r3, [pc, #88]	; (8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009da0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009da4:	d107      	bne.n	8009db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009da6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009daa:	4618      	mov	r0, r3
 8009dac:	f000 fae4 	bl	800a378 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009db4:	e019      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009db6:	2300      	movs	r3, #0
 8009db8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009dba:	e016      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009dbc:	4b0d      	ldr	r3, [pc, #52]	; (8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009dc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009dc8:	d107      	bne.n	8009dda <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009dca:	f107 0318 	add.w	r3, r7, #24
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f000 f82a 	bl	8009e28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009dd4:	69fb      	ldr	r3, [r7, #28]
 8009dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009dd8:	e007      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009dde:	e004      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009de0:	2300      	movs	r3, #0
 8009de2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009de4:	e001      	b.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8009de6:	2300      	movs	r3, #0
 8009de8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8009dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3740      	adds	r7, #64	; 0x40
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}
 8009df4:	58024400 	.word	0x58024400
 8009df8:	007a1200 	.word	0x007a1200

08009dfc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009e00:	f7fd ffd4 	bl	8007dac <HAL_RCC_GetHCLKFreq>
 8009e04:	4602      	mov	r2, r0
 8009e06:	4b06      	ldr	r3, [pc, #24]	; (8009e20 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009e08:	6a1b      	ldr	r3, [r3, #32]
 8009e0a:	091b      	lsrs	r3, r3, #4
 8009e0c:	f003 0307 	and.w	r3, r3, #7
 8009e10:	4904      	ldr	r1, [pc, #16]	; (8009e24 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009e12:	5ccb      	ldrb	r3, [r1, r3]
 8009e14:	f003 031f 	and.w	r3, r3, #31
 8009e18:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	bd80      	pop	{r7, pc}
 8009e20:	58024400 	.word	0x58024400
 8009e24:	0801545c 	.word	0x0801545c

08009e28 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b089      	sub	sp, #36	; 0x24
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009e30:	4ba1      	ldr	r3, [pc, #644]	; (800a0b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e34:	f003 0303 	and.w	r3, r3, #3
 8009e38:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009e3a:	4b9f      	ldr	r3, [pc, #636]	; (800a0b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e3e:	0b1b      	lsrs	r3, r3, #12
 8009e40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e44:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009e46:	4b9c      	ldr	r3, [pc, #624]	; (800a0b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e4a:	091b      	lsrs	r3, r3, #4
 8009e4c:	f003 0301 	and.w	r3, r3, #1
 8009e50:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009e52:	4b99      	ldr	r3, [pc, #612]	; (800a0b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e56:	08db      	lsrs	r3, r3, #3
 8009e58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009e5c:	693a      	ldr	r2, [r7, #16]
 8009e5e:	fb02 f303 	mul.w	r3, r2, r3
 8009e62:	ee07 3a90 	vmov	s15, r3
 8009e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e6a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	f000 8111 	beq.w	800a098 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009e76:	69bb      	ldr	r3, [r7, #24]
 8009e78:	2b02      	cmp	r3, #2
 8009e7a:	f000 8083 	beq.w	8009f84 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009e7e:	69bb      	ldr	r3, [r7, #24]
 8009e80:	2b02      	cmp	r3, #2
 8009e82:	f200 80a1 	bhi.w	8009fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009e86:	69bb      	ldr	r3, [r7, #24]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d003      	beq.n	8009e94 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009e8c:	69bb      	ldr	r3, [r7, #24]
 8009e8e:	2b01      	cmp	r3, #1
 8009e90:	d056      	beq.n	8009f40 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009e92:	e099      	b.n	8009fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e94:	4b88      	ldr	r3, [pc, #544]	; (800a0b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f003 0320 	and.w	r3, r3, #32
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d02d      	beq.n	8009efc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009ea0:	4b85      	ldr	r3, [pc, #532]	; (800a0b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	08db      	lsrs	r3, r3, #3
 8009ea6:	f003 0303 	and.w	r3, r3, #3
 8009eaa:	4a84      	ldr	r2, [pc, #528]	; (800a0bc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009eac:	fa22 f303 	lsr.w	r3, r2, r3
 8009eb0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	ee07 3a90 	vmov	s15, r3
 8009eb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	ee07 3a90 	vmov	s15, r3
 8009ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009eca:	4b7b      	ldr	r3, [pc, #492]	; (800a0b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ed2:	ee07 3a90 	vmov	s15, r3
 8009ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009eda:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ede:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a0c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009eea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ef6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009efa:	e087      	b.n	800a00c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009efc:	697b      	ldr	r3, [r7, #20]
 8009efe:	ee07 3a90 	vmov	s15, r3
 8009f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f06:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a0c4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f0e:	4b6a      	ldr	r3, [pc, #424]	; (800a0b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f16:	ee07 3a90 	vmov	s15, r3
 8009f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f22:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a0c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009f26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f3e:	e065      	b.n	800a00c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009f40:	697b      	ldr	r3, [r7, #20]
 8009f42:	ee07 3a90 	vmov	s15, r3
 8009f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f4a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a0c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009f4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f52:	4b59      	ldr	r3, [pc, #356]	; (800a0b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f5a:	ee07 3a90 	vmov	s15, r3
 8009f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f62:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f66:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a0c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009f6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f82:	e043      	b.n	800a00c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	ee07 3a90 	vmov	s15, r3
 8009f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f8e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a0cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009f92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f96:	4b48      	ldr	r3, [pc, #288]	; (800a0b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f9e:	ee07 3a90 	vmov	s15, r3
 8009fa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fa6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009faa:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a0c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009fae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009fba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009fc6:	e021      	b.n	800a00c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	ee07 3a90 	vmov	s15, r3
 8009fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fd2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a0c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009fd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fda:	4b37      	ldr	r3, [pc, #220]	; (800a0b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fe2:	ee07 3a90 	vmov	s15, r3
 8009fe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fea:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fee:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a0c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009ff2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ff6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ffa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ffe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a002:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a006:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a00a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a00c:	4b2a      	ldr	r3, [pc, #168]	; (800a0b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a00e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a010:	0a5b      	lsrs	r3, r3, #9
 800a012:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a016:	ee07 3a90 	vmov	s15, r3
 800a01a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a01e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a022:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a026:	edd7 6a07 	vldr	s13, [r7, #28]
 800a02a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a02e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a032:	ee17 2a90 	vmov	r2, s15
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a03a:	4b1f      	ldr	r3, [pc, #124]	; (800a0b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a03c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a03e:	0c1b      	lsrs	r3, r3, #16
 800a040:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a044:	ee07 3a90 	vmov	s15, r3
 800a048:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a04c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a050:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a054:	edd7 6a07 	vldr	s13, [r7, #28]
 800a058:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a05c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a060:	ee17 2a90 	vmov	r2, s15
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a068:	4b13      	ldr	r3, [pc, #76]	; (800a0b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a06a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a06c:	0e1b      	lsrs	r3, r3, #24
 800a06e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a072:	ee07 3a90 	vmov	s15, r3
 800a076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a07a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a07e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a082:	edd7 6a07 	vldr	s13, [r7, #28]
 800a086:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a08a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a08e:	ee17 2a90 	vmov	r2, s15
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a096:	e008      	b.n	800a0aa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2200      	movs	r2, #0
 800a09c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	609a      	str	r2, [r3, #8]
}
 800a0aa:	bf00      	nop
 800a0ac:	3724      	adds	r7, #36	; 0x24
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b4:	4770      	bx	lr
 800a0b6:	bf00      	nop
 800a0b8:	58024400 	.word	0x58024400
 800a0bc:	03d09000 	.word	0x03d09000
 800a0c0:	46000000 	.word	0x46000000
 800a0c4:	4c742400 	.word	0x4c742400
 800a0c8:	4a742400 	.word	0x4a742400
 800a0cc:	4af42400 	.word	0x4af42400

0800a0d0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b089      	sub	sp, #36	; 0x24
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a0d8:	4ba1      	ldr	r3, [pc, #644]	; (800a360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0dc:	f003 0303 	and.w	r3, r3, #3
 800a0e0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a0e2:	4b9f      	ldr	r3, [pc, #636]	; (800a360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0e6:	0d1b      	lsrs	r3, r3, #20
 800a0e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a0ec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a0ee:	4b9c      	ldr	r3, [pc, #624]	; (800a360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0f2:	0a1b      	lsrs	r3, r3, #8
 800a0f4:	f003 0301 	and.w	r3, r3, #1
 800a0f8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a0fa:	4b99      	ldr	r3, [pc, #612]	; (800a360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0fe:	08db      	lsrs	r3, r3, #3
 800a100:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a104:	693a      	ldr	r2, [r7, #16]
 800a106:	fb02 f303 	mul.w	r3, r2, r3
 800a10a:	ee07 3a90 	vmov	s15, r3
 800a10e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a112:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	f000 8111 	beq.w	800a340 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a11e:	69bb      	ldr	r3, [r7, #24]
 800a120:	2b02      	cmp	r3, #2
 800a122:	f000 8083 	beq.w	800a22c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a126:	69bb      	ldr	r3, [r7, #24]
 800a128:	2b02      	cmp	r3, #2
 800a12a:	f200 80a1 	bhi.w	800a270 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a12e:	69bb      	ldr	r3, [r7, #24]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d003      	beq.n	800a13c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a134:	69bb      	ldr	r3, [r7, #24]
 800a136:	2b01      	cmp	r3, #1
 800a138:	d056      	beq.n	800a1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a13a:	e099      	b.n	800a270 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a13c:	4b88      	ldr	r3, [pc, #544]	; (800a360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f003 0320 	and.w	r3, r3, #32
 800a144:	2b00      	cmp	r3, #0
 800a146:	d02d      	beq.n	800a1a4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a148:	4b85      	ldr	r3, [pc, #532]	; (800a360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	08db      	lsrs	r3, r3, #3
 800a14e:	f003 0303 	and.w	r3, r3, #3
 800a152:	4a84      	ldr	r2, [pc, #528]	; (800a364 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a154:	fa22 f303 	lsr.w	r3, r2, r3
 800a158:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	ee07 3a90 	vmov	s15, r3
 800a160:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	ee07 3a90 	vmov	s15, r3
 800a16a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a16e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a172:	4b7b      	ldr	r3, [pc, #492]	; (800a360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a17a:	ee07 3a90 	vmov	s15, r3
 800a17e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a182:	ed97 6a03 	vldr	s12, [r7, #12]
 800a186:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a368 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a18a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a18e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a192:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a19a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a19e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a1a2:	e087      	b.n	800a2b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	ee07 3a90 	vmov	s15, r3
 800a1aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1ae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a36c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a1b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1b6:	4b6a      	ldr	r3, [pc, #424]	; (800a360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1be:	ee07 3a90 	vmov	s15, r3
 800a1c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1ca:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a368 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a1ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a1e6:	e065      	b.n	800a2b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	ee07 3a90 	vmov	s15, r3
 800a1ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1f2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a370 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a1f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1fa:	4b59      	ldr	r3, [pc, #356]	; (800a360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a202:	ee07 3a90 	vmov	s15, r3
 800a206:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a20a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a20e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a368 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a212:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a216:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a21a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a21e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a222:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a226:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a22a:	e043      	b.n	800a2b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	ee07 3a90 	vmov	s15, r3
 800a232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a236:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a374 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a23a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a23e:	4b48      	ldr	r3, [pc, #288]	; (800a360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a246:	ee07 3a90 	vmov	s15, r3
 800a24a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a24e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a252:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a368 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a256:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a25a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a25e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a262:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a26a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a26e:	e021      	b.n	800a2b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	ee07 3a90 	vmov	s15, r3
 800a276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a27a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a370 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a27e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a282:	4b37      	ldr	r3, [pc, #220]	; (800a360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a28a:	ee07 3a90 	vmov	s15, r3
 800a28e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a292:	ed97 6a03 	vldr	s12, [r7, #12]
 800a296:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a368 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a29a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a29e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a2b2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a2b4:	4b2a      	ldr	r3, [pc, #168]	; (800a360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2b8:	0a5b      	lsrs	r3, r3, #9
 800a2ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2be:	ee07 3a90 	vmov	s15, r3
 800a2c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a2ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a2ce:	edd7 6a07 	vldr	s13, [r7, #28]
 800a2d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2da:	ee17 2a90 	vmov	r2, s15
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a2e2:	4b1f      	ldr	r3, [pc, #124]	; (800a360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2e6:	0c1b      	lsrs	r3, r3, #16
 800a2e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2ec:	ee07 3a90 	vmov	s15, r3
 800a2f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a2f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a2fc:	edd7 6a07 	vldr	s13, [r7, #28]
 800a300:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a304:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a308:	ee17 2a90 	vmov	r2, s15
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a310:	4b13      	ldr	r3, [pc, #76]	; (800a360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a314:	0e1b      	lsrs	r3, r3, #24
 800a316:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a31a:	ee07 3a90 	vmov	s15, r3
 800a31e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a322:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a326:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a32a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a32e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a332:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a336:	ee17 2a90 	vmov	r2, s15
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a33e:	e008      	b.n	800a352 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2200      	movs	r2, #0
 800a344:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2200      	movs	r2, #0
 800a34a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2200      	movs	r2, #0
 800a350:	609a      	str	r2, [r3, #8]
}
 800a352:	bf00      	nop
 800a354:	3724      	adds	r7, #36	; 0x24
 800a356:	46bd      	mov	sp, r7
 800a358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35c:	4770      	bx	lr
 800a35e:	bf00      	nop
 800a360:	58024400 	.word	0x58024400
 800a364:	03d09000 	.word	0x03d09000
 800a368:	46000000 	.word	0x46000000
 800a36c:	4c742400 	.word	0x4c742400
 800a370:	4a742400 	.word	0x4a742400
 800a374:	4af42400 	.word	0x4af42400

0800a378 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a378:	b480      	push	{r7}
 800a37a:	b089      	sub	sp, #36	; 0x24
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a380:	4ba0      	ldr	r3, [pc, #640]	; (800a604 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a384:	f003 0303 	and.w	r3, r3, #3
 800a388:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800a38a:	4b9e      	ldr	r3, [pc, #632]	; (800a604 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a38c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a38e:	091b      	lsrs	r3, r3, #4
 800a390:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a394:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a396:	4b9b      	ldr	r3, [pc, #620]	; (800a604 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a39a:	f003 0301 	and.w	r3, r3, #1
 800a39e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a3a0:	4b98      	ldr	r3, [pc, #608]	; (800a604 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a3a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3a4:	08db      	lsrs	r3, r3, #3
 800a3a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a3aa:	693a      	ldr	r2, [r7, #16]
 800a3ac:	fb02 f303 	mul.w	r3, r2, r3
 800a3b0:	ee07 3a90 	vmov	s15, r3
 800a3b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3b8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	f000 8111 	beq.w	800a5e6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a3c4:	69bb      	ldr	r3, [r7, #24]
 800a3c6:	2b02      	cmp	r3, #2
 800a3c8:	f000 8083 	beq.w	800a4d2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a3cc:	69bb      	ldr	r3, [r7, #24]
 800a3ce:	2b02      	cmp	r3, #2
 800a3d0:	f200 80a1 	bhi.w	800a516 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a3d4:	69bb      	ldr	r3, [r7, #24]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d003      	beq.n	800a3e2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a3da:	69bb      	ldr	r3, [r7, #24]
 800a3dc:	2b01      	cmp	r3, #1
 800a3de:	d056      	beq.n	800a48e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a3e0:	e099      	b.n	800a516 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a3e2:	4b88      	ldr	r3, [pc, #544]	; (800a604 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f003 0320 	and.w	r3, r3, #32
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d02d      	beq.n	800a44a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a3ee:	4b85      	ldr	r3, [pc, #532]	; (800a604 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	08db      	lsrs	r3, r3, #3
 800a3f4:	f003 0303 	and.w	r3, r3, #3
 800a3f8:	4a83      	ldr	r2, [pc, #524]	; (800a608 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a3fa:	fa22 f303 	lsr.w	r3, r2, r3
 800a3fe:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	ee07 3a90 	vmov	s15, r3
 800a406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	ee07 3a90 	vmov	s15, r3
 800a410:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a414:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a418:	4b7a      	ldr	r3, [pc, #488]	; (800a604 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a41a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a41c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a420:	ee07 3a90 	vmov	s15, r3
 800a424:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a428:	ed97 6a03 	vldr	s12, [r7, #12]
 800a42c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a60c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a430:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a434:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a438:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a43c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a440:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a444:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a448:	e087      	b.n	800a55a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a44a:	697b      	ldr	r3, [r7, #20]
 800a44c:	ee07 3a90 	vmov	s15, r3
 800a450:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a454:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a610 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a458:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a45c:	4b69      	ldr	r3, [pc, #420]	; (800a604 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a45e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a460:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a464:	ee07 3a90 	vmov	s15, r3
 800a468:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a46c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a470:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a60c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a474:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a478:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a47c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a480:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a484:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a488:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a48c:	e065      	b.n	800a55a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	ee07 3a90 	vmov	s15, r3
 800a494:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a498:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a614 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a49c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4a0:	4b58      	ldr	r3, [pc, #352]	; (800a604 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a4a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4a8:	ee07 3a90 	vmov	s15, r3
 800a4ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4b0:	ed97 6a03 	vldr	s12, [r7, #12]
 800a4b4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a60c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a4b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a4d0:	e043      	b.n	800a55a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	ee07 3a90 	vmov	s15, r3
 800a4d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4dc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a618 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a4e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4e4:	4b47      	ldr	r3, [pc, #284]	; (800a604 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a4e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4ec:	ee07 3a90 	vmov	s15, r3
 800a4f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4f4:	ed97 6a03 	vldr	s12, [r7, #12]
 800a4f8:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a60c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a4fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a500:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a504:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a508:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a50c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a510:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a514:	e021      	b.n	800a55a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	ee07 3a90 	vmov	s15, r3
 800a51c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a520:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a610 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a524:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a528:	4b36      	ldr	r3, [pc, #216]	; (800a604 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a52a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a52c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a530:	ee07 3a90 	vmov	s15, r3
 800a534:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a538:	ed97 6a03 	vldr	s12, [r7, #12]
 800a53c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a60c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a540:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a544:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a548:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a54c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a550:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a554:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a558:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a55a:	4b2a      	ldr	r3, [pc, #168]	; (800a604 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a55c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a55e:	0a5b      	lsrs	r3, r3, #9
 800a560:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a564:	ee07 3a90 	vmov	s15, r3
 800a568:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a56c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a570:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a574:	edd7 6a07 	vldr	s13, [r7, #28]
 800a578:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a57c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a580:	ee17 2a90 	vmov	r2, s15
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a588:	4b1e      	ldr	r3, [pc, #120]	; (800a604 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a58a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a58c:	0c1b      	lsrs	r3, r3, #16
 800a58e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a592:	ee07 3a90 	vmov	s15, r3
 800a596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a59a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a59e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a5a2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a5a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5ae:	ee17 2a90 	vmov	r2, s15
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a5b6:	4b13      	ldr	r3, [pc, #76]	; (800a604 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a5b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5ba:	0e1b      	lsrs	r3, r3, #24
 800a5bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5c0:	ee07 3a90 	vmov	s15, r3
 800a5c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a5cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a5d0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a5d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5dc:	ee17 2a90 	vmov	r2, s15
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a5e4:	e008      	b.n	800a5f8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	609a      	str	r2, [r3, #8]
}
 800a5f8:	bf00      	nop
 800a5fa:	3724      	adds	r7, #36	; 0x24
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a602:	4770      	bx	lr
 800a604:	58024400 	.word	0x58024400
 800a608:	03d09000 	.word	0x03d09000
 800a60c:	46000000 	.word	0x46000000
 800a610:	4c742400 	.word	0x4c742400
 800a614:	4a742400 	.word	0x4a742400
 800a618:	4af42400 	.word	0x4af42400

0800a61c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b084      	sub	sp, #16
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a626:	2300      	movs	r3, #0
 800a628:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a62a:	4b53      	ldr	r3, [pc, #332]	; (800a778 <RCCEx_PLL2_Config+0x15c>)
 800a62c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a62e:	f003 0303 	and.w	r3, r3, #3
 800a632:	2b03      	cmp	r3, #3
 800a634:	d101      	bne.n	800a63a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a636:	2301      	movs	r3, #1
 800a638:	e099      	b.n	800a76e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a63a:	4b4f      	ldr	r3, [pc, #316]	; (800a778 <RCCEx_PLL2_Config+0x15c>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	4a4e      	ldr	r2, [pc, #312]	; (800a778 <RCCEx_PLL2_Config+0x15c>)
 800a640:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a644:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a646:	f7f8 fa01 	bl	8002a4c <HAL_GetTick>
 800a64a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a64c:	e008      	b.n	800a660 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a64e:	f7f8 f9fd 	bl	8002a4c <HAL_GetTick>
 800a652:	4602      	mov	r2, r0
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	1ad3      	subs	r3, r2, r3
 800a658:	2b02      	cmp	r3, #2
 800a65a:	d901      	bls.n	800a660 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a65c:	2303      	movs	r3, #3
 800a65e:	e086      	b.n	800a76e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a660:	4b45      	ldr	r3, [pc, #276]	; (800a778 <RCCEx_PLL2_Config+0x15c>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d1f0      	bne.n	800a64e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a66c:	4b42      	ldr	r3, [pc, #264]	; (800a778 <RCCEx_PLL2_Config+0x15c>)
 800a66e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a670:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	031b      	lsls	r3, r3, #12
 800a67a:	493f      	ldr	r1, [pc, #252]	; (800a778 <RCCEx_PLL2_Config+0x15c>)
 800a67c:	4313      	orrs	r3, r2
 800a67e:	628b      	str	r3, [r1, #40]	; 0x28
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	685b      	ldr	r3, [r3, #4]
 800a684:	3b01      	subs	r3, #1
 800a686:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	689b      	ldr	r3, [r3, #8]
 800a68e:	3b01      	subs	r3, #1
 800a690:	025b      	lsls	r3, r3, #9
 800a692:	b29b      	uxth	r3, r3
 800a694:	431a      	orrs	r2, r3
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	68db      	ldr	r3, [r3, #12]
 800a69a:	3b01      	subs	r3, #1
 800a69c:	041b      	lsls	r3, r3, #16
 800a69e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a6a2:	431a      	orrs	r2, r3
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	691b      	ldr	r3, [r3, #16]
 800a6a8:	3b01      	subs	r3, #1
 800a6aa:	061b      	lsls	r3, r3, #24
 800a6ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a6b0:	4931      	ldr	r1, [pc, #196]	; (800a778 <RCCEx_PLL2_Config+0x15c>)
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a6b6:	4b30      	ldr	r3, [pc, #192]	; (800a778 <RCCEx_PLL2_Config+0x15c>)
 800a6b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	695b      	ldr	r3, [r3, #20]
 800a6c2:	492d      	ldr	r1, [pc, #180]	; (800a778 <RCCEx_PLL2_Config+0x15c>)
 800a6c4:	4313      	orrs	r3, r2
 800a6c6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a6c8:	4b2b      	ldr	r3, [pc, #172]	; (800a778 <RCCEx_PLL2_Config+0x15c>)
 800a6ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6cc:	f023 0220 	bic.w	r2, r3, #32
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	699b      	ldr	r3, [r3, #24]
 800a6d4:	4928      	ldr	r1, [pc, #160]	; (800a778 <RCCEx_PLL2_Config+0x15c>)
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a6da:	4b27      	ldr	r3, [pc, #156]	; (800a778 <RCCEx_PLL2_Config+0x15c>)
 800a6dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6de:	4a26      	ldr	r2, [pc, #152]	; (800a778 <RCCEx_PLL2_Config+0x15c>)
 800a6e0:	f023 0310 	bic.w	r3, r3, #16
 800a6e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a6e6:	4b24      	ldr	r3, [pc, #144]	; (800a778 <RCCEx_PLL2_Config+0x15c>)
 800a6e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a6ea:	4b24      	ldr	r3, [pc, #144]	; (800a77c <RCCEx_PLL2_Config+0x160>)
 800a6ec:	4013      	ands	r3, r2
 800a6ee:	687a      	ldr	r2, [r7, #4]
 800a6f0:	69d2      	ldr	r2, [r2, #28]
 800a6f2:	00d2      	lsls	r2, r2, #3
 800a6f4:	4920      	ldr	r1, [pc, #128]	; (800a778 <RCCEx_PLL2_Config+0x15c>)
 800a6f6:	4313      	orrs	r3, r2
 800a6f8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a6fa:	4b1f      	ldr	r3, [pc, #124]	; (800a778 <RCCEx_PLL2_Config+0x15c>)
 800a6fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6fe:	4a1e      	ldr	r2, [pc, #120]	; (800a778 <RCCEx_PLL2_Config+0x15c>)
 800a700:	f043 0310 	orr.w	r3, r3, #16
 800a704:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d106      	bne.n	800a71a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a70c:	4b1a      	ldr	r3, [pc, #104]	; (800a778 <RCCEx_PLL2_Config+0x15c>)
 800a70e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a710:	4a19      	ldr	r2, [pc, #100]	; (800a778 <RCCEx_PLL2_Config+0x15c>)
 800a712:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a716:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a718:	e00f      	b.n	800a73a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	d106      	bne.n	800a72e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a720:	4b15      	ldr	r3, [pc, #84]	; (800a778 <RCCEx_PLL2_Config+0x15c>)
 800a722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a724:	4a14      	ldr	r2, [pc, #80]	; (800a778 <RCCEx_PLL2_Config+0x15c>)
 800a726:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a72a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a72c:	e005      	b.n	800a73a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a72e:	4b12      	ldr	r3, [pc, #72]	; (800a778 <RCCEx_PLL2_Config+0x15c>)
 800a730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a732:	4a11      	ldr	r2, [pc, #68]	; (800a778 <RCCEx_PLL2_Config+0x15c>)
 800a734:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a738:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a73a:	4b0f      	ldr	r3, [pc, #60]	; (800a778 <RCCEx_PLL2_Config+0x15c>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	4a0e      	ldr	r2, [pc, #56]	; (800a778 <RCCEx_PLL2_Config+0x15c>)
 800a740:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a744:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a746:	f7f8 f981 	bl	8002a4c <HAL_GetTick>
 800a74a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a74c:	e008      	b.n	800a760 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a74e:	f7f8 f97d 	bl	8002a4c <HAL_GetTick>
 800a752:	4602      	mov	r2, r0
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	1ad3      	subs	r3, r2, r3
 800a758:	2b02      	cmp	r3, #2
 800a75a:	d901      	bls.n	800a760 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a75c:	2303      	movs	r3, #3
 800a75e:	e006      	b.n	800a76e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a760:	4b05      	ldr	r3, [pc, #20]	; (800a778 <RCCEx_PLL2_Config+0x15c>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d0f0      	beq.n	800a74e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a76c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3710      	adds	r7, #16
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}
 800a776:	bf00      	nop
 800a778:	58024400 	.word	0x58024400
 800a77c:	ffff0007 	.word	0xffff0007

0800a780 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b084      	sub	sp, #16
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
 800a788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a78a:	2300      	movs	r3, #0
 800a78c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a78e:	4b53      	ldr	r3, [pc, #332]	; (800a8dc <RCCEx_PLL3_Config+0x15c>)
 800a790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a792:	f003 0303 	and.w	r3, r3, #3
 800a796:	2b03      	cmp	r3, #3
 800a798:	d101      	bne.n	800a79e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a79a:	2301      	movs	r3, #1
 800a79c:	e099      	b.n	800a8d2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a79e:	4b4f      	ldr	r3, [pc, #316]	; (800a8dc <RCCEx_PLL3_Config+0x15c>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	4a4e      	ldr	r2, [pc, #312]	; (800a8dc <RCCEx_PLL3_Config+0x15c>)
 800a7a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a7a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a7aa:	f7f8 f94f 	bl	8002a4c <HAL_GetTick>
 800a7ae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a7b0:	e008      	b.n	800a7c4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a7b2:	f7f8 f94b 	bl	8002a4c <HAL_GetTick>
 800a7b6:	4602      	mov	r2, r0
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	1ad3      	subs	r3, r2, r3
 800a7bc:	2b02      	cmp	r3, #2
 800a7be:	d901      	bls.n	800a7c4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a7c0:	2303      	movs	r3, #3
 800a7c2:	e086      	b.n	800a8d2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a7c4:	4b45      	ldr	r3, [pc, #276]	; (800a8dc <RCCEx_PLL3_Config+0x15c>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d1f0      	bne.n	800a7b2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a7d0:	4b42      	ldr	r3, [pc, #264]	; (800a8dc <RCCEx_PLL3_Config+0x15c>)
 800a7d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7d4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	051b      	lsls	r3, r3, #20
 800a7de:	493f      	ldr	r1, [pc, #252]	; (800a8dc <RCCEx_PLL3_Config+0x15c>)
 800a7e0:	4313      	orrs	r3, r2
 800a7e2:	628b      	str	r3, [r1, #40]	; 0x28
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	685b      	ldr	r3, [r3, #4]
 800a7e8:	3b01      	subs	r3, #1
 800a7ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	689b      	ldr	r3, [r3, #8]
 800a7f2:	3b01      	subs	r3, #1
 800a7f4:	025b      	lsls	r3, r3, #9
 800a7f6:	b29b      	uxth	r3, r3
 800a7f8:	431a      	orrs	r2, r3
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	68db      	ldr	r3, [r3, #12]
 800a7fe:	3b01      	subs	r3, #1
 800a800:	041b      	lsls	r3, r3, #16
 800a802:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a806:	431a      	orrs	r2, r3
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	691b      	ldr	r3, [r3, #16]
 800a80c:	3b01      	subs	r3, #1
 800a80e:	061b      	lsls	r3, r3, #24
 800a810:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a814:	4931      	ldr	r1, [pc, #196]	; (800a8dc <RCCEx_PLL3_Config+0x15c>)
 800a816:	4313      	orrs	r3, r2
 800a818:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a81a:	4b30      	ldr	r3, [pc, #192]	; (800a8dc <RCCEx_PLL3_Config+0x15c>)
 800a81c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a81e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	695b      	ldr	r3, [r3, #20]
 800a826:	492d      	ldr	r1, [pc, #180]	; (800a8dc <RCCEx_PLL3_Config+0x15c>)
 800a828:	4313      	orrs	r3, r2
 800a82a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a82c:	4b2b      	ldr	r3, [pc, #172]	; (800a8dc <RCCEx_PLL3_Config+0x15c>)
 800a82e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a830:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	699b      	ldr	r3, [r3, #24]
 800a838:	4928      	ldr	r1, [pc, #160]	; (800a8dc <RCCEx_PLL3_Config+0x15c>)
 800a83a:	4313      	orrs	r3, r2
 800a83c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a83e:	4b27      	ldr	r3, [pc, #156]	; (800a8dc <RCCEx_PLL3_Config+0x15c>)
 800a840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a842:	4a26      	ldr	r2, [pc, #152]	; (800a8dc <RCCEx_PLL3_Config+0x15c>)
 800a844:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a848:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a84a:	4b24      	ldr	r3, [pc, #144]	; (800a8dc <RCCEx_PLL3_Config+0x15c>)
 800a84c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a84e:	4b24      	ldr	r3, [pc, #144]	; (800a8e0 <RCCEx_PLL3_Config+0x160>)
 800a850:	4013      	ands	r3, r2
 800a852:	687a      	ldr	r2, [r7, #4]
 800a854:	69d2      	ldr	r2, [r2, #28]
 800a856:	00d2      	lsls	r2, r2, #3
 800a858:	4920      	ldr	r1, [pc, #128]	; (800a8dc <RCCEx_PLL3_Config+0x15c>)
 800a85a:	4313      	orrs	r3, r2
 800a85c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a85e:	4b1f      	ldr	r3, [pc, #124]	; (800a8dc <RCCEx_PLL3_Config+0x15c>)
 800a860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a862:	4a1e      	ldr	r2, [pc, #120]	; (800a8dc <RCCEx_PLL3_Config+0x15c>)
 800a864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a868:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d106      	bne.n	800a87e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a870:	4b1a      	ldr	r3, [pc, #104]	; (800a8dc <RCCEx_PLL3_Config+0x15c>)
 800a872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a874:	4a19      	ldr	r2, [pc, #100]	; (800a8dc <RCCEx_PLL3_Config+0x15c>)
 800a876:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a87a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a87c:	e00f      	b.n	800a89e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	2b01      	cmp	r3, #1
 800a882:	d106      	bne.n	800a892 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a884:	4b15      	ldr	r3, [pc, #84]	; (800a8dc <RCCEx_PLL3_Config+0x15c>)
 800a886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a888:	4a14      	ldr	r2, [pc, #80]	; (800a8dc <RCCEx_PLL3_Config+0x15c>)
 800a88a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a88e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a890:	e005      	b.n	800a89e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a892:	4b12      	ldr	r3, [pc, #72]	; (800a8dc <RCCEx_PLL3_Config+0x15c>)
 800a894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a896:	4a11      	ldr	r2, [pc, #68]	; (800a8dc <RCCEx_PLL3_Config+0x15c>)
 800a898:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a89c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a89e:	4b0f      	ldr	r3, [pc, #60]	; (800a8dc <RCCEx_PLL3_Config+0x15c>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	4a0e      	ldr	r2, [pc, #56]	; (800a8dc <RCCEx_PLL3_Config+0x15c>)
 800a8a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a8a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a8aa:	f7f8 f8cf 	bl	8002a4c <HAL_GetTick>
 800a8ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a8b0:	e008      	b.n	800a8c4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a8b2:	f7f8 f8cb 	bl	8002a4c <HAL_GetTick>
 800a8b6:	4602      	mov	r2, r0
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	1ad3      	subs	r3, r2, r3
 800a8bc:	2b02      	cmp	r3, #2
 800a8be:	d901      	bls.n	800a8c4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a8c0:	2303      	movs	r3, #3
 800a8c2:	e006      	b.n	800a8d2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a8c4:	4b05      	ldr	r3, [pc, #20]	; (800a8dc <RCCEx_PLL3_Config+0x15c>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d0f0      	beq.n	800a8b2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a8d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3710      	adds	r7, #16
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}
 800a8da:	bf00      	nop
 800a8dc:	58024400 	.word	0x58024400
 800a8e0:	ffff0007 	.word	0xffff0007

0800a8e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b082      	sub	sp, #8
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d101      	bne.n	800a8f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	e049      	b.n	800a98a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8fc:	b2db      	uxtb	r3, r3
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d106      	bne.n	800a910 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2200      	movs	r2, #0
 800a906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f7f7 fc1c 	bl	8002148 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2202      	movs	r2, #2
 800a914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681a      	ldr	r2, [r3, #0]
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	3304      	adds	r3, #4
 800a920:	4619      	mov	r1, r3
 800a922:	4610      	mov	r0, r2
 800a924:	f000 fec6 	bl	800b6b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2201      	movs	r2, #1
 800a92c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2201      	movs	r2, #1
 800a934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2201      	movs	r2, #1
 800a93c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2201      	movs	r2, #1
 800a944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2201      	movs	r2, #1
 800a94c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2201      	movs	r2, #1
 800a954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2201      	movs	r2, #1
 800a95c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2201      	movs	r2, #1
 800a964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2201      	movs	r2, #1
 800a96c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2201      	movs	r2, #1
 800a974:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2201      	movs	r2, #1
 800a97c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2201      	movs	r2, #1
 800a984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a988:	2300      	movs	r3, #0
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3708      	adds	r7, #8
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}
	...

0800a994 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a994:	b480      	push	{r7}
 800a996:	b085      	sub	sp, #20
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9a2:	b2db      	uxtb	r3, r3
 800a9a4:	2b01      	cmp	r3, #1
 800a9a6:	d001      	beq.n	800a9ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	e054      	b.n	800aa56 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2202      	movs	r2, #2
 800a9b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	68da      	ldr	r2, [r3, #12]
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	f042 0201 	orr.w	r2, r2, #1
 800a9c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	4a26      	ldr	r2, [pc, #152]	; (800aa64 <HAL_TIM_Base_Start_IT+0xd0>)
 800a9ca:	4293      	cmp	r3, r2
 800a9cc:	d022      	beq.n	800aa14 <HAL_TIM_Base_Start_IT+0x80>
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9d6:	d01d      	beq.n	800aa14 <HAL_TIM_Base_Start_IT+0x80>
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	4a22      	ldr	r2, [pc, #136]	; (800aa68 <HAL_TIM_Base_Start_IT+0xd4>)
 800a9de:	4293      	cmp	r3, r2
 800a9e0:	d018      	beq.n	800aa14 <HAL_TIM_Base_Start_IT+0x80>
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	4a21      	ldr	r2, [pc, #132]	; (800aa6c <HAL_TIM_Base_Start_IT+0xd8>)
 800a9e8:	4293      	cmp	r3, r2
 800a9ea:	d013      	beq.n	800aa14 <HAL_TIM_Base_Start_IT+0x80>
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	4a1f      	ldr	r2, [pc, #124]	; (800aa70 <HAL_TIM_Base_Start_IT+0xdc>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d00e      	beq.n	800aa14 <HAL_TIM_Base_Start_IT+0x80>
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	4a1e      	ldr	r2, [pc, #120]	; (800aa74 <HAL_TIM_Base_Start_IT+0xe0>)
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	d009      	beq.n	800aa14 <HAL_TIM_Base_Start_IT+0x80>
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	4a1c      	ldr	r2, [pc, #112]	; (800aa78 <HAL_TIM_Base_Start_IT+0xe4>)
 800aa06:	4293      	cmp	r3, r2
 800aa08:	d004      	beq.n	800aa14 <HAL_TIM_Base_Start_IT+0x80>
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	4a1b      	ldr	r2, [pc, #108]	; (800aa7c <HAL_TIM_Base_Start_IT+0xe8>)
 800aa10:	4293      	cmp	r3, r2
 800aa12:	d115      	bne.n	800aa40 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	689a      	ldr	r2, [r3, #8]
 800aa1a:	4b19      	ldr	r3, [pc, #100]	; (800aa80 <HAL_TIM_Base_Start_IT+0xec>)
 800aa1c:	4013      	ands	r3, r2
 800aa1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	2b06      	cmp	r3, #6
 800aa24:	d015      	beq.n	800aa52 <HAL_TIM_Base_Start_IT+0xbe>
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa2c:	d011      	beq.n	800aa52 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	681a      	ldr	r2, [r3, #0]
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f042 0201 	orr.w	r2, r2, #1
 800aa3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa3e:	e008      	b.n	800aa52 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	681a      	ldr	r2, [r3, #0]
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f042 0201 	orr.w	r2, r2, #1
 800aa4e:	601a      	str	r2, [r3, #0]
 800aa50:	e000      	b.n	800aa54 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800aa54:	2300      	movs	r3, #0
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	3714      	adds	r7, #20
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa60:	4770      	bx	lr
 800aa62:	bf00      	nop
 800aa64:	40010000 	.word	0x40010000
 800aa68:	40000400 	.word	0x40000400
 800aa6c:	40000800 	.word	0x40000800
 800aa70:	40000c00 	.word	0x40000c00
 800aa74:	40010400 	.word	0x40010400
 800aa78:	40001800 	.word	0x40001800
 800aa7c:	40014000 	.word	0x40014000
 800aa80:	00010007 	.word	0x00010007

0800aa84 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b082      	sub	sp, #8
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d101      	bne.n	800aa96 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800aa92:	2301      	movs	r3, #1
 800aa94:	e049      	b.n	800ab2a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa9c:	b2db      	uxtb	r3, r3
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d106      	bne.n	800aab0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	f000 f841 	bl	800ab32 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2202      	movs	r2, #2
 800aab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681a      	ldr	r2, [r3, #0]
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	3304      	adds	r3, #4
 800aac0:	4619      	mov	r1, r3
 800aac2:	4610      	mov	r0, r2
 800aac4:	f000 fdf6 	bl	800b6b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2201      	movs	r2, #1
 800aacc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2201      	movs	r2, #1
 800aad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2201      	movs	r2, #1
 800aadc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2201      	movs	r2, #1
 800aae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2201      	movs	r2, #1
 800aaec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2201      	movs	r2, #1
 800aaf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2201      	movs	r2, #1
 800aafc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2201      	movs	r2, #1
 800ab04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2201      	movs	r2, #1
 800ab0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2201      	movs	r2, #1
 800ab14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2201      	movs	r2, #1
 800ab24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ab28:	2300      	movs	r3, #0
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	3708      	adds	r7, #8
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}

0800ab32 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ab32:	b480      	push	{r7}
 800ab34:	b083      	sub	sp, #12
 800ab36:	af00      	add	r7, sp, #0
 800ab38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ab3a:	bf00      	nop
 800ab3c:	370c      	adds	r7, #12
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab44:	4770      	bx	lr
	...

0800ab48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b084      	sub	sp, #16
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d109      	bne.n	800ab6c <HAL_TIM_PWM_Start+0x24>
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ab5e:	b2db      	uxtb	r3, r3
 800ab60:	2b01      	cmp	r3, #1
 800ab62:	bf14      	ite	ne
 800ab64:	2301      	movne	r3, #1
 800ab66:	2300      	moveq	r3, #0
 800ab68:	b2db      	uxtb	r3, r3
 800ab6a:	e03c      	b.n	800abe6 <HAL_TIM_PWM_Start+0x9e>
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	2b04      	cmp	r3, #4
 800ab70:	d109      	bne.n	800ab86 <HAL_TIM_PWM_Start+0x3e>
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ab78:	b2db      	uxtb	r3, r3
 800ab7a:	2b01      	cmp	r3, #1
 800ab7c:	bf14      	ite	ne
 800ab7e:	2301      	movne	r3, #1
 800ab80:	2300      	moveq	r3, #0
 800ab82:	b2db      	uxtb	r3, r3
 800ab84:	e02f      	b.n	800abe6 <HAL_TIM_PWM_Start+0x9e>
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	2b08      	cmp	r3, #8
 800ab8a:	d109      	bne.n	800aba0 <HAL_TIM_PWM_Start+0x58>
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ab92:	b2db      	uxtb	r3, r3
 800ab94:	2b01      	cmp	r3, #1
 800ab96:	bf14      	ite	ne
 800ab98:	2301      	movne	r3, #1
 800ab9a:	2300      	moveq	r3, #0
 800ab9c:	b2db      	uxtb	r3, r3
 800ab9e:	e022      	b.n	800abe6 <HAL_TIM_PWM_Start+0x9e>
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	2b0c      	cmp	r3, #12
 800aba4:	d109      	bne.n	800abba <HAL_TIM_PWM_Start+0x72>
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800abac:	b2db      	uxtb	r3, r3
 800abae:	2b01      	cmp	r3, #1
 800abb0:	bf14      	ite	ne
 800abb2:	2301      	movne	r3, #1
 800abb4:	2300      	moveq	r3, #0
 800abb6:	b2db      	uxtb	r3, r3
 800abb8:	e015      	b.n	800abe6 <HAL_TIM_PWM_Start+0x9e>
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	2b10      	cmp	r3, #16
 800abbe:	d109      	bne.n	800abd4 <HAL_TIM_PWM_Start+0x8c>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800abc6:	b2db      	uxtb	r3, r3
 800abc8:	2b01      	cmp	r3, #1
 800abca:	bf14      	ite	ne
 800abcc:	2301      	movne	r3, #1
 800abce:	2300      	moveq	r3, #0
 800abd0:	b2db      	uxtb	r3, r3
 800abd2:	e008      	b.n	800abe6 <HAL_TIM_PWM_Start+0x9e>
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800abda:	b2db      	uxtb	r3, r3
 800abdc:	2b01      	cmp	r3, #1
 800abde:	bf14      	ite	ne
 800abe0:	2301      	movne	r3, #1
 800abe2:	2300      	moveq	r3, #0
 800abe4:	b2db      	uxtb	r3, r3
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d001      	beq.n	800abee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800abea:	2301      	movs	r3, #1
 800abec:	e0a1      	b.n	800ad32 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d104      	bne.n	800abfe <HAL_TIM_PWM_Start+0xb6>
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2202      	movs	r2, #2
 800abf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800abfc:	e023      	b.n	800ac46 <HAL_TIM_PWM_Start+0xfe>
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	2b04      	cmp	r3, #4
 800ac02:	d104      	bne.n	800ac0e <HAL_TIM_PWM_Start+0xc6>
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2202      	movs	r2, #2
 800ac08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ac0c:	e01b      	b.n	800ac46 <HAL_TIM_PWM_Start+0xfe>
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	2b08      	cmp	r3, #8
 800ac12:	d104      	bne.n	800ac1e <HAL_TIM_PWM_Start+0xd6>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2202      	movs	r2, #2
 800ac18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ac1c:	e013      	b.n	800ac46 <HAL_TIM_PWM_Start+0xfe>
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	2b0c      	cmp	r3, #12
 800ac22:	d104      	bne.n	800ac2e <HAL_TIM_PWM_Start+0xe6>
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2202      	movs	r2, #2
 800ac28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ac2c:	e00b      	b.n	800ac46 <HAL_TIM_PWM_Start+0xfe>
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	2b10      	cmp	r3, #16
 800ac32:	d104      	bne.n	800ac3e <HAL_TIM_PWM_Start+0xf6>
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2202      	movs	r2, #2
 800ac38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ac3c:	e003      	b.n	800ac46 <HAL_TIM_PWM_Start+0xfe>
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2202      	movs	r2, #2
 800ac42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	2201      	movs	r2, #1
 800ac4c:	6839      	ldr	r1, [r7, #0]
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f001 f93e 	bl	800bed0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	4a38      	ldr	r2, [pc, #224]	; (800ad3c <HAL_TIM_PWM_Start+0x1f4>)
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d013      	beq.n	800ac86 <HAL_TIM_PWM_Start+0x13e>
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	4a37      	ldr	r2, [pc, #220]	; (800ad40 <HAL_TIM_PWM_Start+0x1f8>)
 800ac64:	4293      	cmp	r3, r2
 800ac66:	d00e      	beq.n	800ac86 <HAL_TIM_PWM_Start+0x13e>
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	4a35      	ldr	r2, [pc, #212]	; (800ad44 <HAL_TIM_PWM_Start+0x1fc>)
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	d009      	beq.n	800ac86 <HAL_TIM_PWM_Start+0x13e>
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	4a34      	ldr	r2, [pc, #208]	; (800ad48 <HAL_TIM_PWM_Start+0x200>)
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	d004      	beq.n	800ac86 <HAL_TIM_PWM_Start+0x13e>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	4a32      	ldr	r2, [pc, #200]	; (800ad4c <HAL_TIM_PWM_Start+0x204>)
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d101      	bne.n	800ac8a <HAL_TIM_PWM_Start+0x142>
 800ac86:	2301      	movs	r3, #1
 800ac88:	e000      	b.n	800ac8c <HAL_TIM_PWM_Start+0x144>
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d007      	beq.n	800aca0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ac9e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	4a25      	ldr	r2, [pc, #148]	; (800ad3c <HAL_TIM_PWM_Start+0x1f4>)
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d022      	beq.n	800acf0 <HAL_TIM_PWM_Start+0x1a8>
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acb2:	d01d      	beq.n	800acf0 <HAL_TIM_PWM_Start+0x1a8>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	4a25      	ldr	r2, [pc, #148]	; (800ad50 <HAL_TIM_PWM_Start+0x208>)
 800acba:	4293      	cmp	r3, r2
 800acbc:	d018      	beq.n	800acf0 <HAL_TIM_PWM_Start+0x1a8>
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	4a24      	ldr	r2, [pc, #144]	; (800ad54 <HAL_TIM_PWM_Start+0x20c>)
 800acc4:	4293      	cmp	r3, r2
 800acc6:	d013      	beq.n	800acf0 <HAL_TIM_PWM_Start+0x1a8>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	4a22      	ldr	r2, [pc, #136]	; (800ad58 <HAL_TIM_PWM_Start+0x210>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d00e      	beq.n	800acf0 <HAL_TIM_PWM_Start+0x1a8>
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	4a1a      	ldr	r2, [pc, #104]	; (800ad40 <HAL_TIM_PWM_Start+0x1f8>)
 800acd8:	4293      	cmp	r3, r2
 800acda:	d009      	beq.n	800acf0 <HAL_TIM_PWM_Start+0x1a8>
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	4a1e      	ldr	r2, [pc, #120]	; (800ad5c <HAL_TIM_PWM_Start+0x214>)
 800ace2:	4293      	cmp	r3, r2
 800ace4:	d004      	beq.n	800acf0 <HAL_TIM_PWM_Start+0x1a8>
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	4a16      	ldr	r2, [pc, #88]	; (800ad44 <HAL_TIM_PWM_Start+0x1fc>)
 800acec:	4293      	cmp	r3, r2
 800acee:	d115      	bne.n	800ad1c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	689a      	ldr	r2, [r3, #8]
 800acf6:	4b1a      	ldr	r3, [pc, #104]	; (800ad60 <HAL_TIM_PWM_Start+0x218>)
 800acf8:	4013      	ands	r3, r2
 800acfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	2b06      	cmp	r3, #6
 800ad00:	d015      	beq.n	800ad2e <HAL_TIM_PWM_Start+0x1e6>
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad08:	d011      	beq.n	800ad2e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	681a      	ldr	r2, [r3, #0]
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f042 0201 	orr.w	r2, r2, #1
 800ad18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad1a:	e008      	b.n	800ad2e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	681a      	ldr	r2, [r3, #0]
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f042 0201 	orr.w	r2, r2, #1
 800ad2a:	601a      	str	r2, [r3, #0]
 800ad2c:	e000      	b.n	800ad30 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ad30:	2300      	movs	r3, #0
}
 800ad32:	4618      	mov	r0, r3
 800ad34:	3710      	adds	r7, #16
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}
 800ad3a:	bf00      	nop
 800ad3c:	40010000 	.word	0x40010000
 800ad40:	40010400 	.word	0x40010400
 800ad44:	40014000 	.word	0x40014000
 800ad48:	40014400 	.word	0x40014400
 800ad4c:	40014800 	.word	0x40014800
 800ad50:	40000400 	.word	0x40000400
 800ad54:	40000800 	.word	0x40000800
 800ad58:	40000c00 	.word	0x40000c00
 800ad5c:	40001800 	.word	0x40001800
 800ad60:	00010007 	.word	0x00010007

0800ad64 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b086      	sub	sp, #24
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
 800ad6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d101      	bne.n	800ad78 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800ad74:	2301      	movs	r3, #1
 800ad76:	e08f      	b.n	800ae98 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad7e:	b2db      	uxtb	r3, r3
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d106      	bne.n	800ad92 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2200      	movs	r2, #0
 800ad88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f7f7 fa2f 	bl	80021f0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2202      	movs	r2, #2
 800ad96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	6899      	ldr	r1, [r3, #8]
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681a      	ldr	r2, [r3, #0]
 800ada4:	4b3e      	ldr	r3, [pc, #248]	; (800aea0 <HAL_TIM_Encoder_Init+0x13c>)
 800ada6:	400b      	ands	r3, r1
 800ada8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681a      	ldr	r2, [r3, #0]
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	3304      	adds	r3, #4
 800adb2:	4619      	mov	r1, r3
 800adb4:	4610      	mov	r0, r2
 800adb6:	f000 fc7d 	bl	800b6b4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	689b      	ldr	r3, [r3, #8]
 800adc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	699b      	ldr	r3, [r3, #24]
 800adc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	6a1b      	ldr	r3, [r3, #32]
 800add0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	697a      	ldr	r2, [r7, #20]
 800add8:	4313      	orrs	r3, r2
 800adda:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800addc:	693a      	ldr	r2, [r7, #16]
 800adde:	4b31      	ldr	r3, [pc, #196]	; (800aea4 <HAL_TIM_Encoder_Init+0x140>)
 800ade0:	4013      	ands	r3, r2
 800ade2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	689a      	ldr	r2, [r3, #8]
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	699b      	ldr	r3, [r3, #24]
 800adec:	021b      	lsls	r3, r3, #8
 800adee:	4313      	orrs	r3, r2
 800adf0:	693a      	ldr	r2, [r7, #16]
 800adf2:	4313      	orrs	r3, r2
 800adf4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800adf6:	693a      	ldr	r2, [r7, #16]
 800adf8:	4b2b      	ldr	r3, [pc, #172]	; (800aea8 <HAL_TIM_Encoder_Init+0x144>)
 800adfa:	4013      	ands	r3, r2
 800adfc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800adfe:	693a      	ldr	r2, [r7, #16]
 800ae00:	4b2a      	ldr	r3, [pc, #168]	; (800aeac <HAL_TIM_Encoder_Init+0x148>)
 800ae02:	4013      	ands	r3, r2
 800ae04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	68da      	ldr	r2, [r3, #12]
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	69db      	ldr	r3, [r3, #28]
 800ae0e:	021b      	lsls	r3, r3, #8
 800ae10:	4313      	orrs	r3, r2
 800ae12:	693a      	ldr	r2, [r7, #16]
 800ae14:	4313      	orrs	r3, r2
 800ae16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	691b      	ldr	r3, [r3, #16]
 800ae1c:	011a      	lsls	r2, r3, #4
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	6a1b      	ldr	r3, [r3, #32]
 800ae22:	031b      	lsls	r3, r3, #12
 800ae24:	4313      	orrs	r3, r2
 800ae26:	693a      	ldr	r2, [r7, #16]
 800ae28:	4313      	orrs	r3, r2
 800ae2a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800ae32:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800ae3a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	685a      	ldr	r2, [r3, #4]
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	695b      	ldr	r3, [r3, #20]
 800ae44:	011b      	lsls	r3, r3, #4
 800ae46:	4313      	orrs	r3, r2
 800ae48:	68fa      	ldr	r2, [r7, #12]
 800ae4a:	4313      	orrs	r3, r2
 800ae4c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	697a      	ldr	r2, [r7, #20]
 800ae54:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	693a      	ldr	r2, [r7, #16]
 800ae5c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	68fa      	ldr	r2, [r7, #12]
 800ae64:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2201      	movs	r2, #1
 800ae6a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2201      	movs	r2, #1
 800ae72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2201      	movs	r2, #1
 800ae7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2201      	movs	r2, #1
 800ae82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2201      	movs	r2, #1
 800ae8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2201      	movs	r2, #1
 800ae92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ae96:	2300      	movs	r3, #0
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	3718      	adds	r7, #24
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}
 800aea0:	fffebff8 	.word	0xfffebff8
 800aea4:	fffffcfc 	.word	0xfffffcfc
 800aea8:	fffff3f3 	.word	0xfffff3f3
 800aeac:	ffff0f0f 	.word	0xffff0f0f

0800aeb0 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b084      	sub	sp, #16
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aec0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800aec8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aed0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aed8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d110      	bne.n	800af02 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800aee0:	7bfb      	ldrb	r3, [r7, #15]
 800aee2:	2b01      	cmp	r3, #1
 800aee4:	d102      	bne.n	800aeec <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800aee6:	7b7b      	ldrb	r3, [r7, #13]
 800aee8:	2b01      	cmp	r3, #1
 800aeea:	d001      	beq.n	800aef0 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800aeec:	2301      	movs	r3, #1
 800aeee:	e089      	b.n	800b004 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2202      	movs	r2, #2
 800aef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2202      	movs	r2, #2
 800aefc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af00:	e031      	b.n	800af66 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	2b04      	cmp	r3, #4
 800af06:	d110      	bne.n	800af2a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800af08:	7bbb      	ldrb	r3, [r7, #14]
 800af0a:	2b01      	cmp	r3, #1
 800af0c:	d102      	bne.n	800af14 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800af0e:	7b3b      	ldrb	r3, [r7, #12]
 800af10:	2b01      	cmp	r3, #1
 800af12:	d001      	beq.n	800af18 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800af14:	2301      	movs	r3, #1
 800af16:	e075      	b.n	800b004 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2202      	movs	r2, #2
 800af1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2202      	movs	r2, #2
 800af24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af28:	e01d      	b.n	800af66 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800af2a:	7bfb      	ldrb	r3, [r7, #15]
 800af2c:	2b01      	cmp	r3, #1
 800af2e:	d108      	bne.n	800af42 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800af30:	7bbb      	ldrb	r3, [r7, #14]
 800af32:	2b01      	cmp	r3, #1
 800af34:	d105      	bne.n	800af42 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800af36:	7b7b      	ldrb	r3, [r7, #13]
 800af38:	2b01      	cmp	r3, #1
 800af3a:	d102      	bne.n	800af42 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800af3c:	7b3b      	ldrb	r3, [r7, #12]
 800af3e:	2b01      	cmp	r3, #1
 800af40:	d001      	beq.n	800af46 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800af42:	2301      	movs	r3, #1
 800af44:	e05e      	b.n	800b004 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2202      	movs	r2, #2
 800af4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2202      	movs	r2, #2
 800af52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2202      	movs	r2, #2
 800af5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2202      	movs	r2, #2
 800af62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d003      	beq.n	800af74 <HAL_TIM_Encoder_Start_IT+0xc4>
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	2b04      	cmp	r3, #4
 800af70:	d010      	beq.n	800af94 <HAL_TIM_Encoder_Start_IT+0xe4>
 800af72:	e01f      	b.n	800afb4 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	2201      	movs	r2, #1
 800af7a:	2100      	movs	r1, #0
 800af7c:	4618      	mov	r0, r3
 800af7e:	f000 ffa7 	bl	800bed0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	68da      	ldr	r2, [r3, #12]
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	f042 0202 	orr.w	r2, r2, #2
 800af90:	60da      	str	r2, [r3, #12]
      break;
 800af92:	e02e      	b.n	800aff2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	2201      	movs	r2, #1
 800af9a:	2104      	movs	r1, #4
 800af9c:	4618      	mov	r0, r3
 800af9e:	f000 ff97 	bl	800bed0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	68da      	ldr	r2, [r3, #12]
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f042 0204 	orr.w	r2, r2, #4
 800afb0:	60da      	str	r2, [r3, #12]
      break;
 800afb2:	e01e      	b.n	800aff2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	2201      	movs	r2, #1
 800afba:	2100      	movs	r1, #0
 800afbc:	4618      	mov	r0, r3
 800afbe:	f000 ff87 	bl	800bed0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	2201      	movs	r2, #1
 800afc8:	2104      	movs	r1, #4
 800afca:	4618      	mov	r0, r3
 800afcc:	f000 ff80 	bl	800bed0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	68da      	ldr	r2, [r3, #12]
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f042 0202 	orr.w	r2, r2, #2
 800afde:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	68da      	ldr	r2, [r3, #12]
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	f042 0204 	orr.w	r2, r2, #4
 800afee:	60da      	str	r2, [r3, #12]
      break;
 800aff0:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	681a      	ldr	r2, [r3, #0]
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f042 0201 	orr.w	r2, r2, #1
 800b000:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b002:	2300      	movs	r3, #0
}
 800b004:	4618      	mov	r0, r3
 800b006:	3710      	adds	r7, #16
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}

0800b00c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b082      	sub	sp, #8
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	691b      	ldr	r3, [r3, #16]
 800b01a:	f003 0302 	and.w	r3, r3, #2
 800b01e:	2b02      	cmp	r3, #2
 800b020:	d122      	bne.n	800b068 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	68db      	ldr	r3, [r3, #12]
 800b028:	f003 0302 	and.w	r3, r3, #2
 800b02c:	2b02      	cmp	r3, #2
 800b02e:	d11b      	bne.n	800b068 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	f06f 0202 	mvn.w	r2, #2
 800b038:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2201      	movs	r2, #1
 800b03e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	699b      	ldr	r3, [r3, #24]
 800b046:	f003 0303 	and.w	r3, r3, #3
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d003      	beq.n	800b056 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f000 fb12 	bl	800b678 <HAL_TIM_IC_CaptureCallback>
 800b054:	e005      	b.n	800b062 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f000 fb04 	bl	800b664 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f000 fb15 	bl	800b68c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2200      	movs	r2, #0
 800b066:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	691b      	ldr	r3, [r3, #16]
 800b06e:	f003 0304 	and.w	r3, r3, #4
 800b072:	2b04      	cmp	r3, #4
 800b074:	d122      	bne.n	800b0bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	68db      	ldr	r3, [r3, #12]
 800b07c:	f003 0304 	and.w	r3, r3, #4
 800b080:	2b04      	cmp	r3, #4
 800b082:	d11b      	bne.n	800b0bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f06f 0204 	mvn.w	r2, #4
 800b08c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2202      	movs	r2, #2
 800b092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	699b      	ldr	r3, [r3, #24]
 800b09a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d003      	beq.n	800b0aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b0a2:	6878      	ldr	r0, [r7, #4]
 800b0a4:	f000 fae8 	bl	800b678 <HAL_TIM_IC_CaptureCallback>
 800b0a8:	e005      	b.n	800b0b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f000 fada 	bl	800b664 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f000 faeb 	bl	800b68c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	691b      	ldr	r3, [r3, #16]
 800b0c2:	f003 0308 	and.w	r3, r3, #8
 800b0c6:	2b08      	cmp	r3, #8
 800b0c8:	d122      	bne.n	800b110 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	68db      	ldr	r3, [r3, #12]
 800b0d0:	f003 0308 	and.w	r3, r3, #8
 800b0d4:	2b08      	cmp	r3, #8
 800b0d6:	d11b      	bne.n	800b110 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f06f 0208 	mvn.w	r2, #8
 800b0e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2204      	movs	r2, #4
 800b0e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	69db      	ldr	r3, [r3, #28]
 800b0ee:	f003 0303 	and.w	r3, r3, #3
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d003      	beq.n	800b0fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f000 fabe 	bl	800b678 <HAL_TIM_IC_CaptureCallback>
 800b0fc:	e005      	b.n	800b10a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f000 fab0 	bl	800b664 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f000 fac1 	bl	800b68c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2200      	movs	r2, #0
 800b10e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	691b      	ldr	r3, [r3, #16]
 800b116:	f003 0310 	and.w	r3, r3, #16
 800b11a:	2b10      	cmp	r3, #16
 800b11c:	d122      	bne.n	800b164 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	68db      	ldr	r3, [r3, #12]
 800b124:	f003 0310 	and.w	r3, r3, #16
 800b128:	2b10      	cmp	r3, #16
 800b12a:	d11b      	bne.n	800b164 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f06f 0210 	mvn.w	r2, #16
 800b134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2208      	movs	r2, #8
 800b13a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	69db      	ldr	r3, [r3, #28]
 800b142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b146:	2b00      	cmp	r3, #0
 800b148:	d003      	beq.n	800b152 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f000 fa94 	bl	800b678 <HAL_TIM_IC_CaptureCallback>
 800b150:	e005      	b.n	800b15e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f000 fa86 	bl	800b664 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f000 fa97 	bl	800b68c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2200      	movs	r2, #0
 800b162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	691b      	ldr	r3, [r3, #16]
 800b16a:	f003 0301 	and.w	r3, r3, #1
 800b16e:	2b01      	cmp	r3, #1
 800b170:	d10e      	bne.n	800b190 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	68db      	ldr	r3, [r3, #12]
 800b178:	f003 0301 	and.w	r3, r3, #1
 800b17c:	2b01      	cmp	r3, #1
 800b17e:	d107      	bne.n	800b190 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f06f 0201 	mvn.w	r2, #1
 800b188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f7f6 ff1a 	bl	8001fc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	691b      	ldr	r3, [r3, #16]
 800b196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b19a:	2b80      	cmp	r3, #128	; 0x80
 800b19c:	d10e      	bne.n	800b1bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	68db      	ldr	r3, [r3, #12]
 800b1a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1a8:	2b80      	cmp	r3, #128	; 0x80
 800b1aa:	d107      	bne.n	800b1bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b1b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f000 ff48 	bl	800c04c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	691b      	ldr	r3, [r3, #16]
 800b1c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1ca:	d10e      	bne.n	800b1ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	68db      	ldr	r3, [r3, #12]
 800b1d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1d6:	2b80      	cmp	r3, #128	; 0x80
 800b1d8:	d107      	bne.n	800b1ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b1e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f000 ff3b 	bl	800c060 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	691b      	ldr	r3, [r3, #16]
 800b1f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1f4:	2b40      	cmp	r3, #64	; 0x40
 800b1f6:	d10e      	bne.n	800b216 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	68db      	ldr	r3, [r3, #12]
 800b1fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b202:	2b40      	cmp	r3, #64	; 0x40
 800b204:	d107      	bne.n	800b216 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b20e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f000 fa45 	bl	800b6a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	691b      	ldr	r3, [r3, #16]
 800b21c:	f003 0320 	and.w	r3, r3, #32
 800b220:	2b20      	cmp	r3, #32
 800b222:	d10e      	bne.n	800b242 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	68db      	ldr	r3, [r3, #12]
 800b22a:	f003 0320 	and.w	r3, r3, #32
 800b22e:	2b20      	cmp	r3, #32
 800b230:	d107      	bne.n	800b242 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f06f 0220 	mvn.w	r2, #32
 800b23a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f000 fefb 	bl	800c038 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b242:	bf00      	nop
 800b244:	3708      	adds	r7, #8
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}
	...

0800b24c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b086      	sub	sp, #24
 800b250:	af00      	add	r7, sp, #0
 800b252:	60f8      	str	r0, [r7, #12]
 800b254:	60b9      	str	r1, [r7, #8]
 800b256:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b258:	2300      	movs	r3, #0
 800b25a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b262:	2b01      	cmp	r3, #1
 800b264:	d101      	bne.n	800b26a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b266:	2302      	movs	r3, #2
 800b268:	e0ff      	b.n	800b46a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	2201      	movs	r2, #1
 800b26e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2b14      	cmp	r3, #20
 800b276:	f200 80f0 	bhi.w	800b45a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b27a:	a201      	add	r2, pc, #4	; (adr r2, 800b280 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b27c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b280:	0800b2d5 	.word	0x0800b2d5
 800b284:	0800b45b 	.word	0x0800b45b
 800b288:	0800b45b 	.word	0x0800b45b
 800b28c:	0800b45b 	.word	0x0800b45b
 800b290:	0800b315 	.word	0x0800b315
 800b294:	0800b45b 	.word	0x0800b45b
 800b298:	0800b45b 	.word	0x0800b45b
 800b29c:	0800b45b 	.word	0x0800b45b
 800b2a0:	0800b357 	.word	0x0800b357
 800b2a4:	0800b45b 	.word	0x0800b45b
 800b2a8:	0800b45b 	.word	0x0800b45b
 800b2ac:	0800b45b 	.word	0x0800b45b
 800b2b0:	0800b397 	.word	0x0800b397
 800b2b4:	0800b45b 	.word	0x0800b45b
 800b2b8:	0800b45b 	.word	0x0800b45b
 800b2bc:	0800b45b 	.word	0x0800b45b
 800b2c0:	0800b3d9 	.word	0x0800b3d9
 800b2c4:	0800b45b 	.word	0x0800b45b
 800b2c8:	0800b45b 	.word	0x0800b45b
 800b2cc:	0800b45b 	.word	0x0800b45b
 800b2d0:	0800b419 	.word	0x0800b419
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	68b9      	ldr	r1, [r7, #8]
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f000 fa84 	bl	800b7e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	699a      	ldr	r2, [r3, #24]
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f042 0208 	orr.w	r2, r2, #8
 800b2ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	699a      	ldr	r2, [r3, #24]
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	f022 0204 	bic.w	r2, r2, #4
 800b2fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	6999      	ldr	r1, [r3, #24]
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	691a      	ldr	r2, [r3, #16]
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	430a      	orrs	r2, r1
 800b310:	619a      	str	r2, [r3, #24]
      break;
 800b312:	e0a5      	b.n	800b460 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	68b9      	ldr	r1, [r7, #8]
 800b31a:	4618      	mov	r0, r3
 800b31c:	f000 faf4 	bl	800b908 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	699a      	ldr	r2, [r3, #24]
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b32e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	699a      	ldr	r2, [r3, #24]
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b33e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	6999      	ldr	r1, [r3, #24]
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	691b      	ldr	r3, [r3, #16]
 800b34a:	021a      	lsls	r2, r3, #8
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	430a      	orrs	r2, r1
 800b352:	619a      	str	r2, [r3, #24]
      break;
 800b354:	e084      	b.n	800b460 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	68b9      	ldr	r1, [r7, #8]
 800b35c:	4618      	mov	r0, r3
 800b35e:	f000 fb5d 	bl	800ba1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	69da      	ldr	r2, [r3, #28]
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	f042 0208 	orr.w	r2, r2, #8
 800b370:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	69da      	ldr	r2, [r3, #28]
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	f022 0204 	bic.w	r2, r2, #4
 800b380:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	69d9      	ldr	r1, [r3, #28]
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	691a      	ldr	r2, [r3, #16]
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	430a      	orrs	r2, r1
 800b392:	61da      	str	r2, [r3, #28]
      break;
 800b394:	e064      	b.n	800b460 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	68b9      	ldr	r1, [r7, #8]
 800b39c:	4618      	mov	r0, r3
 800b39e:	f000 fbc5 	bl	800bb2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	69da      	ldr	r2, [r3, #28]
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b3b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	69da      	ldr	r2, [r3, #28]
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b3c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	69d9      	ldr	r1, [r3, #28]
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	691b      	ldr	r3, [r3, #16]
 800b3cc:	021a      	lsls	r2, r3, #8
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	430a      	orrs	r2, r1
 800b3d4:	61da      	str	r2, [r3, #28]
      break;
 800b3d6:	e043      	b.n	800b460 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	68b9      	ldr	r1, [r7, #8]
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f000 fc0e 	bl	800bc00 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f042 0208 	orr.w	r2, r2, #8
 800b3f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	f022 0204 	bic.w	r2, r2, #4
 800b402:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	691a      	ldr	r2, [r3, #16]
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	430a      	orrs	r2, r1
 800b414:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b416:	e023      	b.n	800b460 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	68b9      	ldr	r1, [r7, #8]
 800b41e:	4618      	mov	r0, r3
 800b420:	f000 fc52 	bl	800bcc8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b432:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b442:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	691b      	ldr	r3, [r3, #16]
 800b44e:	021a      	lsls	r2, r3, #8
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	430a      	orrs	r2, r1
 800b456:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b458:	e002      	b.n	800b460 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b45a:	2301      	movs	r3, #1
 800b45c:	75fb      	strb	r3, [r7, #23]
      break;
 800b45e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	2200      	movs	r2, #0
 800b464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b468:	7dfb      	ldrb	r3, [r7, #23]
}
 800b46a:	4618      	mov	r0, r3
 800b46c:	3718      	adds	r7, #24
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}
 800b472:	bf00      	nop

0800b474 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b084      	sub	sp, #16
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
 800b47c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b47e:	2300      	movs	r3, #0
 800b480:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b488:	2b01      	cmp	r3, #1
 800b48a:	d101      	bne.n	800b490 <HAL_TIM_ConfigClockSource+0x1c>
 800b48c:	2302      	movs	r3, #2
 800b48e:	e0dc      	b.n	800b64a <HAL_TIM_ConfigClockSource+0x1d6>
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2201      	movs	r2, #1
 800b494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2202      	movs	r2, #2
 800b49c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	689b      	ldr	r3, [r3, #8]
 800b4a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b4a8:	68ba      	ldr	r2, [r7, #8]
 800b4aa:	4b6a      	ldr	r3, [pc, #424]	; (800b654 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b4ac:	4013      	ands	r3, r2
 800b4ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b4b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	68ba      	ldr	r2, [r7, #8]
 800b4be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	4a64      	ldr	r2, [pc, #400]	; (800b658 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b4c6:	4293      	cmp	r3, r2
 800b4c8:	f000 80a9 	beq.w	800b61e <HAL_TIM_ConfigClockSource+0x1aa>
 800b4cc:	4a62      	ldr	r2, [pc, #392]	; (800b658 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	f200 80ae 	bhi.w	800b630 <HAL_TIM_ConfigClockSource+0x1bc>
 800b4d4:	4a61      	ldr	r2, [pc, #388]	; (800b65c <HAL_TIM_ConfigClockSource+0x1e8>)
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	f000 80a1 	beq.w	800b61e <HAL_TIM_ConfigClockSource+0x1aa>
 800b4dc:	4a5f      	ldr	r2, [pc, #380]	; (800b65c <HAL_TIM_ConfigClockSource+0x1e8>)
 800b4de:	4293      	cmp	r3, r2
 800b4e0:	f200 80a6 	bhi.w	800b630 <HAL_TIM_ConfigClockSource+0x1bc>
 800b4e4:	4a5e      	ldr	r2, [pc, #376]	; (800b660 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	f000 8099 	beq.w	800b61e <HAL_TIM_ConfigClockSource+0x1aa>
 800b4ec:	4a5c      	ldr	r2, [pc, #368]	; (800b660 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	f200 809e 	bhi.w	800b630 <HAL_TIM_ConfigClockSource+0x1bc>
 800b4f4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b4f8:	f000 8091 	beq.w	800b61e <HAL_TIM_ConfigClockSource+0x1aa>
 800b4fc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b500:	f200 8096 	bhi.w	800b630 <HAL_TIM_ConfigClockSource+0x1bc>
 800b504:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b508:	f000 8089 	beq.w	800b61e <HAL_TIM_ConfigClockSource+0x1aa>
 800b50c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b510:	f200 808e 	bhi.w	800b630 <HAL_TIM_ConfigClockSource+0x1bc>
 800b514:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b518:	d03e      	beq.n	800b598 <HAL_TIM_ConfigClockSource+0x124>
 800b51a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b51e:	f200 8087 	bhi.w	800b630 <HAL_TIM_ConfigClockSource+0x1bc>
 800b522:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b526:	f000 8086 	beq.w	800b636 <HAL_TIM_ConfigClockSource+0x1c2>
 800b52a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b52e:	d87f      	bhi.n	800b630 <HAL_TIM_ConfigClockSource+0x1bc>
 800b530:	2b70      	cmp	r3, #112	; 0x70
 800b532:	d01a      	beq.n	800b56a <HAL_TIM_ConfigClockSource+0xf6>
 800b534:	2b70      	cmp	r3, #112	; 0x70
 800b536:	d87b      	bhi.n	800b630 <HAL_TIM_ConfigClockSource+0x1bc>
 800b538:	2b60      	cmp	r3, #96	; 0x60
 800b53a:	d050      	beq.n	800b5de <HAL_TIM_ConfigClockSource+0x16a>
 800b53c:	2b60      	cmp	r3, #96	; 0x60
 800b53e:	d877      	bhi.n	800b630 <HAL_TIM_ConfigClockSource+0x1bc>
 800b540:	2b50      	cmp	r3, #80	; 0x50
 800b542:	d03c      	beq.n	800b5be <HAL_TIM_ConfigClockSource+0x14a>
 800b544:	2b50      	cmp	r3, #80	; 0x50
 800b546:	d873      	bhi.n	800b630 <HAL_TIM_ConfigClockSource+0x1bc>
 800b548:	2b40      	cmp	r3, #64	; 0x40
 800b54a:	d058      	beq.n	800b5fe <HAL_TIM_ConfigClockSource+0x18a>
 800b54c:	2b40      	cmp	r3, #64	; 0x40
 800b54e:	d86f      	bhi.n	800b630 <HAL_TIM_ConfigClockSource+0x1bc>
 800b550:	2b30      	cmp	r3, #48	; 0x30
 800b552:	d064      	beq.n	800b61e <HAL_TIM_ConfigClockSource+0x1aa>
 800b554:	2b30      	cmp	r3, #48	; 0x30
 800b556:	d86b      	bhi.n	800b630 <HAL_TIM_ConfigClockSource+0x1bc>
 800b558:	2b20      	cmp	r3, #32
 800b55a:	d060      	beq.n	800b61e <HAL_TIM_ConfigClockSource+0x1aa>
 800b55c:	2b20      	cmp	r3, #32
 800b55e:	d867      	bhi.n	800b630 <HAL_TIM_ConfigClockSource+0x1bc>
 800b560:	2b00      	cmp	r3, #0
 800b562:	d05c      	beq.n	800b61e <HAL_TIM_ConfigClockSource+0x1aa>
 800b564:	2b10      	cmp	r3, #16
 800b566:	d05a      	beq.n	800b61e <HAL_TIM_ConfigClockSource+0x1aa>
 800b568:	e062      	b.n	800b630 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b57a:	f000 fc89 	bl	800be90 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	689b      	ldr	r3, [r3, #8]
 800b584:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b58c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	68ba      	ldr	r2, [r7, #8]
 800b594:	609a      	str	r2, [r3, #8]
      break;
 800b596:	e04f      	b.n	800b638 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b5a8:	f000 fc72 	bl	800be90 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	689a      	ldr	r2, [r3, #8]
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b5ba:	609a      	str	r2, [r3, #8]
      break;
 800b5bc:	e03c      	b.n	800b638 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b5ca:	461a      	mov	r2, r3
 800b5cc:	f000 fbe2 	bl	800bd94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	2150      	movs	r1, #80	; 0x50
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f000 fc3c 	bl	800be54 <TIM_ITRx_SetConfig>
      break;
 800b5dc:	e02c      	b.n	800b638 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b5ea:	461a      	mov	r2, r3
 800b5ec:	f000 fc01 	bl	800bdf2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	2160      	movs	r1, #96	; 0x60
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f000 fc2c 	bl	800be54 <TIM_ITRx_SetConfig>
      break;
 800b5fc:	e01c      	b.n	800b638 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b60a:	461a      	mov	r2, r3
 800b60c:	f000 fbc2 	bl	800bd94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	2140      	movs	r1, #64	; 0x40
 800b616:	4618      	mov	r0, r3
 800b618:	f000 fc1c 	bl	800be54 <TIM_ITRx_SetConfig>
      break;
 800b61c:	e00c      	b.n	800b638 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681a      	ldr	r2, [r3, #0]
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	4619      	mov	r1, r3
 800b628:	4610      	mov	r0, r2
 800b62a:	f000 fc13 	bl	800be54 <TIM_ITRx_SetConfig>
      break;
 800b62e:	e003      	b.n	800b638 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b630:	2301      	movs	r3, #1
 800b632:	73fb      	strb	r3, [r7, #15]
      break;
 800b634:	e000      	b.n	800b638 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b636:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2201      	movs	r2, #1
 800b63c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2200      	movs	r2, #0
 800b644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b648:	7bfb      	ldrb	r3, [r7, #15]
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	3710      	adds	r7, #16
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}
 800b652:	bf00      	nop
 800b654:	ffceff88 	.word	0xffceff88
 800b658:	00100040 	.word	0x00100040
 800b65c:	00100030 	.word	0x00100030
 800b660:	00100020 	.word	0x00100020

0800b664 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b664:	b480      	push	{r7}
 800b666:	b083      	sub	sp, #12
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b66c:	bf00      	nop
 800b66e:	370c      	adds	r7, #12
 800b670:	46bd      	mov	sp, r7
 800b672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b676:	4770      	bx	lr

0800b678 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b678:	b480      	push	{r7}
 800b67a:	b083      	sub	sp, #12
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b680:	bf00      	nop
 800b682:	370c      	adds	r7, #12
 800b684:	46bd      	mov	sp, r7
 800b686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68a:	4770      	bx	lr

0800b68c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b68c:	b480      	push	{r7}
 800b68e:	b083      	sub	sp, #12
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b694:	bf00      	nop
 800b696:	370c      	adds	r7, #12
 800b698:	46bd      	mov	sp, r7
 800b69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69e:	4770      	bx	lr

0800b6a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b6a0:	b480      	push	{r7}
 800b6a2:	b083      	sub	sp, #12
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b6a8:	bf00      	nop
 800b6aa:	370c      	adds	r7, #12
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b2:	4770      	bx	lr

0800b6b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	b085      	sub	sp, #20
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
 800b6bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	4a40      	ldr	r2, [pc, #256]	; (800b7c8 <TIM_Base_SetConfig+0x114>)
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d013      	beq.n	800b6f4 <TIM_Base_SetConfig+0x40>
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6d2:	d00f      	beq.n	800b6f4 <TIM_Base_SetConfig+0x40>
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	4a3d      	ldr	r2, [pc, #244]	; (800b7cc <TIM_Base_SetConfig+0x118>)
 800b6d8:	4293      	cmp	r3, r2
 800b6da:	d00b      	beq.n	800b6f4 <TIM_Base_SetConfig+0x40>
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	4a3c      	ldr	r2, [pc, #240]	; (800b7d0 <TIM_Base_SetConfig+0x11c>)
 800b6e0:	4293      	cmp	r3, r2
 800b6e2:	d007      	beq.n	800b6f4 <TIM_Base_SetConfig+0x40>
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	4a3b      	ldr	r2, [pc, #236]	; (800b7d4 <TIM_Base_SetConfig+0x120>)
 800b6e8:	4293      	cmp	r3, r2
 800b6ea:	d003      	beq.n	800b6f4 <TIM_Base_SetConfig+0x40>
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	4a3a      	ldr	r2, [pc, #232]	; (800b7d8 <TIM_Base_SetConfig+0x124>)
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	d108      	bne.n	800b706 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	685b      	ldr	r3, [r3, #4]
 800b700:	68fa      	ldr	r2, [r7, #12]
 800b702:	4313      	orrs	r3, r2
 800b704:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	4a2f      	ldr	r2, [pc, #188]	; (800b7c8 <TIM_Base_SetConfig+0x114>)
 800b70a:	4293      	cmp	r3, r2
 800b70c:	d01f      	beq.n	800b74e <TIM_Base_SetConfig+0x9a>
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b714:	d01b      	beq.n	800b74e <TIM_Base_SetConfig+0x9a>
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	4a2c      	ldr	r2, [pc, #176]	; (800b7cc <TIM_Base_SetConfig+0x118>)
 800b71a:	4293      	cmp	r3, r2
 800b71c:	d017      	beq.n	800b74e <TIM_Base_SetConfig+0x9a>
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	4a2b      	ldr	r2, [pc, #172]	; (800b7d0 <TIM_Base_SetConfig+0x11c>)
 800b722:	4293      	cmp	r3, r2
 800b724:	d013      	beq.n	800b74e <TIM_Base_SetConfig+0x9a>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	4a2a      	ldr	r2, [pc, #168]	; (800b7d4 <TIM_Base_SetConfig+0x120>)
 800b72a:	4293      	cmp	r3, r2
 800b72c:	d00f      	beq.n	800b74e <TIM_Base_SetConfig+0x9a>
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	4a29      	ldr	r2, [pc, #164]	; (800b7d8 <TIM_Base_SetConfig+0x124>)
 800b732:	4293      	cmp	r3, r2
 800b734:	d00b      	beq.n	800b74e <TIM_Base_SetConfig+0x9a>
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	4a28      	ldr	r2, [pc, #160]	; (800b7dc <TIM_Base_SetConfig+0x128>)
 800b73a:	4293      	cmp	r3, r2
 800b73c:	d007      	beq.n	800b74e <TIM_Base_SetConfig+0x9a>
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	4a27      	ldr	r2, [pc, #156]	; (800b7e0 <TIM_Base_SetConfig+0x12c>)
 800b742:	4293      	cmp	r3, r2
 800b744:	d003      	beq.n	800b74e <TIM_Base_SetConfig+0x9a>
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	4a26      	ldr	r2, [pc, #152]	; (800b7e4 <TIM_Base_SetConfig+0x130>)
 800b74a:	4293      	cmp	r3, r2
 800b74c:	d108      	bne.n	800b760 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b754:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	68db      	ldr	r3, [r3, #12]
 800b75a:	68fa      	ldr	r2, [r7, #12]
 800b75c:	4313      	orrs	r3, r2
 800b75e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	695b      	ldr	r3, [r3, #20]
 800b76a:	4313      	orrs	r3, r2
 800b76c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	68fa      	ldr	r2, [r7, #12]
 800b772:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	689a      	ldr	r2, [r3, #8]
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	681a      	ldr	r2, [r3, #0]
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	4a10      	ldr	r2, [pc, #64]	; (800b7c8 <TIM_Base_SetConfig+0x114>)
 800b788:	4293      	cmp	r3, r2
 800b78a:	d00f      	beq.n	800b7ac <TIM_Base_SetConfig+0xf8>
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	4a12      	ldr	r2, [pc, #72]	; (800b7d8 <TIM_Base_SetConfig+0x124>)
 800b790:	4293      	cmp	r3, r2
 800b792:	d00b      	beq.n	800b7ac <TIM_Base_SetConfig+0xf8>
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	4a11      	ldr	r2, [pc, #68]	; (800b7dc <TIM_Base_SetConfig+0x128>)
 800b798:	4293      	cmp	r3, r2
 800b79a:	d007      	beq.n	800b7ac <TIM_Base_SetConfig+0xf8>
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	4a10      	ldr	r2, [pc, #64]	; (800b7e0 <TIM_Base_SetConfig+0x12c>)
 800b7a0:	4293      	cmp	r3, r2
 800b7a2:	d003      	beq.n	800b7ac <TIM_Base_SetConfig+0xf8>
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	4a0f      	ldr	r2, [pc, #60]	; (800b7e4 <TIM_Base_SetConfig+0x130>)
 800b7a8:	4293      	cmp	r3, r2
 800b7aa:	d103      	bne.n	800b7b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	691a      	ldr	r2, [r3, #16]
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2201      	movs	r2, #1
 800b7b8:	615a      	str	r2, [r3, #20]
}
 800b7ba:	bf00      	nop
 800b7bc:	3714      	adds	r7, #20
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c4:	4770      	bx	lr
 800b7c6:	bf00      	nop
 800b7c8:	40010000 	.word	0x40010000
 800b7cc:	40000400 	.word	0x40000400
 800b7d0:	40000800 	.word	0x40000800
 800b7d4:	40000c00 	.word	0x40000c00
 800b7d8:	40010400 	.word	0x40010400
 800b7dc:	40014000 	.word	0x40014000
 800b7e0:	40014400 	.word	0x40014400
 800b7e4:	40014800 	.word	0x40014800

0800b7e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b087      	sub	sp, #28
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
 800b7f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6a1b      	ldr	r3, [r3, #32]
 800b7f6:	f023 0201 	bic.w	r2, r3, #1
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6a1b      	ldr	r3, [r3, #32]
 800b802:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	685b      	ldr	r3, [r3, #4]
 800b808:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	699b      	ldr	r3, [r3, #24]
 800b80e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b810:	68fa      	ldr	r2, [r7, #12]
 800b812:	4b37      	ldr	r3, [pc, #220]	; (800b8f0 <TIM_OC1_SetConfig+0x108>)
 800b814:	4013      	ands	r3, r2
 800b816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	f023 0303 	bic.w	r3, r3, #3
 800b81e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	68fa      	ldr	r2, [r7, #12]
 800b826:	4313      	orrs	r3, r2
 800b828:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b82a:	697b      	ldr	r3, [r7, #20]
 800b82c:	f023 0302 	bic.w	r3, r3, #2
 800b830:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	689b      	ldr	r3, [r3, #8]
 800b836:	697a      	ldr	r2, [r7, #20]
 800b838:	4313      	orrs	r3, r2
 800b83a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	4a2d      	ldr	r2, [pc, #180]	; (800b8f4 <TIM_OC1_SetConfig+0x10c>)
 800b840:	4293      	cmp	r3, r2
 800b842:	d00f      	beq.n	800b864 <TIM_OC1_SetConfig+0x7c>
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	4a2c      	ldr	r2, [pc, #176]	; (800b8f8 <TIM_OC1_SetConfig+0x110>)
 800b848:	4293      	cmp	r3, r2
 800b84a:	d00b      	beq.n	800b864 <TIM_OC1_SetConfig+0x7c>
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	4a2b      	ldr	r2, [pc, #172]	; (800b8fc <TIM_OC1_SetConfig+0x114>)
 800b850:	4293      	cmp	r3, r2
 800b852:	d007      	beq.n	800b864 <TIM_OC1_SetConfig+0x7c>
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	4a2a      	ldr	r2, [pc, #168]	; (800b900 <TIM_OC1_SetConfig+0x118>)
 800b858:	4293      	cmp	r3, r2
 800b85a:	d003      	beq.n	800b864 <TIM_OC1_SetConfig+0x7c>
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	4a29      	ldr	r2, [pc, #164]	; (800b904 <TIM_OC1_SetConfig+0x11c>)
 800b860:	4293      	cmp	r3, r2
 800b862:	d10c      	bne.n	800b87e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b864:	697b      	ldr	r3, [r7, #20]
 800b866:	f023 0308 	bic.w	r3, r3, #8
 800b86a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	68db      	ldr	r3, [r3, #12]
 800b870:	697a      	ldr	r2, [r7, #20]
 800b872:	4313      	orrs	r3, r2
 800b874:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	f023 0304 	bic.w	r3, r3, #4
 800b87c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	4a1c      	ldr	r2, [pc, #112]	; (800b8f4 <TIM_OC1_SetConfig+0x10c>)
 800b882:	4293      	cmp	r3, r2
 800b884:	d00f      	beq.n	800b8a6 <TIM_OC1_SetConfig+0xbe>
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	4a1b      	ldr	r2, [pc, #108]	; (800b8f8 <TIM_OC1_SetConfig+0x110>)
 800b88a:	4293      	cmp	r3, r2
 800b88c:	d00b      	beq.n	800b8a6 <TIM_OC1_SetConfig+0xbe>
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	4a1a      	ldr	r2, [pc, #104]	; (800b8fc <TIM_OC1_SetConfig+0x114>)
 800b892:	4293      	cmp	r3, r2
 800b894:	d007      	beq.n	800b8a6 <TIM_OC1_SetConfig+0xbe>
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	4a19      	ldr	r2, [pc, #100]	; (800b900 <TIM_OC1_SetConfig+0x118>)
 800b89a:	4293      	cmp	r3, r2
 800b89c:	d003      	beq.n	800b8a6 <TIM_OC1_SetConfig+0xbe>
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	4a18      	ldr	r2, [pc, #96]	; (800b904 <TIM_OC1_SetConfig+0x11c>)
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	d111      	bne.n	800b8ca <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b8ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b8ae:	693b      	ldr	r3, [r7, #16]
 800b8b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b8b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	695b      	ldr	r3, [r3, #20]
 800b8ba:	693a      	ldr	r2, [r7, #16]
 800b8bc:	4313      	orrs	r3, r2
 800b8be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	699b      	ldr	r3, [r3, #24]
 800b8c4:	693a      	ldr	r2, [r7, #16]
 800b8c6:	4313      	orrs	r3, r2
 800b8c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	693a      	ldr	r2, [r7, #16]
 800b8ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	68fa      	ldr	r2, [r7, #12]
 800b8d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	685a      	ldr	r2, [r3, #4]
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	697a      	ldr	r2, [r7, #20]
 800b8e2:	621a      	str	r2, [r3, #32]
}
 800b8e4:	bf00      	nop
 800b8e6:	371c      	adds	r7, #28
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ee:	4770      	bx	lr
 800b8f0:	fffeff8f 	.word	0xfffeff8f
 800b8f4:	40010000 	.word	0x40010000
 800b8f8:	40010400 	.word	0x40010400
 800b8fc:	40014000 	.word	0x40014000
 800b900:	40014400 	.word	0x40014400
 800b904:	40014800 	.word	0x40014800

0800b908 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b908:	b480      	push	{r7}
 800b90a:	b087      	sub	sp, #28
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
 800b910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6a1b      	ldr	r3, [r3, #32]
 800b916:	f023 0210 	bic.w	r2, r3, #16
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6a1b      	ldr	r3, [r3, #32]
 800b922:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	685b      	ldr	r3, [r3, #4]
 800b928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	699b      	ldr	r3, [r3, #24]
 800b92e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b930:	68fa      	ldr	r2, [r7, #12]
 800b932:	4b34      	ldr	r3, [pc, #208]	; (800ba04 <TIM_OC2_SetConfig+0xfc>)
 800b934:	4013      	ands	r3, r2
 800b936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b93e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	021b      	lsls	r3, r3, #8
 800b946:	68fa      	ldr	r2, [r7, #12]
 800b948:	4313      	orrs	r3, r2
 800b94a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b94c:	697b      	ldr	r3, [r7, #20]
 800b94e:	f023 0320 	bic.w	r3, r3, #32
 800b952:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	689b      	ldr	r3, [r3, #8]
 800b958:	011b      	lsls	r3, r3, #4
 800b95a:	697a      	ldr	r2, [r7, #20]
 800b95c:	4313      	orrs	r3, r2
 800b95e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	4a29      	ldr	r2, [pc, #164]	; (800ba08 <TIM_OC2_SetConfig+0x100>)
 800b964:	4293      	cmp	r3, r2
 800b966:	d003      	beq.n	800b970 <TIM_OC2_SetConfig+0x68>
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	4a28      	ldr	r2, [pc, #160]	; (800ba0c <TIM_OC2_SetConfig+0x104>)
 800b96c:	4293      	cmp	r3, r2
 800b96e:	d10d      	bne.n	800b98c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b970:	697b      	ldr	r3, [r7, #20]
 800b972:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b976:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	68db      	ldr	r3, [r3, #12]
 800b97c:	011b      	lsls	r3, r3, #4
 800b97e:	697a      	ldr	r2, [r7, #20]
 800b980:	4313      	orrs	r3, r2
 800b982:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b984:	697b      	ldr	r3, [r7, #20]
 800b986:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b98a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	4a1e      	ldr	r2, [pc, #120]	; (800ba08 <TIM_OC2_SetConfig+0x100>)
 800b990:	4293      	cmp	r3, r2
 800b992:	d00f      	beq.n	800b9b4 <TIM_OC2_SetConfig+0xac>
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	4a1d      	ldr	r2, [pc, #116]	; (800ba0c <TIM_OC2_SetConfig+0x104>)
 800b998:	4293      	cmp	r3, r2
 800b99a:	d00b      	beq.n	800b9b4 <TIM_OC2_SetConfig+0xac>
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	4a1c      	ldr	r2, [pc, #112]	; (800ba10 <TIM_OC2_SetConfig+0x108>)
 800b9a0:	4293      	cmp	r3, r2
 800b9a2:	d007      	beq.n	800b9b4 <TIM_OC2_SetConfig+0xac>
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	4a1b      	ldr	r2, [pc, #108]	; (800ba14 <TIM_OC2_SetConfig+0x10c>)
 800b9a8:	4293      	cmp	r3, r2
 800b9aa:	d003      	beq.n	800b9b4 <TIM_OC2_SetConfig+0xac>
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	4a1a      	ldr	r2, [pc, #104]	; (800ba18 <TIM_OC2_SetConfig+0x110>)
 800b9b0:	4293      	cmp	r3, r2
 800b9b2:	d113      	bne.n	800b9dc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b9b4:	693b      	ldr	r3, [r7, #16]
 800b9b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b9ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b9bc:	693b      	ldr	r3, [r7, #16]
 800b9be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b9c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	695b      	ldr	r3, [r3, #20]
 800b9c8:	009b      	lsls	r3, r3, #2
 800b9ca:	693a      	ldr	r2, [r7, #16]
 800b9cc:	4313      	orrs	r3, r2
 800b9ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	699b      	ldr	r3, [r3, #24]
 800b9d4:	009b      	lsls	r3, r3, #2
 800b9d6:	693a      	ldr	r2, [r7, #16]
 800b9d8:	4313      	orrs	r3, r2
 800b9da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	693a      	ldr	r2, [r7, #16]
 800b9e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	68fa      	ldr	r2, [r7, #12]
 800b9e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	685a      	ldr	r2, [r3, #4]
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	697a      	ldr	r2, [r7, #20]
 800b9f4:	621a      	str	r2, [r3, #32]
}
 800b9f6:	bf00      	nop
 800b9f8:	371c      	adds	r7, #28
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba00:	4770      	bx	lr
 800ba02:	bf00      	nop
 800ba04:	feff8fff 	.word	0xfeff8fff
 800ba08:	40010000 	.word	0x40010000
 800ba0c:	40010400 	.word	0x40010400
 800ba10:	40014000 	.word	0x40014000
 800ba14:	40014400 	.word	0x40014400
 800ba18:	40014800 	.word	0x40014800

0800ba1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ba1c:	b480      	push	{r7}
 800ba1e:	b087      	sub	sp, #28
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
 800ba24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	6a1b      	ldr	r3, [r3, #32]
 800ba2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	6a1b      	ldr	r3, [r3, #32]
 800ba36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	685b      	ldr	r3, [r3, #4]
 800ba3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	69db      	ldr	r3, [r3, #28]
 800ba42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ba44:	68fa      	ldr	r2, [r7, #12]
 800ba46:	4b33      	ldr	r3, [pc, #204]	; (800bb14 <TIM_OC3_SetConfig+0xf8>)
 800ba48:	4013      	ands	r3, r2
 800ba4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	f023 0303 	bic.w	r3, r3, #3
 800ba52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	68fa      	ldr	r2, [r7, #12]
 800ba5a:	4313      	orrs	r3, r2
 800ba5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ba5e:	697b      	ldr	r3, [r7, #20]
 800ba60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ba64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	689b      	ldr	r3, [r3, #8]
 800ba6a:	021b      	lsls	r3, r3, #8
 800ba6c:	697a      	ldr	r2, [r7, #20]
 800ba6e:	4313      	orrs	r3, r2
 800ba70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	4a28      	ldr	r2, [pc, #160]	; (800bb18 <TIM_OC3_SetConfig+0xfc>)
 800ba76:	4293      	cmp	r3, r2
 800ba78:	d003      	beq.n	800ba82 <TIM_OC3_SetConfig+0x66>
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	4a27      	ldr	r2, [pc, #156]	; (800bb1c <TIM_OC3_SetConfig+0x100>)
 800ba7e:	4293      	cmp	r3, r2
 800ba80:	d10d      	bne.n	800ba9e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ba82:	697b      	ldr	r3, [r7, #20]
 800ba84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ba88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	68db      	ldr	r3, [r3, #12]
 800ba8e:	021b      	lsls	r3, r3, #8
 800ba90:	697a      	ldr	r2, [r7, #20]
 800ba92:	4313      	orrs	r3, r2
 800ba94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ba9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	4a1d      	ldr	r2, [pc, #116]	; (800bb18 <TIM_OC3_SetConfig+0xfc>)
 800baa2:	4293      	cmp	r3, r2
 800baa4:	d00f      	beq.n	800bac6 <TIM_OC3_SetConfig+0xaa>
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	4a1c      	ldr	r2, [pc, #112]	; (800bb1c <TIM_OC3_SetConfig+0x100>)
 800baaa:	4293      	cmp	r3, r2
 800baac:	d00b      	beq.n	800bac6 <TIM_OC3_SetConfig+0xaa>
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	4a1b      	ldr	r2, [pc, #108]	; (800bb20 <TIM_OC3_SetConfig+0x104>)
 800bab2:	4293      	cmp	r3, r2
 800bab4:	d007      	beq.n	800bac6 <TIM_OC3_SetConfig+0xaa>
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	4a1a      	ldr	r2, [pc, #104]	; (800bb24 <TIM_OC3_SetConfig+0x108>)
 800baba:	4293      	cmp	r3, r2
 800babc:	d003      	beq.n	800bac6 <TIM_OC3_SetConfig+0xaa>
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	4a19      	ldr	r2, [pc, #100]	; (800bb28 <TIM_OC3_SetConfig+0x10c>)
 800bac2:	4293      	cmp	r3, r2
 800bac4:	d113      	bne.n	800baee <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bac6:	693b      	ldr	r3, [r7, #16]
 800bac8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bacc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bace:	693b      	ldr	r3, [r7, #16]
 800bad0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bad4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	695b      	ldr	r3, [r3, #20]
 800bada:	011b      	lsls	r3, r3, #4
 800badc:	693a      	ldr	r2, [r7, #16]
 800bade:	4313      	orrs	r3, r2
 800bae0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	699b      	ldr	r3, [r3, #24]
 800bae6:	011b      	lsls	r3, r3, #4
 800bae8:	693a      	ldr	r2, [r7, #16]
 800baea:	4313      	orrs	r3, r2
 800baec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	693a      	ldr	r2, [r7, #16]
 800baf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	68fa      	ldr	r2, [r7, #12]
 800baf8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	685a      	ldr	r2, [r3, #4]
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	697a      	ldr	r2, [r7, #20]
 800bb06:	621a      	str	r2, [r3, #32]
}
 800bb08:	bf00      	nop
 800bb0a:	371c      	adds	r7, #28
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb12:	4770      	bx	lr
 800bb14:	fffeff8f 	.word	0xfffeff8f
 800bb18:	40010000 	.word	0x40010000
 800bb1c:	40010400 	.word	0x40010400
 800bb20:	40014000 	.word	0x40014000
 800bb24:	40014400 	.word	0x40014400
 800bb28:	40014800 	.word	0x40014800

0800bb2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	b087      	sub	sp, #28
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
 800bb34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6a1b      	ldr	r3, [r3, #32]
 800bb3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6a1b      	ldr	r3, [r3, #32]
 800bb46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	685b      	ldr	r3, [r3, #4]
 800bb4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	69db      	ldr	r3, [r3, #28]
 800bb52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bb54:	68fa      	ldr	r2, [r7, #12]
 800bb56:	4b24      	ldr	r3, [pc, #144]	; (800bbe8 <TIM_OC4_SetConfig+0xbc>)
 800bb58:	4013      	ands	r3, r2
 800bb5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	021b      	lsls	r3, r3, #8
 800bb6a:	68fa      	ldr	r2, [r7, #12]
 800bb6c:	4313      	orrs	r3, r2
 800bb6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bb70:	693b      	ldr	r3, [r7, #16]
 800bb72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bb76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	689b      	ldr	r3, [r3, #8]
 800bb7c:	031b      	lsls	r3, r3, #12
 800bb7e:	693a      	ldr	r2, [r7, #16]
 800bb80:	4313      	orrs	r3, r2
 800bb82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	4a19      	ldr	r2, [pc, #100]	; (800bbec <TIM_OC4_SetConfig+0xc0>)
 800bb88:	4293      	cmp	r3, r2
 800bb8a:	d00f      	beq.n	800bbac <TIM_OC4_SetConfig+0x80>
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	4a18      	ldr	r2, [pc, #96]	; (800bbf0 <TIM_OC4_SetConfig+0xc4>)
 800bb90:	4293      	cmp	r3, r2
 800bb92:	d00b      	beq.n	800bbac <TIM_OC4_SetConfig+0x80>
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	4a17      	ldr	r2, [pc, #92]	; (800bbf4 <TIM_OC4_SetConfig+0xc8>)
 800bb98:	4293      	cmp	r3, r2
 800bb9a:	d007      	beq.n	800bbac <TIM_OC4_SetConfig+0x80>
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	4a16      	ldr	r2, [pc, #88]	; (800bbf8 <TIM_OC4_SetConfig+0xcc>)
 800bba0:	4293      	cmp	r3, r2
 800bba2:	d003      	beq.n	800bbac <TIM_OC4_SetConfig+0x80>
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	4a15      	ldr	r2, [pc, #84]	; (800bbfc <TIM_OC4_SetConfig+0xd0>)
 800bba8:	4293      	cmp	r3, r2
 800bbaa:	d109      	bne.n	800bbc0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bbac:	697b      	ldr	r3, [r7, #20]
 800bbae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bbb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	695b      	ldr	r3, [r3, #20]
 800bbb8:	019b      	lsls	r3, r3, #6
 800bbba:	697a      	ldr	r2, [r7, #20]
 800bbbc:	4313      	orrs	r3, r2
 800bbbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	697a      	ldr	r2, [r7, #20]
 800bbc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	68fa      	ldr	r2, [r7, #12]
 800bbca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	685a      	ldr	r2, [r3, #4]
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	693a      	ldr	r2, [r7, #16]
 800bbd8:	621a      	str	r2, [r3, #32]
}
 800bbda:	bf00      	nop
 800bbdc:	371c      	adds	r7, #28
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe4:	4770      	bx	lr
 800bbe6:	bf00      	nop
 800bbe8:	feff8fff 	.word	0xfeff8fff
 800bbec:	40010000 	.word	0x40010000
 800bbf0:	40010400 	.word	0x40010400
 800bbf4:	40014000 	.word	0x40014000
 800bbf8:	40014400 	.word	0x40014400
 800bbfc:	40014800 	.word	0x40014800

0800bc00 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bc00:	b480      	push	{r7}
 800bc02:	b087      	sub	sp, #28
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
 800bc08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	6a1b      	ldr	r3, [r3, #32]
 800bc0e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6a1b      	ldr	r3, [r3, #32]
 800bc1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	685b      	ldr	r3, [r3, #4]
 800bc20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bc28:	68fa      	ldr	r2, [r7, #12]
 800bc2a:	4b21      	ldr	r3, [pc, #132]	; (800bcb0 <TIM_OC5_SetConfig+0xb0>)
 800bc2c:	4013      	ands	r3, r2
 800bc2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	68fa      	ldr	r2, [r7, #12]
 800bc36:	4313      	orrs	r3, r2
 800bc38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bc3a:	693b      	ldr	r3, [r7, #16]
 800bc3c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800bc40:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	689b      	ldr	r3, [r3, #8]
 800bc46:	041b      	lsls	r3, r3, #16
 800bc48:	693a      	ldr	r2, [r7, #16]
 800bc4a:	4313      	orrs	r3, r2
 800bc4c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	4a18      	ldr	r2, [pc, #96]	; (800bcb4 <TIM_OC5_SetConfig+0xb4>)
 800bc52:	4293      	cmp	r3, r2
 800bc54:	d00f      	beq.n	800bc76 <TIM_OC5_SetConfig+0x76>
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	4a17      	ldr	r2, [pc, #92]	; (800bcb8 <TIM_OC5_SetConfig+0xb8>)
 800bc5a:	4293      	cmp	r3, r2
 800bc5c:	d00b      	beq.n	800bc76 <TIM_OC5_SetConfig+0x76>
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	4a16      	ldr	r2, [pc, #88]	; (800bcbc <TIM_OC5_SetConfig+0xbc>)
 800bc62:	4293      	cmp	r3, r2
 800bc64:	d007      	beq.n	800bc76 <TIM_OC5_SetConfig+0x76>
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	4a15      	ldr	r2, [pc, #84]	; (800bcc0 <TIM_OC5_SetConfig+0xc0>)
 800bc6a:	4293      	cmp	r3, r2
 800bc6c:	d003      	beq.n	800bc76 <TIM_OC5_SetConfig+0x76>
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	4a14      	ldr	r2, [pc, #80]	; (800bcc4 <TIM_OC5_SetConfig+0xc4>)
 800bc72:	4293      	cmp	r3, r2
 800bc74:	d109      	bne.n	800bc8a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bc76:	697b      	ldr	r3, [r7, #20]
 800bc78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bc7c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	695b      	ldr	r3, [r3, #20]
 800bc82:	021b      	lsls	r3, r3, #8
 800bc84:	697a      	ldr	r2, [r7, #20]
 800bc86:	4313      	orrs	r3, r2
 800bc88:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	697a      	ldr	r2, [r7, #20]
 800bc8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	68fa      	ldr	r2, [r7, #12]
 800bc94:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	685a      	ldr	r2, [r3, #4]
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	693a      	ldr	r2, [r7, #16]
 800bca2:	621a      	str	r2, [r3, #32]
}
 800bca4:	bf00      	nop
 800bca6:	371c      	adds	r7, #28
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcae:	4770      	bx	lr
 800bcb0:	fffeff8f 	.word	0xfffeff8f
 800bcb4:	40010000 	.word	0x40010000
 800bcb8:	40010400 	.word	0x40010400
 800bcbc:	40014000 	.word	0x40014000
 800bcc0:	40014400 	.word	0x40014400
 800bcc4:	40014800 	.word	0x40014800

0800bcc8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bcc8:	b480      	push	{r7}
 800bcca:	b087      	sub	sp, #28
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
 800bcd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6a1b      	ldr	r3, [r3, #32]
 800bcd6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	6a1b      	ldr	r3, [r3, #32]
 800bce2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	685b      	ldr	r3, [r3, #4]
 800bce8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bcf0:	68fa      	ldr	r2, [r7, #12]
 800bcf2:	4b22      	ldr	r3, [pc, #136]	; (800bd7c <TIM_OC6_SetConfig+0xb4>)
 800bcf4:	4013      	ands	r3, r2
 800bcf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	021b      	lsls	r3, r3, #8
 800bcfe:	68fa      	ldr	r2, [r7, #12]
 800bd00:	4313      	orrs	r3, r2
 800bd02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bd04:	693b      	ldr	r3, [r7, #16]
 800bd06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bd0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	689b      	ldr	r3, [r3, #8]
 800bd10:	051b      	lsls	r3, r3, #20
 800bd12:	693a      	ldr	r2, [r7, #16]
 800bd14:	4313      	orrs	r3, r2
 800bd16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	4a19      	ldr	r2, [pc, #100]	; (800bd80 <TIM_OC6_SetConfig+0xb8>)
 800bd1c:	4293      	cmp	r3, r2
 800bd1e:	d00f      	beq.n	800bd40 <TIM_OC6_SetConfig+0x78>
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	4a18      	ldr	r2, [pc, #96]	; (800bd84 <TIM_OC6_SetConfig+0xbc>)
 800bd24:	4293      	cmp	r3, r2
 800bd26:	d00b      	beq.n	800bd40 <TIM_OC6_SetConfig+0x78>
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	4a17      	ldr	r2, [pc, #92]	; (800bd88 <TIM_OC6_SetConfig+0xc0>)
 800bd2c:	4293      	cmp	r3, r2
 800bd2e:	d007      	beq.n	800bd40 <TIM_OC6_SetConfig+0x78>
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	4a16      	ldr	r2, [pc, #88]	; (800bd8c <TIM_OC6_SetConfig+0xc4>)
 800bd34:	4293      	cmp	r3, r2
 800bd36:	d003      	beq.n	800bd40 <TIM_OC6_SetConfig+0x78>
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	4a15      	ldr	r2, [pc, #84]	; (800bd90 <TIM_OC6_SetConfig+0xc8>)
 800bd3c:	4293      	cmp	r3, r2
 800bd3e:	d109      	bne.n	800bd54 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bd46:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	695b      	ldr	r3, [r3, #20]
 800bd4c:	029b      	lsls	r3, r3, #10
 800bd4e:	697a      	ldr	r2, [r7, #20]
 800bd50:	4313      	orrs	r3, r2
 800bd52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	697a      	ldr	r2, [r7, #20]
 800bd58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	68fa      	ldr	r2, [r7, #12]
 800bd5e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	685a      	ldr	r2, [r3, #4]
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	693a      	ldr	r2, [r7, #16]
 800bd6c:	621a      	str	r2, [r3, #32]
}
 800bd6e:	bf00      	nop
 800bd70:	371c      	adds	r7, #28
 800bd72:	46bd      	mov	sp, r7
 800bd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd78:	4770      	bx	lr
 800bd7a:	bf00      	nop
 800bd7c:	feff8fff 	.word	0xfeff8fff
 800bd80:	40010000 	.word	0x40010000
 800bd84:	40010400 	.word	0x40010400
 800bd88:	40014000 	.word	0x40014000
 800bd8c:	40014400 	.word	0x40014400
 800bd90:	40014800 	.word	0x40014800

0800bd94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bd94:	b480      	push	{r7}
 800bd96:	b087      	sub	sp, #28
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	60f8      	str	r0, [r7, #12]
 800bd9c:	60b9      	str	r1, [r7, #8]
 800bd9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	6a1b      	ldr	r3, [r3, #32]
 800bda4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	6a1b      	ldr	r3, [r3, #32]
 800bdaa:	f023 0201 	bic.w	r2, r3, #1
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	699b      	ldr	r3, [r3, #24]
 800bdb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bdb8:	693b      	ldr	r3, [r7, #16]
 800bdba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bdbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	011b      	lsls	r3, r3, #4
 800bdc4:	693a      	ldr	r2, [r7, #16]
 800bdc6:	4313      	orrs	r3, r2
 800bdc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	f023 030a 	bic.w	r3, r3, #10
 800bdd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bdd2:	697a      	ldr	r2, [r7, #20]
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	4313      	orrs	r3, r2
 800bdd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	693a      	ldr	r2, [r7, #16]
 800bdde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	697a      	ldr	r2, [r7, #20]
 800bde4:	621a      	str	r2, [r3, #32]
}
 800bde6:	bf00      	nop
 800bde8:	371c      	adds	r7, #28
 800bdea:	46bd      	mov	sp, r7
 800bdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf0:	4770      	bx	lr

0800bdf2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bdf2:	b480      	push	{r7}
 800bdf4:	b087      	sub	sp, #28
 800bdf6:	af00      	add	r7, sp, #0
 800bdf8:	60f8      	str	r0, [r7, #12]
 800bdfa:	60b9      	str	r1, [r7, #8]
 800bdfc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	6a1b      	ldr	r3, [r3, #32]
 800be02:	f023 0210 	bic.w	r2, r3, #16
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	699b      	ldr	r3, [r3, #24]
 800be0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	6a1b      	ldr	r3, [r3, #32]
 800be14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800be16:	697b      	ldr	r3, [r7, #20]
 800be18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800be1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	031b      	lsls	r3, r3, #12
 800be22:	697a      	ldr	r2, [r7, #20]
 800be24:	4313      	orrs	r3, r2
 800be26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800be28:	693b      	ldr	r3, [r7, #16]
 800be2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800be2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	011b      	lsls	r3, r3, #4
 800be34:	693a      	ldr	r2, [r7, #16]
 800be36:	4313      	orrs	r3, r2
 800be38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	697a      	ldr	r2, [r7, #20]
 800be3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	693a      	ldr	r2, [r7, #16]
 800be44:	621a      	str	r2, [r3, #32]
}
 800be46:	bf00      	nop
 800be48:	371c      	adds	r7, #28
 800be4a:	46bd      	mov	sp, r7
 800be4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be50:	4770      	bx	lr
	...

0800be54 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800be54:	b480      	push	{r7}
 800be56:	b085      	sub	sp, #20
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
 800be5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	689b      	ldr	r3, [r3, #8]
 800be62:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800be64:	68fa      	ldr	r2, [r7, #12]
 800be66:	4b09      	ldr	r3, [pc, #36]	; (800be8c <TIM_ITRx_SetConfig+0x38>)
 800be68:	4013      	ands	r3, r2
 800be6a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800be6c:	683a      	ldr	r2, [r7, #0]
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	4313      	orrs	r3, r2
 800be72:	f043 0307 	orr.w	r3, r3, #7
 800be76:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	68fa      	ldr	r2, [r7, #12]
 800be7c:	609a      	str	r2, [r3, #8]
}
 800be7e:	bf00      	nop
 800be80:	3714      	adds	r7, #20
 800be82:	46bd      	mov	sp, r7
 800be84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be88:	4770      	bx	lr
 800be8a:	bf00      	nop
 800be8c:	ffcfff8f 	.word	0xffcfff8f

0800be90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800be90:	b480      	push	{r7}
 800be92:	b087      	sub	sp, #28
 800be94:	af00      	add	r7, sp, #0
 800be96:	60f8      	str	r0, [r7, #12]
 800be98:	60b9      	str	r1, [r7, #8]
 800be9a:	607a      	str	r2, [r7, #4]
 800be9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	689b      	ldr	r3, [r3, #8]
 800bea2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bea4:	697b      	ldr	r3, [r7, #20]
 800bea6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800beaa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	021a      	lsls	r2, r3, #8
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	431a      	orrs	r2, r3
 800beb4:	68bb      	ldr	r3, [r7, #8]
 800beb6:	4313      	orrs	r3, r2
 800beb8:	697a      	ldr	r2, [r7, #20]
 800beba:	4313      	orrs	r3, r2
 800bebc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	697a      	ldr	r2, [r7, #20]
 800bec2:	609a      	str	r2, [r3, #8]
}
 800bec4:	bf00      	nop
 800bec6:	371c      	adds	r7, #28
 800bec8:	46bd      	mov	sp, r7
 800beca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bece:	4770      	bx	lr

0800bed0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bed0:	b480      	push	{r7}
 800bed2:	b087      	sub	sp, #28
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	60f8      	str	r0, [r7, #12]
 800bed8:	60b9      	str	r1, [r7, #8]
 800beda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bedc:	68bb      	ldr	r3, [r7, #8]
 800bede:	f003 031f 	and.w	r3, r3, #31
 800bee2:	2201      	movs	r2, #1
 800bee4:	fa02 f303 	lsl.w	r3, r2, r3
 800bee8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	6a1a      	ldr	r2, [r3, #32]
 800beee:	697b      	ldr	r3, [r7, #20]
 800bef0:	43db      	mvns	r3, r3
 800bef2:	401a      	ands	r2, r3
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	6a1a      	ldr	r2, [r3, #32]
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	f003 031f 	and.w	r3, r3, #31
 800bf02:	6879      	ldr	r1, [r7, #4]
 800bf04:	fa01 f303 	lsl.w	r3, r1, r3
 800bf08:	431a      	orrs	r2, r3
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	621a      	str	r2, [r3, #32]
}
 800bf0e:	bf00      	nop
 800bf10:	371c      	adds	r7, #28
 800bf12:	46bd      	mov	sp, r7
 800bf14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf18:	4770      	bx	lr
	...

0800bf1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bf1c:	b480      	push	{r7}
 800bf1e:	b085      	sub	sp, #20
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
 800bf24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf2c:	2b01      	cmp	r3, #1
 800bf2e:	d101      	bne.n	800bf34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bf30:	2302      	movs	r3, #2
 800bf32:	e06d      	b.n	800c010 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2201      	movs	r2, #1
 800bf38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2202      	movs	r2, #2
 800bf40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	685b      	ldr	r3, [r3, #4]
 800bf4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	689b      	ldr	r3, [r3, #8]
 800bf52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	4a30      	ldr	r2, [pc, #192]	; (800c01c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bf5a:	4293      	cmp	r3, r2
 800bf5c:	d004      	beq.n	800bf68 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	4a2f      	ldr	r2, [pc, #188]	; (800c020 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bf64:	4293      	cmp	r3, r2
 800bf66:	d108      	bne.n	800bf7a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bf6e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	685b      	ldr	r3, [r3, #4]
 800bf74:	68fa      	ldr	r2, [r7, #12]
 800bf76:	4313      	orrs	r3, r2
 800bf78:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf80:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	68fa      	ldr	r2, [r7, #12]
 800bf88:	4313      	orrs	r3, r2
 800bf8a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	68fa      	ldr	r2, [r7, #12]
 800bf92:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	4a20      	ldr	r2, [pc, #128]	; (800c01c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bf9a:	4293      	cmp	r3, r2
 800bf9c:	d022      	beq.n	800bfe4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bfa6:	d01d      	beq.n	800bfe4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	4a1d      	ldr	r2, [pc, #116]	; (800c024 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bfae:	4293      	cmp	r3, r2
 800bfb0:	d018      	beq.n	800bfe4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	4a1c      	ldr	r2, [pc, #112]	; (800c028 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bfb8:	4293      	cmp	r3, r2
 800bfba:	d013      	beq.n	800bfe4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	4a1a      	ldr	r2, [pc, #104]	; (800c02c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bfc2:	4293      	cmp	r3, r2
 800bfc4:	d00e      	beq.n	800bfe4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	4a15      	ldr	r2, [pc, #84]	; (800c020 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bfcc:	4293      	cmp	r3, r2
 800bfce:	d009      	beq.n	800bfe4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	4a16      	ldr	r2, [pc, #88]	; (800c030 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bfd6:	4293      	cmp	r3, r2
 800bfd8:	d004      	beq.n	800bfe4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	4a15      	ldr	r2, [pc, #84]	; (800c034 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bfe0:	4293      	cmp	r3, r2
 800bfe2:	d10c      	bne.n	800bffe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bfea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	689b      	ldr	r3, [r3, #8]
 800bff0:	68ba      	ldr	r2, [r7, #8]
 800bff2:	4313      	orrs	r3, r2
 800bff4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	68ba      	ldr	r2, [r7, #8]
 800bffc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	2201      	movs	r2, #1
 800c002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2200      	movs	r2, #0
 800c00a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c00e:	2300      	movs	r3, #0
}
 800c010:	4618      	mov	r0, r3
 800c012:	3714      	adds	r7, #20
 800c014:	46bd      	mov	sp, r7
 800c016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01a:	4770      	bx	lr
 800c01c:	40010000 	.word	0x40010000
 800c020:	40010400 	.word	0x40010400
 800c024:	40000400 	.word	0x40000400
 800c028:	40000800 	.word	0x40000800
 800c02c:	40000c00 	.word	0x40000c00
 800c030:	40001800 	.word	0x40001800
 800c034:	40014000 	.word	0x40014000

0800c038 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c038:	b480      	push	{r7}
 800c03a:	b083      	sub	sp, #12
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c040:	bf00      	nop
 800c042:	370c      	adds	r7, #12
 800c044:	46bd      	mov	sp, r7
 800c046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04a:	4770      	bx	lr

0800c04c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c04c:	b480      	push	{r7}
 800c04e:	b083      	sub	sp, #12
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c054:	bf00      	nop
 800c056:	370c      	adds	r7, #12
 800c058:	46bd      	mov	sp, r7
 800c05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05e:	4770      	bx	lr

0800c060 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c060:	b480      	push	{r7}
 800c062:	b083      	sub	sp, #12
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c068:	bf00      	nop
 800c06a:	370c      	adds	r7, #12
 800c06c:	46bd      	mov	sp, r7
 800c06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c072:	4770      	bx	lr

0800c074 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b082      	sub	sp, #8
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d101      	bne.n	800c086 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c082:	2301      	movs	r3, #1
 800c084:	e042      	b.n	800c10c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d106      	bne.n	800c09e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2200      	movs	r2, #0
 800c094:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f7f6 f98b 	bl	80023b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2224      	movs	r2, #36	; 0x24
 800c0a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	681a      	ldr	r2, [r3, #0]
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	f022 0201 	bic.w	r2, r2, #1
 800c0b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f000 fc94 	bl	800c9e4 <UART_SetConfig>
 800c0bc:	4603      	mov	r3, r0
 800c0be:	2b01      	cmp	r3, #1
 800c0c0:	d101      	bne.n	800c0c6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c0c2:	2301      	movs	r3, #1
 800c0c4:	e022      	b.n	800c10c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d002      	beq.n	800c0d4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f001 f9f0 	bl	800d4b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	685a      	ldr	r2, [r3, #4]
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c0e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	689a      	ldr	r2, [r3, #8]
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c0f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	681a      	ldr	r2, [r3, #0]
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f042 0201 	orr.w	r2, r2, #1
 800c102:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f001 fa77 	bl	800d5f8 <UART_CheckIdleState>
 800c10a:	4603      	mov	r3, r0
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	3708      	adds	r7, #8
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}

0800c114 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b08a      	sub	sp, #40	; 0x28
 800c118:	af02      	add	r7, sp, #8
 800c11a:	60f8      	str	r0, [r7, #12]
 800c11c:	60b9      	str	r1, [r7, #8]
 800c11e:	603b      	str	r3, [r7, #0]
 800c120:	4613      	mov	r3, r2
 800c122:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c12a:	2b20      	cmp	r3, #32
 800c12c:	d17b      	bne.n	800c226 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800c12e:	68bb      	ldr	r3, [r7, #8]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d002      	beq.n	800c13a <HAL_UART_Transmit+0x26>
 800c134:	88fb      	ldrh	r3, [r7, #6]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d101      	bne.n	800c13e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800c13a:	2301      	movs	r3, #1
 800c13c:	e074      	b.n	800c228 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	2200      	movs	r2, #0
 800c142:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	2221      	movs	r2, #33	; 0x21
 800c14a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c14e:	f7f6 fc7d 	bl	8002a4c <HAL_GetTick>
 800c152:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	88fa      	ldrh	r2, [r7, #6]
 800c158:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	88fa      	ldrh	r2, [r7, #6]
 800c160:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	689b      	ldr	r3, [r3, #8]
 800c168:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c16c:	d108      	bne.n	800c180 <HAL_UART_Transmit+0x6c>
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	691b      	ldr	r3, [r3, #16]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d104      	bne.n	800c180 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c176:	2300      	movs	r3, #0
 800c178:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	61bb      	str	r3, [r7, #24]
 800c17e:	e003      	b.n	800c188 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c184:	2300      	movs	r3, #0
 800c186:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c188:	e030      	b.n	800c1ec <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	9300      	str	r3, [sp, #0]
 800c18e:	697b      	ldr	r3, [r7, #20]
 800c190:	2200      	movs	r2, #0
 800c192:	2180      	movs	r1, #128	; 0x80
 800c194:	68f8      	ldr	r0, [r7, #12]
 800c196:	f001 fad9 	bl	800d74c <UART_WaitOnFlagUntilTimeout>
 800c19a:	4603      	mov	r3, r0
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d005      	beq.n	800c1ac <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	2220      	movs	r2, #32
 800c1a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800c1a8:	2303      	movs	r3, #3
 800c1aa:	e03d      	b.n	800c228 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800c1ac:	69fb      	ldr	r3, [r7, #28]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d10b      	bne.n	800c1ca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c1b2:	69bb      	ldr	r3, [r7, #24]
 800c1b4:	881b      	ldrh	r3, [r3, #0]
 800c1b6:	461a      	mov	r2, r3
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c1c0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c1c2:	69bb      	ldr	r3, [r7, #24]
 800c1c4:	3302      	adds	r3, #2
 800c1c6:	61bb      	str	r3, [r7, #24]
 800c1c8:	e007      	b.n	800c1da <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c1ca:	69fb      	ldr	r3, [r7, #28]
 800c1cc:	781a      	ldrb	r2, [r3, #0]
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c1d4:	69fb      	ldr	r3, [r7, #28]
 800c1d6:	3301      	adds	r3, #1
 800c1d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c1e0:	b29b      	uxth	r3, r3
 800c1e2:	3b01      	subs	r3, #1
 800c1e4:	b29a      	uxth	r2, r3
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c1f2:	b29b      	uxth	r3, r3
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d1c8      	bne.n	800c18a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	9300      	str	r3, [sp, #0]
 800c1fc:	697b      	ldr	r3, [r7, #20]
 800c1fe:	2200      	movs	r2, #0
 800c200:	2140      	movs	r1, #64	; 0x40
 800c202:	68f8      	ldr	r0, [r7, #12]
 800c204:	f001 faa2 	bl	800d74c <UART_WaitOnFlagUntilTimeout>
 800c208:	4603      	mov	r3, r0
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d005      	beq.n	800c21a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	2220      	movs	r2, #32
 800c212:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800c216:	2303      	movs	r3, #3
 800c218:	e006      	b.n	800c228 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	2220      	movs	r2, #32
 800c21e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800c222:	2300      	movs	r3, #0
 800c224:	e000      	b.n	800c228 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800c226:	2302      	movs	r3, #2
  }
}
 800c228:	4618      	mov	r0, r3
 800c22a:	3720      	adds	r7, #32
 800c22c:	46bd      	mov	sp, r7
 800c22e:	bd80      	pop	{r7, pc}

0800c230 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b0ba      	sub	sp, #232	; 0xe8
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	69db      	ldr	r3, [r3, #28]
 800c23e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	689b      	ldr	r3, [r3, #8]
 800c252:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c256:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c25a:	f640 030f 	movw	r3, #2063	; 0x80f
 800c25e:	4013      	ands	r3, r2
 800c260:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c264:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d11b      	bne.n	800c2a4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c26c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c270:	f003 0320 	and.w	r3, r3, #32
 800c274:	2b00      	cmp	r3, #0
 800c276:	d015      	beq.n	800c2a4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c27c:	f003 0320 	and.w	r3, r3, #32
 800c280:	2b00      	cmp	r3, #0
 800c282:	d105      	bne.n	800c290 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c284:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d009      	beq.n	800c2a4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c294:	2b00      	cmp	r3, #0
 800c296:	f000 8377 	beq.w	800c988 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c29e:	6878      	ldr	r0, [r7, #4]
 800c2a0:	4798      	blx	r3
      }
      return;
 800c2a2:	e371      	b.n	800c988 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c2a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	f000 8123 	beq.w	800c4f4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c2ae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c2b2:	4b8d      	ldr	r3, [pc, #564]	; (800c4e8 <HAL_UART_IRQHandler+0x2b8>)
 800c2b4:	4013      	ands	r3, r2
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d106      	bne.n	800c2c8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c2ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c2be:	4b8b      	ldr	r3, [pc, #556]	; (800c4ec <HAL_UART_IRQHandler+0x2bc>)
 800c2c0:	4013      	ands	r3, r2
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	f000 8116 	beq.w	800c4f4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c2c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2cc:	f003 0301 	and.w	r3, r3, #1
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d011      	beq.n	800c2f8 <HAL_UART_IRQHandler+0xc8>
 800c2d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c2d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d00b      	beq.n	800c2f8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	2201      	movs	r2, #1
 800c2e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c2ee:	f043 0201 	orr.w	r2, r3, #1
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c2f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2fc:	f003 0302 	and.w	r3, r3, #2
 800c300:	2b00      	cmp	r3, #0
 800c302:	d011      	beq.n	800c328 <HAL_UART_IRQHandler+0xf8>
 800c304:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c308:	f003 0301 	and.w	r3, r3, #1
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d00b      	beq.n	800c328 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	2202      	movs	r2, #2
 800c316:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c31e:	f043 0204 	orr.w	r2, r3, #4
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c32c:	f003 0304 	and.w	r3, r3, #4
 800c330:	2b00      	cmp	r3, #0
 800c332:	d011      	beq.n	800c358 <HAL_UART_IRQHandler+0x128>
 800c334:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c338:	f003 0301 	and.w	r3, r3, #1
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d00b      	beq.n	800c358 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	2204      	movs	r2, #4
 800c346:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c34e:	f043 0202 	orr.w	r2, r3, #2
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c35c:	f003 0308 	and.w	r3, r3, #8
 800c360:	2b00      	cmp	r3, #0
 800c362:	d017      	beq.n	800c394 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c368:	f003 0320 	and.w	r3, r3, #32
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d105      	bne.n	800c37c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c370:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c374:	4b5c      	ldr	r3, [pc, #368]	; (800c4e8 <HAL_UART_IRQHandler+0x2b8>)
 800c376:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d00b      	beq.n	800c394 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	2208      	movs	r2, #8
 800c382:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c38a:	f043 0208 	orr.w	r2, r3, #8
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c398:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d012      	beq.n	800c3c6 <HAL_UART_IRQHandler+0x196>
 800c3a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d00c      	beq.n	800c3c6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c3b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c3bc:	f043 0220 	orr.w	r2, r3, #32
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	f000 82dd 	beq.w	800c98c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c3d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3d6:	f003 0320 	and.w	r3, r3, #32
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d013      	beq.n	800c406 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c3de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3e2:	f003 0320 	and.w	r3, r3, #32
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d105      	bne.n	800c3f6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c3ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c3ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d007      	beq.n	800c406 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d003      	beq.n	800c406 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c40c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	689b      	ldr	r3, [r3, #8]
 800c416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c41a:	2b40      	cmp	r3, #64	; 0x40
 800c41c:	d005      	beq.n	800c42a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c41e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c422:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c426:	2b00      	cmp	r3, #0
 800c428:	d054      	beq.n	800c4d4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c42a:	6878      	ldr	r0, [r7, #4]
 800c42c:	f001 f9f6 	bl	800d81c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	689b      	ldr	r3, [r3, #8]
 800c436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c43a:	2b40      	cmp	r3, #64	; 0x40
 800c43c:	d146      	bne.n	800c4cc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	3308      	adds	r3, #8
 800c444:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c448:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c44c:	e853 3f00 	ldrex	r3, [r3]
 800c450:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c454:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c458:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c45c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	3308      	adds	r3, #8
 800c466:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c46a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c46e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c472:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c476:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c47a:	e841 2300 	strex	r3, r2, [r1]
 800c47e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c482:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c486:	2b00      	cmp	r3, #0
 800c488:	d1d9      	bne.n	800c43e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c490:	2b00      	cmp	r3, #0
 800c492:	d017      	beq.n	800c4c4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c49a:	4a15      	ldr	r2, [pc, #84]	; (800c4f0 <HAL_UART_IRQHandler+0x2c0>)
 800c49c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	f7f8 fda1 	bl	8004fec <HAL_DMA_Abort_IT>
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d019      	beq.n	800c4e4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c4b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4b8:	687a      	ldr	r2, [r7, #4]
 800c4ba:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800c4be:	4610      	mov	r0, r2
 800c4c0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4c2:	e00f      	b.n	800c4e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c4c4:	6878      	ldr	r0, [r7, #4]
 800c4c6:	f000 fa77 	bl	800c9b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4ca:	e00b      	b.n	800c4e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c4cc:	6878      	ldr	r0, [r7, #4]
 800c4ce:	f000 fa73 	bl	800c9b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4d2:	e007      	b.n	800c4e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c4d4:	6878      	ldr	r0, [r7, #4]
 800c4d6:	f000 fa6f 	bl	800c9b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	2200      	movs	r2, #0
 800c4de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800c4e2:	e253      	b.n	800c98c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4e4:	bf00      	nop
    return;
 800c4e6:	e251      	b.n	800c98c <HAL_UART_IRQHandler+0x75c>
 800c4e8:	10000001 	.word	0x10000001
 800c4ec:	04000120 	.word	0x04000120
 800c4f0:	0800d8e9 	.word	0x0800d8e9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4f8:	2b01      	cmp	r3, #1
 800c4fa:	f040 81e7 	bne.w	800c8cc <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c4fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c502:	f003 0310 	and.w	r3, r3, #16
 800c506:	2b00      	cmp	r3, #0
 800c508:	f000 81e0 	beq.w	800c8cc <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c50c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c510:	f003 0310 	and.w	r3, r3, #16
 800c514:	2b00      	cmp	r3, #0
 800c516:	f000 81d9 	beq.w	800c8cc <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	2210      	movs	r2, #16
 800c520:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	689b      	ldr	r3, [r3, #8]
 800c528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c52c:	2b40      	cmp	r3, #64	; 0x40
 800c52e:	f040 8151 	bne.w	800c7d4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	4a96      	ldr	r2, [pc, #600]	; (800c794 <HAL_UART_IRQHandler+0x564>)
 800c53c:	4293      	cmp	r3, r2
 800c53e:	d068      	beq.n	800c612 <HAL_UART_IRQHandler+0x3e2>
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	4a93      	ldr	r2, [pc, #588]	; (800c798 <HAL_UART_IRQHandler+0x568>)
 800c54a:	4293      	cmp	r3, r2
 800c54c:	d061      	beq.n	800c612 <HAL_UART_IRQHandler+0x3e2>
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	4a91      	ldr	r2, [pc, #580]	; (800c79c <HAL_UART_IRQHandler+0x56c>)
 800c558:	4293      	cmp	r3, r2
 800c55a:	d05a      	beq.n	800c612 <HAL_UART_IRQHandler+0x3e2>
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	4a8e      	ldr	r2, [pc, #568]	; (800c7a0 <HAL_UART_IRQHandler+0x570>)
 800c566:	4293      	cmp	r3, r2
 800c568:	d053      	beq.n	800c612 <HAL_UART_IRQHandler+0x3e2>
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	4a8c      	ldr	r2, [pc, #560]	; (800c7a4 <HAL_UART_IRQHandler+0x574>)
 800c574:	4293      	cmp	r3, r2
 800c576:	d04c      	beq.n	800c612 <HAL_UART_IRQHandler+0x3e2>
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	4a89      	ldr	r2, [pc, #548]	; (800c7a8 <HAL_UART_IRQHandler+0x578>)
 800c582:	4293      	cmp	r3, r2
 800c584:	d045      	beq.n	800c612 <HAL_UART_IRQHandler+0x3e2>
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	4a87      	ldr	r2, [pc, #540]	; (800c7ac <HAL_UART_IRQHandler+0x57c>)
 800c590:	4293      	cmp	r3, r2
 800c592:	d03e      	beq.n	800c612 <HAL_UART_IRQHandler+0x3e2>
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	4a84      	ldr	r2, [pc, #528]	; (800c7b0 <HAL_UART_IRQHandler+0x580>)
 800c59e:	4293      	cmp	r3, r2
 800c5a0:	d037      	beq.n	800c612 <HAL_UART_IRQHandler+0x3e2>
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	4a82      	ldr	r2, [pc, #520]	; (800c7b4 <HAL_UART_IRQHandler+0x584>)
 800c5ac:	4293      	cmp	r3, r2
 800c5ae:	d030      	beq.n	800c612 <HAL_UART_IRQHandler+0x3e2>
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	4a7f      	ldr	r2, [pc, #508]	; (800c7b8 <HAL_UART_IRQHandler+0x588>)
 800c5ba:	4293      	cmp	r3, r2
 800c5bc:	d029      	beq.n	800c612 <HAL_UART_IRQHandler+0x3e2>
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	4a7d      	ldr	r2, [pc, #500]	; (800c7bc <HAL_UART_IRQHandler+0x58c>)
 800c5c8:	4293      	cmp	r3, r2
 800c5ca:	d022      	beq.n	800c612 <HAL_UART_IRQHandler+0x3e2>
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	4a7a      	ldr	r2, [pc, #488]	; (800c7c0 <HAL_UART_IRQHandler+0x590>)
 800c5d6:	4293      	cmp	r3, r2
 800c5d8:	d01b      	beq.n	800c612 <HAL_UART_IRQHandler+0x3e2>
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	4a78      	ldr	r2, [pc, #480]	; (800c7c4 <HAL_UART_IRQHandler+0x594>)
 800c5e4:	4293      	cmp	r3, r2
 800c5e6:	d014      	beq.n	800c612 <HAL_UART_IRQHandler+0x3e2>
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	4a75      	ldr	r2, [pc, #468]	; (800c7c8 <HAL_UART_IRQHandler+0x598>)
 800c5f2:	4293      	cmp	r3, r2
 800c5f4:	d00d      	beq.n	800c612 <HAL_UART_IRQHandler+0x3e2>
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	4a73      	ldr	r2, [pc, #460]	; (800c7cc <HAL_UART_IRQHandler+0x59c>)
 800c600:	4293      	cmp	r3, r2
 800c602:	d006      	beq.n	800c612 <HAL_UART_IRQHandler+0x3e2>
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	4a70      	ldr	r2, [pc, #448]	; (800c7d0 <HAL_UART_IRQHandler+0x5a0>)
 800c60e:	4293      	cmp	r3, r2
 800c610:	d106      	bne.n	800c620 <HAL_UART_IRQHandler+0x3f0>
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	685b      	ldr	r3, [r3, #4]
 800c61c:	b29b      	uxth	r3, r3
 800c61e:	e005      	b.n	800c62c <HAL_UART_IRQHandler+0x3fc>
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	685b      	ldr	r3, [r3, #4]
 800c62a:	b29b      	uxth	r3, r3
 800c62c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c630:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c634:	2b00      	cmp	r3, #0
 800c636:	f000 81ab 	beq.w	800c990 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c640:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c644:	429a      	cmp	r2, r3
 800c646:	f080 81a3 	bcs.w	800c990 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c650:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c65a:	69db      	ldr	r3, [r3, #28]
 800c65c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c660:	f000 8087 	beq.w	800c772 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c66c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c670:	e853 3f00 	ldrex	r3, [r3]
 800c674:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c678:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c67c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c680:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	461a      	mov	r2, r3
 800c68a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c68e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c692:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c696:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c69a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c69e:	e841 2300 	strex	r3, r2, [r1]
 800c6a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c6a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d1da      	bne.n	800c664 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	3308      	adds	r3, #8
 800c6b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c6b8:	e853 3f00 	ldrex	r3, [r3]
 800c6bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c6be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c6c0:	f023 0301 	bic.w	r3, r3, #1
 800c6c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	3308      	adds	r3, #8
 800c6ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c6d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c6d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c6da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c6de:	e841 2300 	strex	r3, r2, [r1]
 800c6e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c6e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d1e1      	bne.n	800c6ae <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	3308      	adds	r3, #8
 800c6f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c6f4:	e853 3f00 	ldrex	r3, [r3]
 800c6f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c6fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c6fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c700:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	3308      	adds	r3, #8
 800c70a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c70e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c710:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c712:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c714:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c716:	e841 2300 	strex	r3, r2, [r1]
 800c71a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c71c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d1e3      	bne.n	800c6ea <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	2220      	movs	r2, #32
 800c726:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	2200      	movs	r2, #0
 800c72e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c738:	e853 3f00 	ldrex	r3, [r3]
 800c73c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c73e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c740:	f023 0310 	bic.w	r3, r3, #16
 800c744:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	461a      	mov	r2, r3
 800c74e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c752:	65bb      	str	r3, [r7, #88]	; 0x58
 800c754:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c756:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c758:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c75a:	e841 2300 	strex	r3, r2, [r1]
 800c75e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c760:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c762:	2b00      	cmp	r3, #0
 800c764:	d1e4      	bne.n	800c730 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c76c:	4618      	mov	r0, r3
 800c76e:	f7f8 f91f 	bl	80049b0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	2202      	movs	r2, #2
 800c776:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c784:	b29b      	uxth	r3, r3
 800c786:	1ad3      	subs	r3, r2, r3
 800c788:	b29b      	uxth	r3, r3
 800c78a:	4619      	mov	r1, r3
 800c78c:	6878      	ldr	r0, [r7, #4]
 800c78e:	f000 f91d 	bl	800c9cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c792:	e0fd      	b.n	800c990 <HAL_UART_IRQHandler+0x760>
 800c794:	40020010 	.word	0x40020010
 800c798:	40020028 	.word	0x40020028
 800c79c:	40020040 	.word	0x40020040
 800c7a0:	40020058 	.word	0x40020058
 800c7a4:	40020070 	.word	0x40020070
 800c7a8:	40020088 	.word	0x40020088
 800c7ac:	400200a0 	.word	0x400200a0
 800c7b0:	400200b8 	.word	0x400200b8
 800c7b4:	40020410 	.word	0x40020410
 800c7b8:	40020428 	.word	0x40020428
 800c7bc:	40020440 	.word	0x40020440
 800c7c0:	40020458 	.word	0x40020458
 800c7c4:	40020470 	.word	0x40020470
 800c7c8:	40020488 	.word	0x40020488
 800c7cc:	400204a0 	.word	0x400204a0
 800c7d0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c7e0:	b29b      	uxth	r3, r3
 800c7e2:	1ad3      	subs	r3, r2, r3
 800c7e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c7ee:	b29b      	uxth	r3, r3
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	f000 80cf 	beq.w	800c994 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800c7f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	f000 80ca 	beq.w	800c994 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c808:	e853 3f00 	ldrex	r3, [r3]
 800c80c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c80e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c810:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c814:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	461a      	mov	r2, r3
 800c81e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c822:	647b      	str	r3, [r7, #68]	; 0x44
 800c824:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c826:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c828:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c82a:	e841 2300 	strex	r3, r2, [r1]
 800c82e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c832:	2b00      	cmp	r3, #0
 800c834:	d1e4      	bne.n	800c800 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	3308      	adds	r3, #8
 800c83c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c840:	e853 3f00 	ldrex	r3, [r3]
 800c844:	623b      	str	r3, [r7, #32]
   return(result);
 800c846:	6a3a      	ldr	r2, [r7, #32]
 800c848:	4b55      	ldr	r3, [pc, #340]	; (800c9a0 <HAL_UART_IRQHandler+0x770>)
 800c84a:	4013      	ands	r3, r2
 800c84c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	3308      	adds	r3, #8
 800c856:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c85a:	633a      	str	r2, [r7, #48]	; 0x30
 800c85c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c85e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c860:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c862:	e841 2300 	strex	r3, r2, [r1]
 800c866:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d1e3      	bne.n	800c836 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2220      	movs	r2, #32
 800c872:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	2200      	movs	r2, #0
 800c87a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2200      	movs	r2, #0
 800c880:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c888:	693b      	ldr	r3, [r7, #16]
 800c88a:	e853 3f00 	ldrex	r3, [r3]
 800c88e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	f023 0310 	bic.w	r3, r3, #16
 800c896:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	461a      	mov	r2, r3
 800c8a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c8a4:	61fb      	str	r3, [r7, #28]
 800c8a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8a8:	69b9      	ldr	r1, [r7, #24]
 800c8aa:	69fa      	ldr	r2, [r7, #28]
 800c8ac:	e841 2300 	strex	r3, r2, [r1]
 800c8b0:	617b      	str	r3, [r7, #20]
   return(result);
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d1e4      	bne.n	800c882 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2202      	movs	r2, #2
 800c8bc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c8be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c8c2:	4619      	mov	r1, r3
 800c8c4:	6878      	ldr	r0, [r7, #4]
 800c8c6:	f000 f881 	bl	800c9cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c8ca:	e063      	b.n	800c994 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c8cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c8d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d00e      	beq.n	800c8f6 <HAL_UART_IRQHandler+0x6c6>
 800c8d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c8dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d008      	beq.n	800c8f6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c8ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f001 f83b 	bl	800d96a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c8f4:	e051      	b.n	800c99a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c8f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c8fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d014      	beq.n	800c92c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c902:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d105      	bne.n	800c91a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c90e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c912:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c916:	2b00      	cmp	r3, #0
 800c918:	d008      	beq.n	800c92c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d03a      	beq.n	800c998 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	4798      	blx	r3
    }
    return;
 800c92a:	e035      	b.n	800c998 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c92c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c934:	2b00      	cmp	r3, #0
 800c936:	d009      	beq.n	800c94c <HAL_UART_IRQHandler+0x71c>
 800c938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c93c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c940:	2b00      	cmp	r3, #0
 800c942:	d003      	beq.n	800c94c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800c944:	6878      	ldr	r0, [r7, #4]
 800c946:	f000 ffe5 	bl	800d914 <UART_EndTransmit_IT>
    return;
 800c94a:	e026      	b.n	800c99a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c94c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c950:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c954:	2b00      	cmp	r3, #0
 800c956:	d009      	beq.n	800c96c <HAL_UART_IRQHandler+0x73c>
 800c958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c95c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c960:	2b00      	cmp	r3, #0
 800c962:	d003      	beq.n	800c96c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c964:	6878      	ldr	r0, [r7, #4]
 800c966:	f001 f814 	bl	800d992 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c96a:	e016      	b.n	800c99a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c96c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c970:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c974:	2b00      	cmp	r3, #0
 800c976:	d010      	beq.n	800c99a <HAL_UART_IRQHandler+0x76a>
 800c978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	da0c      	bge.n	800c99a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c980:	6878      	ldr	r0, [r7, #4]
 800c982:	f000 fffc 	bl	800d97e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c986:	e008      	b.n	800c99a <HAL_UART_IRQHandler+0x76a>
      return;
 800c988:	bf00      	nop
 800c98a:	e006      	b.n	800c99a <HAL_UART_IRQHandler+0x76a>
    return;
 800c98c:	bf00      	nop
 800c98e:	e004      	b.n	800c99a <HAL_UART_IRQHandler+0x76a>
      return;
 800c990:	bf00      	nop
 800c992:	e002      	b.n	800c99a <HAL_UART_IRQHandler+0x76a>
      return;
 800c994:	bf00      	nop
 800c996:	e000      	b.n	800c99a <HAL_UART_IRQHandler+0x76a>
    return;
 800c998:	bf00      	nop
  }
}
 800c99a:	37e8      	adds	r7, #232	; 0xe8
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd80      	pop	{r7, pc}
 800c9a0:	effffffe 	.word	0xeffffffe

0800c9a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c9a4:	b480      	push	{r7}
 800c9a6:	b083      	sub	sp, #12
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c9ac:	bf00      	nop
 800c9ae:	370c      	adds	r7, #12
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b6:	4770      	bx	lr

0800c9b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c9b8:	b480      	push	{r7}
 800c9ba:	b083      	sub	sp, #12
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c9c0:	bf00      	nop
 800c9c2:	370c      	adds	r7, #12
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ca:	4770      	bx	lr

0800c9cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	b083      	sub	sp, #12
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
 800c9d4:	460b      	mov	r3, r1
 800c9d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c9d8:	bf00      	nop
 800c9da:	370c      	adds	r7, #12
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e2:	4770      	bx	lr

0800c9e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c9e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c9e8:	b092      	sub	sp, #72	; 0x48
 800c9ea:	af00      	add	r7, sp, #0
 800c9ec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c9f4:	697b      	ldr	r3, [r7, #20]
 800c9f6:	689a      	ldr	r2, [r3, #8]
 800c9f8:	697b      	ldr	r3, [r7, #20]
 800c9fa:	691b      	ldr	r3, [r3, #16]
 800c9fc:	431a      	orrs	r2, r3
 800c9fe:	697b      	ldr	r3, [r7, #20]
 800ca00:	695b      	ldr	r3, [r3, #20]
 800ca02:	431a      	orrs	r2, r3
 800ca04:	697b      	ldr	r3, [r7, #20]
 800ca06:	69db      	ldr	r3, [r3, #28]
 800ca08:	4313      	orrs	r3, r2
 800ca0a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ca0c:	697b      	ldr	r3, [r7, #20]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	681a      	ldr	r2, [r3, #0]
 800ca12:	4bbe      	ldr	r3, [pc, #760]	; (800cd0c <UART_SetConfig+0x328>)
 800ca14:	4013      	ands	r3, r2
 800ca16:	697a      	ldr	r2, [r7, #20]
 800ca18:	6812      	ldr	r2, [r2, #0]
 800ca1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ca1c:	430b      	orrs	r3, r1
 800ca1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ca20:	697b      	ldr	r3, [r7, #20]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	685b      	ldr	r3, [r3, #4]
 800ca26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ca2a:	697b      	ldr	r3, [r7, #20]
 800ca2c:	68da      	ldr	r2, [r3, #12]
 800ca2e:	697b      	ldr	r3, [r7, #20]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	430a      	orrs	r2, r1
 800ca34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ca36:	697b      	ldr	r3, [r7, #20]
 800ca38:	699b      	ldr	r3, [r3, #24]
 800ca3a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ca3c:	697b      	ldr	r3, [r7, #20]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	4ab3      	ldr	r2, [pc, #716]	; (800cd10 <UART_SetConfig+0x32c>)
 800ca42:	4293      	cmp	r3, r2
 800ca44:	d004      	beq.n	800ca50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ca46:	697b      	ldr	r3, [r7, #20]
 800ca48:	6a1b      	ldr	r3, [r3, #32]
 800ca4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ca4c:	4313      	orrs	r3, r2
 800ca4e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ca50:	697b      	ldr	r3, [r7, #20]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	689a      	ldr	r2, [r3, #8]
 800ca56:	4baf      	ldr	r3, [pc, #700]	; (800cd14 <UART_SetConfig+0x330>)
 800ca58:	4013      	ands	r3, r2
 800ca5a:	697a      	ldr	r2, [r7, #20]
 800ca5c:	6812      	ldr	r2, [r2, #0]
 800ca5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ca60:	430b      	orrs	r3, r1
 800ca62:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ca64:	697b      	ldr	r3, [r7, #20]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca6a:	f023 010f 	bic.w	r1, r3, #15
 800ca6e:	697b      	ldr	r3, [r7, #20]
 800ca70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ca72:	697b      	ldr	r3, [r7, #20]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	430a      	orrs	r2, r1
 800ca78:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ca7a:	697b      	ldr	r3, [r7, #20]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	4aa6      	ldr	r2, [pc, #664]	; (800cd18 <UART_SetConfig+0x334>)
 800ca80:	4293      	cmp	r3, r2
 800ca82:	d177      	bne.n	800cb74 <UART_SetConfig+0x190>
 800ca84:	4ba5      	ldr	r3, [pc, #660]	; (800cd1c <UART_SetConfig+0x338>)
 800ca86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ca8c:	2b28      	cmp	r3, #40	; 0x28
 800ca8e:	d86d      	bhi.n	800cb6c <UART_SetConfig+0x188>
 800ca90:	a201      	add	r2, pc, #4	; (adr r2, 800ca98 <UART_SetConfig+0xb4>)
 800ca92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca96:	bf00      	nop
 800ca98:	0800cb3d 	.word	0x0800cb3d
 800ca9c:	0800cb6d 	.word	0x0800cb6d
 800caa0:	0800cb6d 	.word	0x0800cb6d
 800caa4:	0800cb6d 	.word	0x0800cb6d
 800caa8:	0800cb6d 	.word	0x0800cb6d
 800caac:	0800cb6d 	.word	0x0800cb6d
 800cab0:	0800cb6d 	.word	0x0800cb6d
 800cab4:	0800cb6d 	.word	0x0800cb6d
 800cab8:	0800cb45 	.word	0x0800cb45
 800cabc:	0800cb6d 	.word	0x0800cb6d
 800cac0:	0800cb6d 	.word	0x0800cb6d
 800cac4:	0800cb6d 	.word	0x0800cb6d
 800cac8:	0800cb6d 	.word	0x0800cb6d
 800cacc:	0800cb6d 	.word	0x0800cb6d
 800cad0:	0800cb6d 	.word	0x0800cb6d
 800cad4:	0800cb6d 	.word	0x0800cb6d
 800cad8:	0800cb4d 	.word	0x0800cb4d
 800cadc:	0800cb6d 	.word	0x0800cb6d
 800cae0:	0800cb6d 	.word	0x0800cb6d
 800cae4:	0800cb6d 	.word	0x0800cb6d
 800cae8:	0800cb6d 	.word	0x0800cb6d
 800caec:	0800cb6d 	.word	0x0800cb6d
 800caf0:	0800cb6d 	.word	0x0800cb6d
 800caf4:	0800cb6d 	.word	0x0800cb6d
 800caf8:	0800cb55 	.word	0x0800cb55
 800cafc:	0800cb6d 	.word	0x0800cb6d
 800cb00:	0800cb6d 	.word	0x0800cb6d
 800cb04:	0800cb6d 	.word	0x0800cb6d
 800cb08:	0800cb6d 	.word	0x0800cb6d
 800cb0c:	0800cb6d 	.word	0x0800cb6d
 800cb10:	0800cb6d 	.word	0x0800cb6d
 800cb14:	0800cb6d 	.word	0x0800cb6d
 800cb18:	0800cb5d 	.word	0x0800cb5d
 800cb1c:	0800cb6d 	.word	0x0800cb6d
 800cb20:	0800cb6d 	.word	0x0800cb6d
 800cb24:	0800cb6d 	.word	0x0800cb6d
 800cb28:	0800cb6d 	.word	0x0800cb6d
 800cb2c:	0800cb6d 	.word	0x0800cb6d
 800cb30:	0800cb6d 	.word	0x0800cb6d
 800cb34:	0800cb6d 	.word	0x0800cb6d
 800cb38:	0800cb65 	.word	0x0800cb65
 800cb3c:	2301      	movs	r3, #1
 800cb3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb42:	e222      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800cb44:	2304      	movs	r3, #4
 800cb46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb4a:	e21e      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800cb4c:	2308      	movs	r3, #8
 800cb4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb52:	e21a      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800cb54:	2310      	movs	r3, #16
 800cb56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb5a:	e216      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800cb5c:	2320      	movs	r3, #32
 800cb5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb62:	e212      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800cb64:	2340      	movs	r3, #64	; 0x40
 800cb66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb6a:	e20e      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800cb6c:	2380      	movs	r3, #128	; 0x80
 800cb6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb72:	e20a      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800cb74:	697b      	ldr	r3, [r7, #20]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	4a69      	ldr	r2, [pc, #420]	; (800cd20 <UART_SetConfig+0x33c>)
 800cb7a:	4293      	cmp	r3, r2
 800cb7c:	d130      	bne.n	800cbe0 <UART_SetConfig+0x1fc>
 800cb7e:	4b67      	ldr	r3, [pc, #412]	; (800cd1c <UART_SetConfig+0x338>)
 800cb80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb82:	f003 0307 	and.w	r3, r3, #7
 800cb86:	2b05      	cmp	r3, #5
 800cb88:	d826      	bhi.n	800cbd8 <UART_SetConfig+0x1f4>
 800cb8a:	a201      	add	r2, pc, #4	; (adr r2, 800cb90 <UART_SetConfig+0x1ac>)
 800cb8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb90:	0800cba9 	.word	0x0800cba9
 800cb94:	0800cbb1 	.word	0x0800cbb1
 800cb98:	0800cbb9 	.word	0x0800cbb9
 800cb9c:	0800cbc1 	.word	0x0800cbc1
 800cba0:	0800cbc9 	.word	0x0800cbc9
 800cba4:	0800cbd1 	.word	0x0800cbd1
 800cba8:	2300      	movs	r3, #0
 800cbaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbae:	e1ec      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800cbb0:	2304      	movs	r3, #4
 800cbb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbb6:	e1e8      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800cbb8:	2308      	movs	r3, #8
 800cbba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbbe:	e1e4      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800cbc0:	2310      	movs	r3, #16
 800cbc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbc6:	e1e0      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800cbc8:	2320      	movs	r3, #32
 800cbca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbce:	e1dc      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800cbd0:	2340      	movs	r3, #64	; 0x40
 800cbd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbd6:	e1d8      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800cbd8:	2380      	movs	r3, #128	; 0x80
 800cbda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbde:	e1d4      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800cbe0:	697b      	ldr	r3, [r7, #20]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	4a4f      	ldr	r2, [pc, #316]	; (800cd24 <UART_SetConfig+0x340>)
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	d130      	bne.n	800cc4c <UART_SetConfig+0x268>
 800cbea:	4b4c      	ldr	r3, [pc, #304]	; (800cd1c <UART_SetConfig+0x338>)
 800cbec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbee:	f003 0307 	and.w	r3, r3, #7
 800cbf2:	2b05      	cmp	r3, #5
 800cbf4:	d826      	bhi.n	800cc44 <UART_SetConfig+0x260>
 800cbf6:	a201      	add	r2, pc, #4	; (adr r2, 800cbfc <UART_SetConfig+0x218>)
 800cbf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbfc:	0800cc15 	.word	0x0800cc15
 800cc00:	0800cc1d 	.word	0x0800cc1d
 800cc04:	0800cc25 	.word	0x0800cc25
 800cc08:	0800cc2d 	.word	0x0800cc2d
 800cc0c:	0800cc35 	.word	0x0800cc35
 800cc10:	0800cc3d 	.word	0x0800cc3d
 800cc14:	2300      	movs	r3, #0
 800cc16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc1a:	e1b6      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800cc1c:	2304      	movs	r3, #4
 800cc1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc22:	e1b2      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800cc24:	2308      	movs	r3, #8
 800cc26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc2a:	e1ae      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800cc2c:	2310      	movs	r3, #16
 800cc2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc32:	e1aa      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800cc34:	2320      	movs	r3, #32
 800cc36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc3a:	e1a6      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800cc3c:	2340      	movs	r3, #64	; 0x40
 800cc3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc42:	e1a2      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800cc44:	2380      	movs	r3, #128	; 0x80
 800cc46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc4a:	e19e      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800cc4c:	697b      	ldr	r3, [r7, #20]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	4a35      	ldr	r2, [pc, #212]	; (800cd28 <UART_SetConfig+0x344>)
 800cc52:	4293      	cmp	r3, r2
 800cc54:	d130      	bne.n	800ccb8 <UART_SetConfig+0x2d4>
 800cc56:	4b31      	ldr	r3, [pc, #196]	; (800cd1c <UART_SetConfig+0x338>)
 800cc58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc5a:	f003 0307 	and.w	r3, r3, #7
 800cc5e:	2b05      	cmp	r3, #5
 800cc60:	d826      	bhi.n	800ccb0 <UART_SetConfig+0x2cc>
 800cc62:	a201      	add	r2, pc, #4	; (adr r2, 800cc68 <UART_SetConfig+0x284>)
 800cc64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc68:	0800cc81 	.word	0x0800cc81
 800cc6c:	0800cc89 	.word	0x0800cc89
 800cc70:	0800cc91 	.word	0x0800cc91
 800cc74:	0800cc99 	.word	0x0800cc99
 800cc78:	0800cca1 	.word	0x0800cca1
 800cc7c:	0800cca9 	.word	0x0800cca9
 800cc80:	2300      	movs	r3, #0
 800cc82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc86:	e180      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800cc88:	2304      	movs	r3, #4
 800cc8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc8e:	e17c      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800cc90:	2308      	movs	r3, #8
 800cc92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc96:	e178      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800cc98:	2310      	movs	r3, #16
 800cc9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc9e:	e174      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800cca0:	2320      	movs	r3, #32
 800cca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cca6:	e170      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800cca8:	2340      	movs	r3, #64	; 0x40
 800ccaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccae:	e16c      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800ccb0:	2380      	movs	r3, #128	; 0x80
 800ccb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccb6:	e168      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800ccb8:	697b      	ldr	r3, [r7, #20]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	4a1b      	ldr	r2, [pc, #108]	; (800cd2c <UART_SetConfig+0x348>)
 800ccbe:	4293      	cmp	r3, r2
 800ccc0:	d142      	bne.n	800cd48 <UART_SetConfig+0x364>
 800ccc2:	4b16      	ldr	r3, [pc, #88]	; (800cd1c <UART_SetConfig+0x338>)
 800ccc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ccc6:	f003 0307 	and.w	r3, r3, #7
 800ccca:	2b05      	cmp	r3, #5
 800cccc:	d838      	bhi.n	800cd40 <UART_SetConfig+0x35c>
 800ccce:	a201      	add	r2, pc, #4	; (adr r2, 800ccd4 <UART_SetConfig+0x2f0>)
 800ccd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccd4:	0800cced 	.word	0x0800cced
 800ccd8:	0800ccf5 	.word	0x0800ccf5
 800ccdc:	0800ccfd 	.word	0x0800ccfd
 800cce0:	0800cd05 	.word	0x0800cd05
 800cce4:	0800cd31 	.word	0x0800cd31
 800cce8:	0800cd39 	.word	0x0800cd39
 800ccec:	2300      	movs	r3, #0
 800ccee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccf2:	e14a      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800ccf4:	2304      	movs	r3, #4
 800ccf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccfa:	e146      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800ccfc:	2308      	movs	r3, #8
 800ccfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd02:	e142      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800cd04:	2310      	movs	r3, #16
 800cd06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd0a:	e13e      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800cd0c:	cfff69f3 	.word	0xcfff69f3
 800cd10:	58000c00 	.word	0x58000c00
 800cd14:	11fff4ff 	.word	0x11fff4ff
 800cd18:	40011000 	.word	0x40011000
 800cd1c:	58024400 	.word	0x58024400
 800cd20:	40004400 	.word	0x40004400
 800cd24:	40004800 	.word	0x40004800
 800cd28:	40004c00 	.word	0x40004c00
 800cd2c:	40005000 	.word	0x40005000
 800cd30:	2320      	movs	r3, #32
 800cd32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd36:	e128      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800cd38:	2340      	movs	r3, #64	; 0x40
 800cd3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd3e:	e124      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800cd40:	2380      	movs	r3, #128	; 0x80
 800cd42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd46:	e120      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800cd48:	697b      	ldr	r3, [r7, #20]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	4acb      	ldr	r2, [pc, #812]	; (800d07c <UART_SetConfig+0x698>)
 800cd4e:	4293      	cmp	r3, r2
 800cd50:	d176      	bne.n	800ce40 <UART_SetConfig+0x45c>
 800cd52:	4bcb      	ldr	r3, [pc, #812]	; (800d080 <UART_SetConfig+0x69c>)
 800cd54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cd5a:	2b28      	cmp	r3, #40	; 0x28
 800cd5c:	d86c      	bhi.n	800ce38 <UART_SetConfig+0x454>
 800cd5e:	a201      	add	r2, pc, #4	; (adr r2, 800cd64 <UART_SetConfig+0x380>)
 800cd60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd64:	0800ce09 	.word	0x0800ce09
 800cd68:	0800ce39 	.word	0x0800ce39
 800cd6c:	0800ce39 	.word	0x0800ce39
 800cd70:	0800ce39 	.word	0x0800ce39
 800cd74:	0800ce39 	.word	0x0800ce39
 800cd78:	0800ce39 	.word	0x0800ce39
 800cd7c:	0800ce39 	.word	0x0800ce39
 800cd80:	0800ce39 	.word	0x0800ce39
 800cd84:	0800ce11 	.word	0x0800ce11
 800cd88:	0800ce39 	.word	0x0800ce39
 800cd8c:	0800ce39 	.word	0x0800ce39
 800cd90:	0800ce39 	.word	0x0800ce39
 800cd94:	0800ce39 	.word	0x0800ce39
 800cd98:	0800ce39 	.word	0x0800ce39
 800cd9c:	0800ce39 	.word	0x0800ce39
 800cda0:	0800ce39 	.word	0x0800ce39
 800cda4:	0800ce19 	.word	0x0800ce19
 800cda8:	0800ce39 	.word	0x0800ce39
 800cdac:	0800ce39 	.word	0x0800ce39
 800cdb0:	0800ce39 	.word	0x0800ce39
 800cdb4:	0800ce39 	.word	0x0800ce39
 800cdb8:	0800ce39 	.word	0x0800ce39
 800cdbc:	0800ce39 	.word	0x0800ce39
 800cdc0:	0800ce39 	.word	0x0800ce39
 800cdc4:	0800ce21 	.word	0x0800ce21
 800cdc8:	0800ce39 	.word	0x0800ce39
 800cdcc:	0800ce39 	.word	0x0800ce39
 800cdd0:	0800ce39 	.word	0x0800ce39
 800cdd4:	0800ce39 	.word	0x0800ce39
 800cdd8:	0800ce39 	.word	0x0800ce39
 800cddc:	0800ce39 	.word	0x0800ce39
 800cde0:	0800ce39 	.word	0x0800ce39
 800cde4:	0800ce29 	.word	0x0800ce29
 800cde8:	0800ce39 	.word	0x0800ce39
 800cdec:	0800ce39 	.word	0x0800ce39
 800cdf0:	0800ce39 	.word	0x0800ce39
 800cdf4:	0800ce39 	.word	0x0800ce39
 800cdf8:	0800ce39 	.word	0x0800ce39
 800cdfc:	0800ce39 	.word	0x0800ce39
 800ce00:	0800ce39 	.word	0x0800ce39
 800ce04:	0800ce31 	.word	0x0800ce31
 800ce08:	2301      	movs	r3, #1
 800ce0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce0e:	e0bc      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800ce10:	2304      	movs	r3, #4
 800ce12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce16:	e0b8      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800ce18:	2308      	movs	r3, #8
 800ce1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce1e:	e0b4      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800ce20:	2310      	movs	r3, #16
 800ce22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce26:	e0b0      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800ce28:	2320      	movs	r3, #32
 800ce2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce2e:	e0ac      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800ce30:	2340      	movs	r3, #64	; 0x40
 800ce32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce36:	e0a8      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800ce38:	2380      	movs	r3, #128	; 0x80
 800ce3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce3e:	e0a4      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800ce40:	697b      	ldr	r3, [r7, #20]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	4a8f      	ldr	r2, [pc, #572]	; (800d084 <UART_SetConfig+0x6a0>)
 800ce46:	4293      	cmp	r3, r2
 800ce48:	d130      	bne.n	800ceac <UART_SetConfig+0x4c8>
 800ce4a:	4b8d      	ldr	r3, [pc, #564]	; (800d080 <UART_SetConfig+0x69c>)
 800ce4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce4e:	f003 0307 	and.w	r3, r3, #7
 800ce52:	2b05      	cmp	r3, #5
 800ce54:	d826      	bhi.n	800cea4 <UART_SetConfig+0x4c0>
 800ce56:	a201      	add	r2, pc, #4	; (adr r2, 800ce5c <UART_SetConfig+0x478>)
 800ce58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce5c:	0800ce75 	.word	0x0800ce75
 800ce60:	0800ce7d 	.word	0x0800ce7d
 800ce64:	0800ce85 	.word	0x0800ce85
 800ce68:	0800ce8d 	.word	0x0800ce8d
 800ce6c:	0800ce95 	.word	0x0800ce95
 800ce70:	0800ce9d 	.word	0x0800ce9d
 800ce74:	2300      	movs	r3, #0
 800ce76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce7a:	e086      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800ce7c:	2304      	movs	r3, #4
 800ce7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce82:	e082      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800ce84:	2308      	movs	r3, #8
 800ce86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce8a:	e07e      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800ce8c:	2310      	movs	r3, #16
 800ce8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce92:	e07a      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800ce94:	2320      	movs	r3, #32
 800ce96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce9a:	e076      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800ce9c:	2340      	movs	r3, #64	; 0x40
 800ce9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cea2:	e072      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800cea4:	2380      	movs	r3, #128	; 0x80
 800cea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ceaa:	e06e      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800ceac:	697b      	ldr	r3, [r7, #20]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	4a75      	ldr	r2, [pc, #468]	; (800d088 <UART_SetConfig+0x6a4>)
 800ceb2:	4293      	cmp	r3, r2
 800ceb4:	d130      	bne.n	800cf18 <UART_SetConfig+0x534>
 800ceb6:	4b72      	ldr	r3, [pc, #456]	; (800d080 <UART_SetConfig+0x69c>)
 800ceb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ceba:	f003 0307 	and.w	r3, r3, #7
 800cebe:	2b05      	cmp	r3, #5
 800cec0:	d826      	bhi.n	800cf10 <UART_SetConfig+0x52c>
 800cec2:	a201      	add	r2, pc, #4	; (adr r2, 800cec8 <UART_SetConfig+0x4e4>)
 800cec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cec8:	0800cee1 	.word	0x0800cee1
 800cecc:	0800cee9 	.word	0x0800cee9
 800ced0:	0800cef1 	.word	0x0800cef1
 800ced4:	0800cef9 	.word	0x0800cef9
 800ced8:	0800cf01 	.word	0x0800cf01
 800cedc:	0800cf09 	.word	0x0800cf09
 800cee0:	2300      	movs	r3, #0
 800cee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cee6:	e050      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800cee8:	2304      	movs	r3, #4
 800ceea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ceee:	e04c      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800cef0:	2308      	movs	r3, #8
 800cef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cef6:	e048      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800cef8:	2310      	movs	r3, #16
 800cefa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cefe:	e044      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800cf00:	2320      	movs	r3, #32
 800cf02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf06:	e040      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800cf08:	2340      	movs	r3, #64	; 0x40
 800cf0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf0e:	e03c      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800cf10:	2380      	movs	r3, #128	; 0x80
 800cf12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf16:	e038      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800cf18:	697b      	ldr	r3, [r7, #20]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	4a5b      	ldr	r2, [pc, #364]	; (800d08c <UART_SetConfig+0x6a8>)
 800cf1e:	4293      	cmp	r3, r2
 800cf20:	d130      	bne.n	800cf84 <UART_SetConfig+0x5a0>
 800cf22:	4b57      	ldr	r3, [pc, #348]	; (800d080 <UART_SetConfig+0x69c>)
 800cf24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf26:	f003 0307 	and.w	r3, r3, #7
 800cf2a:	2b05      	cmp	r3, #5
 800cf2c:	d826      	bhi.n	800cf7c <UART_SetConfig+0x598>
 800cf2e:	a201      	add	r2, pc, #4	; (adr r2, 800cf34 <UART_SetConfig+0x550>)
 800cf30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf34:	0800cf4d 	.word	0x0800cf4d
 800cf38:	0800cf55 	.word	0x0800cf55
 800cf3c:	0800cf5d 	.word	0x0800cf5d
 800cf40:	0800cf65 	.word	0x0800cf65
 800cf44:	0800cf6d 	.word	0x0800cf6d
 800cf48:	0800cf75 	.word	0x0800cf75
 800cf4c:	2302      	movs	r3, #2
 800cf4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf52:	e01a      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800cf54:	2304      	movs	r3, #4
 800cf56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf5a:	e016      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800cf5c:	2308      	movs	r3, #8
 800cf5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf62:	e012      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800cf64:	2310      	movs	r3, #16
 800cf66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf6a:	e00e      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800cf6c:	2320      	movs	r3, #32
 800cf6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf72:	e00a      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800cf74:	2340      	movs	r3, #64	; 0x40
 800cf76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf7a:	e006      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800cf7c:	2380      	movs	r3, #128	; 0x80
 800cf7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf82:	e002      	b.n	800cf8a <UART_SetConfig+0x5a6>
 800cf84:	2380      	movs	r3, #128	; 0x80
 800cf86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cf8a:	697b      	ldr	r3, [r7, #20]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	4a3f      	ldr	r2, [pc, #252]	; (800d08c <UART_SetConfig+0x6a8>)
 800cf90:	4293      	cmp	r3, r2
 800cf92:	f040 80f8 	bne.w	800d186 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cf96:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cf9a:	2b20      	cmp	r3, #32
 800cf9c:	dc46      	bgt.n	800d02c <UART_SetConfig+0x648>
 800cf9e:	2b02      	cmp	r3, #2
 800cfa0:	f2c0 8082 	blt.w	800d0a8 <UART_SetConfig+0x6c4>
 800cfa4:	3b02      	subs	r3, #2
 800cfa6:	2b1e      	cmp	r3, #30
 800cfa8:	d87e      	bhi.n	800d0a8 <UART_SetConfig+0x6c4>
 800cfaa:	a201      	add	r2, pc, #4	; (adr r2, 800cfb0 <UART_SetConfig+0x5cc>)
 800cfac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfb0:	0800d033 	.word	0x0800d033
 800cfb4:	0800d0a9 	.word	0x0800d0a9
 800cfb8:	0800d03b 	.word	0x0800d03b
 800cfbc:	0800d0a9 	.word	0x0800d0a9
 800cfc0:	0800d0a9 	.word	0x0800d0a9
 800cfc4:	0800d0a9 	.word	0x0800d0a9
 800cfc8:	0800d04b 	.word	0x0800d04b
 800cfcc:	0800d0a9 	.word	0x0800d0a9
 800cfd0:	0800d0a9 	.word	0x0800d0a9
 800cfd4:	0800d0a9 	.word	0x0800d0a9
 800cfd8:	0800d0a9 	.word	0x0800d0a9
 800cfdc:	0800d0a9 	.word	0x0800d0a9
 800cfe0:	0800d0a9 	.word	0x0800d0a9
 800cfe4:	0800d0a9 	.word	0x0800d0a9
 800cfe8:	0800d05b 	.word	0x0800d05b
 800cfec:	0800d0a9 	.word	0x0800d0a9
 800cff0:	0800d0a9 	.word	0x0800d0a9
 800cff4:	0800d0a9 	.word	0x0800d0a9
 800cff8:	0800d0a9 	.word	0x0800d0a9
 800cffc:	0800d0a9 	.word	0x0800d0a9
 800d000:	0800d0a9 	.word	0x0800d0a9
 800d004:	0800d0a9 	.word	0x0800d0a9
 800d008:	0800d0a9 	.word	0x0800d0a9
 800d00c:	0800d0a9 	.word	0x0800d0a9
 800d010:	0800d0a9 	.word	0x0800d0a9
 800d014:	0800d0a9 	.word	0x0800d0a9
 800d018:	0800d0a9 	.word	0x0800d0a9
 800d01c:	0800d0a9 	.word	0x0800d0a9
 800d020:	0800d0a9 	.word	0x0800d0a9
 800d024:	0800d0a9 	.word	0x0800d0a9
 800d028:	0800d09b 	.word	0x0800d09b
 800d02c:	2b40      	cmp	r3, #64	; 0x40
 800d02e:	d037      	beq.n	800d0a0 <UART_SetConfig+0x6bc>
 800d030:	e03a      	b.n	800d0a8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d032:	f7fc fee3 	bl	8009dfc <HAL_RCCEx_GetD3PCLK1Freq>
 800d036:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d038:	e03c      	b.n	800d0b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d03a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d03e:	4618      	mov	r0, r3
 800d040:	f7fc fef2 	bl	8009e28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d046:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d048:	e034      	b.n	800d0b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d04a:	f107 0318 	add.w	r3, r7, #24
 800d04e:	4618      	mov	r0, r3
 800d050:	f7fd f83e 	bl	800a0d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d054:	69fb      	ldr	r3, [r7, #28]
 800d056:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d058:	e02c      	b.n	800d0b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d05a:	4b09      	ldr	r3, [pc, #36]	; (800d080 <UART_SetConfig+0x69c>)
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	f003 0320 	and.w	r3, r3, #32
 800d062:	2b00      	cmp	r3, #0
 800d064:	d016      	beq.n	800d094 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d066:	4b06      	ldr	r3, [pc, #24]	; (800d080 <UART_SetConfig+0x69c>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	08db      	lsrs	r3, r3, #3
 800d06c:	f003 0303 	and.w	r3, r3, #3
 800d070:	4a07      	ldr	r2, [pc, #28]	; (800d090 <UART_SetConfig+0x6ac>)
 800d072:	fa22 f303 	lsr.w	r3, r2, r3
 800d076:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d078:	e01c      	b.n	800d0b4 <UART_SetConfig+0x6d0>
 800d07a:	bf00      	nop
 800d07c:	40011400 	.word	0x40011400
 800d080:	58024400 	.word	0x58024400
 800d084:	40007800 	.word	0x40007800
 800d088:	40007c00 	.word	0x40007c00
 800d08c:	58000c00 	.word	0x58000c00
 800d090:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800d094:	4b9d      	ldr	r3, [pc, #628]	; (800d30c <UART_SetConfig+0x928>)
 800d096:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d098:	e00c      	b.n	800d0b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d09a:	4b9d      	ldr	r3, [pc, #628]	; (800d310 <UART_SetConfig+0x92c>)
 800d09c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d09e:	e009      	b.n	800d0b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d0a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d0a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0a6:	e005      	b.n	800d0b4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d0ac:	2301      	movs	r3, #1
 800d0ae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d0b2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d0b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	f000 81de 	beq.w	800d478 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d0bc:	697b      	ldr	r3, [r7, #20]
 800d0be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0c0:	4a94      	ldr	r2, [pc, #592]	; (800d314 <UART_SetConfig+0x930>)
 800d0c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d0c6:	461a      	mov	r2, r3
 800d0c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0ca:	fbb3 f3f2 	udiv	r3, r3, r2
 800d0ce:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d0d0:	697b      	ldr	r3, [r7, #20]
 800d0d2:	685a      	ldr	r2, [r3, #4]
 800d0d4:	4613      	mov	r3, r2
 800d0d6:	005b      	lsls	r3, r3, #1
 800d0d8:	4413      	add	r3, r2
 800d0da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0dc:	429a      	cmp	r2, r3
 800d0de:	d305      	bcc.n	800d0ec <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d0e0:	697b      	ldr	r3, [r7, #20]
 800d0e2:	685b      	ldr	r3, [r3, #4]
 800d0e4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d0e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0e8:	429a      	cmp	r2, r3
 800d0ea:	d903      	bls.n	800d0f4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800d0ec:	2301      	movs	r3, #1
 800d0ee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d0f2:	e1c1      	b.n	800d478 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d0f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	60bb      	str	r3, [r7, #8]
 800d0fa:	60fa      	str	r2, [r7, #12]
 800d0fc:	697b      	ldr	r3, [r7, #20]
 800d0fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d100:	4a84      	ldr	r2, [pc, #528]	; (800d314 <UART_SetConfig+0x930>)
 800d102:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d106:	b29b      	uxth	r3, r3
 800d108:	2200      	movs	r2, #0
 800d10a:	603b      	str	r3, [r7, #0]
 800d10c:	607a      	str	r2, [r7, #4]
 800d10e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d112:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d116:	f7f3 faf7 	bl	8000708 <__aeabi_uldivmod>
 800d11a:	4602      	mov	r2, r0
 800d11c:	460b      	mov	r3, r1
 800d11e:	4610      	mov	r0, r2
 800d120:	4619      	mov	r1, r3
 800d122:	f04f 0200 	mov.w	r2, #0
 800d126:	f04f 0300 	mov.w	r3, #0
 800d12a:	020b      	lsls	r3, r1, #8
 800d12c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d130:	0202      	lsls	r2, r0, #8
 800d132:	6979      	ldr	r1, [r7, #20]
 800d134:	6849      	ldr	r1, [r1, #4]
 800d136:	0849      	lsrs	r1, r1, #1
 800d138:	2000      	movs	r0, #0
 800d13a:	460c      	mov	r4, r1
 800d13c:	4605      	mov	r5, r0
 800d13e:	eb12 0804 	adds.w	r8, r2, r4
 800d142:	eb43 0905 	adc.w	r9, r3, r5
 800d146:	697b      	ldr	r3, [r7, #20]
 800d148:	685b      	ldr	r3, [r3, #4]
 800d14a:	2200      	movs	r2, #0
 800d14c:	469a      	mov	sl, r3
 800d14e:	4693      	mov	fp, r2
 800d150:	4652      	mov	r2, sl
 800d152:	465b      	mov	r3, fp
 800d154:	4640      	mov	r0, r8
 800d156:	4649      	mov	r1, r9
 800d158:	f7f3 fad6 	bl	8000708 <__aeabi_uldivmod>
 800d15c:	4602      	mov	r2, r0
 800d15e:	460b      	mov	r3, r1
 800d160:	4613      	mov	r3, r2
 800d162:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d166:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d16a:	d308      	bcc.n	800d17e <UART_SetConfig+0x79a>
 800d16c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d16e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d172:	d204      	bcs.n	800d17e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800d174:	697b      	ldr	r3, [r7, #20]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d17a:	60da      	str	r2, [r3, #12]
 800d17c:	e17c      	b.n	800d478 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800d17e:	2301      	movs	r3, #1
 800d180:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d184:	e178      	b.n	800d478 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d186:	697b      	ldr	r3, [r7, #20]
 800d188:	69db      	ldr	r3, [r3, #28]
 800d18a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d18e:	f040 80c5 	bne.w	800d31c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800d192:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d196:	2b20      	cmp	r3, #32
 800d198:	dc48      	bgt.n	800d22c <UART_SetConfig+0x848>
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	db7b      	blt.n	800d296 <UART_SetConfig+0x8b2>
 800d19e:	2b20      	cmp	r3, #32
 800d1a0:	d879      	bhi.n	800d296 <UART_SetConfig+0x8b2>
 800d1a2:	a201      	add	r2, pc, #4	; (adr r2, 800d1a8 <UART_SetConfig+0x7c4>)
 800d1a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1a8:	0800d233 	.word	0x0800d233
 800d1ac:	0800d23b 	.word	0x0800d23b
 800d1b0:	0800d297 	.word	0x0800d297
 800d1b4:	0800d297 	.word	0x0800d297
 800d1b8:	0800d243 	.word	0x0800d243
 800d1bc:	0800d297 	.word	0x0800d297
 800d1c0:	0800d297 	.word	0x0800d297
 800d1c4:	0800d297 	.word	0x0800d297
 800d1c8:	0800d253 	.word	0x0800d253
 800d1cc:	0800d297 	.word	0x0800d297
 800d1d0:	0800d297 	.word	0x0800d297
 800d1d4:	0800d297 	.word	0x0800d297
 800d1d8:	0800d297 	.word	0x0800d297
 800d1dc:	0800d297 	.word	0x0800d297
 800d1e0:	0800d297 	.word	0x0800d297
 800d1e4:	0800d297 	.word	0x0800d297
 800d1e8:	0800d263 	.word	0x0800d263
 800d1ec:	0800d297 	.word	0x0800d297
 800d1f0:	0800d297 	.word	0x0800d297
 800d1f4:	0800d297 	.word	0x0800d297
 800d1f8:	0800d297 	.word	0x0800d297
 800d1fc:	0800d297 	.word	0x0800d297
 800d200:	0800d297 	.word	0x0800d297
 800d204:	0800d297 	.word	0x0800d297
 800d208:	0800d297 	.word	0x0800d297
 800d20c:	0800d297 	.word	0x0800d297
 800d210:	0800d297 	.word	0x0800d297
 800d214:	0800d297 	.word	0x0800d297
 800d218:	0800d297 	.word	0x0800d297
 800d21c:	0800d297 	.word	0x0800d297
 800d220:	0800d297 	.word	0x0800d297
 800d224:	0800d297 	.word	0x0800d297
 800d228:	0800d289 	.word	0x0800d289
 800d22c:	2b40      	cmp	r3, #64	; 0x40
 800d22e:	d02e      	beq.n	800d28e <UART_SetConfig+0x8aa>
 800d230:	e031      	b.n	800d296 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d232:	f7fa fdeb 	bl	8007e0c <HAL_RCC_GetPCLK1Freq>
 800d236:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d238:	e033      	b.n	800d2a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d23a:	f7fa fdfd 	bl	8007e38 <HAL_RCC_GetPCLK2Freq>
 800d23e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d240:	e02f      	b.n	800d2a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d242:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d246:	4618      	mov	r0, r3
 800d248:	f7fc fdee 	bl	8009e28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d24e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d250:	e027      	b.n	800d2a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d252:	f107 0318 	add.w	r3, r7, #24
 800d256:	4618      	mov	r0, r3
 800d258:	f7fc ff3a 	bl	800a0d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d25c:	69fb      	ldr	r3, [r7, #28]
 800d25e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d260:	e01f      	b.n	800d2a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d262:	4b2d      	ldr	r3, [pc, #180]	; (800d318 <UART_SetConfig+0x934>)
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	f003 0320 	and.w	r3, r3, #32
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d009      	beq.n	800d282 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d26e:	4b2a      	ldr	r3, [pc, #168]	; (800d318 <UART_SetConfig+0x934>)
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	08db      	lsrs	r3, r3, #3
 800d274:	f003 0303 	and.w	r3, r3, #3
 800d278:	4a24      	ldr	r2, [pc, #144]	; (800d30c <UART_SetConfig+0x928>)
 800d27a:	fa22 f303 	lsr.w	r3, r2, r3
 800d27e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d280:	e00f      	b.n	800d2a2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d282:	4b22      	ldr	r3, [pc, #136]	; (800d30c <UART_SetConfig+0x928>)
 800d284:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d286:	e00c      	b.n	800d2a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d288:	4b21      	ldr	r3, [pc, #132]	; (800d310 <UART_SetConfig+0x92c>)
 800d28a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d28c:	e009      	b.n	800d2a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d28e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d292:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d294:	e005      	b.n	800d2a2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d296:	2300      	movs	r3, #0
 800d298:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d29a:	2301      	movs	r3, #1
 800d29c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d2a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d2a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	f000 80e7 	beq.w	800d478 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d2aa:	697b      	ldr	r3, [r7, #20]
 800d2ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2ae:	4a19      	ldr	r2, [pc, #100]	; (800d314 <UART_SetConfig+0x930>)
 800d2b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d2b4:	461a      	mov	r2, r3
 800d2b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2b8:	fbb3 f3f2 	udiv	r3, r3, r2
 800d2bc:	005a      	lsls	r2, r3, #1
 800d2be:	697b      	ldr	r3, [r7, #20]
 800d2c0:	685b      	ldr	r3, [r3, #4]
 800d2c2:	085b      	lsrs	r3, r3, #1
 800d2c4:	441a      	add	r2, r3
 800d2c6:	697b      	ldr	r3, [r7, #20]
 800d2c8:	685b      	ldr	r3, [r3, #4]
 800d2ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2ce:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d2d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2d2:	2b0f      	cmp	r3, #15
 800d2d4:	d916      	bls.n	800d304 <UART_SetConfig+0x920>
 800d2d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d2dc:	d212      	bcs.n	800d304 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d2de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2e0:	b29b      	uxth	r3, r3
 800d2e2:	f023 030f 	bic.w	r3, r3, #15
 800d2e6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2ea:	085b      	lsrs	r3, r3, #1
 800d2ec:	b29b      	uxth	r3, r3
 800d2ee:	f003 0307 	and.w	r3, r3, #7
 800d2f2:	b29a      	uxth	r2, r3
 800d2f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d2f6:	4313      	orrs	r3, r2
 800d2f8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800d2fa:	697b      	ldr	r3, [r7, #20]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d300:	60da      	str	r2, [r3, #12]
 800d302:	e0b9      	b.n	800d478 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d304:	2301      	movs	r3, #1
 800d306:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d30a:	e0b5      	b.n	800d478 <UART_SetConfig+0xa94>
 800d30c:	03d09000 	.word	0x03d09000
 800d310:	003d0900 	.word	0x003d0900
 800d314:	08015500 	.word	0x08015500
 800d318:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800d31c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d320:	2b20      	cmp	r3, #32
 800d322:	dc49      	bgt.n	800d3b8 <UART_SetConfig+0x9d4>
 800d324:	2b00      	cmp	r3, #0
 800d326:	db7c      	blt.n	800d422 <UART_SetConfig+0xa3e>
 800d328:	2b20      	cmp	r3, #32
 800d32a:	d87a      	bhi.n	800d422 <UART_SetConfig+0xa3e>
 800d32c:	a201      	add	r2, pc, #4	; (adr r2, 800d334 <UART_SetConfig+0x950>)
 800d32e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d332:	bf00      	nop
 800d334:	0800d3bf 	.word	0x0800d3bf
 800d338:	0800d3c7 	.word	0x0800d3c7
 800d33c:	0800d423 	.word	0x0800d423
 800d340:	0800d423 	.word	0x0800d423
 800d344:	0800d3cf 	.word	0x0800d3cf
 800d348:	0800d423 	.word	0x0800d423
 800d34c:	0800d423 	.word	0x0800d423
 800d350:	0800d423 	.word	0x0800d423
 800d354:	0800d3df 	.word	0x0800d3df
 800d358:	0800d423 	.word	0x0800d423
 800d35c:	0800d423 	.word	0x0800d423
 800d360:	0800d423 	.word	0x0800d423
 800d364:	0800d423 	.word	0x0800d423
 800d368:	0800d423 	.word	0x0800d423
 800d36c:	0800d423 	.word	0x0800d423
 800d370:	0800d423 	.word	0x0800d423
 800d374:	0800d3ef 	.word	0x0800d3ef
 800d378:	0800d423 	.word	0x0800d423
 800d37c:	0800d423 	.word	0x0800d423
 800d380:	0800d423 	.word	0x0800d423
 800d384:	0800d423 	.word	0x0800d423
 800d388:	0800d423 	.word	0x0800d423
 800d38c:	0800d423 	.word	0x0800d423
 800d390:	0800d423 	.word	0x0800d423
 800d394:	0800d423 	.word	0x0800d423
 800d398:	0800d423 	.word	0x0800d423
 800d39c:	0800d423 	.word	0x0800d423
 800d3a0:	0800d423 	.word	0x0800d423
 800d3a4:	0800d423 	.word	0x0800d423
 800d3a8:	0800d423 	.word	0x0800d423
 800d3ac:	0800d423 	.word	0x0800d423
 800d3b0:	0800d423 	.word	0x0800d423
 800d3b4:	0800d415 	.word	0x0800d415
 800d3b8:	2b40      	cmp	r3, #64	; 0x40
 800d3ba:	d02e      	beq.n	800d41a <UART_SetConfig+0xa36>
 800d3bc:	e031      	b.n	800d422 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d3be:	f7fa fd25 	bl	8007e0c <HAL_RCC_GetPCLK1Freq>
 800d3c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d3c4:	e033      	b.n	800d42e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d3c6:	f7fa fd37 	bl	8007e38 <HAL_RCC_GetPCLK2Freq>
 800d3ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d3cc:	e02f      	b.n	800d42e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d3ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f7fc fd28 	bl	8009e28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d3d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d3dc:	e027      	b.n	800d42e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d3de:	f107 0318 	add.w	r3, r7, #24
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	f7fc fe74 	bl	800a0d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d3e8:	69fb      	ldr	r3, [r7, #28]
 800d3ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d3ec:	e01f      	b.n	800d42e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d3ee:	4b2d      	ldr	r3, [pc, #180]	; (800d4a4 <UART_SetConfig+0xac0>)
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	f003 0320 	and.w	r3, r3, #32
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d009      	beq.n	800d40e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d3fa:	4b2a      	ldr	r3, [pc, #168]	; (800d4a4 <UART_SetConfig+0xac0>)
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	08db      	lsrs	r3, r3, #3
 800d400:	f003 0303 	and.w	r3, r3, #3
 800d404:	4a28      	ldr	r2, [pc, #160]	; (800d4a8 <UART_SetConfig+0xac4>)
 800d406:	fa22 f303 	lsr.w	r3, r2, r3
 800d40a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d40c:	e00f      	b.n	800d42e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800d40e:	4b26      	ldr	r3, [pc, #152]	; (800d4a8 <UART_SetConfig+0xac4>)
 800d410:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d412:	e00c      	b.n	800d42e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d414:	4b25      	ldr	r3, [pc, #148]	; (800d4ac <UART_SetConfig+0xac8>)
 800d416:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d418:	e009      	b.n	800d42e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d41a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d41e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d420:	e005      	b.n	800d42e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800d422:	2300      	movs	r3, #0
 800d424:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d426:	2301      	movs	r3, #1
 800d428:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d42c:	bf00      	nop
    }

    if (pclk != 0U)
 800d42e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d430:	2b00      	cmp	r3, #0
 800d432:	d021      	beq.n	800d478 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d434:	697b      	ldr	r3, [r7, #20]
 800d436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d438:	4a1d      	ldr	r2, [pc, #116]	; (800d4b0 <UART_SetConfig+0xacc>)
 800d43a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d43e:	461a      	mov	r2, r3
 800d440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d442:	fbb3 f2f2 	udiv	r2, r3, r2
 800d446:	697b      	ldr	r3, [r7, #20]
 800d448:	685b      	ldr	r3, [r3, #4]
 800d44a:	085b      	lsrs	r3, r3, #1
 800d44c:	441a      	add	r2, r3
 800d44e:	697b      	ldr	r3, [r7, #20]
 800d450:	685b      	ldr	r3, [r3, #4]
 800d452:	fbb2 f3f3 	udiv	r3, r2, r3
 800d456:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d45a:	2b0f      	cmp	r3, #15
 800d45c:	d909      	bls.n	800d472 <UART_SetConfig+0xa8e>
 800d45e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d464:	d205      	bcs.n	800d472 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d468:	b29a      	uxth	r2, r3
 800d46a:	697b      	ldr	r3, [r7, #20]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	60da      	str	r2, [r3, #12]
 800d470:	e002      	b.n	800d478 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d472:	2301      	movs	r3, #1
 800d474:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d478:	697b      	ldr	r3, [r7, #20]
 800d47a:	2201      	movs	r2, #1
 800d47c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d480:	697b      	ldr	r3, [r7, #20]
 800d482:	2201      	movs	r2, #1
 800d484:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d488:	697b      	ldr	r3, [r7, #20]
 800d48a:	2200      	movs	r2, #0
 800d48c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800d48e:	697b      	ldr	r3, [r7, #20]
 800d490:	2200      	movs	r2, #0
 800d492:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800d494:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800d498:	4618      	mov	r0, r3
 800d49a:	3748      	adds	r7, #72	; 0x48
 800d49c:	46bd      	mov	sp, r7
 800d49e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d4a2:	bf00      	nop
 800d4a4:	58024400 	.word	0x58024400
 800d4a8:	03d09000 	.word	0x03d09000
 800d4ac:	003d0900 	.word	0x003d0900
 800d4b0:	08015500 	.word	0x08015500

0800d4b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d4b4:	b480      	push	{r7}
 800d4b6:	b083      	sub	sp, #12
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4c0:	f003 0301 	and.w	r3, r3, #1
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d00a      	beq.n	800d4de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	685b      	ldr	r3, [r3, #4]
 800d4ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	430a      	orrs	r2, r1
 800d4dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4e2:	f003 0302 	and.w	r3, r3, #2
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d00a      	beq.n	800d500 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	685b      	ldr	r3, [r3, #4]
 800d4f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	430a      	orrs	r2, r1
 800d4fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d504:	f003 0304 	and.w	r3, r3, #4
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d00a      	beq.n	800d522 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	685b      	ldr	r3, [r3, #4]
 800d512:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	430a      	orrs	r2, r1
 800d520:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d526:	f003 0308 	and.w	r3, r3, #8
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d00a      	beq.n	800d544 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	685b      	ldr	r3, [r3, #4]
 800d534:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	430a      	orrs	r2, r1
 800d542:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d548:	f003 0310 	and.w	r3, r3, #16
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d00a      	beq.n	800d566 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	689b      	ldr	r3, [r3, #8]
 800d556:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	430a      	orrs	r2, r1
 800d564:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d56a:	f003 0320 	and.w	r3, r3, #32
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d00a      	beq.n	800d588 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	689b      	ldr	r3, [r3, #8]
 800d578:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	430a      	orrs	r2, r1
 800d586:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d58c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d590:	2b00      	cmp	r3, #0
 800d592:	d01a      	beq.n	800d5ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	685b      	ldr	r3, [r3, #4]
 800d59a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	430a      	orrs	r2, r1
 800d5a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d5b2:	d10a      	bne.n	800d5ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	685b      	ldr	r3, [r3, #4]
 800d5ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	430a      	orrs	r2, r1
 800d5c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d00a      	beq.n	800d5ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	685b      	ldr	r3, [r3, #4]
 800d5dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	430a      	orrs	r2, r1
 800d5ea:	605a      	str	r2, [r3, #4]
  }
}
 800d5ec:	bf00      	nop
 800d5ee:	370c      	adds	r7, #12
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f6:	4770      	bx	lr

0800d5f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b098      	sub	sp, #96	; 0x60
 800d5fc:	af02      	add	r7, sp, #8
 800d5fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2200      	movs	r2, #0
 800d604:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d608:	f7f5 fa20 	bl	8002a4c <HAL_GetTick>
 800d60c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	f003 0308 	and.w	r3, r3, #8
 800d618:	2b08      	cmp	r3, #8
 800d61a:	d12f      	bne.n	800d67c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d61c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d620:	9300      	str	r3, [sp, #0]
 800d622:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d624:	2200      	movs	r2, #0
 800d626:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d62a:	6878      	ldr	r0, [r7, #4]
 800d62c:	f000 f88e 	bl	800d74c <UART_WaitOnFlagUntilTimeout>
 800d630:	4603      	mov	r3, r0
 800d632:	2b00      	cmp	r3, #0
 800d634:	d022      	beq.n	800d67c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d63c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d63e:	e853 3f00 	ldrex	r3, [r3]
 800d642:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d646:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d64a:	653b      	str	r3, [r7, #80]	; 0x50
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	461a      	mov	r2, r3
 800d652:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d654:	647b      	str	r3, [r7, #68]	; 0x44
 800d656:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d658:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d65a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d65c:	e841 2300 	strex	r3, r2, [r1]
 800d660:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d664:	2b00      	cmp	r3, #0
 800d666:	d1e6      	bne.n	800d636 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	2220      	movs	r2, #32
 800d66c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	2200      	movs	r2, #0
 800d674:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d678:	2303      	movs	r3, #3
 800d67a:	e063      	b.n	800d744 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	f003 0304 	and.w	r3, r3, #4
 800d686:	2b04      	cmp	r3, #4
 800d688:	d149      	bne.n	800d71e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d68a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d68e:	9300      	str	r3, [sp, #0]
 800d690:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d692:	2200      	movs	r2, #0
 800d694:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d698:	6878      	ldr	r0, [r7, #4]
 800d69a:	f000 f857 	bl	800d74c <UART_WaitOnFlagUntilTimeout>
 800d69e:	4603      	mov	r3, r0
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d03c      	beq.n	800d71e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ac:	e853 3f00 	ldrex	r3, [r3]
 800d6b0:	623b      	str	r3, [r7, #32]
   return(result);
 800d6b2:	6a3b      	ldr	r3, [r7, #32]
 800d6b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d6b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	461a      	mov	r2, r3
 800d6c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6c2:	633b      	str	r3, [r7, #48]	; 0x30
 800d6c4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d6c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6ca:	e841 2300 	strex	r3, r2, [r1]
 800d6ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d1e6      	bne.n	800d6a4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	3308      	adds	r3, #8
 800d6dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6de:	693b      	ldr	r3, [r7, #16]
 800d6e0:	e853 3f00 	ldrex	r3, [r3]
 800d6e4:	60fb      	str	r3, [r7, #12]
   return(result);
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	f023 0301 	bic.w	r3, r3, #1
 800d6ec:	64bb      	str	r3, [r7, #72]	; 0x48
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	3308      	adds	r3, #8
 800d6f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d6f6:	61fa      	str	r2, [r7, #28]
 800d6f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6fa:	69b9      	ldr	r1, [r7, #24]
 800d6fc:	69fa      	ldr	r2, [r7, #28]
 800d6fe:	e841 2300 	strex	r3, r2, [r1]
 800d702:	617b      	str	r3, [r7, #20]
   return(result);
 800d704:	697b      	ldr	r3, [r7, #20]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d1e5      	bne.n	800d6d6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2220      	movs	r2, #32
 800d70e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	2200      	movs	r2, #0
 800d716:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d71a:	2303      	movs	r3, #3
 800d71c:	e012      	b.n	800d744 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	2220      	movs	r2, #32
 800d722:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	2220      	movs	r2, #32
 800d72a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	2200      	movs	r2, #0
 800d732:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2200      	movs	r2, #0
 800d738:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	2200      	movs	r2, #0
 800d73e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d742:	2300      	movs	r3, #0
}
 800d744:	4618      	mov	r0, r3
 800d746:	3758      	adds	r7, #88	; 0x58
 800d748:	46bd      	mov	sp, r7
 800d74a:	bd80      	pop	{r7, pc}

0800d74c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b084      	sub	sp, #16
 800d750:	af00      	add	r7, sp, #0
 800d752:	60f8      	str	r0, [r7, #12]
 800d754:	60b9      	str	r1, [r7, #8]
 800d756:	603b      	str	r3, [r7, #0]
 800d758:	4613      	mov	r3, r2
 800d75a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d75c:	e049      	b.n	800d7f2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d75e:	69bb      	ldr	r3, [r7, #24]
 800d760:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d764:	d045      	beq.n	800d7f2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d766:	f7f5 f971 	bl	8002a4c <HAL_GetTick>
 800d76a:	4602      	mov	r2, r0
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	1ad3      	subs	r3, r2, r3
 800d770:	69ba      	ldr	r2, [r7, #24]
 800d772:	429a      	cmp	r2, r3
 800d774:	d302      	bcc.n	800d77c <UART_WaitOnFlagUntilTimeout+0x30>
 800d776:	69bb      	ldr	r3, [r7, #24]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d101      	bne.n	800d780 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d77c:	2303      	movs	r3, #3
 800d77e:	e048      	b.n	800d812 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	f003 0304 	and.w	r3, r3, #4
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d031      	beq.n	800d7f2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	69db      	ldr	r3, [r3, #28]
 800d794:	f003 0308 	and.w	r3, r3, #8
 800d798:	2b08      	cmp	r3, #8
 800d79a:	d110      	bne.n	800d7be <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	2208      	movs	r2, #8
 800d7a2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800d7a4:	68f8      	ldr	r0, [r7, #12]
 800d7a6:	f000 f839 	bl	800d81c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	2208      	movs	r2, #8
 800d7ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800d7ba:	2301      	movs	r3, #1
 800d7bc:	e029      	b.n	800d812 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	69db      	ldr	r3, [r3, #28]
 800d7c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d7c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d7cc:	d111      	bne.n	800d7f2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d7d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d7d8:	68f8      	ldr	r0, [r7, #12]
 800d7da:	f000 f81f 	bl	800d81c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	2220      	movs	r2, #32
 800d7e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800d7ee:	2303      	movs	r3, #3
 800d7f0:	e00f      	b.n	800d812 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	69da      	ldr	r2, [r3, #28]
 800d7f8:	68bb      	ldr	r3, [r7, #8]
 800d7fa:	4013      	ands	r3, r2
 800d7fc:	68ba      	ldr	r2, [r7, #8]
 800d7fe:	429a      	cmp	r2, r3
 800d800:	bf0c      	ite	eq
 800d802:	2301      	moveq	r3, #1
 800d804:	2300      	movne	r3, #0
 800d806:	b2db      	uxtb	r3, r3
 800d808:	461a      	mov	r2, r3
 800d80a:	79fb      	ldrb	r3, [r7, #7]
 800d80c:	429a      	cmp	r2, r3
 800d80e:	d0a6      	beq.n	800d75e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d810:	2300      	movs	r3, #0
}
 800d812:	4618      	mov	r0, r3
 800d814:	3710      	adds	r7, #16
 800d816:	46bd      	mov	sp, r7
 800d818:	bd80      	pop	{r7, pc}
	...

0800d81c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d81c:	b480      	push	{r7}
 800d81e:	b095      	sub	sp, #84	; 0x54
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d82a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d82c:	e853 3f00 	ldrex	r3, [r3]
 800d830:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d834:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d838:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	461a      	mov	r2, r3
 800d840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d842:	643b      	str	r3, [r7, #64]	; 0x40
 800d844:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d846:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d848:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d84a:	e841 2300 	strex	r3, r2, [r1]
 800d84e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d852:	2b00      	cmp	r3, #0
 800d854:	d1e6      	bne.n	800d824 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	3308      	adds	r3, #8
 800d85c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d85e:	6a3b      	ldr	r3, [r7, #32]
 800d860:	e853 3f00 	ldrex	r3, [r3]
 800d864:	61fb      	str	r3, [r7, #28]
   return(result);
 800d866:	69fa      	ldr	r2, [r7, #28]
 800d868:	4b1e      	ldr	r3, [pc, #120]	; (800d8e4 <UART_EndRxTransfer+0xc8>)
 800d86a:	4013      	ands	r3, r2
 800d86c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	3308      	adds	r3, #8
 800d874:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d876:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d878:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d87a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d87c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d87e:	e841 2300 	strex	r3, r2, [r1]
 800d882:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d886:	2b00      	cmp	r3, #0
 800d888:	d1e5      	bne.n	800d856 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d88e:	2b01      	cmp	r3, #1
 800d890:	d118      	bne.n	800d8c4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	e853 3f00 	ldrex	r3, [r3]
 800d89e:	60bb      	str	r3, [r7, #8]
   return(result);
 800d8a0:	68bb      	ldr	r3, [r7, #8]
 800d8a2:	f023 0310 	bic.w	r3, r3, #16
 800d8a6:	647b      	str	r3, [r7, #68]	; 0x44
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	461a      	mov	r2, r3
 800d8ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d8b0:	61bb      	str	r3, [r7, #24]
 800d8b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8b4:	6979      	ldr	r1, [r7, #20]
 800d8b6:	69ba      	ldr	r2, [r7, #24]
 800d8b8:	e841 2300 	strex	r3, r2, [r1]
 800d8bc:	613b      	str	r3, [r7, #16]
   return(result);
 800d8be:	693b      	ldr	r3, [r7, #16]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d1e6      	bne.n	800d892 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2220      	movs	r2, #32
 800d8c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	2200      	movs	r2, #0
 800d8d6:	675a      	str	r2, [r3, #116]	; 0x74
}
 800d8d8:	bf00      	nop
 800d8da:	3754      	adds	r7, #84	; 0x54
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e2:	4770      	bx	lr
 800d8e4:	effffffe 	.word	0xeffffffe

0800d8e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b084      	sub	sp, #16
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	2200      	movs	r2, #0
 800d8fa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	2200      	movs	r2, #0
 800d902:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d906:	68f8      	ldr	r0, [r7, #12]
 800d908:	f7ff f856 	bl	800c9b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d90c:	bf00      	nop
 800d90e:	3710      	adds	r7, #16
 800d910:	46bd      	mov	sp, r7
 800d912:	bd80      	pop	{r7, pc}

0800d914 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b088      	sub	sp, #32
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	e853 3f00 	ldrex	r3, [r3]
 800d928:	60bb      	str	r3, [r7, #8]
   return(result);
 800d92a:	68bb      	ldr	r3, [r7, #8]
 800d92c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d930:	61fb      	str	r3, [r7, #28]
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	461a      	mov	r2, r3
 800d938:	69fb      	ldr	r3, [r7, #28]
 800d93a:	61bb      	str	r3, [r7, #24]
 800d93c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d93e:	6979      	ldr	r1, [r7, #20]
 800d940:	69ba      	ldr	r2, [r7, #24]
 800d942:	e841 2300 	strex	r3, r2, [r1]
 800d946:	613b      	str	r3, [r7, #16]
   return(result);
 800d948:	693b      	ldr	r3, [r7, #16]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d1e6      	bne.n	800d91c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	2220      	movs	r2, #32
 800d952:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	2200      	movs	r2, #0
 800d95a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d95c:	6878      	ldr	r0, [r7, #4]
 800d95e:	f7ff f821 	bl	800c9a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d962:	bf00      	nop
 800d964:	3720      	adds	r7, #32
 800d966:	46bd      	mov	sp, r7
 800d968:	bd80      	pop	{r7, pc}

0800d96a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d96a:	b480      	push	{r7}
 800d96c:	b083      	sub	sp, #12
 800d96e:	af00      	add	r7, sp, #0
 800d970:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d972:	bf00      	nop
 800d974:	370c      	adds	r7, #12
 800d976:	46bd      	mov	sp, r7
 800d978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97c:	4770      	bx	lr

0800d97e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d97e:	b480      	push	{r7}
 800d980:	b083      	sub	sp, #12
 800d982:	af00      	add	r7, sp, #0
 800d984:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d986:	bf00      	nop
 800d988:	370c      	adds	r7, #12
 800d98a:	46bd      	mov	sp, r7
 800d98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d990:	4770      	bx	lr

0800d992 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d992:	b480      	push	{r7}
 800d994:	b083      	sub	sp, #12
 800d996:	af00      	add	r7, sp, #0
 800d998:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d99a:	bf00      	nop
 800d99c:	370c      	adds	r7, #12
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a4:	4770      	bx	lr

0800d9a6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d9a6:	b480      	push	{r7}
 800d9a8:	b085      	sub	sp, #20
 800d9aa:	af00      	add	r7, sp, #0
 800d9ac:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d9b4:	2b01      	cmp	r3, #1
 800d9b6:	d101      	bne.n	800d9bc <HAL_UARTEx_DisableFifoMode+0x16>
 800d9b8:	2302      	movs	r3, #2
 800d9ba:	e027      	b.n	800da0c <HAL_UARTEx_DisableFifoMode+0x66>
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	2201      	movs	r2, #1
 800d9c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	2224      	movs	r2, #36	; 0x24
 800d9c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	681a      	ldr	r2, [r3, #0]
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	f022 0201 	bic.w	r2, r2, #1
 800d9e2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d9ea:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	68fa      	ldr	r2, [r7, #12]
 800d9f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2220      	movs	r2, #32
 800d9fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2200      	movs	r2, #0
 800da06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800da0a:	2300      	movs	r3, #0
}
 800da0c:	4618      	mov	r0, r3
 800da0e:	3714      	adds	r7, #20
 800da10:	46bd      	mov	sp, r7
 800da12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da16:	4770      	bx	lr

0800da18 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b084      	sub	sp, #16
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
 800da20:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800da28:	2b01      	cmp	r3, #1
 800da2a:	d101      	bne.n	800da30 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800da2c:	2302      	movs	r3, #2
 800da2e:	e02d      	b.n	800da8c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2201      	movs	r2, #1
 800da34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2224      	movs	r2, #36	; 0x24
 800da3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	681a      	ldr	r2, [r3, #0]
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	f022 0201 	bic.w	r2, r2, #1
 800da56:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	689b      	ldr	r3, [r3, #8]
 800da5e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	683a      	ldr	r2, [r7, #0]
 800da68:	430a      	orrs	r2, r1
 800da6a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800da6c:	6878      	ldr	r0, [r7, #4]
 800da6e:	f000 f84f 	bl	800db10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	68fa      	ldr	r2, [r7, #12]
 800da78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	2220      	movs	r2, #32
 800da7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	2200      	movs	r2, #0
 800da86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800da8a:	2300      	movs	r3, #0
}
 800da8c:	4618      	mov	r0, r3
 800da8e:	3710      	adds	r7, #16
 800da90:	46bd      	mov	sp, r7
 800da92:	bd80      	pop	{r7, pc}

0800da94 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800da94:	b580      	push	{r7, lr}
 800da96:	b084      	sub	sp, #16
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]
 800da9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800daa4:	2b01      	cmp	r3, #1
 800daa6:	d101      	bne.n	800daac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800daa8:	2302      	movs	r3, #2
 800daaa:	e02d      	b.n	800db08 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	2201      	movs	r2, #1
 800dab0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2224      	movs	r2, #36	; 0x24
 800dab8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	681a      	ldr	r2, [r3, #0]
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	f022 0201 	bic.w	r2, r2, #1
 800dad2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	689b      	ldr	r3, [r3, #8]
 800dada:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	683a      	ldr	r2, [r7, #0]
 800dae4:	430a      	orrs	r2, r1
 800dae6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dae8:	6878      	ldr	r0, [r7, #4]
 800daea:	f000 f811 	bl	800db10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	68fa      	ldr	r2, [r7, #12]
 800daf4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	2220      	movs	r2, #32
 800dafa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	2200      	movs	r2, #0
 800db02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800db06:	2300      	movs	r3, #0
}
 800db08:	4618      	mov	r0, r3
 800db0a:	3710      	adds	r7, #16
 800db0c:	46bd      	mov	sp, r7
 800db0e:	bd80      	pop	{r7, pc}

0800db10 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800db10:	b480      	push	{r7}
 800db12:	b085      	sub	sp, #20
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d108      	bne.n	800db32 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	2201      	movs	r2, #1
 800db24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2201      	movs	r2, #1
 800db2c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800db30:	e031      	b.n	800db96 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800db32:	2310      	movs	r3, #16
 800db34:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800db36:	2310      	movs	r3, #16
 800db38:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	689b      	ldr	r3, [r3, #8]
 800db40:	0e5b      	lsrs	r3, r3, #25
 800db42:	b2db      	uxtb	r3, r3
 800db44:	f003 0307 	and.w	r3, r3, #7
 800db48:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	689b      	ldr	r3, [r3, #8]
 800db50:	0f5b      	lsrs	r3, r3, #29
 800db52:	b2db      	uxtb	r3, r3
 800db54:	f003 0307 	and.w	r3, r3, #7
 800db58:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800db5a:	7bbb      	ldrb	r3, [r7, #14]
 800db5c:	7b3a      	ldrb	r2, [r7, #12]
 800db5e:	4911      	ldr	r1, [pc, #68]	; (800dba4 <UARTEx_SetNbDataToProcess+0x94>)
 800db60:	5c8a      	ldrb	r2, [r1, r2]
 800db62:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800db66:	7b3a      	ldrb	r2, [r7, #12]
 800db68:	490f      	ldr	r1, [pc, #60]	; (800dba8 <UARTEx_SetNbDataToProcess+0x98>)
 800db6a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800db6c:	fb93 f3f2 	sdiv	r3, r3, r2
 800db70:	b29a      	uxth	r2, r3
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800db78:	7bfb      	ldrb	r3, [r7, #15]
 800db7a:	7b7a      	ldrb	r2, [r7, #13]
 800db7c:	4909      	ldr	r1, [pc, #36]	; (800dba4 <UARTEx_SetNbDataToProcess+0x94>)
 800db7e:	5c8a      	ldrb	r2, [r1, r2]
 800db80:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800db84:	7b7a      	ldrb	r2, [r7, #13]
 800db86:	4908      	ldr	r1, [pc, #32]	; (800dba8 <UARTEx_SetNbDataToProcess+0x98>)
 800db88:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800db8a:	fb93 f3f2 	sdiv	r3, r3, r2
 800db8e:	b29a      	uxth	r2, r3
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800db96:	bf00      	nop
 800db98:	3714      	adds	r7, #20
 800db9a:	46bd      	mov	sp, r7
 800db9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba0:	4770      	bx	lr
 800dba2:	bf00      	nop
 800dba4:	08015518 	.word	0x08015518
 800dba8:	08015520 	.word	0x08015520

0800dbac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dbac:	b084      	sub	sp, #16
 800dbae:	b580      	push	{r7, lr}
 800dbb0:	b084      	sub	sp, #16
 800dbb2:	af00      	add	r7, sp, #0
 800dbb4:	6078      	str	r0, [r7, #4]
 800dbb6:	f107 001c 	add.w	r0, r7, #28
 800dbba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dbbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbc0:	2b01      	cmp	r3, #1
 800dbc2:	d120      	bne.n	800dc06 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbc8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	68da      	ldr	r2, [r3, #12]
 800dbd4:	4b2a      	ldr	r3, [pc, #168]	; (800dc80 <USB_CoreInit+0xd4>)
 800dbd6:	4013      	ands	r3, r2
 800dbd8:	687a      	ldr	r2, [r7, #4]
 800dbda:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	68db      	ldr	r3, [r3, #12]
 800dbe0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800dbe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbea:	2b01      	cmp	r3, #1
 800dbec:	d105      	bne.n	800dbfa <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	68db      	ldr	r3, [r3, #12]
 800dbf2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800dbfa:	6878      	ldr	r0, [r7, #4]
 800dbfc:	f000 faac 	bl	800e158 <USB_CoreReset>
 800dc00:	4603      	mov	r3, r0
 800dc02:	73fb      	strb	r3, [r7, #15]
 800dc04:	e01a      	b.n	800dc3c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	68db      	ldr	r3, [r3, #12]
 800dc0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800dc12:	6878      	ldr	r0, [r7, #4]
 800dc14:	f000 faa0 	bl	800e158 <USB_CoreReset>
 800dc18:	4603      	mov	r3, r0
 800dc1a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800dc1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d106      	bne.n	800dc30 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	639a      	str	r2, [r3, #56]	; 0x38
 800dc2e:	e005      	b.n	800dc3c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800dc3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc3e:	2b01      	cmp	r3, #1
 800dc40:	d116      	bne.n	800dc70 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc46:	b29a      	uxth	r2, r3
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dc50:	4b0c      	ldr	r3, [pc, #48]	; (800dc84 <USB_CoreInit+0xd8>)
 800dc52:	4313      	orrs	r3, r2
 800dc54:	687a      	ldr	r2, [r7, #4]
 800dc56:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	689b      	ldr	r3, [r3, #8]
 800dc5c:	f043 0206 	orr.w	r2, r3, #6
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	689b      	ldr	r3, [r3, #8]
 800dc68:	f043 0220 	orr.w	r2, r3, #32
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800dc70:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc72:	4618      	mov	r0, r3
 800dc74:	3710      	adds	r7, #16
 800dc76:	46bd      	mov	sp, r7
 800dc78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dc7c:	b004      	add	sp, #16
 800dc7e:	4770      	bx	lr
 800dc80:	ffbdffbf 	.word	0xffbdffbf
 800dc84:	03ee0000 	.word	0x03ee0000

0800dc88 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800dc88:	b480      	push	{r7}
 800dc8a:	b083      	sub	sp, #12
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	689b      	ldr	r3, [r3, #8]
 800dc94:	f023 0201 	bic.w	r2, r3, #1
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800dc9c:	2300      	movs	r3, #0
}
 800dc9e:	4618      	mov	r0, r3
 800dca0:	370c      	adds	r7, #12
 800dca2:	46bd      	mov	sp, r7
 800dca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca8:	4770      	bx	lr

0800dcaa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800dcaa:	b580      	push	{r7, lr}
 800dcac:	b084      	sub	sp, #16
 800dcae:	af00      	add	r7, sp, #0
 800dcb0:	6078      	str	r0, [r7, #4]
 800dcb2:	460b      	mov	r3, r1
 800dcb4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	68db      	ldr	r3, [r3, #12]
 800dcbe:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800dcc6:	78fb      	ldrb	r3, [r7, #3]
 800dcc8:	2b01      	cmp	r3, #1
 800dcca:	d115      	bne.n	800dcf8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	68db      	ldr	r3, [r3, #12]
 800dcd0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800dcd8:	2001      	movs	r0, #1
 800dcda:	f7f4 fec3 	bl	8002a64 <HAL_Delay>
      ms++;
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	3301      	adds	r3, #1
 800dce2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800dce4:	6878      	ldr	r0, [r7, #4]
 800dce6:	f000 fa29 	bl	800e13c <USB_GetMode>
 800dcea:	4603      	mov	r3, r0
 800dcec:	2b01      	cmp	r3, #1
 800dcee:	d01e      	beq.n	800dd2e <USB_SetCurrentMode+0x84>
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	2b31      	cmp	r3, #49	; 0x31
 800dcf4:	d9f0      	bls.n	800dcd8 <USB_SetCurrentMode+0x2e>
 800dcf6:	e01a      	b.n	800dd2e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800dcf8:	78fb      	ldrb	r3, [r7, #3]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d115      	bne.n	800dd2a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	68db      	ldr	r3, [r3, #12]
 800dd02:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800dd0a:	2001      	movs	r0, #1
 800dd0c:	f7f4 feaa 	bl	8002a64 <HAL_Delay>
      ms++;
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	3301      	adds	r3, #1
 800dd14:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800dd16:	6878      	ldr	r0, [r7, #4]
 800dd18:	f000 fa10 	bl	800e13c <USB_GetMode>
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d005      	beq.n	800dd2e <USB_SetCurrentMode+0x84>
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	2b31      	cmp	r3, #49	; 0x31
 800dd26:	d9f0      	bls.n	800dd0a <USB_SetCurrentMode+0x60>
 800dd28:	e001      	b.n	800dd2e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800dd2a:	2301      	movs	r3, #1
 800dd2c:	e005      	b.n	800dd3a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	2b32      	cmp	r3, #50	; 0x32
 800dd32:	d101      	bne.n	800dd38 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800dd34:	2301      	movs	r3, #1
 800dd36:	e000      	b.n	800dd3a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800dd38:	2300      	movs	r3, #0
}
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	3710      	adds	r7, #16
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	bd80      	pop	{r7, pc}
	...

0800dd44 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dd44:	b084      	sub	sp, #16
 800dd46:	b580      	push	{r7, lr}
 800dd48:	b086      	sub	sp, #24
 800dd4a:	af00      	add	r7, sp, #0
 800dd4c:	6078      	str	r0, [r7, #4]
 800dd4e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800dd52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800dd56:	2300      	movs	r3, #0
 800dd58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800dd5e:	2300      	movs	r3, #0
 800dd60:	613b      	str	r3, [r7, #16]
 800dd62:	e009      	b.n	800dd78 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800dd64:	687a      	ldr	r2, [r7, #4]
 800dd66:	693b      	ldr	r3, [r7, #16]
 800dd68:	3340      	adds	r3, #64	; 0x40
 800dd6a:	009b      	lsls	r3, r3, #2
 800dd6c:	4413      	add	r3, r2
 800dd6e:	2200      	movs	r2, #0
 800dd70:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800dd72:	693b      	ldr	r3, [r7, #16]
 800dd74:	3301      	adds	r3, #1
 800dd76:	613b      	str	r3, [r7, #16]
 800dd78:	693b      	ldr	r3, [r7, #16]
 800dd7a:	2b0e      	cmp	r3, #14
 800dd7c:	d9f2      	bls.n	800dd64 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800dd7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d11c      	bne.n	800ddbe <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd8a:	685b      	ldr	r3, [r3, #4]
 800dd8c:	68fa      	ldr	r2, [r7, #12]
 800dd8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dd92:	f043 0302 	orr.w	r3, r3, #2
 800dd96:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd9c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	601a      	str	r2, [r3, #0]
 800ddbc:	e005      	b.n	800ddca <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddc2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ddd0:	461a      	mov	r2, r3
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dddc:	4619      	mov	r1, r3
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dde4:	461a      	mov	r2, r3
 800dde6:	680b      	ldr	r3, [r1, #0]
 800dde8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ddea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddec:	2b01      	cmp	r3, #1
 800ddee:	d10c      	bne.n	800de0a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ddf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d104      	bne.n	800de00 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ddf6:	2100      	movs	r1, #0
 800ddf8:	6878      	ldr	r0, [r7, #4]
 800ddfa:	f000 f965 	bl	800e0c8 <USB_SetDevSpeed>
 800ddfe:	e008      	b.n	800de12 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800de00:	2101      	movs	r1, #1
 800de02:	6878      	ldr	r0, [r7, #4]
 800de04:	f000 f960 	bl	800e0c8 <USB_SetDevSpeed>
 800de08:	e003      	b.n	800de12 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800de0a:	2103      	movs	r1, #3
 800de0c:	6878      	ldr	r0, [r7, #4]
 800de0e:	f000 f95b 	bl	800e0c8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800de12:	2110      	movs	r1, #16
 800de14:	6878      	ldr	r0, [r7, #4]
 800de16:	f000 f8f3 	bl	800e000 <USB_FlushTxFifo>
 800de1a:	4603      	mov	r3, r0
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d001      	beq.n	800de24 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800de20:	2301      	movs	r3, #1
 800de22:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800de24:	6878      	ldr	r0, [r7, #4]
 800de26:	f000 f91f 	bl	800e068 <USB_FlushRxFifo>
 800de2a:	4603      	mov	r3, r0
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d001      	beq.n	800de34 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800de30:	2301      	movs	r3, #1
 800de32:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de3a:	461a      	mov	r2, r3
 800de3c:	2300      	movs	r3, #0
 800de3e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de46:	461a      	mov	r2, r3
 800de48:	2300      	movs	r3, #0
 800de4a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de52:	461a      	mov	r2, r3
 800de54:	2300      	movs	r3, #0
 800de56:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800de58:	2300      	movs	r3, #0
 800de5a:	613b      	str	r3, [r7, #16]
 800de5c:	e043      	b.n	800dee6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800de5e:	693b      	ldr	r3, [r7, #16]
 800de60:	015a      	lsls	r2, r3, #5
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	4413      	add	r3, r2
 800de66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800de70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800de74:	d118      	bne.n	800dea8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800de76:	693b      	ldr	r3, [r7, #16]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d10a      	bne.n	800de92 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800de7c:	693b      	ldr	r3, [r7, #16]
 800de7e:	015a      	lsls	r2, r3, #5
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	4413      	add	r3, r2
 800de84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de88:	461a      	mov	r2, r3
 800de8a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800de8e:	6013      	str	r3, [r2, #0]
 800de90:	e013      	b.n	800deba <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800de92:	693b      	ldr	r3, [r7, #16]
 800de94:	015a      	lsls	r2, r3, #5
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	4413      	add	r3, r2
 800de9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de9e:	461a      	mov	r2, r3
 800dea0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800dea4:	6013      	str	r3, [r2, #0]
 800dea6:	e008      	b.n	800deba <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800dea8:	693b      	ldr	r3, [r7, #16]
 800deaa:	015a      	lsls	r2, r3, #5
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	4413      	add	r3, r2
 800deb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800deb4:	461a      	mov	r2, r3
 800deb6:	2300      	movs	r3, #0
 800deb8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800deba:	693b      	ldr	r3, [r7, #16]
 800debc:	015a      	lsls	r2, r3, #5
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	4413      	add	r3, r2
 800dec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dec6:	461a      	mov	r2, r3
 800dec8:	2300      	movs	r3, #0
 800deca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800decc:	693b      	ldr	r3, [r7, #16]
 800dece:	015a      	lsls	r2, r3, #5
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	4413      	add	r3, r2
 800ded4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ded8:	461a      	mov	r2, r3
 800deda:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800dede:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dee0:	693b      	ldr	r3, [r7, #16]
 800dee2:	3301      	adds	r3, #1
 800dee4:	613b      	str	r3, [r7, #16]
 800dee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dee8:	693a      	ldr	r2, [r7, #16]
 800deea:	429a      	cmp	r2, r3
 800deec:	d3b7      	bcc.n	800de5e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800deee:	2300      	movs	r3, #0
 800def0:	613b      	str	r3, [r7, #16]
 800def2:	e043      	b.n	800df7c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800def4:	693b      	ldr	r3, [r7, #16]
 800def6:	015a      	lsls	r2, r3, #5
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	4413      	add	r3, r2
 800defc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800df06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800df0a:	d118      	bne.n	800df3e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800df0c:	693b      	ldr	r3, [r7, #16]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d10a      	bne.n	800df28 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800df12:	693b      	ldr	r3, [r7, #16]
 800df14:	015a      	lsls	r2, r3, #5
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	4413      	add	r3, r2
 800df1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df1e:	461a      	mov	r2, r3
 800df20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800df24:	6013      	str	r3, [r2, #0]
 800df26:	e013      	b.n	800df50 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800df28:	693b      	ldr	r3, [r7, #16]
 800df2a:	015a      	lsls	r2, r3, #5
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	4413      	add	r3, r2
 800df30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df34:	461a      	mov	r2, r3
 800df36:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800df3a:	6013      	str	r3, [r2, #0]
 800df3c:	e008      	b.n	800df50 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800df3e:	693b      	ldr	r3, [r7, #16]
 800df40:	015a      	lsls	r2, r3, #5
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	4413      	add	r3, r2
 800df46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df4a:	461a      	mov	r2, r3
 800df4c:	2300      	movs	r3, #0
 800df4e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800df50:	693b      	ldr	r3, [r7, #16]
 800df52:	015a      	lsls	r2, r3, #5
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	4413      	add	r3, r2
 800df58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df5c:	461a      	mov	r2, r3
 800df5e:	2300      	movs	r3, #0
 800df60:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800df62:	693b      	ldr	r3, [r7, #16]
 800df64:	015a      	lsls	r2, r3, #5
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	4413      	add	r3, r2
 800df6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df6e:	461a      	mov	r2, r3
 800df70:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800df74:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800df76:	693b      	ldr	r3, [r7, #16]
 800df78:	3301      	adds	r3, #1
 800df7a:	613b      	str	r3, [r7, #16]
 800df7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df7e:	693a      	ldr	r2, [r7, #16]
 800df80:	429a      	cmp	r2, r3
 800df82:	d3b7      	bcc.n	800def4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df8a:	691b      	ldr	r3, [r3, #16]
 800df8c:	68fa      	ldr	r2, [r7, #12]
 800df8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800df92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800df96:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	2200      	movs	r2, #0
 800df9c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800dfa4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800dfa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d105      	bne.n	800dfb8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	699b      	ldr	r3, [r3, #24]
 800dfb0:	f043 0210 	orr.w	r2, r3, #16
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	699a      	ldr	r2, [r3, #24]
 800dfbc:	4b0e      	ldr	r3, [pc, #56]	; (800dff8 <USB_DevInit+0x2b4>)
 800dfbe:	4313      	orrs	r3, r2
 800dfc0:	687a      	ldr	r2, [r7, #4]
 800dfc2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800dfc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d005      	beq.n	800dfd6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	699b      	ldr	r3, [r3, #24]
 800dfce:	f043 0208 	orr.w	r2, r3, #8
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800dfd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dfd8:	2b01      	cmp	r3, #1
 800dfda:	d105      	bne.n	800dfe8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	699a      	ldr	r2, [r3, #24]
 800dfe0:	4b06      	ldr	r3, [pc, #24]	; (800dffc <USB_DevInit+0x2b8>)
 800dfe2:	4313      	orrs	r3, r2
 800dfe4:	687a      	ldr	r2, [r7, #4]
 800dfe6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800dfe8:	7dfb      	ldrb	r3, [r7, #23]
}
 800dfea:	4618      	mov	r0, r3
 800dfec:	3718      	adds	r7, #24
 800dfee:	46bd      	mov	sp, r7
 800dff0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dff4:	b004      	add	sp, #16
 800dff6:	4770      	bx	lr
 800dff8:	803c3800 	.word	0x803c3800
 800dffc:	40000004 	.word	0x40000004

0800e000 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e000:	b480      	push	{r7}
 800e002:	b085      	sub	sp, #20
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
 800e008:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e00a:	2300      	movs	r3, #0
 800e00c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	3301      	adds	r3, #1
 800e012:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	4a13      	ldr	r2, [pc, #76]	; (800e064 <USB_FlushTxFifo+0x64>)
 800e018:	4293      	cmp	r3, r2
 800e01a:	d901      	bls.n	800e020 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800e01c:	2303      	movs	r3, #3
 800e01e:	e01b      	b.n	800e058 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	691b      	ldr	r3, [r3, #16]
 800e024:	2b00      	cmp	r3, #0
 800e026:	daf2      	bge.n	800e00e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800e028:	2300      	movs	r3, #0
 800e02a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e02c:	683b      	ldr	r3, [r7, #0]
 800e02e:	019b      	lsls	r3, r3, #6
 800e030:	f043 0220 	orr.w	r2, r3, #32
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	3301      	adds	r3, #1
 800e03c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	4a08      	ldr	r2, [pc, #32]	; (800e064 <USB_FlushTxFifo+0x64>)
 800e042:	4293      	cmp	r3, r2
 800e044:	d901      	bls.n	800e04a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800e046:	2303      	movs	r3, #3
 800e048:	e006      	b.n	800e058 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	691b      	ldr	r3, [r3, #16]
 800e04e:	f003 0320 	and.w	r3, r3, #32
 800e052:	2b20      	cmp	r3, #32
 800e054:	d0f0      	beq.n	800e038 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800e056:	2300      	movs	r3, #0
}
 800e058:	4618      	mov	r0, r3
 800e05a:	3714      	adds	r7, #20
 800e05c:	46bd      	mov	sp, r7
 800e05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e062:	4770      	bx	lr
 800e064:	00030d40 	.word	0x00030d40

0800e068 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e068:	b480      	push	{r7}
 800e06a:	b085      	sub	sp, #20
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e070:	2300      	movs	r3, #0
 800e072:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	3301      	adds	r3, #1
 800e078:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	4a11      	ldr	r2, [pc, #68]	; (800e0c4 <USB_FlushRxFifo+0x5c>)
 800e07e:	4293      	cmp	r3, r2
 800e080:	d901      	bls.n	800e086 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800e082:	2303      	movs	r3, #3
 800e084:	e018      	b.n	800e0b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	691b      	ldr	r3, [r3, #16]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	daf2      	bge.n	800e074 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800e08e:	2300      	movs	r3, #0
 800e090:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	2210      	movs	r2, #16
 800e096:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	3301      	adds	r3, #1
 800e09c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	4a08      	ldr	r2, [pc, #32]	; (800e0c4 <USB_FlushRxFifo+0x5c>)
 800e0a2:	4293      	cmp	r3, r2
 800e0a4:	d901      	bls.n	800e0aa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800e0a6:	2303      	movs	r3, #3
 800e0a8:	e006      	b.n	800e0b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	691b      	ldr	r3, [r3, #16]
 800e0ae:	f003 0310 	and.w	r3, r3, #16
 800e0b2:	2b10      	cmp	r3, #16
 800e0b4:	d0f0      	beq.n	800e098 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800e0b6:	2300      	movs	r3, #0
}
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	3714      	adds	r7, #20
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c2:	4770      	bx	lr
 800e0c4:	00030d40 	.word	0x00030d40

0800e0c8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e0c8:	b480      	push	{r7}
 800e0ca:	b085      	sub	sp, #20
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	6078      	str	r0, [r7, #4]
 800e0d0:	460b      	mov	r3, r1
 800e0d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e0de:	681a      	ldr	r2, [r3, #0]
 800e0e0:	78fb      	ldrb	r3, [r7, #3]
 800e0e2:	68f9      	ldr	r1, [r7, #12]
 800e0e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e0e8:	4313      	orrs	r3, r2
 800e0ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e0ec:	2300      	movs	r3, #0
}
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	3714      	adds	r7, #20
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f8:	4770      	bx	lr

0800e0fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e0fa:	b480      	push	{r7}
 800e0fc:	b085      	sub	sp, #20
 800e0fe:	af00      	add	r7, sp, #0
 800e100:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	68fa      	ldr	r2, [r7, #12]
 800e110:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e114:	f023 0303 	bic.w	r3, r3, #3
 800e118:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e120:	685b      	ldr	r3, [r3, #4]
 800e122:	68fa      	ldr	r2, [r7, #12]
 800e124:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e128:	f043 0302 	orr.w	r3, r3, #2
 800e12c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e12e:	2300      	movs	r3, #0
}
 800e130:	4618      	mov	r0, r3
 800e132:	3714      	adds	r7, #20
 800e134:	46bd      	mov	sp, r7
 800e136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13a:	4770      	bx	lr

0800e13c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e13c:	b480      	push	{r7}
 800e13e:	b083      	sub	sp, #12
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	695b      	ldr	r3, [r3, #20]
 800e148:	f003 0301 	and.w	r3, r3, #1
}
 800e14c:	4618      	mov	r0, r3
 800e14e:	370c      	adds	r7, #12
 800e150:	46bd      	mov	sp, r7
 800e152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e156:	4770      	bx	lr

0800e158 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e158:	b480      	push	{r7}
 800e15a:	b085      	sub	sp, #20
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e160:	2300      	movs	r3, #0
 800e162:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	3301      	adds	r3, #1
 800e168:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	4a13      	ldr	r2, [pc, #76]	; (800e1bc <USB_CoreReset+0x64>)
 800e16e:	4293      	cmp	r3, r2
 800e170:	d901      	bls.n	800e176 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e172:	2303      	movs	r3, #3
 800e174:	e01b      	b.n	800e1ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	691b      	ldr	r3, [r3, #16]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	daf2      	bge.n	800e164 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e17e:	2300      	movs	r3, #0
 800e180:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	691b      	ldr	r3, [r3, #16]
 800e186:	f043 0201 	orr.w	r2, r3, #1
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	3301      	adds	r3, #1
 800e192:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	4a09      	ldr	r2, [pc, #36]	; (800e1bc <USB_CoreReset+0x64>)
 800e198:	4293      	cmp	r3, r2
 800e19a:	d901      	bls.n	800e1a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e19c:	2303      	movs	r3, #3
 800e19e:	e006      	b.n	800e1ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	691b      	ldr	r3, [r3, #16]
 800e1a4:	f003 0301 	and.w	r3, r3, #1
 800e1a8:	2b01      	cmp	r3, #1
 800e1aa:	d0f0      	beq.n	800e18e <USB_CoreReset+0x36>

  return HAL_OK;
 800e1ac:	2300      	movs	r3, #0
}
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	3714      	adds	r7, #20
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b8:	4770      	bx	lr
 800e1ba:	bf00      	nop
 800e1bc:	00030d40 	.word	0x00030d40

0800e1c0 <__NVIC_SetPriority>:
{
 800e1c0:	b480      	push	{r7}
 800e1c2:	b083      	sub	sp, #12
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	4603      	mov	r3, r0
 800e1c8:	6039      	str	r1, [r7, #0]
 800e1ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800e1cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	db0a      	blt.n	800e1ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e1d4:	683b      	ldr	r3, [r7, #0]
 800e1d6:	b2da      	uxtb	r2, r3
 800e1d8:	490c      	ldr	r1, [pc, #48]	; (800e20c <__NVIC_SetPriority+0x4c>)
 800e1da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e1de:	0112      	lsls	r2, r2, #4
 800e1e0:	b2d2      	uxtb	r2, r2
 800e1e2:	440b      	add	r3, r1
 800e1e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800e1e8:	e00a      	b.n	800e200 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e1ea:	683b      	ldr	r3, [r7, #0]
 800e1ec:	b2da      	uxtb	r2, r3
 800e1ee:	4908      	ldr	r1, [pc, #32]	; (800e210 <__NVIC_SetPriority+0x50>)
 800e1f0:	88fb      	ldrh	r3, [r7, #6]
 800e1f2:	f003 030f 	and.w	r3, r3, #15
 800e1f6:	3b04      	subs	r3, #4
 800e1f8:	0112      	lsls	r2, r2, #4
 800e1fa:	b2d2      	uxtb	r2, r2
 800e1fc:	440b      	add	r3, r1
 800e1fe:	761a      	strb	r2, [r3, #24]
}
 800e200:	bf00      	nop
 800e202:	370c      	adds	r7, #12
 800e204:	46bd      	mov	sp, r7
 800e206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20a:	4770      	bx	lr
 800e20c:	e000e100 	.word	0xe000e100
 800e210:	e000ed00 	.word	0xe000ed00

0800e214 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800e214:	b580      	push	{r7, lr}
 800e216:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800e218:	4b05      	ldr	r3, [pc, #20]	; (800e230 <SysTick_Handler+0x1c>)
 800e21a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800e21c:	f002 f960 	bl	80104e0 <xTaskGetSchedulerState>
 800e220:	4603      	mov	r3, r0
 800e222:	2b01      	cmp	r3, #1
 800e224:	d001      	beq.n	800e22a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800e226:	f000 fd97 	bl	800ed58 <xPortSysTickHandler>
  }
}
 800e22a:	bf00      	nop
 800e22c:	bd80      	pop	{r7, pc}
 800e22e:	bf00      	nop
 800e230:	e000e010 	.word	0xe000e010

0800e234 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e234:	b580      	push	{r7, lr}
 800e236:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800e238:	2100      	movs	r1, #0
 800e23a:	f06f 0004 	mvn.w	r0, #4
 800e23e:	f7ff ffbf 	bl	800e1c0 <__NVIC_SetPriority>
#endif
}
 800e242:	bf00      	nop
 800e244:	bd80      	pop	{r7, pc}
	...

0800e248 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e248:	b480      	push	{r7}
 800e24a:	b083      	sub	sp, #12
 800e24c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e24e:	f3ef 8305 	mrs	r3, IPSR
 800e252:	603b      	str	r3, [r7, #0]
  return(result);
 800e254:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e256:	2b00      	cmp	r3, #0
 800e258:	d003      	beq.n	800e262 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800e25a:	f06f 0305 	mvn.w	r3, #5
 800e25e:	607b      	str	r3, [r7, #4]
 800e260:	e00c      	b.n	800e27c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e262:	4b0a      	ldr	r3, [pc, #40]	; (800e28c <osKernelInitialize+0x44>)
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d105      	bne.n	800e276 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e26a:	4b08      	ldr	r3, [pc, #32]	; (800e28c <osKernelInitialize+0x44>)
 800e26c:	2201      	movs	r2, #1
 800e26e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e270:	2300      	movs	r3, #0
 800e272:	607b      	str	r3, [r7, #4]
 800e274:	e002      	b.n	800e27c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800e276:	f04f 33ff 	mov.w	r3, #4294967295
 800e27a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e27c:	687b      	ldr	r3, [r7, #4]
}
 800e27e:	4618      	mov	r0, r3
 800e280:	370c      	adds	r7, #12
 800e282:	46bd      	mov	sp, r7
 800e284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e288:	4770      	bx	lr
 800e28a:	bf00      	nop
 800e28c:	24000b88 	.word	0x24000b88

0800e290 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e290:	b580      	push	{r7, lr}
 800e292:	b082      	sub	sp, #8
 800e294:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e296:	f3ef 8305 	mrs	r3, IPSR
 800e29a:	603b      	str	r3, [r7, #0]
  return(result);
 800e29c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d003      	beq.n	800e2aa <osKernelStart+0x1a>
    stat = osErrorISR;
 800e2a2:	f06f 0305 	mvn.w	r3, #5
 800e2a6:	607b      	str	r3, [r7, #4]
 800e2a8:	e010      	b.n	800e2cc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e2aa:	4b0b      	ldr	r3, [pc, #44]	; (800e2d8 <osKernelStart+0x48>)
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	2b01      	cmp	r3, #1
 800e2b0:	d109      	bne.n	800e2c6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e2b2:	f7ff ffbf 	bl	800e234 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e2b6:	4b08      	ldr	r3, [pc, #32]	; (800e2d8 <osKernelStart+0x48>)
 800e2b8:	2202      	movs	r2, #2
 800e2ba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e2bc:	f001 fcb4 	bl	800fc28 <vTaskStartScheduler>
      stat = osOK;
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	607b      	str	r3, [r7, #4]
 800e2c4:	e002      	b.n	800e2cc <osKernelStart+0x3c>
    } else {
      stat = osError;
 800e2c6:	f04f 33ff 	mov.w	r3, #4294967295
 800e2ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e2cc:	687b      	ldr	r3, [r7, #4]
}
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	3708      	adds	r7, #8
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	bd80      	pop	{r7, pc}
 800e2d6:	bf00      	nop
 800e2d8:	24000b88 	.word	0x24000b88

0800e2dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b08e      	sub	sp, #56	; 0x38
 800e2e0:	af04      	add	r7, sp, #16
 800e2e2:	60f8      	str	r0, [r7, #12]
 800e2e4:	60b9      	str	r1, [r7, #8]
 800e2e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e2ec:	f3ef 8305 	mrs	r3, IPSR
 800e2f0:	617b      	str	r3, [r7, #20]
  return(result);
 800e2f2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d17e      	bne.n	800e3f6 <osThreadNew+0x11a>
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d07b      	beq.n	800e3f6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800e2fe:	2380      	movs	r3, #128	; 0x80
 800e300:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800e302:	2318      	movs	r3, #24
 800e304:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800e306:	2300      	movs	r3, #0
 800e308:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800e30a:	f04f 33ff 	mov.w	r3, #4294967295
 800e30e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d045      	beq.n	800e3a2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d002      	beq.n	800e324 <osThreadNew+0x48>
        name = attr->name;
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	699b      	ldr	r3, [r3, #24]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d002      	beq.n	800e332 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	699b      	ldr	r3, [r3, #24]
 800e330:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e332:	69fb      	ldr	r3, [r7, #28]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d008      	beq.n	800e34a <osThreadNew+0x6e>
 800e338:	69fb      	ldr	r3, [r7, #28]
 800e33a:	2b38      	cmp	r3, #56	; 0x38
 800e33c:	d805      	bhi.n	800e34a <osThreadNew+0x6e>
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	685b      	ldr	r3, [r3, #4]
 800e342:	f003 0301 	and.w	r3, r3, #1
 800e346:	2b00      	cmp	r3, #0
 800e348:	d001      	beq.n	800e34e <osThreadNew+0x72>
        return (NULL);
 800e34a:	2300      	movs	r3, #0
 800e34c:	e054      	b.n	800e3f8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	695b      	ldr	r3, [r3, #20]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d003      	beq.n	800e35e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	695b      	ldr	r3, [r3, #20]
 800e35a:	089b      	lsrs	r3, r3, #2
 800e35c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	689b      	ldr	r3, [r3, #8]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d00e      	beq.n	800e384 <osThreadNew+0xa8>
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	68db      	ldr	r3, [r3, #12]
 800e36a:	2ba7      	cmp	r3, #167	; 0xa7
 800e36c:	d90a      	bls.n	800e384 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e372:	2b00      	cmp	r3, #0
 800e374:	d006      	beq.n	800e384 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	695b      	ldr	r3, [r3, #20]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d002      	beq.n	800e384 <osThreadNew+0xa8>
        mem = 1;
 800e37e:	2301      	movs	r3, #1
 800e380:	61bb      	str	r3, [r7, #24]
 800e382:	e010      	b.n	800e3a6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	689b      	ldr	r3, [r3, #8]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d10c      	bne.n	800e3a6 <osThreadNew+0xca>
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	68db      	ldr	r3, [r3, #12]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d108      	bne.n	800e3a6 <osThreadNew+0xca>
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	691b      	ldr	r3, [r3, #16]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d104      	bne.n	800e3a6 <osThreadNew+0xca>
          mem = 0;
 800e39c:	2300      	movs	r3, #0
 800e39e:	61bb      	str	r3, [r7, #24]
 800e3a0:	e001      	b.n	800e3a6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e3a6:	69bb      	ldr	r3, [r7, #24]
 800e3a8:	2b01      	cmp	r3, #1
 800e3aa:	d110      	bne.n	800e3ce <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800e3b0:	687a      	ldr	r2, [r7, #4]
 800e3b2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e3b4:	9202      	str	r2, [sp, #8]
 800e3b6:	9301      	str	r3, [sp, #4]
 800e3b8:	69fb      	ldr	r3, [r7, #28]
 800e3ba:	9300      	str	r3, [sp, #0]
 800e3bc:	68bb      	ldr	r3, [r7, #8]
 800e3be:	6a3a      	ldr	r2, [r7, #32]
 800e3c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e3c2:	68f8      	ldr	r0, [r7, #12]
 800e3c4:	f001 fa44 	bl	800f850 <xTaskCreateStatic>
 800e3c8:	4603      	mov	r3, r0
 800e3ca:	613b      	str	r3, [r7, #16]
 800e3cc:	e013      	b.n	800e3f6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800e3ce:	69bb      	ldr	r3, [r7, #24]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d110      	bne.n	800e3f6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e3d4:	6a3b      	ldr	r3, [r7, #32]
 800e3d6:	b29a      	uxth	r2, r3
 800e3d8:	f107 0310 	add.w	r3, r7, #16
 800e3dc:	9301      	str	r3, [sp, #4]
 800e3de:	69fb      	ldr	r3, [r7, #28]
 800e3e0:	9300      	str	r3, [sp, #0]
 800e3e2:	68bb      	ldr	r3, [r7, #8]
 800e3e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e3e6:	68f8      	ldr	r0, [r7, #12]
 800e3e8:	f001 fa8f 	bl	800f90a <xTaskCreate>
 800e3ec:	4603      	mov	r3, r0
 800e3ee:	2b01      	cmp	r3, #1
 800e3f0:	d001      	beq.n	800e3f6 <osThreadNew+0x11a>
            hTask = NULL;
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e3f6:	693b      	ldr	r3, [r7, #16]
}
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	3728      	adds	r7, #40	; 0x28
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	bd80      	pop	{r7, pc}

0800e400 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800e400:	b580      	push	{r7, lr}
 800e402:	b084      	sub	sp, #16
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e408:	f3ef 8305 	mrs	r3, IPSR
 800e40c:	60bb      	str	r3, [r7, #8]
  return(result);
 800e40e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e410:	2b00      	cmp	r3, #0
 800e412:	d003      	beq.n	800e41c <osDelay+0x1c>
    stat = osErrorISR;
 800e414:	f06f 0305 	mvn.w	r3, #5
 800e418:	60fb      	str	r3, [r7, #12]
 800e41a:	e007      	b.n	800e42c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800e41c:	2300      	movs	r3, #0
 800e41e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d002      	beq.n	800e42c <osDelay+0x2c>
      vTaskDelay(ticks);
 800e426:	6878      	ldr	r0, [r7, #4]
 800e428:	f001 fbca 	bl	800fbc0 <vTaskDelay>
    }
  }

  return (stat);
 800e42c:	68fb      	ldr	r3, [r7, #12]
}
 800e42e:	4618      	mov	r0, r3
 800e430:	3710      	adds	r7, #16
 800e432:	46bd      	mov	sp, r7
 800e434:	bd80      	pop	{r7, pc}
	...

0800e438 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e438:	b480      	push	{r7}
 800e43a:	b085      	sub	sp, #20
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	60f8      	str	r0, [r7, #12]
 800e440:	60b9      	str	r1, [r7, #8]
 800e442:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	4a07      	ldr	r2, [pc, #28]	; (800e464 <vApplicationGetIdleTaskMemory+0x2c>)
 800e448:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e44a:	68bb      	ldr	r3, [r7, #8]
 800e44c:	4a06      	ldr	r2, [pc, #24]	; (800e468 <vApplicationGetIdleTaskMemory+0x30>)
 800e44e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	2280      	movs	r2, #128	; 0x80
 800e454:	601a      	str	r2, [r3, #0]
}
 800e456:	bf00      	nop
 800e458:	3714      	adds	r7, #20
 800e45a:	46bd      	mov	sp, r7
 800e45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e460:	4770      	bx	lr
 800e462:	bf00      	nop
 800e464:	24000b8c 	.word	0x24000b8c
 800e468:	24000c34 	.word	0x24000c34

0800e46c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e46c:	b480      	push	{r7}
 800e46e:	b085      	sub	sp, #20
 800e470:	af00      	add	r7, sp, #0
 800e472:	60f8      	str	r0, [r7, #12]
 800e474:	60b9      	str	r1, [r7, #8]
 800e476:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	4a07      	ldr	r2, [pc, #28]	; (800e498 <vApplicationGetTimerTaskMemory+0x2c>)
 800e47c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e47e:	68bb      	ldr	r3, [r7, #8]
 800e480:	4a06      	ldr	r2, [pc, #24]	; (800e49c <vApplicationGetTimerTaskMemory+0x30>)
 800e482:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e48a:	601a      	str	r2, [r3, #0]
}
 800e48c:	bf00      	nop
 800e48e:	3714      	adds	r7, #20
 800e490:	46bd      	mov	sp, r7
 800e492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e496:	4770      	bx	lr
 800e498:	24000e34 	.word	0x24000e34
 800e49c:	24000edc 	.word	0x24000edc

0800e4a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b08a      	sub	sp, #40	; 0x28
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e4ac:	f001 fc2c 	bl	800fd08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e4b0:	4b5b      	ldr	r3, [pc, #364]	; (800e620 <pvPortMalloc+0x180>)
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d101      	bne.n	800e4bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e4b8:	f000 f920 	bl	800e6fc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e4bc:	4b59      	ldr	r3, [pc, #356]	; (800e624 <pvPortMalloc+0x184>)
 800e4be:	681a      	ldr	r2, [r3, #0]
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	4013      	ands	r3, r2
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	f040 8093 	bne.w	800e5f0 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d01d      	beq.n	800e50c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e4d0:	2208      	movs	r2, #8
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	4413      	add	r3, r2
 800e4d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	f003 0307 	and.w	r3, r3, #7
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d014      	beq.n	800e50c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	f023 0307 	bic.w	r3, r3, #7
 800e4e8:	3308      	adds	r3, #8
 800e4ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	f003 0307 	and.w	r3, r3, #7
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d00a      	beq.n	800e50c <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4fa:	f383 8811 	msr	BASEPRI, r3
 800e4fe:	f3bf 8f6f 	isb	sy
 800e502:	f3bf 8f4f 	dsb	sy
 800e506:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e508:	bf00      	nop
 800e50a:	e7fe      	b.n	800e50a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d06e      	beq.n	800e5f0 <pvPortMalloc+0x150>
 800e512:	4b45      	ldr	r3, [pc, #276]	; (800e628 <pvPortMalloc+0x188>)
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	687a      	ldr	r2, [r7, #4]
 800e518:	429a      	cmp	r2, r3
 800e51a:	d869      	bhi.n	800e5f0 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e51c:	4b43      	ldr	r3, [pc, #268]	; (800e62c <pvPortMalloc+0x18c>)
 800e51e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e520:	4b42      	ldr	r3, [pc, #264]	; (800e62c <pvPortMalloc+0x18c>)
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e526:	e004      	b.n	800e532 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e52a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e534:	685b      	ldr	r3, [r3, #4]
 800e536:	687a      	ldr	r2, [r7, #4]
 800e538:	429a      	cmp	r2, r3
 800e53a:	d903      	bls.n	800e544 <pvPortMalloc+0xa4>
 800e53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d1f1      	bne.n	800e528 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e544:	4b36      	ldr	r3, [pc, #216]	; (800e620 <pvPortMalloc+0x180>)
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e54a:	429a      	cmp	r2, r3
 800e54c:	d050      	beq.n	800e5f0 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e54e:	6a3b      	ldr	r3, [r7, #32]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	2208      	movs	r2, #8
 800e554:	4413      	add	r3, r2
 800e556:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e55a:	681a      	ldr	r2, [r3, #0]
 800e55c:	6a3b      	ldr	r3, [r7, #32]
 800e55e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e562:	685a      	ldr	r2, [r3, #4]
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	1ad2      	subs	r2, r2, r3
 800e568:	2308      	movs	r3, #8
 800e56a:	005b      	lsls	r3, r3, #1
 800e56c:	429a      	cmp	r2, r3
 800e56e:	d91f      	bls.n	800e5b0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	4413      	add	r3, r2
 800e576:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e578:	69bb      	ldr	r3, [r7, #24]
 800e57a:	f003 0307 	and.w	r3, r3, #7
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d00a      	beq.n	800e598 <pvPortMalloc+0xf8>
	__asm volatile
 800e582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e586:	f383 8811 	msr	BASEPRI, r3
 800e58a:	f3bf 8f6f 	isb	sy
 800e58e:	f3bf 8f4f 	dsb	sy
 800e592:	613b      	str	r3, [r7, #16]
}
 800e594:	bf00      	nop
 800e596:	e7fe      	b.n	800e596 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e59a:	685a      	ldr	r2, [r3, #4]
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	1ad2      	subs	r2, r2, r3
 800e5a0:	69bb      	ldr	r3, [r7, #24]
 800e5a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5a6:	687a      	ldr	r2, [r7, #4]
 800e5a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e5aa:	69b8      	ldr	r0, [r7, #24]
 800e5ac:	f000 f908 	bl	800e7c0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e5b0:	4b1d      	ldr	r3, [pc, #116]	; (800e628 <pvPortMalloc+0x188>)
 800e5b2:	681a      	ldr	r2, [r3, #0]
 800e5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5b6:	685b      	ldr	r3, [r3, #4]
 800e5b8:	1ad3      	subs	r3, r2, r3
 800e5ba:	4a1b      	ldr	r2, [pc, #108]	; (800e628 <pvPortMalloc+0x188>)
 800e5bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e5be:	4b1a      	ldr	r3, [pc, #104]	; (800e628 <pvPortMalloc+0x188>)
 800e5c0:	681a      	ldr	r2, [r3, #0]
 800e5c2:	4b1b      	ldr	r3, [pc, #108]	; (800e630 <pvPortMalloc+0x190>)
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	429a      	cmp	r2, r3
 800e5c8:	d203      	bcs.n	800e5d2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e5ca:	4b17      	ldr	r3, [pc, #92]	; (800e628 <pvPortMalloc+0x188>)
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	4a18      	ldr	r2, [pc, #96]	; (800e630 <pvPortMalloc+0x190>)
 800e5d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5d4:	685a      	ldr	r2, [r3, #4]
 800e5d6:	4b13      	ldr	r3, [pc, #76]	; (800e624 <pvPortMalloc+0x184>)
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	431a      	orrs	r2, r3
 800e5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e5e6:	4b13      	ldr	r3, [pc, #76]	; (800e634 <pvPortMalloc+0x194>)
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	3301      	adds	r3, #1
 800e5ec:	4a11      	ldr	r2, [pc, #68]	; (800e634 <pvPortMalloc+0x194>)
 800e5ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e5f0:	f001 fb98 	bl	800fd24 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e5f4:	69fb      	ldr	r3, [r7, #28]
 800e5f6:	f003 0307 	and.w	r3, r3, #7
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d00a      	beq.n	800e614 <pvPortMalloc+0x174>
	__asm volatile
 800e5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e602:	f383 8811 	msr	BASEPRI, r3
 800e606:	f3bf 8f6f 	isb	sy
 800e60a:	f3bf 8f4f 	dsb	sy
 800e60e:	60fb      	str	r3, [r7, #12]
}
 800e610:	bf00      	nop
 800e612:	e7fe      	b.n	800e612 <pvPortMalloc+0x172>
	return pvReturn;
 800e614:	69fb      	ldr	r3, [r7, #28]
}
 800e616:	4618      	mov	r0, r3
 800e618:	3728      	adds	r7, #40	; 0x28
 800e61a:	46bd      	mov	sp, r7
 800e61c:	bd80      	pop	{r7, pc}
 800e61e:	bf00      	nop
 800e620:	24004ee4 	.word	0x24004ee4
 800e624:	24004ef8 	.word	0x24004ef8
 800e628:	24004ee8 	.word	0x24004ee8
 800e62c:	24004edc 	.word	0x24004edc
 800e630:	24004eec 	.word	0x24004eec
 800e634:	24004ef0 	.word	0x24004ef0

0800e638 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e638:	b580      	push	{r7, lr}
 800e63a:	b086      	sub	sp, #24
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d04d      	beq.n	800e6e6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e64a:	2308      	movs	r3, #8
 800e64c:	425b      	negs	r3, r3
 800e64e:	697a      	ldr	r2, [r7, #20]
 800e650:	4413      	add	r3, r2
 800e652:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e654:	697b      	ldr	r3, [r7, #20]
 800e656:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e658:	693b      	ldr	r3, [r7, #16]
 800e65a:	685a      	ldr	r2, [r3, #4]
 800e65c:	4b24      	ldr	r3, [pc, #144]	; (800e6f0 <vPortFree+0xb8>)
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	4013      	ands	r3, r2
 800e662:	2b00      	cmp	r3, #0
 800e664:	d10a      	bne.n	800e67c <vPortFree+0x44>
	__asm volatile
 800e666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e66a:	f383 8811 	msr	BASEPRI, r3
 800e66e:	f3bf 8f6f 	isb	sy
 800e672:	f3bf 8f4f 	dsb	sy
 800e676:	60fb      	str	r3, [r7, #12]
}
 800e678:	bf00      	nop
 800e67a:	e7fe      	b.n	800e67a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e67c:	693b      	ldr	r3, [r7, #16]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d00a      	beq.n	800e69a <vPortFree+0x62>
	__asm volatile
 800e684:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e688:	f383 8811 	msr	BASEPRI, r3
 800e68c:	f3bf 8f6f 	isb	sy
 800e690:	f3bf 8f4f 	dsb	sy
 800e694:	60bb      	str	r3, [r7, #8]
}
 800e696:	bf00      	nop
 800e698:	e7fe      	b.n	800e698 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e69a:	693b      	ldr	r3, [r7, #16]
 800e69c:	685a      	ldr	r2, [r3, #4]
 800e69e:	4b14      	ldr	r3, [pc, #80]	; (800e6f0 <vPortFree+0xb8>)
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	4013      	ands	r3, r2
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d01e      	beq.n	800e6e6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e6a8:	693b      	ldr	r3, [r7, #16]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d11a      	bne.n	800e6e6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e6b0:	693b      	ldr	r3, [r7, #16]
 800e6b2:	685a      	ldr	r2, [r3, #4]
 800e6b4:	4b0e      	ldr	r3, [pc, #56]	; (800e6f0 <vPortFree+0xb8>)
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	43db      	mvns	r3, r3
 800e6ba:	401a      	ands	r2, r3
 800e6bc:	693b      	ldr	r3, [r7, #16]
 800e6be:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e6c0:	f001 fb22 	bl	800fd08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e6c4:	693b      	ldr	r3, [r7, #16]
 800e6c6:	685a      	ldr	r2, [r3, #4]
 800e6c8:	4b0a      	ldr	r3, [pc, #40]	; (800e6f4 <vPortFree+0xbc>)
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	4413      	add	r3, r2
 800e6ce:	4a09      	ldr	r2, [pc, #36]	; (800e6f4 <vPortFree+0xbc>)
 800e6d0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e6d2:	6938      	ldr	r0, [r7, #16]
 800e6d4:	f000 f874 	bl	800e7c0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e6d8:	4b07      	ldr	r3, [pc, #28]	; (800e6f8 <vPortFree+0xc0>)
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	3301      	adds	r3, #1
 800e6de:	4a06      	ldr	r2, [pc, #24]	; (800e6f8 <vPortFree+0xc0>)
 800e6e0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e6e2:	f001 fb1f 	bl	800fd24 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e6e6:	bf00      	nop
 800e6e8:	3718      	adds	r7, #24
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	bd80      	pop	{r7, pc}
 800e6ee:	bf00      	nop
 800e6f0:	24004ef8 	.word	0x24004ef8
 800e6f4:	24004ee8 	.word	0x24004ee8
 800e6f8:	24004ef4 	.word	0x24004ef4

0800e6fc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e6fc:	b480      	push	{r7}
 800e6fe:	b085      	sub	sp, #20
 800e700:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e702:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e706:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e708:	4b27      	ldr	r3, [pc, #156]	; (800e7a8 <prvHeapInit+0xac>)
 800e70a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	f003 0307 	and.w	r3, r3, #7
 800e712:	2b00      	cmp	r3, #0
 800e714:	d00c      	beq.n	800e730 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	3307      	adds	r3, #7
 800e71a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	f023 0307 	bic.w	r3, r3, #7
 800e722:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e724:	68ba      	ldr	r2, [r7, #8]
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	1ad3      	subs	r3, r2, r3
 800e72a:	4a1f      	ldr	r2, [pc, #124]	; (800e7a8 <prvHeapInit+0xac>)
 800e72c:	4413      	add	r3, r2
 800e72e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e734:	4a1d      	ldr	r2, [pc, #116]	; (800e7ac <prvHeapInit+0xb0>)
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e73a:	4b1c      	ldr	r3, [pc, #112]	; (800e7ac <prvHeapInit+0xb0>)
 800e73c:	2200      	movs	r2, #0
 800e73e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	68ba      	ldr	r2, [r7, #8]
 800e744:	4413      	add	r3, r2
 800e746:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e748:	2208      	movs	r2, #8
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	1a9b      	subs	r3, r3, r2
 800e74e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	f023 0307 	bic.w	r3, r3, #7
 800e756:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	4a15      	ldr	r2, [pc, #84]	; (800e7b0 <prvHeapInit+0xb4>)
 800e75c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e75e:	4b14      	ldr	r3, [pc, #80]	; (800e7b0 <prvHeapInit+0xb4>)
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	2200      	movs	r2, #0
 800e764:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e766:	4b12      	ldr	r3, [pc, #72]	; (800e7b0 <prvHeapInit+0xb4>)
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	2200      	movs	r2, #0
 800e76c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e772:	683b      	ldr	r3, [r7, #0]
 800e774:	68fa      	ldr	r2, [r7, #12]
 800e776:	1ad2      	subs	r2, r2, r3
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e77c:	4b0c      	ldr	r3, [pc, #48]	; (800e7b0 <prvHeapInit+0xb4>)
 800e77e:	681a      	ldr	r2, [r3, #0]
 800e780:	683b      	ldr	r3, [r7, #0]
 800e782:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e784:	683b      	ldr	r3, [r7, #0]
 800e786:	685b      	ldr	r3, [r3, #4]
 800e788:	4a0a      	ldr	r2, [pc, #40]	; (800e7b4 <prvHeapInit+0xb8>)
 800e78a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e78c:	683b      	ldr	r3, [r7, #0]
 800e78e:	685b      	ldr	r3, [r3, #4]
 800e790:	4a09      	ldr	r2, [pc, #36]	; (800e7b8 <prvHeapInit+0xbc>)
 800e792:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e794:	4b09      	ldr	r3, [pc, #36]	; (800e7bc <prvHeapInit+0xc0>)
 800e796:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e79a:	601a      	str	r2, [r3, #0]
}
 800e79c:	bf00      	nop
 800e79e:	3714      	adds	r7, #20
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a6:	4770      	bx	lr
 800e7a8:	240012dc 	.word	0x240012dc
 800e7ac:	24004edc 	.word	0x24004edc
 800e7b0:	24004ee4 	.word	0x24004ee4
 800e7b4:	24004eec 	.word	0x24004eec
 800e7b8:	24004ee8 	.word	0x24004ee8
 800e7bc:	24004ef8 	.word	0x24004ef8

0800e7c0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e7c0:	b480      	push	{r7}
 800e7c2:	b085      	sub	sp, #20
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e7c8:	4b28      	ldr	r3, [pc, #160]	; (800e86c <prvInsertBlockIntoFreeList+0xac>)
 800e7ca:	60fb      	str	r3, [r7, #12]
 800e7cc:	e002      	b.n	800e7d4 <prvInsertBlockIntoFreeList+0x14>
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	60fb      	str	r3, [r7, #12]
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	687a      	ldr	r2, [r7, #4]
 800e7da:	429a      	cmp	r2, r3
 800e7dc:	d8f7      	bhi.n	800e7ce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	685b      	ldr	r3, [r3, #4]
 800e7e6:	68ba      	ldr	r2, [r7, #8]
 800e7e8:	4413      	add	r3, r2
 800e7ea:	687a      	ldr	r2, [r7, #4]
 800e7ec:	429a      	cmp	r2, r3
 800e7ee:	d108      	bne.n	800e802 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	685a      	ldr	r2, [r3, #4]
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	685b      	ldr	r3, [r3, #4]
 800e7f8:	441a      	add	r2, r3
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	685b      	ldr	r3, [r3, #4]
 800e80a:	68ba      	ldr	r2, [r7, #8]
 800e80c:	441a      	add	r2, r3
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	429a      	cmp	r2, r3
 800e814:	d118      	bne.n	800e848 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	681a      	ldr	r2, [r3, #0]
 800e81a:	4b15      	ldr	r3, [pc, #84]	; (800e870 <prvInsertBlockIntoFreeList+0xb0>)
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	429a      	cmp	r2, r3
 800e820:	d00d      	beq.n	800e83e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	685a      	ldr	r2, [r3, #4]
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	685b      	ldr	r3, [r3, #4]
 800e82c:	441a      	add	r2, r3
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	681a      	ldr	r2, [r3, #0]
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	601a      	str	r2, [r3, #0]
 800e83c:	e008      	b.n	800e850 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e83e:	4b0c      	ldr	r3, [pc, #48]	; (800e870 <prvInsertBlockIntoFreeList+0xb0>)
 800e840:	681a      	ldr	r2, [r3, #0]
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	601a      	str	r2, [r3, #0]
 800e846:	e003      	b.n	800e850 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	681a      	ldr	r2, [r3, #0]
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e850:	68fa      	ldr	r2, [r7, #12]
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	429a      	cmp	r2, r3
 800e856:	d002      	beq.n	800e85e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	687a      	ldr	r2, [r7, #4]
 800e85c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e85e:	bf00      	nop
 800e860:	3714      	adds	r7, #20
 800e862:	46bd      	mov	sp, r7
 800e864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e868:	4770      	bx	lr
 800e86a:	bf00      	nop
 800e86c:	24004edc 	.word	0x24004edc
 800e870:	24004ee4 	.word	0x24004ee4

0800e874 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e874:	b480      	push	{r7}
 800e876:	b083      	sub	sp, #12
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	f103 0208 	add.w	r2, r3, #8
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	f04f 32ff 	mov.w	r2, #4294967295
 800e88c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	f103 0208 	add.w	r2, r3, #8
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	f103 0208 	add.w	r2, r3, #8
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e8a8:	bf00      	nop
 800e8aa:	370c      	adds	r7, #12
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b2:	4770      	bx	lr

0800e8b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e8b4:	b480      	push	{r7}
 800e8b6:	b083      	sub	sp, #12
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	2200      	movs	r2, #0
 800e8c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e8c2:	bf00      	nop
 800e8c4:	370c      	adds	r7, #12
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8cc:	4770      	bx	lr

0800e8ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e8ce:	b480      	push	{r7}
 800e8d0:	b085      	sub	sp, #20
 800e8d2:	af00      	add	r7, sp, #0
 800e8d4:	6078      	str	r0, [r7, #4]
 800e8d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	685b      	ldr	r3, [r3, #4]
 800e8dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e8de:	683b      	ldr	r3, [r7, #0]
 800e8e0:	68fa      	ldr	r2, [r7, #12]
 800e8e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	689a      	ldr	r2, [r3, #8]
 800e8e8:	683b      	ldr	r3, [r7, #0]
 800e8ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	689b      	ldr	r3, [r3, #8]
 800e8f0:	683a      	ldr	r2, [r7, #0]
 800e8f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	683a      	ldr	r2, [r7, #0]
 800e8f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e8fa:	683b      	ldr	r3, [r7, #0]
 800e8fc:	687a      	ldr	r2, [r7, #4]
 800e8fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	1c5a      	adds	r2, r3, #1
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	601a      	str	r2, [r3, #0]
}
 800e90a:	bf00      	nop
 800e90c:	3714      	adds	r7, #20
 800e90e:	46bd      	mov	sp, r7
 800e910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e914:	4770      	bx	lr

0800e916 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e916:	b480      	push	{r7}
 800e918:	b085      	sub	sp, #20
 800e91a:	af00      	add	r7, sp, #0
 800e91c:	6078      	str	r0, [r7, #4]
 800e91e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e920:	683b      	ldr	r3, [r7, #0]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e926:	68bb      	ldr	r3, [r7, #8]
 800e928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e92c:	d103      	bne.n	800e936 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	691b      	ldr	r3, [r3, #16]
 800e932:	60fb      	str	r3, [r7, #12]
 800e934:	e00c      	b.n	800e950 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	3308      	adds	r3, #8
 800e93a:	60fb      	str	r3, [r7, #12]
 800e93c:	e002      	b.n	800e944 <vListInsert+0x2e>
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	685b      	ldr	r3, [r3, #4]
 800e942:	60fb      	str	r3, [r7, #12]
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	685b      	ldr	r3, [r3, #4]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	68ba      	ldr	r2, [r7, #8]
 800e94c:	429a      	cmp	r2, r3
 800e94e:	d2f6      	bcs.n	800e93e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	685a      	ldr	r2, [r3, #4]
 800e954:	683b      	ldr	r3, [r7, #0]
 800e956:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e958:	683b      	ldr	r3, [r7, #0]
 800e95a:	685b      	ldr	r3, [r3, #4]
 800e95c:	683a      	ldr	r2, [r7, #0]
 800e95e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e960:	683b      	ldr	r3, [r7, #0]
 800e962:	68fa      	ldr	r2, [r7, #12]
 800e964:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	683a      	ldr	r2, [r7, #0]
 800e96a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e96c:	683b      	ldr	r3, [r7, #0]
 800e96e:	687a      	ldr	r2, [r7, #4]
 800e970:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	1c5a      	adds	r2, r3, #1
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	601a      	str	r2, [r3, #0]
}
 800e97c:	bf00      	nop
 800e97e:	3714      	adds	r7, #20
 800e980:	46bd      	mov	sp, r7
 800e982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e986:	4770      	bx	lr

0800e988 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e988:	b480      	push	{r7}
 800e98a:	b085      	sub	sp, #20
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	691b      	ldr	r3, [r3, #16]
 800e994:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	685b      	ldr	r3, [r3, #4]
 800e99a:	687a      	ldr	r2, [r7, #4]
 800e99c:	6892      	ldr	r2, [r2, #8]
 800e99e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	689b      	ldr	r3, [r3, #8]
 800e9a4:	687a      	ldr	r2, [r7, #4]
 800e9a6:	6852      	ldr	r2, [r2, #4]
 800e9a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	685b      	ldr	r3, [r3, #4]
 800e9ae:	687a      	ldr	r2, [r7, #4]
 800e9b0:	429a      	cmp	r2, r3
 800e9b2:	d103      	bne.n	800e9bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	689a      	ldr	r2, [r3, #8]
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	2200      	movs	r2, #0
 800e9c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	1e5a      	subs	r2, r3, #1
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	681b      	ldr	r3, [r3, #0]
}
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	3714      	adds	r7, #20
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9da:	4770      	bx	lr

0800e9dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e9dc:	b480      	push	{r7}
 800e9de:	b085      	sub	sp, #20
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	60f8      	str	r0, [r7, #12]
 800e9e4:	60b9      	str	r1, [r7, #8]
 800e9e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	3b04      	subs	r3, #4
 800e9ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e9f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	3b04      	subs	r3, #4
 800e9fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e9fc:	68bb      	ldr	r3, [r7, #8]
 800e9fe:	f023 0201 	bic.w	r2, r3, #1
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	3b04      	subs	r3, #4
 800ea0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ea0c:	4a0c      	ldr	r2, [pc, #48]	; (800ea40 <pxPortInitialiseStack+0x64>)
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	3b14      	subs	r3, #20
 800ea16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ea18:	687a      	ldr	r2, [r7, #4]
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	3b04      	subs	r3, #4
 800ea22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	f06f 0202 	mvn.w	r2, #2
 800ea2a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	3b20      	subs	r3, #32
 800ea30:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ea32:	68fb      	ldr	r3, [r7, #12]
}
 800ea34:	4618      	mov	r0, r3
 800ea36:	3714      	adds	r7, #20
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3e:	4770      	bx	lr
 800ea40:	0800ea45 	.word	0x0800ea45

0800ea44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ea44:	b480      	push	{r7}
 800ea46:	b085      	sub	sp, #20
 800ea48:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ea4e:	4b12      	ldr	r3, [pc, #72]	; (800ea98 <prvTaskExitError+0x54>)
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea56:	d00a      	beq.n	800ea6e <prvTaskExitError+0x2a>
	__asm volatile
 800ea58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea5c:	f383 8811 	msr	BASEPRI, r3
 800ea60:	f3bf 8f6f 	isb	sy
 800ea64:	f3bf 8f4f 	dsb	sy
 800ea68:	60fb      	str	r3, [r7, #12]
}
 800ea6a:	bf00      	nop
 800ea6c:	e7fe      	b.n	800ea6c <prvTaskExitError+0x28>
	__asm volatile
 800ea6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea72:	f383 8811 	msr	BASEPRI, r3
 800ea76:	f3bf 8f6f 	isb	sy
 800ea7a:	f3bf 8f4f 	dsb	sy
 800ea7e:	60bb      	str	r3, [r7, #8]
}
 800ea80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ea82:	bf00      	nop
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d0fc      	beq.n	800ea84 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ea8a:	bf00      	nop
 800ea8c:	bf00      	nop
 800ea8e:	3714      	adds	r7, #20
 800ea90:	46bd      	mov	sp, r7
 800ea92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea96:	4770      	bx	lr
 800ea98:	24000010 	.word	0x24000010
 800ea9c:	00000000 	.word	0x00000000

0800eaa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800eaa0:	4b07      	ldr	r3, [pc, #28]	; (800eac0 <pxCurrentTCBConst2>)
 800eaa2:	6819      	ldr	r1, [r3, #0]
 800eaa4:	6808      	ldr	r0, [r1, #0]
 800eaa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaaa:	f380 8809 	msr	PSP, r0
 800eaae:	f3bf 8f6f 	isb	sy
 800eab2:	f04f 0000 	mov.w	r0, #0
 800eab6:	f380 8811 	msr	BASEPRI, r0
 800eaba:	4770      	bx	lr
 800eabc:	f3af 8000 	nop.w

0800eac0 <pxCurrentTCBConst2>:
 800eac0:	24004f44 	.word	0x24004f44
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800eac4:	bf00      	nop
 800eac6:	bf00      	nop

0800eac8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800eac8:	4808      	ldr	r0, [pc, #32]	; (800eaec <prvPortStartFirstTask+0x24>)
 800eaca:	6800      	ldr	r0, [r0, #0]
 800eacc:	6800      	ldr	r0, [r0, #0]
 800eace:	f380 8808 	msr	MSP, r0
 800ead2:	f04f 0000 	mov.w	r0, #0
 800ead6:	f380 8814 	msr	CONTROL, r0
 800eada:	b662      	cpsie	i
 800eadc:	b661      	cpsie	f
 800eade:	f3bf 8f4f 	dsb	sy
 800eae2:	f3bf 8f6f 	isb	sy
 800eae6:	df00      	svc	0
 800eae8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800eaea:	bf00      	nop
 800eaec:	e000ed08 	.word	0xe000ed08

0800eaf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b086      	sub	sp, #24
 800eaf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800eaf6:	4b46      	ldr	r3, [pc, #280]	; (800ec10 <xPortStartScheduler+0x120>)
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	4a46      	ldr	r2, [pc, #280]	; (800ec14 <xPortStartScheduler+0x124>)
 800eafc:	4293      	cmp	r3, r2
 800eafe:	d10a      	bne.n	800eb16 <xPortStartScheduler+0x26>
	__asm volatile
 800eb00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb04:	f383 8811 	msr	BASEPRI, r3
 800eb08:	f3bf 8f6f 	isb	sy
 800eb0c:	f3bf 8f4f 	dsb	sy
 800eb10:	613b      	str	r3, [r7, #16]
}
 800eb12:	bf00      	nop
 800eb14:	e7fe      	b.n	800eb14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800eb16:	4b3e      	ldr	r3, [pc, #248]	; (800ec10 <xPortStartScheduler+0x120>)
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	4a3f      	ldr	r2, [pc, #252]	; (800ec18 <xPortStartScheduler+0x128>)
 800eb1c:	4293      	cmp	r3, r2
 800eb1e:	d10a      	bne.n	800eb36 <xPortStartScheduler+0x46>
	__asm volatile
 800eb20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb24:	f383 8811 	msr	BASEPRI, r3
 800eb28:	f3bf 8f6f 	isb	sy
 800eb2c:	f3bf 8f4f 	dsb	sy
 800eb30:	60fb      	str	r3, [r7, #12]
}
 800eb32:	bf00      	nop
 800eb34:	e7fe      	b.n	800eb34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800eb36:	4b39      	ldr	r3, [pc, #228]	; (800ec1c <xPortStartScheduler+0x12c>)
 800eb38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800eb3a:	697b      	ldr	r3, [r7, #20]
 800eb3c:	781b      	ldrb	r3, [r3, #0]
 800eb3e:	b2db      	uxtb	r3, r3
 800eb40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800eb42:	697b      	ldr	r3, [r7, #20]
 800eb44:	22ff      	movs	r2, #255	; 0xff
 800eb46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800eb48:	697b      	ldr	r3, [r7, #20]
 800eb4a:	781b      	ldrb	r3, [r3, #0]
 800eb4c:	b2db      	uxtb	r3, r3
 800eb4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800eb50:	78fb      	ldrb	r3, [r7, #3]
 800eb52:	b2db      	uxtb	r3, r3
 800eb54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800eb58:	b2da      	uxtb	r2, r3
 800eb5a:	4b31      	ldr	r3, [pc, #196]	; (800ec20 <xPortStartScheduler+0x130>)
 800eb5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800eb5e:	4b31      	ldr	r3, [pc, #196]	; (800ec24 <xPortStartScheduler+0x134>)
 800eb60:	2207      	movs	r2, #7
 800eb62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eb64:	e009      	b.n	800eb7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800eb66:	4b2f      	ldr	r3, [pc, #188]	; (800ec24 <xPortStartScheduler+0x134>)
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	3b01      	subs	r3, #1
 800eb6c:	4a2d      	ldr	r2, [pc, #180]	; (800ec24 <xPortStartScheduler+0x134>)
 800eb6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800eb70:	78fb      	ldrb	r3, [r7, #3]
 800eb72:	b2db      	uxtb	r3, r3
 800eb74:	005b      	lsls	r3, r3, #1
 800eb76:	b2db      	uxtb	r3, r3
 800eb78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eb7a:	78fb      	ldrb	r3, [r7, #3]
 800eb7c:	b2db      	uxtb	r3, r3
 800eb7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb82:	2b80      	cmp	r3, #128	; 0x80
 800eb84:	d0ef      	beq.n	800eb66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800eb86:	4b27      	ldr	r3, [pc, #156]	; (800ec24 <xPortStartScheduler+0x134>)
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	f1c3 0307 	rsb	r3, r3, #7
 800eb8e:	2b04      	cmp	r3, #4
 800eb90:	d00a      	beq.n	800eba8 <xPortStartScheduler+0xb8>
	__asm volatile
 800eb92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb96:	f383 8811 	msr	BASEPRI, r3
 800eb9a:	f3bf 8f6f 	isb	sy
 800eb9e:	f3bf 8f4f 	dsb	sy
 800eba2:	60bb      	str	r3, [r7, #8]
}
 800eba4:	bf00      	nop
 800eba6:	e7fe      	b.n	800eba6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800eba8:	4b1e      	ldr	r3, [pc, #120]	; (800ec24 <xPortStartScheduler+0x134>)
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	021b      	lsls	r3, r3, #8
 800ebae:	4a1d      	ldr	r2, [pc, #116]	; (800ec24 <xPortStartScheduler+0x134>)
 800ebb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ebb2:	4b1c      	ldr	r3, [pc, #112]	; (800ec24 <xPortStartScheduler+0x134>)
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ebba:	4a1a      	ldr	r2, [pc, #104]	; (800ec24 <xPortStartScheduler+0x134>)
 800ebbc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	b2da      	uxtb	r2, r3
 800ebc2:	697b      	ldr	r3, [r7, #20]
 800ebc4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ebc6:	4b18      	ldr	r3, [pc, #96]	; (800ec28 <xPortStartScheduler+0x138>)
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	4a17      	ldr	r2, [pc, #92]	; (800ec28 <xPortStartScheduler+0x138>)
 800ebcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ebd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ebd2:	4b15      	ldr	r3, [pc, #84]	; (800ec28 <xPortStartScheduler+0x138>)
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	4a14      	ldr	r2, [pc, #80]	; (800ec28 <xPortStartScheduler+0x138>)
 800ebd8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ebdc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ebde:	f000 f8dd 	bl	800ed9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ebe2:	4b12      	ldr	r3, [pc, #72]	; (800ec2c <xPortStartScheduler+0x13c>)
 800ebe4:	2200      	movs	r2, #0
 800ebe6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ebe8:	f000 f8fc 	bl	800ede4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ebec:	4b10      	ldr	r3, [pc, #64]	; (800ec30 <xPortStartScheduler+0x140>)
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	4a0f      	ldr	r2, [pc, #60]	; (800ec30 <xPortStartScheduler+0x140>)
 800ebf2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ebf6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ebf8:	f7ff ff66 	bl	800eac8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ebfc:	f001 f9fa 	bl	800fff4 <vTaskSwitchContext>
	prvTaskExitError();
 800ec00:	f7ff ff20 	bl	800ea44 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ec04:	2300      	movs	r3, #0
}
 800ec06:	4618      	mov	r0, r3
 800ec08:	3718      	adds	r7, #24
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	bd80      	pop	{r7, pc}
 800ec0e:	bf00      	nop
 800ec10:	e000ed00 	.word	0xe000ed00
 800ec14:	410fc271 	.word	0x410fc271
 800ec18:	410fc270 	.word	0x410fc270
 800ec1c:	e000e400 	.word	0xe000e400
 800ec20:	24004efc 	.word	0x24004efc
 800ec24:	24004f00 	.word	0x24004f00
 800ec28:	e000ed20 	.word	0xe000ed20
 800ec2c:	24000010 	.word	0x24000010
 800ec30:	e000ef34 	.word	0xe000ef34

0800ec34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ec34:	b480      	push	{r7}
 800ec36:	b083      	sub	sp, #12
 800ec38:	af00      	add	r7, sp, #0
	__asm volatile
 800ec3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec3e:	f383 8811 	msr	BASEPRI, r3
 800ec42:	f3bf 8f6f 	isb	sy
 800ec46:	f3bf 8f4f 	dsb	sy
 800ec4a:	607b      	str	r3, [r7, #4]
}
 800ec4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ec4e:	4b0f      	ldr	r3, [pc, #60]	; (800ec8c <vPortEnterCritical+0x58>)
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	3301      	adds	r3, #1
 800ec54:	4a0d      	ldr	r2, [pc, #52]	; (800ec8c <vPortEnterCritical+0x58>)
 800ec56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ec58:	4b0c      	ldr	r3, [pc, #48]	; (800ec8c <vPortEnterCritical+0x58>)
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	2b01      	cmp	r3, #1
 800ec5e:	d10f      	bne.n	800ec80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ec60:	4b0b      	ldr	r3, [pc, #44]	; (800ec90 <vPortEnterCritical+0x5c>)
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	b2db      	uxtb	r3, r3
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d00a      	beq.n	800ec80 <vPortEnterCritical+0x4c>
	__asm volatile
 800ec6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec6e:	f383 8811 	msr	BASEPRI, r3
 800ec72:	f3bf 8f6f 	isb	sy
 800ec76:	f3bf 8f4f 	dsb	sy
 800ec7a:	603b      	str	r3, [r7, #0]
}
 800ec7c:	bf00      	nop
 800ec7e:	e7fe      	b.n	800ec7e <vPortEnterCritical+0x4a>
	}
}
 800ec80:	bf00      	nop
 800ec82:	370c      	adds	r7, #12
 800ec84:	46bd      	mov	sp, r7
 800ec86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8a:	4770      	bx	lr
 800ec8c:	24000010 	.word	0x24000010
 800ec90:	e000ed04 	.word	0xe000ed04

0800ec94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ec94:	b480      	push	{r7}
 800ec96:	b083      	sub	sp, #12
 800ec98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ec9a:	4b12      	ldr	r3, [pc, #72]	; (800ece4 <vPortExitCritical+0x50>)
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d10a      	bne.n	800ecb8 <vPortExitCritical+0x24>
	__asm volatile
 800eca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eca6:	f383 8811 	msr	BASEPRI, r3
 800ecaa:	f3bf 8f6f 	isb	sy
 800ecae:	f3bf 8f4f 	dsb	sy
 800ecb2:	607b      	str	r3, [r7, #4]
}
 800ecb4:	bf00      	nop
 800ecb6:	e7fe      	b.n	800ecb6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ecb8:	4b0a      	ldr	r3, [pc, #40]	; (800ece4 <vPortExitCritical+0x50>)
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	3b01      	subs	r3, #1
 800ecbe:	4a09      	ldr	r2, [pc, #36]	; (800ece4 <vPortExitCritical+0x50>)
 800ecc0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ecc2:	4b08      	ldr	r3, [pc, #32]	; (800ece4 <vPortExitCritical+0x50>)
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d105      	bne.n	800ecd6 <vPortExitCritical+0x42>
 800ecca:	2300      	movs	r3, #0
 800eccc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ecce:	683b      	ldr	r3, [r7, #0]
 800ecd0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ecd4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ecd6:	bf00      	nop
 800ecd8:	370c      	adds	r7, #12
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece0:	4770      	bx	lr
 800ece2:	bf00      	nop
 800ece4:	24000010 	.word	0x24000010
	...

0800ecf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ecf0:	f3ef 8009 	mrs	r0, PSP
 800ecf4:	f3bf 8f6f 	isb	sy
 800ecf8:	4b15      	ldr	r3, [pc, #84]	; (800ed50 <pxCurrentTCBConst>)
 800ecfa:	681a      	ldr	r2, [r3, #0]
 800ecfc:	f01e 0f10 	tst.w	lr, #16
 800ed00:	bf08      	it	eq
 800ed02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ed06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed0a:	6010      	str	r0, [r2, #0]
 800ed0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ed10:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ed14:	f380 8811 	msr	BASEPRI, r0
 800ed18:	f3bf 8f4f 	dsb	sy
 800ed1c:	f3bf 8f6f 	isb	sy
 800ed20:	f001 f968 	bl	800fff4 <vTaskSwitchContext>
 800ed24:	f04f 0000 	mov.w	r0, #0
 800ed28:	f380 8811 	msr	BASEPRI, r0
 800ed2c:	bc09      	pop	{r0, r3}
 800ed2e:	6819      	ldr	r1, [r3, #0]
 800ed30:	6808      	ldr	r0, [r1, #0]
 800ed32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed36:	f01e 0f10 	tst.w	lr, #16
 800ed3a:	bf08      	it	eq
 800ed3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ed40:	f380 8809 	msr	PSP, r0
 800ed44:	f3bf 8f6f 	isb	sy
 800ed48:	4770      	bx	lr
 800ed4a:	bf00      	nop
 800ed4c:	f3af 8000 	nop.w

0800ed50 <pxCurrentTCBConst>:
 800ed50:	24004f44 	.word	0x24004f44
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ed54:	bf00      	nop
 800ed56:	bf00      	nop

0800ed58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b082      	sub	sp, #8
 800ed5c:	af00      	add	r7, sp, #0
	__asm volatile
 800ed5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed62:	f383 8811 	msr	BASEPRI, r3
 800ed66:	f3bf 8f6f 	isb	sy
 800ed6a:	f3bf 8f4f 	dsb	sy
 800ed6e:	607b      	str	r3, [r7, #4]
}
 800ed70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ed72:	f001 f885 	bl	800fe80 <xTaskIncrementTick>
 800ed76:	4603      	mov	r3, r0
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d003      	beq.n	800ed84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ed7c:	4b06      	ldr	r3, [pc, #24]	; (800ed98 <xPortSysTickHandler+0x40>)
 800ed7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed82:	601a      	str	r2, [r3, #0]
 800ed84:	2300      	movs	r3, #0
 800ed86:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ed88:	683b      	ldr	r3, [r7, #0]
 800ed8a:	f383 8811 	msr	BASEPRI, r3
}
 800ed8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ed90:	bf00      	nop
 800ed92:	3708      	adds	r7, #8
 800ed94:	46bd      	mov	sp, r7
 800ed96:	bd80      	pop	{r7, pc}
 800ed98:	e000ed04 	.word	0xe000ed04

0800ed9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ed9c:	b480      	push	{r7}
 800ed9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800eda0:	4b0b      	ldr	r3, [pc, #44]	; (800edd0 <vPortSetupTimerInterrupt+0x34>)
 800eda2:	2200      	movs	r2, #0
 800eda4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800eda6:	4b0b      	ldr	r3, [pc, #44]	; (800edd4 <vPortSetupTimerInterrupt+0x38>)
 800eda8:	2200      	movs	r2, #0
 800edaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800edac:	4b0a      	ldr	r3, [pc, #40]	; (800edd8 <vPortSetupTimerInterrupt+0x3c>)
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	4a0a      	ldr	r2, [pc, #40]	; (800eddc <vPortSetupTimerInterrupt+0x40>)
 800edb2:	fba2 2303 	umull	r2, r3, r2, r3
 800edb6:	099b      	lsrs	r3, r3, #6
 800edb8:	4a09      	ldr	r2, [pc, #36]	; (800ede0 <vPortSetupTimerInterrupt+0x44>)
 800edba:	3b01      	subs	r3, #1
 800edbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800edbe:	4b04      	ldr	r3, [pc, #16]	; (800edd0 <vPortSetupTimerInterrupt+0x34>)
 800edc0:	2207      	movs	r2, #7
 800edc2:	601a      	str	r2, [r3, #0]
}
 800edc4:	bf00      	nop
 800edc6:	46bd      	mov	sp, r7
 800edc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edcc:	4770      	bx	lr
 800edce:	bf00      	nop
 800edd0:	e000e010 	.word	0xe000e010
 800edd4:	e000e018 	.word	0xe000e018
 800edd8:	24000000 	.word	0x24000000
 800eddc:	10624dd3 	.word	0x10624dd3
 800ede0:	e000e014 	.word	0xe000e014

0800ede4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ede4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800edf4 <vPortEnableVFP+0x10>
 800ede8:	6801      	ldr	r1, [r0, #0]
 800edea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800edee:	6001      	str	r1, [r0, #0]
 800edf0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800edf2:	bf00      	nop
 800edf4:	e000ed88 	.word	0xe000ed88

0800edf8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800edf8:	b480      	push	{r7}
 800edfa:	b085      	sub	sp, #20
 800edfc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800edfe:	f3ef 8305 	mrs	r3, IPSR
 800ee02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	2b0f      	cmp	r3, #15
 800ee08:	d914      	bls.n	800ee34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ee0a:	4a17      	ldr	r2, [pc, #92]	; (800ee68 <vPortValidateInterruptPriority+0x70>)
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	4413      	add	r3, r2
 800ee10:	781b      	ldrb	r3, [r3, #0]
 800ee12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ee14:	4b15      	ldr	r3, [pc, #84]	; (800ee6c <vPortValidateInterruptPriority+0x74>)
 800ee16:	781b      	ldrb	r3, [r3, #0]
 800ee18:	7afa      	ldrb	r2, [r7, #11]
 800ee1a:	429a      	cmp	r2, r3
 800ee1c:	d20a      	bcs.n	800ee34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ee1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee22:	f383 8811 	msr	BASEPRI, r3
 800ee26:	f3bf 8f6f 	isb	sy
 800ee2a:	f3bf 8f4f 	dsb	sy
 800ee2e:	607b      	str	r3, [r7, #4]
}
 800ee30:	bf00      	nop
 800ee32:	e7fe      	b.n	800ee32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ee34:	4b0e      	ldr	r3, [pc, #56]	; (800ee70 <vPortValidateInterruptPriority+0x78>)
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ee3c:	4b0d      	ldr	r3, [pc, #52]	; (800ee74 <vPortValidateInterruptPriority+0x7c>)
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	429a      	cmp	r2, r3
 800ee42:	d90a      	bls.n	800ee5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ee44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee48:	f383 8811 	msr	BASEPRI, r3
 800ee4c:	f3bf 8f6f 	isb	sy
 800ee50:	f3bf 8f4f 	dsb	sy
 800ee54:	603b      	str	r3, [r7, #0]
}
 800ee56:	bf00      	nop
 800ee58:	e7fe      	b.n	800ee58 <vPortValidateInterruptPriority+0x60>
	}
 800ee5a:	bf00      	nop
 800ee5c:	3714      	adds	r7, #20
 800ee5e:	46bd      	mov	sp, r7
 800ee60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee64:	4770      	bx	lr
 800ee66:	bf00      	nop
 800ee68:	e000e3f0 	.word	0xe000e3f0
 800ee6c:	24004efc 	.word	0x24004efc
 800ee70:	e000ed0c 	.word	0xe000ed0c
 800ee74:	24004f00 	.word	0x24004f00

0800ee78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ee78:	b580      	push	{r7, lr}
 800ee7a:	b084      	sub	sp, #16
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	6078      	str	r0, [r7, #4]
 800ee80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d10a      	bne.n	800eea2 <xQueueGenericReset+0x2a>
	__asm volatile
 800ee8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee90:	f383 8811 	msr	BASEPRI, r3
 800ee94:	f3bf 8f6f 	isb	sy
 800ee98:	f3bf 8f4f 	dsb	sy
 800ee9c:	60bb      	str	r3, [r7, #8]
}
 800ee9e:	bf00      	nop
 800eea0:	e7fe      	b.n	800eea0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800eea2:	f7ff fec7 	bl	800ec34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	681a      	ldr	r2, [r3, #0]
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eeae:	68f9      	ldr	r1, [r7, #12]
 800eeb0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800eeb2:	fb01 f303 	mul.w	r3, r1, r3
 800eeb6:	441a      	add	r2, r3
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	2200      	movs	r2, #0
 800eec0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	681a      	ldr	r2, [r3, #0]
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	681a      	ldr	r2, [r3, #0]
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eed2:	3b01      	subs	r3, #1
 800eed4:	68f9      	ldr	r1, [r7, #12]
 800eed6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800eed8:	fb01 f303 	mul.w	r3, r1, r3
 800eedc:	441a      	add	r2, r3
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	22ff      	movs	r2, #255	; 0xff
 800eee6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	22ff      	movs	r2, #255	; 0xff
 800eeee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800eef2:	683b      	ldr	r3, [r7, #0]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d114      	bne.n	800ef22 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	691b      	ldr	r3, [r3, #16]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d01a      	beq.n	800ef36 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	3310      	adds	r3, #16
 800ef04:	4618      	mov	r0, r3
 800ef06:	f001 f929 	bl	801015c <xTaskRemoveFromEventList>
 800ef0a:	4603      	mov	r3, r0
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d012      	beq.n	800ef36 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ef10:	4b0c      	ldr	r3, [pc, #48]	; (800ef44 <xQueueGenericReset+0xcc>)
 800ef12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef16:	601a      	str	r2, [r3, #0]
 800ef18:	f3bf 8f4f 	dsb	sy
 800ef1c:	f3bf 8f6f 	isb	sy
 800ef20:	e009      	b.n	800ef36 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	3310      	adds	r3, #16
 800ef26:	4618      	mov	r0, r3
 800ef28:	f7ff fca4 	bl	800e874 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	3324      	adds	r3, #36	; 0x24
 800ef30:	4618      	mov	r0, r3
 800ef32:	f7ff fc9f 	bl	800e874 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ef36:	f7ff fead 	bl	800ec94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ef3a:	2301      	movs	r3, #1
}
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	3710      	adds	r7, #16
 800ef40:	46bd      	mov	sp, r7
 800ef42:	bd80      	pop	{r7, pc}
 800ef44:	e000ed04 	.word	0xe000ed04

0800ef48 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ef48:	b580      	push	{r7, lr}
 800ef4a:	b08e      	sub	sp, #56	; 0x38
 800ef4c:	af02      	add	r7, sp, #8
 800ef4e:	60f8      	str	r0, [r7, #12]
 800ef50:	60b9      	str	r1, [r7, #8]
 800ef52:	607a      	str	r2, [r7, #4]
 800ef54:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d10a      	bne.n	800ef72 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ef5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef60:	f383 8811 	msr	BASEPRI, r3
 800ef64:	f3bf 8f6f 	isb	sy
 800ef68:	f3bf 8f4f 	dsb	sy
 800ef6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ef6e:	bf00      	nop
 800ef70:	e7fe      	b.n	800ef70 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ef72:	683b      	ldr	r3, [r7, #0]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d10a      	bne.n	800ef8e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ef78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef7c:	f383 8811 	msr	BASEPRI, r3
 800ef80:	f3bf 8f6f 	isb	sy
 800ef84:	f3bf 8f4f 	dsb	sy
 800ef88:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ef8a:	bf00      	nop
 800ef8c:	e7fe      	b.n	800ef8c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d002      	beq.n	800ef9a <xQueueGenericCreateStatic+0x52>
 800ef94:	68bb      	ldr	r3, [r7, #8]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d001      	beq.n	800ef9e <xQueueGenericCreateStatic+0x56>
 800ef9a:	2301      	movs	r3, #1
 800ef9c:	e000      	b.n	800efa0 <xQueueGenericCreateStatic+0x58>
 800ef9e:	2300      	movs	r3, #0
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d10a      	bne.n	800efba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800efa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efa8:	f383 8811 	msr	BASEPRI, r3
 800efac:	f3bf 8f6f 	isb	sy
 800efb0:	f3bf 8f4f 	dsb	sy
 800efb4:	623b      	str	r3, [r7, #32]
}
 800efb6:	bf00      	nop
 800efb8:	e7fe      	b.n	800efb8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d102      	bne.n	800efc6 <xQueueGenericCreateStatic+0x7e>
 800efc0:	68bb      	ldr	r3, [r7, #8]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d101      	bne.n	800efca <xQueueGenericCreateStatic+0x82>
 800efc6:	2301      	movs	r3, #1
 800efc8:	e000      	b.n	800efcc <xQueueGenericCreateStatic+0x84>
 800efca:	2300      	movs	r3, #0
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d10a      	bne.n	800efe6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800efd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efd4:	f383 8811 	msr	BASEPRI, r3
 800efd8:	f3bf 8f6f 	isb	sy
 800efdc:	f3bf 8f4f 	dsb	sy
 800efe0:	61fb      	str	r3, [r7, #28]
}
 800efe2:	bf00      	nop
 800efe4:	e7fe      	b.n	800efe4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800efe6:	2350      	movs	r3, #80	; 0x50
 800efe8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800efea:	697b      	ldr	r3, [r7, #20]
 800efec:	2b50      	cmp	r3, #80	; 0x50
 800efee:	d00a      	beq.n	800f006 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800eff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eff4:	f383 8811 	msr	BASEPRI, r3
 800eff8:	f3bf 8f6f 	isb	sy
 800effc:	f3bf 8f4f 	dsb	sy
 800f000:	61bb      	str	r3, [r7, #24]
}
 800f002:	bf00      	nop
 800f004:	e7fe      	b.n	800f004 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f006:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f008:	683b      	ldr	r3, [r7, #0]
 800f00a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f00c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d00d      	beq.n	800f02e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f014:	2201      	movs	r2, #1
 800f016:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f01a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f01e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f020:	9300      	str	r3, [sp, #0]
 800f022:	4613      	mov	r3, r2
 800f024:	687a      	ldr	r2, [r7, #4]
 800f026:	68b9      	ldr	r1, [r7, #8]
 800f028:	68f8      	ldr	r0, [r7, #12]
 800f02a:	f000 f805 	bl	800f038 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f030:	4618      	mov	r0, r3
 800f032:	3730      	adds	r7, #48	; 0x30
 800f034:	46bd      	mov	sp, r7
 800f036:	bd80      	pop	{r7, pc}

0800f038 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f038:	b580      	push	{r7, lr}
 800f03a:	b084      	sub	sp, #16
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	60f8      	str	r0, [r7, #12]
 800f040:	60b9      	str	r1, [r7, #8]
 800f042:	607a      	str	r2, [r7, #4]
 800f044:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f046:	68bb      	ldr	r3, [r7, #8]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d103      	bne.n	800f054 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f04c:	69bb      	ldr	r3, [r7, #24]
 800f04e:	69ba      	ldr	r2, [r7, #24]
 800f050:	601a      	str	r2, [r3, #0]
 800f052:	e002      	b.n	800f05a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f054:	69bb      	ldr	r3, [r7, #24]
 800f056:	687a      	ldr	r2, [r7, #4]
 800f058:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f05a:	69bb      	ldr	r3, [r7, #24]
 800f05c:	68fa      	ldr	r2, [r7, #12]
 800f05e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f060:	69bb      	ldr	r3, [r7, #24]
 800f062:	68ba      	ldr	r2, [r7, #8]
 800f064:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f066:	2101      	movs	r1, #1
 800f068:	69b8      	ldr	r0, [r7, #24]
 800f06a:	f7ff ff05 	bl	800ee78 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f06e:	69bb      	ldr	r3, [r7, #24]
 800f070:	78fa      	ldrb	r2, [r7, #3]
 800f072:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f076:	bf00      	nop
 800f078:	3710      	adds	r7, #16
 800f07a:	46bd      	mov	sp, r7
 800f07c:	bd80      	pop	{r7, pc}
	...

0800f080 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f080:	b580      	push	{r7, lr}
 800f082:	b08e      	sub	sp, #56	; 0x38
 800f084:	af00      	add	r7, sp, #0
 800f086:	60f8      	str	r0, [r7, #12]
 800f088:	60b9      	str	r1, [r7, #8]
 800f08a:	607a      	str	r2, [r7, #4]
 800f08c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f08e:	2300      	movs	r3, #0
 800f090:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d10a      	bne.n	800f0b2 <xQueueGenericSend+0x32>
	__asm volatile
 800f09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0a0:	f383 8811 	msr	BASEPRI, r3
 800f0a4:	f3bf 8f6f 	isb	sy
 800f0a8:	f3bf 8f4f 	dsb	sy
 800f0ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f0ae:	bf00      	nop
 800f0b0:	e7fe      	b.n	800f0b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f0b2:	68bb      	ldr	r3, [r7, #8]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d103      	bne.n	800f0c0 <xQueueGenericSend+0x40>
 800f0b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d101      	bne.n	800f0c4 <xQueueGenericSend+0x44>
 800f0c0:	2301      	movs	r3, #1
 800f0c2:	e000      	b.n	800f0c6 <xQueueGenericSend+0x46>
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d10a      	bne.n	800f0e0 <xQueueGenericSend+0x60>
	__asm volatile
 800f0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0ce:	f383 8811 	msr	BASEPRI, r3
 800f0d2:	f3bf 8f6f 	isb	sy
 800f0d6:	f3bf 8f4f 	dsb	sy
 800f0da:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f0dc:	bf00      	nop
 800f0de:	e7fe      	b.n	800f0de <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f0e0:	683b      	ldr	r3, [r7, #0]
 800f0e2:	2b02      	cmp	r3, #2
 800f0e4:	d103      	bne.n	800f0ee <xQueueGenericSend+0x6e>
 800f0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f0ea:	2b01      	cmp	r3, #1
 800f0ec:	d101      	bne.n	800f0f2 <xQueueGenericSend+0x72>
 800f0ee:	2301      	movs	r3, #1
 800f0f0:	e000      	b.n	800f0f4 <xQueueGenericSend+0x74>
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d10a      	bne.n	800f10e <xQueueGenericSend+0x8e>
	__asm volatile
 800f0f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0fc:	f383 8811 	msr	BASEPRI, r3
 800f100:	f3bf 8f6f 	isb	sy
 800f104:	f3bf 8f4f 	dsb	sy
 800f108:	623b      	str	r3, [r7, #32]
}
 800f10a:	bf00      	nop
 800f10c:	e7fe      	b.n	800f10c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f10e:	f001 f9e7 	bl	80104e0 <xTaskGetSchedulerState>
 800f112:	4603      	mov	r3, r0
 800f114:	2b00      	cmp	r3, #0
 800f116:	d102      	bne.n	800f11e <xQueueGenericSend+0x9e>
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d101      	bne.n	800f122 <xQueueGenericSend+0xa2>
 800f11e:	2301      	movs	r3, #1
 800f120:	e000      	b.n	800f124 <xQueueGenericSend+0xa4>
 800f122:	2300      	movs	r3, #0
 800f124:	2b00      	cmp	r3, #0
 800f126:	d10a      	bne.n	800f13e <xQueueGenericSend+0xbe>
	__asm volatile
 800f128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f12c:	f383 8811 	msr	BASEPRI, r3
 800f130:	f3bf 8f6f 	isb	sy
 800f134:	f3bf 8f4f 	dsb	sy
 800f138:	61fb      	str	r3, [r7, #28]
}
 800f13a:	bf00      	nop
 800f13c:	e7fe      	b.n	800f13c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f13e:	f7ff fd79 	bl	800ec34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f144:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f14a:	429a      	cmp	r2, r3
 800f14c:	d302      	bcc.n	800f154 <xQueueGenericSend+0xd4>
 800f14e:	683b      	ldr	r3, [r7, #0]
 800f150:	2b02      	cmp	r3, #2
 800f152:	d129      	bne.n	800f1a8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f154:	683a      	ldr	r2, [r7, #0]
 800f156:	68b9      	ldr	r1, [r7, #8]
 800f158:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f15a:	f000 fa0b 	bl	800f574 <prvCopyDataToQueue>
 800f15e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f164:	2b00      	cmp	r3, #0
 800f166:	d010      	beq.n	800f18a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f16a:	3324      	adds	r3, #36	; 0x24
 800f16c:	4618      	mov	r0, r3
 800f16e:	f000 fff5 	bl	801015c <xTaskRemoveFromEventList>
 800f172:	4603      	mov	r3, r0
 800f174:	2b00      	cmp	r3, #0
 800f176:	d013      	beq.n	800f1a0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f178:	4b3f      	ldr	r3, [pc, #252]	; (800f278 <xQueueGenericSend+0x1f8>)
 800f17a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f17e:	601a      	str	r2, [r3, #0]
 800f180:	f3bf 8f4f 	dsb	sy
 800f184:	f3bf 8f6f 	isb	sy
 800f188:	e00a      	b.n	800f1a0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d007      	beq.n	800f1a0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f190:	4b39      	ldr	r3, [pc, #228]	; (800f278 <xQueueGenericSend+0x1f8>)
 800f192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f196:	601a      	str	r2, [r3, #0]
 800f198:	f3bf 8f4f 	dsb	sy
 800f19c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f1a0:	f7ff fd78 	bl	800ec94 <vPortExitCritical>
				return pdPASS;
 800f1a4:	2301      	movs	r3, #1
 800f1a6:	e063      	b.n	800f270 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d103      	bne.n	800f1b6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f1ae:	f7ff fd71 	bl	800ec94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	e05c      	b.n	800f270 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f1b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d106      	bne.n	800f1ca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f1bc:	f107 0314 	add.w	r3, r7, #20
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	f001 f82f 	bl	8010224 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f1c6:	2301      	movs	r3, #1
 800f1c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f1ca:	f7ff fd63 	bl	800ec94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f1ce:	f000 fd9b 	bl	800fd08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f1d2:	f7ff fd2f 	bl	800ec34 <vPortEnterCritical>
 800f1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f1dc:	b25b      	sxtb	r3, r3
 800f1de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1e2:	d103      	bne.n	800f1ec <xQueueGenericSend+0x16c>
 800f1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1e6:	2200      	movs	r2, #0
 800f1e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f1f2:	b25b      	sxtb	r3, r3
 800f1f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1f8:	d103      	bne.n	800f202 <xQueueGenericSend+0x182>
 800f1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f202:	f7ff fd47 	bl	800ec94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f206:	1d3a      	adds	r2, r7, #4
 800f208:	f107 0314 	add.w	r3, r7, #20
 800f20c:	4611      	mov	r1, r2
 800f20e:	4618      	mov	r0, r3
 800f210:	f001 f81e 	bl	8010250 <xTaskCheckForTimeOut>
 800f214:	4603      	mov	r3, r0
 800f216:	2b00      	cmp	r3, #0
 800f218:	d124      	bne.n	800f264 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f21a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f21c:	f000 faa2 	bl	800f764 <prvIsQueueFull>
 800f220:	4603      	mov	r3, r0
 800f222:	2b00      	cmp	r3, #0
 800f224:	d018      	beq.n	800f258 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f228:	3310      	adds	r3, #16
 800f22a:	687a      	ldr	r2, [r7, #4]
 800f22c:	4611      	mov	r1, r2
 800f22e:	4618      	mov	r0, r3
 800f230:	f000 ff44 	bl	80100bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f234:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f236:	f000 fa2d 	bl	800f694 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f23a:	f000 fd73 	bl	800fd24 <xTaskResumeAll>
 800f23e:	4603      	mov	r3, r0
 800f240:	2b00      	cmp	r3, #0
 800f242:	f47f af7c 	bne.w	800f13e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800f246:	4b0c      	ldr	r3, [pc, #48]	; (800f278 <xQueueGenericSend+0x1f8>)
 800f248:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f24c:	601a      	str	r2, [r3, #0]
 800f24e:	f3bf 8f4f 	dsb	sy
 800f252:	f3bf 8f6f 	isb	sy
 800f256:	e772      	b.n	800f13e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f258:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f25a:	f000 fa1b 	bl	800f694 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f25e:	f000 fd61 	bl	800fd24 <xTaskResumeAll>
 800f262:	e76c      	b.n	800f13e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f264:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f266:	f000 fa15 	bl	800f694 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f26a:	f000 fd5b 	bl	800fd24 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f26e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f270:	4618      	mov	r0, r3
 800f272:	3738      	adds	r7, #56	; 0x38
 800f274:	46bd      	mov	sp, r7
 800f276:	bd80      	pop	{r7, pc}
 800f278:	e000ed04 	.word	0xe000ed04

0800f27c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b090      	sub	sp, #64	; 0x40
 800f280:	af00      	add	r7, sp, #0
 800f282:	60f8      	str	r0, [r7, #12]
 800f284:	60b9      	str	r1, [r7, #8]
 800f286:	607a      	str	r2, [r7, #4]
 800f288:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800f28e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f290:	2b00      	cmp	r3, #0
 800f292:	d10a      	bne.n	800f2aa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800f294:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f298:	f383 8811 	msr	BASEPRI, r3
 800f29c:	f3bf 8f6f 	isb	sy
 800f2a0:	f3bf 8f4f 	dsb	sy
 800f2a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f2a6:	bf00      	nop
 800f2a8:	e7fe      	b.n	800f2a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f2aa:	68bb      	ldr	r3, [r7, #8]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d103      	bne.n	800f2b8 <xQueueGenericSendFromISR+0x3c>
 800f2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d101      	bne.n	800f2bc <xQueueGenericSendFromISR+0x40>
 800f2b8:	2301      	movs	r3, #1
 800f2ba:	e000      	b.n	800f2be <xQueueGenericSendFromISR+0x42>
 800f2bc:	2300      	movs	r3, #0
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d10a      	bne.n	800f2d8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800f2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2c6:	f383 8811 	msr	BASEPRI, r3
 800f2ca:	f3bf 8f6f 	isb	sy
 800f2ce:	f3bf 8f4f 	dsb	sy
 800f2d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f2d4:	bf00      	nop
 800f2d6:	e7fe      	b.n	800f2d6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f2d8:	683b      	ldr	r3, [r7, #0]
 800f2da:	2b02      	cmp	r3, #2
 800f2dc:	d103      	bne.n	800f2e6 <xQueueGenericSendFromISR+0x6a>
 800f2de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f2e2:	2b01      	cmp	r3, #1
 800f2e4:	d101      	bne.n	800f2ea <xQueueGenericSendFromISR+0x6e>
 800f2e6:	2301      	movs	r3, #1
 800f2e8:	e000      	b.n	800f2ec <xQueueGenericSendFromISR+0x70>
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d10a      	bne.n	800f306 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800f2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2f4:	f383 8811 	msr	BASEPRI, r3
 800f2f8:	f3bf 8f6f 	isb	sy
 800f2fc:	f3bf 8f4f 	dsb	sy
 800f300:	623b      	str	r3, [r7, #32]
}
 800f302:	bf00      	nop
 800f304:	e7fe      	b.n	800f304 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f306:	f7ff fd77 	bl	800edf8 <vPortValidateInterruptPriority>
	__asm volatile
 800f30a:	f3ef 8211 	mrs	r2, BASEPRI
 800f30e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f312:	f383 8811 	msr	BASEPRI, r3
 800f316:	f3bf 8f6f 	isb	sy
 800f31a:	f3bf 8f4f 	dsb	sy
 800f31e:	61fa      	str	r2, [r7, #28]
 800f320:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800f322:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f324:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f328:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f32a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f32c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f32e:	429a      	cmp	r2, r3
 800f330:	d302      	bcc.n	800f338 <xQueueGenericSendFromISR+0xbc>
 800f332:	683b      	ldr	r3, [r7, #0]
 800f334:	2b02      	cmp	r3, #2
 800f336:	d12f      	bne.n	800f398 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f33a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f33e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f346:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f348:	683a      	ldr	r2, [r7, #0]
 800f34a:	68b9      	ldr	r1, [r7, #8]
 800f34c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f34e:	f000 f911 	bl	800f574 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f352:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800f356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f35a:	d112      	bne.n	800f382 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f35c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f35e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f360:	2b00      	cmp	r3, #0
 800f362:	d016      	beq.n	800f392 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f366:	3324      	adds	r3, #36	; 0x24
 800f368:	4618      	mov	r0, r3
 800f36a:	f000 fef7 	bl	801015c <xTaskRemoveFromEventList>
 800f36e:	4603      	mov	r3, r0
 800f370:	2b00      	cmp	r3, #0
 800f372:	d00e      	beq.n	800f392 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d00b      	beq.n	800f392 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	2201      	movs	r2, #1
 800f37e:	601a      	str	r2, [r3, #0]
 800f380:	e007      	b.n	800f392 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f382:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f386:	3301      	adds	r3, #1
 800f388:	b2db      	uxtb	r3, r3
 800f38a:	b25a      	sxtb	r2, r3
 800f38c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f38e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f392:	2301      	movs	r3, #1
 800f394:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800f396:	e001      	b.n	800f39c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f398:	2300      	movs	r3, #0
 800f39a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f39c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f39e:	617b      	str	r3, [r7, #20]
	__asm volatile
 800f3a0:	697b      	ldr	r3, [r7, #20]
 800f3a2:	f383 8811 	msr	BASEPRI, r3
}
 800f3a6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f3a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800f3aa:	4618      	mov	r0, r3
 800f3ac:	3740      	adds	r7, #64	; 0x40
 800f3ae:	46bd      	mov	sp, r7
 800f3b0:	bd80      	pop	{r7, pc}
	...

0800f3b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f3b4:	b580      	push	{r7, lr}
 800f3b6:	b08c      	sub	sp, #48	; 0x30
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	60f8      	str	r0, [r7, #12]
 800f3bc:	60b9      	str	r1, [r7, #8]
 800f3be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f3c0:	2300      	movs	r3, #0
 800f3c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f3c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d10a      	bne.n	800f3e4 <xQueueReceive+0x30>
	__asm volatile
 800f3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3d2:	f383 8811 	msr	BASEPRI, r3
 800f3d6:	f3bf 8f6f 	isb	sy
 800f3da:	f3bf 8f4f 	dsb	sy
 800f3de:	623b      	str	r3, [r7, #32]
}
 800f3e0:	bf00      	nop
 800f3e2:	e7fe      	b.n	800f3e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f3e4:	68bb      	ldr	r3, [r7, #8]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d103      	bne.n	800f3f2 <xQueueReceive+0x3e>
 800f3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d101      	bne.n	800f3f6 <xQueueReceive+0x42>
 800f3f2:	2301      	movs	r3, #1
 800f3f4:	e000      	b.n	800f3f8 <xQueueReceive+0x44>
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d10a      	bne.n	800f412 <xQueueReceive+0x5e>
	__asm volatile
 800f3fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f400:	f383 8811 	msr	BASEPRI, r3
 800f404:	f3bf 8f6f 	isb	sy
 800f408:	f3bf 8f4f 	dsb	sy
 800f40c:	61fb      	str	r3, [r7, #28]
}
 800f40e:	bf00      	nop
 800f410:	e7fe      	b.n	800f410 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f412:	f001 f865 	bl	80104e0 <xTaskGetSchedulerState>
 800f416:	4603      	mov	r3, r0
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d102      	bne.n	800f422 <xQueueReceive+0x6e>
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d101      	bne.n	800f426 <xQueueReceive+0x72>
 800f422:	2301      	movs	r3, #1
 800f424:	e000      	b.n	800f428 <xQueueReceive+0x74>
 800f426:	2300      	movs	r3, #0
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d10a      	bne.n	800f442 <xQueueReceive+0x8e>
	__asm volatile
 800f42c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f430:	f383 8811 	msr	BASEPRI, r3
 800f434:	f3bf 8f6f 	isb	sy
 800f438:	f3bf 8f4f 	dsb	sy
 800f43c:	61bb      	str	r3, [r7, #24]
}
 800f43e:	bf00      	nop
 800f440:	e7fe      	b.n	800f440 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f442:	f7ff fbf7 	bl	800ec34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f44a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d01f      	beq.n	800f492 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f452:	68b9      	ldr	r1, [r7, #8]
 800f454:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f456:	f000 f8f7 	bl	800f648 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f45c:	1e5a      	subs	r2, r3, #1
 800f45e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f460:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f464:	691b      	ldr	r3, [r3, #16]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d00f      	beq.n	800f48a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f46a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f46c:	3310      	adds	r3, #16
 800f46e:	4618      	mov	r0, r3
 800f470:	f000 fe74 	bl	801015c <xTaskRemoveFromEventList>
 800f474:	4603      	mov	r3, r0
 800f476:	2b00      	cmp	r3, #0
 800f478:	d007      	beq.n	800f48a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f47a:	4b3d      	ldr	r3, [pc, #244]	; (800f570 <xQueueReceive+0x1bc>)
 800f47c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f480:	601a      	str	r2, [r3, #0]
 800f482:	f3bf 8f4f 	dsb	sy
 800f486:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f48a:	f7ff fc03 	bl	800ec94 <vPortExitCritical>
				return pdPASS;
 800f48e:	2301      	movs	r3, #1
 800f490:	e069      	b.n	800f566 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d103      	bne.n	800f4a0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f498:	f7ff fbfc 	bl	800ec94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f49c:	2300      	movs	r3, #0
 800f49e:	e062      	b.n	800f566 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f4a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d106      	bne.n	800f4b4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f4a6:	f107 0310 	add.w	r3, r7, #16
 800f4aa:	4618      	mov	r0, r3
 800f4ac:	f000 feba 	bl	8010224 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f4b0:	2301      	movs	r3, #1
 800f4b2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f4b4:	f7ff fbee 	bl	800ec94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f4b8:	f000 fc26 	bl	800fd08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f4bc:	f7ff fbba 	bl	800ec34 <vPortEnterCritical>
 800f4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f4c6:	b25b      	sxtb	r3, r3
 800f4c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4cc:	d103      	bne.n	800f4d6 <xQueueReceive+0x122>
 800f4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4d0:	2200      	movs	r2, #0
 800f4d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f4d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f4dc:	b25b      	sxtb	r3, r3
 800f4de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4e2:	d103      	bne.n	800f4ec <xQueueReceive+0x138>
 800f4e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4e6:	2200      	movs	r2, #0
 800f4e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f4ec:	f7ff fbd2 	bl	800ec94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f4f0:	1d3a      	adds	r2, r7, #4
 800f4f2:	f107 0310 	add.w	r3, r7, #16
 800f4f6:	4611      	mov	r1, r2
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	f000 fea9 	bl	8010250 <xTaskCheckForTimeOut>
 800f4fe:	4603      	mov	r3, r0
 800f500:	2b00      	cmp	r3, #0
 800f502:	d123      	bne.n	800f54c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f504:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f506:	f000 f917 	bl	800f738 <prvIsQueueEmpty>
 800f50a:	4603      	mov	r3, r0
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d017      	beq.n	800f540 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f512:	3324      	adds	r3, #36	; 0x24
 800f514:	687a      	ldr	r2, [r7, #4]
 800f516:	4611      	mov	r1, r2
 800f518:	4618      	mov	r0, r3
 800f51a:	f000 fdcf 	bl	80100bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f51e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f520:	f000 f8b8 	bl	800f694 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f524:	f000 fbfe 	bl	800fd24 <xTaskResumeAll>
 800f528:	4603      	mov	r3, r0
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d189      	bne.n	800f442 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800f52e:	4b10      	ldr	r3, [pc, #64]	; (800f570 <xQueueReceive+0x1bc>)
 800f530:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f534:	601a      	str	r2, [r3, #0]
 800f536:	f3bf 8f4f 	dsb	sy
 800f53a:	f3bf 8f6f 	isb	sy
 800f53e:	e780      	b.n	800f442 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f540:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f542:	f000 f8a7 	bl	800f694 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f546:	f000 fbed 	bl	800fd24 <xTaskResumeAll>
 800f54a:	e77a      	b.n	800f442 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f54c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f54e:	f000 f8a1 	bl	800f694 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f552:	f000 fbe7 	bl	800fd24 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f556:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f558:	f000 f8ee 	bl	800f738 <prvIsQueueEmpty>
 800f55c:	4603      	mov	r3, r0
 800f55e:	2b00      	cmp	r3, #0
 800f560:	f43f af6f 	beq.w	800f442 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f564:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f566:	4618      	mov	r0, r3
 800f568:	3730      	adds	r7, #48	; 0x30
 800f56a:	46bd      	mov	sp, r7
 800f56c:	bd80      	pop	{r7, pc}
 800f56e:	bf00      	nop
 800f570:	e000ed04 	.word	0xe000ed04

0800f574 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f574:	b580      	push	{r7, lr}
 800f576:	b086      	sub	sp, #24
 800f578:	af00      	add	r7, sp, #0
 800f57a:	60f8      	str	r0, [r7, #12]
 800f57c:	60b9      	str	r1, [r7, #8]
 800f57e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f580:	2300      	movs	r3, #0
 800f582:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f588:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d10d      	bne.n	800f5ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d14d      	bne.n	800f636 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	689b      	ldr	r3, [r3, #8]
 800f59e:	4618      	mov	r0, r3
 800f5a0:	f000 ffbc 	bl	801051c <xTaskPriorityDisinherit>
 800f5a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	2200      	movs	r2, #0
 800f5aa:	609a      	str	r2, [r3, #8]
 800f5ac:	e043      	b.n	800f636 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d119      	bne.n	800f5e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	6858      	ldr	r0, [r3, #4]
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5bc:	461a      	mov	r2, r3
 800f5be:	68b9      	ldr	r1, [r7, #8]
 800f5c0:	f002 fce8 	bl	8011f94 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	685a      	ldr	r2, [r3, #4]
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5cc:	441a      	add	r2, r3
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	685a      	ldr	r2, [r3, #4]
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	689b      	ldr	r3, [r3, #8]
 800f5da:	429a      	cmp	r2, r3
 800f5dc:	d32b      	bcc.n	800f636 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	681a      	ldr	r2, [r3, #0]
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	605a      	str	r2, [r3, #4]
 800f5e6:	e026      	b.n	800f636 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	68d8      	ldr	r0, [r3, #12]
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5f0:	461a      	mov	r2, r3
 800f5f2:	68b9      	ldr	r1, [r7, #8]
 800f5f4:	f002 fcce 	bl	8011f94 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	68da      	ldr	r2, [r3, #12]
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f600:	425b      	negs	r3, r3
 800f602:	441a      	add	r2, r3
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	68da      	ldr	r2, [r3, #12]
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	429a      	cmp	r2, r3
 800f612:	d207      	bcs.n	800f624 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	689a      	ldr	r2, [r3, #8]
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f61c:	425b      	negs	r3, r3
 800f61e:	441a      	add	r2, r3
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	2b02      	cmp	r3, #2
 800f628:	d105      	bne.n	800f636 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f62a:	693b      	ldr	r3, [r7, #16]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d002      	beq.n	800f636 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f630:	693b      	ldr	r3, [r7, #16]
 800f632:	3b01      	subs	r3, #1
 800f634:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f636:	693b      	ldr	r3, [r7, #16]
 800f638:	1c5a      	adds	r2, r3, #1
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f63e:	697b      	ldr	r3, [r7, #20]
}
 800f640:	4618      	mov	r0, r3
 800f642:	3718      	adds	r7, #24
 800f644:	46bd      	mov	sp, r7
 800f646:	bd80      	pop	{r7, pc}

0800f648 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f648:	b580      	push	{r7, lr}
 800f64a:	b082      	sub	sp, #8
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	6078      	str	r0, [r7, #4]
 800f650:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f656:	2b00      	cmp	r3, #0
 800f658:	d018      	beq.n	800f68c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	68da      	ldr	r2, [r3, #12]
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f662:	441a      	add	r2, r3
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	68da      	ldr	r2, [r3, #12]
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	689b      	ldr	r3, [r3, #8]
 800f670:	429a      	cmp	r2, r3
 800f672:	d303      	bcc.n	800f67c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	681a      	ldr	r2, [r3, #0]
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	68d9      	ldr	r1, [r3, #12]
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f684:	461a      	mov	r2, r3
 800f686:	6838      	ldr	r0, [r7, #0]
 800f688:	f002 fc84 	bl	8011f94 <memcpy>
	}
}
 800f68c:	bf00      	nop
 800f68e:	3708      	adds	r7, #8
 800f690:	46bd      	mov	sp, r7
 800f692:	bd80      	pop	{r7, pc}

0800f694 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f694:	b580      	push	{r7, lr}
 800f696:	b084      	sub	sp, #16
 800f698:	af00      	add	r7, sp, #0
 800f69a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f69c:	f7ff faca 	bl	800ec34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f6a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f6a8:	e011      	b.n	800f6ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d012      	beq.n	800f6d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	3324      	adds	r3, #36	; 0x24
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	f000 fd50 	bl	801015c <xTaskRemoveFromEventList>
 800f6bc:	4603      	mov	r3, r0
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d001      	beq.n	800f6c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f6c2:	f000 fe27 	bl	8010314 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f6c6:	7bfb      	ldrb	r3, [r7, #15]
 800f6c8:	3b01      	subs	r3, #1
 800f6ca:	b2db      	uxtb	r3, r3
 800f6cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f6ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	dce9      	bgt.n	800f6aa <prvUnlockQueue+0x16>
 800f6d6:	e000      	b.n	800f6da <prvUnlockQueue+0x46>
					break;
 800f6d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	22ff      	movs	r2, #255	; 0xff
 800f6de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f6e2:	f7ff fad7 	bl	800ec94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f6e6:	f7ff faa5 	bl	800ec34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f6f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f6f2:	e011      	b.n	800f718 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	691b      	ldr	r3, [r3, #16]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d012      	beq.n	800f722 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	3310      	adds	r3, #16
 800f700:	4618      	mov	r0, r3
 800f702:	f000 fd2b 	bl	801015c <xTaskRemoveFromEventList>
 800f706:	4603      	mov	r3, r0
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d001      	beq.n	800f710 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f70c:	f000 fe02 	bl	8010314 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f710:	7bbb      	ldrb	r3, [r7, #14]
 800f712:	3b01      	subs	r3, #1
 800f714:	b2db      	uxtb	r3, r3
 800f716:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f718:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	dce9      	bgt.n	800f6f4 <prvUnlockQueue+0x60>
 800f720:	e000      	b.n	800f724 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f722:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	22ff      	movs	r2, #255	; 0xff
 800f728:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f72c:	f7ff fab2 	bl	800ec94 <vPortExitCritical>
}
 800f730:	bf00      	nop
 800f732:	3710      	adds	r7, #16
 800f734:	46bd      	mov	sp, r7
 800f736:	bd80      	pop	{r7, pc}

0800f738 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f738:	b580      	push	{r7, lr}
 800f73a:	b084      	sub	sp, #16
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f740:	f7ff fa78 	bl	800ec34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d102      	bne.n	800f752 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f74c:	2301      	movs	r3, #1
 800f74e:	60fb      	str	r3, [r7, #12]
 800f750:	e001      	b.n	800f756 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f752:	2300      	movs	r3, #0
 800f754:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f756:	f7ff fa9d 	bl	800ec94 <vPortExitCritical>

	return xReturn;
 800f75a:	68fb      	ldr	r3, [r7, #12]
}
 800f75c:	4618      	mov	r0, r3
 800f75e:	3710      	adds	r7, #16
 800f760:	46bd      	mov	sp, r7
 800f762:	bd80      	pop	{r7, pc}

0800f764 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f764:	b580      	push	{r7, lr}
 800f766:	b084      	sub	sp, #16
 800f768:	af00      	add	r7, sp, #0
 800f76a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f76c:	f7ff fa62 	bl	800ec34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f778:	429a      	cmp	r2, r3
 800f77a:	d102      	bne.n	800f782 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f77c:	2301      	movs	r3, #1
 800f77e:	60fb      	str	r3, [r7, #12]
 800f780:	e001      	b.n	800f786 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f782:	2300      	movs	r3, #0
 800f784:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f786:	f7ff fa85 	bl	800ec94 <vPortExitCritical>

	return xReturn;
 800f78a:	68fb      	ldr	r3, [r7, #12]
}
 800f78c:	4618      	mov	r0, r3
 800f78e:	3710      	adds	r7, #16
 800f790:	46bd      	mov	sp, r7
 800f792:	bd80      	pop	{r7, pc}

0800f794 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f794:	b480      	push	{r7}
 800f796:	b085      	sub	sp, #20
 800f798:	af00      	add	r7, sp, #0
 800f79a:	6078      	str	r0, [r7, #4]
 800f79c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f79e:	2300      	movs	r3, #0
 800f7a0:	60fb      	str	r3, [r7, #12]
 800f7a2:	e014      	b.n	800f7ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f7a4:	4a0f      	ldr	r2, [pc, #60]	; (800f7e4 <vQueueAddToRegistry+0x50>)
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d10b      	bne.n	800f7c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f7b0:	490c      	ldr	r1, [pc, #48]	; (800f7e4 <vQueueAddToRegistry+0x50>)
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	683a      	ldr	r2, [r7, #0]
 800f7b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f7ba:	4a0a      	ldr	r2, [pc, #40]	; (800f7e4 <vQueueAddToRegistry+0x50>)
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	00db      	lsls	r3, r3, #3
 800f7c0:	4413      	add	r3, r2
 800f7c2:	687a      	ldr	r2, [r7, #4]
 800f7c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f7c6:	e006      	b.n	800f7d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	3301      	adds	r3, #1
 800f7cc:	60fb      	str	r3, [r7, #12]
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	2b07      	cmp	r3, #7
 800f7d2:	d9e7      	bls.n	800f7a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f7d4:	bf00      	nop
 800f7d6:	bf00      	nop
 800f7d8:	3714      	adds	r7, #20
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e0:	4770      	bx	lr
 800f7e2:	bf00      	nop
 800f7e4:	24004f04 	.word	0x24004f04

0800f7e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b086      	sub	sp, #24
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	60f8      	str	r0, [r7, #12]
 800f7f0:	60b9      	str	r1, [r7, #8]
 800f7f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f7f8:	f7ff fa1c 	bl	800ec34 <vPortEnterCritical>
 800f7fc:	697b      	ldr	r3, [r7, #20]
 800f7fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f802:	b25b      	sxtb	r3, r3
 800f804:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f808:	d103      	bne.n	800f812 <vQueueWaitForMessageRestricted+0x2a>
 800f80a:	697b      	ldr	r3, [r7, #20]
 800f80c:	2200      	movs	r2, #0
 800f80e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f812:	697b      	ldr	r3, [r7, #20]
 800f814:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f818:	b25b      	sxtb	r3, r3
 800f81a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f81e:	d103      	bne.n	800f828 <vQueueWaitForMessageRestricted+0x40>
 800f820:	697b      	ldr	r3, [r7, #20]
 800f822:	2200      	movs	r2, #0
 800f824:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f828:	f7ff fa34 	bl	800ec94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f82c:	697b      	ldr	r3, [r7, #20]
 800f82e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f830:	2b00      	cmp	r3, #0
 800f832:	d106      	bne.n	800f842 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f834:	697b      	ldr	r3, [r7, #20]
 800f836:	3324      	adds	r3, #36	; 0x24
 800f838:	687a      	ldr	r2, [r7, #4]
 800f83a:	68b9      	ldr	r1, [r7, #8]
 800f83c:	4618      	mov	r0, r3
 800f83e:	f000 fc61 	bl	8010104 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f842:	6978      	ldr	r0, [r7, #20]
 800f844:	f7ff ff26 	bl	800f694 <prvUnlockQueue>
	}
 800f848:	bf00      	nop
 800f84a:	3718      	adds	r7, #24
 800f84c:	46bd      	mov	sp, r7
 800f84e:	bd80      	pop	{r7, pc}

0800f850 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f850:	b580      	push	{r7, lr}
 800f852:	b08e      	sub	sp, #56	; 0x38
 800f854:	af04      	add	r7, sp, #16
 800f856:	60f8      	str	r0, [r7, #12]
 800f858:	60b9      	str	r1, [r7, #8]
 800f85a:	607a      	str	r2, [r7, #4]
 800f85c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f85e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f860:	2b00      	cmp	r3, #0
 800f862:	d10a      	bne.n	800f87a <xTaskCreateStatic+0x2a>
	__asm volatile
 800f864:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f868:	f383 8811 	msr	BASEPRI, r3
 800f86c:	f3bf 8f6f 	isb	sy
 800f870:	f3bf 8f4f 	dsb	sy
 800f874:	623b      	str	r3, [r7, #32]
}
 800f876:	bf00      	nop
 800f878:	e7fe      	b.n	800f878 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f87a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d10a      	bne.n	800f896 <xTaskCreateStatic+0x46>
	__asm volatile
 800f880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f884:	f383 8811 	msr	BASEPRI, r3
 800f888:	f3bf 8f6f 	isb	sy
 800f88c:	f3bf 8f4f 	dsb	sy
 800f890:	61fb      	str	r3, [r7, #28]
}
 800f892:	bf00      	nop
 800f894:	e7fe      	b.n	800f894 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f896:	23a8      	movs	r3, #168	; 0xa8
 800f898:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f89a:	693b      	ldr	r3, [r7, #16]
 800f89c:	2ba8      	cmp	r3, #168	; 0xa8
 800f89e:	d00a      	beq.n	800f8b6 <xTaskCreateStatic+0x66>
	__asm volatile
 800f8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8a4:	f383 8811 	msr	BASEPRI, r3
 800f8a8:	f3bf 8f6f 	isb	sy
 800f8ac:	f3bf 8f4f 	dsb	sy
 800f8b0:	61bb      	str	r3, [r7, #24]
}
 800f8b2:	bf00      	nop
 800f8b4:	e7fe      	b.n	800f8b4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f8b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f8b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d01e      	beq.n	800f8fc <xTaskCreateStatic+0xac>
 800f8be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d01b      	beq.n	800f8fc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f8cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8d0:	2202      	movs	r2, #2
 800f8d2:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	9303      	str	r3, [sp, #12]
 800f8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8dc:	9302      	str	r3, [sp, #8]
 800f8de:	f107 0314 	add.w	r3, r7, #20
 800f8e2:	9301      	str	r3, [sp, #4]
 800f8e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8e6:	9300      	str	r3, [sp, #0]
 800f8e8:	683b      	ldr	r3, [r7, #0]
 800f8ea:	687a      	ldr	r2, [r7, #4]
 800f8ec:	68b9      	ldr	r1, [r7, #8]
 800f8ee:	68f8      	ldr	r0, [r7, #12]
 800f8f0:	f000 f850 	bl	800f994 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f8f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f8f6:	f000 f8f3 	bl	800fae0 <prvAddNewTaskToReadyList>
 800f8fa:	e001      	b.n	800f900 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f900:	697b      	ldr	r3, [r7, #20]
	}
 800f902:	4618      	mov	r0, r3
 800f904:	3728      	adds	r7, #40	; 0x28
 800f906:	46bd      	mov	sp, r7
 800f908:	bd80      	pop	{r7, pc}

0800f90a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f90a:	b580      	push	{r7, lr}
 800f90c:	b08c      	sub	sp, #48	; 0x30
 800f90e:	af04      	add	r7, sp, #16
 800f910:	60f8      	str	r0, [r7, #12]
 800f912:	60b9      	str	r1, [r7, #8]
 800f914:	603b      	str	r3, [r7, #0]
 800f916:	4613      	mov	r3, r2
 800f918:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f91a:	88fb      	ldrh	r3, [r7, #6]
 800f91c:	009b      	lsls	r3, r3, #2
 800f91e:	4618      	mov	r0, r3
 800f920:	f7fe fdbe 	bl	800e4a0 <pvPortMalloc>
 800f924:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f926:	697b      	ldr	r3, [r7, #20]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d00e      	beq.n	800f94a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f92c:	20a8      	movs	r0, #168	; 0xa8
 800f92e:	f7fe fdb7 	bl	800e4a0 <pvPortMalloc>
 800f932:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f934:	69fb      	ldr	r3, [r7, #28]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d003      	beq.n	800f942 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f93a:	69fb      	ldr	r3, [r7, #28]
 800f93c:	697a      	ldr	r2, [r7, #20]
 800f93e:	631a      	str	r2, [r3, #48]	; 0x30
 800f940:	e005      	b.n	800f94e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f942:	6978      	ldr	r0, [r7, #20]
 800f944:	f7fe fe78 	bl	800e638 <vPortFree>
 800f948:	e001      	b.n	800f94e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f94a:	2300      	movs	r3, #0
 800f94c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f94e:	69fb      	ldr	r3, [r7, #28]
 800f950:	2b00      	cmp	r3, #0
 800f952:	d017      	beq.n	800f984 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f954:	69fb      	ldr	r3, [r7, #28]
 800f956:	2200      	movs	r2, #0
 800f958:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f95c:	88fa      	ldrh	r2, [r7, #6]
 800f95e:	2300      	movs	r3, #0
 800f960:	9303      	str	r3, [sp, #12]
 800f962:	69fb      	ldr	r3, [r7, #28]
 800f964:	9302      	str	r3, [sp, #8]
 800f966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f968:	9301      	str	r3, [sp, #4]
 800f96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f96c:	9300      	str	r3, [sp, #0]
 800f96e:	683b      	ldr	r3, [r7, #0]
 800f970:	68b9      	ldr	r1, [r7, #8]
 800f972:	68f8      	ldr	r0, [r7, #12]
 800f974:	f000 f80e 	bl	800f994 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f978:	69f8      	ldr	r0, [r7, #28]
 800f97a:	f000 f8b1 	bl	800fae0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f97e:	2301      	movs	r3, #1
 800f980:	61bb      	str	r3, [r7, #24]
 800f982:	e002      	b.n	800f98a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f984:	f04f 33ff 	mov.w	r3, #4294967295
 800f988:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f98a:	69bb      	ldr	r3, [r7, #24]
	}
 800f98c:	4618      	mov	r0, r3
 800f98e:	3720      	adds	r7, #32
 800f990:	46bd      	mov	sp, r7
 800f992:	bd80      	pop	{r7, pc}

0800f994 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f994:	b580      	push	{r7, lr}
 800f996:	b088      	sub	sp, #32
 800f998:	af00      	add	r7, sp, #0
 800f99a:	60f8      	str	r0, [r7, #12]
 800f99c:	60b9      	str	r1, [r7, #8]
 800f99e:	607a      	str	r2, [r7, #4]
 800f9a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	009b      	lsls	r3, r3, #2
 800f9aa:	461a      	mov	r2, r3
 800f9ac:	21a5      	movs	r1, #165	; 0xa5
 800f9ae:	f002 fa0c 	bl	8011dca <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f9b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f9b6:	6879      	ldr	r1, [r7, #4]
 800f9b8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800f9bc:	440b      	add	r3, r1
 800f9be:	009b      	lsls	r3, r3, #2
 800f9c0:	4413      	add	r3, r2
 800f9c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f9c4:	69bb      	ldr	r3, [r7, #24]
 800f9c6:	f023 0307 	bic.w	r3, r3, #7
 800f9ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f9cc:	69bb      	ldr	r3, [r7, #24]
 800f9ce:	f003 0307 	and.w	r3, r3, #7
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d00a      	beq.n	800f9ec <prvInitialiseNewTask+0x58>
	__asm volatile
 800f9d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9da:	f383 8811 	msr	BASEPRI, r3
 800f9de:	f3bf 8f6f 	isb	sy
 800f9e2:	f3bf 8f4f 	dsb	sy
 800f9e6:	617b      	str	r3, [r7, #20]
}
 800f9e8:	bf00      	nop
 800f9ea:	e7fe      	b.n	800f9ea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f9ec:	68bb      	ldr	r3, [r7, #8]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d01f      	beq.n	800fa32 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f9f2:	2300      	movs	r3, #0
 800f9f4:	61fb      	str	r3, [r7, #28]
 800f9f6:	e012      	b.n	800fa1e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f9f8:	68ba      	ldr	r2, [r7, #8]
 800f9fa:	69fb      	ldr	r3, [r7, #28]
 800f9fc:	4413      	add	r3, r2
 800f9fe:	7819      	ldrb	r1, [r3, #0]
 800fa00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa02:	69fb      	ldr	r3, [r7, #28]
 800fa04:	4413      	add	r3, r2
 800fa06:	3334      	adds	r3, #52	; 0x34
 800fa08:	460a      	mov	r2, r1
 800fa0a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800fa0c:	68ba      	ldr	r2, [r7, #8]
 800fa0e:	69fb      	ldr	r3, [r7, #28]
 800fa10:	4413      	add	r3, r2
 800fa12:	781b      	ldrb	r3, [r3, #0]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d006      	beq.n	800fa26 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fa18:	69fb      	ldr	r3, [r7, #28]
 800fa1a:	3301      	adds	r3, #1
 800fa1c:	61fb      	str	r3, [r7, #28]
 800fa1e:	69fb      	ldr	r3, [r7, #28]
 800fa20:	2b0f      	cmp	r3, #15
 800fa22:	d9e9      	bls.n	800f9f8 <prvInitialiseNewTask+0x64>
 800fa24:	e000      	b.n	800fa28 <prvInitialiseNewTask+0x94>
			{
				break;
 800fa26:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800fa28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa2a:	2200      	movs	r2, #0
 800fa2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fa30:	e003      	b.n	800fa3a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800fa32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa34:	2200      	movs	r2, #0
 800fa36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800fa3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa3c:	2b37      	cmp	r3, #55	; 0x37
 800fa3e:	d901      	bls.n	800fa44 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800fa40:	2337      	movs	r3, #55	; 0x37
 800fa42:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800fa44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fa48:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800fa4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fa4e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800fa50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa52:	2200      	movs	r2, #0
 800fa54:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800fa56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa58:	3304      	adds	r3, #4
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	f7fe ff2a 	bl	800e8b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800fa60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa62:	3318      	adds	r3, #24
 800fa64:	4618      	mov	r0, r3
 800fa66:	f7fe ff25 	bl	800e8b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800fa6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa6e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fa70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa72:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fa76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa78:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800fa7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa7e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800fa80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa82:	2200      	movs	r2, #0
 800fa84:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fa88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa8a:	2200      	movs	r2, #0
 800fa8c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800fa90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa92:	3354      	adds	r3, #84	; 0x54
 800fa94:	224c      	movs	r2, #76	; 0x4c
 800fa96:	2100      	movs	r1, #0
 800fa98:	4618      	mov	r0, r3
 800fa9a:	f002 f996 	bl	8011dca <memset>
 800fa9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faa0:	4a0c      	ldr	r2, [pc, #48]	; (800fad4 <prvInitialiseNewTask+0x140>)
 800faa2:	659a      	str	r2, [r3, #88]	; 0x58
 800faa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faa6:	4a0c      	ldr	r2, [pc, #48]	; (800fad8 <prvInitialiseNewTask+0x144>)
 800faa8:	65da      	str	r2, [r3, #92]	; 0x5c
 800faaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faac:	4a0b      	ldr	r2, [pc, #44]	; (800fadc <prvInitialiseNewTask+0x148>)
 800faae:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800fab0:	683a      	ldr	r2, [r7, #0]
 800fab2:	68f9      	ldr	r1, [r7, #12]
 800fab4:	69b8      	ldr	r0, [r7, #24]
 800fab6:	f7fe ff91 	bl	800e9dc <pxPortInitialiseStack>
 800faba:	4602      	mov	r2, r0
 800fabc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fabe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800fac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d002      	beq.n	800facc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800fac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fac8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800faca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800facc:	bf00      	nop
 800face:	3720      	adds	r7, #32
 800fad0:	46bd      	mov	sp, r7
 800fad2:	bd80      	pop	{r7, pc}
 800fad4:	24005578 	.word	0x24005578
 800fad8:	240055e0 	.word	0x240055e0
 800fadc:	24005648 	.word	0x24005648

0800fae0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b082      	sub	sp, #8
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800fae8:	f7ff f8a4 	bl	800ec34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800faec:	4b2d      	ldr	r3, [pc, #180]	; (800fba4 <prvAddNewTaskToReadyList+0xc4>)
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	3301      	adds	r3, #1
 800faf2:	4a2c      	ldr	r2, [pc, #176]	; (800fba4 <prvAddNewTaskToReadyList+0xc4>)
 800faf4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800faf6:	4b2c      	ldr	r3, [pc, #176]	; (800fba8 <prvAddNewTaskToReadyList+0xc8>)
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d109      	bne.n	800fb12 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800fafe:	4a2a      	ldr	r2, [pc, #168]	; (800fba8 <prvAddNewTaskToReadyList+0xc8>)
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800fb04:	4b27      	ldr	r3, [pc, #156]	; (800fba4 <prvAddNewTaskToReadyList+0xc4>)
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	2b01      	cmp	r3, #1
 800fb0a:	d110      	bne.n	800fb2e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800fb0c:	f000 fc26 	bl	801035c <prvInitialiseTaskLists>
 800fb10:	e00d      	b.n	800fb2e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800fb12:	4b26      	ldr	r3, [pc, #152]	; (800fbac <prvAddNewTaskToReadyList+0xcc>)
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d109      	bne.n	800fb2e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800fb1a:	4b23      	ldr	r3, [pc, #140]	; (800fba8 <prvAddNewTaskToReadyList+0xc8>)
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb24:	429a      	cmp	r2, r3
 800fb26:	d802      	bhi.n	800fb2e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800fb28:	4a1f      	ldr	r2, [pc, #124]	; (800fba8 <prvAddNewTaskToReadyList+0xc8>)
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800fb2e:	4b20      	ldr	r3, [pc, #128]	; (800fbb0 <prvAddNewTaskToReadyList+0xd0>)
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	3301      	adds	r3, #1
 800fb34:	4a1e      	ldr	r2, [pc, #120]	; (800fbb0 <prvAddNewTaskToReadyList+0xd0>)
 800fb36:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800fb38:	4b1d      	ldr	r3, [pc, #116]	; (800fbb0 <prvAddNewTaskToReadyList+0xd0>)
 800fb3a:	681a      	ldr	r2, [r3, #0]
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb44:	4b1b      	ldr	r3, [pc, #108]	; (800fbb4 <prvAddNewTaskToReadyList+0xd4>)
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	429a      	cmp	r2, r3
 800fb4a:	d903      	bls.n	800fb54 <prvAddNewTaskToReadyList+0x74>
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb50:	4a18      	ldr	r2, [pc, #96]	; (800fbb4 <prvAddNewTaskToReadyList+0xd4>)
 800fb52:	6013      	str	r3, [r2, #0]
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb58:	4613      	mov	r3, r2
 800fb5a:	009b      	lsls	r3, r3, #2
 800fb5c:	4413      	add	r3, r2
 800fb5e:	009b      	lsls	r3, r3, #2
 800fb60:	4a15      	ldr	r2, [pc, #84]	; (800fbb8 <prvAddNewTaskToReadyList+0xd8>)
 800fb62:	441a      	add	r2, r3
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	3304      	adds	r3, #4
 800fb68:	4619      	mov	r1, r3
 800fb6a:	4610      	mov	r0, r2
 800fb6c:	f7fe feaf 	bl	800e8ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800fb70:	f7ff f890 	bl	800ec94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800fb74:	4b0d      	ldr	r3, [pc, #52]	; (800fbac <prvAddNewTaskToReadyList+0xcc>)
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d00e      	beq.n	800fb9a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800fb7c:	4b0a      	ldr	r3, [pc, #40]	; (800fba8 <prvAddNewTaskToReadyList+0xc8>)
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb86:	429a      	cmp	r2, r3
 800fb88:	d207      	bcs.n	800fb9a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800fb8a:	4b0c      	ldr	r3, [pc, #48]	; (800fbbc <prvAddNewTaskToReadyList+0xdc>)
 800fb8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb90:	601a      	str	r2, [r3, #0]
 800fb92:	f3bf 8f4f 	dsb	sy
 800fb96:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fb9a:	bf00      	nop
 800fb9c:	3708      	adds	r7, #8
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	bd80      	pop	{r7, pc}
 800fba2:	bf00      	nop
 800fba4:	24005418 	.word	0x24005418
 800fba8:	24004f44 	.word	0x24004f44
 800fbac:	24005424 	.word	0x24005424
 800fbb0:	24005434 	.word	0x24005434
 800fbb4:	24005420 	.word	0x24005420
 800fbb8:	24004f48 	.word	0x24004f48
 800fbbc:	e000ed04 	.word	0xe000ed04

0800fbc0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800fbc0:	b580      	push	{r7, lr}
 800fbc2:	b084      	sub	sp, #16
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800fbc8:	2300      	movs	r3, #0
 800fbca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d017      	beq.n	800fc02 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800fbd2:	4b13      	ldr	r3, [pc, #76]	; (800fc20 <vTaskDelay+0x60>)
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d00a      	beq.n	800fbf0 <vTaskDelay+0x30>
	__asm volatile
 800fbda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbde:	f383 8811 	msr	BASEPRI, r3
 800fbe2:	f3bf 8f6f 	isb	sy
 800fbe6:	f3bf 8f4f 	dsb	sy
 800fbea:	60bb      	str	r3, [r7, #8]
}
 800fbec:	bf00      	nop
 800fbee:	e7fe      	b.n	800fbee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800fbf0:	f000 f88a 	bl	800fd08 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800fbf4:	2100      	movs	r1, #0
 800fbf6:	6878      	ldr	r0, [r7, #4]
 800fbf8:	f000 fcfe 	bl	80105f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800fbfc:	f000 f892 	bl	800fd24 <xTaskResumeAll>
 800fc00:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d107      	bne.n	800fc18 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800fc08:	4b06      	ldr	r3, [pc, #24]	; (800fc24 <vTaskDelay+0x64>)
 800fc0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc0e:	601a      	str	r2, [r3, #0]
 800fc10:	f3bf 8f4f 	dsb	sy
 800fc14:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fc18:	bf00      	nop
 800fc1a:	3710      	adds	r7, #16
 800fc1c:	46bd      	mov	sp, r7
 800fc1e:	bd80      	pop	{r7, pc}
 800fc20:	24005440 	.word	0x24005440
 800fc24:	e000ed04 	.word	0xe000ed04

0800fc28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800fc28:	b580      	push	{r7, lr}
 800fc2a:	b08a      	sub	sp, #40	; 0x28
 800fc2c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800fc2e:	2300      	movs	r3, #0
 800fc30:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800fc32:	2300      	movs	r3, #0
 800fc34:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fc36:	463a      	mov	r2, r7
 800fc38:	1d39      	adds	r1, r7, #4
 800fc3a:	f107 0308 	add.w	r3, r7, #8
 800fc3e:	4618      	mov	r0, r3
 800fc40:	f7fe fbfa 	bl	800e438 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800fc44:	6839      	ldr	r1, [r7, #0]
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	68ba      	ldr	r2, [r7, #8]
 800fc4a:	9202      	str	r2, [sp, #8]
 800fc4c:	9301      	str	r3, [sp, #4]
 800fc4e:	2300      	movs	r3, #0
 800fc50:	9300      	str	r3, [sp, #0]
 800fc52:	2300      	movs	r3, #0
 800fc54:	460a      	mov	r2, r1
 800fc56:	4924      	ldr	r1, [pc, #144]	; (800fce8 <vTaskStartScheduler+0xc0>)
 800fc58:	4824      	ldr	r0, [pc, #144]	; (800fcec <vTaskStartScheduler+0xc4>)
 800fc5a:	f7ff fdf9 	bl	800f850 <xTaskCreateStatic>
 800fc5e:	4603      	mov	r3, r0
 800fc60:	4a23      	ldr	r2, [pc, #140]	; (800fcf0 <vTaskStartScheduler+0xc8>)
 800fc62:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800fc64:	4b22      	ldr	r3, [pc, #136]	; (800fcf0 <vTaskStartScheduler+0xc8>)
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d002      	beq.n	800fc72 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800fc6c:	2301      	movs	r3, #1
 800fc6e:	617b      	str	r3, [r7, #20]
 800fc70:	e001      	b.n	800fc76 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800fc72:	2300      	movs	r3, #0
 800fc74:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800fc76:	697b      	ldr	r3, [r7, #20]
 800fc78:	2b01      	cmp	r3, #1
 800fc7a:	d102      	bne.n	800fc82 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800fc7c:	f000 fd10 	bl	80106a0 <xTimerCreateTimerTask>
 800fc80:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fc82:	697b      	ldr	r3, [r7, #20]
 800fc84:	2b01      	cmp	r3, #1
 800fc86:	d11b      	bne.n	800fcc0 <vTaskStartScheduler+0x98>
	__asm volatile
 800fc88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc8c:	f383 8811 	msr	BASEPRI, r3
 800fc90:	f3bf 8f6f 	isb	sy
 800fc94:	f3bf 8f4f 	dsb	sy
 800fc98:	613b      	str	r3, [r7, #16]
}
 800fc9a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fc9c:	4b15      	ldr	r3, [pc, #84]	; (800fcf4 <vTaskStartScheduler+0xcc>)
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	3354      	adds	r3, #84	; 0x54
 800fca2:	4a15      	ldr	r2, [pc, #84]	; (800fcf8 <vTaskStartScheduler+0xd0>)
 800fca4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fca6:	4b15      	ldr	r3, [pc, #84]	; (800fcfc <vTaskStartScheduler+0xd4>)
 800fca8:	f04f 32ff 	mov.w	r2, #4294967295
 800fcac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fcae:	4b14      	ldr	r3, [pc, #80]	; (800fd00 <vTaskStartScheduler+0xd8>)
 800fcb0:	2201      	movs	r2, #1
 800fcb2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fcb4:	4b13      	ldr	r3, [pc, #76]	; (800fd04 <vTaskStartScheduler+0xdc>)
 800fcb6:	2200      	movs	r2, #0
 800fcb8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fcba:	f7fe ff19 	bl	800eaf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fcbe:	e00e      	b.n	800fcde <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fcc0:	697b      	ldr	r3, [r7, #20]
 800fcc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcc6:	d10a      	bne.n	800fcde <vTaskStartScheduler+0xb6>
	__asm volatile
 800fcc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fccc:	f383 8811 	msr	BASEPRI, r3
 800fcd0:	f3bf 8f6f 	isb	sy
 800fcd4:	f3bf 8f4f 	dsb	sy
 800fcd8:	60fb      	str	r3, [r7, #12]
}
 800fcda:	bf00      	nop
 800fcdc:	e7fe      	b.n	800fcdc <vTaskStartScheduler+0xb4>
}
 800fcde:	bf00      	nop
 800fce0:	3718      	adds	r7, #24
 800fce2:	46bd      	mov	sp, r7
 800fce4:	bd80      	pop	{r7, pc}
 800fce6:	bf00      	nop
 800fce8:	08015444 	.word	0x08015444
 800fcec:	0801032d 	.word	0x0801032d
 800fcf0:	2400543c 	.word	0x2400543c
 800fcf4:	24004f44 	.word	0x24004f44
 800fcf8:	2400006c 	.word	0x2400006c
 800fcfc:	24005438 	.word	0x24005438
 800fd00:	24005424 	.word	0x24005424
 800fd04:	2400541c 	.word	0x2400541c

0800fd08 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fd08:	b480      	push	{r7}
 800fd0a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800fd0c:	4b04      	ldr	r3, [pc, #16]	; (800fd20 <vTaskSuspendAll+0x18>)
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	3301      	adds	r3, #1
 800fd12:	4a03      	ldr	r2, [pc, #12]	; (800fd20 <vTaskSuspendAll+0x18>)
 800fd14:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800fd16:	bf00      	nop
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd1e:	4770      	bx	lr
 800fd20:	24005440 	.word	0x24005440

0800fd24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fd24:	b580      	push	{r7, lr}
 800fd26:	b084      	sub	sp, #16
 800fd28:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fd2a:	2300      	movs	r3, #0
 800fd2c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fd2e:	2300      	movs	r3, #0
 800fd30:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fd32:	4b42      	ldr	r3, [pc, #264]	; (800fe3c <xTaskResumeAll+0x118>)
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d10a      	bne.n	800fd50 <xTaskResumeAll+0x2c>
	__asm volatile
 800fd3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd3e:	f383 8811 	msr	BASEPRI, r3
 800fd42:	f3bf 8f6f 	isb	sy
 800fd46:	f3bf 8f4f 	dsb	sy
 800fd4a:	603b      	str	r3, [r7, #0]
}
 800fd4c:	bf00      	nop
 800fd4e:	e7fe      	b.n	800fd4e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fd50:	f7fe ff70 	bl	800ec34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fd54:	4b39      	ldr	r3, [pc, #228]	; (800fe3c <xTaskResumeAll+0x118>)
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	3b01      	subs	r3, #1
 800fd5a:	4a38      	ldr	r2, [pc, #224]	; (800fe3c <xTaskResumeAll+0x118>)
 800fd5c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fd5e:	4b37      	ldr	r3, [pc, #220]	; (800fe3c <xTaskResumeAll+0x118>)
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d162      	bne.n	800fe2c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fd66:	4b36      	ldr	r3, [pc, #216]	; (800fe40 <xTaskResumeAll+0x11c>)
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d05e      	beq.n	800fe2c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fd6e:	e02f      	b.n	800fdd0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fd70:	4b34      	ldr	r3, [pc, #208]	; (800fe44 <xTaskResumeAll+0x120>)
 800fd72:	68db      	ldr	r3, [r3, #12]
 800fd74:	68db      	ldr	r3, [r3, #12]
 800fd76:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	3318      	adds	r3, #24
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	f7fe fe03 	bl	800e988 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	3304      	adds	r3, #4
 800fd86:	4618      	mov	r0, r3
 800fd88:	f7fe fdfe 	bl	800e988 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd90:	4b2d      	ldr	r3, [pc, #180]	; (800fe48 <xTaskResumeAll+0x124>)
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	429a      	cmp	r2, r3
 800fd96:	d903      	bls.n	800fda0 <xTaskResumeAll+0x7c>
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd9c:	4a2a      	ldr	r2, [pc, #168]	; (800fe48 <xTaskResumeAll+0x124>)
 800fd9e:	6013      	str	r3, [r2, #0]
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fda4:	4613      	mov	r3, r2
 800fda6:	009b      	lsls	r3, r3, #2
 800fda8:	4413      	add	r3, r2
 800fdaa:	009b      	lsls	r3, r3, #2
 800fdac:	4a27      	ldr	r2, [pc, #156]	; (800fe4c <xTaskResumeAll+0x128>)
 800fdae:	441a      	add	r2, r3
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	3304      	adds	r3, #4
 800fdb4:	4619      	mov	r1, r3
 800fdb6:	4610      	mov	r0, r2
 800fdb8:	f7fe fd89 	bl	800e8ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdc0:	4b23      	ldr	r3, [pc, #140]	; (800fe50 <xTaskResumeAll+0x12c>)
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdc6:	429a      	cmp	r2, r3
 800fdc8:	d302      	bcc.n	800fdd0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800fdca:	4b22      	ldr	r3, [pc, #136]	; (800fe54 <xTaskResumeAll+0x130>)
 800fdcc:	2201      	movs	r2, #1
 800fdce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fdd0:	4b1c      	ldr	r3, [pc, #112]	; (800fe44 <xTaskResumeAll+0x120>)
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d1cb      	bne.n	800fd70 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d001      	beq.n	800fde2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fdde:	f000 fb5f 	bl	80104a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800fde2:	4b1d      	ldr	r3, [pc, #116]	; (800fe58 <xTaskResumeAll+0x134>)
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d010      	beq.n	800fe10 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fdee:	f000 f847 	bl	800fe80 <xTaskIncrementTick>
 800fdf2:	4603      	mov	r3, r0
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d002      	beq.n	800fdfe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800fdf8:	4b16      	ldr	r3, [pc, #88]	; (800fe54 <xTaskResumeAll+0x130>)
 800fdfa:	2201      	movs	r2, #1
 800fdfc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	3b01      	subs	r3, #1
 800fe02:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d1f1      	bne.n	800fdee <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800fe0a:	4b13      	ldr	r3, [pc, #76]	; (800fe58 <xTaskResumeAll+0x134>)
 800fe0c:	2200      	movs	r2, #0
 800fe0e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fe10:	4b10      	ldr	r3, [pc, #64]	; (800fe54 <xTaskResumeAll+0x130>)
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d009      	beq.n	800fe2c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fe18:	2301      	movs	r3, #1
 800fe1a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fe1c:	4b0f      	ldr	r3, [pc, #60]	; (800fe5c <xTaskResumeAll+0x138>)
 800fe1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe22:	601a      	str	r2, [r3, #0]
 800fe24:	f3bf 8f4f 	dsb	sy
 800fe28:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fe2c:	f7fe ff32 	bl	800ec94 <vPortExitCritical>

	return xAlreadyYielded;
 800fe30:	68bb      	ldr	r3, [r7, #8]
}
 800fe32:	4618      	mov	r0, r3
 800fe34:	3710      	adds	r7, #16
 800fe36:	46bd      	mov	sp, r7
 800fe38:	bd80      	pop	{r7, pc}
 800fe3a:	bf00      	nop
 800fe3c:	24005440 	.word	0x24005440
 800fe40:	24005418 	.word	0x24005418
 800fe44:	240053d8 	.word	0x240053d8
 800fe48:	24005420 	.word	0x24005420
 800fe4c:	24004f48 	.word	0x24004f48
 800fe50:	24004f44 	.word	0x24004f44
 800fe54:	2400542c 	.word	0x2400542c
 800fe58:	24005428 	.word	0x24005428
 800fe5c:	e000ed04 	.word	0xe000ed04

0800fe60 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fe60:	b480      	push	{r7}
 800fe62:	b083      	sub	sp, #12
 800fe64:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800fe66:	4b05      	ldr	r3, [pc, #20]	; (800fe7c <xTaskGetTickCount+0x1c>)
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800fe6c:	687b      	ldr	r3, [r7, #4]
}
 800fe6e:	4618      	mov	r0, r3
 800fe70:	370c      	adds	r7, #12
 800fe72:	46bd      	mov	sp, r7
 800fe74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe78:	4770      	bx	lr
 800fe7a:	bf00      	nop
 800fe7c:	2400541c 	.word	0x2400541c

0800fe80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fe80:	b580      	push	{r7, lr}
 800fe82:	b086      	sub	sp, #24
 800fe84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fe86:	2300      	movs	r3, #0
 800fe88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fe8a:	4b4f      	ldr	r3, [pc, #316]	; (800ffc8 <xTaskIncrementTick+0x148>)
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	f040 808f 	bne.w	800ffb2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fe94:	4b4d      	ldr	r3, [pc, #308]	; (800ffcc <xTaskIncrementTick+0x14c>)
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	3301      	adds	r3, #1
 800fe9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fe9c:	4a4b      	ldr	r2, [pc, #300]	; (800ffcc <xTaskIncrementTick+0x14c>)
 800fe9e:	693b      	ldr	r3, [r7, #16]
 800fea0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fea2:	693b      	ldr	r3, [r7, #16]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d120      	bne.n	800feea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800fea8:	4b49      	ldr	r3, [pc, #292]	; (800ffd0 <xTaskIncrementTick+0x150>)
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d00a      	beq.n	800fec8 <xTaskIncrementTick+0x48>
	__asm volatile
 800feb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feb6:	f383 8811 	msr	BASEPRI, r3
 800feba:	f3bf 8f6f 	isb	sy
 800febe:	f3bf 8f4f 	dsb	sy
 800fec2:	603b      	str	r3, [r7, #0]
}
 800fec4:	bf00      	nop
 800fec6:	e7fe      	b.n	800fec6 <xTaskIncrementTick+0x46>
 800fec8:	4b41      	ldr	r3, [pc, #260]	; (800ffd0 <xTaskIncrementTick+0x150>)
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	60fb      	str	r3, [r7, #12]
 800fece:	4b41      	ldr	r3, [pc, #260]	; (800ffd4 <xTaskIncrementTick+0x154>)
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	4a3f      	ldr	r2, [pc, #252]	; (800ffd0 <xTaskIncrementTick+0x150>)
 800fed4:	6013      	str	r3, [r2, #0]
 800fed6:	4a3f      	ldr	r2, [pc, #252]	; (800ffd4 <xTaskIncrementTick+0x154>)
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	6013      	str	r3, [r2, #0]
 800fedc:	4b3e      	ldr	r3, [pc, #248]	; (800ffd8 <xTaskIncrementTick+0x158>)
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	3301      	adds	r3, #1
 800fee2:	4a3d      	ldr	r2, [pc, #244]	; (800ffd8 <xTaskIncrementTick+0x158>)
 800fee4:	6013      	str	r3, [r2, #0]
 800fee6:	f000 fadb 	bl	80104a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800feea:	4b3c      	ldr	r3, [pc, #240]	; (800ffdc <xTaskIncrementTick+0x15c>)
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	693a      	ldr	r2, [r7, #16]
 800fef0:	429a      	cmp	r2, r3
 800fef2:	d349      	bcc.n	800ff88 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fef4:	4b36      	ldr	r3, [pc, #216]	; (800ffd0 <xTaskIncrementTick+0x150>)
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d104      	bne.n	800ff08 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fefe:	4b37      	ldr	r3, [pc, #220]	; (800ffdc <xTaskIncrementTick+0x15c>)
 800ff00:	f04f 32ff 	mov.w	r2, #4294967295
 800ff04:	601a      	str	r2, [r3, #0]
					break;
 800ff06:	e03f      	b.n	800ff88 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff08:	4b31      	ldr	r3, [pc, #196]	; (800ffd0 <xTaskIncrementTick+0x150>)
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	68db      	ldr	r3, [r3, #12]
 800ff0e:	68db      	ldr	r3, [r3, #12]
 800ff10:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ff12:	68bb      	ldr	r3, [r7, #8]
 800ff14:	685b      	ldr	r3, [r3, #4]
 800ff16:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ff18:	693a      	ldr	r2, [r7, #16]
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	429a      	cmp	r2, r3
 800ff1e:	d203      	bcs.n	800ff28 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ff20:	4a2e      	ldr	r2, [pc, #184]	; (800ffdc <xTaskIncrementTick+0x15c>)
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ff26:	e02f      	b.n	800ff88 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ff28:	68bb      	ldr	r3, [r7, #8]
 800ff2a:	3304      	adds	r3, #4
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	f7fe fd2b 	bl	800e988 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ff32:	68bb      	ldr	r3, [r7, #8]
 800ff34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d004      	beq.n	800ff44 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ff3a:	68bb      	ldr	r3, [r7, #8]
 800ff3c:	3318      	adds	r3, #24
 800ff3e:	4618      	mov	r0, r3
 800ff40:	f7fe fd22 	bl	800e988 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ff44:	68bb      	ldr	r3, [r7, #8]
 800ff46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff48:	4b25      	ldr	r3, [pc, #148]	; (800ffe0 <xTaskIncrementTick+0x160>)
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	429a      	cmp	r2, r3
 800ff4e:	d903      	bls.n	800ff58 <xTaskIncrementTick+0xd8>
 800ff50:	68bb      	ldr	r3, [r7, #8]
 800ff52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff54:	4a22      	ldr	r2, [pc, #136]	; (800ffe0 <xTaskIncrementTick+0x160>)
 800ff56:	6013      	str	r3, [r2, #0]
 800ff58:	68bb      	ldr	r3, [r7, #8]
 800ff5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff5c:	4613      	mov	r3, r2
 800ff5e:	009b      	lsls	r3, r3, #2
 800ff60:	4413      	add	r3, r2
 800ff62:	009b      	lsls	r3, r3, #2
 800ff64:	4a1f      	ldr	r2, [pc, #124]	; (800ffe4 <xTaskIncrementTick+0x164>)
 800ff66:	441a      	add	r2, r3
 800ff68:	68bb      	ldr	r3, [r7, #8]
 800ff6a:	3304      	adds	r3, #4
 800ff6c:	4619      	mov	r1, r3
 800ff6e:	4610      	mov	r0, r2
 800ff70:	f7fe fcad 	bl	800e8ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ff74:	68bb      	ldr	r3, [r7, #8]
 800ff76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff78:	4b1b      	ldr	r3, [pc, #108]	; (800ffe8 <xTaskIncrementTick+0x168>)
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff7e:	429a      	cmp	r2, r3
 800ff80:	d3b8      	bcc.n	800fef4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ff82:	2301      	movs	r3, #1
 800ff84:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ff86:	e7b5      	b.n	800fef4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ff88:	4b17      	ldr	r3, [pc, #92]	; (800ffe8 <xTaskIncrementTick+0x168>)
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff8e:	4915      	ldr	r1, [pc, #84]	; (800ffe4 <xTaskIncrementTick+0x164>)
 800ff90:	4613      	mov	r3, r2
 800ff92:	009b      	lsls	r3, r3, #2
 800ff94:	4413      	add	r3, r2
 800ff96:	009b      	lsls	r3, r3, #2
 800ff98:	440b      	add	r3, r1
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	2b01      	cmp	r3, #1
 800ff9e:	d901      	bls.n	800ffa4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ffa0:	2301      	movs	r3, #1
 800ffa2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ffa4:	4b11      	ldr	r3, [pc, #68]	; (800ffec <xTaskIncrementTick+0x16c>)
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d007      	beq.n	800ffbc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ffac:	2301      	movs	r3, #1
 800ffae:	617b      	str	r3, [r7, #20]
 800ffb0:	e004      	b.n	800ffbc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ffb2:	4b0f      	ldr	r3, [pc, #60]	; (800fff0 <xTaskIncrementTick+0x170>)
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	3301      	adds	r3, #1
 800ffb8:	4a0d      	ldr	r2, [pc, #52]	; (800fff0 <xTaskIncrementTick+0x170>)
 800ffba:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ffbc:	697b      	ldr	r3, [r7, #20]
}
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	3718      	adds	r7, #24
 800ffc2:	46bd      	mov	sp, r7
 800ffc4:	bd80      	pop	{r7, pc}
 800ffc6:	bf00      	nop
 800ffc8:	24005440 	.word	0x24005440
 800ffcc:	2400541c 	.word	0x2400541c
 800ffd0:	240053d0 	.word	0x240053d0
 800ffd4:	240053d4 	.word	0x240053d4
 800ffd8:	24005430 	.word	0x24005430
 800ffdc:	24005438 	.word	0x24005438
 800ffe0:	24005420 	.word	0x24005420
 800ffe4:	24004f48 	.word	0x24004f48
 800ffe8:	24004f44 	.word	0x24004f44
 800ffec:	2400542c 	.word	0x2400542c
 800fff0:	24005428 	.word	0x24005428

0800fff4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fff4:	b480      	push	{r7}
 800fff6:	b085      	sub	sp, #20
 800fff8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fffa:	4b2a      	ldr	r3, [pc, #168]	; (80100a4 <vTaskSwitchContext+0xb0>)
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d003      	beq.n	801000a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010002:	4b29      	ldr	r3, [pc, #164]	; (80100a8 <vTaskSwitchContext+0xb4>)
 8010004:	2201      	movs	r2, #1
 8010006:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010008:	e046      	b.n	8010098 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 801000a:	4b27      	ldr	r3, [pc, #156]	; (80100a8 <vTaskSwitchContext+0xb4>)
 801000c:	2200      	movs	r2, #0
 801000e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010010:	4b26      	ldr	r3, [pc, #152]	; (80100ac <vTaskSwitchContext+0xb8>)
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	60fb      	str	r3, [r7, #12]
 8010016:	e010      	b.n	801003a <vTaskSwitchContext+0x46>
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d10a      	bne.n	8010034 <vTaskSwitchContext+0x40>
	__asm volatile
 801001e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010022:	f383 8811 	msr	BASEPRI, r3
 8010026:	f3bf 8f6f 	isb	sy
 801002a:	f3bf 8f4f 	dsb	sy
 801002e:	607b      	str	r3, [r7, #4]
}
 8010030:	bf00      	nop
 8010032:	e7fe      	b.n	8010032 <vTaskSwitchContext+0x3e>
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	3b01      	subs	r3, #1
 8010038:	60fb      	str	r3, [r7, #12]
 801003a:	491d      	ldr	r1, [pc, #116]	; (80100b0 <vTaskSwitchContext+0xbc>)
 801003c:	68fa      	ldr	r2, [r7, #12]
 801003e:	4613      	mov	r3, r2
 8010040:	009b      	lsls	r3, r3, #2
 8010042:	4413      	add	r3, r2
 8010044:	009b      	lsls	r3, r3, #2
 8010046:	440b      	add	r3, r1
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	2b00      	cmp	r3, #0
 801004c:	d0e4      	beq.n	8010018 <vTaskSwitchContext+0x24>
 801004e:	68fa      	ldr	r2, [r7, #12]
 8010050:	4613      	mov	r3, r2
 8010052:	009b      	lsls	r3, r3, #2
 8010054:	4413      	add	r3, r2
 8010056:	009b      	lsls	r3, r3, #2
 8010058:	4a15      	ldr	r2, [pc, #84]	; (80100b0 <vTaskSwitchContext+0xbc>)
 801005a:	4413      	add	r3, r2
 801005c:	60bb      	str	r3, [r7, #8]
 801005e:	68bb      	ldr	r3, [r7, #8]
 8010060:	685b      	ldr	r3, [r3, #4]
 8010062:	685a      	ldr	r2, [r3, #4]
 8010064:	68bb      	ldr	r3, [r7, #8]
 8010066:	605a      	str	r2, [r3, #4]
 8010068:	68bb      	ldr	r3, [r7, #8]
 801006a:	685a      	ldr	r2, [r3, #4]
 801006c:	68bb      	ldr	r3, [r7, #8]
 801006e:	3308      	adds	r3, #8
 8010070:	429a      	cmp	r2, r3
 8010072:	d104      	bne.n	801007e <vTaskSwitchContext+0x8a>
 8010074:	68bb      	ldr	r3, [r7, #8]
 8010076:	685b      	ldr	r3, [r3, #4]
 8010078:	685a      	ldr	r2, [r3, #4]
 801007a:	68bb      	ldr	r3, [r7, #8]
 801007c:	605a      	str	r2, [r3, #4]
 801007e:	68bb      	ldr	r3, [r7, #8]
 8010080:	685b      	ldr	r3, [r3, #4]
 8010082:	68db      	ldr	r3, [r3, #12]
 8010084:	4a0b      	ldr	r2, [pc, #44]	; (80100b4 <vTaskSwitchContext+0xc0>)
 8010086:	6013      	str	r3, [r2, #0]
 8010088:	4a08      	ldr	r2, [pc, #32]	; (80100ac <vTaskSwitchContext+0xb8>)
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801008e:	4b09      	ldr	r3, [pc, #36]	; (80100b4 <vTaskSwitchContext+0xc0>)
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	3354      	adds	r3, #84	; 0x54
 8010094:	4a08      	ldr	r2, [pc, #32]	; (80100b8 <vTaskSwitchContext+0xc4>)
 8010096:	6013      	str	r3, [r2, #0]
}
 8010098:	bf00      	nop
 801009a:	3714      	adds	r7, #20
 801009c:	46bd      	mov	sp, r7
 801009e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a2:	4770      	bx	lr
 80100a4:	24005440 	.word	0x24005440
 80100a8:	2400542c 	.word	0x2400542c
 80100ac:	24005420 	.word	0x24005420
 80100b0:	24004f48 	.word	0x24004f48
 80100b4:	24004f44 	.word	0x24004f44
 80100b8:	2400006c 	.word	0x2400006c

080100bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80100bc:	b580      	push	{r7, lr}
 80100be:	b084      	sub	sp, #16
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	6078      	str	r0, [r7, #4]
 80100c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d10a      	bne.n	80100e2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80100cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100d0:	f383 8811 	msr	BASEPRI, r3
 80100d4:	f3bf 8f6f 	isb	sy
 80100d8:	f3bf 8f4f 	dsb	sy
 80100dc:	60fb      	str	r3, [r7, #12]
}
 80100de:	bf00      	nop
 80100e0:	e7fe      	b.n	80100e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80100e2:	4b07      	ldr	r3, [pc, #28]	; (8010100 <vTaskPlaceOnEventList+0x44>)
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	3318      	adds	r3, #24
 80100e8:	4619      	mov	r1, r3
 80100ea:	6878      	ldr	r0, [r7, #4]
 80100ec:	f7fe fc13 	bl	800e916 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80100f0:	2101      	movs	r1, #1
 80100f2:	6838      	ldr	r0, [r7, #0]
 80100f4:	f000 fa80 	bl	80105f8 <prvAddCurrentTaskToDelayedList>
}
 80100f8:	bf00      	nop
 80100fa:	3710      	adds	r7, #16
 80100fc:	46bd      	mov	sp, r7
 80100fe:	bd80      	pop	{r7, pc}
 8010100:	24004f44 	.word	0x24004f44

08010104 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010104:	b580      	push	{r7, lr}
 8010106:	b086      	sub	sp, #24
 8010108:	af00      	add	r7, sp, #0
 801010a:	60f8      	str	r0, [r7, #12]
 801010c:	60b9      	str	r1, [r7, #8]
 801010e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	2b00      	cmp	r3, #0
 8010114:	d10a      	bne.n	801012c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8010116:	f04f 0350 	mov.w	r3, #80	; 0x50
 801011a:	f383 8811 	msr	BASEPRI, r3
 801011e:	f3bf 8f6f 	isb	sy
 8010122:	f3bf 8f4f 	dsb	sy
 8010126:	617b      	str	r3, [r7, #20]
}
 8010128:	bf00      	nop
 801012a:	e7fe      	b.n	801012a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801012c:	4b0a      	ldr	r3, [pc, #40]	; (8010158 <vTaskPlaceOnEventListRestricted+0x54>)
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	3318      	adds	r3, #24
 8010132:	4619      	mov	r1, r3
 8010134:	68f8      	ldr	r0, [r7, #12]
 8010136:	f7fe fbca 	bl	800e8ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	2b00      	cmp	r3, #0
 801013e:	d002      	beq.n	8010146 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8010140:	f04f 33ff 	mov.w	r3, #4294967295
 8010144:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010146:	6879      	ldr	r1, [r7, #4]
 8010148:	68b8      	ldr	r0, [r7, #8]
 801014a:	f000 fa55 	bl	80105f8 <prvAddCurrentTaskToDelayedList>
	}
 801014e:	bf00      	nop
 8010150:	3718      	adds	r7, #24
 8010152:	46bd      	mov	sp, r7
 8010154:	bd80      	pop	{r7, pc}
 8010156:	bf00      	nop
 8010158:	24004f44 	.word	0x24004f44

0801015c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801015c:	b580      	push	{r7, lr}
 801015e:	b086      	sub	sp, #24
 8010160:	af00      	add	r7, sp, #0
 8010162:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	68db      	ldr	r3, [r3, #12]
 8010168:	68db      	ldr	r3, [r3, #12]
 801016a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801016c:	693b      	ldr	r3, [r7, #16]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d10a      	bne.n	8010188 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8010172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010176:	f383 8811 	msr	BASEPRI, r3
 801017a:	f3bf 8f6f 	isb	sy
 801017e:	f3bf 8f4f 	dsb	sy
 8010182:	60fb      	str	r3, [r7, #12]
}
 8010184:	bf00      	nop
 8010186:	e7fe      	b.n	8010186 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010188:	693b      	ldr	r3, [r7, #16]
 801018a:	3318      	adds	r3, #24
 801018c:	4618      	mov	r0, r3
 801018e:	f7fe fbfb 	bl	800e988 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010192:	4b1e      	ldr	r3, [pc, #120]	; (801020c <xTaskRemoveFromEventList+0xb0>)
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	2b00      	cmp	r3, #0
 8010198:	d11d      	bne.n	80101d6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801019a:	693b      	ldr	r3, [r7, #16]
 801019c:	3304      	adds	r3, #4
 801019e:	4618      	mov	r0, r3
 80101a0:	f7fe fbf2 	bl	800e988 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80101a4:	693b      	ldr	r3, [r7, #16]
 80101a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101a8:	4b19      	ldr	r3, [pc, #100]	; (8010210 <xTaskRemoveFromEventList+0xb4>)
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	429a      	cmp	r2, r3
 80101ae:	d903      	bls.n	80101b8 <xTaskRemoveFromEventList+0x5c>
 80101b0:	693b      	ldr	r3, [r7, #16]
 80101b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101b4:	4a16      	ldr	r2, [pc, #88]	; (8010210 <xTaskRemoveFromEventList+0xb4>)
 80101b6:	6013      	str	r3, [r2, #0]
 80101b8:	693b      	ldr	r3, [r7, #16]
 80101ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101bc:	4613      	mov	r3, r2
 80101be:	009b      	lsls	r3, r3, #2
 80101c0:	4413      	add	r3, r2
 80101c2:	009b      	lsls	r3, r3, #2
 80101c4:	4a13      	ldr	r2, [pc, #76]	; (8010214 <xTaskRemoveFromEventList+0xb8>)
 80101c6:	441a      	add	r2, r3
 80101c8:	693b      	ldr	r3, [r7, #16]
 80101ca:	3304      	adds	r3, #4
 80101cc:	4619      	mov	r1, r3
 80101ce:	4610      	mov	r0, r2
 80101d0:	f7fe fb7d 	bl	800e8ce <vListInsertEnd>
 80101d4:	e005      	b.n	80101e2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80101d6:	693b      	ldr	r3, [r7, #16]
 80101d8:	3318      	adds	r3, #24
 80101da:	4619      	mov	r1, r3
 80101dc:	480e      	ldr	r0, [pc, #56]	; (8010218 <xTaskRemoveFromEventList+0xbc>)
 80101de:	f7fe fb76 	bl	800e8ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80101e2:	693b      	ldr	r3, [r7, #16]
 80101e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101e6:	4b0d      	ldr	r3, [pc, #52]	; (801021c <xTaskRemoveFromEventList+0xc0>)
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101ec:	429a      	cmp	r2, r3
 80101ee:	d905      	bls.n	80101fc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80101f0:	2301      	movs	r3, #1
 80101f2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80101f4:	4b0a      	ldr	r3, [pc, #40]	; (8010220 <xTaskRemoveFromEventList+0xc4>)
 80101f6:	2201      	movs	r2, #1
 80101f8:	601a      	str	r2, [r3, #0]
 80101fa:	e001      	b.n	8010200 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80101fc:	2300      	movs	r3, #0
 80101fe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010200:	697b      	ldr	r3, [r7, #20]
}
 8010202:	4618      	mov	r0, r3
 8010204:	3718      	adds	r7, #24
 8010206:	46bd      	mov	sp, r7
 8010208:	bd80      	pop	{r7, pc}
 801020a:	bf00      	nop
 801020c:	24005440 	.word	0x24005440
 8010210:	24005420 	.word	0x24005420
 8010214:	24004f48 	.word	0x24004f48
 8010218:	240053d8 	.word	0x240053d8
 801021c:	24004f44 	.word	0x24004f44
 8010220:	2400542c 	.word	0x2400542c

08010224 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010224:	b480      	push	{r7}
 8010226:	b083      	sub	sp, #12
 8010228:	af00      	add	r7, sp, #0
 801022a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801022c:	4b06      	ldr	r3, [pc, #24]	; (8010248 <vTaskInternalSetTimeOutState+0x24>)
 801022e:	681a      	ldr	r2, [r3, #0]
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010234:	4b05      	ldr	r3, [pc, #20]	; (801024c <vTaskInternalSetTimeOutState+0x28>)
 8010236:	681a      	ldr	r2, [r3, #0]
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	605a      	str	r2, [r3, #4]
}
 801023c:	bf00      	nop
 801023e:	370c      	adds	r7, #12
 8010240:	46bd      	mov	sp, r7
 8010242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010246:	4770      	bx	lr
 8010248:	24005430 	.word	0x24005430
 801024c:	2400541c 	.word	0x2400541c

08010250 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010250:	b580      	push	{r7, lr}
 8010252:	b088      	sub	sp, #32
 8010254:	af00      	add	r7, sp, #0
 8010256:	6078      	str	r0, [r7, #4]
 8010258:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	2b00      	cmp	r3, #0
 801025e:	d10a      	bne.n	8010276 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8010260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010264:	f383 8811 	msr	BASEPRI, r3
 8010268:	f3bf 8f6f 	isb	sy
 801026c:	f3bf 8f4f 	dsb	sy
 8010270:	613b      	str	r3, [r7, #16]
}
 8010272:	bf00      	nop
 8010274:	e7fe      	b.n	8010274 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8010276:	683b      	ldr	r3, [r7, #0]
 8010278:	2b00      	cmp	r3, #0
 801027a:	d10a      	bne.n	8010292 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801027c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010280:	f383 8811 	msr	BASEPRI, r3
 8010284:	f3bf 8f6f 	isb	sy
 8010288:	f3bf 8f4f 	dsb	sy
 801028c:	60fb      	str	r3, [r7, #12]
}
 801028e:	bf00      	nop
 8010290:	e7fe      	b.n	8010290 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8010292:	f7fe fccf 	bl	800ec34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010296:	4b1d      	ldr	r3, [pc, #116]	; (801030c <xTaskCheckForTimeOut+0xbc>)
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	685b      	ldr	r3, [r3, #4]
 80102a0:	69ba      	ldr	r2, [r7, #24]
 80102a2:	1ad3      	subs	r3, r2, r3
 80102a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80102a6:	683b      	ldr	r3, [r7, #0]
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102ae:	d102      	bne.n	80102b6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80102b0:	2300      	movs	r3, #0
 80102b2:	61fb      	str	r3, [r7, #28]
 80102b4:	e023      	b.n	80102fe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	681a      	ldr	r2, [r3, #0]
 80102ba:	4b15      	ldr	r3, [pc, #84]	; (8010310 <xTaskCheckForTimeOut+0xc0>)
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	429a      	cmp	r2, r3
 80102c0:	d007      	beq.n	80102d2 <xTaskCheckForTimeOut+0x82>
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	685b      	ldr	r3, [r3, #4]
 80102c6:	69ba      	ldr	r2, [r7, #24]
 80102c8:	429a      	cmp	r2, r3
 80102ca:	d302      	bcc.n	80102d2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80102cc:	2301      	movs	r3, #1
 80102ce:	61fb      	str	r3, [r7, #28]
 80102d0:	e015      	b.n	80102fe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80102d2:	683b      	ldr	r3, [r7, #0]
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	697a      	ldr	r2, [r7, #20]
 80102d8:	429a      	cmp	r2, r3
 80102da:	d20b      	bcs.n	80102f4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80102dc:	683b      	ldr	r3, [r7, #0]
 80102de:	681a      	ldr	r2, [r3, #0]
 80102e0:	697b      	ldr	r3, [r7, #20]
 80102e2:	1ad2      	subs	r2, r2, r3
 80102e4:	683b      	ldr	r3, [r7, #0]
 80102e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80102e8:	6878      	ldr	r0, [r7, #4]
 80102ea:	f7ff ff9b 	bl	8010224 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80102ee:	2300      	movs	r3, #0
 80102f0:	61fb      	str	r3, [r7, #28]
 80102f2:	e004      	b.n	80102fe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80102f4:	683b      	ldr	r3, [r7, #0]
 80102f6:	2200      	movs	r2, #0
 80102f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80102fa:	2301      	movs	r3, #1
 80102fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80102fe:	f7fe fcc9 	bl	800ec94 <vPortExitCritical>

	return xReturn;
 8010302:	69fb      	ldr	r3, [r7, #28]
}
 8010304:	4618      	mov	r0, r3
 8010306:	3720      	adds	r7, #32
 8010308:	46bd      	mov	sp, r7
 801030a:	bd80      	pop	{r7, pc}
 801030c:	2400541c 	.word	0x2400541c
 8010310:	24005430 	.word	0x24005430

08010314 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010314:	b480      	push	{r7}
 8010316:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010318:	4b03      	ldr	r3, [pc, #12]	; (8010328 <vTaskMissedYield+0x14>)
 801031a:	2201      	movs	r2, #1
 801031c:	601a      	str	r2, [r3, #0]
}
 801031e:	bf00      	nop
 8010320:	46bd      	mov	sp, r7
 8010322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010326:	4770      	bx	lr
 8010328:	2400542c 	.word	0x2400542c

0801032c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801032c:	b580      	push	{r7, lr}
 801032e:	b082      	sub	sp, #8
 8010330:	af00      	add	r7, sp, #0
 8010332:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010334:	f000 f852 	bl	80103dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010338:	4b06      	ldr	r3, [pc, #24]	; (8010354 <prvIdleTask+0x28>)
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	2b01      	cmp	r3, #1
 801033e:	d9f9      	bls.n	8010334 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010340:	4b05      	ldr	r3, [pc, #20]	; (8010358 <prvIdleTask+0x2c>)
 8010342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010346:	601a      	str	r2, [r3, #0]
 8010348:	f3bf 8f4f 	dsb	sy
 801034c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010350:	e7f0      	b.n	8010334 <prvIdleTask+0x8>
 8010352:	bf00      	nop
 8010354:	24004f48 	.word	0x24004f48
 8010358:	e000ed04 	.word	0xe000ed04

0801035c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801035c:	b580      	push	{r7, lr}
 801035e:	b082      	sub	sp, #8
 8010360:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010362:	2300      	movs	r3, #0
 8010364:	607b      	str	r3, [r7, #4]
 8010366:	e00c      	b.n	8010382 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010368:	687a      	ldr	r2, [r7, #4]
 801036a:	4613      	mov	r3, r2
 801036c:	009b      	lsls	r3, r3, #2
 801036e:	4413      	add	r3, r2
 8010370:	009b      	lsls	r3, r3, #2
 8010372:	4a12      	ldr	r2, [pc, #72]	; (80103bc <prvInitialiseTaskLists+0x60>)
 8010374:	4413      	add	r3, r2
 8010376:	4618      	mov	r0, r3
 8010378:	f7fe fa7c 	bl	800e874 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	3301      	adds	r3, #1
 8010380:	607b      	str	r3, [r7, #4]
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	2b37      	cmp	r3, #55	; 0x37
 8010386:	d9ef      	bls.n	8010368 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010388:	480d      	ldr	r0, [pc, #52]	; (80103c0 <prvInitialiseTaskLists+0x64>)
 801038a:	f7fe fa73 	bl	800e874 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801038e:	480d      	ldr	r0, [pc, #52]	; (80103c4 <prvInitialiseTaskLists+0x68>)
 8010390:	f7fe fa70 	bl	800e874 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010394:	480c      	ldr	r0, [pc, #48]	; (80103c8 <prvInitialiseTaskLists+0x6c>)
 8010396:	f7fe fa6d 	bl	800e874 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801039a:	480c      	ldr	r0, [pc, #48]	; (80103cc <prvInitialiseTaskLists+0x70>)
 801039c:	f7fe fa6a 	bl	800e874 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80103a0:	480b      	ldr	r0, [pc, #44]	; (80103d0 <prvInitialiseTaskLists+0x74>)
 80103a2:	f7fe fa67 	bl	800e874 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80103a6:	4b0b      	ldr	r3, [pc, #44]	; (80103d4 <prvInitialiseTaskLists+0x78>)
 80103a8:	4a05      	ldr	r2, [pc, #20]	; (80103c0 <prvInitialiseTaskLists+0x64>)
 80103aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80103ac:	4b0a      	ldr	r3, [pc, #40]	; (80103d8 <prvInitialiseTaskLists+0x7c>)
 80103ae:	4a05      	ldr	r2, [pc, #20]	; (80103c4 <prvInitialiseTaskLists+0x68>)
 80103b0:	601a      	str	r2, [r3, #0]
}
 80103b2:	bf00      	nop
 80103b4:	3708      	adds	r7, #8
 80103b6:	46bd      	mov	sp, r7
 80103b8:	bd80      	pop	{r7, pc}
 80103ba:	bf00      	nop
 80103bc:	24004f48 	.word	0x24004f48
 80103c0:	240053a8 	.word	0x240053a8
 80103c4:	240053bc 	.word	0x240053bc
 80103c8:	240053d8 	.word	0x240053d8
 80103cc:	240053ec 	.word	0x240053ec
 80103d0:	24005404 	.word	0x24005404
 80103d4:	240053d0 	.word	0x240053d0
 80103d8:	240053d4 	.word	0x240053d4

080103dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80103dc:	b580      	push	{r7, lr}
 80103de:	b082      	sub	sp, #8
 80103e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80103e2:	e019      	b.n	8010418 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80103e4:	f7fe fc26 	bl	800ec34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80103e8:	4b10      	ldr	r3, [pc, #64]	; (801042c <prvCheckTasksWaitingTermination+0x50>)
 80103ea:	68db      	ldr	r3, [r3, #12]
 80103ec:	68db      	ldr	r3, [r3, #12]
 80103ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	3304      	adds	r3, #4
 80103f4:	4618      	mov	r0, r3
 80103f6:	f7fe fac7 	bl	800e988 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80103fa:	4b0d      	ldr	r3, [pc, #52]	; (8010430 <prvCheckTasksWaitingTermination+0x54>)
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	3b01      	subs	r3, #1
 8010400:	4a0b      	ldr	r2, [pc, #44]	; (8010430 <prvCheckTasksWaitingTermination+0x54>)
 8010402:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010404:	4b0b      	ldr	r3, [pc, #44]	; (8010434 <prvCheckTasksWaitingTermination+0x58>)
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	3b01      	subs	r3, #1
 801040a:	4a0a      	ldr	r2, [pc, #40]	; (8010434 <prvCheckTasksWaitingTermination+0x58>)
 801040c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801040e:	f7fe fc41 	bl	800ec94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010412:	6878      	ldr	r0, [r7, #4]
 8010414:	f000 f810 	bl	8010438 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010418:	4b06      	ldr	r3, [pc, #24]	; (8010434 <prvCheckTasksWaitingTermination+0x58>)
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d1e1      	bne.n	80103e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010420:	bf00      	nop
 8010422:	bf00      	nop
 8010424:	3708      	adds	r7, #8
 8010426:	46bd      	mov	sp, r7
 8010428:	bd80      	pop	{r7, pc}
 801042a:	bf00      	nop
 801042c:	240053ec 	.word	0x240053ec
 8010430:	24005418 	.word	0x24005418
 8010434:	24005400 	.word	0x24005400

08010438 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010438:	b580      	push	{r7, lr}
 801043a:	b084      	sub	sp, #16
 801043c:	af00      	add	r7, sp, #0
 801043e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	3354      	adds	r3, #84	; 0x54
 8010444:	4618      	mov	r0, r3
 8010446:	f001 fcdd 	bl	8011e04 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8010450:	2b00      	cmp	r3, #0
 8010452:	d108      	bne.n	8010466 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010458:	4618      	mov	r0, r3
 801045a:	f7fe f8ed 	bl	800e638 <vPortFree>
				vPortFree( pxTCB );
 801045e:	6878      	ldr	r0, [r7, #4]
 8010460:	f7fe f8ea 	bl	800e638 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010464:	e018      	b.n	8010498 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 801046c:	2b01      	cmp	r3, #1
 801046e:	d103      	bne.n	8010478 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8010470:	6878      	ldr	r0, [r7, #4]
 8010472:	f7fe f8e1 	bl	800e638 <vPortFree>
	}
 8010476:	e00f      	b.n	8010498 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 801047e:	2b02      	cmp	r3, #2
 8010480:	d00a      	beq.n	8010498 <prvDeleteTCB+0x60>
	__asm volatile
 8010482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010486:	f383 8811 	msr	BASEPRI, r3
 801048a:	f3bf 8f6f 	isb	sy
 801048e:	f3bf 8f4f 	dsb	sy
 8010492:	60fb      	str	r3, [r7, #12]
}
 8010494:	bf00      	nop
 8010496:	e7fe      	b.n	8010496 <prvDeleteTCB+0x5e>
	}
 8010498:	bf00      	nop
 801049a:	3710      	adds	r7, #16
 801049c:	46bd      	mov	sp, r7
 801049e:	bd80      	pop	{r7, pc}

080104a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80104a0:	b480      	push	{r7}
 80104a2:	b083      	sub	sp, #12
 80104a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80104a6:	4b0c      	ldr	r3, [pc, #48]	; (80104d8 <prvResetNextTaskUnblockTime+0x38>)
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d104      	bne.n	80104ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80104b0:	4b0a      	ldr	r3, [pc, #40]	; (80104dc <prvResetNextTaskUnblockTime+0x3c>)
 80104b2:	f04f 32ff 	mov.w	r2, #4294967295
 80104b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80104b8:	e008      	b.n	80104cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80104ba:	4b07      	ldr	r3, [pc, #28]	; (80104d8 <prvResetNextTaskUnblockTime+0x38>)
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	68db      	ldr	r3, [r3, #12]
 80104c0:	68db      	ldr	r3, [r3, #12]
 80104c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	685b      	ldr	r3, [r3, #4]
 80104c8:	4a04      	ldr	r2, [pc, #16]	; (80104dc <prvResetNextTaskUnblockTime+0x3c>)
 80104ca:	6013      	str	r3, [r2, #0]
}
 80104cc:	bf00      	nop
 80104ce:	370c      	adds	r7, #12
 80104d0:	46bd      	mov	sp, r7
 80104d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d6:	4770      	bx	lr
 80104d8:	240053d0 	.word	0x240053d0
 80104dc:	24005438 	.word	0x24005438

080104e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80104e0:	b480      	push	{r7}
 80104e2:	b083      	sub	sp, #12
 80104e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80104e6:	4b0b      	ldr	r3, [pc, #44]	; (8010514 <xTaskGetSchedulerState+0x34>)
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d102      	bne.n	80104f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80104ee:	2301      	movs	r3, #1
 80104f0:	607b      	str	r3, [r7, #4]
 80104f2:	e008      	b.n	8010506 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80104f4:	4b08      	ldr	r3, [pc, #32]	; (8010518 <xTaskGetSchedulerState+0x38>)
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d102      	bne.n	8010502 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80104fc:	2302      	movs	r3, #2
 80104fe:	607b      	str	r3, [r7, #4]
 8010500:	e001      	b.n	8010506 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010502:	2300      	movs	r3, #0
 8010504:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010506:	687b      	ldr	r3, [r7, #4]
	}
 8010508:	4618      	mov	r0, r3
 801050a:	370c      	adds	r7, #12
 801050c:	46bd      	mov	sp, r7
 801050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010512:	4770      	bx	lr
 8010514:	24005424 	.word	0x24005424
 8010518:	24005440 	.word	0x24005440

0801051c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801051c:	b580      	push	{r7, lr}
 801051e:	b086      	sub	sp, #24
 8010520:	af00      	add	r7, sp, #0
 8010522:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010528:	2300      	movs	r3, #0
 801052a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	2b00      	cmp	r3, #0
 8010530:	d056      	beq.n	80105e0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010532:	4b2e      	ldr	r3, [pc, #184]	; (80105ec <xTaskPriorityDisinherit+0xd0>)
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	693a      	ldr	r2, [r7, #16]
 8010538:	429a      	cmp	r2, r3
 801053a:	d00a      	beq.n	8010552 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801053c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010540:	f383 8811 	msr	BASEPRI, r3
 8010544:	f3bf 8f6f 	isb	sy
 8010548:	f3bf 8f4f 	dsb	sy
 801054c:	60fb      	str	r3, [r7, #12]
}
 801054e:	bf00      	nop
 8010550:	e7fe      	b.n	8010550 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8010552:	693b      	ldr	r3, [r7, #16]
 8010554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010556:	2b00      	cmp	r3, #0
 8010558:	d10a      	bne.n	8010570 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801055a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801055e:	f383 8811 	msr	BASEPRI, r3
 8010562:	f3bf 8f6f 	isb	sy
 8010566:	f3bf 8f4f 	dsb	sy
 801056a:	60bb      	str	r3, [r7, #8]
}
 801056c:	bf00      	nop
 801056e:	e7fe      	b.n	801056e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8010570:	693b      	ldr	r3, [r7, #16]
 8010572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010574:	1e5a      	subs	r2, r3, #1
 8010576:	693b      	ldr	r3, [r7, #16]
 8010578:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801057a:	693b      	ldr	r3, [r7, #16]
 801057c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801057e:	693b      	ldr	r3, [r7, #16]
 8010580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010582:	429a      	cmp	r2, r3
 8010584:	d02c      	beq.n	80105e0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010586:	693b      	ldr	r3, [r7, #16]
 8010588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801058a:	2b00      	cmp	r3, #0
 801058c:	d128      	bne.n	80105e0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801058e:	693b      	ldr	r3, [r7, #16]
 8010590:	3304      	adds	r3, #4
 8010592:	4618      	mov	r0, r3
 8010594:	f7fe f9f8 	bl	800e988 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010598:	693b      	ldr	r3, [r7, #16]
 801059a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801059c:	693b      	ldr	r3, [r7, #16]
 801059e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80105a0:	693b      	ldr	r3, [r7, #16]
 80105a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105a4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80105a8:	693b      	ldr	r3, [r7, #16]
 80105aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80105ac:	693b      	ldr	r3, [r7, #16]
 80105ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105b0:	4b0f      	ldr	r3, [pc, #60]	; (80105f0 <xTaskPriorityDisinherit+0xd4>)
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	429a      	cmp	r2, r3
 80105b6:	d903      	bls.n	80105c0 <xTaskPriorityDisinherit+0xa4>
 80105b8:	693b      	ldr	r3, [r7, #16]
 80105ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105bc:	4a0c      	ldr	r2, [pc, #48]	; (80105f0 <xTaskPriorityDisinherit+0xd4>)
 80105be:	6013      	str	r3, [r2, #0]
 80105c0:	693b      	ldr	r3, [r7, #16]
 80105c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105c4:	4613      	mov	r3, r2
 80105c6:	009b      	lsls	r3, r3, #2
 80105c8:	4413      	add	r3, r2
 80105ca:	009b      	lsls	r3, r3, #2
 80105cc:	4a09      	ldr	r2, [pc, #36]	; (80105f4 <xTaskPriorityDisinherit+0xd8>)
 80105ce:	441a      	add	r2, r3
 80105d0:	693b      	ldr	r3, [r7, #16]
 80105d2:	3304      	adds	r3, #4
 80105d4:	4619      	mov	r1, r3
 80105d6:	4610      	mov	r0, r2
 80105d8:	f7fe f979 	bl	800e8ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80105dc:	2301      	movs	r3, #1
 80105de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80105e0:	697b      	ldr	r3, [r7, #20]
	}
 80105e2:	4618      	mov	r0, r3
 80105e4:	3718      	adds	r7, #24
 80105e6:	46bd      	mov	sp, r7
 80105e8:	bd80      	pop	{r7, pc}
 80105ea:	bf00      	nop
 80105ec:	24004f44 	.word	0x24004f44
 80105f0:	24005420 	.word	0x24005420
 80105f4:	24004f48 	.word	0x24004f48

080105f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80105f8:	b580      	push	{r7, lr}
 80105fa:	b084      	sub	sp, #16
 80105fc:	af00      	add	r7, sp, #0
 80105fe:	6078      	str	r0, [r7, #4]
 8010600:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010602:	4b21      	ldr	r3, [pc, #132]	; (8010688 <prvAddCurrentTaskToDelayedList+0x90>)
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010608:	4b20      	ldr	r3, [pc, #128]	; (801068c <prvAddCurrentTaskToDelayedList+0x94>)
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	3304      	adds	r3, #4
 801060e:	4618      	mov	r0, r3
 8010610:	f7fe f9ba 	bl	800e988 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	f1b3 3fff 	cmp.w	r3, #4294967295
 801061a:	d10a      	bne.n	8010632 <prvAddCurrentTaskToDelayedList+0x3a>
 801061c:	683b      	ldr	r3, [r7, #0]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d007      	beq.n	8010632 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010622:	4b1a      	ldr	r3, [pc, #104]	; (801068c <prvAddCurrentTaskToDelayedList+0x94>)
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	3304      	adds	r3, #4
 8010628:	4619      	mov	r1, r3
 801062a:	4819      	ldr	r0, [pc, #100]	; (8010690 <prvAddCurrentTaskToDelayedList+0x98>)
 801062c:	f7fe f94f 	bl	800e8ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010630:	e026      	b.n	8010680 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010632:	68fa      	ldr	r2, [r7, #12]
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	4413      	add	r3, r2
 8010638:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801063a:	4b14      	ldr	r3, [pc, #80]	; (801068c <prvAddCurrentTaskToDelayedList+0x94>)
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	68ba      	ldr	r2, [r7, #8]
 8010640:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010642:	68ba      	ldr	r2, [r7, #8]
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	429a      	cmp	r2, r3
 8010648:	d209      	bcs.n	801065e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801064a:	4b12      	ldr	r3, [pc, #72]	; (8010694 <prvAddCurrentTaskToDelayedList+0x9c>)
 801064c:	681a      	ldr	r2, [r3, #0]
 801064e:	4b0f      	ldr	r3, [pc, #60]	; (801068c <prvAddCurrentTaskToDelayedList+0x94>)
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	3304      	adds	r3, #4
 8010654:	4619      	mov	r1, r3
 8010656:	4610      	mov	r0, r2
 8010658:	f7fe f95d 	bl	800e916 <vListInsert>
}
 801065c:	e010      	b.n	8010680 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801065e:	4b0e      	ldr	r3, [pc, #56]	; (8010698 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010660:	681a      	ldr	r2, [r3, #0]
 8010662:	4b0a      	ldr	r3, [pc, #40]	; (801068c <prvAddCurrentTaskToDelayedList+0x94>)
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	3304      	adds	r3, #4
 8010668:	4619      	mov	r1, r3
 801066a:	4610      	mov	r0, r2
 801066c:	f7fe f953 	bl	800e916 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010670:	4b0a      	ldr	r3, [pc, #40]	; (801069c <prvAddCurrentTaskToDelayedList+0xa4>)
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	68ba      	ldr	r2, [r7, #8]
 8010676:	429a      	cmp	r2, r3
 8010678:	d202      	bcs.n	8010680 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801067a:	4a08      	ldr	r2, [pc, #32]	; (801069c <prvAddCurrentTaskToDelayedList+0xa4>)
 801067c:	68bb      	ldr	r3, [r7, #8]
 801067e:	6013      	str	r3, [r2, #0]
}
 8010680:	bf00      	nop
 8010682:	3710      	adds	r7, #16
 8010684:	46bd      	mov	sp, r7
 8010686:	bd80      	pop	{r7, pc}
 8010688:	2400541c 	.word	0x2400541c
 801068c:	24004f44 	.word	0x24004f44
 8010690:	24005404 	.word	0x24005404
 8010694:	240053d4 	.word	0x240053d4
 8010698:	240053d0 	.word	0x240053d0
 801069c:	24005438 	.word	0x24005438

080106a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80106a0:	b580      	push	{r7, lr}
 80106a2:	b08a      	sub	sp, #40	; 0x28
 80106a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80106a6:	2300      	movs	r3, #0
 80106a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80106aa:	f000 fb07 	bl	8010cbc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80106ae:	4b1c      	ldr	r3, [pc, #112]	; (8010720 <xTimerCreateTimerTask+0x80>)
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d021      	beq.n	80106fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80106b6:	2300      	movs	r3, #0
 80106b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80106ba:	2300      	movs	r3, #0
 80106bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80106be:	1d3a      	adds	r2, r7, #4
 80106c0:	f107 0108 	add.w	r1, r7, #8
 80106c4:	f107 030c 	add.w	r3, r7, #12
 80106c8:	4618      	mov	r0, r3
 80106ca:	f7fd fecf 	bl	800e46c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80106ce:	6879      	ldr	r1, [r7, #4]
 80106d0:	68bb      	ldr	r3, [r7, #8]
 80106d2:	68fa      	ldr	r2, [r7, #12]
 80106d4:	9202      	str	r2, [sp, #8]
 80106d6:	9301      	str	r3, [sp, #4]
 80106d8:	2302      	movs	r3, #2
 80106da:	9300      	str	r3, [sp, #0]
 80106dc:	2300      	movs	r3, #0
 80106de:	460a      	mov	r2, r1
 80106e0:	4910      	ldr	r1, [pc, #64]	; (8010724 <xTimerCreateTimerTask+0x84>)
 80106e2:	4811      	ldr	r0, [pc, #68]	; (8010728 <xTimerCreateTimerTask+0x88>)
 80106e4:	f7ff f8b4 	bl	800f850 <xTaskCreateStatic>
 80106e8:	4603      	mov	r3, r0
 80106ea:	4a10      	ldr	r2, [pc, #64]	; (801072c <xTimerCreateTimerTask+0x8c>)
 80106ec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80106ee:	4b0f      	ldr	r3, [pc, #60]	; (801072c <xTimerCreateTimerTask+0x8c>)
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d001      	beq.n	80106fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80106f6:	2301      	movs	r3, #1
 80106f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80106fa:	697b      	ldr	r3, [r7, #20]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d10a      	bne.n	8010716 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8010700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010704:	f383 8811 	msr	BASEPRI, r3
 8010708:	f3bf 8f6f 	isb	sy
 801070c:	f3bf 8f4f 	dsb	sy
 8010710:	613b      	str	r3, [r7, #16]
}
 8010712:	bf00      	nop
 8010714:	e7fe      	b.n	8010714 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8010716:	697b      	ldr	r3, [r7, #20]
}
 8010718:	4618      	mov	r0, r3
 801071a:	3718      	adds	r7, #24
 801071c:	46bd      	mov	sp, r7
 801071e:	bd80      	pop	{r7, pc}
 8010720:	24005474 	.word	0x24005474
 8010724:	0801544c 	.word	0x0801544c
 8010728:	08010865 	.word	0x08010865
 801072c:	24005478 	.word	0x24005478

08010730 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010730:	b580      	push	{r7, lr}
 8010732:	b08a      	sub	sp, #40	; 0x28
 8010734:	af00      	add	r7, sp, #0
 8010736:	60f8      	str	r0, [r7, #12]
 8010738:	60b9      	str	r1, [r7, #8]
 801073a:	607a      	str	r2, [r7, #4]
 801073c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801073e:	2300      	movs	r3, #0
 8010740:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	2b00      	cmp	r3, #0
 8010746:	d10a      	bne.n	801075e <xTimerGenericCommand+0x2e>
	__asm volatile
 8010748:	f04f 0350 	mov.w	r3, #80	; 0x50
 801074c:	f383 8811 	msr	BASEPRI, r3
 8010750:	f3bf 8f6f 	isb	sy
 8010754:	f3bf 8f4f 	dsb	sy
 8010758:	623b      	str	r3, [r7, #32]
}
 801075a:	bf00      	nop
 801075c:	e7fe      	b.n	801075c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801075e:	4b1a      	ldr	r3, [pc, #104]	; (80107c8 <xTimerGenericCommand+0x98>)
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	2b00      	cmp	r3, #0
 8010764:	d02a      	beq.n	80107bc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010766:	68bb      	ldr	r3, [r7, #8]
 8010768:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010772:	68bb      	ldr	r3, [r7, #8]
 8010774:	2b05      	cmp	r3, #5
 8010776:	dc18      	bgt.n	80107aa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010778:	f7ff feb2 	bl	80104e0 <xTaskGetSchedulerState>
 801077c:	4603      	mov	r3, r0
 801077e:	2b02      	cmp	r3, #2
 8010780:	d109      	bne.n	8010796 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010782:	4b11      	ldr	r3, [pc, #68]	; (80107c8 <xTimerGenericCommand+0x98>)
 8010784:	6818      	ldr	r0, [r3, #0]
 8010786:	f107 0110 	add.w	r1, r7, #16
 801078a:	2300      	movs	r3, #0
 801078c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801078e:	f7fe fc77 	bl	800f080 <xQueueGenericSend>
 8010792:	6278      	str	r0, [r7, #36]	; 0x24
 8010794:	e012      	b.n	80107bc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010796:	4b0c      	ldr	r3, [pc, #48]	; (80107c8 <xTimerGenericCommand+0x98>)
 8010798:	6818      	ldr	r0, [r3, #0]
 801079a:	f107 0110 	add.w	r1, r7, #16
 801079e:	2300      	movs	r3, #0
 80107a0:	2200      	movs	r2, #0
 80107a2:	f7fe fc6d 	bl	800f080 <xQueueGenericSend>
 80107a6:	6278      	str	r0, [r7, #36]	; 0x24
 80107a8:	e008      	b.n	80107bc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80107aa:	4b07      	ldr	r3, [pc, #28]	; (80107c8 <xTimerGenericCommand+0x98>)
 80107ac:	6818      	ldr	r0, [r3, #0]
 80107ae:	f107 0110 	add.w	r1, r7, #16
 80107b2:	2300      	movs	r3, #0
 80107b4:	683a      	ldr	r2, [r7, #0]
 80107b6:	f7fe fd61 	bl	800f27c <xQueueGenericSendFromISR>
 80107ba:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80107bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80107be:	4618      	mov	r0, r3
 80107c0:	3728      	adds	r7, #40	; 0x28
 80107c2:	46bd      	mov	sp, r7
 80107c4:	bd80      	pop	{r7, pc}
 80107c6:	bf00      	nop
 80107c8:	24005474 	.word	0x24005474

080107cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80107cc:	b580      	push	{r7, lr}
 80107ce:	b088      	sub	sp, #32
 80107d0:	af02      	add	r7, sp, #8
 80107d2:	6078      	str	r0, [r7, #4]
 80107d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80107d6:	4b22      	ldr	r3, [pc, #136]	; (8010860 <prvProcessExpiredTimer+0x94>)
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	68db      	ldr	r3, [r3, #12]
 80107dc:	68db      	ldr	r3, [r3, #12]
 80107de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80107e0:	697b      	ldr	r3, [r7, #20]
 80107e2:	3304      	adds	r3, #4
 80107e4:	4618      	mov	r0, r3
 80107e6:	f7fe f8cf 	bl	800e988 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80107ea:	697b      	ldr	r3, [r7, #20]
 80107ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80107f0:	f003 0304 	and.w	r3, r3, #4
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d022      	beq.n	801083e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80107f8:	697b      	ldr	r3, [r7, #20]
 80107fa:	699a      	ldr	r2, [r3, #24]
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	18d1      	adds	r1, r2, r3
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	683a      	ldr	r2, [r7, #0]
 8010804:	6978      	ldr	r0, [r7, #20]
 8010806:	f000 f8d1 	bl	80109ac <prvInsertTimerInActiveList>
 801080a:	4603      	mov	r3, r0
 801080c:	2b00      	cmp	r3, #0
 801080e:	d01f      	beq.n	8010850 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010810:	2300      	movs	r3, #0
 8010812:	9300      	str	r3, [sp, #0]
 8010814:	2300      	movs	r3, #0
 8010816:	687a      	ldr	r2, [r7, #4]
 8010818:	2100      	movs	r1, #0
 801081a:	6978      	ldr	r0, [r7, #20]
 801081c:	f7ff ff88 	bl	8010730 <xTimerGenericCommand>
 8010820:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010822:	693b      	ldr	r3, [r7, #16]
 8010824:	2b00      	cmp	r3, #0
 8010826:	d113      	bne.n	8010850 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8010828:	f04f 0350 	mov.w	r3, #80	; 0x50
 801082c:	f383 8811 	msr	BASEPRI, r3
 8010830:	f3bf 8f6f 	isb	sy
 8010834:	f3bf 8f4f 	dsb	sy
 8010838:	60fb      	str	r3, [r7, #12]
}
 801083a:	bf00      	nop
 801083c:	e7fe      	b.n	801083c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801083e:	697b      	ldr	r3, [r7, #20]
 8010840:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010844:	f023 0301 	bic.w	r3, r3, #1
 8010848:	b2da      	uxtb	r2, r3
 801084a:	697b      	ldr	r3, [r7, #20]
 801084c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010850:	697b      	ldr	r3, [r7, #20]
 8010852:	6a1b      	ldr	r3, [r3, #32]
 8010854:	6978      	ldr	r0, [r7, #20]
 8010856:	4798      	blx	r3
}
 8010858:	bf00      	nop
 801085a:	3718      	adds	r7, #24
 801085c:	46bd      	mov	sp, r7
 801085e:	bd80      	pop	{r7, pc}
 8010860:	2400546c 	.word	0x2400546c

08010864 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010864:	b580      	push	{r7, lr}
 8010866:	b084      	sub	sp, #16
 8010868:	af00      	add	r7, sp, #0
 801086a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801086c:	f107 0308 	add.w	r3, r7, #8
 8010870:	4618      	mov	r0, r3
 8010872:	f000 f857 	bl	8010924 <prvGetNextExpireTime>
 8010876:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010878:	68bb      	ldr	r3, [r7, #8]
 801087a:	4619      	mov	r1, r3
 801087c:	68f8      	ldr	r0, [r7, #12]
 801087e:	f000 f803 	bl	8010888 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010882:	f000 f8d5 	bl	8010a30 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010886:	e7f1      	b.n	801086c <prvTimerTask+0x8>

08010888 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010888:	b580      	push	{r7, lr}
 801088a:	b084      	sub	sp, #16
 801088c:	af00      	add	r7, sp, #0
 801088e:	6078      	str	r0, [r7, #4]
 8010890:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010892:	f7ff fa39 	bl	800fd08 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010896:	f107 0308 	add.w	r3, r7, #8
 801089a:	4618      	mov	r0, r3
 801089c:	f000 f866 	bl	801096c <prvSampleTimeNow>
 80108a0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80108a2:	68bb      	ldr	r3, [r7, #8]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d130      	bne.n	801090a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80108a8:	683b      	ldr	r3, [r7, #0]
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d10a      	bne.n	80108c4 <prvProcessTimerOrBlockTask+0x3c>
 80108ae:	687a      	ldr	r2, [r7, #4]
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	429a      	cmp	r2, r3
 80108b4:	d806      	bhi.n	80108c4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80108b6:	f7ff fa35 	bl	800fd24 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80108ba:	68f9      	ldr	r1, [r7, #12]
 80108bc:	6878      	ldr	r0, [r7, #4]
 80108be:	f7ff ff85 	bl	80107cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80108c2:	e024      	b.n	801090e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80108c4:	683b      	ldr	r3, [r7, #0]
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d008      	beq.n	80108dc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80108ca:	4b13      	ldr	r3, [pc, #76]	; (8010918 <prvProcessTimerOrBlockTask+0x90>)
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d101      	bne.n	80108d8 <prvProcessTimerOrBlockTask+0x50>
 80108d4:	2301      	movs	r3, #1
 80108d6:	e000      	b.n	80108da <prvProcessTimerOrBlockTask+0x52>
 80108d8:	2300      	movs	r3, #0
 80108da:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80108dc:	4b0f      	ldr	r3, [pc, #60]	; (801091c <prvProcessTimerOrBlockTask+0x94>)
 80108de:	6818      	ldr	r0, [r3, #0]
 80108e0:	687a      	ldr	r2, [r7, #4]
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	1ad3      	subs	r3, r2, r3
 80108e6:	683a      	ldr	r2, [r7, #0]
 80108e8:	4619      	mov	r1, r3
 80108ea:	f7fe ff7d 	bl	800f7e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80108ee:	f7ff fa19 	bl	800fd24 <xTaskResumeAll>
 80108f2:	4603      	mov	r3, r0
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d10a      	bne.n	801090e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80108f8:	4b09      	ldr	r3, [pc, #36]	; (8010920 <prvProcessTimerOrBlockTask+0x98>)
 80108fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80108fe:	601a      	str	r2, [r3, #0]
 8010900:	f3bf 8f4f 	dsb	sy
 8010904:	f3bf 8f6f 	isb	sy
}
 8010908:	e001      	b.n	801090e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801090a:	f7ff fa0b 	bl	800fd24 <xTaskResumeAll>
}
 801090e:	bf00      	nop
 8010910:	3710      	adds	r7, #16
 8010912:	46bd      	mov	sp, r7
 8010914:	bd80      	pop	{r7, pc}
 8010916:	bf00      	nop
 8010918:	24005470 	.word	0x24005470
 801091c:	24005474 	.word	0x24005474
 8010920:	e000ed04 	.word	0xe000ed04

08010924 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010924:	b480      	push	{r7}
 8010926:	b085      	sub	sp, #20
 8010928:	af00      	add	r7, sp, #0
 801092a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801092c:	4b0e      	ldr	r3, [pc, #56]	; (8010968 <prvGetNextExpireTime+0x44>)
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	2b00      	cmp	r3, #0
 8010934:	d101      	bne.n	801093a <prvGetNextExpireTime+0x16>
 8010936:	2201      	movs	r2, #1
 8010938:	e000      	b.n	801093c <prvGetNextExpireTime+0x18>
 801093a:	2200      	movs	r2, #0
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	2b00      	cmp	r3, #0
 8010946:	d105      	bne.n	8010954 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010948:	4b07      	ldr	r3, [pc, #28]	; (8010968 <prvGetNextExpireTime+0x44>)
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	68db      	ldr	r3, [r3, #12]
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	60fb      	str	r3, [r7, #12]
 8010952:	e001      	b.n	8010958 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010954:	2300      	movs	r3, #0
 8010956:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010958:	68fb      	ldr	r3, [r7, #12]
}
 801095a:	4618      	mov	r0, r3
 801095c:	3714      	adds	r7, #20
 801095e:	46bd      	mov	sp, r7
 8010960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010964:	4770      	bx	lr
 8010966:	bf00      	nop
 8010968:	2400546c 	.word	0x2400546c

0801096c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801096c:	b580      	push	{r7, lr}
 801096e:	b084      	sub	sp, #16
 8010970:	af00      	add	r7, sp, #0
 8010972:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010974:	f7ff fa74 	bl	800fe60 <xTaskGetTickCount>
 8010978:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801097a:	4b0b      	ldr	r3, [pc, #44]	; (80109a8 <prvSampleTimeNow+0x3c>)
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	68fa      	ldr	r2, [r7, #12]
 8010980:	429a      	cmp	r2, r3
 8010982:	d205      	bcs.n	8010990 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010984:	f000 f936 	bl	8010bf4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	2201      	movs	r2, #1
 801098c:	601a      	str	r2, [r3, #0]
 801098e:	e002      	b.n	8010996 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	2200      	movs	r2, #0
 8010994:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010996:	4a04      	ldr	r2, [pc, #16]	; (80109a8 <prvSampleTimeNow+0x3c>)
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801099c:	68fb      	ldr	r3, [r7, #12]
}
 801099e:	4618      	mov	r0, r3
 80109a0:	3710      	adds	r7, #16
 80109a2:	46bd      	mov	sp, r7
 80109a4:	bd80      	pop	{r7, pc}
 80109a6:	bf00      	nop
 80109a8:	2400547c 	.word	0x2400547c

080109ac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80109ac:	b580      	push	{r7, lr}
 80109ae:	b086      	sub	sp, #24
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	60f8      	str	r0, [r7, #12]
 80109b4:	60b9      	str	r1, [r7, #8]
 80109b6:	607a      	str	r2, [r7, #4]
 80109b8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80109ba:	2300      	movs	r3, #0
 80109bc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	68ba      	ldr	r2, [r7, #8]
 80109c2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	68fa      	ldr	r2, [r7, #12]
 80109c8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80109ca:	68ba      	ldr	r2, [r7, #8]
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	429a      	cmp	r2, r3
 80109d0:	d812      	bhi.n	80109f8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80109d2:	687a      	ldr	r2, [r7, #4]
 80109d4:	683b      	ldr	r3, [r7, #0]
 80109d6:	1ad2      	subs	r2, r2, r3
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	699b      	ldr	r3, [r3, #24]
 80109dc:	429a      	cmp	r2, r3
 80109de:	d302      	bcc.n	80109e6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80109e0:	2301      	movs	r3, #1
 80109e2:	617b      	str	r3, [r7, #20]
 80109e4:	e01b      	b.n	8010a1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80109e6:	4b10      	ldr	r3, [pc, #64]	; (8010a28 <prvInsertTimerInActiveList+0x7c>)
 80109e8:	681a      	ldr	r2, [r3, #0]
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	3304      	adds	r3, #4
 80109ee:	4619      	mov	r1, r3
 80109f0:	4610      	mov	r0, r2
 80109f2:	f7fd ff90 	bl	800e916 <vListInsert>
 80109f6:	e012      	b.n	8010a1e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80109f8:	687a      	ldr	r2, [r7, #4]
 80109fa:	683b      	ldr	r3, [r7, #0]
 80109fc:	429a      	cmp	r2, r3
 80109fe:	d206      	bcs.n	8010a0e <prvInsertTimerInActiveList+0x62>
 8010a00:	68ba      	ldr	r2, [r7, #8]
 8010a02:	683b      	ldr	r3, [r7, #0]
 8010a04:	429a      	cmp	r2, r3
 8010a06:	d302      	bcc.n	8010a0e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010a08:	2301      	movs	r3, #1
 8010a0a:	617b      	str	r3, [r7, #20]
 8010a0c:	e007      	b.n	8010a1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010a0e:	4b07      	ldr	r3, [pc, #28]	; (8010a2c <prvInsertTimerInActiveList+0x80>)
 8010a10:	681a      	ldr	r2, [r3, #0]
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	3304      	adds	r3, #4
 8010a16:	4619      	mov	r1, r3
 8010a18:	4610      	mov	r0, r2
 8010a1a:	f7fd ff7c 	bl	800e916 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010a1e:	697b      	ldr	r3, [r7, #20]
}
 8010a20:	4618      	mov	r0, r3
 8010a22:	3718      	adds	r7, #24
 8010a24:	46bd      	mov	sp, r7
 8010a26:	bd80      	pop	{r7, pc}
 8010a28:	24005470 	.word	0x24005470
 8010a2c:	2400546c 	.word	0x2400546c

08010a30 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010a30:	b580      	push	{r7, lr}
 8010a32:	b08e      	sub	sp, #56	; 0x38
 8010a34:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010a36:	e0ca      	b.n	8010bce <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	da18      	bge.n	8010a70 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010a3e:	1d3b      	adds	r3, r7, #4
 8010a40:	3304      	adds	r3, #4
 8010a42:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d10a      	bne.n	8010a60 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8010a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a4e:	f383 8811 	msr	BASEPRI, r3
 8010a52:	f3bf 8f6f 	isb	sy
 8010a56:	f3bf 8f4f 	dsb	sy
 8010a5a:	61fb      	str	r3, [r7, #28]
}
 8010a5c:	bf00      	nop
 8010a5e:	e7fe      	b.n	8010a5e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a66:	6850      	ldr	r0, [r2, #4]
 8010a68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a6a:	6892      	ldr	r2, [r2, #8]
 8010a6c:	4611      	mov	r1, r2
 8010a6e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	f2c0 80ab 	blt.w	8010bce <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a7e:	695b      	ldr	r3, [r3, #20]
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d004      	beq.n	8010a8e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a86:	3304      	adds	r3, #4
 8010a88:	4618      	mov	r0, r3
 8010a8a:	f7fd ff7d 	bl	800e988 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010a8e:	463b      	mov	r3, r7
 8010a90:	4618      	mov	r0, r3
 8010a92:	f7ff ff6b 	bl	801096c <prvSampleTimeNow>
 8010a96:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	2b09      	cmp	r3, #9
 8010a9c:	f200 8096 	bhi.w	8010bcc <prvProcessReceivedCommands+0x19c>
 8010aa0:	a201      	add	r2, pc, #4	; (adr r2, 8010aa8 <prvProcessReceivedCommands+0x78>)
 8010aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010aa6:	bf00      	nop
 8010aa8:	08010ad1 	.word	0x08010ad1
 8010aac:	08010ad1 	.word	0x08010ad1
 8010ab0:	08010ad1 	.word	0x08010ad1
 8010ab4:	08010b45 	.word	0x08010b45
 8010ab8:	08010b59 	.word	0x08010b59
 8010abc:	08010ba3 	.word	0x08010ba3
 8010ac0:	08010ad1 	.word	0x08010ad1
 8010ac4:	08010ad1 	.word	0x08010ad1
 8010ac8:	08010b45 	.word	0x08010b45
 8010acc:	08010b59 	.word	0x08010b59
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ad2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010ad6:	f043 0301 	orr.w	r3, r3, #1
 8010ada:	b2da      	uxtb	r2, r3
 8010adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ade:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010ae2:	68ba      	ldr	r2, [r7, #8]
 8010ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ae6:	699b      	ldr	r3, [r3, #24]
 8010ae8:	18d1      	adds	r1, r2, r3
 8010aea:	68bb      	ldr	r3, [r7, #8]
 8010aec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010aee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010af0:	f7ff ff5c 	bl	80109ac <prvInsertTimerInActiveList>
 8010af4:	4603      	mov	r3, r0
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d069      	beq.n	8010bce <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010afc:	6a1b      	ldr	r3, [r3, #32]
 8010afe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010b00:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010b08:	f003 0304 	and.w	r3, r3, #4
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d05e      	beq.n	8010bce <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010b10:	68ba      	ldr	r2, [r7, #8]
 8010b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b14:	699b      	ldr	r3, [r3, #24]
 8010b16:	441a      	add	r2, r3
 8010b18:	2300      	movs	r3, #0
 8010b1a:	9300      	str	r3, [sp, #0]
 8010b1c:	2300      	movs	r3, #0
 8010b1e:	2100      	movs	r1, #0
 8010b20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010b22:	f7ff fe05 	bl	8010730 <xTimerGenericCommand>
 8010b26:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010b28:	6a3b      	ldr	r3, [r7, #32]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d14f      	bne.n	8010bce <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8010b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b32:	f383 8811 	msr	BASEPRI, r3
 8010b36:	f3bf 8f6f 	isb	sy
 8010b3a:	f3bf 8f4f 	dsb	sy
 8010b3e:	61bb      	str	r3, [r7, #24]
}
 8010b40:	bf00      	nop
 8010b42:	e7fe      	b.n	8010b42 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010b4a:	f023 0301 	bic.w	r3, r3, #1
 8010b4e:	b2da      	uxtb	r2, r3
 8010b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010b56:	e03a      	b.n	8010bce <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010b5e:	f043 0301 	orr.w	r3, r3, #1
 8010b62:	b2da      	uxtb	r2, r3
 8010b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010b6a:	68ba      	ldr	r2, [r7, #8]
 8010b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b6e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b72:	699b      	ldr	r3, [r3, #24]
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d10a      	bne.n	8010b8e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8010b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b7c:	f383 8811 	msr	BASEPRI, r3
 8010b80:	f3bf 8f6f 	isb	sy
 8010b84:	f3bf 8f4f 	dsb	sy
 8010b88:	617b      	str	r3, [r7, #20]
}
 8010b8a:	bf00      	nop
 8010b8c:	e7fe      	b.n	8010b8c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b90:	699a      	ldr	r2, [r3, #24]
 8010b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b94:	18d1      	adds	r1, r2, r3
 8010b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010b9c:	f7ff ff06 	bl	80109ac <prvInsertTimerInActiveList>
					break;
 8010ba0:	e015      	b.n	8010bce <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ba4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010ba8:	f003 0302 	and.w	r3, r3, #2
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d103      	bne.n	8010bb8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8010bb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010bb2:	f7fd fd41 	bl	800e638 <vPortFree>
 8010bb6:	e00a      	b.n	8010bce <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010bbe:	f023 0301 	bic.w	r3, r3, #1
 8010bc2:	b2da      	uxtb	r2, r3
 8010bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010bca:	e000      	b.n	8010bce <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8010bcc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010bce:	4b08      	ldr	r3, [pc, #32]	; (8010bf0 <prvProcessReceivedCommands+0x1c0>)
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	1d39      	adds	r1, r7, #4
 8010bd4:	2200      	movs	r2, #0
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	f7fe fbec 	bl	800f3b4 <xQueueReceive>
 8010bdc:	4603      	mov	r3, r0
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	f47f af2a 	bne.w	8010a38 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8010be4:	bf00      	nop
 8010be6:	bf00      	nop
 8010be8:	3730      	adds	r7, #48	; 0x30
 8010bea:	46bd      	mov	sp, r7
 8010bec:	bd80      	pop	{r7, pc}
 8010bee:	bf00      	nop
 8010bf0:	24005474 	.word	0x24005474

08010bf4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010bf4:	b580      	push	{r7, lr}
 8010bf6:	b088      	sub	sp, #32
 8010bf8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010bfa:	e048      	b.n	8010c8e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010bfc:	4b2d      	ldr	r3, [pc, #180]	; (8010cb4 <prvSwitchTimerLists+0xc0>)
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	68db      	ldr	r3, [r3, #12]
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010c06:	4b2b      	ldr	r3, [pc, #172]	; (8010cb4 <prvSwitchTimerLists+0xc0>)
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	68db      	ldr	r3, [r3, #12]
 8010c0c:	68db      	ldr	r3, [r3, #12]
 8010c0e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	3304      	adds	r3, #4
 8010c14:	4618      	mov	r0, r3
 8010c16:	f7fd feb7 	bl	800e988 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	6a1b      	ldr	r3, [r3, #32]
 8010c1e:	68f8      	ldr	r0, [r7, #12]
 8010c20:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010c28:	f003 0304 	and.w	r3, r3, #4
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d02e      	beq.n	8010c8e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	699b      	ldr	r3, [r3, #24]
 8010c34:	693a      	ldr	r2, [r7, #16]
 8010c36:	4413      	add	r3, r2
 8010c38:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010c3a:	68ba      	ldr	r2, [r7, #8]
 8010c3c:	693b      	ldr	r3, [r7, #16]
 8010c3e:	429a      	cmp	r2, r3
 8010c40:	d90e      	bls.n	8010c60 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	68ba      	ldr	r2, [r7, #8]
 8010c46:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	68fa      	ldr	r2, [r7, #12]
 8010c4c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010c4e:	4b19      	ldr	r3, [pc, #100]	; (8010cb4 <prvSwitchTimerLists+0xc0>)
 8010c50:	681a      	ldr	r2, [r3, #0]
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	3304      	adds	r3, #4
 8010c56:	4619      	mov	r1, r3
 8010c58:	4610      	mov	r0, r2
 8010c5a:	f7fd fe5c 	bl	800e916 <vListInsert>
 8010c5e:	e016      	b.n	8010c8e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010c60:	2300      	movs	r3, #0
 8010c62:	9300      	str	r3, [sp, #0]
 8010c64:	2300      	movs	r3, #0
 8010c66:	693a      	ldr	r2, [r7, #16]
 8010c68:	2100      	movs	r1, #0
 8010c6a:	68f8      	ldr	r0, [r7, #12]
 8010c6c:	f7ff fd60 	bl	8010730 <xTimerGenericCommand>
 8010c70:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d10a      	bne.n	8010c8e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8010c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c7c:	f383 8811 	msr	BASEPRI, r3
 8010c80:	f3bf 8f6f 	isb	sy
 8010c84:	f3bf 8f4f 	dsb	sy
 8010c88:	603b      	str	r3, [r7, #0]
}
 8010c8a:	bf00      	nop
 8010c8c:	e7fe      	b.n	8010c8c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010c8e:	4b09      	ldr	r3, [pc, #36]	; (8010cb4 <prvSwitchTimerLists+0xc0>)
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d1b1      	bne.n	8010bfc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010c98:	4b06      	ldr	r3, [pc, #24]	; (8010cb4 <prvSwitchTimerLists+0xc0>)
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010c9e:	4b06      	ldr	r3, [pc, #24]	; (8010cb8 <prvSwitchTimerLists+0xc4>)
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	4a04      	ldr	r2, [pc, #16]	; (8010cb4 <prvSwitchTimerLists+0xc0>)
 8010ca4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010ca6:	4a04      	ldr	r2, [pc, #16]	; (8010cb8 <prvSwitchTimerLists+0xc4>)
 8010ca8:	697b      	ldr	r3, [r7, #20]
 8010caa:	6013      	str	r3, [r2, #0]
}
 8010cac:	bf00      	nop
 8010cae:	3718      	adds	r7, #24
 8010cb0:	46bd      	mov	sp, r7
 8010cb2:	bd80      	pop	{r7, pc}
 8010cb4:	2400546c 	.word	0x2400546c
 8010cb8:	24005470 	.word	0x24005470

08010cbc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010cbc:	b580      	push	{r7, lr}
 8010cbe:	b082      	sub	sp, #8
 8010cc0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010cc2:	f7fd ffb7 	bl	800ec34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010cc6:	4b15      	ldr	r3, [pc, #84]	; (8010d1c <prvCheckForValidListAndQueue+0x60>)
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d120      	bne.n	8010d10 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010cce:	4814      	ldr	r0, [pc, #80]	; (8010d20 <prvCheckForValidListAndQueue+0x64>)
 8010cd0:	f7fd fdd0 	bl	800e874 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010cd4:	4813      	ldr	r0, [pc, #76]	; (8010d24 <prvCheckForValidListAndQueue+0x68>)
 8010cd6:	f7fd fdcd 	bl	800e874 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010cda:	4b13      	ldr	r3, [pc, #76]	; (8010d28 <prvCheckForValidListAndQueue+0x6c>)
 8010cdc:	4a10      	ldr	r2, [pc, #64]	; (8010d20 <prvCheckForValidListAndQueue+0x64>)
 8010cde:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010ce0:	4b12      	ldr	r3, [pc, #72]	; (8010d2c <prvCheckForValidListAndQueue+0x70>)
 8010ce2:	4a10      	ldr	r2, [pc, #64]	; (8010d24 <prvCheckForValidListAndQueue+0x68>)
 8010ce4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010ce6:	2300      	movs	r3, #0
 8010ce8:	9300      	str	r3, [sp, #0]
 8010cea:	4b11      	ldr	r3, [pc, #68]	; (8010d30 <prvCheckForValidListAndQueue+0x74>)
 8010cec:	4a11      	ldr	r2, [pc, #68]	; (8010d34 <prvCheckForValidListAndQueue+0x78>)
 8010cee:	2110      	movs	r1, #16
 8010cf0:	200a      	movs	r0, #10
 8010cf2:	f7fe f929 	bl	800ef48 <xQueueGenericCreateStatic>
 8010cf6:	4603      	mov	r3, r0
 8010cf8:	4a08      	ldr	r2, [pc, #32]	; (8010d1c <prvCheckForValidListAndQueue+0x60>)
 8010cfa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010cfc:	4b07      	ldr	r3, [pc, #28]	; (8010d1c <prvCheckForValidListAndQueue+0x60>)
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d005      	beq.n	8010d10 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010d04:	4b05      	ldr	r3, [pc, #20]	; (8010d1c <prvCheckForValidListAndQueue+0x60>)
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	490b      	ldr	r1, [pc, #44]	; (8010d38 <prvCheckForValidListAndQueue+0x7c>)
 8010d0a:	4618      	mov	r0, r3
 8010d0c:	f7fe fd42 	bl	800f794 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010d10:	f7fd ffc0 	bl	800ec94 <vPortExitCritical>
}
 8010d14:	bf00      	nop
 8010d16:	46bd      	mov	sp, r7
 8010d18:	bd80      	pop	{r7, pc}
 8010d1a:	bf00      	nop
 8010d1c:	24005474 	.word	0x24005474
 8010d20:	24005444 	.word	0x24005444
 8010d24:	24005458 	.word	0x24005458
 8010d28:	2400546c 	.word	0x2400546c
 8010d2c:	24005470 	.word	0x24005470
 8010d30:	24005520 	.word	0x24005520
 8010d34:	24005480 	.word	0x24005480
 8010d38:	08015454 	.word	0x08015454

08010d3c <_ZdlPvj>:
 8010d3c:	f000 b800 	b.w	8010d40 <_ZdlPv>

08010d40 <_ZdlPv>:
 8010d40:	f000 b808 	b.w	8010d54 <free>

08010d44 <malloc>:
 8010d44:	4b02      	ldr	r3, [pc, #8]	; (8010d50 <malloc+0xc>)
 8010d46:	4601      	mov	r1, r0
 8010d48:	6818      	ldr	r0, [r3, #0]
 8010d4a:	f000 b82b 	b.w	8010da4 <_malloc_r>
 8010d4e:	bf00      	nop
 8010d50:	2400006c 	.word	0x2400006c

08010d54 <free>:
 8010d54:	4b02      	ldr	r3, [pc, #8]	; (8010d60 <free+0xc>)
 8010d56:	4601      	mov	r1, r0
 8010d58:	6818      	ldr	r0, [r3, #0]
 8010d5a:	f001 bf25 	b.w	8012ba8 <_free_r>
 8010d5e:	bf00      	nop
 8010d60:	2400006c 	.word	0x2400006c

08010d64 <sbrk_aligned>:
 8010d64:	b570      	push	{r4, r5, r6, lr}
 8010d66:	4e0e      	ldr	r6, [pc, #56]	; (8010da0 <sbrk_aligned+0x3c>)
 8010d68:	460c      	mov	r4, r1
 8010d6a:	6831      	ldr	r1, [r6, #0]
 8010d6c:	4605      	mov	r5, r0
 8010d6e:	b911      	cbnz	r1, 8010d76 <sbrk_aligned+0x12>
 8010d70:	f001 f8c2 	bl	8011ef8 <_sbrk_r>
 8010d74:	6030      	str	r0, [r6, #0]
 8010d76:	4621      	mov	r1, r4
 8010d78:	4628      	mov	r0, r5
 8010d7a:	f001 f8bd 	bl	8011ef8 <_sbrk_r>
 8010d7e:	1c43      	adds	r3, r0, #1
 8010d80:	d00a      	beq.n	8010d98 <sbrk_aligned+0x34>
 8010d82:	1cc4      	adds	r4, r0, #3
 8010d84:	f024 0403 	bic.w	r4, r4, #3
 8010d88:	42a0      	cmp	r0, r4
 8010d8a:	d007      	beq.n	8010d9c <sbrk_aligned+0x38>
 8010d8c:	1a21      	subs	r1, r4, r0
 8010d8e:	4628      	mov	r0, r5
 8010d90:	f001 f8b2 	bl	8011ef8 <_sbrk_r>
 8010d94:	3001      	adds	r0, #1
 8010d96:	d101      	bne.n	8010d9c <sbrk_aligned+0x38>
 8010d98:	f04f 34ff 	mov.w	r4, #4294967295
 8010d9c:	4620      	mov	r0, r4
 8010d9e:	bd70      	pop	{r4, r5, r6, pc}
 8010da0:	24005574 	.word	0x24005574

08010da4 <_malloc_r>:
 8010da4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010da8:	1ccd      	adds	r5, r1, #3
 8010daa:	f025 0503 	bic.w	r5, r5, #3
 8010dae:	3508      	adds	r5, #8
 8010db0:	2d0c      	cmp	r5, #12
 8010db2:	bf38      	it	cc
 8010db4:	250c      	movcc	r5, #12
 8010db6:	2d00      	cmp	r5, #0
 8010db8:	4607      	mov	r7, r0
 8010dba:	db01      	blt.n	8010dc0 <_malloc_r+0x1c>
 8010dbc:	42a9      	cmp	r1, r5
 8010dbe:	d905      	bls.n	8010dcc <_malloc_r+0x28>
 8010dc0:	230c      	movs	r3, #12
 8010dc2:	603b      	str	r3, [r7, #0]
 8010dc4:	2600      	movs	r6, #0
 8010dc6:	4630      	mov	r0, r6
 8010dc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010dcc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8010ea0 <_malloc_r+0xfc>
 8010dd0:	f000 f868 	bl	8010ea4 <__malloc_lock>
 8010dd4:	f8d8 3000 	ldr.w	r3, [r8]
 8010dd8:	461c      	mov	r4, r3
 8010dda:	bb5c      	cbnz	r4, 8010e34 <_malloc_r+0x90>
 8010ddc:	4629      	mov	r1, r5
 8010dde:	4638      	mov	r0, r7
 8010de0:	f7ff ffc0 	bl	8010d64 <sbrk_aligned>
 8010de4:	1c43      	adds	r3, r0, #1
 8010de6:	4604      	mov	r4, r0
 8010de8:	d155      	bne.n	8010e96 <_malloc_r+0xf2>
 8010dea:	f8d8 4000 	ldr.w	r4, [r8]
 8010dee:	4626      	mov	r6, r4
 8010df0:	2e00      	cmp	r6, #0
 8010df2:	d145      	bne.n	8010e80 <_malloc_r+0xdc>
 8010df4:	2c00      	cmp	r4, #0
 8010df6:	d048      	beq.n	8010e8a <_malloc_r+0xe6>
 8010df8:	6823      	ldr	r3, [r4, #0]
 8010dfa:	4631      	mov	r1, r6
 8010dfc:	4638      	mov	r0, r7
 8010dfe:	eb04 0903 	add.w	r9, r4, r3
 8010e02:	f001 f879 	bl	8011ef8 <_sbrk_r>
 8010e06:	4581      	cmp	r9, r0
 8010e08:	d13f      	bne.n	8010e8a <_malloc_r+0xe6>
 8010e0a:	6821      	ldr	r1, [r4, #0]
 8010e0c:	1a6d      	subs	r5, r5, r1
 8010e0e:	4629      	mov	r1, r5
 8010e10:	4638      	mov	r0, r7
 8010e12:	f7ff ffa7 	bl	8010d64 <sbrk_aligned>
 8010e16:	3001      	adds	r0, #1
 8010e18:	d037      	beq.n	8010e8a <_malloc_r+0xe6>
 8010e1a:	6823      	ldr	r3, [r4, #0]
 8010e1c:	442b      	add	r3, r5
 8010e1e:	6023      	str	r3, [r4, #0]
 8010e20:	f8d8 3000 	ldr.w	r3, [r8]
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d038      	beq.n	8010e9a <_malloc_r+0xf6>
 8010e28:	685a      	ldr	r2, [r3, #4]
 8010e2a:	42a2      	cmp	r2, r4
 8010e2c:	d12b      	bne.n	8010e86 <_malloc_r+0xe2>
 8010e2e:	2200      	movs	r2, #0
 8010e30:	605a      	str	r2, [r3, #4]
 8010e32:	e00f      	b.n	8010e54 <_malloc_r+0xb0>
 8010e34:	6822      	ldr	r2, [r4, #0]
 8010e36:	1b52      	subs	r2, r2, r5
 8010e38:	d41f      	bmi.n	8010e7a <_malloc_r+0xd6>
 8010e3a:	2a0b      	cmp	r2, #11
 8010e3c:	d917      	bls.n	8010e6e <_malloc_r+0xca>
 8010e3e:	1961      	adds	r1, r4, r5
 8010e40:	42a3      	cmp	r3, r4
 8010e42:	6025      	str	r5, [r4, #0]
 8010e44:	bf18      	it	ne
 8010e46:	6059      	strne	r1, [r3, #4]
 8010e48:	6863      	ldr	r3, [r4, #4]
 8010e4a:	bf08      	it	eq
 8010e4c:	f8c8 1000 	streq.w	r1, [r8]
 8010e50:	5162      	str	r2, [r4, r5]
 8010e52:	604b      	str	r3, [r1, #4]
 8010e54:	4638      	mov	r0, r7
 8010e56:	f104 060b 	add.w	r6, r4, #11
 8010e5a:	f000 f829 	bl	8010eb0 <__malloc_unlock>
 8010e5e:	f026 0607 	bic.w	r6, r6, #7
 8010e62:	1d23      	adds	r3, r4, #4
 8010e64:	1af2      	subs	r2, r6, r3
 8010e66:	d0ae      	beq.n	8010dc6 <_malloc_r+0x22>
 8010e68:	1b9b      	subs	r3, r3, r6
 8010e6a:	50a3      	str	r3, [r4, r2]
 8010e6c:	e7ab      	b.n	8010dc6 <_malloc_r+0x22>
 8010e6e:	42a3      	cmp	r3, r4
 8010e70:	6862      	ldr	r2, [r4, #4]
 8010e72:	d1dd      	bne.n	8010e30 <_malloc_r+0x8c>
 8010e74:	f8c8 2000 	str.w	r2, [r8]
 8010e78:	e7ec      	b.n	8010e54 <_malloc_r+0xb0>
 8010e7a:	4623      	mov	r3, r4
 8010e7c:	6864      	ldr	r4, [r4, #4]
 8010e7e:	e7ac      	b.n	8010dda <_malloc_r+0x36>
 8010e80:	4634      	mov	r4, r6
 8010e82:	6876      	ldr	r6, [r6, #4]
 8010e84:	e7b4      	b.n	8010df0 <_malloc_r+0x4c>
 8010e86:	4613      	mov	r3, r2
 8010e88:	e7cc      	b.n	8010e24 <_malloc_r+0x80>
 8010e8a:	230c      	movs	r3, #12
 8010e8c:	603b      	str	r3, [r7, #0]
 8010e8e:	4638      	mov	r0, r7
 8010e90:	f000 f80e 	bl	8010eb0 <__malloc_unlock>
 8010e94:	e797      	b.n	8010dc6 <_malloc_r+0x22>
 8010e96:	6025      	str	r5, [r4, #0]
 8010e98:	e7dc      	b.n	8010e54 <_malloc_r+0xb0>
 8010e9a:	605b      	str	r3, [r3, #4]
 8010e9c:	deff      	udf	#255	; 0xff
 8010e9e:	bf00      	nop
 8010ea0:	24005570 	.word	0x24005570

08010ea4 <__malloc_lock>:
 8010ea4:	4801      	ldr	r0, [pc, #4]	; (8010eac <__malloc_lock+0x8>)
 8010ea6:	f001 b873 	b.w	8011f90 <__retarget_lock_acquire_recursive>
 8010eaa:	bf00      	nop
 8010eac:	240056b8 	.word	0x240056b8

08010eb0 <__malloc_unlock>:
 8010eb0:	4801      	ldr	r0, [pc, #4]	; (8010eb8 <__malloc_unlock+0x8>)
 8010eb2:	f001 b86e 	b.w	8011f92 <__retarget_lock_release_recursive>
 8010eb6:	bf00      	nop
 8010eb8:	240056b8 	.word	0x240056b8

08010ebc <__cvt>:
 8010ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ebe:	ed2d 8b02 	vpush	{d8}
 8010ec2:	eeb0 8b40 	vmov.f64	d8, d0
 8010ec6:	b085      	sub	sp, #20
 8010ec8:	4617      	mov	r7, r2
 8010eca:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010ecc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8010ece:	ee18 2a90 	vmov	r2, s17
 8010ed2:	f025 0520 	bic.w	r5, r5, #32
 8010ed6:	2a00      	cmp	r2, #0
 8010ed8:	bfb6      	itet	lt
 8010eda:	222d      	movlt	r2, #45	; 0x2d
 8010edc:	2200      	movge	r2, #0
 8010ede:	eeb1 8b40 	vneglt.f64	d8, d0
 8010ee2:	2d46      	cmp	r5, #70	; 0x46
 8010ee4:	460c      	mov	r4, r1
 8010ee6:	701a      	strb	r2, [r3, #0]
 8010ee8:	d004      	beq.n	8010ef4 <__cvt+0x38>
 8010eea:	2d45      	cmp	r5, #69	; 0x45
 8010eec:	d100      	bne.n	8010ef0 <__cvt+0x34>
 8010eee:	3401      	adds	r4, #1
 8010ef0:	2102      	movs	r1, #2
 8010ef2:	e000      	b.n	8010ef6 <__cvt+0x3a>
 8010ef4:	2103      	movs	r1, #3
 8010ef6:	ab03      	add	r3, sp, #12
 8010ef8:	9301      	str	r3, [sp, #4]
 8010efa:	ab02      	add	r3, sp, #8
 8010efc:	9300      	str	r3, [sp, #0]
 8010efe:	4622      	mov	r2, r4
 8010f00:	4633      	mov	r3, r6
 8010f02:	eeb0 0b48 	vmov.f64	d0, d8
 8010f06:	f001 f8e3 	bl	80120d0 <_dtoa_r>
 8010f0a:	2d47      	cmp	r5, #71	; 0x47
 8010f0c:	d101      	bne.n	8010f12 <__cvt+0x56>
 8010f0e:	07fb      	lsls	r3, r7, #31
 8010f10:	d51a      	bpl.n	8010f48 <__cvt+0x8c>
 8010f12:	2d46      	cmp	r5, #70	; 0x46
 8010f14:	eb00 0204 	add.w	r2, r0, r4
 8010f18:	d10c      	bne.n	8010f34 <__cvt+0x78>
 8010f1a:	7803      	ldrb	r3, [r0, #0]
 8010f1c:	2b30      	cmp	r3, #48	; 0x30
 8010f1e:	d107      	bne.n	8010f30 <__cvt+0x74>
 8010f20:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f28:	bf1c      	itt	ne
 8010f2a:	f1c4 0401 	rsbne	r4, r4, #1
 8010f2e:	6034      	strne	r4, [r6, #0]
 8010f30:	6833      	ldr	r3, [r6, #0]
 8010f32:	441a      	add	r2, r3
 8010f34:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f3c:	bf08      	it	eq
 8010f3e:	9203      	streq	r2, [sp, #12]
 8010f40:	2130      	movs	r1, #48	; 0x30
 8010f42:	9b03      	ldr	r3, [sp, #12]
 8010f44:	4293      	cmp	r3, r2
 8010f46:	d307      	bcc.n	8010f58 <__cvt+0x9c>
 8010f48:	9b03      	ldr	r3, [sp, #12]
 8010f4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010f4c:	1a1b      	subs	r3, r3, r0
 8010f4e:	6013      	str	r3, [r2, #0]
 8010f50:	b005      	add	sp, #20
 8010f52:	ecbd 8b02 	vpop	{d8}
 8010f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f58:	1c5c      	adds	r4, r3, #1
 8010f5a:	9403      	str	r4, [sp, #12]
 8010f5c:	7019      	strb	r1, [r3, #0]
 8010f5e:	e7f0      	b.n	8010f42 <__cvt+0x86>

08010f60 <__exponent>:
 8010f60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010f62:	4603      	mov	r3, r0
 8010f64:	2900      	cmp	r1, #0
 8010f66:	bfb8      	it	lt
 8010f68:	4249      	neglt	r1, r1
 8010f6a:	f803 2b02 	strb.w	r2, [r3], #2
 8010f6e:	bfb4      	ite	lt
 8010f70:	222d      	movlt	r2, #45	; 0x2d
 8010f72:	222b      	movge	r2, #43	; 0x2b
 8010f74:	2909      	cmp	r1, #9
 8010f76:	7042      	strb	r2, [r0, #1]
 8010f78:	dd2a      	ble.n	8010fd0 <__exponent+0x70>
 8010f7a:	f10d 0207 	add.w	r2, sp, #7
 8010f7e:	4617      	mov	r7, r2
 8010f80:	260a      	movs	r6, #10
 8010f82:	4694      	mov	ip, r2
 8010f84:	fb91 f5f6 	sdiv	r5, r1, r6
 8010f88:	fb06 1415 	mls	r4, r6, r5, r1
 8010f8c:	3430      	adds	r4, #48	; 0x30
 8010f8e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8010f92:	460c      	mov	r4, r1
 8010f94:	2c63      	cmp	r4, #99	; 0x63
 8010f96:	f102 32ff 	add.w	r2, r2, #4294967295
 8010f9a:	4629      	mov	r1, r5
 8010f9c:	dcf1      	bgt.n	8010f82 <__exponent+0x22>
 8010f9e:	3130      	adds	r1, #48	; 0x30
 8010fa0:	f1ac 0402 	sub.w	r4, ip, #2
 8010fa4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8010fa8:	1c41      	adds	r1, r0, #1
 8010faa:	4622      	mov	r2, r4
 8010fac:	42ba      	cmp	r2, r7
 8010fae:	d30a      	bcc.n	8010fc6 <__exponent+0x66>
 8010fb0:	f10d 0209 	add.w	r2, sp, #9
 8010fb4:	eba2 020c 	sub.w	r2, r2, ip
 8010fb8:	42bc      	cmp	r4, r7
 8010fba:	bf88      	it	hi
 8010fbc:	2200      	movhi	r2, #0
 8010fbe:	4413      	add	r3, r2
 8010fc0:	1a18      	subs	r0, r3, r0
 8010fc2:	b003      	add	sp, #12
 8010fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010fc6:	f812 5b01 	ldrb.w	r5, [r2], #1
 8010fca:	f801 5f01 	strb.w	r5, [r1, #1]!
 8010fce:	e7ed      	b.n	8010fac <__exponent+0x4c>
 8010fd0:	2330      	movs	r3, #48	; 0x30
 8010fd2:	3130      	adds	r1, #48	; 0x30
 8010fd4:	7083      	strb	r3, [r0, #2]
 8010fd6:	70c1      	strb	r1, [r0, #3]
 8010fd8:	1d03      	adds	r3, r0, #4
 8010fda:	e7f1      	b.n	8010fc0 <__exponent+0x60>
 8010fdc:	0000      	movs	r0, r0
	...

08010fe0 <_printf_float>:
 8010fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fe4:	b08b      	sub	sp, #44	; 0x2c
 8010fe6:	460c      	mov	r4, r1
 8010fe8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8010fec:	4616      	mov	r6, r2
 8010fee:	461f      	mov	r7, r3
 8010ff0:	4605      	mov	r5, r0
 8010ff2:	f000 fef3 	bl	8011ddc <_localeconv_r>
 8010ff6:	f8d0 b000 	ldr.w	fp, [r0]
 8010ffa:	4658      	mov	r0, fp
 8010ffc:	f7ef f9c0 	bl	8000380 <strlen>
 8011000:	2300      	movs	r3, #0
 8011002:	9308      	str	r3, [sp, #32]
 8011004:	f8d8 3000 	ldr.w	r3, [r8]
 8011008:	f894 9018 	ldrb.w	r9, [r4, #24]
 801100c:	6822      	ldr	r2, [r4, #0]
 801100e:	3307      	adds	r3, #7
 8011010:	f023 0307 	bic.w	r3, r3, #7
 8011014:	f103 0108 	add.w	r1, r3, #8
 8011018:	f8c8 1000 	str.w	r1, [r8]
 801101c:	ed93 0b00 	vldr	d0, [r3]
 8011020:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8011280 <_printf_float+0x2a0>
 8011024:	eeb0 7bc0 	vabs.f64	d7, d0
 8011028:	eeb4 7b46 	vcmp.f64	d7, d6
 801102c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011030:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8011034:	4682      	mov	sl, r0
 8011036:	dd24      	ble.n	8011082 <_printf_float+0xa2>
 8011038:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801103c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011040:	d502      	bpl.n	8011048 <_printf_float+0x68>
 8011042:	232d      	movs	r3, #45	; 0x2d
 8011044:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011048:	498f      	ldr	r1, [pc, #572]	; (8011288 <_printf_float+0x2a8>)
 801104a:	4b90      	ldr	r3, [pc, #576]	; (801128c <_printf_float+0x2ac>)
 801104c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8011050:	bf94      	ite	ls
 8011052:	4688      	movls	r8, r1
 8011054:	4698      	movhi	r8, r3
 8011056:	2303      	movs	r3, #3
 8011058:	6123      	str	r3, [r4, #16]
 801105a:	f022 0204 	bic.w	r2, r2, #4
 801105e:	2300      	movs	r3, #0
 8011060:	6022      	str	r2, [r4, #0]
 8011062:	9304      	str	r3, [sp, #16]
 8011064:	9700      	str	r7, [sp, #0]
 8011066:	4633      	mov	r3, r6
 8011068:	aa09      	add	r2, sp, #36	; 0x24
 801106a:	4621      	mov	r1, r4
 801106c:	4628      	mov	r0, r5
 801106e:	f000 f9d1 	bl	8011414 <_printf_common>
 8011072:	3001      	adds	r0, #1
 8011074:	f040 808a 	bne.w	801118c <_printf_float+0x1ac>
 8011078:	f04f 30ff 	mov.w	r0, #4294967295
 801107c:	b00b      	add	sp, #44	; 0x2c
 801107e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011082:	eeb4 0b40 	vcmp.f64	d0, d0
 8011086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801108a:	d709      	bvc.n	80110a0 <_printf_float+0xc0>
 801108c:	ee10 3a90 	vmov	r3, s1
 8011090:	2b00      	cmp	r3, #0
 8011092:	bfbc      	itt	lt
 8011094:	232d      	movlt	r3, #45	; 0x2d
 8011096:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801109a:	497d      	ldr	r1, [pc, #500]	; (8011290 <_printf_float+0x2b0>)
 801109c:	4b7d      	ldr	r3, [pc, #500]	; (8011294 <_printf_float+0x2b4>)
 801109e:	e7d5      	b.n	801104c <_printf_float+0x6c>
 80110a0:	6863      	ldr	r3, [r4, #4]
 80110a2:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80110a6:	9104      	str	r1, [sp, #16]
 80110a8:	1c59      	adds	r1, r3, #1
 80110aa:	d13c      	bne.n	8011126 <_printf_float+0x146>
 80110ac:	2306      	movs	r3, #6
 80110ae:	6063      	str	r3, [r4, #4]
 80110b0:	2300      	movs	r3, #0
 80110b2:	9303      	str	r3, [sp, #12]
 80110b4:	ab08      	add	r3, sp, #32
 80110b6:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80110ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80110be:	ab07      	add	r3, sp, #28
 80110c0:	6861      	ldr	r1, [r4, #4]
 80110c2:	9300      	str	r3, [sp, #0]
 80110c4:	6022      	str	r2, [r4, #0]
 80110c6:	f10d 031b 	add.w	r3, sp, #27
 80110ca:	4628      	mov	r0, r5
 80110cc:	f7ff fef6 	bl	8010ebc <__cvt>
 80110d0:	9b04      	ldr	r3, [sp, #16]
 80110d2:	9907      	ldr	r1, [sp, #28]
 80110d4:	2b47      	cmp	r3, #71	; 0x47
 80110d6:	4680      	mov	r8, r0
 80110d8:	d108      	bne.n	80110ec <_printf_float+0x10c>
 80110da:	1cc8      	adds	r0, r1, #3
 80110dc:	db02      	blt.n	80110e4 <_printf_float+0x104>
 80110de:	6863      	ldr	r3, [r4, #4]
 80110e0:	4299      	cmp	r1, r3
 80110e2:	dd41      	ble.n	8011168 <_printf_float+0x188>
 80110e4:	f1a9 0902 	sub.w	r9, r9, #2
 80110e8:	fa5f f989 	uxtb.w	r9, r9
 80110ec:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80110f0:	d820      	bhi.n	8011134 <_printf_float+0x154>
 80110f2:	3901      	subs	r1, #1
 80110f4:	464a      	mov	r2, r9
 80110f6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80110fa:	9107      	str	r1, [sp, #28]
 80110fc:	f7ff ff30 	bl	8010f60 <__exponent>
 8011100:	9a08      	ldr	r2, [sp, #32]
 8011102:	9004      	str	r0, [sp, #16]
 8011104:	1813      	adds	r3, r2, r0
 8011106:	2a01      	cmp	r2, #1
 8011108:	6123      	str	r3, [r4, #16]
 801110a:	dc02      	bgt.n	8011112 <_printf_float+0x132>
 801110c:	6822      	ldr	r2, [r4, #0]
 801110e:	07d2      	lsls	r2, r2, #31
 8011110:	d501      	bpl.n	8011116 <_printf_float+0x136>
 8011112:	3301      	adds	r3, #1
 8011114:	6123      	str	r3, [r4, #16]
 8011116:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801111a:	2b00      	cmp	r3, #0
 801111c:	d0a2      	beq.n	8011064 <_printf_float+0x84>
 801111e:	232d      	movs	r3, #45	; 0x2d
 8011120:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011124:	e79e      	b.n	8011064 <_printf_float+0x84>
 8011126:	9904      	ldr	r1, [sp, #16]
 8011128:	2947      	cmp	r1, #71	; 0x47
 801112a:	d1c1      	bne.n	80110b0 <_printf_float+0xd0>
 801112c:	2b00      	cmp	r3, #0
 801112e:	d1bf      	bne.n	80110b0 <_printf_float+0xd0>
 8011130:	2301      	movs	r3, #1
 8011132:	e7bc      	b.n	80110ae <_printf_float+0xce>
 8011134:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8011138:	d118      	bne.n	801116c <_printf_float+0x18c>
 801113a:	2900      	cmp	r1, #0
 801113c:	6863      	ldr	r3, [r4, #4]
 801113e:	dd0b      	ble.n	8011158 <_printf_float+0x178>
 8011140:	6121      	str	r1, [r4, #16]
 8011142:	b913      	cbnz	r3, 801114a <_printf_float+0x16a>
 8011144:	6822      	ldr	r2, [r4, #0]
 8011146:	07d0      	lsls	r0, r2, #31
 8011148:	d502      	bpl.n	8011150 <_printf_float+0x170>
 801114a:	3301      	adds	r3, #1
 801114c:	440b      	add	r3, r1
 801114e:	6123      	str	r3, [r4, #16]
 8011150:	2300      	movs	r3, #0
 8011152:	65a1      	str	r1, [r4, #88]	; 0x58
 8011154:	9304      	str	r3, [sp, #16]
 8011156:	e7de      	b.n	8011116 <_printf_float+0x136>
 8011158:	b913      	cbnz	r3, 8011160 <_printf_float+0x180>
 801115a:	6822      	ldr	r2, [r4, #0]
 801115c:	07d2      	lsls	r2, r2, #31
 801115e:	d501      	bpl.n	8011164 <_printf_float+0x184>
 8011160:	3302      	adds	r3, #2
 8011162:	e7f4      	b.n	801114e <_printf_float+0x16e>
 8011164:	2301      	movs	r3, #1
 8011166:	e7f2      	b.n	801114e <_printf_float+0x16e>
 8011168:	f04f 0967 	mov.w	r9, #103	; 0x67
 801116c:	9b08      	ldr	r3, [sp, #32]
 801116e:	4299      	cmp	r1, r3
 8011170:	db05      	blt.n	801117e <_printf_float+0x19e>
 8011172:	6823      	ldr	r3, [r4, #0]
 8011174:	6121      	str	r1, [r4, #16]
 8011176:	07d8      	lsls	r0, r3, #31
 8011178:	d5ea      	bpl.n	8011150 <_printf_float+0x170>
 801117a:	1c4b      	adds	r3, r1, #1
 801117c:	e7e7      	b.n	801114e <_printf_float+0x16e>
 801117e:	2900      	cmp	r1, #0
 8011180:	bfd4      	ite	le
 8011182:	f1c1 0202 	rsble	r2, r1, #2
 8011186:	2201      	movgt	r2, #1
 8011188:	4413      	add	r3, r2
 801118a:	e7e0      	b.n	801114e <_printf_float+0x16e>
 801118c:	6823      	ldr	r3, [r4, #0]
 801118e:	055a      	lsls	r2, r3, #21
 8011190:	d407      	bmi.n	80111a2 <_printf_float+0x1c2>
 8011192:	6923      	ldr	r3, [r4, #16]
 8011194:	4642      	mov	r2, r8
 8011196:	4631      	mov	r1, r6
 8011198:	4628      	mov	r0, r5
 801119a:	47b8      	blx	r7
 801119c:	3001      	adds	r0, #1
 801119e:	d12a      	bne.n	80111f6 <_printf_float+0x216>
 80111a0:	e76a      	b.n	8011078 <_printf_float+0x98>
 80111a2:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80111a6:	f240 80e0 	bls.w	801136a <_printf_float+0x38a>
 80111aa:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80111ae:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80111b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111b6:	d133      	bne.n	8011220 <_printf_float+0x240>
 80111b8:	4a37      	ldr	r2, [pc, #220]	; (8011298 <_printf_float+0x2b8>)
 80111ba:	2301      	movs	r3, #1
 80111bc:	4631      	mov	r1, r6
 80111be:	4628      	mov	r0, r5
 80111c0:	47b8      	blx	r7
 80111c2:	3001      	adds	r0, #1
 80111c4:	f43f af58 	beq.w	8011078 <_printf_float+0x98>
 80111c8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80111cc:	429a      	cmp	r2, r3
 80111ce:	db02      	blt.n	80111d6 <_printf_float+0x1f6>
 80111d0:	6823      	ldr	r3, [r4, #0]
 80111d2:	07d8      	lsls	r0, r3, #31
 80111d4:	d50f      	bpl.n	80111f6 <_printf_float+0x216>
 80111d6:	4653      	mov	r3, sl
 80111d8:	465a      	mov	r2, fp
 80111da:	4631      	mov	r1, r6
 80111dc:	4628      	mov	r0, r5
 80111de:	47b8      	blx	r7
 80111e0:	3001      	adds	r0, #1
 80111e2:	f43f af49 	beq.w	8011078 <_printf_float+0x98>
 80111e6:	f04f 0800 	mov.w	r8, #0
 80111ea:	f104 091a 	add.w	r9, r4, #26
 80111ee:	9b08      	ldr	r3, [sp, #32]
 80111f0:	3b01      	subs	r3, #1
 80111f2:	4543      	cmp	r3, r8
 80111f4:	dc09      	bgt.n	801120a <_printf_float+0x22a>
 80111f6:	6823      	ldr	r3, [r4, #0]
 80111f8:	079b      	lsls	r3, r3, #30
 80111fa:	f100 8106 	bmi.w	801140a <_printf_float+0x42a>
 80111fe:	68e0      	ldr	r0, [r4, #12]
 8011200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011202:	4298      	cmp	r0, r3
 8011204:	bfb8      	it	lt
 8011206:	4618      	movlt	r0, r3
 8011208:	e738      	b.n	801107c <_printf_float+0x9c>
 801120a:	2301      	movs	r3, #1
 801120c:	464a      	mov	r2, r9
 801120e:	4631      	mov	r1, r6
 8011210:	4628      	mov	r0, r5
 8011212:	47b8      	blx	r7
 8011214:	3001      	adds	r0, #1
 8011216:	f43f af2f 	beq.w	8011078 <_printf_float+0x98>
 801121a:	f108 0801 	add.w	r8, r8, #1
 801121e:	e7e6      	b.n	80111ee <_printf_float+0x20e>
 8011220:	9b07      	ldr	r3, [sp, #28]
 8011222:	2b00      	cmp	r3, #0
 8011224:	dc3a      	bgt.n	801129c <_printf_float+0x2bc>
 8011226:	4a1c      	ldr	r2, [pc, #112]	; (8011298 <_printf_float+0x2b8>)
 8011228:	2301      	movs	r3, #1
 801122a:	4631      	mov	r1, r6
 801122c:	4628      	mov	r0, r5
 801122e:	47b8      	blx	r7
 8011230:	3001      	adds	r0, #1
 8011232:	f43f af21 	beq.w	8011078 <_printf_float+0x98>
 8011236:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801123a:	4313      	orrs	r3, r2
 801123c:	d102      	bne.n	8011244 <_printf_float+0x264>
 801123e:	6823      	ldr	r3, [r4, #0]
 8011240:	07d9      	lsls	r1, r3, #31
 8011242:	d5d8      	bpl.n	80111f6 <_printf_float+0x216>
 8011244:	4653      	mov	r3, sl
 8011246:	465a      	mov	r2, fp
 8011248:	4631      	mov	r1, r6
 801124a:	4628      	mov	r0, r5
 801124c:	47b8      	blx	r7
 801124e:	3001      	adds	r0, #1
 8011250:	f43f af12 	beq.w	8011078 <_printf_float+0x98>
 8011254:	f04f 0900 	mov.w	r9, #0
 8011258:	f104 0a1a 	add.w	sl, r4, #26
 801125c:	9b07      	ldr	r3, [sp, #28]
 801125e:	425b      	negs	r3, r3
 8011260:	454b      	cmp	r3, r9
 8011262:	dc01      	bgt.n	8011268 <_printf_float+0x288>
 8011264:	9b08      	ldr	r3, [sp, #32]
 8011266:	e795      	b.n	8011194 <_printf_float+0x1b4>
 8011268:	2301      	movs	r3, #1
 801126a:	4652      	mov	r2, sl
 801126c:	4631      	mov	r1, r6
 801126e:	4628      	mov	r0, r5
 8011270:	47b8      	blx	r7
 8011272:	3001      	adds	r0, #1
 8011274:	f43f af00 	beq.w	8011078 <_printf_float+0x98>
 8011278:	f109 0901 	add.w	r9, r9, #1
 801127c:	e7ee      	b.n	801125c <_printf_float+0x27c>
 801127e:	bf00      	nop
 8011280:	ffffffff 	.word	0xffffffff
 8011284:	7fefffff 	.word	0x7fefffff
 8011288:	08015528 	.word	0x08015528
 801128c:	0801552c 	.word	0x0801552c
 8011290:	08015530 	.word	0x08015530
 8011294:	08015534 	.word	0x08015534
 8011298:	08015538 	.word	0x08015538
 801129c:	9a08      	ldr	r2, [sp, #32]
 801129e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80112a0:	429a      	cmp	r2, r3
 80112a2:	bfa8      	it	ge
 80112a4:	461a      	movge	r2, r3
 80112a6:	2a00      	cmp	r2, #0
 80112a8:	4691      	mov	r9, r2
 80112aa:	dc38      	bgt.n	801131e <_printf_float+0x33e>
 80112ac:	2300      	movs	r3, #0
 80112ae:	9305      	str	r3, [sp, #20]
 80112b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80112b4:	f104 021a 	add.w	r2, r4, #26
 80112b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80112ba:	9905      	ldr	r1, [sp, #20]
 80112bc:	9304      	str	r3, [sp, #16]
 80112be:	eba3 0309 	sub.w	r3, r3, r9
 80112c2:	428b      	cmp	r3, r1
 80112c4:	dc33      	bgt.n	801132e <_printf_float+0x34e>
 80112c6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80112ca:	429a      	cmp	r2, r3
 80112cc:	db3c      	blt.n	8011348 <_printf_float+0x368>
 80112ce:	6823      	ldr	r3, [r4, #0]
 80112d0:	07da      	lsls	r2, r3, #31
 80112d2:	d439      	bmi.n	8011348 <_printf_float+0x368>
 80112d4:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80112d8:	eba2 0903 	sub.w	r9, r2, r3
 80112dc:	9b04      	ldr	r3, [sp, #16]
 80112de:	1ad2      	subs	r2, r2, r3
 80112e0:	4591      	cmp	r9, r2
 80112e2:	bfa8      	it	ge
 80112e4:	4691      	movge	r9, r2
 80112e6:	f1b9 0f00 	cmp.w	r9, #0
 80112ea:	dc35      	bgt.n	8011358 <_printf_float+0x378>
 80112ec:	f04f 0800 	mov.w	r8, #0
 80112f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80112f4:	f104 0a1a 	add.w	sl, r4, #26
 80112f8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80112fc:	1a9b      	subs	r3, r3, r2
 80112fe:	eba3 0309 	sub.w	r3, r3, r9
 8011302:	4543      	cmp	r3, r8
 8011304:	f77f af77 	ble.w	80111f6 <_printf_float+0x216>
 8011308:	2301      	movs	r3, #1
 801130a:	4652      	mov	r2, sl
 801130c:	4631      	mov	r1, r6
 801130e:	4628      	mov	r0, r5
 8011310:	47b8      	blx	r7
 8011312:	3001      	adds	r0, #1
 8011314:	f43f aeb0 	beq.w	8011078 <_printf_float+0x98>
 8011318:	f108 0801 	add.w	r8, r8, #1
 801131c:	e7ec      	b.n	80112f8 <_printf_float+0x318>
 801131e:	4613      	mov	r3, r2
 8011320:	4631      	mov	r1, r6
 8011322:	4642      	mov	r2, r8
 8011324:	4628      	mov	r0, r5
 8011326:	47b8      	blx	r7
 8011328:	3001      	adds	r0, #1
 801132a:	d1bf      	bne.n	80112ac <_printf_float+0x2cc>
 801132c:	e6a4      	b.n	8011078 <_printf_float+0x98>
 801132e:	2301      	movs	r3, #1
 8011330:	4631      	mov	r1, r6
 8011332:	4628      	mov	r0, r5
 8011334:	9204      	str	r2, [sp, #16]
 8011336:	47b8      	blx	r7
 8011338:	3001      	adds	r0, #1
 801133a:	f43f ae9d 	beq.w	8011078 <_printf_float+0x98>
 801133e:	9b05      	ldr	r3, [sp, #20]
 8011340:	9a04      	ldr	r2, [sp, #16]
 8011342:	3301      	adds	r3, #1
 8011344:	9305      	str	r3, [sp, #20]
 8011346:	e7b7      	b.n	80112b8 <_printf_float+0x2d8>
 8011348:	4653      	mov	r3, sl
 801134a:	465a      	mov	r2, fp
 801134c:	4631      	mov	r1, r6
 801134e:	4628      	mov	r0, r5
 8011350:	47b8      	blx	r7
 8011352:	3001      	adds	r0, #1
 8011354:	d1be      	bne.n	80112d4 <_printf_float+0x2f4>
 8011356:	e68f      	b.n	8011078 <_printf_float+0x98>
 8011358:	9a04      	ldr	r2, [sp, #16]
 801135a:	464b      	mov	r3, r9
 801135c:	4442      	add	r2, r8
 801135e:	4631      	mov	r1, r6
 8011360:	4628      	mov	r0, r5
 8011362:	47b8      	blx	r7
 8011364:	3001      	adds	r0, #1
 8011366:	d1c1      	bne.n	80112ec <_printf_float+0x30c>
 8011368:	e686      	b.n	8011078 <_printf_float+0x98>
 801136a:	9a08      	ldr	r2, [sp, #32]
 801136c:	2a01      	cmp	r2, #1
 801136e:	dc01      	bgt.n	8011374 <_printf_float+0x394>
 8011370:	07db      	lsls	r3, r3, #31
 8011372:	d537      	bpl.n	80113e4 <_printf_float+0x404>
 8011374:	2301      	movs	r3, #1
 8011376:	4642      	mov	r2, r8
 8011378:	4631      	mov	r1, r6
 801137a:	4628      	mov	r0, r5
 801137c:	47b8      	blx	r7
 801137e:	3001      	adds	r0, #1
 8011380:	f43f ae7a 	beq.w	8011078 <_printf_float+0x98>
 8011384:	4653      	mov	r3, sl
 8011386:	465a      	mov	r2, fp
 8011388:	4631      	mov	r1, r6
 801138a:	4628      	mov	r0, r5
 801138c:	47b8      	blx	r7
 801138e:	3001      	adds	r0, #1
 8011390:	f43f ae72 	beq.w	8011078 <_printf_float+0x98>
 8011394:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8011398:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801139c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113a0:	9b08      	ldr	r3, [sp, #32]
 80113a2:	d01a      	beq.n	80113da <_printf_float+0x3fa>
 80113a4:	3b01      	subs	r3, #1
 80113a6:	f108 0201 	add.w	r2, r8, #1
 80113aa:	4631      	mov	r1, r6
 80113ac:	4628      	mov	r0, r5
 80113ae:	47b8      	blx	r7
 80113b0:	3001      	adds	r0, #1
 80113b2:	d10e      	bne.n	80113d2 <_printf_float+0x3f2>
 80113b4:	e660      	b.n	8011078 <_printf_float+0x98>
 80113b6:	2301      	movs	r3, #1
 80113b8:	464a      	mov	r2, r9
 80113ba:	4631      	mov	r1, r6
 80113bc:	4628      	mov	r0, r5
 80113be:	47b8      	blx	r7
 80113c0:	3001      	adds	r0, #1
 80113c2:	f43f ae59 	beq.w	8011078 <_printf_float+0x98>
 80113c6:	f108 0801 	add.w	r8, r8, #1
 80113ca:	9b08      	ldr	r3, [sp, #32]
 80113cc:	3b01      	subs	r3, #1
 80113ce:	4543      	cmp	r3, r8
 80113d0:	dcf1      	bgt.n	80113b6 <_printf_float+0x3d6>
 80113d2:	9b04      	ldr	r3, [sp, #16]
 80113d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80113d8:	e6dd      	b.n	8011196 <_printf_float+0x1b6>
 80113da:	f04f 0800 	mov.w	r8, #0
 80113de:	f104 091a 	add.w	r9, r4, #26
 80113e2:	e7f2      	b.n	80113ca <_printf_float+0x3ea>
 80113e4:	2301      	movs	r3, #1
 80113e6:	4642      	mov	r2, r8
 80113e8:	e7df      	b.n	80113aa <_printf_float+0x3ca>
 80113ea:	2301      	movs	r3, #1
 80113ec:	464a      	mov	r2, r9
 80113ee:	4631      	mov	r1, r6
 80113f0:	4628      	mov	r0, r5
 80113f2:	47b8      	blx	r7
 80113f4:	3001      	adds	r0, #1
 80113f6:	f43f ae3f 	beq.w	8011078 <_printf_float+0x98>
 80113fa:	f108 0801 	add.w	r8, r8, #1
 80113fe:	68e3      	ldr	r3, [r4, #12]
 8011400:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011402:	1a5b      	subs	r3, r3, r1
 8011404:	4543      	cmp	r3, r8
 8011406:	dcf0      	bgt.n	80113ea <_printf_float+0x40a>
 8011408:	e6f9      	b.n	80111fe <_printf_float+0x21e>
 801140a:	f04f 0800 	mov.w	r8, #0
 801140e:	f104 0919 	add.w	r9, r4, #25
 8011412:	e7f4      	b.n	80113fe <_printf_float+0x41e>

08011414 <_printf_common>:
 8011414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011418:	4616      	mov	r6, r2
 801141a:	4699      	mov	r9, r3
 801141c:	688a      	ldr	r2, [r1, #8]
 801141e:	690b      	ldr	r3, [r1, #16]
 8011420:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011424:	4293      	cmp	r3, r2
 8011426:	bfb8      	it	lt
 8011428:	4613      	movlt	r3, r2
 801142a:	6033      	str	r3, [r6, #0]
 801142c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011430:	4607      	mov	r7, r0
 8011432:	460c      	mov	r4, r1
 8011434:	b10a      	cbz	r2, 801143a <_printf_common+0x26>
 8011436:	3301      	adds	r3, #1
 8011438:	6033      	str	r3, [r6, #0]
 801143a:	6823      	ldr	r3, [r4, #0]
 801143c:	0699      	lsls	r1, r3, #26
 801143e:	bf42      	ittt	mi
 8011440:	6833      	ldrmi	r3, [r6, #0]
 8011442:	3302      	addmi	r3, #2
 8011444:	6033      	strmi	r3, [r6, #0]
 8011446:	6825      	ldr	r5, [r4, #0]
 8011448:	f015 0506 	ands.w	r5, r5, #6
 801144c:	d106      	bne.n	801145c <_printf_common+0x48>
 801144e:	f104 0a19 	add.w	sl, r4, #25
 8011452:	68e3      	ldr	r3, [r4, #12]
 8011454:	6832      	ldr	r2, [r6, #0]
 8011456:	1a9b      	subs	r3, r3, r2
 8011458:	42ab      	cmp	r3, r5
 801145a:	dc26      	bgt.n	80114aa <_printf_common+0x96>
 801145c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011460:	1e13      	subs	r3, r2, #0
 8011462:	6822      	ldr	r2, [r4, #0]
 8011464:	bf18      	it	ne
 8011466:	2301      	movne	r3, #1
 8011468:	0692      	lsls	r2, r2, #26
 801146a:	d42b      	bmi.n	80114c4 <_printf_common+0xb0>
 801146c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011470:	4649      	mov	r1, r9
 8011472:	4638      	mov	r0, r7
 8011474:	47c0      	blx	r8
 8011476:	3001      	adds	r0, #1
 8011478:	d01e      	beq.n	80114b8 <_printf_common+0xa4>
 801147a:	6823      	ldr	r3, [r4, #0]
 801147c:	6922      	ldr	r2, [r4, #16]
 801147e:	f003 0306 	and.w	r3, r3, #6
 8011482:	2b04      	cmp	r3, #4
 8011484:	bf02      	ittt	eq
 8011486:	68e5      	ldreq	r5, [r4, #12]
 8011488:	6833      	ldreq	r3, [r6, #0]
 801148a:	1aed      	subeq	r5, r5, r3
 801148c:	68a3      	ldr	r3, [r4, #8]
 801148e:	bf0c      	ite	eq
 8011490:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011494:	2500      	movne	r5, #0
 8011496:	4293      	cmp	r3, r2
 8011498:	bfc4      	itt	gt
 801149a:	1a9b      	subgt	r3, r3, r2
 801149c:	18ed      	addgt	r5, r5, r3
 801149e:	2600      	movs	r6, #0
 80114a0:	341a      	adds	r4, #26
 80114a2:	42b5      	cmp	r5, r6
 80114a4:	d11a      	bne.n	80114dc <_printf_common+0xc8>
 80114a6:	2000      	movs	r0, #0
 80114a8:	e008      	b.n	80114bc <_printf_common+0xa8>
 80114aa:	2301      	movs	r3, #1
 80114ac:	4652      	mov	r2, sl
 80114ae:	4649      	mov	r1, r9
 80114b0:	4638      	mov	r0, r7
 80114b2:	47c0      	blx	r8
 80114b4:	3001      	adds	r0, #1
 80114b6:	d103      	bne.n	80114c0 <_printf_common+0xac>
 80114b8:	f04f 30ff 	mov.w	r0, #4294967295
 80114bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114c0:	3501      	adds	r5, #1
 80114c2:	e7c6      	b.n	8011452 <_printf_common+0x3e>
 80114c4:	18e1      	adds	r1, r4, r3
 80114c6:	1c5a      	adds	r2, r3, #1
 80114c8:	2030      	movs	r0, #48	; 0x30
 80114ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80114ce:	4422      	add	r2, r4
 80114d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80114d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80114d8:	3302      	adds	r3, #2
 80114da:	e7c7      	b.n	801146c <_printf_common+0x58>
 80114dc:	2301      	movs	r3, #1
 80114de:	4622      	mov	r2, r4
 80114e0:	4649      	mov	r1, r9
 80114e2:	4638      	mov	r0, r7
 80114e4:	47c0      	blx	r8
 80114e6:	3001      	adds	r0, #1
 80114e8:	d0e6      	beq.n	80114b8 <_printf_common+0xa4>
 80114ea:	3601      	adds	r6, #1
 80114ec:	e7d9      	b.n	80114a2 <_printf_common+0x8e>
	...

080114f0 <_printf_i>:
 80114f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80114f4:	7e0f      	ldrb	r7, [r1, #24]
 80114f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80114f8:	2f78      	cmp	r7, #120	; 0x78
 80114fa:	4691      	mov	r9, r2
 80114fc:	4680      	mov	r8, r0
 80114fe:	460c      	mov	r4, r1
 8011500:	469a      	mov	sl, r3
 8011502:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011506:	d807      	bhi.n	8011518 <_printf_i+0x28>
 8011508:	2f62      	cmp	r7, #98	; 0x62
 801150a:	d80a      	bhi.n	8011522 <_printf_i+0x32>
 801150c:	2f00      	cmp	r7, #0
 801150e:	f000 80d4 	beq.w	80116ba <_printf_i+0x1ca>
 8011512:	2f58      	cmp	r7, #88	; 0x58
 8011514:	f000 80c0 	beq.w	8011698 <_printf_i+0x1a8>
 8011518:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801151c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011520:	e03a      	b.n	8011598 <_printf_i+0xa8>
 8011522:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011526:	2b15      	cmp	r3, #21
 8011528:	d8f6      	bhi.n	8011518 <_printf_i+0x28>
 801152a:	a101      	add	r1, pc, #4	; (adr r1, 8011530 <_printf_i+0x40>)
 801152c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011530:	08011589 	.word	0x08011589
 8011534:	0801159d 	.word	0x0801159d
 8011538:	08011519 	.word	0x08011519
 801153c:	08011519 	.word	0x08011519
 8011540:	08011519 	.word	0x08011519
 8011544:	08011519 	.word	0x08011519
 8011548:	0801159d 	.word	0x0801159d
 801154c:	08011519 	.word	0x08011519
 8011550:	08011519 	.word	0x08011519
 8011554:	08011519 	.word	0x08011519
 8011558:	08011519 	.word	0x08011519
 801155c:	080116a1 	.word	0x080116a1
 8011560:	080115c9 	.word	0x080115c9
 8011564:	0801165b 	.word	0x0801165b
 8011568:	08011519 	.word	0x08011519
 801156c:	08011519 	.word	0x08011519
 8011570:	080116c3 	.word	0x080116c3
 8011574:	08011519 	.word	0x08011519
 8011578:	080115c9 	.word	0x080115c9
 801157c:	08011519 	.word	0x08011519
 8011580:	08011519 	.word	0x08011519
 8011584:	08011663 	.word	0x08011663
 8011588:	682b      	ldr	r3, [r5, #0]
 801158a:	1d1a      	adds	r2, r3, #4
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	602a      	str	r2, [r5, #0]
 8011590:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011594:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011598:	2301      	movs	r3, #1
 801159a:	e09f      	b.n	80116dc <_printf_i+0x1ec>
 801159c:	6820      	ldr	r0, [r4, #0]
 801159e:	682b      	ldr	r3, [r5, #0]
 80115a0:	0607      	lsls	r7, r0, #24
 80115a2:	f103 0104 	add.w	r1, r3, #4
 80115a6:	6029      	str	r1, [r5, #0]
 80115a8:	d501      	bpl.n	80115ae <_printf_i+0xbe>
 80115aa:	681e      	ldr	r6, [r3, #0]
 80115ac:	e003      	b.n	80115b6 <_printf_i+0xc6>
 80115ae:	0646      	lsls	r6, r0, #25
 80115b0:	d5fb      	bpl.n	80115aa <_printf_i+0xba>
 80115b2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80115b6:	2e00      	cmp	r6, #0
 80115b8:	da03      	bge.n	80115c2 <_printf_i+0xd2>
 80115ba:	232d      	movs	r3, #45	; 0x2d
 80115bc:	4276      	negs	r6, r6
 80115be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80115c2:	485a      	ldr	r0, [pc, #360]	; (801172c <_printf_i+0x23c>)
 80115c4:	230a      	movs	r3, #10
 80115c6:	e012      	b.n	80115ee <_printf_i+0xfe>
 80115c8:	682b      	ldr	r3, [r5, #0]
 80115ca:	6820      	ldr	r0, [r4, #0]
 80115cc:	1d19      	adds	r1, r3, #4
 80115ce:	6029      	str	r1, [r5, #0]
 80115d0:	0605      	lsls	r5, r0, #24
 80115d2:	d501      	bpl.n	80115d8 <_printf_i+0xe8>
 80115d4:	681e      	ldr	r6, [r3, #0]
 80115d6:	e002      	b.n	80115de <_printf_i+0xee>
 80115d8:	0641      	lsls	r1, r0, #25
 80115da:	d5fb      	bpl.n	80115d4 <_printf_i+0xe4>
 80115dc:	881e      	ldrh	r6, [r3, #0]
 80115de:	4853      	ldr	r0, [pc, #332]	; (801172c <_printf_i+0x23c>)
 80115e0:	2f6f      	cmp	r7, #111	; 0x6f
 80115e2:	bf0c      	ite	eq
 80115e4:	2308      	moveq	r3, #8
 80115e6:	230a      	movne	r3, #10
 80115e8:	2100      	movs	r1, #0
 80115ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80115ee:	6865      	ldr	r5, [r4, #4]
 80115f0:	60a5      	str	r5, [r4, #8]
 80115f2:	2d00      	cmp	r5, #0
 80115f4:	bfa2      	ittt	ge
 80115f6:	6821      	ldrge	r1, [r4, #0]
 80115f8:	f021 0104 	bicge.w	r1, r1, #4
 80115fc:	6021      	strge	r1, [r4, #0]
 80115fe:	b90e      	cbnz	r6, 8011604 <_printf_i+0x114>
 8011600:	2d00      	cmp	r5, #0
 8011602:	d04b      	beq.n	801169c <_printf_i+0x1ac>
 8011604:	4615      	mov	r5, r2
 8011606:	fbb6 f1f3 	udiv	r1, r6, r3
 801160a:	fb03 6711 	mls	r7, r3, r1, r6
 801160e:	5dc7      	ldrb	r7, [r0, r7]
 8011610:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011614:	4637      	mov	r7, r6
 8011616:	42bb      	cmp	r3, r7
 8011618:	460e      	mov	r6, r1
 801161a:	d9f4      	bls.n	8011606 <_printf_i+0x116>
 801161c:	2b08      	cmp	r3, #8
 801161e:	d10b      	bne.n	8011638 <_printf_i+0x148>
 8011620:	6823      	ldr	r3, [r4, #0]
 8011622:	07de      	lsls	r6, r3, #31
 8011624:	d508      	bpl.n	8011638 <_printf_i+0x148>
 8011626:	6923      	ldr	r3, [r4, #16]
 8011628:	6861      	ldr	r1, [r4, #4]
 801162a:	4299      	cmp	r1, r3
 801162c:	bfde      	ittt	le
 801162e:	2330      	movle	r3, #48	; 0x30
 8011630:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011634:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011638:	1b52      	subs	r2, r2, r5
 801163a:	6122      	str	r2, [r4, #16]
 801163c:	f8cd a000 	str.w	sl, [sp]
 8011640:	464b      	mov	r3, r9
 8011642:	aa03      	add	r2, sp, #12
 8011644:	4621      	mov	r1, r4
 8011646:	4640      	mov	r0, r8
 8011648:	f7ff fee4 	bl	8011414 <_printf_common>
 801164c:	3001      	adds	r0, #1
 801164e:	d14a      	bne.n	80116e6 <_printf_i+0x1f6>
 8011650:	f04f 30ff 	mov.w	r0, #4294967295
 8011654:	b004      	add	sp, #16
 8011656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801165a:	6823      	ldr	r3, [r4, #0]
 801165c:	f043 0320 	orr.w	r3, r3, #32
 8011660:	6023      	str	r3, [r4, #0]
 8011662:	4833      	ldr	r0, [pc, #204]	; (8011730 <_printf_i+0x240>)
 8011664:	2778      	movs	r7, #120	; 0x78
 8011666:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801166a:	6823      	ldr	r3, [r4, #0]
 801166c:	6829      	ldr	r1, [r5, #0]
 801166e:	061f      	lsls	r7, r3, #24
 8011670:	f851 6b04 	ldr.w	r6, [r1], #4
 8011674:	d402      	bmi.n	801167c <_printf_i+0x18c>
 8011676:	065f      	lsls	r7, r3, #25
 8011678:	bf48      	it	mi
 801167a:	b2b6      	uxthmi	r6, r6
 801167c:	07df      	lsls	r7, r3, #31
 801167e:	bf48      	it	mi
 8011680:	f043 0320 	orrmi.w	r3, r3, #32
 8011684:	6029      	str	r1, [r5, #0]
 8011686:	bf48      	it	mi
 8011688:	6023      	strmi	r3, [r4, #0]
 801168a:	b91e      	cbnz	r6, 8011694 <_printf_i+0x1a4>
 801168c:	6823      	ldr	r3, [r4, #0]
 801168e:	f023 0320 	bic.w	r3, r3, #32
 8011692:	6023      	str	r3, [r4, #0]
 8011694:	2310      	movs	r3, #16
 8011696:	e7a7      	b.n	80115e8 <_printf_i+0xf8>
 8011698:	4824      	ldr	r0, [pc, #144]	; (801172c <_printf_i+0x23c>)
 801169a:	e7e4      	b.n	8011666 <_printf_i+0x176>
 801169c:	4615      	mov	r5, r2
 801169e:	e7bd      	b.n	801161c <_printf_i+0x12c>
 80116a0:	682b      	ldr	r3, [r5, #0]
 80116a2:	6826      	ldr	r6, [r4, #0]
 80116a4:	6961      	ldr	r1, [r4, #20]
 80116a6:	1d18      	adds	r0, r3, #4
 80116a8:	6028      	str	r0, [r5, #0]
 80116aa:	0635      	lsls	r5, r6, #24
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	d501      	bpl.n	80116b4 <_printf_i+0x1c4>
 80116b0:	6019      	str	r1, [r3, #0]
 80116b2:	e002      	b.n	80116ba <_printf_i+0x1ca>
 80116b4:	0670      	lsls	r0, r6, #25
 80116b6:	d5fb      	bpl.n	80116b0 <_printf_i+0x1c0>
 80116b8:	8019      	strh	r1, [r3, #0]
 80116ba:	2300      	movs	r3, #0
 80116bc:	6123      	str	r3, [r4, #16]
 80116be:	4615      	mov	r5, r2
 80116c0:	e7bc      	b.n	801163c <_printf_i+0x14c>
 80116c2:	682b      	ldr	r3, [r5, #0]
 80116c4:	1d1a      	adds	r2, r3, #4
 80116c6:	602a      	str	r2, [r5, #0]
 80116c8:	681d      	ldr	r5, [r3, #0]
 80116ca:	6862      	ldr	r2, [r4, #4]
 80116cc:	2100      	movs	r1, #0
 80116ce:	4628      	mov	r0, r5
 80116d0:	f7ee fe06 	bl	80002e0 <memchr>
 80116d4:	b108      	cbz	r0, 80116da <_printf_i+0x1ea>
 80116d6:	1b40      	subs	r0, r0, r5
 80116d8:	6060      	str	r0, [r4, #4]
 80116da:	6863      	ldr	r3, [r4, #4]
 80116dc:	6123      	str	r3, [r4, #16]
 80116de:	2300      	movs	r3, #0
 80116e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80116e4:	e7aa      	b.n	801163c <_printf_i+0x14c>
 80116e6:	6923      	ldr	r3, [r4, #16]
 80116e8:	462a      	mov	r2, r5
 80116ea:	4649      	mov	r1, r9
 80116ec:	4640      	mov	r0, r8
 80116ee:	47d0      	blx	sl
 80116f0:	3001      	adds	r0, #1
 80116f2:	d0ad      	beq.n	8011650 <_printf_i+0x160>
 80116f4:	6823      	ldr	r3, [r4, #0]
 80116f6:	079b      	lsls	r3, r3, #30
 80116f8:	d413      	bmi.n	8011722 <_printf_i+0x232>
 80116fa:	68e0      	ldr	r0, [r4, #12]
 80116fc:	9b03      	ldr	r3, [sp, #12]
 80116fe:	4298      	cmp	r0, r3
 8011700:	bfb8      	it	lt
 8011702:	4618      	movlt	r0, r3
 8011704:	e7a6      	b.n	8011654 <_printf_i+0x164>
 8011706:	2301      	movs	r3, #1
 8011708:	4632      	mov	r2, r6
 801170a:	4649      	mov	r1, r9
 801170c:	4640      	mov	r0, r8
 801170e:	47d0      	blx	sl
 8011710:	3001      	adds	r0, #1
 8011712:	d09d      	beq.n	8011650 <_printf_i+0x160>
 8011714:	3501      	adds	r5, #1
 8011716:	68e3      	ldr	r3, [r4, #12]
 8011718:	9903      	ldr	r1, [sp, #12]
 801171a:	1a5b      	subs	r3, r3, r1
 801171c:	42ab      	cmp	r3, r5
 801171e:	dcf2      	bgt.n	8011706 <_printf_i+0x216>
 8011720:	e7eb      	b.n	80116fa <_printf_i+0x20a>
 8011722:	2500      	movs	r5, #0
 8011724:	f104 0619 	add.w	r6, r4, #25
 8011728:	e7f5      	b.n	8011716 <_printf_i+0x226>
 801172a:	bf00      	nop
 801172c:	0801553a 	.word	0x0801553a
 8011730:	0801554b 	.word	0x0801554b

08011734 <_scanf_float>:
 8011734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011738:	b087      	sub	sp, #28
 801173a:	4617      	mov	r7, r2
 801173c:	9303      	str	r3, [sp, #12]
 801173e:	688b      	ldr	r3, [r1, #8]
 8011740:	1e5a      	subs	r2, r3, #1
 8011742:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8011746:	bf83      	ittte	hi
 8011748:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801174c:	195b      	addhi	r3, r3, r5
 801174e:	9302      	strhi	r3, [sp, #8]
 8011750:	2300      	movls	r3, #0
 8011752:	bf86      	itte	hi
 8011754:	f240 135d 	movwhi	r3, #349	; 0x15d
 8011758:	608b      	strhi	r3, [r1, #8]
 801175a:	9302      	strls	r3, [sp, #8]
 801175c:	680b      	ldr	r3, [r1, #0]
 801175e:	468b      	mov	fp, r1
 8011760:	2500      	movs	r5, #0
 8011762:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8011766:	f84b 3b1c 	str.w	r3, [fp], #28
 801176a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801176e:	4680      	mov	r8, r0
 8011770:	460c      	mov	r4, r1
 8011772:	465e      	mov	r6, fp
 8011774:	46aa      	mov	sl, r5
 8011776:	46a9      	mov	r9, r5
 8011778:	9501      	str	r5, [sp, #4]
 801177a:	68a2      	ldr	r2, [r4, #8]
 801177c:	b152      	cbz	r2, 8011794 <_scanf_float+0x60>
 801177e:	683b      	ldr	r3, [r7, #0]
 8011780:	781b      	ldrb	r3, [r3, #0]
 8011782:	2b4e      	cmp	r3, #78	; 0x4e
 8011784:	d864      	bhi.n	8011850 <_scanf_float+0x11c>
 8011786:	2b40      	cmp	r3, #64	; 0x40
 8011788:	d83c      	bhi.n	8011804 <_scanf_float+0xd0>
 801178a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801178e:	b2c8      	uxtb	r0, r1
 8011790:	280e      	cmp	r0, #14
 8011792:	d93a      	bls.n	801180a <_scanf_float+0xd6>
 8011794:	f1b9 0f00 	cmp.w	r9, #0
 8011798:	d003      	beq.n	80117a2 <_scanf_float+0x6e>
 801179a:	6823      	ldr	r3, [r4, #0]
 801179c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80117a0:	6023      	str	r3, [r4, #0]
 80117a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80117a6:	f1ba 0f01 	cmp.w	sl, #1
 80117aa:	f200 8113 	bhi.w	80119d4 <_scanf_float+0x2a0>
 80117ae:	455e      	cmp	r6, fp
 80117b0:	f200 8105 	bhi.w	80119be <_scanf_float+0x28a>
 80117b4:	2501      	movs	r5, #1
 80117b6:	4628      	mov	r0, r5
 80117b8:	b007      	add	sp, #28
 80117ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117be:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80117c2:	2a0d      	cmp	r2, #13
 80117c4:	d8e6      	bhi.n	8011794 <_scanf_float+0x60>
 80117c6:	a101      	add	r1, pc, #4	; (adr r1, 80117cc <_scanf_float+0x98>)
 80117c8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80117cc:	0801190b 	.word	0x0801190b
 80117d0:	08011795 	.word	0x08011795
 80117d4:	08011795 	.word	0x08011795
 80117d8:	08011795 	.word	0x08011795
 80117dc:	0801196b 	.word	0x0801196b
 80117e0:	08011943 	.word	0x08011943
 80117e4:	08011795 	.word	0x08011795
 80117e8:	08011795 	.word	0x08011795
 80117ec:	08011919 	.word	0x08011919
 80117f0:	08011795 	.word	0x08011795
 80117f4:	08011795 	.word	0x08011795
 80117f8:	08011795 	.word	0x08011795
 80117fc:	08011795 	.word	0x08011795
 8011800:	080118d1 	.word	0x080118d1
 8011804:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8011808:	e7db      	b.n	80117c2 <_scanf_float+0x8e>
 801180a:	290e      	cmp	r1, #14
 801180c:	d8c2      	bhi.n	8011794 <_scanf_float+0x60>
 801180e:	a001      	add	r0, pc, #4	; (adr r0, 8011814 <_scanf_float+0xe0>)
 8011810:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8011814:	080118c3 	.word	0x080118c3
 8011818:	08011795 	.word	0x08011795
 801181c:	080118c3 	.word	0x080118c3
 8011820:	08011957 	.word	0x08011957
 8011824:	08011795 	.word	0x08011795
 8011828:	08011871 	.word	0x08011871
 801182c:	080118ad 	.word	0x080118ad
 8011830:	080118ad 	.word	0x080118ad
 8011834:	080118ad 	.word	0x080118ad
 8011838:	080118ad 	.word	0x080118ad
 801183c:	080118ad 	.word	0x080118ad
 8011840:	080118ad 	.word	0x080118ad
 8011844:	080118ad 	.word	0x080118ad
 8011848:	080118ad 	.word	0x080118ad
 801184c:	080118ad 	.word	0x080118ad
 8011850:	2b6e      	cmp	r3, #110	; 0x6e
 8011852:	d809      	bhi.n	8011868 <_scanf_float+0x134>
 8011854:	2b60      	cmp	r3, #96	; 0x60
 8011856:	d8b2      	bhi.n	80117be <_scanf_float+0x8a>
 8011858:	2b54      	cmp	r3, #84	; 0x54
 801185a:	d077      	beq.n	801194c <_scanf_float+0x218>
 801185c:	2b59      	cmp	r3, #89	; 0x59
 801185e:	d199      	bne.n	8011794 <_scanf_float+0x60>
 8011860:	2d07      	cmp	r5, #7
 8011862:	d197      	bne.n	8011794 <_scanf_float+0x60>
 8011864:	2508      	movs	r5, #8
 8011866:	e029      	b.n	80118bc <_scanf_float+0x188>
 8011868:	2b74      	cmp	r3, #116	; 0x74
 801186a:	d06f      	beq.n	801194c <_scanf_float+0x218>
 801186c:	2b79      	cmp	r3, #121	; 0x79
 801186e:	e7f6      	b.n	801185e <_scanf_float+0x12a>
 8011870:	6821      	ldr	r1, [r4, #0]
 8011872:	05c8      	lsls	r0, r1, #23
 8011874:	d51a      	bpl.n	80118ac <_scanf_float+0x178>
 8011876:	9b02      	ldr	r3, [sp, #8]
 8011878:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801187c:	6021      	str	r1, [r4, #0]
 801187e:	f109 0901 	add.w	r9, r9, #1
 8011882:	b11b      	cbz	r3, 801188c <_scanf_float+0x158>
 8011884:	3b01      	subs	r3, #1
 8011886:	3201      	adds	r2, #1
 8011888:	9302      	str	r3, [sp, #8]
 801188a:	60a2      	str	r2, [r4, #8]
 801188c:	68a3      	ldr	r3, [r4, #8]
 801188e:	3b01      	subs	r3, #1
 8011890:	60a3      	str	r3, [r4, #8]
 8011892:	6923      	ldr	r3, [r4, #16]
 8011894:	3301      	adds	r3, #1
 8011896:	6123      	str	r3, [r4, #16]
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	3b01      	subs	r3, #1
 801189c:	2b00      	cmp	r3, #0
 801189e:	607b      	str	r3, [r7, #4]
 80118a0:	f340 8084 	ble.w	80119ac <_scanf_float+0x278>
 80118a4:	683b      	ldr	r3, [r7, #0]
 80118a6:	3301      	adds	r3, #1
 80118a8:	603b      	str	r3, [r7, #0]
 80118aa:	e766      	b.n	801177a <_scanf_float+0x46>
 80118ac:	eb1a 0f05 	cmn.w	sl, r5
 80118b0:	f47f af70 	bne.w	8011794 <_scanf_float+0x60>
 80118b4:	6822      	ldr	r2, [r4, #0]
 80118b6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80118ba:	6022      	str	r2, [r4, #0]
 80118bc:	f806 3b01 	strb.w	r3, [r6], #1
 80118c0:	e7e4      	b.n	801188c <_scanf_float+0x158>
 80118c2:	6822      	ldr	r2, [r4, #0]
 80118c4:	0610      	lsls	r0, r2, #24
 80118c6:	f57f af65 	bpl.w	8011794 <_scanf_float+0x60>
 80118ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80118ce:	e7f4      	b.n	80118ba <_scanf_float+0x186>
 80118d0:	f1ba 0f00 	cmp.w	sl, #0
 80118d4:	d10e      	bne.n	80118f4 <_scanf_float+0x1c0>
 80118d6:	f1b9 0f00 	cmp.w	r9, #0
 80118da:	d10e      	bne.n	80118fa <_scanf_float+0x1c6>
 80118dc:	6822      	ldr	r2, [r4, #0]
 80118de:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80118e2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80118e6:	d108      	bne.n	80118fa <_scanf_float+0x1c6>
 80118e8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80118ec:	6022      	str	r2, [r4, #0]
 80118ee:	f04f 0a01 	mov.w	sl, #1
 80118f2:	e7e3      	b.n	80118bc <_scanf_float+0x188>
 80118f4:	f1ba 0f02 	cmp.w	sl, #2
 80118f8:	d055      	beq.n	80119a6 <_scanf_float+0x272>
 80118fa:	2d01      	cmp	r5, #1
 80118fc:	d002      	beq.n	8011904 <_scanf_float+0x1d0>
 80118fe:	2d04      	cmp	r5, #4
 8011900:	f47f af48 	bne.w	8011794 <_scanf_float+0x60>
 8011904:	3501      	adds	r5, #1
 8011906:	b2ed      	uxtb	r5, r5
 8011908:	e7d8      	b.n	80118bc <_scanf_float+0x188>
 801190a:	f1ba 0f01 	cmp.w	sl, #1
 801190e:	f47f af41 	bne.w	8011794 <_scanf_float+0x60>
 8011912:	f04f 0a02 	mov.w	sl, #2
 8011916:	e7d1      	b.n	80118bc <_scanf_float+0x188>
 8011918:	b97d      	cbnz	r5, 801193a <_scanf_float+0x206>
 801191a:	f1b9 0f00 	cmp.w	r9, #0
 801191e:	f47f af3c 	bne.w	801179a <_scanf_float+0x66>
 8011922:	6822      	ldr	r2, [r4, #0]
 8011924:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8011928:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801192c:	f47f af39 	bne.w	80117a2 <_scanf_float+0x6e>
 8011930:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011934:	6022      	str	r2, [r4, #0]
 8011936:	2501      	movs	r5, #1
 8011938:	e7c0      	b.n	80118bc <_scanf_float+0x188>
 801193a:	2d03      	cmp	r5, #3
 801193c:	d0e2      	beq.n	8011904 <_scanf_float+0x1d0>
 801193e:	2d05      	cmp	r5, #5
 8011940:	e7de      	b.n	8011900 <_scanf_float+0x1cc>
 8011942:	2d02      	cmp	r5, #2
 8011944:	f47f af26 	bne.w	8011794 <_scanf_float+0x60>
 8011948:	2503      	movs	r5, #3
 801194a:	e7b7      	b.n	80118bc <_scanf_float+0x188>
 801194c:	2d06      	cmp	r5, #6
 801194e:	f47f af21 	bne.w	8011794 <_scanf_float+0x60>
 8011952:	2507      	movs	r5, #7
 8011954:	e7b2      	b.n	80118bc <_scanf_float+0x188>
 8011956:	6822      	ldr	r2, [r4, #0]
 8011958:	0591      	lsls	r1, r2, #22
 801195a:	f57f af1b 	bpl.w	8011794 <_scanf_float+0x60>
 801195e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8011962:	6022      	str	r2, [r4, #0]
 8011964:	f8cd 9004 	str.w	r9, [sp, #4]
 8011968:	e7a8      	b.n	80118bc <_scanf_float+0x188>
 801196a:	6822      	ldr	r2, [r4, #0]
 801196c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8011970:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8011974:	d006      	beq.n	8011984 <_scanf_float+0x250>
 8011976:	0550      	lsls	r0, r2, #21
 8011978:	f57f af0c 	bpl.w	8011794 <_scanf_float+0x60>
 801197c:	f1b9 0f00 	cmp.w	r9, #0
 8011980:	f43f af0f 	beq.w	80117a2 <_scanf_float+0x6e>
 8011984:	0591      	lsls	r1, r2, #22
 8011986:	bf58      	it	pl
 8011988:	9901      	ldrpl	r1, [sp, #4]
 801198a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801198e:	bf58      	it	pl
 8011990:	eba9 0101 	subpl.w	r1, r9, r1
 8011994:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8011998:	bf58      	it	pl
 801199a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801199e:	6022      	str	r2, [r4, #0]
 80119a0:	f04f 0900 	mov.w	r9, #0
 80119a4:	e78a      	b.n	80118bc <_scanf_float+0x188>
 80119a6:	f04f 0a03 	mov.w	sl, #3
 80119aa:	e787      	b.n	80118bc <_scanf_float+0x188>
 80119ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80119b0:	4639      	mov	r1, r7
 80119b2:	4640      	mov	r0, r8
 80119b4:	4798      	blx	r3
 80119b6:	2800      	cmp	r0, #0
 80119b8:	f43f aedf 	beq.w	801177a <_scanf_float+0x46>
 80119bc:	e6ea      	b.n	8011794 <_scanf_float+0x60>
 80119be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80119c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80119c6:	463a      	mov	r2, r7
 80119c8:	4640      	mov	r0, r8
 80119ca:	4798      	blx	r3
 80119cc:	6923      	ldr	r3, [r4, #16]
 80119ce:	3b01      	subs	r3, #1
 80119d0:	6123      	str	r3, [r4, #16]
 80119d2:	e6ec      	b.n	80117ae <_scanf_float+0x7a>
 80119d4:	1e6b      	subs	r3, r5, #1
 80119d6:	2b06      	cmp	r3, #6
 80119d8:	d825      	bhi.n	8011a26 <_scanf_float+0x2f2>
 80119da:	2d02      	cmp	r5, #2
 80119dc:	d836      	bhi.n	8011a4c <_scanf_float+0x318>
 80119de:	455e      	cmp	r6, fp
 80119e0:	f67f aee8 	bls.w	80117b4 <_scanf_float+0x80>
 80119e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80119e8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80119ec:	463a      	mov	r2, r7
 80119ee:	4640      	mov	r0, r8
 80119f0:	4798      	blx	r3
 80119f2:	6923      	ldr	r3, [r4, #16]
 80119f4:	3b01      	subs	r3, #1
 80119f6:	6123      	str	r3, [r4, #16]
 80119f8:	e7f1      	b.n	80119de <_scanf_float+0x2aa>
 80119fa:	9802      	ldr	r0, [sp, #8]
 80119fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011a00:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8011a04:	9002      	str	r0, [sp, #8]
 8011a06:	463a      	mov	r2, r7
 8011a08:	4640      	mov	r0, r8
 8011a0a:	4798      	blx	r3
 8011a0c:	6923      	ldr	r3, [r4, #16]
 8011a0e:	3b01      	subs	r3, #1
 8011a10:	6123      	str	r3, [r4, #16]
 8011a12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011a16:	fa5f fa8a 	uxtb.w	sl, sl
 8011a1a:	f1ba 0f02 	cmp.w	sl, #2
 8011a1e:	d1ec      	bne.n	80119fa <_scanf_float+0x2c6>
 8011a20:	3d03      	subs	r5, #3
 8011a22:	b2ed      	uxtb	r5, r5
 8011a24:	1b76      	subs	r6, r6, r5
 8011a26:	6823      	ldr	r3, [r4, #0]
 8011a28:	05da      	lsls	r2, r3, #23
 8011a2a:	d52f      	bpl.n	8011a8c <_scanf_float+0x358>
 8011a2c:	055b      	lsls	r3, r3, #21
 8011a2e:	d510      	bpl.n	8011a52 <_scanf_float+0x31e>
 8011a30:	455e      	cmp	r6, fp
 8011a32:	f67f aebf 	bls.w	80117b4 <_scanf_float+0x80>
 8011a36:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011a3a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011a3e:	463a      	mov	r2, r7
 8011a40:	4640      	mov	r0, r8
 8011a42:	4798      	blx	r3
 8011a44:	6923      	ldr	r3, [r4, #16]
 8011a46:	3b01      	subs	r3, #1
 8011a48:	6123      	str	r3, [r4, #16]
 8011a4a:	e7f1      	b.n	8011a30 <_scanf_float+0x2fc>
 8011a4c:	46aa      	mov	sl, r5
 8011a4e:	9602      	str	r6, [sp, #8]
 8011a50:	e7df      	b.n	8011a12 <_scanf_float+0x2de>
 8011a52:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8011a56:	6923      	ldr	r3, [r4, #16]
 8011a58:	2965      	cmp	r1, #101	; 0x65
 8011a5a:	f103 33ff 	add.w	r3, r3, #4294967295
 8011a5e:	f106 35ff 	add.w	r5, r6, #4294967295
 8011a62:	6123      	str	r3, [r4, #16]
 8011a64:	d00c      	beq.n	8011a80 <_scanf_float+0x34c>
 8011a66:	2945      	cmp	r1, #69	; 0x45
 8011a68:	d00a      	beq.n	8011a80 <_scanf_float+0x34c>
 8011a6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011a6e:	463a      	mov	r2, r7
 8011a70:	4640      	mov	r0, r8
 8011a72:	4798      	blx	r3
 8011a74:	6923      	ldr	r3, [r4, #16]
 8011a76:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8011a7a:	3b01      	subs	r3, #1
 8011a7c:	1eb5      	subs	r5, r6, #2
 8011a7e:	6123      	str	r3, [r4, #16]
 8011a80:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011a84:	463a      	mov	r2, r7
 8011a86:	4640      	mov	r0, r8
 8011a88:	4798      	blx	r3
 8011a8a:	462e      	mov	r6, r5
 8011a8c:	6825      	ldr	r5, [r4, #0]
 8011a8e:	f015 0510 	ands.w	r5, r5, #16
 8011a92:	d14d      	bne.n	8011b30 <_scanf_float+0x3fc>
 8011a94:	7035      	strb	r5, [r6, #0]
 8011a96:	6823      	ldr	r3, [r4, #0]
 8011a98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8011a9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011aa0:	d11a      	bne.n	8011ad8 <_scanf_float+0x3a4>
 8011aa2:	9b01      	ldr	r3, [sp, #4]
 8011aa4:	454b      	cmp	r3, r9
 8011aa6:	eba3 0209 	sub.w	r2, r3, r9
 8011aaa:	d122      	bne.n	8011af2 <_scanf_float+0x3be>
 8011aac:	2200      	movs	r2, #0
 8011aae:	4659      	mov	r1, fp
 8011ab0:	4640      	mov	r0, r8
 8011ab2:	f002 fb3b 	bl	801412c <_strtod_r>
 8011ab6:	9b03      	ldr	r3, [sp, #12]
 8011ab8:	6821      	ldr	r1, [r4, #0]
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	f011 0f02 	tst.w	r1, #2
 8011ac0:	f103 0204 	add.w	r2, r3, #4
 8011ac4:	d020      	beq.n	8011b08 <_scanf_float+0x3d4>
 8011ac6:	9903      	ldr	r1, [sp, #12]
 8011ac8:	600a      	str	r2, [r1, #0]
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	ed83 0b00 	vstr	d0, [r3]
 8011ad0:	68e3      	ldr	r3, [r4, #12]
 8011ad2:	3301      	adds	r3, #1
 8011ad4:	60e3      	str	r3, [r4, #12]
 8011ad6:	e66e      	b.n	80117b6 <_scanf_float+0x82>
 8011ad8:	9b04      	ldr	r3, [sp, #16]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d0e6      	beq.n	8011aac <_scanf_float+0x378>
 8011ade:	9905      	ldr	r1, [sp, #20]
 8011ae0:	230a      	movs	r3, #10
 8011ae2:	462a      	mov	r2, r5
 8011ae4:	3101      	adds	r1, #1
 8011ae6:	4640      	mov	r0, r8
 8011ae8:	f002 fba8 	bl	801423c <_strtol_r>
 8011aec:	9b04      	ldr	r3, [sp, #16]
 8011aee:	9e05      	ldr	r6, [sp, #20]
 8011af0:	1ac2      	subs	r2, r0, r3
 8011af2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8011af6:	429e      	cmp	r6, r3
 8011af8:	bf28      	it	cs
 8011afa:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8011afe:	490d      	ldr	r1, [pc, #52]	; (8011b34 <_scanf_float+0x400>)
 8011b00:	4630      	mov	r0, r6
 8011b02:	f000 f8ff 	bl	8011d04 <siprintf>
 8011b06:	e7d1      	b.n	8011aac <_scanf_float+0x378>
 8011b08:	f011 0f04 	tst.w	r1, #4
 8011b0c:	9903      	ldr	r1, [sp, #12]
 8011b0e:	600a      	str	r2, [r1, #0]
 8011b10:	d1db      	bne.n	8011aca <_scanf_float+0x396>
 8011b12:	eeb4 0b40 	vcmp.f64	d0, d0
 8011b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b1a:	681e      	ldr	r6, [r3, #0]
 8011b1c:	d705      	bvc.n	8011b2a <_scanf_float+0x3f6>
 8011b1e:	4806      	ldr	r0, [pc, #24]	; (8011b38 <_scanf_float+0x404>)
 8011b20:	f000 fa46 	bl	8011fb0 <nanf>
 8011b24:	ed86 0a00 	vstr	s0, [r6]
 8011b28:	e7d2      	b.n	8011ad0 <_scanf_float+0x39c>
 8011b2a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8011b2e:	e7f9      	b.n	8011b24 <_scanf_float+0x3f0>
 8011b30:	2500      	movs	r5, #0
 8011b32:	e640      	b.n	80117b6 <_scanf_float+0x82>
 8011b34:	0801555c 	.word	0x0801555c
 8011b38:	080158ed 	.word	0x080158ed

08011b3c <std>:
 8011b3c:	2300      	movs	r3, #0
 8011b3e:	b510      	push	{r4, lr}
 8011b40:	4604      	mov	r4, r0
 8011b42:	e9c0 3300 	strd	r3, r3, [r0]
 8011b46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011b4a:	6083      	str	r3, [r0, #8]
 8011b4c:	8181      	strh	r1, [r0, #12]
 8011b4e:	6643      	str	r3, [r0, #100]	; 0x64
 8011b50:	81c2      	strh	r2, [r0, #14]
 8011b52:	6183      	str	r3, [r0, #24]
 8011b54:	4619      	mov	r1, r3
 8011b56:	2208      	movs	r2, #8
 8011b58:	305c      	adds	r0, #92	; 0x5c
 8011b5a:	f000 f936 	bl	8011dca <memset>
 8011b5e:	4b05      	ldr	r3, [pc, #20]	; (8011b74 <std+0x38>)
 8011b60:	6263      	str	r3, [r4, #36]	; 0x24
 8011b62:	4b05      	ldr	r3, [pc, #20]	; (8011b78 <std+0x3c>)
 8011b64:	62a3      	str	r3, [r4, #40]	; 0x28
 8011b66:	4b05      	ldr	r3, [pc, #20]	; (8011b7c <std+0x40>)
 8011b68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011b6a:	4b05      	ldr	r3, [pc, #20]	; (8011b80 <std+0x44>)
 8011b6c:	6224      	str	r4, [r4, #32]
 8011b6e:	6323      	str	r3, [r4, #48]	; 0x30
 8011b70:	bd10      	pop	{r4, pc}
 8011b72:	bf00      	nop
 8011b74:	08011d45 	.word	0x08011d45
 8011b78:	08011d67 	.word	0x08011d67
 8011b7c:	08011d9f 	.word	0x08011d9f
 8011b80:	08011dc3 	.word	0x08011dc3

08011b84 <stdio_exit_handler>:
 8011b84:	4a02      	ldr	r2, [pc, #8]	; (8011b90 <stdio_exit_handler+0xc>)
 8011b86:	4903      	ldr	r1, [pc, #12]	; (8011b94 <stdio_exit_handler+0x10>)
 8011b88:	4803      	ldr	r0, [pc, #12]	; (8011b98 <stdio_exit_handler+0x14>)
 8011b8a:	f000 b869 	b.w	8011c60 <_fwalk_sglue>
 8011b8e:	bf00      	nop
 8011b90:	24000014 	.word	0x24000014
 8011b94:	080145fd 	.word	0x080145fd
 8011b98:	24000020 	.word	0x24000020

08011b9c <cleanup_stdio>:
 8011b9c:	6841      	ldr	r1, [r0, #4]
 8011b9e:	4b0c      	ldr	r3, [pc, #48]	; (8011bd0 <cleanup_stdio+0x34>)
 8011ba0:	4299      	cmp	r1, r3
 8011ba2:	b510      	push	{r4, lr}
 8011ba4:	4604      	mov	r4, r0
 8011ba6:	d001      	beq.n	8011bac <cleanup_stdio+0x10>
 8011ba8:	f002 fd28 	bl	80145fc <_fflush_r>
 8011bac:	68a1      	ldr	r1, [r4, #8]
 8011bae:	4b09      	ldr	r3, [pc, #36]	; (8011bd4 <cleanup_stdio+0x38>)
 8011bb0:	4299      	cmp	r1, r3
 8011bb2:	d002      	beq.n	8011bba <cleanup_stdio+0x1e>
 8011bb4:	4620      	mov	r0, r4
 8011bb6:	f002 fd21 	bl	80145fc <_fflush_r>
 8011bba:	68e1      	ldr	r1, [r4, #12]
 8011bbc:	4b06      	ldr	r3, [pc, #24]	; (8011bd8 <cleanup_stdio+0x3c>)
 8011bbe:	4299      	cmp	r1, r3
 8011bc0:	d004      	beq.n	8011bcc <cleanup_stdio+0x30>
 8011bc2:	4620      	mov	r0, r4
 8011bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011bc8:	f002 bd18 	b.w	80145fc <_fflush_r>
 8011bcc:	bd10      	pop	{r4, pc}
 8011bce:	bf00      	nop
 8011bd0:	24005578 	.word	0x24005578
 8011bd4:	240055e0 	.word	0x240055e0
 8011bd8:	24005648 	.word	0x24005648

08011bdc <global_stdio_init.part.0>:
 8011bdc:	b510      	push	{r4, lr}
 8011bde:	4b0b      	ldr	r3, [pc, #44]	; (8011c0c <global_stdio_init.part.0+0x30>)
 8011be0:	4c0b      	ldr	r4, [pc, #44]	; (8011c10 <global_stdio_init.part.0+0x34>)
 8011be2:	4a0c      	ldr	r2, [pc, #48]	; (8011c14 <global_stdio_init.part.0+0x38>)
 8011be4:	601a      	str	r2, [r3, #0]
 8011be6:	4620      	mov	r0, r4
 8011be8:	2200      	movs	r2, #0
 8011bea:	2104      	movs	r1, #4
 8011bec:	f7ff ffa6 	bl	8011b3c <std>
 8011bf0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8011bf4:	2201      	movs	r2, #1
 8011bf6:	2109      	movs	r1, #9
 8011bf8:	f7ff ffa0 	bl	8011b3c <std>
 8011bfc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8011c00:	2202      	movs	r2, #2
 8011c02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c06:	2112      	movs	r1, #18
 8011c08:	f7ff bf98 	b.w	8011b3c <std>
 8011c0c:	240056b0 	.word	0x240056b0
 8011c10:	24005578 	.word	0x24005578
 8011c14:	08011b85 	.word	0x08011b85

08011c18 <__sfp_lock_acquire>:
 8011c18:	4801      	ldr	r0, [pc, #4]	; (8011c20 <__sfp_lock_acquire+0x8>)
 8011c1a:	f000 b9b9 	b.w	8011f90 <__retarget_lock_acquire_recursive>
 8011c1e:	bf00      	nop
 8011c20:	240056b9 	.word	0x240056b9

08011c24 <__sfp_lock_release>:
 8011c24:	4801      	ldr	r0, [pc, #4]	; (8011c2c <__sfp_lock_release+0x8>)
 8011c26:	f000 b9b4 	b.w	8011f92 <__retarget_lock_release_recursive>
 8011c2a:	bf00      	nop
 8011c2c:	240056b9 	.word	0x240056b9

08011c30 <__sinit>:
 8011c30:	b510      	push	{r4, lr}
 8011c32:	4604      	mov	r4, r0
 8011c34:	f7ff fff0 	bl	8011c18 <__sfp_lock_acquire>
 8011c38:	6a23      	ldr	r3, [r4, #32]
 8011c3a:	b11b      	cbz	r3, 8011c44 <__sinit+0x14>
 8011c3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c40:	f7ff bff0 	b.w	8011c24 <__sfp_lock_release>
 8011c44:	4b04      	ldr	r3, [pc, #16]	; (8011c58 <__sinit+0x28>)
 8011c46:	6223      	str	r3, [r4, #32]
 8011c48:	4b04      	ldr	r3, [pc, #16]	; (8011c5c <__sinit+0x2c>)
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d1f5      	bne.n	8011c3c <__sinit+0xc>
 8011c50:	f7ff ffc4 	bl	8011bdc <global_stdio_init.part.0>
 8011c54:	e7f2      	b.n	8011c3c <__sinit+0xc>
 8011c56:	bf00      	nop
 8011c58:	08011b9d 	.word	0x08011b9d
 8011c5c:	240056b0 	.word	0x240056b0

08011c60 <_fwalk_sglue>:
 8011c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c64:	4607      	mov	r7, r0
 8011c66:	4688      	mov	r8, r1
 8011c68:	4614      	mov	r4, r2
 8011c6a:	2600      	movs	r6, #0
 8011c6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011c70:	f1b9 0901 	subs.w	r9, r9, #1
 8011c74:	d505      	bpl.n	8011c82 <_fwalk_sglue+0x22>
 8011c76:	6824      	ldr	r4, [r4, #0]
 8011c78:	2c00      	cmp	r4, #0
 8011c7a:	d1f7      	bne.n	8011c6c <_fwalk_sglue+0xc>
 8011c7c:	4630      	mov	r0, r6
 8011c7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c82:	89ab      	ldrh	r3, [r5, #12]
 8011c84:	2b01      	cmp	r3, #1
 8011c86:	d907      	bls.n	8011c98 <_fwalk_sglue+0x38>
 8011c88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011c8c:	3301      	adds	r3, #1
 8011c8e:	d003      	beq.n	8011c98 <_fwalk_sglue+0x38>
 8011c90:	4629      	mov	r1, r5
 8011c92:	4638      	mov	r0, r7
 8011c94:	47c0      	blx	r8
 8011c96:	4306      	orrs	r6, r0
 8011c98:	3568      	adds	r5, #104	; 0x68
 8011c9a:	e7e9      	b.n	8011c70 <_fwalk_sglue+0x10>

08011c9c <sniprintf>:
 8011c9c:	b40c      	push	{r2, r3}
 8011c9e:	b530      	push	{r4, r5, lr}
 8011ca0:	4b17      	ldr	r3, [pc, #92]	; (8011d00 <sniprintf+0x64>)
 8011ca2:	1e0c      	subs	r4, r1, #0
 8011ca4:	681d      	ldr	r5, [r3, #0]
 8011ca6:	b09d      	sub	sp, #116	; 0x74
 8011ca8:	da08      	bge.n	8011cbc <sniprintf+0x20>
 8011caa:	238b      	movs	r3, #139	; 0x8b
 8011cac:	602b      	str	r3, [r5, #0]
 8011cae:	f04f 30ff 	mov.w	r0, #4294967295
 8011cb2:	b01d      	add	sp, #116	; 0x74
 8011cb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011cb8:	b002      	add	sp, #8
 8011cba:	4770      	bx	lr
 8011cbc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8011cc0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011cc4:	bf14      	ite	ne
 8011cc6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011cca:	4623      	moveq	r3, r4
 8011ccc:	9304      	str	r3, [sp, #16]
 8011cce:	9307      	str	r3, [sp, #28]
 8011cd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011cd4:	9002      	str	r0, [sp, #8]
 8011cd6:	9006      	str	r0, [sp, #24]
 8011cd8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011cdc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011cde:	ab21      	add	r3, sp, #132	; 0x84
 8011ce0:	a902      	add	r1, sp, #8
 8011ce2:	4628      	mov	r0, r5
 8011ce4:	9301      	str	r3, [sp, #4]
 8011ce6:	f002 fb05 	bl	80142f4 <_svfiprintf_r>
 8011cea:	1c43      	adds	r3, r0, #1
 8011cec:	bfbc      	itt	lt
 8011cee:	238b      	movlt	r3, #139	; 0x8b
 8011cf0:	602b      	strlt	r3, [r5, #0]
 8011cf2:	2c00      	cmp	r4, #0
 8011cf4:	d0dd      	beq.n	8011cb2 <sniprintf+0x16>
 8011cf6:	9b02      	ldr	r3, [sp, #8]
 8011cf8:	2200      	movs	r2, #0
 8011cfa:	701a      	strb	r2, [r3, #0]
 8011cfc:	e7d9      	b.n	8011cb2 <sniprintf+0x16>
 8011cfe:	bf00      	nop
 8011d00:	2400006c 	.word	0x2400006c

08011d04 <siprintf>:
 8011d04:	b40e      	push	{r1, r2, r3}
 8011d06:	b500      	push	{lr}
 8011d08:	b09c      	sub	sp, #112	; 0x70
 8011d0a:	ab1d      	add	r3, sp, #116	; 0x74
 8011d0c:	9002      	str	r0, [sp, #8]
 8011d0e:	9006      	str	r0, [sp, #24]
 8011d10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011d14:	4809      	ldr	r0, [pc, #36]	; (8011d3c <siprintf+0x38>)
 8011d16:	9107      	str	r1, [sp, #28]
 8011d18:	9104      	str	r1, [sp, #16]
 8011d1a:	4909      	ldr	r1, [pc, #36]	; (8011d40 <siprintf+0x3c>)
 8011d1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011d20:	9105      	str	r1, [sp, #20]
 8011d22:	6800      	ldr	r0, [r0, #0]
 8011d24:	9301      	str	r3, [sp, #4]
 8011d26:	a902      	add	r1, sp, #8
 8011d28:	f002 fae4 	bl	80142f4 <_svfiprintf_r>
 8011d2c:	9b02      	ldr	r3, [sp, #8]
 8011d2e:	2200      	movs	r2, #0
 8011d30:	701a      	strb	r2, [r3, #0]
 8011d32:	b01c      	add	sp, #112	; 0x70
 8011d34:	f85d eb04 	ldr.w	lr, [sp], #4
 8011d38:	b003      	add	sp, #12
 8011d3a:	4770      	bx	lr
 8011d3c:	2400006c 	.word	0x2400006c
 8011d40:	ffff0208 	.word	0xffff0208

08011d44 <__sread>:
 8011d44:	b510      	push	{r4, lr}
 8011d46:	460c      	mov	r4, r1
 8011d48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d4c:	f000 f8c2 	bl	8011ed4 <_read_r>
 8011d50:	2800      	cmp	r0, #0
 8011d52:	bfab      	itete	ge
 8011d54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011d56:	89a3      	ldrhlt	r3, [r4, #12]
 8011d58:	181b      	addge	r3, r3, r0
 8011d5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011d5e:	bfac      	ite	ge
 8011d60:	6563      	strge	r3, [r4, #84]	; 0x54
 8011d62:	81a3      	strhlt	r3, [r4, #12]
 8011d64:	bd10      	pop	{r4, pc}

08011d66 <__swrite>:
 8011d66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d6a:	461f      	mov	r7, r3
 8011d6c:	898b      	ldrh	r3, [r1, #12]
 8011d6e:	05db      	lsls	r3, r3, #23
 8011d70:	4605      	mov	r5, r0
 8011d72:	460c      	mov	r4, r1
 8011d74:	4616      	mov	r6, r2
 8011d76:	d505      	bpl.n	8011d84 <__swrite+0x1e>
 8011d78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d7c:	2302      	movs	r3, #2
 8011d7e:	2200      	movs	r2, #0
 8011d80:	f000 f896 	bl	8011eb0 <_lseek_r>
 8011d84:	89a3      	ldrh	r3, [r4, #12]
 8011d86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011d8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011d8e:	81a3      	strh	r3, [r4, #12]
 8011d90:	4632      	mov	r2, r6
 8011d92:	463b      	mov	r3, r7
 8011d94:	4628      	mov	r0, r5
 8011d96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011d9a:	f000 b8bd 	b.w	8011f18 <_write_r>

08011d9e <__sseek>:
 8011d9e:	b510      	push	{r4, lr}
 8011da0:	460c      	mov	r4, r1
 8011da2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011da6:	f000 f883 	bl	8011eb0 <_lseek_r>
 8011daa:	1c43      	adds	r3, r0, #1
 8011dac:	89a3      	ldrh	r3, [r4, #12]
 8011dae:	bf15      	itete	ne
 8011db0:	6560      	strne	r0, [r4, #84]	; 0x54
 8011db2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011db6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011dba:	81a3      	strheq	r3, [r4, #12]
 8011dbc:	bf18      	it	ne
 8011dbe:	81a3      	strhne	r3, [r4, #12]
 8011dc0:	bd10      	pop	{r4, pc}

08011dc2 <__sclose>:
 8011dc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011dc6:	f000 b80d 	b.w	8011de4 <_close_r>

08011dca <memset>:
 8011dca:	4402      	add	r2, r0
 8011dcc:	4603      	mov	r3, r0
 8011dce:	4293      	cmp	r3, r2
 8011dd0:	d100      	bne.n	8011dd4 <memset+0xa>
 8011dd2:	4770      	bx	lr
 8011dd4:	f803 1b01 	strb.w	r1, [r3], #1
 8011dd8:	e7f9      	b.n	8011dce <memset+0x4>
	...

08011ddc <_localeconv_r>:
 8011ddc:	4800      	ldr	r0, [pc, #0]	; (8011de0 <_localeconv_r+0x4>)
 8011dde:	4770      	bx	lr
 8011de0:	24000160 	.word	0x24000160

08011de4 <_close_r>:
 8011de4:	b538      	push	{r3, r4, r5, lr}
 8011de6:	4d06      	ldr	r5, [pc, #24]	; (8011e00 <_close_r+0x1c>)
 8011de8:	2300      	movs	r3, #0
 8011dea:	4604      	mov	r4, r0
 8011dec:	4608      	mov	r0, r1
 8011dee:	602b      	str	r3, [r5, #0]
 8011df0:	f7f0 fd47 	bl	8002882 <_close>
 8011df4:	1c43      	adds	r3, r0, #1
 8011df6:	d102      	bne.n	8011dfe <_close_r+0x1a>
 8011df8:	682b      	ldr	r3, [r5, #0]
 8011dfa:	b103      	cbz	r3, 8011dfe <_close_r+0x1a>
 8011dfc:	6023      	str	r3, [r4, #0]
 8011dfe:	bd38      	pop	{r3, r4, r5, pc}
 8011e00:	240056b4 	.word	0x240056b4

08011e04 <_reclaim_reent>:
 8011e04:	4b29      	ldr	r3, [pc, #164]	; (8011eac <_reclaim_reent+0xa8>)
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	4283      	cmp	r3, r0
 8011e0a:	b570      	push	{r4, r5, r6, lr}
 8011e0c:	4604      	mov	r4, r0
 8011e0e:	d04b      	beq.n	8011ea8 <_reclaim_reent+0xa4>
 8011e10:	69c3      	ldr	r3, [r0, #28]
 8011e12:	b143      	cbz	r3, 8011e26 <_reclaim_reent+0x22>
 8011e14:	68db      	ldr	r3, [r3, #12]
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d144      	bne.n	8011ea4 <_reclaim_reent+0xa0>
 8011e1a:	69e3      	ldr	r3, [r4, #28]
 8011e1c:	6819      	ldr	r1, [r3, #0]
 8011e1e:	b111      	cbz	r1, 8011e26 <_reclaim_reent+0x22>
 8011e20:	4620      	mov	r0, r4
 8011e22:	f000 fec1 	bl	8012ba8 <_free_r>
 8011e26:	6961      	ldr	r1, [r4, #20]
 8011e28:	b111      	cbz	r1, 8011e30 <_reclaim_reent+0x2c>
 8011e2a:	4620      	mov	r0, r4
 8011e2c:	f000 febc 	bl	8012ba8 <_free_r>
 8011e30:	69e1      	ldr	r1, [r4, #28]
 8011e32:	b111      	cbz	r1, 8011e3a <_reclaim_reent+0x36>
 8011e34:	4620      	mov	r0, r4
 8011e36:	f000 feb7 	bl	8012ba8 <_free_r>
 8011e3a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8011e3c:	b111      	cbz	r1, 8011e44 <_reclaim_reent+0x40>
 8011e3e:	4620      	mov	r0, r4
 8011e40:	f000 feb2 	bl	8012ba8 <_free_r>
 8011e44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011e46:	b111      	cbz	r1, 8011e4e <_reclaim_reent+0x4a>
 8011e48:	4620      	mov	r0, r4
 8011e4a:	f000 fead 	bl	8012ba8 <_free_r>
 8011e4e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011e50:	b111      	cbz	r1, 8011e58 <_reclaim_reent+0x54>
 8011e52:	4620      	mov	r0, r4
 8011e54:	f000 fea8 	bl	8012ba8 <_free_r>
 8011e58:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011e5a:	b111      	cbz	r1, 8011e62 <_reclaim_reent+0x5e>
 8011e5c:	4620      	mov	r0, r4
 8011e5e:	f000 fea3 	bl	8012ba8 <_free_r>
 8011e62:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8011e64:	b111      	cbz	r1, 8011e6c <_reclaim_reent+0x68>
 8011e66:	4620      	mov	r0, r4
 8011e68:	f000 fe9e 	bl	8012ba8 <_free_r>
 8011e6c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8011e6e:	b111      	cbz	r1, 8011e76 <_reclaim_reent+0x72>
 8011e70:	4620      	mov	r0, r4
 8011e72:	f000 fe99 	bl	8012ba8 <_free_r>
 8011e76:	6a23      	ldr	r3, [r4, #32]
 8011e78:	b1b3      	cbz	r3, 8011ea8 <_reclaim_reent+0xa4>
 8011e7a:	4620      	mov	r0, r4
 8011e7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011e80:	4718      	bx	r3
 8011e82:	5949      	ldr	r1, [r1, r5]
 8011e84:	b941      	cbnz	r1, 8011e98 <_reclaim_reent+0x94>
 8011e86:	3504      	adds	r5, #4
 8011e88:	69e3      	ldr	r3, [r4, #28]
 8011e8a:	2d80      	cmp	r5, #128	; 0x80
 8011e8c:	68d9      	ldr	r1, [r3, #12]
 8011e8e:	d1f8      	bne.n	8011e82 <_reclaim_reent+0x7e>
 8011e90:	4620      	mov	r0, r4
 8011e92:	f000 fe89 	bl	8012ba8 <_free_r>
 8011e96:	e7c0      	b.n	8011e1a <_reclaim_reent+0x16>
 8011e98:	680e      	ldr	r6, [r1, #0]
 8011e9a:	4620      	mov	r0, r4
 8011e9c:	f000 fe84 	bl	8012ba8 <_free_r>
 8011ea0:	4631      	mov	r1, r6
 8011ea2:	e7ef      	b.n	8011e84 <_reclaim_reent+0x80>
 8011ea4:	2500      	movs	r5, #0
 8011ea6:	e7ef      	b.n	8011e88 <_reclaim_reent+0x84>
 8011ea8:	bd70      	pop	{r4, r5, r6, pc}
 8011eaa:	bf00      	nop
 8011eac:	2400006c 	.word	0x2400006c

08011eb0 <_lseek_r>:
 8011eb0:	b538      	push	{r3, r4, r5, lr}
 8011eb2:	4d07      	ldr	r5, [pc, #28]	; (8011ed0 <_lseek_r+0x20>)
 8011eb4:	4604      	mov	r4, r0
 8011eb6:	4608      	mov	r0, r1
 8011eb8:	4611      	mov	r1, r2
 8011eba:	2200      	movs	r2, #0
 8011ebc:	602a      	str	r2, [r5, #0]
 8011ebe:	461a      	mov	r2, r3
 8011ec0:	f7f0 fd06 	bl	80028d0 <_lseek>
 8011ec4:	1c43      	adds	r3, r0, #1
 8011ec6:	d102      	bne.n	8011ece <_lseek_r+0x1e>
 8011ec8:	682b      	ldr	r3, [r5, #0]
 8011eca:	b103      	cbz	r3, 8011ece <_lseek_r+0x1e>
 8011ecc:	6023      	str	r3, [r4, #0]
 8011ece:	bd38      	pop	{r3, r4, r5, pc}
 8011ed0:	240056b4 	.word	0x240056b4

08011ed4 <_read_r>:
 8011ed4:	b538      	push	{r3, r4, r5, lr}
 8011ed6:	4d07      	ldr	r5, [pc, #28]	; (8011ef4 <_read_r+0x20>)
 8011ed8:	4604      	mov	r4, r0
 8011eda:	4608      	mov	r0, r1
 8011edc:	4611      	mov	r1, r2
 8011ede:	2200      	movs	r2, #0
 8011ee0:	602a      	str	r2, [r5, #0]
 8011ee2:	461a      	mov	r2, r3
 8011ee4:	f7f0 fc94 	bl	8002810 <_read>
 8011ee8:	1c43      	adds	r3, r0, #1
 8011eea:	d102      	bne.n	8011ef2 <_read_r+0x1e>
 8011eec:	682b      	ldr	r3, [r5, #0]
 8011eee:	b103      	cbz	r3, 8011ef2 <_read_r+0x1e>
 8011ef0:	6023      	str	r3, [r4, #0]
 8011ef2:	bd38      	pop	{r3, r4, r5, pc}
 8011ef4:	240056b4 	.word	0x240056b4

08011ef8 <_sbrk_r>:
 8011ef8:	b538      	push	{r3, r4, r5, lr}
 8011efa:	4d06      	ldr	r5, [pc, #24]	; (8011f14 <_sbrk_r+0x1c>)
 8011efc:	2300      	movs	r3, #0
 8011efe:	4604      	mov	r4, r0
 8011f00:	4608      	mov	r0, r1
 8011f02:	602b      	str	r3, [r5, #0]
 8011f04:	f7f0 fcf2 	bl	80028ec <_sbrk>
 8011f08:	1c43      	adds	r3, r0, #1
 8011f0a:	d102      	bne.n	8011f12 <_sbrk_r+0x1a>
 8011f0c:	682b      	ldr	r3, [r5, #0]
 8011f0e:	b103      	cbz	r3, 8011f12 <_sbrk_r+0x1a>
 8011f10:	6023      	str	r3, [r4, #0]
 8011f12:	bd38      	pop	{r3, r4, r5, pc}
 8011f14:	240056b4 	.word	0x240056b4

08011f18 <_write_r>:
 8011f18:	b538      	push	{r3, r4, r5, lr}
 8011f1a:	4d07      	ldr	r5, [pc, #28]	; (8011f38 <_write_r+0x20>)
 8011f1c:	4604      	mov	r4, r0
 8011f1e:	4608      	mov	r0, r1
 8011f20:	4611      	mov	r1, r2
 8011f22:	2200      	movs	r2, #0
 8011f24:	602a      	str	r2, [r5, #0]
 8011f26:	461a      	mov	r2, r3
 8011f28:	f7f0 fc8f 	bl	800284a <_write>
 8011f2c:	1c43      	adds	r3, r0, #1
 8011f2e:	d102      	bne.n	8011f36 <_write_r+0x1e>
 8011f30:	682b      	ldr	r3, [r5, #0]
 8011f32:	b103      	cbz	r3, 8011f36 <_write_r+0x1e>
 8011f34:	6023      	str	r3, [r4, #0]
 8011f36:	bd38      	pop	{r3, r4, r5, pc}
 8011f38:	240056b4 	.word	0x240056b4

08011f3c <__errno>:
 8011f3c:	4b01      	ldr	r3, [pc, #4]	; (8011f44 <__errno+0x8>)
 8011f3e:	6818      	ldr	r0, [r3, #0]
 8011f40:	4770      	bx	lr
 8011f42:	bf00      	nop
 8011f44:	2400006c 	.word	0x2400006c

08011f48 <__libc_init_array>:
 8011f48:	b570      	push	{r4, r5, r6, lr}
 8011f4a:	4d0d      	ldr	r5, [pc, #52]	; (8011f80 <__libc_init_array+0x38>)
 8011f4c:	4c0d      	ldr	r4, [pc, #52]	; (8011f84 <__libc_init_array+0x3c>)
 8011f4e:	1b64      	subs	r4, r4, r5
 8011f50:	10a4      	asrs	r4, r4, #2
 8011f52:	2600      	movs	r6, #0
 8011f54:	42a6      	cmp	r6, r4
 8011f56:	d109      	bne.n	8011f6c <__libc_init_array+0x24>
 8011f58:	4d0b      	ldr	r5, [pc, #44]	; (8011f88 <__libc_init_array+0x40>)
 8011f5a:	4c0c      	ldr	r4, [pc, #48]	; (8011f8c <__libc_init_array+0x44>)
 8011f5c:	f003 fa48 	bl	80153f0 <_init>
 8011f60:	1b64      	subs	r4, r4, r5
 8011f62:	10a4      	asrs	r4, r4, #2
 8011f64:	2600      	movs	r6, #0
 8011f66:	42a6      	cmp	r6, r4
 8011f68:	d105      	bne.n	8011f76 <__libc_init_array+0x2e>
 8011f6a:	bd70      	pop	{r4, r5, r6, pc}
 8011f6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f70:	4798      	blx	r3
 8011f72:	3601      	adds	r6, #1
 8011f74:	e7ee      	b.n	8011f54 <__libc_init_array+0xc>
 8011f76:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f7a:	4798      	blx	r3
 8011f7c:	3601      	adds	r6, #1
 8011f7e:	e7f2      	b.n	8011f66 <__libc_init_array+0x1e>
 8011f80:	08015958 	.word	0x08015958
 8011f84:	08015958 	.word	0x08015958
 8011f88:	08015958 	.word	0x08015958
 8011f8c:	0801595c 	.word	0x0801595c

08011f90 <__retarget_lock_acquire_recursive>:
 8011f90:	4770      	bx	lr

08011f92 <__retarget_lock_release_recursive>:
 8011f92:	4770      	bx	lr

08011f94 <memcpy>:
 8011f94:	440a      	add	r2, r1
 8011f96:	4291      	cmp	r1, r2
 8011f98:	f100 33ff 	add.w	r3, r0, #4294967295
 8011f9c:	d100      	bne.n	8011fa0 <memcpy+0xc>
 8011f9e:	4770      	bx	lr
 8011fa0:	b510      	push	{r4, lr}
 8011fa2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011fa6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011faa:	4291      	cmp	r1, r2
 8011fac:	d1f9      	bne.n	8011fa2 <memcpy+0xe>
 8011fae:	bd10      	pop	{r4, pc}

08011fb0 <nanf>:
 8011fb0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011fb8 <nanf+0x8>
 8011fb4:	4770      	bx	lr
 8011fb6:	bf00      	nop
 8011fb8:	7fc00000 	.word	0x7fc00000

08011fbc <quorem>:
 8011fbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fc0:	6903      	ldr	r3, [r0, #16]
 8011fc2:	690c      	ldr	r4, [r1, #16]
 8011fc4:	42a3      	cmp	r3, r4
 8011fc6:	4607      	mov	r7, r0
 8011fc8:	db7e      	blt.n	80120c8 <quorem+0x10c>
 8011fca:	3c01      	subs	r4, #1
 8011fcc:	f101 0814 	add.w	r8, r1, #20
 8011fd0:	f100 0514 	add.w	r5, r0, #20
 8011fd4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011fd8:	9301      	str	r3, [sp, #4]
 8011fda:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011fde:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011fe2:	3301      	adds	r3, #1
 8011fe4:	429a      	cmp	r2, r3
 8011fe6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011fea:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011fee:	fbb2 f6f3 	udiv	r6, r2, r3
 8011ff2:	d331      	bcc.n	8012058 <quorem+0x9c>
 8011ff4:	f04f 0e00 	mov.w	lr, #0
 8011ff8:	4640      	mov	r0, r8
 8011ffa:	46ac      	mov	ip, r5
 8011ffc:	46f2      	mov	sl, lr
 8011ffe:	f850 2b04 	ldr.w	r2, [r0], #4
 8012002:	b293      	uxth	r3, r2
 8012004:	fb06 e303 	mla	r3, r6, r3, lr
 8012008:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801200c:	0c1a      	lsrs	r2, r3, #16
 801200e:	b29b      	uxth	r3, r3
 8012010:	ebaa 0303 	sub.w	r3, sl, r3
 8012014:	f8dc a000 	ldr.w	sl, [ip]
 8012018:	fa13 f38a 	uxtah	r3, r3, sl
 801201c:	fb06 220e 	mla	r2, r6, lr, r2
 8012020:	9300      	str	r3, [sp, #0]
 8012022:	9b00      	ldr	r3, [sp, #0]
 8012024:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012028:	b292      	uxth	r2, r2
 801202a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801202e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012032:	f8bd 3000 	ldrh.w	r3, [sp]
 8012036:	4581      	cmp	r9, r0
 8012038:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801203c:	f84c 3b04 	str.w	r3, [ip], #4
 8012040:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012044:	d2db      	bcs.n	8011ffe <quorem+0x42>
 8012046:	f855 300b 	ldr.w	r3, [r5, fp]
 801204a:	b92b      	cbnz	r3, 8012058 <quorem+0x9c>
 801204c:	9b01      	ldr	r3, [sp, #4]
 801204e:	3b04      	subs	r3, #4
 8012050:	429d      	cmp	r5, r3
 8012052:	461a      	mov	r2, r3
 8012054:	d32c      	bcc.n	80120b0 <quorem+0xf4>
 8012056:	613c      	str	r4, [r7, #16]
 8012058:	4638      	mov	r0, r7
 801205a:	f001 f8b7 	bl	80131cc <__mcmp>
 801205e:	2800      	cmp	r0, #0
 8012060:	db22      	blt.n	80120a8 <quorem+0xec>
 8012062:	3601      	adds	r6, #1
 8012064:	4629      	mov	r1, r5
 8012066:	2000      	movs	r0, #0
 8012068:	f858 2b04 	ldr.w	r2, [r8], #4
 801206c:	f8d1 c000 	ldr.w	ip, [r1]
 8012070:	b293      	uxth	r3, r2
 8012072:	1ac3      	subs	r3, r0, r3
 8012074:	0c12      	lsrs	r2, r2, #16
 8012076:	fa13 f38c 	uxtah	r3, r3, ip
 801207a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801207e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012082:	b29b      	uxth	r3, r3
 8012084:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012088:	45c1      	cmp	r9, r8
 801208a:	f841 3b04 	str.w	r3, [r1], #4
 801208e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012092:	d2e9      	bcs.n	8012068 <quorem+0xac>
 8012094:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012098:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801209c:	b922      	cbnz	r2, 80120a8 <quorem+0xec>
 801209e:	3b04      	subs	r3, #4
 80120a0:	429d      	cmp	r5, r3
 80120a2:	461a      	mov	r2, r3
 80120a4:	d30a      	bcc.n	80120bc <quorem+0x100>
 80120a6:	613c      	str	r4, [r7, #16]
 80120a8:	4630      	mov	r0, r6
 80120aa:	b003      	add	sp, #12
 80120ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120b0:	6812      	ldr	r2, [r2, #0]
 80120b2:	3b04      	subs	r3, #4
 80120b4:	2a00      	cmp	r2, #0
 80120b6:	d1ce      	bne.n	8012056 <quorem+0x9a>
 80120b8:	3c01      	subs	r4, #1
 80120ba:	e7c9      	b.n	8012050 <quorem+0x94>
 80120bc:	6812      	ldr	r2, [r2, #0]
 80120be:	3b04      	subs	r3, #4
 80120c0:	2a00      	cmp	r2, #0
 80120c2:	d1f0      	bne.n	80120a6 <quorem+0xea>
 80120c4:	3c01      	subs	r4, #1
 80120c6:	e7eb      	b.n	80120a0 <quorem+0xe4>
 80120c8:	2000      	movs	r0, #0
 80120ca:	e7ee      	b.n	80120aa <quorem+0xee>
 80120cc:	0000      	movs	r0, r0
	...

080120d0 <_dtoa_r>:
 80120d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120d4:	ed2d 8b02 	vpush	{d8}
 80120d8:	69c5      	ldr	r5, [r0, #28]
 80120da:	b091      	sub	sp, #68	; 0x44
 80120dc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80120e0:	ec59 8b10 	vmov	r8, r9, d0
 80120e4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80120e6:	9106      	str	r1, [sp, #24]
 80120e8:	4606      	mov	r6, r0
 80120ea:	9208      	str	r2, [sp, #32]
 80120ec:	930c      	str	r3, [sp, #48]	; 0x30
 80120ee:	b975      	cbnz	r5, 801210e <_dtoa_r+0x3e>
 80120f0:	2010      	movs	r0, #16
 80120f2:	f7fe fe27 	bl	8010d44 <malloc>
 80120f6:	4602      	mov	r2, r0
 80120f8:	61f0      	str	r0, [r6, #28]
 80120fa:	b920      	cbnz	r0, 8012106 <_dtoa_r+0x36>
 80120fc:	4ba6      	ldr	r3, [pc, #664]	; (8012398 <_dtoa_r+0x2c8>)
 80120fe:	21ef      	movs	r1, #239	; 0xef
 8012100:	48a6      	ldr	r0, [pc, #664]	; (801239c <_dtoa_r+0x2cc>)
 8012102:	f002 fad9 	bl	80146b8 <__assert_func>
 8012106:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801210a:	6005      	str	r5, [r0, #0]
 801210c:	60c5      	str	r5, [r0, #12]
 801210e:	69f3      	ldr	r3, [r6, #28]
 8012110:	6819      	ldr	r1, [r3, #0]
 8012112:	b151      	cbz	r1, 801212a <_dtoa_r+0x5a>
 8012114:	685a      	ldr	r2, [r3, #4]
 8012116:	604a      	str	r2, [r1, #4]
 8012118:	2301      	movs	r3, #1
 801211a:	4093      	lsls	r3, r2
 801211c:	608b      	str	r3, [r1, #8]
 801211e:	4630      	mov	r0, r6
 8012120:	f000 fdce 	bl	8012cc0 <_Bfree>
 8012124:	69f3      	ldr	r3, [r6, #28]
 8012126:	2200      	movs	r2, #0
 8012128:	601a      	str	r2, [r3, #0]
 801212a:	f1b9 0300 	subs.w	r3, r9, #0
 801212e:	bfbb      	ittet	lt
 8012130:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012134:	9303      	strlt	r3, [sp, #12]
 8012136:	2300      	movge	r3, #0
 8012138:	2201      	movlt	r2, #1
 801213a:	bfac      	ite	ge
 801213c:	6023      	strge	r3, [r4, #0]
 801213e:	6022      	strlt	r2, [r4, #0]
 8012140:	4b97      	ldr	r3, [pc, #604]	; (80123a0 <_dtoa_r+0x2d0>)
 8012142:	9c03      	ldr	r4, [sp, #12]
 8012144:	43a3      	bics	r3, r4
 8012146:	d11c      	bne.n	8012182 <_dtoa_r+0xb2>
 8012148:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801214a:	f242 730f 	movw	r3, #9999	; 0x270f
 801214e:	6013      	str	r3, [r2, #0]
 8012150:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8012154:	ea53 0308 	orrs.w	r3, r3, r8
 8012158:	f000 84fb 	beq.w	8012b52 <_dtoa_r+0xa82>
 801215c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801215e:	b963      	cbnz	r3, 801217a <_dtoa_r+0xaa>
 8012160:	4b90      	ldr	r3, [pc, #576]	; (80123a4 <_dtoa_r+0x2d4>)
 8012162:	e020      	b.n	80121a6 <_dtoa_r+0xd6>
 8012164:	4b90      	ldr	r3, [pc, #576]	; (80123a8 <_dtoa_r+0x2d8>)
 8012166:	9301      	str	r3, [sp, #4]
 8012168:	3308      	adds	r3, #8
 801216a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801216c:	6013      	str	r3, [r2, #0]
 801216e:	9801      	ldr	r0, [sp, #4]
 8012170:	b011      	add	sp, #68	; 0x44
 8012172:	ecbd 8b02 	vpop	{d8}
 8012176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801217a:	4b8a      	ldr	r3, [pc, #552]	; (80123a4 <_dtoa_r+0x2d4>)
 801217c:	9301      	str	r3, [sp, #4]
 801217e:	3303      	adds	r3, #3
 8012180:	e7f3      	b.n	801216a <_dtoa_r+0x9a>
 8012182:	ed9d 8b02 	vldr	d8, [sp, #8]
 8012186:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801218a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801218e:	d10c      	bne.n	80121aa <_dtoa_r+0xda>
 8012190:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012192:	2301      	movs	r3, #1
 8012194:	6013      	str	r3, [r2, #0]
 8012196:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012198:	2b00      	cmp	r3, #0
 801219a:	f000 84d7 	beq.w	8012b4c <_dtoa_r+0xa7c>
 801219e:	4b83      	ldr	r3, [pc, #524]	; (80123ac <_dtoa_r+0x2dc>)
 80121a0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80121a2:	6013      	str	r3, [r2, #0]
 80121a4:	3b01      	subs	r3, #1
 80121a6:	9301      	str	r3, [sp, #4]
 80121a8:	e7e1      	b.n	801216e <_dtoa_r+0x9e>
 80121aa:	aa0e      	add	r2, sp, #56	; 0x38
 80121ac:	a90f      	add	r1, sp, #60	; 0x3c
 80121ae:	4630      	mov	r0, r6
 80121b0:	eeb0 0b48 	vmov.f64	d0, d8
 80121b4:	f001 f920 	bl	80133f8 <__d2b>
 80121b8:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80121bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80121be:	4605      	mov	r5, r0
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d046      	beq.n	8012252 <_dtoa_r+0x182>
 80121c4:	eeb0 7b48 	vmov.f64	d7, d8
 80121c8:	ee18 1a90 	vmov	r1, s17
 80121cc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80121d0:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 80121d4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80121d8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80121dc:	2000      	movs	r0, #0
 80121de:	ee07 1a90 	vmov	s15, r1
 80121e2:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 80121e6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8012380 <_dtoa_r+0x2b0>
 80121ea:	ee37 7b46 	vsub.f64	d7, d7, d6
 80121ee:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8012388 <_dtoa_r+0x2b8>
 80121f2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80121f6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8012390 <_dtoa_r+0x2c0>
 80121fa:	ee07 3a90 	vmov	s15, r3
 80121fe:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8012202:	eeb0 7b46 	vmov.f64	d7, d6
 8012206:	eea4 7b05 	vfma.f64	d7, d4, d5
 801220a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801220e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8012212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012216:	ee16 ba90 	vmov	fp, s13
 801221a:	9009      	str	r0, [sp, #36]	; 0x24
 801221c:	d508      	bpl.n	8012230 <_dtoa_r+0x160>
 801221e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8012222:	eeb4 6b47 	vcmp.f64	d6, d7
 8012226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801222a:	bf18      	it	ne
 801222c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8012230:	f1bb 0f16 	cmp.w	fp, #22
 8012234:	d82b      	bhi.n	801228e <_dtoa_r+0x1be>
 8012236:	495e      	ldr	r1, [pc, #376]	; (80123b0 <_dtoa_r+0x2e0>)
 8012238:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 801223c:	ed91 7b00 	vldr	d7, [r1]
 8012240:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8012244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012248:	d501      	bpl.n	801224e <_dtoa_r+0x17e>
 801224a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801224e:	2100      	movs	r1, #0
 8012250:	e01e      	b.n	8012290 <_dtoa_r+0x1c0>
 8012252:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012254:	4413      	add	r3, r2
 8012256:	f203 4132 	addw	r1, r3, #1074	; 0x432
 801225a:	2920      	cmp	r1, #32
 801225c:	bfc1      	itttt	gt
 801225e:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8012262:	408c      	lslgt	r4, r1
 8012264:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8012268:	fa28 f101 	lsrgt.w	r1, r8, r1
 801226c:	bfd6      	itet	le
 801226e:	f1c1 0120 	rsble	r1, r1, #32
 8012272:	4321      	orrgt	r1, r4
 8012274:	fa08 f101 	lslle.w	r1, r8, r1
 8012278:	ee07 1a90 	vmov	s15, r1
 801227c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012280:	3b01      	subs	r3, #1
 8012282:	ee17 1a90 	vmov	r1, s15
 8012286:	2001      	movs	r0, #1
 8012288:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801228c:	e7a7      	b.n	80121de <_dtoa_r+0x10e>
 801228e:	2101      	movs	r1, #1
 8012290:	1ad2      	subs	r2, r2, r3
 8012292:	1e53      	subs	r3, r2, #1
 8012294:	9305      	str	r3, [sp, #20]
 8012296:	bf45      	ittet	mi
 8012298:	f1c2 0301 	rsbmi	r3, r2, #1
 801229c:	9304      	strmi	r3, [sp, #16]
 801229e:	2300      	movpl	r3, #0
 80122a0:	2300      	movmi	r3, #0
 80122a2:	bf4c      	ite	mi
 80122a4:	9305      	strmi	r3, [sp, #20]
 80122a6:	9304      	strpl	r3, [sp, #16]
 80122a8:	f1bb 0f00 	cmp.w	fp, #0
 80122ac:	910b      	str	r1, [sp, #44]	; 0x2c
 80122ae:	db18      	blt.n	80122e2 <_dtoa_r+0x212>
 80122b0:	9b05      	ldr	r3, [sp, #20]
 80122b2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80122b6:	445b      	add	r3, fp
 80122b8:	9305      	str	r3, [sp, #20]
 80122ba:	2300      	movs	r3, #0
 80122bc:	9a06      	ldr	r2, [sp, #24]
 80122be:	2a09      	cmp	r2, #9
 80122c0:	d848      	bhi.n	8012354 <_dtoa_r+0x284>
 80122c2:	2a05      	cmp	r2, #5
 80122c4:	bfc4      	itt	gt
 80122c6:	3a04      	subgt	r2, #4
 80122c8:	9206      	strgt	r2, [sp, #24]
 80122ca:	9a06      	ldr	r2, [sp, #24]
 80122cc:	f1a2 0202 	sub.w	r2, r2, #2
 80122d0:	bfcc      	ite	gt
 80122d2:	2400      	movgt	r4, #0
 80122d4:	2401      	movle	r4, #1
 80122d6:	2a03      	cmp	r2, #3
 80122d8:	d847      	bhi.n	801236a <_dtoa_r+0x29a>
 80122da:	e8df f002 	tbb	[pc, r2]
 80122de:	2d0b      	.short	0x2d0b
 80122e0:	392b      	.short	0x392b
 80122e2:	9b04      	ldr	r3, [sp, #16]
 80122e4:	2200      	movs	r2, #0
 80122e6:	eba3 030b 	sub.w	r3, r3, fp
 80122ea:	9304      	str	r3, [sp, #16]
 80122ec:	920a      	str	r2, [sp, #40]	; 0x28
 80122ee:	f1cb 0300 	rsb	r3, fp, #0
 80122f2:	e7e3      	b.n	80122bc <_dtoa_r+0x1ec>
 80122f4:	2200      	movs	r2, #0
 80122f6:	9207      	str	r2, [sp, #28]
 80122f8:	9a08      	ldr	r2, [sp, #32]
 80122fa:	2a00      	cmp	r2, #0
 80122fc:	dc38      	bgt.n	8012370 <_dtoa_r+0x2a0>
 80122fe:	f04f 0a01 	mov.w	sl, #1
 8012302:	46d1      	mov	r9, sl
 8012304:	4652      	mov	r2, sl
 8012306:	f8cd a020 	str.w	sl, [sp, #32]
 801230a:	69f7      	ldr	r7, [r6, #28]
 801230c:	2100      	movs	r1, #0
 801230e:	2004      	movs	r0, #4
 8012310:	f100 0c14 	add.w	ip, r0, #20
 8012314:	4594      	cmp	ip, r2
 8012316:	d930      	bls.n	801237a <_dtoa_r+0x2aa>
 8012318:	6079      	str	r1, [r7, #4]
 801231a:	4630      	mov	r0, r6
 801231c:	930d      	str	r3, [sp, #52]	; 0x34
 801231e:	f000 fc8f 	bl	8012c40 <_Balloc>
 8012322:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012324:	9001      	str	r0, [sp, #4]
 8012326:	4602      	mov	r2, r0
 8012328:	2800      	cmp	r0, #0
 801232a:	d145      	bne.n	80123b8 <_dtoa_r+0x2e8>
 801232c:	4b21      	ldr	r3, [pc, #132]	; (80123b4 <_dtoa_r+0x2e4>)
 801232e:	f240 11af 	movw	r1, #431	; 0x1af
 8012332:	e6e5      	b.n	8012100 <_dtoa_r+0x30>
 8012334:	2201      	movs	r2, #1
 8012336:	e7de      	b.n	80122f6 <_dtoa_r+0x226>
 8012338:	2200      	movs	r2, #0
 801233a:	9207      	str	r2, [sp, #28]
 801233c:	9a08      	ldr	r2, [sp, #32]
 801233e:	eb0b 0a02 	add.w	sl, fp, r2
 8012342:	f10a 0901 	add.w	r9, sl, #1
 8012346:	464a      	mov	r2, r9
 8012348:	2a01      	cmp	r2, #1
 801234a:	bfb8      	it	lt
 801234c:	2201      	movlt	r2, #1
 801234e:	e7dc      	b.n	801230a <_dtoa_r+0x23a>
 8012350:	2201      	movs	r2, #1
 8012352:	e7f2      	b.n	801233a <_dtoa_r+0x26a>
 8012354:	2401      	movs	r4, #1
 8012356:	2200      	movs	r2, #0
 8012358:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801235c:	f04f 3aff 	mov.w	sl, #4294967295
 8012360:	2100      	movs	r1, #0
 8012362:	46d1      	mov	r9, sl
 8012364:	2212      	movs	r2, #18
 8012366:	9108      	str	r1, [sp, #32]
 8012368:	e7cf      	b.n	801230a <_dtoa_r+0x23a>
 801236a:	2201      	movs	r2, #1
 801236c:	9207      	str	r2, [sp, #28]
 801236e:	e7f5      	b.n	801235c <_dtoa_r+0x28c>
 8012370:	f8dd a020 	ldr.w	sl, [sp, #32]
 8012374:	46d1      	mov	r9, sl
 8012376:	4652      	mov	r2, sl
 8012378:	e7c7      	b.n	801230a <_dtoa_r+0x23a>
 801237a:	3101      	adds	r1, #1
 801237c:	0040      	lsls	r0, r0, #1
 801237e:	e7c7      	b.n	8012310 <_dtoa_r+0x240>
 8012380:	636f4361 	.word	0x636f4361
 8012384:	3fd287a7 	.word	0x3fd287a7
 8012388:	8b60c8b3 	.word	0x8b60c8b3
 801238c:	3fc68a28 	.word	0x3fc68a28
 8012390:	509f79fb 	.word	0x509f79fb
 8012394:	3fd34413 	.word	0x3fd34413
 8012398:	0801556e 	.word	0x0801556e
 801239c:	08015585 	.word	0x08015585
 80123a0:	7ff00000 	.word	0x7ff00000
 80123a4:	0801556a 	.word	0x0801556a
 80123a8:	08015561 	.word	0x08015561
 80123ac:	08015539 	.word	0x08015539
 80123b0:	08015670 	.word	0x08015670
 80123b4:	080155dd 	.word	0x080155dd
 80123b8:	69f2      	ldr	r2, [r6, #28]
 80123ba:	9901      	ldr	r1, [sp, #4]
 80123bc:	6011      	str	r1, [r2, #0]
 80123be:	f1b9 0f0e 	cmp.w	r9, #14
 80123c2:	d86c      	bhi.n	801249e <_dtoa_r+0x3ce>
 80123c4:	2c00      	cmp	r4, #0
 80123c6:	d06a      	beq.n	801249e <_dtoa_r+0x3ce>
 80123c8:	f1bb 0f00 	cmp.w	fp, #0
 80123cc:	f340 80a0 	ble.w	8012510 <_dtoa_r+0x440>
 80123d0:	4ac1      	ldr	r2, [pc, #772]	; (80126d8 <_dtoa_r+0x608>)
 80123d2:	f00b 010f 	and.w	r1, fp, #15
 80123d6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80123da:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80123de:	ed92 7b00 	vldr	d7, [r2]
 80123e2:	ea4f 122b 	mov.w	r2, fp, asr #4
 80123e6:	f000 8087 	beq.w	80124f8 <_dtoa_r+0x428>
 80123ea:	49bc      	ldr	r1, [pc, #752]	; (80126dc <_dtoa_r+0x60c>)
 80123ec:	ed91 6b08 	vldr	d6, [r1, #32]
 80123f0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80123f4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80123f8:	f002 020f 	and.w	r2, r2, #15
 80123fc:	2103      	movs	r1, #3
 80123fe:	48b7      	ldr	r0, [pc, #732]	; (80126dc <_dtoa_r+0x60c>)
 8012400:	2a00      	cmp	r2, #0
 8012402:	d17b      	bne.n	80124fc <_dtoa_r+0x42c>
 8012404:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012408:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801240c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012410:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012412:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012416:	2a00      	cmp	r2, #0
 8012418:	f000 80a0 	beq.w	801255c <_dtoa_r+0x48c>
 801241c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8012420:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012428:	f140 8098 	bpl.w	801255c <_dtoa_r+0x48c>
 801242c:	f1b9 0f00 	cmp.w	r9, #0
 8012430:	f000 8094 	beq.w	801255c <_dtoa_r+0x48c>
 8012434:	f1ba 0f00 	cmp.w	sl, #0
 8012438:	dd2f      	ble.n	801249a <_dtoa_r+0x3ca>
 801243a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801243e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012442:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012446:	f10b 32ff 	add.w	r2, fp, #4294967295
 801244a:	3101      	adds	r1, #1
 801244c:	4654      	mov	r4, sl
 801244e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012452:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8012456:	ee07 1a90 	vmov	s15, r1
 801245a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801245e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8012462:	ee15 7a90 	vmov	r7, s11
 8012466:	ec51 0b15 	vmov	r0, r1, d5
 801246a:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 801246e:	2c00      	cmp	r4, #0
 8012470:	d177      	bne.n	8012562 <_dtoa_r+0x492>
 8012472:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8012476:	ee36 6b47 	vsub.f64	d6, d6, d7
 801247a:	ec41 0b17 	vmov	d7, r0, r1
 801247e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012486:	f300 826a 	bgt.w	801295e <_dtoa_r+0x88e>
 801248a:	eeb1 7b47 	vneg.f64	d7, d7
 801248e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012496:	f100 8260 	bmi.w	801295a <_dtoa_r+0x88a>
 801249a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801249e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80124a0:	2a00      	cmp	r2, #0
 80124a2:	f2c0 811d 	blt.w	80126e0 <_dtoa_r+0x610>
 80124a6:	f1bb 0f0e 	cmp.w	fp, #14
 80124aa:	f300 8119 	bgt.w	80126e0 <_dtoa_r+0x610>
 80124ae:	4b8a      	ldr	r3, [pc, #552]	; (80126d8 <_dtoa_r+0x608>)
 80124b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80124b4:	ed93 6b00 	vldr	d6, [r3]
 80124b8:	9b08      	ldr	r3, [sp, #32]
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	f280 80b7 	bge.w	801262e <_dtoa_r+0x55e>
 80124c0:	f1b9 0f00 	cmp.w	r9, #0
 80124c4:	f300 80b3 	bgt.w	801262e <_dtoa_r+0x55e>
 80124c8:	f040 8246 	bne.w	8012958 <_dtoa_r+0x888>
 80124cc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80124d0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80124d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80124d8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80124dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124e0:	464c      	mov	r4, r9
 80124e2:	464f      	mov	r7, r9
 80124e4:	f280 821c 	bge.w	8012920 <_dtoa_r+0x850>
 80124e8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80124ec:	2331      	movs	r3, #49	; 0x31
 80124ee:	f808 3b01 	strb.w	r3, [r8], #1
 80124f2:	f10b 0b01 	add.w	fp, fp, #1
 80124f6:	e218      	b.n	801292a <_dtoa_r+0x85a>
 80124f8:	2102      	movs	r1, #2
 80124fa:	e780      	b.n	80123fe <_dtoa_r+0x32e>
 80124fc:	07d4      	lsls	r4, r2, #31
 80124fe:	d504      	bpl.n	801250a <_dtoa_r+0x43a>
 8012500:	ed90 6b00 	vldr	d6, [r0]
 8012504:	3101      	adds	r1, #1
 8012506:	ee27 7b06 	vmul.f64	d7, d7, d6
 801250a:	1052      	asrs	r2, r2, #1
 801250c:	3008      	adds	r0, #8
 801250e:	e777      	b.n	8012400 <_dtoa_r+0x330>
 8012510:	d022      	beq.n	8012558 <_dtoa_r+0x488>
 8012512:	f1cb 0200 	rsb	r2, fp, #0
 8012516:	4970      	ldr	r1, [pc, #448]	; (80126d8 <_dtoa_r+0x608>)
 8012518:	f002 000f 	and.w	r0, r2, #15
 801251c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8012520:	ed91 7b00 	vldr	d7, [r1]
 8012524:	ee28 7b07 	vmul.f64	d7, d8, d7
 8012528:	ed8d 7b02 	vstr	d7, [sp, #8]
 801252c:	486b      	ldr	r0, [pc, #428]	; (80126dc <_dtoa_r+0x60c>)
 801252e:	1112      	asrs	r2, r2, #4
 8012530:	2400      	movs	r4, #0
 8012532:	2102      	movs	r1, #2
 8012534:	b92a      	cbnz	r2, 8012542 <_dtoa_r+0x472>
 8012536:	2c00      	cmp	r4, #0
 8012538:	f43f af6a 	beq.w	8012410 <_dtoa_r+0x340>
 801253c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012540:	e766      	b.n	8012410 <_dtoa_r+0x340>
 8012542:	07d7      	lsls	r7, r2, #31
 8012544:	d505      	bpl.n	8012552 <_dtoa_r+0x482>
 8012546:	ed90 6b00 	vldr	d6, [r0]
 801254a:	3101      	adds	r1, #1
 801254c:	2401      	movs	r4, #1
 801254e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012552:	1052      	asrs	r2, r2, #1
 8012554:	3008      	adds	r0, #8
 8012556:	e7ed      	b.n	8012534 <_dtoa_r+0x464>
 8012558:	2102      	movs	r1, #2
 801255a:	e759      	b.n	8012410 <_dtoa_r+0x340>
 801255c:	465a      	mov	r2, fp
 801255e:	464c      	mov	r4, r9
 8012560:	e775      	b.n	801244e <_dtoa_r+0x37e>
 8012562:	ec41 0b17 	vmov	d7, r0, r1
 8012566:	495c      	ldr	r1, [pc, #368]	; (80126d8 <_dtoa_r+0x608>)
 8012568:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 801256c:	ed11 4b02 	vldr	d4, [r1, #-8]
 8012570:	9901      	ldr	r1, [sp, #4]
 8012572:	440c      	add	r4, r1
 8012574:	9907      	ldr	r1, [sp, #28]
 8012576:	b351      	cbz	r1, 80125ce <_dtoa_r+0x4fe>
 8012578:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801257c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8012580:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012584:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8012588:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801258c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012590:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012594:	ee14 1a90 	vmov	r1, s9
 8012598:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801259c:	3130      	adds	r1, #48	; 0x30
 801259e:	ee36 6b45 	vsub.f64	d6, d6, d5
 80125a2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80125a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125aa:	f808 1b01 	strb.w	r1, [r8], #1
 80125ae:	d439      	bmi.n	8012624 <_dtoa_r+0x554>
 80125b0:	ee32 5b46 	vsub.f64	d5, d2, d6
 80125b4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80125b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125bc:	d472      	bmi.n	80126a4 <_dtoa_r+0x5d4>
 80125be:	45a0      	cmp	r8, r4
 80125c0:	f43f af6b 	beq.w	801249a <_dtoa_r+0x3ca>
 80125c4:	ee27 7b03 	vmul.f64	d7, d7, d3
 80125c8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80125cc:	e7e0      	b.n	8012590 <_dtoa_r+0x4c0>
 80125ce:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80125d2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80125d6:	4620      	mov	r0, r4
 80125d8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80125dc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80125e0:	ee14 1a90 	vmov	r1, s9
 80125e4:	3130      	adds	r1, #48	; 0x30
 80125e6:	f808 1b01 	strb.w	r1, [r8], #1
 80125ea:	45a0      	cmp	r8, r4
 80125ec:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80125f0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80125f4:	d118      	bne.n	8012628 <_dtoa_r+0x558>
 80125f6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80125fa:	ee37 4b05 	vadd.f64	d4, d7, d5
 80125fe:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8012602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012606:	dc4d      	bgt.n	80126a4 <_dtoa_r+0x5d4>
 8012608:	ee35 5b47 	vsub.f64	d5, d5, d7
 801260c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8012610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012614:	f57f af41 	bpl.w	801249a <_dtoa_r+0x3ca>
 8012618:	4680      	mov	r8, r0
 801261a:	3801      	subs	r0, #1
 801261c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8012620:	2b30      	cmp	r3, #48	; 0x30
 8012622:	d0f9      	beq.n	8012618 <_dtoa_r+0x548>
 8012624:	4693      	mov	fp, r2
 8012626:	e02a      	b.n	801267e <_dtoa_r+0x5ae>
 8012628:	ee26 6b03 	vmul.f64	d6, d6, d3
 801262c:	e7d6      	b.n	80125dc <_dtoa_r+0x50c>
 801262e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012632:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8012636:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801263a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801263e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8012642:	ee15 3a10 	vmov	r3, s10
 8012646:	3330      	adds	r3, #48	; 0x30
 8012648:	f808 3b01 	strb.w	r3, [r8], #1
 801264c:	9b01      	ldr	r3, [sp, #4]
 801264e:	eba8 0303 	sub.w	r3, r8, r3
 8012652:	4599      	cmp	r9, r3
 8012654:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8012658:	eea3 7b46 	vfms.f64	d7, d3, d6
 801265c:	d133      	bne.n	80126c6 <_dtoa_r+0x5f6>
 801265e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8012662:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801266a:	dc1a      	bgt.n	80126a2 <_dtoa_r+0x5d2>
 801266c:	eeb4 7b46 	vcmp.f64	d7, d6
 8012670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012674:	d103      	bne.n	801267e <_dtoa_r+0x5ae>
 8012676:	ee15 3a10 	vmov	r3, s10
 801267a:	07d9      	lsls	r1, r3, #31
 801267c:	d411      	bmi.n	80126a2 <_dtoa_r+0x5d2>
 801267e:	4629      	mov	r1, r5
 8012680:	4630      	mov	r0, r6
 8012682:	f000 fb1d 	bl	8012cc0 <_Bfree>
 8012686:	2300      	movs	r3, #0
 8012688:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801268a:	f888 3000 	strb.w	r3, [r8]
 801268e:	f10b 0301 	add.w	r3, fp, #1
 8012692:	6013      	str	r3, [r2, #0]
 8012694:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012696:	2b00      	cmp	r3, #0
 8012698:	f43f ad69 	beq.w	801216e <_dtoa_r+0x9e>
 801269c:	f8c3 8000 	str.w	r8, [r3]
 80126a0:	e565      	b.n	801216e <_dtoa_r+0x9e>
 80126a2:	465a      	mov	r2, fp
 80126a4:	4643      	mov	r3, r8
 80126a6:	4698      	mov	r8, r3
 80126a8:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 80126ac:	2939      	cmp	r1, #57	; 0x39
 80126ae:	d106      	bne.n	80126be <_dtoa_r+0x5ee>
 80126b0:	9901      	ldr	r1, [sp, #4]
 80126b2:	4299      	cmp	r1, r3
 80126b4:	d1f7      	bne.n	80126a6 <_dtoa_r+0x5d6>
 80126b6:	9801      	ldr	r0, [sp, #4]
 80126b8:	2130      	movs	r1, #48	; 0x30
 80126ba:	3201      	adds	r2, #1
 80126bc:	7001      	strb	r1, [r0, #0]
 80126be:	7819      	ldrb	r1, [r3, #0]
 80126c0:	3101      	adds	r1, #1
 80126c2:	7019      	strb	r1, [r3, #0]
 80126c4:	e7ae      	b.n	8012624 <_dtoa_r+0x554>
 80126c6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80126ca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80126ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126d2:	d1b2      	bne.n	801263a <_dtoa_r+0x56a>
 80126d4:	e7d3      	b.n	801267e <_dtoa_r+0x5ae>
 80126d6:	bf00      	nop
 80126d8:	08015670 	.word	0x08015670
 80126dc:	08015648 	.word	0x08015648
 80126e0:	9907      	ldr	r1, [sp, #28]
 80126e2:	2900      	cmp	r1, #0
 80126e4:	f000 80d0 	beq.w	8012888 <_dtoa_r+0x7b8>
 80126e8:	9906      	ldr	r1, [sp, #24]
 80126ea:	2901      	cmp	r1, #1
 80126ec:	f300 80b4 	bgt.w	8012858 <_dtoa_r+0x788>
 80126f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80126f2:	2900      	cmp	r1, #0
 80126f4:	f000 80ac 	beq.w	8012850 <_dtoa_r+0x780>
 80126f8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80126fc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012700:	461c      	mov	r4, r3
 8012702:	9309      	str	r3, [sp, #36]	; 0x24
 8012704:	9b04      	ldr	r3, [sp, #16]
 8012706:	4413      	add	r3, r2
 8012708:	9304      	str	r3, [sp, #16]
 801270a:	9b05      	ldr	r3, [sp, #20]
 801270c:	2101      	movs	r1, #1
 801270e:	4413      	add	r3, r2
 8012710:	4630      	mov	r0, r6
 8012712:	9305      	str	r3, [sp, #20]
 8012714:	f000 fbd4 	bl	8012ec0 <__i2b>
 8012718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801271a:	4607      	mov	r7, r0
 801271c:	f1b8 0f00 	cmp.w	r8, #0
 8012720:	d00d      	beq.n	801273e <_dtoa_r+0x66e>
 8012722:	9a05      	ldr	r2, [sp, #20]
 8012724:	2a00      	cmp	r2, #0
 8012726:	dd0a      	ble.n	801273e <_dtoa_r+0x66e>
 8012728:	4542      	cmp	r2, r8
 801272a:	9904      	ldr	r1, [sp, #16]
 801272c:	bfa8      	it	ge
 801272e:	4642      	movge	r2, r8
 8012730:	1a89      	subs	r1, r1, r2
 8012732:	9104      	str	r1, [sp, #16]
 8012734:	9905      	ldr	r1, [sp, #20]
 8012736:	eba8 0802 	sub.w	r8, r8, r2
 801273a:	1a8a      	subs	r2, r1, r2
 801273c:	9205      	str	r2, [sp, #20]
 801273e:	b303      	cbz	r3, 8012782 <_dtoa_r+0x6b2>
 8012740:	9a07      	ldr	r2, [sp, #28]
 8012742:	2a00      	cmp	r2, #0
 8012744:	f000 80a5 	beq.w	8012892 <_dtoa_r+0x7c2>
 8012748:	2c00      	cmp	r4, #0
 801274a:	dd13      	ble.n	8012774 <_dtoa_r+0x6a4>
 801274c:	4639      	mov	r1, r7
 801274e:	4622      	mov	r2, r4
 8012750:	4630      	mov	r0, r6
 8012752:	930d      	str	r3, [sp, #52]	; 0x34
 8012754:	f000 fc74 	bl	8013040 <__pow5mult>
 8012758:	462a      	mov	r2, r5
 801275a:	4601      	mov	r1, r0
 801275c:	4607      	mov	r7, r0
 801275e:	4630      	mov	r0, r6
 8012760:	f000 fbc4 	bl	8012eec <__multiply>
 8012764:	4629      	mov	r1, r5
 8012766:	9009      	str	r0, [sp, #36]	; 0x24
 8012768:	4630      	mov	r0, r6
 801276a:	f000 faa9 	bl	8012cc0 <_Bfree>
 801276e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012770:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012772:	4615      	mov	r5, r2
 8012774:	1b1a      	subs	r2, r3, r4
 8012776:	d004      	beq.n	8012782 <_dtoa_r+0x6b2>
 8012778:	4629      	mov	r1, r5
 801277a:	4630      	mov	r0, r6
 801277c:	f000 fc60 	bl	8013040 <__pow5mult>
 8012780:	4605      	mov	r5, r0
 8012782:	2101      	movs	r1, #1
 8012784:	4630      	mov	r0, r6
 8012786:	f000 fb9b 	bl	8012ec0 <__i2b>
 801278a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801278c:	2b00      	cmp	r3, #0
 801278e:	4604      	mov	r4, r0
 8012790:	f340 8081 	ble.w	8012896 <_dtoa_r+0x7c6>
 8012794:	461a      	mov	r2, r3
 8012796:	4601      	mov	r1, r0
 8012798:	4630      	mov	r0, r6
 801279a:	f000 fc51 	bl	8013040 <__pow5mult>
 801279e:	9b06      	ldr	r3, [sp, #24]
 80127a0:	2b01      	cmp	r3, #1
 80127a2:	4604      	mov	r4, r0
 80127a4:	dd7a      	ble.n	801289c <_dtoa_r+0x7cc>
 80127a6:	2300      	movs	r3, #0
 80127a8:	9309      	str	r3, [sp, #36]	; 0x24
 80127aa:	6922      	ldr	r2, [r4, #16]
 80127ac:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80127b0:	6910      	ldr	r0, [r2, #16]
 80127b2:	f000 fb37 	bl	8012e24 <__hi0bits>
 80127b6:	f1c0 0020 	rsb	r0, r0, #32
 80127ba:	9b05      	ldr	r3, [sp, #20]
 80127bc:	4418      	add	r0, r3
 80127be:	f010 001f 	ands.w	r0, r0, #31
 80127c2:	f000 8093 	beq.w	80128ec <_dtoa_r+0x81c>
 80127c6:	f1c0 0220 	rsb	r2, r0, #32
 80127ca:	2a04      	cmp	r2, #4
 80127cc:	f340 8085 	ble.w	80128da <_dtoa_r+0x80a>
 80127d0:	9b04      	ldr	r3, [sp, #16]
 80127d2:	f1c0 001c 	rsb	r0, r0, #28
 80127d6:	4403      	add	r3, r0
 80127d8:	9304      	str	r3, [sp, #16]
 80127da:	9b05      	ldr	r3, [sp, #20]
 80127dc:	4480      	add	r8, r0
 80127de:	4403      	add	r3, r0
 80127e0:	9305      	str	r3, [sp, #20]
 80127e2:	9b04      	ldr	r3, [sp, #16]
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	dd05      	ble.n	80127f4 <_dtoa_r+0x724>
 80127e8:	4629      	mov	r1, r5
 80127ea:	461a      	mov	r2, r3
 80127ec:	4630      	mov	r0, r6
 80127ee:	f000 fc81 	bl	80130f4 <__lshift>
 80127f2:	4605      	mov	r5, r0
 80127f4:	9b05      	ldr	r3, [sp, #20]
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	dd05      	ble.n	8012806 <_dtoa_r+0x736>
 80127fa:	4621      	mov	r1, r4
 80127fc:	461a      	mov	r2, r3
 80127fe:	4630      	mov	r0, r6
 8012800:	f000 fc78 	bl	80130f4 <__lshift>
 8012804:	4604      	mov	r4, r0
 8012806:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012808:	2b00      	cmp	r3, #0
 801280a:	d071      	beq.n	80128f0 <_dtoa_r+0x820>
 801280c:	4621      	mov	r1, r4
 801280e:	4628      	mov	r0, r5
 8012810:	f000 fcdc 	bl	80131cc <__mcmp>
 8012814:	2800      	cmp	r0, #0
 8012816:	da6b      	bge.n	80128f0 <_dtoa_r+0x820>
 8012818:	2300      	movs	r3, #0
 801281a:	4629      	mov	r1, r5
 801281c:	220a      	movs	r2, #10
 801281e:	4630      	mov	r0, r6
 8012820:	f000 fa70 	bl	8012d04 <__multadd>
 8012824:	9b07      	ldr	r3, [sp, #28]
 8012826:	f10b 3bff 	add.w	fp, fp, #4294967295
 801282a:	4605      	mov	r5, r0
 801282c:	2b00      	cmp	r3, #0
 801282e:	f000 8197 	beq.w	8012b60 <_dtoa_r+0xa90>
 8012832:	4639      	mov	r1, r7
 8012834:	2300      	movs	r3, #0
 8012836:	220a      	movs	r2, #10
 8012838:	4630      	mov	r0, r6
 801283a:	f000 fa63 	bl	8012d04 <__multadd>
 801283e:	f1ba 0f00 	cmp.w	sl, #0
 8012842:	4607      	mov	r7, r0
 8012844:	f300 8093 	bgt.w	801296e <_dtoa_r+0x89e>
 8012848:	9b06      	ldr	r3, [sp, #24]
 801284a:	2b02      	cmp	r3, #2
 801284c:	dc57      	bgt.n	80128fe <_dtoa_r+0x82e>
 801284e:	e08e      	b.n	801296e <_dtoa_r+0x89e>
 8012850:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012852:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8012856:	e751      	b.n	80126fc <_dtoa_r+0x62c>
 8012858:	f109 34ff 	add.w	r4, r9, #4294967295
 801285c:	42a3      	cmp	r3, r4
 801285e:	bfbf      	itttt	lt
 8012860:	1ae2      	sublt	r2, r4, r3
 8012862:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8012864:	189b      	addlt	r3, r3, r2
 8012866:	930a      	strlt	r3, [sp, #40]	; 0x28
 8012868:	bfae      	itee	ge
 801286a:	1b1c      	subge	r4, r3, r4
 801286c:	4623      	movlt	r3, r4
 801286e:	2400      	movlt	r4, #0
 8012870:	f1b9 0f00 	cmp.w	r9, #0
 8012874:	bfb5      	itete	lt
 8012876:	9a04      	ldrlt	r2, [sp, #16]
 8012878:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801287c:	eba2 0809 	sublt.w	r8, r2, r9
 8012880:	464a      	movge	r2, r9
 8012882:	bfb8      	it	lt
 8012884:	2200      	movlt	r2, #0
 8012886:	e73c      	b.n	8012702 <_dtoa_r+0x632>
 8012888:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801288c:	9f07      	ldr	r7, [sp, #28]
 801288e:	461c      	mov	r4, r3
 8012890:	e744      	b.n	801271c <_dtoa_r+0x64c>
 8012892:	461a      	mov	r2, r3
 8012894:	e770      	b.n	8012778 <_dtoa_r+0x6a8>
 8012896:	9b06      	ldr	r3, [sp, #24]
 8012898:	2b01      	cmp	r3, #1
 801289a:	dc18      	bgt.n	80128ce <_dtoa_r+0x7fe>
 801289c:	9b02      	ldr	r3, [sp, #8]
 801289e:	b9b3      	cbnz	r3, 80128ce <_dtoa_r+0x7fe>
 80128a0:	9b03      	ldr	r3, [sp, #12]
 80128a2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80128a6:	b9a2      	cbnz	r2, 80128d2 <_dtoa_r+0x802>
 80128a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80128ac:	0d12      	lsrs	r2, r2, #20
 80128ae:	0512      	lsls	r2, r2, #20
 80128b0:	b18a      	cbz	r2, 80128d6 <_dtoa_r+0x806>
 80128b2:	9b04      	ldr	r3, [sp, #16]
 80128b4:	3301      	adds	r3, #1
 80128b6:	9304      	str	r3, [sp, #16]
 80128b8:	9b05      	ldr	r3, [sp, #20]
 80128ba:	3301      	adds	r3, #1
 80128bc:	9305      	str	r3, [sp, #20]
 80128be:	2301      	movs	r3, #1
 80128c0:	9309      	str	r3, [sp, #36]	; 0x24
 80128c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	f47f af70 	bne.w	80127aa <_dtoa_r+0x6da>
 80128ca:	2001      	movs	r0, #1
 80128cc:	e775      	b.n	80127ba <_dtoa_r+0x6ea>
 80128ce:	2300      	movs	r3, #0
 80128d0:	e7f6      	b.n	80128c0 <_dtoa_r+0x7f0>
 80128d2:	9b02      	ldr	r3, [sp, #8]
 80128d4:	e7f4      	b.n	80128c0 <_dtoa_r+0x7f0>
 80128d6:	9209      	str	r2, [sp, #36]	; 0x24
 80128d8:	e7f3      	b.n	80128c2 <_dtoa_r+0x7f2>
 80128da:	d082      	beq.n	80127e2 <_dtoa_r+0x712>
 80128dc:	9b04      	ldr	r3, [sp, #16]
 80128de:	321c      	adds	r2, #28
 80128e0:	4413      	add	r3, r2
 80128e2:	9304      	str	r3, [sp, #16]
 80128e4:	9b05      	ldr	r3, [sp, #20]
 80128e6:	4490      	add	r8, r2
 80128e8:	4413      	add	r3, r2
 80128ea:	e779      	b.n	80127e0 <_dtoa_r+0x710>
 80128ec:	4602      	mov	r2, r0
 80128ee:	e7f5      	b.n	80128dc <_dtoa_r+0x80c>
 80128f0:	f1b9 0f00 	cmp.w	r9, #0
 80128f4:	dc36      	bgt.n	8012964 <_dtoa_r+0x894>
 80128f6:	9b06      	ldr	r3, [sp, #24]
 80128f8:	2b02      	cmp	r3, #2
 80128fa:	dd33      	ble.n	8012964 <_dtoa_r+0x894>
 80128fc:	46ca      	mov	sl, r9
 80128fe:	f1ba 0f00 	cmp.w	sl, #0
 8012902:	d10d      	bne.n	8012920 <_dtoa_r+0x850>
 8012904:	4621      	mov	r1, r4
 8012906:	4653      	mov	r3, sl
 8012908:	2205      	movs	r2, #5
 801290a:	4630      	mov	r0, r6
 801290c:	f000 f9fa 	bl	8012d04 <__multadd>
 8012910:	4601      	mov	r1, r0
 8012912:	4604      	mov	r4, r0
 8012914:	4628      	mov	r0, r5
 8012916:	f000 fc59 	bl	80131cc <__mcmp>
 801291a:	2800      	cmp	r0, #0
 801291c:	f73f ade4 	bgt.w	80124e8 <_dtoa_r+0x418>
 8012920:	9b08      	ldr	r3, [sp, #32]
 8012922:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012926:	ea6f 0b03 	mvn.w	fp, r3
 801292a:	f04f 0900 	mov.w	r9, #0
 801292e:	4621      	mov	r1, r4
 8012930:	4630      	mov	r0, r6
 8012932:	f000 f9c5 	bl	8012cc0 <_Bfree>
 8012936:	2f00      	cmp	r7, #0
 8012938:	f43f aea1 	beq.w	801267e <_dtoa_r+0x5ae>
 801293c:	f1b9 0f00 	cmp.w	r9, #0
 8012940:	d005      	beq.n	801294e <_dtoa_r+0x87e>
 8012942:	45b9      	cmp	r9, r7
 8012944:	d003      	beq.n	801294e <_dtoa_r+0x87e>
 8012946:	4649      	mov	r1, r9
 8012948:	4630      	mov	r0, r6
 801294a:	f000 f9b9 	bl	8012cc0 <_Bfree>
 801294e:	4639      	mov	r1, r7
 8012950:	4630      	mov	r0, r6
 8012952:	f000 f9b5 	bl	8012cc0 <_Bfree>
 8012956:	e692      	b.n	801267e <_dtoa_r+0x5ae>
 8012958:	2400      	movs	r4, #0
 801295a:	4627      	mov	r7, r4
 801295c:	e7e0      	b.n	8012920 <_dtoa_r+0x850>
 801295e:	4693      	mov	fp, r2
 8012960:	4627      	mov	r7, r4
 8012962:	e5c1      	b.n	80124e8 <_dtoa_r+0x418>
 8012964:	9b07      	ldr	r3, [sp, #28]
 8012966:	46ca      	mov	sl, r9
 8012968:	2b00      	cmp	r3, #0
 801296a:	f000 8100 	beq.w	8012b6e <_dtoa_r+0xa9e>
 801296e:	f1b8 0f00 	cmp.w	r8, #0
 8012972:	dd05      	ble.n	8012980 <_dtoa_r+0x8b0>
 8012974:	4639      	mov	r1, r7
 8012976:	4642      	mov	r2, r8
 8012978:	4630      	mov	r0, r6
 801297a:	f000 fbbb 	bl	80130f4 <__lshift>
 801297e:	4607      	mov	r7, r0
 8012980:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012982:	2b00      	cmp	r3, #0
 8012984:	d05d      	beq.n	8012a42 <_dtoa_r+0x972>
 8012986:	6879      	ldr	r1, [r7, #4]
 8012988:	4630      	mov	r0, r6
 801298a:	f000 f959 	bl	8012c40 <_Balloc>
 801298e:	4680      	mov	r8, r0
 8012990:	b928      	cbnz	r0, 801299e <_dtoa_r+0x8ce>
 8012992:	4b82      	ldr	r3, [pc, #520]	; (8012b9c <_dtoa_r+0xacc>)
 8012994:	4602      	mov	r2, r0
 8012996:	f240 21ef 	movw	r1, #751	; 0x2ef
 801299a:	f7ff bbb1 	b.w	8012100 <_dtoa_r+0x30>
 801299e:	693a      	ldr	r2, [r7, #16]
 80129a0:	3202      	adds	r2, #2
 80129a2:	0092      	lsls	r2, r2, #2
 80129a4:	f107 010c 	add.w	r1, r7, #12
 80129a8:	300c      	adds	r0, #12
 80129aa:	f7ff faf3 	bl	8011f94 <memcpy>
 80129ae:	2201      	movs	r2, #1
 80129b0:	4641      	mov	r1, r8
 80129b2:	4630      	mov	r0, r6
 80129b4:	f000 fb9e 	bl	80130f4 <__lshift>
 80129b8:	9b01      	ldr	r3, [sp, #4]
 80129ba:	3301      	adds	r3, #1
 80129bc:	9304      	str	r3, [sp, #16]
 80129be:	9b01      	ldr	r3, [sp, #4]
 80129c0:	4453      	add	r3, sl
 80129c2:	9308      	str	r3, [sp, #32]
 80129c4:	9b02      	ldr	r3, [sp, #8]
 80129c6:	f003 0301 	and.w	r3, r3, #1
 80129ca:	46b9      	mov	r9, r7
 80129cc:	9307      	str	r3, [sp, #28]
 80129ce:	4607      	mov	r7, r0
 80129d0:	9b04      	ldr	r3, [sp, #16]
 80129d2:	4621      	mov	r1, r4
 80129d4:	3b01      	subs	r3, #1
 80129d6:	4628      	mov	r0, r5
 80129d8:	9302      	str	r3, [sp, #8]
 80129da:	f7ff faef 	bl	8011fbc <quorem>
 80129de:	4603      	mov	r3, r0
 80129e0:	3330      	adds	r3, #48	; 0x30
 80129e2:	9005      	str	r0, [sp, #20]
 80129e4:	4649      	mov	r1, r9
 80129e6:	4628      	mov	r0, r5
 80129e8:	9309      	str	r3, [sp, #36]	; 0x24
 80129ea:	f000 fbef 	bl	80131cc <__mcmp>
 80129ee:	463a      	mov	r2, r7
 80129f0:	4682      	mov	sl, r0
 80129f2:	4621      	mov	r1, r4
 80129f4:	4630      	mov	r0, r6
 80129f6:	f000 fc05 	bl	8013204 <__mdiff>
 80129fa:	68c2      	ldr	r2, [r0, #12]
 80129fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129fe:	4680      	mov	r8, r0
 8012a00:	bb0a      	cbnz	r2, 8012a46 <_dtoa_r+0x976>
 8012a02:	4601      	mov	r1, r0
 8012a04:	4628      	mov	r0, r5
 8012a06:	f000 fbe1 	bl	80131cc <__mcmp>
 8012a0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a0c:	4602      	mov	r2, r0
 8012a0e:	4641      	mov	r1, r8
 8012a10:	4630      	mov	r0, r6
 8012a12:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8012a16:	f000 f953 	bl	8012cc0 <_Bfree>
 8012a1a:	9b06      	ldr	r3, [sp, #24]
 8012a1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012a1e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012a22:	ea43 0102 	orr.w	r1, r3, r2
 8012a26:	9b07      	ldr	r3, [sp, #28]
 8012a28:	4319      	orrs	r1, r3
 8012a2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a2c:	d10d      	bne.n	8012a4a <_dtoa_r+0x97a>
 8012a2e:	2b39      	cmp	r3, #57	; 0x39
 8012a30:	d029      	beq.n	8012a86 <_dtoa_r+0x9b6>
 8012a32:	f1ba 0f00 	cmp.w	sl, #0
 8012a36:	dd01      	ble.n	8012a3c <_dtoa_r+0x96c>
 8012a38:	9b05      	ldr	r3, [sp, #20]
 8012a3a:	3331      	adds	r3, #49	; 0x31
 8012a3c:	9a02      	ldr	r2, [sp, #8]
 8012a3e:	7013      	strb	r3, [r2, #0]
 8012a40:	e775      	b.n	801292e <_dtoa_r+0x85e>
 8012a42:	4638      	mov	r0, r7
 8012a44:	e7b8      	b.n	80129b8 <_dtoa_r+0x8e8>
 8012a46:	2201      	movs	r2, #1
 8012a48:	e7e1      	b.n	8012a0e <_dtoa_r+0x93e>
 8012a4a:	f1ba 0f00 	cmp.w	sl, #0
 8012a4e:	db06      	blt.n	8012a5e <_dtoa_r+0x98e>
 8012a50:	9906      	ldr	r1, [sp, #24]
 8012a52:	ea41 0a0a 	orr.w	sl, r1, sl
 8012a56:	9907      	ldr	r1, [sp, #28]
 8012a58:	ea5a 0a01 	orrs.w	sl, sl, r1
 8012a5c:	d120      	bne.n	8012aa0 <_dtoa_r+0x9d0>
 8012a5e:	2a00      	cmp	r2, #0
 8012a60:	ddec      	ble.n	8012a3c <_dtoa_r+0x96c>
 8012a62:	4629      	mov	r1, r5
 8012a64:	2201      	movs	r2, #1
 8012a66:	4630      	mov	r0, r6
 8012a68:	9304      	str	r3, [sp, #16]
 8012a6a:	f000 fb43 	bl	80130f4 <__lshift>
 8012a6e:	4621      	mov	r1, r4
 8012a70:	4605      	mov	r5, r0
 8012a72:	f000 fbab 	bl	80131cc <__mcmp>
 8012a76:	2800      	cmp	r0, #0
 8012a78:	9b04      	ldr	r3, [sp, #16]
 8012a7a:	dc02      	bgt.n	8012a82 <_dtoa_r+0x9b2>
 8012a7c:	d1de      	bne.n	8012a3c <_dtoa_r+0x96c>
 8012a7e:	07da      	lsls	r2, r3, #31
 8012a80:	d5dc      	bpl.n	8012a3c <_dtoa_r+0x96c>
 8012a82:	2b39      	cmp	r3, #57	; 0x39
 8012a84:	d1d8      	bne.n	8012a38 <_dtoa_r+0x968>
 8012a86:	9a02      	ldr	r2, [sp, #8]
 8012a88:	2339      	movs	r3, #57	; 0x39
 8012a8a:	7013      	strb	r3, [r2, #0]
 8012a8c:	4643      	mov	r3, r8
 8012a8e:	4698      	mov	r8, r3
 8012a90:	3b01      	subs	r3, #1
 8012a92:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8012a96:	2a39      	cmp	r2, #57	; 0x39
 8012a98:	d051      	beq.n	8012b3e <_dtoa_r+0xa6e>
 8012a9a:	3201      	adds	r2, #1
 8012a9c:	701a      	strb	r2, [r3, #0]
 8012a9e:	e746      	b.n	801292e <_dtoa_r+0x85e>
 8012aa0:	2a00      	cmp	r2, #0
 8012aa2:	dd03      	ble.n	8012aac <_dtoa_r+0x9dc>
 8012aa4:	2b39      	cmp	r3, #57	; 0x39
 8012aa6:	d0ee      	beq.n	8012a86 <_dtoa_r+0x9b6>
 8012aa8:	3301      	adds	r3, #1
 8012aaa:	e7c7      	b.n	8012a3c <_dtoa_r+0x96c>
 8012aac:	9a04      	ldr	r2, [sp, #16]
 8012aae:	9908      	ldr	r1, [sp, #32]
 8012ab0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012ab4:	428a      	cmp	r2, r1
 8012ab6:	d02b      	beq.n	8012b10 <_dtoa_r+0xa40>
 8012ab8:	4629      	mov	r1, r5
 8012aba:	2300      	movs	r3, #0
 8012abc:	220a      	movs	r2, #10
 8012abe:	4630      	mov	r0, r6
 8012ac0:	f000 f920 	bl	8012d04 <__multadd>
 8012ac4:	45b9      	cmp	r9, r7
 8012ac6:	4605      	mov	r5, r0
 8012ac8:	f04f 0300 	mov.w	r3, #0
 8012acc:	f04f 020a 	mov.w	r2, #10
 8012ad0:	4649      	mov	r1, r9
 8012ad2:	4630      	mov	r0, r6
 8012ad4:	d107      	bne.n	8012ae6 <_dtoa_r+0xa16>
 8012ad6:	f000 f915 	bl	8012d04 <__multadd>
 8012ada:	4681      	mov	r9, r0
 8012adc:	4607      	mov	r7, r0
 8012ade:	9b04      	ldr	r3, [sp, #16]
 8012ae0:	3301      	adds	r3, #1
 8012ae2:	9304      	str	r3, [sp, #16]
 8012ae4:	e774      	b.n	80129d0 <_dtoa_r+0x900>
 8012ae6:	f000 f90d 	bl	8012d04 <__multadd>
 8012aea:	4639      	mov	r1, r7
 8012aec:	4681      	mov	r9, r0
 8012aee:	2300      	movs	r3, #0
 8012af0:	220a      	movs	r2, #10
 8012af2:	4630      	mov	r0, r6
 8012af4:	f000 f906 	bl	8012d04 <__multadd>
 8012af8:	4607      	mov	r7, r0
 8012afa:	e7f0      	b.n	8012ade <_dtoa_r+0xa0e>
 8012afc:	f1ba 0f00 	cmp.w	sl, #0
 8012b00:	9a01      	ldr	r2, [sp, #4]
 8012b02:	bfcc      	ite	gt
 8012b04:	46d0      	movgt	r8, sl
 8012b06:	f04f 0801 	movle.w	r8, #1
 8012b0a:	4490      	add	r8, r2
 8012b0c:	f04f 0900 	mov.w	r9, #0
 8012b10:	4629      	mov	r1, r5
 8012b12:	2201      	movs	r2, #1
 8012b14:	4630      	mov	r0, r6
 8012b16:	9302      	str	r3, [sp, #8]
 8012b18:	f000 faec 	bl	80130f4 <__lshift>
 8012b1c:	4621      	mov	r1, r4
 8012b1e:	4605      	mov	r5, r0
 8012b20:	f000 fb54 	bl	80131cc <__mcmp>
 8012b24:	2800      	cmp	r0, #0
 8012b26:	dcb1      	bgt.n	8012a8c <_dtoa_r+0x9bc>
 8012b28:	d102      	bne.n	8012b30 <_dtoa_r+0xa60>
 8012b2a:	9b02      	ldr	r3, [sp, #8]
 8012b2c:	07db      	lsls	r3, r3, #31
 8012b2e:	d4ad      	bmi.n	8012a8c <_dtoa_r+0x9bc>
 8012b30:	4643      	mov	r3, r8
 8012b32:	4698      	mov	r8, r3
 8012b34:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012b38:	2a30      	cmp	r2, #48	; 0x30
 8012b3a:	d0fa      	beq.n	8012b32 <_dtoa_r+0xa62>
 8012b3c:	e6f7      	b.n	801292e <_dtoa_r+0x85e>
 8012b3e:	9a01      	ldr	r2, [sp, #4]
 8012b40:	429a      	cmp	r2, r3
 8012b42:	d1a4      	bne.n	8012a8e <_dtoa_r+0x9be>
 8012b44:	f10b 0b01 	add.w	fp, fp, #1
 8012b48:	2331      	movs	r3, #49	; 0x31
 8012b4a:	e778      	b.n	8012a3e <_dtoa_r+0x96e>
 8012b4c:	4b14      	ldr	r3, [pc, #80]	; (8012ba0 <_dtoa_r+0xad0>)
 8012b4e:	f7ff bb2a 	b.w	80121a6 <_dtoa_r+0xd6>
 8012b52:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	f47f ab05 	bne.w	8012164 <_dtoa_r+0x94>
 8012b5a:	4b12      	ldr	r3, [pc, #72]	; (8012ba4 <_dtoa_r+0xad4>)
 8012b5c:	f7ff bb23 	b.w	80121a6 <_dtoa_r+0xd6>
 8012b60:	f1ba 0f00 	cmp.w	sl, #0
 8012b64:	dc03      	bgt.n	8012b6e <_dtoa_r+0xa9e>
 8012b66:	9b06      	ldr	r3, [sp, #24]
 8012b68:	2b02      	cmp	r3, #2
 8012b6a:	f73f aec8 	bgt.w	80128fe <_dtoa_r+0x82e>
 8012b6e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012b72:	4621      	mov	r1, r4
 8012b74:	4628      	mov	r0, r5
 8012b76:	f7ff fa21 	bl	8011fbc <quorem>
 8012b7a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8012b7e:	f808 3b01 	strb.w	r3, [r8], #1
 8012b82:	9a01      	ldr	r2, [sp, #4]
 8012b84:	eba8 0202 	sub.w	r2, r8, r2
 8012b88:	4592      	cmp	sl, r2
 8012b8a:	ddb7      	ble.n	8012afc <_dtoa_r+0xa2c>
 8012b8c:	4629      	mov	r1, r5
 8012b8e:	2300      	movs	r3, #0
 8012b90:	220a      	movs	r2, #10
 8012b92:	4630      	mov	r0, r6
 8012b94:	f000 f8b6 	bl	8012d04 <__multadd>
 8012b98:	4605      	mov	r5, r0
 8012b9a:	e7ea      	b.n	8012b72 <_dtoa_r+0xaa2>
 8012b9c:	080155dd 	.word	0x080155dd
 8012ba0:	08015538 	.word	0x08015538
 8012ba4:	08015561 	.word	0x08015561

08012ba8 <_free_r>:
 8012ba8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012baa:	2900      	cmp	r1, #0
 8012bac:	d044      	beq.n	8012c38 <_free_r+0x90>
 8012bae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012bb2:	9001      	str	r0, [sp, #4]
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	f1a1 0404 	sub.w	r4, r1, #4
 8012bba:	bfb8      	it	lt
 8012bbc:	18e4      	addlt	r4, r4, r3
 8012bbe:	f7fe f971 	bl	8010ea4 <__malloc_lock>
 8012bc2:	4a1e      	ldr	r2, [pc, #120]	; (8012c3c <_free_r+0x94>)
 8012bc4:	9801      	ldr	r0, [sp, #4]
 8012bc6:	6813      	ldr	r3, [r2, #0]
 8012bc8:	b933      	cbnz	r3, 8012bd8 <_free_r+0x30>
 8012bca:	6063      	str	r3, [r4, #4]
 8012bcc:	6014      	str	r4, [r2, #0]
 8012bce:	b003      	add	sp, #12
 8012bd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012bd4:	f7fe b96c 	b.w	8010eb0 <__malloc_unlock>
 8012bd8:	42a3      	cmp	r3, r4
 8012bda:	d908      	bls.n	8012bee <_free_r+0x46>
 8012bdc:	6825      	ldr	r5, [r4, #0]
 8012bde:	1961      	adds	r1, r4, r5
 8012be0:	428b      	cmp	r3, r1
 8012be2:	bf01      	itttt	eq
 8012be4:	6819      	ldreq	r1, [r3, #0]
 8012be6:	685b      	ldreq	r3, [r3, #4]
 8012be8:	1949      	addeq	r1, r1, r5
 8012bea:	6021      	streq	r1, [r4, #0]
 8012bec:	e7ed      	b.n	8012bca <_free_r+0x22>
 8012bee:	461a      	mov	r2, r3
 8012bf0:	685b      	ldr	r3, [r3, #4]
 8012bf2:	b10b      	cbz	r3, 8012bf8 <_free_r+0x50>
 8012bf4:	42a3      	cmp	r3, r4
 8012bf6:	d9fa      	bls.n	8012bee <_free_r+0x46>
 8012bf8:	6811      	ldr	r1, [r2, #0]
 8012bfa:	1855      	adds	r5, r2, r1
 8012bfc:	42a5      	cmp	r5, r4
 8012bfe:	d10b      	bne.n	8012c18 <_free_r+0x70>
 8012c00:	6824      	ldr	r4, [r4, #0]
 8012c02:	4421      	add	r1, r4
 8012c04:	1854      	adds	r4, r2, r1
 8012c06:	42a3      	cmp	r3, r4
 8012c08:	6011      	str	r1, [r2, #0]
 8012c0a:	d1e0      	bne.n	8012bce <_free_r+0x26>
 8012c0c:	681c      	ldr	r4, [r3, #0]
 8012c0e:	685b      	ldr	r3, [r3, #4]
 8012c10:	6053      	str	r3, [r2, #4]
 8012c12:	440c      	add	r4, r1
 8012c14:	6014      	str	r4, [r2, #0]
 8012c16:	e7da      	b.n	8012bce <_free_r+0x26>
 8012c18:	d902      	bls.n	8012c20 <_free_r+0x78>
 8012c1a:	230c      	movs	r3, #12
 8012c1c:	6003      	str	r3, [r0, #0]
 8012c1e:	e7d6      	b.n	8012bce <_free_r+0x26>
 8012c20:	6825      	ldr	r5, [r4, #0]
 8012c22:	1961      	adds	r1, r4, r5
 8012c24:	428b      	cmp	r3, r1
 8012c26:	bf04      	itt	eq
 8012c28:	6819      	ldreq	r1, [r3, #0]
 8012c2a:	685b      	ldreq	r3, [r3, #4]
 8012c2c:	6063      	str	r3, [r4, #4]
 8012c2e:	bf04      	itt	eq
 8012c30:	1949      	addeq	r1, r1, r5
 8012c32:	6021      	streq	r1, [r4, #0]
 8012c34:	6054      	str	r4, [r2, #4]
 8012c36:	e7ca      	b.n	8012bce <_free_r+0x26>
 8012c38:	b003      	add	sp, #12
 8012c3a:	bd30      	pop	{r4, r5, pc}
 8012c3c:	24005570 	.word	0x24005570

08012c40 <_Balloc>:
 8012c40:	b570      	push	{r4, r5, r6, lr}
 8012c42:	69c6      	ldr	r6, [r0, #28]
 8012c44:	4604      	mov	r4, r0
 8012c46:	460d      	mov	r5, r1
 8012c48:	b976      	cbnz	r6, 8012c68 <_Balloc+0x28>
 8012c4a:	2010      	movs	r0, #16
 8012c4c:	f7fe f87a 	bl	8010d44 <malloc>
 8012c50:	4602      	mov	r2, r0
 8012c52:	61e0      	str	r0, [r4, #28]
 8012c54:	b920      	cbnz	r0, 8012c60 <_Balloc+0x20>
 8012c56:	4b18      	ldr	r3, [pc, #96]	; (8012cb8 <_Balloc+0x78>)
 8012c58:	4818      	ldr	r0, [pc, #96]	; (8012cbc <_Balloc+0x7c>)
 8012c5a:	216b      	movs	r1, #107	; 0x6b
 8012c5c:	f001 fd2c 	bl	80146b8 <__assert_func>
 8012c60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012c64:	6006      	str	r6, [r0, #0]
 8012c66:	60c6      	str	r6, [r0, #12]
 8012c68:	69e6      	ldr	r6, [r4, #28]
 8012c6a:	68f3      	ldr	r3, [r6, #12]
 8012c6c:	b183      	cbz	r3, 8012c90 <_Balloc+0x50>
 8012c6e:	69e3      	ldr	r3, [r4, #28]
 8012c70:	68db      	ldr	r3, [r3, #12]
 8012c72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012c76:	b9b8      	cbnz	r0, 8012ca8 <_Balloc+0x68>
 8012c78:	2101      	movs	r1, #1
 8012c7a:	fa01 f605 	lsl.w	r6, r1, r5
 8012c7e:	1d72      	adds	r2, r6, #5
 8012c80:	0092      	lsls	r2, r2, #2
 8012c82:	4620      	mov	r0, r4
 8012c84:	f001 fd36 	bl	80146f4 <_calloc_r>
 8012c88:	b160      	cbz	r0, 8012ca4 <_Balloc+0x64>
 8012c8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012c8e:	e00e      	b.n	8012cae <_Balloc+0x6e>
 8012c90:	2221      	movs	r2, #33	; 0x21
 8012c92:	2104      	movs	r1, #4
 8012c94:	4620      	mov	r0, r4
 8012c96:	f001 fd2d 	bl	80146f4 <_calloc_r>
 8012c9a:	69e3      	ldr	r3, [r4, #28]
 8012c9c:	60f0      	str	r0, [r6, #12]
 8012c9e:	68db      	ldr	r3, [r3, #12]
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d1e4      	bne.n	8012c6e <_Balloc+0x2e>
 8012ca4:	2000      	movs	r0, #0
 8012ca6:	bd70      	pop	{r4, r5, r6, pc}
 8012ca8:	6802      	ldr	r2, [r0, #0]
 8012caa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012cae:	2300      	movs	r3, #0
 8012cb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012cb4:	e7f7      	b.n	8012ca6 <_Balloc+0x66>
 8012cb6:	bf00      	nop
 8012cb8:	0801556e 	.word	0x0801556e
 8012cbc:	080155ee 	.word	0x080155ee

08012cc0 <_Bfree>:
 8012cc0:	b570      	push	{r4, r5, r6, lr}
 8012cc2:	69c6      	ldr	r6, [r0, #28]
 8012cc4:	4605      	mov	r5, r0
 8012cc6:	460c      	mov	r4, r1
 8012cc8:	b976      	cbnz	r6, 8012ce8 <_Bfree+0x28>
 8012cca:	2010      	movs	r0, #16
 8012ccc:	f7fe f83a 	bl	8010d44 <malloc>
 8012cd0:	4602      	mov	r2, r0
 8012cd2:	61e8      	str	r0, [r5, #28]
 8012cd4:	b920      	cbnz	r0, 8012ce0 <_Bfree+0x20>
 8012cd6:	4b09      	ldr	r3, [pc, #36]	; (8012cfc <_Bfree+0x3c>)
 8012cd8:	4809      	ldr	r0, [pc, #36]	; (8012d00 <_Bfree+0x40>)
 8012cda:	218f      	movs	r1, #143	; 0x8f
 8012cdc:	f001 fcec 	bl	80146b8 <__assert_func>
 8012ce0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012ce4:	6006      	str	r6, [r0, #0]
 8012ce6:	60c6      	str	r6, [r0, #12]
 8012ce8:	b13c      	cbz	r4, 8012cfa <_Bfree+0x3a>
 8012cea:	69eb      	ldr	r3, [r5, #28]
 8012cec:	6862      	ldr	r2, [r4, #4]
 8012cee:	68db      	ldr	r3, [r3, #12]
 8012cf0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012cf4:	6021      	str	r1, [r4, #0]
 8012cf6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012cfa:	bd70      	pop	{r4, r5, r6, pc}
 8012cfc:	0801556e 	.word	0x0801556e
 8012d00:	080155ee 	.word	0x080155ee

08012d04 <__multadd>:
 8012d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d08:	690d      	ldr	r5, [r1, #16]
 8012d0a:	4607      	mov	r7, r0
 8012d0c:	460c      	mov	r4, r1
 8012d0e:	461e      	mov	r6, r3
 8012d10:	f101 0c14 	add.w	ip, r1, #20
 8012d14:	2000      	movs	r0, #0
 8012d16:	f8dc 3000 	ldr.w	r3, [ip]
 8012d1a:	b299      	uxth	r1, r3
 8012d1c:	fb02 6101 	mla	r1, r2, r1, r6
 8012d20:	0c1e      	lsrs	r6, r3, #16
 8012d22:	0c0b      	lsrs	r3, r1, #16
 8012d24:	fb02 3306 	mla	r3, r2, r6, r3
 8012d28:	b289      	uxth	r1, r1
 8012d2a:	3001      	adds	r0, #1
 8012d2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012d30:	4285      	cmp	r5, r0
 8012d32:	f84c 1b04 	str.w	r1, [ip], #4
 8012d36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012d3a:	dcec      	bgt.n	8012d16 <__multadd+0x12>
 8012d3c:	b30e      	cbz	r6, 8012d82 <__multadd+0x7e>
 8012d3e:	68a3      	ldr	r3, [r4, #8]
 8012d40:	42ab      	cmp	r3, r5
 8012d42:	dc19      	bgt.n	8012d78 <__multadd+0x74>
 8012d44:	6861      	ldr	r1, [r4, #4]
 8012d46:	4638      	mov	r0, r7
 8012d48:	3101      	adds	r1, #1
 8012d4a:	f7ff ff79 	bl	8012c40 <_Balloc>
 8012d4e:	4680      	mov	r8, r0
 8012d50:	b928      	cbnz	r0, 8012d5e <__multadd+0x5a>
 8012d52:	4602      	mov	r2, r0
 8012d54:	4b0c      	ldr	r3, [pc, #48]	; (8012d88 <__multadd+0x84>)
 8012d56:	480d      	ldr	r0, [pc, #52]	; (8012d8c <__multadd+0x88>)
 8012d58:	21ba      	movs	r1, #186	; 0xba
 8012d5a:	f001 fcad 	bl	80146b8 <__assert_func>
 8012d5e:	6922      	ldr	r2, [r4, #16]
 8012d60:	3202      	adds	r2, #2
 8012d62:	f104 010c 	add.w	r1, r4, #12
 8012d66:	0092      	lsls	r2, r2, #2
 8012d68:	300c      	adds	r0, #12
 8012d6a:	f7ff f913 	bl	8011f94 <memcpy>
 8012d6e:	4621      	mov	r1, r4
 8012d70:	4638      	mov	r0, r7
 8012d72:	f7ff ffa5 	bl	8012cc0 <_Bfree>
 8012d76:	4644      	mov	r4, r8
 8012d78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012d7c:	3501      	adds	r5, #1
 8012d7e:	615e      	str	r6, [r3, #20]
 8012d80:	6125      	str	r5, [r4, #16]
 8012d82:	4620      	mov	r0, r4
 8012d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d88:	080155dd 	.word	0x080155dd
 8012d8c:	080155ee 	.word	0x080155ee

08012d90 <__s2b>:
 8012d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d94:	460c      	mov	r4, r1
 8012d96:	4615      	mov	r5, r2
 8012d98:	461f      	mov	r7, r3
 8012d9a:	2209      	movs	r2, #9
 8012d9c:	3308      	adds	r3, #8
 8012d9e:	4606      	mov	r6, r0
 8012da0:	fb93 f3f2 	sdiv	r3, r3, r2
 8012da4:	2100      	movs	r1, #0
 8012da6:	2201      	movs	r2, #1
 8012da8:	429a      	cmp	r2, r3
 8012daa:	db09      	blt.n	8012dc0 <__s2b+0x30>
 8012dac:	4630      	mov	r0, r6
 8012dae:	f7ff ff47 	bl	8012c40 <_Balloc>
 8012db2:	b940      	cbnz	r0, 8012dc6 <__s2b+0x36>
 8012db4:	4602      	mov	r2, r0
 8012db6:	4b19      	ldr	r3, [pc, #100]	; (8012e1c <__s2b+0x8c>)
 8012db8:	4819      	ldr	r0, [pc, #100]	; (8012e20 <__s2b+0x90>)
 8012dba:	21d3      	movs	r1, #211	; 0xd3
 8012dbc:	f001 fc7c 	bl	80146b8 <__assert_func>
 8012dc0:	0052      	lsls	r2, r2, #1
 8012dc2:	3101      	adds	r1, #1
 8012dc4:	e7f0      	b.n	8012da8 <__s2b+0x18>
 8012dc6:	9b08      	ldr	r3, [sp, #32]
 8012dc8:	6143      	str	r3, [r0, #20]
 8012dca:	2d09      	cmp	r5, #9
 8012dcc:	f04f 0301 	mov.w	r3, #1
 8012dd0:	6103      	str	r3, [r0, #16]
 8012dd2:	dd16      	ble.n	8012e02 <__s2b+0x72>
 8012dd4:	f104 0909 	add.w	r9, r4, #9
 8012dd8:	46c8      	mov	r8, r9
 8012dda:	442c      	add	r4, r5
 8012ddc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012de0:	4601      	mov	r1, r0
 8012de2:	3b30      	subs	r3, #48	; 0x30
 8012de4:	220a      	movs	r2, #10
 8012de6:	4630      	mov	r0, r6
 8012de8:	f7ff ff8c 	bl	8012d04 <__multadd>
 8012dec:	45a0      	cmp	r8, r4
 8012dee:	d1f5      	bne.n	8012ddc <__s2b+0x4c>
 8012df0:	f1a5 0408 	sub.w	r4, r5, #8
 8012df4:	444c      	add	r4, r9
 8012df6:	1b2d      	subs	r5, r5, r4
 8012df8:	1963      	adds	r3, r4, r5
 8012dfa:	42bb      	cmp	r3, r7
 8012dfc:	db04      	blt.n	8012e08 <__s2b+0x78>
 8012dfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e02:	340a      	adds	r4, #10
 8012e04:	2509      	movs	r5, #9
 8012e06:	e7f6      	b.n	8012df6 <__s2b+0x66>
 8012e08:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012e0c:	4601      	mov	r1, r0
 8012e0e:	3b30      	subs	r3, #48	; 0x30
 8012e10:	220a      	movs	r2, #10
 8012e12:	4630      	mov	r0, r6
 8012e14:	f7ff ff76 	bl	8012d04 <__multadd>
 8012e18:	e7ee      	b.n	8012df8 <__s2b+0x68>
 8012e1a:	bf00      	nop
 8012e1c:	080155dd 	.word	0x080155dd
 8012e20:	080155ee 	.word	0x080155ee

08012e24 <__hi0bits>:
 8012e24:	0c03      	lsrs	r3, r0, #16
 8012e26:	041b      	lsls	r3, r3, #16
 8012e28:	b9d3      	cbnz	r3, 8012e60 <__hi0bits+0x3c>
 8012e2a:	0400      	lsls	r0, r0, #16
 8012e2c:	2310      	movs	r3, #16
 8012e2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012e32:	bf04      	itt	eq
 8012e34:	0200      	lsleq	r0, r0, #8
 8012e36:	3308      	addeq	r3, #8
 8012e38:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012e3c:	bf04      	itt	eq
 8012e3e:	0100      	lsleq	r0, r0, #4
 8012e40:	3304      	addeq	r3, #4
 8012e42:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012e46:	bf04      	itt	eq
 8012e48:	0080      	lsleq	r0, r0, #2
 8012e4a:	3302      	addeq	r3, #2
 8012e4c:	2800      	cmp	r0, #0
 8012e4e:	db05      	blt.n	8012e5c <__hi0bits+0x38>
 8012e50:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012e54:	f103 0301 	add.w	r3, r3, #1
 8012e58:	bf08      	it	eq
 8012e5a:	2320      	moveq	r3, #32
 8012e5c:	4618      	mov	r0, r3
 8012e5e:	4770      	bx	lr
 8012e60:	2300      	movs	r3, #0
 8012e62:	e7e4      	b.n	8012e2e <__hi0bits+0xa>

08012e64 <__lo0bits>:
 8012e64:	6803      	ldr	r3, [r0, #0]
 8012e66:	f013 0207 	ands.w	r2, r3, #7
 8012e6a:	d00c      	beq.n	8012e86 <__lo0bits+0x22>
 8012e6c:	07d9      	lsls	r1, r3, #31
 8012e6e:	d422      	bmi.n	8012eb6 <__lo0bits+0x52>
 8012e70:	079a      	lsls	r2, r3, #30
 8012e72:	bf49      	itett	mi
 8012e74:	085b      	lsrmi	r3, r3, #1
 8012e76:	089b      	lsrpl	r3, r3, #2
 8012e78:	6003      	strmi	r3, [r0, #0]
 8012e7a:	2201      	movmi	r2, #1
 8012e7c:	bf5c      	itt	pl
 8012e7e:	6003      	strpl	r3, [r0, #0]
 8012e80:	2202      	movpl	r2, #2
 8012e82:	4610      	mov	r0, r2
 8012e84:	4770      	bx	lr
 8012e86:	b299      	uxth	r1, r3
 8012e88:	b909      	cbnz	r1, 8012e8e <__lo0bits+0x2a>
 8012e8a:	0c1b      	lsrs	r3, r3, #16
 8012e8c:	2210      	movs	r2, #16
 8012e8e:	b2d9      	uxtb	r1, r3
 8012e90:	b909      	cbnz	r1, 8012e96 <__lo0bits+0x32>
 8012e92:	3208      	adds	r2, #8
 8012e94:	0a1b      	lsrs	r3, r3, #8
 8012e96:	0719      	lsls	r1, r3, #28
 8012e98:	bf04      	itt	eq
 8012e9a:	091b      	lsreq	r3, r3, #4
 8012e9c:	3204      	addeq	r2, #4
 8012e9e:	0799      	lsls	r1, r3, #30
 8012ea0:	bf04      	itt	eq
 8012ea2:	089b      	lsreq	r3, r3, #2
 8012ea4:	3202      	addeq	r2, #2
 8012ea6:	07d9      	lsls	r1, r3, #31
 8012ea8:	d403      	bmi.n	8012eb2 <__lo0bits+0x4e>
 8012eaa:	085b      	lsrs	r3, r3, #1
 8012eac:	f102 0201 	add.w	r2, r2, #1
 8012eb0:	d003      	beq.n	8012eba <__lo0bits+0x56>
 8012eb2:	6003      	str	r3, [r0, #0]
 8012eb4:	e7e5      	b.n	8012e82 <__lo0bits+0x1e>
 8012eb6:	2200      	movs	r2, #0
 8012eb8:	e7e3      	b.n	8012e82 <__lo0bits+0x1e>
 8012eba:	2220      	movs	r2, #32
 8012ebc:	e7e1      	b.n	8012e82 <__lo0bits+0x1e>
	...

08012ec0 <__i2b>:
 8012ec0:	b510      	push	{r4, lr}
 8012ec2:	460c      	mov	r4, r1
 8012ec4:	2101      	movs	r1, #1
 8012ec6:	f7ff febb 	bl	8012c40 <_Balloc>
 8012eca:	4602      	mov	r2, r0
 8012ecc:	b928      	cbnz	r0, 8012eda <__i2b+0x1a>
 8012ece:	4b05      	ldr	r3, [pc, #20]	; (8012ee4 <__i2b+0x24>)
 8012ed0:	4805      	ldr	r0, [pc, #20]	; (8012ee8 <__i2b+0x28>)
 8012ed2:	f240 1145 	movw	r1, #325	; 0x145
 8012ed6:	f001 fbef 	bl	80146b8 <__assert_func>
 8012eda:	2301      	movs	r3, #1
 8012edc:	6144      	str	r4, [r0, #20]
 8012ede:	6103      	str	r3, [r0, #16]
 8012ee0:	bd10      	pop	{r4, pc}
 8012ee2:	bf00      	nop
 8012ee4:	080155dd 	.word	0x080155dd
 8012ee8:	080155ee 	.word	0x080155ee

08012eec <__multiply>:
 8012eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ef0:	4691      	mov	r9, r2
 8012ef2:	690a      	ldr	r2, [r1, #16]
 8012ef4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012ef8:	429a      	cmp	r2, r3
 8012efa:	bfb8      	it	lt
 8012efc:	460b      	movlt	r3, r1
 8012efe:	460c      	mov	r4, r1
 8012f00:	bfbc      	itt	lt
 8012f02:	464c      	movlt	r4, r9
 8012f04:	4699      	movlt	r9, r3
 8012f06:	6927      	ldr	r7, [r4, #16]
 8012f08:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012f0c:	68a3      	ldr	r3, [r4, #8]
 8012f0e:	6861      	ldr	r1, [r4, #4]
 8012f10:	eb07 060a 	add.w	r6, r7, sl
 8012f14:	42b3      	cmp	r3, r6
 8012f16:	b085      	sub	sp, #20
 8012f18:	bfb8      	it	lt
 8012f1a:	3101      	addlt	r1, #1
 8012f1c:	f7ff fe90 	bl	8012c40 <_Balloc>
 8012f20:	b930      	cbnz	r0, 8012f30 <__multiply+0x44>
 8012f22:	4602      	mov	r2, r0
 8012f24:	4b44      	ldr	r3, [pc, #272]	; (8013038 <__multiply+0x14c>)
 8012f26:	4845      	ldr	r0, [pc, #276]	; (801303c <__multiply+0x150>)
 8012f28:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8012f2c:	f001 fbc4 	bl	80146b8 <__assert_func>
 8012f30:	f100 0514 	add.w	r5, r0, #20
 8012f34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012f38:	462b      	mov	r3, r5
 8012f3a:	2200      	movs	r2, #0
 8012f3c:	4543      	cmp	r3, r8
 8012f3e:	d321      	bcc.n	8012f84 <__multiply+0x98>
 8012f40:	f104 0314 	add.w	r3, r4, #20
 8012f44:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012f48:	f109 0314 	add.w	r3, r9, #20
 8012f4c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012f50:	9202      	str	r2, [sp, #8]
 8012f52:	1b3a      	subs	r2, r7, r4
 8012f54:	3a15      	subs	r2, #21
 8012f56:	f022 0203 	bic.w	r2, r2, #3
 8012f5a:	3204      	adds	r2, #4
 8012f5c:	f104 0115 	add.w	r1, r4, #21
 8012f60:	428f      	cmp	r7, r1
 8012f62:	bf38      	it	cc
 8012f64:	2204      	movcc	r2, #4
 8012f66:	9201      	str	r2, [sp, #4]
 8012f68:	9a02      	ldr	r2, [sp, #8]
 8012f6a:	9303      	str	r3, [sp, #12]
 8012f6c:	429a      	cmp	r2, r3
 8012f6e:	d80c      	bhi.n	8012f8a <__multiply+0x9e>
 8012f70:	2e00      	cmp	r6, #0
 8012f72:	dd03      	ble.n	8012f7c <__multiply+0x90>
 8012f74:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d05b      	beq.n	8013034 <__multiply+0x148>
 8012f7c:	6106      	str	r6, [r0, #16]
 8012f7e:	b005      	add	sp, #20
 8012f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f84:	f843 2b04 	str.w	r2, [r3], #4
 8012f88:	e7d8      	b.n	8012f3c <__multiply+0x50>
 8012f8a:	f8b3 a000 	ldrh.w	sl, [r3]
 8012f8e:	f1ba 0f00 	cmp.w	sl, #0
 8012f92:	d024      	beq.n	8012fde <__multiply+0xf2>
 8012f94:	f104 0e14 	add.w	lr, r4, #20
 8012f98:	46a9      	mov	r9, r5
 8012f9a:	f04f 0c00 	mov.w	ip, #0
 8012f9e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012fa2:	f8d9 1000 	ldr.w	r1, [r9]
 8012fa6:	fa1f fb82 	uxth.w	fp, r2
 8012faa:	b289      	uxth	r1, r1
 8012fac:	fb0a 110b 	mla	r1, sl, fp, r1
 8012fb0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012fb4:	f8d9 2000 	ldr.w	r2, [r9]
 8012fb8:	4461      	add	r1, ip
 8012fba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012fbe:	fb0a c20b 	mla	r2, sl, fp, ip
 8012fc2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012fc6:	b289      	uxth	r1, r1
 8012fc8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012fcc:	4577      	cmp	r7, lr
 8012fce:	f849 1b04 	str.w	r1, [r9], #4
 8012fd2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012fd6:	d8e2      	bhi.n	8012f9e <__multiply+0xb2>
 8012fd8:	9a01      	ldr	r2, [sp, #4]
 8012fda:	f845 c002 	str.w	ip, [r5, r2]
 8012fde:	9a03      	ldr	r2, [sp, #12]
 8012fe0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012fe4:	3304      	adds	r3, #4
 8012fe6:	f1b9 0f00 	cmp.w	r9, #0
 8012fea:	d021      	beq.n	8013030 <__multiply+0x144>
 8012fec:	6829      	ldr	r1, [r5, #0]
 8012fee:	f104 0c14 	add.w	ip, r4, #20
 8012ff2:	46ae      	mov	lr, r5
 8012ff4:	f04f 0a00 	mov.w	sl, #0
 8012ff8:	f8bc b000 	ldrh.w	fp, [ip]
 8012ffc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8013000:	fb09 220b 	mla	r2, r9, fp, r2
 8013004:	4452      	add	r2, sl
 8013006:	b289      	uxth	r1, r1
 8013008:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801300c:	f84e 1b04 	str.w	r1, [lr], #4
 8013010:	f85c 1b04 	ldr.w	r1, [ip], #4
 8013014:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013018:	f8be 1000 	ldrh.w	r1, [lr]
 801301c:	fb09 110a 	mla	r1, r9, sl, r1
 8013020:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8013024:	4567      	cmp	r7, ip
 8013026:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801302a:	d8e5      	bhi.n	8012ff8 <__multiply+0x10c>
 801302c:	9a01      	ldr	r2, [sp, #4]
 801302e:	50a9      	str	r1, [r5, r2]
 8013030:	3504      	adds	r5, #4
 8013032:	e799      	b.n	8012f68 <__multiply+0x7c>
 8013034:	3e01      	subs	r6, #1
 8013036:	e79b      	b.n	8012f70 <__multiply+0x84>
 8013038:	080155dd 	.word	0x080155dd
 801303c:	080155ee 	.word	0x080155ee

08013040 <__pow5mult>:
 8013040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013044:	4615      	mov	r5, r2
 8013046:	f012 0203 	ands.w	r2, r2, #3
 801304a:	4606      	mov	r6, r0
 801304c:	460f      	mov	r7, r1
 801304e:	d007      	beq.n	8013060 <__pow5mult+0x20>
 8013050:	4c25      	ldr	r4, [pc, #148]	; (80130e8 <__pow5mult+0xa8>)
 8013052:	3a01      	subs	r2, #1
 8013054:	2300      	movs	r3, #0
 8013056:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801305a:	f7ff fe53 	bl	8012d04 <__multadd>
 801305e:	4607      	mov	r7, r0
 8013060:	10ad      	asrs	r5, r5, #2
 8013062:	d03d      	beq.n	80130e0 <__pow5mult+0xa0>
 8013064:	69f4      	ldr	r4, [r6, #28]
 8013066:	b97c      	cbnz	r4, 8013088 <__pow5mult+0x48>
 8013068:	2010      	movs	r0, #16
 801306a:	f7fd fe6b 	bl	8010d44 <malloc>
 801306e:	4602      	mov	r2, r0
 8013070:	61f0      	str	r0, [r6, #28]
 8013072:	b928      	cbnz	r0, 8013080 <__pow5mult+0x40>
 8013074:	4b1d      	ldr	r3, [pc, #116]	; (80130ec <__pow5mult+0xac>)
 8013076:	481e      	ldr	r0, [pc, #120]	; (80130f0 <__pow5mult+0xb0>)
 8013078:	f240 11b3 	movw	r1, #435	; 0x1b3
 801307c:	f001 fb1c 	bl	80146b8 <__assert_func>
 8013080:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013084:	6004      	str	r4, [r0, #0]
 8013086:	60c4      	str	r4, [r0, #12]
 8013088:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801308c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013090:	b94c      	cbnz	r4, 80130a6 <__pow5mult+0x66>
 8013092:	f240 2171 	movw	r1, #625	; 0x271
 8013096:	4630      	mov	r0, r6
 8013098:	f7ff ff12 	bl	8012ec0 <__i2b>
 801309c:	2300      	movs	r3, #0
 801309e:	f8c8 0008 	str.w	r0, [r8, #8]
 80130a2:	4604      	mov	r4, r0
 80130a4:	6003      	str	r3, [r0, #0]
 80130a6:	f04f 0900 	mov.w	r9, #0
 80130aa:	07eb      	lsls	r3, r5, #31
 80130ac:	d50a      	bpl.n	80130c4 <__pow5mult+0x84>
 80130ae:	4639      	mov	r1, r7
 80130b0:	4622      	mov	r2, r4
 80130b2:	4630      	mov	r0, r6
 80130b4:	f7ff ff1a 	bl	8012eec <__multiply>
 80130b8:	4639      	mov	r1, r7
 80130ba:	4680      	mov	r8, r0
 80130bc:	4630      	mov	r0, r6
 80130be:	f7ff fdff 	bl	8012cc0 <_Bfree>
 80130c2:	4647      	mov	r7, r8
 80130c4:	106d      	asrs	r5, r5, #1
 80130c6:	d00b      	beq.n	80130e0 <__pow5mult+0xa0>
 80130c8:	6820      	ldr	r0, [r4, #0]
 80130ca:	b938      	cbnz	r0, 80130dc <__pow5mult+0x9c>
 80130cc:	4622      	mov	r2, r4
 80130ce:	4621      	mov	r1, r4
 80130d0:	4630      	mov	r0, r6
 80130d2:	f7ff ff0b 	bl	8012eec <__multiply>
 80130d6:	6020      	str	r0, [r4, #0]
 80130d8:	f8c0 9000 	str.w	r9, [r0]
 80130dc:	4604      	mov	r4, r0
 80130de:	e7e4      	b.n	80130aa <__pow5mult+0x6a>
 80130e0:	4638      	mov	r0, r7
 80130e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80130e6:	bf00      	nop
 80130e8:	08015738 	.word	0x08015738
 80130ec:	0801556e 	.word	0x0801556e
 80130f0:	080155ee 	.word	0x080155ee

080130f4 <__lshift>:
 80130f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80130f8:	460c      	mov	r4, r1
 80130fa:	6849      	ldr	r1, [r1, #4]
 80130fc:	6923      	ldr	r3, [r4, #16]
 80130fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013102:	68a3      	ldr	r3, [r4, #8]
 8013104:	4607      	mov	r7, r0
 8013106:	4691      	mov	r9, r2
 8013108:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801310c:	f108 0601 	add.w	r6, r8, #1
 8013110:	42b3      	cmp	r3, r6
 8013112:	db0b      	blt.n	801312c <__lshift+0x38>
 8013114:	4638      	mov	r0, r7
 8013116:	f7ff fd93 	bl	8012c40 <_Balloc>
 801311a:	4605      	mov	r5, r0
 801311c:	b948      	cbnz	r0, 8013132 <__lshift+0x3e>
 801311e:	4602      	mov	r2, r0
 8013120:	4b28      	ldr	r3, [pc, #160]	; (80131c4 <__lshift+0xd0>)
 8013122:	4829      	ldr	r0, [pc, #164]	; (80131c8 <__lshift+0xd4>)
 8013124:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8013128:	f001 fac6 	bl	80146b8 <__assert_func>
 801312c:	3101      	adds	r1, #1
 801312e:	005b      	lsls	r3, r3, #1
 8013130:	e7ee      	b.n	8013110 <__lshift+0x1c>
 8013132:	2300      	movs	r3, #0
 8013134:	f100 0114 	add.w	r1, r0, #20
 8013138:	f100 0210 	add.w	r2, r0, #16
 801313c:	4618      	mov	r0, r3
 801313e:	4553      	cmp	r3, sl
 8013140:	db33      	blt.n	80131aa <__lshift+0xb6>
 8013142:	6920      	ldr	r0, [r4, #16]
 8013144:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013148:	f104 0314 	add.w	r3, r4, #20
 801314c:	f019 091f 	ands.w	r9, r9, #31
 8013150:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013154:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013158:	d02b      	beq.n	80131b2 <__lshift+0xbe>
 801315a:	f1c9 0e20 	rsb	lr, r9, #32
 801315e:	468a      	mov	sl, r1
 8013160:	2200      	movs	r2, #0
 8013162:	6818      	ldr	r0, [r3, #0]
 8013164:	fa00 f009 	lsl.w	r0, r0, r9
 8013168:	4310      	orrs	r0, r2
 801316a:	f84a 0b04 	str.w	r0, [sl], #4
 801316e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013172:	459c      	cmp	ip, r3
 8013174:	fa22 f20e 	lsr.w	r2, r2, lr
 8013178:	d8f3      	bhi.n	8013162 <__lshift+0x6e>
 801317a:	ebac 0304 	sub.w	r3, ip, r4
 801317e:	3b15      	subs	r3, #21
 8013180:	f023 0303 	bic.w	r3, r3, #3
 8013184:	3304      	adds	r3, #4
 8013186:	f104 0015 	add.w	r0, r4, #21
 801318a:	4584      	cmp	ip, r0
 801318c:	bf38      	it	cc
 801318e:	2304      	movcc	r3, #4
 8013190:	50ca      	str	r2, [r1, r3]
 8013192:	b10a      	cbz	r2, 8013198 <__lshift+0xa4>
 8013194:	f108 0602 	add.w	r6, r8, #2
 8013198:	3e01      	subs	r6, #1
 801319a:	4638      	mov	r0, r7
 801319c:	612e      	str	r6, [r5, #16]
 801319e:	4621      	mov	r1, r4
 80131a0:	f7ff fd8e 	bl	8012cc0 <_Bfree>
 80131a4:	4628      	mov	r0, r5
 80131a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80131aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80131ae:	3301      	adds	r3, #1
 80131b0:	e7c5      	b.n	801313e <__lshift+0x4a>
 80131b2:	3904      	subs	r1, #4
 80131b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80131b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80131bc:	459c      	cmp	ip, r3
 80131be:	d8f9      	bhi.n	80131b4 <__lshift+0xc0>
 80131c0:	e7ea      	b.n	8013198 <__lshift+0xa4>
 80131c2:	bf00      	nop
 80131c4:	080155dd 	.word	0x080155dd
 80131c8:	080155ee 	.word	0x080155ee

080131cc <__mcmp>:
 80131cc:	b530      	push	{r4, r5, lr}
 80131ce:	6902      	ldr	r2, [r0, #16]
 80131d0:	690c      	ldr	r4, [r1, #16]
 80131d2:	1b12      	subs	r2, r2, r4
 80131d4:	d10e      	bne.n	80131f4 <__mcmp+0x28>
 80131d6:	f100 0314 	add.w	r3, r0, #20
 80131da:	3114      	adds	r1, #20
 80131dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80131e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80131e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80131e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80131ec:	42a5      	cmp	r5, r4
 80131ee:	d003      	beq.n	80131f8 <__mcmp+0x2c>
 80131f0:	d305      	bcc.n	80131fe <__mcmp+0x32>
 80131f2:	2201      	movs	r2, #1
 80131f4:	4610      	mov	r0, r2
 80131f6:	bd30      	pop	{r4, r5, pc}
 80131f8:	4283      	cmp	r3, r0
 80131fa:	d3f3      	bcc.n	80131e4 <__mcmp+0x18>
 80131fc:	e7fa      	b.n	80131f4 <__mcmp+0x28>
 80131fe:	f04f 32ff 	mov.w	r2, #4294967295
 8013202:	e7f7      	b.n	80131f4 <__mcmp+0x28>

08013204 <__mdiff>:
 8013204:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013208:	460c      	mov	r4, r1
 801320a:	4606      	mov	r6, r0
 801320c:	4611      	mov	r1, r2
 801320e:	4620      	mov	r0, r4
 8013210:	4690      	mov	r8, r2
 8013212:	f7ff ffdb 	bl	80131cc <__mcmp>
 8013216:	1e05      	subs	r5, r0, #0
 8013218:	d110      	bne.n	801323c <__mdiff+0x38>
 801321a:	4629      	mov	r1, r5
 801321c:	4630      	mov	r0, r6
 801321e:	f7ff fd0f 	bl	8012c40 <_Balloc>
 8013222:	b930      	cbnz	r0, 8013232 <__mdiff+0x2e>
 8013224:	4b3a      	ldr	r3, [pc, #232]	; (8013310 <__mdiff+0x10c>)
 8013226:	4602      	mov	r2, r0
 8013228:	f240 2137 	movw	r1, #567	; 0x237
 801322c:	4839      	ldr	r0, [pc, #228]	; (8013314 <__mdiff+0x110>)
 801322e:	f001 fa43 	bl	80146b8 <__assert_func>
 8013232:	2301      	movs	r3, #1
 8013234:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013238:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801323c:	bfa4      	itt	ge
 801323e:	4643      	movge	r3, r8
 8013240:	46a0      	movge	r8, r4
 8013242:	4630      	mov	r0, r6
 8013244:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013248:	bfa6      	itte	ge
 801324a:	461c      	movge	r4, r3
 801324c:	2500      	movge	r5, #0
 801324e:	2501      	movlt	r5, #1
 8013250:	f7ff fcf6 	bl	8012c40 <_Balloc>
 8013254:	b920      	cbnz	r0, 8013260 <__mdiff+0x5c>
 8013256:	4b2e      	ldr	r3, [pc, #184]	; (8013310 <__mdiff+0x10c>)
 8013258:	4602      	mov	r2, r0
 801325a:	f240 2145 	movw	r1, #581	; 0x245
 801325e:	e7e5      	b.n	801322c <__mdiff+0x28>
 8013260:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013264:	6926      	ldr	r6, [r4, #16]
 8013266:	60c5      	str	r5, [r0, #12]
 8013268:	f104 0914 	add.w	r9, r4, #20
 801326c:	f108 0514 	add.w	r5, r8, #20
 8013270:	f100 0e14 	add.w	lr, r0, #20
 8013274:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8013278:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801327c:	f108 0210 	add.w	r2, r8, #16
 8013280:	46f2      	mov	sl, lr
 8013282:	2100      	movs	r1, #0
 8013284:	f859 3b04 	ldr.w	r3, [r9], #4
 8013288:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801328c:	fa11 f88b 	uxtah	r8, r1, fp
 8013290:	b299      	uxth	r1, r3
 8013292:	0c1b      	lsrs	r3, r3, #16
 8013294:	eba8 0801 	sub.w	r8, r8, r1
 8013298:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801329c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80132a0:	fa1f f888 	uxth.w	r8, r8
 80132a4:	1419      	asrs	r1, r3, #16
 80132a6:	454e      	cmp	r6, r9
 80132a8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80132ac:	f84a 3b04 	str.w	r3, [sl], #4
 80132b0:	d8e8      	bhi.n	8013284 <__mdiff+0x80>
 80132b2:	1b33      	subs	r3, r6, r4
 80132b4:	3b15      	subs	r3, #21
 80132b6:	f023 0303 	bic.w	r3, r3, #3
 80132ba:	3304      	adds	r3, #4
 80132bc:	3415      	adds	r4, #21
 80132be:	42a6      	cmp	r6, r4
 80132c0:	bf38      	it	cc
 80132c2:	2304      	movcc	r3, #4
 80132c4:	441d      	add	r5, r3
 80132c6:	4473      	add	r3, lr
 80132c8:	469e      	mov	lr, r3
 80132ca:	462e      	mov	r6, r5
 80132cc:	4566      	cmp	r6, ip
 80132ce:	d30e      	bcc.n	80132ee <__mdiff+0xea>
 80132d0:	f10c 0203 	add.w	r2, ip, #3
 80132d4:	1b52      	subs	r2, r2, r5
 80132d6:	f022 0203 	bic.w	r2, r2, #3
 80132da:	3d03      	subs	r5, #3
 80132dc:	45ac      	cmp	ip, r5
 80132de:	bf38      	it	cc
 80132e0:	2200      	movcc	r2, #0
 80132e2:	4413      	add	r3, r2
 80132e4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80132e8:	b17a      	cbz	r2, 801330a <__mdiff+0x106>
 80132ea:	6107      	str	r7, [r0, #16]
 80132ec:	e7a4      	b.n	8013238 <__mdiff+0x34>
 80132ee:	f856 8b04 	ldr.w	r8, [r6], #4
 80132f2:	fa11 f288 	uxtah	r2, r1, r8
 80132f6:	1414      	asrs	r4, r2, #16
 80132f8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80132fc:	b292      	uxth	r2, r2
 80132fe:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8013302:	f84e 2b04 	str.w	r2, [lr], #4
 8013306:	1421      	asrs	r1, r4, #16
 8013308:	e7e0      	b.n	80132cc <__mdiff+0xc8>
 801330a:	3f01      	subs	r7, #1
 801330c:	e7ea      	b.n	80132e4 <__mdiff+0xe0>
 801330e:	bf00      	nop
 8013310:	080155dd 	.word	0x080155dd
 8013314:	080155ee 	.word	0x080155ee

08013318 <__ulp>:
 8013318:	b082      	sub	sp, #8
 801331a:	ed8d 0b00 	vstr	d0, [sp]
 801331e:	9a01      	ldr	r2, [sp, #4]
 8013320:	4b0f      	ldr	r3, [pc, #60]	; (8013360 <__ulp+0x48>)
 8013322:	4013      	ands	r3, r2
 8013324:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8013328:	2b00      	cmp	r3, #0
 801332a:	dc08      	bgt.n	801333e <__ulp+0x26>
 801332c:	425b      	negs	r3, r3
 801332e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8013332:	ea4f 5223 	mov.w	r2, r3, asr #20
 8013336:	da04      	bge.n	8013342 <__ulp+0x2a>
 8013338:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801333c:	4113      	asrs	r3, r2
 801333e:	2200      	movs	r2, #0
 8013340:	e008      	b.n	8013354 <__ulp+0x3c>
 8013342:	f1a2 0314 	sub.w	r3, r2, #20
 8013346:	2b1e      	cmp	r3, #30
 8013348:	bfda      	itte	le
 801334a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801334e:	40da      	lsrle	r2, r3
 8013350:	2201      	movgt	r2, #1
 8013352:	2300      	movs	r3, #0
 8013354:	4619      	mov	r1, r3
 8013356:	4610      	mov	r0, r2
 8013358:	ec41 0b10 	vmov	d0, r0, r1
 801335c:	b002      	add	sp, #8
 801335e:	4770      	bx	lr
 8013360:	7ff00000 	.word	0x7ff00000

08013364 <__b2d>:
 8013364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013368:	6906      	ldr	r6, [r0, #16]
 801336a:	f100 0814 	add.w	r8, r0, #20
 801336e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8013372:	1f37      	subs	r7, r6, #4
 8013374:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8013378:	4610      	mov	r0, r2
 801337a:	f7ff fd53 	bl	8012e24 <__hi0bits>
 801337e:	f1c0 0320 	rsb	r3, r0, #32
 8013382:	280a      	cmp	r0, #10
 8013384:	600b      	str	r3, [r1, #0]
 8013386:	491b      	ldr	r1, [pc, #108]	; (80133f4 <__b2d+0x90>)
 8013388:	dc15      	bgt.n	80133b6 <__b2d+0x52>
 801338a:	f1c0 0c0b 	rsb	ip, r0, #11
 801338e:	fa22 f30c 	lsr.w	r3, r2, ip
 8013392:	45b8      	cmp	r8, r7
 8013394:	ea43 0501 	orr.w	r5, r3, r1
 8013398:	bf34      	ite	cc
 801339a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801339e:	2300      	movcs	r3, #0
 80133a0:	3015      	adds	r0, #21
 80133a2:	fa02 f000 	lsl.w	r0, r2, r0
 80133a6:	fa23 f30c 	lsr.w	r3, r3, ip
 80133aa:	4303      	orrs	r3, r0
 80133ac:	461c      	mov	r4, r3
 80133ae:	ec45 4b10 	vmov	d0, r4, r5
 80133b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133b6:	45b8      	cmp	r8, r7
 80133b8:	bf3a      	itte	cc
 80133ba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80133be:	f1a6 0708 	subcc.w	r7, r6, #8
 80133c2:	2300      	movcs	r3, #0
 80133c4:	380b      	subs	r0, #11
 80133c6:	d012      	beq.n	80133ee <__b2d+0x8a>
 80133c8:	f1c0 0120 	rsb	r1, r0, #32
 80133cc:	fa23 f401 	lsr.w	r4, r3, r1
 80133d0:	4082      	lsls	r2, r0
 80133d2:	4322      	orrs	r2, r4
 80133d4:	4547      	cmp	r7, r8
 80133d6:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80133da:	bf8c      	ite	hi
 80133dc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80133e0:	2200      	movls	r2, #0
 80133e2:	4083      	lsls	r3, r0
 80133e4:	40ca      	lsrs	r2, r1
 80133e6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80133ea:	4313      	orrs	r3, r2
 80133ec:	e7de      	b.n	80133ac <__b2d+0x48>
 80133ee:	ea42 0501 	orr.w	r5, r2, r1
 80133f2:	e7db      	b.n	80133ac <__b2d+0x48>
 80133f4:	3ff00000 	.word	0x3ff00000

080133f8 <__d2b>:
 80133f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80133fc:	460f      	mov	r7, r1
 80133fe:	2101      	movs	r1, #1
 8013400:	ec59 8b10 	vmov	r8, r9, d0
 8013404:	4616      	mov	r6, r2
 8013406:	f7ff fc1b 	bl	8012c40 <_Balloc>
 801340a:	4604      	mov	r4, r0
 801340c:	b930      	cbnz	r0, 801341c <__d2b+0x24>
 801340e:	4602      	mov	r2, r0
 8013410:	4b24      	ldr	r3, [pc, #144]	; (80134a4 <__d2b+0xac>)
 8013412:	4825      	ldr	r0, [pc, #148]	; (80134a8 <__d2b+0xb0>)
 8013414:	f240 310f 	movw	r1, #783	; 0x30f
 8013418:	f001 f94e 	bl	80146b8 <__assert_func>
 801341c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013420:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013424:	bb2d      	cbnz	r5, 8013472 <__d2b+0x7a>
 8013426:	9301      	str	r3, [sp, #4]
 8013428:	f1b8 0300 	subs.w	r3, r8, #0
 801342c:	d026      	beq.n	801347c <__d2b+0x84>
 801342e:	4668      	mov	r0, sp
 8013430:	9300      	str	r3, [sp, #0]
 8013432:	f7ff fd17 	bl	8012e64 <__lo0bits>
 8013436:	e9dd 1200 	ldrd	r1, r2, [sp]
 801343a:	b1e8      	cbz	r0, 8013478 <__d2b+0x80>
 801343c:	f1c0 0320 	rsb	r3, r0, #32
 8013440:	fa02 f303 	lsl.w	r3, r2, r3
 8013444:	430b      	orrs	r3, r1
 8013446:	40c2      	lsrs	r2, r0
 8013448:	6163      	str	r3, [r4, #20]
 801344a:	9201      	str	r2, [sp, #4]
 801344c:	9b01      	ldr	r3, [sp, #4]
 801344e:	61a3      	str	r3, [r4, #24]
 8013450:	2b00      	cmp	r3, #0
 8013452:	bf14      	ite	ne
 8013454:	2202      	movne	r2, #2
 8013456:	2201      	moveq	r2, #1
 8013458:	6122      	str	r2, [r4, #16]
 801345a:	b1bd      	cbz	r5, 801348c <__d2b+0x94>
 801345c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013460:	4405      	add	r5, r0
 8013462:	603d      	str	r5, [r7, #0]
 8013464:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013468:	6030      	str	r0, [r6, #0]
 801346a:	4620      	mov	r0, r4
 801346c:	b003      	add	sp, #12
 801346e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013472:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013476:	e7d6      	b.n	8013426 <__d2b+0x2e>
 8013478:	6161      	str	r1, [r4, #20]
 801347a:	e7e7      	b.n	801344c <__d2b+0x54>
 801347c:	a801      	add	r0, sp, #4
 801347e:	f7ff fcf1 	bl	8012e64 <__lo0bits>
 8013482:	9b01      	ldr	r3, [sp, #4]
 8013484:	6163      	str	r3, [r4, #20]
 8013486:	3020      	adds	r0, #32
 8013488:	2201      	movs	r2, #1
 801348a:	e7e5      	b.n	8013458 <__d2b+0x60>
 801348c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013490:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013494:	6038      	str	r0, [r7, #0]
 8013496:	6918      	ldr	r0, [r3, #16]
 8013498:	f7ff fcc4 	bl	8012e24 <__hi0bits>
 801349c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80134a0:	e7e2      	b.n	8013468 <__d2b+0x70>
 80134a2:	bf00      	nop
 80134a4:	080155dd 	.word	0x080155dd
 80134a8:	080155ee 	.word	0x080155ee

080134ac <__ratio>:
 80134ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134b0:	4688      	mov	r8, r1
 80134b2:	4669      	mov	r1, sp
 80134b4:	4681      	mov	r9, r0
 80134b6:	f7ff ff55 	bl	8013364 <__b2d>
 80134ba:	a901      	add	r1, sp, #4
 80134bc:	4640      	mov	r0, r8
 80134be:	ec55 4b10 	vmov	r4, r5, d0
 80134c2:	ee10 aa10 	vmov	sl, s0
 80134c6:	f7ff ff4d 	bl	8013364 <__b2d>
 80134ca:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80134ce:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80134d2:	1ad2      	subs	r2, r2, r3
 80134d4:	e9dd 3100 	ldrd	r3, r1, [sp]
 80134d8:	1a5b      	subs	r3, r3, r1
 80134da:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80134de:	ec57 6b10 	vmov	r6, r7, d0
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	bfd6      	itet	le
 80134e6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80134ea:	462a      	movgt	r2, r5
 80134ec:	463a      	movle	r2, r7
 80134ee:	46ab      	mov	fp, r5
 80134f0:	bfd6      	itet	le
 80134f2:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 80134f6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80134fa:	ee00 3a90 	vmovle	s1, r3
 80134fe:	ec4b ab17 	vmov	d7, sl, fp
 8013502:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8013506:	b003      	add	sp, #12
 8013508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801350c <__copybits>:
 801350c:	3901      	subs	r1, #1
 801350e:	b570      	push	{r4, r5, r6, lr}
 8013510:	1149      	asrs	r1, r1, #5
 8013512:	6914      	ldr	r4, [r2, #16]
 8013514:	3101      	adds	r1, #1
 8013516:	f102 0314 	add.w	r3, r2, #20
 801351a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801351e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013522:	1f05      	subs	r5, r0, #4
 8013524:	42a3      	cmp	r3, r4
 8013526:	d30c      	bcc.n	8013542 <__copybits+0x36>
 8013528:	1aa3      	subs	r3, r4, r2
 801352a:	3b11      	subs	r3, #17
 801352c:	f023 0303 	bic.w	r3, r3, #3
 8013530:	3211      	adds	r2, #17
 8013532:	42a2      	cmp	r2, r4
 8013534:	bf88      	it	hi
 8013536:	2300      	movhi	r3, #0
 8013538:	4418      	add	r0, r3
 801353a:	2300      	movs	r3, #0
 801353c:	4288      	cmp	r0, r1
 801353e:	d305      	bcc.n	801354c <__copybits+0x40>
 8013540:	bd70      	pop	{r4, r5, r6, pc}
 8013542:	f853 6b04 	ldr.w	r6, [r3], #4
 8013546:	f845 6f04 	str.w	r6, [r5, #4]!
 801354a:	e7eb      	b.n	8013524 <__copybits+0x18>
 801354c:	f840 3b04 	str.w	r3, [r0], #4
 8013550:	e7f4      	b.n	801353c <__copybits+0x30>

08013552 <__any_on>:
 8013552:	f100 0214 	add.w	r2, r0, #20
 8013556:	6900      	ldr	r0, [r0, #16]
 8013558:	114b      	asrs	r3, r1, #5
 801355a:	4298      	cmp	r0, r3
 801355c:	b510      	push	{r4, lr}
 801355e:	db11      	blt.n	8013584 <__any_on+0x32>
 8013560:	dd0a      	ble.n	8013578 <__any_on+0x26>
 8013562:	f011 011f 	ands.w	r1, r1, #31
 8013566:	d007      	beq.n	8013578 <__any_on+0x26>
 8013568:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801356c:	fa24 f001 	lsr.w	r0, r4, r1
 8013570:	fa00 f101 	lsl.w	r1, r0, r1
 8013574:	428c      	cmp	r4, r1
 8013576:	d10b      	bne.n	8013590 <__any_on+0x3e>
 8013578:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801357c:	4293      	cmp	r3, r2
 801357e:	d803      	bhi.n	8013588 <__any_on+0x36>
 8013580:	2000      	movs	r0, #0
 8013582:	bd10      	pop	{r4, pc}
 8013584:	4603      	mov	r3, r0
 8013586:	e7f7      	b.n	8013578 <__any_on+0x26>
 8013588:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801358c:	2900      	cmp	r1, #0
 801358e:	d0f5      	beq.n	801357c <__any_on+0x2a>
 8013590:	2001      	movs	r0, #1
 8013592:	e7f6      	b.n	8013582 <__any_on+0x30>

08013594 <sulp>:
 8013594:	b570      	push	{r4, r5, r6, lr}
 8013596:	4604      	mov	r4, r0
 8013598:	460d      	mov	r5, r1
 801359a:	4616      	mov	r6, r2
 801359c:	ec45 4b10 	vmov	d0, r4, r5
 80135a0:	f7ff feba 	bl	8013318 <__ulp>
 80135a4:	b17e      	cbz	r6, 80135c6 <sulp+0x32>
 80135a6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80135aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	dd09      	ble.n	80135c6 <sulp+0x32>
 80135b2:	051b      	lsls	r3, r3, #20
 80135b4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80135b8:	2000      	movs	r0, #0
 80135ba:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 80135be:	ec41 0b17 	vmov	d7, r0, r1
 80135c2:	ee20 0b07 	vmul.f64	d0, d0, d7
 80135c6:	bd70      	pop	{r4, r5, r6, pc}

080135c8 <_strtod_l>:
 80135c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135cc:	ed2d 8b0e 	vpush	{d8-d14}
 80135d0:	b097      	sub	sp, #92	; 0x5c
 80135d2:	4604      	mov	r4, r0
 80135d4:	920d      	str	r2, [sp, #52]	; 0x34
 80135d6:	2200      	movs	r2, #0
 80135d8:	9212      	str	r2, [sp, #72]	; 0x48
 80135da:	468a      	mov	sl, r1
 80135dc:	f04f 0800 	mov.w	r8, #0
 80135e0:	f04f 0900 	mov.w	r9, #0
 80135e4:	460a      	mov	r2, r1
 80135e6:	9211      	str	r2, [sp, #68]	; 0x44
 80135e8:	7811      	ldrb	r1, [r2, #0]
 80135ea:	292b      	cmp	r1, #43	; 0x2b
 80135ec:	d04c      	beq.n	8013688 <_strtod_l+0xc0>
 80135ee:	d839      	bhi.n	8013664 <_strtod_l+0x9c>
 80135f0:	290d      	cmp	r1, #13
 80135f2:	d833      	bhi.n	801365c <_strtod_l+0x94>
 80135f4:	2908      	cmp	r1, #8
 80135f6:	d833      	bhi.n	8013660 <_strtod_l+0x98>
 80135f8:	2900      	cmp	r1, #0
 80135fa:	d03c      	beq.n	8013676 <_strtod_l+0xae>
 80135fc:	2200      	movs	r2, #0
 80135fe:	9208      	str	r2, [sp, #32]
 8013600:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8013602:	7832      	ldrb	r2, [r6, #0]
 8013604:	2a30      	cmp	r2, #48	; 0x30
 8013606:	f040 80b8 	bne.w	801377a <_strtod_l+0x1b2>
 801360a:	7872      	ldrb	r2, [r6, #1]
 801360c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8013610:	2a58      	cmp	r2, #88	; 0x58
 8013612:	d170      	bne.n	80136f6 <_strtod_l+0x12e>
 8013614:	9302      	str	r3, [sp, #8]
 8013616:	9b08      	ldr	r3, [sp, #32]
 8013618:	9301      	str	r3, [sp, #4]
 801361a:	ab12      	add	r3, sp, #72	; 0x48
 801361c:	9300      	str	r3, [sp, #0]
 801361e:	4a91      	ldr	r2, [pc, #580]	; (8013864 <_strtod_l+0x29c>)
 8013620:	ab13      	add	r3, sp, #76	; 0x4c
 8013622:	a911      	add	r1, sp, #68	; 0x44
 8013624:	4620      	mov	r0, r4
 8013626:	f001 f8e3 	bl	80147f0 <__gethex>
 801362a:	f010 070f 	ands.w	r7, r0, #15
 801362e:	4605      	mov	r5, r0
 8013630:	d005      	beq.n	801363e <_strtod_l+0x76>
 8013632:	2f06      	cmp	r7, #6
 8013634:	d12a      	bne.n	801368c <_strtod_l+0xc4>
 8013636:	3601      	adds	r6, #1
 8013638:	2300      	movs	r3, #0
 801363a:	9611      	str	r6, [sp, #68]	; 0x44
 801363c:	9308      	str	r3, [sp, #32]
 801363e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013640:	2b00      	cmp	r3, #0
 8013642:	f040 8555 	bne.w	80140f0 <_strtod_l+0xb28>
 8013646:	9b08      	ldr	r3, [sp, #32]
 8013648:	ec49 8b10 	vmov	d0, r8, r9
 801364c:	b1cb      	cbz	r3, 8013682 <_strtod_l+0xba>
 801364e:	eeb1 0b40 	vneg.f64	d0, d0
 8013652:	b017      	add	sp, #92	; 0x5c
 8013654:	ecbd 8b0e 	vpop	{d8-d14}
 8013658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801365c:	2920      	cmp	r1, #32
 801365e:	d1cd      	bne.n	80135fc <_strtod_l+0x34>
 8013660:	3201      	adds	r2, #1
 8013662:	e7c0      	b.n	80135e6 <_strtod_l+0x1e>
 8013664:	292d      	cmp	r1, #45	; 0x2d
 8013666:	d1c9      	bne.n	80135fc <_strtod_l+0x34>
 8013668:	2101      	movs	r1, #1
 801366a:	9108      	str	r1, [sp, #32]
 801366c:	1c51      	adds	r1, r2, #1
 801366e:	9111      	str	r1, [sp, #68]	; 0x44
 8013670:	7852      	ldrb	r2, [r2, #1]
 8013672:	2a00      	cmp	r2, #0
 8013674:	d1c4      	bne.n	8013600 <_strtod_l+0x38>
 8013676:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013678:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 801367c:	2b00      	cmp	r3, #0
 801367e:	f040 8535 	bne.w	80140ec <_strtod_l+0xb24>
 8013682:	ec49 8b10 	vmov	d0, r8, r9
 8013686:	e7e4      	b.n	8013652 <_strtod_l+0x8a>
 8013688:	2100      	movs	r1, #0
 801368a:	e7ee      	b.n	801366a <_strtod_l+0xa2>
 801368c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801368e:	b13a      	cbz	r2, 80136a0 <_strtod_l+0xd8>
 8013690:	2135      	movs	r1, #53	; 0x35
 8013692:	a814      	add	r0, sp, #80	; 0x50
 8013694:	f7ff ff3a 	bl	801350c <__copybits>
 8013698:	9912      	ldr	r1, [sp, #72]	; 0x48
 801369a:	4620      	mov	r0, r4
 801369c:	f7ff fb10 	bl	8012cc0 <_Bfree>
 80136a0:	1e7b      	subs	r3, r7, #1
 80136a2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80136a4:	2b04      	cmp	r3, #4
 80136a6:	d806      	bhi.n	80136b6 <_strtod_l+0xee>
 80136a8:	e8df f003 	tbb	[pc, r3]
 80136ac:	201d0314 	.word	0x201d0314
 80136b0:	14          	.byte	0x14
 80136b1:	00          	.byte	0x00
 80136b2:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 80136b6:	05eb      	lsls	r3, r5, #23
 80136b8:	bf48      	it	mi
 80136ba:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80136be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80136c2:	0d1b      	lsrs	r3, r3, #20
 80136c4:	051b      	lsls	r3, r3, #20
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d1b9      	bne.n	801363e <_strtod_l+0x76>
 80136ca:	f7fe fc37 	bl	8011f3c <__errno>
 80136ce:	2322      	movs	r3, #34	; 0x22
 80136d0:	6003      	str	r3, [r0, #0]
 80136d2:	e7b4      	b.n	801363e <_strtod_l+0x76>
 80136d4:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 80136d8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80136dc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80136e0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80136e4:	e7e7      	b.n	80136b6 <_strtod_l+0xee>
 80136e6:	f8df 9184 	ldr.w	r9, [pc, #388]	; 801386c <_strtod_l+0x2a4>
 80136ea:	e7e4      	b.n	80136b6 <_strtod_l+0xee>
 80136ec:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80136f0:	f04f 38ff 	mov.w	r8, #4294967295
 80136f4:	e7df      	b.n	80136b6 <_strtod_l+0xee>
 80136f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80136f8:	1c5a      	adds	r2, r3, #1
 80136fa:	9211      	str	r2, [sp, #68]	; 0x44
 80136fc:	785b      	ldrb	r3, [r3, #1]
 80136fe:	2b30      	cmp	r3, #48	; 0x30
 8013700:	d0f9      	beq.n	80136f6 <_strtod_l+0x12e>
 8013702:	2b00      	cmp	r3, #0
 8013704:	d09b      	beq.n	801363e <_strtod_l+0x76>
 8013706:	2301      	movs	r3, #1
 8013708:	9306      	str	r3, [sp, #24]
 801370a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801370c:	9309      	str	r3, [sp, #36]	; 0x24
 801370e:	2300      	movs	r3, #0
 8013710:	9305      	str	r3, [sp, #20]
 8013712:	9307      	str	r3, [sp, #28]
 8013714:	461e      	mov	r6, r3
 8013716:	220a      	movs	r2, #10
 8013718:	9811      	ldr	r0, [sp, #68]	; 0x44
 801371a:	7805      	ldrb	r5, [r0, #0]
 801371c:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8013720:	b2d9      	uxtb	r1, r3
 8013722:	2909      	cmp	r1, #9
 8013724:	d92b      	bls.n	801377e <_strtod_l+0x1b6>
 8013726:	4950      	ldr	r1, [pc, #320]	; (8013868 <_strtod_l+0x2a0>)
 8013728:	2201      	movs	r2, #1
 801372a:	f000 ffa9 	bl	8014680 <strncmp>
 801372e:	2800      	cmp	r0, #0
 8013730:	d035      	beq.n	801379e <_strtod_l+0x1d6>
 8013732:	2000      	movs	r0, #0
 8013734:	462a      	mov	r2, r5
 8013736:	4633      	mov	r3, r6
 8013738:	4683      	mov	fp, r0
 801373a:	4601      	mov	r1, r0
 801373c:	2a65      	cmp	r2, #101	; 0x65
 801373e:	d001      	beq.n	8013744 <_strtod_l+0x17c>
 8013740:	2a45      	cmp	r2, #69	; 0x45
 8013742:	d118      	bne.n	8013776 <_strtod_l+0x1ae>
 8013744:	b91b      	cbnz	r3, 801374e <_strtod_l+0x186>
 8013746:	9b06      	ldr	r3, [sp, #24]
 8013748:	4303      	orrs	r3, r0
 801374a:	d094      	beq.n	8013676 <_strtod_l+0xae>
 801374c:	2300      	movs	r3, #0
 801374e:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 8013752:	f10a 0201 	add.w	r2, sl, #1
 8013756:	9211      	str	r2, [sp, #68]	; 0x44
 8013758:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801375c:	2a2b      	cmp	r2, #43	; 0x2b
 801375e:	d075      	beq.n	801384c <_strtod_l+0x284>
 8013760:	2a2d      	cmp	r2, #45	; 0x2d
 8013762:	d07b      	beq.n	801385c <_strtod_l+0x294>
 8013764:	f04f 0e00 	mov.w	lr, #0
 8013768:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 801376c:	2d09      	cmp	r5, #9
 801376e:	f240 8083 	bls.w	8013878 <_strtod_l+0x2b0>
 8013772:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8013776:	2500      	movs	r5, #0
 8013778:	e09e      	b.n	80138b8 <_strtod_l+0x2f0>
 801377a:	2300      	movs	r3, #0
 801377c:	e7c4      	b.n	8013708 <_strtod_l+0x140>
 801377e:	2e08      	cmp	r6, #8
 8013780:	bfd5      	itete	le
 8013782:	9907      	ldrle	r1, [sp, #28]
 8013784:	9905      	ldrgt	r1, [sp, #20]
 8013786:	fb02 3301 	mlale	r3, r2, r1, r3
 801378a:	fb02 3301 	mlagt	r3, r2, r1, r3
 801378e:	f100 0001 	add.w	r0, r0, #1
 8013792:	bfd4      	ite	le
 8013794:	9307      	strle	r3, [sp, #28]
 8013796:	9305      	strgt	r3, [sp, #20]
 8013798:	3601      	adds	r6, #1
 801379a:	9011      	str	r0, [sp, #68]	; 0x44
 801379c:	e7bc      	b.n	8013718 <_strtod_l+0x150>
 801379e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80137a0:	1c5a      	adds	r2, r3, #1
 80137a2:	9211      	str	r2, [sp, #68]	; 0x44
 80137a4:	785a      	ldrb	r2, [r3, #1]
 80137a6:	b3ae      	cbz	r6, 8013814 <_strtod_l+0x24c>
 80137a8:	4683      	mov	fp, r0
 80137aa:	4633      	mov	r3, r6
 80137ac:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80137b0:	2909      	cmp	r1, #9
 80137b2:	d912      	bls.n	80137da <_strtod_l+0x212>
 80137b4:	2101      	movs	r1, #1
 80137b6:	e7c1      	b.n	801373c <_strtod_l+0x174>
 80137b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80137ba:	1c5a      	adds	r2, r3, #1
 80137bc:	9211      	str	r2, [sp, #68]	; 0x44
 80137be:	785a      	ldrb	r2, [r3, #1]
 80137c0:	3001      	adds	r0, #1
 80137c2:	2a30      	cmp	r2, #48	; 0x30
 80137c4:	d0f8      	beq.n	80137b8 <_strtod_l+0x1f0>
 80137c6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80137ca:	2b08      	cmp	r3, #8
 80137cc:	f200 8495 	bhi.w	80140fa <_strtod_l+0xb32>
 80137d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80137d2:	9309      	str	r3, [sp, #36]	; 0x24
 80137d4:	4683      	mov	fp, r0
 80137d6:	2000      	movs	r0, #0
 80137d8:	4603      	mov	r3, r0
 80137da:	3a30      	subs	r2, #48	; 0x30
 80137dc:	f100 0101 	add.w	r1, r0, #1
 80137e0:	d012      	beq.n	8013808 <_strtod_l+0x240>
 80137e2:	448b      	add	fp, r1
 80137e4:	eb00 0c03 	add.w	ip, r0, r3
 80137e8:	4619      	mov	r1, r3
 80137ea:	250a      	movs	r5, #10
 80137ec:	4561      	cmp	r1, ip
 80137ee:	d113      	bne.n	8013818 <_strtod_l+0x250>
 80137f0:	1819      	adds	r1, r3, r0
 80137f2:	2908      	cmp	r1, #8
 80137f4:	f103 0301 	add.w	r3, r3, #1
 80137f8:	4403      	add	r3, r0
 80137fa:	dc1b      	bgt.n	8013834 <_strtod_l+0x26c>
 80137fc:	9807      	ldr	r0, [sp, #28]
 80137fe:	210a      	movs	r1, #10
 8013800:	fb01 2200 	mla	r2, r1, r0, r2
 8013804:	9207      	str	r2, [sp, #28]
 8013806:	2100      	movs	r1, #0
 8013808:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801380a:	1c50      	adds	r0, r2, #1
 801380c:	9011      	str	r0, [sp, #68]	; 0x44
 801380e:	7852      	ldrb	r2, [r2, #1]
 8013810:	4608      	mov	r0, r1
 8013812:	e7cb      	b.n	80137ac <_strtod_l+0x1e4>
 8013814:	4630      	mov	r0, r6
 8013816:	e7d4      	b.n	80137c2 <_strtod_l+0x1fa>
 8013818:	2908      	cmp	r1, #8
 801381a:	f101 0101 	add.w	r1, r1, #1
 801381e:	dc03      	bgt.n	8013828 <_strtod_l+0x260>
 8013820:	9f07      	ldr	r7, [sp, #28]
 8013822:	436f      	muls	r7, r5
 8013824:	9707      	str	r7, [sp, #28]
 8013826:	e7e1      	b.n	80137ec <_strtod_l+0x224>
 8013828:	2910      	cmp	r1, #16
 801382a:	bfde      	ittt	le
 801382c:	9f05      	ldrle	r7, [sp, #20]
 801382e:	436f      	mulle	r7, r5
 8013830:	9705      	strle	r7, [sp, #20]
 8013832:	e7db      	b.n	80137ec <_strtod_l+0x224>
 8013834:	2b10      	cmp	r3, #16
 8013836:	bfdf      	itttt	le
 8013838:	9805      	ldrle	r0, [sp, #20]
 801383a:	210a      	movle	r1, #10
 801383c:	fb01 2200 	mlale	r2, r1, r0, r2
 8013840:	9205      	strle	r2, [sp, #20]
 8013842:	e7e0      	b.n	8013806 <_strtod_l+0x23e>
 8013844:	f04f 0b00 	mov.w	fp, #0
 8013848:	2101      	movs	r1, #1
 801384a:	e77c      	b.n	8013746 <_strtod_l+0x17e>
 801384c:	f04f 0e00 	mov.w	lr, #0
 8013850:	f10a 0202 	add.w	r2, sl, #2
 8013854:	9211      	str	r2, [sp, #68]	; 0x44
 8013856:	f89a 2002 	ldrb.w	r2, [sl, #2]
 801385a:	e785      	b.n	8013768 <_strtod_l+0x1a0>
 801385c:	f04f 0e01 	mov.w	lr, #1
 8013860:	e7f6      	b.n	8013850 <_strtod_l+0x288>
 8013862:	bf00      	nop
 8013864:	08015748 	.word	0x08015748
 8013868:	08015744 	.word	0x08015744
 801386c:	7ff00000 	.word	0x7ff00000
 8013870:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013872:	1c55      	adds	r5, r2, #1
 8013874:	9511      	str	r5, [sp, #68]	; 0x44
 8013876:	7852      	ldrb	r2, [r2, #1]
 8013878:	2a30      	cmp	r2, #48	; 0x30
 801387a:	d0f9      	beq.n	8013870 <_strtod_l+0x2a8>
 801387c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8013880:	2d08      	cmp	r5, #8
 8013882:	f63f af78 	bhi.w	8013776 <_strtod_l+0x1ae>
 8013886:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 801388a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801388c:	920a      	str	r2, [sp, #40]	; 0x28
 801388e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013890:	1c55      	adds	r5, r2, #1
 8013892:	9511      	str	r5, [sp, #68]	; 0x44
 8013894:	7852      	ldrb	r2, [r2, #1]
 8013896:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 801389a:	2f09      	cmp	r7, #9
 801389c:	d937      	bls.n	801390e <_strtod_l+0x346>
 801389e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80138a0:	1bed      	subs	r5, r5, r7
 80138a2:	2d08      	cmp	r5, #8
 80138a4:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80138a8:	dc02      	bgt.n	80138b0 <_strtod_l+0x2e8>
 80138aa:	4565      	cmp	r5, ip
 80138ac:	bfa8      	it	ge
 80138ae:	4665      	movge	r5, ip
 80138b0:	f1be 0f00 	cmp.w	lr, #0
 80138b4:	d000      	beq.n	80138b8 <_strtod_l+0x2f0>
 80138b6:	426d      	negs	r5, r5
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d14d      	bne.n	8013958 <_strtod_l+0x390>
 80138bc:	9b06      	ldr	r3, [sp, #24]
 80138be:	4303      	orrs	r3, r0
 80138c0:	f47f aebd 	bne.w	801363e <_strtod_l+0x76>
 80138c4:	2900      	cmp	r1, #0
 80138c6:	f47f aed6 	bne.w	8013676 <_strtod_l+0xae>
 80138ca:	2a69      	cmp	r2, #105	; 0x69
 80138cc:	d027      	beq.n	801391e <_strtod_l+0x356>
 80138ce:	dc24      	bgt.n	801391a <_strtod_l+0x352>
 80138d0:	2a49      	cmp	r2, #73	; 0x49
 80138d2:	d024      	beq.n	801391e <_strtod_l+0x356>
 80138d4:	2a4e      	cmp	r2, #78	; 0x4e
 80138d6:	f47f aece 	bne.w	8013676 <_strtod_l+0xae>
 80138da:	4995      	ldr	r1, [pc, #596]	; (8013b30 <_strtod_l+0x568>)
 80138dc:	a811      	add	r0, sp, #68	; 0x44
 80138de:	f001 f9c7 	bl	8014c70 <__match>
 80138e2:	2800      	cmp	r0, #0
 80138e4:	f43f aec7 	beq.w	8013676 <_strtod_l+0xae>
 80138e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80138ea:	781b      	ldrb	r3, [r3, #0]
 80138ec:	2b28      	cmp	r3, #40	; 0x28
 80138ee:	d12d      	bne.n	801394c <_strtod_l+0x384>
 80138f0:	4990      	ldr	r1, [pc, #576]	; (8013b34 <_strtod_l+0x56c>)
 80138f2:	aa14      	add	r2, sp, #80	; 0x50
 80138f4:	a811      	add	r0, sp, #68	; 0x44
 80138f6:	f001 f9cf 	bl	8014c98 <__hexnan>
 80138fa:	2805      	cmp	r0, #5
 80138fc:	d126      	bne.n	801394c <_strtod_l+0x384>
 80138fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013900:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8013904:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8013908:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801390c:	e697      	b.n	801363e <_strtod_l+0x76>
 801390e:	250a      	movs	r5, #10
 8013910:	fb05 2c0c 	mla	ip, r5, ip, r2
 8013914:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8013918:	e7b9      	b.n	801388e <_strtod_l+0x2c6>
 801391a:	2a6e      	cmp	r2, #110	; 0x6e
 801391c:	e7db      	b.n	80138d6 <_strtod_l+0x30e>
 801391e:	4986      	ldr	r1, [pc, #536]	; (8013b38 <_strtod_l+0x570>)
 8013920:	a811      	add	r0, sp, #68	; 0x44
 8013922:	f001 f9a5 	bl	8014c70 <__match>
 8013926:	2800      	cmp	r0, #0
 8013928:	f43f aea5 	beq.w	8013676 <_strtod_l+0xae>
 801392c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801392e:	4983      	ldr	r1, [pc, #524]	; (8013b3c <_strtod_l+0x574>)
 8013930:	3b01      	subs	r3, #1
 8013932:	a811      	add	r0, sp, #68	; 0x44
 8013934:	9311      	str	r3, [sp, #68]	; 0x44
 8013936:	f001 f99b 	bl	8014c70 <__match>
 801393a:	b910      	cbnz	r0, 8013942 <_strtod_l+0x37a>
 801393c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801393e:	3301      	adds	r3, #1
 8013940:	9311      	str	r3, [sp, #68]	; 0x44
 8013942:	f8df 920c 	ldr.w	r9, [pc, #524]	; 8013b50 <_strtod_l+0x588>
 8013946:	f04f 0800 	mov.w	r8, #0
 801394a:	e678      	b.n	801363e <_strtod_l+0x76>
 801394c:	487c      	ldr	r0, [pc, #496]	; (8013b40 <_strtod_l+0x578>)
 801394e:	f000 feab 	bl	80146a8 <nan>
 8013952:	ec59 8b10 	vmov	r8, r9, d0
 8013956:	e672      	b.n	801363e <_strtod_l+0x76>
 8013958:	eddd 7a07 	vldr	s15, [sp, #28]
 801395c:	eba5 020b 	sub.w	r2, r5, fp
 8013960:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8013964:	2e00      	cmp	r6, #0
 8013966:	bf08      	it	eq
 8013968:	461e      	moveq	r6, r3
 801396a:	2b10      	cmp	r3, #16
 801396c:	9206      	str	r2, [sp, #24]
 801396e:	461a      	mov	r2, r3
 8013970:	bfa8      	it	ge
 8013972:	2210      	movge	r2, #16
 8013974:	2b09      	cmp	r3, #9
 8013976:	ec59 8b17 	vmov	r8, r9, d7
 801397a:	dd0c      	ble.n	8013996 <_strtod_l+0x3ce>
 801397c:	4971      	ldr	r1, [pc, #452]	; (8013b44 <_strtod_l+0x57c>)
 801397e:	eddd 6a05 	vldr	s13, [sp, #20]
 8013982:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8013986:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 801398a:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 801398e:	eea7 6b05 	vfma.f64	d6, d7, d5
 8013992:	ec59 8b16 	vmov	r8, r9, d6
 8013996:	2b0f      	cmp	r3, #15
 8013998:	dc37      	bgt.n	8013a0a <_strtod_l+0x442>
 801399a:	9906      	ldr	r1, [sp, #24]
 801399c:	2900      	cmp	r1, #0
 801399e:	f43f ae4e 	beq.w	801363e <_strtod_l+0x76>
 80139a2:	dd23      	ble.n	80139ec <_strtod_l+0x424>
 80139a4:	2916      	cmp	r1, #22
 80139a6:	dc0b      	bgt.n	80139c0 <_strtod_l+0x3f8>
 80139a8:	4b66      	ldr	r3, [pc, #408]	; (8013b44 <_strtod_l+0x57c>)
 80139aa:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80139ae:	ed93 7b00 	vldr	d7, [r3]
 80139b2:	ec49 8b16 	vmov	d6, r8, r9
 80139b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80139ba:	ec59 8b17 	vmov	r8, r9, d7
 80139be:	e63e      	b.n	801363e <_strtod_l+0x76>
 80139c0:	9806      	ldr	r0, [sp, #24]
 80139c2:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 80139c6:	4281      	cmp	r1, r0
 80139c8:	db1f      	blt.n	8013a0a <_strtod_l+0x442>
 80139ca:	4a5e      	ldr	r2, [pc, #376]	; (8013b44 <_strtod_l+0x57c>)
 80139cc:	f1c3 030f 	rsb	r3, r3, #15
 80139d0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80139d4:	ed91 7b00 	vldr	d7, [r1]
 80139d8:	ec49 8b16 	vmov	d6, r8, r9
 80139dc:	1ac3      	subs	r3, r0, r3
 80139de:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80139e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80139e6:	ed92 6b00 	vldr	d6, [r2]
 80139ea:	e7e4      	b.n	80139b6 <_strtod_l+0x3ee>
 80139ec:	9906      	ldr	r1, [sp, #24]
 80139ee:	3116      	adds	r1, #22
 80139f0:	db0b      	blt.n	8013a0a <_strtod_l+0x442>
 80139f2:	4b54      	ldr	r3, [pc, #336]	; (8013b44 <_strtod_l+0x57c>)
 80139f4:	ebab 0505 	sub.w	r5, fp, r5
 80139f8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80139fc:	ed95 7b00 	vldr	d7, [r5]
 8013a00:	ec49 8b16 	vmov	d6, r8, r9
 8013a04:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013a08:	e7d7      	b.n	80139ba <_strtod_l+0x3f2>
 8013a0a:	9906      	ldr	r1, [sp, #24]
 8013a0c:	1a9a      	subs	r2, r3, r2
 8013a0e:	440a      	add	r2, r1
 8013a10:	2a00      	cmp	r2, #0
 8013a12:	dd6e      	ble.n	8013af2 <_strtod_l+0x52a>
 8013a14:	f012 000f 	ands.w	r0, r2, #15
 8013a18:	d00a      	beq.n	8013a30 <_strtod_l+0x468>
 8013a1a:	494a      	ldr	r1, [pc, #296]	; (8013b44 <_strtod_l+0x57c>)
 8013a1c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8013a20:	ed91 7b00 	vldr	d7, [r1]
 8013a24:	ec49 8b16 	vmov	d6, r8, r9
 8013a28:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013a2c:	ec59 8b17 	vmov	r8, r9, d7
 8013a30:	f032 020f 	bics.w	r2, r2, #15
 8013a34:	d04e      	beq.n	8013ad4 <_strtod_l+0x50c>
 8013a36:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8013a3a:	dd22      	ble.n	8013a82 <_strtod_l+0x4ba>
 8013a3c:	2500      	movs	r5, #0
 8013a3e:	462e      	mov	r6, r5
 8013a40:	9507      	str	r5, [sp, #28]
 8013a42:	462f      	mov	r7, r5
 8013a44:	2322      	movs	r3, #34	; 0x22
 8013a46:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8013b50 <_strtod_l+0x588>
 8013a4a:	6023      	str	r3, [r4, #0]
 8013a4c:	f04f 0800 	mov.w	r8, #0
 8013a50:	9b07      	ldr	r3, [sp, #28]
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	f43f adf3 	beq.w	801363e <_strtod_l+0x76>
 8013a58:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013a5a:	4620      	mov	r0, r4
 8013a5c:	f7ff f930 	bl	8012cc0 <_Bfree>
 8013a60:	4639      	mov	r1, r7
 8013a62:	4620      	mov	r0, r4
 8013a64:	f7ff f92c 	bl	8012cc0 <_Bfree>
 8013a68:	4631      	mov	r1, r6
 8013a6a:	4620      	mov	r0, r4
 8013a6c:	f7ff f928 	bl	8012cc0 <_Bfree>
 8013a70:	9907      	ldr	r1, [sp, #28]
 8013a72:	4620      	mov	r0, r4
 8013a74:	f7ff f924 	bl	8012cc0 <_Bfree>
 8013a78:	4629      	mov	r1, r5
 8013a7a:	4620      	mov	r0, r4
 8013a7c:	f7ff f920 	bl	8012cc0 <_Bfree>
 8013a80:	e5dd      	b.n	801363e <_strtod_l+0x76>
 8013a82:	2000      	movs	r0, #0
 8013a84:	ec49 8b17 	vmov	d7, r8, r9
 8013a88:	4f2f      	ldr	r7, [pc, #188]	; (8013b48 <_strtod_l+0x580>)
 8013a8a:	1112      	asrs	r2, r2, #4
 8013a8c:	4601      	mov	r1, r0
 8013a8e:	2a01      	cmp	r2, #1
 8013a90:	dc23      	bgt.n	8013ada <_strtod_l+0x512>
 8013a92:	b108      	cbz	r0, 8013a98 <_strtod_l+0x4d0>
 8013a94:	ec59 8b17 	vmov	r8, r9, d7
 8013a98:	4a2b      	ldr	r2, [pc, #172]	; (8013b48 <_strtod_l+0x580>)
 8013a9a:	482c      	ldr	r0, [pc, #176]	; (8013b4c <_strtod_l+0x584>)
 8013a9c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8013aa0:	ed92 7b00 	vldr	d7, [r2]
 8013aa4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8013aa8:	ec49 8b16 	vmov	d6, r8, r9
 8013aac:	4a28      	ldr	r2, [pc, #160]	; (8013b50 <_strtod_l+0x588>)
 8013aae:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013ab2:	ee17 1a90 	vmov	r1, s15
 8013ab6:	400a      	ands	r2, r1
 8013ab8:	4282      	cmp	r2, r0
 8013aba:	ec59 8b17 	vmov	r8, r9, d7
 8013abe:	d8bd      	bhi.n	8013a3c <_strtod_l+0x474>
 8013ac0:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8013ac4:	4282      	cmp	r2, r0
 8013ac6:	bf86      	itte	hi
 8013ac8:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 8013b54 <_strtod_l+0x58c>
 8013acc:	f04f 38ff 	movhi.w	r8, #4294967295
 8013ad0:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8013ad4:	2200      	movs	r2, #0
 8013ad6:	9205      	str	r2, [sp, #20]
 8013ad8:	e076      	b.n	8013bc8 <_strtod_l+0x600>
 8013ada:	f012 0f01 	tst.w	r2, #1
 8013ade:	d004      	beq.n	8013aea <_strtod_l+0x522>
 8013ae0:	ed97 6b00 	vldr	d6, [r7]
 8013ae4:	2001      	movs	r0, #1
 8013ae6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013aea:	3101      	adds	r1, #1
 8013aec:	1052      	asrs	r2, r2, #1
 8013aee:	3708      	adds	r7, #8
 8013af0:	e7cd      	b.n	8013a8e <_strtod_l+0x4c6>
 8013af2:	d0ef      	beq.n	8013ad4 <_strtod_l+0x50c>
 8013af4:	4252      	negs	r2, r2
 8013af6:	f012 000f 	ands.w	r0, r2, #15
 8013afa:	d00a      	beq.n	8013b12 <_strtod_l+0x54a>
 8013afc:	4911      	ldr	r1, [pc, #68]	; (8013b44 <_strtod_l+0x57c>)
 8013afe:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8013b02:	ed91 7b00 	vldr	d7, [r1]
 8013b06:	ec49 8b16 	vmov	d6, r8, r9
 8013b0a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013b0e:	ec59 8b17 	vmov	r8, r9, d7
 8013b12:	1112      	asrs	r2, r2, #4
 8013b14:	d0de      	beq.n	8013ad4 <_strtod_l+0x50c>
 8013b16:	2a1f      	cmp	r2, #31
 8013b18:	dd1e      	ble.n	8013b58 <_strtod_l+0x590>
 8013b1a:	2500      	movs	r5, #0
 8013b1c:	462e      	mov	r6, r5
 8013b1e:	9507      	str	r5, [sp, #28]
 8013b20:	462f      	mov	r7, r5
 8013b22:	2322      	movs	r3, #34	; 0x22
 8013b24:	f04f 0800 	mov.w	r8, #0
 8013b28:	f04f 0900 	mov.w	r9, #0
 8013b2c:	6023      	str	r3, [r4, #0]
 8013b2e:	e78f      	b.n	8013a50 <_strtod_l+0x488>
 8013b30:	08015535 	.word	0x08015535
 8013b34:	0801575c 	.word	0x0801575c
 8013b38:	0801552d 	.word	0x0801552d
 8013b3c:	08015564 	.word	0x08015564
 8013b40:	080158ed 	.word	0x080158ed
 8013b44:	08015670 	.word	0x08015670
 8013b48:	08015648 	.word	0x08015648
 8013b4c:	7ca00000 	.word	0x7ca00000
 8013b50:	7ff00000 	.word	0x7ff00000
 8013b54:	7fefffff 	.word	0x7fefffff
 8013b58:	f012 0110 	ands.w	r1, r2, #16
 8013b5c:	bf18      	it	ne
 8013b5e:	216a      	movne	r1, #106	; 0x6a
 8013b60:	9105      	str	r1, [sp, #20]
 8013b62:	ec49 8b17 	vmov	d7, r8, r9
 8013b66:	49be      	ldr	r1, [pc, #760]	; (8013e60 <_strtod_l+0x898>)
 8013b68:	2000      	movs	r0, #0
 8013b6a:	07d7      	lsls	r7, r2, #31
 8013b6c:	d504      	bpl.n	8013b78 <_strtod_l+0x5b0>
 8013b6e:	ed91 6b00 	vldr	d6, [r1]
 8013b72:	2001      	movs	r0, #1
 8013b74:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013b78:	1052      	asrs	r2, r2, #1
 8013b7a:	f101 0108 	add.w	r1, r1, #8
 8013b7e:	d1f4      	bne.n	8013b6a <_strtod_l+0x5a2>
 8013b80:	b108      	cbz	r0, 8013b86 <_strtod_l+0x5be>
 8013b82:	ec59 8b17 	vmov	r8, r9, d7
 8013b86:	9a05      	ldr	r2, [sp, #20]
 8013b88:	b1ba      	cbz	r2, 8013bba <_strtod_l+0x5f2>
 8013b8a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8013b8e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8013b92:	2a00      	cmp	r2, #0
 8013b94:	4648      	mov	r0, r9
 8013b96:	dd10      	ble.n	8013bba <_strtod_l+0x5f2>
 8013b98:	2a1f      	cmp	r2, #31
 8013b9a:	f340 812c 	ble.w	8013df6 <_strtod_l+0x82e>
 8013b9e:	2a34      	cmp	r2, #52	; 0x34
 8013ba0:	bfde      	ittt	le
 8013ba2:	f04f 32ff 	movle.w	r2, #4294967295
 8013ba6:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8013baa:	408a      	lslle	r2, r1
 8013bac:	f04f 0800 	mov.w	r8, #0
 8013bb0:	bfcc      	ite	gt
 8013bb2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8013bb6:	ea02 0900 	andle.w	r9, r2, r0
 8013bba:	ec49 8b17 	vmov	d7, r8, r9
 8013bbe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bc6:	d0a8      	beq.n	8013b1a <_strtod_l+0x552>
 8013bc8:	9a07      	ldr	r2, [sp, #28]
 8013bca:	9200      	str	r2, [sp, #0]
 8013bcc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013bce:	4632      	mov	r2, r6
 8013bd0:	4620      	mov	r0, r4
 8013bd2:	f7ff f8dd 	bl	8012d90 <__s2b>
 8013bd6:	9007      	str	r0, [sp, #28]
 8013bd8:	2800      	cmp	r0, #0
 8013bda:	f43f af2f 	beq.w	8013a3c <_strtod_l+0x474>
 8013bde:	9a06      	ldr	r2, [sp, #24]
 8013be0:	2a00      	cmp	r2, #0
 8013be2:	ebab 0305 	sub.w	r3, fp, r5
 8013be6:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8013e40 <_strtod_l+0x878>
 8013bea:	bfa8      	it	ge
 8013bec:	2300      	movge	r3, #0
 8013bee:	ed9f ab96 	vldr	d10, [pc, #600]	; 8013e48 <_strtod_l+0x880>
 8013bf2:	ed9f bb97 	vldr	d11, [pc, #604]	; 8013e50 <_strtod_l+0x888>
 8013bf6:	9309      	str	r3, [sp, #36]	; 0x24
 8013bf8:	2500      	movs	r5, #0
 8013bfa:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8013bfe:	930c      	str	r3, [sp, #48]	; 0x30
 8013c00:	462e      	mov	r6, r5
 8013c02:	9b07      	ldr	r3, [sp, #28]
 8013c04:	4620      	mov	r0, r4
 8013c06:	6859      	ldr	r1, [r3, #4]
 8013c08:	f7ff f81a 	bl	8012c40 <_Balloc>
 8013c0c:	4607      	mov	r7, r0
 8013c0e:	2800      	cmp	r0, #0
 8013c10:	f43f af18 	beq.w	8013a44 <_strtod_l+0x47c>
 8013c14:	9b07      	ldr	r3, [sp, #28]
 8013c16:	691a      	ldr	r2, [r3, #16]
 8013c18:	3202      	adds	r2, #2
 8013c1a:	f103 010c 	add.w	r1, r3, #12
 8013c1e:	0092      	lsls	r2, r2, #2
 8013c20:	300c      	adds	r0, #12
 8013c22:	f7fe f9b7 	bl	8011f94 <memcpy>
 8013c26:	ec49 8b10 	vmov	d0, r8, r9
 8013c2a:	aa14      	add	r2, sp, #80	; 0x50
 8013c2c:	a913      	add	r1, sp, #76	; 0x4c
 8013c2e:	4620      	mov	r0, r4
 8013c30:	f7ff fbe2 	bl	80133f8 <__d2b>
 8013c34:	ec49 8b18 	vmov	d8, r8, r9
 8013c38:	9012      	str	r0, [sp, #72]	; 0x48
 8013c3a:	2800      	cmp	r0, #0
 8013c3c:	f43f af02 	beq.w	8013a44 <_strtod_l+0x47c>
 8013c40:	2101      	movs	r1, #1
 8013c42:	4620      	mov	r0, r4
 8013c44:	f7ff f93c 	bl	8012ec0 <__i2b>
 8013c48:	4606      	mov	r6, r0
 8013c4a:	2800      	cmp	r0, #0
 8013c4c:	f43f aefa 	beq.w	8013a44 <_strtod_l+0x47c>
 8013c50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013c52:	9914      	ldr	r1, [sp, #80]	; 0x50
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	bfab      	itete	ge
 8013c58:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8013c5a:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8013c5c:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8013c60:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8013c64:	bfac      	ite	ge
 8013c66:	eb03 0b02 	addge.w	fp, r3, r2
 8013c6a:	eba2 0a03 	sublt.w	sl, r2, r3
 8013c6e:	9a05      	ldr	r2, [sp, #20]
 8013c70:	1a9b      	subs	r3, r3, r2
 8013c72:	440b      	add	r3, r1
 8013c74:	4a7b      	ldr	r2, [pc, #492]	; (8013e64 <_strtod_l+0x89c>)
 8013c76:	3b01      	subs	r3, #1
 8013c78:	4293      	cmp	r3, r2
 8013c7a:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8013c7e:	f280 80cd 	bge.w	8013e1c <_strtod_l+0x854>
 8013c82:	1ad2      	subs	r2, r2, r3
 8013c84:	2a1f      	cmp	r2, #31
 8013c86:	eba1 0102 	sub.w	r1, r1, r2
 8013c8a:	f04f 0001 	mov.w	r0, #1
 8013c8e:	f300 80b9 	bgt.w	8013e04 <_strtod_l+0x83c>
 8013c92:	fa00 f302 	lsl.w	r3, r0, r2
 8013c96:	930b      	str	r3, [sp, #44]	; 0x2c
 8013c98:	2300      	movs	r3, #0
 8013c9a:	930a      	str	r3, [sp, #40]	; 0x28
 8013c9c:	eb0b 0301 	add.w	r3, fp, r1
 8013ca0:	9a05      	ldr	r2, [sp, #20]
 8013ca2:	459b      	cmp	fp, r3
 8013ca4:	448a      	add	sl, r1
 8013ca6:	4492      	add	sl, r2
 8013ca8:	465a      	mov	r2, fp
 8013caa:	bfa8      	it	ge
 8013cac:	461a      	movge	r2, r3
 8013cae:	4552      	cmp	r2, sl
 8013cb0:	bfa8      	it	ge
 8013cb2:	4652      	movge	r2, sl
 8013cb4:	2a00      	cmp	r2, #0
 8013cb6:	bfc2      	ittt	gt
 8013cb8:	1a9b      	subgt	r3, r3, r2
 8013cba:	ebaa 0a02 	subgt.w	sl, sl, r2
 8013cbe:	ebab 0b02 	subgt.w	fp, fp, r2
 8013cc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013cc4:	2a00      	cmp	r2, #0
 8013cc6:	dd18      	ble.n	8013cfa <_strtod_l+0x732>
 8013cc8:	4631      	mov	r1, r6
 8013cca:	4620      	mov	r0, r4
 8013ccc:	930f      	str	r3, [sp, #60]	; 0x3c
 8013cce:	f7ff f9b7 	bl	8013040 <__pow5mult>
 8013cd2:	4606      	mov	r6, r0
 8013cd4:	2800      	cmp	r0, #0
 8013cd6:	f43f aeb5 	beq.w	8013a44 <_strtod_l+0x47c>
 8013cda:	4601      	mov	r1, r0
 8013cdc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013cde:	4620      	mov	r0, r4
 8013ce0:	f7ff f904 	bl	8012eec <__multiply>
 8013ce4:	900e      	str	r0, [sp, #56]	; 0x38
 8013ce6:	2800      	cmp	r0, #0
 8013ce8:	f43f aeac 	beq.w	8013a44 <_strtod_l+0x47c>
 8013cec:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013cee:	4620      	mov	r0, r4
 8013cf0:	f7fe ffe6 	bl	8012cc0 <_Bfree>
 8013cf4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013cf6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013cf8:	9212      	str	r2, [sp, #72]	; 0x48
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	f300 8093 	bgt.w	8013e26 <_strtod_l+0x85e>
 8013d00:	9b06      	ldr	r3, [sp, #24]
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	dd08      	ble.n	8013d18 <_strtod_l+0x750>
 8013d06:	4639      	mov	r1, r7
 8013d08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013d0a:	4620      	mov	r0, r4
 8013d0c:	f7ff f998 	bl	8013040 <__pow5mult>
 8013d10:	4607      	mov	r7, r0
 8013d12:	2800      	cmp	r0, #0
 8013d14:	f43f ae96 	beq.w	8013a44 <_strtod_l+0x47c>
 8013d18:	f1ba 0f00 	cmp.w	sl, #0
 8013d1c:	dd08      	ble.n	8013d30 <_strtod_l+0x768>
 8013d1e:	4639      	mov	r1, r7
 8013d20:	4652      	mov	r2, sl
 8013d22:	4620      	mov	r0, r4
 8013d24:	f7ff f9e6 	bl	80130f4 <__lshift>
 8013d28:	4607      	mov	r7, r0
 8013d2a:	2800      	cmp	r0, #0
 8013d2c:	f43f ae8a 	beq.w	8013a44 <_strtod_l+0x47c>
 8013d30:	f1bb 0f00 	cmp.w	fp, #0
 8013d34:	dd08      	ble.n	8013d48 <_strtod_l+0x780>
 8013d36:	4631      	mov	r1, r6
 8013d38:	465a      	mov	r2, fp
 8013d3a:	4620      	mov	r0, r4
 8013d3c:	f7ff f9da 	bl	80130f4 <__lshift>
 8013d40:	4606      	mov	r6, r0
 8013d42:	2800      	cmp	r0, #0
 8013d44:	f43f ae7e 	beq.w	8013a44 <_strtod_l+0x47c>
 8013d48:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013d4a:	463a      	mov	r2, r7
 8013d4c:	4620      	mov	r0, r4
 8013d4e:	f7ff fa59 	bl	8013204 <__mdiff>
 8013d52:	4605      	mov	r5, r0
 8013d54:	2800      	cmp	r0, #0
 8013d56:	f43f ae75 	beq.w	8013a44 <_strtod_l+0x47c>
 8013d5a:	2300      	movs	r3, #0
 8013d5c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8013d60:	60c3      	str	r3, [r0, #12]
 8013d62:	4631      	mov	r1, r6
 8013d64:	f7ff fa32 	bl	80131cc <__mcmp>
 8013d68:	2800      	cmp	r0, #0
 8013d6a:	da7f      	bge.n	8013e6c <_strtod_l+0x8a4>
 8013d6c:	ea5a 0a08 	orrs.w	sl, sl, r8
 8013d70:	f040 80a5 	bne.w	8013ebe <_strtod_l+0x8f6>
 8013d74:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	f040 80a0 	bne.w	8013ebe <_strtod_l+0x8f6>
 8013d7e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013d82:	0d1b      	lsrs	r3, r3, #20
 8013d84:	051b      	lsls	r3, r3, #20
 8013d86:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013d8a:	f240 8098 	bls.w	8013ebe <_strtod_l+0x8f6>
 8013d8e:	696b      	ldr	r3, [r5, #20]
 8013d90:	b91b      	cbnz	r3, 8013d9a <_strtod_l+0x7d2>
 8013d92:	692b      	ldr	r3, [r5, #16]
 8013d94:	2b01      	cmp	r3, #1
 8013d96:	f340 8092 	ble.w	8013ebe <_strtod_l+0x8f6>
 8013d9a:	4629      	mov	r1, r5
 8013d9c:	2201      	movs	r2, #1
 8013d9e:	4620      	mov	r0, r4
 8013da0:	f7ff f9a8 	bl	80130f4 <__lshift>
 8013da4:	4631      	mov	r1, r6
 8013da6:	4605      	mov	r5, r0
 8013da8:	f7ff fa10 	bl	80131cc <__mcmp>
 8013dac:	2800      	cmp	r0, #0
 8013dae:	f340 8086 	ble.w	8013ebe <_strtod_l+0x8f6>
 8013db2:	9905      	ldr	r1, [sp, #20]
 8013db4:	4a2c      	ldr	r2, [pc, #176]	; (8013e68 <_strtod_l+0x8a0>)
 8013db6:	464b      	mov	r3, r9
 8013db8:	2900      	cmp	r1, #0
 8013dba:	f000 809f 	beq.w	8013efc <_strtod_l+0x934>
 8013dbe:	ea02 0109 	and.w	r1, r2, r9
 8013dc2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8013dc6:	f300 8099 	bgt.w	8013efc <_strtod_l+0x934>
 8013dca:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8013dce:	f77f aea8 	ble.w	8013b22 <_strtod_l+0x55a>
 8013dd2:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8013e58 <_strtod_l+0x890>
 8013dd6:	ec49 8b16 	vmov	d6, r8, r9
 8013dda:	4b23      	ldr	r3, [pc, #140]	; (8013e68 <_strtod_l+0x8a0>)
 8013ddc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8013de0:	ee17 2a90 	vmov	r2, s15
 8013de4:	4013      	ands	r3, r2
 8013de6:	ec59 8b17 	vmov	r8, r9, d7
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	f47f ae34 	bne.w	8013a58 <_strtod_l+0x490>
 8013df0:	2322      	movs	r3, #34	; 0x22
 8013df2:	6023      	str	r3, [r4, #0]
 8013df4:	e630      	b.n	8013a58 <_strtod_l+0x490>
 8013df6:	f04f 31ff 	mov.w	r1, #4294967295
 8013dfa:	fa01 f202 	lsl.w	r2, r1, r2
 8013dfe:	ea02 0808 	and.w	r8, r2, r8
 8013e02:	e6da      	b.n	8013bba <_strtod_l+0x5f2>
 8013e04:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8013e08:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8013e0c:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8013e10:	33e2      	adds	r3, #226	; 0xe2
 8013e12:	fa00 f303 	lsl.w	r3, r0, r3
 8013e16:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8013e1a:	e73f      	b.n	8013c9c <_strtod_l+0x6d4>
 8013e1c:	2200      	movs	r2, #0
 8013e1e:	2301      	movs	r3, #1
 8013e20:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8013e24:	e73a      	b.n	8013c9c <_strtod_l+0x6d4>
 8013e26:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013e28:	461a      	mov	r2, r3
 8013e2a:	4620      	mov	r0, r4
 8013e2c:	f7ff f962 	bl	80130f4 <__lshift>
 8013e30:	9012      	str	r0, [sp, #72]	; 0x48
 8013e32:	2800      	cmp	r0, #0
 8013e34:	f47f af64 	bne.w	8013d00 <_strtod_l+0x738>
 8013e38:	e604      	b.n	8013a44 <_strtod_l+0x47c>
 8013e3a:	bf00      	nop
 8013e3c:	f3af 8000 	nop.w
 8013e40:	94a03595 	.word	0x94a03595
 8013e44:	3fcfffff 	.word	0x3fcfffff
 8013e48:	94a03595 	.word	0x94a03595
 8013e4c:	3fdfffff 	.word	0x3fdfffff
 8013e50:	35afe535 	.word	0x35afe535
 8013e54:	3fe00000 	.word	0x3fe00000
 8013e58:	00000000 	.word	0x00000000
 8013e5c:	39500000 	.word	0x39500000
 8013e60:	08015770 	.word	0x08015770
 8013e64:	fffffc02 	.word	0xfffffc02
 8013e68:	7ff00000 	.word	0x7ff00000
 8013e6c:	46cb      	mov	fp, r9
 8013e6e:	d15f      	bne.n	8013f30 <_strtod_l+0x968>
 8013e70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013e74:	f1ba 0f00 	cmp.w	sl, #0
 8013e78:	d02a      	beq.n	8013ed0 <_strtod_l+0x908>
 8013e7a:	4aa7      	ldr	r2, [pc, #668]	; (8014118 <_strtod_l+0xb50>)
 8013e7c:	4293      	cmp	r3, r2
 8013e7e:	d12b      	bne.n	8013ed8 <_strtod_l+0x910>
 8013e80:	9b05      	ldr	r3, [sp, #20]
 8013e82:	4642      	mov	r2, r8
 8013e84:	b1fb      	cbz	r3, 8013ec6 <_strtod_l+0x8fe>
 8013e86:	4ba5      	ldr	r3, [pc, #660]	; (801411c <_strtod_l+0xb54>)
 8013e88:	ea09 0303 	and.w	r3, r9, r3
 8013e8c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013e90:	f04f 31ff 	mov.w	r1, #4294967295
 8013e94:	d81a      	bhi.n	8013ecc <_strtod_l+0x904>
 8013e96:	0d1b      	lsrs	r3, r3, #20
 8013e98:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8013ea0:	429a      	cmp	r2, r3
 8013ea2:	d119      	bne.n	8013ed8 <_strtod_l+0x910>
 8013ea4:	4b9e      	ldr	r3, [pc, #632]	; (8014120 <_strtod_l+0xb58>)
 8013ea6:	459b      	cmp	fp, r3
 8013ea8:	d102      	bne.n	8013eb0 <_strtod_l+0x8e8>
 8013eaa:	3201      	adds	r2, #1
 8013eac:	f43f adca 	beq.w	8013a44 <_strtod_l+0x47c>
 8013eb0:	4b9a      	ldr	r3, [pc, #616]	; (801411c <_strtod_l+0xb54>)
 8013eb2:	ea0b 0303 	and.w	r3, fp, r3
 8013eb6:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8013eba:	f04f 0800 	mov.w	r8, #0
 8013ebe:	9b05      	ldr	r3, [sp, #20]
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d186      	bne.n	8013dd2 <_strtod_l+0x80a>
 8013ec4:	e5c8      	b.n	8013a58 <_strtod_l+0x490>
 8013ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8013eca:	e7e9      	b.n	8013ea0 <_strtod_l+0x8d8>
 8013ecc:	460b      	mov	r3, r1
 8013ece:	e7e7      	b.n	8013ea0 <_strtod_l+0x8d8>
 8013ed0:	ea53 0308 	orrs.w	r3, r3, r8
 8013ed4:	f43f af6d 	beq.w	8013db2 <_strtod_l+0x7ea>
 8013ed8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013eda:	b1cb      	cbz	r3, 8013f10 <_strtod_l+0x948>
 8013edc:	ea13 0f0b 	tst.w	r3, fp
 8013ee0:	d0ed      	beq.n	8013ebe <_strtod_l+0x8f6>
 8013ee2:	9a05      	ldr	r2, [sp, #20]
 8013ee4:	4640      	mov	r0, r8
 8013ee6:	4649      	mov	r1, r9
 8013ee8:	f1ba 0f00 	cmp.w	sl, #0
 8013eec:	d014      	beq.n	8013f18 <_strtod_l+0x950>
 8013eee:	f7ff fb51 	bl	8013594 <sulp>
 8013ef2:	ee38 7b00 	vadd.f64	d7, d8, d0
 8013ef6:	ec59 8b17 	vmov	r8, r9, d7
 8013efa:	e7e0      	b.n	8013ebe <_strtod_l+0x8f6>
 8013efc:	4013      	ands	r3, r2
 8013efe:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013f02:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8013f06:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8013f0a:	f04f 38ff 	mov.w	r8, #4294967295
 8013f0e:	e7d6      	b.n	8013ebe <_strtod_l+0x8f6>
 8013f10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013f12:	ea13 0f08 	tst.w	r3, r8
 8013f16:	e7e3      	b.n	8013ee0 <_strtod_l+0x918>
 8013f18:	f7ff fb3c 	bl	8013594 <sulp>
 8013f1c:	ee38 0b40 	vsub.f64	d0, d8, d0
 8013f20:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8013f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f28:	ec59 8b10 	vmov	r8, r9, d0
 8013f2c:	d1c7      	bne.n	8013ebe <_strtod_l+0x8f6>
 8013f2e:	e5f8      	b.n	8013b22 <_strtod_l+0x55a>
 8013f30:	4631      	mov	r1, r6
 8013f32:	4628      	mov	r0, r5
 8013f34:	f7ff faba 	bl	80134ac <__ratio>
 8013f38:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8013f3c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8013f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f44:	d85f      	bhi.n	8014006 <_strtod_l+0xa3e>
 8013f46:	f1ba 0f00 	cmp.w	sl, #0
 8013f4a:	d166      	bne.n	801401a <_strtod_l+0xa52>
 8013f4c:	f1b8 0f00 	cmp.w	r8, #0
 8013f50:	d14d      	bne.n	8013fee <_strtod_l+0xa26>
 8013f52:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013f56:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d162      	bne.n	8014024 <_strtod_l+0xa5c>
 8013f5e:	eeb4 0bcd 	vcmpe.f64	d0, d13
 8013f62:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8013f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f6a:	d401      	bmi.n	8013f70 <_strtod_l+0x9a8>
 8013f6c:	ee20 db0d 	vmul.f64	d13, d0, d13
 8013f70:	eeb1 cb4d 	vneg.f64	d12, d13
 8013f74:	4869      	ldr	r0, [pc, #420]	; (801411c <_strtod_l+0xb54>)
 8013f76:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 8014128 <_strtod_l+0xb60>
 8013f7a:	ea0b 0100 	and.w	r1, fp, r0
 8013f7e:	4561      	cmp	r1, ip
 8013f80:	ec53 2b1c 	vmov	r2, r3, d12
 8013f84:	d17a      	bne.n	801407c <_strtod_l+0xab4>
 8013f86:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8013f8a:	ec49 8b10 	vmov	d0, r8, r9
 8013f8e:	910a      	str	r1, [sp, #40]	; 0x28
 8013f90:	f7ff f9c2 	bl	8013318 <__ulp>
 8013f94:	ec49 8b1e 	vmov	d14, r8, r9
 8013f98:	4860      	ldr	r0, [pc, #384]	; (801411c <_strtod_l+0xb54>)
 8013f9a:	eea0 eb0c 	vfma.f64	d14, d0, d12
 8013f9e:	ee1e 3a90 	vmov	r3, s29
 8013fa2:	4a60      	ldr	r2, [pc, #384]	; (8014124 <_strtod_l+0xb5c>)
 8013fa4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013fa6:	4018      	ands	r0, r3
 8013fa8:	4290      	cmp	r0, r2
 8013faa:	ec59 8b1e 	vmov	r8, r9, d14
 8013fae:	d93c      	bls.n	801402a <_strtod_l+0xa62>
 8013fb0:	ee18 2a90 	vmov	r2, s17
 8013fb4:	4b5a      	ldr	r3, [pc, #360]	; (8014120 <_strtod_l+0xb58>)
 8013fb6:	429a      	cmp	r2, r3
 8013fb8:	d104      	bne.n	8013fc4 <_strtod_l+0x9fc>
 8013fba:	ee18 3a10 	vmov	r3, s16
 8013fbe:	3301      	adds	r3, #1
 8013fc0:	f43f ad40 	beq.w	8013a44 <_strtod_l+0x47c>
 8013fc4:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8014120 <_strtod_l+0xb58>
 8013fc8:	f04f 38ff 	mov.w	r8, #4294967295
 8013fcc:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013fce:	4620      	mov	r0, r4
 8013fd0:	f7fe fe76 	bl	8012cc0 <_Bfree>
 8013fd4:	4639      	mov	r1, r7
 8013fd6:	4620      	mov	r0, r4
 8013fd8:	f7fe fe72 	bl	8012cc0 <_Bfree>
 8013fdc:	4631      	mov	r1, r6
 8013fde:	4620      	mov	r0, r4
 8013fe0:	f7fe fe6e 	bl	8012cc0 <_Bfree>
 8013fe4:	4629      	mov	r1, r5
 8013fe6:	4620      	mov	r0, r4
 8013fe8:	f7fe fe6a 	bl	8012cc0 <_Bfree>
 8013fec:	e609      	b.n	8013c02 <_strtod_l+0x63a>
 8013fee:	f1b8 0f01 	cmp.w	r8, #1
 8013ff2:	d103      	bne.n	8013ffc <_strtod_l+0xa34>
 8013ff4:	f1b9 0f00 	cmp.w	r9, #0
 8013ff8:	f43f ad93 	beq.w	8013b22 <_strtod_l+0x55a>
 8013ffc:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8014000:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8014004:	e7b6      	b.n	8013f74 <_strtod_l+0x9ac>
 8014006:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801400a:	ee20 db0d 	vmul.f64	d13, d0, d13
 801400e:	f1ba 0f00 	cmp.w	sl, #0
 8014012:	d0ad      	beq.n	8013f70 <_strtod_l+0x9a8>
 8014014:	eeb0 cb4d 	vmov.f64	d12, d13
 8014018:	e7ac      	b.n	8013f74 <_strtod_l+0x9ac>
 801401a:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 801401e:	eeb0 db4c 	vmov.f64	d13, d12
 8014022:	e7a7      	b.n	8013f74 <_strtod_l+0x9ac>
 8014024:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8014028:	e7a4      	b.n	8013f74 <_strtod_l+0x9ac>
 801402a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801402e:	9b05      	ldr	r3, [sp, #20]
 8014030:	46cb      	mov	fp, r9
 8014032:	2b00      	cmp	r3, #0
 8014034:	d1ca      	bne.n	8013fcc <_strtod_l+0xa04>
 8014036:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801403a:	0d1b      	lsrs	r3, r3, #20
 801403c:	051b      	lsls	r3, r3, #20
 801403e:	4299      	cmp	r1, r3
 8014040:	d1c4      	bne.n	8013fcc <_strtod_l+0xa04>
 8014042:	ec51 0b1d 	vmov	r0, r1, d13
 8014046:	f7ec fb77 	bl	8000738 <__aeabi_d2lz>
 801404a:	f7ec fb2f 	bl	80006ac <__aeabi_l2d>
 801404e:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 8014052:	ec41 0b17 	vmov	d7, r0, r1
 8014056:	ea4b 0b08 	orr.w	fp, fp, r8
 801405a:	ea5b 0b0a 	orrs.w	fp, fp, sl
 801405e:	ee3d db47 	vsub.f64	d13, d13, d7
 8014062:	d03c      	beq.n	80140de <_strtod_l+0xb16>
 8014064:	eeb4 dbca 	vcmpe.f64	d13, d10
 8014068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801406c:	f53f acf4 	bmi.w	8013a58 <_strtod_l+0x490>
 8014070:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8014074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014078:	dda8      	ble.n	8013fcc <_strtod_l+0xa04>
 801407a:	e4ed      	b.n	8013a58 <_strtod_l+0x490>
 801407c:	9805      	ldr	r0, [sp, #20]
 801407e:	b1f0      	cbz	r0, 80140be <_strtod_l+0xaf6>
 8014080:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8014084:	d81b      	bhi.n	80140be <_strtod_l+0xaf6>
 8014086:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8014110 <_strtod_l+0xb48>
 801408a:	eeb4 dbc7 	vcmpe.f64	d13, d7
 801408e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014092:	d811      	bhi.n	80140b8 <_strtod_l+0xaf0>
 8014094:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8014098:	ee1d 3a10 	vmov	r3, s26
 801409c:	2b01      	cmp	r3, #1
 801409e:	bf38      	it	cc
 80140a0:	2301      	movcc	r3, #1
 80140a2:	ee0d 3a10 	vmov	s26, r3
 80140a6:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 80140aa:	f1ba 0f00 	cmp.w	sl, #0
 80140ae:	d113      	bne.n	80140d8 <_strtod_l+0xb10>
 80140b0:	eeb1 7b4d 	vneg.f64	d7, d13
 80140b4:	ec53 2b17 	vmov	r2, r3, d7
 80140b8:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 80140bc:	1a43      	subs	r3, r0, r1
 80140be:	eeb0 0b48 	vmov.f64	d0, d8
 80140c2:	ec43 2b1c 	vmov	d12, r2, r3
 80140c6:	910a      	str	r1, [sp, #40]	; 0x28
 80140c8:	f7ff f926 	bl	8013318 <__ulp>
 80140cc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80140ce:	eeac 8b00 	vfma.f64	d8, d12, d0
 80140d2:	ec59 8b18 	vmov	r8, r9, d8
 80140d6:	e7aa      	b.n	801402e <_strtod_l+0xa66>
 80140d8:	eeb0 7b4d 	vmov.f64	d7, d13
 80140dc:	e7ea      	b.n	80140b4 <_strtod_l+0xaec>
 80140de:	eeb4 dbc9 	vcmpe.f64	d13, d9
 80140e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140e6:	f57f af71 	bpl.w	8013fcc <_strtod_l+0xa04>
 80140ea:	e4b5      	b.n	8013a58 <_strtod_l+0x490>
 80140ec:	2300      	movs	r3, #0
 80140ee:	9308      	str	r3, [sp, #32]
 80140f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80140f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80140f4:	6013      	str	r3, [r2, #0]
 80140f6:	f7ff baa6 	b.w	8013646 <_strtod_l+0x7e>
 80140fa:	2a65      	cmp	r2, #101	; 0x65
 80140fc:	f43f aba2 	beq.w	8013844 <_strtod_l+0x27c>
 8014100:	2a45      	cmp	r2, #69	; 0x45
 8014102:	f43f ab9f 	beq.w	8013844 <_strtod_l+0x27c>
 8014106:	2101      	movs	r1, #1
 8014108:	f7ff bbd8 	b.w	80138bc <_strtod_l+0x2f4>
 801410c:	f3af 8000 	nop.w
 8014110:	ffc00000 	.word	0xffc00000
 8014114:	41dfffff 	.word	0x41dfffff
 8014118:	000fffff 	.word	0x000fffff
 801411c:	7ff00000 	.word	0x7ff00000
 8014120:	7fefffff 	.word	0x7fefffff
 8014124:	7c9fffff 	.word	0x7c9fffff
 8014128:	7fe00000 	.word	0x7fe00000

0801412c <_strtod_r>:
 801412c:	4b01      	ldr	r3, [pc, #4]	; (8014134 <_strtod_r+0x8>)
 801412e:	f7ff ba4b 	b.w	80135c8 <_strtod_l>
 8014132:	bf00      	nop
 8014134:	24000070 	.word	0x24000070

08014138 <_strtol_l.constprop.0>:
 8014138:	2b01      	cmp	r3, #1
 801413a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801413e:	d001      	beq.n	8014144 <_strtol_l.constprop.0+0xc>
 8014140:	2b24      	cmp	r3, #36	; 0x24
 8014142:	d906      	bls.n	8014152 <_strtol_l.constprop.0+0x1a>
 8014144:	f7fd fefa 	bl	8011f3c <__errno>
 8014148:	2316      	movs	r3, #22
 801414a:	6003      	str	r3, [r0, #0]
 801414c:	2000      	movs	r0, #0
 801414e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014152:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8014238 <_strtol_l.constprop.0+0x100>
 8014156:	460d      	mov	r5, r1
 8014158:	462e      	mov	r6, r5
 801415a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801415e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8014162:	f017 0708 	ands.w	r7, r7, #8
 8014166:	d1f7      	bne.n	8014158 <_strtol_l.constprop.0+0x20>
 8014168:	2c2d      	cmp	r4, #45	; 0x2d
 801416a:	d132      	bne.n	80141d2 <_strtol_l.constprop.0+0x9a>
 801416c:	782c      	ldrb	r4, [r5, #0]
 801416e:	2701      	movs	r7, #1
 8014170:	1cb5      	adds	r5, r6, #2
 8014172:	2b00      	cmp	r3, #0
 8014174:	d05b      	beq.n	801422e <_strtol_l.constprop.0+0xf6>
 8014176:	2b10      	cmp	r3, #16
 8014178:	d109      	bne.n	801418e <_strtol_l.constprop.0+0x56>
 801417a:	2c30      	cmp	r4, #48	; 0x30
 801417c:	d107      	bne.n	801418e <_strtol_l.constprop.0+0x56>
 801417e:	782c      	ldrb	r4, [r5, #0]
 8014180:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8014184:	2c58      	cmp	r4, #88	; 0x58
 8014186:	d14d      	bne.n	8014224 <_strtol_l.constprop.0+0xec>
 8014188:	786c      	ldrb	r4, [r5, #1]
 801418a:	2310      	movs	r3, #16
 801418c:	3502      	adds	r5, #2
 801418e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8014192:	f108 38ff 	add.w	r8, r8, #4294967295
 8014196:	f04f 0e00 	mov.w	lr, #0
 801419a:	fbb8 f9f3 	udiv	r9, r8, r3
 801419e:	4676      	mov	r6, lr
 80141a0:	fb03 8a19 	mls	sl, r3, r9, r8
 80141a4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80141a8:	f1bc 0f09 	cmp.w	ip, #9
 80141ac:	d816      	bhi.n	80141dc <_strtol_l.constprop.0+0xa4>
 80141ae:	4664      	mov	r4, ip
 80141b0:	42a3      	cmp	r3, r4
 80141b2:	dd24      	ble.n	80141fe <_strtol_l.constprop.0+0xc6>
 80141b4:	f1be 3fff 	cmp.w	lr, #4294967295
 80141b8:	d008      	beq.n	80141cc <_strtol_l.constprop.0+0x94>
 80141ba:	45b1      	cmp	r9, r6
 80141bc:	d31c      	bcc.n	80141f8 <_strtol_l.constprop.0+0xc0>
 80141be:	d101      	bne.n	80141c4 <_strtol_l.constprop.0+0x8c>
 80141c0:	45a2      	cmp	sl, r4
 80141c2:	db19      	blt.n	80141f8 <_strtol_l.constprop.0+0xc0>
 80141c4:	fb06 4603 	mla	r6, r6, r3, r4
 80141c8:	f04f 0e01 	mov.w	lr, #1
 80141cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80141d0:	e7e8      	b.n	80141a4 <_strtol_l.constprop.0+0x6c>
 80141d2:	2c2b      	cmp	r4, #43	; 0x2b
 80141d4:	bf04      	itt	eq
 80141d6:	782c      	ldrbeq	r4, [r5, #0]
 80141d8:	1cb5      	addeq	r5, r6, #2
 80141da:	e7ca      	b.n	8014172 <_strtol_l.constprop.0+0x3a>
 80141dc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80141e0:	f1bc 0f19 	cmp.w	ip, #25
 80141e4:	d801      	bhi.n	80141ea <_strtol_l.constprop.0+0xb2>
 80141e6:	3c37      	subs	r4, #55	; 0x37
 80141e8:	e7e2      	b.n	80141b0 <_strtol_l.constprop.0+0x78>
 80141ea:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80141ee:	f1bc 0f19 	cmp.w	ip, #25
 80141f2:	d804      	bhi.n	80141fe <_strtol_l.constprop.0+0xc6>
 80141f4:	3c57      	subs	r4, #87	; 0x57
 80141f6:	e7db      	b.n	80141b0 <_strtol_l.constprop.0+0x78>
 80141f8:	f04f 3eff 	mov.w	lr, #4294967295
 80141fc:	e7e6      	b.n	80141cc <_strtol_l.constprop.0+0x94>
 80141fe:	f1be 3fff 	cmp.w	lr, #4294967295
 8014202:	d105      	bne.n	8014210 <_strtol_l.constprop.0+0xd8>
 8014204:	2322      	movs	r3, #34	; 0x22
 8014206:	6003      	str	r3, [r0, #0]
 8014208:	4646      	mov	r6, r8
 801420a:	b942      	cbnz	r2, 801421e <_strtol_l.constprop.0+0xe6>
 801420c:	4630      	mov	r0, r6
 801420e:	e79e      	b.n	801414e <_strtol_l.constprop.0+0x16>
 8014210:	b107      	cbz	r7, 8014214 <_strtol_l.constprop.0+0xdc>
 8014212:	4276      	negs	r6, r6
 8014214:	2a00      	cmp	r2, #0
 8014216:	d0f9      	beq.n	801420c <_strtol_l.constprop.0+0xd4>
 8014218:	f1be 0f00 	cmp.w	lr, #0
 801421c:	d000      	beq.n	8014220 <_strtol_l.constprop.0+0xe8>
 801421e:	1e69      	subs	r1, r5, #1
 8014220:	6011      	str	r1, [r2, #0]
 8014222:	e7f3      	b.n	801420c <_strtol_l.constprop.0+0xd4>
 8014224:	2430      	movs	r4, #48	; 0x30
 8014226:	2b00      	cmp	r3, #0
 8014228:	d1b1      	bne.n	801418e <_strtol_l.constprop.0+0x56>
 801422a:	2308      	movs	r3, #8
 801422c:	e7af      	b.n	801418e <_strtol_l.constprop.0+0x56>
 801422e:	2c30      	cmp	r4, #48	; 0x30
 8014230:	d0a5      	beq.n	801417e <_strtol_l.constprop.0+0x46>
 8014232:	230a      	movs	r3, #10
 8014234:	e7ab      	b.n	801418e <_strtol_l.constprop.0+0x56>
 8014236:	bf00      	nop
 8014238:	08015799 	.word	0x08015799

0801423c <_strtol_r>:
 801423c:	f7ff bf7c 	b.w	8014138 <_strtol_l.constprop.0>

08014240 <__ssputs_r>:
 8014240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014244:	688e      	ldr	r6, [r1, #8]
 8014246:	461f      	mov	r7, r3
 8014248:	42be      	cmp	r6, r7
 801424a:	680b      	ldr	r3, [r1, #0]
 801424c:	4682      	mov	sl, r0
 801424e:	460c      	mov	r4, r1
 8014250:	4690      	mov	r8, r2
 8014252:	d82c      	bhi.n	80142ae <__ssputs_r+0x6e>
 8014254:	898a      	ldrh	r2, [r1, #12]
 8014256:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801425a:	d026      	beq.n	80142aa <__ssputs_r+0x6a>
 801425c:	6965      	ldr	r5, [r4, #20]
 801425e:	6909      	ldr	r1, [r1, #16]
 8014260:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014264:	eba3 0901 	sub.w	r9, r3, r1
 8014268:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801426c:	1c7b      	adds	r3, r7, #1
 801426e:	444b      	add	r3, r9
 8014270:	106d      	asrs	r5, r5, #1
 8014272:	429d      	cmp	r5, r3
 8014274:	bf38      	it	cc
 8014276:	461d      	movcc	r5, r3
 8014278:	0553      	lsls	r3, r2, #21
 801427a:	d527      	bpl.n	80142cc <__ssputs_r+0x8c>
 801427c:	4629      	mov	r1, r5
 801427e:	f7fc fd91 	bl	8010da4 <_malloc_r>
 8014282:	4606      	mov	r6, r0
 8014284:	b360      	cbz	r0, 80142e0 <__ssputs_r+0xa0>
 8014286:	6921      	ldr	r1, [r4, #16]
 8014288:	464a      	mov	r2, r9
 801428a:	f7fd fe83 	bl	8011f94 <memcpy>
 801428e:	89a3      	ldrh	r3, [r4, #12]
 8014290:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014298:	81a3      	strh	r3, [r4, #12]
 801429a:	6126      	str	r6, [r4, #16]
 801429c:	6165      	str	r5, [r4, #20]
 801429e:	444e      	add	r6, r9
 80142a0:	eba5 0509 	sub.w	r5, r5, r9
 80142a4:	6026      	str	r6, [r4, #0]
 80142a6:	60a5      	str	r5, [r4, #8]
 80142a8:	463e      	mov	r6, r7
 80142aa:	42be      	cmp	r6, r7
 80142ac:	d900      	bls.n	80142b0 <__ssputs_r+0x70>
 80142ae:	463e      	mov	r6, r7
 80142b0:	6820      	ldr	r0, [r4, #0]
 80142b2:	4632      	mov	r2, r6
 80142b4:	4641      	mov	r1, r8
 80142b6:	f000 f9c9 	bl	801464c <memmove>
 80142ba:	68a3      	ldr	r3, [r4, #8]
 80142bc:	1b9b      	subs	r3, r3, r6
 80142be:	60a3      	str	r3, [r4, #8]
 80142c0:	6823      	ldr	r3, [r4, #0]
 80142c2:	4433      	add	r3, r6
 80142c4:	6023      	str	r3, [r4, #0]
 80142c6:	2000      	movs	r0, #0
 80142c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142cc:	462a      	mov	r2, r5
 80142ce:	f000 fd90 	bl	8014df2 <_realloc_r>
 80142d2:	4606      	mov	r6, r0
 80142d4:	2800      	cmp	r0, #0
 80142d6:	d1e0      	bne.n	801429a <__ssputs_r+0x5a>
 80142d8:	6921      	ldr	r1, [r4, #16]
 80142da:	4650      	mov	r0, sl
 80142dc:	f7fe fc64 	bl	8012ba8 <_free_r>
 80142e0:	230c      	movs	r3, #12
 80142e2:	f8ca 3000 	str.w	r3, [sl]
 80142e6:	89a3      	ldrh	r3, [r4, #12]
 80142e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80142ec:	81a3      	strh	r3, [r4, #12]
 80142ee:	f04f 30ff 	mov.w	r0, #4294967295
 80142f2:	e7e9      	b.n	80142c8 <__ssputs_r+0x88>

080142f4 <_svfiprintf_r>:
 80142f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142f8:	4698      	mov	r8, r3
 80142fa:	898b      	ldrh	r3, [r1, #12]
 80142fc:	061b      	lsls	r3, r3, #24
 80142fe:	b09d      	sub	sp, #116	; 0x74
 8014300:	4607      	mov	r7, r0
 8014302:	460d      	mov	r5, r1
 8014304:	4614      	mov	r4, r2
 8014306:	d50e      	bpl.n	8014326 <_svfiprintf_r+0x32>
 8014308:	690b      	ldr	r3, [r1, #16]
 801430a:	b963      	cbnz	r3, 8014326 <_svfiprintf_r+0x32>
 801430c:	2140      	movs	r1, #64	; 0x40
 801430e:	f7fc fd49 	bl	8010da4 <_malloc_r>
 8014312:	6028      	str	r0, [r5, #0]
 8014314:	6128      	str	r0, [r5, #16]
 8014316:	b920      	cbnz	r0, 8014322 <_svfiprintf_r+0x2e>
 8014318:	230c      	movs	r3, #12
 801431a:	603b      	str	r3, [r7, #0]
 801431c:	f04f 30ff 	mov.w	r0, #4294967295
 8014320:	e0d0      	b.n	80144c4 <_svfiprintf_r+0x1d0>
 8014322:	2340      	movs	r3, #64	; 0x40
 8014324:	616b      	str	r3, [r5, #20]
 8014326:	2300      	movs	r3, #0
 8014328:	9309      	str	r3, [sp, #36]	; 0x24
 801432a:	2320      	movs	r3, #32
 801432c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014330:	f8cd 800c 	str.w	r8, [sp, #12]
 8014334:	2330      	movs	r3, #48	; 0x30
 8014336:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80144dc <_svfiprintf_r+0x1e8>
 801433a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801433e:	f04f 0901 	mov.w	r9, #1
 8014342:	4623      	mov	r3, r4
 8014344:	469a      	mov	sl, r3
 8014346:	f813 2b01 	ldrb.w	r2, [r3], #1
 801434a:	b10a      	cbz	r2, 8014350 <_svfiprintf_r+0x5c>
 801434c:	2a25      	cmp	r2, #37	; 0x25
 801434e:	d1f9      	bne.n	8014344 <_svfiprintf_r+0x50>
 8014350:	ebba 0b04 	subs.w	fp, sl, r4
 8014354:	d00b      	beq.n	801436e <_svfiprintf_r+0x7a>
 8014356:	465b      	mov	r3, fp
 8014358:	4622      	mov	r2, r4
 801435a:	4629      	mov	r1, r5
 801435c:	4638      	mov	r0, r7
 801435e:	f7ff ff6f 	bl	8014240 <__ssputs_r>
 8014362:	3001      	adds	r0, #1
 8014364:	f000 80a9 	beq.w	80144ba <_svfiprintf_r+0x1c6>
 8014368:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801436a:	445a      	add	r2, fp
 801436c:	9209      	str	r2, [sp, #36]	; 0x24
 801436e:	f89a 3000 	ldrb.w	r3, [sl]
 8014372:	2b00      	cmp	r3, #0
 8014374:	f000 80a1 	beq.w	80144ba <_svfiprintf_r+0x1c6>
 8014378:	2300      	movs	r3, #0
 801437a:	f04f 32ff 	mov.w	r2, #4294967295
 801437e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014382:	f10a 0a01 	add.w	sl, sl, #1
 8014386:	9304      	str	r3, [sp, #16]
 8014388:	9307      	str	r3, [sp, #28]
 801438a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801438e:	931a      	str	r3, [sp, #104]	; 0x68
 8014390:	4654      	mov	r4, sl
 8014392:	2205      	movs	r2, #5
 8014394:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014398:	4850      	ldr	r0, [pc, #320]	; (80144dc <_svfiprintf_r+0x1e8>)
 801439a:	f7eb ffa1 	bl	80002e0 <memchr>
 801439e:	9a04      	ldr	r2, [sp, #16]
 80143a0:	b9d8      	cbnz	r0, 80143da <_svfiprintf_r+0xe6>
 80143a2:	06d0      	lsls	r0, r2, #27
 80143a4:	bf44      	itt	mi
 80143a6:	2320      	movmi	r3, #32
 80143a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80143ac:	0711      	lsls	r1, r2, #28
 80143ae:	bf44      	itt	mi
 80143b0:	232b      	movmi	r3, #43	; 0x2b
 80143b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80143b6:	f89a 3000 	ldrb.w	r3, [sl]
 80143ba:	2b2a      	cmp	r3, #42	; 0x2a
 80143bc:	d015      	beq.n	80143ea <_svfiprintf_r+0xf6>
 80143be:	9a07      	ldr	r2, [sp, #28]
 80143c0:	4654      	mov	r4, sl
 80143c2:	2000      	movs	r0, #0
 80143c4:	f04f 0c0a 	mov.w	ip, #10
 80143c8:	4621      	mov	r1, r4
 80143ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80143ce:	3b30      	subs	r3, #48	; 0x30
 80143d0:	2b09      	cmp	r3, #9
 80143d2:	d94d      	bls.n	8014470 <_svfiprintf_r+0x17c>
 80143d4:	b1b0      	cbz	r0, 8014404 <_svfiprintf_r+0x110>
 80143d6:	9207      	str	r2, [sp, #28]
 80143d8:	e014      	b.n	8014404 <_svfiprintf_r+0x110>
 80143da:	eba0 0308 	sub.w	r3, r0, r8
 80143de:	fa09 f303 	lsl.w	r3, r9, r3
 80143e2:	4313      	orrs	r3, r2
 80143e4:	9304      	str	r3, [sp, #16]
 80143e6:	46a2      	mov	sl, r4
 80143e8:	e7d2      	b.n	8014390 <_svfiprintf_r+0x9c>
 80143ea:	9b03      	ldr	r3, [sp, #12]
 80143ec:	1d19      	adds	r1, r3, #4
 80143ee:	681b      	ldr	r3, [r3, #0]
 80143f0:	9103      	str	r1, [sp, #12]
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	bfbb      	ittet	lt
 80143f6:	425b      	neglt	r3, r3
 80143f8:	f042 0202 	orrlt.w	r2, r2, #2
 80143fc:	9307      	strge	r3, [sp, #28]
 80143fe:	9307      	strlt	r3, [sp, #28]
 8014400:	bfb8      	it	lt
 8014402:	9204      	strlt	r2, [sp, #16]
 8014404:	7823      	ldrb	r3, [r4, #0]
 8014406:	2b2e      	cmp	r3, #46	; 0x2e
 8014408:	d10c      	bne.n	8014424 <_svfiprintf_r+0x130>
 801440a:	7863      	ldrb	r3, [r4, #1]
 801440c:	2b2a      	cmp	r3, #42	; 0x2a
 801440e:	d134      	bne.n	801447a <_svfiprintf_r+0x186>
 8014410:	9b03      	ldr	r3, [sp, #12]
 8014412:	1d1a      	adds	r2, r3, #4
 8014414:	681b      	ldr	r3, [r3, #0]
 8014416:	9203      	str	r2, [sp, #12]
 8014418:	2b00      	cmp	r3, #0
 801441a:	bfb8      	it	lt
 801441c:	f04f 33ff 	movlt.w	r3, #4294967295
 8014420:	3402      	adds	r4, #2
 8014422:	9305      	str	r3, [sp, #20]
 8014424:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80144ec <_svfiprintf_r+0x1f8>
 8014428:	7821      	ldrb	r1, [r4, #0]
 801442a:	2203      	movs	r2, #3
 801442c:	4650      	mov	r0, sl
 801442e:	f7eb ff57 	bl	80002e0 <memchr>
 8014432:	b138      	cbz	r0, 8014444 <_svfiprintf_r+0x150>
 8014434:	9b04      	ldr	r3, [sp, #16]
 8014436:	eba0 000a 	sub.w	r0, r0, sl
 801443a:	2240      	movs	r2, #64	; 0x40
 801443c:	4082      	lsls	r2, r0
 801443e:	4313      	orrs	r3, r2
 8014440:	3401      	adds	r4, #1
 8014442:	9304      	str	r3, [sp, #16]
 8014444:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014448:	4825      	ldr	r0, [pc, #148]	; (80144e0 <_svfiprintf_r+0x1ec>)
 801444a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801444e:	2206      	movs	r2, #6
 8014450:	f7eb ff46 	bl	80002e0 <memchr>
 8014454:	2800      	cmp	r0, #0
 8014456:	d038      	beq.n	80144ca <_svfiprintf_r+0x1d6>
 8014458:	4b22      	ldr	r3, [pc, #136]	; (80144e4 <_svfiprintf_r+0x1f0>)
 801445a:	bb1b      	cbnz	r3, 80144a4 <_svfiprintf_r+0x1b0>
 801445c:	9b03      	ldr	r3, [sp, #12]
 801445e:	3307      	adds	r3, #7
 8014460:	f023 0307 	bic.w	r3, r3, #7
 8014464:	3308      	adds	r3, #8
 8014466:	9303      	str	r3, [sp, #12]
 8014468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801446a:	4433      	add	r3, r6
 801446c:	9309      	str	r3, [sp, #36]	; 0x24
 801446e:	e768      	b.n	8014342 <_svfiprintf_r+0x4e>
 8014470:	fb0c 3202 	mla	r2, ip, r2, r3
 8014474:	460c      	mov	r4, r1
 8014476:	2001      	movs	r0, #1
 8014478:	e7a6      	b.n	80143c8 <_svfiprintf_r+0xd4>
 801447a:	2300      	movs	r3, #0
 801447c:	3401      	adds	r4, #1
 801447e:	9305      	str	r3, [sp, #20]
 8014480:	4619      	mov	r1, r3
 8014482:	f04f 0c0a 	mov.w	ip, #10
 8014486:	4620      	mov	r0, r4
 8014488:	f810 2b01 	ldrb.w	r2, [r0], #1
 801448c:	3a30      	subs	r2, #48	; 0x30
 801448e:	2a09      	cmp	r2, #9
 8014490:	d903      	bls.n	801449a <_svfiprintf_r+0x1a6>
 8014492:	2b00      	cmp	r3, #0
 8014494:	d0c6      	beq.n	8014424 <_svfiprintf_r+0x130>
 8014496:	9105      	str	r1, [sp, #20]
 8014498:	e7c4      	b.n	8014424 <_svfiprintf_r+0x130>
 801449a:	fb0c 2101 	mla	r1, ip, r1, r2
 801449e:	4604      	mov	r4, r0
 80144a0:	2301      	movs	r3, #1
 80144a2:	e7f0      	b.n	8014486 <_svfiprintf_r+0x192>
 80144a4:	ab03      	add	r3, sp, #12
 80144a6:	9300      	str	r3, [sp, #0]
 80144a8:	462a      	mov	r2, r5
 80144aa:	4b0f      	ldr	r3, [pc, #60]	; (80144e8 <_svfiprintf_r+0x1f4>)
 80144ac:	a904      	add	r1, sp, #16
 80144ae:	4638      	mov	r0, r7
 80144b0:	f7fc fd96 	bl	8010fe0 <_printf_float>
 80144b4:	1c42      	adds	r2, r0, #1
 80144b6:	4606      	mov	r6, r0
 80144b8:	d1d6      	bne.n	8014468 <_svfiprintf_r+0x174>
 80144ba:	89ab      	ldrh	r3, [r5, #12]
 80144bc:	065b      	lsls	r3, r3, #25
 80144be:	f53f af2d 	bmi.w	801431c <_svfiprintf_r+0x28>
 80144c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80144c4:	b01d      	add	sp, #116	; 0x74
 80144c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144ca:	ab03      	add	r3, sp, #12
 80144cc:	9300      	str	r3, [sp, #0]
 80144ce:	462a      	mov	r2, r5
 80144d0:	4b05      	ldr	r3, [pc, #20]	; (80144e8 <_svfiprintf_r+0x1f4>)
 80144d2:	a904      	add	r1, sp, #16
 80144d4:	4638      	mov	r0, r7
 80144d6:	f7fd f80b 	bl	80114f0 <_printf_i>
 80144da:	e7eb      	b.n	80144b4 <_svfiprintf_r+0x1c0>
 80144dc:	08015899 	.word	0x08015899
 80144e0:	080158a3 	.word	0x080158a3
 80144e4:	08010fe1 	.word	0x08010fe1
 80144e8:	08014241 	.word	0x08014241
 80144ec:	0801589f 	.word	0x0801589f

080144f0 <__sflush_r>:
 80144f0:	898a      	ldrh	r2, [r1, #12]
 80144f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80144f6:	4605      	mov	r5, r0
 80144f8:	0710      	lsls	r0, r2, #28
 80144fa:	460c      	mov	r4, r1
 80144fc:	d458      	bmi.n	80145b0 <__sflush_r+0xc0>
 80144fe:	684b      	ldr	r3, [r1, #4]
 8014500:	2b00      	cmp	r3, #0
 8014502:	dc05      	bgt.n	8014510 <__sflush_r+0x20>
 8014504:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014506:	2b00      	cmp	r3, #0
 8014508:	dc02      	bgt.n	8014510 <__sflush_r+0x20>
 801450a:	2000      	movs	r0, #0
 801450c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014510:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014512:	2e00      	cmp	r6, #0
 8014514:	d0f9      	beq.n	801450a <__sflush_r+0x1a>
 8014516:	2300      	movs	r3, #0
 8014518:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801451c:	682f      	ldr	r7, [r5, #0]
 801451e:	6a21      	ldr	r1, [r4, #32]
 8014520:	602b      	str	r3, [r5, #0]
 8014522:	d032      	beq.n	801458a <__sflush_r+0x9a>
 8014524:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014526:	89a3      	ldrh	r3, [r4, #12]
 8014528:	075a      	lsls	r2, r3, #29
 801452a:	d505      	bpl.n	8014538 <__sflush_r+0x48>
 801452c:	6863      	ldr	r3, [r4, #4]
 801452e:	1ac0      	subs	r0, r0, r3
 8014530:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014532:	b10b      	cbz	r3, 8014538 <__sflush_r+0x48>
 8014534:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014536:	1ac0      	subs	r0, r0, r3
 8014538:	2300      	movs	r3, #0
 801453a:	4602      	mov	r2, r0
 801453c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801453e:	6a21      	ldr	r1, [r4, #32]
 8014540:	4628      	mov	r0, r5
 8014542:	47b0      	blx	r6
 8014544:	1c43      	adds	r3, r0, #1
 8014546:	89a3      	ldrh	r3, [r4, #12]
 8014548:	d106      	bne.n	8014558 <__sflush_r+0x68>
 801454a:	6829      	ldr	r1, [r5, #0]
 801454c:	291d      	cmp	r1, #29
 801454e:	d82b      	bhi.n	80145a8 <__sflush_r+0xb8>
 8014550:	4a29      	ldr	r2, [pc, #164]	; (80145f8 <__sflush_r+0x108>)
 8014552:	410a      	asrs	r2, r1
 8014554:	07d6      	lsls	r6, r2, #31
 8014556:	d427      	bmi.n	80145a8 <__sflush_r+0xb8>
 8014558:	2200      	movs	r2, #0
 801455a:	6062      	str	r2, [r4, #4]
 801455c:	04d9      	lsls	r1, r3, #19
 801455e:	6922      	ldr	r2, [r4, #16]
 8014560:	6022      	str	r2, [r4, #0]
 8014562:	d504      	bpl.n	801456e <__sflush_r+0x7e>
 8014564:	1c42      	adds	r2, r0, #1
 8014566:	d101      	bne.n	801456c <__sflush_r+0x7c>
 8014568:	682b      	ldr	r3, [r5, #0]
 801456a:	b903      	cbnz	r3, 801456e <__sflush_r+0x7e>
 801456c:	6560      	str	r0, [r4, #84]	; 0x54
 801456e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014570:	602f      	str	r7, [r5, #0]
 8014572:	2900      	cmp	r1, #0
 8014574:	d0c9      	beq.n	801450a <__sflush_r+0x1a>
 8014576:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801457a:	4299      	cmp	r1, r3
 801457c:	d002      	beq.n	8014584 <__sflush_r+0x94>
 801457e:	4628      	mov	r0, r5
 8014580:	f7fe fb12 	bl	8012ba8 <_free_r>
 8014584:	2000      	movs	r0, #0
 8014586:	6360      	str	r0, [r4, #52]	; 0x34
 8014588:	e7c0      	b.n	801450c <__sflush_r+0x1c>
 801458a:	2301      	movs	r3, #1
 801458c:	4628      	mov	r0, r5
 801458e:	47b0      	blx	r6
 8014590:	1c41      	adds	r1, r0, #1
 8014592:	d1c8      	bne.n	8014526 <__sflush_r+0x36>
 8014594:	682b      	ldr	r3, [r5, #0]
 8014596:	2b00      	cmp	r3, #0
 8014598:	d0c5      	beq.n	8014526 <__sflush_r+0x36>
 801459a:	2b1d      	cmp	r3, #29
 801459c:	d001      	beq.n	80145a2 <__sflush_r+0xb2>
 801459e:	2b16      	cmp	r3, #22
 80145a0:	d101      	bne.n	80145a6 <__sflush_r+0xb6>
 80145a2:	602f      	str	r7, [r5, #0]
 80145a4:	e7b1      	b.n	801450a <__sflush_r+0x1a>
 80145a6:	89a3      	ldrh	r3, [r4, #12]
 80145a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80145ac:	81a3      	strh	r3, [r4, #12]
 80145ae:	e7ad      	b.n	801450c <__sflush_r+0x1c>
 80145b0:	690f      	ldr	r7, [r1, #16]
 80145b2:	2f00      	cmp	r7, #0
 80145b4:	d0a9      	beq.n	801450a <__sflush_r+0x1a>
 80145b6:	0793      	lsls	r3, r2, #30
 80145b8:	680e      	ldr	r6, [r1, #0]
 80145ba:	bf08      	it	eq
 80145bc:	694b      	ldreq	r3, [r1, #20]
 80145be:	600f      	str	r7, [r1, #0]
 80145c0:	bf18      	it	ne
 80145c2:	2300      	movne	r3, #0
 80145c4:	eba6 0807 	sub.w	r8, r6, r7
 80145c8:	608b      	str	r3, [r1, #8]
 80145ca:	f1b8 0f00 	cmp.w	r8, #0
 80145ce:	dd9c      	ble.n	801450a <__sflush_r+0x1a>
 80145d0:	6a21      	ldr	r1, [r4, #32]
 80145d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80145d4:	4643      	mov	r3, r8
 80145d6:	463a      	mov	r2, r7
 80145d8:	4628      	mov	r0, r5
 80145da:	47b0      	blx	r6
 80145dc:	2800      	cmp	r0, #0
 80145de:	dc06      	bgt.n	80145ee <__sflush_r+0xfe>
 80145e0:	89a3      	ldrh	r3, [r4, #12]
 80145e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80145e6:	81a3      	strh	r3, [r4, #12]
 80145e8:	f04f 30ff 	mov.w	r0, #4294967295
 80145ec:	e78e      	b.n	801450c <__sflush_r+0x1c>
 80145ee:	4407      	add	r7, r0
 80145f0:	eba8 0800 	sub.w	r8, r8, r0
 80145f4:	e7e9      	b.n	80145ca <__sflush_r+0xda>
 80145f6:	bf00      	nop
 80145f8:	dfbffffe 	.word	0xdfbffffe

080145fc <_fflush_r>:
 80145fc:	b538      	push	{r3, r4, r5, lr}
 80145fe:	690b      	ldr	r3, [r1, #16]
 8014600:	4605      	mov	r5, r0
 8014602:	460c      	mov	r4, r1
 8014604:	b913      	cbnz	r3, 801460c <_fflush_r+0x10>
 8014606:	2500      	movs	r5, #0
 8014608:	4628      	mov	r0, r5
 801460a:	bd38      	pop	{r3, r4, r5, pc}
 801460c:	b118      	cbz	r0, 8014616 <_fflush_r+0x1a>
 801460e:	6a03      	ldr	r3, [r0, #32]
 8014610:	b90b      	cbnz	r3, 8014616 <_fflush_r+0x1a>
 8014612:	f7fd fb0d 	bl	8011c30 <__sinit>
 8014616:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801461a:	2b00      	cmp	r3, #0
 801461c:	d0f3      	beq.n	8014606 <_fflush_r+0xa>
 801461e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014620:	07d0      	lsls	r0, r2, #31
 8014622:	d404      	bmi.n	801462e <_fflush_r+0x32>
 8014624:	0599      	lsls	r1, r3, #22
 8014626:	d402      	bmi.n	801462e <_fflush_r+0x32>
 8014628:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801462a:	f7fd fcb1 	bl	8011f90 <__retarget_lock_acquire_recursive>
 801462e:	4628      	mov	r0, r5
 8014630:	4621      	mov	r1, r4
 8014632:	f7ff ff5d 	bl	80144f0 <__sflush_r>
 8014636:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014638:	07da      	lsls	r2, r3, #31
 801463a:	4605      	mov	r5, r0
 801463c:	d4e4      	bmi.n	8014608 <_fflush_r+0xc>
 801463e:	89a3      	ldrh	r3, [r4, #12]
 8014640:	059b      	lsls	r3, r3, #22
 8014642:	d4e1      	bmi.n	8014608 <_fflush_r+0xc>
 8014644:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014646:	f7fd fca4 	bl	8011f92 <__retarget_lock_release_recursive>
 801464a:	e7dd      	b.n	8014608 <_fflush_r+0xc>

0801464c <memmove>:
 801464c:	4288      	cmp	r0, r1
 801464e:	b510      	push	{r4, lr}
 8014650:	eb01 0402 	add.w	r4, r1, r2
 8014654:	d902      	bls.n	801465c <memmove+0x10>
 8014656:	4284      	cmp	r4, r0
 8014658:	4623      	mov	r3, r4
 801465a:	d807      	bhi.n	801466c <memmove+0x20>
 801465c:	1e43      	subs	r3, r0, #1
 801465e:	42a1      	cmp	r1, r4
 8014660:	d008      	beq.n	8014674 <memmove+0x28>
 8014662:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014666:	f803 2f01 	strb.w	r2, [r3, #1]!
 801466a:	e7f8      	b.n	801465e <memmove+0x12>
 801466c:	4402      	add	r2, r0
 801466e:	4601      	mov	r1, r0
 8014670:	428a      	cmp	r2, r1
 8014672:	d100      	bne.n	8014676 <memmove+0x2a>
 8014674:	bd10      	pop	{r4, pc}
 8014676:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801467a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801467e:	e7f7      	b.n	8014670 <memmove+0x24>

08014680 <strncmp>:
 8014680:	b510      	push	{r4, lr}
 8014682:	b16a      	cbz	r2, 80146a0 <strncmp+0x20>
 8014684:	3901      	subs	r1, #1
 8014686:	1884      	adds	r4, r0, r2
 8014688:	f810 2b01 	ldrb.w	r2, [r0], #1
 801468c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8014690:	429a      	cmp	r2, r3
 8014692:	d103      	bne.n	801469c <strncmp+0x1c>
 8014694:	42a0      	cmp	r0, r4
 8014696:	d001      	beq.n	801469c <strncmp+0x1c>
 8014698:	2a00      	cmp	r2, #0
 801469a:	d1f5      	bne.n	8014688 <strncmp+0x8>
 801469c:	1ad0      	subs	r0, r2, r3
 801469e:	bd10      	pop	{r4, pc}
 80146a0:	4610      	mov	r0, r2
 80146a2:	e7fc      	b.n	801469e <strncmp+0x1e>
 80146a4:	0000      	movs	r0, r0
	...

080146a8 <nan>:
 80146a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80146b0 <nan+0x8>
 80146ac:	4770      	bx	lr
 80146ae:	bf00      	nop
 80146b0:	00000000 	.word	0x00000000
 80146b4:	7ff80000 	.word	0x7ff80000

080146b8 <__assert_func>:
 80146b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80146ba:	4614      	mov	r4, r2
 80146bc:	461a      	mov	r2, r3
 80146be:	4b09      	ldr	r3, [pc, #36]	; (80146e4 <__assert_func+0x2c>)
 80146c0:	681b      	ldr	r3, [r3, #0]
 80146c2:	4605      	mov	r5, r0
 80146c4:	68d8      	ldr	r0, [r3, #12]
 80146c6:	b14c      	cbz	r4, 80146dc <__assert_func+0x24>
 80146c8:	4b07      	ldr	r3, [pc, #28]	; (80146e8 <__assert_func+0x30>)
 80146ca:	9100      	str	r1, [sp, #0]
 80146cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80146d0:	4906      	ldr	r1, [pc, #24]	; (80146ec <__assert_func+0x34>)
 80146d2:	462b      	mov	r3, r5
 80146d4:	f000 fbca 	bl	8014e6c <fiprintf>
 80146d8:	f000 fbda 	bl	8014e90 <abort>
 80146dc:	4b04      	ldr	r3, [pc, #16]	; (80146f0 <__assert_func+0x38>)
 80146de:	461c      	mov	r4, r3
 80146e0:	e7f3      	b.n	80146ca <__assert_func+0x12>
 80146e2:	bf00      	nop
 80146e4:	2400006c 	.word	0x2400006c
 80146e8:	080158b2 	.word	0x080158b2
 80146ec:	080158bf 	.word	0x080158bf
 80146f0:	080158ed 	.word	0x080158ed

080146f4 <_calloc_r>:
 80146f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80146f6:	fba1 2402 	umull	r2, r4, r1, r2
 80146fa:	b94c      	cbnz	r4, 8014710 <_calloc_r+0x1c>
 80146fc:	4611      	mov	r1, r2
 80146fe:	9201      	str	r2, [sp, #4]
 8014700:	f7fc fb50 	bl	8010da4 <_malloc_r>
 8014704:	9a01      	ldr	r2, [sp, #4]
 8014706:	4605      	mov	r5, r0
 8014708:	b930      	cbnz	r0, 8014718 <_calloc_r+0x24>
 801470a:	4628      	mov	r0, r5
 801470c:	b003      	add	sp, #12
 801470e:	bd30      	pop	{r4, r5, pc}
 8014710:	220c      	movs	r2, #12
 8014712:	6002      	str	r2, [r0, #0]
 8014714:	2500      	movs	r5, #0
 8014716:	e7f8      	b.n	801470a <_calloc_r+0x16>
 8014718:	4621      	mov	r1, r4
 801471a:	f7fd fb56 	bl	8011dca <memset>
 801471e:	e7f4      	b.n	801470a <_calloc_r+0x16>

08014720 <rshift>:
 8014720:	6903      	ldr	r3, [r0, #16]
 8014722:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8014726:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801472a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801472e:	f100 0414 	add.w	r4, r0, #20
 8014732:	dd45      	ble.n	80147c0 <rshift+0xa0>
 8014734:	f011 011f 	ands.w	r1, r1, #31
 8014738:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801473c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8014740:	d10c      	bne.n	801475c <rshift+0x3c>
 8014742:	f100 0710 	add.w	r7, r0, #16
 8014746:	4629      	mov	r1, r5
 8014748:	42b1      	cmp	r1, r6
 801474a:	d334      	bcc.n	80147b6 <rshift+0x96>
 801474c:	1a9b      	subs	r3, r3, r2
 801474e:	009b      	lsls	r3, r3, #2
 8014750:	1eea      	subs	r2, r5, #3
 8014752:	4296      	cmp	r6, r2
 8014754:	bf38      	it	cc
 8014756:	2300      	movcc	r3, #0
 8014758:	4423      	add	r3, r4
 801475a:	e015      	b.n	8014788 <rshift+0x68>
 801475c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8014760:	f1c1 0820 	rsb	r8, r1, #32
 8014764:	40cf      	lsrs	r7, r1
 8014766:	f105 0e04 	add.w	lr, r5, #4
 801476a:	46a1      	mov	r9, r4
 801476c:	4576      	cmp	r6, lr
 801476e:	46f4      	mov	ip, lr
 8014770:	d815      	bhi.n	801479e <rshift+0x7e>
 8014772:	1a9a      	subs	r2, r3, r2
 8014774:	0092      	lsls	r2, r2, #2
 8014776:	3a04      	subs	r2, #4
 8014778:	3501      	adds	r5, #1
 801477a:	42ae      	cmp	r6, r5
 801477c:	bf38      	it	cc
 801477e:	2200      	movcc	r2, #0
 8014780:	18a3      	adds	r3, r4, r2
 8014782:	50a7      	str	r7, [r4, r2]
 8014784:	b107      	cbz	r7, 8014788 <rshift+0x68>
 8014786:	3304      	adds	r3, #4
 8014788:	1b1a      	subs	r2, r3, r4
 801478a:	42a3      	cmp	r3, r4
 801478c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014790:	bf08      	it	eq
 8014792:	2300      	moveq	r3, #0
 8014794:	6102      	str	r2, [r0, #16]
 8014796:	bf08      	it	eq
 8014798:	6143      	streq	r3, [r0, #20]
 801479a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801479e:	f8dc c000 	ldr.w	ip, [ip]
 80147a2:	fa0c fc08 	lsl.w	ip, ip, r8
 80147a6:	ea4c 0707 	orr.w	r7, ip, r7
 80147aa:	f849 7b04 	str.w	r7, [r9], #4
 80147ae:	f85e 7b04 	ldr.w	r7, [lr], #4
 80147b2:	40cf      	lsrs	r7, r1
 80147b4:	e7da      	b.n	801476c <rshift+0x4c>
 80147b6:	f851 cb04 	ldr.w	ip, [r1], #4
 80147ba:	f847 cf04 	str.w	ip, [r7, #4]!
 80147be:	e7c3      	b.n	8014748 <rshift+0x28>
 80147c0:	4623      	mov	r3, r4
 80147c2:	e7e1      	b.n	8014788 <rshift+0x68>

080147c4 <__hexdig_fun>:
 80147c4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80147c8:	2b09      	cmp	r3, #9
 80147ca:	d802      	bhi.n	80147d2 <__hexdig_fun+0xe>
 80147cc:	3820      	subs	r0, #32
 80147ce:	b2c0      	uxtb	r0, r0
 80147d0:	4770      	bx	lr
 80147d2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80147d6:	2b05      	cmp	r3, #5
 80147d8:	d801      	bhi.n	80147de <__hexdig_fun+0x1a>
 80147da:	3847      	subs	r0, #71	; 0x47
 80147dc:	e7f7      	b.n	80147ce <__hexdig_fun+0xa>
 80147de:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80147e2:	2b05      	cmp	r3, #5
 80147e4:	d801      	bhi.n	80147ea <__hexdig_fun+0x26>
 80147e6:	3827      	subs	r0, #39	; 0x27
 80147e8:	e7f1      	b.n	80147ce <__hexdig_fun+0xa>
 80147ea:	2000      	movs	r0, #0
 80147ec:	4770      	bx	lr
	...

080147f0 <__gethex>:
 80147f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147f4:	4617      	mov	r7, r2
 80147f6:	680a      	ldr	r2, [r1, #0]
 80147f8:	b085      	sub	sp, #20
 80147fa:	f102 0b02 	add.w	fp, r2, #2
 80147fe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8014802:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8014806:	4681      	mov	r9, r0
 8014808:	468a      	mov	sl, r1
 801480a:	9302      	str	r3, [sp, #8]
 801480c:	32fe      	adds	r2, #254	; 0xfe
 801480e:	eb02 030b 	add.w	r3, r2, fp
 8014812:	46d8      	mov	r8, fp
 8014814:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8014818:	9301      	str	r3, [sp, #4]
 801481a:	2830      	cmp	r0, #48	; 0x30
 801481c:	d0f7      	beq.n	801480e <__gethex+0x1e>
 801481e:	f7ff ffd1 	bl	80147c4 <__hexdig_fun>
 8014822:	4604      	mov	r4, r0
 8014824:	2800      	cmp	r0, #0
 8014826:	d138      	bne.n	801489a <__gethex+0xaa>
 8014828:	49a7      	ldr	r1, [pc, #668]	; (8014ac8 <__gethex+0x2d8>)
 801482a:	2201      	movs	r2, #1
 801482c:	4640      	mov	r0, r8
 801482e:	f7ff ff27 	bl	8014680 <strncmp>
 8014832:	4606      	mov	r6, r0
 8014834:	2800      	cmp	r0, #0
 8014836:	d169      	bne.n	801490c <__gethex+0x11c>
 8014838:	f898 0001 	ldrb.w	r0, [r8, #1]
 801483c:	465d      	mov	r5, fp
 801483e:	f7ff ffc1 	bl	80147c4 <__hexdig_fun>
 8014842:	2800      	cmp	r0, #0
 8014844:	d064      	beq.n	8014910 <__gethex+0x120>
 8014846:	465a      	mov	r2, fp
 8014848:	7810      	ldrb	r0, [r2, #0]
 801484a:	2830      	cmp	r0, #48	; 0x30
 801484c:	4690      	mov	r8, r2
 801484e:	f102 0201 	add.w	r2, r2, #1
 8014852:	d0f9      	beq.n	8014848 <__gethex+0x58>
 8014854:	f7ff ffb6 	bl	80147c4 <__hexdig_fun>
 8014858:	2301      	movs	r3, #1
 801485a:	fab0 f480 	clz	r4, r0
 801485e:	0964      	lsrs	r4, r4, #5
 8014860:	465e      	mov	r6, fp
 8014862:	9301      	str	r3, [sp, #4]
 8014864:	4642      	mov	r2, r8
 8014866:	4615      	mov	r5, r2
 8014868:	3201      	adds	r2, #1
 801486a:	7828      	ldrb	r0, [r5, #0]
 801486c:	f7ff ffaa 	bl	80147c4 <__hexdig_fun>
 8014870:	2800      	cmp	r0, #0
 8014872:	d1f8      	bne.n	8014866 <__gethex+0x76>
 8014874:	4994      	ldr	r1, [pc, #592]	; (8014ac8 <__gethex+0x2d8>)
 8014876:	2201      	movs	r2, #1
 8014878:	4628      	mov	r0, r5
 801487a:	f7ff ff01 	bl	8014680 <strncmp>
 801487e:	b978      	cbnz	r0, 80148a0 <__gethex+0xb0>
 8014880:	b946      	cbnz	r6, 8014894 <__gethex+0xa4>
 8014882:	1c6e      	adds	r6, r5, #1
 8014884:	4632      	mov	r2, r6
 8014886:	4615      	mov	r5, r2
 8014888:	3201      	adds	r2, #1
 801488a:	7828      	ldrb	r0, [r5, #0]
 801488c:	f7ff ff9a 	bl	80147c4 <__hexdig_fun>
 8014890:	2800      	cmp	r0, #0
 8014892:	d1f8      	bne.n	8014886 <__gethex+0x96>
 8014894:	1b73      	subs	r3, r6, r5
 8014896:	009e      	lsls	r6, r3, #2
 8014898:	e004      	b.n	80148a4 <__gethex+0xb4>
 801489a:	2400      	movs	r4, #0
 801489c:	4626      	mov	r6, r4
 801489e:	e7e1      	b.n	8014864 <__gethex+0x74>
 80148a0:	2e00      	cmp	r6, #0
 80148a2:	d1f7      	bne.n	8014894 <__gethex+0xa4>
 80148a4:	782b      	ldrb	r3, [r5, #0]
 80148a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80148aa:	2b50      	cmp	r3, #80	; 0x50
 80148ac:	d13d      	bne.n	801492a <__gethex+0x13a>
 80148ae:	786b      	ldrb	r3, [r5, #1]
 80148b0:	2b2b      	cmp	r3, #43	; 0x2b
 80148b2:	d02f      	beq.n	8014914 <__gethex+0x124>
 80148b4:	2b2d      	cmp	r3, #45	; 0x2d
 80148b6:	d031      	beq.n	801491c <__gethex+0x12c>
 80148b8:	1c69      	adds	r1, r5, #1
 80148ba:	f04f 0b00 	mov.w	fp, #0
 80148be:	7808      	ldrb	r0, [r1, #0]
 80148c0:	f7ff ff80 	bl	80147c4 <__hexdig_fun>
 80148c4:	1e42      	subs	r2, r0, #1
 80148c6:	b2d2      	uxtb	r2, r2
 80148c8:	2a18      	cmp	r2, #24
 80148ca:	d82e      	bhi.n	801492a <__gethex+0x13a>
 80148cc:	f1a0 0210 	sub.w	r2, r0, #16
 80148d0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80148d4:	f7ff ff76 	bl	80147c4 <__hexdig_fun>
 80148d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80148dc:	fa5f fc8c 	uxtb.w	ip, ip
 80148e0:	f1bc 0f18 	cmp.w	ip, #24
 80148e4:	d91d      	bls.n	8014922 <__gethex+0x132>
 80148e6:	f1bb 0f00 	cmp.w	fp, #0
 80148ea:	d000      	beq.n	80148ee <__gethex+0xfe>
 80148ec:	4252      	negs	r2, r2
 80148ee:	4416      	add	r6, r2
 80148f0:	f8ca 1000 	str.w	r1, [sl]
 80148f4:	b1dc      	cbz	r4, 801492e <__gethex+0x13e>
 80148f6:	9b01      	ldr	r3, [sp, #4]
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	bf14      	ite	ne
 80148fc:	f04f 0800 	movne.w	r8, #0
 8014900:	f04f 0806 	moveq.w	r8, #6
 8014904:	4640      	mov	r0, r8
 8014906:	b005      	add	sp, #20
 8014908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801490c:	4645      	mov	r5, r8
 801490e:	4626      	mov	r6, r4
 8014910:	2401      	movs	r4, #1
 8014912:	e7c7      	b.n	80148a4 <__gethex+0xb4>
 8014914:	f04f 0b00 	mov.w	fp, #0
 8014918:	1ca9      	adds	r1, r5, #2
 801491a:	e7d0      	b.n	80148be <__gethex+0xce>
 801491c:	f04f 0b01 	mov.w	fp, #1
 8014920:	e7fa      	b.n	8014918 <__gethex+0x128>
 8014922:	230a      	movs	r3, #10
 8014924:	fb03 0002 	mla	r0, r3, r2, r0
 8014928:	e7d0      	b.n	80148cc <__gethex+0xdc>
 801492a:	4629      	mov	r1, r5
 801492c:	e7e0      	b.n	80148f0 <__gethex+0x100>
 801492e:	eba5 0308 	sub.w	r3, r5, r8
 8014932:	3b01      	subs	r3, #1
 8014934:	4621      	mov	r1, r4
 8014936:	2b07      	cmp	r3, #7
 8014938:	dc0a      	bgt.n	8014950 <__gethex+0x160>
 801493a:	4648      	mov	r0, r9
 801493c:	f7fe f980 	bl	8012c40 <_Balloc>
 8014940:	4604      	mov	r4, r0
 8014942:	b940      	cbnz	r0, 8014956 <__gethex+0x166>
 8014944:	4b61      	ldr	r3, [pc, #388]	; (8014acc <__gethex+0x2dc>)
 8014946:	4602      	mov	r2, r0
 8014948:	21e4      	movs	r1, #228	; 0xe4
 801494a:	4861      	ldr	r0, [pc, #388]	; (8014ad0 <__gethex+0x2e0>)
 801494c:	f7ff feb4 	bl	80146b8 <__assert_func>
 8014950:	3101      	adds	r1, #1
 8014952:	105b      	asrs	r3, r3, #1
 8014954:	e7ef      	b.n	8014936 <__gethex+0x146>
 8014956:	f100 0a14 	add.w	sl, r0, #20
 801495a:	2300      	movs	r3, #0
 801495c:	495a      	ldr	r1, [pc, #360]	; (8014ac8 <__gethex+0x2d8>)
 801495e:	f8cd a004 	str.w	sl, [sp, #4]
 8014962:	469b      	mov	fp, r3
 8014964:	45a8      	cmp	r8, r5
 8014966:	d342      	bcc.n	80149ee <__gethex+0x1fe>
 8014968:	9801      	ldr	r0, [sp, #4]
 801496a:	f840 bb04 	str.w	fp, [r0], #4
 801496e:	eba0 000a 	sub.w	r0, r0, sl
 8014972:	1080      	asrs	r0, r0, #2
 8014974:	6120      	str	r0, [r4, #16]
 8014976:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801497a:	4658      	mov	r0, fp
 801497c:	f7fe fa52 	bl	8012e24 <__hi0bits>
 8014980:	683d      	ldr	r5, [r7, #0]
 8014982:	eba8 0000 	sub.w	r0, r8, r0
 8014986:	42a8      	cmp	r0, r5
 8014988:	dd59      	ble.n	8014a3e <__gethex+0x24e>
 801498a:	eba0 0805 	sub.w	r8, r0, r5
 801498e:	4641      	mov	r1, r8
 8014990:	4620      	mov	r0, r4
 8014992:	f7fe fdde 	bl	8013552 <__any_on>
 8014996:	4683      	mov	fp, r0
 8014998:	b1b8      	cbz	r0, 80149ca <__gethex+0x1da>
 801499a:	f108 33ff 	add.w	r3, r8, #4294967295
 801499e:	1159      	asrs	r1, r3, #5
 80149a0:	f003 021f 	and.w	r2, r3, #31
 80149a4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80149a8:	f04f 0b01 	mov.w	fp, #1
 80149ac:	fa0b f202 	lsl.w	r2, fp, r2
 80149b0:	420a      	tst	r2, r1
 80149b2:	d00a      	beq.n	80149ca <__gethex+0x1da>
 80149b4:	455b      	cmp	r3, fp
 80149b6:	dd06      	ble.n	80149c6 <__gethex+0x1d6>
 80149b8:	f1a8 0102 	sub.w	r1, r8, #2
 80149bc:	4620      	mov	r0, r4
 80149be:	f7fe fdc8 	bl	8013552 <__any_on>
 80149c2:	2800      	cmp	r0, #0
 80149c4:	d138      	bne.n	8014a38 <__gethex+0x248>
 80149c6:	f04f 0b02 	mov.w	fp, #2
 80149ca:	4641      	mov	r1, r8
 80149cc:	4620      	mov	r0, r4
 80149ce:	f7ff fea7 	bl	8014720 <rshift>
 80149d2:	4446      	add	r6, r8
 80149d4:	68bb      	ldr	r3, [r7, #8]
 80149d6:	42b3      	cmp	r3, r6
 80149d8:	da41      	bge.n	8014a5e <__gethex+0x26e>
 80149da:	4621      	mov	r1, r4
 80149dc:	4648      	mov	r0, r9
 80149de:	f7fe f96f 	bl	8012cc0 <_Bfree>
 80149e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80149e4:	2300      	movs	r3, #0
 80149e6:	6013      	str	r3, [r2, #0]
 80149e8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80149ec:	e78a      	b.n	8014904 <__gethex+0x114>
 80149ee:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80149f2:	2a2e      	cmp	r2, #46	; 0x2e
 80149f4:	d014      	beq.n	8014a20 <__gethex+0x230>
 80149f6:	2b20      	cmp	r3, #32
 80149f8:	d106      	bne.n	8014a08 <__gethex+0x218>
 80149fa:	9b01      	ldr	r3, [sp, #4]
 80149fc:	f843 bb04 	str.w	fp, [r3], #4
 8014a00:	f04f 0b00 	mov.w	fp, #0
 8014a04:	9301      	str	r3, [sp, #4]
 8014a06:	465b      	mov	r3, fp
 8014a08:	7828      	ldrb	r0, [r5, #0]
 8014a0a:	9303      	str	r3, [sp, #12]
 8014a0c:	f7ff feda 	bl	80147c4 <__hexdig_fun>
 8014a10:	9b03      	ldr	r3, [sp, #12]
 8014a12:	f000 000f 	and.w	r0, r0, #15
 8014a16:	4098      	lsls	r0, r3
 8014a18:	ea4b 0b00 	orr.w	fp, fp, r0
 8014a1c:	3304      	adds	r3, #4
 8014a1e:	e7a1      	b.n	8014964 <__gethex+0x174>
 8014a20:	45a8      	cmp	r8, r5
 8014a22:	d8e8      	bhi.n	80149f6 <__gethex+0x206>
 8014a24:	2201      	movs	r2, #1
 8014a26:	4628      	mov	r0, r5
 8014a28:	9303      	str	r3, [sp, #12]
 8014a2a:	f7ff fe29 	bl	8014680 <strncmp>
 8014a2e:	4926      	ldr	r1, [pc, #152]	; (8014ac8 <__gethex+0x2d8>)
 8014a30:	9b03      	ldr	r3, [sp, #12]
 8014a32:	2800      	cmp	r0, #0
 8014a34:	d1df      	bne.n	80149f6 <__gethex+0x206>
 8014a36:	e795      	b.n	8014964 <__gethex+0x174>
 8014a38:	f04f 0b03 	mov.w	fp, #3
 8014a3c:	e7c5      	b.n	80149ca <__gethex+0x1da>
 8014a3e:	da0b      	bge.n	8014a58 <__gethex+0x268>
 8014a40:	eba5 0800 	sub.w	r8, r5, r0
 8014a44:	4621      	mov	r1, r4
 8014a46:	4642      	mov	r2, r8
 8014a48:	4648      	mov	r0, r9
 8014a4a:	f7fe fb53 	bl	80130f4 <__lshift>
 8014a4e:	eba6 0608 	sub.w	r6, r6, r8
 8014a52:	4604      	mov	r4, r0
 8014a54:	f100 0a14 	add.w	sl, r0, #20
 8014a58:	f04f 0b00 	mov.w	fp, #0
 8014a5c:	e7ba      	b.n	80149d4 <__gethex+0x1e4>
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	42b3      	cmp	r3, r6
 8014a62:	dd73      	ble.n	8014b4c <__gethex+0x35c>
 8014a64:	1b9e      	subs	r6, r3, r6
 8014a66:	42b5      	cmp	r5, r6
 8014a68:	dc34      	bgt.n	8014ad4 <__gethex+0x2e4>
 8014a6a:	68fb      	ldr	r3, [r7, #12]
 8014a6c:	2b02      	cmp	r3, #2
 8014a6e:	d023      	beq.n	8014ab8 <__gethex+0x2c8>
 8014a70:	2b03      	cmp	r3, #3
 8014a72:	d025      	beq.n	8014ac0 <__gethex+0x2d0>
 8014a74:	2b01      	cmp	r3, #1
 8014a76:	d115      	bne.n	8014aa4 <__gethex+0x2b4>
 8014a78:	42b5      	cmp	r5, r6
 8014a7a:	d113      	bne.n	8014aa4 <__gethex+0x2b4>
 8014a7c:	2d01      	cmp	r5, #1
 8014a7e:	d10b      	bne.n	8014a98 <__gethex+0x2a8>
 8014a80:	9a02      	ldr	r2, [sp, #8]
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	6013      	str	r3, [r2, #0]
 8014a86:	2301      	movs	r3, #1
 8014a88:	6123      	str	r3, [r4, #16]
 8014a8a:	f8ca 3000 	str.w	r3, [sl]
 8014a8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014a90:	f04f 0862 	mov.w	r8, #98	; 0x62
 8014a94:	601c      	str	r4, [r3, #0]
 8014a96:	e735      	b.n	8014904 <__gethex+0x114>
 8014a98:	1e69      	subs	r1, r5, #1
 8014a9a:	4620      	mov	r0, r4
 8014a9c:	f7fe fd59 	bl	8013552 <__any_on>
 8014aa0:	2800      	cmp	r0, #0
 8014aa2:	d1ed      	bne.n	8014a80 <__gethex+0x290>
 8014aa4:	4621      	mov	r1, r4
 8014aa6:	4648      	mov	r0, r9
 8014aa8:	f7fe f90a 	bl	8012cc0 <_Bfree>
 8014aac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014aae:	2300      	movs	r3, #0
 8014ab0:	6013      	str	r3, [r2, #0]
 8014ab2:	f04f 0850 	mov.w	r8, #80	; 0x50
 8014ab6:	e725      	b.n	8014904 <__gethex+0x114>
 8014ab8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d1f2      	bne.n	8014aa4 <__gethex+0x2b4>
 8014abe:	e7df      	b.n	8014a80 <__gethex+0x290>
 8014ac0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d1dc      	bne.n	8014a80 <__gethex+0x290>
 8014ac6:	e7ed      	b.n	8014aa4 <__gethex+0x2b4>
 8014ac8:	08015744 	.word	0x08015744
 8014acc:	080155dd 	.word	0x080155dd
 8014ad0:	080158ee 	.word	0x080158ee
 8014ad4:	f106 38ff 	add.w	r8, r6, #4294967295
 8014ad8:	f1bb 0f00 	cmp.w	fp, #0
 8014adc:	d133      	bne.n	8014b46 <__gethex+0x356>
 8014ade:	f1b8 0f00 	cmp.w	r8, #0
 8014ae2:	d004      	beq.n	8014aee <__gethex+0x2fe>
 8014ae4:	4641      	mov	r1, r8
 8014ae6:	4620      	mov	r0, r4
 8014ae8:	f7fe fd33 	bl	8013552 <__any_on>
 8014aec:	4683      	mov	fp, r0
 8014aee:	ea4f 1268 	mov.w	r2, r8, asr #5
 8014af2:	2301      	movs	r3, #1
 8014af4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8014af8:	f008 081f 	and.w	r8, r8, #31
 8014afc:	fa03 f308 	lsl.w	r3, r3, r8
 8014b00:	4213      	tst	r3, r2
 8014b02:	4631      	mov	r1, r6
 8014b04:	4620      	mov	r0, r4
 8014b06:	bf18      	it	ne
 8014b08:	f04b 0b02 	orrne.w	fp, fp, #2
 8014b0c:	1bad      	subs	r5, r5, r6
 8014b0e:	f7ff fe07 	bl	8014720 <rshift>
 8014b12:	687e      	ldr	r6, [r7, #4]
 8014b14:	f04f 0802 	mov.w	r8, #2
 8014b18:	f1bb 0f00 	cmp.w	fp, #0
 8014b1c:	d04a      	beq.n	8014bb4 <__gethex+0x3c4>
 8014b1e:	68fb      	ldr	r3, [r7, #12]
 8014b20:	2b02      	cmp	r3, #2
 8014b22:	d016      	beq.n	8014b52 <__gethex+0x362>
 8014b24:	2b03      	cmp	r3, #3
 8014b26:	d018      	beq.n	8014b5a <__gethex+0x36a>
 8014b28:	2b01      	cmp	r3, #1
 8014b2a:	d109      	bne.n	8014b40 <__gethex+0x350>
 8014b2c:	f01b 0f02 	tst.w	fp, #2
 8014b30:	d006      	beq.n	8014b40 <__gethex+0x350>
 8014b32:	f8da 3000 	ldr.w	r3, [sl]
 8014b36:	ea4b 0b03 	orr.w	fp, fp, r3
 8014b3a:	f01b 0f01 	tst.w	fp, #1
 8014b3e:	d10f      	bne.n	8014b60 <__gethex+0x370>
 8014b40:	f048 0810 	orr.w	r8, r8, #16
 8014b44:	e036      	b.n	8014bb4 <__gethex+0x3c4>
 8014b46:	f04f 0b01 	mov.w	fp, #1
 8014b4a:	e7d0      	b.n	8014aee <__gethex+0x2fe>
 8014b4c:	f04f 0801 	mov.w	r8, #1
 8014b50:	e7e2      	b.n	8014b18 <__gethex+0x328>
 8014b52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014b54:	f1c3 0301 	rsb	r3, r3, #1
 8014b58:	930f      	str	r3, [sp, #60]	; 0x3c
 8014b5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	d0ef      	beq.n	8014b40 <__gethex+0x350>
 8014b60:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8014b64:	f104 0214 	add.w	r2, r4, #20
 8014b68:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8014b6c:	9301      	str	r3, [sp, #4]
 8014b6e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8014b72:	2300      	movs	r3, #0
 8014b74:	4694      	mov	ip, r2
 8014b76:	f852 1b04 	ldr.w	r1, [r2], #4
 8014b7a:	f1b1 3fff 	cmp.w	r1, #4294967295
 8014b7e:	d01e      	beq.n	8014bbe <__gethex+0x3ce>
 8014b80:	3101      	adds	r1, #1
 8014b82:	f8cc 1000 	str.w	r1, [ip]
 8014b86:	f1b8 0f02 	cmp.w	r8, #2
 8014b8a:	f104 0214 	add.w	r2, r4, #20
 8014b8e:	d13d      	bne.n	8014c0c <__gethex+0x41c>
 8014b90:	683b      	ldr	r3, [r7, #0]
 8014b92:	3b01      	subs	r3, #1
 8014b94:	42ab      	cmp	r3, r5
 8014b96:	d10b      	bne.n	8014bb0 <__gethex+0x3c0>
 8014b98:	1169      	asrs	r1, r5, #5
 8014b9a:	2301      	movs	r3, #1
 8014b9c:	f005 051f 	and.w	r5, r5, #31
 8014ba0:	fa03 f505 	lsl.w	r5, r3, r5
 8014ba4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014ba8:	421d      	tst	r5, r3
 8014baa:	bf18      	it	ne
 8014bac:	f04f 0801 	movne.w	r8, #1
 8014bb0:	f048 0820 	orr.w	r8, r8, #32
 8014bb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014bb6:	601c      	str	r4, [r3, #0]
 8014bb8:	9b02      	ldr	r3, [sp, #8]
 8014bba:	601e      	str	r6, [r3, #0]
 8014bbc:	e6a2      	b.n	8014904 <__gethex+0x114>
 8014bbe:	4290      	cmp	r0, r2
 8014bc0:	f842 3c04 	str.w	r3, [r2, #-4]
 8014bc4:	d8d6      	bhi.n	8014b74 <__gethex+0x384>
 8014bc6:	68a2      	ldr	r2, [r4, #8]
 8014bc8:	4593      	cmp	fp, r2
 8014bca:	db17      	blt.n	8014bfc <__gethex+0x40c>
 8014bcc:	6861      	ldr	r1, [r4, #4]
 8014bce:	4648      	mov	r0, r9
 8014bd0:	3101      	adds	r1, #1
 8014bd2:	f7fe f835 	bl	8012c40 <_Balloc>
 8014bd6:	4682      	mov	sl, r0
 8014bd8:	b918      	cbnz	r0, 8014be2 <__gethex+0x3f2>
 8014bda:	4b1b      	ldr	r3, [pc, #108]	; (8014c48 <__gethex+0x458>)
 8014bdc:	4602      	mov	r2, r0
 8014bde:	2184      	movs	r1, #132	; 0x84
 8014be0:	e6b3      	b.n	801494a <__gethex+0x15a>
 8014be2:	6922      	ldr	r2, [r4, #16]
 8014be4:	3202      	adds	r2, #2
 8014be6:	f104 010c 	add.w	r1, r4, #12
 8014bea:	0092      	lsls	r2, r2, #2
 8014bec:	300c      	adds	r0, #12
 8014bee:	f7fd f9d1 	bl	8011f94 <memcpy>
 8014bf2:	4621      	mov	r1, r4
 8014bf4:	4648      	mov	r0, r9
 8014bf6:	f7fe f863 	bl	8012cc0 <_Bfree>
 8014bfa:	4654      	mov	r4, sl
 8014bfc:	6922      	ldr	r2, [r4, #16]
 8014bfe:	1c51      	adds	r1, r2, #1
 8014c00:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8014c04:	6121      	str	r1, [r4, #16]
 8014c06:	2101      	movs	r1, #1
 8014c08:	6151      	str	r1, [r2, #20]
 8014c0a:	e7bc      	b.n	8014b86 <__gethex+0x396>
 8014c0c:	6921      	ldr	r1, [r4, #16]
 8014c0e:	4559      	cmp	r1, fp
 8014c10:	dd0b      	ble.n	8014c2a <__gethex+0x43a>
 8014c12:	2101      	movs	r1, #1
 8014c14:	4620      	mov	r0, r4
 8014c16:	f7ff fd83 	bl	8014720 <rshift>
 8014c1a:	68bb      	ldr	r3, [r7, #8]
 8014c1c:	3601      	adds	r6, #1
 8014c1e:	42b3      	cmp	r3, r6
 8014c20:	f6ff aedb 	blt.w	80149da <__gethex+0x1ea>
 8014c24:	f04f 0801 	mov.w	r8, #1
 8014c28:	e7c2      	b.n	8014bb0 <__gethex+0x3c0>
 8014c2a:	f015 051f 	ands.w	r5, r5, #31
 8014c2e:	d0f9      	beq.n	8014c24 <__gethex+0x434>
 8014c30:	9b01      	ldr	r3, [sp, #4]
 8014c32:	441a      	add	r2, r3
 8014c34:	f1c5 0520 	rsb	r5, r5, #32
 8014c38:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8014c3c:	f7fe f8f2 	bl	8012e24 <__hi0bits>
 8014c40:	42a8      	cmp	r0, r5
 8014c42:	dbe6      	blt.n	8014c12 <__gethex+0x422>
 8014c44:	e7ee      	b.n	8014c24 <__gethex+0x434>
 8014c46:	bf00      	nop
 8014c48:	080155dd 	.word	0x080155dd

08014c4c <L_shift>:
 8014c4c:	f1c2 0208 	rsb	r2, r2, #8
 8014c50:	0092      	lsls	r2, r2, #2
 8014c52:	b570      	push	{r4, r5, r6, lr}
 8014c54:	f1c2 0620 	rsb	r6, r2, #32
 8014c58:	6843      	ldr	r3, [r0, #4]
 8014c5a:	6804      	ldr	r4, [r0, #0]
 8014c5c:	fa03 f506 	lsl.w	r5, r3, r6
 8014c60:	432c      	orrs	r4, r5
 8014c62:	40d3      	lsrs	r3, r2
 8014c64:	6004      	str	r4, [r0, #0]
 8014c66:	f840 3f04 	str.w	r3, [r0, #4]!
 8014c6a:	4288      	cmp	r0, r1
 8014c6c:	d3f4      	bcc.n	8014c58 <L_shift+0xc>
 8014c6e:	bd70      	pop	{r4, r5, r6, pc}

08014c70 <__match>:
 8014c70:	b530      	push	{r4, r5, lr}
 8014c72:	6803      	ldr	r3, [r0, #0]
 8014c74:	3301      	adds	r3, #1
 8014c76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014c7a:	b914      	cbnz	r4, 8014c82 <__match+0x12>
 8014c7c:	6003      	str	r3, [r0, #0]
 8014c7e:	2001      	movs	r0, #1
 8014c80:	bd30      	pop	{r4, r5, pc}
 8014c82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014c86:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8014c8a:	2d19      	cmp	r5, #25
 8014c8c:	bf98      	it	ls
 8014c8e:	3220      	addls	r2, #32
 8014c90:	42a2      	cmp	r2, r4
 8014c92:	d0f0      	beq.n	8014c76 <__match+0x6>
 8014c94:	2000      	movs	r0, #0
 8014c96:	e7f3      	b.n	8014c80 <__match+0x10>

08014c98 <__hexnan>:
 8014c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c9c:	680b      	ldr	r3, [r1, #0]
 8014c9e:	6801      	ldr	r1, [r0, #0]
 8014ca0:	115e      	asrs	r6, r3, #5
 8014ca2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8014ca6:	f013 031f 	ands.w	r3, r3, #31
 8014caa:	b087      	sub	sp, #28
 8014cac:	bf18      	it	ne
 8014cae:	3604      	addne	r6, #4
 8014cb0:	2500      	movs	r5, #0
 8014cb2:	1f37      	subs	r7, r6, #4
 8014cb4:	4682      	mov	sl, r0
 8014cb6:	4690      	mov	r8, r2
 8014cb8:	9301      	str	r3, [sp, #4]
 8014cba:	f846 5c04 	str.w	r5, [r6, #-4]
 8014cbe:	46b9      	mov	r9, r7
 8014cc0:	463c      	mov	r4, r7
 8014cc2:	9502      	str	r5, [sp, #8]
 8014cc4:	46ab      	mov	fp, r5
 8014cc6:	784a      	ldrb	r2, [r1, #1]
 8014cc8:	1c4b      	adds	r3, r1, #1
 8014cca:	9303      	str	r3, [sp, #12]
 8014ccc:	b342      	cbz	r2, 8014d20 <__hexnan+0x88>
 8014cce:	4610      	mov	r0, r2
 8014cd0:	9105      	str	r1, [sp, #20]
 8014cd2:	9204      	str	r2, [sp, #16]
 8014cd4:	f7ff fd76 	bl	80147c4 <__hexdig_fun>
 8014cd8:	2800      	cmp	r0, #0
 8014cda:	d14f      	bne.n	8014d7c <__hexnan+0xe4>
 8014cdc:	9a04      	ldr	r2, [sp, #16]
 8014cde:	9905      	ldr	r1, [sp, #20]
 8014ce0:	2a20      	cmp	r2, #32
 8014ce2:	d818      	bhi.n	8014d16 <__hexnan+0x7e>
 8014ce4:	9b02      	ldr	r3, [sp, #8]
 8014ce6:	459b      	cmp	fp, r3
 8014ce8:	dd13      	ble.n	8014d12 <__hexnan+0x7a>
 8014cea:	454c      	cmp	r4, r9
 8014cec:	d206      	bcs.n	8014cfc <__hexnan+0x64>
 8014cee:	2d07      	cmp	r5, #7
 8014cf0:	dc04      	bgt.n	8014cfc <__hexnan+0x64>
 8014cf2:	462a      	mov	r2, r5
 8014cf4:	4649      	mov	r1, r9
 8014cf6:	4620      	mov	r0, r4
 8014cf8:	f7ff ffa8 	bl	8014c4c <L_shift>
 8014cfc:	4544      	cmp	r4, r8
 8014cfe:	d950      	bls.n	8014da2 <__hexnan+0x10a>
 8014d00:	2300      	movs	r3, #0
 8014d02:	f1a4 0904 	sub.w	r9, r4, #4
 8014d06:	f844 3c04 	str.w	r3, [r4, #-4]
 8014d0a:	f8cd b008 	str.w	fp, [sp, #8]
 8014d0e:	464c      	mov	r4, r9
 8014d10:	461d      	mov	r5, r3
 8014d12:	9903      	ldr	r1, [sp, #12]
 8014d14:	e7d7      	b.n	8014cc6 <__hexnan+0x2e>
 8014d16:	2a29      	cmp	r2, #41	; 0x29
 8014d18:	d155      	bne.n	8014dc6 <__hexnan+0x12e>
 8014d1a:	3102      	adds	r1, #2
 8014d1c:	f8ca 1000 	str.w	r1, [sl]
 8014d20:	f1bb 0f00 	cmp.w	fp, #0
 8014d24:	d04f      	beq.n	8014dc6 <__hexnan+0x12e>
 8014d26:	454c      	cmp	r4, r9
 8014d28:	d206      	bcs.n	8014d38 <__hexnan+0xa0>
 8014d2a:	2d07      	cmp	r5, #7
 8014d2c:	dc04      	bgt.n	8014d38 <__hexnan+0xa0>
 8014d2e:	462a      	mov	r2, r5
 8014d30:	4649      	mov	r1, r9
 8014d32:	4620      	mov	r0, r4
 8014d34:	f7ff ff8a 	bl	8014c4c <L_shift>
 8014d38:	4544      	cmp	r4, r8
 8014d3a:	d934      	bls.n	8014da6 <__hexnan+0x10e>
 8014d3c:	f1a8 0204 	sub.w	r2, r8, #4
 8014d40:	4623      	mov	r3, r4
 8014d42:	f853 1b04 	ldr.w	r1, [r3], #4
 8014d46:	f842 1f04 	str.w	r1, [r2, #4]!
 8014d4a:	429f      	cmp	r7, r3
 8014d4c:	d2f9      	bcs.n	8014d42 <__hexnan+0xaa>
 8014d4e:	1b3b      	subs	r3, r7, r4
 8014d50:	f023 0303 	bic.w	r3, r3, #3
 8014d54:	3304      	adds	r3, #4
 8014d56:	3e03      	subs	r6, #3
 8014d58:	3401      	adds	r4, #1
 8014d5a:	42a6      	cmp	r6, r4
 8014d5c:	bf38      	it	cc
 8014d5e:	2304      	movcc	r3, #4
 8014d60:	4443      	add	r3, r8
 8014d62:	2200      	movs	r2, #0
 8014d64:	f843 2b04 	str.w	r2, [r3], #4
 8014d68:	429f      	cmp	r7, r3
 8014d6a:	d2fb      	bcs.n	8014d64 <__hexnan+0xcc>
 8014d6c:	683b      	ldr	r3, [r7, #0]
 8014d6e:	b91b      	cbnz	r3, 8014d78 <__hexnan+0xe0>
 8014d70:	4547      	cmp	r7, r8
 8014d72:	d126      	bne.n	8014dc2 <__hexnan+0x12a>
 8014d74:	2301      	movs	r3, #1
 8014d76:	603b      	str	r3, [r7, #0]
 8014d78:	2005      	movs	r0, #5
 8014d7a:	e025      	b.n	8014dc8 <__hexnan+0x130>
 8014d7c:	3501      	adds	r5, #1
 8014d7e:	2d08      	cmp	r5, #8
 8014d80:	f10b 0b01 	add.w	fp, fp, #1
 8014d84:	dd06      	ble.n	8014d94 <__hexnan+0xfc>
 8014d86:	4544      	cmp	r4, r8
 8014d88:	d9c3      	bls.n	8014d12 <__hexnan+0x7a>
 8014d8a:	2300      	movs	r3, #0
 8014d8c:	f844 3c04 	str.w	r3, [r4, #-4]
 8014d90:	2501      	movs	r5, #1
 8014d92:	3c04      	subs	r4, #4
 8014d94:	6822      	ldr	r2, [r4, #0]
 8014d96:	f000 000f 	and.w	r0, r0, #15
 8014d9a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8014d9e:	6020      	str	r0, [r4, #0]
 8014da0:	e7b7      	b.n	8014d12 <__hexnan+0x7a>
 8014da2:	2508      	movs	r5, #8
 8014da4:	e7b5      	b.n	8014d12 <__hexnan+0x7a>
 8014da6:	9b01      	ldr	r3, [sp, #4]
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d0df      	beq.n	8014d6c <__hexnan+0xd4>
 8014dac:	f1c3 0320 	rsb	r3, r3, #32
 8014db0:	f04f 32ff 	mov.w	r2, #4294967295
 8014db4:	40da      	lsrs	r2, r3
 8014db6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8014dba:	4013      	ands	r3, r2
 8014dbc:	f846 3c04 	str.w	r3, [r6, #-4]
 8014dc0:	e7d4      	b.n	8014d6c <__hexnan+0xd4>
 8014dc2:	3f04      	subs	r7, #4
 8014dc4:	e7d2      	b.n	8014d6c <__hexnan+0xd4>
 8014dc6:	2004      	movs	r0, #4
 8014dc8:	b007      	add	sp, #28
 8014dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014dce <__ascii_mbtowc>:
 8014dce:	b082      	sub	sp, #8
 8014dd0:	b901      	cbnz	r1, 8014dd4 <__ascii_mbtowc+0x6>
 8014dd2:	a901      	add	r1, sp, #4
 8014dd4:	b142      	cbz	r2, 8014de8 <__ascii_mbtowc+0x1a>
 8014dd6:	b14b      	cbz	r3, 8014dec <__ascii_mbtowc+0x1e>
 8014dd8:	7813      	ldrb	r3, [r2, #0]
 8014dda:	600b      	str	r3, [r1, #0]
 8014ddc:	7812      	ldrb	r2, [r2, #0]
 8014dde:	1e10      	subs	r0, r2, #0
 8014de0:	bf18      	it	ne
 8014de2:	2001      	movne	r0, #1
 8014de4:	b002      	add	sp, #8
 8014de6:	4770      	bx	lr
 8014de8:	4610      	mov	r0, r2
 8014dea:	e7fb      	b.n	8014de4 <__ascii_mbtowc+0x16>
 8014dec:	f06f 0001 	mvn.w	r0, #1
 8014df0:	e7f8      	b.n	8014de4 <__ascii_mbtowc+0x16>

08014df2 <_realloc_r>:
 8014df2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014df6:	4680      	mov	r8, r0
 8014df8:	4614      	mov	r4, r2
 8014dfa:	460e      	mov	r6, r1
 8014dfc:	b921      	cbnz	r1, 8014e08 <_realloc_r+0x16>
 8014dfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014e02:	4611      	mov	r1, r2
 8014e04:	f7fb bfce 	b.w	8010da4 <_malloc_r>
 8014e08:	b92a      	cbnz	r2, 8014e16 <_realloc_r+0x24>
 8014e0a:	f7fd fecd 	bl	8012ba8 <_free_r>
 8014e0e:	4625      	mov	r5, r4
 8014e10:	4628      	mov	r0, r5
 8014e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e16:	f000 f842 	bl	8014e9e <_malloc_usable_size_r>
 8014e1a:	4284      	cmp	r4, r0
 8014e1c:	4607      	mov	r7, r0
 8014e1e:	d802      	bhi.n	8014e26 <_realloc_r+0x34>
 8014e20:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014e24:	d812      	bhi.n	8014e4c <_realloc_r+0x5a>
 8014e26:	4621      	mov	r1, r4
 8014e28:	4640      	mov	r0, r8
 8014e2a:	f7fb ffbb 	bl	8010da4 <_malloc_r>
 8014e2e:	4605      	mov	r5, r0
 8014e30:	2800      	cmp	r0, #0
 8014e32:	d0ed      	beq.n	8014e10 <_realloc_r+0x1e>
 8014e34:	42bc      	cmp	r4, r7
 8014e36:	4622      	mov	r2, r4
 8014e38:	4631      	mov	r1, r6
 8014e3a:	bf28      	it	cs
 8014e3c:	463a      	movcs	r2, r7
 8014e3e:	f7fd f8a9 	bl	8011f94 <memcpy>
 8014e42:	4631      	mov	r1, r6
 8014e44:	4640      	mov	r0, r8
 8014e46:	f7fd feaf 	bl	8012ba8 <_free_r>
 8014e4a:	e7e1      	b.n	8014e10 <_realloc_r+0x1e>
 8014e4c:	4635      	mov	r5, r6
 8014e4e:	e7df      	b.n	8014e10 <_realloc_r+0x1e>

08014e50 <__ascii_wctomb>:
 8014e50:	b149      	cbz	r1, 8014e66 <__ascii_wctomb+0x16>
 8014e52:	2aff      	cmp	r2, #255	; 0xff
 8014e54:	bf85      	ittet	hi
 8014e56:	238a      	movhi	r3, #138	; 0x8a
 8014e58:	6003      	strhi	r3, [r0, #0]
 8014e5a:	700a      	strbls	r2, [r1, #0]
 8014e5c:	f04f 30ff 	movhi.w	r0, #4294967295
 8014e60:	bf98      	it	ls
 8014e62:	2001      	movls	r0, #1
 8014e64:	4770      	bx	lr
 8014e66:	4608      	mov	r0, r1
 8014e68:	4770      	bx	lr
	...

08014e6c <fiprintf>:
 8014e6c:	b40e      	push	{r1, r2, r3}
 8014e6e:	b503      	push	{r0, r1, lr}
 8014e70:	4601      	mov	r1, r0
 8014e72:	ab03      	add	r3, sp, #12
 8014e74:	4805      	ldr	r0, [pc, #20]	; (8014e8c <fiprintf+0x20>)
 8014e76:	f853 2b04 	ldr.w	r2, [r3], #4
 8014e7a:	6800      	ldr	r0, [r0, #0]
 8014e7c:	9301      	str	r3, [sp, #4]
 8014e7e:	f000 f83f 	bl	8014f00 <_vfiprintf_r>
 8014e82:	b002      	add	sp, #8
 8014e84:	f85d eb04 	ldr.w	lr, [sp], #4
 8014e88:	b003      	add	sp, #12
 8014e8a:	4770      	bx	lr
 8014e8c:	2400006c 	.word	0x2400006c

08014e90 <abort>:
 8014e90:	b508      	push	{r3, lr}
 8014e92:	2006      	movs	r0, #6
 8014e94:	f000 fa0c 	bl	80152b0 <raise>
 8014e98:	2001      	movs	r0, #1
 8014e9a:	f7ed fcaf 	bl	80027fc <_exit>

08014e9e <_malloc_usable_size_r>:
 8014e9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014ea2:	1f18      	subs	r0, r3, #4
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	bfbc      	itt	lt
 8014ea8:	580b      	ldrlt	r3, [r1, r0]
 8014eaa:	18c0      	addlt	r0, r0, r3
 8014eac:	4770      	bx	lr

08014eae <__sfputc_r>:
 8014eae:	6893      	ldr	r3, [r2, #8]
 8014eb0:	3b01      	subs	r3, #1
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	b410      	push	{r4}
 8014eb6:	6093      	str	r3, [r2, #8]
 8014eb8:	da08      	bge.n	8014ecc <__sfputc_r+0x1e>
 8014eba:	6994      	ldr	r4, [r2, #24]
 8014ebc:	42a3      	cmp	r3, r4
 8014ebe:	db01      	blt.n	8014ec4 <__sfputc_r+0x16>
 8014ec0:	290a      	cmp	r1, #10
 8014ec2:	d103      	bne.n	8014ecc <__sfputc_r+0x1e>
 8014ec4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014ec8:	f000 b934 	b.w	8015134 <__swbuf_r>
 8014ecc:	6813      	ldr	r3, [r2, #0]
 8014ece:	1c58      	adds	r0, r3, #1
 8014ed0:	6010      	str	r0, [r2, #0]
 8014ed2:	7019      	strb	r1, [r3, #0]
 8014ed4:	4608      	mov	r0, r1
 8014ed6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014eda:	4770      	bx	lr

08014edc <__sfputs_r>:
 8014edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ede:	4606      	mov	r6, r0
 8014ee0:	460f      	mov	r7, r1
 8014ee2:	4614      	mov	r4, r2
 8014ee4:	18d5      	adds	r5, r2, r3
 8014ee6:	42ac      	cmp	r4, r5
 8014ee8:	d101      	bne.n	8014eee <__sfputs_r+0x12>
 8014eea:	2000      	movs	r0, #0
 8014eec:	e007      	b.n	8014efe <__sfputs_r+0x22>
 8014eee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ef2:	463a      	mov	r2, r7
 8014ef4:	4630      	mov	r0, r6
 8014ef6:	f7ff ffda 	bl	8014eae <__sfputc_r>
 8014efa:	1c43      	adds	r3, r0, #1
 8014efc:	d1f3      	bne.n	8014ee6 <__sfputs_r+0xa>
 8014efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014f00 <_vfiprintf_r>:
 8014f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f04:	460d      	mov	r5, r1
 8014f06:	b09d      	sub	sp, #116	; 0x74
 8014f08:	4614      	mov	r4, r2
 8014f0a:	4698      	mov	r8, r3
 8014f0c:	4606      	mov	r6, r0
 8014f0e:	b118      	cbz	r0, 8014f18 <_vfiprintf_r+0x18>
 8014f10:	6a03      	ldr	r3, [r0, #32]
 8014f12:	b90b      	cbnz	r3, 8014f18 <_vfiprintf_r+0x18>
 8014f14:	f7fc fe8c 	bl	8011c30 <__sinit>
 8014f18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014f1a:	07d9      	lsls	r1, r3, #31
 8014f1c:	d405      	bmi.n	8014f2a <_vfiprintf_r+0x2a>
 8014f1e:	89ab      	ldrh	r3, [r5, #12]
 8014f20:	059a      	lsls	r2, r3, #22
 8014f22:	d402      	bmi.n	8014f2a <_vfiprintf_r+0x2a>
 8014f24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014f26:	f7fd f833 	bl	8011f90 <__retarget_lock_acquire_recursive>
 8014f2a:	89ab      	ldrh	r3, [r5, #12]
 8014f2c:	071b      	lsls	r3, r3, #28
 8014f2e:	d501      	bpl.n	8014f34 <_vfiprintf_r+0x34>
 8014f30:	692b      	ldr	r3, [r5, #16]
 8014f32:	b99b      	cbnz	r3, 8014f5c <_vfiprintf_r+0x5c>
 8014f34:	4629      	mov	r1, r5
 8014f36:	4630      	mov	r0, r6
 8014f38:	f000 f93a 	bl	80151b0 <__swsetup_r>
 8014f3c:	b170      	cbz	r0, 8014f5c <_vfiprintf_r+0x5c>
 8014f3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014f40:	07dc      	lsls	r4, r3, #31
 8014f42:	d504      	bpl.n	8014f4e <_vfiprintf_r+0x4e>
 8014f44:	f04f 30ff 	mov.w	r0, #4294967295
 8014f48:	b01d      	add	sp, #116	; 0x74
 8014f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f4e:	89ab      	ldrh	r3, [r5, #12]
 8014f50:	0598      	lsls	r0, r3, #22
 8014f52:	d4f7      	bmi.n	8014f44 <_vfiprintf_r+0x44>
 8014f54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014f56:	f7fd f81c 	bl	8011f92 <__retarget_lock_release_recursive>
 8014f5a:	e7f3      	b.n	8014f44 <_vfiprintf_r+0x44>
 8014f5c:	2300      	movs	r3, #0
 8014f5e:	9309      	str	r3, [sp, #36]	; 0x24
 8014f60:	2320      	movs	r3, #32
 8014f62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014f66:	f8cd 800c 	str.w	r8, [sp, #12]
 8014f6a:	2330      	movs	r3, #48	; 0x30
 8014f6c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8015120 <_vfiprintf_r+0x220>
 8014f70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014f74:	f04f 0901 	mov.w	r9, #1
 8014f78:	4623      	mov	r3, r4
 8014f7a:	469a      	mov	sl, r3
 8014f7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014f80:	b10a      	cbz	r2, 8014f86 <_vfiprintf_r+0x86>
 8014f82:	2a25      	cmp	r2, #37	; 0x25
 8014f84:	d1f9      	bne.n	8014f7a <_vfiprintf_r+0x7a>
 8014f86:	ebba 0b04 	subs.w	fp, sl, r4
 8014f8a:	d00b      	beq.n	8014fa4 <_vfiprintf_r+0xa4>
 8014f8c:	465b      	mov	r3, fp
 8014f8e:	4622      	mov	r2, r4
 8014f90:	4629      	mov	r1, r5
 8014f92:	4630      	mov	r0, r6
 8014f94:	f7ff ffa2 	bl	8014edc <__sfputs_r>
 8014f98:	3001      	adds	r0, #1
 8014f9a:	f000 80a9 	beq.w	80150f0 <_vfiprintf_r+0x1f0>
 8014f9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014fa0:	445a      	add	r2, fp
 8014fa2:	9209      	str	r2, [sp, #36]	; 0x24
 8014fa4:	f89a 3000 	ldrb.w	r3, [sl]
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	f000 80a1 	beq.w	80150f0 <_vfiprintf_r+0x1f0>
 8014fae:	2300      	movs	r3, #0
 8014fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8014fb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014fb8:	f10a 0a01 	add.w	sl, sl, #1
 8014fbc:	9304      	str	r3, [sp, #16]
 8014fbe:	9307      	str	r3, [sp, #28]
 8014fc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014fc4:	931a      	str	r3, [sp, #104]	; 0x68
 8014fc6:	4654      	mov	r4, sl
 8014fc8:	2205      	movs	r2, #5
 8014fca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014fce:	4854      	ldr	r0, [pc, #336]	; (8015120 <_vfiprintf_r+0x220>)
 8014fd0:	f7eb f986 	bl	80002e0 <memchr>
 8014fd4:	9a04      	ldr	r2, [sp, #16]
 8014fd6:	b9d8      	cbnz	r0, 8015010 <_vfiprintf_r+0x110>
 8014fd8:	06d1      	lsls	r1, r2, #27
 8014fda:	bf44      	itt	mi
 8014fdc:	2320      	movmi	r3, #32
 8014fde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014fe2:	0713      	lsls	r3, r2, #28
 8014fe4:	bf44      	itt	mi
 8014fe6:	232b      	movmi	r3, #43	; 0x2b
 8014fe8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014fec:	f89a 3000 	ldrb.w	r3, [sl]
 8014ff0:	2b2a      	cmp	r3, #42	; 0x2a
 8014ff2:	d015      	beq.n	8015020 <_vfiprintf_r+0x120>
 8014ff4:	9a07      	ldr	r2, [sp, #28]
 8014ff6:	4654      	mov	r4, sl
 8014ff8:	2000      	movs	r0, #0
 8014ffa:	f04f 0c0a 	mov.w	ip, #10
 8014ffe:	4621      	mov	r1, r4
 8015000:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015004:	3b30      	subs	r3, #48	; 0x30
 8015006:	2b09      	cmp	r3, #9
 8015008:	d94d      	bls.n	80150a6 <_vfiprintf_r+0x1a6>
 801500a:	b1b0      	cbz	r0, 801503a <_vfiprintf_r+0x13a>
 801500c:	9207      	str	r2, [sp, #28]
 801500e:	e014      	b.n	801503a <_vfiprintf_r+0x13a>
 8015010:	eba0 0308 	sub.w	r3, r0, r8
 8015014:	fa09 f303 	lsl.w	r3, r9, r3
 8015018:	4313      	orrs	r3, r2
 801501a:	9304      	str	r3, [sp, #16]
 801501c:	46a2      	mov	sl, r4
 801501e:	e7d2      	b.n	8014fc6 <_vfiprintf_r+0xc6>
 8015020:	9b03      	ldr	r3, [sp, #12]
 8015022:	1d19      	adds	r1, r3, #4
 8015024:	681b      	ldr	r3, [r3, #0]
 8015026:	9103      	str	r1, [sp, #12]
 8015028:	2b00      	cmp	r3, #0
 801502a:	bfbb      	ittet	lt
 801502c:	425b      	neglt	r3, r3
 801502e:	f042 0202 	orrlt.w	r2, r2, #2
 8015032:	9307      	strge	r3, [sp, #28]
 8015034:	9307      	strlt	r3, [sp, #28]
 8015036:	bfb8      	it	lt
 8015038:	9204      	strlt	r2, [sp, #16]
 801503a:	7823      	ldrb	r3, [r4, #0]
 801503c:	2b2e      	cmp	r3, #46	; 0x2e
 801503e:	d10c      	bne.n	801505a <_vfiprintf_r+0x15a>
 8015040:	7863      	ldrb	r3, [r4, #1]
 8015042:	2b2a      	cmp	r3, #42	; 0x2a
 8015044:	d134      	bne.n	80150b0 <_vfiprintf_r+0x1b0>
 8015046:	9b03      	ldr	r3, [sp, #12]
 8015048:	1d1a      	adds	r2, r3, #4
 801504a:	681b      	ldr	r3, [r3, #0]
 801504c:	9203      	str	r2, [sp, #12]
 801504e:	2b00      	cmp	r3, #0
 8015050:	bfb8      	it	lt
 8015052:	f04f 33ff 	movlt.w	r3, #4294967295
 8015056:	3402      	adds	r4, #2
 8015058:	9305      	str	r3, [sp, #20]
 801505a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8015130 <_vfiprintf_r+0x230>
 801505e:	7821      	ldrb	r1, [r4, #0]
 8015060:	2203      	movs	r2, #3
 8015062:	4650      	mov	r0, sl
 8015064:	f7eb f93c 	bl	80002e0 <memchr>
 8015068:	b138      	cbz	r0, 801507a <_vfiprintf_r+0x17a>
 801506a:	9b04      	ldr	r3, [sp, #16]
 801506c:	eba0 000a 	sub.w	r0, r0, sl
 8015070:	2240      	movs	r2, #64	; 0x40
 8015072:	4082      	lsls	r2, r0
 8015074:	4313      	orrs	r3, r2
 8015076:	3401      	adds	r4, #1
 8015078:	9304      	str	r3, [sp, #16]
 801507a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801507e:	4829      	ldr	r0, [pc, #164]	; (8015124 <_vfiprintf_r+0x224>)
 8015080:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015084:	2206      	movs	r2, #6
 8015086:	f7eb f92b 	bl	80002e0 <memchr>
 801508a:	2800      	cmp	r0, #0
 801508c:	d03f      	beq.n	801510e <_vfiprintf_r+0x20e>
 801508e:	4b26      	ldr	r3, [pc, #152]	; (8015128 <_vfiprintf_r+0x228>)
 8015090:	bb1b      	cbnz	r3, 80150da <_vfiprintf_r+0x1da>
 8015092:	9b03      	ldr	r3, [sp, #12]
 8015094:	3307      	adds	r3, #7
 8015096:	f023 0307 	bic.w	r3, r3, #7
 801509a:	3308      	adds	r3, #8
 801509c:	9303      	str	r3, [sp, #12]
 801509e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150a0:	443b      	add	r3, r7
 80150a2:	9309      	str	r3, [sp, #36]	; 0x24
 80150a4:	e768      	b.n	8014f78 <_vfiprintf_r+0x78>
 80150a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80150aa:	460c      	mov	r4, r1
 80150ac:	2001      	movs	r0, #1
 80150ae:	e7a6      	b.n	8014ffe <_vfiprintf_r+0xfe>
 80150b0:	2300      	movs	r3, #0
 80150b2:	3401      	adds	r4, #1
 80150b4:	9305      	str	r3, [sp, #20]
 80150b6:	4619      	mov	r1, r3
 80150b8:	f04f 0c0a 	mov.w	ip, #10
 80150bc:	4620      	mov	r0, r4
 80150be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80150c2:	3a30      	subs	r2, #48	; 0x30
 80150c4:	2a09      	cmp	r2, #9
 80150c6:	d903      	bls.n	80150d0 <_vfiprintf_r+0x1d0>
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	d0c6      	beq.n	801505a <_vfiprintf_r+0x15a>
 80150cc:	9105      	str	r1, [sp, #20]
 80150ce:	e7c4      	b.n	801505a <_vfiprintf_r+0x15a>
 80150d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80150d4:	4604      	mov	r4, r0
 80150d6:	2301      	movs	r3, #1
 80150d8:	e7f0      	b.n	80150bc <_vfiprintf_r+0x1bc>
 80150da:	ab03      	add	r3, sp, #12
 80150dc:	9300      	str	r3, [sp, #0]
 80150de:	462a      	mov	r2, r5
 80150e0:	4b12      	ldr	r3, [pc, #72]	; (801512c <_vfiprintf_r+0x22c>)
 80150e2:	a904      	add	r1, sp, #16
 80150e4:	4630      	mov	r0, r6
 80150e6:	f7fb ff7b 	bl	8010fe0 <_printf_float>
 80150ea:	4607      	mov	r7, r0
 80150ec:	1c78      	adds	r0, r7, #1
 80150ee:	d1d6      	bne.n	801509e <_vfiprintf_r+0x19e>
 80150f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80150f2:	07d9      	lsls	r1, r3, #31
 80150f4:	d405      	bmi.n	8015102 <_vfiprintf_r+0x202>
 80150f6:	89ab      	ldrh	r3, [r5, #12]
 80150f8:	059a      	lsls	r2, r3, #22
 80150fa:	d402      	bmi.n	8015102 <_vfiprintf_r+0x202>
 80150fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80150fe:	f7fc ff48 	bl	8011f92 <__retarget_lock_release_recursive>
 8015102:	89ab      	ldrh	r3, [r5, #12]
 8015104:	065b      	lsls	r3, r3, #25
 8015106:	f53f af1d 	bmi.w	8014f44 <_vfiprintf_r+0x44>
 801510a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801510c:	e71c      	b.n	8014f48 <_vfiprintf_r+0x48>
 801510e:	ab03      	add	r3, sp, #12
 8015110:	9300      	str	r3, [sp, #0]
 8015112:	462a      	mov	r2, r5
 8015114:	4b05      	ldr	r3, [pc, #20]	; (801512c <_vfiprintf_r+0x22c>)
 8015116:	a904      	add	r1, sp, #16
 8015118:	4630      	mov	r0, r6
 801511a:	f7fc f9e9 	bl	80114f0 <_printf_i>
 801511e:	e7e4      	b.n	80150ea <_vfiprintf_r+0x1ea>
 8015120:	08015899 	.word	0x08015899
 8015124:	080158a3 	.word	0x080158a3
 8015128:	08010fe1 	.word	0x08010fe1
 801512c:	08014edd 	.word	0x08014edd
 8015130:	0801589f 	.word	0x0801589f

08015134 <__swbuf_r>:
 8015134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015136:	460e      	mov	r6, r1
 8015138:	4614      	mov	r4, r2
 801513a:	4605      	mov	r5, r0
 801513c:	b118      	cbz	r0, 8015146 <__swbuf_r+0x12>
 801513e:	6a03      	ldr	r3, [r0, #32]
 8015140:	b90b      	cbnz	r3, 8015146 <__swbuf_r+0x12>
 8015142:	f7fc fd75 	bl	8011c30 <__sinit>
 8015146:	69a3      	ldr	r3, [r4, #24]
 8015148:	60a3      	str	r3, [r4, #8]
 801514a:	89a3      	ldrh	r3, [r4, #12]
 801514c:	071a      	lsls	r2, r3, #28
 801514e:	d525      	bpl.n	801519c <__swbuf_r+0x68>
 8015150:	6923      	ldr	r3, [r4, #16]
 8015152:	b31b      	cbz	r3, 801519c <__swbuf_r+0x68>
 8015154:	6823      	ldr	r3, [r4, #0]
 8015156:	6922      	ldr	r2, [r4, #16]
 8015158:	1a98      	subs	r0, r3, r2
 801515a:	6963      	ldr	r3, [r4, #20]
 801515c:	b2f6      	uxtb	r6, r6
 801515e:	4283      	cmp	r3, r0
 8015160:	4637      	mov	r7, r6
 8015162:	dc04      	bgt.n	801516e <__swbuf_r+0x3a>
 8015164:	4621      	mov	r1, r4
 8015166:	4628      	mov	r0, r5
 8015168:	f7ff fa48 	bl	80145fc <_fflush_r>
 801516c:	b9e0      	cbnz	r0, 80151a8 <__swbuf_r+0x74>
 801516e:	68a3      	ldr	r3, [r4, #8]
 8015170:	3b01      	subs	r3, #1
 8015172:	60a3      	str	r3, [r4, #8]
 8015174:	6823      	ldr	r3, [r4, #0]
 8015176:	1c5a      	adds	r2, r3, #1
 8015178:	6022      	str	r2, [r4, #0]
 801517a:	701e      	strb	r6, [r3, #0]
 801517c:	6962      	ldr	r2, [r4, #20]
 801517e:	1c43      	adds	r3, r0, #1
 8015180:	429a      	cmp	r2, r3
 8015182:	d004      	beq.n	801518e <__swbuf_r+0x5a>
 8015184:	89a3      	ldrh	r3, [r4, #12]
 8015186:	07db      	lsls	r3, r3, #31
 8015188:	d506      	bpl.n	8015198 <__swbuf_r+0x64>
 801518a:	2e0a      	cmp	r6, #10
 801518c:	d104      	bne.n	8015198 <__swbuf_r+0x64>
 801518e:	4621      	mov	r1, r4
 8015190:	4628      	mov	r0, r5
 8015192:	f7ff fa33 	bl	80145fc <_fflush_r>
 8015196:	b938      	cbnz	r0, 80151a8 <__swbuf_r+0x74>
 8015198:	4638      	mov	r0, r7
 801519a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801519c:	4621      	mov	r1, r4
 801519e:	4628      	mov	r0, r5
 80151a0:	f000 f806 	bl	80151b0 <__swsetup_r>
 80151a4:	2800      	cmp	r0, #0
 80151a6:	d0d5      	beq.n	8015154 <__swbuf_r+0x20>
 80151a8:	f04f 37ff 	mov.w	r7, #4294967295
 80151ac:	e7f4      	b.n	8015198 <__swbuf_r+0x64>
	...

080151b0 <__swsetup_r>:
 80151b0:	b538      	push	{r3, r4, r5, lr}
 80151b2:	4b2a      	ldr	r3, [pc, #168]	; (801525c <__swsetup_r+0xac>)
 80151b4:	4605      	mov	r5, r0
 80151b6:	6818      	ldr	r0, [r3, #0]
 80151b8:	460c      	mov	r4, r1
 80151ba:	b118      	cbz	r0, 80151c4 <__swsetup_r+0x14>
 80151bc:	6a03      	ldr	r3, [r0, #32]
 80151be:	b90b      	cbnz	r3, 80151c4 <__swsetup_r+0x14>
 80151c0:	f7fc fd36 	bl	8011c30 <__sinit>
 80151c4:	89a3      	ldrh	r3, [r4, #12]
 80151c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80151ca:	0718      	lsls	r0, r3, #28
 80151cc:	d422      	bmi.n	8015214 <__swsetup_r+0x64>
 80151ce:	06d9      	lsls	r1, r3, #27
 80151d0:	d407      	bmi.n	80151e2 <__swsetup_r+0x32>
 80151d2:	2309      	movs	r3, #9
 80151d4:	602b      	str	r3, [r5, #0]
 80151d6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80151da:	81a3      	strh	r3, [r4, #12]
 80151dc:	f04f 30ff 	mov.w	r0, #4294967295
 80151e0:	e034      	b.n	801524c <__swsetup_r+0x9c>
 80151e2:	0758      	lsls	r0, r3, #29
 80151e4:	d512      	bpl.n	801520c <__swsetup_r+0x5c>
 80151e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80151e8:	b141      	cbz	r1, 80151fc <__swsetup_r+0x4c>
 80151ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80151ee:	4299      	cmp	r1, r3
 80151f0:	d002      	beq.n	80151f8 <__swsetup_r+0x48>
 80151f2:	4628      	mov	r0, r5
 80151f4:	f7fd fcd8 	bl	8012ba8 <_free_r>
 80151f8:	2300      	movs	r3, #0
 80151fa:	6363      	str	r3, [r4, #52]	; 0x34
 80151fc:	89a3      	ldrh	r3, [r4, #12]
 80151fe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015202:	81a3      	strh	r3, [r4, #12]
 8015204:	2300      	movs	r3, #0
 8015206:	6063      	str	r3, [r4, #4]
 8015208:	6923      	ldr	r3, [r4, #16]
 801520a:	6023      	str	r3, [r4, #0]
 801520c:	89a3      	ldrh	r3, [r4, #12]
 801520e:	f043 0308 	orr.w	r3, r3, #8
 8015212:	81a3      	strh	r3, [r4, #12]
 8015214:	6923      	ldr	r3, [r4, #16]
 8015216:	b94b      	cbnz	r3, 801522c <__swsetup_r+0x7c>
 8015218:	89a3      	ldrh	r3, [r4, #12]
 801521a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801521e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015222:	d003      	beq.n	801522c <__swsetup_r+0x7c>
 8015224:	4621      	mov	r1, r4
 8015226:	4628      	mov	r0, r5
 8015228:	f000 f884 	bl	8015334 <__smakebuf_r>
 801522c:	89a0      	ldrh	r0, [r4, #12]
 801522e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015232:	f010 0301 	ands.w	r3, r0, #1
 8015236:	d00a      	beq.n	801524e <__swsetup_r+0x9e>
 8015238:	2300      	movs	r3, #0
 801523a:	60a3      	str	r3, [r4, #8]
 801523c:	6963      	ldr	r3, [r4, #20]
 801523e:	425b      	negs	r3, r3
 8015240:	61a3      	str	r3, [r4, #24]
 8015242:	6923      	ldr	r3, [r4, #16]
 8015244:	b943      	cbnz	r3, 8015258 <__swsetup_r+0xa8>
 8015246:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801524a:	d1c4      	bne.n	80151d6 <__swsetup_r+0x26>
 801524c:	bd38      	pop	{r3, r4, r5, pc}
 801524e:	0781      	lsls	r1, r0, #30
 8015250:	bf58      	it	pl
 8015252:	6963      	ldrpl	r3, [r4, #20]
 8015254:	60a3      	str	r3, [r4, #8]
 8015256:	e7f4      	b.n	8015242 <__swsetup_r+0x92>
 8015258:	2000      	movs	r0, #0
 801525a:	e7f7      	b.n	801524c <__swsetup_r+0x9c>
 801525c:	2400006c 	.word	0x2400006c

08015260 <_raise_r>:
 8015260:	291f      	cmp	r1, #31
 8015262:	b538      	push	{r3, r4, r5, lr}
 8015264:	4604      	mov	r4, r0
 8015266:	460d      	mov	r5, r1
 8015268:	d904      	bls.n	8015274 <_raise_r+0x14>
 801526a:	2316      	movs	r3, #22
 801526c:	6003      	str	r3, [r0, #0]
 801526e:	f04f 30ff 	mov.w	r0, #4294967295
 8015272:	bd38      	pop	{r3, r4, r5, pc}
 8015274:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8015276:	b112      	cbz	r2, 801527e <_raise_r+0x1e>
 8015278:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801527c:	b94b      	cbnz	r3, 8015292 <_raise_r+0x32>
 801527e:	4620      	mov	r0, r4
 8015280:	f000 f830 	bl	80152e4 <_getpid_r>
 8015284:	462a      	mov	r2, r5
 8015286:	4601      	mov	r1, r0
 8015288:	4620      	mov	r0, r4
 801528a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801528e:	f000 b817 	b.w	80152c0 <_kill_r>
 8015292:	2b01      	cmp	r3, #1
 8015294:	d00a      	beq.n	80152ac <_raise_r+0x4c>
 8015296:	1c59      	adds	r1, r3, #1
 8015298:	d103      	bne.n	80152a2 <_raise_r+0x42>
 801529a:	2316      	movs	r3, #22
 801529c:	6003      	str	r3, [r0, #0]
 801529e:	2001      	movs	r0, #1
 80152a0:	e7e7      	b.n	8015272 <_raise_r+0x12>
 80152a2:	2400      	movs	r4, #0
 80152a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80152a8:	4628      	mov	r0, r5
 80152aa:	4798      	blx	r3
 80152ac:	2000      	movs	r0, #0
 80152ae:	e7e0      	b.n	8015272 <_raise_r+0x12>

080152b0 <raise>:
 80152b0:	4b02      	ldr	r3, [pc, #8]	; (80152bc <raise+0xc>)
 80152b2:	4601      	mov	r1, r0
 80152b4:	6818      	ldr	r0, [r3, #0]
 80152b6:	f7ff bfd3 	b.w	8015260 <_raise_r>
 80152ba:	bf00      	nop
 80152bc:	2400006c 	.word	0x2400006c

080152c0 <_kill_r>:
 80152c0:	b538      	push	{r3, r4, r5, lr}
 80152c2:	4d07      	ldr	r5, [pc, #28]	; (80152e0 <_kill_r+0x20>)
 80152c4:	2300      	movs	r3, #0
 80152c6:	4604      	mov	r4, r0
 80152c8:	4608      	mov	r0, r1
 80152ca:	4611      	mov	r1, r2
 80152cc:	602b      	str	r3, [r5, #0]
 80152ce:	f7ed fa85 	bl	80027dc <_kill>
 80152d2:	1c43      	adds	r3, r0, #1
 80152d4:	d102      	bne.n	80152dc <_kill_r+0x1c>
 80152d6:	682b      	ldr	r3, [r5, #0]
 80152d8:	b103      	cbz	r3, 80152dc <_kill_r+0x1c>
 80152da:	6023      	str	r3, [r4, #0]
 80152dc:	bd38      	pop	{r3, r4, r5, pc}
 80152de:	bf00      	nop
 80152e0:	240056b4 	.word	0x240056b4

080152e4 <_getpid_r>:
 80152e4:	f7ed ba72 	b.w	80027cc <_getpid>

080152e8 <__swhatbuf_r>:
 80152e8:	b570      	push	{r4, r5, r6, lr}
 80152ea:	460c      	mov	r4, r1
 80152ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80152f0:	2900      	cmp	r1, #0
 80152f2:	b096      	sub	sp, #88	; 0x58
 80152f4:	4615      	mov	r5, r2
 80152f6:	461e      	mov	r6, r3
 80152f8:	da0d      	bge.n	8015316 <__swhatbuf_r+0x2e>
 80152fa:	89a3      	ldrh	r3, [r4, #12]
 80152fc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8015300:	f04f 0100 	mov.w	r1, #0
 8015304:	bf0c      	ite	eq
 8015306:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801530a:	2340      	movne	r3, #64	; 0x40
 801530c:	2000      	movs	r0, #0
 801530e:	6031      	str	r1, [r6, #0]
 8015310:	602b      	str	r3, [r5, #0]
 8015312:	b016      	add	sp, #88	; 0x58
 8015314:	bd70      	pop	{r4, r5, r6, pc}
 8015316:	466a      	mov	r2, sp
 8015318:	f000 f848 	bl	80153ac <_fstat_r>
 801531c:	2800      	cmp	r0, #0
 801531e:	dbec      	blt.n	80152fa <__swhatbuf_r+0x12>
 8015320:	9901      	ldr	r1, [sp, #4]
 8015322:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8015326:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801532a:	4259      	negs	r1, r3
 801532c:	4159      	adcs	r1, r3
 801532e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015332:	e7eb      	b.n	801530c <__swhatbuf_r+0x24>

08015334 <__smakebuf_r>:
 8015334:	898b      	ldrh	r3, [r1, #12]
 8015336:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015338:	079d      	lsls	r5, r3, #30
 801533a:	4606      	mov	r6, r0
 801533c:	460c      	mov	r4, r1
 801533e:	d507      	bpl.n	8015350 <__smakebuf_r+0x1c>
 8015340:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015344:	6023      	str	r3, [r4, #0]
 8015346:	6123      	str	r3, [r4, #16]
 8015348:	2301      	movs	r3, #1
 801534a:	6163      	str	r3, [r4, #20]
 801534c:	b002      	add	sp, #8
 801534e:	bd70      	pop	{r4, r5, r6, pc}
 8015350:	ab01      	add	r3, sp, #4
 8015352:	466a      	mov	r2, sp
 8015354:	f7ff ffc8 	bl	80152e8 <__swhatbuf_r>
 8015358:	9900      	ldr	r1, [sp, #0]
 801535a:	4605      	mov	r5, r0
 801535c:	4630      	mov	r0, r6
 801535e:	f7fb fd21 	bl	8010da4 <_malloc_r>
 8015362:	b948      	cbnz	r0, 8015378 <__smakebuf_r+0x44>
 8015364:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015368:	059a      	lsls	r2, r3, #22
 801536a:	d4ef      	bmi.n	801534c <__smakebuf_r+0x18>
 801536c:	f023 0303 	bic.w	r3, r3, #3
 8015370:	f043 0302 	orr.w	r3, r3, #2
 8015374:	81a3      	strh	r3, [r4, #12]
 8015376:	e7e3      	b.n	8015340 <__smakebuf_r+0xc>
 8015378:	89a3      	ldrh	r3, [r4, #12]
 801537a:	6020      	str	r0, [r4, #0]
 801537c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015380:	81a3      	strh	r3, [r4, #12]
 8015382:	9b00      	ldr	r3, [sp, #0]
 8015384:	6163      	str	r3, [r4, #20]
 8015386:	9b01      	ldr	r3, [sp, #4]
 8015388:	6120      	str	r0, [r4, #16]
 801538a:	b15b      	cbz	r3, 80153a4 <__smakebuf_r+0x70>
 801538c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015390:	4630      	mov	r0, r6
 8015392:	f000 f81d 	bl	80153d0 <_isatty_r>
 8015396:	b128      	cbz	r0, 80153a4 <__smakebuf_r+0x70>
 8015398:	89a3      	ldrh	r3, [r4, #12]
 801539a:	f023 0303 	bic.w	r3, r3, #3
 801539e:	f043 0301 	orr.w	r3, r3, #1
 80153a2:	81a3      	strh	r3, [r4, #12]
 80153a4:	89a3      	ldrh	r3, [r4, #12]
 80153a6:	431d      	orrs	r5, r3
 80153a8:	81a5      	strh	r5, [r4, #12]
 80153aa:	e7cf      	b.n	801534c <__smakebuf_r+0x18>

080153ac <_fstat_r>:
 80153ac:	b538      	push	{r3, r4, r5, lr}
 80153ae:	4d07      	ldr	r5, [pc, #28]	; (80153cc <_fstat_r+0x20>)
 80153b0:	2300      	movs	r3, #0
 80153b2:	4604      	mov	r4, r0
 80153b4:	4608      	mov	r0, r1
 80153b6:	4611      	mov	r1, r2
 80153b8:	602b      	str	r3, [r5, #0]
 80153ba:	f7ed fa6e 	bl	800289a <_fstat>
 80153be:	1c43      	adds	r3, r0, #1
 80153c0:	d102      	bne.n	80153c8 <_fstat_r+0x1c>
 80153c2:	682b      	ldr	r3, [r5, #0]
 80153c4:	b103      	cbz	r3, 80153c8 <_fstat_r+0x1c>
 80153c6:	6023      	str	r3, [r4, #0]
 80153c8:	bd38      	pop	{r3, r4, r5, pc}
 80153ca:	bf00      	nop
 80153cc:	240056b4 	.word	0x240056b4

080153d0 <_isatty_r>:
 80153d0:	b538      	push	{r3, r4, r5, lr}
 80153d2:	4d06      	ldr	r5, [pc, #24]	; (80153ec <_isatty_r+0x1c>)
 80153d4:	2300      	movs	r3, #0
 80153d6:	4604      	mov	r4, r0
 80153d8:	4608      	mov	r0, r1
 80153da:	602b      	str	r3, [r5, #0]
 80153dc:	f7ed fa6d 	bl	80028ba <_isatty>
 80153e0:	1c43      	adds	r3, r0, #1
 80153e2:	d102      	bne.n	80153ea <_isatty_r+0x1a>
 80153e4:	682b      	ldr	r3, [r5, #0]
 80153e6:	b103      	cbz	r3, 80153ea <_isatty_r+0x1a>
 80153e8:	6023      	str	r3, [r4, #0]
 80153ea:	bd38      	pop	{r3, r4, r5, pc}
 80153ec:	240056b4 	.word	0x240056b4

080153f0 <_init>:
 80153f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153f2:	bf00      	nop
 80153f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80153f6:	bc08      	pop	{r3}
 80153f8:	469e      	mov	lr, r3
 80153fa:	4770      	bx	lr

080153fc <_fini>:
 80153fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153fe:	bf00      	nop
 8015400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015402:	bc08      	pop	{r3}
 8015404:	469e      	mov	lr, r3
 8015406:	4770      	bx	lr
